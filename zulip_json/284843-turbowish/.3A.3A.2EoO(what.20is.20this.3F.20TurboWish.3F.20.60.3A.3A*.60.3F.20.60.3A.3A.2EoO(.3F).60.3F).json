[
    {
        "content": "<p>Hey there, anyone watching. One of the things AWS wants to invest in, for Rust, is a tool to help developers ensure that Rust lives up to its promise of being <em>fast</em>.</p>",
        "id": 233950600,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618056838
    },
    {
        "content": "<p>as part of our investigations surrounding that, we think what our customers (who largely operate cloud services) need most right now are better tools for understanding why their async-await code is not performing up to expectations</p>",
        "id": 233950720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618056950
    },
    {
        "content": "<p>(but there are other clear places that <em>also</em> need improvement. For example, it can be really hard to use <code>perf</code> on optimized Rust code.)</p>",
        "id": 233950780,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618056984
    },
    {
        "content": "<p>((and I personally would like to provide memory-profiling tools that leverage Rust's semantic model of ownership to give a richer understanding of memory usage than what you get out of the box with the usual tools built to work with C <em>et cetera</em>))</p>",
        "id": 233950901,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618057125
    },
    {
        "content": "<blockquote>\n<p>For example, it can be really hard to use perf on optimized Rust code.</p>\n</blockquote>\n<p>Do you have a link to something explaining what's hard about it? (I ask this as someone who's never used perf except through perf.rlo.)</p>",
        "id": 234076838,
        "sender_full_name": "Noah Lev",
        "timestamp": 1618175706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/284843-project-turbowish/topic/.3A.3A.2EoO.28what.20is.20this.3F.20TurboWish.3F.20.60.3A.3A*.60.3F.20.60.3A.3A.2EoO.28.3F.29.60.3F.29/near/233950901\">said</a>:</p>\n<blockquote>\n<p>((and I personally would like to provide memory-profiling tools that leverage Rust's semantic model of ownership to give a richer understanding of memory usage than what you get out of the box with the usual tools built to work with C <em>et cetera</em>))</p>\n</blockquote>\n<p>So maybe something where it shows what parts of memory are owned by what functions? E.g., function <code>foo()</code> owns 100 MB of memory and then it narrows down the amount of code you have to look at to reduce memory usage?</p>",
        "id": 234077008,
        "sender_full_name": "Noah Lev",
        "timestamp": 1618175852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/284843-project-turbowish/topic/.3A.3A.2EoO.28what.20is.20this.3F.20TurboWish.3F.20.60.3A.3A*.60.3F.20.60.3A.3A.2EoO.28.3F.29.60.3F.29/near/233950720\">said</a>:</p>\n<blockquote>\n<p>as part of our investigations surrounding that, we think what our customers (who largely operate cloud services) need most right now are better tools for understanding why their async-await code is not performing up to expectations</p>\n</blockquote>\n<p>I've heard of tools like <code>coz</code>, is that sort of thing what you mean?</p>",
        "id": 234077232,
        "sender_full_name": "Noah Lev",
        "timestamp": 1618176059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/284843-project-turbowish/topic/.3A.3A.2EoO.28what.20is.20this.3F.20TurboWish.3F.20.60.3A.3A*.60.3F.20.60.3A.3A.2EoO.28.3F.29.60.3F.29/near/234077232\">said</a>:</p>\n<blockquote>\n<p>I've heard of tools like <code>coz</code>, is that sort of thing what you mean?</p>\n</blockquote>\n<p>No, I mean something more like what I described in <a href=\"https://github.com/rust-lang/wg-async-foundations/pull/138\">https://github.com/rust-lang/wg-async-foundations/pull/138</a></p>",
        "id": 234154027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618232831
    },
    {
        "content": "<p>I'd also love some better memory profiling tools. The existing ones leave a lot to be desired. <code>heaptrack</code> has been the least painful one so far, but its interface is basically inscrutable.</p>",
        "id": 234155187,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618233304
    },
    {
        "content": "<p>Using <code>perf</code> hasn't been too troublesome in my experience. I mean, sure... optimized code is fairly garbled even with source annotations. But that's not particularly surprising when you got a call tree 8 functions deep inlined into one and half of the stuff optimized away. At least it shows the inlined call tree!</p>",
        "id": 234165705,
        "sender_full_name": "The 8472",
        "timestamp": 1618236830
    },
    {
        "content": "<p>The way I think about turbowish is that it the goal is to create a family of tooling that gives users tons of information about their running rust programs</p>",
        "id": 234173293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239354
    },
    {
        "content": "<p>not necessarily all at once</p>",
        "id": 234173385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239377
    },
    {
        "content": "<p>in other words, I think eventually it would be great  to profile memory usage</p>",
        "id": 234173416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239387
    },
    {
        "content": "<p>I'm also pretty keen on finding ways to integrate and track ownership, e.g. by walking the stack, so we can say things like \"this stack frame owns this memory\" or \"the receiver for that <code>std::mpsc::channel</code> you are blocked on is owned by this thread and is found in this data structure\"</p>",
        "id": 234173547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239434
    },
    {
        "content": "<p>(sync things can deadlock too...)</p>",
        "id": 234173565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239440
    },
    {
        "content": "<p>one thing I pointed out to <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that I think is really cool is that, in async functions, all of the stack is actually <em>on the heap</em> and located in data structures for which we have all the type information, we don't have to worry about scraping the stack (which is hard)</p>",
        "id": 234173625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> one of my plans … hopefully near term plans … is to actually do some interviews, or maybe even interactive screencasts, with various <code>perf</code> users</p>",
        "id": 234178903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618240992
    },
    {
        "content": "<p>Specifically: I know from experience (my own and of my colleagues) that <code>perf</code> <em>can</em> be useful, but it also can be totally unhelpful</p>",
        "id": 234178974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241023
    },
    {
        "content": "<p>and it sometimes can even be unclear which state you’re in. (I.e., I sometimes say “Okay, if I dig a little deeper, is <code>perf</code> going to start illuminating things now?\"</p>",
        "id": 234179079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241056
    },
    {
        "content": "<p>Some weeks ago <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> claimed that in their experience, <code>perf</code> is a tool that either yields results for your problem immediately, or it won’t help at all</p>",
        "id": 234179174,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241090
    },
    {
        "content": "<p>Anyway: The idea behind the interviews/interactive screen casts</p>",
        "id": 234179216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241106
    },
    {
        "content": "<p>is to see expert perf users in action</p>",
        "id": 234179245,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241114
    },
    {
        "content": "<p>preferably I want to get evidence of how <code>perf</code> is used well, on both <em>C/C++</em> <strong>and</strong> Rust projects</p>",
        "id": 234179319,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241141
    },
    {
        "content": "<p>that is, I want to know how great <code>perf</code> can be in the optimal setting for it (which I assume is C, probably compiled with <code>gdb</code>)</p>",
        "id": 234179402,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241170
    },
    {
        "content": "<p>and that way, I’ll have an idea of how far one might go with it <em>if</em> we fix foundational issues that prevent Rust from matching C in that space</p>",
        "id": 234179476,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618241204
    },
    {
        "content": "<blockquote>\n<p>Some weeks ago @nikomatsakis claimed that in their experience, perf is a tool that either yields results for your problem immediately, or it won’t help at all</p>\n</blockquote>\n<p>That's my experience with the <code>perf report</code> UI. But if you use a visualiser like hotspot then there's room for additional digging.</p>",
        "id": 234188039,
        "sender_full_name": "The 8472",
        "timestamp": 1618244423
    },
    {
        "content": "<p>On the other hand I would be totally lost if I wanted to do heap profiling. But I haven't heard of heaptrack before.</p>\n<p>So maybe a starting point would be to collect recipes in a cookbook? Common approaches and tricks that people have? I only learned about hotspot through some reddit post, even though I had a stack overflow question open for two years asking for a decent perf UI.</p>",
        "id": 234188509,
        "sender_full_name": "The 8472",
        "timestamp": 1618244629
    },
    {
        "content": "<p>/me goes to check out hotspot</p>",
        "id": 234189953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618245217
    },
    {
        "content": "<p>hotspot is incredibly slow and uses incredible amounts of memory when running it on real-world apps. But when it does work, it works okay. Much better than perf report at least.</p>",
        "id": 234190162,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618245281
    },
    {
        "content": "<p>my experience with perf is that the best results are obtained by going after the base samples and writing programs to process them; but I bet there are other great tools</p>",
        "id": 234191210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618245703
    },
    {
        "content": "<p>I love the idea of watching what expert perf users do :)</p>",
        "id": 234191227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618245711
    }
]