[
    {
        "content": "<p>So I have had this idea for a while, and gave it a try when I read  <a href=\"https://nnethercote.github.io/perf-book/heap-allocations.html#short-vecs\">https://nnethercote.github.io/perf-book/heap-allocations.html#short-vecs</a><br>\nMost <code>Range</code>s have at most 2 <code>Interval</code>s, so try using a small_vec for storing it. <a href=\"https://github.com/pubgrub-rs/pubgrub/compare/dev...small_vec\">Here is the diff</a>, and I am seeing unreasonably good perf improvements. Like 50%<br>\nIf one of you has a chance, can you check if you are getting similar improvements?</p>",
        "id": 217034117,
        "sender_full_name": "Eh2406",
        "timestamp": 1605633771
    },
    {
        "content": "<p>Nice! I was wondering about it too but I kind of remember reading somewhere a post about <code>small_vec</code> not being safe (or maybe it was for an alternative of small_vec, don't remember</p>",
        "id": 217034723,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605634026
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/rust/comments/fshuhk/introducing_tinyvec_100_safe_alternative_to/\">https://www.reddit.com/r/rust/comments/fshuhk/introducing_tinyvec_100_safe_alternative_to/</a></p>",
        "id": 217034994,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605634143
    },
    {
        "content": "<p>Similarly, most incompatibilities have two entries, do you know of a <code>tiny_map</code>? :)</p>",
        "id": 217035502,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605634367
    },
    {
        "content": "<p>I have a similar impression about small_vec having safety issues, and I'd need to verify that since I just vaguely remember as well(</p>",
        "id": 217036082,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605634637
    },
    {
        "content": "<p>That was going to be my next comment! Yes small_vec has a history of using unsafe wrong. (<a href=\"https://github.com/RustSec/advisory-db/tree/master/crates/smallvec\">https://github.com/RustSec/advisory-db/tree/master/crates/smallvec</a>). It is not know to be broken at the moment, but ....</p>",
        "id": 217036249,
        "sender_full_name": "Eh2406",
        "timestamp": 1605634705
    },
    {
        "content": "<p>I also remember mentions of other crates in the space, maybe there are alternatives that would also be good. <br>\nHowever, if they fixed the issues why not give them a chance. Everyone makes mistakes.</p>",
        "id": 217036381,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605634769
    },
    {
        "content": "<p>If one of you confirms the perf wins, then I will start looking into alternative implementations.</p>",
        "id": 217036502,
        "sender_full_name": "Eh2406",
        "timestamp": 1605634812
    },
    {
        "content": "<p>I don't know of a <code>tiny_map</code>, but for the limited functionality we need it is not hard to roll our own.</p>",
        "id": 217036615,
        "sender_full_name": "Eh2406",
        "timestamp": 1605634878
    },
    {
        "content": "<p>In fact we don't need much from the vec in <code>Range</code>. One alternative is to roll our own. Small_vec just has such a small diff that it seemed a good place to start measuring the perf.</p>",
        "id": 217036891,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635019
    },
    {
        "content": "<p>cc: <a href=\"#narrow/stream/146229-wg-secure-code/topic/tinyvec.20without.20default\">https://rust-lang.zulipchat.com/#narrow/stream/146229-wg-secure-code/topic/tinyvec.20without.20default</a></p>",
        "id": 217037085,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/post.200.2E2.20perf.20work.3A.20small_vec/near/217036502\">said</a>:</p>\n<blockquote>\n<p>If one of you confirms the perf wins, then I will start looking into alternative implementations.</p>\n</blockquote>\n<p>I'll run the benchmark shortly. I'm not saying we should disregard <code>small_vec</code>because of past issues, but I very much like the idea of exploring available options.</p>",
        "id": 217037125,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605635130
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">SmallMap</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">One</span><span class=\"p\">([(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Two</span><span class=\"p\">([(</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Flexible</span><span class=\"p\">(</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is one way to roll our own <code>tiny_map</code>, a <code>tiny_vec</code> can work similarly.</p>",
        "id": 217037340,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635236
    },
    {
        "content": "<p>the code is not compiling for me in your small_vec branch</p>",
        "id": 217037537,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605635324
    },
    {
        "content": "<p>ba humbug. let me see...</p>",
        "id": 217037611,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635355
    },
    {
        "content": "<p>I was using <code>cargo bench --features=serde</code> and got compilations errors about range not be serializable because smallvec</p>",
        "id": 217037737,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605635408
    },
    {
        "content": "<p>Right, that is the other thing to fix. <code>cargo bench --features=serde-1</code></p>",
        "id": 217037802,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635452
    },
    {
        "content": "<p>where <code>serde-1</code> therns on serde for pubgrub and the serde feature of smallvec.</p>",
        "id": 217037876,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635503
    },
    {
        "content": "<p>I just run with '--all-features' and it worked.</p>",
        "id": 217037947,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605635528
    },
    {
        "content": "<p>change: [-30.169% -28.831% -27.451%] (p = 0.00 &lt; 0.05)</p>",
        "id": 217037978,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605635542
    },
    {
        "content": "<p>So not 50% but still big.</p>",
        "id": 217038019,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635564
    },
    {
        "content": "<p>There are still a few \"Vec::new()\" in the code in <code>small_vec</code> branch</p>",
        "id": 217038074,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605635597
    },
    {
        "content": "<p>Let me see if replacing them makes a difference</p>",
        "id": 217038095,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605635611
    },
    {
        "content": "<p>got 13% improvement on the elm dataset and 22% improvement for the synthetic one</p>",
        "id": 217038112,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605635619
    },
    {
        "content": "<blockquote>\n<p>There are still a few \"Vec::new()\" in the code in small_vec branch</p>\n</blockquote>\n<p>Actually maybe that's on purpose, not every Vec in our library does not grow</p>",
        "id": 217038511,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605635814
    },
    {
        "content": "<p>So worth pursuing, but not as big as I was seeing. I wonder why the difference, but I will keep playing with this idea. Thank you all.</p>",
        "id": 217038559,
        "sender_full_name": "Eh2406",
        "timestamp": 1605635841
    },
    {
        "content": "<p>I see mentions of <code>array_vec</code> that we also might want to try</p>",
        "id": 217040451,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605636600
    },
    {
        "content": "<p>that works when we know there can't be more than N elements.</p>",
        "id": 217040582,
        "sender_full_name": "Eh2406",
        "timestamp": 1605636655
    },
    {
        "content": "<p>I am done with meetings, so I can run benchmarks on my version of small vec:<br>\n<a href=\"https://github.com/pubgrub-rs/pubgrub/commit/ba5a873d8d188305717127484f86710aabc7240e#diff-fbd4e90bd1c07576edba7f752cccda844f7209ef6f79c25b665bbeceb97c629c\">https://github.com/pubgrub-rs/pubgrub/commit/ba5a873d8d188305717127484f86710aabc7240e#diff-fbd4e90bd1c07576edba7f752cccda844f7209ef6f79c25b665bbeceb97c629c</a><br>\nfor me it works just as well!</p>\n<div class=\"codehilite\" data-code-language=\"cmd\"><pre><span></span><code>large_cases/elm-packages_str_SemanticVersion.ron\n                        time:   [793.53 ms 817.06 ms 840.83 ms]\n                        change: [-51.001% -49.380% -47.701%] (p = 0.00 &lt; 0.05)\n                        Performance has improved.\nlarge_cases/large_case_u16_NumberVersion.ron\n                        time:   [35.874 ms 36.137 ms 36.408 ms]\n                        change: [-56.441% -55.656% -54.887%] (p = 0.00 &lt; 0.05)\n                        Performance has improved.\n</code></pre></div>",
        "id": 217065785,
        "sender_full_name": "Eh2406",
        "timestamp": 1605648638
    },
    {
        "content": "<p>This is awesome if we get that kind of improvements! One remark on the code, it would be better to have <code>Range</code> be a newtype over the custom small vec (like now with Vec inside) instead of have its internals public</p>",
        "id": 217068328,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605650032
    },
    {
        "content": "<p>I assume if I am getting the same 50% improvements then you will see the same 13-20% improvements. I don't know why it is so high for me, windows or <code>target-cpu=native</code> or don't know.<br>\nGood point I forgot it was publick.</p>",
        "id": 217069576,
        "sender_full_name": "Eh2406",
        "timestamp": 1605650629
    },
    {
        "content": "<p>Maybe I'll get better performances with this than with small vec :) will test probably in the weekend. After v0.2 is published I'll take a few days break at least ^^ and get back to my paid work ahah</p>",
        "id": 217069897,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605650785
    },
    {
        "content": "<p>I took a week off, it was sweet but it ends now :(</p>",
        "id": 217069960,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605650821
    },
    {
        "content": "<p>good call on keeping it private it looks much better.</p>",
        "id": 217075548,
        "sender_full_name": "Eh2406",
        "timestamp": 1605654213
    },
    {
        "content": "<p><a href=\"https://github.com/pubgrub-rs/pubgrub/commit/c63cee0485ac5336f2eea2fae74ccccc8dbe5140\">https://github.com/pubgrub-rs/pubgrub/commit/c63cee0485ac5336f2eea2fae74ccccc8dbe5140</a></p>",
        "id": 217075555,
        "sender_full_name": "Eh2406",
        "timestamp": 1605654219
    },
    {
        "content": "<p>Just tested the small_vec branch this morning and getting 24% improvement on elm packages and 44% improvement on large case.</p>",
        "id": 217122337,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605698665
    },
    {
        "content": "<p>I'll take it!</p>",
        "id": 217137612,
        "sender_full_name": "Eh2406",
        "timestamp": 1605708134
    },
    {
        "content": "<p>I will put a PR up after we get 0.2 up!</p>",
        "id": 217139415,
        "sender_full_name": "Eh2406",
        "timestamp": 1605709046
    },
    {
        "content": "<p>Might as well add it now, it's internal API why not</p>",
        "id": 217142849,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605710575
    },
    {
        "content": "<p>Do you like our own definition more than external crate?</p>",
        "id": 217142907,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605710608
    },
    {
        "content": "<p>I haven't thought of all the implications of this yet. And there are places where this is half backed, like for example there is a fallback to hashmap for prior cause computation etc. No need to rush this into v02. It's also good to know there will be nice things coming for v03 ^^</p>",
        "id": 217144473,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605711252
    },
    {
        "content": "<p>I thought this PR is only about Vecs and doesn't attempt to provide a Map.<br>\nBut yeah, no rush merging it. What I meant to say there is no reason to not put the PR up for review when it's ready.</p>",
        "id": 217144850,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605711417
    },
    {
        "content": "<p>I added a commit for a small_map.</p>",
        "id": 217144959,
        "sender_full_name": "Eh2406",
        "timestamp": 1605711464
    },
    {
        "content": "<blockquote>\n<p>And there are places where this is half backed, like for example there is a fallback to hashmap for prior cause computation etc. </p>\n</blockquote>\n<p>Yes that is half baked, but most incompatibilities come from dependencies so I don't think it <em>needs</em> to be fixed. And it is a perf win as is, so it is worth it even if we don't fix it. But that can get discussed in the PR when it is up.</p>",
        "id": 217161670,
        "sender_full_name": "Eh2406",
        "timestamp": 1605717701
    },
    {
        "content": "<p>just went ahead and fixed it. and the PR is up.</p>",
        "id": 217483355,
        "sender_full_name": "Eh2406",
        "timestamp": 1605931544
    },
    {
        "content": "<p>Btw, why didn't we just pull a dep for this in the end?</p>",
        "id": 217505907,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605972328
    },
    {
        "content": "<p>What do you think of using a dep for a vector implementation but implementing our own map since you said it doesn't exist?</p>",
        "id": 217510117,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605979063
    },
    {
        "content": "<p>Although I see some crates we can try out as well, e.g. <a href=\"https://lib.rs/crates/smallmap\">https://lib.rs/crates/smallmap</a></p>",
        "id": 217510197,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605979154
    },
    {
        "content": "<p>Lost some time to a headache today. I will follow up with this when I am feeling better. All the feedback is really good, I am just not up to dealing right now.</p>",
        "id": 217517122,
        "sender_full_name": "Eh2406",
        "timestamp": 1605989918
    },
    {
        "content": "<p>Had a few mins and was able to look into the smallmap crate you linked, and there is a lot I don't get about it. But one think I'm pretty sure of is that it does allocate <a href=\"https://github.com/notflan/smallmap/blob/master/src/lib.rs#L184\">https://github.com/notflan/smallmap/blob/master/src/lib.rs#L184</a>. I think we are getting the speed up by not allocating when making incompatibilities and not having the cache miss when reading them. So whatever use case that crate is intended for I don't think it is ours.</p>",
        "id": 217521749,
        "sender_full_name": "Eh2406",
        "timestamp": 1605996796
    },
    {
        "content": "<p>Yeah I was just a random link; I haven't analyzed applicability of various options, just saw that there were a few.</p>",
        "id": 217522573,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605998210
    }
]