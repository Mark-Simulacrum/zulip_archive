[
    {
        "content": "<p>Hi, thanks for the great work!<br>\nI am currently experimenting with the <code>pubgrub-rs</code> crate and hope to integrate it with <a href=\"http://pypi.org\">pypi.org</a> and especially with <a href=\"https://python-poetry.org/\"><code>poetry</code></a>.</p>\n<p>Currently I am struggling with resolving dependencies for a package because I want to only look up packages that are not my root package on the remote.</p>\n<p>For example let's say I have <code>root</code> at version <code>1.0.0</code> and that has not been released to <a href=\"http://pypi.org\">pypi.org</a>.<br>\nI don't want to look up <code>root</code> at <a href=\"http://pypi.org\">pypi.org</a>, but all other packages.<br>\nBecause <code>choose_package_version</code> get's an <code>impl Iterator</code> I am currently struggling with that.<br>\nWhat I tried to do is show if <code>(T, U) == (\"root\", _)</code>  and if so return <code>(\"root\", 1.0.0)</code> but if it's not <code>root</code> i need to provide the iterator to my remote dependency provider. Even then I can't really get it to work.</p>\n<p>This is the current implementation that does not work.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">choose_package_version</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Borrow</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Borrow</span><span class=\"o\">&lt;</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"n\">PEP440Version</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">potential_packages</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">PEP440Version</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">potential_packages</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">package</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">version</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">remote</span><span class=\"p\">.</span><span class=\"n\">choose_package_version</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Would appreciate any and every help :)</p>",
        "id": 218687041,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1606998964
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"367935\">@MrGreenTea</span> , welcome! If I get the problem right, you are interested in an example of dealing with dependencies of a <strong>project</strong> being worked on instead of dependencies of an already published <strong>package</strong>.<br>\nYour code logic seems fine, is the issue a compilation issue?<br>\nDo you have a repository we could clone to test things?</p>\n<p>PS: I'm currently working on integrating pubgrub-rs into a dependency provider for elm projects so I'll have exactly the same problematic soon and will be able to share a more complete example use case. But that may take few weeks.</p>",
        "id": 218692502,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607002302
    },
    {
        "content": "<p>By the way, the landing page for poetry is magnificent :) and I very much appreciate improvements in managing python packages ^^</p>",
        "id": 218692809,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607002500
    },
    {
        "content": "<p>Just a heads up, looking at the <a href=\"https://python-poetry.org/docs/dependency-specification/\">dependency specifications of poetry</a>, it seems like you have a lot of features for which pubgrub is not ready yet. Things like environment markers, multiple constraints, pre-releases are currently in an exploratory phase: <a href=\"https://github.com/pubgrub-rs/advanced_dependency_providers/issues\">https://github.com/pubgrub-rs/advanced_dependency_providers/issues</a></p>",
        "id": 218695009,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607003707
    },
    {
        "content": "<p>To be clear we would love help figuring out how to get them to work, but we don't have an answer to point you to.</p>",
        "id": 218696622,
        "sender_full_name": "Eh2406",
        "timestamp": 1607004401
    },
    {
        "content": "<p>for the <code>root</code> problem we can collect into a vector.</p>",
        "id": 218696841,
        "sender_full_name": "Eh2406",
        "timestamp": 1607004517
    },
    {
        "content": "<p>indeed, maybe doing <code>vec: Vec&lt;_&gt; = potential_packages.collect();</code> will help. Then in the <code>None</code> case use <code>vec.into_iter()</code>.</p>",
        "id": 218697206,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607004709
    },
    {
        "content": "<p>That's exactly right, I want to resolve packages of the project being worked on.</p>",
        "id": 218711084,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607010029
    },
    {
        "content": "<p>That pubgrub-rs might not support everything is totally okay, we're in the experimental phase too and kinda new to rust as well :)<br>\nI hope to contribute to these things soon if possible.</p>\n<p>I will share the repository tomorrow with the current experiments.</p>",
        "id": 218711260,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607010105
    },
    {
        "content": "<p>I tried collecting into a vector but ran into borrow checker issues I could not resolve yet. I hoped perhaps someone here had a simple solution to this already. Thanks for the quick reply!</p>",
        "id": 218711403,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607010152
    },
    {
        "content": "<p>If you ever work in python you really should use <code>poetry</code>, it's a joy to work with and we use it for all our python projects. I'm not affiliated with them (yet ;) ) though, this is something I'm doing with a colleague for now.</p>",
        "id": 218711554,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607010222
    },
    {
        "content": "<blockquote>\n<p>I hoped perhaps someone here had a simple solution to this already. Thanks for the quick reply!</p>\n</blockquote>\n<p>I'll try to prioritize the things I have to do in that elm dependency provider in order to get as soon as possible to an example related to your use case now that I now that, but might still take some time ^^</p>",
        "id": 218711711,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607010288
    },
    {
        "content": "<p>When the code can be shared, I will be happy to look at the borrow checker issues. They are particularly narly to diagnose without looking at the code.</p>",
        "id": 218713126,
        "sender_full_name": "Eh2406",
        "timestamp": 1607010864
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">choose_package_version</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Borrow</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Borrow</span><span class=\"o\">&lt;</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"n\">PEP440Version</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">potential_packages</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">PEP440Version</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">potential_packages</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">package</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">version</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">remote</span><span class=\"p\">.</span><span class=\"n\">choose_package_version</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is the part I am struggling with.<br>\nI am actually unsure if it's the borrow checker or something else I am clueless about here.<br>\nIn the <code>Some((p, _))</code> case <code>p: &amp;T</code> but I need <code>T</code> and can't move it.<br>\nThis is the error I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"nc\">mismatched</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">poetry_provider</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">41</span>:<span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">33</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">choose_package_version</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Borrow</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Borrow</span><span class=\"o\">&lt;</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"n\">PEP440Version</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                               </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">parameter</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">version</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">T</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">parameter</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">T</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">                   </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218888726,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607114591
    },
    {
        "content": "<p>I don't feel comfortable making the repo public yet, but if you send me your github username I'll add you if you are interested to see the current experiments ;)</p>",
        "id": 218888853,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607114660
    },
    {
        "content": "<p>I am Eh2406 on github, and I am very interested!</p>",
        "id": 218889076,
        "sender_full_name": "Eh2406",
        "timestamp": 1607114781
    },
    {
        "content": "<p>I would like to try to get things to work with the api we have, but it may be that for 0.3 the api may need to be more flexible.</p>",
        "id": 218889194,
        "sender_full_name": "Eh2406",
        "timestamp": 1607114854
    },
    {
        "content": "<p>I've sent you an invite</p>",
        "id": 218889451,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607115003
    },
    {
        "content": "<p>I am getting  Error: \"Python 3.x interpreter not found\" I think I need to set a <code>PYO3_PYTHON</code> but I don't know to what.</p>",
        "id": 218891941,
        "sender_full_name": "Eh2406",
        "timestamp": 1607116342
    },
    {
        "content": "<p>Hm weird, I did not have to do that. I assume set it to the path of your <code>python3</code> binary?</p>",
        "id": 218892145,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607116492
    },
    {
        "content": "<p>With some tinkering I got it to work. That is what I get for having multiple pythons installed.</p>",
        "id": 218892463,
        "sender_full_name": "Eh2406",
        "timestamp": 1607116693
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.partition\">https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.partition</a><br>\nmay be a way to get this to work.</p>",
        "id": 218893040,
        "sender_full_name": "Eh2406",
        "timestamp": 1607117095
    },
    {
        "content": "<p>He cool yeah I got it working with that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">potential_packages</span><span class=\"p\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">package</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">version</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()))),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">remote</span><span class=\"p\">.</span><span class=\"n\">choose_package_version</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218893775,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607117549
    },
    {
        "content": "<p>If the allocations are in the profile, we can optimize with filter map. But we got something working.</p>",
        "id": 218894068,
        "sender_full_name": "Eh2406",
        "timestamp": 1607117697
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">remote</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">choose_package_version</span><span class=\"p\">(</span><span class=\"n\">potential_packages</span><span class=\"p\">.</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">version</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">other</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218895153,
        "sender_full_name": "Eh2406",
        "timestamp": 1607118328
    },
    {
        "content": "<p>But let's stick with the 5 line version until we need to make things more complicated.</p>",
        "id": 218896007,
        "sender_full_name": "Eh2406",
        "timestamp": 1607118844
    },
    {
        "content": "<p>I agree, it works for now on the rust side, thanks a lot!<br>\nI'll have to do some work on the python side now to integrate the solution correctly.</p>",
        "id": 218899921,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607121305
    },
    {
        "content": "<p>I think we'll rewrite this entirely after we're over this initial exploratory phase.</p>",
        "id": 218900403,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607121627
    },
    {
        "content": "<p>The way I am reading the code, this may also be a good place to try and work on <a href=\"https://github.com/pubgrub-rs/advanced_dependency_providers/issues/6\">https://github.com/pubgrub-rs/advanced_dependency_providers/issues/6</a> when we have full examples that can be tested.</p>",
        "id": 218909703,
        "sender_full_name": "Eh2406",
        "timestamp": 1607130166
    },
    {
        "content": "<p>What place exactly do you think would benefit from async? The <code>reqwest</code> calls?</p>",
        "id": 218926574,
        "sender_full_name": "MrGreenTea",
        "timestamp": 1607159092
    },
    {
        "content": "<p>Yes, in theory it can be requesting meny deps in parallel.</p>",
        "id": 218935540,
        "sender_full_name": "Eh2406",
        "timestamp": 1607175410
    },
    {
        "content": "<p>I haven't read <span class=\"user-mention\" data-user-id=\"367935\">@MrGreenTea</span> code, but from pubgrub point of view, only <code>choose_package_version</code> has an opportunity of parallelism/concurency. The <code>get_dependencies</code> method will only be called one at a time when evaluating a chosen package. So depending on the registry architecture and API, it may have an opportunity for parallelism or not in <code>choose_package_version</code>. For example in Elm, there is no API to ask for existing versions of only one package. We can only ask for all existing versions (without their dependencies) or all recent versions (again without their dependencies). So only one network request is made in <code>choose_package_version</code> (actually 0 request since its better to do that request once before solving) and there is no opportunity to do parallel things with elm packages.</p>",
        "id": 218935963,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607176186
    },
    {
        "content": "<p>You are correct. I ment requesting the versions of many packages in parallel.</p>",
        "id": 218936315,
        "sender_full_name": "Eh2406",
        "timestamp": 1607176751
    }
]