[
    {
        "content": "<p>I'm in the process of rewriting the partial solution to get rid of the duality <code>history</code>/<code>memory</code> since it's something I had wanted to do for a looong time. I've all ready except the part with satisfiers which I'm dealing with now and giving me a headache ^^. I'll let you know if it goes well later today if I've found my way through.</p>",
        "id": 239877487,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621694655
    },
    {
        "content": "<p>That is very cool! What is the plan?</p>",
        "id": 239879369,
        "sender_full_name": "Eh2406",
        "timestamp": 1621696197
    },
    {
        "content": "<p>Right now this is my data structure:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// The partial solution contains all package assignments,</span>\n<span class=\"sd\">/// organized by package and historically ordered.</span>\n<span class=\"cp\">#[derive(Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">PartialSolution</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Package</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nc\">Version</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">current_decision_level</span>: <span class=\"nc\">DecisionLevel</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">package_assignments</span>: <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PackageAssignments</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Package assignments contain the potential decision and derivations</span>\n<span class=\"sd\">/// that have already been made for a given package,</span>\n<span class=\"sd\">/// as well as the intersection of terms by all of these.</span>\n<span class=\"cp\">#[derive(Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">PackageAssignments</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Package</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nc\">Version</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">smallest_decision_level</span>: <span class=\"nc\">DecisionLevel</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">highest_decision_level</span>: <span class=\"nc\">DecisionLevel</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dated_derivations</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">DatedDerivation</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assignments_intersection</span>: <span class=\"nc\">AssignmentsIntersection</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">DatedDerivation</span><span class=\"o\">&lt;</span><span class=\"n\">P</span>: <span class=\"nc\">Package</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nc\">Version</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">decision_level</span>: <span class=\"nc\">DecisionLevel</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cause</span>: <span class=\"nc\">IncompId</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239879531,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696336
    },
    {
        "content": "<p>The major advantage is that accessing the right packages during conflict resolution is now a direct access, there is no need to go through the whole history to get packages relevant to a satisfied incompatibility.</p>",
        "id": 239879723,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696469
    },
    {
        "content": "<p>The main disadvantages that's giving me the headache is that I can't figure out how to actually perform conflict resolution if I don't have a unique reference index for each assignment.</p>",
        "id": 239879809,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696545
    },
    {
        "content": "<p>Can we use <code>decision_level</code>?</p>",
        "id": 239879900,
        "sender_full_name": "Eh2406",
        "timestamp": 1621696622
    },
    {
        "content": "<p>I've been thinking quite a lot and I feel it's not easy because if packages are split by key in a map, it's hard to have more precise global order than what the decision level gives</p>",
        "id": 239879908,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696629
    },
    {
        "content": "<p>and with only decision level, the annoying thing is this:</p>\n<blockquote>\n<p>Find the earliest assignment in the partial solution before satisfier such that incompatibility is satisfied by the partial solution up to and including that assignment plus satisfier. Call this previousSatisfier</p>\n</blockquote>",
        "id": 239879944,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696673
    },
    {
        "content": "<p>Because I can only identify \"a package that has the same decision level than the satisfier\" and not \"the satisfier\"</p>",
        "id": 239880005,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696704
    },
    {
        "content": "<p>hmmm....</p>",
        "id": 239880051,
        "sender_full_name": "Eh2406",
        "timestamp": 1621696752
    },
    {
        "content": "<p>This results in the fact that if two different packages at the same decision level are potential satisfiers, I might end up picking the \"wrong one\"</p>",
        "id": 239880054,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696758
    },
    {
        "content": "<p>So I've been thinking \"is there a wrong one actually\"?</p>",
        "id": 239880063,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621696775
    },
    {
        "content": "<p>I don't think so. the order we find incompats to be almost satisficed is not guaranteed.</p>",
        "id": 239880163,
        "sender_full_name": "Eh2406",
        "timestamp": 1621696859
    },
    {
        "content": "<p>And there is this situation:</p>\n<ul>\n<li>package a has assignments a1 and a2</li>\n<li>package b has assignments b2 only where a2 and b2 are potential satisfiers (same decision level)</li>\n</ul>\n<p>If I pick a2, there will be a previous satisfier since a1 exists, but if the actual satisfier was a2 and I pick b2 I won't find a previous satisfier since there is no package earlier that would satisfy package b ...</p>",
        "id": 239880404,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621697063
    },
    {
        "content": "<p>Does it makes sense?</p>",
        "id": 239880447,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621697117
    },
    {
        "content": "<p>I think so.</p>",
        "id": 239880540,
        "sender_full_name": "Eh2406",
        "timestamp": 1621697211
    },
    {
        "content": "<p>I could also not bother too much and just store a unique index in addition to the decision level for each assignment. Make it work then improve</p>",
        "id": 239880547,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621697223
    },
    {
        "content": "<p>That seams a resendable pan.</p>",
        "id": 239880583,
        "sender_full_name": "Eh2406",
        "timestamp": 1621697275
    },
    {
        "content": "<p>If the performance is horrible, that's not by removing that u32 index that miracles will happen. But if it's good, we can think of improvements later</p>",
        "id": 239880647,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621697323
    },
    {
        "content": "<p>alright I'll try that</p>",
        "id": 239880676,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621697351
    },
    {
        "content": "<p>elm and synthetic do not have much backtracking. so brake even is a win for them.</p>",
        "id": 239880836,
        "sender_full_name": "Eh2406",
        "timestamp": 1621697507
    },
    {
        "content": "<p>I've pushed what I got even though it does not pass the tests. I must have introduced a bug but my head is not clear enough to spot it anymore. The interesting stuff is in <code>partial_solution_bis</code>. I haven't removed anything, but by the end of this PR, we should be able to remove <code>memory</code> and <code>assignment</code> modules to be left with just <code>partial_solution_bis</code> renamed into <code>partial_solution</code>.</p>",
        "id": 239896228,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621713346
    },
    {
        "content": "<p>A possible debugging approach, add a <code>partial_solution_both</code> that wraps both the old and new versions and asserts that they return the same thing for all methods.</p>",
        "id": 239898247,
        "sender_full_name": "Eh2406",
        "timestamp": 1621715571
    },
    {
        "content": "<p>that's smart! I might try tomorrow if I find the time!</p>",
        "id": 239898782,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621716116
    },
    {
        "content": "<p>Ok looking into witch impl of <code>previous_satisfier</code> is \"correct\", I looked at:<br>\nthe blog: <a href=\"https://medium.com/@nex3/pubgrub-2fb6470504f#cbda\">https://medium.com/@nex3/pubgrub-2fb6470504f#cbda</a><br>\nthe docs: <a href=\"https://github.com/dart-lang/pub/blob/master/doc/solver.md#conflict-resolution\">https://github.com/dart-lang/pub/blob/master/doc/solver.md#conflict-resolution</a><br>\nand the impl: <a href=\"https://github.com/dart-lang/pub/blob/291705ca0b9632cb945dd39493dd5b9db41b897a/lib/src/solver/version_solver.dart#L201\">https://github.com/dart-lang/pub/blob/291705ca0b9632cb945dd39493dd5b9db41b897a/lib/src/solver/version_solver.dart#L201</a></p>\n<p>and I don't think any two of them are the same thing!</p>",
        "id": 239990084,
        "sender_full_name": "Eh2406",
        "timestamp": 1621817131
    },
    {
        "content": "<p>I've tried to read carefully pub impl and I think it's the same as the docs, just implemented a tiny bit weirdly because she does only one pass and thus need the special treatment at <a href=\"https://github.com/dart-lang/pub/blob/291705ca0b9632cb945dd39493dd5b9db41b897a/lib/src/solver/version_solver.dart#L247\">https://github.com/dart-lang/pub/blob/291705ca0b9632cb945dd39493dd5b9db41b897a/lib/src/solver/version_solver.dart#L247</a> in order to correctly identify that previous satisfier. While we do a second pass where we initialize the accum term with the satisfier term so we don't need that special treatment.</p>",
        "id": 240019061,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621843739
    },
    {
        "content": "<p>Also, I tried displaying some stats for the resolution of the package <code>\"zuse-Minor(4)-All-FEATURES\"</code> and I obtained the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>With your approach:\n\n    Final state stats:\n    Size of the incompatibility store: 152\n    Size of saved incompatibilities: 282\n\n    Partial solution stats:\n    next_global_index: 174\n    Number of derivations: 48\n\nWith the approach that choose the &quot;correct&quot; previous decision level:\n\n    Final state stats:\n    Size of the incompatibility store: 205\n    Size of saved incompatibilities: 393\n\n    Partial solution stats:\n    next_global_index: 386\n    Number of derivations: 53\n</code></pre></div>\n<p>So I think the intuition saying that applying a \"rule of resolution\" to find the previous cause of a satisfier package that is seen for the first time (the behavior change concerns only situations where there is no previous derivation to the one of the satisfier for that package) instead of backtracking (which would happen if some other package has a lower satisfier level) is a good heuristic. Because it essentially says: \"try first to find the reason why we have that derived package term that we see for the first time\"</p>",
        "id": 240019814,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621844248
    },
    {
        "content": "<blockquote>\n<p>So I think the intuition saying that applying a \"rule of resolution\" to find the previous cause of a satisfier package that is seen for the first time</p>\n</blockquote>\n<p>Currently, the only way a term can appear for the first time is via an incompatibility (i12) generated by a previous package P1 depending on that package P2 (of the satisfied term). So essentially, if the satisfier is the first term of a given package P2, with the current rules of how terms can be generated, it means that the decision (picking P1) that lead to the incompatibility (i12) that lead to that first satisfier term was probably a wrong decision.</p>\n<p>So instead of backtracking right away, we first apply the rule of resolution (<a href=\"https://pubgrub-rs-guide.netlify.app/internals/incompatibilities.html#rule-of-resolution\">https://pubgrub-rs-guide.netlify.app/internals/incompatibilities.html#rule-of-resolution</a>) between the current incompat and the incompat (i12) cause of that satisfier term. Since they both have P2 in common and the term of the new one satisfies the term of  the old one, we are in the simple situation of the type (Ta, -Tb) and (Tb, -Tc) implies (Ta, -Tc). And now we pick that derived new incompatibility and continue conflict resolution.</p>\n<p>So essentially, the changes you introduced is like a shortcut to more general incompatibilities that works thanks to the fact that the only way a package term can appear for the first time is to be a derived term from the incompatibility generated by a package dependency.</p>\n<p>The question is, if eventually we allow more ways for incompatibilities to appear (like just specifying forbidden versions, or whatever) would those new ways will be compatible with that shortcut? Or will it lead to unwanted behaviors (like infinite loop for example)?</p>",
        "id": 240165994,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621937315
    },
    {
        "content": "<p>Let me see if I can talk thru an example.<br>\nIn order for a incompat to have one term, (and not be root) it must be <code>NoVersions</code> or  <code>UnavailableDependencies</code>. Something like <code>Negative(bad=1.0.0)</code>.<br>\nIn order for that to be satisfied the intersected term for <code>bad</code> must be <code>Positive(bad=1.0.0)</code>.<br>\nIn order for there to be only one assignment to the partial solution related to <code>bad</code>, it must be a dependency on <code>bad</code>. Something like <code>foo 1.0.0 depends on bad 1.0.0</code>.<br>\nSo the \"rule of resolution\" does seam like the next logical step. In this example giving us <code>Negative(foo=1.0.0)</code></p>",
        "id": 240328481,
        "sender_full_name": "Eh2406",
        "timestamp": 1622037507
    },
    {
        "content": "<p>I don't see how that logic will change with any of the other kinds of incompatibilities I can think of adding. But we can change the code here when we add the new incompatibilities if it is making trouble.</p>",
        "id": 240328957,
        "sender_full_name": "Eh2406",
        "timestamp": 1622037712
    },
    {
        "content": "<p>Sorry for going silent about this project for a while. I have been doing research trying to figure out what invariants the code has, buy adding debug_asserts, and by reading up on other SAT solvers. I think I am getting somewhere with understanding <code>previous_satisfier</code>. But can't quite get it in words yet.</p>",
        "id": 243051209,
        "sender_full_name": "Eh2406",
        "timestamp": 1623949752
    },
    {
        "content": "<p>no worry ^^. I'm quite silent too. We have had two interns arriving for the summer so I've had a bit more stuff to do than usual anyway. I'll try making progress on the advanced deps provider docs tomorrow. How is your computer doing?</p>",
        "id": 243268574,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624136015
    },
    {
        "content": "<p>Also, I'll probably be radio silent starting from next weekend until 14th of July</p>",
        "id": 243268644,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624136094
    },
    {
        "content": "<blockquote>\n<p>How is your computer doing?</p>\n</blockquote>\n<p>The tiny little $3 south bridge fan is broken. It is not a standard part. The manufacturer claims that it is absolutely necessary and I should not turn on the computer without it. So they will be happy to send me a replacement, as soon as they get them back in stock. But they don't know when that will be.</p>",
        "id": 243270149,
        "sender_full_name": "Eh2406",
        "timestamp": 1624138433
    },
    {
        "content": "<blockquote>\n<p>I'll try making progress on the advanced deps provider docs tomorrow.</p>\n</blockquote>\n<p>I am getting distracted by a new plan to impl the RangeTrait for Cargos Semver. I think this may work.</p>",
        "id": 243270218,
        "sender_full_name": "Eh2406",
        "timestamp": 1624138531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/partial_solution/near/243270149\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>How is your computer doing?</p>\n</blockquote>\n<p>The tiny little $3 south bridge fan is broken. It is not a standard part. The manufacturer claims that it is absolutely necessary and I should not turn on the computer without it. So they will be happy to send me a replacement, as soon as they get them back in stock. But they don't know when that will be.</p>\n</blockquote>\n<p>That sucks :(</p>",
        "id": 243291368,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624174590
    }
]