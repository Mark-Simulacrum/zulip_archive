[
    {
        "content": "<p>We need to choose a format to keep our test data in. The data is mostly going to consist of 1) a list of all packages with their published versions 2) dependency trees for those packages; the format should accommodate those. It should be human readable, so binary formats can probably be safely skipped altogether.</p>\n<p>Some choices that come to mind:<br>\n1) TOML as it is used in Cargo. Not sure if it's a proper choice due to the flat structure.<br>\n2) JSON. Common choice with performant parsers available. Downsides of having no comments (major) and trailing commas (minor) ask to look into other options.<br>\n3) RON. Solves the JSON downsides listed above. As it was created specifically with Rust interoperability in mind, it should provide natural mapping to the actual structs in the code.</p>\n<p>Feel free to comment on the options from the list and bring up new suggestions. If someone actually used RON and has some experience to share, I'd be glad to hear.</p>",
        "id": 212478176,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602014734
    },
    {
        "content": "<p>Never use RON myself. Seems a good choice, but <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> has probably the best insight on this.</p>",
        "id": 212482956,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602016918
    },
    {
        "content": "<p>I thought I would like toml. but the way it stored a crate with 2 dependents was a no go. Comments are needed, so I am working from RON for now. Thanks for the sugestion!</p>",
        "id": 212486888,
        "sender_full_name": "Eh2406",
        "timestamp": 1602018941
    },
    {
        "content": "<p>You are welcome.</p>\n<p>If someone else sees this thread and has something to add I'd be glad to hear from anyone. :)</p>",
        "id": 212488712,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602019951
    },
    {
        "content": "<p>Here is what I have so far. For example <code>fn no_conflict()</code>'s solver is encoded as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"root\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"1.0.0\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"foo\"</span>: <span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">segments</span>: <span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"s\">\"1.0.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"2.0.0\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"foo\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"1.0.0\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"bar\"</span>: <span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">segments</span>: <span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"s\">\"1.0.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"2.0.0\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"bar\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"2.0.0\"</span>: <span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"1.0.0\"</span>: <span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212493815,
        "sender_full_name": "Eh2406",
        "timestamp": 1602023182
    },
    {
        "content": "<p>Looks pretty clean</p>",
        "id": 212518911,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602051543
    },
    {
        "content": "<p>The <code>(segments: [...])</code> is a rather literal mirror of the <code>Range</code> implementation. Since dependency constraints are more restricted (not the result of intersections and unions of ranges) would it make more sense to have a special codec that generate things more similar to what is usable in <code>Cargo.toml</code>, or maybe more systematic since every correct dependency can be expressed in this form maybe <code>1.0.0 &lt;= v &lt; 1.4.5</code></p>",
        "id": 212540668,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602067405
    },
    {
        "content": "<p>I agree it would be great to have it more general to allow us to change the representation in the future.</p>",
        "id": 212540977,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602067588
    },
    {
        "content": "<p>Regarding <code>1.0.0 &lt;= v &lt; 1.4.5</code>, I'm a bit cautious if we are about to reinvent our own semver that uses explicit ranges only? If so, does it make sense to do it or are we better off using the semver spec itself?</p>",
        "id": 212541647,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602068059
    },
    {
        "content": "<p>some minor improvements:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dependencies</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"bar\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"1.0.0\"</span>: <span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"2.0.0\"</span>: <span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"foo\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"1.0.0\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"bar\"</span>: <span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"s\">\"1.0.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"2.0.0\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"root\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"1.0.0\"</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"s\">\"foo\"</span>: <span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"s\">\"1.0.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"2.0.0\"</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212556818,
        "sender_full_name": "Eh2406",
        "timestamp": 1602076864
    },
    {
        "content": "<p>And I am feeling \"perfect is the enemy of good\" vibes. I'd love to improve the range representation, get rid of the <code>[</code> if there is only one item, but I don't want to add a lot of potentially buggy parsing and deparsing  code while still working on adding other needed testing. <br>\nThen again writing it to a file was easier than I expected, so it may be worth a quick try.</p>",
        "id": 212558703,
        "sender_full_name": "Eh2406",
        "timestamp": 1602077690
    },
    {
        "content": "<p>99% of the time it's going to be 1 item, might be worth hiding the array if it's not too much of a hustle.<br>\nCargo doesn't even support disjoint ranges, does it?</p>",
        "id": 212559841,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602078184
    },
    {
        "content": "<p>Let me know if you need some help with this btw</p>",
        "id": 212559891,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602078214
    },
    {
        "content": "<p>I know there is talk of adding and \"or\" syntax to semver. Do you know what is it? As you sead, we may as well be valid semver.</p>",
        "id": 212560639,
        "sender_full_name": "Eh2406",
        "timestamp": 1602078523
    },
    {
        "content": "<p>My personal impression (that you may have deduced already ^^) is that I don't like much all the ranges syntax of semver that we see in the wild. I don't think the semver spec itself specifies anything more than what versions means. To my understanding, those ranges syntaxes are mostly there to make it easier to write configuration files in the npm ecosystem which popularized them. But the exact meaning of caret <code>^</code> or tilde <code>~</code> for example is not clear at all until you read somewhere what they mean. What I like about things like <code>v1 &lt;= v &lt; v2</code> is that it works whatever the system of versions you are using, numbers, semantic versions, strings, whatever as long as they have an order. That's why I proposed this as an example. It's not as much as reinventing semver, but rather staying as close as possible to the meaning of our version trait. At least that's how I see it, but that's not me doing the work ^^</p>",
        "id": 212564174,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602080049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/Test.20data.20format/near/212558703\">said</a>:</p>\n<blockquote>\n<p>And I am feeling \"perfect is the enemy of good\" vibes. I'd love to improve the range representation, get rid of the <code>[</code> if there is only one item, but I don't want to add a lot of potentially buggy parsing and deparsing  code while still working on adding other needed testing. </p>\n</blockquote>\n<p>That makes perfect sense!</p>",
        "id": 212564793,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602080324
    },
    {
        "content": "<p>I like math notation for specifying ranges, e.g. \"[1, 2)\" for 1 inclusive, 2 exclusive. It gets rid of some arbitrary symbol in the middle (\"v\") and is quite established.<br>\nNot sure how it fits in RON file though, where [] are for arrays and () are for tuples. Might make it confusing.<br>\nWhat do you think guys?</p>",
        "id": 212565745,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602080740
    },
    {
        "content": "<blockquote>\n<p>Then again writing it to a file was easier than I expected, so it may be worth a quick try.</p>\n</blockquote>\n<p>Poked at it this morning, and did not get a solution I was happy with. So I am leaning to making these improvements, in some other PR.</p>",
        "id": 212577284,
        "sender_full_name": "Eh2406",
        "timestamp": 1602085105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"340766\">Alex Tokarev</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/Test.20data.20format/near/212565745\">said</a>:</p>\n<blockquote>\n<p>I like math notation for specifying ranges, e.g. \"[1, 2)\" for 1 inclusive, 2 exclusive. It gets rid of some arbitrary symbol in the middle (\"v\") and is quite established.</p>\n</blockquote>\n<p>Did you meant \"[1, 2[\"? the \")\" is rather for directions so more or less infinite here. Like it to :) and the <code>None</code> case, which corresponds to infinite could be something like \"[1,[\" with an empty second slot.</p>\n<blockquote>\n<p>Poked at it this morning, and did not get a solution I was happy with</p>\n</blockquote>\n<p>Makes sense to improve this later then</p>",
        "id": 212619743,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602105050
    },
    {
        "content": "<p>Where I studied we used round braces to specify \"exclusive\". First time I see the reverse square bracket.<br>\nMight just be country specific.</p>",
        "id": 212627106,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602109770
    },
    {
        "content": "<p>[1, ∞)<br>\nThat's how infinity would be indicated</p>",
        "id": 212627223,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602109875
    },
    {
        "content": "<p>btw, just found <a href=\"https://github.com/afilip1/ronfmt\">https://github.com/afilip1/ronfmt</a> it works great for benchmark files!</p>",
        "id": 212968820,
        "sender_full_name": "Eh2406",
        "timestamp": 1602428895
    },
    {
        "content": "<p>Nice find! I was looking for Intellij plugin to do that, found one that was released a few versions ago and I couldn't use that. I thought of maybe trying to upgrade it, but your solution solves the problem right away <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213075822,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602529820
    }
]