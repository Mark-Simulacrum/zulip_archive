[
    {
        "content": "<p>Ok so I can't fuzz to make sure two runs have the same output, because it mostly depends on the hashing. That may get fixed tomorrow, but in the meantime, I can test that two runs ether bouth pass or both fail. Something's not right if one passes and one fails. Inspired by a related test in cargo <a href=\"https://github.com/rust-lang/cargo/blob/master/crates/resolver-tests/tests/resolve.rs#L93\">https://github.com/rust-lang/cargo/blob/master/crates/resolver-tests/tests/resolve.rs#L93</a>. Run the proptest code and get a wall of failing. Rerun with the output in ron format, and hand minimize. and here is the case:</p>",
        "id": 212642733,
        "sender_full_name": "Eh2406",
        "timestamp": 1602125610
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>:<span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>:<span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>:<span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">1</span>:<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">1</span>:<span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nb\">None</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">1</span>:<span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"nb\">None</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span>:<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">2</span>:<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">None</span><span class=\"p\">)],</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">3</span>:<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">None</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212642735,
        "sender_full_name": "Eh2406",
        "timestamp": 1602125617
    },
    {
        "content": "<p>Driven by:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"serde\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">err_the_same_1</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"test-examples/err_the_same_u16_NumberVersion.ron\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dependency_provider</span>: <span class=\"nc\">OfflineDependencyProvider</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NumberVersion</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ron</span>::<span class=\"n\">de</span>::<span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">dependency_provider</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">is_ok</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">dependency_provider</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">is_ok</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212642790,
        "sender_full_name": "Eh2406",
        "timestamp": 1602125700
    },
    {
        "content": "<p>Most of the time the <code>resolve</code> returns </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>: <span class=\"nc\">NumberVersion</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"nc\">NumberVersion</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">4</span>: <span class=\"nc\">NumberVersion</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">3</span>: <span class=\"nc\">NumberVersion</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>but about 1/3 calls return an error. That feels to me like there has to be a bug somewhere.</p>",
        "id": 212642922,
        "sender_full_name": "Eh2406",
        "timestamp": 1602125906
    },
    {
        "content": "<p>Indeed! I'll have a look at this one tonight</p>",
        "id": 212660553,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602146051
    },
    {
        "content": "<p>Just rewriting it with letters and numbers to make it easier to analyze later</p>\n<p>a0 has no dep<br>\nb2 has no dep<br>\nc0 has no dep<br>\nc1 dep on b0<br>\nd0 dep on b&gt;=3<br>\nd1 dep on b&gt;=2<br>\ne0 dep on c and d</p>\n<p>Solution: e0, d1, b2, c0</p>",
        "id": 212662047,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602147012
    },
    {
        "content": "<p>Alright, simplified this a bit, we get to that test, that has the same issues as described:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">pubgrub</span>::<span class=\"n\">error</span>::<span class=\"n\">PubGrubError</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">pubgrub</span>::<span class=\"n\">range</span>::<span class=\"n\">Range</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">pubgrub</span>::<span class=\"n\">report</span>::<span class=\"p\">{</span><span class=\"n\">DefaultStringReporter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Reporter</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">pubgrub</span>::<span class=\"n\">solver</span>::<span class=\"p\">{</span><span class=\"n\">resolve</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OfflineDependencyProvider</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">pubgrub</span>::<span class=\"n\">version</span>::<span class=\"n\">NumberVersion</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"sd\">/// a0 dep on b and c</span>\n<span class=\"sd\">/// b0 dep on d0</span>\n<span class=\"sd\">/// b1 dep on d1 (not existing)</span>\n<span class=\"sd\">/// c0 has no dep</span>\n<span class=\"sd\">/// c1 dep on d2 (not existing)</span>\n<span class=\"sd\">/// d0 has no dep</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Solution: a0, b0, c0, d0</span>\n<span class=\"k\">fn</span> <span class=\"nf\">problem</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">dependency_provider</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OfflineDependencyProvider</span>::<span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NumberVersion</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dependency_provider</span><span class=\"p\">.</span><span class=\"n\">add_dependencies</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Range</span>::<span class=\"n\">any</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Range</span>::<span class=\"n\">any</span><span class=\"p\">())]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dependency_provider</span><span class=\"p\">.</span><span class=\"n\">add_dependencies</span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Range</span>::<span class=\"n\">exact</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dependency_provider</span><span class=\"p\">.</span><span class=\"n\">add_dependencies</span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Range</span>::<span class=\"n\">exact</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dependency_provider</span><span class=\"p\">.</span><span class=\"n\">add_dependencies</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dependency_provider</span><span class=\"p\">.</span><span class=\"n\">add_dependencies</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Range</span>::<span class=\"n\">exact</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dependency_provider</span><span class=\"p\">.</span><span class=\"n\">add_dependencies</span><span class=\"p\">(</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Solution.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">expected_solution</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashMap</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">expected_solution</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">expected_solution</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">expected_solution</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">expected_solution</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"n\">into</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Run the algorithm.</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">dependency_provider</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">computed_solution</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">expected_solution</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">computed_solution</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">PubGrubError</span>::<span class=\"n\">NoSolution</span><span class=\"p\">(</span><span class=\"n\">derivation_tree</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DefaultStringReporter</span>::<span class=\"n\">report</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">derivation_tree</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Don't hesitate to have a try at figuring it out. I'll have a try tonight</p>",
        "id": 212664257,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602148436
    },
    {
        "content": "<blockquote>\n<p>Don't hesitate to have a try at figuring it out.</p>\n</blockquote>\n<p>If only I could work on this full time :D</p>",
        "id": 212671708,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602153533
    },
    {
        "content": "<p>If you find that job, can I get highered too?</p>",
        "id": 212697750,
        "sender_full_name": "Eh2406",
        "timestamp": 1602167306
    },
    {
        "content": "<p>the report is </p>\n<div class=\"codehilite\"><pre><span></span><code>Because there is no version of b in 2 &lt;= v and b 0 depends on d 0, b [ 0, 1 [  [ 2, ∞ [ depends on d 0.\nAnd because b 1 depends on d 1 and a 0 depends on b, a 0 is forbidden.\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"348419\">@Matthieu Pizenberg</span> Do you have advice on how to start debugging?</p>",
        "id": 212699118,
        "sender_full_name": "Eh2406",
        "timestamp": 1602167871
    },
    {
        "content": "<p>I think it's an instance of a bug I've been chasing for quite some time. I'll let you know where to put some <code>println</code> as a start</p>",
        "id": 212705401,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602170240
    },
    {
        "content": "<p>So it's an issue related to computation of prior causes. So the first thing I'd do is uncomment and slightly change the three commented lines in <code>core.rs</code>just after computation of prior cause. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">cause 1: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">current_incompat</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"cause 2: {} (satisfier)\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">cause</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"prior cause: {}</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">prior_cause</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>and add a <code>eprintln!(\"backtrack\");</code> in <code>core::State::backtrack</code> function to cover all branches of conflict resolution</p>",
        "id": 212706646,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602170700
    },
    {
        "content": "<p>If you do this, at some point in there will be something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">b</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">∞</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"n\">depends</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">b</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">depends</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">satisfier</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">prior</span><span class=\"w\"> </span><span class=\"n\">cause</span>: <span class=\"nc\">b</span><span class=\"w\"> </span><span class=\"err\">∗</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">forbidden</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This is a weird situation because we have to compute prior cause something in the form of { a1, not b1} with something of the form {a2, not b2} which will result in something of the form {a1 union a2, not b1 union not b2}, with the \"not b1 union not b2\" that may return \"not none\" which is always satisfied and thus removed from the incompatibility. Leaving us with the \"a1 union a2\" side, which here is \"b * is forbidden\" , i.e. { b: any }</p>",
        "id": 212708290,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602171362
    },
    {
        "content": "<p>The issue here comes either from the fact that the two causes are not good, or from the fact that prior computation is not good.<br>\nAnd these corresponds to places where we might have some misinterpretation of my part from pubgrub description on github. Specifically ...</p>",
        "id": 212708643,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602171526
    },
    {
        "content": "<p>The documentation uses <code>incompatibility</code> everywhere for things that are function arguments and mutated in place. In particular, in unit propagation (<a href=\"https://github.com/dart-lang/pub/blob/master/doc/solver.md#unit-propagation\">https://github.com/dart-lang/pub/blob/master/doc/solver.md#unit-propagation</a>) it says to \"run conflict resolution with incompatibility\" and later \"Add not term to the partial solution with incompatibility as its cause\" whereas meanwhile conflict resolution also uses the word <code>incompatibility</code> and mutates it in place with prior causes. I have not looked at dart code, but from my tests in elm, it \"worked\" (most of the time) when I used the root cause returned by conflict resolution as its cause. And when it didn't (this very bug) changing to the original incompatibility would not solve it.</p>\n<p>BUT, that may be a side effect of the second place where interpretation plays a role in that document ...</p>",
        "id": 212709462,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602171895
    },
    {
        "content": "<p>At the end of the conflict resolution algorithm (<a href=\"https://github.com/dart-lang/pub/blob/master/doc/solver.md#conflict-resolution\">https://github.com/dart-lang/pub/blob/master/doc/solver.md#conflict-resolution</a>) there is an explanation of how to compute a prior cause, and it is pretty confusing. While the general text above says things pretty clear like</p>\n<blockquote>\n<p>In fact, we can generalize this: given any incompatibilities {t1, q} and {t2, r}, we can derive {q, r, t1 ∪ t2}</p>\n</blockquote>\n<p>the actual algorithm description does something very twisted, using new type of operations like the set <code>\\</code> as in <code>not (satisfier \\ term)</code>. Every time I've tried to analyze this deeply I came to the conclusion that all operations with the terms of that package are the same than doing <code>term union not(satisfier)</code> and remove it if that becomes <code>not none</code> which is always satisfied. And that itself was the same as just doing the union of all the terms in the two causes (but I may be wrong here) and applying the same removal for other packages always satisfied.</p>",
        "id": 212710693,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602172394
    },
    {
        "content": "<p>I'm pretty sure I've done every variation that may be a correct interpretation of those things. But I've never looked at the dart code so ... maybe the key is here</p>",
        "id": 212710994,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602172517
    },
    {
        "content": "<p>Or maybe, this is not a problem in unit propagation or conflict resolution but a side effect of a problem somewhere else. But that's why I've put a lot of property testing of the other base components of this algorithm like range, or term.</p>\n<p>I hope that since you have a fresh eye on this, you'll see what I didn't</p>",
        "id": 212711292,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602172641
    },
    {
        "content": "<p>This all sounds like it has been a lot of work on your part and very frustrating.</p>",
        "id": 212711348,
        "sender_full_name": "Eh2406",
        "timestamp": 1602172671
    },
    {
        "content": "<p>Yes that has been frustration number 1 ahah</p>",
        "id": 212711444,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602172695
    },
    {
        "content": "<p>And exactly why I want fuzz testing on as much as possible. It is so hard to look at an algorithm (in words or code) and be sure it is correct.</p>",
        "id": 212711609,
        "sender_full_name": "Eh2406",
        "timestamp": 1602172763
    },
    {
        "content": "<p>And before you came up with that example, everywhere I had seen this manifest, saying there was no solution was actually the right answer, even if the reason it found didn't make much sense</p>",
        "id": 212711634,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602172772
    },
    {
        "content": "<p>So I was in doubt, but thinking, maybe it works but the slight variations I have make it so the explanation is a bit weird</p>",
        "id": 212711816,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602172837
    },
    {
        "content": "<p>In a way, it's almost a satisfaction that you proved it's a bug. I'm not in doubt anymore ahah</p>",
        "id": 212712008,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602172920
    },
    {
        "content": "<p>That is a relief. I was worried you'd be upset. I was pretty upset when proptest found its first bug in stable functionality in Cargo, and I was the one that wrote the test.</p>",
        "id": 212712813,
        "sender_full_name": "Eh2406",
        "timestamp": 1602173240
    },
    {
        "content": "<p>Don't worry, I'm dealing with researcher code on a daily basis, I'm used to things being broken in very subtle algorithmic ways ^^. It's way better to have a simple example of why that's broken</p>",
        "id": 212713155,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602173377
    },
    {
        "content": "<p>so far I added the <code>eprintln</code> you suggested. Still figuring out what it means.</p>\n<div class=\"codehilite\"><pre><span></span><code>start\n\ncause 1: b 2 &lt;= v is forbidden\ncause 2: b 0 depends on d 0\nprior cause: b [ 0, 1 [  [ 2, ∞ [ depends on d 0\n\n\ncause 1: b [ 0, 1 [  [ 2, ∞ [ depends on d 0\ncause 2: b 1 depends on d 1\nprior cause: b ∗ is forbidden\n\n\ncause 1: b ∗ is forbidden\ncause 2: a 0 depends on b\nprior cause: a 0 is forbidden\n\nthread &#39;problem&#39; panicked at &#39;Because there is no version of b in 2 &lt;= v and b 0 depends on d 0, b [ 0, 1 [  [ 2, ∞ [ depends on d 0.\nAnd because b 1 depends on d 1 and a 0 depends on b, a 0 is forbidden.&#39;\n</code></pre></div>",
        "id": 212713702,
        "sender_full_name": "Eh2406",
        "timestamp": 1602173617
    },
    {
        "content": "<p>those are the two incompatibilities used to compute a prior cause incompatibility in one step of the conflict resolution loop</p>",
        "id": 212714005,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602173730
    },
    {
        "content": "<p>As I am reading it:</p>\n<div class=\"codehilite\"><pre><span></span><code>cause 1: b [ 0, 1 [  [ 2, ∞ [ depends on d 0\ncause 2: b 1 depends on d 1\nprior cause: b ∗ is forbidden\n</code></pre></div>\n\n\n<p>is just wrong. <br>\ncause 1: I read as <code>b</code> not v1 depends on <code>d0</code>, which is an odd way of saying it but is true.<br>\ncause 2: I read as  <code>b1</code>depends on <code>d1</code>, witch is straightforwardly true.<br>\nprior cause: is just wrong. and does not follow.</p>",
        "id": 212715029,
        "sender_full_name": "Eh2406",
        "timestamp": 1602174171
    },
    {
        "content": "<p>So the first one would read \"Every version of b except version 1 depend on d0\"</p>",
        "id": 212717309,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602175273
    },
    {
        "content": "<p>and that is true</p>",
        "id": 212717339,
        "sender_full_name": "Eh2406",
        "timestamp": 1602175294
    },
    {
        "content": "<p>It's just that I didn't implement a check for such situation so it just prints the segments (which are equivalent to every of except 1)</p>",
        "id": 212717495,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602175366
    },
    {
        "content": "<p>Yes. That makes sence.</p>",
        "id": 212717627,
        "sender_full_name": "Eh2406",
        "timestamp": 1602175426
    },
    {
        "content": "<p>As for the prior cause, it's indeed not logical, but that's what computing the union of terms gives</p>",
        "id": 212717634,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602175429
    },
    {
        "content": "<p>99% of the time, we have {a, not b} and {b, not c} as in \"a depends on b\" and \"b depends on c\"</p>",
        "id": 212717761,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602175477
    },
    {
        "content": "<p>the union of all terms give {a, b union not(b), c}, but \"b union not(b)\" resolves to \"not none\" which is always satisfied so it is removed</p>",
        "id": 212717917,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602175551
    },
    {
        "content": "<p>That's what says <strong>the rule of resolution</strong> explained here: <a href=\"https://github.com/dart-lang/pub/blob/master/doc/solver.md#conflict-resolution\">https://github.com/dart-lang/pub/blob/master/doc/solver.md#conflict-resolution</a></p>",
        "id": 212718102,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602175624
    },
    {
        "content": "<p>It might take some time to digest it all</p>",
        "id": 212718132,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602175636
    },
    {
        "content": "<p>I think the next step for me, is to make a test that directly calls <code>Incompatibility::union</code> with that one case.  Well actually I have a meeting in 10, witch will make me mad, so then I will need a walk. Then I will try to redigest that reading materials vis this case.</p>",
        "id": 212718606,
        "sender_full_name": "Eh2406",
        "timestamp": 1602175840
    },
    {
        "content": "<p>But sometimes, the search for a satisfier (whose incompatibility cause is used for computation of the prior cause) makes us work with to incompats of the form {a1, b1} {a2, b2} where both incompats refer to the same packages. And it gets weird when a1 and a2 are different. So I think I'd rather argue that it does not makes sense to use those two incompats to compute a prior cause but that would mean that it's the search for the previous satisfier that's wrong, and I've read it multiple times</p>",
        "id": 212719249,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602176114
    },
    {
        "content": "<p>Fuzzing the satisfier search would be great, but I'm not sure how to do that. Anyway the best solution is maybe just have a look at the dart implementation on those very points</p>",
        "id": 212719495,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602176235
    },
    {
        "content": "<p>ooohh, I've just had a quick look at dart pub implementation. I'm seeing an intersection here where terms of the two causes used for prior cause are merged: <a href=\"https://github.com/dart-lang/pub/blob/23a59a380cdc88aca6a50f9b0147ecdd3b948919/lib/src/solver/incompatibility.dart#L68\">https://github.com/dart-lang/pub/blob/23a59a380cdc88aca6a50f9b0147ecdd3b948919/lib/src/solver/incompatibility.dart#L68</a><br>\nThat might be the reason ...<br>\nHave to go now, so I'll continue looking later but seems promising</p>",
        "id": 212724594,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602178620
    },
    {
        "content": "<p>Good find!<br>\nIn case it is helpful here is the isolated test case I was working on:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bad_union</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">version</span>::<span class=\"n\">NumberVersion</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i1</span>: <span class=\"nc\">Map</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"o\">&lt;</span><span class=\"n\">NumberVersion</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Term</span>::<span class=\"n\">Negative</span><span class=\"p\">(</span><span class=\"n\">Range</span>::<span class=\"n\">exact</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Term</span>::<span class=\"n\">Positive</span><span class=\"p\">(</span><span class=\"n\">Range</span>::<span class=\"n\">exact</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">negate</span><span class=\"p\">())),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">cloned</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i2</span>: <span class=\"nc\">Map</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Term</span><span class=\"o\">&lt;</span><span class=\"n\">NumberVersion</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Term</span>::<span class=\"n\">Negative</span><span class=\"p\">(</span><span class=\"n\">Range</span>::<span class=\"n\">exact</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Term</span>::<span class=\"n\">Positive</span><span class=\"p\">(</span><span class=\"n\">Range</span>::<span class=\"n\">exact</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">cloned</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">[(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Term</span>::<span class=\"n\">Positive</span><span class=\"p\">(</span><span class=\"n\">Range</span>::<span class=\"o\">&lt;</span><span class=\"n\">NumberVersion</span><span class=\"o\">&gt;</span>::<span class=\"n\">any</span><span class=\"p\">()))]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">cloned</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Incompatibility</span>::<span class=\"k\">union</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">i1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">i2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Kind</span>::<span class=\"n\">DerivedFrom</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)).</span><span class=\"n\">package_terms</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>If we decide that is at fault.</p>",
        "id": 212725277,
        "sender_full_name": "Eh2406",
        "timestamp": 1602178950
    },
    {
        "content": "<p>Test is passing :)</p>\n<p>I'll clean up a bit my mess and make a PR</p>",
        "id": 212733119,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602182707
    },
    {
        "content": "<p>I look forward to reading the explanation, and fuzzing more!</p>",
        "id": 212733852,
        "sender_full_name": "Eh2406",
        "timestamp": 1602183068
    },
    {
        "content": "<p>Explanation is basically I had the wrong assumptions about what the following meant</p>\n<blockquote>\n<p>let priorCause be the union of the terms in incompatibility and the terms in satisfier's cause</p>\n</blockquote>",
        "id": 212734136,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602183221
    },
    {
        "content": "<p>Great job <span class=\"user-mention\" data-user-id=\"348419\">@Matthieu Pizenberg</span> for solving this and <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> for reporting and submitting test cases!<br>\nLooks like I wasn't on time to participate with this much. At least I managed to make determinism PR satisfactory while you were busy here :)</p>",
        "id": 212734923,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602183646
    },
    {
        "content": "<p>I think we should make a test case that reproduces this on top of determinism PR. I'll check if the test submitted by <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> fails when using <code>rustc-hash</code> hash function.</p>",
        "id": 212735394,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602183849
    },
    {
        "content": "<p>Note that the original version (and the one I can use for fuzzing) will always pass with any form of determinism. N calles will always return the same thing. We will need better properties to know if it is the correct thing.</p>",
        "id": 212736071,
        "sender_full_name": "Eh2406",
        "timestamp": 1602184252
    },
    {
        "content": "<p>Unfortunately both original with RON and minified pass. <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> How did you generate the first test case? Maybe I could make one that would fail with <code>rustc-hash</code>.</p>",
        "id": 212736082,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602184256
    },
    {
        "content": "<p>Yeah I see. I thought one of them produces Err solution from time to time.</p>",
        "id": 212736294,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602184356
    },
    {
        "content": "<p>Right, without determinism we can check if <code>run1.is_ok() == run2.is_ok()</code>and find a bug when it is not. With determinism we can check <code>run1 == run2 </code> and have it always pass.</p>",
        "id": 212736636,
        "sender_full_name": "Eh2406",
        "timestamp": 1602184550
    },
    {
        "content": "<p>That test case was found thanks to the awesome property of not being reproducible lol.<br>\nWell it's true, but I'm kidding here since we do want to be able to reproduce people bugs</p>",
        "id": 212736641,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602184553
    },
    {
        "content": "<p>The only reason to let a user pick the hasher (that I can think of) is to have the proptest:<br>\n<code>run_with_hash_1.is_ok() == run_with_hash_2.is_ok()</code></p>",
        "id": 212736836,
        "sender_full_name": "Eh2406",
        "timestamp": 1602184660
    },
    {
        "content": "<p>But it is not worth threading a HashBuilder type everyware.</p>",
        "id": 212736949,
        "sender_full_name": "Eh2406",
        "timestamp": 1602184715
    },
    {
        "content": "<p><a href=\"https://github.com/mpizenberg/pubgrub-rs/pull/23\">https://github.com/mpizenberg/pubgrub-rs/pull/23</a> fix :)</p>",
        "id": 212738887,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602185621
    },
    {
        "content": "<p>I will try the fuzz test on it, before we have a chance to merge the determinism.</p>",
        "id": 212739031,
        "sender_full_name": "Eh2406",
        "timestamp": 1602185687
    },
    {
        "content": "<p>Rebased, and running 3 times its passing</p>",
        "id": 212740143,
        "sender_full_name": "Eh2406",
        "timestamp": 1602186246
    },
    {
        "content": "<p>I did a little write up of my thoughts on the prior cause computation with incompatibilities. It's a bit \"mathy\" but I hope it is still clear: <a href=\"https://github.com/mpizenberg/pubgrub-rs/pull/23#issuecomment-706122058\">https://github.com/mpizenberg/pubgrub-rs/pull/23#issuecomment-706122058</a></p>",
        "id": 212811842,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602242538
    }
]