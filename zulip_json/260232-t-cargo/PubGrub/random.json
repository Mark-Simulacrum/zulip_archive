[
    {
        "content": "<p><a href=\"/user_uploads/4715/GAGppT1TOTztz_1e4RJfCzqP/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/GAGppT1TOTztz_1e4RJfCzqP/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/GAGppT1TOTztz_1e4RJfCzqP/image.png\"></a></div><p>Is it normal if I feel like I need to improve the package manager of my distrib? (just kidding)</p>",
        "id": 217615055,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606129812
    },
    {
        "content": "<p>I use Arch btw <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 217615411,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1606130055
    },
    {
        "content": "<p>Hey I'm trying to make some rust code compile for my work, but can't figure out how to deal with the lifetimes. I've done a minimal playground example with the same computation flow: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=abc1720627025aea6245fccebdb90a9c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=abc1720627025aea6245fccebdb90a9c</a></p>",
        "id": 218106550,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606492911
    },
    {
        "content": "<p>In case you have time to have a look, any idea on how to fix that lifetime issue?</p>",
        "id": 218106641,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606492950
    },
    {
        "content": "<p>Alternative version with generics instead of box, but does not compile either ^^: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2ab0302c665221fb907d6f0f000c4041\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2ab0302c665221fb907d6f0f000c4041</a></p>",
        "id": 218108990,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606494462
    },
    {
        "content": "<p>Trying to figure out what is important and what is the example.<br>\nYou want <code>F</code> to borrow from self and be stored in self?</p>",
        "id": 218109273,
        "sender_full_name": "Eh2406",
        "timestamp": 1606494640
    },
    {
        "content": "<p><code>full</code> is a utility function, which depends on a many things. Inside the <code>update</code> I'm only interested by  the <code>partial</code> signature. Ideally I'd like it to be a closure depending on values inside the <code>State</code>. So yes, in theory <code>F</code> should not escape self</p>",
        "id": 218109625,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606494846
    },
    {
        "content": "<p>The thing is that the update modifies <code>self</code> and thus I'd need to update the <code>partial</code> closure to reflect that</p>",
        "id": 218109861,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606494994
    },
    {
        "content": "<p>I don't think this can work  as there is nothing stopping you from adding this method</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">invalidate_pointer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"diffrent\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Note how self.partial is still using a</span>\n<span class=\"w\">        </span><span class=\"c1\">// &amp;str that pintes into freead memory</span>\n<span class=\"w\">       </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218109868,
        "sender_full_name": "Eh2406",
        "timestamp": 1606494997
    },
    {
        "content": "<p>hum</p>",
        "id": 218109939,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495044
    },
    {
        "content": "<p>which workarounds make sense depends on why you want this structure.</p>",
        "id": 218110191,
        "sender_full_name": "Eh2406",
        "timestamp": 1606495199
    },
    {
        "content": "<p>makes sense</p>",
        "id": 218110266,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495221
    },
    {
        "content": "<p>I want to be able to switch different <code>full</code> functions with different parameter types</p>",
        "id": 218110315,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495253
    },
    {
        "content": "<p>And inside the <code>update</code> only use the <code>usize -&gt; String</code> part of the signature</p>",
        "id": 218110374,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495300
    },
    {
        "content": "<p>I also need that <code>partial</code> function to be updated since it depends on values changing in the update usually.</p>",
        "id": 218110496,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495373
    },
    {
        "content": "<p>One solution is to use a <code>RC&lt;String&gt;</code> So it won't be freed until both have changed. If the ref counting and cache miss is not perf critical.</p>",
        "id": 218110517,
        "sender_full_name": "Eh2406",
        "timestamp": 1606495389
    },
    {
        "content": "<p>I'm making an example with <code>String</code> but basically those are images so big objects and I don't think <code>Rc</code> would matter</p>",
        "id": 218110636,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495460
    },
    {
        "content": "<p>Or have data be a <code>&amp;'a ___</code> so it can guaranteed to live langer then the struct.</p>",
        "id": 218110698,
        "sender_full_name": "Eh2406",
        "timestamp": 1606495504
    },
    {
        "content": "<p>That may not be possible since some of that data is computed within the update loop, thus owned by the State</p>",
        "id": 218110846,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495597
    },
    {
        "content": "<blockquote>\n<p>One solution is to use a RC&lt;String&gt;</p>\n</blockquote>\n<p>Ok, will try</p>",
        "id": 218110889,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495632
    },
    {
        "content": "<p>It took me awhile to realize that all my python vars have tipe <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> and it never bothered me then. So if it is not per critical and it make the code ezere to read, an <code>RC</code>is not bad.</p>",
        "id": 218110930,
        "sender_full_name": "Eh2406",
        "timestamp": 1606495668
    },
    {
        "content": "<p>Does not seem to make the trick :( <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8b36ef03b7e5dd44144803b7c9103ff0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8b36ef03b7e5dd44144803b7c9103ff0</a><br>\nor maybe I've still something wrong</p>",
        "id": 218111161,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606495828
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=23295052051c77a3181a7da9bf70bb20\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=23295052051c77a3181a7da9bf70bb20</a></p>",
        "id": 218111379,
        "sender_full_name": "Eh2406",
        "timestamp": 1606496026
    },
    {
        "content": "<p>Ah thank you! So I basically need to Rc all the parameters of my <code>full</code> function and use <code>move</code> for the closure</p>",
        "id": 218111645,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606496176
    },
    {
        "content": "<p>Yes, you want the closure to own the variables it references (so <code>move</code>) but share the ownership with the struct (so <code>Rc</code>).</p>",
        "id": 218111944,
        "sender_full_name": "Eh2406",
        "timestamp": 1606496362
    },
    {
        "content": "<p>and the bad method from before becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">invalidate_pointer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Rc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"diffrent\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Note how self.partial has not been updated so is still using</span>\n<span class=\"w\">       </span><span class=\"c1\">// the old string, which may be a bug, but it is not UB.</span>\n<span class=\"w\">       </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218112149,
        "sender_full_name": "Eh2406",
        "timestamp": 1606496503
    },
    {
        "content": "<p>I've made some progress with the dependency provider for elm but I'm stuck with a compilation error :( <a href=\"https://github.com/mpizenberg/elm_dependency_provider/blob/master/examples/solve_pkg_deps.rs#L19\">https://github.com/mpizenberg/elm_dependency_provider/blob/master/examples/solve_pkg_deps.rs#L19</a></p>\n<p>With the offline provider it works smoothly, but with the online one <code>resolve</code> says it does not implement <code>DependencyProvider</code>, I'm not figuring it out</p>",
        "id": 218957781,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607208889
    },
    {
        "content": "<p>If one of you have some time checking it out, let me know if you find the issue</p>",
        "id": 218957794,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607208937
    },
    {
        "content": "<p><code>ElmPackageProviderOnline::new</code> returns a result.</p>",
        "id": 218960747,
        "sender_full_name": "Eh2406",
        "timestamp": 1607214058
    },
    {
        "content": "<p>I'm having a weird compilation issue, related to musl. If I compile this binary <a href=\"https://github.com/mpizenberg/elm-test-rs\">https://github.com/mpizenberg/elm-test-rs</a> with <code>cargo build --release --target x86_64-unknown-linux-musl</code> Cargo tells me this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  running: &quot;musl-g++&quot; &quot;-O3&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-m64&quot; &quot;-I&quot; &quot;src&quot; &quot;-Wall&quot; &quot;-Wextra&quot; &quot;-o&quot; &quot;/home/matthieu/git/mpizenberg/elm-test-rs_musl/target/x86_64-unknown-linux-musl/release/build/tree-sitter-elm-9d31565a479bf4e7/out/src/scanner.o&quot; &quot;-c&quot; &quot;src/scanner.cc&quot;\n\n  --- stderr\n\n  error occurred: Failed to find tool. Is `musl-g++` installed?\n</code></pre></div>",
        "id": 219505687,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607621304
    },
    {
        "content": "<p>And it is right that <code>musl-g++</code> does not exist, even though I've installed <code>community/musl</code> and <code>community/kernel-headers-musl</code> packages on my archlinux system. They don't seem to contain a <code>musl-g++</code> binary, only <code>musl-gcc</code>.</p>",
        "id": 219505938,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1607621414
    },
    {
        "content": "<p>Sorry don't know about musl</p>",
        "id": 219507492,
        "sender_full_name": "Eh2406",
        "timestamp": 1607622052
    },
    {
        "content": "<p>This might be relevant? (don't know I haven't understood in details what this is) <a href=\"https://github.com/rust-lang/cargo/issues/8088\">https://github.com/rust-lang/cargo/issues/8088</a> \"Features 2.0 meta tracking issue\"</p>",
        "id": 221867005,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1610007708
    },
    {
        "content": "<p>It is really cool and good work. It adds a second pass over the resolution graph ( after the resolver ) that reduces <code>features</code>and optional dependencies that are not needed for the exact build that is happening. Pubgrub does not need to handle this step itself in order to be useful in Cargo. There will always need to be a separate pass. For example the lock file needs to know if your dependencies are incompatible on windows even if you are currently building on linux. But it may be an interesting stretch goal to try and incorporate it into a Pubgrub-based resolver, so that it can allow conflicting versions as long as there is no system that will require them both.</p>",
        "id": 221951842,
        "sender_full_name": "Eh2406",
        "timestamp": 1610031785
    },
    {
        "content": "<p>I'm currently working on some web stuff for work and I'm wondering how I could retrieve the stderr output of some rust wasm and put it in a dedicated panel of the web gui. This seems rather not possible. But I've seen the <a href=\"https://crates.io/crates/log\">log crate</a> that could be somewhat useful I guess. And it seems like something that could be useful to pugrub too (the logging). Have you used the crate already? is it good/bad practice?</p>",
        "id": 225157859,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1612444980
    },
    {
        "content": "<p>I have used the <a href=\"https://github.com/rust-lang/cargo/blob/master/Cargo.toml#L46\">log</a> crate in general. It is widely used and very nice.<br>\nI think there are adapters to use it in wasm, but I don't recall trying them.</p>",
        "id": 225162131,
        "sender_full_name": "Eh2406",
        "timestamp": 1612447112
    },
    {
        "content": "<p>I've tried the log crate and like it! thanks for confirming it's wide adoption!</p>",
        "id": 226420125,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1613415925
    },
    {
        "content": "<p>Also sorry I've been underwater with finishing version 1.0.0 of elm-test-rs (just released 1.0.0-beta this weekend) + some things I needed to do for the exercism project, so couldn't find time to review your arena PR <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span></p>",
        "id": 226420272,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1613416017
    },
    {
        "content": "<p>No rush! I am working on simplifying the code around <code>find_satisfier_and_previous_satisfier_level</code>next. Mostly so I can understand it better.</p>",
        "id": 226420778,
        "sender_full_name": "Eh2406",
        "timestamp": 1613416344
    },
    {
        "content": "<p>I think I explained a bit the backtracking logic in that part of the guide: <a href=\"https://pubgrub-rs-guide.netlify.app/internals/conflict_resolution.html\">https://pubgrub-rs-guide.netlify.app/internals/conflict_resolution.html</a> Don't hesitate to have a look at it while working on that</p>",
        "id": 226421222,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1613416603
    },
    {
        "content": "<p>I will definitely reread that and <a href=\"https://github.com/mpizenberg/pubgrub-rs/issues/57\">pubgrub#57</a> when I have simplified the code.</p>",
        "id": 226421594,
        "sender_full_name": "Eh2406",
        "timestamp": 1613416809
    },
    {
        "content": "<p>So far I am not making big structure/algorithmic changes. Just some return type and order of operation changes.</p>",
        "id": 226421862,
        "sender_full_name": "Eh2406",
        "timestamp": 1613417017
    },
    {
        "content": "<p>By the way, one way of improving this in complexity would be to turn that search into a O(M) instead of O(N) where N is the total number of assignment while M is the number of assign related to that conflict (with package terms appearing in the conflict). That could be done by changing the data structure used to search those satisfiers. But it would be quite a big architectural change, and would require using a hashmap of some sort that would have impact to other things in the profile of the algorithm as a whole. But I wanted to mention that since it would be linked to a different approach for storing the partial solution.</p>",
        "id": 226422350,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1613417374
    },
    {
        "content": "<p>Yes, indeed! That is one of the things I was thinking of heading towards, not this PR but over the next few PRs.</p>",
        "id": 226422522,
        "sender_full_name": "Eh2406",
        "timestamp": 1613417498
    },
    {
        "content": "<p>Hey, I finally fixed all the hairy stuff and weird windows bug I wanted to fix for elm-test-rs. I didn't thought I'd encounter so many problems last weekend. So I'll have a look at the arena PR tonight. I agree having to rebase on long architecture changes would be annoying.</p>",
        "id": 227890791,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614323759
    },
    {
        "content": "<p>Small random note. Today I needed to load an image in wasm but I was getting stuck with an error message saying rayon cannot be used, even though I had only added the feature <code>jpeg</code> and not <code>jpeg/rayon</code> in my dependencies</p>",
        "id": 234681047,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1618495434
    },
    {
        "content": "<p>Turns out, this was because my <code>lowrr-wasm</code> crate was in the same workspace that my <code>lowrr-lib</code> crate, which depends on the image crate with the default features. So the resolver compiled my wasm lib also with default features.</p>",
        "id": 234681351,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1618495525
    },
    {
        "content": "<p>Today I saw a new release of anyhow due to a dependency problem (cf issue <a href=\"https://github.com/dtolnay/anyhow/pull/155\">https://github.com/dtolnay/anyhow/pull/155</a>). I hope once PubGrub is advanced enough, solving dependencies with minimal versions will be easy and efficient enough that a simple option could be added to <code>cargo test</code> like <code>--minimal-versions</code> so that people add this to their CI.</p>",
        "id": 242275465,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1623361530
    },
    {
        "content": "<p>It exists. <a href=\"https://doc.rust-lang.org/cargo/reference/unstable.html#minimal-versions\">https://doc.rust-lang.org/cargo/reference/unstable.html#minimal-versions</a> . It is a global check, it will also fail if any transitive dep is not right. Meany projects don't think it is a problem. Anything that depend on them cant use it. So we are going to need a more local tool.</p>\n<p>Also sorry for disappearing this week. My benchmarking computer is having an issue, and I got distracted. I will come back.</p>",
        "id": 242346604,
        "sender_full_name": "Eh2406",
        "timestamp": 1623419042
    },
    {
        "content": "<p>Hey, just to let you know I might not answer on github during approximately 3 weeks, except maybe for the 0.2.1 release and to write a little post about it on reddit. Otherwise, I'll occasionally read but not do any concrete progress for the upcoming month, roughly.</p>",
        "id": 244078047,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624817361
    },
    {
        "content": "<p>Nothing important, it's just that I'll be on holiday starting 1st of July and won't be on my computer much.</p>",
        "id": 244078114,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624817471
    },
    {
        "content": "<p>Enjoy your holiday!</p>",
        "id": 244078174,
        "sender_full_name": "Eh2406",
        "timestamp": 1624817535
    },
    {
        "content": "<p>I am giving up on a replacement fan showing up, and trying to figure out how to make the gpu fans (witch are right there) run all the time.</p>",
        "id": 244078379,
        "sender_full_name": "Eh2406",
        "timestamp": 1624817816
    },
    {
        "content": "<p>Hopefully, I can get back to \"full <a href=\"http://cratis.io\">cratis.io</a> generation\" timings for various branches.</p>",
        "id": 244078454,
        "sender_full_name": "Eh2406",
        "timestamp": 1624817927
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media0.giphy.com/media/RJVyvWomrVuVRXThoM/giphy-downsized-medium.gif?cid=c623cb35jazduvbx4vos86y2nwykwmm1zjitb49q581s1v65&amp;rid=giphy-downsized-medium.gif&amp;ct=g\"><img src=\"https://uploads.zulipusercontent.net/c32414056571b9ac097ac50124ff382cf84a1e40/68747470733a2f2f6d65646961302e67697068792e636f6d2f6d656469612f524a567976576f6d72567556525854686f4d2f67697068792d646f776e73697a65642d6d656469756d2e6769663f6369643d63363233636233356a617a647576627834766f73383679326e77796b776d6d317a6a6974623439713538317331763635267269643d67697068792d646f776e73697a65642d6d656469756d2e6769662663743d67\"></a></div>",
        "id": 244078529,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624818034
    },
    {
        "content": "<p>I was looking for this complete meme when you mentioned repairing your computer but unfortunately this one is very low res and not complete :(. Here is what I meant to post :) <a href=\"https://www.youtube.com/watch?v=AbSehcT19u0\">https://www.youtube.com/watch?v=AbSehcT19u0</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"AbSehcT19u0\" href=\"https://www.youtube.com/watch?v=AbSehcT19u0\"><img src=\"https://uploads.zulipusercontent.net/db192e52fc6fcd3fadcc29a68ea454b2d3954fdd/68747470733a2f2f692e7974696d672e636f6d2f76692f41625365686354313975302f64656661756c742e6a7067\"></a></div>",
        "id": 244078839,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624818432
    },
    {
        "content": "<p>So last time I ran it, it took ~24h. I am now trying with 0.2.1, I want to see how the new partial_solution changes things.<br>\nThen I want to try the priority_queue and some other branches.</p>",
        "id": 244079787,
        "sender_full_name": "Eh2406",
        "timestamp": 1624819966
    },
    {
        "content": "<p>It took 20h, a ~16% improvement! All the more impressive because our slowest crates are releasing new versions eavry few days.</p>",
        "id": 244152786,
        "sender_full_name": "Eh2406",
        "timestamp": 1624890501
    },
    {
        "content": "<p>Nice!</p>",
        "id": 244260006,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1624962348
    },
    {
        "content": "<p>Using <a href=\"https://github.com/pubgrub-rs/pubgrub/commit/5802cca3ba5a354a4540d83d33508609af6f14e8\">https://github.com/pubgrub-rs/pubgrub/commit/5802cca3ba5a354a4540d83d33508609af6f14e8</a> on it's own made things slow down to 22.5h. I don't know if that is mostly because:</p>\n<ul>\n<li>indexmap has some small overhead.</li>\n<li>indexmap has different iter order,  so the dependency provider picked different decision order.</li>\n<li>the work that is being skip, is not that slow.<br>\nand at 1 day a pop, I don't know that I will be looking to closely.</li>\n</ul>",
        "id": 244309401,
        "sender_full_name": "Eh2406",
        "timestamp": 1624984354
    },
    {
        "content": "<p>Using the priority_queue branch (<a href=\"https://github.com/pubgrub-rs/pubgrub/commit/80a729cd8d56de51c775fb680cb4f40d829b90de\">this to be practice</a>) it ran in ... way to fast ... possible explanations:</p>\n<ul>\n<li>I there's a bug and the new version, it is getting the wrong answer fast</li>\n<li>There was something very slow I was doing in the old code</li>\n<li>It really is a 90% improvement</li>\n</ul>",
        "id": 244369682,
        "sender_full_name": "Eh2406",
        "timestamp": 1625018268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> For the purposes of iterating on optimization, would it make sense to grab a snapshot of a subset of the index, something that takes around 20-30 minutes at most, and use that?</p>",
        "id": 244375133,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625025700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/random/near/244152786\">said</a>:</p>\n<blockquote>\n<p>It took 20h, a ~16% improvement! All the more impressive because our slowest crates are releasing new versions every few days.</p>\n</blockquote>\n<p>I'd really love to see a histogram of the timings distribution if that's something doable (maybe measure total time for a given crate, divided by the number of versions to normalize by solver call) both with 0.2.1 and with the priority_queue branch.<br>\nIf you make a csv, we can visualize it easily with data voyager for example: <a href=\"https://vega.github.io/voyager/\">https://vega.github.io/voyager/</a></p>",
        "id": 244431692,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1625063363
    },
    {
        "content": "<p>I was just going to say, the next step is to re-run with the stats being sent to a csv then we can analyze however we want to.</p>",
        "id": 244432248,
        "sender_full_name": "Eh2406",
        "timestamp": 1625063530
    },
    {
        "content": "<p>One stat to collect (that I have not so far) is the type of the output from <code>resolve</code>, I.E. did it find a solution. If the two versions find a solution for the same crate/vers, then I will feal better about \"I there's a bug and the new version, it is getting the wrong answer fast\"</p>",
        "id": 244432639,
        "sender_full_name": "Eh2406",
        "timestamp": 1625063675
    },
    {
        "content": "<p>I may spend some time on \"There was something very slow I was doing in the old code\". if there is and I can do the 0.2.1 experiment in say 10h, then collecting the stats will be a lot more pleasant.</p>",
        "id": 244433375,
        "sender_full_name": "Eh2406",
        "timestamp": 1625063927
    },
    {
        "content": "<p>I've release 0.2.1 and documented what I did in that new PR: <a href=\"https://github.com/pubgrub-rs/pubgrub/pull/100/files\">https://github.com/pubgrub-rs/pubgrub/pull/100/files</a></p>",
        "id": 244488767,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1625087634
    },
    {
        "content": "<p>I'll write a small post on reddit, and maybe should update the release notes on github with the summary in the changelog</p>",
        "id": 244488931,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1625087719
    },
    {
        "content": "<p>Yay, thank you!</p>",
        "id": 244489063,
        "sender_full_name": "Eh2406",
        "timestamp": 1625087783
    },
    {
        "content": "<p>Here we go :) <a href=\"https://www.reddit.com/r/rust/comments/ob721q/announcing_version_021_of_pubgrub_a_dependency/\">https://www.reddit.com/r/rust/comments/ob721q/announcing_version_021_of_pubgrub_a_dependency/</a></p>",
        "id": 244490913,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1625088642
    },
    {
        "content": "<p>Nicely written!</p>",
        "id": 244491186,
        "sender_full_name": "Eh2406",
        "timestamp": 1625088798
    },
    {
        "content": "<p>Here is the results. <a href=\"/user_uploads/4715/18PQazF4n-Z5-tMnke4iigNI/out_que.zip\">out_que.zip</a> <br>\nNo attempt to speed things up, just ran it and collected the output.</p>",
        "id": 244643469,
        "sender_full_name": "Eh2406",
        "timestamp": 1625185162
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/GBPGtdklLjlyBincDgZGObv0/scatter.png\">scatter.png</a> <br>\nLess correlation in time then I was expecting.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/GBPGtdklLjlyBincDgZGObv0/scatter.png\" title=\"scatter.png\"><img src=\"/user_uploads/4715/GBPGtdklLjlyBincDgZGObv0/scatter.png\"></a></div>",
        "id": 244653250,
        "sender_full_name": "Eh2406",
        "timestamp": 1625192440
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/0Jhi97jor7uNNpoxu40y57rU/image.png\">image.png</a> <br>\nBut there are some times where they get a different outcome.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/0Jhi97jor7uNNpoxu40y57rU/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/0Jhi97jor7uNNpoxu40y57rU/image.png\"></a></div>",
        "id": 244653273,
        "sender_full_name": "Eh2406",
        "timestamp": 1625192500
    },
    {
        "content": "<p>The problematic cases: <br>\nname    ver time_que_s  succeeded_que   time    succeeded<br>\nspongedown  0.4.0   0.01    true    0   false<br>\nspongedown  0.4.1   0.01    true    0   false<br>\nspongedown  0.4.2   0.01    true    0   false<br>\noni_simulator   0.1.0   0   false   0   true<br>\ntinki   0.1.0   0.03    true    0.01    false<br>\nslotmap 0.2.1   0   false   0.01    true<br>\nslotmap 0.4.0   0   false   0.01    true<br>\nslotmap 1.0.3   0   false   0.01    true<br>\noni_simulator   0.1.2   0   false   0.01    true<br>\nslotmap 1.0.1   0   false   0.02    true<br>\nslotmap 1.0.2   0   false   0.02    true</p>",
        "id": 244653508,
        "sender_full_name": "Eh2406",
        "timestamp": 1625192796
    },
    {
        "content": "<p>To check if the differences are  new versions being published or yanked, I need to change the code to look at a unchanging snapshot of the index.</p>",
        "id": 244707846,
        "sender_full_name": "Eh2406",
        "timestamp": 1625235118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/random/near/244643469\">said</a>:</p>\n<blockquote>\n<p>Here is the results. <a href=\"/user_uploads/4715/18PQazF4n-Z5-tMnke4iigNI/out_que.zip\">out_que.zip</a> <br>\nNo attempt to speed things up, just ran it and collected the output.</p>\n</blockquote>\n<p>Awesome, It's weird indeed that there are differences</p>",
        "id": 244831514,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1625357979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/random/near/244653250\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/4715/GBPGtdklLjlyBincDgZGObv0/scatter.png\">scatter.png</a> <br>\nLess correlation in time then I was expecting.</p>\n</blockquote>\n<p>Do we see things better for all the small timings if we use a logarithmic scale on both axes?</p>",
        "id": 244831572,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1625358058
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/m0v_9ZD7Qv0k_a1Xy6Suo_95/out.zip\">out.zip</a> <br>\nHere is the joined data. Dig in as you wish!</p>",
        "id": 244831818,
        "sender_full_name": "Eh2406",
        "timestamp": 1625358546
    },
    {
        "content": "<p>I did find a way to speed up the 0.2.1 based run from 22 -&gt; 8.6</p>",
        "id": 244831902,
        "sender_full_name": "Eh2406",
        "timestamp": 1625358692
    },
    {
        "content": "<p>Code before:</p>\n<div class=\"codehilite\"><pre><span></span><code>    fn choose_package_version&lt;\n        T: std::borrow::Borrow&lt;Intern&lt;Names&gt;&gt;,\n        U: std::borrow::Borrow&lt;Range&lt;Semantic&gt;&gt;,\n    &gt;(\n        &amp;self,\n        potential_packages: impl Iterator&lt;Item = (T, U)&gt;,\n    ) -&gt; Result&lt;(T, Option&lt;Semantic&gt;), Box&lt;dyn Error&gt;&gt; {\n        Ok(choose_package_with_fewest_versions(\n            |p| match &amp;**p {\n                Names::Links(name) =&gt; Either::Left(\n                    (0..self.links.borrow().get(name).cloned().unwrap_or(0))\n                        .map(|i| Semantic::new(&amp;format!(&quot;{}.0.0&quot;, i)).unwrap()),\n                ),\n                Names::Wide(_, req, _, _) | Names::WideFeatures(_, req, _, _, _) =&gt; {\n                    Either::Right(Either::Left(\n                        // one version for each bucket that match req\n                        self.get_versions(p.crate_())\n                            .into_iter()\n                            .filter(|v| req.matches(&amp;v.semver))\n                            .map(|v| SemverCompatibility::from(v))\n                            .collect::&lt;std::collections::BTreeSet&lt;_&gt;&gt;()\n                            .into_iter()\n                            .rev()\n                            .map(|v| Semantic::from(&amp;v)),\n                    ))\n                }\n                _ =&gt; Either::Right(Either::Right(\n                    self.get_versions(p.crate_()).into_iter().cloned(),\n                )),\n            },\n            potential_packages,\n        ))\n    }\n</code></pre></div>\n<p>code affter:</p>\n<div class=\"codehilite\"><pre><span></span><code>    fn choose_package_version&lt;\n        T: std::borrow::Borrow&lt;Intern&lt;Names&gt;&gt;,\n        U: std::borrow::Borrow&lt;Range&lt;Semantic&gt;&gt;,\n    &gt;(\n        &amp;self,\n        potential_packages: impl Iterator&lt;Item = (T, U)&gt;,\n    ) -&gt; Result&lt;(T, Option&lt;Semantic&gt;), Box&lt;dyn Error&gt;&gt; {\n        let out = {\n            let (pkg, range) = potential_packages\n                .min_by_key(|(p, range): &amp;(T, U)| {\n                    match &amp;**p.borrow() {\n                        Names::Links(name) =&gt; {\n                            (0..self.links.borrow().get(name).cloned().unwrap_or(0))\n                                .map(|i| Semantic::new(&amp;format!(&quot;{}.0.0&quot;, i)).unwrap())\n                                .filter(|v| range.borrow().contains(v))\n                                .count()\n                        }\n\n                        Names::Wide(_, req, _, _) | Names::WideFeatures(_, req, _, _, _) =&gt; {\n                            // one version for each bucket that match req\n                            self.get_versions(p.borrow().crate_())\n                                .into_iter()\n                                .filter(|v| req.matches(&amp;v.semver))\n                                .map(|v| SemverCompatibility::from(v))\n                                .collect::&lt;std::collections::BTreeSet&lt;_&gt;&gt;()\n                                .into_iter()\n                                .map(|v| Semantic::from(&amp;v))\n                                .filter(|v| range.borrow().contains(v))\n                                .count()\n                        }\n                        _ =&gt; self\n                            .get_versions(p.borrow().crate_())\n                            .into_iter()\n                            .filter(|v| range.borrow().contains(v))\n                            .count(),\n                    }\n                })\n                .expect(&quot;potential_packages gave us an empty iterator&quot;);\n            let version = match &amp;**pkg.borrow() {\n                Names::Links(name) =&gt; (0..self.links.borrow().get(name).cloned().unwrap_or(0))\n                    .map(|i| Semantic::new(&amp;format!(&quot;{}.0.0&quot;, i)).unwrap())\n                    .find(|v| range.borrow().contains(v)),\n\n                Names::Wide(_, req, _, _) | Names::WideFeatures(_, req, _, _, _) =&gt; {\n                    // one version for each bucket that match req\n                    self.get_versions(pkg.borrow().crate_())\n                        .into_iter()\n                        .filter(|v| req.matches(&amp;v.semver))\n                        .map(|v| SemverCompatibility::from(v))\n                        .collect::&lt;std::collections::BTreeSet&lt;_&gt;&gt;()\n                        .into_iter()\n                        .rev()\n                        .map(|v| Semantic::from(&amp;v))\n                        .find(|v| range.borrow().contains(v))\n                }\n                _ =&gt; self\n                    .get_versions(pkg.borrow().crate_())\n                    .into_iter()\n                    .find(|v| range.borrow().contains(v))\n                    .cloned(),\n            };\n            (pkg, version)\n        };\n        Ok(out)\n    }\n</code></pre></div>\n<p>Not enterally shuoor why.</p>",
        "id": 244832022,
        "sender_full_name": "Eh2406",
        "timestamp": 1625358922
    },
    {
        "content": "<p>So looking at that code, there are a lot of ways to make things faster:</p>\n<ul>\n<li>we don't need a <code>BTreeSet</code> to dedup a sorted iterator</li>\n<li>the new Semver 1.0 does a lot less allocations</li>\n<li>Semver 1.0 has many more public fields, so <code>Semantic::new(&amp;format!(\"{}.0.0\", i)).unwrap()</code> can be done without an allocation</li>\n</ul>\n<p>This will make both versions a lot faster.</p>",
        "id": 244862936,
        "sender_full_name": "Eh2406",
        "timestamp": 1625410438
    },
    {
        "content": "<p>So we are now at 21,648s for 0.2.1 and 4,542s for Que. (yes that is 1 hour 16 minutes)</p>",
        "id": 244863322,
        "sender_full_name": "Eh2406",
        "timestamp": 1625410879
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/Rg42Ihe8HkTQNgTnPHafrGFS/out.zip\">out.zip</a> the joined data, comfortingly they always get the same pass/fail!</p>",
        "id": 244863696,
        "sender_full_name": "Eh2406",
        "timestamp": 1625411316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/random/near/244863322\">said</a>:</p>\n<blockquote>\n<p>So we are now at 21,648s for 0.2.1 and 4,542s for Que. (yes that is 1 hour 16 minutes)</p>\n</blockquote>\n<p>wow! such a long time just for one package!</p>",
        "id": 244884259,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1625444488
    },
    {
        "content": "<p>Sorry, no, that's all versions of all packages.</p>",
        "id": 244884731,
        "sender_full_name": "Eh2406",
        "timestamp": 1625445283
    },
    {
        "content": "<p>One is based on the 0.2.1 branch of Pub grub. The other one is the priority queue branch.</p>",
        "id": 244884744,
        "sender_full_name": "Eh2406",
        "timestamp": 1625445325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I'd love if we could make a call some day in the coming weeks when you are free. So that we can talk about our recent experiments (intervals, priority queues, pre-release for cargo etc.). Let me know if that's ok with you and when you can be available. This may have to be on a weekend to accommodate with the time difference. Personally, I'm fairly free until mid august I think</p>",
        "id": 246389442,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1626629494
    },
    {
        "content": "<p>I would love to!<br>\nMay not be what you meant, but I am available for the next few hours.<br>\nOr we can try to find a time slot that works for both of us!</p>",
        "id": 246389685,
        "sender_full_name": "Eh2406",
        "timestamp": 1626629877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"348419\">@Matthieu Pizenberg</span> Looking at a calendar, my weekends are surprisingly booked for the next 5 weeks. But my work schedule is pretty flexible.  I may be able to take an hour or shift things around, for a time that is after work for you.</p>",
        "id": 246391413,
        "sender_full_name": "Eh2406",
        "timestamp": 1626632333
    },
    {
        "content": "<p>Can't tonight ^^. An evening for me on a day where you can shift things could work too.</p>",
        "id": 246392360,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1626633806
    },
    {
        "content": "<p>But if that's a weekend after the summer that's ok for me too. I'm in no hurry and still have plenty of documentation to do meanwhile</p>",
        "id": 246392468,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1626633928
    },
    {
        "content": "<p>BTW thank you for the documentation! It is very good. I understand this stuff better having read your documentation, even when I came up with it and have implemented it!</p>",
        "id": 246392552,
        "sender_full_name": "Eh2406",
        "timestamp": 1626634077
    },
    {
        "content": "<p>I'm glad you like it <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>️</p>",
        "id": 246393164,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1626634925
    },
    {
        "content": "<p>We should publicize the new guide, and not weigh for <code>0.2.2</code>. It is too good to not be talking about it!</p>",
        "id": 247947443,
        "sender_full_name": "Eh2406",
        "timestamp": 1627926044
    },
    {
        "content": "<p>I hesitated between a public announcement and just telling it to people concerned by those limitations in github issues. I did the latter because I thought new users will not be aware of the old guide without the new section anyway. But if you think it's worth an announcement, I could prepare something and share it here for review before public share</p>",
        "id": 248334290,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1628074052
    },
    {
        "content": "<p>draft:</p>\n<h1>New section in pugrub guide (dependency solver) about advanced usage and limitations</h1>\n<p>PubGrub is an algorithm to solve dependency requirements, and <a href=\"https://github.com/pubgrub-rs/pubgrub\">pubgrub-rs/pubgrub</a> is a Rust implementation of that algorithm.</p>\n<p>In November 2020, we released version 0.2 of pubgrub with sound foundations and an API enabling solving dependencies of simple systems. This enabled for example solving package dependencies of the Elm ecosystem for the alternative tests runner <a href=\"https://github.com/mpizenberg/elm-test-rs\">elm-test-rs</a>.</p>\n<p>Since then, we focused on performances and released in June this year (2021) version 0.2.1 with speed improvements ranging from 3x to 8x faster resolutions.</p>\n<p>During all that time, many people have tried pubgrub and reached the limitations imposed by its current design. Some of these limitations can be circumvented, like enabling optional dependencies, or being able to pick multiple versions of the same package. Some however, run deep within the knowledge mechanisms of the algorithm and cannot be overcome with the current design. This is the case of pre-releases when those are coupled with \"impure\" requirements. By that we mean requirements that do not follow the mathematical properties of the order of elements in the corresponding sets. For example saying that \"1.0 &lt;= v &lt; 3.0\" should not contain version 2.0-alpha is problematic.</p>\n<p>In order to help pubgrub users, including ourselves, we thus wrote a <a href=\"https://pubgrub-rs-guide.netlify.app/limitations/intro.html\">new section</a> in the pubgrub guide to address this very topic of advanced usage and limitations. We hope that it explains clearly the challenges faced, and that it will help us develop the new APIs to overcome those in future versions of pubgrub.</p>",
        "id": 248343662,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1628080651
    },
    {
        "content": "<p>I like that! The guide is amazing, the more it gets talked up the better!</p>",
        "id": 248350491,
        "sender_full_name": "Eh2406",
        "timestamp": 1628084178
    },
    {
        "content": "<p>Here we go: <a href=\"https://www.reddit.com/r/rust/comments/oxu88c/new_section_in_pugrub_guide_dependency_solver/\">https://www.reddit.com/r/rust/comments/oxu88c/new_section_in_pugrub_guide_dependency_solver/</a></p>",
        "id": 248360450,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1628088513
    },
    {
        "content": "<p>I don't know if this is legit, but if it is, there really is conference for everything ^^ <a href=\"http://packaging-con.org/\">http://packaging-con.org/</a></p>",
        "id": 248471340,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1628167371
    },
    {
        "content": "<p>It does seem interesting, I signed up for their email list.</p>",
        "id": 248471731,
        "sender_full_name": "Eh2406",
        "timestamp": 1628167580
    },
    {
        "content": "<p>Do we want to submit a talk?</p>",
        "id": 248472664,
        "sender_full_name": "Eh2406",
        "timestamp": 1628168108
    },
    {
        "content": "<p>could but what would it be? would be nice to have a demo of cargo using pubgrub, but that's a bit far off</p>",
        "id": 248644130,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1628271854
    },
    {
        "content": "<p>I think the work you have done on PubGrub as a reusable library is prite cool.</p>",
        "id": 248650988,
        "sender_full_name": "Eh2406",
        "timestamp": 1628275025
    }
]