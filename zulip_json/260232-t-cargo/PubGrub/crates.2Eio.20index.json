[
    {
        "content": "<p>Just had a quick look at zuse index, what are the meaning of the differents parts here for example?</p>\n<div class=\"codehilite\"><pre><span></span><code>cfg-if-wasm-bindgen-Minor(2)-&gt;=0.1.9, &lt;0.2.0/default\nLinks:openssl\n</code></pre></div>",
        "id": 217375377,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605862654
    },
    {
        "content": "<p>I think the way I'd go about dealing with crates, is I'd not use <code>OfflineDependencyProvider</code> with all cargo features embedded as data (encoded in package names that are all stored). I'd rather create a new <code>OfflineCrateProvider</code> similar to <code>OfflineDependencyProvider</code> but with cargo features embedded as logic.</p>\n<p>I don't know how you deal with everything but concretely, for features for example I'd do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Index</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Crate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CrateDeps</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">CrateDeps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Feature</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Deps</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Deps</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">Crate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dep</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Crate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Dep</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">Feature</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// the id P would be a string uniquely identifying</span>\n<span class=\"c1\">// the crate with its activated features.</span>\n<span class=\"n\">to_crate_id</span><span class=\"w\"> </span>: <span class=\"p\">(</span><span class=\"n\">Crate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">Feature</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">P</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">from_crate_id</span><span class=\"w\"> </span>: <span class=\"nc\">P</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">Crate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">Feature</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// internally uses from_crate_id and to_crate_id.</span>\n<span class=\"n\">get_dependencies</span><span class=\"w\"> </span>: <span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[(</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">)]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217381277,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605866616
    },
    {
        "content": "<p>I do have a Dependency provider that is used to generate this. I look forward to polishing it up so I can share it and we can find ways to improve it. I don't want to have this several hundred line program in our test suite. One of the things it can do is turn each type safe <code>P</code> into a unique string. That lets our test suite only need to know how to read <code>OfflineDependencyProvider</code>.</p>",
        "id": 217386199,
        "sender_full_name": "Eh2406",
        "timestamp": 1605869619
    },
    {
        "content": "<p>(and no I don't know what I am doing up at this time.)</p>",
        "id": 217386270,
        "sender_full_name": "Eh2406",
        "timestamp": 1605869645
    },
    {
        "content": "<p><code>Links:openssl</code> There can only be one thing that links to a clib, or the linker gets mad, so <code>Links:openssl</code> means that that crate will link to <code>openssl</code> and so nothing else can.</p>",
        "id": 217386412,
        "sender_full_name": "Eh2406",
        "timestamp": 1605869752
    },
    {
        "content": "<p><code>cfg-if-wasm-bindgen-Minor(2)-&gt;=0.1.9, &lt;0.2.0/default</code> this is a lot to unpack.<br>\n<code>/default</code> means that whatever we select we need to enable the <code>default</code> set of features.<br>\n<code>bindgen-Minor(2)</code> means a the crate <code>bindgen</code> but only if it is <code>0.2.x</code>. We need that info in the package name as we can also have a <code>0.1.x</code> and a <code>1.x.y</code> in the same resolution.<br>\n<code>cfg-if ... -&gt;=0.1.9, &lt;0.2.0</code> means that we depend on <code>cfg-if</code>in the range <code>&gt;=0.1.9, &lt;0.2.0</code> in this case that is the same as <code>cfg-if-Minor(1)</code>, but if it was the range <code>&gt;=0.1.9, &lt;0.3.0</code>then it would let us pick between  <code>cfg-if-Minor(1)</code> and <code>cfg-if-Minor(2)</code>. We can have different versions selected for different parents. <br>\nSo all together it is:<br>\n<code>bindgen-Minor(2)</code> depends on <code>cfg-if ... -&gt;=0.1.9, &lt;0.2.0</code> (even if that spans incompatible versions) and needs the <code>default</code> set of features.</p>",
        "id": 217387643,
        "sender_full_name": "Eh2406",
        "timestamp": 1605870495
    },
    {
        "content": "<p>I must admit I am lost ahah</p>",
        "id": 217400350,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605878963
    },
    {
        "content": "<p>That's because all the things we haven't implemented for Cargo specifically are encoded in this format</p>",
        "id": 217401921,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605879777
    },
    {
        "content": "<p>Multiple major versions are allowed, features can be enabled, and \"links\" attributes are in there as well</p>",
        "id": 217402023,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605879837
    },
    {
        "content": "<p>0.2 has additional dependency on <code>wasm-bindgen</code>, while 0.1 does not, so it's encoded in the name too</p>",
        "id": 217402241,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1605879958
    },
    {
        "content": "<p>So 3 lessons from this try:</p>\n<ul>\n<li>it can run for all crates in the index if one lets it run overnight. Runtime is over 4h and the file is 207MB.</li>\n<li>the names that get assigned for the complicated interacting hacks need to be improved, as you found them confusing.</li>\n<li>I need to not try to describe things when I am randomly up in the middle of the night, as it does not make things clearer.</li>\n</ul>",
        "id": 217406029,
        "sender_full_name": "Eh2406",
        "timestamp": 1605881897
    },
    {
        "content": "<p>Let's say for argument purposes my current code is:</p>\n<ul>\n<li>incorrect, in that it does not exactly incode the rules that Cargo would use.</li>\n<li>overly complicated, in that is makse more complex examples then it needs to. (Reading my ramblings from last night, I think this one is true.)</li>\n<li>inefficient, in that it does not use Pubgrub the best way for the complexity it needs.</li>\n</ul>\n<p>It is still an interesting benchmark on it own with a very high Time/MB, and a realistic example in that it code that someone new to using PubGrub actually wrote.</p>",
        "id": 217408270,
        "sender_full_name": "Eh2406",
        "timestamp": 1605883042
    },
    {
        "content": "<p>I.E. we have to goles 1 figure out what is needed for Cargo, 2 benchmark PubGrub.<br>\nIt still can work for 2 even if it is a WIP for 1.</p>",
        "id": 217408528,
        "sender_full_name": "Eh2406",
        "timestamp": 1605883169
    },
    {
        "content": "<p>\"It depends\". For example, the ratio of valid / invalid dependencies is a lot lower for one thing.</p>\n<div class=\"codehilite\"><pre><span></span><code>solutions: 1909\nerrors: 279\n</code></pre></div>\n<p>And the code that builds the derivation tree has not been optimized at all, so that may be part of the problem.</p>\n<p>Another thing to factor is is that if 1 package is very long to build, it's usually also because it's dependencies are very long to build. So when building a benchmark that iterates over all packages of a single very long to build package, it's normal to end up with hight time/mb</p>",
        "id": 217413439,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605885364
    },
    {
        "content": "<blockquote>\n<p>And the code that builds the derivation tree has not been optimized at all, so that may be part of the problem</p>\n</blockquote>\n<p>I'll agree though that it's a good benchmark to optimize the code building the data structure used for error reporting (currently called <code>DerivationTree</code>) :)</p>",
        "id": 217419921,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605888103
    },
    {
        "content": "<blockquote>\n<p>Another thing to factor is is that if 1 package is very long to build, it's usually also because it's dependencies are very long to build.</p>\n</blockquote>\n<p><a href=\"https://github.com/mpizenberg/pubgrub-rs/issues/16\">pubgrub#16</a> links to <a href=\"https://github.com/rust-lang/cargo/issues/8539#issuecomment-671074837\">https://github.com/rust-lang/cargo/issues/8539#issuecomment-671074837</a> witch is a case (with <code>-Zminimal-versions</code>) where either of <code>self_update = \"*\"</code> and <code>solana-metrics = \"*\"</code> solve instantly but both takes over 50 min. So the really interesting slow cases do not have the shape you described, but most slow cases do have that shape. And your point still stands, \"build all\" has <code>O(n^2)</code> even without pathologies.</p>",
        "id": 217424122,
        "sender_full_name": "Eh2406",
        "timestamp": 1605889749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> I just tried using crates_index and cant figure out how to make it work. The example in the docs (<a href=\"https://docs.rs/crates-index/0.16.2/crates_index/index.html\">https://docs.rs/crates-index/0.16.2/crates_index/index.html</a>) gives an empty iterator it seems. Any idea of what might go wrong?</p>",
        "id": 217431354,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605892573
    },
    {
        "content": "<p>Ok actually, the problem seems to be linked to <code>new_cargo_default()</code>, if I use this, it does not figure out how to load the index used by cargo itself. Weird. If I change the path by using something like <code>new(\"_index\")</code> it works.</p>",
        "id": 217432303,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605893016
    },
    {
        "content": "<p>Are \"build\" dependencies of your dependencies necessary to <code>cargo build</code> your own crate?</p>",
        "id": 217438363,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605895845
    },
    {
        "content": "<p>\"build\" dependencies are \"dev\" dependencies are not. Sorry I have not had time to work on my script today. I will hopefully get it in shape to share tomorrow.</p>",
        "id": 217449216,
        "sender_full_name": "Eh2406",
        "timestamp": 1605901169
    },
    {
        "content": "<p>no worry I was just trying few things and wanted to understand those details. I've never used build dependencies in rust yet</p>",
        "id": 217465700,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605910518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> to parse the versions requirements did you use the semver crate? It does not seem possible to extract the different segments of a <code>VersionReq</code> with the public API. Did you copy-pasted the code and added conversion functions to range? (or maybe just rolled you own parser)<br>\nI see there can be multiple requirements separated by a comma in the dependencies of cargo toml. I've even seen one with 2 commas:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;0.3, &gt;=0.1, &gt;=0.2.0-beta.0\n</code></pre></div>",
        "id": 217497507,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605957610
    },
    {
        "content": "<p>Lost some time to a headache today. I will follow up with this when I am feeling better. <br>\nYa the semver crate is a odd beest. What I did was keep a list <code>(semver::Version, pubgrub::Semver)</code>. Then I can filter using  <code>VersionReq.matches(Version)</code>. Then I can make a <code>Range::between(min, max)</code>. It is a hack but it works.</p>",
        "id": 217517317,
        "sender_full_name": "Eh2406",
        "timestamp": 1605990208
    },
    {
        "content": "<p>Don't worry about it, I did something forking the crate. Currently WIP but I'll say more soon</p>",
        "id": 217517398,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1605990304
    },
    {
        "content": "<p>I look forward to comparing our aproteches!</p>",
        "id": 217517471,
        "sender_full_name": "Eh2406",
        "timestamp": 1605990400
    },
    {
        "content": "<p>Alright, I've pushed my work to the \"crates\" branch. You should read the example <code>examples/crates/main.rs</code>.<br>\nFirst comment the line written <code>// THEN DO THIS</code>, and uncomment the line <code>// DO THIS FIRST</code> and run</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo run --release --features=serde --example crates\n</code></pre></div>\n<p>It will create the ron file in <code>temp/index.ron</code>.<br>\nThis files is the serialization of my adaptation of the index, which store features in a rather efficient way.<br>\nThen you can toggle the commenting you just did on <code>examples/crates/main.rs</code> and re-run the examples. It will try to solve dependencies of all packages (with only mandatory dependencies). At the time of downloading the index for me, there was 51673 crates, 313123 unique versions, 301536 not yanked ones. From this, I build my index with only crates that do not specify specific targets (like windows and such) and only normal versions (not pre-release) so the index is down to 280906 versions.</p>\n<p>From that index of 280906 versions, I solve dependencies of all of these with mandatory dependencies. The resolution was successful for 216794 of those 280906 versions and took 4 minutes on my computer.</p>",
        "id": 217527446,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606006873
    },
    {
        "content": "<p>This is a great start! Thank you for sharing! Eventually I think this should probably live in <a href=\"https://github.com/pubgrub-rs/advanced_dependency_providers\">https://github.com/pubgrub-rs/advanced_dependency_providers</a>. But we can figure that out later. I have three thoughts/things to work on next:</p>\n<ol>\n<li>Cargo's resolver ( for now ) always includes target-specific dependencies, that field gets used later in the pipeline. So it is more accurate and less code to keep them in. On the other hand <code>dev</code> dependencies can be completely ignored, there is some debate but it may just be a bug that we add them to the index.</li>\n<li>I think having features trigger there optional dependencies, is going to make solving the ron file significantly more complicated.</li>\n<li>Another source of complexity is one-per-mager. let's say we have: </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>a:\n  1.0\n 1.1\n 2.0\n 2.1\nb:\n  1.0 -&gt; a=&quot;&lt;=1.1&quot;\nc:\n  1.0 -&gt; a=&quot;&gt;=2.1&quot;\nd:\n  1.0 -&gt; a=&quot;&gt;=1.1,&lt;=2.0&quot;\ne:\n  1.0 -&gt; b=&quot;*&quot; c=&quot;*&quot; d=&quot;*&quot;\n</code></pre></div>\n<p>Cargo thinks the set <code>{e:1.0, d:1.0, c:1.0,b:1.0, a:1.1, a:2.1  }</code> is a valid solution, I don't think this code handels that yet.<br>\nMaking sure that that 2 and 3 work well together adds yet more complexity.<br>\nBut this is a great start and definitely better organized then my code.</p>",
        "id": 217531795,
        "sender_full_name": "Eh2406",
        "timestamp": 1606015360
    },
    {
        "content": "<blockquote>\n<p>I think having features trigger there optional dependencies, is going to make solving the ron file significantly more complicated</p>\n</blockquote>\n<p>I don't think so. With that design everything is ready already to include features. There is just two places to modify. First in complete the <code>featured_from</code> function like <code>mandatory_from</code> (<a href=\"https://github.com/pubgrub-rs/pubgrub/blob/crates/examples/crates/index.rs#L96\">https://github.com/pubgrub-rs/pubgrub/blob/crates/examples/crates/index.rs#L96</a>). Second is extending the dependencies returned by <code>get_dependencies</code> here <a href=\"https://github.com/pubgrub-rs/pubgrub/blob/crates/examples/crates/index.rs#L207\">https://github.com/pubgrub-rs/pubgrub/blob/crates/examples/crates/index.rs#L207</a>. Both are rather straightforward but I did not need it to make this PoC.</p>\n<p>It may take a bit longer and the ron file might be a bit bigger but I don't think it will change a lot.</p>",
        "id": 217547282,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606045041
    },
    {
        "content": "<blockquote>\n<p>Another source of complexity is one-per-mager</p>\n</blockquote>\n<p>That was indeed not included in this PoC. I think it should be studied on its own to find a good solution, in isolation to all other additional complexity like features and such.</p>",
        "id": 217547347,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606045173
    },
    {
        "content": "<p>Looking again in the morning is there something that makes sure that <code>a:feat1</code> and <code>a:feat2</code> get the same version?</p>",
        "id": 217555814,
        "sender_full_name": "Eh2406",
        "timestamp": 1606058086
    },
    {
        "content": "<p>Most of the complexity of <code>cfg-if-wasm-bindgen-Minor(2)-&gt;=0.1.9, &lt;0.2.0/default</code> comes from the intersection of one-per-mager and feature related dependencies. There are a number of good encodings of features. There is at least one good encoding of one-per-mager. But when you put them together there is more complexity than the sum of the parts.</p>",
        "id": 217555955,
        "sender_full_name": "Eh2406",
        "timestamp": 1606058386
    },
    {
        "content": "<blockquote>\n<p>Looking again in the morning is there something that makes sure that a:feat1 and a:feat2 get the same version?</p>\n</blockquote>\n<p>You're right I didn't encode this. I think you mentioned a possible elegant solution to this in our past discussions. <code>get_dependencies</code> for <code>a:feat1</code> at version v1 could return the <code>feat1</code> dependencies of v1 plus a dependency to a raw <code>a</code> at v1. In turn <code>get_dependencies</code> for <code>a</code> would return mandatory dependencies of a. As such every feature such as <code>a:featN @ v</code> would have an exact dependency to <code>a @ v</code>. This will force selection of the same version.</p>",
        "id": 217556625,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606059542
    },
    {
        "content": "<p>Sounds like a plan, just wanted to be sure your encoding did not mean there was a more elegant solution that I had missed when reading the code.</p>",
        "id": 217556707,
        "sender_full_name": "Eh2406",
        "timestamp": 1606059686
    },
    {
        "content": "<blockquote>\n<p>when you put them together there is more complexity than the sum of the parts</p>\n</blockquote>\n<p>Right again. I still think it would be very useful to find a clean solution for the \"multiple-versions\" problem first, before trying to find a solution to the combined problem. At least because it's nice problem on its own.  It also maybe corresponds to the behavior of some registries (NPM works like that right?)</p>",
        "id": 217556766,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606059750
    },
    {
        "content": "<p>I'm trying to put on paper some thoughts, will see if something useful come out of this</p>",
        "id": 217556843,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606059889
    },
    {
        "content": "<p>Question related to the \"multiple versions\" case. If a depends on d1, b depends on d2 and c depends on d1 or d2, do you know what is done for c?</p>",
        "id": 217556925,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606060013
    },
    {
        "content": "<p>It will get the highest one that works with the other requirements. See my example from last night.</p>",
        "id": 217556998,
        "sender_full_name": "Eh2406",
        "timestamp": 1606060110
    },
    {
        "content": "<p>One solution to \"multiple versions\" on its own. (The one I have been working with.)<br>\nSo a semver req like <code>&gt;=2.0, &lt; 4.0</code> can be expressed as <code>Range::between(2.0, 3.0) Or Range::between(3.0, 4.0)</code>. We already have a way to express <code>Or</code>. <code>Or</code> is just multiple versions of a package. So we change req like <code>&gt;=2.0, &lt; 4.0</code>into a new package with two versions one depends on <code>Range::between(2.0, 3.0)</code> and the other depends on <code>Range::between(3.0, 4.0)</code>.</p>",
        "id": 217557237,
        "sender_full_name": "Eh2406",
        "timestamp": 1606060447
    },
    {
        "content": "<p>So what do we do with <code>&gt;=2.0, &lt; 999.0</code>are we going to make a package with 997 versions? We could but it wouldn't be efficient. What we can do is look at the versions that are actually available and only add the relevant versions.</p>",
        "id": 217557392,
        "sender_full_name": "Eh2406",
        "timestamp": 1606060709
    },
    {
        "content": "<p>So if I call [2, 3[ or [3, 4[ a \"bucket\" ([0.1, 0.2[ would also be a bucket) you create one version per existing bucket.</p>",
        "id": 217557542,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606060929
    },
    {
        "content": "<p>And an issue is that it grows in n2 with the number of dependencies that would require multiple buckets right?</p>",
        "id": 217557579,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606061012
    },
    {
        "content": "<p>Now we need to tell it that the buckets are compatible. So we add it to the name. <code>serde-major(1)</code> is the name for <code>serde</code> <code>Range::between(1.0, 2.0)</code>.</p>",
        "id": 217557639,
        "sender_full_name": "Eh2406",
        "timestamp": 1606061068
    },
    {
        "content": "<blockquote>\n<p>And an issue is that it grows in n2 with the number of dependencies that would require multiple buckets right?</p>\n</blockquote>\n<p>I don't think I see your point, can you elaborate?</p>",
        "id": 217557667,
        "sender_full_name": "Eh2406",
        "timestamp": 1606061144
    },
    {
        "content": "<p>nah not clear enought for me, I thought I had something and then it vanished from my mind ahah</p>",
        "id": 217557723,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606061184
    },
    {
        "content": "<p>That happens a lot to me.</p>",
        "id": 217557735,
        "sender_full_name": "Eh2406",
        "timestamp": 1606061218
    },
    {
        "content": "<p>I mean I've to think a little more, but I'll make a cookie pause now ^^</p>",
        "id": 217557747,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606061234
    },
    {
        "content": "<p>In theory we could notice in advance that <code>&gt;=2.0, &lt; 3.0</code> will only have one bucket, and skip an indirection , but the code complexity has not been worth it so far.</p>",
        "id": 217557842,
        "sender_full_name": "Eh2406",
        "timestamp": 1606061402
    },
    {
        "content": "<p>I pushed a copy of what I've bean making: <a href=\"https://github.com/pubgrub-rs/pubgrub/compare/dev...crates2\">https://github.com/pubgrub-rs/pubgrub/compare/dev...crates2</a><br>\nIt is repetitive and has bad naming, but if you feel like taking a look, there it is.</p>",
        "id": 217566268,
        "sender_full_name": "Eh2406",
        "timestamp": 1606073888
    },
    {
        "content": "<p>I will certainly take a look during the week. I've also tried to formalize your \"multiple-versions\" method combined with my \"on-the-file\" packages id generators for an implementation of a dynamic \"multiple-versions\" dependency provider. Here is the explanation, let me know if you think this is clear.</p>\n<hr>\n<p>For every package, we pre-compute \"buckets\", which are intervals in which<br>\nthere can only be 1 version picked. So for example, if existing versions are<br>\n(0.1.0, 0.1.1, 0.2.0, 1.0.0, 1.0.1, 3.3.0), there are 4 buckets which are<br>\n{0.1.0, 0.1.1},  {0.2.0},  {1.0.0, 1.0.1},  {3.3.0}.<br>\nThe rules of semantic versioning mean that before version 1.0.0, a bucket corresponds to<br>\na minor version, and after it, a bucket corresponds to a major version.<br>\nBut in general, buckets can be anything as long as it means for the implementer<br>\nthat only 1 version per bucket can be selected.<br>\nWith semantic versioning, we can easily identify buckets<br>\nby the first version of the corresponding bucket range.<br>\nSo the bucket identifier of the range [0.1.0, 0.2.0[ is 0.1.0 while<br>\nthe bucket identifier of the range [2.0.0, 3.0.0[ is 2.0.0</p>\n<p>If \"p\" @ v depends on \"q\" in range r, the base idea of bucketted dependency resolver is:</p>\n<ul>\n<li>\n<p>One version of imaginary package \"p@v#q\" per existing bucket of \"q\"<br>\n    with a non-nul intersection with r.<br>\n    That version is the bucket identifier.</p>\n</li>\n<li>\n<p>Each version of \"p@v#q\" depends on \"q$b\" @ s where<br>\n    b is the version identifier of the current bucket and<br>\n    s is the intersection of the range r and the range for bucket b.<br>\n<code>\"p@v#q\" @ b depends on \"q$b\" @ s</code></p>\n</li>\n<li>\n<p>Dependencies of \"q$b\" are the same than q.</p>\n</li>\n</ul>\n<p>Let's take a concrete example with the following dependencies:</p>\n<div class=\"codehilite\"><pre><span></span><code>root @ 1 depends on a * and d *\na @ 1 depends on\n    b @ [2.1, 4.5[\n    c @ [0.4, 0.6[\nd @ 1 depends on b @ [1, 2[\nb @ 1.0 has no dependency\nb @ 2.1 has no dependency\nb @ 3.0 has no dependency\nc @ 0.4 has no dependency\nc @ 0.5 has no dependency\n</code></pre></div>\n<p>The typical solution would be:<br>\n<code>a @ 1, b @ 1.0, b @ 3.0, c @ 0.5, d @ 1, root @ 1</code></p>\n<p>Let's precompute existing buckets for each package.<br>\nThere is only one bucket for each one of \"root\", \"a\" and \"d\" since those<br>\nonly have one existing version.<br>\nPackage \"b\" has buckets 1.0.0, 2.0.0 and 3.0.0.<br>\nPackage \"c\" has buckets 0.4.0 and 0.5.0.</p>\n<p>So now let's see what are the dependencies that would be generated<br>\non the fly by a dependency provider with bucketted logic.</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;root&quot; @ 1.0.0 depends on &quot;root@1.0.0#a&quot; @ * and &quot;root@1.0.0#d&quot; @ *\n&quot;root@1.0.0#a&quot; @ 1.0.0 depends on &quot;a$1.0.0&quot; @ [1.0.0,2.0.0[\n&quot;root@1.0.0#d&quot; @ 1.0.0 depends on &quot;d$1.0.0&quot; @ [1.0.0,2.0.0[\n\n&quot;a&quot; @ 1.0.0 depends on &quot;a@1.0.0#b&quot; @ * and &quot;a@1.0.0#c&quot; @ *\n&quot;a@1.0.0#b&quot; @ 2.0.0 depends on &quot;b$2.0.0&quot; @ [2.1.0,3.0.0[\n&quot;a@1.0.0#b&quot; @ 3.0.0 depends on &quot;b$3.0.0&quot; @ [3.0.0,4.0.0[\n&quot;a@1.0.0#c&quot; @ 0.4.0 depends on &quot;c$0.4.0&quot; @ [0.4.0,0.5.0[\n&quot;a@1.0.0#c&quot; @ 0.5.0 depends on &quot;c$0.5.0&quot; @ [0.5.0,0.6.0[\n\n&quot;d&quot; @ 1.0.0 depends on &quot;d@1.0.0#b&quot; @ *\n&quot;d@1.0.0#b&quot; @ 1.0.0 depends on &quot;b$1.0.0&quot; @ [1.0.0,2.0.0[\n</code></pre></div>",
        "id": 217575158,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1606086303
    },
    {
        "content": "<p>That makes sence and I think is what my implementation does.</p>",
        "id": 217578928,
        "sender_full_name": "Eh2406",
        "timestamp": 1606091854
    },
    {
        "content": "<p>Force pushed a change that uses a little of the nomenclature you suggested.</p>",
        "id": 217586200,
        "sender_full_name": "Eh2406",
        "timestamp": 1606102411
    },
    {
        "content": "<p>I just modified my script to run all versions of all packages, and it successfully ran! it took 21.6 hours and the resulting file is 1.17GB. The slowest case is <code>hobo</code> taking 571 seconds followed by lots of <code>solana-*</code> crates that take longer then 180 seconds. I have reason to believe that they would be helped by <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/0.2E2.2Ex.20api.20is.20a.20Selection.20sort\">https://rust-lang.zulipchat.com/#narrow/stream/260232-t-cargo.2FPubGrub/topic/0.2E2.2Ex.20api.20is.20a.20Selection.20sort</a> but have not measured by how much. This is amazingly good news, there are no cases in <a href=\"http://crates.io\">crates.io</a> that triggers exponential blow up!</p>\n<p>Perf is very sensitive to <code>P::Clone</code>, I had to use an arena to get things to run this fast and to avoid a stack overflow.</p>",
        "id": 239599653,
        "sender_full_name": "Eh2406",
        "timestamp": 1621520455
    },
    {
        "content": "<p>Wow congrats! that is good new indeed!</p>",
        "id": 239773900,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1621612828
    }
]