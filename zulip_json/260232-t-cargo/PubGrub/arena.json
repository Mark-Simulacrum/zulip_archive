[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> in the arena module why are you defining the clone, copy, eq, ... traits instead of deriving them? is this because of the phantom data? By the way it's the first time I see use of it so I'm discovering it a bit while reading the code</p>",
        "id": 227962531,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614361065
    },
    {
        "content": "<p>IDK, try removing the impls and adding the derive. If it works, and the test pass, then I did it by accident.</p>",
        "id": 227962863,
        "sender_full_name": "Eh2406",
        "timestamp": 1614361201
    },
    {
        "content": "<blockquote>\n<p>phantom data</p>\n</blockquote>\n<p>is just a way to tell the type system that I am using a T, while telling the code generator that I am not.<br>\nThis lets us keep track of the fact that this u32 does not have the same type as one from a different arena. But at runtime it is just a u32.</p>",
        "id": 227963283,
        "sender_full_name": "Eh2406",
        "timestamp": 1614361337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/arena/near/227962863\">said</a>:</p>\n<blockquote>\n<p>IDK, try removing the impls and adding the derive. If it works, and the test pass, then I did it by accident.</p>\n</blockquote>\n<p>Indeed, deriving some properties requires additional bounds on <code>T</code> that we actually do not need because it's phantom, so that's why you manually defined those. Some people link to this thread regarding similar cases with derive: <a href=\"https://github.com/rust-lang/rust/issues/26925\">https://github.com/rust-lang/rust/issues/26925</a></p>",
        "id": 227964083,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614361646
    },
    {
        "content": "<p>That makes sense. Can you add a comment explaining that?</p>",
        "id": 227965360,
        "sender_full_name": "Eh2406",
        "timestamp": 1614362080
    },
    {
        "content": "<p>Or do you want me to?</p>",
        "id": 227965391,
        "sender_full_name": "Eh2406",
        "timestamp": 1614362097
    },
    {
        "content": "<p>Yep just did that</p>",
        "id": 227965406,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614362103
    },
    {
        "content": "<p>I'll do a few commits for docs of things I come accross while reading</p>",
        "id": 227965461,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614362122
    },
    {
        "content": "<p>I'll write few things down here while reading. Don't feel like you need to answer those now. It's just so that you know what things are going through my head while reading. And I might even find answers to some of those on my own while continuing reading. Just doing that so that I don't post a ton of things all at once. But I'll keep those notes and organize a summary of my questions at the end.</p>",
        "id": 227970481,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614364121
    },
    {
        "content": "<p>[ ] std::any::type_name wasn't that the one with a security issue at some point?<br>\n[ ] Should we start bigger for Arena::new()?<br>\n[ ] why using id.into_raw() for Derived.shared_id? It is used in the reporting code, but we actually do not need that to be a usize per-se. So going forward, we should refactor the reporting code to use the <code>Id</code> type instead and not having to expose an <code>into_raw</code> method.</p>",
        "id": 227970499,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614364135
    },
    {
        "content": "<p>[ ] do we actually need Incompatibility::from_dependencies? It is allocating a vec, and it seems it's only used to do two things, (1) iterate over newly created incompats in solver::resolve and add them to the incompatibility store (arena), and (2) add the version to the partial solution if the dependencies are not problematic. (2) needs references to those incompatibilities, which could be done via the Arena if it implemented something like slices or iterators starting at a given Id and of a given size. (don't know if that's possible)</p>",
        "id": 227980384,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614368176
    },
    {
        "content": "<blockquote>\n<p>std::any::type_name wasn't that the one with a security issue at some point?</p>\n</blockquote>\n<p>I don't think so, but now I can't find it. I think the one with the issues let you take an ID and turn it into a T.<br>\n<a href=\"https://blog.rust-lang.org/2019/05/13/Security-advisory.html\">https://blog.rust-lang.org/2019/05/13/Security-advisory.html</a></p>",
        "id": 227986859,
        "sender_full_name": "Eh2406",
        "timestamp": 1614370730
    },
    {
        "content": "<blockquote>\n<p>Should we start bigger for Arena::new()?</p>\n</blockquote>\n<p>worth experimenting! Not worth holding things up for.</p>",
        "id": 227987585,
        "sender_full_name": "Eh2406",
        "timestamp": 1614371033
    },
    {
        "content": "<blockquote>\n<p>So going forward, we should refactor the reporting code to use the Id type instead and not having to expose an into_raw method.</p>\n</blockquote>\n<p>Yes! But that is a braking change and so far we have not made any on dev. So let's look into that after a 2.1</p>",
        "id": 227987994,
        "sender_full_name": "Eh2406",
        "timestamp": 1614371218
    },
    {
        "content": "<blockquote>\n<p>do we actually need Incompatibility::from_dependencies</p>\n</blockquote>\n<p>Did not think of this! We should definitely experiment!</p>",
        "id": 227988363,
        "sender_full_name": "Eh2406",
        "timestamp": 1614371368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/260232-t-cargo.2FPubGrub/topic/arena/near/227987994\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>So going forward, we should refactor the reporting code to use the Id type instead and not having to expose an into_raw method.</p>\n</blockquote>\n<p>Yes! But that is a braking change and so far we have not made any on dev. So let's look into that after a 2.1</p>\n</blockquote>\n<p>Very true!</p>",
        "id": 228067724,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614443047
    },
    {
        "content": "<p>[ ] merge_into(id: Id&lt;Self&gt;, incompats: &amp;mut Vec&lt;Id&lt;Self&gt;&gt;) method becomes an associated function<br>\n[ ] build_derivation_tree method also becomes an associated function, are they both still located in the right module?</p>",
        "id": 228068332,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614443739
    },
    {
        "content": "<p>[ ] I like the simpler State.add_incompatibility!</p>",
        "id": 228068335,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614443752
    },
    {
        "content": "<blockquote>\n<p>merge_into</p>\n</blockquote>\n<p>Should just be inlined. Except then what to do with the comment.<br>\nSo until we have a plan for how to impl that comment, I don't think there will be a \"good place\" for it.</p>",
        "id": 228070476,
        "sender_full_name": "Eh2406",
        "timestamp": 1614445971
    },
    {
        "content": "<p>[ ] does conflict_resolution need the id? or can pass the &amp;Incompat?</p>\n<div class=\"codehilite\"><pre><span></span><code>    -&gt; it returns the id in the end, is it needed?\n    -&gt; it calls build_derivation_tree(id) (same question, need id?)\n       -&gt; it calls Incompatibility::build_derivation_tree which needs it since it has to know if it&#39;s a shared id\n       BTW seems like build_derivation_tree would be better located directly in the core module.\n    -&gt; it calls self.backtrack(id) (same question, need id?)\n        -&gt; it calls Incompat::merge_into, which needs the id since it merges into a Vec of Ids\n    -&gt; it calls Incompat::prior_cause, which I guess def need the id\n</code></pre></div>\n<p>[ ] same question for self.partial_solution.add_derivation?</p>",
        "id": 228070519,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614446010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> with all the performance work that (mostly you) we have done since 2.0 there is a huge boost. I just relaunched the code solving dependencies of all versions of all elm packages (same from last time, I didn't updated it with the new packages since then). It went from 900ms to 400ms in the latest version</p>",
        "id": 228087452,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1614465262
    }
]