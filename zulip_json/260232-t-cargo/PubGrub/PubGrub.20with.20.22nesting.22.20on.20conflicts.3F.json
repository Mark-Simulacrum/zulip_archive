[
    {
        "content": "<p>Hi all, I just came into this Zulip to ask Cargo folks about the resolver algorithm and saw this stream. Is this PubGrub port intended to modify PubGrub so that it is also able to \"nest\" a minimal set of duplicate package names the way Cargo currently does, or does it intend to enforce a full-flat structure on Cargo?</p>",
        "id": 258420544,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634755127
    },
    {
        "content": "<p>Cargo's behavior is stable and will not be changing. If (when?) our work on PubGrub gets good enough to to consider using it in Cargo, then we will need to figure out how to module Cargo's behavior with PubGrub. Some notes on how we are planning to do that are at <a href=\"https://pubgrub-rs-guide.netlify.app/limitations/multiple_versions.html\">https://pubgrub-rs-guide.netlify.app/limitations/multiple_versions.html</a></p>",
        "id": 258453334,
        "sender_full_name": "Eh2406",
        "timestamp": 1634768269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"409053\">@Kat Marchán (they/she)</span> sorry for the slow response. I always love talking about dependency resolution. Especially if it relates to Cargo or PubGrub!</p>",
        "id": 258455139,
        "sender_full_name": "Eh2406",
        "timestamp": 1634769274
    },
    {
        "content": "<p>no worries :)</p>\n<p>I'm one of the maintainers for NuGet, the package manager for C#/.NET, and we've been having a lot of conversations about next steps for our resolver, and I personally am a big fan of PubGrub. We've been talking about moving to an algorithm that side-loads multiple same-name libraries, and Cargo and NPM are the only two I know of that actually do that.</p>",
        "id": 258455390,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634769412
    },
    {
        "content": "<p>and I already know NPM's algorithm (it's too simplistic)</p>",
        "id": 258455415,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634769429
    },
    {
        "content": "<p>That's really cool! How can I help?</p>",
        "id": 258455800,
        "sender_full_name": "Eh2406",
        "timestamp": 1634769638
    },
    {
        "content": "<p>in an ideal world, I would be able to just port PubGrub over and add some \"nesting\", but I don't know how to do that at all :)</p>",
        "id": 258455801,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634769641
    },
    {
        "content": "<p>I'll read this page and see if that gets me any ideas on how we could do this! It's also unlikely we would be able to completely move over to PubGrub, but even just getting an idea about how to do this for SAT solvers would be handy</p>",
        "id": 258455942,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634769722
    },
    {
        "content": "<p>Do you want to hop on or schedule a call?</p>",
        "id": 258456076,
        "sender_full_name": "Eh2406",
        "timestamp": 1634769786
    },
    {
        "content": "<p>let's schedule something! <a href=\"https://book.ms/kmarchan@microsoft.com\">https://book.ms/kmarchan@microsoft.com</a> maybe a 30 minute call?</p>",
        "id": 258456584,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634770082
    },
    {
        "content": "<p>Re \"PubGrub with nesting\". <br>\nI have not yet done it at a production level of quality. So take what I'm saying with a big grain of salt. <br>\nBut A Term (the parts of an Incompatibility) rely on representing a \"One of this Set\" semantics. So if the library is a port of PubGrub ( not a more complicated algorithm with similar inspiration ) then it needs to be built around mutually exclusive versions. I.E. I am leaning tord modeling multiple nesting's before handing it to PobGrub.</p>",
        "id": 258456796,
        "sender_full_name": "Eh2406",
        "timestamp": 1634770212
    },
    {
        "content": "<p>interesting. I don't get how you'd do that. Is that in the link you sent?</p>",
        "id": 258457094,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634770423
    },
    {
        "content": "<p>Yes.</p>",
        "id": 258457250,
        "sender_full_name": "Eh2406",
        "timestamp": 1634770522
    },
    {
        "content": "<p>cool :D</p>",
        "id": 258457276,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634770537
    },
    {
        "content": "<p>And if that document doesn't make sense, PR's are welcome!</p>",
        "id": 258457298,
        "sender_full_name": "Eh2406",
        "timestamp": 1634770558
    },
    {
        "content": "<p>Will do.</p>\n<p>For someone who's now worked on three different package managers (incl two major ones), the resolvers have never been the part I actually worked on and they're always so far over my head it's a bit embarrassing lol.</p>",
        "id": 258457412,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634770614
    },
    {
        "content": "<p>which is to say, don't mind my silly questions haha</p>",
        "id": 258457565,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634770702
    },
    {
        "content": "<p>I love working on it, because if you think you understand it then you have not thought things through carefully enough. (Just as a corollary of it being NP complete)</p>",
        "id": 258457587,
        "sender_full_name": "Eh2406",
        "timestamp": 1634770718
    },
    {
        "content": "<p>weee</p>",
        "id": 258457595,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634770726
    },
    {
        "content": "<p>But if someone asks me about how the linker should work... No one fully understands all the parts of the package manager.</p>",
        "id": 258457668,
        "sender_full_name": "Eh2406",
        "timestamp": 1634770789
    },
    {
        "content": "<p>Even if you don't end up going with PubGrub or Cargo like things. I have \"thoughts\" about how to make a resolver that is not a deep well of technical debt.</p>",
        "id": 258458143,
        "sender_full_name": "Eh2406",
        "timestamp": 1634771021
    },
    {
        "content": "<p>NuGet currently uses FC-CBJ (forward checking conflict-directed backjumping) which means basically nothing to me right now, but might make sense to you! :)</p>",
        "id": 258458337,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634771141
    },
    {
        "content": "<p>Does it have its own implementation, or does it rely on some library?</p>",
        "id": 258458523,
        "sender_full_name": "Eh2406",
        "timestamp": 1634771235
    },
    {
        "content": "<p>it has its own implementation, which hasn't been touched in 7 years :)</p>",
        "id": 258458626,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634771283
    },
    {
        "content": "<p>(no one actually understands it because the authors have long rotated off the team haha)</p>",
        "id": 258458671,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634771312
    },
    {
        "content": "<p>That sounds like \"a deep well of technical debt\", if I ever saw one. And yes that is not so different from what Cargo is using now.</p>",
        "id": 258458859,
        "sender_full_name": "Eh2406",
        "timestamp": 1634771411
    },
    {
        "content": "<p>Complete with the \"it is too complicated and entangled to change\" situation.</p>",
        "id": 258459108,
        "sender_full_name": "Eh2406",
        "timestamp": 1634771533
    },
    {
        "content": "<p>aaaa looking forward to chatting with you next week :)))</p>",
        "id": 258461824,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634773287
    },
    {
        "content": "<p>thanks for making time for me!</p>",
        "id": 258461831,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634773291
    },
    {
        "content": "<p>I'm happy to talk about this stuff literally anytime!</p>",
        "id": 258461854,
        "sender_full_name": "Eh2406",
        "timestamp": 1634773314
    },
    {
        "content": "<p>Given that there are clearly more package managers then people who want to maintain resolvers, I would love to see reusable libraries that can be maintained together. libsolv, is one. And I hope that PubGrub-rs can grow up to be another. Even if we can just share a format for test cases / benchmarks, that would be amazing!</p>",
        "id": 258462550,
        "sender_full_name": "Eh2406",
        "timestamp": 1634773775
    },
    {
        "content": "<p>omg you have no idea how much I'd love to use Rust for this hahahhaah</p>",
        "id": 258462694,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634773850
    },
    {
        "content": "<p>not that they'd ever let me :|</p>",
        "id": 258462702,
        "sender_full_name": "Kat Marchán (they/she)",
        "timestamp": 1634773856
    },
    {
        "content": "<p>One of the best things I did for testing Cargo and PubGrub-rs is a test only alternative implementation that uses a library (So far I have used a SAT library) to check that they Resolver only errors when there is no valid solution.<br>\nSo even libraries that don't work for your production needs may still  be helpful!</p>",
        "id": 258464391,
        "sender_full_name": "Eh2406",
        "timestamp": 1634774845
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"409053\">@Kat Marchán (they/she)</span> ! Happy to help too. Especially if some things in the guide that <span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span>  linked are not clear and we can improve that</p>",
        "id": 258591634,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1634839590
    }
]