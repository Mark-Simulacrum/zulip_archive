[
    {
        "content": "<p>Dependency resolution is NP-Hard. So if we fuzz enough we will find cases that take a long time. If we find one it is interesting to look at it and figure out how it escaped our optimizations. In Cargo when there are debug assertions we have a hard cutoff, a time out where test fail. <a href=\"https://github.com/rust-lang/cargo/issues/6258\">https://github.com/rust-lang/cargo/issues/6258</a> is the issue track the propcases found this way.</p>\n<p>A users of our crate may want to have a time out. For example a website that lets you see all the transitive deps of a cargo.toml, is opening itself up to a denial of services if there is an input that takes a while. </p>\n<p>So for testing I want to add a way to have a timeout, but it may as well be an unobtrusive part of the api, suggestions?</p>",
        "id": 212871944,
        "sender_full_name": "Eh2406",
        "timestamp": 1602275277
    },
    {
        "content": "<p>My thought is made <code>DependencyProvider</code> has an optional method <code>fn callback(&amp;self) -&gt; Result&lt;(), Erorr&gt; {Ok(())}</code> that we call as part of the main loop. If it is overwritten and returns an <code>Err</code> then resolution will fail with that <code>Err</code>. That lets our tests (or a website) add a timeout, and a CLI add an interrupt. But I am open to other suggestions.</p>",
        "id": 212874718,
        "sender_full_name": "Eh2406",
        "timestamp": 1602276995
    },
    {
        "content": "<p>Having a dedicated <code>callback</code> seems like a good idea</p>",
        "id": 212877253,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602278535
    },
    {
        "content": "<p>I just realize I forgot the rest of what I wanted to say above. I added \"dedicated\" not in opposition to optional, optional is a good idea, but in opposition to hijacking <code>list_available_versions</code> and <code>get_dependencies</code> which can also return errors.</p>",
        "id": 212890454,
        "sender_full_name": "Matthieu Pizenberg",
        "timestamp": 1602289508
    },
    {
        "content": "<p>I'm wondering if callback should take an argument of a struct that has some stats of how much work the resolver has done. For now it can provide no info, but then we can add stuff in the future without breaking the api.</p>",
        "id": 212945618,
        "sender_full_name": "Eh2406",
        "timestamp": 1602385168
    },
    {
        "content": "<p>Let's bikeshed the naming I guess. Current suggestions:</p>\n<ul>\n<li>checkpoint</li>\n<li>loop_checkpoint</li>\n<li>check_interrupt</li>\n<li>check_interruption</li>\n<li>cancellation</li>\n<li>should_cancel</li>\n<li>should_interrupt</li>\n</ul>",
        "id": 213300285,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602687075
    },
    {
        "content": "<p>I think something like <code>should_cancel</code>/<code>should_interrupt</code> reads well with error handling question mark that follows <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213300482,
        "sender_full_name": "Alex Tokarev",
        "timestamp": 1602687165
    },
    {
        "content": "<p>I'm feeling should_cancel at the moment.</p>",
        "id": 213300629,
        "sender_full_name": "Eh2406",
        "timestamp": 1602687234
    }
]