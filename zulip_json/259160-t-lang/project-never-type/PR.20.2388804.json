[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, looking at your PR now</p>",
        "id": 253495052,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631743449
    },
    {
        "content": "<p>Gotten through basically all but the last commit</p>",
        "id": 253495071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631743466
    },
    {
        "content": "<p>Need to think more about this</p>",
        "id": 253495138,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631743510
    },
    {
        "content": "<p>I don't really like the <code>FoundRelationships</code> tracking</p>",
        "id": 253495337,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631743609
    },
    {
        "content": "<p>Looking at the example in the OP (can you add this as a test btw?):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(never_type_fallback)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">R</span>: <span class=\"nc\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 253495856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631743866
    },
    {
        "content": "<p>How often did this come up in the crater run?</p>",
        "id": 253495908,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631743904
    },
    {
        "content": "<p>And how is this logically more justifiable than just always falling back to <code>()</code> when <code>()</code> impls Foo but <code>!</code> does not</p>",
        "id": 253496512,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744243
    },
    {
        "content": "<p>We can diff with Niko's PR</p>",
        "id": 253496745,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744379
    },
    {
        "content": "<p>I think there were quite a few crates this fixed</p>",
        "id": 253496767,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744393
    },
    {
        "content": "<p>Your  rule I <em>think</em> is ok, but hurts because we aren't as precise</p>",
        "id": 253496928,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744457
    },
    {
        "content": "<p>Correct</p>",
        "id": 253496945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744464
    },
    {
        "content": "<p>I guess I have two concerns</p>",
        "id": 253496959,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744473
    },
    {
        "content": "<p>The first is, as above, the justification</p>",
        "id": 253496989,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744485
    },
    {
        "content": "<p>The second</p>",
        "id": 253496992,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744487
    },
    {
        "content": "<p>Is more implementation</p>",
        "id": 253497000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744492
    },
    {
        "content": "<p>It would be nicer to have some way to just \"mark\" type variables as \"live\"</p>",
        "id": 253497029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744511
    },
    {
        "content": "<p>rather than needed to track these \"relationships\"</p>",
        "id": 253497071,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744522
    },
    {
        "content": "<p>It might cause failures where we want ! and () impls to coexist (and there's no associated type), like From for Infallible</p>",
        "id": 253497098,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744535
    },
    {
        "content": "<p>I think the relationship tracking is basically marking them live? It's just that it's live if a and b</p>",
        "id": 253497187,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744585
    },
    {
        "content": "<p>It might be that we should integrate that into the coercion graph though</p>",
        "id": 253497255,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/PR.20.2388804/near/253497255\">said</a>:</p>\n<blockquote>\n<p>It might be that we should integrate that into the coercion graph though</p>\n</blockquote>\n<p>yes more that</p>",
        "id": 253497277,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744637
    },
    {
        "content": "<p>But that's only really changing code in the fallback module - I expect it won't make any difference to the behavior. Should be cleaner, I think.</p>",
        "id": 253497389,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744682
    },
    {
        "content": "<p>I think if we do go with this, imo, hack we should consider also adding a lint/future compat warning</p>",
        "id": 253497400,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744689
    },
    {
        "content": "<p>Though curious on <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s thoughts</p>",
        "id": 253497421,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744700
    },
    {
        "content": "<p>Niko and I both agree in spirit that we want a lint</p>",
        "id": 253497507,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744751
    },
    {
        "content": "<p>On a bunch of cases</p>",
        "id": 253497539,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744762
    },
    {
        "content": "<p>(not just around never / unit distinction, but fallback in general)</p>",
        "id": 253497595,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744791
    },
    {
        "content": "<p>Anyways, I'll go ahead and finish reviewing this commit/PR under the pretense that 1) there could be more a more elegant implementation approach, but this is \"straightforward\" and likely \"temporary\" (famous last words) 2) The precise logic here <em>is</em> what we want</p>",
        "id": 253497738,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744882
    },
    {
        "content": "<p>It's likely pretty long term</p>",
        "id": 253497773,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744898
    },
    {
        "content": "<p>Any phase out is at the soonest years out I think</p>",
        "id": 253497802,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744916
    },
    {
        "content": "<p>(maybe partially coupled to edition 24)</p>",
        "id": 253497845,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744946
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 253497849,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744950
    },
    {
        "content": "<p>I tend to think of implementation time length in terms of \"pre chalk merge\" vs \"longer than that\"</p>",
        "id": 253497891,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631744974
    },
    {
        "content": "<p>But I think we do want to get as fine-grained with () fallback as we can</p>",
        "id": 253497904,
        "sender_full_name": "simulacrum",
        "timestamp": 1631744980
    },
    {
        "content": "<p>Because ! Fallback is sort of justifiable, () is much less so</p>",
        "id": 253497980,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745005
    },
    {
        "content": "<p>Sounds good on review though</p>",
        "id": 253498055,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745055
    },
    {
        "content": "<p>side thought: has there been a perf run on this?</p>",
        "id": 253498108,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631745082
    },
    {
        "content": "<p>I imagine this commit in particular will likely have a pretty serious hit</p>",
        "id": 253498148,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631745111
    },
    {
        "content": "<p>Yeah, it's neutral iirc</p>",
        "id": 253498159,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745117
    },
    {
        "content": "<p>But I'm not sure if it was on this particular version</p>",
        "id": 253498219,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745134
    },
    {
        "content": "<p>Feel free to queue one, it's cheap</p>",
        "id": 253498230,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745143
    },
    {
        "content": "<p>Was that done with <code>never_type_fallback</code> enabled by default?</p>",
        "id": 253498466,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631745291
    },
    {
        "content": "<p>Yes</p>",
        "id": 253498525,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745331
    },
    {
        "content": "<p>None of the code except the last step is gated on that right?</p>",
        "id": 253498563,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745361
    },
    {
        "content": "<p>Perf wise it shouldn't matter whether it's enabled I think</p>",
        "id": 253498628,
        "sender_full_name": "simulacrum",
        "timestamp": 1631745388
    },
    {
        "content": "<p>Yeah, probably not</p>",
        "id": 253498703,
        "sender_full_name": "Jack Huey",
        "timestamp": 1631745448
    }
]