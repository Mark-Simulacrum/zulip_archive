[
    {
        "content": "<p>Hi all.</p>\n<p>I post here in order to confirm whether rustc is buggy when dealing the code segment below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Error: expected `!`, found integer</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>since rustc thinks the following code is okay:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Essentially I don't think there are any differences between the two code segments.</p>\n<p>It may cause problems similar to this one <a href=\"https://github.com/rust-lang/rust/issues/66173#issuecomment-574892360\">https://github.com/rust-lang/rust/issues/66173#issuecomment-574892360</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">empty_func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">unconstrained_return</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">empty_func</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">unconstrained_return</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// Here the type of `x` is `((), !)`.</span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">((),</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Besides tuples, a few other expressions suffer from the same problem:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// cannot add `{integer}` to `Box&lt;!&gt;`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// cannot apply unary operator `-` to type `!`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// cannot apply unary operator `!` to type `!`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// type `!` cannot be dereferenced</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">return</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// cannot add `{integer}` to `&amp;!`</span>\n</code></pre></div>\n<p>I think <code>!</code> shouldn't appear in above error messages since I don't enable the feature gate <code>never_type_fallback</code>.</p>\n<p>I am working on it and if it is considered as a bug, I will open a PR that fixes it.</p>",
        "id": 237174326,
        "sender_full_name": "lrh2000",
        "timestamp": 1620054084
    },
    {
        "content": "<p>According to <a href=\"https://godbolt.org/\">https://godbolt.org/</a>, it seems that we have the same behavior since 1.24.0. And before 1.24.0, coercing anything to <code>!</code> is allowed, which is a different issue.<br>\nThe key question is that I'm not sure whether or not the behavior here is expected. Although nobody will actually write code like this, I think it deserves a small fix if the behavior is unexpected. Does it make sense?</p>",
        "id": 237292172,
        "sender_full_name": "lrh2000",
        "timestamp": 1620119755
    },
    {
        "content": "<p>Hmm. It sort of depends on the fix, I'm not sure I'm inclined to break compiling code.</p>",
        "id": 237303480,
        "sender_full_name": "simulacrum",
        "timestamp": 1620125661
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 237303491,
        "sender_full_name": "simulacrum",
        "timestamp": 1620125667
    },
    {
        "content": "<p>We are working on a path towards landing never type stabilization more broadly, FWIW.</p>",
        "id": 237303540,
        "sender_full_name": "simulacrum",
        "timestamp": 1620125699
    },
    {
        "content": "<p>hmm, I'm not entirely sure how that comes about</p>",
        "id": 237385646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620157017
    },
    {
        "content": "<p>I guess what happens is that <code>return</code> has type <code>!</code> and we never introduce a type variable when it is part of a tuple?</p>",
        "id": 237385918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620157129
    },
    {
        "content": "<blockquote>\n<p>We are working on a path towards landing never type stabilization more broadly, FWIW.</p>\n</blockquote>\n<p>Yeah, I'm aware about it. I don't think the never type stabilization is helpful towards this issue. I believe we are still unable to compile the first code segment even if we have the stabilization done.</p>",
        "id": 237433732,
        "sender_full_name": "lrh2000",
        "timestamp": 1620183609
    },
    {
        "content": "<blockquote>\n<p>I guess what happens is that <code>return</code> has type <code>!</code> and we never introduce a type variable when it is part of a tuple?</p>\n</blockquote>\n<p>Yes, exactly. In most cases the never type becomes a diverging type variable only when <a href=\"https://github.com/rust-lang/rust/blob/ae8b84bf04cddda2379b36c45a575132e6a44fb0/compiler/rustc_typeck/src/check/coercion.rs#L169\">coercion occurs</a>. But in the cases that I mentioned before, we <a href=\"https://github.com/rust-lang/rust/blob/ae8b84bf04cddda2379b36c45a575132e6a44fb0/compiler/rustc_typeck/src/check/expr.rs#L1104\">won't coerce</a> the never type with any other types.</p>",
        "id": 237433765,
        "sender_full_name": "lrh2000",
        "timestamp": 1620183639
    },
    {
        "content": "<blockquote>\n<p>Hmm. It sort of depends on the fix, I'm not sure I'm inclined to break compiling code.</p>\n</blockquote>\n<p>Actually if we just want to fix the problem about tuples, it should be very easy and it won't break anything almost certainly.</p>\n<p>But these days I am considering whether I can fix the problem in a more general way. For example, maybe we should convert the never type to the diverging type just at the end of the function <code>check_expr_with_expectation</code>, like this <a href=\"https://github.com/lrh2000/rust/commit/fa1c9ebe2af750d92ed73669c34cfdfd4862fe1a\">draft commit</a>. But interestingly and very unexpectedly, it changes error messages emitted by the region check, although they do not seem to be real regressions. Maybe later I will post some details here.</p>",
        "id": 237433913,
        "sender_full_name": "lrh2000",
        "timestamp": 1620183765
    },
    {
        "content": "<p>(Since I'm relatively new to the rustc compiler community, it is likely that I did something wrong. Feel free to point them out and thanks a lot for any feedback.)</p>",
        "id": 237434537,
        "sender_full_name": "lrh2000",
        "timestamp": 1620184338
    },
    {
        "content": "<p>Yeah, I'm debating about it. The question is basically whether to ever <em>assign</em> something the 'never type' at all</p>",
        "id": 237496825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222196
    },
    {
        "content": "<p>Or whether it always begins as a diverging type variable</p>",
        "id": 237496845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222207
    },
    {
        "content": "<p>this code:</p>",
        "id": 237497011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222262
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unconstrained_return</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">empty_func</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237497032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222274
    },
    {
        "content": "<p>is really a fairly broken pattern</p>",
        "id": 237497043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222280
    },
    {
        "content": "<p>I wonder how widespread it is</p>",
        "id": 237497058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222289
    },
    {
        "content": "<blockquote>\n<p>is really a fairly broken pattern</p>\n</blockquote>\n<p>Yeah, I think so. But isn't the code an example that you gave in <a href=\"https://github.com/rust-lang/rust/issues/66173#issuecomment-574892360\">https://github.com/rust-lang/rust/issues/66173#issuecomment-574892360</a> ?</p>",
        "id": 237498103,
        "sender_full_name": "lrh2000",
        "timestamp": 1620222735
    },
    {
        "content": "<p>Actually I am very curious about how the never type fallback can cause problems <strong>without any unsafe code</strong>. Even more, is there a regression in real code segments (used in production)?</p>",
        "id": 237498194,
        "sender_full_name": "lrh2000",
        "timestamp": 1620222767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407862\">@lrh2000</span> it is</p>",
        "id": 237498250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222796
    },
    {
        "content": "<p>I'm only just now realizing that we've been approaching the \"lint\" from the wrong side</p>",
        "id": 237498274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222810
    },
    {
        "content": "<p>that is, we were approaching is \"lint for when this code winds up falling back to never\"</p>",
        "id": 237498294,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222818
    },
    {
        "content": "<p>but we should perhaps have been approaching it from \"lint for code that can produce values of any type\"</p>",
        "id": 237498318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222828
    },
    {
        "content": "<p>or 'potentially uninhabited' types</p>",
        "id": 237498395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222845
    },
    {
        "content": "<p>and encouraging the use of <code>MaybeUnit</code> or other such constructs</p>",
        "id": 237498433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407862\">lrh2000</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/Never.20type.20in.20tuple/near/237498194\">said</a>:</p>\n<blockquote>\n<p>Actually I am very curious about how the never type fallback can cause problems <strong>without any unsafe code</strong>. Even more, is there a regression in real code segments (used in production)?</p>\n</blockquote>\n<p>define problems :)</p>",
        "id": 237498495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222891
    },
    {
        "content": "<p>I don't believe it causes <em>unsoundness</em></p>",
        "id": 237498521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222900
    },
    {
        "content": "<p>well</p>",
        "id": 237498598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222931
    },
    {
        "content": "<p>it depends on one's definition, I  guess</p>",
        "id": 237498606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222936
    },
    {
        "content": "<p>I believe producing value of any types must require unsafe code, and fairly broken unsafe code. In my opinion, it should be very obvious and even needn't a lint to detect.</p>",
        "id": 237499515,
        "sender_full_name": "lrh2000",
        "timestamp": 1620223264
    },
    {
        "content": "<p>Is there any good examples to show it is useful?</p>",
        "id": 237499585,
        "sender_full_name": "lrh2000",
        "timestamp": 1620223290
    },
    {
        "content": "<p>I think the common thing is when you \"know\" the types you expect to instantiate with but for whatever reason don't want a trait or so</p>",
        "id": 237499993,
        "sender_full_name": "simulacrum",
        "timestamp": 1620223440
    },
    {
        "content": "<p>not sure that's <em>good</em> though</p>",
        "id": 237500058,
        "sender_full_name": "simulacrum",
        "timestamp": 1620223452
    },
    {
        "content": "<p>How can you produce a value of <em>any type</em> in such a way? I think it must mean that we use unsafe code to operate directly the memory on a generic parameter. Then the code is just totally broken and it won't be used in any real scenarios.</p>",
        "id": 237500725,
        "sender_full_name": "lrh2000",
        "timestamp": 1620223718
    },
    {
        "content": "<blockquote>\n<p>Or whether it always begins as a diverging type variable</p>\n</blockquote>\n<p>In favor of consistency, I generally prefer this. Here is another <a href=\"https://github.com/lrh2000/rust/commit/82dadf0eb66b5ed36844361ec4d3dbf4143b4f3a\">draft commit</a> but with fixed regression tests.<br>\nMaybe you can have a look at it? I'd like to file a PR in one or two days if I don't hear any negative feedback from here.</p>",
        "id": 237516160,
        "sender_full_name": "lrh2000",
        "timestamp": 1620228698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407862\">lrh2000</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/Never.20type.20in.20tuple/near/237499515\">said</a>:</p>\n<blockquote>\n<p>I believe producing value of any types must require unsafe code, and fairly broken unsafe code. In my opinion, it should be very obvious and even needn't a lint to detect.</p>\n</blockquote>\n<p>Well, we know from experience it happens :)</p>",
        "id": 237525027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620232009
    },
    {
        "content": "<p>It's not always so obvious, sadly; the case in question was the objc crate, where the type came from user annotations</p>",
        "id": 237525085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620232037
    },
    {
        "content": "<p>Another idea. How about just always beginning from a diverging type, but performing the never type fallback conditionally in the <code>structurally_resolved_type</code> if the diverging type is not unified with other type variables (non-diverging type variables)?</p>",
        "id": 237628795,
        "sender_full_name": "lrh2000",
        "timestamp": 1620292758
    },
    {
        "content": "<p>Now we have this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR no method named `foo` found for type `!` in the current scope</span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR type annotations needed</span>\n<span class=\"fm\">panic!</span><span class=\"p\">().</span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR type annotations needed</span>\n</code></pre></div>\n<p>The last two statements failed because <code>structurally_resolved_type</code> cannot resolve the diverging type. We can coerce the diverging type to <code>()</code> or <code>!</code> <em>if we know this won't affect other code</em>.</p>",
        "id": 237628806,
        "sender_full_name": "lrh2000",
        "timestamp": 1620292767
    },
    {
        "content": "<p>I am trying to check whether the variable is unified with other non-diverging variables in the unification table. But maybe I need to ignore a lot of auxiliary type variables according to <code>TypeVariableOriginKind</code>.</p>\n<p>I am fairly unsure about whether I am on the right way. Do you think it works?</p>",
        "id": 237628812,
        "sender_full_name": "lrh2000",
        "timestamp": 1620292773
    },
    {
        "content": "<p>A proof-of-concept seems to show it works well.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0282]: type annotations needed\n --&gt; y.rs:3:5\n  |\n2 |     let a = return;\n  |         - consider giving `a` a type\n3 |     { if true { a } else { return } }.foo();\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n  |\n  = note: type must be known at this point\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0599]: no method named `foo` found for unit type `!` in the current scope\n --&gt; y.rs:2:44\n  |\n2 |     { if true { return } else { return } }.foo();\n  |                                            ^^^ method not found in `!`\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0599]: no method named `foo` found for unit type `!` in the current scope\n --&gt; y.rs:4:39\n  |\n4 |     { if true { a } else { return } }.foo();\n  |                                       ^^^ method not found in `!`\n</code></pre></div>\n<p>where we have <code>let a: ! = return</code> in the last case.</p>",
        "id": 237644510,
        "sender_full_name": "lrh2000",
        "timestamp": 1620301641
    }
]