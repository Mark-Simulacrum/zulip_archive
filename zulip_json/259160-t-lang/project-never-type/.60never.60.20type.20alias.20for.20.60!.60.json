[
    {
        "content": "<p>Hi everyone,</p>",
        "id": 218884020,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1607112067
    },
    {
        "content": "<p>I did a little experiment of adding a type alias for <code>!</code> called <code>never</code>, which effectively renames the never type.<br>\n<a href=\"https://github.com/rust-lang/rust/pull/79707\">https://github.com/rust-lang/rust/pull/79707</a></p>",
        "id": 218884108,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1607112120
    },
    {
        "content": "<p>What do you think about that idea?</p>",
        "id": 218884205,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1607112149
    },
    {
        "content": "<p>So you can write</p>\n<div class=\"codehilite\"><pre><span></span><code>fn foo() -&gt; never {\n    let x: never = panic!();\n}\n</code></pre></div>",
        "id": 218884287,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1607112181
    },
    {
        "content": "<p>(Many details are in the PR)</p>",
        "id": 218884520,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1607112279
    },
    {
        "content": "<p>the motivation seems a little weak IMO, I don't think ! is any more confusing than <code>@</code> in match bindings, and I'd expect it to be used about as frequently</p>",
        "id": 218884617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607112327
    },
    {
        "content": "<p>that said since this is backwards compatible maybe that's not the worst thing, being able to google keywords is always nice</p>",
        "id": 218884667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607112361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200368\">@Julian-Wollersberger</span> Note that if you just want a name for it, you can use <code>std::convert::Infallible</code> -- that's currently its own empty enum, but the expectation is that it will change to a <code>type</code> alias for <code>!</code> when <code>!</code> stabilizes -- see <a href=\"https://github.com/rust-lang/rust/pull/79470#issuecomment-735391490\">https://github.com/rust-lang/rust/pull/79470#issuecomment-735391490</a></p>\n<p>For a lang perspective <code>fn foo() -&gt; ! { loop {} }</code> is already stable, so that would need to keep working with <code>!</code>, and having two names for the same thing is something that we'll generally not do without extraordinary motivation.  (Libs putting a type alias for this in the prelude is not impossible, but I think it's unlikely that they'd choose to do so.)</p>\n<p>And note that you can already search for <code>!</code> in the docs to find out about it: <a href=\"https://doc.rust-lang.org/nightly/std/?search=!\">https://doc.rust-lang.org/nightly/std/?search=!</a></p>\n<p>Edit: gah, so hard to get the markdown link parser to include the <code>!</code>...</p>",
        "id": 218887723,
        "sender_full_name": "scottmcm",
        "timestamp": 1607113934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/.60never.60.20type.20alias.20for.20.60!.60/near/218884617\">said</a>:</p>\n<blockquote>\n<p>the motivation seems a little weak IMO, I don't think ! is any more confusing than <code>@</code> in match bindings, and I'd expect it to be used about as frequently</p>\n</blockquote>\n<p>This is also my biggest concern. It's an improvement to a very niche feature.</p>\n<p>(Although I'd argue that \"as confusing as @\" is still confusing)</p>",
        "id": 218897550,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1607119768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/.60never.60.20type.20alias.20for.20.60!.60/near/218887723\">said</a>:</p>\n<blockquote>\n<p>and having two names for the same thing is something that we'll generally not do without extraordinary motivation.  </p>\n</blockquote>\n<p>Yes, this would mean to then deprecate the old syntax, possibly make it a hard error in the next edition.</p>",
        "id": 218898332,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1607120191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"200368\">Julian-Wollersberger</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/.60never.60.20type.20alias.20for.20.60!.60/near/218898332\">said</a>:</p>\n<blockquote>\n<p>Yes, this would mean to then deprecate the old syntax, possibly make it a hard error in the next edition.</p>\n</blockquote>\n<p>I think the churn of it, even if <code>cargo fix</code>able, still needs superpowered motivation.</p>\n<p>For example, <code>!</code> is used in the printed book &lt;<a href=\"https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-04-advanced-types.html#the-never-type-that-never-returns\">https://doc.rust-lang.org/1.30.0/book/second-edition/ch19-04-advanced-types.html#the-never-type-that-never-returns</a>&gt;.  Would it be the end of the world to follow that and get \"it's spelled <code>never</code> now\"? No.  But is it better <em>enough</em> to be worth it?  I'd say no.</p>\n<p>(I think no matter what it's named, people will still end up in the docs for the difference between <code>()</code> and <code>!</code>, so as long as it's searchable I'm not too worried about the keypresses to get it.  Is it common enough to get a sigil?  No, probably not if I had a time machine, but oh well.)</p>",
        "id": 218905097,
        "sender_full_name": "scottmcm",
        "timestamp": 1607125030
    },
    {
        "content": "<p>Isn't this what doc alias is for?</p>",
        "id": 218915573,
        "sender_full_name": "isHavvy",
        "timestamp": 1607139378
    }
]