[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> -- wondering if there's perhaps a quick answer here. When we're looking at some code like <code>foo(|| panic!())</code>, where foo takes <code>impl Fn() -&gt; B where B: Bar</code>, my assumption was that we would have an obligation <code>FnOnce::Output = ?R</code> <em>and</em> an obligation <code>?R: Bar</code>, but it looks like only the later is pending when we hit fallback</p>",
        "id": 237394252,
        "sender_full_name": "simulacrum",
        "timestamp": 1620160821
    },
    {
        "content": "<p>I'm trying to figure out if it's because e.g. the FnOnce::Output = ?R obligation \"always\" holds, i.e., that we've already resolved it, or if I'm in somehow the wrong context or something</p>",
        "id": 237394337,
        "sender_full_name": "simulacrum",
        "timestamp": 1620160871
    },
    {
        "content": "<p>hm ok so I've tracked down the obligation getting selected away:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Obligation(predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [_#0t, ()], item_def_id: DefId(2:3050 ~ core[2898]::ops::function::FnOnce::Output) }, _#1t), []), cause=ObligationCauseData { span: src/test/ui/never_type/fallback-trait-bound.rs:17:5: 17:22 (#0), body_id: HirId { owner: DefId(0:9 ~ fallback_trait_bound[317d]::main), local_id: 15 }, code: BindingObligation(DefId(0:6 ~ fallback_trait_bound[317d]::takes_closure_ret), src/test/ui/never_type/fallback-trait-bound.rs:9:26: 9:27 (#0)) }, param_env=ParamEnv { caller_bounds: [], reveal: UserFacing }, depth=0),\n</code></pre></div>",
        "id": 237485709,
        "sender_full_name": "simulacrum",
        "timestamp": 1620217412
    },
    {
        "content": "<p>which gets removed here <a href=\"https://github.com/Mark-Simulacrum/rust/blob/never-type-fallback-new/compiler/rustc_typeck/src/check/fallback.rs#L15\">https://github.com/Mark-Simulacrum/rust/blob/never-type-fallback-new/compiler/rustc_typeck/src/check/fallback.rs#L15</a></p>",
        "id": 237485811,
        "sender_full_name": "simulacrum",
        "timestamp": 1620217454
    },
    {
        "content": "<p>I guess it <em>is</em> already \"just true\", given the sized predicates and such...??</p>",
        "id": 237486432,
        "sender_full_name": "simulacrum",
        "timestamp": 1620217767
    },
    {
        "content": "<p>I could try to store information just before that select but my impression it's generally considered fine to call it wherever, so we could easily regress (well, test suite would break)</p>",
        "id": 237490357,
        "sender_full_name": "simulacrum",
        "timestamp": 1620219602
    },
    {
        "content": "<p>But it seems that's a bit unreliable</p>",
        "id": 237490409,
        "sender_full_name": "simulacrum",
        "timestamp": 1620219611
    },
    {
        "content": "<p>Preventing the selection of this obligation seems pretty dangerous too though</p>",
        "id": 237490821,
        "sender_full_name": "simulacrum",
        "timestamp": 1620219771
    },
    {
        "content": "<p>Maybe we should find the code that generates this obligation and stash some relationship information there, give we're going with a targeted approach</p>",
        "id": 237491356,
        "sender_full_name": "simulacrum",
        "timestamp": 1620219980
    },
    {
        "content": "<p>I think for now I'll just stash information before select runs and that'll hopefully work well enough for a crater run at least</p>",
        "id": 237491404,
        "sender_full_name": "simulacrum",
        "timestamp": 1620220009
    },
    {
        "content": "<p>alright that seems to have worked as expected, roughly</p>",
        "id": 237495077,
        "sender_full_name": "simulacrum",
        "timestamp": 1620221469
    },
    {
        "content": "<p>hmm</p>",
        "id": 237496565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222082
    },
    {
        "content": "<p>I imagine it gets selected because we just do a unification</p>",
        "id": 237496688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222133
    },
    {
        "content": "<p>not sure I understand, since it seems like the relevant types to facilitate a unification in that obligation aren't known? Maybe we know enough for it to hold, though</p>",
        "id": 237497840,
        "sender_full_name": "simulacrum",
        "timestamp": 1620222624
    },
    {
        "content": "<p>You mean because we don't know <code>_#0t</code>?</p>",
        "id": 237498184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/return.20type.20in.20function/near/237485811\">said</a>:</p>\n<blockquote>\n<p>which gets removed here <a href=\"https://github.com/Mark-Simulacrum/rust/blob/never-type-fallback-new/compiler/rustc_typeck/src/check/fallback.rs#L15\">https://github.com/Mark-Simulacrum/rust/blob/never-type-fallback-new/compiler/rustc_typeck/src/check/fallback.rs#L15</a></p>\n</blockquote>\n<p>is this the link you meant to send, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ?</p>",
        "id": 237498217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222780
    },
    {
        "content": "<p>oh I pushed since then</p>",
        "id": 237498242,
        "sender_full_name": "simulacrum",
        "timestamp": 1620222793
    },
    {
        "content": "<p><a href=\"https://github.com/Mark-Simulacrum/rust/blob/never-type-fallback-new/compiler/rustc_typeck/src/check/fallback.rs#L83\">https://github.com/Mark-Simulacrum/rust/blob/never-type-fallback-new/compiler/rustc_typeck/src/check/fallback.rs#L83</a></p>",
        "id": 237498261,
        "sender_full_name": "simulacrum",
        "timestamp": 1620222804
    },
    {
        "content": "<p>but the whole loop there that's now visible is the thing I added as a hack</p>",
        "id": 237498285,
        "sender_full_name": "simulacrum",
        "timestamp": 1620222814
    },
    {
        "content": "<p>ah, that makes more sense =)</p>",
        "id": 237498713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222967
    },
    {
        "content": "<p>I am not 100% sure <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> why it gets selected away, I guess i have poke, it may be due to caching or other things</p>",
        "id": 237498779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620222990
    },
    {
        "content": "<p>or it might be that <code>_#0t</code> is resolved but you're not seeing it in that print out :)</p>",
        "id": 237498804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620223001
    },
    {
        "content": "<p>yeah, ultimately, may not matter for our experiments</p>",
        "id": 237498809,
        "sender_full_name": "simulacrum",
        "timestamp": 1620223003
    },
    {
        "content": "<p>_#0t is the closure type fwiw (obviously)</p>",
        "id": 237498832,
        "sender_full_name": "simulacrum",
        "timestamp": 1620223014
    },
    {
        "content": "<p>so it's sort of \"somewhat known\"</p>",
        "id": 237498882,
        "sender_full_name": "simulacrum",
        "timestamp": 1620223033
    },
    {
        "content": "<p>and it may be enough to say that the output bound holds, because closures can return any sized type, and we know the output variable is sized</p>",
        "id": 237498952,
        "sender_full_name": "simulacrum",
        "timestamp": 1620223064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is there a way to dump the hir or so with the type inference variables annotated? having to reconstruct what the numbers 'are' is a bit painful...</p>",
        "id": 237502222,
        "sender_full_name": "simulacrum",
        "timestamp": 1620224244
    },
    {
        "content": "<p>so we have a new test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ticker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loopify</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ticker</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">loopify</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>::<span class=\"n\">Output</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237504180,
        "sender_full_name": "simulacrum",
        "timestamp": 1620225002
    },
    {
        "content": "<p>which fails with:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/test/ui/never_type/fallback-future.rs:9:18\n  |\n9 |         Ok(v) =&gt; v,\n  |                  ^ expected `()`, found `!`\n  |\n  = note: expected unit type `()`\n                  found type `!`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n</code></pre></div>",
        "id": 237504321,
        "sender_full_name": "simulacrum",
        "timestamp": 1620225050
    },
    {
        "content": "<p>I think what is happening is that the <code>return</code> in the match falls back to () as it 'leaks out' into live code, but by that point we've already decided that the loop {} should be !</p>",
        "id": 237504554,
        "sender_full_name": "simulacrum",
        "timestamp": 1620225128
    },
    {
        "content": "<p>however, it's not clear to me <em>why</em> we decide that - I would expect that the inference variable for the async move output type is noticed in a F::Output = ?R obligation...</p>",
        "id": 237504780,
        "sender_full_name": "simulacrum",
        "timestamp": 1620225212
    },
    {
        "content": "<p>hm, I wonder if the subtype predicates should be treated like coercion predicates for our purposes, in terms of checking whether something leaks out</p>",
        "id": 237505114,
        "sender_full_name": "simulacrum",
        "timestamp": 1620225317
    },
    {
        "content": "<p>hm, ok, so subtype predicates do fix <em>this</em> test</p>",
        "id": 237507713,
        "sender_full_name": "simulacrum",
        "timestamp": 1620226217
    },
    {
        "content": "<p>but they break src/test/ui/coercion/coerce-issue-49593-box-never.rs</p>",
        "id": 237507732,
        "sender_full_name": "simulacrum",
        "timestamp": 1620226223
    },
    {
        "content": "<p>which... well, hm</p>",
        "id": 237508515,
        "sender_full_name": "simulacrum",
        "timestamp": 1620226486
    },
    {
        "content": "<p>that test seems like it <em>should</em> fail, though it's a bit unclear</p>",
        "id": 237508535,
        "sender_full_name": "simulacrum",
        "timestamp": 1620226496
    },
    {
        "content": "<p>I guess the intent is that Box::new(!) -&gt; Box&lt;dyn Error&gt; should work, even though in practice it <em>feels</em> like this is essentially a leak of never into 'userland'</p>",
        "id": 237508627,
        "sender_full_name": "simulacrum",
        "timestamp": 1620226528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/return.20type.20in.20function/near/237502222\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> is there a way to dump the hir or so with the type inference variables annotated? having to reconstruct what the numbers 'are' is a bit painful...</p>\n</blockquote>\n<p>not really and yes it is :/</p>",
        "id": 237525132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620232058
    },
    {
        "content": "<p>at least, not that I know of</p>",
        "id": 237525155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620232066
    },
    {
        "content": "<p>hmm</p>",
        "id": 237537153,
        "sender_full_name": "simulacrum",
        "timestamp": 1620236807
    },
    {
        "content": "<p>so I added the subtyping rule because my current understanding (unconfirmed by anything really) is in cases like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we end up with a Subtype obligation on <code>return e</code> and <code>o</code> types</p>",
        "id": 237537406,
        "sender_full_name": "simulacrum",
        "timestamp": 1620236886
    },
    {
        "content": "<p>which does fix the loopify test case above (<a href=\"https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/src/test/ui/never_type/fallback-future.rs\">https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/src/test/ui/never_type/fallback-future.rs</a>)</p>",
        "id": 237537853,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237063
    },
    {
        "content": "<p>but we then run into trouble on code like in <a href=\"https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/src/test/ui/coercion/coerce-issue-49593-box-never.rs#L13\">https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/src/test/ui/coercion/coerce-issue-49593-box-never.rs#L13</a></p>",
        "id": 237537901,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237086
    },
    {
        "content": "<p>where we actually <em>do</em> want ! to escape into live code without falling back to ()</p>",
        "id": 237537930,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237102
    },
    {
        "content": "<p>previously that worked because Niko's algorithm only considered explicit coercion sites, though I'm not sure why actually, since subtyping seems 'just as bad' to me - maybe because of this.</p>",
        "id": 237538040,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237139
    },
    {
        "content": "<p>the thing is, we derive the roots of the 'diverging' variable specifically from ! -&gt; Any adjustments</p>",
        "id": 237538412,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237302
    },
    {
        "content": "<p>but that seems <em>too</em> pessimistic</p>",
        "id": 237538531,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237355
    },
    {
        "content": "<p>maybe I should re-read Niko's gist again</p>",
        "id": 237538549,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/return.20type.20in.20function/near/237537406\">said</a>:</p>\n<blockquote>\n<p>so I added the subtyping rule because my current understanding (unconfirmed by anything really) is in cases like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>we end up with a Subtype obligation on <code>return e</code> and <code>o</code> types</p>\n</blockquote>\n<p>so it seems like I (or Niko's summary in the gist) is wrong about this claim:</p>\n<blockquote>\n<p>In a case like this, the type of the match is ultimately represented by a type variable ?M. The first arm is assigned a type variable ?T and the second arm (which panics) gets the type !. Both ?T and ! are coerced into ?M:</p>\n</blockquote>",
        "id": 237540237,
        "sender_full_name": "simulacrum",
        "timestamp": 1620237971
    },
    {
        "content": "<p>hm. I don't think I'll make much progress without some brainstorming session or so, seems like we need some insight to tease apart these two cases</p>",
        "id": 237578135,
        "sender_full_name": "simulacrum",
        "timestamp": 1620254156
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> sorry for dropping out here</p>",
        "id": 239426998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432130
    },
    {
        "content": "<p>let me take a look at what you wrote...</p>",
        "id": 239427001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432133
    },
    {
        "content": "<p>do you have a branch somewher I can look at?</p>",
        "id": 239427020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432140
    },
    {
        "content": "<p>yeah</p>",
        "id": 239427249,
        "sender_full_name": "simulacrum",
        "timestamp": 1621432234
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/84573\">https://github.com/rust-lang/rust/pull/84573</a></p>",
        "id": 239427313,
        "sender_full_name": "simulacrum",
        "timestamp": 1621432255
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 239427790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/return.20type.20in.20function/near/237537901\">said</a>:</p>\n<blockquote>\n<p>but we then run into trouble on code like in <a href=\"https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/src/test/ui/coercion/coerce-issue-49593-box-never.rs#L13\">https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/src/test/ui/coercion/coerce-issue-49593-box-never.rs#L13</a></p>\n</blockquote>\n<p>so, in this case, we want <code>!</code> before <code>(): Error</code> is not true?</p>",
        "id": 239428134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432556
    },
    {
        "content": "<p>I actually think my algorithm ought to have handled that case--</p>",
        "id": 239428243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432586
    },
    {
        "content": "<p>even with a coercion</p>",
        "id": 239428258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432595
    },
    {
        "content": "<p>in particular, I the type variable there should only have been <em>targeted</em> by a \"subtype/coercion from <code>!</code>\"</p>",
        "id": 239428313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432615
    },
    {
        "content": "<p>hm</p>",
        "id": 239428361,
        "sender_full_name": "simulacrum",
        "timestamp": 1621432642
    },
    {
        "content": "<p>and I thought that was the criteria under which we would fall back to <code>!</code>-- that is, so long as you don't target anything which was <em>also</em> the target of a coercion from \"live\" variables</p>",
        "id": 239428379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432651
    },
    {
        "content": "<p>but I maybe have to look back at what I wrote :)</p>",
        "id": 239428400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432660
    },
    {
        "content": "<p>in the loopify example, is the what behavior do you <em>want</em> -- <code>()</code>?</p>",
        "id": 239428671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432763
    },
    {
        "content": "<p>I'm actually surprised that needs fallback at all</p>",
        "id": 239428704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432782
    },
    {
        "content": "<p>though I think I can imagine why</p>",
        "id": 239428745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432797
    },
    {
        "content": "<p>(but to be sure I understand, the problem was that you were falling back to <code>!</code> and getting a type error?)</p>",
        "id": 239428855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432828
    },
    {
        "content": "<p>I'm not sure -- I think ideally you'd have <code>!</code> in the sense that you aren't going to hit that code</p>",
        "id": 239428860,
        "sender_full_name": "simulacrum",
        "timestamp": 1621432830
    },
    {
        "content": "<p>and we do get <code>!</code>, but then that ran into problems with the type error</p>",
        "id": 239428924,
        "sender_full_name": "simulacrum",
        "timestamp": 1621432850
    },
    {
        "content": "<p>it's not obvious what you would prefer, indeed</p>",
        "id": 239428962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432861
    },
    {
        "content": "<p>but the general rule is that we try to \"coerce\" <code>!</code> to make type errors go away</p>",
        "id": 239429000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432872
    },
    {
        "content": "<p>it's a bit surprising then that we are hitting a type error</p>",
        "id": 239429048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432882
    },
    {
        "content": "<p>I think adding the subtype rule to the coercion graph - <a href=\"https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/compiler/rustc_typeck/src/check/fallback.rs#L458\">https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/compiler/rustc_typeck/src/check/fallback.rs#L458</a> solved that problem</p>",
        "id": 239429087,
        "sender_full_name": "simulacrum",
        "timestamp": 1621432894
    },
    {
        "content": "<p>trying to rerun tests now locally</p>",
        "id": 239429233,
        "sender_full_name": "simulacrum",
        "timestamp": 1621432936
    },
    {
        "content": "<p>interesting, ok</p>",
        "id": 239429315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432974
    },
    {
        "content": "<p>I do agree that subtyping / coercion probably ought not to be distinguished</p>",
        "id": 239429425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621432998
    },
    {
        "content": "<p>(I think the reason is that match arms can subtype to the 'match expression type', but don't coerce, but I didn't actually manage to confirm that)</p>",
        "id": 239429501,
        "sender_full_name": "simulacrum",
        "timestamp": 1621433027
    },
    {
        "content": "<p>I could imagine it happens sometimes, but match usually converges</p>",
        "id": 239430303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621433308
    },
    {
        "content": "<p>coerces you mean?</p>",
        "id": 239430358,
        "sender_full_name": "simulacrum",
        "timestamp": 1621433325
    },
    {
        "content": "<p>yeah the latest branch is only failing the box-never test:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n  --&gt; /home/mark/Build/rust/src/test/ui/coercion/coerce-issue-49593-box-never.rs:13:53\n   |\nLL |     /* *mut $0 is coerced to Box&lt;dyn Error&gt; here */ Box::&lt;_ /* ! */&gt;::new(x)\n   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n   |\n   = note: required for the cast to the object type `dyn std::error::Error`\n</code></pre></div>",
        "id": 239430423,
        "sender_full_name": "simulacrum",
        "timestamp": 1621433354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_typeck::check::fallback create_coercion_graph: coercion_edges=[(_#1t, _#4t)]\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: diverging_type_vars={_#2t}\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: diverging_roots={_#4t}\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: unsolved_vid=_#1t root_vid=_#1t diverges=false\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: unsolved_vid=_#2t root_vid=_#4t diverges=true\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: root_vid=_#4t reaches [_#4t]\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: unsolved_vid=_#4t root_vid=_#4t diverges=true\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: root_vid=_#4t reaches [_#4t]\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: roots_reachable_from_diverging={_#4t}\nDEBUG rustc_typeck::check::fallback calculate_diverging_fallback: roots_reachable_from_non_diverging={_#1t, _#4t}\n</code></pre></div>",
        "id": 239431514,
        "sender_full_name": "simulacrum",
        "timestamp": 1621433721
    },
    {
        "content": "<p>I think _#2t is the _ in Box&lt;_&gt;, perhaps?</p>",
        "id": 239431753,
        "sender_full_name": "simulacrum",
        "timestamp": 1621433797
    },
    {
        "content": "<p>4t is the x, I suspect, not really sure what the 1t is though</p>",
        "id": 239431967,
        "sender_full_name": "simulacrum",
        "timestamp": 1621433881
    },
    {
        "content": "<p>it doesn't really seem obvious that these should need any fallback in this code, so maybe something else is off</p>",
        "id": 239432043,
        "sender_full_name": "simulacrum",
        "timestamp": 1621433898
    },
    {
        "content": "<p>hm, ok, so the problem I <em>think</em> is that Box::new(!) creates fallback on the type of the box, because for some reason it's not directly known from ! -- that seems like a bug almost? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 239432389,
        "sender_full_name": "simulacrum",
        "timestamp": 1621434026
    },
    {
        "content": "<p>i.e., we produce Box&lt;_&gt;, and since _ there touches live code, it falls back to (), and then we coerce ! -&gt; (), and wind up trying to do (): dyn Error, which isn't going to work</p>",
        "id": 239432492,
        "sender_full_name": "simulacrum",
        "timestamp": 1621434070
    },
    {
        "content": "<p>so really we sort of want to say that in the case of coercion/subtyping from <em>known</em> !, then we shouldn't be falling back to ()</p>",
        "id": 239432858,
        "sender_full_name": "simulacrum",
        "timestamp": 1621434206
    },
    {
        "content": "<p>but I don't know how feasible it is</p>",
        "id": 239432874,
        "sender_full_name": "simulacrum",
        "timestamp": 1621434213
    },
    {
        "content": "<p>hmm</p>",
        "id": 239502712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621462078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/return.20type.20in.20function/near/239432858\">said</a>:</p>\n<blockquote>\n<p>so really we sort of want to say that in the case of coercion/subtyping from <em>known</em> !, then we shouldn't be falling back to ()</p>\n</blockquote>\n<p>yeah, this came up before</p>",
        "id": 239502768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621462091
    },
    {
        "content": "<p>i.e., the regression that made us revert <code>!</code> before was like this</p>",
        "id": 239502793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621462108
    },
    {
        "content": "<p>and it is what motivated my original algorithm</p>",
        "id": 239502803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621462113
    },
    {
        "content": "<p>I don't <em>quite</em> understand what's going on yet</p>",
        "id": 239502815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621462120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so the test in question is ui/coercion/coerce-issue-49593-box-never.rs right?</p>",
        "id": 239556541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621501048
    },
    {
        "content": "<p>(Yes)</p>",
        "id": 239556556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621501063
    },
    {
        "content": "<p>is it possible you haven't pushed your latest commits?</p>",
        "id": 239556779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621501171
    },
    {
        "content": "<p>I'm digging into this code. If I'm not mistaken, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, this failure may be the result of a fairly surprising bug</p>",
        "id": 239560079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621502849
    },
    {
        "content": "<p>also damn my kingdom for the ability to jump in a debugging at any given point in the output and use <code>rr</code></p>",
        "id": 239560254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621502934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> does this actually work and I'm just making my life harder than it has to be? <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 239560283,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621502946
    },
    {
        "content": "<p>I think in this case I'd have been happy just to find the filename/line-number and not even have needed the ability to see the values of local variables</p>",
        "id": 239560319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621502963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so <a href=\"https://github.com/rust-lang/rust/blob/0eb4e811915eae2964e6072086d4a13c8daf136b/compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs#L1458\">this line</a> should be a call to <code>eq</code>, I'm pretty sure:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">misc</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">).</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">impl_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239562789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504262
    },
    {
        "content": "<p>however, I can't <em>quite</em> get a test that shows the current logic is unsound yet.</p>",
        "id": 239562823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504291
    },
    {
        "content": "<p>What is happening here, as best I understand:</p>",
        "id": 239562841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504304
    },
    {
        "content": "<ul>\n<li>we are referencing a fully qualified method like <code>SomeType::&lt;X&gt;::foo</code></li>\n<li>here <code>self_ty</code> is the type the user gave (<code>SomeType&lt;X&gt;</code>)</li>\n<li>there is an impl like <code>impl&lt;A&gt; SomeType&lt;A&gt;</code> and <code>impl_ty</code> is <code>SomeType&lt;A&gt;</code></li>\n<li>the code <em>as written</em> is requiring that <code>self_ty &lt;: impl_ty</code></li>\n<li>but we want them to be the <em>same type</em></li>\n</ul>",
        "id": 239563021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504400
    },
    {
        "content": "<p>it may be that we can't trigger an unsoundness here because of the details of how this stuff works, but that seems surprising to me</p>",
        "id": 239563619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504686
    },
    {
        "content": "<p>it feels like this should allow the type <em>written by the user</em> to be different than the type that shows up in the fn signature</p>",
        "id": 239563647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504701
    },
    {
        "content": "<p>in ways that are unexpected</p>",
        "id": 239563659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504709
    },
    {
        "content": "<p>if I change to <code>eq</code>, the test passes</p>",
        "id": 239564072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621504919
    },
    {
        "content": "<p>Huh!</p>",
        "id": 239573130,
        "sender_full_name": "simulacrum",
        "timestamp": 1621509577
    },
    {
        "content": "<p>Well I guess seems good that we found it, and then I'll check some more of the crater breakage in as explicit test cases</p>",
        "id": 239573760,
        "sender_full_name": "simulacrum",
        "timestamp": 1621509869
    },
    {
        "content": "<p>I'm still poking at trying to make a test case that shows my this is wrong</p>",
        "id": 239585596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621515257
    },
    {
        "content": "<p>but yes</p>",
        "id": 239585614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621515267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> fwiw <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/wf/wf-static-method.rs#L50\">https://github.com/rust-lang/rust/blob/master/src/test/ui/wf/wf-static-method.rs#L50</a> now fails with an error</p>",
        "id": 239598350,
        "sender_full_name": "simulacrum",
        "timestamp": 1621520045
    },
    {
        "content": "<p>lol</p>",
        "id": 239598387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520060
    },
    {
        "content": "<p>which, according to the comment, is right</p>",
        "id": 239598399,
        "sender_full_name": "simulacrum",
        "timestamp": 1621520064
    },
    {
        "content": "<p>ther looks like the kind of problem I was trying to setup</p>",
        "id": 239598411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520071
    },
    {
        "content": "<p>but I haven't quite gotten the pieces in the right shape</p>",
        "id": 239598450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520083
    },
    {
        "content": "<p>ah yes duh</p>",
        "id": 239598505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520103
    },
    {
        "content": "<p>I was doing that same pattern but with <code>'b = 'static</code></p>",
        "id": 239598539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520116
    },
    {
        "content": "<p>and of course then the code was ok</p>",
        "id": 239598549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520118
    },
    {
        "content": "<p>because <code>'static: 'a</code> for all <code>'a</code></p>",
        "id": 239598563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520123
    },
    {
        "content": "<p>that was as far as I got :)</p>",
        "id": 239598579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520129
    },
    {
        "content": "<p>anyway, yes, that should be an error</p>",
        "id": 239598591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520133
    },
    {
        "content": "<p>you should open a PR with just that one change and <code>r?</code> me</p>",
        "id": 239598620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520144
    },
    {
        "content": "<p>will do</p>",
        "id": 239598639,
        "sender_full_name": "simulacrum",
        "timestamp": 1621520150
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 239598648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621520154
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/pull/85511\">https://github.com/rust-lang/rust/pull/85511</a>, will cherry-pick it onto my branch in the meantime so I can continue making progress</p>",
        "id": 239600730,
        "sender_full_name": "simulacrum",
        "timestamp": 1621520829
    },
    {
        "content": "<p>great, r+'d</p>",
        "id": 239663939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621546956
    }
]