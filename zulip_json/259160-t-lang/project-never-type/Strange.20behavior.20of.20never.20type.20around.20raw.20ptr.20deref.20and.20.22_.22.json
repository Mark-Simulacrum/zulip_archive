[
    {
        "content": "<p>I just found out some very strange behavior of the <code>!</code> type, which I think can only be a bug: <a href=\"https://github.com/rust-lang/rust/issues/79735\">https://github.com/rust-lang/rust/issues/79735</a><br>\nOr at least I see no way to explain the current behavior in a sound (as in, type-safe) way, except for applying very different semantics to <code>!</code> and <code>enum Void {}</code>, which would be surprisingly inconsistent to say the least.<br>\nI am curious what the never-type people here think of this :)</p>",
        "id": 218939063,
        "sender_full_name": "RalfJ",
        "timestamp": 1607181379
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That's an interesting example.  It's arguably a regression in safety checking -- it was an error in 1.16.0.</p>",
        "id": 218960132,
        "sender_full_name": "scottmcm",
        "timestamp": 1607213022
    },
    {
        "content": "<p>I would expect it to be equivalent to <code>intrinsics::assume(ptr != 0)</code>, even if the place isn't later used.  (Like if it were <code>*const String</code> it wouldn't try to move out of it because of the <code>_</code>, but would still conceptually dereference it.)</p>",
        "id": 218960195,
        "sender_full_name": "scottmcm",
        "timestamp": 1607213131
    },
    {
        "content": "<p>But maybe this was an intentional change...</p>",
        "id": 218960199,
        "sender_full_name": "scottmcm",
        "timestamp": 1607213145
    },
    {
        "content": "<p>(It makes me think of those bugs where we ended up adding an always-there discriminant check in some place to make sure that something ends up in the MIR to be checked, even if optimizations removed it later...)</p>",
        "id": 218960462,
        "sender_full_name": "scottmcm",
        "timestamp": 1607213564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/Strange.20behavior.20of.20never.20type.20around.20raw.20ptr.20deref.20and.20.22_.22/near/218960195\">said</a>:</p>\n<blockquote>\n<p>I would expect it to be equivalent to <code>intrinsics::assume(ptr != 0)</code>, even if the place isn't later used.  (Like if it were <code>*const String</code> it wouldn't try to move out of it because of the <code>_</code>, but would still conceptually dereference it.)</p>\n</blockquote>\n<p>so you would <em>not</em> expect it to demand that the <code>bool</code> is 0x00 or 0x01?</p>",
        "id": 218980247,
        "sender_full_name": "RalfJ",
        "timestamp": 1607250569
    },
    {
        "content": "<p>Well, past-Scott certainly would have expected it, since past-Scott didn't know that <code>_</code> had different semantics from <code>_foo</code>...</p>\n<p>I don't know what I expect now.  With <code>let _ = &amp;*ptr;</code> I probably would expect it to demand that, since it made the reference and the reference can be spuriously dereferenced.  But we expect that <code>ptr::raw_const!(*p)</code> works without looking behind the pointer (just doing address math), right?  So maybe that pushes me to thinking that just \"making\" the place doesn't demand the validity invariant of the pointee.</p>\n<p>Hmm, to add to the weirdness, this <em>doesn't</em> compile despite not <em>looking</em> like it does anything different:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219017955,
        "sender_full_name": "scottmcm",
        "timestamp": 1607288686
    }
]