[
    {
        "content": "<p>hi Niko!</p>",
        "id": 216520447,
        "sender_full_name": "blitzerr",
        "timestamp": 1605211609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> hi!</p>",
        "id": 216521208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212000
    },
    {
        "content": "<p>sorry</p>",
        "id": 216521209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212001
    },
    {
        "content": "<p>I got held up!</p>",
        "id": 216521216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212003
    },
    {
        "content": "<p>still around?</p>",
        "id": 216521222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212009
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 216521602,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212203
    },
    {
        "content": "<p>how goes</p>",
        "id": 216521685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212250
    },
    {
        "content": "<p>How do we want to do this today ?</p>",
        "id": 216521691,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212253
    },
    {
        "content": "<p>so</p>",
        "id": 216521708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212261
    },
    {
        "content": "<p>let's try zulip</p>",
        "id": 216521717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212264
    },
    {
        "content": "<p>Our crater build failed</p>",
        "id": 216521724,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212267
    },
    {
        "content": "<p>tbqh I'm a bit at a loss</p>",
        "id": 216521731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212272
    },
    {
        "content": "<p>I guess I can start by refreshing my memory of where we were</p>",
        "id": 216521789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212288
    },
    {
        "content": "<p>It was mad seeing a comment when it expected a comma, but I am unsure why the normal build didn't complain</p>",
        "id": 216521818,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212309
    },
    {
        "content": "<p>So last week. we discussed the problem a bit more.</p>",
        "id": 216521859,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212333
    },
    {
        "content": "<p>(remainds me, can you upload the recording) ?</p>",
        "id": 216521889,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212350
    },
    {
        "content": "<p>And we were discussing the objectc crate wasn't throwing the warning</p>",
        "id": 216521953,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212385
    },
    {
        "content": "<p>didI not upload the requirement?</p>",
        "id": 216522136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212446
    },
    {
        "content": "<p>yeah, so</p>",
        "id": 216522143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212449
    },
    {
        "content": "<p>We spent the most of time trying to see the two cases of warnings we got, if there is some way to avoid them, but we couldn't come up with a solution</p>",
        "id": 216522156,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212452
    },
    {
        "content": "<p>one part would be looking into the crate</p>",
        "id": 216522163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212454
    },
    {
        "content": "<p>and why it doens't trigger</p>",
        "id": 216522259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212498
    },
    {
        "content": "<p>I guess the other thing I was thinking about earlier</p>",
        "id": 216522272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212509
    },
    {
        "content": "<p>is whether we could remove the <em>whole idea</em> of fallback</p>",
        "id": 216522289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212520
    },
    {
        "content": "<p>I decided obviously not</p>",
        "id": 216522307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212523
    },
    {
        "content": "<p>for better or worse that would not be backwards compatible</p>",
        "id": 216522338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212529
    },
    {
        "content": "<blockquote>\n<p>is whether we could remove the whole idea of fallback<br>\nVery interesting !</p>\n</blockquote>",
        "id": 216522385,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212556
    },
    {
        "content": "<p>but what we could <em>maybe</em> do is tweak how or where it applies</p>",
        "id": 216522393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212559
    },
    {
        "content": "<p>I am listening <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216522441,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128294\">blitzerr</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/meeting.202020-nov-12/near/216522385\">said</a>:</p>\n<blockquote>\n<p>Very interesting !</p>\n</blockquote>\n<p>the problem is that things like the <code>Err(X)?</code> pattern would stop compiling</p>",
        "id": 216522462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212594
    },
    {
        "content": "<p>even though I think that would be <em>good</em></p>",
        "id": 216522482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212605
    },
    {
        "content": "<p>well, maybe not <em>good</em></p>",
        "id": 216522487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212610
    },
    {
        "content": "<p>Even with your renewed thought process ?</p>",
        "id": 216522499,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212616
    },
    {
        "content": "<p>well, no, I think that would be good :) but it would break code</p>",
        "id": 216522505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212619
    },
    {
        "content": "<p>well no I mean if we just removed fallback</p>",
        "id": 216522520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212624
    },
    {
        "content": "<p>Like we have never type but remove the fallback to never in cases that it does and preserve the earlier convention of fallback to <code>unit</code> ?</p>",
        "id": 216522659,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212672
    },
    {
        "content": "<p>I guess that we might be able to fix some of the specific cases</p>",
        "id": 216522671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212675
    },
    {
        "content": "<p>in particular the <em>closure case</em></p>",
        "id": 216522677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212678
    },
    {
        "content": "<p>by tweaking various details of the approach</p>",
        "id": 216522699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128294\">blitzerr</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/meeting.202020-nov-12/near/216522659\">said</a>:</p>\n<blockquote>\n<p>Like we have never type but remove the fallback to never in cases that it does and preserve the earlier convention of fallback to <code>unit</code> ?</p>\n</blockquote>\n<p>so, this is an alternative too, but it has some downsides</p>",
        "id": 216522738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212706
    },
    {
        "content": "<p>I guess there are a few things on the table</p>",
        "id": 216522744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212710
    },
    {
        "content": "<p>ok let me step back</p>",
        "id": 216522836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212746
    },
    {
        "content": "<p>what we know is:</p>",
        "id": 216522843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212748
    },
    {
        "content": "<ul>\n<li>the actual objc example doesn't fit the pattern I thought it did</li>\n</ul>",
        "id": 216522861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212755
    },
    {
        "content": "<p>So, if you can point me to some of the files/code I can read up, I can give it a whirl ?</p>",
        "id": 216522871,
        "sender_full_name": "blitzerr",
        "timestamp": 1605212760
    },
    {
        "content": "<p>I don't have a specific enough idea yet :)</p>",
        "id": 216523008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212814
    },
    {
        "content": "<p>I'm looking again at the objc case</p>",
        "id": 216523022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212824
    },
    {
        "content": "<p><code>::objc::__send_message(&amp;*obj, sel, ()) </code></p>",
        "id": 216523064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212840
    },
    {
        "content": "<p><a href=\"https://docs.rs/objc/0.2.6/objc/trait.Message.html#method.send_message\">rustdoc</a></p>",
        "id": 216523153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212882
    },
    {
        "content": "<p>so I think a better condensed version of this this is</p>",
        "id": 216523236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212905
    },
    {
        "content": "<p>oh hmm</p>",
        "id": 216523333,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212950
    },
    {
        "content": "<p>actually I'm not sure why we aren't seeing a warning!</p>",
        "id": 216523383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605212973
    },
    {
        "content": "<p>I will try to explore the \"why\" part.</p>",
        "id": 216523716,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213100
    },
    {
        "content": "<p>yeah</p>",
        "id": 216523764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213115
    },
    {
        "content": "<p>it's confusing</p>",
        "id": 216523768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213116
    },
    {
        "content": "<p>sorry, I was doing a bit of testing</p>",
        "id": 216523787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213120
    },
    {
        "content": "<p>no problem</p>",
        "id": 216523854,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213130
    },
    {
        "content": "<p>this is the \"canonical expample\"</p>",
        "id": 216523940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213166
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unconstrained_return</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ffi</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">some_pointer</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ffi</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">unconstrained_return</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"c1\">// `x` has type `_`, which is unconstrained</span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span><span class=\"w\">  </span><span class=\"c1\">// … except for unifying with the type of `panic!()`</span>\n<span class=\"w\">        </span><span class=\"c1\">// so that both `match` arms have the same type.</span>\n<span class=\"w\">        </span><span class=\"c1\">// Therefore `_` resolves to `!` and we \"return\" an `Ok(!)` value.</span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216523945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213168
    },
    {
        "content": "<p>and indeed it gets a warning</p>",
        "id": 216523952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213171
    },
    {
        "content": "<p>ya, we had libcore failed compiling because of those warnings. SO they do work in some cases <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 216524081,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213222
    },
    {
        "content": "<p>oh wait</p>",
        "id": 216524094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213229
    },
    {
        "content": "<p>when I run <code>cargo expand</code></p>",
        "id": 216524097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213233
    },
    {
        "content": "<p>and I paste in the <em>expanded</em> code</p>",
        "id": 216524107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213236
    },
    {
        "content": "<p>I <em>do</em> get a warning</p>",
        "id": 216524119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213238
    },
    {
        "content": "<p>so maybe it has to do with the macro</p>",
        "id": 216524130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213242
    },
    {
        "content": "<p>maybe there is some logic that is suppressing the lint inside of a macro expansion?</p>",
        "id": 216524189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213251
    },
    {
        "content": "<p>I didn't know about cargo expand <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216524274,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213277
    },
    {
        "content": "<p>useful tool</p>",
        "id": 216524304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213290
    },
    {
        "content": "<p>added to toolbox <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216524365,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213318
    },
    {
        "content": "<p>doesn't always work</p>",
        "id": 216524377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213325
    },
    {
        "content": "<p>anyway ok so <em>that</em> is interesting</p>",
        "id": 216524389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213330
    },
    {
        "content": "<p>I'm wondering who is a good person to ping about this</p>",
        "id": 216524436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213352
    },
    {
        "content": "<p>we could dig a bit into it ourselves</p>",
        "id": 216524446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213355
    },
    {
        "content": "<p>e.g., if you dig into <code>struct_span_lint_hir</code></p>",
        "id": 216524541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213388
    },
    {
        "content": "<p>presuming the lint is being <em>emitted</em></p>",
        "id": 216524556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213393
    },
    {
        "content": "<p>I guess we should validate this with a <code>debug!</code></p>",
        "id": 216524579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213398
    },
    {
        "content": "<p>but there must be <em>some</em> logic that is supressing it</p>",
        "id": 216524598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213407
    },
    {
        "content": "<p>okay, I will do that.</p>",
        "id": 216524613,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213414
    },
    {
        "content": "<p>in any case, that is somewhat encouraging, because it suggests that the main task then is to see if we can suppress the false warnings</p>",
        "id": 216524620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213420
    },
    {
        "content": "<p>ok well</p>",
        "id": 216524680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213442
    },
    {
        "content": "<p>I found it :P</p>",
        "id": 216524684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213443
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// If this code originates in a foreign macro, aka something that this crate</span>\n<span class=\"w\">        </span><span class=\"c1\">// did not itself author, then it's likely that there's nothing this crate</span>\n<span class=\"w\">        </span><span class=\"c1\">// can do about it. We probably want to skip the lint entirely.</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">.</span><span class=\"n\">primary_spans</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">in_external_macro</span><span class=\"p\">(</span><span class=\"n\">sess</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216524687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213445
    },
    {
        "content": "<p>take a look at <code>struct_lint_level_impl</code></p>",
        "id": 216524744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213473
    },
    {
        "content": "<p>you can see that there some settings you can tweak on the lint to make it report <em>even though</em> it's in resulting from the use of an external macro</p>",
        "id": 216524838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213494
    },
    {
        "content": "<p>That makes sense why it gets suppressed</p>",
        "id": 216524850,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213499
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">             </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">future_incompatible</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">lint</span><span class=\"p\">.</span><span class=\"n\">report_in_external_macro</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216524868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213509
    },
    {
        "content": "<p>we should tweak those and see what breaks :)</p>",
        "id": 216524926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213536
    },
    {
        "content": "<p>I see. This is a nested function.</p>",
        "id": 216524979,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213563
    },
    {
        "content": "<p><code>report_in_external_macro</code></p>",
        "id": 216525215,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213661
    },
    {
        "content": "<p>Okay, so it is optional. I will tweak it.</p>",
        "id": 216525256,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213678
    },
    {
        "content": "<p>yep</p>",
        "id": 216525370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213731
    },
    {
        "content": "<p>that's a first thing to do</p>",
        "id": 216525376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213736
    },
    {
        "content": "<p>I'm curious why the PR results in errors</p>",
        "id": 216525391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213743
    },
    {
        "content": "<p>I should take a look at that</p>",
        "id": 216525395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213746
    },
    {
        "content": "<p><code>report_in_external_macro</code> I will set that option while creating the Lint. Currently I was using a helper macro to create the lint.</p>",
        "id": 216525497,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213796
    },
    {
        "content": "<p>That's should be a simple change.</p>",
        "id": 216525508,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213804
    },
    {
        "content": "<p>anyway, this is the example that still bothers me</p>",
        "id": 216525513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213807
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">tls</span>::<span class=\"n\">with_opt</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">tcx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">span</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">diagnostic</span><span class=\"p\">().</span><span class=\"n\">span_bug</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">diagnostic</span><span class=\"p\">().</span><span class=\"n\">bug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216525516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213809
    },
    {
        "content": "<p>and this is where I was wondering if we can tweak things to suppress it</p>",
        "id": 216525527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213814
    },
    {
        "content": "<p>but I'm not sure how yet</p>",
        "id": 216525563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213832
    },
    {
        "content": "<p>there are a lot of inference variables involved</p>",
        "id": 216525583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213839
    },
    {
        "content": "<p>currently fallback triggers whenever a <code>!</code> is coerced to an inference variable</p>",
        "id": 216525676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213864
    },
    {
        "content": "<p>what I <em>could</em> imagine is</p>",
        "id": 216525727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213884
    },
    {
        "content": "<p>do not issue the lint if:</p>",
        "id": 216525779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213904
    },
    {
        "content": "<p>the node that has the type which fell back to <code>!</code> is a function call, and the return type is some inference variable that was attached to the call</p>",
        "id": 216525902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213963
    },
    {
        "content": "<p>e.g., the <code>with_opt</code> function has the singature <code>fn with_opt&lt;...R..&gt;() -&gt; R</code></p>",
        "id": 216525946,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213975
    },
    {
        "content": "<blockquote>\n<p>do not issue the lint if:</p>\n</blockquote>\n<p>never is a possibility but not the only option ?</p>",
        "id": 216525950,
        "sender_full_name": "blitzerr",
        "timestamp": 1605213976
    },
    {
        "content": "<p>and we could suppress the lint on cases like this</p>",
        "id": 216525968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605213985
    },
    {
        "content": "<p>I feel like this makes sense but I'm trying to put into words why</p>",
        "id": 216526007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214004
    },
    {
        "content": "<p>actualyl I guess</p>",
        "id": 216526031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214012
    },
    {
        "content": "<p>we could just suppress the lint maybe on the result of function calls altogether</p>",
        "id": 216526061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214028
    },
    {
        "content": "<p>I have an intution that this makes sense but again i'm struggling to put it into words</p>",
        "id": 216526226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214085
    },
    {
        "content": "<p>it has to do with the fact that our analysis is \"intra-function\"</p>",
        "id": 216526243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214093
    },
    {
        "content": "<p>hmm..</p>",
        "id": 216526285,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214112
    },
    {
        "content": "<p>basically .. in order for the fallback to occur ..</p>",
        "id": 216526351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214140
    },
    {
        "content": "<p>this inference variable has to be \"tainted\" by some other thing that falls back</p>",
        "id": 216526394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214160
    },
    {
        "content": "<p>and the lint should fire <em>there</em></p>",
        "id": 216526404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214167
    },
    {
        "content": "<p>something like that</p>",
        "id": 216526412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214171
    },
    {
        "content": "<p>How do we do the taint analysis in the compiler today ?</p>",
        "id": 216526456,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214194
    },
    {
        "content": "<p>it's not really taint</p>",
        "id": 216526471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214200
    },
    {
        "content": "<p>I mean I'm not talking about taint analysis in the jargon-y term</p>",
        "id": 216526531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214210
    },
    {
        "content": "<p>I'm just saying that</p>",
        "id": 216526537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214214
    },
    {
        "content": "<p>when you invoke a function call</p>",
        "id": 216526541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214217
    },
    {
        "content": "<p>its return value is either hard-coded as <code>!</code></p>",
        "id": 216526558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214222
    },
    {
        "content": "<p>ahh ! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216526559,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214222
    },
    {
        "content": "<p>or else it comes from some type parameter</p>",
        "id": 216526578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214229
    },
    {
        "content": "<p>those type parameters never have fallback on their own</p>",
        "id": 216526604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214245
    },
    {
        "content": "<p>makes sense</p>",
        "id": 216526610,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214246
    },
    {
        "content": "<p>so for them to fallback to <code>!</code></p>",
        "id": 216526615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214248
    },
    {
        "content": "<p>they have to be unified with some <em>other</em> variable</p>",
        "id": 216526622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214252
    },
    {
        "content": "<p>or unified with some value of type <code>!</code></p>",
        "id": 216526644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214262
    },
    {
        "content": "<p>if they come from a variable of type <code>!</code>, then the call is dead, so it doesn't matter</p>",
        "id": 216526665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214274
    },
    {
        "content": "<p>That makes sense. I can follow your chain of reasons</p>",
        "id": 216526680,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214282
    },
    {
        "content": "<p>if they wound up unified with some other variable, then that variable must have been used in some context where we could generate the lint if it applies</p>",
        "id": 216526707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214291
    },
    {
        "content": "<p>that's the rough idea</p>",
        "id": 216526709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214293
    },
    {
        "content": "<p>this logic applies to calls, but not necesarily other sorts of expressions</p>",
        "id": 216526760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214316
    },
    {
        "content": "<p>so yeah I would add that to the code too</p>",
        "id": 216526840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214335
    },
    {
        "content": "<p>(one other point is that we are going to want to add some logic to suppress duplicate warnings at <em>some</em> point....)</p>",
        "id": 216526858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214344
    },
    {
        "content": "<p>we will still get a warning in this case:</p>",
        "id": 216526874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214351
    },
    {
        "content": "<p>hmm..</p>",
        "id": 216526966,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214403
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">unexpected</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216527000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214419
    },
    {
        "content": "<p>but arguably that warning is legitimate, as I said</p>",
        "id": 216527020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214431
    },
    {
        "content": "<p>that's the case I'd prefer to be a hard error tbh</p>",
        "id": 216527041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214441
    },
    {
        "content": "<p>same as <code>Err(X)?</code></p>",
        "id": 216527089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214448
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 216527103,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214453
    },
    {
        "content": "<p>(but we can't)</p>",
        "id": 216527114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214457
    },
    {
        "content": "<p>Not all pleasures one can have <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 216527170,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214483
    },
    {
        "content": "<p>yeah I mean basically we don't know whether</p>",
        "id": 216527186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214493
    },
    {
        "content": "<p><code>parser.unexpected()</code> is actually doing some similar to what the objc crate did</p>",
        "id": 216527201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214503
    },
    {
        "content": "<p>where it \"gins up\" a value that it shouldn't</p>",
        "id": 216527213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214510
    },
    {
        "content": "<p>i.e., this is exactly the pattern we are TRYING to warn about</p>",
        "id": 216527256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214528
    },
    {
        "content": "<p>ok, so, I have to run</p>",
        "id": 216527320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214557
    },
    {
        "content": "<p>do you think you know how to proceed? :)</p>",
        "id": 216527327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214560
    },
    {
        "content": "<p>I think we identified two actionable things:</p>",
        "id": 216527375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214565
    },
    {
        "content": "<ul>\n<li>ensure we report lints in external spans</li>\n<li>suppress the lint on call expressions</li>\n</ul>",
        "id": 216527392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214575
    },
    {
        "content": "<p>the latter.. I'm not sure the best way to do, given that we report the lint in a generic bit of code that just operates on a hir-id</p>",
        "id": 216527422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214594
    },
    {
        "content": "<p>I can think of various ways to refactor the writeback code</p>",
        "id": 216527455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214610
    },
    {
        "content": "<p>or you could check the hir-map or something (which is a way to lookup, based on a HirId, what kind of node you have)</p>",
        "id": 216527500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214633
    },
    {
        "content": "<p>i.e., if you are about to report the lint, then check the map first</p>",
        "id": 216527515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214643
    },
    {
        "content": "<p>I will resubmit the PR after the first change</p>",
        "id": 216527646,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214698
    },
    {
        "content": "<p>The second one, if you can tell me the file/function to look at</p>",
        "id": 216527708,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214726
    },
    {
        "content": "<p>well so in <a href=\"http://writeback.rs\">writeback.rs</a> we have this code:</p>",
        "id": 216527927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214830
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">from_diverging_fallback</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hir_id:{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"n_ty_original:{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">n_ty_original</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fcx</span><span class=\"p\">.</span><span class=\"n\">dead_nodes</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hir_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">from_diverging_fallback</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">n_ty_original</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">struct_span_lint_hir</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">rustc_session</span>::<span class=\"n\">lint</span>::<span class=\"n\">builtin</span>::<span class=\"n\">FALL_BACK_TO_NEVER_TYPE</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">hir_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"n\">lint</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">lint</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"resulted from diverging fallback: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n_ty</span><span class=\"p\">)).</span><span class=\"n\">emit</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216527930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214833
    },
    {
        "content": "<p>I think it wants to become something like</p>",
        "id": 216527942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214839
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">from_diverging_fallback</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hir_id:{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"n_ty_original:{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">n_ty_original</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fcx</span><span class=\"p\">.</span><span class=\"n\">dead_nodes</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">().</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hir_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">from_diverging_fallback</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">n_ty_original</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">is_call_expression</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hir_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- the new logic</span>\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">struct_span_lint_hir</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">rustc_session</span>::<span class=\"n\">lint</span>::<span class=\"n\">builtin</span>::<span class=\"n\">FALL_BACK_TO_NEVER_TYPE</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">hir_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"n\">lint</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">lint</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"resulted from diverging fallback: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n_ty</span><span class=\"p\">)).</span><span class=\"n\">emit</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216527996,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214868
    },
    {
        "content": "<p>to implement <code>is_call_expression</code> ...</p>",
        "id": 216528060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605214906
    },
    {
        "content": "<p>we wanted to test if this inference comes from unification vs return type and that logic goes in the new function we will add ?</p>",
        "id": 216528158,
        "sender_full_name": "blitzerr",
        "timestamp": 1605214941
    },
    {
        "content": "<p>no I mean I am proposing something simpler</p>",
        "id": 216528292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215009
    },
    {
        "content": "<p>basically we are looking at the \"result type\" of some expression, right?</p>",
        "id": 216528307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215021
    },
    {
        "content": "<p>(hmm, I guess this logic I am thinking of may not suffice...)</p>",
        "id": 216528331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215040
    },
    {
        "content": "<p>I have to run, but the thing I was thinking is that</p>",
        "id": 216528435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215093
    },
    {
        "content": "<p>we would just never lint on expressions that are calls</p>",
        "id": 216528445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215100
    },
    {
        "content": "<p>but I realize now this is clearly not going to work so well</p>",
        "id": 216528454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215105
    },
    {
        "content": "<p>e.g., if we have <code>{foo()}</code></p>",
        "id": 216528480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215119
    },
    {
        "content": "<p>that would be</p>",
        "id": 216528495,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215130
    },
    {
        "content": "<ul>\n<li>block<br>\n    * ExprCall</li>\n</ul>",
        "id": 216528503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215135
    },
    {
        "content": "<p>both with the same type</p>",
        "id": 216528509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215141
    },
    {
        "content": "<p>so we might skip linting the call but we'd still lint the block</p>",
        "id": 216528522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215148
    },
    {
        "content": "<p>what we <em>really</em> want to do is to change how we handle the inference here</p>",
        "id": 216528601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215176
    },
    {
        "content": "<p>to give \"directionality\" to the unification</p>",
        "id": 216528633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215196
    },
    {
        "content": "<p>you know, I think we could do that</p>",
        "id": 216528653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215207
    },
    {
        "content": "<p>e.g., if we have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216528669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215221
    },
    {
        "content": "<p>the type of <code>x</code> will be a <code>?T</code> variable</p>",
        "id": 216528687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215242
    },
    {
        "content": "<p>the type of return will be <code>!</code></p>",
        "id": 216528695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215246
    },
    {
        "content": "<p>today, when we try to coerce those together, we'll create a <code>?U</code> that falls back to <code>!</code></p>",
        "id": 216528709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215259
    },
    {
        "content": "<p>and unify it with <code>?T</code></p>",
        "id": 216528711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215263
    },
    {
        "content": "<p>this is how the <code>!</code> \"leaks\" backward into live code</p>",
        "id": 216528721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215272
    },
    {
        "content": "<p>the <em>problem</em> here is that we are <em>unifying</em></p>",
        "id": 216528731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215280
    },
    {
        "content": "<p>I see</p>",
        "id": 216528733,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215281
    },
    {
        "content": "<p>but if we remembered <code>?T -&gt; ?U</code> (i.e., <code>?T</code> must be <em>assignable</em> to <code>?U</code>)</p>",
        "id": 216528782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215294
    },
    {
        "content": "<p>we could, during fallback,</p>",
        "id": 216528791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215300
    },
    {
        "content": "<p>still propagate the <code>!</code> backwards</p>",
        "id": 216528794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215306
    },
    {
        "content": "<p>but issue a warning at the same time</p>",
        "id": 216528802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215309
    },
    {
        "content": "<p>because <em>that</em> is the problematic case</p>",
        "id": 216528822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215320
    },
    {
        "content": "<p>that would probably avoid the false positives <em>and</em> might even give us a route to making this sort of thing a hard error in the future I guess</p>",
        "id": 216528896,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215359
    },
    {
        "content": "<p><em>actually</em></p>",
        "id": 216528930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215379
    },
    {
        "content": "<p>woah</p>",
        "id": 216528932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215381
    },
    {
        "content": "<p>we could, in that acse</p>",
        "id": 216528944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215384
    },
    {
        "content": "<p>I can explore that thought</p>",
        "id": 216528947,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215387
    },
    {
        "content": "<p>convert .. to <code>()</code></p>",
        "id": 216528956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215392
    },
    {
        "content": "<p>and not break the code at all</p>",
        "id": 216529013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215407
    },
    {
        "content": "<p>i.e., if we have a diverging fallback variable</p>",
        "id": 216529028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215413
    },
    {
        "content": "<p>Nice ! Thinking aloud helps <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 216529039,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215426
    },
    {
        "content": "<p>we can see whether it has any of these \"reverse\" edges so to speak, or if all the flow is forward</p>",
        "id": 216529046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215430
    },
    {
        "content": "<p>yeah this is an exciting thought</p>",
        "id": 216529077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215444
    },
    {
        "content": "<p>So basically if </p>\n<blockquote>\n<p>we remembered ?T -&gt; ?U (i.e., ?T must be assignable to ?U)</p>\n</blockquote>\n<p>then make it fall back to unit instead ?</p>",
        "id": 216529109,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215469
    },
    {
        "content": "<p>I think I would <em>still</em> issue a warning :P</p>",
        "id": 216529111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215471
    },
    {
        "content": "<p>but yes</p>",
        "id": 216529118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215473
    },
    {
        "content": "<p>the warning would be like \"oh btw we picked <code>()</code> here totally randomly\"</p>",
        "id": 216529136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215483
    },
    {
        "content": "<p>but that's an entirely separate thing</p>",
        "id": 216529156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215494
    },
    {
        "content": "<p>we could decide</p>",
        "id": 216529157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215496
    },
    {
        "content": "<p>we might not want to, or we might avoid some cases like <code>Err(22)?</code></p>",
        "id": 216529246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215525
    },
    {
        "content": "<p>(in that case, <code>Err(22)</code> would wind up with a type of <code>Result&lt;(), i32&gt;</code>)</p>",
        "id": 216529266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215536
    },
    {
        "content": "<p>because the \"ok\" type would fall back to <code>()</code></p>",
        "id": 216529275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215543
    },
    {
        "content": "<p>ok, well, I have to run, but if you want to think about that, feel free, otherwise we can talk about how to implement a bit later</p>",
        "id": 216529301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215567
    },
    {
        "content": "<p>basically what I would expect to do though</p>",
        "id": 216529327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215585
    },
    {
        "content": "<p>is to record the \"edge\" in some side table during coercion</p>",
        "id": 216529361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215601
    },
    {
        "content": "<p>man, kind of gross and complex, but...</p>",
        "id": 216529375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215609
    },
    {
        "content": "<p>(I pity the fool who ever has to formalize rust inference :)</p>",
        "id": 216529406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215626
    },
    {
        "content": "<p>lol</p>",
        "id": 216529429,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215636
    },
    {
        "content": "<p>There is an effort to do that right ?</p>",
        "id": 216529500,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215656
    },
    {
        "content": "<p>I'm not aware of any</p>",
        "id": 216529532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215672
    },
    {
        "content": "<p>I've thought about it at some point</p>",
        "id": 216529554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215685
    },
    {
        "content": "<p>but ..</p>",
        "id": 216529568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215688
    },
    {
        "content": "<p>The lang-spec team won't try that ?</p>",
        "id": 216529593,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215700
    },
    {
        "content": "<p>there is no lang-spec team that I know of, but even if there were, I think we'd start from an easier point</p>",
        "id": 216529629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215716
    },
    {
        "content": "<p>e.g., spec'ing MIR</p>",
        "id": 216529632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215718
    },
    {
        "content": "<p>after inference has completed</p>",
        "id": 216529640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215724
    },
    {
        "content": "<p>or spec'ing something like MIR anyway</p>",
        "id": 216529655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215736
    },
    {
        "content": "<p>plenty of challenges there</p>",
        "id": 216529689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215751
    },
    {
        "content": "<p>Well if you don't know then they don't exist <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 216529706,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215759
    },
    {
        "content": "<p>i'd like to see such an effort ;)</p>",
        "id": 216529770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215773
    },
    {
        "content": "<p>you have to start it</p>",
        "id": 216529859,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215828
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216529866,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215831
    },
    {
        "content": "<p>I will update our hack md just to lay out the though clearly. We discussed a lot of options today.</p>",
        "id": 216529933,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215874
    },
    {
        "content": "<p>I want to make sure I understood it.</p>",
        "id": 216530001,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215896
    },
    {
        "content": "<p>sounds good</p>",
        "id": 216530012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215903
    },
    {
        "content": "<p>I will let you comment on that before I proceed</p>",
        "id": 216530032,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215911
    },
    {
        "content": "<p>Awesome !</p>",
        "id": 216530049,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215916
    },
    {
        "content": "<p>side note that this zulip sync was fine</p>",
        "id": 216530074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215937
    },
    {
        "content": "<p>maybe we can do this from now on</p>",
        "id": 216530079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215940
    },
    {
        "content": "<p>it's somewhat nicer for me, I get zoom overload</p>",
        "id": 216530087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215944
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for your time and sharing your thoughts. Appreciate it. Let's talk again</p>",
        "id": 216530088,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215944
    },
    {
        "content": "<p>plus we have a nice chat record :)</p>",
        "id": 216530104,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605215952
    },
    {
        "content": "<p>totally, If we are not sharing screen, then zulip works <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216530137,
        "sender_full_name": "blitzerr",
        "timestamp": 1605215982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/259160-t-lang.2Fproject-never-type/topic/meeting.202020-nov-12/near/216524436\">said</a>:</p>\n<blockquote>\n<p>I'm wondering who is a good person to ping about this</p>\n</blockquote>\n<p>clippy has to deal with this for a lot of their lints, maybe they have suggestions?</p>",
        "id": 216534074,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605217803
    },
    {
        "content": "<p>That's a good point Joshua. I guess Niko, figured the code he was looking for.</p>",
        "id": 216549896,
        "sender_full_name": "blitzerr",
        "timestamp": 1605227546
    }
]