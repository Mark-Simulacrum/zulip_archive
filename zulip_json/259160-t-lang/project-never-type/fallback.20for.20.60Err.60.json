[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> -- I was thinking that, conceivably, we could expand the fallback rules so that if you named an enum variant (e.g., <code>let x = Err(22)</code>), the type variables that are not named in that variant were considered to be \"targets of a never coercion\" (i.e., candidates to fallback to <code>!</code>). This would make <code>Err(22)?</code> work and fallback to <code>Result&lt;!, i32&gt;</code> as the final type. It would also make <code>let x = Err(22)</code> have the same type, for better or worse. Would be worth an experiment.</p>",
        "id": 218466704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606849453
    },
    {
        "content": "<p>My main goal in deprecating the <code>()</code> fallback case is that I want the fallback (or lack thereof) for unbound type variables in <code>E</code> and <code>E?</code> to be the same</p>",
        "id": 218466743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606849470
    },
    {
        "content": "<p>so I think that if we think <code>Err(22)</code> ought to fallback to <code>Result&lt;!, i32&gt;</code>, it should probably do so uniformly</p>",
        "id": 218466780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606849491
    },
    {
        "content": "<p>Oh, interesting.  That seems logical to me.</p>",
        "id": 218478827,
        "sender_full_name": "scottmcm",
        "timestamp": 1606855507
    },
    {
        "content": "<p>Would this code continue to create a <code>Result&lt;bool, i32&gt;</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218510344,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606878257
    },
    {
        "content": "<p>Yes, because that bounds both of the type variables in the result type.  So there's no opportunity for it to fallback.</p>",
        "id": 218516842,
        "sender_full_name": "scottmcm",
        "timestamp": 1606886774
    },
    {
        "content": "<p>yep, what <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> said</p>",
        "id": 218567834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1606921174
    },
    {
        "content": "<p>I think <code>Err(22)</code> becoming <code>Result&lt;!, i32&gt;</code> would generally be nice, because currently if you try to do this you'll get errors because the <code>Ok</code> branch has an unknown type, which is less than ideal for code which only ever produces <code>Err</code> anyways.</p>",
        "id": 223177972,
        "sender_full_name": "Jeremiah Senkpiel",
        "timestamp": 1611018614
    }
]