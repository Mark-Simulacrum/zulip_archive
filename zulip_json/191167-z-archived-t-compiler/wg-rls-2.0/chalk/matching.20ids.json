[
    {
        "content": "<p>So I started experimenting with Chalk's <code>ItemId</code>a bit, trying to split it into <code>StructId</code>, <code>TypeId</code> etc., similar to how RA does it</p>",
        "id": 160725766,
        "sender_full_name": "detrumi",
        "timestamp": 1552510131
    },
    {
        "content": "<p>It's amazing how well it fits in many places, since the variable names often reflect what kind of <code>ItemId</code> you're dealing with</p>",
        "id": 160725813,
        "sender_full_name": "detrumi",
        "timestamp": 1552510184
    },
    {
        "content": "<p>So currently, my idea is to make <code>ItemId</code> an enum with a variant for each kind of id</p>",
        "id": 160726070,
        "sender_full_name": "detrumi",
        "timestamp": 1552510272
    },
    {
        "content": "<p>There's some places where there's two kinds of ids grouped together, and some of those are kind of tricky. The <code>NameLookup::Type(TypeId)</code> seems to hold either a <code>TraitId</code> or a <code>TypeId</code>. I'm not sure whether to use 2 separate variants for the <code>NameLookup</code> enum, or to create a <code>TypeOrTraitId</code> enum</p>",
        "id": 160726268,
        "sender_full_name": "detrumi",
        "timestamp": 1552510478
    },
    {
        "content": "<blockquote>\n<p>So currently, my idea is to make <code>ItemId</code> an enum with a variant for each kind of id</p>\n</blockquote>\n<p>I think that the rust-analyzer does the same (right <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>?)</p>",
        "id": 160726569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552510721
    },
    {
        "content": "<blockquote>\n<p>There's some places where there's two kinds of ids grouped together, and some of those are kind of tricky. The <code>NameLookup::Type(TypeId)</code> seems to hold either a <code>TraitId</code> or a <code>TypeId</code>. I'm not sure whether to use 2 separate variants for the <code>NameLookup</code> enum, or to create a <code>TypeOrTraitId</code> enum</p>\n</blockquote>\n<p>Hmm. Seems like we could add a <code>NameLookup::Trait</code> to the <code>NameLookup</code> enum</p>",
        "id": 160726642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552510788
    },
    {
        "content": "<p>Right, I think RA's <code>ArenaId</code> does the same thing</p>",
        "id": 160726744,
        "sender_full_name": "detrumi",
        "timestamp": 1552510841
    },
    {
        "content": "<p>Ah, the <code>TypeSort</code> enum (Struct | Trait) looks similar to the type/trait thing</p>",
        "id": 160727191,
        "sender_full_name": "detrumi",
        "timestamp": 1552511164
    },
    {
        "content": "<p>This seems to work out, though it's a bit repetitive:</p>\n<div class=\"codehilite\"><pre><span></span>for (item, &amp;item_id) in self.items.iter().zip(&amp;item_ids) {\n    if let (Item::TraitDefn(ref d), ItemId::TraitId(trait_id)) = (*item, item_id) {\n</pre></div>",
        "id": 160729101,
        "sender_full_name": "detrumi",
        "timestamp": 1552512744
    },
    {
        "content": "<p>Oh wait, that's doesn't make any sense, since the item ids are also generated during lowering, so that needs to change</p>",
        "id": 160729459,
        "sender_full_name": "detrumi",
        "timestamp": 1552513064
    },
    {
        "content": "<p>Hmm, maybe Chalk needs to generate the ids in the same way that rust-analyzer does it (assuming RA does that somewhere, haven't found it yet)</p>",
        "id": 160729944,
        "sender_full_name": "detrumi",
        "timestamp": 1552513375
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 160731288,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552514427
    },
    {
        "content": "<p>RA has various enums depending on usage for situations where multiple different types of item can be used</p>",
        "id": 160731337,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552514485
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/adt.rs#L19\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/adt.rs#L19\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/adt.rs#L19</a>, or <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/code_model_api.rs#L73\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/code_model_api.rs#L73\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/code_model_api.rs#L73</a></p>",
        "id": 160731460,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552514539
    },
    {
        "content": "<p>IDs are generated by interning the locations of items (as in 'nth item of that type in file x'), here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ids.rs\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ids.rs\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ids.rs</a></p>",
        "id": 160731529,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552514624
    },
    {
        "content": "<blockquote>\n<p>I think that the rust-analyzer does the same</p>\n</blockquote>\n<p>Not exactly. We don't have a single \"universal ID for everything\" enum. As <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> said, we just create ad-hock eums for a subset of ids when we need them.</p>",
        "id": 160756576,
        "sender_full_name": "matklad",
        "timestamp": 1552546738
    },
    {
        "content": "<p>Ah, so ids are generated by the interning, gotcha. Then Chalk's way during lowering is slightly simpler, as it simply zips the items iterator with fresh ids</p>",
        "id": 160757452,
        "sender_full_name": "detrumi",
        "timestamp": 1552548182
    },
    {
        "content": "<blockquote>\n<p>I think that the rust-analyzer does the same</p>\n</blockquote>\n<p>Not exactly. We don't have a single \"universal ID for everything\" enum. As <span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> said, we just create ad-hock eums for a subset of ids when we need them.  (EDIT: this actually is hand-written \"polymorphic variants\" from OCaml I guess?)</p>",
        "id": 160757856,
        "sender_full_name": "matklad",
        "timestamp": 1552548812
    },
    {
        "content": "<p>So you mean that there's no global counter to generate ids?</p>",
        "id": 160757981,
        "sender_full_name": "detrumi",
        "timestamp": 1552548973
    },
    {
        "content": "<p>Yep. This seems like a deep phenomenon of salsa-based systems. You need some kind of \"identity\", to refer to entities.</p>\n<p>One choice is to collect all entities into one big array and use index into the array as an ID (so, a global counter). This is bad for incremental, as removing an entity shifts ids.</p>\n<p>The second choice is a fine-grained location, like \"file <a href=\"http://foo.rs\" target=\"_blank\" title=\"http://foo.rs\">foo.rs</a>, line 92, col 63\". In this setup entities are somewhat independent (adding entity shifts ids only within one file), but still locations themselves are fragile</p>\n<p>The third choice is a path-based location \"field with name <code>foo</code> in a struct named<code>Bar</code> in file <code>baz.rs</code>\". This are stable, but big. Like, entities can be recursive, so paths can be arbitrary large. This, however, can be fixed by interning the path, effectively compressing it to <code>u32</code>.</p>",
        "id": 160758563,
        "sender_full_name": "matklad",
        "timestamp": 1552549753
    },
    {
        "content": "<p>I got things to compile after splitting up the ids: <a href=\"https://github.com/rust-lang/chalk/pull/208/files\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/208/files\">https://github.com/rust-lang/chalk/pull/208/files</a></p>",
        "id": 160818179,
        "sender_full_name": "detrumi",
        "timestamp": 1552594549
    },
    {
        "content": "<p>Glad to see that tests are failing, which means they're working <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 160818258,
        "sender_full_name": "detrumi",
        "timestamp": 1552594583
    },
    {
        "content": "<p>Hmm, do associated types fall under types or traits? Tests are saying that <code>Eq</code> is a type, whereas a trait was expected</p>",
        "id": 160863026,
        "sender_full_name": "detrumi",
        "timestamp": 1552646025
    },
    {
        "content": "<p>Since <code>AssociatedTyDatum</code> has both a <code>trait_id</code> and an <code>id</code>, I guess it should really be a type</p>",
        "id": 160863317,
        "sender_full_name": "detrumi",
        "timestamp": 1552646276
    },
    {
        "content": "<p>That <code>debug_item_id</code> function was tricky to get right after splitting up the ids, but I got the tests green at least</p>",
        "id": 161448199,
        "sender_full_name": "detrumi",
        "timestamp": 1553262049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125131\">@detrumi</span> sorry for not following up here! This PR looks quite nice, looks like it just needs to be rebased?</p>",
        "id": 161481316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553286835
    },
    {
        "content": "<p>Oh that's new, let me rebase again</p>",
        "id": 161481552,
        "sender_full_name": "detrumi",
        "timestamp": 1553287010
    },
    {
        "content": "<p>The debug impls are a bit messy, since there's some lookups in one of the impls</p>",
        "id": 161481672,
        "sender_full_name": "detrumi",
        "timestamp": 1553287116
    },
    {
        "content": "<p>Ah, ok</p>",
        "id": 161481710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553287146
    },
    {
        "content": "<p>Maybe leave a comment on what you are referring to?</p>",
        "id": 161481720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553287153
    },
    {
        "content": "<p>Actually, the code seems straightforward enough</p>",
        "id": 161483740,
        "sender_full_name": "detrumi",
        "timestamp": 1553288600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Rebased and all green!</p>",
        "id": 161485412,
        "sender_full_name": "detrumi",
        "timestamp": 1553289882
    },
    {
        "content": "<p>Merged, nice work!</p>",
        "id": 161485557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1553289991
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 161485594,
        "sender_full_name": "detrumi",
        "timestamp": 1553290029
    }
]