[
    {
        "content": "<p>Should this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">I</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">I</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>foo</code> is resolved properly, but not <code>s</code></p>",
        "id": 166200629,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464202
    },
    {
        "content": "<p>also, <code>Self::Item</code> isn't handled properly</p>",
        "id": 166200653,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464217
    },
    {
        "content": "<p>No, projecting associated types isn't implemented yet. I'm working on it at the moment :)</p>",
        "id": 166201221,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558464616
    },
    {
        "content": "<p>nor does it work with <code>-&gt; Option&lt;i32&gt;</code>, FWIW</p>",
        "id": 166201300,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464682
    },
    {
        "content": "<p><del>also, just defining <code>Iterator</code> doesn't work of course... rust actually seems to hardcode a desugaring using <code>::std::iter::IntoIterator::into_iter</code> </del><br>\nI misread your code ;)</p>",
        "id": 166201313,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558464692
    },
    {
        "content": "<p>but yeah, for loops aren't implemented yet at all</p>",
        "id": 166201441,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558464770
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 166201467,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464786
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Self</span>::<span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166201491,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464813
    },
    {
        "content": "<p>This doesn't work either</p>",
        "id": 166201496,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464821
    },
    {
        "content": "<p>Thought it was implemented in <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/912/\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/912/\">https://github.com/rust-analyzer/rust-analyzer/pull/912/</a></p>",
        "id": 166201508,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464835
    },
    {
        "content": "<p>At least that's not related to Chalk</p>",
        "id": 166201629,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558464909
    },
    {
        "content": "<p>yeah, that's <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ty/infer.rs#L499\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ty/infer.rs#L499\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_hir/src/ty/infer.rs#L499</a></p>",
        "id": 166203761,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1558466434
    },
    {
        "content": "<p>Ah</p>",
        "id": 166205286,
        "sender_full_name": "Laurențiu",
        "timestamp": 1558467379
    },
    {
        "content": "<p>I'll probably get the associated types / Deref support done this weekend, btw... Currently investigating why we don't find the <code>impl&lt;T&gt; Deref for Arc&lt;T&gt;</code> for some reason :( or rather we find it, but ignore it because we can't resolve <code>Deref</code> there.</p>",
        "id": 168050560,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1560436401
    }
]