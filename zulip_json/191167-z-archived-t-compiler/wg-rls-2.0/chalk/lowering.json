[
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, I've not gotten as far on this as I liked, because I was running late on other things, but I'm looking a bit</p>",
        "id": 160717808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552503633
    },
    {
        "content": "<p>so far I mostly added some comments here and there ;)</p>",
        "id": 160717822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552503646
    },
    {
        "content": "<p>oh dear, we should also bump up to a recent version of salsa</p>",
        "id": 160717989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552503786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> where did you write those comments actually?</p>",
        "id": 160717993,
        "sender_full_name": "scalexm",
        "timestamp": 1552503792
    },
    {
        "content": "<p>see the most recent commit in <a href=\"https://github.com/nikomatsakis/chalk-ndm/tree/query-driven-lowering\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/tree/query-driven-lowering\">https://github.com/nikomatsakis/chalk-ndm/tree/query-driven-lowering</a></p>",
        "id": 160718049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552503843
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> already set up a <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/7fc671c0436e73582f84f0ca5575f2b3d44d4375/src/query.rs#L13-L50\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/7fc671c0436e73582f84f0ca5575f2b3d44d4375/src/query.rs#L13-L50\">number of queries here</a></p>",
        "id": 160718774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504370
    },
    {
        "content": "<ul>\n<li><code>program_ir</code> -- produces the equivalent of the HIR</li>\n<li><code>environment</code> -- converts those rules into logic</li>\n<li><code>lowered_program</code> -- a version of the rust-ir where we have specialization priorities</li>\n<li><code>checked_program</code> -- same, but we apply coherence checks</li>\n</ul>",
        "id": 160718942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504493
    },
    {
        "content": "<p>this setup isn't quite right since, in the future, I would expect specialization priorities to be needed in order to compute the lowered rules</p>",
        "id": 160718959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504509
    },
    {
        "content": "<p>the actual lowering into IR is done in <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/7fc671c0436e73582f84f0ca5575f2b3d44d4375/src/rules.rs#L12\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/7fc671c0436e73582f84f0ca5575f2b3d44d4375/src/rules.rs#L12\">the <code>environment</code> method</a></p>",
        "id": 160718980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504530
    },
    {
        "content": "<p>as an aside, I suspect we can remove the <a href=\"https://github.com/nikomatsakis/chalk-ndm/blob/7fc671c0436e73582f84f0ca5575f2b3d44d4375/src/rules.rs#L39-L41\" target=\"_blank\" title=\"https://github.com/nikomatsakis/chalk-ndm/blob/7fc671c0436e73582f84f0ca5575f2b3d44d4375/src/rules.rs#L39-L41\">logic here around the derefs trait for now</a></p>",
        "id": 160719121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504641
    },
    {
        "content": "<p>we might want it later, once we make some progress on encoding coercions, but...</p>",
        "id": 160719137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504653
    },
    {
        "content": "<p>I'm ok for removing the logic around derefs trait</p>",
        "id": 160719240,
        "sender_full_name": "scalexm",
        "timestamp": 1552504727
    },
    {
        "content": "<p>we may probably want to also do that for unselected projections, which are broken atm</p>",
        "id": 160719261,
        "sender_full_name": "scalexm",
        "timestamp": 1552504747
    },
    {
        "content": "<p>so, I think we probably want <code>environment</code> to take some kind of indication of which rules it is generating</p>",
        "id": 160719264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504756
    },
    {
        "content": "<blockquote>\n<p>we may probably want to do that for unselected projections, which are broken atm</p>\n</blockquote>\n<p>do what?</p>",
        "id": 160719279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504770
    },
    {
        "content": "<p>remove some logic around them :)</p>",
        "id": 160719282,
        "sender_full_name": "scalexm",
        "timestamp": 1552504779
    },
    {
        "content": "<p>e.g., maybe it should be <code>environment(TraitId)</code></p>",
        "id": 160719285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504786
    },
    {
        "content": "<blockquote>\n<p>remove some logic around them :)</p>\n</blockquote>\n<p>ah :) yeah, perhaps. I think we're going to want that concept pretty soon but it'd be ok to add it back</p>",
        "id": 160719298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504798
    },
    {
        "content": "<p>implied bounds make things a <em>bit</em> complicated</p>",
        "id": 160719353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504815
    },
    {
        "content": "<p>well, I guess this is not dissimilar from the logic we had in rustc</p>",
        "id": 160719361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552504828
    },
    {
        "content": "<p>ah yeah so probably <code>environment(ItemId)</code> or something then</p>",
        "id": 160719489,
        "sender_full_name": "scalexm",
        "timestamp": 1552504944
    },
    {
        "content": "<p>so that we cover impls as well etc?</p>",
        "id": 160719502,
        "sender_full_name": "scalexm",
        "timestamp": 1552504953
    },
    {
        "content": "<p>then we can indeed have a similar setup to what is done in rustc, with some <code>program_clauses_for_...</code> (including for <code>environment</code>)</p>",
        "id": 160719569,
        "sender_full_name": "scalexm",
        "timestamp": 1552505024
    },
    {
        "content": "<p>yeah, sorry, got distracted.</p>",
        "id": 160719657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505071
    },
    {
        "content": "<p>I mean the thing is, we definitely need to be able to ask \"give me the rules that can prove <code>Implemented[SomeTrait]</code>\"</p>",
        "id": 160719679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505087
    },
    {
        "content": "<p>i.e., specialization will need it</p>",
        "id": 160719712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505116
    },
    {
        "content": "<p>well just everything</p>",
        "id": 160719719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505128
    },
    {
        "content": "<p>what I think we want then is that this would not be a method on a <code>rust_ir::Program</code></p>",
        "id": 160719743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505152
    },
    {
        "content": "<p>but rather a query on the salsa database</p>",
        "id": 160719754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505161
    },
    {
        "content": "<p>and it would invoke other queries to extract out the data it needs from the rust-ir</p>",
        "id": 160719804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505174
    },
    {
        "content": "<p>ah, right, I remember now</p>",
        "id": 160719846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505195
    },
    {
        "content": "<p>for implied bounds, the key point is that we only need those rules when given <code>FromEnv</code>,</p>",
        "id": 160719861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505208
    },
    {
        "content": "<p>and we can kind of derive it by going <strong>forward</strong> from what's in the environment, right?</p>",
        "id": 160719875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505217
    },
    {
        "content": "<p>right, that's what is done in the <code>program_clauses_for_environment</code> query in rustc</p>",
        "id": 160719891,
        "sender_full_name": "scalexm",
        "timestamp": 1552505230
    },
    {
        "content": "<p>yeah, I remember thinking about this, I just forgot the answer that we found :)</p>",
        "id": 160719900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505243
    },
    {
        "content": "<p>ok, so it seems like we kind of want to move a variant (hopefully nicer) of that logic from rustc into chalk</p>",
        "id": 160719909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505257
    },
    {
        "content": "<p>makes sense</p>",
        "id": 160719915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505263
    },
    {
        "content": "<p>so if I understand well, regarding RLS integration, these queries in chalk which e.g. compute an environment would call some other queries e.g. <code>lower_type</code> which would compute the rust-ir representation of a given type, but these <code>lower</code> queries may be implemented in another crate like in the RLS crate?</p>",
        "id": 160720151,
        "sender_full_name": "scalexm",
        "timestamp": 1552505444
    },
    {
        "content": "<p>right</p>",
        "id": 160720188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505480
    },
    {
        "content": "<p>so I think the steps here would be as follows</p>",
        "id": 160720192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505486
    },
    {
        "content": "<p>first, we make the queries in question, all in the one crate (<code>chalk</code>)</p>",
        "id": 160720200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505494
    },
    {
        "content": "<p>then we can extract the lowering queries into another crate (let's call it <code>chalk_lower</code>)</p>",
        "id": 160720210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505506
    },
    {
        "content": "<p>but leave behind the ones that provide the rust-ir</p>",
        "id": 160720217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505514
    },
    {
        "content": "<p>so if you have layers, it's like:</p>\n<ul>\n<li>lowering queries (in <code>chalk_lower</code>)</li>\n<li>(shim)</li>\n<li>rust-ir providing queries (in <code>chalk</code>)</li>\n</ul>",
        "id": 160720293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505545
    },
    {
        "content": "<p>the \"shim\" part would be a trait that we define</p>",
        "id": 160720300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505549
    },
    {
        "content": "<p>i.e.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">RustIrShim</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">rust_ir_struct</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">rust_ir</span>::<span class=\"n\">StructDatum</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160720318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505571
    },
    {
        "content": "<p>we can then implement this trait like so in the <code>chalk</code> crate</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">RustIrShim</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ChalkDatabase</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">rust_ir_struct</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span>: <span class=\"nc\">Id</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">StructDatum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rust_ir_query</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160720355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505608
    },
    {
        "content": "<p>not sure if that makes sense, not sure how familiar you are with salsa's setup</p>",
        "id": 160720364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505619
    },
    {
        "content": "<p>I'm not that familiar but that makes sense</p>",
        "id": 160720382,
        "sender_full_name": "scalexm",
        "timestamp": 1552505633
    },
    {
        "content": "<p>should be straightforward</p>",
        "id": 160720388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505641
    },
    {
        "content": "<p>once we get the queries setup correctly</p>",
        "id": 160720431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505645
    },
    {
        "content": "<p>which is cool, btw, I'm happy with how that part of salsa's design is working out :)</p>",
        "id": 160720442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505652
    },
    {
        "content": "<p>for some reason, however, upgrading to salsa 0.10.0 is not building for me</p>",
        "id": 160720471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552505681
    },
    {
        "content": "<p>in <code>rust_ir/lowering.rs</code>, we use that <code>Env&lt;'k&gt;</code> to resolve things like type parameters</p>",
        "id": 160720912,
        "sender_full_name": "scalexm",
        "timestamp": 1552506049
    },
    {
        "content": "<p>so this would now be an input to the rust-ir queries I guess</p>",
        "id": 160720920,
        "sender_full_name": "scalexm",
        "timestamp": 1552506064
    },
    {
        "content": "<p>mmh we could actually have two levels: the top level-query for example <code>lower_impl</code>  which would start with an empty env, and then which would call some lowering functions without passing through the salsa database, building that <code>Env&lt;'k&gt;</code> along the way</p>",
        "id": 160721205,
        "sender_full_name": "scalexm",
        "timestamp": 1552506362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it would be cool if we were not using <code>String</code> as an error type in the salsa queries; I'm currently trying to convert all error types to real ones (be it custom <code>enum</code> or <code>struct</code>) that do implement <code>Clone</code></p>",
        "id": 161013945,
        "sender_full_name": "scalexm",
        "timestamp": 1552855360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span> as shameless self-promotion, may I suggest giving my new <a href=\"https://crates.io/crates/snafu\" target=\"_blank\" title=\"https://crates.io/crates/snafu\">SNAFU crate</a> a whirl? <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span></p>",
        "id": 161014639,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552856397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> lol I’ll give it a try</p>",
        "id": 161051761,
        "sender_full_name": "scalexm",
        "timestamp": 1552911236
    }
]