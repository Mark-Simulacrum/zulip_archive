[
    {
        "content": "<p>This is something we've briefly discussed with Niko.</p>\n<p>Currently, rust-analyzer has a single global chalk instance behind a <code>Mutex</code>. This means that rust-analyezr's typechecking is mostly single threaded. Ideally, It should be possible to typecheck all the functions in parallel.  Perhaps the answer to this <strong>is</strong> a chalk mutex, which you only hold while solving trait queries. But perhaps something more elegant and less contentious is possible.</p>",
        "id": 189512559,
        "sender_full_name": "matklad",
        "timestamp": 1583169206
    },
    {
        "content": "<blockquote>\n<p>This means that rust-analyezr's typechecking is mostly single threaded. Ideally, It should be possible to typecheck all the functions in parallel. Perhaps the answer to this is a chalk mutex, which you only hold while solving trait queries.</p>\n</blockquote>\n<p>Hmm I'd have thought we only hold the Mutex while we're solving a trait query? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>I guess we could even do pooling for Chalk solvers, at the cost of some duplicate caching/memory usage...</p>",
        "id": 189512836,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583169348
    },
    {
        "content": "<p>ideally the solver would be thread-safe, of course</p>",
        "id": 189512902,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583169366
    },
    {
        "content": "<blockquote>\n<p>Hmm I'd have thought we only hold the Mutex while we're solving a trait query? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>That's true, but solving  also invokes callbacks which do resolve and other queries (I think?), so it's not like we hold mutext for a clearly bounded amount of time. In general, I am beginning to think that maybe we should try to parallelise rust-analyzer more, both beause it directly improves UX, and because we don't want to accidetly code ourselves to a single-threaded corner...</p>",
        "id": 189513149,
        "sender_full_name": "matklad",
        "timestamp": 1583169488
    },
    {
        "content": "<p>I think it's reasonable to expect chalk to have <code>&amp;Solver</code> interface outside, as all the state is just caching... Trait solving doesn't logically mutate the solver.</p>",
        "id": 189513337,
        "sender_full_name": "matklad",
        "timestamp": 1583169599
    },
    {
        "content": "<p>hm, yeah. I don't know if Chalk would be able to release the mutex while querying the DB though, since I think it can happen deep within the solver...</p>",
        "id": 189513434,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583169644
    },
    {
        "content": "<p>hm ok if it only acquires the mutex when storing new solutions, maybe...</p>",
        "id": 189513489,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1583169673
    },
    {
        "content": "<p>just a quick note that I think the recursive solver you're exploring can have a good story here, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> -- indeed the recursive queries can themselves even \"just be\" salsa queries, I suspect</p>",
        "id": 190913546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584480763
    },
    {
        "content": "<p>though we'd need to extend salsa to accomodate cycles</p>",
        "id": 190913568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584480771
    },
    {
        "content": "<p>yeah</p>",
        "id": 190921788,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1584485878
    }
]