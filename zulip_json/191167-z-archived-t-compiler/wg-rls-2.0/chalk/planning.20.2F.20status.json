[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- have either of you got a minute?</p>",
        "id": 164468980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556557301
    },
    {
        "content": "<p>I'm thinking about the next steps for chalk integration, and wanted to talk more about rust-analyzer and how it should fit together</p>",
        "id": 164469124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556557417
    },
    {
        "content": "<p>I am around</p>",
        "id": 164469210,
        "sender_full_name": "matklad",
        "timestamp": 1556557467
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> actually added chalk to ra: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1216\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1216\">https://github.com/rust-analyzer/rust-analyzer/pull/1216</a> :D</p>",
        "id": 164469220,
        "sender_full_name": "matklad",
        "timestamp": 1556557477
    },
    {
        "content": "<p>Ah, cool</p>",
        "id": 164469524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556557724
    },
    {
        "content": "<p>So</p>",
        "id": 164469527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556557728
    },
    {
        "content": "<p>Well, let me skim that PR I guess</p>",
        "id": 164469531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556557732
    },
    {
        "content": "<p>ok, that's a bit much to skim :)</p>",
        "id": 164469995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556558050
    },
    {
        "content": "<p>By the way, I've now implemented support for where clauses, but have huge performance problems, as in some queries seem to basically never finish. As far as I can tell, one of the reasons seems to be that in a case like <code>where T: Foo, T: Bar</code>, Chalk will request all impls for <code>Foo</code> and then for each of those impls request all impls for <code>Bar</code>. So I'm now looking into implementing a 'type fingerprint' thing so that we (hopefully) don't get this multiplicative behavior.</p>",
        "id": 165062719,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557228690
    },
    {
        "content": "<p>Yeah, the current code for requesting impls is super naive in this way</p>",
        "id": 165071260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557236366
    },
    {
        "content": "<p>Hmm I think what I'm actually running into is <a href=\"https://github.com/rust-lang/chalk/issues/217\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/issues/217\">https://github.com/rust-lang/chalk/issues/217</a>, just with <code>Send</code> instead of <code>Sized</code></p>",
        "id": 165091135,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557249321
    },
    {
        "content": "<p>Sounds plausible. I was thinking about that last night and feeling doubts about the best solution :/</p>",
        "id": 165092317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557250171
    },
    {
        "content": "<p>I've managed a small reproduction:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">//- /main.rs</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">S1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">S2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">U1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">X1</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">X1</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nb\">Send</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nb\">Send</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nb\">Fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"nb\">Send</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{}).</span><span class=\"n\">method</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Type inference on <code>test</code> takes over 3 minutes; if I remove S2, it goes down to 20 seconds; switching the order of the where clauses in the last impl makes it work instantly. It seems to enumerate a huge number of possibilities for <code>?0: Send</code>. (Note that <code>Send</code> isn't even an auto trait in the test.)</p>",
        "id": 165102916,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557257401
    },
    {
        "content": "<p>Yeah, the engine can definitely do that sometimes. This is exactly the sort of feedback I was interested in exploring</p>",
        "id": 165110760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557262907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> does chalk has \"fuel\" thing? I think we should add it: it seems for IDE stuff you want to add fuel basically everywhere</p>",
        "id": 165110888,
        "sender_full_name": "matklad",
        "timestamp": 1557263012
    },
    {
        "content": "<p>As in, to be responsive, IDE should be a primitive recursive function :D</p>",
        "id": 165110904,
        "sender_full_name": "matklad",
        "timestamp": 1557263032
    },
    {
        "content": "<p>That is, we certainly need to fix this bug, but I expect that fixing all of the bugs will be really hard, and just adding a \"fuel\" safeguard on top can help to contain the bug's effects</p>",
        "id": 165111027,
        "sender_full_name": "matklad",
        "timestamp": 1557263114
    },
    {
        "content": "<p>it doesn't, but it's plausible we could add it</p>",
        "id": 165111146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557263187
    },
    {
        "content": "<p>it's made to be \"resumable\" in this way</p>",
        "id": 165111167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557263203
    },
    {
        "content": "<p>My gut feeling is that fuel will be very welcome. And an interesting question here is how do we integrate fuel with salsa: if you just make \"fuel tank\" a query parameter, you lose incremental efficency (nothing is cached due to fuel fluctuation). If you use some kind of interior mutability, you lose incremental soundness.</p>",
        "id": 165111318,
        "sender_full_name": "matklad",
        "timestamp": 1557263328
    },
    {
        "content": "<p>well, trait solving is already a \"volatile\" activity</p>",
        "id": 165113046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557264541
    },
    {
        "content": "<p>(but I haven't looked closely at how you integrated it into the RLS queries)</p>",
        "id": 165113073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557264568
    },
    {
        "content": "<p>that said, there is also some existing set of \"limits\"</p>",
        "id": 165113079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557264574
    },
    {
        "content": "<p>e.g., a <code>max_size</code> which limits how deeply the size of types that we will construct</p>",
        "id": 165113088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557264587
    },
    {
        "content": "<p>for the time being, dialing that down may help</p>",
        "id": 165113096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557264598
    },
    {
        "content": "<p>(this is in the <code>SolverConfig</code>)</p>",
        "id": 165113244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557264702
    },
    {
        "content": "<p>Setting <code>max_size</code> to 6 from 10 makes the test complete instantly again. What exactly does this control, would <code>A&lt;B&lt;C&lt;D&gt;&gt;&gt;</code> have size 4? If so, I assume we can set it to e.g. 4 and still have very little impact on most uses, right?</p>",
        "id": 165410213,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557579161
    },
    {
        "content": "<p>Hm, actually even with 4 it takes too long in some functions in RA :/</p>",
        "id": 165412756,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557582896
    },
    {
        "content": "<p>With 2, it doesn't run into any slow cases on RA, but I don't know if that's still a reasonable value...</p>",
        "id": 165412988,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557583216
    },
    {
        "content": "<p>Make it <code>2.42</code>? :)</p>",
        "id": 165413009,
        "sender_full_name": "matklad",
        "timestamp": 1557583290
    },
    {
        "content": "<p>by the way, <a href=\"https://github.com/rust-lang/chalk/pull/226\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/226\">https://github.com/rust-lang/chalk/pull/226</a> is exciting, it'll probably give us impl Trait support for very little work :)</p>",
        "id": 165413354,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557583792
    },
    {
        "content": "<p>I've tried implementing fuel in Chalk, and it doesn't seem very hard: <a href=\"https://github.com/rust-lang/chalk/pull/227\" target=\"_blank\" title=\"https://github.com/rust-lang/chalk/pull/227\">https://github.com/rust-lang/chalk/pull/227</a> Of course this might mean we sometimes get different answers depending on how much the Solver had already cached; can this be a problem?</p>",
        "id": 165426180,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1557603854
    }
]