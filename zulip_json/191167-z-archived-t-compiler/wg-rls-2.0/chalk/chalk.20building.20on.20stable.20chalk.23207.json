[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>, I left a <a href=\"https://github.com/rust-lang-nursery/chalk/pull/207#pullrequestreview-214105279\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/chalk/pull/207#pullrequestreview-214105279\">review of your PR</a>, but I figured maybe we could discuss here (I find it easier to track comments on Zulip than GH). </p>\n<p>The only big concern obviously was the matter of the <code>Debug</code> impl (also cc <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, I'd be curious to get your opinion)</p>",
        "id": 160706872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552498520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well, yeah that's annoying; another option would be to:</p>\n<ul>\n<li>remove the <code>Debug</code> super-trait from <code>Zip</code> and <code>Fold</code></li>\n<li>manually implement <code>Debug</code> only for <code>Parameter</code>, <code>ParameterKind&lt;()&gt;</code>, <code>ParameterKind&lt;UniverseIndex&gt;</code></li>\n<li>add some <code>Debug</code> bounds everywhere where the code used to rely on the super-trait from <code>Zip</code> and <code>Fold</code></li>\n</ul>",
        "id": 160715340,
        "sender_full_name": "scalexm",
        "timestamp": 1552502128
    },
    {
        "content": "<p>Ah, that's...maybe a good idea, yeah.</p>",
        "id": 160715438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552502177
    },
    {
        "content": "<p>or maybe a bit simpler, have a non-parametric impl for <code>Zip</code> and <code>Fold</code>, so they would be implemented only for some concrete <code>ParameterKind&lt;...&gt;</code> types</p>",
        "id": 160715549,
        "sender_full_name": "scalexm",
        "timestamp": 1552502263
    },
    {
        "content": "<p>(and leave <code>Debug</code> as a super trait)</p>",
        "id": 160715567,
        "sender_full_name": "scalexm",
        "timestamp": 1552502273
    },
    {
        "content": "<p>that would probably work too</p>",
        "id": 160715623,
        "sender_full_name": "scalexm",
        "timestamp": 1552502284
    },
    {
        "content": "<p>mmh no actually that wouldn't work so easily because of <code>ParameterKind&lt;EnaVariable&gt;</code> being used in another crate and still needing a <code>Debug</code> impl (<code>EnaVariable</code> being local to that crate)</p>",
        "id": 160716857,
        "sender_full_name": "scalexm",
        "timestamp": 1552503023
    },
    {
        "content": "<p>well anyway, I'd be ok for using a new-type around <code>ParameterKind&lt;Ty, Lifetime&gt;</code></p>",
        "id": 160716939,
        "sender_full_name": "scalexm",
        "timestamp": 1552503089
    },
    {
        "content": "<p>Another (probably bad) idea: add a third type parameter to <code>ParameterKind</code> that just controls what the Debug implementation does</p>",
        "id": 160717224,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552503255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> yeah that may be nicer indeed</p>",
        "id": 160720610,
        "sender_full_name": "scalexm",
        "timestamp": 1552505805
    },
    {
        "content": "<p>I guess we'd have to try implementing that solution to see if it fits well</p>",
        "id": 160720627,
        "sender_full_name": "scalexm",
        "timestamp": 1552505832
    },
    {
        "content": "<p>I'll try it out</p>",
        "id": 160721297,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552506451
    },
    {
        "content": "<p>hrm no, it'd require adding a PhantomData to the enum to use the type parameter, and that's a huge disruption :/</p>",
        "id": 160722802,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552507599
    },
    {
        "content": "<p>The newtype doesn't seem so bad (so far)</p>",
        "id": 160723603,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552508221
    },
    {
        "content": "<p>Pushed the newtype variant to the PR.</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I don't think implementing <code>iterate_range</code> as an extension trait would work, because of the impl trait?</p>",
        "id": 160724916,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1552509373
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> I don't think implementing <code>iterate_range</code> as an extension trait would work, because of the impl trait?</p>\n</blockquote>\n<p>oh, maybe not, yeah, no big deal</p>",
        "id": 160726535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1552510694
    }
]