[
    {
        "content": "<p>I was looking at the string literal as bytes lint test, and I felt confused by part of it. Here's the whole file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// run-rustfix</span>\n\n<span class=\"cp\">#![allow(dead_code, unused_variables)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![warn(clippy::string_lit_as_bytes)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">str_lit_as_bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello there\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">r###\"raw string with 3# plus \" \"\"###</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// no warning, because these cannot be written as byte string literals:</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ubs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"☃\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ubs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello there! this is a very long string\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">strify</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stringify</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foobar</span><span class=\"p\">).</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_PKG_VERSION\"</span><span class=\"p\">).</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">includestr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">include_str</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"entry_unfixable.rs\"</span><span class=\"p\">).</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"string with newline</span><span class=\"se\">\\t\\n</span><span class=\"s\">\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Why can these not be converted to byte string literals?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// no warning, because these cannot be written as byte string literals:</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ubs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"☃\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ubs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"hello there! this is a very long string\"</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried adding a <code>b</code> before the second string literal on the Rust playground, and it compiled fine.</p>",
        "id": 216039910,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604891172
    },
    {
        "content": "<p>git can help you figure these things out.</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; git blame -L 13,13 tests/ui/string_lit_as_bytes.rs\n6d1aaac6c3 (Jens Hausdorf 2019-03-10 11:06:19 +0100 13)     let ubs = &quot;hello there! this is a very long string&quot;.as_bytes();\n&gt; git show 6d1aaac6c3\ncommit 6d1aaac6c373e4781f779bddf992242abb53c7c3\nAuthor: Jens Hausdorf &lt;mail@jens-hausdorf.de&gt;\nDate:   Sun Mar 10 11:06:19 2019 +0100\n\n    Avoid reporting string_lit_as_bytes for long strings\n\n    Port of @jens1o code ([b76f939][jens1o_commit])\n\n    Fixes #1208\n\n    [jens1o_commit]: https://github.com/jens1o/rust-clippy/commit/b76f939ac2efcfe24900c286b3b7713d972d9088\n\n    Co-authored-by: Thiago Arrais &lt;thiago.arrais@gmail.com&gt;\n...\n</code></pre></div>\n<p><a href=\"https://github.com/rust-lang/rust-clippy/issues/1208\">https://github.com/rust-lang/rust-clippy/issues/1208</a> shows why it was done. They put it in to avoid situation were the expression was immediately used by <code>as_ref</code>. </p>\n<p>The problem is that <code>as_bytes()</code> gives <code>&amp;[u8]</code> while the literal syntax gives a <code>[u8]</code> and the two aren't the same.</p>",
        "id": 216043537,
        "sender_full_name": "Michael Wright",
        "timestamp": 1604896872
    },
    {
        "content": "<p>Ah, thanks :)</p>\n<p>Hopefully const generics will fix this!</p>",
        "id": 216124701,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604946369
    }
]