[
    {
        "content": "<p>Hello everyone! Let me preface by saying that I'm new to Zulip and I am sorry if I sent this message to the wrong topic or broke a rule related to message sending.</p>\n<p>I'm here to make some questions regarding clippy, for context I'm currently working on my thesis, about Typestates in Rust.<br>\nI've developed a small limited macro prototype (<a href=\"https://github.com/rustype/typestate-rs\">https://github.com/rustype/typestate-rs</a>) and now I'm exploring the ecosystem for other possible alternatives.</p>\n<p>In a super small nutshell what I want to achieve is enabling the user to write some code like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[to=b]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[from=a, to=c]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[from=b]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">c</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">a</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// ok</span>\n<span class=\"n\">b</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// error: protocol dictates b comes from a</span>\n</code></pre></div>\n<p>The code above is a REALLY rough draft. I'm aware that I can do something like it with types (I've written about it here <a href=\"https://rustype.github.io/notes/notes/rust-typestate-series/rust-typestate-index\">https://rustype.github.io/notes/notes/rust-typestate-series/rust-typestate-index</a>)<br>\nBut types imply some limitations, such as not being able to use a <code>Vec&lt;Drone&lt;_&gt;&gt;</code>; while producing errors with clippy seems to be a possible solution.</p>\n<p>Finally, the questions:</p>\n<ul>\n<li>Can clippy be extended with external lints (i.e. not present in the clippy repo)?</li>\n<li>Can clippy \"read\" the AST before macro expansion? This would enable something like the example above, where I need to establish a graph and check if A -&gt; B -&gt; C </li>\n<li>If clippy is not able to do any of the above, is there any way that it would be possible, without writing a whole static analyzer from scratch? Like hooking into <code>rustc</code> and getting direct access to the AST</li>\n</ul>",
        "id": 220364994,
        "sender_full_name": "José Duarte",
        "timestamp": 1608293779
    },
    {
        "content": "<p>You 3rd point is correct: You have to hook into rustc if you  want to do static analysis.  This is quite easy, though. Clippy does this in <code>src/driver.rs</code>. Don't get scared by the file size, most of it is boilerplate for  getting things to work with lint level handling and such. Take a look at the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/struct.RunCompiler.html\"><code>RunCompiler</code></a> struct. In the callbacks part you can  register lints, which will then emit errors.</p>\n<p>To read the state of the AST before macro expansion, there currently is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LintStore.html#method.register_pre_expansion_pass\"><code>pre_expansion_pass</code></a> . But this only exists, because Clippy still uses it. But probably will be deprecated once Clippy rewrites all the pre_expansion_pass lints.</p>",
        "id": 220366884,
        "sender_full_name": "flip1995",
        "timestamp": 1608295216
    },
    {
        "content": "<p>Thank you for the answer, do you know where I can get more information on <code>rustc</code> and its passes etc? Is there an \"architectural\" book?<br>\nFurthermore would hooking into the compiler be considered an \"hack\"? Finally, rust supression attributes like <code>#[allow(...)]</code> are not actually macros correct? Are they erased from the AST in these passes?</p>",
        "id": 220368706,
        "sender_full_name": "José Duarte",
        "timestamp": 1608296501
    },
    {
        "content": "<p>Take a look here: <a href=\"https://rustc-dev-guide.rust-lang.org/diagnostics.html\">https://rustc-dev-guide.rust-lang.org/diagnostics.html</a></p>\n<p>The rustc-dev-guide is a pretty good place to find out more about the compiler.</p>\n<p>No the suppression attributes are parsed and handled by the rust compiler, without expanding them. What you want to do looks like you want to use <code>proc_macro</code>s. For example the <code>#[derive]</code> attribute is a <code>proc_macro</code> which generates code for the item it is attached to.</p>",
        "id": 220369126,
        "sender_full_name": "flip1995",
        "timestamp": 1608296737
    },
    {
        "content": "<p>I'm aware of the <code>proc_macro</code>s, the original idea was to use them, but since they can't relate bigger pieces of code they wouldn't work.<br>\nThe question was more like \"can i create pseudo attribute macros like <code>allow</code> and after analysis clean them up, as if they stay, they're not macros and thus wouldn't compile</p>",
        "id": 220369498,
        "sender_full_name": "José Duarte",
        "timestamp": 1608296942
    },
    {
        "content": "<p>I don't think you can create pseudo attributes without modifying the compiler directly.</p>",
        "id": 220369681,
        "sender_full_name": "flip1995",
        "timestamp": 1608297064
    },
    {
        "content": "<p>Then how does clippy accomplish the <code>#![warn(clippy::wildcard_dependencies)]</code> for example?</p>",
        "id": 220369871,
        "sender_full_name": "José Duarte",
        "timestamp": 1608297171
    },
    {
        "content": "<p>rustc has code for that specific attribute. See: <a href=\"https://github.com/rust-lang/rust/blob/d8d3ab96aa94423f1bdfbb605098a506ab5edc7e/compiler/rustc_lint/src/levels.rs#L156-L175\">https://github.com/rust-lang/rust/blob/d8d3ab96aa94423f1bdfbb605098a506ab5edc7e/compiler/rustc_lint/src/levels.rs#L156-L175</a></p>",
        "id": 220370161,
        "sender_full_name": "flip1995",
        "timestamp": 1608297313
    },
    {
        "content": "<p>I see. Thank you for all the help!</p>",
        "id": 220370329,
        "sender_full_name": "José Duarte",
        "timestamp": 1608297396
    }
]