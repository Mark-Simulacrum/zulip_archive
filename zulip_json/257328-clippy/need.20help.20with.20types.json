[
    {
        "content": "<p>This is my first time contributing to clippy. I am trying to work on: <a href=\"https://github.com/rust-lang/rust-clippy/issues/6209\">https://github.com/rust-lang/rust-clippy/issues/6209</a></p>\n<p>This is the part that I think i need to change.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">l_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">expr_ty</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">expr_ty</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">l_ty</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">r_ty</span><span class=\"p\">.</span><span class=\"n\">peel_refs</span><span class=\"p\">().</span><span class=\"n\">is_integral</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">span_lint</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">INTEGER_ARITHMETIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"integer arithmetic detected\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">expr_span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">l_ty</span><span class=\"p\">.</span><span class=\"n\">peel_refs</span><span class=\"p\">().</span><span class=\"n\">is_floating_point</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">r_ty</span><span class=\"p\">.</span><span class=\"n\">peel_refs</span><span class=\"p\">().</span><span class=\"n\">is_floating_point</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">span_lint</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FLOAT_ARITHMETIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"floating-point arithmetic detected\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">expr_span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I am trying to figure out how to get the value of the <code>r_ty</code> if it is literal or a constant. The type of <code>l_ty</code> is <code>rustc_middle::ty::Ty</code>.</p>\n<p>The <code>kind</code> method on <code>Ty</code> too don't seem to work as it just gives the kind of value it can be and not the actual value.</p>",
        "id": 214535619,
        "sender_full_name": "Henil D",
        "timestamp": 1603691460
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"344239\">@Henil D</span> , thanks for contributing to Clippy!<br>\nDid you take a look at this documentation: <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md#retrieving-the-type-of-an-expression\">https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md#retrieving-the-type-of-an-expression</a>?<br>\nTL;DR I think you may need to <code>match</code> on <code>l_ty.kind()</code> to know what's the actual type kind.</p>",
        "id": 214540576,
        "sender_full_name": "ThibsG",
        "timestamp": 1603696936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"342307\">ThibsG</span> <a href=\"#narrow/stream/257328-clippy/topic/need.20help.20with.20types/near/214540576\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"344239\">Henil D</span> , thanks for contributing to Clippy!<br>\nDid you take a look at this documentation: <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md#retrieving-the-type-of-an-expression\">https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md#retrieving-the-type-of-an-expression</a>?<br>\nTL;DR I think you may need to <code>match</code> on <code>l_ty.kind()</code> to know what's the actual type kind.</p>\n</blockquote>\n<p>Yes, I found that. But the problem is I want the value of the expression not just the type of it.  As I have to check if the value is either 0 or -1 or anything except it.</p>",
        "id": 214541163,
        "sender_full_name": "Henil D",
        "timestamp": 1603697538
    },
    {
        "content": "<p>ah I see. So you have the <code>l</code> and <code>r</code> operands of the <code>Binary</code> operation (line 73).<br>\nFrom their <code>ExprKind</code>, it seems that you can match their <code>LitKind</code> (<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.LitKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.LitKind.html</a>) and get the int value behind this.</p>",
        "id": 214552104,
        "sender_full_name": "ThibsG",
        "timestamp": 1603705377
    },
    {
        "content": "<p>Ah got it. Thank you. Although <code>LitKind::Int(u128, LitIntType)</code> only stores a <code>u128</code> value, so i am not able to compare it with <code>-1</code>.  although it has <code>LitIntType</code> but there is no way to store negative value in there.</p>",
        "id": 214570411,
        "sender_full_name": "Henil D",
        "timestamp": 1603717701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344239\">@Henil D</span> if the literal is negative it will be wrapped in an unary <code>OpNeg</code> operation</p>",
        "id": 214571109,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1603718087
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"279272\">@Eduardo Broto</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">hir</span>::<span class=\"n\">ExprKind</span>::<span class=\"n\">Lit</span><span class=\"p\">(</span><span class=\"n\">lit</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">lit</span><span class=\"p\">.</span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">rustc_ast</span>::<span class=\"n\">ast</span>::<span class=\"n\">LitKind</span>::<span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">span_lint</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">INTEGER_ARITHMETIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"integer arithmetic detected\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">expr_span</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I am not too familiar with abstract syntax trees and how they. Here <code>r</code>  is  from <a href=\"https://github.com/rust-lang/rust-clippy/blob/afbac8906e614a63ff5825710c3ebe45a3b5e01a/clippy_lints/src/arithmetic.rs#L73\">https://github.com/rust-lang/rust-clippy/blob/afbac8906e614a63ff5825710c3ebe45a3b5e01a/clippy_lints/src/arithmetic.rs#L73</a>. And currently i am adding this inside <code>match &amp;expr.kind</code>. Is that part correct?</p>",
        "id": 214571625,
        "sender_full_name": "Henil D",
        "timestamp": 1603718386
    },
    {
        "content": "<p>in plain english, I am just trying to check if <code>r</code>'s value is either 0 or not. And as you said if the value is <code>-1</code> it will be wrapped in <code>OpNeg</code>, so i will have to add a new match label on the outer match statement.</p>",
        "id": 214572119,
        "sender_full_name": "Henil D",
        "timestamp": 1603718645
    },
    {
        "content": "<p>Yeah you will need probably something like that.</p>\n<p>I don't have time now to check it, but from the code you linked I see that negating is already being linted, so you will have to allow it in this case too...</p>\n<p>Maybe it would be a good idea to think about generalizing here, when this operation will be completely safe so we can allow it?</p>",
        "id": 214573121,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1603719126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"279272\">Eduardo Broto</span> <a href=\"#narrow/stream/257328-clippy/topic/need.20help.20with.20types/near/214573121\">said</a>:</p>\n<blockquote>\n<p>Yeah you will need probably something like that.</p>\n<p>I don't have time now to check it, but from the code, you linked I see that negating is already being linted, so you will have to allow it in this case too...</p>\n<p>Maybe it would be a good idea to think about generalizing here when this operation will be completely safe so we can allow it?</p>\n</blockquote>\n<p>Generalizing in the sense as you said in the open issue?</p>\n<blockquote>\n<p>We could special case though if the RHS of a binary operation / or % is a literal/constant that is not 0 or -1, there should be no risk of overflow/panic.</p>\n</blockquote>\n<p>or generalizing the code? I think I have a working code(which is quite messy), but I am not able to run <code>cargo uitest</code> as they are failing currenly... I have tried running it in the master branch too, it's failing there also so I guess it's an upstream bug as mentioned in readme.</p>",
        "id": 214578321,
        "sender_full_name": "Henil D",
        "timestamp": 1603721629
    },
    {
        "content": "<p>I meant generalizing when negating is safe (can't overflow).</p>\n<p>Don't hesitate to open the PR, it can be discussed further there, it's easier when you can see the code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>About the problem running the tests, make sure you have the latest toolchain (run <code>setup-toolchain.sh</code> again) and that you're based on top of the latest master. If you still have the error a rustup may be needed as stated in the docs.</p>",
        "id": 214579057,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1603721953
    },
    {
        "content": "<p>I have opened a PR. <a href=\"https://github.com/rust-lang/rust-clippy/pull/6229\">https://github.com/rust-lang/rust-clippy/pull/6229</a></p>",
        "id": 214595509,
        "sender_full_name": "Henil D",
        "timestamp": 1603728812
    }
]