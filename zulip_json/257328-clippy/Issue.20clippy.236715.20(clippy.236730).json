[
    {
        "content": "<p>It seems I did try a little too hard in my initial work to be smart especially for the \"Additional Comments\" section on that, but I'm wondering how smart I need to be (and how smart is too far)</p>\n<p>I can totally put up a draft/WIP PR really quick if that would be helpful as well, but I think my current questions are:</p>\n<ul>\n<li>Am I doing this the right way at all -- which actually having the draft PR would be useful for</li>\n<li>camsteffen mentioned on the issue: « Instead there should be a list of known \"to owned\" functions that are equivalent to <code>clone</code>. »  What is the standard way of having such a list? Is there an existing lint that has such a list I can look at?</li>\n<li>Is it reasonable to assume that <code>to_owned</code> is always safe to turn into <code>clone</code> -- at least as long as <code>to_owned</code> returns the same type?</li>\n</ul>\n<p>It would probably be much easier to just make this only work on <code>Vec</code>, but adding some smarts would make me feel better instead of completely ignoring the \"Additional Comments\" -- and I like a challenge anyway.</p>",
        "id": 226163228,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613148733
    },
    {
        "content": "<p>I would just create a list for those types and the methods of those types that are equal to <code>clone</code>.  </p>\n<p>Another way this could maybe be done is to determine if the type behind the <code>to_owned</code> method call has to be derefed to another type, which then returns the same type before the deref. Not sure how hard that is though.</p>",
        "id": 226164147,
        "sender_full_name": "flip1995",
        "timestamp": 1613149117
    },
    {
        "content": "<p>In <code>vec.to_owned()</code>, you can get <code>expr_ty</code> for <code>vec</code> and <code>vec.to_owned()</code> (the method call and the first arg of the method call) and then check <code>TyS::same_type</code> on those types.</p>",
        "id": 226164949,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613149424
    },
    {
        "content": "<p>See the big <code>match</code> with different method names in <code>methods.rs</code>. Instead of having a list, you can just add to that.</p>",
        "id": 226165591,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613149686
    },
    {
        "content": "<blockquote>\n<p>Is it reasonable to assume that to_owned is always safe to turn into clone -- at least as long as to_owned returns the same type?</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 226165718,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613149752
    },
    {
        "content": "<p>If this fires on arbitrary custom types, especially if it's not looking for the string <code>to_owned</code>, it will have a lot of false positives for methods that have the same type as clone but are semantically different, e.g. <code>new_subtree(self: &amp;Tree) -&gt; Tree</code>. A whitelist sounds a lot more reliable</p>",
        "id": 226166807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613150190
    },
    {
        "content": "<p>Right, after matching the method name, you should use <code>match_trait_method</code> to ensure it is the <code>ToOwned</code> method (for example).</p>",
        "id": 226167072,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613150284
    },
    {
        "content": "<p>Oh, TIL <code>ToOwned</code> is a trait, not just a bunch of similarly named inherent methods</p>",
        "id": 226167453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613150427
    },
    {
        "content": "<p>I was currently planning on using <code>match_def_path(cx, meth_did, &amp;paths::TO_OWNED_METHOD)</code>-- is <code>match_trait_method</code> better here?</p>",
        "id": 226167654,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613150507
    },
    {
        "content": "<p>either is fine</p>",
        "id": 226167746,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613150534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"388092\">@Andrea Nall</span> See <code>redundant_clone</code> and <code>str_to_string</code> lints. <code>redundant_clone</code> already detects a bunch of \"clone-like\" methods and you could re-use that logic. If your lint includes <code>to_string</code>, it could replace the <code>str_to_string</code> lint. But we may want to keep that separate? Not sure.</p>",
        "id": 226169233,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613151125
    },
    {
        "content": "<p>Yeah, I encountered the collision with the <code>str_to_string</code> lint in my initial attempt which was trying to be way too smart.</p>",
        "id": 226169352,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613151178
    },
    {
        "content": "<blockquote>\n<p>See the big <code>match</code> with different method names in <code>methods.rs</code>. Instead of having a list, you can just add to that.</p>\n</blockquote>\n<p>That big match doesn't seem to have the type the method is being called on, wouldn't adding <code>to_vec</code>/<code>to_path_buf</code>/etc there cause false positives, unless I check the method again, as well as the type inside my own lint.</p>\n<p>If I just put <code>to_vec</code> in that list, calling <code>ArbitraryType::to_vec</code> would trigger my lint</p>",
        "id": 226172314,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613152253
    },
    {
        "content": "<p>Yes you still need to check the DefId in some way after matching the method name</p>",
        "id": 226173302,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613152645
    },
    {
        "content": "<p>Created draft pr at <a href=\"https://github.com/rust-lang/rust-clippy/issues/6730\">clippy#6730</a>, I think I took all various advice into account</p>",
        "id": 226181684,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613156809
    },
    {
        "content": "<p>by the way, thank you for your help/advice on this</p>",
        "id": 226225577,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613189795
    },
    {
        "content": "<p>Semi-related: I see we're trying to move paths over to diagnostic items (<a href=\"https://github.com/rust-lang/rust-clippy/issues/5393\">clippy#5393</a>).</p>\n<p>Especially with lint functions that may be multi-use (such as how we discussed doing this) and will probably have to deal with a mixture of things that already have a diagnostic item and things that do not yet have a diagnostic item.</p>\n<p>Do we have an enum type like <code>PathOrDiagnosticItem</code> where that can be passed into the lint instead (containing either a path, or a diagnostic item), and the lint can call <code>path_or_diagnostic_item.matches_type(…)</code> or <code>path_or_diagnostic_item.matches_def_id(…)</code> or the like?  If not would something like that be wanted or useful?</p>",
        "id": 226267458,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613250504
    },
    {
        "content": "<p>I've wondered the same thing. That might be nice. But it's not much more work to just handle both separately.</p>",
        "id": 226267872,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613251014
    },
    {
        "content": "<p>Also that would be thrown away whenever we do fully migrate to  diagnostic items.</p>",
        "id": 226267994,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613251188
    },
    {
        "content": "<p>For how I've got my draft currently, I would possibly require 4 versions of the lint (or a bunch of arguments) to handle all permutations for using diagnostic items over paths. And handling the requested <code>Vec::to_vec</code> or <code>PathBuf::to_path_buf</code> from the ticket seems to require checking both the path of the method and the path of the type</p>",
        "id": 226268109,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613251321
    },
    {
        "content": "<p>You can get the parent of <code>to_vec</code> and check that it is <code>Vec</code>. Then you are only checking one path.</p>",
        "id": 226268728,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613251964
    },
    {
        "content": "<p>would that work even though <code>to_vec</code> is in <code>slice</code>, not <code>Vec</code>?</p>",
        "id": 226268871,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613252120
    },
    {
        "content": "<p>oh right, you'd check for slice then</p>",
        "id": 226268971,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613252220
    },
    {
        "content": "<p>and actually I think you'd need <code>tcx.associated_item</code></p>",
        "id": 226269049,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613252344
    },
    {
        "content": "<p>what I'm doing currently _seems_ to work (just might not be the cleanest way), it just requires taking in both the path to the method and the path to the type of self (and would require 4 variants if I wanted to also support diagnostic items: path+path,path+diagnostic,diagnostic+path,diagnostic+diagnostic)</p>",
        "id": 226269237,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613252561
    },
    {
        "content": "<p>If you are dealing with types or functions from the std library, which I guess you do, you can just add those diagnostic items to rustc and then use them afterwards in Clippy (this also helps with the move to diag items only). I did this in <a href=\"https://github.com/rust-lang/rust/issues/81277\">#81277</a> for example. (If you want to do the clean up in rust-lang/rust-clippy, we have to sync the added diag item to Clippy before you can use them in Clippy though. But I can do that for you.)</p>",
        "id": 226303728,
        "sender_full_name": "flip1995",
        "timestamp": 1613308362
    },
    {
        "content": "<p>So basically:</p>\n<ul>\n<li>make a change in the rust repo adding the diagnostic items to the functions/types I need</li>\n<li>have you do the sync and wait for the next nightly</li>\n<li>make my changes to my current PR in rust-clippy?</li>\n</ul>",
        "id": 226313991,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1613321518
    },
    {
        "content": "<p>If you don't add any features, but just change paths to diag items, you can also do it directly in the Rust repo. Then you can do all in one PR and don't have to wait for sync/nightly. If you don't mind waiting, yes this would be the workflow</p>",
        "id": 226314056,
        "sender_full_name": "flip1995",
        "timestamp": 1613321608
    },
    {
        "content": "<p>it looks like my <code>rust</code> side changes adding the diagnostic items has landed and is now in nightly</p>",
        "id": 227636950,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1614187230
    },
    {
        "content": "<p>And now I'm just stuck on checking the diagnostic item on the struct impl the function is from (checking the trait impl works fine if it's on a trait).</p>\n<p>If the function is on a trait, the code from <code>match_trait_method</code> was easy enough to hack to work with diagnostic items instead of paths… but…<br>\nI can't seem to figure out how to make something like that work for non-trait impl methods.</p>\n<p>My best attempt after poking around in the relevant rust guts has my code giving me DefIds like <code>DefId(1:4405 ~ std[e437]::path::{impl#61})</code> for <code>DefId(1:4413 ~ std[e437]::path::{impl#61}::to_path_buf)</code>, (from calling <code>somePathBuf.to_path_buf()</code>) and I can't seem how to figure out how to get to <code>std::path::Path</code> (<code>cx.tcx.def_path_str(def_id)</code> gives me that string, so that is obviously there somewhere but <code>def_path_str</code> is seriously a mess of spaghetti that I've not been able to follow)</p>\n<p>And of course the DefId <code>DefId(1:4405 ~ std[e437]::path::{impl#61})</code> lacks my diagnostic item.</p>",
        "id": 227882855,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1614315524
    },
    {
        "content": "<p>Can you open a WIP PR of your current state? I can't really help you without seeing code.</p>",
        "id": 227901187,
        "sender_full_name": "flip1995",
        "timestamp": 1614330909
    },
    {
        "content": "<p>This is untested code, but could you try making and using a util function like this? Let me know if it makes sense.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">is_diagnostic_assoc_fn</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">diag_item_name</span>: <span class=\"nc\">Symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_name</span>: <span class=\"nc\">Symbol</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assoc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">opt_associated_item</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">fn_name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">AssocItemContainer</span>::<span class=\"n\">ImplContainer</span><span class=\"p\">(</span><span class=\"n\">impl_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">assoc</span><span class=\"p\">.</span><span class=\"n\">container</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">get_diagnostic_item</span><span class=\"p\">(</span><span class=\"n\">diag_item_name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">impl_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227937670,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614350852
    },
    {
        "content": "<p>I didn't want to commit code that won't pass tests and also would produce a lot of debugging info, wasn't sure how the CI system would like that.</p>\n<p>Yeah, that's basically what I came up with (and I have not cleaned up this code yet):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">match_diagnostic</span><span class=\"p\">(</span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">LateContext</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Expr</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">diag_item</span>: <span class=\"nc\">Symbol</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">type_dependent_def_id</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">opt_associated_item</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">associated_item</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">associated_item</span><span class=\"p\">.</span><span class=\"n\">container</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">TraitContainer</span><span class=\"p\">(</span><span class=\"n\">assoc_def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assoc_def_id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ImplContainer</span><span class=\"p\">(</span><span class=\"n\">assoc_def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assoc_def_id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assoc_def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"got associated {:?} for {:?} // kind : {:?}\"</span><span class=\"p\">,</span><span class=\"n\">assoc_def_id</span><span class=\"p\">,</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"n\">assoc_def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\" --- {:?} {}\"</span><span class=\"p\">,</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">get_diagnostic_item</span><span class=\"p\">(</span><span class=\"n\">diag_item</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">get_diagnostic_item</span><span class=\"p\">(</span><span class=\"n\">diag_item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assoc_def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">is_diagnostic_item</span><span class=\"p\">(</span><span class=\"n\">diag_item</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">assoc_def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The ones on struct impls don't work and give me:</p>\n<div class=\"codehilite\"><pre><span></span><code>got associated DefId(1:4405 ~ std[e437]::path::{impl#61}) for DefId(1:4413 ~ std[e437]::path::{impl#61}::to_path_buf) // kind : &quot;std::path::Path&quot;\n --- Some(DefId(1:4403 ~ std[e437]::path::Path)) false\n</code></pre></div>\n<p>While the ones on traits work and get me:</p>\n<div class=\"codehilite\"><pre><span></span><code>got associated DefId(5:424 ~ alloc[88c7]::borrow::ToOwned) for DefId(5:426 ~ alloc[88c7]::borrow::ToOwned::to_owned) // kind : &quot;std::borrow::ToOwned&quot;\n --- Some(DefId(5:424 ~ alloc[88c7]::borrow::ToOwned)) true\n</code></pre></div>\n<p>So I need some way to get from the impl def_id to the struct def_id, hope I didn't stick the diagnostic items in the wrong place</p>",
        "id": 227946334,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1614354536
    },
    {
        "content": "<blockquote>\n<p>wasn't sure how the CI system would like that.</p>\n</blockquote>\n<p>Don't worry about that. PR CI nowadays only takes like 7 minutes to run, even less if the build/tests are failing, so that should be fine.</p>",
        "id": 227947620,
        "sender_full_name": "flip1995",
        "timestamp": 1614355087
    },
    {
        "content": "<p>ok it looks like you're close. So maybe there is one more step from <code>impl T</code> to <code>T</code> for the non-trait case.</p>",
        "id": 227950559,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614356246
    },
    {
        "content": "<p>and that's the point where I got lost inside the rust guts last night.</p>",
        "id": 227951057,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1614356352
    },
    {
        "content": "<p>oooh</p>",
        "id": 227951150,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614356372
    },
    {
        "content": "<p><code>tcx.impl_parent</code>?</p>",
        "id": 227951289,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614356406
    },
    {
        "content": "<p>I actually didn't think the method would cover both the trait and non-trait case so that's awesome if it works!</p>",
        "id": 227951397,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614356457
    },
    {
        "content": "<p>Gives me None if I pass in <code>assoc_def_id</code>, gives me an ICE if I pass in <code>def_id</code></p>",
        "id": 227951945,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1614356666
    },
    {
        "content": "<p><code>tcx.type_of(assoc_def_id)</code>?</p>",
        "id": 227952901,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614357025
    },
    {
        "content": "<p>Aha, yes that did it.</p>",
        "id": 227953550,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1614357248
    },
    {
        "content": "<p>Hooray! That part was not very intuitive but I figured it out after looking at usages of <code>tcx.for_each_impl</code> in rustc.</p>",
        "id": 227954603,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614357702
    },
    {
        "content": "<p>And I think that's the PR ready barring any changes needed after review</p>",
        "id": 227960790,
        "sender_full_name": "Andrea Nall",
        "timestamp": 1614360315
    }
]