[
    {
        "content": "<p>Btw is there a way to parse the ast::tokenstream::TokenStream to _ast_ and visit it? E.g. I want to get all identifiers or values used there, probably in some naive way.</p>",
        "id": 246842540,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626958620
    },
    {
        "content": "<p>Could also be to HIR..</p>",
        "id": 246843175,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626958927
    },
    {
        "content": "<p>Rust provides visitors for this. I've only used them in HIR but it might be possible for AST tokens as well. Here is an example visitor that collects all used values: <a href=\"https://github.com/rust-lang/rust-clippy/blob/610381455cb78a31695b94bc45ee580cf0cd7b38/clippy_lints/src/copies.rs#L535-L589\">example</a>. I'm not sure if there is a nicer way at the moment, it also depends on your use case <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 246844126,
        "sender_full_name": "xFrednet",
        "timestamp": 1626959495
    },
    {
        "content": "<p>I'm getting the feeling that you try to implement a global analysis in Clippy. Can you please provide some context, what you're trying to do? I don't say that you aren't allowed to work on something like that, I just want to prevent, that you put much work into something that won't get accepted in the end.</p>",
        "id": 246847769,
        "sender_full_name": "flip1995",
        "timestamp": 1626961227
    },
    {
        "content": "<p>xFrednet: yeah, I've done something very similar too</p>",
        "id": 246873774,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626972622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> I don't mind if it doesn't get accepted, that is an internal lint for <a href=\"https://github.com/trailofbits/dylint/\">https://github.com/trailofbits/dylint/</a> ;)</p>",
        "id": 246873880,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626972667
    },
    {
        "content": "<p>but getting back to the topic: yeah, I want to do some kind of global analysis, e.g. in a #[someattrmacro(someargs)] fn foo(some other args) be able to cross-match/validate the <code>someargs</code> with <code>some other args</code></p>",
        "id": 246874045,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626972740
    },
    {
        "content": "<p>So I have to either use a <code>LateLintPass</code> to get to whatever the attribute macro produces, or, use an <code>EarlyLintPass</code> with a <code>register_pre_expansion_lint</code> and use its <code>check_attribute</code> to get this attribute macro; but then, I can't really access its arguments in a _relatively nice_ way, as its all in a <code>TokenStream</code></p>",
        "id": 246875086,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626973191
    },
    {
        "content": "<p>There is the <code>syn</code> crate with <code>syn::parse(TokenStream)</code> function, but it doesn't operate on <code>rustc_ast::ast::tokenstream::TokenStream</code> but on <code>syn::TokenStream</code> (or sth like that)</p>",
        "id": 246875310,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626973246
    },
    {
        "content": "<p>...so I am looking for sth similar to syn::parse but that works on TokenStream from ast :&lt;</p>",
        "id": 246875358,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626973262
    },
    {
        "content": "<p>Oh, and when I tried using a <code>LateLintPass</code> for that, then, my problem is passing data between two lint passes. As in, registering two <code>LateLintPass</code> doesnt' seem to fire the lints in the order I register them, or, I would want the whole code to be linted by first lint and then the whole code to be linted by the second lint</p>",
        "id": 246878802,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626974591
    },
    {
        "content": "<p>Instead of a given visitor/check function to be called by the first lint first and then by the second :/</p>",
        "id": 246878831,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626974611
    },
    {
        "content": "<p>I wonder if you can accomplish what you are doing with one LateLintPass and use the check_*_post methods to do something after visiting.</p>",
        "id": 246881351,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626975805
    },
    {
        "content": "<p>But isn't the order like:</p>\n<p>check_fn<br>\ncheck_expr (expr within fn)<br>\ncheck_expr_post<br>\ncheck_fn_post</p>",
        "id": 246887061,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626978459
    },
    {
        "content": "<p>yes</p>",
        "id": 246890252,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626979982
    },
    {
        "content": "<p>and there's check_crate_post</p>",
        "id": 246890512,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626980150
    },
    {
        "content": "<p>Oh I see, nice</p>",
        "id": 246902690,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626986748
    },
    {
        "content": "<p>Will try this later, thanks :)</p>",
        "id": 246902703,
        "sender_full_name": "Disconnect3d",
        "timestamp": 1626986757
    }
]