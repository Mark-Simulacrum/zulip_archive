[
    {
        "content": "<p>@lnicola asked about printing all of the lints (<a href=\"https://github.com/rust-lang/rust-clippy/issues/5385#issuecomment-704233618\">https://github.com/rust-lang/rust-clippy/issues/5385#issuecomment-704233618</a>). @bnjjj then suggested that a <code>--json</code> flag or similar might make sense to get the lints with their level as a json output: <a href=\"https://github.com/rust-lang/rust-clippy/pull/6125#issuecomment-704571993\">https://github.com/rust-lang/rust-clippy/pull/6125#issuecomment-704571993</a></p>\n<p>Should we add such a flag? And if yes, what should it be called?</p>",
        "id": 212499496,
        "sender_full_name": "flip1995",
        "timestamp": 1602027806
    },
    {
        "content": "<p>I think in general providing machine-friendly output is a good idea, but I'm not sure about the UI. </p>\n<p>rustc has <code>--error-format=json</code> for this and <code>--json</code> for tweaking the output (see <a href=\"https://doc.rust-lang.org/rustc/json.html\">here</a>). Cargo has <code>--message-format=json</code>. If called from <code>cargo-clippy</code>, we could intercept the latter, but the list of lints is printed from the driver which can be called separately.</p>\n<p>Having a flag that only affects the list of lints seems a bit ad-hoc to me. IMO we should have something similar to rustc/cargo, which affects all the output. I would go for <code>--message-format=json</code>, and accept that argument from both cargo-clippy and the driver.</p>",
        "id": 212503894,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1602031728
    },
    {
        "content": "<p>I would definitely leave the lint printing in the <code>clippy-driver</code> and would not recommend to move it to <code>cargo-clippy</code>.</p>\n<p><code>--error-format=json</code> already works on Clippy, since we pass all the args, we don't want/know how to handle through to rustc. Can you think of something else that would be affected by <code>--message-format=json</code>, besides the lint list and the error output?</p>\n<p>I'm experimenting with letting rustc also handle <code>-Whelp</code>, so we don't have to deal with that.</p>",
        "id": 212504843,
        "sender_full_name": "flip1995",
        "timestamp": 1602032750
    },
    {
        "content": "<blockquote>\n<p>I would definitely leave the lint printing in the clippy-driver and would not recommend to move it to cargo-clippy</p>\n</blockquote>\n<p>Agreed. Ideally we would rely on rustc describing clippy lints and remove the custom printing. The only problem (as pointed in the issue) is that it requires passing in a crate as an argument. Hopefully with the solution you described <a href=\"https://github.com/rust-lang/rust-clippy/issues/6122#issuecomment-704642424\">here</a> that will not be necessary anymore.</p>\n<blockquote>\n<p>Can you think of something else that would be affected by --message-format=json</p>\n</blockquote>\n<p>After testing, not really <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I was afraid of the interactions with cargo's <code>message-format</code>, but I've seen that when you use that rustc output also uses JSON. So I guess we don't have to handle it.</p>\n<hr>\n<p>About the list of lints in JSON format, it seems rustc only uses JSON for error messages, and the command line arg does not affect describing the lints. If we want both relying on rustc for describing lints and having the in JSON format too, I guess we should try to change it in rustc?</p>",
        "id": 212555532,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1602076256
    },
    {
        "content": "<blockquote>\n<p>If we want both relying on rustc for describing lints and having the in JSON format too, I guess we should try to change it in rustc?</p>\n</blockquote>\n<p>Yeah, that would be the cleanest way to do it. I guess we should try to do it that way then. Or leave it to the rust-analyzer folks, if they want to have that feature.</p>\n<p>In summary: we don't want to add json lint name output, but rather leave it to rustc. To do this we should let rustc also handle the lint output.</p>",
        "id": 212556242,
        "sender_full_name": "flip1995",
        "timestamp": 1602076602
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77671\">https://github.com/rust-lang/rust/pull/77671</a></p>",
        "id": 212617893,
        "sender_full_name": "flip1995",
        "timestamp": 1602104138
    }
]