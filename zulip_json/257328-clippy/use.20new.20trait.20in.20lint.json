[
    {
        "content": "<p>@oli or whoever might be able to help me. (Sorry for how long this is!)<br>\nI'm working on this lint (<a href=\"https://github.com/rust-lang/rust/issues/93883\">https://github.com/rust-lang/rust/issues/93883</a>) and I added a new trait in <code>std::marker</code> and impl'ed it for MutexGuard/RwLockReadGuard/RwLockWriteGuard. I was able to get rustc to compile using <code>python3 ./x.py build -i library/std</code>. I then linked the toolchain with <code>rustup toolchain link stage1 build/x86_64-unknown-linux-gnu/stage1</code> and <code>rustup toolchain link stage2 build/x86_64-unknown-linux-gnu/stage2</code> in the root rust directory.</p>\n<p>Now, I'd like to use it in the lint -- I was using <code>TESTNAME=&lt;lint name&gt; cargo uitest</code> previously to run it, but I believe that's using the default toolchain. So, in the clippy directory, I ran <code>rustup override set stage2</code>, which resulted in:<br>\n<code>info: override toolchain for '/home/user/Projects/rustcompiler/rust/src/tools/clippy' set to 'stage2'</code></p>\n<p>But it looks like I did something wrong, because rustc doesn't see the import of the new trait (I'm trying to import it in the lint file first to make sure it works, because I initially missed the error in the uitest file):</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0432]: unresolved import `std::marker::SignificantDrop`\n --&gt; src/tools/clippy/clippy_lints/src/significant_drop_in_scrutinee.rs:5:5\n  |\n5 | use std::marker::SignificantDrop;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `SignificantDrop` in `marker`\n\nFor more information about this error, try `rustc --explain E0432`.\nerror: could not compile `clippy_lints` due to previous error\n</code></pre></div>\n<p>Does anyone have an idea what I'm doing wrong?</p>\n<p>Thank you!</p>",
        "id": 272070542,
        "sender_full_name": "Preston From",
        "timestamp": 1644983251
    },
    {
        "content": "<p>TL;DR: Don't try to build Clippy with a custom toolchain, but rather make the changes to the Clippy copy in rust-lang/rust and build/test it with <code>./x.py</code>.</p>\n<hr>\n<p>I'm not sure why you would have to import the trait in Clippy. There shouldn't be any types in Clippy that would need this trait to be implemented.</p>\n<p>As for writing tests: that's another story. I haven't used a custom toolchain to compile Clippy in ages. What I usually do is to work on the copy of Clippy in the Rust repository. You can then compile and test that with <code>./x.py build/test src/tools/clippy</code>.  </p>\n<p>Though if you would then submit a PR for a new Clippy lint, it's usually preferred if you submit the PR directly to the Clippy repo. But I think this is a good example where we can make an exception and I can review this lint as a PR to the Rust repo.</p>",
        "id": 272100429,
        "sender_full_name": "flip1995",
        "timestamp": 1645008953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> thank you for the suggestion/explanation! That looks like it will work for me</p>",
        "id": 272113588,
        "sender_full_name": "Preston From",
        "timestamp": 1645017304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> or anyone who might be around: I thought I could figure this out on my own, but I am clearly stymied.</p>\n<p>I added a trait called <code>SignificantDrop</code> (better name tbd) and included it in <code>language_item_table</code> in <code>compiler/rustc_hir/src/lang_items.rs</code> and in <code>Symbols</code> in <code>compiler/rustc_span/src/symbol.rs</code> so that I can check if something has impl'ed the trait with <code>significant_drop_trait</code>using <code>lang_items</code>.</p>\n<p>However, when I added <code>#[lang = \"significant_drop\"]</code> attribute to the trait, i get an error <code>definition of unknown language item 'significant_drop'</code> when compiling.</p>\n<p>What I find confusing is that calling  the <code>significant_drop_trait</code> function on lang_items is not a compile error (though <code>SignificantDrop</code> doesn't show up in the Language Items available).</p>\n<p>I assume I missed registering the new trait somewhere, but I haven't been able to figure out where yet. Does anything stand out that I might have done wrong?</p>",
        "id": 272367158,
        "sender_full_name": "Preston From",
        "timestamp": 1645167398
    },
    {
        "content": "<p>You need to use diagnostic items, not lang items. Lang items are for thing affecting the language itself</p>",
        "id": 272370683,
        "sender_full_name": "oli",
        "timestamp": 1645170787
    },
    {
        "content": "<p>Oh! I missed <code>diagnostic_items</code> entirely! Thank you!</p>",
        "id": 272371027,
        "sender_full_name": "Preston From",
        "timestamp": 1645171143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  Sorry this has taken me so long! I have something like an MVP working, but I'm pretty sure it will need a lot of refinement. I added a trait (<code>SignificantDrop</code>) and implemented it for mutex guards in the core library, and then added a lint to look for any temporaries in a match scrutinee that implement it. </p>\n<p>Would you mind taking a look at this? I haven't opened a PR to the rust repo yet because I'm not sure if it should be 2 PRs -- one for rust for the trait and one for clippy for the lint.<br>\n<a href=\"https://github.com/PrestonFrom/rust/pull/1\">https://github.com/PrestonFrom/rust/pull/1</a></p>",
        "id": 272570923,
        "sender_full_name": "Preston From",
        "timestamp": 1645338579
    },
    {
        "content": "<p>You can do one just for the rustc repo, we'll invite a clippy reviewer to the PR</p>",
        "id": 272581228,
        "sender_full_name": "oli",
        "timestamp": 1645351317
    },
    {
        "content": "<p>No worries about taking your time, there is never any rush unless we're fixing critical regressions, which is def not the case here</p>",
        "id": 272581412,
        "sender_full_name": "oli",
        "timestamp": 1645351496
    },
    {
        "content": "<p>No worries about taking your time, there is never any rush unless we're fixing critical regressions, which is def not the case here</p>",
        "id": 272581491,
        "sender_full_name": "oli",
        "timestamp": 1645351575
    },
    {
        "content": "<p>I'm really glad you're working on this!</p>",
        "id": 272581492,
        "sender_full_name": "oli",
        "timestamp": 1645351575
    },
    {
        "content": "<p>Thank you fro the initial review and helping me! I have really enjoyed working on this! I opened a PR in the rust repo. :)</p>",
        "id": 272636909,
        "sender_full_name": "Preston From",
        "timestamp": 1645413991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I’m looking at adding an attribute for has significant drop (it seemed like mutex guard implements freeze), but I’m not sure where it should live. I think someone mentioned adding it to clippy but I couldn’t find where attributes are defined in clippy</p>",
        "id": 273111135,
        "sender_full_name": "Preston From",
        "timestamp": 1645719365
    },
    {
        "content": "<p>I think you should be able to just add <code>#[clippy::significant_drop]</code> to the types without any additional work. To detect the attribute I'm hoping clippy's utils module has helpers, if not, you can ask the tcx via <code>has_attr</code></p>",
        "id": 273113978,
        "sender_full_name": "oli",
        "timestamp": 1645720524
    },
    {
        "content": "<p>Ah, okay! I thought it would have to be registered somewhere. Thank you!</p>",
        "id": 273120482,
        "sender_full_name": "Preston From",
        "timestamp": 1645723069
    },
    {
        "content": "<p>You will have to tell Clippy about this attribute in the <code>clippy_utils</code> <a href=\"https://github.com/rust-lang/rust-clippy/blob/042892a0815fe0fec72ea1a07348d99ca08bf944/clippy_utils/src/attrs.rs#L18\">here</a>. And in the lint you can look for the attribute with the <a href=\"https://github.com/rust-lang/rust-clippy/blob/042892a0815fe0fec72ea1a07348d99ca08bf944/clippy_utils/src/attrs.rs#L55\"><code>get_attr</code></a> function from the Clippy utils.</p>",
        "id": 273124239,
        "sender_full_name": "flip1995",
        "timestamp": 1645724734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> oh thank you!!!</p>",
        "id": 273131374,
        "sender_full_name": "Preston From",
        "timestamp": 1645727958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <br>\nWorking on tests for significant drops in match scrutinees, I realized something like a tuple could have multiple cases in one line. What is the expectation for lints in this case? Is it okay to emit multiple lint messages, one for each case? Or should I try to combine them?</p>",
        "id": 277244365,
        "sender_full_name": "Preston From",
        "timestamp": 1648713000
    },
    {
        "content": "<p>I would just emit multiple messages. trying to combine them for all cases where this could occur gets really dirty real quick.</p>",
        "id": 277244648,
        "sender_full_name": "flip1995",
        "timestamp": 1648713174
    },
    {
        "content": "<p>Okay, thank you! It was indeed getting very dirty and confusing</p>",
        "id": 277245045,
        "sender_full_name": "Preston From",
        "timestamp": 1648713363
    },
    {
        "content": "<p>Agreed. If some cases that would better be combined show up in practice we can always revisit</p>",
        "id": 277248283,
        "sender_full_name": "oli",
        "timestamp": 1648715465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> &amp; <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <br>\nFor the significant drop lint, I hit upon a case where I'm not sure if there's a good reasonable suggestion, such as the mutex holds a string and you want to match against <code>as_str</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Assume `.s` is a String</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">mutex3</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"three\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"started\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">mutex1</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">mutex2</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"done\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Would it best here to simply explain why this will cause a deadlock instead of trying to suggest a work around? Or should it suggest cloning <code>s</code>? What I have currently will actually try to add <code>clone()</code> after <code>as_str()</code>, which results in a compile error.</p>",
        "id": 278259074,
        "sender_full_name": "Preston From",
        "timestamp": 1649396226
    },
    {
        "content": "<p>I think just warning is sufficient, or treating this case as \"it's what the user wants, don't lint at all\"</p>",
        "id": 278260765,
        "sender_full_name": "oli",
        "timestamp": 1649398216
    },
    {
        "content": "<p>Okay! Thank you! I'll try to implement it as a warning!</p>",
        "id": 278260812,
        "sender_full_name": "Preston From",
        "timestamp": 1649398308
    },
    {
        "content": "<p>Hm, you could suggest <code>.s.clone()</code> and then <code>value.as_ref()</code>. I would definitely lint here anyway. Maybe remove the suggestion. If it is too hard to remove the suggestion, then you can also just keep it. IIRC the suggestion is <code>MaybeIncorrect</code> and can't be auto-applied anyway.</p>",
        "id": 278269529,
        "sender_full_name": "flip1995",
        "timestamp": 1649405285
    },
    {
        "content": "<p>FWIW, I would rewrite this code as <code>s @ \"three\" =&gt; { s.len(); }</code></p>",
        "id": 278300875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649423174
    },
    {
        "content": "<p>But that might be hard to make an automatic suggestion for</p>",
        "id": 278300905,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649423196
    }
]