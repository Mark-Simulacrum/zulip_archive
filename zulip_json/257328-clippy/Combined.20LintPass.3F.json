[
    {
        "content": "<p>rustc has a <code>BuiltinCombinedLateLintPass</code> with all their builtin lints. It's a maze of macros to define this struct but the result is static dispatch for all the lint pass callbacks. I can only imagine that this has quite a significant performance impact (all the empty callbacks are optimized out for one thing). Clippy could re-use the macros to define <code>ClippyLateLintPass</code> with very little added boilerplate. I have a local proof-of-concept. Is this something we want to pursue?</p>",
        "id": 228808907,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614876852
    },
    {
        "content": "<p>Have you done any actual measurements? What are you using as a benchmark?</p>",
        "id": 228830538,
        "sender_full_name": "Michael Wright",
        "timestamp": 1614884515
    },
    {
        "content": "<p>My imagination. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Valid point, it should be benchmarked. Honestly I'm not sure how to benchmark it and I would love to receive some pointers. But I'm just asking if we're willing to consider the change in the first place from a complexity standpoint.</p>",
        "id": 228840962,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614888308
    },
    {
        "content": "<p>Can we share those macros with rustc?</p>\n<p>If it brings performance improvements, I'm open to it, as long as those macros are really good documented. (After looking at the macros in rustc for  5 minutes, I still don't understand what's going on)</p>",
        "id": 228843510,
        "sender_full_name": "flip1995",
        "timestamp": 1614889316
    },
    {
        "content": "<p>rustc is sharing their macros with us!</p>",
        "id": 228855279,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614894027
    },
    {
        "content": "<p>Here's my proof of concept. It mostly works! :) <a href=\"https://github.com/camsteffen/rust-clippy/commit/9c5e54064b026677aabe5782f6d9a6eeee01d840\">https://github.com/camsteffen/rust-clippy/commit/9c5e54064b026677aabe5782f6d9a6eeee01d840</a></p>",
        "id": 228855658,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614894209
    },
    {
        "content": "<p>That looks pretty clean to me. I don't understand how the macros work, but it looks clean. What is with the lints, that you didn't remove from the register function?</p>",
        "id": 228856596,
        "sender_full_name": "flip1995",
        "timestamp": 1614894573
    },
    {
        "content": "<p>Another question: Can we still auto-generate this?</p>",
        "id": 228857574,
        "sender_full_name": "flip1995",
        "timestamp": 1614894966
    },
    {
        "content": "<p>I need to find a way to make it work with constructors with parameters such as config.</p>",
        "id": 228858532,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614895337
    },
    {
        "content": "<p>I assume maintaining <code>cargo dev update_lints</code> is a requirement</p>",
        "id": 228858600,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614895369
    },
    {
        "content": "<p>It helps me to think about these macros as inverted functions. Think of <code>a!(b, c)</code> as <code>b!(a!(), c)</code>.</p>",
        "id": 228858842,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1614895460
    },
    {
        "content": "<p>Keeping the ability to generate this code is a _must have_ requirement for Clippy.</p>",
        "id": 228858878,
        "sender_full_name": "flip1995",
        "timestamp": 1614895479
    }
]