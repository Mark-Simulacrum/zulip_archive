[
    {
        "content": "<p>Hi! Wanted to ask, is there any documentation for <code>clippy.toml</code> / <code>.clippy.toml</code> apart from the clippy readme? In particular, I'm curious whether the file applies both from the workspace root and package root for workspace packages, and what happens when there are is a a config file at both.</p>",
        "id": 242698057,
        "sender_full_name": "jplatte",
        "timestamp": 1623742989
    },
    {
        "content": "<p>No, the README is the only documentation. Clippy searches from the current package upwards. It starts at <code>$CLIPPY_CONF_DIR</code> if that env var is set. Otherwise, when using cargo (in most cases) it starts at <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates\"><code>$CARGO_MANIFEST_DIR</code></a>. In all other cases it starts at the current dir.</p>\n<p>So if you have a dir structure like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>foo\n├── bar\n│   ├── Cargo.toml\n│   ├── clippy.toml\n│   └── src\n├── Cargo.toml\n├── clippy.toml\n└── src\n</code></pre></div>\n<p>And run <code>cargo clippy</code> in <code>bar</code> the <code>clippy.toml</code> file in <code>bar</code> should be used. If you run it in <code>foo</code> then <code>clippy.toml</code> in <code>foo</code> should be used. If you don't have a <code>clippy.toml</code> file in <code>foo</code> OR <code>bar</code>, but in a parent folder of <code>foo</code>, then that file will be used.</p>\n<p>(I'm not 100% sure what <code>CARGO_MANIFEST_DIR</code> contains in workspaces depending on where <code>cargo</code> commands are run. It may always contain the path to the top level <code>Cargo.toml</code> file, in that case my explanation is wrong and the <code>clippy.toml</code> file of <code>foo</code> is always used. But if I understand the documentation of <code>CARGO_MANIFEST_DIR</code> correct, than it should contain the path to the current package and my explanation should be correct)</p>",
        "id": 242701411,
        "sender_full_name": "flip1995",
        "timestamp": 1623745187
    },
    {
        "content": "<p>Yeah <code>CARGO_MANIFEST_DIR</code> is for the current package, getting the workspace root path requires running <code>cargo metadata</code> and isn't available as an env var</p>",
        "id": 242703258,
        "sender_full_name": "jplatte",
        "timestamp": 1623746347
    },
    {
        "content": "<p>So there is no way to have project settings and more fine-grained package setting then, without copying everything from the project config into the more specific ones?</p>",
        "id": 242703298,
        "sender_full_name": "jplatte",
        "timestamp": 1623746373
    },
    {
        "content": "<p>Specifically I'd like to use <a href=\"https://github.com/rust-lang/rust-clippy/pull/7315\">disallowed_type</a> to forbid use of <code>HashMap</code> in a few proc-macro crates while keeping a project-wide MSRV and potentially other settings</p>",
        "id": 242703484,
        "sender_full_name": "jplatte",
        "timestamp": 1623746482
    },
    {
        "content": "<p>I guess I should open an issue about this.</p>",
        "id": 242703499,
        "sender_full_name": "jplatte",
        "timestamp": 1623746492
    },
    {
        "content": "<p>No it just uses the first file it finds and doesn't reuse other files in the workspace.</p>\n<blockquote>\n<p>I guess I should open an issue about this.</p>\n</blockquote>\n<p>Yes, please do this.</p>",
        "id": 242703786,
        "sender_full_name": "flip1995",
        "timestamp": 1623746655
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/issues/7353\">https://github.com/rust-lang/rust-clippy/issues/7353</a></p>",
        "id": 242704886,
        "sender_full_name": "jplatte",
        "timestamp": 1623747376
    }
]