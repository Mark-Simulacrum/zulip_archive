[
    {
        "content": "<p>Hi, <br>\nI'm new to clippy dev and trying to implement the lint defined in <a href=\"https://github.com/rust-lang/rust-clippy/issues/1377\">https://github.com/rust-lang/rust-clippy/issues/1377</a>.</p>\n<p>I parsed the <code>expr</code> as <code>AddrOf</code> and then as <code>Path</code> but can't find a way to check for <code>Option</code> and/or extract its <code>T</code>. <br>\nI didn't manage to find another lint to get inspiration on that. Do you have any pointer to such an example ?</p>\n<p>Something else : I'm blindly stuck as I can't debug my lint to understand where it doesn't trigger. <br>\nCan you give a hint on how to debug lints ? </p>\n<p>I hope that's the right place to ask for help.</p>",
        "id": 212878200,
        "sender_full_name": "dvermd",
        "timestamp": 1602279267
    },
    {
        "content": "<p>Are you looking at <code>ExprKind::AddrOf</code>? I understand the issue as applying to types in function signatures and variable annotations instead. <br>\nDid you give a look at <code>TyKind::Adt</code>?<br>\nAs for debugging, I usually put <code>dbg!(expr);</code> statements and run the ui tests. You can also run clippy on an isolated snippet with <code>env CLIPPY_TESTS=true cargo run --bin clippy-driver -- -L ./target/debug input.rs</code>. See <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md#testing-manually\">https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md#testing-manually</a> .</p>",
        "id": 212883242,
        "sender_full_name": "montrivo",
        "timestamp": 1602283409
    },
    {
        "content": "<p>TyKind doc link: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html</a></p>",
        "id": 212883889,
        "sender_full_name": "montrivo",
        "timestamp": 1602284051
    },
    {
        "content": "<p>I also understand it like <span class=\"user-mention\" data-user-id=\"295035\">@montrivo</span> says. I think it would make sense to lint in a couple places: locals, statics/consts, associated types, type alias, function/method parameter/return, ADT definitions (struct/tuple struct fields, enum variants).</p>\n<p>Once you have a <code>Ty</code>, you can check if it's an <code>Option</code> with <code>utils::is_type_diagnostic_item(cx, ty, sym!(option_type))</code>.<br>\nTo retrieve the <code>T</code> in <code>Option&lt;T&gt;</code> you can do <code>option_ty.walk().nth(1).unwrap().expect_ty()</code>.</p>\n<p>At any point, do not hesitate to open a PR, we can try to help.</p>",
        "id": 212890957,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1602290197
    },
    {
        "content": "<p>Thanks for these pointers, I'll rework the lint with those</p>",
        "id": 212901912,
        "sender_full_name": "dvermd",
        "timestamp": 1602311241
    },
    {
        "content": "<p>I was quite happy with my progress but I re-run <a href=\"http://setup-toolchain.sh\">setup-toolchain.sh</a> and I'm now stuck with</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0603]: function `run_compiler` is private\n   --&gt; src/driver.rs:360:34\n    |\n360 |             return rustc_driver::run_compiler(&amp;args, &amp;mut DefaultCallbacks, None, None, None);\n    |                                  ^^^^^^^^^^^^ private function\n    |\nnote: the function `run_compiler` is defined here\n\nerror[E0603]: function `run_compiler` is private\n   --&gt; src/driver.rs:423:23\n    |\n423 |         rustc_driver::run_compiler(&amp;args, callbacks, None, None, None)\n    |                       ^^^^^^^^^^^^ private function\n    |\nnote: the function `run_compiler` is defined here\n</code></pre></div>\n\n\n<p>I read the docs and that understands that this happens. Is there a way to set a \"working\" version of the nightly toolchain to continue working on this issue ?</p>",
        "id": 213084873,
        "sender_full_name": "dvermd",
        "timestamp": 1602535638
    },
    {
        "content": "<p>I believe you need a rebase of your branch on top of the current master</p>",
        "id": 213084974,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1602535704
    },
    {
        "content": "<p>I pushed some commits that break the tests with </p>\n<div class=\"codehilite\"><pre><span></span><code>error: since &amp; implements Copy trait, &amp;Option&lt;&amp;T&gt; can be simplifyied into Option&lt;&amp;T&gt;\n  --&gt; $DIR/option_if_let_else.rs:23:21\n   |\nLL | fn unop_bad(string: &amp;Option&lt;&amp;str&gt;, mut num: Option&lt;i32&gt;) {\n   |                     ^^^^^^^^^^^^^ help: try: `Option&lt;&amp;str&gt;`\n   |\n   = note: `-D clippy::ref-option-ref` implied by `-D warnings`\n</code></pre></div>\n\n\n<p>I should have run <code>cargo uitest</code> instead of just <code>TESTNAME=ref_option_ref cargo uitest</code> before pushing.</p>\n<p>Now, how would I fix this ? I think of either changing the <code>option_if_let_else.rs</code> method signature or disabling the <code>ref-option-ref</code> lint for <code>option_if_let_else</code> ?</p>",
        "id": 213213719,
        "sender_full_name": "dvermd",
        "timestamp": 1602621628
    },
    {
        "content": "<p>The latter, allowing the new lint should suffice</p>",
        "id": 213214147,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1602621848
    }
]