[
    {
        "content": "<p>is there a way to tell <code>cargo clippy</code> to not bail out on an error?</p>\n<p><a href=\"https://github.com/BurntSushi/ripgrep\">https://github.com/BurntSushi/ripgrep</a> HEAD passes <code>cargo check</code> and <code>cargo build</code> just fine but has a finding that causes clippy to- at least this is what i think it's doing- bail out before it finishes linting the repo</p>",
        "id": 246668112,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626828801
    },
    {
        "content": "<p>which means that i can't be sure if <code>clippy</code> is actually telling me what the full set of lint findings is</p>",
        "id": 246668172,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626828845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"427707\">Sam Lijin</span> <a href=\"#narrow/stream/257328-clippy/topic/--keep-going.3F/near/246668112\">said</a>:</p>\n<blockquote>\n<p>is there a way to tell <code>cargo clippy</code> to not bail out on an error?</p>\n<p><a href=\"https://github.com/BurntSushi/ripgrep\">https://github.com/BurntSushi/ripgrep</a> HEAD passes <code>cargo check</code> and <code>cargo build</code> just fine but has a finding that causes clippy to- at least this is what i think it's doing- bail out before it finishes linting the repo</p>\n</blockquote>\n<p>I think <code>warn(warnings)</code> might do it? untested though</p>",
        "id": 246668623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626829320
    },
    {
        "content": "<p>if not, you can always <code>warn(the_lint_that_errors)</code></p>",
        "id": 246668664,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626829331
    },
    {
        "content": "<blockquote>\n<p>I think warn(warnings) might do it? untested though</p>\n</blockquote>\n<p>gotcha, but not supported directly in clippy</p>\n<p>any chance you know if there's a particular reason this is the case? or is this (most likely) just how it happened to be implemented</p>",
        "id": 246669050,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626829782
    },
    {
        "content": "<blockquote>\n<p>gotcha, but not supported directly in clippy</p>\n</blockquote>\n<p>what do you mean? you can put it directly in the source code. I think there's even a <code>cfg(clippy)</code> so it only applies to clippy warnings.</p>",
        "id": 246669126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626829834
    },
    {
        "content": "<p>i guess i'm looking for a way to preserve not only the lint warnings but also their relative severity</p>",
        "id": 246669212,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626829942
    },
    {
        "content": "<p>that definitely does not exist and it would be quite difficult to add</p>",
        "id": 246669226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626829969
    },
    {
        "content": "<p>right now lots of the compiler depends on errors actually halting compilation</p>",
        "id": 246669236,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626829984
    },
    {
        "content": "<p>depends on lint errors halting compilation?</p>",
        "id": 246669247,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830002
    },
    {
        "content": "<p>to be clear: ripgrep <code>cargo build</code> succeeds at HEAD</p>",
        "id": 246669250,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830013
    },
    {
        "content": "<p>maybe not lints specifically. I guess it does already distinguish lints from errors from hard errors because it silences lint errors for dependencies</p>",
        "id": 246669277,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830043
    },
    {
        "content": "<p>but changing this for lints that would be a larger change than just changing clippy</p>",
        "id": 246669325,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830079
    },
    {
        "content": "<p>since the compiler also has its own lints</p>",
        "id": 246669327,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830085
    },
    {
        "content": "<p>it makes sense that linting a malformed AST would be a little hard, since that's an open research problem :p</p>",
        "id": 246669330,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830091
    },
    {
        "content": "<p>oh, so some lints are actually enforced in <code>rustc</code> itself as opposed to <code>clippy</code>?</p>",
        "id": 246669361,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830131
    },
    {
        "content": "<p>what about the less generic case: just some kind of <code>--keep-going</code> for <code>clippy</code>-defined lints?</p>",
        "id": 246669394,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830163
    },
    {
        "content": "<p>that would actually be harder than doing it for all lints</p>",
        "id": 246669448,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830207
    },
    {
        "content": "<p>since the compiler would have to start special-casing clippy</p>",
        "id": 246669459,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830219
    },
    {
        "content": "<p>ah</p>",
        "id": 246669471,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830235
    },
    {
        "content": "<p>right now clippy is \"just\" a tool using rustc_private, it's not special-cased like rustdoc</p>",
        "id": 246669472,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830235
    },
    {
        "content": "<p>/me is not happy that rustdoc is special cased so much</p>",
        "id": 246669481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830251
    },
    {
        "content": "<p>oh, are lints implemented by feeding boolean conditions into <code>rustc</code> basically?</p>",
        "id": 246669484,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830256
    },
    {
        "content": "<p>not really? the lints go through rustc_lint though</p>",
        "id": 246669493,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830269
    },
    {
        "content": "<p>(i'm new to rust, so kinda just reverse engineering my way through the black box right now)</p>",
        "id": 246669495,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830272
    },
    {
        "content": "<p>err I guess rustc_errors is more relevant for this conversation</p>",
        "id": 246669498,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830276
    },
    {
        "content": "<p>it might help to read an example lint: <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/methods/bytes_nth.rs\">https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/methods/bytes_nth.rs</a></p>",
        "id": 246669556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830308
    },
    {
        "content": "<p>gotcha- i guess once i have a better mental model of rustc itself this will make more sense</p>",
        "id": 246669665,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830426
    },
    {
        "content": "<p>FWIW I do think it's a reasonable change to keep going on deny-by-default lints, and only error at the end</p>",
        "id": 246669691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830504
    },
    {
        "content": "<p>but that still wouldn't achieve your goal because cargo wouldn't continue to lint downstream crates that depend on this crate, because of the error</p>",
        "id": 246669745,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830527
    },
    {
        "content": "<p>is there an issue tracker somewhere i could put that suggestion?</p>",
        "id": 246669757,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830538
    },
    {
        "content": "<p>rust-lang/rust is the best place I think</p>",
        "id": 246669759,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830546
    },
    {
        "content": "<blockquote>\n<p>but that still wouldn't achieve your goal because cargo wouldn't continue to lint downstream crates that depend on this crate, because of the error</p>\n</blockquote>\n<p>oh, so there would need to be another level of crate-after-crate linting?</p>",
        "id": 246669777,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626830610
    },
    {
        "content": "<p>yeah, it would need cargo integration somehow, it would be a little tricky I think</p>",
        "id": 246669831,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830645
    },
    {
        "content": "<p>the compiler would need to start distinguishing \"lint-only errors\" in the <em>output</em>, which it definitely doesn't do currently</p>",
        "id": 246669840,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/257328-clippy/topic/--keep-going.3F/near/246669745\">said</a>:</p>\n<blockquote>\n<p>but that still wouldn't achieve your goal because cargo wouldn't continue to lint downstream crates that depend on this crate, because of the error</p>\n</blockquote>\n<p>this comes up for path dependencies (I think that's the only place where cargo doesn't use --cap-lints allow)</p>",
        "id": 246669860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626830704
    },
    {
        "content": "<p>(for your use case I would definitely just <code>warn(...)</code> for now)</p>",
        "id": 246670185,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626831064
    },
    {
        "content": "<p>yep, totally</p>",
        "id": 246670262,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626831135
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/87334\">https://github.com/rust-lang/rust/issues/87334</a> - thanks for the guidance! (i would tag you but i don't know your GH handle)</p>",
        "id": 246670404,
        "sender_full_name": "Sam Lijin",
        "timestamp": 1626831347
    },
    {
        "content": "<p>I'm @jyn514</p>",
        "id": 246670409,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626831360
    },
    {
        "content": "<p>thanks for your patience :) sometimes people get frustrated when they realize that things are complicated <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I appreciate you listening</p>",
        "id": 246670564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626831503
    },
    {
        "content": "<p>/me is deciding between getting distracted by this and finally implementing <a href=\"https://github.com/rust-lang/rust/pull/86022\">https://github.com/rust-lang/rust/pull/86022</a></p>",
        "id": 246670933,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626831925
    },
    {
        "content": "<p>screw it this seems fun</p>",
        "id": 246671929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626833005
    },
    {
        "content": "<p>aha, so what's going on is that there are specific parts of the compiler calling <code>abort_if_errors</code> (presumably because they aren't able to deal with broken code), and the handler tells them if there was <em>any</em> error, including lint errors</p>",
        "id": 246672448,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626833465
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/b41936b92cd8463020207cb2f62a4247942ef2e4/compiler/rustc_errors/src/lib.rs#L866-L870\">https://github.com/rust-lang/rust/blob/b41936b92cd8463020207cb2f62a4247942ef2e4/compiler/rustc_errors/src/lib.rs#L866-L870</a></p>",
        "id": 246672536,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626833570
    },
    {
        "content": "<blockquote>\n<p>error: aborting due to 89 previous errors</p>\n</blockquote>\n<p>oh boy</p>",
        "id": 246673435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626834600
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/87337\">https://github.com/rust-lang/rust/pull/87337</a></p>",
        "id": 246675860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626837986
    },
    {
        "content": "<p>If you don't want the compiler to abort on a deny-by-default lint, then you can just use <code>--cap-lints=warn</code>. Preserving the lint levels and keep going even if there is an error, makes lint levels completely nonsensical. </p>\n<p>IMO not aborting after an error, even with lints, is a bad idea. Here's why:</p>\n<p>The compiler works in stages / IRs and so do lints. So there is the AST, where source-level checks are done, the (T)HIR where type checking and similar things happen and the MIR, where borrow checking and the like happen. If you already have erroneous code at the source-level AST, then you should fix those first, before the linter tries to check type information or borrowing stuff. </p>\n<p>Making the compiler not stop after an error would render different lint levels useless. The only difference then would be that they have a different color in the terminal. </p>\n<p>So I'm against this change, especially since there already is the <code>--cap-lints</code> flag where you can tell the compiler to ignore all lint levels above a specific level.</p>",
        "id": 246691768,
        "sender_full_name": "flip1995",
        "timestamp": 1626855959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> why are stages useful to the end user, though? There's an issue open from like 2015 to still show borrowck errors even if there are type errors.</p>\n<p>This will still exit with an error status if there are lint errors, it will just show all the lints before exiting.</p>",
        "id": 246713208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626871335
    },
    {
        "content": "<p>Yeah, maybe my concerns are a bit unwarranted.  I posted a comment about this on your PR.</p>",
        "id": 246713443,
        "sender_full_name": "flip1995",
        "timestamp": 1626871460
    },
    {
        "content": "<p>(pushing the blessed tests now so you can see exaclty what changed)</p>",
        "id": 246714295,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626871885
    },
    {
        "content": "<p>oh ugh I continue to create my own problems, they were blessed wrong because I have rustup env variables set</p>",
        "id": 246714429,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626871940
    },
    {
        "content": "<p>I need to fix that in bootstrap</p>",
        "id": 246714434,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626871943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> how are you running the tests? I'm getting \"multiple rlibs for crate\" again</p>",
        "id": 246726394,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626877287
    },
    {
        "content": "<p>Just delete <code>build/&lt;target&gt;/stage1-tools</code> and rerun <code>./x.py test src/tools/clippy</code></p>",
        "id": 246726570,
        "sender_full_name": "flip1995",
        "timestamp": 1626877357
    },
    {
        "content": "<p>that didn't work, I got the same error :/</p>",
        "id": 246726622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626877376
    },
    {
        "content": "<p>ok I deleted a couple .rlib files manualy and that seemed to do it</p>",
        "id": 246726717,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626877410
    },
    {
        "content": "<p>is there a way for clippy's compiletest to only show a summary of the failures? this is really hard to read:</p>\n<div class=\"codehilite\"><pre><span></span><code>------------------------------------------\n\ndiff of stderr:\n\n error: the type of the `self` parameter does not need to be arbitrary\n   --&gt; $DIR/needless_arbitrary_self_type_unfixable.rs:41:31\n    |\n LL |         fn call_with_mut_self(self: &amp;mut Self) {}\n    |                               ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&amp;&#39;_ mut self`\n    |\n    = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n\n-error: aborting due to previous error\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `&#39;_` if needed by type declaration)\n+  --&gt; $DIR/needless_arbitrary_self_type_unfixable.rs:41:9\n+   |\n+LL |         fn call_with_mut_self(self: &amp;mut Self) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n\n\n\nThe actual stderr differed from the expected stderr.\nActual stderr saved to /home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/test_build_base/needless_arbitrary_self_type_unfixable.stage-id.stderr\nTo update references, rerun the tests and pass the `--bless` flag\nTo only update this specific test, also pass `--test-args needless_arbitrary_self_type_unfixable.rs`\n\nerror: 1 errors occurred comparing output.\nstatus: exit status: 1\ncommand: &quot;/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools-bin/clippy-driver&quot; &quot;tests/ui/needless_arbitrary_self_type_unfixable.rs&quot; &quot;-L&quot; &quot;/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/test_build_base&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-o&quot; &quot;/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/test_build_base/needless_arbitrary_self_type_unfixable.stage-id&quot; &quot;-A&quot; &quot;unused&quot; &quot;--emit=metadata&quot; &quot;-L&quot; &quot;/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/deps&quot; &quot;-L&quot; &quot;/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-Dwarnings&quot; &quot;-Zui-testing&quot; &quot;--extern&quot; &quot;serde=/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libserde-4e004c5cead5444c.rlib&quot; &quot;--extern&quot; &quot;syn=/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libsyn-7d26d4702984e728.rlib&quot; &quot;--extern&quot; &quot;clippy_lints=/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_lints-78d172c13182c4db.rlib&quot; &quot;--extern&quot; &quot;quote=/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libquote-ca5f069fbd18092a.rlib&quot; &quot;--extern&quot; &quot;regex=/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libregex-3ffeac914dbf6a42.rlib&quot; &quot;-L&quot; &quot;/home/joshua/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/test_build_base/needless_arbitrary_self_type_unfixable.stage-id.aux&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n{&quot;message&quot;:&quot;the type of the `self` parameter does not need to be arbitrary&quot;,&quot;code&quot;:{&quot;code&quot;:&quot;clippy::needless_arbitrary_self_type&quot;,&quot;explanation&quot;:null},&quot;level&quot;:&quot;error&quot;,&quot;spans&quot;:[{&quot;file_name&quot;:&quot;tests/ui/needless_arbitrary_self_type_unfixable.rs&quot;,&quot;byte_start&quot;:1038,&quot;byte_end&quot;:1053,&quot;line_start&quot;:41,&quot;line_end&quot;:41,&quot;column_start&quot;:31,&quot;column_end&quot;:46,&quot;is_primary&quot;:true,&quot;text&quot;:[{&quot;text&quot;:&quot;        fn call_with_mut_self(self: &amp;mut Self) {}&quot;,&quot;highlight_start&quot;:31,&quot;highlight_end&quot;:46}],&quot;label&quot;:null,&quot;suggested_replacement&quot;:null,&quot;suggestion_applicability&quot;:null,&quot;expansion&quot;:null}],&quot;children&quot;:[{&quot;message&quot;:&quot;`-D clippy::needless-arbitrary-self-type` implied by `-D warnings`&quot;,&quot;code&quot;:null,&quot;level&quot;:&quot;note&quot;,&quot;spans&quot;:[],&quot;children&quot;:[],&quot;rendered&quot;:null},{&quot;message&quot;:&quot;consider to change this parameter to&quot;,&quot;code&quot;:null,&quot;level&quot;:&quot;help&quot;,&quot;spans&quot;:[{&quot;file_name&quot;:&quot;tests/ui/needless_arbitrary_self_type_unfixable.rs&quot;,&quot;byte_start&quot;:1038,&quot;byte_end&quot;:1053,&quot;line_start&quot;:41,&quot;line_end&quot;:41,&quot;column_start&quot;:31,&quot;column_end&quot;:46,&quot;is_primary&quot;:true,&quot;text&quot;:[{&quot;text&quot;:&quot;        fn call_with_mut_self(self: &amp;mut Self) {}&quot;,&quot;highlight_start&quot;:31,&quot;highlight_end&quot;:46}],&quot;label&quot;:null,&quot;suggested_replacement&quot;:&quot;&amp;&#39;_ mut self&quot;,&quot;suggestion_applicability&quot;:&quot;HasPlaceholders&quot;,&quot;expansion&quot;:null}],&quot;children&quot;:[],&quot;rendered&quot;:null}],&quot;rendered&quot;:&quot;error: the type of the `self` parameter does not need to be arbitrary\\n  --&gt; tests/ui/needless_arbitrary_self_type_unfixable.rs:41:31\\n   |\\nLL |         fn call_with_mut_self(self: &amp;mut Self) {}\\n   |                               ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&amp;&#39;_ mut self`\\n   |\\n   = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\\n\\n&quot;}\n{&quot;message&quot;:&quot;explicit lifetimes given in parameter types where they could be elided (or replaced with `&#39;_` if needed by type declaration)&quot;,&quot;code&quot;:{&quot;code&quot;:&quot;clippy::needless_lifetimes&quot;,&quot;explanation&quot;:null},&quot;level&quot;:&quot;error&quot;,&quot;spans&quot;:[{&quot;file_name&quot;:&quot;tests/ui/needless_arbitrary_self_type_unfixable.rs&quot;,&quot;byte_start&quot;:1016,&quot;byte_end&quot;:1055,&quot;line_start&quot;:41,&quot;line_end&quot;:41,&quot;column_start&quot;:9,&quot;column_end&quot;:48,&quot;is_primary&quot;:true,&quot;text&quot;:[{&quot;text&quot;:&quot;        fn call_with_mut_self(self: &amp;mut Self) {}&quot;,&quot;highlight_start&quot;:9,&quot;highlight_end&quot;:48}],&quot;label&quot;:null,&quot;suggested_replacement&quot;:null,&quot;suggestion_applicability&quot;:null,&quot;expansion&quot;:null}],&quot;children&quot;:[{&quot;message&quot;:&quot;`-D clippy::needless-lifetimes` implied by `-D warnings`&quot;,&quot;code&quot;:null,&quot;level&quot;:&quot;note&quot;,&quot;spans&quot;:[],&quot;children&quot;:[],&quot;rendered&quot;:null}],&quot;rendered&quot;:&quot;error: explicit lifetimes given in parameter types where they could be elided (or replaced with `&#39;_` if needed by type declaration)\\n  --&gt; tests/ui/needless_arbitrary_self_type_unfixable.rs:41:9\\n   |\\nLL |         fn call_with_mut_self(self: &amp;mut Self) {}\\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n   |\\n   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\\n\\n&quot;}\n{&quot;message&quot;:&quot;aborting due to 2 previous errors&quot;,&quot;code&quot;:null,&quot;level&quot;:&quot;error&quot;,&quot;spans&quot;:[],&quot;children&quot;:[],&quot;rendered&quot;:&quot;error: aborting due to 2 previous errors\\n\\n&quot;}\n\n------------------------------------------\n\nthread &#39;compile_test&#39; panicked at &#39;Some tests failed&#39;, /home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.6.0/src/lib.rs:105:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    compile_test\n</code></pre></div>",
        "id": 246726851,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626877459
    },
    {
        "content": "<p>anyway I'm out of time for this for now</p>",
        "id": 246726900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626877488
    },
    {
        "content": "<p>Just the summary, I don't think so. </p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n    [ui] ui/crashes/ice-3969.rs\n    [ui] ui/deref_addrof.rs\n    [ui] ui/double_neg.rs\n    [ui] ui/fn_params_excessive_bools.rs\n    [ui] ui/formatting.rs\n    [ui] ui/literals.rs\n    [ui] ui/many_single_char_names.rs\n    [ui] ui/mistyped_literal_suffix.rs\n    [ui] ui/needless_arbitrary_self_type_unfixable.rs\n    [ui] ui/needless_continue.rs\n    [ui] ui/non_expressive_names.rs\n    [ui] ui/redundant_closure_call_early.rs\n    [ui] ui/redundant_else.rs\n    [ui] ui/similar_names.rs\n    [ui] ui/suspicious_else_formatting.rs\n    [ui] ui/suspicious_operation_groupings.rs\n\ntest result: FAILED. 632 passed; 16 failed; 3 ignored; 0 measured; 0 filtered out; finished in 9.06s\n</code></pre></div>\n<p>Here's the summary</p>",
        "id": 246727244,
        "sender_full_name": "flip1995",
        "timestamp": 1626877654
    },
    {
        "content": "<p>And here is a gist of how it would look like if you'd just bless the Clippy tests: <a href=\"https://gist.github.com/flip1995/6debf3da5d2dd9244d795ec51f529398\">https://gist.github.com/flip1995/6debf3da5d2dd9244d795ec51f529398</a></p>",
        "id": 246727642,
        "sender_full_name": "flip1995",
        "timestamp": 1626877814
    }
]