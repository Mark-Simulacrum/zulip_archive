[
    {
        "content": "<p>I stumbled on an overzealous clippy lint today that wants me to use or patterns everywhere. While I would love to do just that, I'm running the latest stable version 1.51 and or patterns aren't set to stabilize until 1.53. Now I'm pretty sure this is a bug (<a href=\"https://github.com/rust-lang/rust-clippy/issues/6953\">#6953</a>), but I'm curious more generally about the policy regarding lints that require feature flags. Personally, I think that lints should never make suggestions that require adding feature flags (even on a nightly compiler) unless the user has already added the feature flag. But I can also see an argument for using lints to discover unknown parts of the language, and for nightly users that might mean discovering new feature flags hot off the presses.</p>",
        "id": 231896269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616717848
    },
    {
        "content": "<p>(One reason not to draw conclusions from the compiler being a nightly is that a lot of people (most?) run clippy with a nightly even if they use stable for the actual build.)</p>",
        "id": 231896744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616718150
    },
    {
        "content": "<p>have you tried setting a <code>msrv</code> ?<br>\n<a href=\"https://github.com/rust-lang/rust-clippy#specifying-the-minimum-supported-rust-version\">https://github.com/rust-lang/rust-clippy#specifying-the-minimum-supported-rust-version</a></p>",
        "id": 231898906,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1616719898
    },
    {
        "content": "<p>I guess you are using nightly Clippy and stable rustc? We removed the check for the <code>or_patterns</code> feature a few days ago (in nightly only) because it is stable in 1.53.</p>\n<p>Is there any reason, why you would run Clippy 1.53, but rustc 1.51?  We definitely appreciate that you are testing nightly Clippy for us and therefore help catch bugs early, but it is recommended to use the same Clippy version as rustc to gate on Clippy in CI. So, a setup which gates on stable Clippy, but also runs an allow-to-fail nightly Clippy to see the effects of new lints early / catch Clippy bugs is optimal.</p>\n<p>Setting <code>msrv</code> is currently not possible for this lint. But we should add that to the lint.</p>",
        "id": 231935844,
        "sender_full_name": "flip1995",
        "timestamp": 1616751200
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/issues/6977\">clippy#6977</a></p>",
        "id": 231938960,
        "sender_full_name": "flip1995",
        "timestamp": 1616752841
    },
    {
        "content": "<blockquote>\n<p>Is there any reason, why you would run Clippy 1.53, but rustc 1.51? We definitely appreciate that you are testing nightly Clippy for us and therefore help catch bugs early, but it is recommended to use the same Clippy version as rustc to gate on Clippy in CI.</p>\n</blockquote>\n<p>Ah, I see, I didn't know that clippy tracked rustc in this way. As you say, I run nightly clippy and stable rustc (this used to be the only way to do things, but even now it's useful to get the latest lints). Is there a way to set the msrv to \"latest stable\"?</p>",
        "id": 232002805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616779373
    },
    {
        "content": "<p>I'm probably confused about what tracks what, but it seems like clippy versions should be separate from rustc since most lints and lint changes apply to all rust versions, and I would hate to use a 12 week old clippy just so that I can track stable properly.</p>",
        "id": 232003447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616779623
    },
    {
        "content": "<blockquote>\n<p>Is there a way to set the msrv to \"latest stable\"?</p>\n</blockquote>\n<p>Use stable Clippy <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> No there isn't and there won't be, because using stable has this exact effect.</p>\n<blockquote>\n<p>clippy versions should be separate from rustc</p>\n</blockquote>\n<p>Clippy is shipped together with rustc. So it totally makes sense that Clippy tracks the rustc version. </p>\n<blockquote>\n<p>since most lints and lint changes apply to all rust versions</p>\n</blockquote>\n<p>Yes, but wouldn't we then have to backport everything to every version? There is a Clippy version (strictly tied to the rustc version) were a lint is added and it will be available from there on onwards. Just because a feature is added in Rust 1.98.0 it isn't magically available in Rust 1.0.0 either.</p>\n<blockquote>\n<p>and I would hate to use a 12 week old clippy just so that I can track stable properly.</p>\n</blockquote>\n<p>That's the same as saying: \"I would hate to use a 12 week old <strong>rustc</strong> just so that I can track stable.\" If you want to use nightly Clippy, you're more than welcome to do so, since you'll help us find bugs in Clippy. But as with all nightly releases you will have to live with the consequences (i.e. bugs, unstable stuff, ...).</p>",
        "id": 232006768,
        "sender_full_name": "flip1995",
        "timestamp": 1616780944
    },
    {
        "content": "<blockquote>\n<p>Yes, but wouldn't we then have to backport everything to every version?</p>\n</blockquote>\n<p>Isn't that what the msrv flag does?</p>",
        "id": 232007842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616781464
    },
    {
        "content": "<p>I don't think of it as backporting, but rather that certain lints only apply to certain versions</p>",
        "id": 232007873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616781482
    },
    {
        "content": "<p>backporting would be adding features to stable clippy</p>",
        "id": 232007966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616781519
    },
    {
        "content": "<p>In the or_patterns situation, would it not make sense to just enable it on stable in ~12 weeks?</p>",
        "id": 232008122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616781598
    },
    {
        "content": "<p>1.53 stable is not really a thing that exists yet</p>",
        "id": 232008299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616781645
    },
    {
        "content": "<p>Yes, it will be enabled in stable 1.53 in 12 weeks. Currently it is only enabled on 1.53 nightly, not on any stable release of Clippy.</p>",
        "id": 232009136,
        "sender_full_name": "flip1995",
        "timestamp": 1616781966
    },
    {
        "content": "<p>But as every feature, in order to get into stable, it first has to be in nightly and then beta. </p>\n<p>You are using <strong>nightly</strong> Clippy 1.53. <strong>Not</strong> stable Clippy 1.53. So you get all the features that are enabled in the current nightly and will be available in stable in 12 weeks.</p>",
        "id": 232009362,
        "sender_full_name": "flip1995",
        "timestamp": 1616782087
    },
    {
        "content": "<p>I see, this makes sense. Is there a difference between nightly clippy 1.53 and stable clippy 1.53 (as in something that clippy itself can detect and do differently)? Or is it just that in a few weeks you will be changing the program itself to work on the stable channel. Because what I would like to do is configure nightly clippy to act like stable, without actually using an old version. Am I asking for <code>RUSTC_BOOTSTRAP</code>? I'm not sure.</p>",
        "id": 232014926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616784806
    },
    {
        "content": "<p>stable Clippy 1.53 will be released with stable Rust 1.53 and there are no guarantees that features from nightly Clippy 1.53 will be in stable Clippy 1.53.  Nightly releases are inherently unstable with no guarantees. You can't magically make a nightly release behave like a stable release. <code>RUSTC_BOOTSTRAP</code> makes a stable release behave like a unstable nightly. This env var is inherently unstable and you should not use it ever.</p>\n<p>If there is confusion what a nightly build is, I recommend reading the <a href=\"https://en.wikipedia.org/wiki/Daily_build\">Wikipedia article</a> about it. It is really short.</p>",
        "id": 232017737,
        "sender_full_name": "flip1995",
        "timestamp": 1616786000
    },
    {
        "content": "<p>I think, rather than \"stable\", a better term for what I'm looking for is \"nightly but with no <code>feature(..)</code>\"</p>",
        "id": 232018881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616786571
    },
    {
        "content": "<p>It is unfortunate that these two things are intermingled in rustc - there is a difference between wanting the version of the master branch that was compiled last night and wanting experimental features</p>",
        "id": 232019122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616786688
    },
    {
        "content": "<blockquote>\n<p>We definitely appreciate that you are testing nightly Clippy for us and therefore help catch bugs early, but it is recommended to use the same Clippy version as rustc to gate on Clippy in CI. So, a setup which gates on stable Clippy, but also runs an allow-to-fail nightly Clippy to see the effects of new lints early / catch Clippy bugs is optimal.</p>\n</blockquote>\n<p>If I did this, wouldn't the nightly Clippy fail now and for the next 12 weeks? It sounds like you are saying this is \"working as intended\" but I'm missing some configuration option so that an unfixable error doesn't linger.</p>",
        "id": 232020071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616787156
    },
    {
        "content": "<p><code>or_patterns</code> is/will be stable in 1.53. So Clippy 1.53 will treat it as stable. Clippy won't just enable features.</p>",
        "id": 232020179,
        "sender_full_name": "flip1995",
        "timestamp": 1616787208
    },
    {
        "content": "<p>Clippy 1.52. and earlier doesn't treat <code>or_patterns</code> as stable. This is just basic versioning.</p>",
        "id": 232020223,
        "sender_full_name": "flip1995",
        "timestamp": 1616787239
    },
    {
        "content": "<p>but you are saying that nightly clippy doesn't know my project is stable</p>",
        "id": 232020268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616787247
    },
    {
        "content": "<p>which makes sense, there isn't anywhere obvious that I have indicated as much</p>",
        "id": 232020326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616787266
    },
    {
        "content": "<p>With rustc, I can get more or less the same behavior on stable and nightly by simply not using feature flags. But nightly clippy here is behaving quite differently from stable clippy even without any flags</p>",
        "id": 232020390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616787318
    },
    {
        "content": "<p>It doesn't. When you compile your project with a compiler with version 1.53., the compiler assumes that your project is compatible with compiler version 1.53. Clippy is not much different from a compiler.</p>",
        "id": 232020418,
        "sender_full_name": "flip1995",
        "timestamp": 1616787337
    },
    {
        "content": "<p>If rustc adds a warning in 1.53 (nightly). you will get that warning when you use nightly rustc, but not when you use stable rustc, because the warning was not there in stable rustc.</p>",
        "id": 232020562,
        "sender_full_name": "flip1995",
        "timestamp": 1616787395
    },
    {
        "content": "<p>You may not notice this with rustc, because it only rarely happens nowadays. But Clippy is by design changing more and faster.</p>",
        "id": 232020624,
        "sender_full_name": "flip1995",
        "timestamp": 1616787442
    },
    {
        "content": "<p>The or pattern example was something like a project with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which clippy was suggesting to change to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[feature(or_patterns)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So clippy clearly recognizes that the feature flag (1) is not present and (2) needs to be added to make the suggestion compile. The exact same code run on stable clippy would presumably not make the suggestion</p>",
        "id": 232020715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616787492
    },
    {
        "content": "<blockquote>\n<p>If I did this, wouldn't the nightly Clippy fail now and for the next 12 weeks?</p>\n</blockquote>\n<p>Yes, that is why we don't recommend to gate on nightly Clippy on your CI. You can use nightly Clippy <strong>in addition</strong> to get an early warning for new Clippy features.</p>",
        "id": 232020739,
        "sender_full_name": "flip1995",
        "timestamp": 1616787507
    },
    {
        "content": "<p>Clippy does not suggest that you should add a feature flag.</p>",
        "id": 232020856,
        "sender_full_name": "flip1995",
        "timestamp": 1616787583
    },
    {
        "content": "<blockquote>\n<p>The exact same code run on stable clippy would presumably not make the suggestion</p>\n</blockquote>\n<p>Yes, because the feature isn't stable on current stable, yet.</p>",
        "id": 232021332,
        "sender_full_name": "flip1995",
        "timestamp": 1616787819
    },
    {
        "content": "<p>So if you would use the same Version of Clippy as you do for rustc, you would not have this problem. You can't use 2 different versions of obviously equivalent versioned programs and expect that they're 100% compatible.</p>",
        "id": 232021528,
        "sender_full_name": "flip1995",
        "timestamp": 1616787912
    },
    {
        "content": "<p>Right, my question is how does stable clippy know it is not nightly?</p>",
        "id": 232021567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616787928
    },
    {
        "content": "<p>There have to be some configuration settings that change when the channel changes</p>",
        "id": 232021731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616787984
    },
    {
        "content": "<p>It doesn't have to. Features are added in a specific version. They will be stable once that version becomes stable. </p>\n<p>Stable Clippy is at commit XXX (oldest)<br>\nBeta Clippy is at commit YYY<br>\nNightly Clippy is at commit ZZZ (newest)</p>\n<p>There is no check whatsoever in Clippy that checks if it is a nightly build. (Well, there were in some versions before, but those are implementation details that have nothing to do with this)</p>",
        "id": 232022084,
        "sender_full_name": "flip1995",
        "timestamp": 1616788127
    },
    {
        "content": "<blockquote>\n<p>Clippy does not suggest that you should add a feature flag.</p>\n</blockquote>\n<p>Hm, I could have sworn it suggested that, but I just tested it and indeed it doesn't mention the flag. (That does mean it's making suggestions that don't compile, even on nightly, though)</p>",
        "id": 232022110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616788144
    },
    {
        "content": "<p>So that means that for any stable, there was once a nightly that was identical to that stable, right? Did that nightly suggest experimental features?</p>",
        "id": 232022349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616788236
    },
    {
        "content": "<blockquote>\n<p>So that means that for any stable, there was once a nightly that was identical to that stable</p>\n</blockquote>\n<p>I guess you can say it like this, yes.</p>\n<blockquote>\n<p>Did that nightly suggest experimental features?</p>\n</blockquote>\n<p>If it did and it got reported, that was fixed before the nightly was turned into stable.</p>",
        "id": 232022641,
        "sender_full_name": "flip1995",
        "timestamp": 1616788362
    },
    {
        "content": "<p>Then that means that any lints about long-term unstable features is getting removed and added back every 6 weeks?</p>",
        "id": 232023117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616788564
    },
    {
        "content": "<p>No the gating of this features in the lint implementation just doesn't get removed. E.g. <a href=\"https://github.com/rust-lang/rust/commit/5cb8f92791432634a172740d8aca2ceae12c3e58#diff-0383bd8ec65ec80cd839f5b43f1cb86fc404fbb698f39fbfb6638f10ff5a9e77\">this commit</a> removed the gate for the <code>or_patterns</code> feature during stabilization.</p>",
        "id": 232023548,
        "sender_full_name": "flip1995",
        "timestamp": 1616788787
    }
]