[
    {
        "content": "<p>I'm currently working on a <em>lint</em> which requires me to get all possible mutations of a value. The only way that I can think of is to check for values with the requested type and then use a <code>Visitor</code> that goes through the scope to collect all possible mutations. This is a <em>very</em> oversimplified example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">cool_code</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Create a visitor for this value and track it</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">applicability</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MachineApplicable</span>::<span class=\"n\">MachineApplicable</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">some_condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">applicability</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MachineApplicable</span>::<span class=\"n\">HasPlaceholders</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">span_lint_and_suggest</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">applicability</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// The visitor reports all possible mutations: [\"MachineApplicable\", \"HasPlaceholders\"]</span>\n<span class=\"w\">        </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This obviously also requires some logic to handle <code>&amp;mut</code> passes.</p>\n<p>Is there a simpler way to do this? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <span aria-label=\"penguin\" class=\"emoji emoji-1f427\" role=\"img\" title=\"penguin\">:penguin:</span></p>",
        "id": 226253121,
        "sender_full_name": "xFrednet",
        "timestamp": 1613233436
    },
    {
        "content": "<p>ExprUseVisitor?</p>",
        "id": 226263539,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613246044
    },
    {
        "content": "<p>That looks exactly like what I was looking for! Just in time before I wanted to actually write a complete new visitor. THANK YOU!!!!!</p>",
        "id": 226263878,
        "sender_full_name": "xFrednet",
        "timestamp": 1613246480
    },
    {
        "content": "<p>Something it took me a while to understand with ExprUseVisitor - it doesn't really tell you <em>how</em> the value is used or anything about the context of how it is used. That part is up to you to implement.</p>",
        "id": 226266412,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613249410
    },
    {
        "content": "<p>But it does tell you if the value is moved, copied or mutated</p>",
        "id": 226266446,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613249462
    },
    {
        "content": "<p>That kind of makes sense. Thanks for the heads up and now I know which expert I can ask ;)</p>",
        "id": 226266643,
        "sender_full_name": "xFrednet",
        "timestamp": 1613249664
    },
    {
        "content": "<p>I've tried to use the <code>ExprUseVisitor</code> but I'm unable to get the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/def_id/struct.LocalDefId.html\"><code>LocalDefId</code></a> of the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Local.html\"><code>hir::Local</code></a> instance which is required by the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/expr_use_visitor/struct.ExprUseVisitor.html#method.new\">constructor</a>. A quick dump of all <code>LocalDefId</code>'s in <code>cx.tcx.hir()</code> only shows IDs for Items. <span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> have you ever used the visitor for actual locals? All current uses within Clippy only reference functions <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 226734514,
        "sender_full_name": "xFrednet",
        "timestamp": 1613599683
    },
    {
        "content": "<p>The LocalDefId is for the body that you are visiting inside, not the Local</p>",
        "id": 226735337,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613599904
    },
    {
        "content": "<p>Where do I define the local ID that I'm interested in then?</p>",
        "id": 226735615,
        "sender_full_name": "xFrednet",
        "timestamp": 1613599980
    },
    {
        "content": "<p>Or do do you mean that it just loops over the expressions in the block without any filtering? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 226735697,
        "sender_full_name": "xFrednet",
        "timestamp": 1613600003
    },
    {
        "content": "<p>Yes</p>",
        "id": 226735759,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613600024
    },
    {
        "content": "<p>It's almost like a normal visitor, but with a little extra info in the callbacks</p>",
        "id": 226736049,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613600067
    },
    {
        "content": "<p>Ahhh, okay, I've misunderstood the usage so far. Thank you for clearing that up <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 226736264,
        "sender_full_name": "xFrednet",
        "timestamp": 1613600133
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 226740843,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1613602669
    },
    {
        "content": "<p>It works now! <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 226741270,
        "sender_full_name": "xFrednet",
        "timestamp": 1613602916
    }
]