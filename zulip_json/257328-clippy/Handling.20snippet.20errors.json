[
    {
        "content": "<p>We currently have a \"best practice\" of - \"if an error occurs when acquiring a snippet string, then downgrade the suggestion applicability\". I propose changing this to \"...don't emit a suggestion\". The reason is that these errors should be very rare and I don't think it is worth the complexity of passing <code>&amp;mut applicability</code> through various utils. Omitting the suggestion would be easier after <a href=\"https://github.com/rust-lang/rust-clippy/issues/7797\">rust-lang/rust-clippy#7797</a>.</p>",
        "id": 265507049,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1639957404
    },
    {
        "content": "<p>...<code>snippet</code>, <code>snippet_opt</code> and <code>snippet_with_applicability</code> could be replaced with one <code>snippet</code> that returns <code>Option</code>.</p>",
        "id": 265507139,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1639957536
    },
    {
        "content": "<p>tbh i find the passing-mut-applicability thing to be pretty elegant, but this is fair</p>",
        "id": 265519005,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1639972985
    },
    {
        "content": "<p>I think that with the code as it is right now it's better to have <code>snippet_with_applicability</code> as it doesn't require extra option handling in the linting code. However, if we switch to <code>span_clippy_lint</code> we could have the closure return an <code>Result</code> or <code>Option</code> which would allow easy handling of the returned <code>Option</code> with the <code>?</code> operator. That would also give a higher intensive to only construct the suggestion inside the diagnostic closure.</p>",
        "id": 265537193,
        "sender_full_name": "xFrednet",
        "timestamp": 1639991303
    },
    {
        "content": "<p>One advantage of <code>snippet_with_applicability</code> is that it also checks if the given <code>Span</code> comes from a macro. Most lints ignore macros but it might be good to have a util function like <code>adjust_applicability</code> that replaces this check for easy access and possibly easier refactoring <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 265537393,
        "sender_full_name": "xFrednet",
        "timestamp": 1639991469
    },
    {
        "content": "<p>IMO dropping the suggestion in all cases where the applicability would get downgraded is not a good idea. Having a suggestion with (for example) a placeholder in it, because some snippet could not be generated is usually better than having no suggestion at all. E.g. having <code>replace it with: `.some_function(..)` </code> , where <code>..</code> is a placeholder, because the snippet of the arguments couldn't get generated, is still better than not knowing how to fix this error without looking up the lint documentation.</p>",
        "id": 265548491,
        "sender_full_name": "flip1995",
        "timestamp": 1639998264
    },
    {
        "content": "<p>Snippet only fails when the source can't be read, which should basically never happen, and invalid spans. The only way to get an invalid span either we created it, or a proc macro created it (I don't think rustc verifies these). I'm in favour of just having a single fixed placeholder and just returning a <code>String</code> instead of <code>Cow&lt;str&gt;</code>.</p>\n<p>Dropping the  suggestion in the case of an invalid span is probably fine since it's either from a proc macro (which we don't want to lint usually), or we screwed up the lint (maybe we want to emit something here). If it's just that the source can't be read then the suggestion is probably fine, we just can't give a specific one.</p>\n<p>If <a href=\"https://github.com/rust-lang/rust/issues/7986\">#7986</a> ends up working out my plan is to automatically handle applicability from failed snippets which will end up solving this problem.</p>",
        "id": 266902096,
        "sender_full_name": "Jason Newcomb",
        "timestamp": 1641363668
    },
    {
        "content": "<blockquote>\n<p>Snippet only fails when the source can't be read, which should basically never happen, and invalid spans. The only way to get an invalid span either we created it, or a proc macro created it (I don't think rustc verifies these). I'm in favour of just having a single fixed placeholder and just returning a String instead of Cow&lt;str&gt;.</p>\n</blockquote>\n<p>FWIW rustdoc has been intentionally switching away from span_to_snippet for consistency, and also because the standard library's sources often aren't available</p>",
        "id": 266952654,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1641398219
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/pull/86282\">https://github.com/rust-lang/rust/pull/86282</a></p>",
        "id": 266952762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1641398274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> wait what? the stdlib sources being unavailable should not affect span_to_snippet; aiui that stuff is hardcoded</p>",
        "id": 266960427,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1641401940
    },
    {
        "content": "<p>oh maybe they do</p>",
        "id": 266960456,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1641401951
    },
    {
        "content": "<p>either way we don't really span_to_snippet on foreign spans</p>",
        "id": 266960482,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1641401958
    }
]