[
    {
        "content": "<p>Is there a way to tell cargo to use a version of clippy I built myself for <code>cargo clippy</code>?</p>",
        "id": 243818249,
        "sender_full_name": "eholk",
        "timestamp": 1624555248
    },
    {
        "content": "<p>Run <code>cargo install --path . --force</code> in the Clippy dir. You may have to set <code>LD_LIBRARY_PATH=$(rustc +&lt;toolchain-you-compiled-clippy-with&gt; --print=sysroot)/lib</code> for Clippy to work. After that <code>cargo clippy</code> should run your self-compiled version of Clippy. You can verify that with <code>cargo clippy --version</code></p>",
        "id": 243827012,
        "sender_full_name": "flip1995",
        "timestamp": 1624559318
    },
    {
        "content": "<p>You may have to copy the files installed to <code>.cargo/bin/*clippy*</code> to <code>$(rustc +&lt;toolchain-you-compiled-clippy-with&gt; --print=sysroot)/bin</code>, but I'm not sure about that.</p>",
        "id": 243827376,
        "sender_full_name": "flip1995",
        "timestamp": 1624559472
    },
    {
        "content": "<p>^ That's how it works on Linux. Similar steps on Windows and MacOS should also work. I can't test this on those two platforms though.</p>",
        "id": 243827475,
        "sender_full_name": "flip1995",
        "timestamp": 1624559517
    },
    {
        "content": "<p>Thanks, I'll give that a try. It looks like this overrides the released version of clippy, right? Is there a way to restore the released version afterwards?</p>",
        "id": 243854643,
        "sender_full_name": "eholk",
        "timestamp": 1624573811
    },
    {
        "content": "<p>Yes, you can just <code>rustup component remove clippy --toolchain=...</code> and then <code>rustup component add clippy --toolchain=...</code></p>",
        "id": 243887071,
        "sender_full_name": "flip1995",
        "timestamp": 1624608752
    },
    {
        "content": "<p>I tried following these instructions but it failed as follows:<br>\nI ran <code>cargo install --path . --force</code> in the clippy repo root, which succeeded.<br>\nThen I ran the following in some crate directory:</p>\n<div class=\"codehilite\"><pre><span></span><code>rukai@memes src$ export LD_LIBRARY_PATH=$(rustc +nightly-2021-07-01 --print=sysroot)/lib\nrukai@memes src$ cargo clippy\nerror: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/rukai/.cargo/bin/clippy-driver rustc - --crate-name ___ --print=file-names -C link-arg=-fuse-ld=lld --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit status: 127)\n  --- stderr\n  /home/rukai/.cargo/bin/clippy-driver: error while loading shared libraries: librustc_driver-cf542089f8fca1b6.so: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 245588708,
        "sender_full_name": "Rukai",
        "timestamp": 1625980195
    },
    {
        "content": "<p>Did you try to copy the clippy binaries also to the toolchain folder of the nightly you compiled Clippy with.</p>\n<p>Please also check if the path produced by <code>echo \"$(rustc +nightly-2021-07-01 --print=sysroot)/lib\"</code> contains the file <code>librustc_driver-cf542089f8fca1b6.so</code> or another <code>librustc_driver-*.so</code> file</p>",
        "id": 245703005,
        "sender_full_name": "flip1995",
        "timestamp": 1626103817
    },
    {
        "content": "<p>I tried copying the binaries to the toolchain folder of the 2021-07-01 nightly but it didnt help.<br>\nThe clippy binary run from <code>cargo clippy</code> seem to be from <code>.cargo/bin</code>.</p>\n<p>And it seems like LD_LIBRARY_PATH is not working as the missing .so file is in the LD_LIBRARY_PATH dir.</p>\n<div class=\"codehilite\"><pre><span></span><code>rukai@memes canon_collision$ echo $LD_LIBRARY_PATH\n/home/rukai/.rustup/toolchains/nightly-2021-07-01-x86_64-unknown-linux-gnu/lib\nrukai@memes canon_collision$ ls $LD_LIBRARY_PATH\nlibLLVM-12-rust-1.55.0-nightly.so  librustc_driver-cf542089f8fca1b6.so  libstd-37fdd654777c296f.so  libtest-08487f8e282f19e0.so  rustlib\nrukai@memes canon_collision$ cargo clippy\nerror: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/rukai/.cargo/bin/clippy-driver rustc - --crate-name ___ --print=file-names -C link-arg=-fuse-ld=lld --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit status: 127)\n  --- stderr\n  /home/rukai/.cargo/bin/clippy-driver: error while loading shared libraries: librustc_driver-cf542089f8fca1b6.so: cannot open shared object file: No such file or directory\n</code></pre></div>\n<p>btw, I'm only trying to do this because I want to able to run changes I make to clippy on my own projects, if there is a better way to do that without being able to run it via <code>cargo clippy</code> then that would be fine too.</p>",
        "id": 245818407,
        "sender_full_name": "Rukai",
        "timestamp": 1626180241
    },
    {
        "content": "<p>Ah ok. Then the easiest way is to use our <code>lintcheck</code> tool for this. The documentation for this tool is here: <a href=\"https://github.com/rust-lang/rust-clippy/tree/master/lintcheck#cargo-lintcheck\">https://github.com/rust-lang/rust-clippy/tree/master/lintcheck#cargo-lintcheck</a></p>\n<p>TL;DR:</p>\n<ol>\n<li>create a config file with your crates (see the above readme on how to do that)</li>\n<li>run <code>cargo lintcheck --crates-toml /path/to/config-file.toml</code></li>\n</ol>",
        "id": 245827925,
        "sender_full_name": "flip1995",
        "timestamp": 1626184560
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust-clippy/pull/7460\">https://github.com/rust-lang/rust-clippy/pull/7460</a>. I may have some new guidance on this.</p>",
        "id": 245870579,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626202480
    },
    {
        "content": "<p>I was trying to use lintcheck earlier but was getting \"lintcheck needs to be run from clippys repo root!\" even though I was in the clippy repo root.<br>\nBut I tried lintcheck just now and its working! No idea if there was a fix merged or maybe it was all the fiddling with toolchains from earlier.</p>\n<p>But now for some reason when I run it on my local project i'm getting:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `lintcheck/target/debug/lintcheck --crates-toml lintcheck/embassy.toml`\nCompiling clippy...\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\nDone compiling\nNot copying /home/rukai2/Projects/Crates/embassy/embassy to target/lintcheck/sources/embassy, destination already exists\n1/1 100% Linting embassy local\n\nWARNING: bad exit status after checking embassy local\n\nWriting logs to lintcheck-logs/embassy_logs.txt\n\nStats:\n</code></pre></div>\n<p>But other projects seem to be working so I'll investigate on my end for a while.<br>\nThanks for the help!</p>",
        "id": 245934254,
        "sender_full_name": "Rukai",
        "timestamp": 1626252859
    },
    {
        "content": "<p>Have you modified anything in Clippy before running the tool? This usually means, that Clippy ICEd when running on the embassy crate.</p>",
        "id": 245966074,
        "sender_full_name": "flip1995",
        "timestamp": 1626272335
    }
]