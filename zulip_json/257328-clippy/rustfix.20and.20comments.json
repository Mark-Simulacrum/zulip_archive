[
    {
        "content": "<p>I've realized that when running rustfix we can lose comments. Do we have a policy on that? I don't see how we could keep them, especially for late passes since AFAIK there's no information about comments anymore...</p>",
        "id": 214496763,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1603641802
    },
    {
        "content": "<p>See the first error of <a href=\"https://github.com/rust-lang/rust-clippy/blob/9a203c90f6d3e25f58951d7a84b71a1afeb12cb8/tests/ui/map_unwrap_or_else_fixable.stderr\">https://github.com/rust-lang/rust-clippy/blob/9a203c90f6d3e25f58951d7a84b71a1afeb12cb8/tests/ui/map_unwrap_or_else_fixable.stderr</a> for an example</p>",
        "id": 214497033,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1603642113
    },
    {
        "content": "<p>I think this is something rustfix should take care of, not Clippy. Clippy doesn't have any information about comments, so we can only hack some heuristics together.</p>",
        "id": 214500765,
        "sender_full_name": "flip1995",
        "timestamp": 1603646343
    },
    {
        "content": "<p>is there an open issue for this? This is preventing me from using clippy on rustc itself :(</p>",
        "id": 214645828,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603755217
    },
    {
        "content": "<p>Not in Clippy AFAIK. There are some issues mentioning this problem for specific lints. But if you try hard enough, you can produce this problem with almost every Clippy suggestion.</p>",
        "id": 214645951,
        "sender_full_name": "flip1995",
        "timestamp": 1603755317
    },
    {
        "content": "<p>I'll open a rustfix issue, then? Is that the right place?</p>",
        "id": 214645974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603755342
    },
    {
        "content": "<p>IMO this is a rustfix problem, yes</p>",
        "id": 214646050,
        "sender_full_name": "flip1995",
        "timestamp": 1603755410
    },
    {
        "content": "<p>hmm I can't reproduce it for all suggestions</p>",
        "id": 214646608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603755973
    },
    {
        "content": "<p>like this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code> extern \"C\" {\n     fn xsave64(p: *mut u8, hi: u32, lo: u32)\n<span class=\"gd\">-        -&gt; (); // comment here</span>\n<span class=\"gi\">+        ; // comment here</span>\n }\n</code></pre></div>",
        "id": 214646615,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603755985
    },
    {
        "content": "<p><code>map_unwrap_or_else</code> isn't machine applicable so I can't test with it</p>",
        "id": 214646627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756007
    },
    {
        "content": "<p>let me remember why I wanted this in the first place <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 214646634,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756020
    },
    {
        "content": "<p>How about </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">xsave64</span><span class=\"p\">(</span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hi</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lo</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span>-&gt; <span class=\"cm\">/*comment here*/</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214646658,
        "sender_full_name": "flip1995",
        "timestamp": 1603756071
    },
    {
        "content": "<p>yup that breaks it, thanks</p>",
        "id": 214646708,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756105
    },
    {
        "content": "<p>^ With \"try hard enough\" I meant insert comments in places no sane person would put comments in reality.</p>",
        "id": 214646729,
        "sender_full_name": "flip1995",
        "timestamp": 1603756138
    },
    {
        "content": "<p>well, the place this originally showed up was sane</p>",
        "id": 214646755,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756181
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">791</span><span class=\"n\">d2686cb5</span><span class=\"o\">..</span><span class=\"n\">d1e51763a7a</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_expand</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mbe</span><span class=\"o\">/</span><span class=\"n\">macro_rules</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_expand</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mbe</span><span class=\"o\">/</span><span class=\"n\">macro_rules</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1036</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1036</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">token_can_be_followed_by_any</span><span class=\"p\">(</span><span class=\"n\">tok</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mbe</span>::<span class=\"n\">TokenTree</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"sd\">/// a fragment specifier (indeed, these fragments can be followed by</span>\n<span class=\"w\"> </span><span class=\"sd\">/// ANYTHING without fear of future compatibility hazards).</span>\n<span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">frag_can_be_followed_by_any</span><span class=\"p\">(</span><span class=\"n\">kind</span>: <span class=\"nc\">NonterminalKind</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">        </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">Item</span><span class=\"w\">           </span><span class=\"c1\">// always terminated by `}` or `;`</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"n\">matches</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">Item</span><span class=\"w\">           </span><span class=\"c1\">// always terminated by `}` or `;`</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">Block</span><span class=\"w\">        </span><span class=\"c1\">// exactly one token tree</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">Ident</span><span class=\"w\">        </span><span class=\"c1\">// exactly one token tree</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">Literal</span><span class=\"w\">      </span><span class=\"c1\">// exactly one token tree</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">Meta</span><span class=\"w\">         </span><span class=\"c1\">// exactly one token tree</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">Lifetime</span><span class=\"w\">     </span><span class=\"c1\">// exactly one token tree</span>\n<span class=\"o\">-</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">TT</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"c1\">// exactly one token tree</span>\n<span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NonterminalKind</span>::<span class=\"n\">TT</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214646765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756197
    },
    {
        "content": "<p>notice <code>// exactly one token tree</code> went missing</p>",
        "id": 214646812,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756210
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustfix/issues/190\">https://github.com/rust-lang/rustfix/issues/190</a></p>",
        "id": 214646876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756285
    },
    {
        "content": "<p>Yeah sure, there are definitely some problems, especially with suggestions over multiple lines. But fixing this on a lint by lint basis, is not a scalable solution at all.</p>",
        "id": 214646884,
        "sender_full_name": "flip1995",
        "timestamp": 1603756305
    },
    {
        "content": "<p>(clippy is not escaping my stream of issues unscathed, btw ;) <a href=\"https://github.com/rust-lang/rust-clippy/issues/6231\">https://github.com/rust-lang/rust-clippy/issues/6231</a></p>",
        "id": 214647011,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756436
    },
    {
        "content": "<p>with the end goal being I want <code>x.py clippy --fix</code> to work on rustc <a href=\"https://github.com/rust-lang/rust/pull/77351\">https://github.com/rust-lang/rust/pull/77351</a></p>",
        "id": 214647094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756478
    },
    {
        "content": "<p>it's actually really close if I pass <code>CARGOFLAGS=--lib</code></p>",
        "id": 214647110,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756494
    },
    {
        "content": "<p>I mean issues pointing out errors in suggestions are really helpful with getting <code>--fix</code> to work without much hassle. Feel free to add <code>@rustbot modify labels: +L-suggestion-causes-error</code>, so we can get an overview over the broken suggestions.</p>",
        "id": 214647277,
        "sender_full_name": "flip1995",
        "timestamp": 1603756684
    },
    {
        "content": "<p>The easy/quick and dirty (temporary) fix for these issues is to change the <code>Applicability</code> to <code>MaybyIncorrect</code>.</p>",
        "id": 214647432,
        "sender_full_name": "flip1995",
        "timestamp": 1603756811
    },
    {
        "content": "<p>the even easier fix is <code>-A clippy::while_let_on_iterator</code> haha</p>",
        "id": 214647465,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756847
    },
    {
        "content": "<p>but yes for clippy it might make sense to change the applicability temporarily</p>",
        "id": 214647495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756867
    },
    {
        "content": "<p>That's a really _temporary_ fix :D</p>",
        "id": 214647499,
        "sender_full_name": "flip1995",
        "timestamp": 1603756870
    },
    {
        "content": "<p>--fix only needs to run once ;)</p>",
        "id": 214647532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603756904
    }
]