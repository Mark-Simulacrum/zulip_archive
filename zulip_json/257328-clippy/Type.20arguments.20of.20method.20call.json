[
    {
        "content": "<p>Is there a way to get the type arguments of a method call? Example: <code>std::collections::HashMap::&lt;String&gt;::iter() -&gt; [String]</code>. I managed to resolve the def id of the method by <code>cx.typeck_results().type_dependent_def_id(method.hir_id)</code>. But I am not sure where to go from there.</p>",
        "id": 234453764,
        "sender_full_name": "boxdot",
        "timestamp": 1618385487
    },
    {
        "content": "<p>Where did you get the <code>method</code> from? I would assume from matching an expression something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ExprKind</span>::<span class=\"n\">MethodCall</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In that case it is the array in the enum variant of <code>Call</code>/<code>MethodCall</code>. See also the documentation: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html#variant.Call\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html#variant.Call</a></p>\n<p>Note that <code>HashMap::iter</code> has only one argument: <code>&amp;self</code>. In the <code>ExprKind</code> it is treated as just every other argument and the <code>args</code> array should have exactly one element.</p>",
        "id": 234456651,
        "sender_full_name": "flip1995",
        "timestamp": 1618386881
    },
    {
        "content": "<p>Yes, I got <code>method</code> exactly like that. Do I understand correctly, that from <code>&amp;self</code> I would be able to get the generic param <code>String</code>?</p>",
        "id": 234456978,
        "sender_full_name": "boxdot",
        "timestamp": 1618387060
    },
    {
        "content": "<p>Depends on what you want to do. Since <code>&amp;self</code> is also an expression, you can use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#method.expr_ty\"><code>typeck_result.expr_ty(arg)</code></a>. And then destructure that type to get the the generics/substs of the <code>HashMap</code>. </p>\n<p>Maybe it is also possible/easier to just call <code>expr_ty</code> on the <code>MethodCall</code> expression and just destructure the return type.</p>",
        "id": 234466652,
        "sender_full_name": "flip1995",
        "timestamp": 1618391695
    },
    {
        "content": "<p>I believe you can use <code>node_substs_opt</code> directly on <code>method.hir_id</code>.</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code>    fn check_expr(&amp;mut self, cx: &amp;LateContext&lt;&#39;tcx&gt;, expr: &amp;&#39;tcx Expr&lt;&#39;_&gt;) {\n        if_chain! {\n            if let ExprKind::MethodCall(..) = &amp;expr.kind;\n            if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n            if match_def_path(cx, def_id, &amp;[&quot;std&quot;, &quot;collections&quot;, &quot;hash&quot;, &quot;map&quot;, &quot;HashMap&quot;, &quot;iter&quot;]);\n            if let Some(substs) = cx.typeck_results().node_substs_opt(expr.hir_id);\n            if substs.len() &gt; 0;\n            if is_type_diagnostic_item(cx, substs.type_at(0), sym::string_type);\n            then {\n                span_lint(\n                    cx,\n                    EXAMPLE,\n                    expr.span,\n                    &quot;HashMap&lt;String, _, _&gt;.iter() found&quot;,\n                );\n            }\n        }\n    }\n</code></pre></div>\n<p>The alternative is to examine the type of the receiver (first argument) but then you'll still have to examine substs and you'll have to wonder about whether to use <code>expr_ty</code> or <code>expr_ty_adjusted</code>. There are many examples of this in the clippy source.</p>",
        "id": 234488162,
        "sender_full_name": "Michael Wright",
        "timestamp": 1618402873
    },
    {
        "content": "<p>Thank you both! This helped already a lot.</p>",
        "id": 234633098,
        "sender_full_name": "boxdot",
        "timestamp": 1618473452
    }
]