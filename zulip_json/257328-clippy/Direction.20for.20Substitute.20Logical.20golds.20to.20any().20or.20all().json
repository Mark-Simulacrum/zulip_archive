[
    {
        "content": "<p>Hi all! I'd like to try my hand at the new lint recommended for <a href=\"https://github.com/rust-lang/rust-clippy/issues/6827\">https://github.com/rust-lang/rust-clippy/issues/6827</a>. </p>\n<p>Specifically, it was noted that <code>unnecessary_fold</code> did not catch <code>&amp;</code> and <code>|</code> bitwise operators. <span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> had mentioned this should be a new lint. I want to try and tackle this over the next few days (hopefully this weekend). Would you mind elaborating slightly on your expectations for the new lint, <code>bitwise_bool</code>? Specifically, is this just copying <code>unnecessary_fold</code> and replacing logical operators with bitwise ones? What other changes would you want me to make?</p>",
        "id": 234428387,
        "sender_full_name": "Arya Kumar",
        "timestamp": 1618364354
    },
    {
        "content": "<p>It should simply detect <code>a &amp; b</code> that could be <code>a &amp;&amp; b</code>. Same with <code>|</code>. That's all. No need to predict what lints would be triggered after <code>bitwise_bool</code> is fixed.</p>",
        "id": 234432036,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1618367463
    },
    {
        "content": "<p>Oh I see, thatâ€™s much simpler than what I was expecting. Thanks for the clarification :)</p>",
        "id": 234505956,
        "sender_full_name": "Arya Kumar",
        "timestamp": 1618409832
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> I think I've written my first attempt at this lint: would you mind taking a look at it and letting me know if there's something I should change? It's PR <a href=\"https://github.com/rust-lang/rust/issues/7133\">#7133</a></p>",
        "id": 236100153,
        "sender_full_name": "Arya Kumar",
        "timestamp": 1619391478
    },
    {
        "content": "<p>Looks like you got the right idea! I was not aware of the short-circuiting difference. I think you should avoid linting if <code>rhs_operand.can_have_side_effects()</code> (on <code>Expr</code>). Also <code>style</code> would be a better category, if not pedantic.</p>",
        "id": 236103507,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619394846
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"360405\">@Cameron Steffen</span> and <span class=\"user-mention\" data-user-id=\"248599\">@llogiq</span>! Now that my semester has ended I'm revisiting the <code>bitwise_bool -&gt; needless_bitwise_bool</code> lint <a href=\"https://github.com/rust-lang/rust-clippy/pull/7133\">(link)</a> and I think the decision we settled on (see <a href=\"https://github.com/rust-lang/rust-clippy/pull/7133#issuecomment-830246268\">here</a>) may require a revision (I think the logic is too restrictive).</p>\n<p>Specifically, following Cameron's suggestion to use <code>right_side.can_have_side_effects()</code> is a big restriction (based on the code <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/src/rustc_hir/hir.rs.html#1576-1631\">here</a>. One example is that const functions and BinOps are always marked as having side effects.</p>\n<p>For example, under the proposed logic the lint would match on <code>x &amp; !y</code> since <code>!y</code> is a UnOp with no side effects, but would not match on <code>y &amp; const_returns_true()</code>. I believe that the opposite behavior would be desired, but I'm not quite sure how to craft this / I don't have a clear set of examples of cases we would want to lint on.</p>",
        "id": 238350379,
        "sender_full_name": "Arya Kumar",
        "timestamp": 1620753864
    },
    {
        "content": "<p><code>can_have_side_effects</code> may not be perfect. But any flaws it has can be fixed over time and multiple lints will benefit. So I think it's okay to lean on that method. But if you want to go further, we could introduce <code>clippy_utils::expr_can_have_side_effects(cx, expr)</code> which can be smarter. For example, we can type check <code>!x</code> and know there are no side effects if <code>x</code> is <code>bool</code>.</p>",
        "id": 238362279,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1620758601
    },
    {
        "content": "<p>That makes sense, I can go ahead and lean on it. With <code>can_have_side_effects</code> in its current form, it does already mark <code>!x</code> as having no side effects. I'm having a little trouble coming up with good test cases, but I suppose they can be improved as and when <code>can_have_side_effects</code> is improved.</p>\n<p>I don't feel quite equipped to handle a custom <code>clippy_utils::expr_can_have_side_effects(cx, expr)</code> just yet- I'm still pretty new to rust, and this project :)</p>",
        "id": 238363090,
        "sender_full_name": "Arya Kumar",
        "timestamp": 1620758964
    }
]