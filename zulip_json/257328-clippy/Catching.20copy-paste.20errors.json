[
    {
        "content": "<p>Is there a reasonable way that clippy could catch copy-paste issues like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Treat all files as text, disabling binary attributes and detection.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_text</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">DiffOptions</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"n\">raw</span>::<span class=\"n\">GIT_DIFF_FORCE_TEXT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Treat all files as binary, disabling text diffs</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">force_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">DiffOptions</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"n\">raw</span>::<span class=\"n\">GIT_DIFF_FORCE_TEXT</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">force</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223843422,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532543
    },
    {
        "content": "<p>There's a pile of surrounding functions that all look the same, setting a flag based on a bool argument.</p>",
        "id": 223843469,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532569
    },
    {
        "content": "<p>The issue here is that <code>force_binary</code> passed the wrong flag.</p>",
        "id": 223843471,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611532575
    },
    {
        "content": "<p>Two suggestions of lints from <a href=\"#narrow/stream/122651-general/topic/catching.20copy-paste.20errors\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/catching.20copy-paste.20errors</a>:</p>\n<blockquote>\n<p>Maybe there could be a clippy lint for two (or more) functions with the same arguments, return type, and body, but different names.</p>\n</blockquote>\n<blockquote>\n<p>I can imagine catching this due to identical non-trivial function bodies with different names and doc comments, or due to force_binary not following the pattern...</p>\n</blockquote>",
        "id": 223844077,
        "sender_full_name": "Noah Lev",
        "timestamp": 1611533244
    },
    {
        "content": "<p>There aren't any inter-function lints in Clippy. This kind of check may be considered as a global analysis, which Clippy does not do (yet). But in a local scope, like an impl block, such a lint would be possible.</p>\n<p>Clippy already has the infrastructure to compare blocks/expressions for spanless equality, so the lint could be implemented like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">impl_items</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ItemKind</span>::<span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">fns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">groups</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">group_by_signature</span><span class=\"p\">(</span><span class=\"n\">fns</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">any_same_bodies</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// lint</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The question is if this is a big performance hit for big impl blocks. Checking for equal signatures/bodies is a combinatorially complex problem.</p>",
        "id": 223879278,
        "sender_full_name": "flip1995",
        "timestamp": 1611571158
    },
    {
        "content": "<p>Yeah we already have copy paste lints for match arms. This might be expensive to do for impl blocks, unsure, probably fine if we group by signature but there can be pathological cases</p>",
        "id": 223976042,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1611616122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/257328-clippy/topic/Catching.20copy-paste.20errors/near/223976042\">said</a>:</p>\n<blockquote>\n<p>Yeah we already have copy paste lints for match arms. This might be expensive to do for impl blocks, unsure, probably fine if we group by signature but there can be pathological cases</p>\n</blockquote>\n<p>I'd be happy to see it even if it were limited to functions of a few lines at most.</p>",
        "id": 224115239,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611700730
    },
    {
        "content": "<p>Would have sufficed for this case.</p>",
        "id": 224115247,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1611700737
    }
]