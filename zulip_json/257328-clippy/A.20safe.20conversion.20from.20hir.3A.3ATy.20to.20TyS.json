[
    {
        "content": "<p>I tried to implement a safe conversion from <code>hir::Ty</code> to <code>TyS</code> <a href=\"https://github.com/Y-Nak/rust-clippy/blob/8b8b0a94b05f7189d028d91deda659ed266ef09d/clippy_lints/src/default_numeric_fallback.rs#L54-L76\">here</a>.<br>\nThe problem here is that we have to use <code>node_type_opt</code>, ideally <code>node_type</code> should be used instead of <code>node_type_opt</code>, but <code>node_type</code> causes ICE when the arguments are types that appear in a nested fn signature like below.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// ICE because `TypeckResults` of inner def id doesn't contain types that appear in its signature.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"sd\">/// This is OK because a closure shares `TypeckResults` with the outer function.</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"mi\">13</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is because <code>TypeckResults</code> doesn't contain types in its signature as I wrote in the above example.<br>\nLeaving aside a cache problem, I also tried to rewrite <code>ty_from_hir_ty</code> like below , but this also caused ICE because of <code>hir_owner</code> mismatch.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">ty_from_hir_ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">LateContext</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hir_ty</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">hir</span>::<span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">body_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">enclosing_body_opt</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hir_ty</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">typeck_body</span><span class=\"p\">(</span><span class=\"n\">body_id</span><span class=\"p\">).</span><span class=\"n\">node_type</span><span class=\"p\">(</span><span class=\"n\">hir_ty</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">hir_ty_to_ty</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hir_ty</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In order to resolve this problem, I suppose it may be the easiest way to make <code>TypeCkResults</code> contain signature types.<br>\nI'm fairly new to Rust internal so any advice would be very much appreciated.</p>",
        "id": 225405509,
        "sender_full_name": "Yoshitomo Nakanishi",
        "timestamp": 1612610709
    },
    {
        "content": "<p>I also don't know how to convert a <code>hir::Ty</code> to a <code>ty::Ty</code>. Those conversions seem so fragile, that we shouldn't try implementing workarounds in Clippy, but rather make it possible in rustc to get a <code>ty::Ty</code> from a <code>hir::Ty</code>.</p>",
        "id": 225409673,
        "sender_full_name": "flip1995",
        "timestamp": 1612614613
    },
    {
        "content": "<p>Yeah,  I completely agree with you. I'll open an issue to enable the safe conversion in <code>rust</code>.</p>",
        "id": 225410797,
        "sender_full_name": "Yoshitomo Nakanishi",
        "timestamp": 1612616421
    },
    {
        "content": "<p>I posted an <a href=\"https://internals.rust-lang.org/t/provide-safe-conversion-from-hir-ty-to-tys/14000\">article</a> to user forum, just as a reference.</p>",
        "id": 225465471,
        "sender_full_name": "Yoshitomo Nakanishi",
        "timestamp": 1612706664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275569\">@Yoshitomo Nakanishi</span> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/fn.hir_ty_to_ty.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/fn.hir_ty_to_ty.html</a></p>",
        "id": 225565676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612800381
    },
    {
        "content": "<blockquote>\n<p>A quasi-deprecated helper used in rustdoc and clippy to get the type from a HIR node.</p>\n</blockquote>\n<p>Nice ^^</p>",
        "id": 225565771,
        "sender_full_name": "xFrednet",
        "timestamp": 1612800426
    },
    {
        "content": "<p>In other words, this works, but don't complain if it doesn't.</p>",
        "id": 225566062,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1612800538
    },
    {
        "content": "<p>I think it will remain working for a long time from how I know Rust. I just love how honest and direct the documentation is often <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span><br>\nAnd also the fact that there are such helper functions :)</p>",
        "id": 225566314,
        "sender_full_name": "xFrednet",
        "timestamp": 1612800633
    },
    {
        "content": "<p>since clippy is in-tree, if it's ever changed the person removing it will have to fix clippy at the same time</p>",
        "id": 225567674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612801148
    },
    {
        "content": "<p>so I wouldn't worry about it</p>",
        "id": 225567693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612801154
    },
    {
        "content": "<p>Also eddyb told us to use it. See <a href=\"https://github.com/rust-lang/rust-clippy/pull/5434#issue-400474851\">https://github.com/rust-lang/rust-clippy/pull/5434#issue-400474851</a></p>",
        "id": 225612756,
        "sender_full_name": "Michael Wright",
        "timestamp": 1612820501
    },
    {
        "content": "<p>As a preface: I didn't complain about it, just want to improve reliability and usability.</p>\n<p>Again, I don't think <code>hir_ty_to_ty</code> can be used inside a body, because it causes ICE whenever passed<code>hir::Ty::Kind</code> includes <code>TyKiind::Infer</code>,  please refer to <a href=\"https://github.com/rust-lang/rust-clippy/issues/6179\">here</a> as a reference. <br>\nAnd also I think <code>TypeckResults::node_type</code> can't be used in some special situations, see the <a href=\"https://internals.rust-lang.org/t/provide-safe-conversion-from-hir-ty-to-tys/14000\">post</a> for details.</p>",
        "id": 225638083,
        "sender_full_name": "Yoshitomo Nakanishi",
        "timestamp": 1612837270
    },
    {
        "content": "<p>maybe you need to call <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.resolve_vars_if_possible\"><code>resolve_vars_if_possible</code></a>?</p>",
        "id": 225641060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612840466
    },
    {
        "content": "<p>Thanks for the information! I'll see it later.</p>",
        "id": 225641566,
        "sender_full_name": "Yoshitomo Nakanishi",
        "timestamp": 1612841077
    },
    {
        "content": "<p>or possibly <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.fully_resolve\"><code>fully_resolve</code></a></p>",
        "id": 225641664,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612841166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/257328-clippy/topic/A.20safe.20conversion.20from.20hir.3A.3ATy.20to.20TyS/near/225565676\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/fn.hir_ty_to_ty.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/fn.hir_ty_to_ty.html</a></p>\n</blockquote>\n<p>Yes this function exists, but it just ICEs unpredictably. For example, <a href=\"https://github.com/rust-lang/rust-clippy/issues/6179\">clippy#6179</a> fixing the <code>use_self</code> lint is being worked on since April 2020, because of the problem of trying to convert a <code>hir::Ty</code> to a <code>ty::Ty</code>. If you think, you fixed it, it will ICE in some other case, which you then can try to debug/reproduce again for a few hours.</p>\n<p>I will try <code>fully_resolve</code> and hope that it helps somehow.</p>",
        "id": 225661056,
        "sender_full_name": "flip1995",
        "timestamp": 1612861901
    },
    {
        "content": "<p><code>fully_resolve</code> seems not to work for this purpose because </p>\n<ol>\n<li><code>hir::Ty</code> doesn't implement <code>TypeFoldable</code></li>\n<li><code>HirId</code> implement <code>TypeFoldable</code>but this is a trivial implementation. See <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/macros.rs.html#51-80\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/macros.rs.html#51-80</a> as a reference.</li>\n</ol>",
        "id": 226087647,
        "sender_full_name": "Yoshitomo Nakanishi",
        "timestamp": 1613098114
    }
]