[
    {
        "content": "<p>Currently, our msrv test mostly amounts to \"nothing lints at msrv=1.0.0\". I have an idea for testing msrv more thoroughly. Suppose a typical lint UI test file starts like this.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// test-clippy-msrv</span>\n<span class=\"cp\">#![clippy::msrv = </span><span class=\"s\">\"1.47.0\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Our test framework would see <code>// test-clippy-msrv</code> and run the UI test a second time. For the second run, any <code>clippy::msrv</code> attribute will be decremented. For this example, this attribute would become <code>#![clippy::msrv=\"1.46.99\"]</code>. And then we simply assert that there are no warnings (stderr is empty). Now we have tested \"at msrv has no effect\" and \"just below msrv disables the lint\". The attribute in the test file nicely matches the msrv of the lint. Thoughts?</p>",
        "id": 236199904,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619452752
    },
    {
        "content": "<p>Wouldn't it be easier to just add the same test twice with different MSRVs? We already do this for some lints. </p>\n<p>Also, I don't think we need to test for every lint the edge case that it still lints when the MSRV exactly matches. This is rather a test that MSRV works in general than a test that an MSRV exists for a lint.</p>\n<p>I'd rather not patch something Clippy specific in our version of compiletest, as long as the goal is to reuse <code>rustc</code>'s  compiletest sometime in the future.</p>",
        "id": 236202251,
        "sender_full_name": "flip1995",
        "timestamp": 1619453717
    },
    {
        "content": "<p>I can see how verifying \"above and below\" msrv for every lint is maybe just not very valuable.</p>",
        "id": 236205655,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619455204
    },
    {
        "content": "<p>I'm a little concerned about lints where the msrv is dynamic. For instance, <code>Option::map_or_else</code> and <code>Result::map_or_else</code> have different MSRV. I just noticed that <code>map_unwrap_or</code> lint does not handle this perfectly.</p>",
        "id": 236205845,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619455305
    },
    {
        "content": "<p>Actually maybe the lint is fine, but it seems like that could be tested better. Similar scenario with <code>Iterator::copied</code> and <code>Option::copied</code>.</p>",
        "id": 236206016,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619455386
    },
    {
        "content": "<p>When a lint has 2 MSRVs for different cases, we could handle this like the <code>needless_question_mark</code> lint: <a href=\"https://github.com/rust-lang/rust-clippy/blob/919a1a40fe4ec1118eece46b1f4c03c311ab8cda/tests/ui/needless_question_mark.fixed#L99-L169\">Tests</a>; <a href=\"https://github.com/rust-lang/rust-clippy/blob/aecccbc579c0092e609f47fabc4d5fb6dbe110d0/clippy_lints/src/needless_question_mark.rs#L66-L67\">Code</a></p>\n<p>In this case testing all of the MSRV cases might be worth it. But I don't think we have to do this for every lint.</p>",
        "id": 236210875,
        "sender_full_name": "flip1995",
        "timestamp": 1619457430
    },
    {
        "content": "<p>That looks good</p>",
        "id": 236213895,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619458599
    },
    {
        "content": "<p>Why does that lint need msrv?</p>",
        "id": 236214571,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619458869
    },
    {
        "content": "<p>msrv should be based on suggestions, not what the lint detects, right?</p>",
        "id": 236214645,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619458911
    },
    {
        "content": "<p>Oh yeah, you're right. It can only trigger if the <code>?</code> is used. So it can only trigger if it already meets the MSRV.  Good catch!</p>",
        "id": 236214869,
        "sender_full_name": "flip1995",
        "timestamp": 1619458996
    },
    {
        "content": "<p>One more thought on msrv. I think we should name msrv consts after the rust feature that is used the suggestion, rather than after the lint name.</p>",
        "id": 236215074,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619459080
    },
    {
        "content": "<p>Along with that, maybe we could put all those in one mod, and they would be essentially decoupled from lints.</p>",
        "id": 236215203,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619459131
    },
    {
        "content": "<p>Makes sense, this would allow us to reuse those constants. We may also be able to define them in one place, rather than spreading them across  files.</p>",
        "id": 236215271,
        "sender_full_name": "flip1995",
        "timestamp": 1619459159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360405\">Cameron Steffen</span> <a href=\"#narrow/stream/257328-clippy/topic/Better.20MSRV.20testing.20idea/near/236215203\">said</a>:</p>\n<blockquote>\n<p>Along with that, maybe we could put all those in one mod, and they would be essentially decoupled from lints.</p>\n</blockquote>\n<p>Good idea <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 236215380,
        "sender_full_name": "flip1995",
        "timestamp": 1619459176
    },
    {
        "content": "<p>Ya. For example, <code>meets_msrv(msrv, RESULT_MAP_OR_ELSE_MSRV)</code></p>",
        "id": 236215484,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619459206
    },
    {
        "content": "<p>Or <code>msrvs::RESULT_MAP_OR_ELSE</code></p>",
        "id": 236215526,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619459222
    },
    {
        "content": "<p><code>msrvs::RESULT_MAP_OR_ELSE</code> I like this, since it's consistent with the <code>paths</code> module and how we use paths.</p>",
        "id": 236215647,
        "sender_full_name": "flip1995",
        "timestamp": 1619459276
    },
    {
        "content": "<p>Or <code>msrv!(Result::map_or_else)</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 236215897,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619459378
    },
    {
        "content": "<p>(not really)</p>",
        "id": 236216076,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619459437
    },
    {
        "content": "<p>Oh yeah, let's define a proc macro, that fetches the Rust compiler during compilation time, figures out when the relevant feature was added and inserts the MSRV const automatically. Maybe we'd have to implement a Rust frontend inside the proc macro, but this should be fine, since it'll be easier to define MSRV constants in the future. /s <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 236216225,
        "sender_full_name": "flip1995",
        "timestamp": 1619459518
    },
    {
        "content": "<p>You lost me at \"fetches the Rust compiler during compilation time\" lol</p>",
        "id": 236216422,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619459599
    },
    {
        "content": "<p>Done <a href=\"https://github.com/rust-lang/rust-clippy/issues/7137\">rust-lang/rust-clippy#7137</a></p>",
        "id": 236229000,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1619464867
    }
]