[
    {
        "content": "<p>How do I bless Clippy tests in-tree? I tried <code>./x.py test src/tools/clippy --bless</code>, but that didn't work, and neither did <code>tests/ui/update-all-references.sh</code>.</p>",
        "id": 217343877,
        "sender_full_name": "Noah Lev",
        "timestamp": 1605827782
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span></p>",
        "id": 217343933,
        "sender_full_name": "Noah Lev",
        "timestamp": 1605827849
    },
    {
        "content": "<p>running the clippy tests via ./x.py test src/tools/clippy and then running tests/ui/update-all-references.sh from the clippy repo root dir does not work?</p>",
        "id": 217345757,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1605829228
    },
    {
        "content": "<p>There's no tooling for this (yet). You will have to do this by hand. The problem is, that clippy people are not really interested in tooling in the rust compiler and in the rust compiler this is not something that should happen very often. Test changes usually come with feature changes and those should be done in the clippy repo (with exceptions).</p>\n<p>So no one has put time into this...</p>",
        "id": 217345779,
        "sender_full_name": "flip1995",
        "timestamp": 1605829249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> probably not, because compiletest output is saved in another dir in the rustc test suite, than in the clippy test suite. And the script hardcoded these paths IIRC</p>",
        "id": 217345937,
        "sender_full_name": "flip1995",
        "timestamp": 1605829366
    },
    {
        "content": "<p>Hmm, maybe I could <code>cp</code> the files somehow? Hopefully I won't end up having to hand-update all of these tests...</p>",
        "id": 217345980,
        "sender_full_name": "Noah Lev",
        "timestamp": 1605829404
    },
    {
        "content": "<p>ooooh ok</p>",
        "id": 217345985,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1605829408
    },
    {
        "content": "<p>You can try to grep the clippy source for <code>RUSTC_TEST</code>. There should be some code checking for this var and then setting the output dir depending on it.</p>",
        "id": 217346153,
        "sender_full_name": "flip1995",
        "timestamp": 1605829529
    },
    {
        "content": "<p>It should, I imagine, be possible to use the clippy repo either separately or within the rustc repo directly, configuring it's compiler toolchain like +stage2 or so.</p>",
        "id": 217346154,
        "sender_full_name": "simulacrum",
        "timestamp": 1605829530
    },
    {
        "content": "<p>(in the worst case)</p>",
        "id": 217346165,
        "sender_full_name": "simulacrum",
        "timestamp": 1605829537
    },
    {
        "content": "<p>I would like to see this work with x.py, I just personally am unlikely to find time to do so in the short to medium term.</p>",
        "id": 217346190,
        "sender_full_name": "simulacrum",
        "timestamp": 1605829557
    }
]