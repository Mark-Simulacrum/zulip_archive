[
    {
        "content": "<p>I'm wondering how clippy tests the output of cargo using <code>compiletest</code>. I looked at <a href=\"https://github.com/rust-lang/rust-clippy/blob/5f746a1c2ae130ef84704c941b962075af6693ac/tests/compile-test.rs#L160\"><code>run_ui_cargo</code> in <code>compile-test.rs</code></a> but I can't find anything that tells <code>compiletest</code> to run <code>cargo</code> instead of just the clippy driver. The code seems to directly run the clippy driver on the <code>src/main.rs</code> of the test crates, but by doing so I would expect that the dependencies are not compiled. What am I missing? We would like to reuse the same mechanism to test <a href=\"https://github.com/viperproject/prusti-dev\"><code>cargo prusti</code></a> and I guess that in general other cargo commands could do the same.</p>",
        "id": 241400078,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622731308
    },
    {
        "content": "<p>note that whatever the mechanism is, it's buggy: <a href=\"https://github.com/rust-lang/rust/issues/76495#issuecomment-852827386\">https://github.com/rust-lang/rust/issues/76495#issuecomment-852827386</a></p>",
        "id": 241401483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622731839
    },
    {
        "content": "<p>I would look at how the in-tree compiletest does it instead</p>",
        "id": 241401524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622731857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/257328-clippy/topic/Testing.20cargo.20clippy/near/241401483\">said</a>:</p>\n<blockquote>\n<p>note that whatever the mechanism is, it's buggy: <a href=\"https://github.com/rust-lang/rust/issues/76495#issuecomment-852827386\">https://github.com/rust-lang/rust/issues/76495#issuecomment-852827386</a></p>\n</blockquote>\n<p>Uh, thanks for pointing that out. Maybe <code>rustwide</code> is still the best way to test cargo commands.</p>",
        "id": 241402953,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622732402
    },
    {
        "content": "<p>rustwide is for sandboxing. I'm not sure how it's related here.</p>",
        "id": 241404593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622732980
    },
    {
        "content": "<p>what's wrong with in-tree compiletest?</p>",
        "id": 241404646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622733002
    },
    {
        "content": "<p>It might be an overkill, but rustwide would allow to run a command in an environment with a fresh target folder, which seems related to the issue that you linked.</p>",
        "id": 241406959,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622733910
    },
    {
        "content": "<p>Is the in-tree compiletest exposed as a library, usable from crates that are not in-tree?</p>",
        "id": 241407028,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622733946
    },
    {
        "content": "<p>One more limitation of the in-tree compiletest is that the <code>CompileFail</code> mode has been removed, while <code>compiletest_rs</code> still supports it. The <code>//~ ERROR</code> syntax is very useful to annotate test cases in our tool.</p>",
        "id": 241408201,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622734408
    },
    {
        "content": "<p>Anyway, I'm still wondering how clippy manages to check cargo's output using compiletest (even if it's buggy).</p>",
        "id": 241408851,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622734671
    },
    {
        "content": "<p>The in-tree cargotest looks interesting, but it doesn't check for expected errors.</p>",
        "id": 241409212,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622734804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116427\">Federico Poli</span> <a href=\"#narrow/stream/257328-clippy/topic/Testing.20cargo.20clippy/near/241406959\">said</a>:</p>\n<blockquote>\n<p>It might be an overkill, but rustwide would allow to run a command in an environment with a fresh target folder, which seems related to the issue that you linked.</p>\n</blockquote>\n<p>at that point it would be simpler to just fix the bug in compiletest</p>",
        "id": 241410249,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622735265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116427\">Federico Poli</span> <a href=\"#narrow/stream/257328-clippy/topic/Testing.20cargo.20clippy/near/241408201\">said</a>:</p>\n<blockquote>\n<p>One more limitation of the in-tree compiletest is that the <code>CompileFail</code> mode has been removed, while <code>compiletest_rs</code> still supports it. The <code>//~ ERROR</code> syntax is very useful to annotate test cases in our tool.</p>\n</blockquote>\n<p>I don't understand what you mean. Rust-lang/rust has tons of tests with ERROR annotations.</p>",
        "id": 241410324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622735287
    },
    {
        "content": "<p>Thanks for pointing that out. I thought that <code>CompileFail</code> was the only mode checking for ERROR annotations.</p>",
        "id": 241413095,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622736511
    },
    {
        "content": "<p>Indeed, by looking at the implementation of <a href=\"https://github.com/Manishearth/compiletest-rs/blob/37f4f9cd409cac902bf99c99e467b855a1187326/src/runtest.rs#L2291\"><code>run_ui_test</code></a> <code>compiletest_rs</code> does not check ERROR annotations for UI tests, but the compiletest in rust-lang/rust <a href=\"https://github.com/rust-lang/rust/blob/835150e70288535bc57bb624792229b9dc94991d/src/tools/compiletest/src/runtest.rs#L3394\">does</a>. That's why I was confused.</p>",
        "id": 241414412,
        "sender_full_name": "Federico Poli",
        "timestamp": 1622737072
    },
    {
        "content": "<p>The answer to my initial question is that the <code>run_ui_cargo</code> test doesn't actually run <code>cargo</code>. It runs <code>rustc</code> with some special flags to handle dependencies, faking a <code>cargo</code> run. See <a href=\"https://github.com/rust-lang/rust-clippy/blob/f7d09b45e9dbb32c5524d5f3b0838401c848bbf2/tests/compile-test.rs#L79-L84\">here</a>.</p>",
        "id": 242182933,
        "sender_full_name": "Federico Poli",
        "timestamp": 1623319088
    }
]