[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/122652-new-members/topic/compiler.202022/near/273210386\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"373570\">Jaic1</span> one good way to get into compiler work is via writing lints. There are several unsoundness issues that we could write lints for. If that sounds like something you'd like to do, we can start brainstorming in <a class=\"stream\" data-stream-id=\"257328\" href=\"/#narrow/stream/257328-clippy\">#clippy</a>  which bug to start with and how to best go about it.</p>\n</blockquote>\n<p>I am trying to write some lints in clippy for <a href=\"https://github.com/rust-lang/rust/issues?page=1&amp;q=is%3Aopen+is%3Aissue+label%3AI-unsound\">I-unsound</a> issues in rustc. After skimming some issues, I find two issues that might be suitable (other recommendation?) :</p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rust/issues/70022\">Statics don't support alignments larger than the page size</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/88901\">A Lifetime-generic Copy impl can allow fields which are only Copy when 'static</a></li>\n</ol>",
        "id": 276462560,
        "sender_full_name": "Jaic1",
        "timestamp": 1648121867
    },
    {
        "content": "<p>FYI, below are my summary of the two issues:</p>\n<ol>\n<li>It is an issue that is relevant to type alignment and statics. Specifically, if the program has a static whose type alignment is larger than the page size (typically 4KB), then the type alignment cannot be fulfilled, which is considered to be unsound. Writing a lint for this issue seems straightforward.</li>\n<li>It is an issue that is relevant to lifetime, Copy impl and specialization. Specifically, say, we have a wrapper type Bar: <code>struct Bar&lt;'lt&gt;(Foo&lt;'lt&gt;);</code> and a lifetime-generic Copy impl for Bar: <code>impl&lt;'any&gt; Copy for Bar&lt;'any&gt; {}</code>. At this time, the borrow checker would require that <code>Foo&lt;'lt&gt;</code> should be Copy over all lifetime parameter, but a specialized Copy impl with static lifetime for Foo: <code>impl Copy for Foo&lt;'static&gt; {}</code> can mistakenly fulfill the requirement.</li>\n</ol>",
        "id": 276462674,
        "sender_full_name": "Jaic1",
        "timestamp": 1648121921
    },
    {
        "content": "<p>Besides these two, does anyone have other recommendation?<br>\nBy the way, I am not sure how large the scope of (unsound) problem that clippy can help is.</p>",
        "id": 276462699,
        "sender_full_name": "Jaic1",
        "timestamp": 1648121945
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"373570\">@Jaic1</span>,</p>\n<p>from the given description, it sounds like 1. should be simple to detect. However, I'm not sure how the page size for the targeted platform can be determined and what the lint should suggest (if anything). If you figure this out, it should be a nice and simple lint. Otherwise, you can take a look at our <a href=\"https://github.com/rust-lang/rust-clippy/labels/good-first-issue\">good-first-issues</a>. (I don't know any nice <code>good-first-issues</code> from the top of my head :)) You're also always welcome to ask for help or mentoring :).</p>\n<blockquote>\n<p>By the way, I am not sure how large the scope of (unsound) problem that clippy can help is.</p>\n</blockquote>\n<p>Clippy directly interfaces with rustc, while we can't change the code, we can warn the user of mistakes.</p>",
        "id": 276468101,
        "sender_full_name": "xFrednet",
        "timestamp": 1648125195
    },
    {
        "content": "<p>One possible solution for the page size would be to make it configurable with a default of 4KB.</p>\n<p>As for the second issue, this seems like something that should be fixed in rustc directly rather than a Clippy lint.</p>",
        "id": 276472693,
        "sender_full_name": "flip1995",
        "timestamp": 1648127303
    },
    {
        "content": "<p>yea, the second example needs to be fixed in rustc. The hard part is figuring out how to detect it, so doing it in clippy first has little advantages</p>",
        "id": 276491269,
        "sender_full_name": "oli",
        "timestamp": 1648135332
    },
    {
        "content": "<p>UPDATE: I open up a PR for the first unsound issue above, here's the <a href=\"https://github.com/rust-lang/rust-clippy/pull/8593\">pointer</a> (in case someone is interested in it)</p>",
        "id": 276819873,
        "sender_full_name": "Jaic1",
        "timestamp": 1648433516
    },
    {
        "content": "<p>Hi, I have a question about debugging HIR. (Don't know if it is appropriate to ask here.)</p>\n<p>If there is a better way to beautify the output of a HIR node during debugging? Currently I am using <code>println!(\"{:?}\", hir_node)</code>.<br>\nThanks!</p>",
        "id": 276974604,
        "sender_full_name": "Jaic1",
        "timestamp": 1648543602
    },
    {
        "content": "<p>I sometimes use <code>println!(\"{:#?}\", node)</code>, that makes the output slightly better but not perfect. I would also be interested if someone else has a nicer solution :)</p>",
        "id": 276975090,
        "sender_full_name": "xFrednet",
        "timestamp": 1648543893
    },
    {
        "content": "<p>And I reduce it to the smallest node. You can also ask this question over in <code>t-compiler/help</code> to get some more input :)</p>",
        "id": 276975245,
        "sender_full_name": "xFrednet",
        "timestamp": 1648543975
    },
    {
        "content": "<p>Oh, I forgot the <code>#</code> there. It is now much better!</p>",
        "id": 276976141,
        "sender_full_name": "Jaic1",
        "timestamp": 1648544498
    },
    {
        "content": "<p>Just using <code>dbg!(node)</code> should also give you nice output, including Clippy src line information from what <code>dbg!</code> macro that output originated.</p>",
        "id": 276981626,
        "sender_full_name": "flip1995",
        "timestamp": 1648547821
    },
    {
        "content": "<p>Hey, guys. If I have an <code>item</code> (whose <code>ItemKind</code> is known to be among struct, enum and union) in hir, how do I get its <code>hir_ty</code> (which should be a <code>Path</code>), or more precisely can I make a trivial/fake <code>hir_ty</code> for this <code>item</code>.</p>",
        "id": 277369234,
        "sender_full_name": "Jaic1",
        "timestamp": 1648786569
    },
    {
        "content": "<p>Do you need a hir ty? Or would just calling <code>tcx.type_of(def_id)</code> also give you the info you need?</p>",
        "id": 277383204,
        "sender_full_name": "oli",
        "timestamp": 1648800977
    },
    {
        "content": "<p>Yeah, I want a hir ty.</p>",
        "id": 277389654,
        "sender_full_name": "Jaic1",
        "timestamp": 1648804677
    },
    {
        "content": "<p>What are you using it for? Is some function expecting you to pass it one?</p>",
        "id": 277392314,
        "sender_full_name": "oli",
        "timestamp": 1648806242
    },
    {
        "content": "<p>I am doing a recursion myself. The inputs of the recursion are a mir ty and a hir ty which are related. Inside the recursion, I am destructing the mir ty and hir ty at the same time. But sometimes hir tys with generics cannot follow the destruction of mir, so I choose to fall back to use the mir ty (known to be an adt) to query the hir ty (of the definition of that adt) that is needed for a deeper recursion. And currently I can only use the mir ty to get the relevant hir item.</p>",
        "id": 277396158,
        "sender_full_name": "Jaic1",
        "timestamp": 1648808424
    },
    {
        "content": "<p>Hmm... in that case, couldn't you extract out the part where you process Path into a separate function and call it directly instead of building a path and then calling the general function that just takes the path apart again?</p>",
        "id": 277397165,
        "sender_full_name": "oli",
        "timestamp": 1648809037
    },
    {
        "content": "<p>Sounds feasible, maybe I should extend the hir ty input of the general function or extract another (possibly recursive) function.</p>",
        "id": 277398611,
        "sender_full_name": "Jaic1",
        "timestamp": 1648809986
    }
]