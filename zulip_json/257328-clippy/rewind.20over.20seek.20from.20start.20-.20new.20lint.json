[
    {
        "content": "<p>Hello! I'm pretty new to Rust and this is is my first time trying to contribute to clippy. I'm trying to understand what I have to do for <a href=\"https://github.com/rust-lang/rust-clippy/issues/8600\">this new lint</a> and I have a few questions. </p>\n<p>I figured out I'll break down this lint into three problems:</p>\n<ol>\n<li>Check that the type implements the <code>std::io::Seek</code> trait.</li>\n<li>Check that the function being called is <code>seek()</code>.</li>\n<li>Check if the argument of <code>seek</code> is <code>std::io::SeekFrom::Start(0)</code>.</li>\n</ol>\n<p>Now to my questions, I'm still trying to figure out how everything works so sorry if these are dumb questions:</p>\n<ol>\n<li>Does my approach make sense? I'm still not sure on how I'll do each step but just knowing I'm in the right track will help me know what to look for.</li>\n<li>Does this need to be a <code>LateLintPass</code> lint? I imagine it has to be since we need to some information on types.</li>\n<li>I couldn't find any other similar lint but does anybody know of a similar lint I could look at for inspiration?</li>\n</ol>\n<p>I will probably have more questions in a near future but  I'm excited to learn more Rust so thanks for any help!</p>",
        "id": 277484505,
        "sender_full_name": "Daniel RB",
        "timestamp": 1648851066
    },
    {
        "content": "<p>You will want to combine steps 1 and 2 and make sure the function is Seek::seek as implemented for that type. Otherwise you will accidentally lint when a type has both an inherent <code>seek</code> method and implements Seek.</p>",
        "id": 277485309,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648851681
    },
    {
        "content": "<p>The lint on atomic functions is sort of related, let me find a link</p>",
        "id": 277485344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648851715
    },
    {
        "content": "<p>Cool thanks, that makes sense</p>",
        "id": 277485476,
        "sender_full_name": "Daniel RB",
        "timestamp": 1648851781
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/84039/files#diff-7b162caf96f4886d206bcbace379df34e22230599c8920968b8dd50dc0d3ee4cR1434\">https://github.com/rust-lang/rust/pull/84039/files#diff-7b162caf96f4886d206bcbace379df34e22230599c8920968b8dd50dc0d3ee4cR1434</a></p>",
        "id": 277485552,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648851831
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"490599\">@Daniel RB</span>, welcome to Clippy.</p>\n<p>You can also take a look at <a href=\"https://github.com/rust-lang/rust-clippy/tree/master/clippy_lints/src/methods\"><code>clippy_lints::methods</code></a> module to first match with the function name and then start the type and argument checking. That lint pass uses a <code>LateLintPass</code> since we need type information, that was a correct assumption <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 277485697,
        "sender_full_name": "xFrednet",
        "timestamp": 1648851901
    },
    {
        "content": "<p>Thanks guys! This is all very helpful</p>",
        "id": 277485803,
        "sender_full_name": "Daniel RB",
        "timestamp": 1648851973
    },
    {
        "content": "<p><code>useless_asref</code> would be a pretty similar one to look at</p>",
        "id": 277485814,
        "sender_full_name": "Alex Macleod",
        "timestamp": 1648851985
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once\"><code>manual_split_once</code></a> might be a similar lint, as it checks for a function with a specific argument. Or <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#repeat_once\"><code>repeat_once</code></a>.</p>",
        "id": 277485822,
        "sender_full_name": "xFrednet",
        "timestamp": 1648851995
    }
]