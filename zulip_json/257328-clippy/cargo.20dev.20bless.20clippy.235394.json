[
    {
        "content": "<p>I'm currently a bit stuck here, mostly because running/compiling <code>cargo dev bless</code> doesn't seem to set <code>OUT_DIR</code> at all. According to cargo docs, the presence of a <code>build.rs</code>file sets it automatically, but that doesn't seem to happen and it's not set</p>",
        "id": 221405317,
        "sender_full_name": "Phil H",
        "timestamp": 1609603306
    },
    {
        "content": "<p>Just 'rambling' along here, while I'm working on it, not specifically asking for help for now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 221405361,
        "sender_full_name": "Phil H",
        "timestamp": 1609603353
    },
    {
        "content": "<p>I suspect, once I manage to have <code>OUT_DIR</code> set by cargo, it will still point to a different directory, than the <code>OUT_DIR</code> value for the clippy ui tests</p>",
        "id": 221405392,
        "sender_full_name": "Phil H",
        "timestamp": 1609603404
    },
    {
        "content": "<p>Just an idea: maybe <code>OUT_DIR</code> is only set during testing and therefore it isn't set when running <code>cargo dev bless</code>?</p>",
        "id": 221405442,
        "sender_full_name": "flip1995",
        "timestamp": 1609603470
    },
    {
        "content": "<p>So <code>x.py</code> sets the <code>OUT_DIR</code> var during testing.</p>",
        "id": 221405518,
        "sender_full_name": "flip1995",
        "timestamp": 1609603563
    },
    {
        "content": "<p>ohh</p>",
        "id": 221405521,
        "sender_full_name": "Phil H",
        "timestamp": 1609603571
    },
    {
        "content": "<p>I somehow missed that! Thanks, I will take a look</p>",
        "id": 221405525,
        "sender_full_name": "Phil H",
        "timestamp": 1609603585
    },
    {
        "content": "<p>That's just a guess though. Haven't looked it up.</p>",
        "id": 221405529,
        "sender_full_name": "flip1995",
        "timestamp": 1609603594
    },
    {
        "content": "<p>Ok, the <code>OUT_DIR</code> for <code>clippy_dev</code> is indeed different from the <code>OUT_DIR</code> of the tests</p>",
        "id": 221416457,
        "sender_full_name": "Phil H",
        "timestamp": 1609620172
    },
    {
        "content": "<p>I see three options now:</p>\n<ol>\n<li>Use something other than the OUT_DIR</li>\n<li>Traverse up ~2 directories from OUT_DIR and create our own fake OUT_DIR to put the test results in</li>\n<li>Maybe turning Clippy into a workspace fixes it? But that might break other things <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></li>\n</ol>",
        "id": 221416815,
        "sender_full_name": "Phil H",
        "timestamp": 1609620805
    },
    {
        "content": "<p>I will try 2) tomorrow, it seems like the easiest way, even though it might be a bit hacky.<br>\nMy current <code>OUT_DIR</code> for <code>clippy_dev</code> in rustc is:<br>\n<code>/code/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/build/clippy_dev-039e5097828718a7/out</code><br>\nso traversing up 2 directories and creating our own might work</p>",
        "id": 221416899,
        "sender_full_name": "Phil H",
        "timestamp": 1609620928
    },
    {
        "content": "<p>Another option would be to add bless support to our compiletest version, so we wouldn't have to maintain our own bless support in <code>clippy_dev</code> - in retrospect I probably should have done that instead <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span><br>\nI opened an issue in compiletest-rs: <a href=\"https://github.com/laumann/compiletest-rs/issues/228\">https://github.com/laumann/compiletest-rs/issues/228</a></p>",
        "id": 221417241,
        "sender_full_name": "Phil H",
        "timestamp": 1609621441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197894\">Philipp Hansch</span> <a href=\"#narrow/stream/257328-clippy/topic/cargo.20dev.20bless.20clippy.235394/near/221417241\">said</a>:</p>\n<blockquote>\n<p>Another option would be to add bless support to our compiletest version</p>\n</blockquote>\n<p>Related to this, I think it would be interesting for us to have <code>compiletest</code> bundled in <code>rustc-dev</code> if that's possible as <code>compiletest-rs</code> seems to be unmaintained. IIRC an attempt to extract it from the rustc repo as an external crate in <a href=\"http://crates.io\">crates.io</a> failed, and I would say that path is less relevant now that <code>trybuild</code> exists.</p>\n<p>For us though, <code>trybuild</code> lacks some features (rustfix, header commands, not running <code>pass</code> files,  <code>check-pass</code> support, to name a few). I'm not sure if it would make sense to try to implement them since the crate tries to be minimalist by design.</p>\n<p>Integration with cargo is the most interesting feature <code>trybuild</code> would have for us, so that would remain unaddressed if we stick with compiletest. </p>\n<p>Anyway, does this proposal make sense? Sorry for hijacking the thread but I've been thinking about this for a while and had to spit it out <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221425353,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1609633937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"279272\">@Eduardo Broto</span> why use it precompiled instead of a git dependency on rust-lang/rust? That wouldn't need support from the intra team</p>",
        "id": 221425998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609635232
    },
    {
        "content": "<p>The hard part is turning it into a library instead of a binary, but you'd have to do that anyway</p>",
        "id": 221426044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609635295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/257328-clippy/topic/cargo.20dev.20bless.20clippy.235394/near/221425998\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"279272\">Eduardo Broto</span> why use it precompiled instead of a git dependency on rust-lang/rust? That wouldn't need support from the intra team</p>\n</blockquote>\n<p>Oh, I didn't know you can pick a specific workspace member as a git dependency instead of the full repo. That could be an option although IIUC the in-tree version of Clippy would also fetch a full copy of rust-lang/rust, which seems a bit overkill at first sight.</p>",
        "id": 221426711,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1609636496
    },
    {
        "content": "<p>Well, it wouldn't have to fetch llvm which should speed it up a lot</p>",
        "id": 221427651,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609638115
    },
    {
        "content": "<p>But yeah it would be good to check how big .git is for rust-lang/rust itself</p>",
        "id": 221427693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609638133
    },
    {
        "content": "<p>a clone downloads 575 mb of data<br>\nafter extraction, the .git dir is 616 mb<br>\nbut there's a lot of badly compressed/unneeded crap in there, if you recompress, you end up with only  260 mb in your .git<br>\n(so cloning could actually be almost twice as fast but github does not care)</p>",
        "id": 221431296,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1609644809
    },
    {
        "content": "<p>is there a way to tell github 'get rid of unreachable commits'?</p>",
        "id": 221431356,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609644943
    },
    {
        "content": "<p>delete the repo and re-push? /s<br>\nI'm not sure :/</p>",
        "id": 221431431,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1609645080
    },
    {
        "content": "<p><a href=\"https://twitter.com/githubhelp/status/387926738161774592?lang=es\">https://twitter.com/githubhelp/status/387926738161774592?lang=es</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/githubhelp/status/387926738161774592?lang=es\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/818913837034278913/E5R-Rwjp_normal.jpg\"></a><p><a href=\"https://twitter.com/pstadler\">@pstadler</a> We run `git gc` at most once per day, triggered automatically by a push.</p><span>- GitHub Support (@GitHubHelp)</span></div></div>",
        "id": 221431625,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1609645426
    },
    {
        "content": "<p>but even regular <code>git gc</code>s leave a lot to be desired if you don't recompress the repo from scratch from time to time ...</p>",
        "id": 221431673,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1609645494
    },
    {
        "content": "<p>Yeah, eventually we should just depend on the same compiletest version as rustc <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 221440792,
        "sender_full_name": "Phil H",
        "timestamp": 1609662431
    },
    {
        "content": "<p>Oh, I never heard about <code>trybuild</code> until now, that's interesting!</p>",
        "id": 221440797,
        "sender_full_name": "Phil H",
        "timestamp": 1609662453
    },
    {
        "content": "<p>But yeah, <code>trybuild</code> is lacking a lot of features we currently use (edition support, \"aux_build\", not running tests on specific architechtures, etc)</p>",
        "id": 221440940,
        "sender_full_name": "Phil H",
        "timestamp": 1609662715
    }
]