[
    {
        "content": "<p>Do we have someone with <code>no_std</code> experience that could review the reasoning behind a change to our <code>empty_loop</code> lint? <a href=\"https://github.com/rust-lang/rust-clippy/pull/6162\">https://github.com/rust-lang/rust-clippy/pull/6162</a> The impl looks good to me, I just don't have any <code>no_std</code> experience to decide whether it makes sense or not.</p>",
        "id": 213042749,
        "sender_full_name": "Phil H",
        "timestamp": 1602511649
    },
    {
        "content": "<p>This looks good to me. But the message should be split up into the error message and the help message (<code>span_lint_and_help</code>).</p>",
        "id": 213043739,
        "sender_full_name": "flip1995",
        "timestamp": 1602512161
    },
    {
        "content": "<p>I'm sorry if I'm being totally obvious here, but from what I've seen it's really common that embedded applications end main with <code>loop {}</code> to prevent the main thread from exiting, while interrupt handlers do all the work. Since I don't know of any other way to do it, it must be idiomatic. It must be pretty awkward if clippy lints on an empty loop like that.</p>",
        "id": 213085965,
        "sender_full_name": "Henri Lunnikivi",
        "timestamp": 1602536397
    },
    {
        "content": "<p>maybe a better check would be if the function returns <code>!</code> and only lint when it doesn't return the never type?</p>",
        "id": 213086263,
        "sender_full_name": "flip1995",
        "timestamp": 1602536583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254983\">Henri Lunnikivi</span> <a href=\"#narrow/stream/257328-clippy/topic/Anyone.20with.20no_std.20experience.3F/near/213085965\">said</a>:</p>\n<blockquote>\n<p>I'm sorry if I'm being totally obvious here, but from what I've seen it's really common that embedded applications end main with <code>loop {}</code> to prevent the main thread from exiting, while interrupt handlers do all the work. Since I don't know of any other way to do it, it must be idiomatic. It must be pretty awkward if clippy lints on an empty loop like that.</p>\n</blockquote>\n<p>well that's exactly the reason for the lint</p>",
        "id": 213086999,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602537098
    },
    {
        "content": "<p>currently, LLVM mis-compiles that and thinks it's UB</p>",
        "id": 213087003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602537105
    },
    {
        "content": "<p>changing not to lint on <code>loop {}</code> defeats the whole point</p>",
        "id": 213087023,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602537118
    },
    {
        "content": "<p>Yep I think Clippy should lint also in <code>no_std</code>, and add a note to the documentation. I would not change the suggestions. <code>no_std</code> users can disable the lint if they understand the consequences.</p>",
        "id": 213087130,
        "sender_full_name": "Eduardo Broto",
        "timestamp": 1602537206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254983\">Henri Lunnikivi</span> <a href=\"#narrow/stream/257328-clippy/topic/Anyone.20with.20no_std.20experience.3F/near/213085965\">said</a>:</p>\n<blockquote>\n<p>I'm sorry if I'm being totally obvious here, but from what I've seen it's really common that embedded applications end main with <code>loop {}</code> to prevent the main thread from exiting, while interrupt handlers do all the work. Since I don't know of any other way to do it, it must be idiomatic. It must be pretty awkward if clippy lints on an empty loop like that.</p>\n</blockquote>\n<p>To be fair, embedded systems, depending on the requirements can also sleep in an empty loop to conserve power (Some MCUs even have a sleep on exit bit so they can chose not to return to main at all). At any rate, placing a nop or whatever doesn't hurt at all, but a miscompilation kinda does <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213088164,
        "sender_full_name": "DÃ¡niel Buga",
        "timestamp": 1602538022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254983\">Henri Lunnikivi</span> <a href=\"#narrow/stream/257328-clippy/topic/Anyone.20with.20no_std.20experience.3F/near/213085965\">said</a>:</p>\n<blockquote>\n<p>I'm sorry if I'm being totally obvious here, but from what I've seen it's really common that embedded applications end main with <code>loop {}</code> to prevent the main thread from exiting, while interrupt handlers do all the work. Since I don't know of any other way to do it, it must be idiomatic. It must be pretty awkward if clippy lints on an empty loop like that.</p>\n</blockquote>\n<p>That's exactly the problem. This is UB and can change anytime, IMO Clippy could warn (and error in the future) by default with message like \"empty loops are Undefined Behaviour\".</p>",
        "id": 213120655,
        "sender_full_name": "mati865",
        "timestamp": 1602575028
    },
    {
        "content": "<p>well, I think we should distinguish between 'undefined behavior' and 'miscompilation'</p>",
        "id": 213154608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602596191
    },
    {
        "content": "<p>according to the rust language spec, <code>loop {}</code> is perfectly defined</p>",
        "id": 213154625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602596202
    },
    {
        "content": "<p>it's just miscompiled in practice</p>",
        "id": 213154636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602596207
    },
    {
        "content": "<p>Isn't produced IR considered as UB by LLVM?</p>",
        "id": 213217812,
        "sender_full_name": "mati865",
        "timestamp": 1602623670
    },
    {
        "content": "<p>UB is a language concept</p>",
        "id": 213217852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602623696
    },
    {
        "content": "<p>LLVM might <em>produce</em> LLVM IR that has <code>poison</code> or other invalid LLVM semantics, but it can't change what the rust spec says</p>",
        "id": 213217888,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602623720
    },
    {
        "content": "<p>That's actually not how the UCG approaches the subject. UB as declared by Rust and UB as declared by LLVM are treated as separate issues.</p>",
        "id": 213234766,
        "sender_full_name": "Lokathor",
        "timestamp": 1602635822
    },
    {
        "content": "<p>Particularly, because we want to have a non-llvm based rust some day, but we also currently inherit all of llvm's ub rules into rust</p>",
        "id": 213234784,
        "sender_full_name": "Lokathor",
        "timestamp": 1602635859
    }
]