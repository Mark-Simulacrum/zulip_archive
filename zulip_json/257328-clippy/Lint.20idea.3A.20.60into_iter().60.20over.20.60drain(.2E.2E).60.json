[
    {
        "content": "<p>I saw this today in a code review, where someone used <code>vec.drain(..).map(...).other_iterator_methods()</code> to transform the vec into an owned iterator.  In this case, using <code>into_iter()</code> is definitely the idiomatic thing to do. Now I wonder if there are cases where using <code>drain(..)</code> over <code>into_iter()</code>  makes sense. The <a href=\"https://doc.rust-lang.org/std/vec/struct.Drain.html\"><code>Drain</code></a> struct provides the same methods/trait impls as the <a href=\"https://doc.rust-lang.org/std/vec/struct.IntoIter.html\"><code>IntoIter</code></a> struct, so you shouldn't get into trouble that a method called after <code>drain(..)</code> isn't available anymore.</p>\n<p>The only thing that should be checked is if <code>vec</code> is used after <code>vec.drain(..)</code>. That's the only case where using <code>drain(..)</code> over <code>into_iter()</code> makes sense to me.</p>\n<p>What do you think? Should we add a <code>style</code> (?) lint for this? If so, I'd be happy to implement it.</p>",
        "id": 242575066,
        "sender_full_name": "flip1995",
        "timestamp": 1623664787
    },
    {
        "content": "<p>They should be equivalent as long as the full range is used by <code>drain(..)</code>. The only difference could be the drop order, as <code>drain(..)</code> is <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\">documented</a> to only remove the elements from the vec once the <code>Drain</code> struct is dropped, while <code>IntoIter</code> has no comment in that regard. However, the vector can not be used while it's being mutably borrowed anyways so that shouldn't matter. So <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> from me <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 242620431,
        "sender_full_name": "xFrednet",
        "timestamp": 1623686612
    }
]