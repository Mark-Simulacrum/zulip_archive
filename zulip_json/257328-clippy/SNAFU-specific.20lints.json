[
    {
        "content": "<p>I chimed in on <a href=\"https://github.com/rust-lang/rust-clippy/issues/6872\">Feature request: custom library-specific lints</a> too, but assuming that the answer was just \"yeah, put it in Clippy\"...</p>\n<p>SNAFU takes an enum like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">String</span> <span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and generates the struct (along with some trait implementations)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">BarSnafu</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'd like to lint that usages of <code>BarSnafu</code> should not allocate in the struct literal (the <code>into</code> bound is called conditionally, so allocating always is wasteful). </p>\n<p>How could I go about poking at Clippy to add such a lint?</p>",
        "id": 246266916,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626463130
    },
    {
        "content": "<p>cc <a href=\"https://internals.rust-lang.org/t/proposal-stabilizable-proc-macro-based-lints/15022/\">https://internals.rust-lang.org/t/proposal-stabilizable-proc-macro-based-lints/15022/</a></p>",
        "id": 246275443,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626467881
    },
    {
        "content": "<p>That's not particularly relevant to the question of how I would implement this specific lint in Clippy though.</p>",
        "id": 246278363,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626469305
    },
    {
        "content": "<p>You have to find an argument for the lint, so that it is generally applicable and not just for one crate. There is the <a href=\"https://github.com/trailofbits/dylint\">dylint</a> project, if you want to implement crate specific lints.</p>",
        "id": 246309936,
        "sender_full_name": "flip1995",
        "timestamp": 1626505660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> you might want to ensure all project contributors agree on that and have a unified message:</p>\n<blockquote>\n<p>In general we have no qualms about crate specific lints (see e.g. the regex lints).</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust-clippy/issues/6872#issuecomment-793442677\">https://github.com/rust-lang/rust-clippy/issues/6872#issuecomment-793442677</a></p>",
        "id": 246328957,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626534226
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#what-lints-belong-in-clippy\">https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#what-lints-belong-in-clippy</a></p>\n<p>This was already defined. The TL;DR and relevant part for this discussion are these points:</p>\n<blockquote>\n<p>Main category lints need to be something the community has general agreement on</p>\n</blockquote>\n<blockquote>\n<p>Generally, if a lint is triggered, this should be useful to most Rust programmers</p>\n</blockquote>\n<blockquote>\n<p>Lints which are \"pedantic\" should still roughly fall into one of the main categories</p>\n</blockquote>\n<blockquote>\n<p>Similar rules for \"nursery\" except their reason for being allow by default is lack of maturity</p>\n</blockquote>\n<blockquote>\n<p>\"restriction\" lints follow all the rules for semantic changes, but do not bother with the rules for the lint being useful to most rust programmers</p>\n</blockquote>\n<p>So you could argue that crate specific lints could go in <code>restriction</code>, but until now we interpreted that restriction group definition as \"Rust code that is generally ok, but may be problematic in some specific crates\". Not as \"only problematic in <strong>one</strong> crate\".</p>",
        "id": 246329419,
        "sender_full_name": "flip1995",
        "timestamp": 1626534952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264664\">@flip1995</span> I’m not saying what path clippy should choose. I’m saying that one of your team members is encouraging crate-specific lints, stating that clippy would accept them. It’s not a good idea to have one member saying something that the rest of the team disagrees with.</p>",
        "id": 246343237,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626554883
    },
    {
        "content": "<blockquote>\n<p>only problematic in <strong>one</strong> crate</p>\n</blockquote>\n<p>To be clear, I’m looking for a way to provide lints for all users of SNAFU. Depending on how you want to interpret that, it’s not a problem “in one crate”. </p>\n<p>Another way of saying it is that I’d like to provide lints for the <em>public api</em> of my crate, which by definition affects more than one crate.</p>",
        "id": 246343379,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1626555134
    },
    {
        "content": "<p>Having not read most of this conversation, I don't think clippy should be accepting crate-specific lints. Given that any change in the compiler internals could require changes to a lint, permitting crate-specific lints could plausibly lead to clippy as a whole becoming unmaintainable in the long-term.</p>",
        "id": 246348302,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626562212
    },
    {
        "content": "<p>It's a tough situation because there is no good, or at least standardized, solution for crate-specific lints. I agree its not tenable for Clippy to accepts lints for any crate. My perception is that Clippy has a few crate-specific lints only for crates that are ubiquitous, like regex.</p>",
        "id": 246350290,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1626565744
    },
    {
        "content": "<p>That's where I'm looking into what it would take to create crate-specific lints. That's an aside from this topic though.</p>",
        "id": 246350400,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626565955
    }
]