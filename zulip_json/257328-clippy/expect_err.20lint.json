[
    {
        "content": "<p>Hi everyone, I am trying to create a lint for <a href=\"https://github.com/rust-lang/rust-clippy/issues/1435\">https://github.com/rust-lang/rust-clippy/issues/1435</a><br>\nI am stuck at one part where I currently have this code : </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_ast</span>::<span class=\"n\">ast</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_lint</span>::<span class=\"p\">{</span><span class=\"n\">EarlyContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EarlyLintPass</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_session</span>::<span class=\"p\">{</span><span class=\"n\">declare_lint_pass</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">declare_tool_lint</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">clippy_utils</span>::<span class=\"n\">diagnostics</span>::<span class=\"n\">span_lint_and_help</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_span</span>::<span class=\"n\">Span</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_ast</span>::<span class=\"n\">visit</span>::<span class=\"n\">FnKind</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_span</span>::<span class=\"n\">symbol</span>::<span class=\"n\">Ident</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">declare_clippy_lint</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// ### What it does</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ### Why is this bad?</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ### Example</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```rust</span>\n<span class=\"w\">    </span><span class=\"sd\">/// // example code where clippy issues a warning</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Use instead:</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```rust</span>\n<span class=\"w\">    </span><span class=\"sd\">/// // example code which does not raise clippy warning</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">    </span><span class=\"cp\">#[clippy::version = </span><span class=\"s\">\"1.61.0\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">EXPECT_ERR</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pedantic</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"default lint description\"</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">declare_lint_pass</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ExpectErr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">EXPECT_ERR</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">EarlyLintPass</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ExpectErr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check_stmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">EarlyContext</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stmt</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Stmt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Expr</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Semi</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">ExprKind</span>::<span class=\"n\">MethodCall</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but I am not sure how to match a .err().expect() Method call from the params argument I have</p>",
        "id": 276926842,
        "sender_full_name": "infrandomness",
        "timestamp": 1648499167
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"459607\">@infrandomness</span>, welcome to the project. The ticket you've linked checks for specific method calls on specific types. This requires a <code>LateLintPass</code> that enables type checking. In general, it is helpful to take another lint as an example on how it could be structured. In this case, I would take the <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\"><code>clippy::ok_expect</code></a> lint. The implementation can be found under <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/methods/ok_expect.rs\"><code>\nrust-clippy/clippy_lints/src/methods/ok_expect.rs </code></a></p>",
        "id": 276932356,
        "sender_full_name": "xFrednet",
        "timestamp": 1648502103
    },
    {
        "content": "<p>The linked implementation is being called from <a href=\"https://github.com/rust-lang/rust-clippy/blob/6206086dd5a83477131094b1f0ef61b10e7ced42/clippy_lints/src/methods/mod.rs#L2429-L2432\"><code>clippy_lints::methods</code></a> You should be able to add your lint call in a similar manner :)</p>",
        "id": 276932552,
        "sender_full_name": "xFrednet",
        "timestamp": 1648502189
    },
    {
        "content": "<p>Clippy has combined most methods lint into the <code>clippy_lints::methods</code> module, sadly we don't have good documentation for how this can be done yet. <a href=\"https://github.com/rust-lang/rust-clippy/issues/8561\">clippy#8561</a> is a lint that also checked for two function calls on a certain type, it might be a good example how a lint can be added to that module</p>",
        "id": 276932751,
        "sender_full_name": "xFrednet",
        "timestamp": 1648502294
    },
    {
        "content": "<p>What often helped me to understand the AST structure was to just add <code>println!(\"{:#?}\", expr)</code> to the code. You get a lot of output, but it really helps to see the general structure and to understand how everything is represented :)</p>",
        "id": 276932945,
        "sender_full_name": "xFrednet",
        "timestamp": 1648502403
    },
    {
        "content": "<p>For print debugging it's good to just have a small test file btw.</p>",
        "id": 276933000,
        "sender_full_name": "xFrednet",
        "timestamp": 1648502444
    },
    {
        "content": "<p>If you have more questions feel free to ask or create a PR.</p>",
        "id": 276933078,
        "sender_full_name": "xFrednet",
        "timestamp": 1648502496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/276933078\">said</a>:</p>\n<blockquote>\n<p>If you have more questions feel free to ask or create a PR.</p>\n</blockquote>\n<p>I don't quite understand how they are able to check if ok(), is called on a Result type</p>",
        "id": 277017893,
        "sender_full_name": "infrandomness",
        "timestamp": 1648566023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459607\">infrandomness</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/277017893\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/276933078\">said</a>:</p>\n<blockquote>\n<p>If you have more questions feel free to ask or create a PR.</p>\n</blockquote>\n<p>I don't quite understand how they are able to check if ok(), is called on a Result type</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_type_diagnostic_item</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">expr_ty</span><span class=\"p\">(</span><span class=\"n\">recv</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sym</span>::<span class=\"nb\">Result</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">typeck_results</span><span class=\"p\">().</span><span class=\"n\">expr_ty</span><span class=\"p\">(</span><span class=\"n\">recv</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">error_type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_error_type</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">has_debug_impl</span><span class=\"p\">(</span><span class=\"n\">error_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I see that the first line checks about Result, but then I don't really get it</p>\n</blockquote>",
        "id": 277017961,
        "sender_full_name": "infrandomness",
        "timestamp": 1648566044
    },
    {
        "content": "<p>The method names are checked inside the linked <a href=\"https://github.com/rust-lang/rust-clippy/blob/6206086dd5a83477131094b1f0ef61b10e7ced42/clippy_lints/src/methods/mod.rs#L2429-L2432\">clippy_lints::methods</a> module. The link should directly highlight the section :)</p>",
        "id": 277018419,
        "sender_full_name": "xFrednet",
        "timestamp": 1648566217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/277018419\">said</a>:</p>\n<blockquote>\n<p>The method names are checked inside the linked <a href=\"https://github.com/rust-lang/rust-clippy/blob/6206086dd5a83477131094b1f0ef61b10e7ced42/clippy_lints/src/methods/mod.rs#L2429-L2432\">clippy_lints::methods</a> module. The link should directly highlight the section :)</p>\n</blockquote>\n<p>gotcha</p>",
        "id": 277035995,
        "sender_full_name": "infrandomness",
        "timestamp": 1648573423
    },
    {
        "content": "<p>my lint works, now, but I think my test needs some work; I don't really understand how tests work in this context<br>\nthis is my test atm : </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Testing expect_err\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"err\">```</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">fails</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">clippy</span><span class=\"w\"> </span><span class=\"n\">calls</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"></span>\n</code></pre></div>\n<p>error: Called <code>.err().expect()</code> on a <code>Result</code> value<br>\n  --&gt; $DIR/expect_err.rs:3:5<br>\n   |<br>\nLL |     x.err().expect(\"Testing expect_err\"); <br>\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<br>\n   |<br>\n   = note: <code>-D clippy::expect-err</code> implied by <code>-D warnings</code><br>\n   = help: <code>.expect_err()</code> can be called instead</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">there</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">way</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">tell</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">happens</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">succeed</span><span class=\"o\">?</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277036742,
        "sender_full_name": "infrandomness",
        "timestamp": 1648573728
    },
    {
        "content": "<p>Try <code>cargo dev bless</code></p>",
        "id": 277037564,
        "sender_full_name": "xFrednet",
        "timestamp": 1648574100
    },
    {
        "content": "<p>The it should create a <code>.stderr</code> file with the output. The test afterwards test if the error output is equal with the content of the <code>stderr</code> file :)</p>",
        "id": 277037637,
        "sender_full_name": "xFrednet",
        "timestamp": 1648574136
    },
    {
        "content": "<p>Err, I think I have made an oopsie</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">compile_test</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">stderr</span>:\n\n <span class=\"nc\">error</span>: <span class=\"nc\">Called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">expect_err</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Testing expect_err\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Testing expect_err\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">clippy</span>::<span class=\"n\">expect</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">implied</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">warnings</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"err\">`</span><span class=\"p\">.</span><span class=\"n\">expect_err</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"n\">instead</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<p>my .stderr and test file :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">Called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">expect_err</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Testing expect_err\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">clippy</span>::<span class=\"n\">expect</span><span class=\"o\">-</span><span class=\"n\">err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">implied</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">warnings</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"err\">`</span><span class=\"p\">.</span><span class=\"n\">expect_err</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"n\">instead</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">().</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Testing expect_err\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277038907,
        "sender_full_name": "infrandomness",
        "timestamp": 1648574668
    },
    {
        "content": "<p>You can always just rerun <code>cargo dev bless</code> (beforehand you have to run <code>cargo uitest</code>). That will update your <code>.stderr</code> file to have the latest output</p>",
        "id": 277040824,
        "sender_full_name": "xFrednet",
        "timestamp": 1648575502
    },
    {
        "content": "<p>Does that fix the problem, or did I misunderstand you? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 277040912,
        "sender_full_name": "xFrednet",
        "timestamp": 1648575544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/277040912\">said</a>:</p>\n<blockquote>\n<p>Does that fix the problem, or did I misunderstand you? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>fixed :D</p>",
        "id": 277041373,
        "sender_full_name": "infrandomness",
        "timestamp": 1648575785
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/pull/8606\">https://github.com/rust-lang/rust-clippy/pull/8606</a></p>",
        "id": 277043415,
        "sender_full_name": "infrandomness",
        "timestamp": 1648576742
    },
    {
        "content": "<p>I believe I have fixed all of the reviews</p>",
        "id": 277514818,
        "sender_full_name": "infrandomness",
        "timestamp": 1648887243
    },
    {
        "content": "<p>I have fixed all the reviews again</p>",
        "id": 277664829,
        "sender_full_name": "infrandomness",
        "timestamp": 1649025019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459607\">infrandomness</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/277664829\">said</a>:</p>\n<blockquote>\n<p>I have fixed all the reviews again</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"369415\">@xFrednet</span> ?<br>\n<span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 277711943,
        "sender_full_name": "infrandomness",
        "timestamp": 1649068707
    },
    {
        "content": "<p>Hey @infrandomness, I've seen your message and your ping on GH. It can sometimes take some time until you get a review as everyone is only doing this in their spare time. It was not my intention to ignore you, and I'm sorry if it seamed that way. I have some other PRs that were updated before your last change, then your PR is next up. You should have a review by Thursday. It that alright with you? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 277714960,
        "sender_full_name": "xFrednet",
        "timestamp": 1649070638
    },
    {
        "content": "<p>Sure ! Sorry about that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 277715195,
        "sender_full_name": "infrandomness",
        "timestamp": 1649070775
    },
    {
        "content": "<p>No problem, I know how it can be to wait for a review. ^^</p>",
        "id": 277715457,
        "sender_full_name": "xFrednet",
        "timestamp": 1649070957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/277715457\">said</a>:</p>\n<blockquote>\n<p>No problem, I know how it can be to wait for a review. ^^</p>\n</blockquote>\n<p>I have a picked another lint while waiting for that one to get a review <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 277716925,
        "sender_full_name": "infrandomness",
        "timestamp": 1649071854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459607\">infrandomness</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/277716925\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/277715457\">said</a>:</p>\n<blockquote>\n<p>No problem, I know how it can be to wait for a review. ^^</p>\n</blockquote>\n<p>I have a picked another lint while waiting for that one to get a review <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>I had a question about my code that only now I understood</p>\n<p>fn check() does not seem to exist in <a href=\"https://github.com/rust-lang/rust-clippy/blob/d647696c1f167802c9bb9ffe2c98459b152d563c/clippy_lints/src/functions/mod.rs#L244\">https://github.com/rust-lang/rust-clippy/blob/d647696c1f167802c9bb9ffe2c98459b152d563c/clippy_lints/src/functions/mod.rs#L244</a><br>\nso, how does my lint work ? how is check() getting called</p>",
        "id": 278065858,
        "sender_full_name": "infrandomness",
        "timestamp": 1649269387
    },
    {
        "content": "<p>You have to manually add the lint pass in <code>clippy_lints/lib.rs</code></p>",
        "id": 278066113,
        "sender_full_name": "xFrednet",
        "timestamp": 1649269507
    },
    {
        "content": "<p>Somewhere around <a href=\"https://github.com/rust-lang/rust-clippy/blob/409a936f3b65db06bf0a9d167afcdc7bfafad47f/clippy_lints/src/lib.rs#L544\">here</a></p>",
        "id": 278066189,
        "sender_full_name": "xFrednet",
        "timestamp": 1649269553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/278066113\">said</a>:</p>\n<blockquote>\n<p>You have to manually add the lint pass in <code>clippy_lints/lib.rs</code></p>\n</blockquote>\n<p>oh yeah I remember now xD, somehow forgot<br>\nhad an amazing time working with you guys <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 278066194,
        "sender_full_name": "infrandomness",
        "timestamp": 1649269557
    },
    {
        "content": "<p>The lint passes are then called by rustc <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 278066291,
        "sender_full_name": "xFrednet",
        "timestamp": 1649269591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459607\">infrandomness</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/278066194\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"369415\">xFrednet</span> <a href=\"#narrow/stream/257328-clippy/topic/expect_err.20lint/near/278066113\">said</a>:</p>\n<blockquote>\n<p>You have to manually add the lint pass in <code>clippy_lints/lib.rs</code></p>\n</blockquote>\n<p>oh yeah I remember now xD, somehow forgot<br>\nhad an amazing time working with you guys <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>You're welcome, I also often forget to add my lint pass xD.</p>",
        "id": 278066374,
        "sender_full_name": "xFrednet",
        "timestamp": 1649269629
    }
]