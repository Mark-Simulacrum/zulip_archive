[
    {
        "content": "<p>Question: Can the <code>horizontal_xxx()</code> functions be traits?  <code>Add</code>,  <code>Mul</code>, and friends are very useful for writing generic simd functions, and having <code>horizontal_xxx()</code> would also be useful.  Use case: <a href=\"https://gist.github.com/goertzenator/9a47f2d1636a4724bf7d8038b5883a34\">https://gist.github.com/goertzenator/9a47f2d1636a4724bf7d8038b5883a34</a></p>",
        "id": 269770227,
        "sender_full_name": "Daniel Goertzen",
        "timestamp": 1643390585
    },
    {
        "content": "<p>That is an excellent question to which I believe no one has offered an answer firmly for or against.</p>",
        "id": 269970344,
        "sender_full_name": "Jubilee",
        "timestamp": 1643592637
    },
    {
        "content": "<p>Even if we don't end up putting them in traits for whatever reason, I certainly imagine a crate could/should</p>",
        "id": 269970382,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1643592714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"474881\">Daniel Goertzen</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/horizontal.20traits/near/269770227\">said</a>:</p>\n<blockquote>\n<p>[...] are very useful for writing generic simd functions</p>\n</blockquote>\n<p>Note that traits for <code>min</code> and <code>sqrt</code> and such would also be useful for generic scalar code, but <code>core</code> doesn't have them.  So it's not obvious to me that traits for horizontal stuff would be accepted.</p>\n<p>That gives me an idea, though: Should <code>Simd</code> be <code>IntoIterator</code>, in such a way that it specializes some of the methods (like <code>sum</code> to <code>horizontal_sum</code>)?</p>",
        "id": 269972538,
        "sender_full_name": "scottmcm",
        "timestamp": 1643595486
    },
    {
        "content": "<p>I guess iterator isn't quite the right thing, since the specialization would only work well so long as it hasn't been advanced.</p>",
        "id": 269972565,
        "sender_full_name": "scottmcm",
        "timestamp": 1643595550
    },
    {
        "content": "<p>It's also not quite obvious how that would work. What happens if you turn it into an iterator, call <code>next</code>, and then sum it?</p>",
        "id": 269973075,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1643596205
    },
    {
        "content": "<p>Mask with the relevant identity?</p>",
        "id": 269977176,
        "sender_full_name": "Jubilee",
        "timestamp": 1643601404
    },
    {
        "content": "<blockquote>\n<p>Note that traits for min and sqrt and such would also be useful for generic scalar code, but core doesn't have them.</p>\n</blockquote>\n<p>Sounds like <code>core</code> should do that already.</p>",
        "id": 269980535,
        "sender_full_name": "Lokathor",
        "timestamp": 1643605432
    },
    {
        "content": "<p>I think it would be hard to design. Certainly I don't think it should be one trait per operation...</p>",
        "id": 269980965,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643605956
    },
    {
        "content": "<p>Rust stdlib does not do this for primitive types (e.g. i32, f32) - there is <code>num_traits</code> for this. If alignment with the rest of std is to be achieved, such traits should live in a separate crate?</p>",
        "id": 270873141,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1644128433
    },
    {
        "content": "<p>Apparently there has been some discussion about including something like <code>num_traits</code> in std, but in that case I think it would be best to coordinate that between scalars and simd types</p>",
        "id": 270873172,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1644128517
    }
]