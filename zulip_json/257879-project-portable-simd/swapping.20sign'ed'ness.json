[
    {
        "content": "<p>I thought that I'd seen some issues/PRs about being able to change signed integers to unsigned integers (and the reverse), but now I can't seem to see a method for this.</p>",
        "id": 265102709,
        "sender_full_name": "Lokathor",
        "timestamp": 1639619399
    },
    {
        "content": "<p>still blocked on a PR to rust-lang/rust to change the LLVM intrinsic which no one has made yet.</p>",
        "id": 265102964,
        "sender_full_name": "Jubilee",
        "timestamp": 1639619613
    },
    {
        "content": "<p>ah, can't it just be a transmute_copy?</p>",
        "id": 265104742,
        "sender_full_name": "Lokathor",
        "timestamp": 1639621427
    },
    {
        "content": "<p>What is it supposed to do with the sign bit?</p>",
        "id": 265104950,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639621627
    },
    {
        "content": "<p>Just a bitcast?</p>",
        "id": 265104975,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639621668
    },
    {
        "content": "<p>yeah same as i32 and u32 conversions</p>",
        "id": 265105743,
        "sender_full_name": "Lokathor",
        "timestamp": 1639622556
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/Lokathor/float_math/blob/main/src/lib.rs#L82-L110\">https://github.com/Lokathor/float_math/blob/main/src/lib.rs#L82-L110</a>&gt;</p>",
        "id": 265106284,
        "sender_full_name": "Lokathor",
        "timestamp": 1639623128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/swapping.20sign'ed'ness/near/265104742\">said</a>:</p>\n<blockquote>\n<p>ah, can't it just be a transmute_copy?</p>\n</blockquote>\n<p>oh that's true.</p>",
        "id": 265106513,
        "sender_full_name": "Jubilee",
        "timestamp": 1639623386
    },
    {
        "content": "<blockquote>\n<p>wow this simd stuff is sure unergonomic </p>\n</blockquote>\n<p><em>owned</em></p>",
        "id": 265106810,
        "sender_full_name": "Jubilee",
        "timestamp": 1639623653
    },
    {
        "content": "<p>well I blame const generics</p>",
        "id": 265106906,
        "sender_full_name": "Lokathor",
        "timestamp": 1639623736
    },
    {
        "content": "<p>you can't put <code>type Signed = Simd::&lt;i32, N&gt;;</code> inside a function def and then type <code>Signed::splat</code></p>",
        "id": 265106940,
        "sender_full_name": "Lokathor",
        "timestamp": 1639623769
    },
    {
        "content": "<p>because the <code>N</code> from the outer scopey thing doesn't go inside the function somehow</p>",
        "id": 265106959,
        "sender_full_name": "Lokathor",
        "timestamp": 1639623789
    },
    {
        "content": "<p>presumably the same is the case of types? or is this a bug in const generics <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 265106996,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1639623839
    },
    {
        "content": "<p>You could do <code>type Signed = i32</code>, though, and be able to use <code>N</code> directly in the function signature</p>",
        "id": 265107140,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639623991
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0401]: can&#39;t use generic parameters from outer function\n   --&gt; src\\ops\\truncate.rs:115:29\n    |\n107 | impl&lt;const N: usize&gt; Truncate for core::simd::Simd&lt;f64, N&gt;\n    |            - const parameter from outer function\n...\n113 |   fn truncate(self) -&gt; Self {\n    |      -------- try adding a local generic parameter in this method instead\n114 |     use core::simd::Simd;\n115 |     type Signed = Simd&lt;i64, N&gt;;\n    |                             ^ use of generic parameter from outer function\n\nerror[E0747]: unresolved item provided when a constant was expected\n   --&gt; src\\ops\\truncate.rs:115:29\n    |\n115 |     type Signed = Simd&lt;i64, N&gt;;\n    |                             ^\n    |\nhelp: if this generic argument was intended as a const parameter, surround it with braces\n    |\n115 |     type Signed = Simd&lt;i64, { N }&gt;;\n    |                             +   +\n</code></pre></div>",
        "id": 265107149,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624005
    },
    {
        "content": "<p>so, i dunno if that's const generics exclusive or if that's all generics, or what, but either way it's a bad user experience</p>",
        "id": 265107159,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/swapping.20sign'ed'ness/near/265107140\">said</a>:</p>\n<blockquote>\n<p>You could do <code>type Signed = i32</code>, though, and be able to use <code>N</code> directly in the function signature</p>\n</blockquote>\n<p>I don't understand what you're intending here.</p>",
        "id": 265107418,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624300
    },
    {
        "content": "<p>You could then do Simd&lt;Signed, N&gt;</p>",
        "id": 265107513,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639624419
    },
    {
        "content": "<p>Directly</p>",
        "id": 265107520,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639624426
    },
    {
        "content": "<p>but that's longer, not less long</p>",
        "id": 265107589,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624485
    },
    {
        "content": "<p>it'd be <code>type Signed&lt;const N: usize&gt; = Simd&lt;i32, N&gt;;</code></p>",
        "id": 265107719,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639624654
    },
    {
        "content": "<p>but does that ensure that the N from there matches the N from the impl?</p>",
        "id": 265107732,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624679
    },
    {
        "content": "<p>yes probably, cuz argument/return types match</p>",
        "id": 265107788,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639624718
    },
    {
        "content": "<p>yeah seems that way</p>",
        "id": 265107797,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624730
    },
    {
        "content": "<p>neat</p>",
        "id": 265107798,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624732
    },
    {
        "content": "<p><code>type</code> is an item, and, like all items, generics need to be on that item if you want to use them in the item's definition.</p>",
        "id": 265107838,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639624796
    },
    {
        "content": "<p>yeah but i <em>want</em> them to inherit outer generics</p>",
        "id": 265107888,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624813
    },
    {
        "content": "<p>:)</p>",
        "id": 265107901,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639624824
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/Lokathor/float_math/commit/e6a95cac3139dcaf518b19c32dfcd46e19564bee\">https://github.com/Lokathor/float_math/commit/e6a95cac3139dcaf518b19c32dfcd46e19564bee</a>&gt;</p>",
        "id": 265108006,
        "sender_full_name": "Lokathor",
        "timestamp": 1639624949
    },
    {
        "content": "<p>that causes hard problems like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"c1\">// how do you propagate bounds here?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265108139,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639625092
    },
    {
        "content": "<p>\"just do it, that's easy\"</p>",
        "id": 265108157,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625123
    },
    {
        "content": "<p>Naw, but I'd expect the restrictions to keep piling up, so the inner impl it actually bound by the outer T:Copy bound</p>",
        "id": 265108241,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625189
    },
    {
        "content": "<p><code>f</code> only exists when T:Copy, so the impl also only exists then too</p>",
        "id": 265108251,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625213
    },
    {
        "content": "<p>btw, i have a wip simd math library here: <a href=\"https://github.com/rust-lang/portable-simd/issues/109\">https://github.com/rust-lang/portable-simd/issues/109</a> <a href=\"https://salsa.debian.org/Kazan-team/vector-math\">https://salsa.debian.org/Kazan-team/vector-math</a></p>",
        "id": 265108386,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639625391
    },
    {
        "content": "<p>it looks like <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>'s float_math library is starting out on doing something similar</p>",
        "id": 265108504,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639625486
    },
    {
        "content": "<p>Yes for this lib I am aiming for CC0 (and MIT/Apache-2.0 for people that are sticklers), though i might ask for advice on formulas too</p>",
        "id": 265108573,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625540
    },
    {
        "content": "<p>mostly i wanted to try out the simd stuff just a hair on a few basics, because the \"real\" things i want to do with SIMD can't be done yet (no powf method, among others)</p>",
        "id": 265108594,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625576
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 265108605,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639625587
    },
    {
        "content": "<p>I'd love to do SIMD support in the <code>imagine</code> library, once portable-simd has enough methods</p>",
        "id": 265108678,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625655
    },
    {
        "content": "<p>yeah, sorry, i'm currently stalled on it cuz libre-soc has a contractual deadline coming up soon so i'm working on adding bit manipulation instructions to our cpu rn</p>",
        "id": 265108710,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639625703
    },
    {
        "content": "<p>no rush! there's plenty of other non-simd work for me to do anyway, nothing relies on it</p>",
        "id": 265108856,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625850
    },
    {
        "content": "<p>have fun with Adam7 in imagine's png decoder!!</p>",
        "id": 265108920,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639625907
    },
    {
        "content": "<p>oh that's already supported. turns out with enough iterator power you really can move heaven and earth</p>",
        "id": 265108937,
        "sender_full_name": "Lokathor",
        "timestamp": 1639625943
    },
    {
        "content": "<p>or more fun stuff like an avif decoder (dct hell)</p>",
        "id": 265108952,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639625974
    }
]