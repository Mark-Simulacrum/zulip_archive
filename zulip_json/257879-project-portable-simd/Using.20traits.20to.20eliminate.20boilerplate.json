[
    {
        "content": "<p>So in my latest draft on <code>feat/gather</code>, I drafted a SimdArray trait that allows us to basically define everything in our implementation that is primitive-neutral in terms of that implementation. I  don't think we should overuse traits, but I think that we have an opportunity to simplify our code significantly using this, and move more things out of macros.</p>\n<p>However, I also noticed something else while experimenting with trait bounds. It would require a significant amount of reworking of our code, because it requires refactoring our codebase, but: We may be able to significantly limit the amount of frankly onerous trait bounds in our code if we simplify the traits to gating only <strong>the construction of the types</strong>.</p>",
        "id": 242012031,
        "sender_full_name": "Jubilee",
        "timestamp": 1623206391
    },
    {
        "content": "<p>I don't think that's possible, you can always construct the type via transmuting it</p>",
        "id": 242012107,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623206485
    },
    {
        "content": "<p>Also you could always compile a function that takes it as an argument even if you don't construct it, and that codegen would obviously fail</p>",
        "id": 242012181,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623206589
    },
    {
        "content": "<p>Damn.</p>",
        "id": 242012430,
        "sender_full_name": "Jubilee",
        "timestamp": 1623206946
    },
    {
        "content": "<p><del>I mean I'm not terribly concerned about the last one, even if it's suboptimal.</del></p>",
        "id": 242012451,
        "sender_full_name": "Jubilee",
        "timestamp": 1623207001
    },
    {
        "content": "<p>Well it's more that you'd get bad compiler errors</p>",
        "id": 242012504,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207050
    },
    {
        "content": "<p>Or you could write out a bunch of code that compiled and then get frustrated when you can't actually use it</p>",
        "id": 242012509,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207074
    },
    {
        "content": "<p>Right.</p>",
        "id": 242012524,
        "sender_full_name": "Jubilee",
        "timestamp": 1623207113
    },
    {
        "content": "<p>Also wrt your first point, I think I don't like the idea of using traits in a public interface to avoid macros in a private implementation. A trait could totally be appropriate here but I think it needs to be appropriate for the API and implementation is secondary</p>",
        "id": 242012595,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207183
    },
    {
        "content": "<p>Mostly, I think it's useful because it allows us to provide a guarantee that an interface is replicated across all the relevant types, and which parts.</p>",
        "id": 242012837,
        "sender_full_name": "Jubilee",
        "timestamp": 1623207522
    },
    {
        "content": "<p>Yeah that's a potential benefit (though I would argue macros do the same thing)</p>",
        "id": 242012939,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207652
    },
    {
        "content": "<p>Note I haven't actually looked at the branch at all yet so this is more just general sentiment and not about this particular implementation</p>",
        "id": 242012953,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207680
    },
    {
        "content": "<p>I'm guessing it probably makes sense here for the same reason <code>Select</code> is a trait</p>",
        "id": 242013006,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207728
    },
    {
        "content": "<p>Yeah I still have to rework a bunch of stuff anyways unfortunately. ^^;<br>\nBut having paid some time to attend to <code>std</code>, I don't want to criticize it a bunch but there's been a lot of cases where <code>std</code>, in spite of having hundreds of readers a day, and in spite of lots of macro work, has had very uneven application of things across types. ^^;</p>",
        "id": 242013008,
        "sender_full_name": "Jubilee",
        "timestamp": 1623207731
    },
    {
        "content": "<p>Yeah definitely. I do think there is a greater cognitive load with traits, though, since you need to understand the trait itself, and then the implementations (which can be complicated...)</p>",
        "id": 242013036,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207832
    },
    {
        "content": "<p>Yeah. :/<br>\nHere, I hope we can offer an exceedingly uniform interface and try to not overload it, at least.</p>",
        "id": 242013084,
        "sender_full_name": "Jubilee",
        "timestamp": 1623207859
    },
    {
        "content": "<p>Agreed</p>",
        "id": 242013089,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207870
    },
    {
        "content": "<p>Tangentially related I actually think we should look at reworking shuffles to make the interface a little more intuitive</p>",
        "id": 242013115,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623207924
    },
    {
        "content": "<p>Oh?</p>",
        "id": 242013119,
        "sender_full_name": "Jubilee",
        "timestamp": 1623207936
    },
    {
        "content": "<p>I think there are a few things we can look at</p>",
        "id": 242013211,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208047
    },
    {
        "content": "<p>I think we can consider using const panics instead of the whole confusing modulo thing</p>",
        "id": 242013228,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208073
    },
    {
        "content": "<p>But more along the lines of the traits thing, it would be nice if we could do <code>indices.shuffle(a, b)</code> like we can do with select</p>",
        "id": 242013291,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208132
    },
    {
        "content": "<p>Obviously we can't</p>",
        "id": 242013295,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208136
    },
    {
        "content": "<p>But perhaps there's something we can do to make that interface a little less confusing</p>",
        "id": 242013313,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208164
    },
    {
        "content": "<p>I am pretty sure we don't do the modulo thing tho'.</p>",
        "id": 242013317,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208172
    },
    {
        "content": "<p>Hmm</p>",
        "id": 242013320,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208178
    },
    {
        "content": "<p>Well I don't think we panic</p>",
        "id": 242013326,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208189
    },
    {
        "content": "<p>I think simd_shuffle fails to compile. ^^;</p>",
        "id": 242013372,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208207
    },
    {
        "content": "<p>if memory serves.</p>",
        "id": 242013376,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208213
    },
    {
        "content": "<p>Ah. Perhaps even worse</p>",
        "id": 242013386,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208233
    },
    {
        "content": "<p>well a const panic would just be a compile error too.</p>",
        "id": 242013400,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208256
    },
    {
        "content": "<p>One with source information <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242013415,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208291
    },
    {
        "content": "<p>...true!</p>",
        "id": 242013418,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208302
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76768/files\">https://github.com/rust-lang/rust/pull/76768/files</a><br>\nAh yes, I added the test to verify that we fail to compile.</p>",
        "id": 242013427,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208318
    },
    {
        "content": "<blockquote>\n<p>error[E0511]: invalid monomorphization of <code>simd_shuffle4</code> intrinsic: shuffle index <a href=\"https://github.com/rust-lang/rust/issues/0\">#0</a> is out of bounds (limit 8)</p>\n</blockquote>",
        "id": 242013471,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208344
    },
    {
        "content": "<p>That error could certainly be better</p>",
        "id": 242013477,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208372
    },
    {
        "content": "<p>Though also better than expected</p>",
        "id": 242013480,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Using.20traits.20to.20eliminate.20boilerplate/near/242013291\">said</a>:</p>\n<blockquote>\n<p>But more along the lines of the traits thing, it would be nice if we could do <code>indices.shuffle(a, b)</code> like we can do with select</p>\n</blockquote>\n<p>idk actually, I think we could.</p>",
        "id": 242013481,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208381
    },
    {
        "content": "<p>I think you could do it with something crazy like <code>struct Indices&lt;const Array: ...&gt;</code></p>",
        "id": 242013550,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208479
    },
    {
        "content": "<p>yah basically.</p>",
        "id": 242013556,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208492
    },
    {
        "content": "<p>And perhaps a shuffle trait which would map array types to appropriate vector types</p>",
        "id": 242013583,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208531
    },
    {
        "content": "<p>Much like select</p>",
        "id": 242013588,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208543
    },
    {
        "content": "<p>Oh?</p>",
        "id": 242013602,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208560
    },
    {
        "content": "<p>Well maybe <code>Swizzle</code> considering the other conversation</p>",
        "id": 242013631,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208563
    },
    {
        "content": "<p>well something like</p>",
        "id": 242013648,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208586
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>trait Swizzle {\n   type Indices;\n}\n\n...\n    fn swizzle&lt;T: Swizzle&lt;Self::Indices&gt;&gt;(v: T)\n</code></pre></div>",
        "id": 242013765,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208789
    },
    {
        "content": "<p>Idk probably too many dependent types there lol</p>",
        "id": 242013769,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208799
    },
    {
        "content": "<p>But something so the index type is dependent on the vector type</p>",
        "id": 242013827,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Using.20traits.20to.20eliminate.20boilerplate/near/242013827\">said</a>:</p>\n<blockquote>\n<p>But something so the index type is dependent on the vector type</p>\n</blockquote>\n<p>hm, why would we vary that?</p>",
        "id": 242013829,
        "sender_full_name": "Jubilee",
        "timestamp": 1623208862
    },
    {
        "content": "<p>For a similar reason as why masks can select multiple vector types</p>",
        "id": 242013855,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208915
    },
    {
        "content": "<p>There's no reason for them to be different types</p>",
        "id": 242013899,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208933
    },
    {
        "content": "<p>That's about it</p>",
        "id": 242013903,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623208937
    },
    {
        "content": "<p>Mm!</p>",
        "id": 242014000,
        "sender_full_name": "Jubilee",
        "timestamp": 1623209063
    },
    {
        "content": "<p>That's definitely why I bothered with the trait tho':</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">gather</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"bp\">Self</span>::<span class=\"n\">Scalar</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">idxs</span>: <span class=\"nc\">SimdUsize</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242014128,
        "sender_full_name": "Jubilee",
        "timestamp": 1623209251
    },
    {
        "content": "<p>( there is no particular reason for the SimdUsize as the indicing, It Just Happened To Be There. )</p>",
        "id": 242014195,
        "sender_full_name": "Jubilee",
        "timestamp": 1623209305
    },
    {
        "content": "<p>Yep definitely makes sense to me</p>",
        "id": 242014419,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623209596
    },
    {
        "content": "<p>...it's too bad we don't have IndexGet.<br>\nThen swizzle could just be indicing with an array.</p>",
        "id": 242018209,
        "sender_full_name": "Jubilee",
        "timestamp": 1623214794
    },
    {
        "content": "<p>feel like my brain expanded 10 sizes just figuring that out.</p>",
        "id": 242018277,
        "sender_full_name": "Jubilee",
        "timestamp": 1623214850
    },
    {
        "content": "<p>using traits has two main effects on the library user: it allows generics, but it also makes docs worse.</p>",
        "id": 242019908,
        "sender_full_name": "Lokathor",
        "timestamp": 1623217056
    },
    {
        "content": "<p>Hmm, I wonder if &lt;<a href=\"https://github.com/rust-lang/rfcs/pull/2375\">https://github.com/rust-lang/rfcs/pull/2375</a>&gt; could help with that.</p>\n<p>Makes me wonder if a <em>private</em> trait can still be <code>#[inherent]</code>...</p>",
        "id": 242020948,
        "sender_full_name": "scottmcm",
        "timestamp": 1623218389
    },
    {
        "content": "<p>There is also the issue that they need to be imported</p>",
        "id": 242051603,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623238810
    },
    {
        "content": "<p>That's what inherent is supposed to solve (some day far from now).</p>",
        "id": 242082647,
        "sender_full_name": "Lokathor",
        "timestamp": 1623252061
    },
    {
        "content": "<p>I read that as \"inherit\" earlier and totally misunderstood</p>",
        "id": 242082737,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623252112
    },
    {
        "content": "<p>As to what Scott said: if inherent trait methods get grouped with normal methods in rustdoc output (which seems possible?) then it would eliminate the docs issue.</p>\n<p>As is, trait impl methods on a type are treated as second class within the docs and so trait impl oriented types don't read well at all.</p>",
        "id": 242083292,
        "sender_full_name": "Lokathor",
        "timestamp": 1623252324
    }
]