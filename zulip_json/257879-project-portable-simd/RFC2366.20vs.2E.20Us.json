[
    {
        "content": "<p>Reviewing RFC2366, it becomes apparent to me that there's another reason to eschew explicit-wrapping APIs in favor of defining SIMD as wrapping by default: on top of the performance concerns, they are an ENORMOUS implementation overhead.</p>",
        "id": 238912415,
        "sender_full_name": "Jubilee",
        "timestamp": 1621099058
    },
    {
        "content": "<p>What do you mean by explicit wrapping vs wrapping by default?</p>",
        "id": 238912521,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621099152
    },
    {
        "content": "<p>I should say annotated wrapping: Wrapping&lt;T&gt; and <code>.wrapping_</code> methods</p>",
        "id": 238912613,
        "sender_full_name": "Jubilee",
        "timestamp": 1621099242
    },
    {
        "content": "<p>Oh, gotcha, I thought you meant wrapper types, not wrapping arithmetic</p>",
        "id": 238912684,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621099298
    },
    {
        "content": "<p>I am still vaguely interested in debug-mode checked arithmetic but yeah it would need a lot of compiler work</p>",
        "id": 238912752,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621099360
    },
    {
        "content": "<p>Likewise, questions about unsafe vector load/stores consumed a lot of RFC2366's \"brain budget\".</p>",
        "id": 238912777,
        "sender_full_name": "Jubilee",
        "timestamp": 1621099389
    },
    {
        "content": "<p>As well as anything that proposed making certain lanes undef (e.g. <code>div</code>).</p>",
        "id": 238912812,
        "sender_full_name": "Jubilee",
        "timestamp": 1621099440
    },
    {
        "content": "<p>That's interesting, because I think generally you can use ptr::read</p>",
        "id": 238912857,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621099450
    },
    {
        "content": "<p>A lot of it was alignment.</p>",
        "id": 238913273,
        "sender_full_name": "Jubilee",
        "timestamp": 1621099893
    },
    {
        "content": "<p>Yeah, you'd need to use unaligned_read in most situations probably</p>",
        "id": 238913410,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621100002
    },
    {
        "content": "<p>There may be a good way to make a safer but zero overhead API</p>",
        "id": 238913505,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621100088
    },
    {
        "content": "<p>Splitting RFC2366 into its own thread, since I realized we were talking mostly about it and I wanted to continue talking about it.<br>\nHere's the RFC: <a href=\"https://github.com/gnzlbg/rfcs/blob/7011673b2dc5b493cb8be937bf11dd8449f58135/text/0000-ppv.md\">https://github.com/gnzlbg/rfcs/blob/7011673b2dc5b493cb8be937bf11dd8449f58135/text/0000-ppv.md</a><br>\nAnd its peanut gallery: <a href=\"https://github.com/rust-lang/rfcs/pull/2366\">https://github.com/rust-lang/rfcs/pull/2366</a></p>",
        "id": 238922411,
        "sender_full_name": "Jubilee",
        "timestamp": 1621109601
    },
    {
        "content": "<p>One of the things we've notably done: our API is now internally arrays. This means we don't have to touch a tuple, except for our \"1-tuple\" of the inner array. This means we don't have to <em>specify the layout</em> of a tuple, either! Meanwhile, arrays of relatively simple types <em>do</em> have comparatively trivial layouts we can make statements about. I propose this is a desirable property.</p>",
        "id": 238922523,
        "sender_full_name": "Jubilee",
        "timestamp": 1621109727
    },
    {
        "content": "<p>Yep. Really all repr(simd) is doing for us now is requiring an alignment (which we aren't even sure is right <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>) and gating the intrinsics</p>",
        "id": 238922656,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621109883
    },
    {
        "content": "<p>Yeah, I figure notionally that <code>repr_simd</code> is basically saying \"yes, this can go in a SIMD register\", basically. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238928146,
        "sender_full_name": "Jubilee",
        "timestamp": 1621115785
    },
    {
        "content": "<p>From <a href=\"https://rust-lang.github.io/rfcs/2325-stable-simd.html#portable-packed-simd\">https://rust-lang.github.io/rfcs/2325-stable-simd.html#portable-packed-simd</a>:</p>\n<blockquote>\n<p>Or, in other words, it's intended that portable SIMD types are entirely decoupled from intrinsics. If they both end up being implemented then there will be [zero]-cost interoperation between them, but neither will necessarily depend on the other.</p>\n</blockquote>\n<p>So that's interesting because zero cost interop with machine vectors is implicitly part of our mandate.</p>",
        "id": 241085902,
        "sender_full_name": "Jubilee",
        "timestamp": 1622588100
    }
]