[
    {
        "content": "<p>Hello, I was wondering: \"mask\" is a fairly SIMD-specific technical term, when really it's aimed at a more general concept. Do we have any appetite to consider a name like SimdPredicate or even the somewhat hilarious SimdBool?</p>",
        "id": 240864437,
        "sender_full_name": "Jubilee",
        "timestamp": 1622488928
    },
    {
        "content": "<p>I had considered bool, the only weird thing is that there is a lane width as well</p>",
        "id": 240864473,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622488980
    },
    {
        "content": "<p>Also, the only thing you can really do with them is <code>select</code>, which is masking I guess?</p>",
        "id": 240864571,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622489058
    },
    {
        "content": "<p>That <strong>does</strong> make it a bit weird, but I would contend that basically that detail is opaque even if it comes up.<br>\nTrue, but that kind of makes it a <code>filter</code>, no?</p>",
        "id": 240864588,
        "sender_full_name": "Jubilee",
        "timestamp": 1622489075
    },
    {
        "content": "<p>well, it's an Either, actually.</p>",
        "id": 240864596,
        "sender_full_name": "Jubilee",
        "timestamp": 1622489084
    },
    {
        "content": "<p>Perhaps</p>",
        "id": 240864601,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622489090
    },
    {
        "content": "<p><code>.zip().map()</code></p>",
        "id": 240864610,
        "sender_full_name": "Jubilee",
        "timestamp": 1622489096
    },
    {
        "content": "<p>Select is probably more plain-english</p>",
        "id": 240864630,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622489126
    },
    {
        "content": "<p>Yeah, I think select as a method is fine, my only concern is the type/trait names involved (why do we involve a \"mask\" in selecting?)</p>",
        "id": 240864648,
        "sender_full_name": "Jubilee",
        "timestamp": 1622489151
    },
    {
        "content": "<p>Since it's really like <code>if</code>.  Which does make it a condition/predicate result</p>",
        "id": 240864649,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622489153
    },
    {
        "content": "<p>yup.</p>",
        "id": 240864696,
        "sender_full_name": "Jubilee",
        "timestamp": 1622489172
    },
    {
        "content": "<p>I agree that mask is probably historical from when it was logical masking operations (not true on all architectures today!)</p>",
        "id": 240864712,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622489190
    },
    {
        "content": "<p>Yeah. I don't mind a few historical names appearing, as long as we like them enough to stand up for them against alternatives, thus this initial foray into testing our feelings about it.</p>",
        "id": 240864857,
        "sender_full_name": "Jubilee",
        "timestamp": 1622489328
    },
    {
        "content": "<p>SimdBool would likely make the most sense except SimdBool32 is... confusing</p>",
        "id": 240865893,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622490360
    },
    {
        "content": "<p>yeaaah.</p>",
        "id": 240866202,
        "sender_full_name": "Jubilee",
        "timestamp": 1622490610
    },
    {
        "content": "<p>You could do <code>SimdBool&lt;T: SimdBoolHelper&gt;</code> and implement <code>SimdBoolHelper</code> for <code>SimdI{N}</code></p>",
        "id": 240866372,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622490781
    },
    {
        "content": "<p>I think mask makes way more sense given the lane width. I also think \"bitmask\" is not at all a simd-specific concept</p>",
        "id": 240866579,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622490970
    },
    {
        "content": "<p>I think the oddity is we aren't calling it a bitmask because a bitmask means something specific, tho'.</p>",
        "id": 240866649,
        "sender_full_name": "Jubilee",
        "timestamp": 1622491052
    },
    {
        "content": "<p>Well, perhaps it does only because we gave bitmask a special meaning</p>",
        "id": 240866745,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622491130
    },
    {
        "content": "<p>Intel people would probably call it a \"k mask\" or something like that</p>",
        "id": 240866777,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622491162
    },
    {
        "content": "<p>yeah. And Arm people might call it a predicate vector. RISCV people would in fact call it a mask, but also a predicate, Because.</p>",
        "id": 240866866,
        "sender_full_name": "Jubilee",
        "timestamp": 1622491230
    },
    {
        "content": "<p>I think mask or bool is easiest in terms of familiarity and keeping the verbiage simple</p>",
        "id": 240867019,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622491326
    },
    {
        "content": "<p>I am actually leaning towards bool, since it's also used for the results of comparisons</p>",
        "id": 240867512,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622491783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Bikeshed.3A.20Mask.20or.20SimdPredicate.3F/near/240864437\">said</a>:</p>\n<blockquote>\n<p>Hello, I was wondering: \"mask\" is a fairly SIMD-specific technical term, when really it's aimed at a more general concept. Do we have any appetite to consider a name like SimdPredicate or even the somewhat hilarious SimdBool?</p>\n</blockquote>\n<p>I think anything involving \"predicate\" would be confusing, as that would make me think of instructions that accept an \"operation\" or \"predicate\" code to indicate something like \"eq\" or \"lt\" or \"ge\" for each pair of somethings.</p>",
        "id": 240868239,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492425
    },
    {
        "content": "<p>I think it'd be important to distinguish between a vector of mask/select/\"actually do the thing in this lane\" bits and a vector of predicate/operation/condition codes.</p>",
        "id": 240868283,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622492474
    },
    {
        "content": "<p>For <code>vector-math</code>, I just used <code>VecBool32</code>, inspired by SPIR-V's use of <code>bool</code>-vectors.</p>",
        "id": 240869043,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622493216
    },
    {
        "content": "<p>where <code>VecBool32</code> means a generic-length vector of booleans for 32-bit lanes.</p>",
        "id": 240869130,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622493274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Bikeshed.3A.20Mask.20or.20SimdPredicate.3F/near/240868283\">said</a>:</p>\n<blockquote>\n<p>I think it'd be important to distinguish between a vector of mask/select/\"actually do the thing in this lane\" bits and a vector of predicate/operation/condition codes.</p>\n</blockquote>\n<p>well, the latter tends to feed into the former.</p>",
        "id": 240869384,
        "sender_full_name": "Jubilee",
        "timestamp": 1622493507
    },
    {
        "content": "<p>In the context of a particular instruction set I could see a distinction, but in our use case I think it is either just true or false.  Considering we don't actually even expose the format of the bits</p>",
        "id": 240878710,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622502984
    },
    {
        "content": "<p>I think given that the mask size is part of the type, bool is probably more confusing than mask. I think you're greatly overestimating how foreign a concept of a mask is to people who haven't done simd, again, the analogy to bitmasks isn't that wrong or far of a stretch</p>",
        "id": 240885213,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622510399
    },
    {
        "content": "<p>whereas having like, $N different kinds of bools probably would be</p>",
        "id": 240885267,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622510434
    },
    {
        "content": "<p>Yeah, I agree that \"mask\" isn't that far of a stretch.  But if we reorganized it as <code>SimdBool&lt;T&gt;</code> it's really just one type (we could also make the argument that it should be <code>Mask&lt;T&gt;</code> which may be simplest and least confusing?)</p>",
        "id": 240885406,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622510648
    },
    {
        "content": "<p><code>pub type Mask32&lt;LANES&gt; = Mask&lt;SimdI32&lt;LANES&gt;&gt;</code> etc</p>",
        "id": 240885449,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622510739
    },
    {
        "content": "<p>oh dear. ^^;</p>",
        "id": 240886331,
        "sender_full_name": "Jubilee",
        "timestamp": 1622511879
    },
    {
        "content": "<p>Urgh.</p>",
        "id": 240889010,
        "sender_full_name": "Jubilee",
        "timestamp": 1622515296
    },
    {
        "content": "<p>I have been trying to define an actual trait for use and the trait bounds that we've defined are driving me mad.</p>",
        "id": 240889068,
        "sender_full_name": "Jubilee",
        "timestamp": 1622515371
    },
    {
        "content": "<p>Ugh TIL RiscV and Arm are not the same thing...</p>",
        "id": 240889091,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1622515415
    },
    {
        "content": "<p>Even more ISAs to learn!</p>",
        "id": 240889099,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1622515426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> go on?</p>",
        "id": 240889103,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622515432
    },
    {
        "content": "<p>I don't advise learning the fine details of all the different ISAs.<br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I have been experimenting with the proposed idea of a trait that parameterizes over lanes, conceptually, and basically I've gotten stuck on getting all the trait bounds to resolve because every time I slap one bound in another erupts, and the fact that MaskSize is sometimes an Isize leaks out.</p>",
        "id": 240889449,
        "sender_full_name": "Jubilee",
        "timestamp": 1622515870
    },
    {
        "content": "<p>So masks require <code>Self: Mask, SimdI{N}: LanesAtMost32</code>, which is what I assume you're seeing</p>",
        "id": 240889520,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622515981
    },
    {
        "content": "<p>...</p>",
        "id": 240889585,
        "sender_full_name": "Jubilee",
        "timestamp": 1622516083
    },
    {
        "content": "<p>well.</p>",
        "id": 240889588,
        "sender_full_name": "Jubilee",
        "timestamp": 1622516086
    },
    {
        "content": "<p>I got it to compile, but then rustc panicked.</p>",
        "id": 240889591,
        "sender_full_name": "Jubilee",
        "timestamp": 1622516101
    },
    {
        "content": "<p>Lol.</p>",
        "id": 240889595,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622516108
    },
    {
        "content": "<p>And I can't actually use MaskSize as an argument to an intrinsic expecting a SIMD type.</p>",
        "id": 240889807,
        "sender_full_name": "Jubilee",
        "timestamp": 1622516455
    },
    {
        "content": "<p>Well, masks aren't (necessarily) vectors?</p>",
        "id": 240889827,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622516502
    },
    {
        "content": "<p>technically true, but it's expecting a mask.</p>",
        "id": 240889879,
        "sender_full_name": "Jubilee",
        "timestamp": 1622516578
    },
    {
        "content": "<p>You can use <code>mask.to_int().into()</code> to get the architecture vector type</p>",
        "id": 240889900,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622516629
    },
    {
        "content": "<p>Assuming you mean a <code>core::arch</code> intrinsic</p>",
        "id": 240889954,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622516679
    },
    {
        "content": "<p>no, this is the LLVM intrinsics</p>",
        "id": 240890055,
        "sender_full_name": "Jubilee",
        "timestamp": 1622516796
    },
    {
        "content": "<p>but it worked anyways.</p>",
        "id": 240890057,
        "sender_full_name": "Jubilee",
        "timestamp": 1622516801
    },
    {
        "content": "<p>I think you can skip the <code>into</code> then, but same idea</p>",
        "id": 240890069,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622516824
    }
]