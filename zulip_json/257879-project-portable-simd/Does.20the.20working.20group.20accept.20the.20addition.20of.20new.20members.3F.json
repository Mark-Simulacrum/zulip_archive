[
    {
        "content": "<p>Hello everyone, My github is <a href=\"https://github.com/SparrowLii\">https://github.com/SparrowLii</a>.  I'm interested in the development of stdsimd. I've been contributing neon instructions to stdarch lately. and would like to contribute to the work of simd wg after this. </p>\n<p>So if there's a plan for stdsimd or a roadmap, please let me know. </p>\n<p>My personal idea is to implement simd interfaces that are more transparent to users, without having to distinguish the length of the vector register. In this way, users do not need to understand the differences between hardware architectures. Do you have similar considerations?</p>",
        "id": 234428664,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618364633
    },
    {
        "content": "<p>Sure, membership is in practice \"whoever shows up and does the work\"~ ^_^<br>\nAt the moment, we're currently developing a const generic API.<br>\nIn this way, users are not quite completely ignorant of the length of the vector type, but can abstract over it in their code, allowing them to mostly treat it as a variable like any other.<br>\nWe do not plan to make it more abstract than this because we are weighing our API against another consideration: at the moment, squeezing out performance requires knowing some hard realities about the machine.</p>",
        "id": 234429092,
        "sender_full_name": "Jubilee",
        "timestamp": 1618364991
    },
    {
        "content": "<p>If we can implement automatic detection of machine characteristics, can we make simd more transparent to users while maximizing performance? For example, let simd_add use arrays as arguments, and let the compiler choose the most appropriate vector length and simd instruction.</p>\n<p>Of course, that's just my personal assume for the time being. I would love to be involved in the progress of the wg's work. Is there any issue related to the const generic interface? I can try to raise some PRs.</p>",
        "id": 234429890,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618365622
    },
    {
        "content": "<p>It might be useful to read the announcement post for why we can't simply just \"make the backend do it\": the backend is only a machine of limited intelligence, at the end of the day.  <a href=\"https://blog.rust-lang.org/inside-rust/2020/09/29/Portable-SIMD-PG.html\">https://blog.rust-lang.org/inside-rust/2020/09/29/Portable-SIMD-PG.html</a></p>",
        "id": 234430207,
        "sender_full_name": "Jubilee",
        "timestamp": 1618365849
    },
    {
        "content": "<p>you can have a look around in the issue tracker too <a href=\"https://github.com/rust-lang/stdsimd/issues\">https://github.com/rust-lang/stdsimd/issues</a></p>",
        "id": 234430230,
        "sender_full_name": "Lokathor",
        "timestamp": 1618365870
    },
    {
        "content": "<p>That makes sense. Maybe we can implement a more \"front-end\" module that automatically detects machine characteristics and selects vector length.<br>\nThanks for the link! I'll see what I can do.</p>",
        "id": 234430716,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618366281
    },
    {
        "content": "<p>There has been discussion of multiversioning that <em>can</em> do that, especially as e.g. a crate, but it's basically \"out of scope\" for the current work.</p>",
        "id": 234431075,
        "sender_full_name": "Jubilee",
        "timestamp": 1618366628
    },
    {
        "content": "<p>Thanks for explaining. I personally find it valuable because I also want to use stdsimd in the matrix caculating crate \"ndarray\", which would use this feature.</p>",
        "id": 234431486,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618366958
    },
    {
        "content": "<p>Yeah, we're hoping to get things to the point where it's easy to build that feature.</p>",
        "id": 234432501,
        "sender_full_name": "Jubilee",
        "timestamp": 1618367874
    },
    {
        "content": "<p>core_simd is not currently available in the standard library. What are the main obstacles?</p>",
        "id": 234439532,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618374586
    },
    {
        "content": "<p><em>nervous giggling</em></p>",
        "id": 234439888,
        "sender_full_name": "Jubilee",
        "timestamp": 1618374885
    },
    {
        "content": "<p>Let's see.<br>\n0) We need to pull in rustc deps and add feature flags for everything like stdarch has.<br>\n1) We need to make sure that we don't break on Cranelift's test suite.</p>",
        "id": 234440086,
        "sender_full_name": "Jubilee",
        "timestamp": 1618375080
    },
    {
        "content": "<p>Thanks for the explanation!</p>",
        "id": 234440232,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618375208
    },
    {
        "content": "<p>It was the second one which has a somewhat... Large... possible space for amount of work to be done,<br>\n<a href=\"https://github.com/rust-lang/stdsimd/issues/40\">https://github.com/rust-lang/stdsimd/issues/40</a><br>\nwhich led to this MCP: <a href=\"https://github.com/rust-lang/compiler-team/issues/381\">https://github.com/rust-lang/compiler-team/issues/381</a></p>",
        "id": 234440424,
        "sender_full_name": "Jubilee",
        "timestamp": 1618375402
    },
    {
        "content": "<p>Oh, also,<br>\n2) we wanted something approaching feature parity with <code>packed_simd</code>.</p>",
        "id": 234732003,
        "sender_full_name": "Jubilee",
        "timestamp": 1618512707
    }
]