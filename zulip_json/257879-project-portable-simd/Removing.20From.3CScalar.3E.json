[
    {
        "content": "<p>Thoughts on removing <code>From&lt;Scalar&gt;</code> implementations on vectors?  The implementation is definitely valid but I'm not sure splatting really qualifies as a conversion</p>",
        "id": 225261786,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612501237
    },
    {
        "content": "<p>having from scalar <em>or</em> math ops that just plain accept scalars is important for actually writing the code that uses simd types.</p>",
        "id": 225303386,
        "sender_full_name": "Lokathor",
        "timestamp": 1612534721
    },
    {
        "content": "<p>because of literals, if you want to double a vec you write something like <code>v * 2.0</code> or <code>v * 2.0.into()</code></p>",
        "id": 225303790,
        "sender_full_name": "Lokathor",
        "timestamp": 1612534942
    },
    {
        "content": "<p>I'm okay with the math ops taking scalars directly, I only mean the From trait.  I thought using <code>into</code> with operators doesn't work anyway, since you end up with a double inference problem?</p>",
        "id": 225313458,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612539334
    },
    {
        "content": "<p>I think requiring <code>splat(x)</code> instead of <code>from(x)</code> makes sense.</p>\n<p>My usual heuristic is whether a <code>TryFrom</code> going the other way would make sense, and while it would be possible to have it only succeed if all the lanes have the same value, that seems way too weird to be useful.</p>",
        "id": 225332903,
        "sender_full_name": "scottmcm",
        "timestamp": 1612547643
    },
    {
        "content": "<p>Yeah, I think keeping splat(x) but having ops explicitly accept scalar types and splat them makes more sense than keeping From.</p>",
        "id": 225363721,
        "sender_full_name": "Jubilee",
        "timestamp": 1612562541
    },
    {
        "content": "<p>I <strong>could</strong> see Rust having <code>f32 as f32x4</code>, but we wouldn't have the reverse, we might have <code>f32x4 as [f32; 4]</code>?</p>",
        "id": 225364309,
        "sender_full_name": "Jubilee",
        "timestamp": 1612562831
    },
    {
        "content": "<p>Am I understanding correctly that <code>From&lt;Scalar&gt;</code> let's you write something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">(</span><span class=\"mf\">4.0</span><span class=\"k\">f32</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That seems like something nice for making masks, but I don't know why having it as a Trait is a drawback.</p>",
        "id": 225368071,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612565063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> specifically it is fn from and fn into, on the From and Into traits, and Rust applies automatic usage of them in a lot of places so having it in a spot is both great and also bad, because Rust is better at applying those functions and knowing which to select if there are <strong>less</strong> choices.</p>",
        "id": 225368473,
        "sender_full_name": "Jubilee",
        "timestamp": 1612565325
    },
    {
        "content": "<p>if f32x4 can be directly multiplied with 2.0 then I don't care about the extra character in <code>splat</code> vs <code>from</code>.</p>",
        "id": 225373846,
        "sender_full_name": "Lokathor",
        "timestamp": 1612569571
    },
    {
        "content": "<p>Is there a problem specifically with literals or am I misunderstanding?</p>",
        "id": 225374450,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612569952
    },
    {
        "content": "<p>well having to write <code>x * f32x4::splat(2.0)</code> all across a code base just gets very ugly very fast.</p>",
        "id": 225375622,
        "sender_full_name": "Lokathor",
        "timestamp": 1612570983
    },
    {
        "content": "<p>Right, but the operators we have right now auto-splat</p>",
        "id": 225375712,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612571057
    },
    {
        "content": "<p>I think I just misunderstood</p>",
        "id": 225375718,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612571062
    },
    {
        "content": "<p>I suppose it won't be as clean for associated fns like saturated_add, but we have discussed a splat trait</p>",
        "id": 225375846,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612571171
    },
    {
        "content": "<p>FWIW, I think the difference between <code>x * 2.0</code> and <code>x * splat(2.0)</code> is pretty bad, but once it's <code>x.saturated_add(2.0)</code> vs <code>x.saturated_add(splat(2.0))</code> it doesn't feel nearly as onerous to me.</p>",
        "id": 225378299,
        "sender_full_name": "scottmcm",
        "timestamp": 1612574086
    },
    {
        "content": "<p>...ugh, my brain said \"what if we <code>impl Add&lt;T: Into&lt;SimdF32&gt;&gt; for SimdF32</code> tho'\"</p>",
        "id": 226546614,
        "sender_full_name": "Jubilee",
        "timestamp": 1613496587
    },
    {
        "content": "<p>but now I'm trying to remember if that ever can succeed inference</p>",
        "id": 226546723,
        "sender_full_name": "Jubilee",
        "timestamp": 1613496625
    },
    {
        "content": "<p>Hmm I really doubt it</p>",
        "id": 226546756,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613496645
    },
    {
        "content": "<p>Also I'm not sure that's semantically correct? It would allow you to add arrays for example</p>",
        "id": 226546859,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613496686
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 226546886,
        "sender_full_name": "Jubilee",
        "timestamp": 1613496699
    },
    {
        "content": "<p>&lt;_&lt;;</p>",
        "id": 226546891,
        "sender_full_name": "Jubilee",
        "timestamp": 1613496702
    },
    {
        "content": "<p>OK, so, less silly: as long as the lengths and such work out, it'd be nice to just pretend you're writing APL in Rust.</p>",
        "id": 226546984,
        "sender_full_name": "Jubilee",
        "timestamp": 1613496728
    },
    {
        "content": "<p>OK that's still pretty silly BUT</p>",
        "id": 226547056,
        "sender_full_name": "Jubilee",
        "timestamp": 1613496762
    },
    {
        "content": "<p>I think the thing that's confusing to me is that <code>vector + scalar.into()</code> doesn't really illustrate what at all the conversion is doing.  <code>vector + scalar</code> makes sense mathematically, it just happens to splat in an efficient implementation (it could be written without one but it would be bad)</p>",
        "id": 226547220,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613496835
    },
    {
        "content": "<p>Yeah it's kinda funny because I would <strong>only</strong> want this to be there for splatting implicitly.</p>",
        "id": 226547408,
        "sender_full_name": "Jubilee",
        "timestamp": 1613496903
    },
    {
        "content": "<p>I think I've convinced myself that vector-scalar operations and splatting are completely independent operations</p>",
        "id": 226547551,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613496963
    },
    {
        "content": "<p>There could conceivably be an architecture that provides that as a single operation</p>",
        "id": 226547635,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613496993
    },
    {
        "content": "<p>(though I doubt there is or will be)</p>",
        "id": 226547679,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497011
    },
    {
        "content": "<p><em>contemplatively</em> would we want to auto-splat then?</p>",
        "id": 226547697,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497020
    },
    {
        "content": "<p>I mean it doesn't matter, actually, because we do the splatting behind our impl, and we can change the internals of the impl.</p>",
        "id": 226547745,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497043
    },
    {
        "content": "<p>I think we shouldn't think of it as auto-splatting, it's just adding a scalar to a vector</p>",
        "id": 226547752,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497048
    },
    {
        "content": "<p>Yeah</p>",
        "id": 226547760,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497051
    },
    {
        "content": "<p>And yeah, I am pretty sure such an architecture actually exists already.</p>",
        "id": 226547810,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497078
    },
    {
        "content": "<p>It's like if you have a complex number and add a real number.  Do you convert to a complex number and then add? Or do you add the real number just to the real part? It's just an implementation detail</p>",
        "id": 226547898,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497109
    },
    {
        "content": "<p>because that sounds a lot like how certain GLSL operations could happen.</p>",
        "id": 226547916,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497118
    },
    {
        "content": "<p>Right.</p>",
        "id": 226547930,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497125
    },
    {
        "content": "<p>I would hope that the splat then add would optimize correctly in that case</p>",
        "id": 226547981,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497150
    },
    {
        "content": "<p>I think the only \"objection\" per se that I really have is that it would actually be fine if we had SimdF32&lt;4&gt; + [f32;4] work.</p>",
        "id": 226547992,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497154
    },
    {
        "content": "<p>I think I disagree, you should convert there, but if we did want that to exist we could just implement that Add trait</p>",
        "id": 226548065,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497192
    },
    {
        "content": "<p>why actually? It's still a logical equivalent.</p>",
        "id": 226548143,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497211
    },
    {
        "content": "<p>I think conversions should be explicit anywhere performance might be questionable</p>",
        "id": 226548195,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497235
    },
    {
        "content": "<p>hmm.</p>",
        "id": 226548205,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497240
    },
    {
        "content": "<p>...oh no that means we have to bench this.</p>",
        "id": 226548259,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497259
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 226548324,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497283
    },
    {
        "content": "<p>The array could be in memory and unaligned</p>",
        "id": 226548363,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497296
    },
    {
        "content": "<p>hmm.</p>",
        "id": 226548428,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497320
    },
    {
        "content": "<p>You could write something where that optimizes well sure</p>",
        "id": 226548531,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497356
    },
    {
        "content": "<p>but if we know it's an [f32; 4] then why wouldn't it be aligned?</p>",
        "id": 226548745,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497449
    },
    {
        "content": "<p>wait</p>",
        "id": 226548791,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497462
    },
    {
        "content": "<p>the alignment of it is 4 bytes, right</p>",
        "id": 226548805,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497468
    },
    {
        "content": "<p>I also think an array just conveys a different meaning</p>",
        "id": 226548936,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497531
    },
    {
        "content": "<p>right, OK, you could have a hypothetical situation where you're reading that in and it's not aligned to 16 bytes so the array could be found at 12 or 4 or 20 instead of 0, 16, 32, etc.</p>",
        "id": 226549009,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497565
    },
    {
        "content": "<p>Maybe negligibly here but <code>array.into()</code> is pretty minimal</p>",
        "id": 226549059,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497577
    },
    {
        "content": "<p>Yeah</p>",
        "id": 226549065,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497581
    },
    {
        "content": "<p>And more than hypothetical but probable if you're throwing around lots of arrays.</p>",
        "id": 226549091,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497592
    },
    {
        "content": "<p>OK fair! explicit type conversion based on alignment actually completely satisfies me here. I... disagree on the idea that it's really that different in terms of overall data meaning though.</p>",
        "id": 226549290,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497675
    },
    {
        "content": "<p>but I may not understand what the difference is that you see.</p>",
        "id": 226549364,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497693
    },
    {
        "content": "<p>It's not very different, a SIMD vector is just a special type of array</p>",
        "id": 226549625,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497817
    },
    {
        "content": "<p>This also resolves my last question about whether we should remove From&lt;Scalar&gt;. The answer is clearly yes, today, although I might come back to this subject if an experiment I am likely to undertake bears fruit. Later. <strong>Not</strong> today.</p>",
        "id": 226549671,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497830
    },
    {
        "content": "<p>Right.</p>",
        "id": 226549676,
        "sender_full_name": "Jubilee",
        "timestamp": 1613497834
    },
    {
        "content": "<p>I like <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> 's criteria that <code>From</code> is usually appropriate for bidirectional conversions</p>",
        "id": 226549855,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497925
    },
    {
        "content": "<p>Like with arrays or vendor simd types</p>",
        "id": 226549902,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497940
    },
    {
        "content": "<p>eh, i don't know</p>",
        "id": 226549958,
        "sender_full_name": "Lokathor",
        "timestamp": 1613497975
    },
    {
        "content": "<p>Basically something that doesn't convey some special meaning.  I do think that splatting is a special meaning</p>",
        "id": 226549988,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613497987
    },
    {
        "content": "<p>you could have <code>u8::from(bool)</code> and that'd be a reasonable impl</p>",
        "id": 226550012,
        "sender_full_name": "Lokathor",
        "timestamp": 1613498005
    },
    {
        "content": "<p>but not the inverse</p>",
        "id": 226550033,
        "sender_full_name": "Lokathor",
        "timestamp": 1613498016
    },
    {
        "content": "<p>that's why you need two From impls to go both ways</p>",
        "id": 226550064,
        "sender_full_name": "Lokathor",
        "timestamp": 1613498031
    },
    {
        "content": "<p>indeed, <code>bool as u8</code> works!</p>",
        "id": 226550067,
        "sender_full_name": "Jubilee",
        "timestamp": 1613498033
    },
    {
        "content": "<p>You could just as easily fill the last lane with the scalar and the rest with zeros.  On x86 I think that would be an even more appropriate conversion</p>",
        "id": 226550069,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498033
    },
    {
        "content": "<p>It could be a TryFrom in the other direction</p>",
        "id": 226550091,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498044
    },
    {
        "content": "<p>sure sure</p>",
        "id": 226550141,
        "sender_full_name": "Lokathor",
        "timestamp": 1613498050
    },
    {
        "content": "<p>f32::try_from(f32xN) // only works if all lanes are identical</p>",
        "id": 226550181,
        "sender_full_name": "Lokathor",
        "timestamp": 1613498075
    },
    {
        "content": "<p>wheee</p>",
        "id": 226550187,
        "sender_full_name": "Lokathor",
        "timestamp": 1613498077
    },
    {
        "content": "<p>Right but I do think that's special meaning</p>",
        "id": 226550225,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498093
    },
    {
        "content": "<p>Which I think From probably shouldn't have?</p>",
        "id": 226550253,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498104
    },
    {
        "content": "<p>There's no question what it does when converting from arrays or vendor types</p>",
        "id": 226550309,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498132
    },
    {
        "content": "<p>I do think it's particularly confusing that on x86 an f32/f64 occupies an xmm register, which you could then interpret as a vector</p>",
        "id": 226550480,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498209
    },
    {
        "content": "<p>oh god</p>",
        "id": 226550496,
        "sender_full_name": "Jubilee",
        "timestamp": 1613498217
    },
    {
        "content": "<p>Actually the same is true for neon as well</p>",
        "id": 226550502,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498222
    },
    {
        "content": "<p>OH NO</p>",
        "id": 226550521,
        "sender_full_name": "Jubilee",
        "timestamp": 1613498228
    },
    {
        "content": "<p>Oh wow we weren't testing <code>From&lt;Scalar&gt;</code> anyways?</p>",
        "id": 226550848,
        "sender_full_name": "Jubilee",
        "timestamp": 1613498361
    },
    {
        "content": "<p>yeah nope.</p>",
        "id": 226551197,
        "sender_full_name": "Jubilee",
        "timestamp": 1613498493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> Actually I will say though that splatting is expected Rust semantics given, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mf\">3.0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"> </span><span class=\"c1\">// [3.0, 3.0, 3.0, 3.0]</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226551647,
        "sender_full_name": "Jubilee",
        "timestamp": 1613498676
    },
    {
        "content": "<p>I will also say though that implicit ty conversions are not. :^)</p>",
        "id": 226551834,
        "sender_full_name": "Jubilee",
        "timestamp": 1613498752
    },
    {
        "content": "<p>Yeah that's an explicit syntax for array broadcasting</p>",
        "id": 226551879,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498767
    },
    {
        "content": "<p>Arrays don't implementation From for scalars either</p>",
        "id": 226551925,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613498783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Removing.20From.3CScalar.3E/near/226550012\">said</a>:</p>\n<blockquote>\n<p>you could have <code>u8::from(bool)</code> and that'd be a reasonable impl<br>\nbut not the inverse</p>\n</blockquote>\n<p>My original statement was that <code>A: From&lt;B&gt;</code> is generally only reasonable if <code>B: TryFrom&lt;A&gt;</code> is reasonable.</p>\n<p>I agree that <code>A: From&lt;B&gt;</code> obviously doesn't mean <code>B: From&lt;A&gt;</code> is reasonable.</p>",
        "id": 226552599,
        "sender_full_name": "scottmcm",
        "timestamp": 1613499114
    },
    {
        "content": "<p>\"bidirectional if you squint\"</p>",
        "id": 226552883,
        "sender_full_name": "Jubilee",
        "timestamp": 1613499242
    },
    {
        "content": "<p>I guess to summarize my point, I would expect <code>From&lt;f32&gt; for SimdF32&lt;4&gt;</code> to be <code>_mm_set1_ps</code> (which emits no instructions) rather than <code>_mm_broadcast_ps</code> (which emits a <code>vbroadcast</code>), though I think it's confusing enough that we should have explicit functions for each</p>",
        "id": 226554216,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613499681
    },
    {
        "content": "<p>I think the really telling thing is that we didn't have the From conversion used implicitly or explicitly anywhere.</p>",
        "id": 226554541,
        "sender_full_name": "Jubilee",
        "timestamp": 1613499834
    },
    {
        "content": "<p>I think the <code>From</code>/<code>Into</code> with arrays (and maybe tuples) are the obvious ones.  Scalars feel different enough from simd to me for <code>From</code> to be the wrong mechanism.</p>",
        "id": 226555217,
        "sender_full_name": "scottmcm",
        "timestamp": 1613500159
    },
    {
        "content": "<p><code>let x: u8x8 = 1234_u128.to_le_bytes().into();</code> or similar seems fine.</p>",
        "id": 226555324,
        "sender_full_name": "scottmcm",
        "timestamp": 1613500210
    },
    {
        "content": "<p>oh that's cute.</p>",
        "id": 226555919,
        "sender_full_name": "Jubilee",
        "timestamp": 1613500435
    },
    {
        "content": "<p>Alternatively safe transmute whenever that's a thing</p>",
        "id": 226556044,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613500482
    },
    {
        "content": "<p>(Although that will of course be <code>to_ne_bytes</code>)</p>",
        "id": 226556128,
        "sender_full_name": "scottmcm",
        "timestamp": 1613500528
    },
    {
        "content": "<p>Ah true</p>",
        "id": 226556154,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613500540
    },
    {
        "content": "<p>PPC tests are refusing to boot again and I don't want to play the same games I did last night for an actually significant diff.</p>",
        "id": 226556263,
        "sender_full_name": "Jubilee",
        "timestamp": 1613500581
    },
    {
        "content": "<p>Tempted to move all those architectures to cross on gh actions</p>",
        "id": 226556313,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613500609
    },
    {
        "content": "<p>I think it's actually because the travis config is misspecified.</p>",
        "id": 226556351,
        "sender_full_name": "Jubilee",
        "timestamp": 1613500626
    },
    {
        "content": "<p>Oh maybe</p>",
        "id": 226556369,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613500632
    },
    {
        "content": "<p>See, I try to retrigger the build for those and I get</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code> Oh no! An error occurred. The job could not be restarted.\n</code></pre></div>\n\n</blockquote>\n<blockquote>\n<p>Branch \"no-scalar-from\" not included per configuration. </p>\n</blockquote>\n<p>and I think it's that the API request that I'm sending is identified as a branch request.</p>",
        "id": 226556790,
        "sender_full_name": "Jubilee",
        "timestamp": 1613500820
    },
    {
        "content": "<p>but we're set to \"only master\"</p>",
        "id": 226556801,
        "sender_full_name": "Jubilee",
        "timestamp": 1613500826
    },
    {
        "content": "<p>also cross/MIPS with docker also failed because docker lol</p>",
        "id": 226556842,
        "sender_full_name": "Jubilee",
        "timestamp": 1613500850
    },
    {
        "content": "<p>or I should say:<br>\nour Travis config is making retriggering those builds more annoying than it should be, and cross is not an improvement.</p>",
        "id": 226556904,
        "sender_full_name": "Jubilee",
        "timestamp": 1613500890
    },
    {
        "content": "<p>yeah when is safe transmute gonna be a thing</p>",
        "id": 226557079,
        "sender_full_name": "Lokathor",
        "timestamp": 1613500979
    },
    {
        "content": "<p>he asked knowingly</p>",
        "id": 226557084,
        "sender_full_name": "Lokathor",
        "timestamp": 1613500983
    },
    {
        "content": "<p>I do acknowledge Travis has gradually degraded towards being... unsuitable for our or anyone else's requirements, at least in FOSSware.</p>",
        "id": 226557152,
        "sender_full_name": "Jubilee",
        "timestamp": 1613501017
    },
    {
        "content": "<p>hehe.</p>",
        "id": 226557174,
        "sender_full_name": "Jubilee",
        "timestamp": 1613501033
    },
    {
        "content": "<p>amusing note: Rust is doing some Amazing generic inference on SIMD length.</p>",
        "id": 227217245,
        "sender_full_name": "Jubilee",
        "timestamp": 1613966567
    },
    {
        "content": "<p>\"what do you mean Jubilee?\" \"it's basically looking at the vector length I used elsewhere in a test and going 'huh so you want length N vectors, can do' and then things like splat automatically detect that.\"</p>",
        "id": 227217478,
        "sender_full_name": "Jubilee",
        "timestamp": 1613966804
    },
    {
        "content": "<p>( mentioned here because type inference was discussed... my splats are doing some wild things like inferring the const lane size. )</p>",
        "id": 227218018,
        "sender_full_name": "Jubilee",
        "timestamp": 1613967453
    },
    {
        "content": "<p>the inference system is actually pretty good but <em>the government</em> still doesn't want you having it work globally, just trying to make you do more paperwork writing types down everywhere!</p>",
        "id": 227222667,
        "sender_full_name": "Lokathor",
        "timestamp": 1613972936
    },
    {
        "content": "<p>the inferring relational system (IRS) actually knows all the types but TurboType lobbies rustc to make you write down types and make the type system more complicated anyways.</p>",
        "id": 227222823,
        "sender_full_name": "Jubilee",
        "timestamp": 1613973073
    }
]