[
    {
        "content": "<p>I'm making some really silly mistakes but I figure it's best to make the code public so that others can point me in the right direction.<br>\nWarning - big noobie mistakes ahead.</p>",
        "id": 240268813,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621991215
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/122\">https://github.com/rust-lang/stdsimd/pull/122</a></p>",
        "id": 240269070,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621991519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 240269118,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621991538
    },
    {
        "content": "<p>Type names are case sensitive, but also f64x4 should be a valid alias.</p>",
        "id": 240269244,
        "sender_full_name": "Jubilee",
        "timestamp": 1621991704
    },
    {
        "content": "<p>Caveats: Rust forte is not these nested for loops but rather chunked iteration that doesn't do bounds checking on every array element access. The benchmarks game explicitly ask to implement <a href=\"https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-java-2.html\">the Java algorithm</a>, but maybe there is room to tweak some <a href=\"https://parallel-rust-cpp.github.io/v0.html\">high performance</a> tricks out of it.</p>",
        "id": 240269280,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621991741
    },
    {
        "content": "<p>I tried <code>Simdf64(...)</code> stuff because I kept getting these:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">x</span>: <span class=\"nc\">f64x4</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                   </span><span class=\"o\">^^^</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">associated</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">SimdF64</span><span class=\"o\">&lt;</span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240269380,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621991832
    },
    {
        "content": "<p>Also, I looked around this chat for some more Playground examples but other than working out the test macros in my head I don't know other <code>stdsimd</code> examples lying around <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 240269480,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621991921
    },
    {
        "content": "<p>Ok turns out using <code>f64x4::new(...)</code> isn't kosher, so <code>f64x4::from_array([...])</code> was the way to go.</p>",
        "id": 240272178,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995046
    },
    {
        "content": "<p>Ah, we... probably want to have some sort of notes in the docs on that maybe?</p>",
        "id": 240272203,
        "sender_full_name": "Lokathor",
        "timestamp": 1621995077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> beats me.</p>",
        "id": 240272218,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995106
    },
    {
        "content": "<p>How can I make Rust not complain about this though?</p>",
        "id": 240272226,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995118
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(simd)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Body</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">f64x4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nc\">f64x4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">mass</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240272270,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995132
    },
    {
        "content": "<p>It says: <code>E0076 sIMD Vector should be homogenous. SIMD elements must have the same type</code>.</p>",
        "id": 240272290,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995161
    },
    {
        "content": "<p>you can't use repr(simd), for one</p>",
        "id": 240272293,
        "sender_full_name": "Lokathor",
        "timestamp": 1621995165
    },
    {
        "content": "<p>Oh, that fixes it.</p>",
        "id": 240272298,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995177
    },
    {
        "content": "<p>you also probably want to derive Clone and Copy</p>",
        "id": 240272309,
        "sender_full_name": "Lokathor",
        "timestamp": 1621995193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/240269280\">said</a>:</p>\n<blockquote>\n<p>Caveats: Rust forte is not these nested for loops but rather chunked iteration that doesn't do bounds checking on every array element access. The benchmarks game explicitly ask to implement <a href=\"https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-java-2.html\">the Java algorithm</a>, but maybe there is room to tweak some <a href=\"https://parallel-rust-cpp.github.io/v0.html\">high performance</a> tricks out of it.</p>\n</blockquote>\n<p>I don't particularly care about the benchmarks game website, but insofar as it does matter:<br>\nIterator is <strong>exactly</strong> a for loop, so the difference would be largely syntactic.<br>\nBecause a for loop <strong>creates</strong> an iterator.</p>",
        "id": 240272666,
        "sender_full_name": "Jubilee",
        "timestamp": 1621995631
    },
    {
        "content": "<p>Alright, replaced <code>sum()</code> with <code>horizontal_sum()</code> where relevant.</p>",
        "id": 240272971,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995966
    },
    {
        "content": "<p>Anyone have a clue what <code>write_to_slice_unaligned(...)</code> could be replaced with?</p>",
        "id": 240272999,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621995994
    },
    {
        "content": "<p>I think we may still need a function for that</p>",
        "id": 240273035,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621996049
    },
    {
        "content": "<p>You can do it with a pointer and unsafe</p>",
        "id": 240273045,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621996064
    },
    {
        "content": "<p>for <em>unaligned</em> you need the special function, even for pointers and unsafe</p>",
        "id": 240273049,
        "sender_full_name": "Lokathor",
        "timestamp": 1621996079
    },
    {
        "content": "<p>...is this a bad time to confess I've yet to work with pointers? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 240273104,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621996126
    },
    {
        "content": "<p>Yeah, you would cast the scalar pointer to a vector pointer and use <code>write_unaligned</code></p>",
        "id": 240273113,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621996140
    },
    {
        "content": "<p>Haha, no, in rust it's usually unnecessary</p>",
        "id": 240273118,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621996151
    },
    {
        "content": "<p>Garbage Collectors! They save you from thinking about pointers! <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span> !</p>",
        "id": 240273121,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621996151
    },
    {
        "content": "<p>you usually don't need pointers in rust</p>",
        "id": 240273127,
        "sender_full_name": "Lokathor",
        "timestamp": 1621996162
    },
    {
        "content": "<p>The difference is that <code>for</code> loop has a subtlety in that it supports certain more interesting kinds of control flow, which denies certain optimizations that can be used in the absence of them. Creating an iterator chain and doing equivalent calls limits the control flow options, and thus allows more optimizations to be used.</p>",
        "id": 240273130,
        "sender_full_name": "Jubilee",
        "timestamp": 1621996165
    },
    {
        "content": "<p>but i'm unclear why you're \"replacing\" write_to_slice_unaligned with something, because that sounds like it does precisely what you want</p>",
        "id": 240273146,
        "sender_full_name": "Lokathor",
        "timestamp": 1621996191
    },
    {
        "content": "<p>We don't have that function yet</p>",
        "id": 240273193,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621996210
    },
    {
        "content": "<p>oh that would do it</p>",
        "id": 240273200,
        "sender_full_name": "Lokathor",
        "timestamp": 1621996217
    },
    {
        "content": "<p>There's no such creative control flow in the benchmarks game algorithm, that I can see, and therefore no real semantic difference.</p>",
        "id": 240273222,
        "sender_full_name": "Jubilee",
        "timestamp": 1621996257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> don't these kinda for loops do inherent inbounds checking?</p>",
        "id": 240273245,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621996301
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">f64x4</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">N_BODIES</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"n\">N_BODIES</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bodies</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">bodies</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">].</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240273250,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621996313
    },
    {
        "content": "<p>That what I remember reading in the <code>High Performance </code> Rust book.</p>",
        "id": 240273298,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621996340
    },
    {
        "content": "<p>yeah those loops like that are (not)secretly worse in rust than using an iterator \"properly\"</p>",
        "id": 240273307,
        "sender_full_name": "Lokathor",
        "timestamp": 1621996367
    },
    {
        "content": "<p>Yes, you are correct.<br>\nHowever, you will notice that the value of <code>i</code> is totally deterministic.</p>",
        "id": 240273320,
        "sender_full_name": "Jubilee",
        "timestamp": 1621996385
    },
    {
        "content": "<p>Yeah, that's what I surmised - I know idiomatic iterator Rust is to known work around.</p>",
        "id": 240273333,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621996407
    },
    {
        "content": "<p>I'm also guessing that those bounds checking are going to cobble SIMDification attempts - they would in Julia.</p>",
        "id": 240273400,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621996476
    },
    {
        "content": "<p>They would, yes.</p>",
        "id": 240273428,
        "sender_full_name": "Jubilee",
        "timestamp": 1621996512
    },
    {
        "content": "<p>mostly (unless the size is static and llvm eliminates the checks), but it will also likely not be auto-simd because of the i/j/k interactions doin a bamboozle to llvm</p>",
        "id": 240273477,
        "sender_full_name": "Lokathor",
        "timestamp": 1621996563
    },
    {
        "content": "<p>Indeed, LLVM can only barely see through 2 layers of indirection here.</p>",
        "id": 240273512,
        "sender_full_name": "Jubilee",
        "timestamp": 1621996604
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/packed_simd/blob/master/src/api/slice/write_to_slice.rs\">https://github.com/rust-lang/packed_simd/blob/master/src/api/slice/write_to_slice.rs</a> Looks like this is the implementation for <code>write_to_slice_unaligned</code>.</p>",
        "id": 240273536,
        "sender_full_name": "Jubilee",
        "timestamp": 1621996644
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">target_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240273617,
        "sender_full_name": "Lokathor",
        "timestamp": 1621996764
    },
    {
        "content": "<p>Okay so, <code>write_to_slice_unaligned</code> is actually not very magical and it doesn't even do what i thought it did based on the name.</p>\n<p>so what you want is something like: <code>dest[sub_slice_selection_here].copy_from_slice(src_simd.to_array())</code></p>",
        "id": 240273875,
        "sender_full_name": "Lokathor",
        "timestamp": 1621997065
    },
    {
        "content": "<p>note that copy_from_slice requires that the dest and src have the same length, so you'll have to pick the correct amount of elements from dest based on the lane count of size</p>",
        "id": 240273886,
        "sender_full_name": "Lokathor",
        "timestamp": 1621997100
    },
    {
        "content": "<p>I am not convinced that's what you want?  I'd be curious to see the codegen</p>",
        "id": 240274104,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621997397
    },
    {
        "content": "<p>wait, do we have an <code>simd_finvsqrt</code> intrinsic function? Those are definitely useful.<br>\nMy ripgreppin' says no.</p>",
        "id": 240277849,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622002382
    },
    {
        "content": "<p>It seems the inverse sqrt SIMD intrinsic  (<code>_mm_rsqrt_ps</code>) is available from the <a href=\"https://llvm.org/doxygen/X86IntrinsicsInfo_8h_source.html\">langref</a> and this neat <a href=\"https://youtu.be/4Gs_CA_vm3o?t=2424\">tutorial video</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4Gs_CA_vm3o\" href=\"https://youtu.be/4Gs_CA_vm3o?t=2424\"><img src=\"https://uploads.zulipusercontent.net/30b3ad7d7d3066bfe28ee5400da3091fa653c91d/68747470733a2f2f692e7974696d672e636f6d2f76692f3447735f43415f766d336f2f64656661756c742e6a7067\"></a></div>",
        "id": 240278354,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622003131
    },
    {
        "content": "<p>I'm working on adding an rsqrt function to vector-math, it will likely share implementations with the fallback sqrt function. Btw, I think rsqrt is a better name than invsqrt, since invsqrt could mean either inverse sqrt as in reciprocal or as in inverse function (which would end up being <code>x*x</code>)</p>",
        "id": 240279697,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622004752
    },
    {
        "content": "<p>Ugh <span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> , I just missed your comment <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <a href=\"https://github.com/rust-lang/stdsimd/pull/123\">https://github.com/rust-lang/stdsimd/pull/123</a></p>",
        "id": 240280348,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622005689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/240274104\">said</a>:</p>\n<blockquote>\n<p>I am not convinced that's what you want?  I'd be curious to see the codegen</p>\n</blockquote>\n<p>maybe it's not what you want, but that's the equivalent of what the <code>write_to_slice_unaligned</code> code does</p>",
        "id": 240281830,
        "sender_full_name": "Lokathor",
        "timestamp": 1622007915
    },
    {
        "content": "<p>I opened a PR with the function doing what I'd expect it to do <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 240333184,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622039359
    },
    {
        "content": "<p>caleb you just did what I was already saying XD</p>",
        "id": 240335033,
        "sender_full_name": "Lokathor",
        "timestamp": 1622040047
    },
    {
        "content": "<p>Lol maybe I was confused</p>",
        "id": 240335122,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622040076
    },
    {
        "content": "<p>I was worried about using from_array</p>",
        "id": 240335142,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622040085
    },
    {
        "content": "<p>worried how?</p>",
        "id": 240353969,
        "sender_full_name": "Jubilee",
        "timestamp": 1622047251
    },
    {
        "content": "<p>In the context of reading and writing from a slice it would be an extra conversion that the compiler might get confused by?  It might be fine</p>",
        "id": 240354059,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047298
    },
    {
        "content": "<p>But I'd rather just read the vector type directly</p>",
        "id": 240354082,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047308
    },
    {
        "content": "<p>With an unaligned read</p>",
        "id": 240354102,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047319
    },
    {
        "content": "<p>if we add a function every single time that LLVM might be confused we might as well write in assembly.</p>",
        "id": 240354576,
        "sender_full_name": "Jubilee",
        "timestamp": 1622047531
    },
    {
        "content": "<p>Hmm maybe I'm missing something, I think reading from slices is something that is common and we should have in our API? And it makes more sense to do it as a single pointer read IMO</p>",
        "id": 240354799,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047611
    },
    {
        "content": "<p>I think people should just have slices of f32x4 (or whatever type).</p>",
        "id": 240354997,
        "sender_full_name": "Lokathor",
        "timestamp": 1622047703
    },
    {
        "content": "<p>It's more that reading from and writing to slices is not completely obvious so we can provide the implementation</p>",
        "id": 240355061,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> that would require aligned loads and stores</p>",
        "id": 240355138,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047766
    },
    {
        "content": "<p>correct</p>",
        "id": 240355168,
        "sender_full_name": "Lokathor",
        "timestamp": 1622047780
    },
    {
        "content": "<p>rather, it would give them aligned loads and stores is a better way to say it</p>",
        "id": 240355276,
        "sender_full_name": "Lokathor",
        "timestamp": 1622047808
    },
    {
        "content": "<p>Yes, and you can use <code>align_to</code> for that</p>",
        "id": 240355413,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047876
    },
    {
        "content": "<p>But in many situations you can't use aligned loads and stores</p>",
        "id": 240355469,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047893
    },
    {
        "content": "<p>Arm doesn't make a distinction and most Intel CPUs don't have a significant penalty for unaligned access so most algorithms I've worked with use unaligned accesses exclusively</p>",
        "id": 240355768,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622047994
    },
    {
        "content": "<p>It depends on the unaligned access. The performance penalty varies from +0% to +50%.</p>",
        "id": 240358264,
        "sender_full_name": "Jubilee",
        "timestamp": 1622049058
    },
    {
        "content": "<p>Significantly lower overhead than a memcpy to realign inherently unaligned data</p>",
        "id": 240358325,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049092
    },
    {
        "content": "<p>We shouldn't preclude unaligned accesses</p>",
        "id": 240358369,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049116
    },
    {
        "content": "<p>Or even discourage them</p>",
        "id": 240358423,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049126
    },
    {
        "content": "<p>I am pretty sure LLVM already emits vectorized memcpy, actually.</p>",
        "id": 240359269,
        "sender_full_name": "Jubilee",
        "timestamp": 1622049496
    },
    {
        "content": "<p>It does but that's not what I mean.</p>",
        "id": 240359397,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049546
    },
    {
        "content": "<p>If you have 1000 f32s, inherently unaligned, I'd rather just do unaligned access than allocate new aligned memory and copy it</p>",
        "id": 240359471,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049582
    },
    {
        "content": "<p>There's nothing wrong with doing unaligned accesses</p>",
        "id": 240359509,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049598
    },
    {
        "content": "<p>????????</p>",
        "id": 240359592,
        "sender_full_name": "Jubilee",
        "timestamp": 1622049618
    },
    {
        "content": "<p>If you look at vector libraries like IPP or MKL they don't even bother using aligned access</p>",
        "id": 240359618,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049632
    },
    {
        "content": "<p>I wasn't aware I was arguing that.</p>",
        "id": 240359624,
        "sender_full_name": "Jubilee",
        "timestamp": 1622049635
    },
    {
        "content": "<p>I thought you were arguing against the functions I added in my PR</p>",
        "id": 240359684,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049663
    },
    {
        "content": "<p>I think we're on different pages haha</p>",
        "id": 240359740,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622049696
    },
    {
        "content": "<p>If I want to do that then there's a million issues I could have with them that don't have to do with alignment, and I just woke up so I haven't even decided how many nits I want to pick before I go to sleep. :^)</p>",
        "id": 240359826,
        "sender_full_name": "Jubilee",
        "timestamp": 1622049729
    },
    {
        "content": "<p>so it's more that I'm here and going \"hey guys what's going on in this thread\"</p>",
        "id": 240359985,
        "sender_full_name": "Jubilee",
        "timestamp": 1622049805
    },
    {
        "content": "<p>Good morning <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 240360042,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622049837
    },
    {
        "content": "<p>So the conclusion to <code>dmags.write_to_slice_unaligned(&amp;mut mag[i...]);</code> is that I should use which method instead? <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I think you merged a PR with the equivalent function right?</p>",
        "id": 240974836,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622567955
    },
    {
        "content": "<p>No PR has been merged yet</p>",
        "id": 240974901,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622567992
    },
    {
        "content": "<p>alright I'll refactor the <code>run_k</code> function instead for now.</p>",
        "id": 240975337,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622568181
    },
    {
        "content": "<p>Alright, I've refactored it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 240976802,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622568819
    },
    {
        "content": "<p>OK, I've re-read the code. I've tried reading the <code>packed_simd</code> implementation of <code>write_to_slice_unaligned</code> but the <code>impl_f!</code> rabbit hole got waaay too gnarly.<br>\n<span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> any ideas on how to proceed?</p>",
        "id": 240978255,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622569452
    },
    {
        "content": "<p>phew, finally found it <a href=\"https://github.com/rust-lang/packed_simd/blob/f60e900f4ceb71303baa37ff8b41ee7d490c01bf/src/api/slice/write_to_slice.rs\">https://github.com/rust-lang/packed_simd/blob/f60e900f4ceb71303baa37ff8b41ee7d490c01bf/src/api/slice/write_to_slice.rs</a></p>",
        "id": 240979688,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622570125
    },
    {
        "content": "<p>Trying to monkey patch this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_to_slice_aligned_unchecked</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"cp\">$elem_ty</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"cp\">$elem_count</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">target_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">get_unchecked_mut</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"cp\">$elem_ty</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"fm\">debug_assert_eq!</span><span class=\"p\">(</span><span class=\"n\">target_ptr</span><span class=\"p\">.</span><span class=\"n\">align_offset</span><span class=\"p\">(</span><span class=\"k\">crate</span>::<span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"cp\">#[allow(clippy::cast_ptr_alignment)]</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">target_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240981275,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622570818
    },
    {
        "content": "<p>with something like this:</p>",
        "id": 240981293,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622570827
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_to_slice_unaligned</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">SimdF64</span>::<span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">target_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">get_unchecked_mut</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">target_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimdF64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240981334,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622570843
    },
    {
        "content": "<p>uh, well that doesn't really write it to a slice in an unaligned way</p>",
        "id": 240988638,
        "sender_full_name": "Lokathor",
        "timestamp": 1622574171
    },
    {
        "content": "<p>dmags is just f64x2 and you're writing it to a slice with 2 elements.<br>\nfor now, just scalarize it, as that is the safest way to handle it.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">mag</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmags</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"n\">mag</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmags</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 240989087,
        "sender_full_name": "Jubilee",
        "timestamp": 1622574437
    },
    {
        "content": "<p>Gotcha.</p>",
        "id": 241069399,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622578648
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">nbody</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">169</span>:<span class=\"mi\">26</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">169</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">OUTPUT</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">f64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.169075164</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.169087605</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                          </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">allocation</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">allowed</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How do I make a <code>const</code> vector again?</p>",
        "id": 241069994,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622578936
    },
    {
        "content": "<p><code>const OUTPUT: [f64; 2] = [1.0, 2.0];</code> seems to have done it.</p>",
        "id": 241070374,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622579130
    },
    {
        "content": "<p>yeah.</p>",
        "id": 241071188,
        "sender_full_name": "Jubilee",
        "timestamp": 1622579516
    },
    {
        "content": "<p>and you can use the const union hack if you need an actual simd value as a const.</p>",
        "id": 241083082,
        "sender_full_name": "Lokathor",
        "timestamp": 1622586126
    },
    {
        "content": "<p>(but the const union hack doesn't work in const fn because... don't remember)</p>",
        "id": 241083131,
        "sender_full_name": "Lokathor",
        "timestamp": 1622586162
    },
    {
        "content": "<p>Something something dependent types</p>",
        "id": 241084560,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622587190
    },
    {
        "content": "<p>Probably.</p>",
        "id": 241084562,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622587193
    },
    {
        "content": "<p>I don't know those wizardries yet <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 241089681,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622591159
    },
    {
        "content": "<p>you <em>probably</em> don't need it.</p>",
        "id": 241090130,
        "sender_full_name": "Jubilee",
        "timestamp": 1622591513
    },
    {
        "content": "<p>yeah it's just a dumb thing some libs do. in a benchmark example it's not necessary</p>",
        "id": 241090241,
        "sender_full_name": "Lokathor",
        "timestamp": 1622591621
    },
    {
        "content": "<p>Oh sweet - I just need the floating point <code>assert_eq!</code> where can I get that for the example?</p>",
        "id": 241090361,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622591757
    },
    {
        "content": "<p>\"floating point assert_eq\"?</p>",
        "id": 241090457,
        "sender_full_name": "Jubilee",
        "timestamp": 1622591841
    },
    {
        "content": "<p>assert_eq works on f32 and f64 arrays already</p>",
        "id": 241091357,
        "sender_full_name": "Lokathor",
        "timestamp": 1622592688
    },
    {
        "content": "<p>however, you <em>might</em> want an assert_approximately macro instead</p>",
        "id": 241091369,
        "sender_full_name": "Lokathor",
        "timestamp": 1622592706
    },
    {
        "content": "<p>or just a function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[track_caller]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">assert_within</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">max_diff</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"o\">-</span><span class=\"n\">bx</span><span class=\"p\">).</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">max_diff</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"some values exceeded the maximum allowed difference of {}:</span><span class=\"se\">\\n</span><span class=\"s\">A: {:?}</span><span class=\"se\">\\n</span><span class=\"s\">B:{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_diff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>anything like that, which checks that each lane is close enough to a given value.</p>\n<p>Of course this doesn't handle nan so, ya know.</p>",
        "id": 241091688,
        "sender_full_name": "Lokathor",
        "timestamp": 1622593030
    },
    {
        "content": "<p>I get this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tests</span>::<span class=\"n\">test</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"o\">-</span><span class=\"mf\">0.16907516382852447</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"o\">-</span><span class=\"mf\">0.169075164</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">nbody</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">180</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241091784,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622593116
    },
    {
        "content": "<p>I like Lokathor's answer re: <code>assert_within</code>.</p>",
        "id": 241091842,
        "sender_full_name": "Jubilee",
        "timestamp": 1622593200
    },
    {
        "content": "<p>yes the standard assert will only use the normal <code>==</code> operator, which is generally too exacting with floats, which is why one generally needs to use an approximation function instead.</p>",
        "id": 241091900,
        "sender_full_name": "Lokathor",
        "timestamp": 1622593219
    },
    {
        "content": "<p>in part of my safe_arch test suite, for example, i have these helpers:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(dead_code)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">approx_eq_f32</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.00000001</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[allow(dead_code)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">approx_eq_f64</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.00000000001</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241091937,
        "sender_full_name": "Lokathor",
        "timestamp": 1622593266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> alright, tests are passing locally with a small fudge on the floating point equality</p>",
        "id": 241092768,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622593939
    },
    {
        "content": "<p>Can I get any eyes on <a href=\"https://github.com/rust-lang/stdsimd/pull/122\">https://github.com/rust-lang/stdsimd/pull/122</a> please team?</p>",
        "id": 241092782,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622593953
    },
    {
        "content": "<p>well CI is very unhappy at the latest push</p>",
        "id": 241093102,
        "sender_full_name": "Lokathor",
        "timestamp": 1622594223
    },
    {
        "content": "<p>Wow, rude.</p>",
        "id": 241093129,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622594250
    },
    {
        "content": "<p>So uh, how do people inspect the LLVM IR and Assembly that's outputted by each function?<br>\nI got spoiled that in Julia I can do <code>@code_llvm foo(x)</code> and that will just work <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 241093193,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622594298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I think it's because I didn't have a <code>fn main()</code></p>",
        "id": 241093800,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622594847
    },
    {
        "content": "<p>cargo will uhm... do it... somehow?</p>",
        "id": 241093841,
        "sender_full_name": "Lokathor",
        "timestamp": 1622594881
    },
    {
        "content": "<p>i haven't had to do it outside of godbolt in ages i forget how to make cargo do it</p>",
        "id": 241093890,
        "sender_full_name": "Lokathor",
        "timestamp": 1622594895
    },
    {
        "content": "<p>You can do <code>-Cemit=llvm-ir</code> I think</p>",
        "id": 241093934,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622594943
    },
    {
        "content": "<p>yeah SO says <code>cargo rustc -- --emit=llvm-ir</code> will do it.</p>",
        "id": 241093951,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622594961
    },
    {
        "content": "<p>hmmm - It says the build finished but nothing printed to my terminal - does it dump the llvm-ir into <code>target/</code> or something?</p>",
        "id": 241094079,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595067
    },
    {
        "content": "<p>It will save it to <code>target/{mode}/deps/{crate}.ll</code></p>",
        "id": 241094094,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622595084
    },
    {
        "content": "<p>gotcha</p>",
        "id": 241094107,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595095
    },
    {
        "content": "<p>Mode meaning debug or release (or a cross compile target)</p>",
        "id": 241094130,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622595118
    },
    {
        "content": "<p>It will actually emit IR for all of your dependencies as well which is occasionally useful</p>",
        "id": 241094189,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622595144
    },
    {
        "content": "<p>oof, there's quite a few files here</p>",
        "id": 241094245,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595204
    },
    {
        "content": "<p>hmmmm didn't find it</p>",
        "id": 241094341,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595271
    },
    {
        "content": "<p>yeah the interface for that emit thing is... poor</p>",
        "id": 241094373,
        "sender_full_name": "Lokathor",
        "timestamp": 1622595307
    },
    {
        "content": "<p>Y'all are missing out!</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n<span class=\"n\">foo</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@code_llvm</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">)</span>\n<span class=\"p\">;</span>  <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">within</span> <span class=\"sb\">`foo'</span>\n<span class=\"sb\">define double @julia_foo_718(double %0) {</span>\n<span class=\"sb\">top:</span>\n<span class=\"sb\">; ┌ @ intfuncs.jl:312 within `</span><span class=\"sa\">literal_pow</span><span class=\"o\">'</span>\n<span class=\"p\">;</span> <span class=\"n\">│┌</span> <span class=\"err\">@</span> <span class=\"n\">float</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">332</span> <span class=\"n\">within</span> <span class=\"sb\">`*'</span>\n<span class=\"sb\">    %1 = fmul double %0, %0</span>\n<span class=\"sb\">; └└</span>\n<span class=\"sb\">  ret double %1</span>\n<span class=\"sb\">}</span>\n\n<span class=\"sb\">julia&gt; @code_llvm foo(3)</span>\n<span class=\"sb\">;  @ REPL[1]:1 within `</span><span class=\"sa\">foo</span><span class=\"o\">'</span>\n<span class=\"n\">define</span> <span class=\"n\">i64</span> <span class=\"nd\">@julia_foo_735</span><span class=\"p\">(</span><span class=\"n\">i64</span> <span class=\"n\">signext</span> <span class=\"o\">%</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"kt\">top</span><span class=\"o\">:</span>\n<span class=\"p\">;</span> <span class=\"kt\">┌</span> <span class=\"err\">@</span> <span class=\"kt\">intfuncs</span><span class=\"o\">.</span><span class=\"kt\">jl</span><span class=\"o\">:</span><span class=\"mi\">312</span> <span class=\"kt\">within</span> <span class=\"sb\">`literal_pow'</span>\n<span class=\"sb\">; │┌ @ int.jl:88 within `</span><span class=\"o\">*</span><span class=\"err\">'</span>\n    <span class=\"o\">%</span><span class=\"mi\">1</span> <span class=\"o\">=</span> <span class=\"kt\">mul</span> <span class=\"kt\">i64</span> <span class=\"o\">%</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">0</span>\n<span class=\"p\">;</span> <span class=\"kt\">└└</span>\n  <span class=\"kt\">ret</span> <span class=\"kt\">i64</span> <span class=\"o\">%</span><span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 241094477,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595383
    },
    {
        "content": "<p>Rust regularly has worse tooling than the latest and greatest up and coming langs :( oh well, we got language features</p>",
        "id": 241094592,
        "sender_full_name": "Lokathor",
        "timestamp": 1622595524
    },
    {
        "content": "<p>I don't buy that - you're compiler errors are a work of art!</p>",
        "id": 241094610,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595546
    },
    {
        "content": "<p>Julia's target has been that performance interactivity from the get-go though, so it tracks that it's so good.</p>",
        "id": 241094633,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595572
    },
    {
        "content": "<p>Alright, that should be good enough for now, if I can just verify that the proper assembly is emitted</p>",
        "id": 241095043,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622595973
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code> cargo rustc --release --example nbody -- --emit<span class=\"o\">=</span>llvm-ir\n</code></pre></div>",
        "id": 241095202,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622596142
    },
    {
        "content": "<p>I'm trying that ^ and I still can't get the <code>llvm-ir</code> to be emmitted, or <code>asm</code></p>",
        "id": 241095216,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622596160
    },
    {
        "content": "<p>If you grep <code>target</code> do you have any <code>.ll</code> files?</p>",
        "id": 241095231,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622596186
    },
    {
        "content": "<p>Only some produced by <code>num_traits</code></p>",
        "id": 241095307,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622596260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> didn't you have a trick for getting <code>core_simd</code> in the Rust Playground to emit asm/llvm-ir?</p>",
        "id": 241095521,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622596445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241095521\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> didn't you have a trick for getting <code>core_simd</code> in the Rust Playground to emit asm/llvm-ir?</p>\n</blockquote>\n<p>the <code>..</code> button next to <code>Run</code></p>",
        "id": 241096081,
        "sender_full_name": "Jubilee",
        "timestamp": 1622596970
    },
    {
        "content": "<p>Do you have a MWE? My imports are borked here.</p>",
        "id": 241096102,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622597006
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=791999c26a2850e5b91b069ab21849db\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=791999c26a2850e5b91b069ab21849db</a></p>",
        "id": 241096219,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622597130
    },
    {
        "content": "<p>it's not gonna work.</p>",
        "id": 241096539,
        "sender_full_name": "Jubilee",
        "timestamp": 1622597413
    },
    {
        "content": "<p>the playground only uses the top 100 crates on <a href=\"http://crates.io\">crates.io</a> ^^;</p>",
        "id": 241097983,
        "sender_full_name": "Jubilee",
        "timestamp": 1622599059
    },
    {
        "content": "<p><em>flashes his \"two crates in the playground\" medal</em></p>",
        "id": 241099522,
        "sender_full_name": "Lokathor",
        "timestamp": 1622601132
    },
    {
        "content": "<p>Ah shucks.</p>",
        "id": 241099949,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622601744
    },
    {
        "content": "<p>Oh grats <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span></p>",
        "id": 241099953,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622601753
    },
    {
        "content": "<p>Alright. Back to poking cargo till it spits out assembly.</p>",
        "id": 241099959,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622601789
    },
    {
        "content": "<p>But tomorrow.</p>",
        "id": 241099964,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622601798
    },
    {
        "content": "<p>the secret is to make very low level utility crates and then get them into everything, watch that daily download count skyrocket to the moon like GameStop.</p>",
        "id": 241100066,
        "sender_full_name": "Lokathor",
        "timestamp": 1622601942
    },
    {
        "content": "<p>stuff used in the rust cookbook <a href=\"https://rust-lang-nursery.github.io/rust-cookbook/\">https://rust-lang-nursery.github.io/rust-cookbook/</a> is also on the playground, but you have to be able to justify inclusion in the cookbook somewhat.</p>",
        "id": 241109475,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622614697
    },
    {
        "content": "<p>Alright, if anyone can help verify that the current PR does simdify the hot loop appropriately it's ready to merge.</p>",
        "id": 241165211,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622647474
    },
    {
        "content": "<p>Also totally off-topic but if anyone wants to read a super WIP blog post on going from Julia to Rust here is my entry so far: <a href=\"https://miguelraz.github.io/blog/juliatorust/\">https://miguelraz.github.io/blog/juliatorust/</a></p>",
        "id": 241303222,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622660000
    },
    {
        "content": "<p>Alright I'm starting the <code>dot_product.rs</code> benchmark.</p>",
        "id": 241306050,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661357
    },
    {
        "content": "<p>What's the difference between <code>&amp;[f32]</code> and <code>[f32; 4])</code> here?</p>",
        "id": 241306122,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661377
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Code taken from the `packed_simd` crate</span>\n<span class=\"c1\">// Run this code with `cargo test --example dot_product`</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core_simd</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dot_prod</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chunks_exact</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chunks_exact</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//.sum::&lt;f32x4&gt;()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">horizontal_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Empty main to make cargo happy</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(test)]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">tests</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">7.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">8.0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">8.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">7.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">6.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dot_prod</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241306149,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661393
    },
    {
        "content": "<p>Because rustc complains that:</p>",
        "id": 241306164,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661405
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0631</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">dot_product</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">10</span>:<span class=\"mi\">14</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"o\">^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">_</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">([</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">_</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0599</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">zip</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">ChunksExact</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">([</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SimdF32</span><span class=\"o\">&lt;</span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">SimdF32</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"o\">&gt;</span>::<span class=\"n\">from_array</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241306196,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661418
    },
    {
        "content": "<p>I'm guessing that <code>f(&amp;[f32])</code> expects an array of floats, and <code>f([f32 ; 4])</code> expects an array of precisely 4 f32's.</p>",
        "id": 241306260,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661456
    },
    {
        "content": "<p>Original code is here if anyone wants to know <a href=\"https://github.com/rust-lang/packed_simd/blob/master/examples/dot_product/src/simd.rs\">https://github.com/rust-lang/packed_simd/blob/master/examples/dot_product/src/simd.rs</a></p>",
        "id": 241306292,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661476
    },
    {
        "content": "<p>Nice blog post!</p>",
        "id": 241306911,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622661738
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> I don't think I know of many \"Julia to Rust\" guides so I might as well write up my learnings.</p>",
        "id": 241306982,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622661773
    },
    {
        "content": "<p>ermahgerd I just found out about <code>cargo watch</code> from going through the rustlings again!</p>",
        "id": 241334797,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622678506
    },
    {
        "content": "<p>Oooh, the Struct  update syntax constructor is neat!</p>",
        "id": 241336917,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622680653
    },
    {
        "content": "<p>yes!</p>",
        "id": 241339833,
        "sender_full_name": "Jubilee",
        "timestamp": 1622683946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241334797\">said</a>:</p>\n<blockquote>\n<p>ermahgerd I just found out about <code>cargo watch</code> from going through the rustlings again!</p>\n</blockquote>\n<p>Oh yeah, watch is essential. Better than RA really.</p>",
        "id": 241351771,
        "sender_full_name": "Lokathor",
        "timestamp": 1622700590
    },
    {
        "content": "<p>RA?</p>",
        "id": 241404100,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622732793
    },
    {
        "content": "<p>Rust-Analyzer</p>",
        "id": 241405364,
        "sender_full_name": "Lokathor",
        "timestamp": 1622733268
    },
    {
        "content": "<p>Alright - I redid the rustlings. Feeling a bit sharper with my Rust now. Still no big fights with the borrow checker but all is well.</p>",
        "id": 241447966,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622751989
    },
    {
        "content": "<p>Anyone want to help me out with the code snippet above?</p>",
        "id": 241447983,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622751998
    },
    {
        "content": "<p>or merge the <code>nbody</code> too.</p>",
        "id": 241448977,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622752560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241306122\">said</a>:</p>\n<blockquote>\n<p>What's the difference between <code>&amp;[f32]</code> and <code>[f32; 4])</code> here?</p>\n</blockquote>\n<blockquote>\n<p>I'm guessing that <code>f(&amp;[f32])</code> expects an array of floats, and <code>f([f32 ; 4])</code> expects an array of precisely 4 f32's.</p>\n</blockquote>\n<p>Mostly correct. So, <code>&amp;[T]</code> is the signature for a slice. <code>[T; N]</code> is the signature for an array.</p>",
        "id": 241458526,
        "sender_full_name": "Jubilee",
        "timestamp": 1622756112
    },
    {
        "content": "<p>(Minor terminology nitpick: technically <code>[T]</code> is a slice, so <code>&amp;[T]</code> expects a reference to a slice, like how <code>&amp;[T; N]</code> expects a reference to an array.  Conversationally, though, it is quite common to elide the \"reference to\" for DSTs, since they're nearly always mentioned under indirection.)</p>",
        "id": 241462351,
        "sender_full_name": "scottmcm",
        "timestamp": 1622757970
    },
    {
        "content": "<p>This is true, because <code>&amp;mut [T]</code> is a mutable reference to a slice, yes.<br>\n...does anything actually operate on <code>[T]</code> directly without first having indirection?</p>",
        "id": 241462774,
        "sender_full_name": "Jubilee",
        "timestamp": 1622758189
    },
    {
        "content": "<p>They can be <em>mentioned</em> without indirection in things like <code>impl Index&lt;usize&gt; for [u32]</code> or <code>impl PartialOrd for str</code>.</p>\n<p>Certainly in stable there's no way to <em>operate</em> on them directly, though.  (unsized-rvalues might allow it in some cases in nightly.)</p>",
        "id": 241463128,
        "sender_full_name": "scottmcm",
        "timestamp": 1622758378
    },
    {
        "content": "<p>fair enough</p>",
        "id": 241470310,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622763612
    },
    {
        "content": "<p>thanks for the input peeps</p>",
        "id": 241470318,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622763620
    },
    {
        "content": "<p>...Still don't know how to make the code work.</p>",
        "id": 241470382,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622763704
    },
    {
        "content": "<p>I'ld also ideally like to show a case where the array is not a neat mutliple of 4 and how to handle that</p>",
        "id": 241470395,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622763721
    },
    {
        "content": "<p>I think <code>rchunks_mut_exact</code> is the way to go or something like that</p>",
        "id": 241470441,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622763734
    },
    {
        "content": "<p>yeah but then you can't use a for loop</p>",
        "id": 241472335,
        "sender_full_name": "Lokathor",
        "timestamp": 1622765551
    },
    {
        "content": "<p>you have to work the iterator manually, because a for loop consumes it</p>",
        "id": 241472344,
        "sender_full_name": "Lokathor",
        "timestamp": 1622765570
    },
    {
        "content": "<p>so something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_slice</span><span class=\"p\">.</span><span class=\"n\">chunks_exact_mut</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// use a chunk</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">scrap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">into_remainder</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"c1\">// handle the scrap</span>\n</code></pre></div>",
        "id": 241472433,
        "sender_full_name": "Lokathor",
        "timestamp": 1622765644
    },
    {
        "content": "<p>Since we're on nightly, it'd be totally legit to use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.array_chunks\">https://doc.rust-lang.org/std/primitive.slice.html#method.array_chunks</a></p>",
        "id": 241473836,
        "sender_full_name": "Jubilee",
        "timestamp": 1622767295
    },
    {
        "content": "<p>I always support <code>as_chunks</code> (or <code>as_rchunks</code> or <code>as_chunks_unchecked</code>) <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 241477877,
        "sender_full_name": "scottmcm",
        "timestamp": 1622769492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">chunks</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">scrap</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_slice</span><span class=\"p\">.</span><span class=\"n\">as_chunks_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">chunks</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// use a chunk</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// handle the scrap</span>\n</code></pre></div>",
        "id": 241478181,
        "sender_full_name": "scottmcm",
        "timestamp": 1622769563
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> 1 down, a few more to go <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 241563007,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622825285
    },
    {
        "content": "<p>Thanks for the merge <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 241563014,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622825291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I think you can click the box for <code>N-body</code> here now</p>",
        "id": 241563767,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622825646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> yeah my code is just looking... not pretty:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dot_prod</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chunks_exact_mut</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chunks_exact_mut</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_simd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b_simd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">iter2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//...</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241564603,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622826005
    },
    {
        "content": "<p>checked off!</p>",
        "id": 241565747,
        "sender_full_name": "Jubilee",
        "timestamp": 1622826448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> Iterators are, as mentioned, library code, with the caveat that the Rust <code>std</code> is allowed to internally use certain special features which are not fully implemented in the language yet, because it doesn't expose those to public APIs.</p>",
        "id": 241566478,
        "sender_full_name": "Jubilee",
        "timestamp": 1622826831
    },
    {
        "content": "<p>So if you have a Vec that you call IntoIterator on, and then call a bunch of methods on it that would skip around and iterate over certain sections of it, Rust has certain unsafe traits like TrustedLen and TrustedRandomAccess implemented on Vec which allow it to just have the iteration jump ahead and operate in that way, and LLVM then carries it the rest of the way in optimization.</p>",
        "id": 241566675,
        "sender_full_name": "Jubilee",
        "timestamp": 1622826939
    },
    {
        "content": "<p>TrustedLen is publicly implementable IIRC but you can't do that with TrustedRandomAccess.</p>",
        "id": 241566754,
        "sender_full_name": "Jubilee",
        "timestamp": 1622826964
    },
    {
        "content": "<p>and you have one of the occasional library warts in that technically TRA exposes a sealed method that is marked <code>__iterator_get_unchecked</code> <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 241567033,
        "sender_full_name": "Jubilee",
        "timestamp": 1622827104
    },
    {
        "content": "<p>btw, anyone know how to get <code>examples/dot_product.rs</code> to work with <code>cargo watch</code>?</p>",
        "id": 241567790,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622827480
    },
    {
        "content": "<p>you probably want to be using<br>\n<code>cargo watch -c -x \"run --examples dot_product\"</code></p>",
        "id": 241570726,
        "sender_full_name": "Lokathor",
        "timestamp": 1622828889
    },
    {
        "content": "<p>-c is optional i just like it for clarity</p>",
        "id": 241570753,
        "sender_full_name": "Lokathor",
        "timestamp": 1622828906
    },
    {
        "content": "<p>Gotcha, lemme try.</p>",
        "id": 241571169,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622829101
    },
    {
        "content": "<p>oooh, nice call on the <code>-c</code>. Lemme add it to the diary.</p>",
        "id": 241571225,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622829122
    },
    {
        "content": "<p>Thanks! Do you mind being credited as <code>Lokathor</code> on the diary <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> ?</p>",
        "id": 241572648,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622829810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241472433\">said</a>:</p>\n<blockquote>\n<p>so something like:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_slice</span><span class=\"p\">.</span><span class=\"n\">chunks_exact_mut</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// use a chunk</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">scrap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">into_remainder</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"c1\">// handle the scrap</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm really trying to rewrite the example to use this with iterators but I'm coming up blank.</p>",
        "id": 241573565,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622830266
    },
    {
        "content": "<p>yeah Lokathor is fine</p>",
        "id": 241573704,
        "sender_full_name": "Lokathor",
        "timestamp": 1622830353
    },
    {
        "content": "<p>and you're already using iterators!</p>",
        "id": 241573717,
        "sender_full_name": "Lokathor",
        "timestamp": 1622830362
    },
    {
        "content": "<p>yeah but look at this neat code I'm trying to port</p>",
        "id": 241573843,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622830439
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dot_prod</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chunks_exact</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_slice_unaligned</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chunks_exact</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_slice_unaligned</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">sum</span>::<span class=\"o\">&lt;</span><span class=\"n\">f32x4</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241573935,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622830480
    },
    {
        "content": "<p>...and the <code>f32x4::from_slice_unaligned</code> is not something I can easily <code>map</code></p>",
        "id": 241574000,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622830506
    },
    {
        "content": "<p>I think the problem is that I want to convert from a slice which I know has a fixed size to an array.</p>",
        "id": 241575354,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622831265
    },
    {
        "content": "<p><code>.array_chunks::&lt;4&gt;</code></p>",
        "id": 241575970,
        "sender_full_name": "Jubilee",
        "timestamp": 1622831571
    },
    {
        "content": "<p>Sorry for the handholding, but do you mean like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dot_prod</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[feature(array_chunks)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">array_chunks</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">array_chunks</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">//.sum::&lt;f32x4&gt;()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">horizontal_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Because otherwise I didn't get how to map that to the chunks.</p>",
        "id": 241576655,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622831883
    },
    {
        "content": "<p>yes!</p>",
        "id": 241576710,
        "sender_full_name": "Jubilee",
        "timestamp": 1622831921
    },
    {
        "content": "<p>Rust has complained, and loudly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">dot_product</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span>:<span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">array_chunks</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span>#<span class=\"mi\">74985</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/rust-lang/rust/issues/74985&gt; for more information</span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span>: <span class=\"nc\">add</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"cp\">#![feature(array_chunks)]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">attributes</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241576804,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622831983
    },
    {
        "content": "<p>yes, you need to add it at the crate level. ^^;</p>",
        "id": 241576903,
        "sender_full_name": "Jubilee",
        "timestamp": 1622832014
    },
    {
        "content": "<p>Ok, will do, but this also happens </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ype</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">arguments</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">dot_product</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">10</span>:<span class=\"mi\">14</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"o\">^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">_</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">              </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">([</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">_</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">required</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">requirements</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">FnMut</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"k\">fn</span><span class=\"p\">([</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SimdF32</span><span class=\"o\">&lt;</span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">SimdF32</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"o\">&gt;</span>::<span class=\"n\">from_array</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241576958,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622832046
    },
    {
        "content": "<p>lol</p>",
        "id": 241577003,
        "sender_full_name": "Jubilee",
        "timestamp": 1622832072
    },
    {
        "content": "<p><code>.map(|a| f32x4::from_array(a))</code><br>\nshould work, or else <code>.map(|a| f32x4::from_array(&amp;a))</code></p>",
        "id": 241577090,
        "sender_full_name": "Jubilee",
        "timestamp": 1622832119
    },
    {
        "content": "<p>Ok</p>",
        "id": 241577164,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622832140
    },
    {
        "content": "<p>Also, how should I add that at the crate level? Do I create a <code>Cargo.toml</code> entry like</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[features]</span>\n<span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"k\">[\"std\"]</span>\n<span class=\"n\">std</span> <span class=\"o\">=</span> <span class=\"k\">[]</span>\n<span class=\"n\">array_chunks</span> <span class=\"o\">=</span> <span class=\"n\">true</span> <span class=\"c1\"># ?</span>\n</code></pre></div>",
        "id": 241577245,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622832204
    },
    {
        "content": "<p>Alright, the <code>map</code> stuff seemd to work, thanks Jubilee.</p>",
        "id": 241577385,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622832266
    },
    {
        "content": "<p>brb food.</p>",
        "id": 241577390,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622832268
    },
    {
        "content": "<p>ah no, so like, it has to be seen by rustc, and rustc doesn't see Cargo.toml per se.<br>\nyou want the crate's first file, and you want to add <code>#![feature(array_chunks)]</code><br>\n<code>#!</code> is an \"inner\" attribute, it adds to whatever it is <em>inside</em> of.</p>",
        "id": 241577452,
        "sender_full_name": "Jubilee",
        "timestamp": 1622832310
    },
    {
        "content": "<p>Ok, I guess the first file is <code>main.rs</code>/<code>lib.rs</code>.</p>",
        "id": 241579725,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622833451
    },
    {
        "content": "<p>Oh, and I'm guessing because we're on <code>nightly</code> we don't mind adding this feature flag right?</p>",
        "id": 241579736,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622833466
    },
    {
        "content": "<p>Hmmm - adding the <code>#![feature(array_chunks)]</code> in <code>src/lib.rs</code> still gives errros:</p>",
        "id": 241580499,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622833899
    },
    {
        "content": "<p>I believe the example is its own crate.</p>",
        "id": 241580508,
        "sender_full_name": "Jubilee",
        "timestamp": 1622833909
    },
    {
        "content": "<p>mmmm nope - they're standalone files in <code>examples/</code></p>",
        "id": 241580600,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622833948
    },
    {
        "content": "<p>Should it be a standalone crate? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241580627,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622833964
    },
    {
        "content": "<p>That doesn't mean they aren't logically their own crate.</p>",
        "id": 241580629,
        "sender_full_name": "Jubilee",
        "timestamp": 1622833966
    },
    {
        "content": "<p>Oh, right.</p>",
        "id": 241580640,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622833972
    },
    {
        "content": "<p>\"crate\" is Rust's concept of a code generation unit, basically.</p>",
        "id": 241580679,
        "sender_full_name": "Jubilee",
        "timestamp": 1622833991
    },
    {
        "content": "<p>ah right - I thought it was teh concrete files generate by <code>cargo new foo</code>.</p>",
        "id": 241580741,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622834022
    },
    {
        "content": "<p>Ok, a top level <code>#![feature(array_chunks)]</code> seems to have done it for now. Thanks!</p>",
        "id": 241580812,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622834044
    },
    {
        "content": "<p>HUZZAHH it passes tests <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 241581450,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622834460
    },
    {
        "content": "<p>Alright... I think now's just about a good time to learn the business with those shuffles as any other. <code>matrix_inversion</code> is next!</p>",
        "id": 241582997,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622835309
    },
    {
        "content": "<p>uuuuh I think we need some docs on this one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241586418,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622837036
    },
    {
        "content": "<p>How does this work again?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">shuffle</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimdF32</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">SimdF32</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">7.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">8.0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">shuffle</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"c1\">// ???</span>\n<span class=\"w\">      </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">SimdF32</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">8.0</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241587245,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622837441
    },
    {
        "content": "<p>that looks correct, at a glance?</p>",
        "id": 241588501,
        "sender_full_name": "Jubilee",
        "timestamp": 1622838161
    },
    {
        "content": "<p>Nah, this is good now:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">shuffle_test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimdF32</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">SimdF32</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">6.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">7.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">8.0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">IDXS</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimdF32</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span>::<span class=\"n\">shuffle</span>::<span class=\"o\">&lt;</span><span class=\"n\">IDXS</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">SimdF32</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">8.0</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241588646,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622838245
    },
    {
        "content": "<p>With the <code>SimdF32::&lt;4&gt; -&gt; f32x4</code> swapping, all is good.</p>",
        "id": 241588727,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622838310
    },
    {
        "content": "<p>Doctests PR made! <a href=\"https://github.com/rust-lang/stdsimd/pull/130\">https://github.com/rust-lang/stdsimd/pull/130</a></p>",
        "id": 241589570,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622838847
    },
    {
        "content": "<p>oh right.</p>",
        "id": 241590049,
        "sender_full_name": "Jubilee",
        "timestamp": 1622839131
    },
    {
        "content": "<p>What's the easiest way to avoid writing <code>const foo ... = [ ...]</code> everywhere?</p>",
        "id": 241590766,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622839546
    },
    {
        "content": "<p>I have this I need to work through</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp1</span>: <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">shuffle</span>::<span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">m_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">m_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241590783,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622839559
    },
    {
        "content": "<p>try <code>&lt;{ [0, 1, 4, 5] }&gt;</code>?</p>",
        "id": 241590977,
        "sender_full_name": "Jubilee",
        "timestamp": 1622839645
    },
    {
        "content": "<p>Oh neat.</p>",
        "id": 241591333,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622839827
    },
    {
        "content": "<p>What about for this one?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// let m_1 = f32x4::from_slice_unaligned(&amp;m[1]);</span>\n</code></pre></div>\n<p>tyring to get it to be</p>",
        "id": 241591389,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622839865
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">array_chunks</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241591410,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622839875
    },
    {
        "content": "<p>answered my own question:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241591872,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622840100
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 241591884,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622840103
    },
    {
        "content": "<p>TESTS PASS WASSUP<br>\n<a href=\"https://github.com/rust-lang/stdsimd/pull/131\">https://github.com/rust-lang/stdsimd/pull/131</a></p>",
        "id": 241596379,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622842888
    },
    {
        "content": "<p><span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 241596397,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622842905
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 241603146,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622848769
    },
    {
        "content": "<p>Oooh, <code>cargo test --doc</code> is super neat!</p>",
        "id": 241605714,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622851502
    },
    {
        "content": "<p>Would anyone be opposed if I added a bunch of doctests that showed example usage of <code>lanes_eq</code> + friends and a bunch of other functions?</p>",
        "id": 241605728,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622851531
    },
    {
        "content": "<p>go ahead imo!</p>",
        "id": 241610628,
        "sender_full_name": "Jubilee",
        "timestamp": 1622859311
    },
    {
        "content": "<p>Awesome.</p>",
        "id": 241611684,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622861011
    },
    {
        "content": "<p>Hey, if anyone wants to comment on my Rust learnings, by blog post is almost done - I'd appreciate any feedback <a href=\"https://miguelraz.github.io/blog/juliatorust/\">https://miguelraz.github.io/blog/juliatorust/</a></p>",
        "id": 241611688,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622861028
    },
    {
        "content": "<p>So this is an enormously esoteric nit but... Rust does not have linear types.<br>\nIt has affine types!<br>\nThe difference is \"must use once\" vs. \"must use no more than once\".<br>\n<a href=\"https://gankra.github.io/blah/linear-rust/\">https://gankra.github.io/blah/linear-rust/</a></p>",
        "id": 241612845,
        "sender_full_name": "Jubilee",
        "timestamp": 1622863074
    },
    {
        "content": "<blockquote>\n<p>(which means an automatic RC garbage collector and no threading run time) </p>\n</blockquote>\n<p>also we technically don't even have reference counting garbage collection, we use \"region-based memory management\". <a href=\"https://en.wikipedia.org/wiki/Region-based_memory_management\">https://en.wikipedia.org/wiki/Region-based_memory_management</a><br>\nexcept with explicit use of the Rc and Arc types. <a href=\"https://doc.rust-lang.org/std/rc/index.html\">https://doc.rust-lang.org/std/rc/index.html</a><br>\nunlike, say, Python, which always did implicitly reference count things.</p>\n<blockquote>\n<p>they developed this library as external to stdlib. There's several social and technical constraints for why Tokio is not always included, like embedded systems and people who want to work on no stdlib environments.</p>\n</blockquote>\n<p>Well, specifically, in <code>#![no_std]</code> code you don't even have <em>allocation</em> as a guaranteed thing. No Vec. Most runtimes require some std feature. Rust could also offer sufficiently tools to abstract over the points that are shared between executors, but we haven't yet.</p>",
        "id": 241614699,
        "sender_full_name": "Jubilee",
        "timestamp": 1622866225
    },
    {
        "content": "<p>Awesome - I'l patch that up.</p>",
        "id": 241615257,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622867189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241610628\">said</a>:</p>\n<blockquote>\n<p>go ahead imo!</p>\n</blockquote>\n<p>Awesome, I have goals for tomorrow.</p>",
        "id": 241615396,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622867473
    },
    {
        "content": "<p>Anyone have a small but not trivial use case for simd masks?</p>",
        "id": 241636595,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622899600
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Counts the number of instances of `byte` in `values`</span>\n<span class=\"k\">fn</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">values</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">byte</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"kt\">u8</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u8x16</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">array_chunks</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">u8x16</span>::<span class=\"n\">from_array</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">lanes_eq</span><span class=\"p\">(</span><span class=\"n\">u8x16</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">byte</span><span class=\"p\">)).</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">u8x16</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">u8x16</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">horizontal_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241637448,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622900764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> something like this</p>",
        "id": 241637457,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622900776
    },
    {
        "content": "<p>Oh neat</p>",
        "id": 241637585,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622900954
    },
    {
        "content": "<p>Where's the masking though? In the select?</p>",
        "id": 241637604,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622900975
    },
    {
        "content": "<p>Yes, <code>lanes_eq</code> returns a mask, and the select does something that looks kind of like branching</p>",
        "id": 241637664,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622901018
    },
    {
        "content": "<p>Ah, I missed the lanes_eq. Thanks!</p>",
        "id": 241637884,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622901359
    },
    {
        "content": "<p>No problem</p>",
        "id": 241637928,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622901386
    },
    {
        "content": "<p>So this a SIMDified find and count loop, right?</p>",
        "id": 241637942,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622901446
    },
    {
        "content": "<p>Yep</p>",
        "id": 241637945,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622901461
    },
    {
        "content": "<p>Coooooool <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 241637949,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622901471
    },
    {
        "content": "<p>The notable part is that the algorithm doesn't branch (other than in the for loop)</p>",
        "id": 241637952,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622901477
    },
    {
        "content": "<p>In normal code branching is efficient but in simd it can be orders of magnitude slower than the rest of your operations</p>",
        "id": 241638005,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622901538
    },
    {
        "content": "<p>I think it would be neat if the <code>examples/*</code> could benchmark the scalar vs different SIMD implementations, so that people can see how to iterate SIMD designs for performance.</p>",
        "id": 241645237,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622911721
    },
    {
        "content": "<p>What's the lowest effort way to setup benchmarking for <code>examples/*</code>?</p>",
        "id": 241645249,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622911739
    },
    {
        "content": "<p>I don't know! :D</p>",
        "id": 241647535,
        "sender_full_name": "Jubilee",
        "timestamp": 1622914889
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://welovecatsandkittens.com/wp-content/uploads/2013/09/sad-kitty.jpg\"><img src=\"https://uploads.zulipusercontent.net/580206040ccec10eccdf434ff4172694a2e8745d/68747470733a2f2f77656c6f766563617473616e646b697474656e732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031332f30392f7361642d6b697474792e6a7067\"></a></div>",
        "id": 241647823,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622915355
    },
    {
        "content": "<p>To clarify the bit on region based memory management:<br>\nReference counting basically works on \"item A has a number N somewhere. If N hits 0, A is deallocated.\"<br>\nRegion based memory management does not require this.<br>\nInstead, we define all the scopes in the program, and then at the end of a scope, we run the destructors of all the values that end with that scope. So if something is deallocated, we know exactly where: upon the collapse of a certain scope. So it only has to allocate and deallocate once, ever, and it does so deterministically rather than based on a counter, which could be incremented and decremented a million times without deallocating it. A lot of overhead. Or, in certain cases, reference counting can yield cycles where something is never deallocated.</p>",
        "id": 241650342,
        "sender_full_name": "Jubilee",
        "timestamp": 1622918157
    },
    {
        "content": "<p>Neat.</p>",
        "id": 241650398,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622918204
    },
    {
        "content": "<p>I hope to learn enough Rust to get MMtk bindings to Julia some day.</p>",
        "id": 241650403,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622918217
    },
    {
        "content": "<p>note that \"a scope\" in many cases may be directly analogous to \"a stack frame\", so you can basically think of it as a special case of a local, where it runs code on <code>ret</code>.</p>",
        "id": 241651488,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919649
    },
    {
        "content": "<p>the game dev folks are absolutely bonkers for a frame allocator</p>",
        "id": 241657819,
        "sender_full_name": "Lokathor",
        "timestamp": 1622929983
    },
    {
        "content": "<p>What's that?</p>",
        "id": 241658028,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622930338
    },
    {
        "content": "<p>hehe</p>",
        "id": 241659893,
        "sender_full_name": "Jubilee",
        "timestamp": 1622933636
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> , a kind redditor pointed this out from my blog post:<br>\n<a href=\"https://github.com/gnzlbg/cargo-asm\">https://github.com/gnzlbg/cargo-asm</a></p>",
        "id": 241667392,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622946817
    },
    {
        "content": "<p>Now to figure out how to get it to emit asm for the <code>examples/*</code> stuff...</p>",
        "id": 241667399,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622946837
    },
    {
        "content": "<p>oh neat.</p>",
        "id": 241667956,
        "sender_full_name": "Jubilee",
        "timestamp": 1622947855
    },
    {
        "content": "<p>right I think I even used this once, and then had every one of my hard drives crash.</p>",
        "id": 241667960,
        "sender_full_name": "Jubilee",
        "timestamp": 1622947864
    },
    {
        "content": "<p>I'm fighting the <span aria-label=\"triangular flag\" class=\"emoji emoji-1f6a9\" role=\"img\" title=\"triangular flag\">:triangular_flag:</span> to get it to emit the asm for <code>dot_product</code></p>",
        "id": 241668101,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622948131
    },
    {
        "content": "<p>Any help anyone?</p>",
        "id": 241668725,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622948892
    },
    {
        "content": "<p>hm?</p>",
        "id": 241668847,
        "sender_full_name": "Jubilee",
        "timestamp": 1622949067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">]</span>&gt; cargo asm --example dot_product\nerror: Found argument <span class=\"s1\">'--example'</span> which wasn<span class=\"s1\">'t expected, or isn'</span>t valid <span class=\"k\">in</span> this context\n\nUSAGE:\n    cargo asm <span class=\"o\">[</span>FLAGS<span class=\"o\">]</span> <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> <span class=\"o\">[</span>--<span class=\"o\">]</span> <span class=\"o\">[</span>path<span class=\"o\">]</span>\n\nFor more information try --help\n</code></pre></div>",
        "id": 241668911,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622949142
    },
    {
        "content": "<p>it's entirely possible that cargo asm doesn't support examples</p>",
        "id": 241670838,
        "sender_full_name": "Lokathor",
        "timestamp": 1622952182
    },
    {
        "content": "<p>though i'd be a little curious about why</p>",
        "id": 241670851,
        "sender_full_name": "Lokathor",
        "timestamp": 1622952192
    },
    {
        "content": "<p>I am once again</p>",
        "id": 241670925,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622952311
    },
    {
        "content": "<p>pouting my face</p>",
        "id": 241670931,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622952317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241668725\">said</a>:</p>\n<blockquote>\n<p>Any help anyone?</p>\n</blockquote>\n<p>No idea about <code>cargo asm</code>, but I just use</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc +stage1 whatever.rs -O --emit=mir --emit=llvm-ir --emit=asm -C &quot;llvm-args=-x86-asm-syntax=intel&quot;\n</code></pre></div>",
        "id": 241671351,
        "sender_full_name": "scottmcm",
        "timestamp": 1622952795
    },
    {
        "content": "<p>Ooooooh!</p>",
        "id": 241671466,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622952905
    },
    {
        "content": "<p>what's the <code>stage1</code> option for?</p>",
        "id": 241671470,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622952920
    },
    {
        "content": "<p>Oh, that's because I'm using <code>rustup toolchain link</code> to run the one I built myself.</p>",
        "id": 241671472,
        "sender_full_name": "scottmcm",
        "timestamp": 1622952942
    },
    {
        "content": "<p>It's the same as the normal <code>+stable</code> or <code>+beta</code> or <code>+nightly</code> that rustup's wrappers provide for all these things.</p>",
        "id": 241671516,
        "sender_full_name": "scottmcm",
        "timestamp": 1622952979
    },
    {
        "content": "<p>...</p>",
        "id": 241671517,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622952985
    },
    {
        "content": "<p>I'm sorry, I just have more questions now. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241671520,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622952996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241671520\">said</a>:</p>\n<blockquote>\n<p>I'm sorry, I just have more questions now. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Well, then ask. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 241673361,
        "sender_full_name": "Jubilee",
        "timestamp": 1622955992
    },
    {
        "content": "<p>Uuuh, being really silly - if I do <code>cargo new foo</code>, how do I add <code>stdsimd</code> to the project? <code>cargo add stdsimd</code> does not work..</p>",
        "id": 241730977,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623043856
    },
    {
        "content": "<p>probably like this: <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\">https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories</a></p>",
        "id": 241733731,
        "sender_full_name": "Lokathor",
        "timestamp": 1623047025
    },
    {
        "content": "<p>or if your new thing is going to live in the stdsimd repo itself, scroll down a bit to path dependencies and you can use a relative path</p>",
        "id": 241733817,
        "sender_full_name": "Lokathor",
        "timestamp": 1623047085
    },
    {
        "content": "<p>Hmmm - I think I should PR a <code>hello world</code> config to the stdsimd guide</p>",
        "id": 241803703,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623083548
    },
    {
        "content": "<p>I have this </p>\n<div class=\"codehilite\"><pre><span></span><code>[package]\nname = &quot;stagedfilter&quot;\nversion = &quot;0.1.0&quot;\nedition = &quot;2018&quot;\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\ncore_simd = { git = &quot;https://github.com/rust-lang/stdsimd&quot; }\n</code></pre></div>",
        "id": 241803742,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623083567
    },
    {
        "content": "<p>And I get complaints about</p>",
        "id": 241803756,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623083572
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    = note: see issue #78835 &lt;https://github.com/rust-lang/rust/issues/78835&gt; for more information\n    = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n</code></pre></div>",
        "id": 241803783,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623083585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span>  <code>rustup update</code></p>",
        "id": 241803843,
        "sender_full_name": "Jubilee",
        "timestamp": 1623083620
    },
    {
        "content": "<p>^^;</p>",
        "id": 241803844,
        "sender_full_name": "Jubilee",
        "timestamp": 1623083621
    },
    {
        "content": "<p>Try updating your compiler, that feature should be stable</p>",
        "id": 241803859,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623083625
    },
    {
        "content": "<p>Yeah that</p>",
        "id": 241803867,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623083629
    },
    {
        "content": "<p>I agree, you should PR a hello world config, honestly go ahead and put it in the README.md<br>\nand you should also add a note that users should probably run <code>rustup update</code> if the library doesn't compile.</p>",
        "id": 241804121,
        "sender_full_name": "Jubilee",
        "timestamp": 1623083753
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241803843\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span>  <code>rustup update</code></p>\n</blockquote>\n<p>Well that's embarrassing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . Alright, everything works now, thanks! mocking up the PR to the guide now.</p>",
        "id": 241805454,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623084298
    },
    {
        "content": "<p>pew pew <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <a href=\"https://github.com/rust-lang/stdsimd/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc\">https://github.com/rust-lang/stdsimd/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc</a></p>",
        "id": 241807584,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623085195
    },
    {
        "content": "<p>FINALLY</p>",
        "id": 241868905,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623125636
    },
    {
        "content": "<p>using the <code>hello world</code> from the README and <code>cargo asm</code> I finally got this</p>",
        "id": 241868948,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623125661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">mrg</span><span class=\"o\">@</span><span class=\"n\">JuliaLap</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">r</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">asm</span><span class=\"w\"> </span><span class=\"n\">stagedfilter</span>::<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">rust</span><span class=\"w\"></span>\n<span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"n\">b663c0f4f6ff84a8c9df0f708e1f8d628330d973</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">fmt</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">exist</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">sub</span><span class=\"w\">     </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">88</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">impl_float_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">mrg</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">checkouts</span><span class=\"o\">/</span><span class=\"n\">stdsimd</span><span class=\"o\">-</span><span class=\"mf\">26e23068</span><span class=\"n\">d55c82a1</span><span class=\"o\">/</span><span class=\"mi\">4311</span><span class=\"n\">c06</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">667</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">movaps</span><span class=\"w\">  </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmmword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rip</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">LCPI7_0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">movaps</span><span class=\"w\">  </span><span class=\"n\">xmmword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rip</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ZN9core_simd3fmt89_</span><span class=\"cp\">$LT$impl$u20$core</span><span class=\"o\">..</span><span class=\"n\">fmt</span><span class=\"o\">..</span><span class=\"n\">Debug</span><span class=\"cp\">$u20$for$u20$core_simd</span><span class=\"o\">..</span><span class=\"n\">vector</span><span class=\"o\">..</span><span class=\"n\">float</span><span class=\"o\">..</span><span class=\"n\">SimdF32</span><span class=\"cp\">$LT$_$GT$$GT$</span><span class=\"mi\">3</span><span class=\"n\">fmt17h8911ca4f82dd33a1E</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rip</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">L__unnamed_3</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">56</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">72</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\">    </span><span class=\"n\">qword</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rip</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ZN3std2io5stdio6_print17hb1367a556f058e80E</span><span class=\"o\">@</span><span class=\"n\">GOTPCREL</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">88</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241868951,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623125669
    },
    {
        "content": "<p>So now begins the real fun part of optimizing SIMD instructions - though I think we gotta pull out the big guns like VTune or something</p>",
        "id": 241870666,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623128067
    },
    {
        "content": "<p>A friend from Julia pointed this out :D<br>\n<a href=\"https://state.smerity.com/smerity/state/01E8RNH7HRRJT2A63NSX3N6SP1\">https://state.smerity.com/smerity/state/01E8RNH7HRRJT2A63NSX3N6SP1</a></p>",
        "id": 241960475,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623175060
    },
    {
        "content": "<p>neat!</p>",
        "id": 241992802,
        "sender_full_name": "Jubilee",
        "timestamp": 1623189272
    },
    {
        "content": "<p>Hmm, that's missing what I'd consider the \"obvious\" version of the \"I know it's 1024 things\": pre-slicing to the known length, which is also safe and does well &lt;<a href=\"https://rust.godbolt.org/z/hancr5dnT\">https://rust.godbolt.org/z/hancr5dnT</a>&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dotp</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">n</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">n</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"n\">n</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241994170,
        "sender_full_name": "scottmcm",
        "timestamp": 1623190114
    },
    {
        "content": "<p>Ooooh can Rust exploit those assertions for unrolling the loop?</p>",
        "id": 241995246,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623190749
    },
    {
        "content": "<p>assertions ~ length of the array here...</p>",
        "id": 241995260,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623190763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241995246\">said</a>:</p>\n<blockquote>\n<p>Ooooh can Rust exploit those assertions for unrolling the loop?</p>\n</blockquote>\n<p>yes, it will even optimize things slightly differently if you directly call <code>.len()</code> to check the length of something, because Rust and LLVM will notice that as a \"checkpoint\".</p>",
        "id": 241995916,
        "sender_full_name": "Jubilee",
        "timestamp": 1623191266
    },
    {
        "content": "<p>Oooh, I would like to know what that is eventually.</p>",
        "id": 241996541,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623191655
    },
    {
        "content": "<p>I'm about 100 pages into my <code>Learn LLVM 12</code> book now (I skipped the parsing, all my friends hate parsing)</p>",
        "id": 241996560,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623191675
    },
    {
        "content": "<p>I said \"checkpoint\" like... as a made up term, though you do see occasionally like \"synchronization point\".<br>\nWhat I mean is that the easier it is for it to follow a variable back to its meaning, the easier it is to optimize around, because it follows the def-use-def more readily.</p>",
        "id": 241996910,
        "sender_full_name": "Jubilee",
        "timestamp": 1623191956
    },
    {
        "content": "<p>Oh, so that's a good note to make to the diary about Rust code then. Thanks!</p>",
        "id": 241996940,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623191987
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Use-define_chain\">https://en.wikipedia.org/wiki/Use-define_chain</a></p>",
        "id": 241997052,
        "sender_full_name": "Jubilee",
        "timestamp": 1623192061
    },
    {
        "content": "<p>I once found this out by fiddling a bunch with something where I had \"outside knowledge\" about how big a slice <strong>could</strong> be... but if I explicitly called <code>.len()</code> and predicated on that, it still optimized much better than if I only used the \"outside knowledge\".</p>",
        "id": 241997865,
        "sender_full_name": "Jubilee",
        "timestamp": 1623192730
    },
    {
        "content": "<p>And that, I imagine, is probably partially because it then hit a bunch of post-hoc predications on <code>len</code> <strong>anyways</strong>, because I did something that could hypothetically panic.</p>",
        "id": 241997921,
        "sender_full_name": "Jubilee",
        "timestamp": 1623192781
    },
    {
        "content": "<p>Is there an <code>assume</code> function in rust? The nearest thing I can think of is <code>if !cond { std::hint::unreachable_unchecked() }</code></p>",
        "id": 241998061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623192881
    },
    {
        "content": "<p><code>assert!</code> does what you'd want safely</p>",
        "id": 241998211,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623192969
    },
    {
        "content": "<p>But yeah, it would just be a branch</p>",
        "id": 241998224,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623192998
    },
    {
        "content": "<p>i've (long ago) seen occasionally that assert is insufficiently aggressive</p>",
        "id": 241998227,
        "sender_full_name": "Lokathor",
        "timestamp": 1623192999
    },
    {
        "content": "<p>that still has runtime overhead though</p>",
        "id": 241998235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193008
    },
    {
        "content": "<p>it's just front loading it, which might be fine if it comes before a loop like in the example</p>",
        "id": 241998251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193029
    },
    {
        "content": "<p>In simd code I have often found that using asserts is decently faster than without the assert</p>",
        "id": 241998271,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623193061
    },
    {
        "content": "<p>but we're not comparing assert / nothing, we're comparing assert / assume</p>",
        "id": 241998325,
        "sender_full_name": "Lokathor",
        "timestamp": 1623193089
    },
    {
        "content": "<p>You could make the branch unreachable and it would probably be slightly faster</p>",
        "id": 241998333,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623193105
    },
    {
        "content": "<p>But remember that if your assertion is over a length that you later iterate over (which is common) the assert is no more costly than the overhead of one loop iteration</p>",
        "id": 241998378,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623193167
    },
    {
        "content": "<p>I guess that depends on how well the branch is predicted</p>",
        "id": 241998481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193228
    },
    {
        "content": "<p>presumably an assert is easy to predict</p>",
        "id": 241998488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193239
    },
    {
        "content": "<p>assume is pretty insanely unsafe, so.</p>",
        "id": 241998505,
        "sender_full_name": "Jubilee",
        "timestamp": 1623193248
    },
    {
        "content": "<p>If your assertion is correct it would be predicted correctly every time</p>",
        "id": 241998520,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623193264
    },
    {
        "content": "<p>And if it's incorrect it would let you know like <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> noted <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 241998566,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623193304
    },
    {
        "content": "<p>also fwiw yes, there is a weird thing where Rust can generate branch predicting code with no significant loss of actual speed on processors with even vaguely modern branch prediction.</p>",
        "id": 241998651,
        "sender_full_name": "Jubilee",
        "timestamp": 1623193345
    },
    {
        "content": "<p>even though there is More To Love, er, execute.</p>",
        "id": 241998674,
        "sender_full_name": "Jubilee",
        "timestamp": 1623193363
    },
    {
        "content": "<p>I am maybe different from other rust users on this point, but in an example like <span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span>'s where I have a contract with the caller on the size of the slices, I would prefer to either get that in the type or use an assume over an assert</p>",
        "id": 241998766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193413
    },
    {
        "content": "<p>like, I program as if rust was dependently typed and make up the difference with <code>unsafe</code></p>",
        "id": 241998878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623193467
    },
    {
        "content": "<p>wild.</p>",
        "id": 241998885,
        "sender_full_name": "Jubilee",
        "timestamp": 1623193482
    },
    {
        "content": "<p>If your goal is performance I think it's very likely there is no notable difference between an assert and an assume.  Usually the cases that comes up in (like assertions inside loops, resulting in many many asserts) are better solved with a custom iterator (internal, contained unsafety) rather than an assume in the loop (external, uncontained unsafety)</p>",
        "id": 241999056,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623193638
    },
    {
        "content": "<p><code>array_chunks</code> is a good example of that</p>",
        "id": 241999153,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623193708
    },
    {
        "content": "<p>I often find myself referring to this example. C can be more optimal in instruction count and therefore size than Rust code, but modern superscalar processors can retire the instructions generated by Rust shockingly swiftly, making the overhead vs. C much more thin in actual performance. <a href=\"https://github.com/ixy-languages/ixy-languages/blob/master/Rust-vs-C-performance.md\">https://github.com/ixy-languages/ixy-languages/blob/master/Rust-vs-C-performance.md</a></p>",
        "id": 241999596,
        "sender_full_name": "Jubilee",
        "timestamp": 1623194074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241998566\">said</a>:</p>\n<blockquote>\n<p>And if it's incorrect it would let you know like <span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> noted <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>actually if your assumption isn't correct it won't do anything specific at all ;3</p>",
        "id": 242001879,
        "sender_full_name": "Lokathor",
        "timestamp": 1623196088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241995246\">said</a>:</p>\n<blockquote>\n<p>Ooooh can Rust exploit those assertions for unrolling the loop?</p>\n</blockquote>\n<p>Yes, absolutely.  Re-slicing to a common length typically helps LLVM realize that multiple slices have the same length, which helps both remove the bounds checks as well as to canonicalize the loop.</p>\n<p>Here's a simple example of how assertions or slicing helps remove bound checks: <a href=\"https://rust.godbolt.org/z/Pqrq5cv3h\">https://rust.godbolt.org/z/Pqrq5cv3h</a></p>",
        "id": 242002766,
        "sender_full_name": "scottmcm",
        "timestamp": 1623196900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241998061\">said</a>:</p>\n<blockquote>\n<p>Is there an <code>assume</code> function in rust? The nearest thing I can think of is <code>if !cond { std::hint::unreachable_unchecked() }</code></p>\n</blockquote>\n<p>If you want the \"UB if false\" version, it's &lt;<a href=\"https://doc.rust-lang.org/nightly/std/intrinsics/fn.assume.html\">https://doc.rust-lang.org/nightly/std/intrinsics/fn.assume.html</a>&gt;, which is a direct wrapper on &lt;<a href=\"https://llvm.org/docs/LangRef.html#llvm-assume-intrinsic\">https://llvm.org/docs/LangRef.html#llvm-assume-intrinsic</a>&gt;.</p>\n<p>But note that adding <code>assume</code>s can paradoxically also inhibit other optimizations, because it leads to more IR and more \"uses\" of variables.</p>",
        "id": 242002842,
        "sender_full_name": "scottmcm",
        "timestamp": 1623196953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241998766\">said</a>:</p>\n<blockquote>\n<p>I am maybe different from other rust users on this point, but in an example like <span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span>'s where I have a contract with the caller on the size of the slices, I would prefer to either get that in the type or use an assume over an assert</p>\n</blockquote>\n<p>Absolutely it would be better to write that example by taking <code>&amp;[T; 1024]</code> instead of <code>&amp;[T]</code>, but I wanted to closer parallel the C versions.</p>\n<p>(By taking the reference to the array it moves the proof obligation to the caller, where for example they can satisfy it by using <code>as_chunks</code> or <code>.try_into()</code> or whatever.)</p>",
        "id": 242003002,
        "sender_full_name": "scottmcm",
        "timestamp": 1623197101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241999596\">said</a>:</p>\n<blockquote>\n<p>I often find myself referring to this example. [...] <a href=\"https://github.com/ixy-languages/ixy-languages/blob/master/Rust-vs-C-performance.md\">https://github.com/ixy-languages/ixy-languages/blob/master/Rust-vs-C-performance.md</a></p>\n</blockquote>\n<p>Ooh, great post!  Thanks for sharing.  Branch predictors OP <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 242003234,
        "sender_full_name": "scottmcm",
        "timestamp": 1623197294
    },
    {
        "content": "<p>Worth noting that branches can optimize to <code>assume</code> as you'd expect: <a href=\"https://rust.godbolt.org/z/jGP3PGsbT\">https://rust.godbolt.org/z/jGP3PGsbT</a></p>",
        "id": 242003580,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623197635
    },
    {
        "content": "<p>Yeah, there's actually a somewhat paradoxical technique that modern optimizers can exploit, because they tend to hinge around the concept of finding reducible expressions, whether those are common subexpressions or whatever, of restructuring the code to be <strong>less</strong> optimal, even injecting additional ops, but is fully <strong>reducible</strong> in the following optimization passes, allowing you to add 1 or 2 lines of code to delete 5 or 10.</p>\n<p>I can't find the paper on this I remember encountering though.</p>",
        "id": 242003967,
        "sender_full_name": "Jubilee",
        "timestamp": 1623197986
    },
    {
        "content": "<p>I think a good way to look at it is if there's an obvious (and valid) optimization that you see as the programmer, the compiler does it.  I think that's more or less why the reducible expressions work.  The optimizer is clever but it isn't magic and usually \"indicate something to other programmers via assert\" and \"indicate something to the optimizer via assert\" are the same thing</p>",
        "id": 242004222,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623198208
    },
    {
        "content": "<p>Also true for other types of simple branches</p>",
        "id": 242004307,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623198258
    },
    {
        "content": "<p>Any bit of rust code generates so much LLVM because of the type system etc just using rust at all is already making the assumption that the optimizer is exceptionally good</p>",
        "id": 242004384,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623198343
    },
    {
        "content": "<p>AHA here was one of them: \"symbiotic expressions\". <a href=\"https://www.sac-home.org/_media/publications:pdf:2009_1.pdf\">https://www.sac-home.org/_media/publications:pdf:2009_1.pdf</a></p>",
        "id": 242004534,
        "sender_full_name": "Jubilee",
        "timestamp": 1623198474
    },
    {
        "content": "<p>\"just jam more code DIRECTLY into the program and your optimizer will optimize more, this turns out to be particularly applicable to anything involving arrays, but it generalizes well.\"</p>",
        "id": 242004692,
        "sender_full_name": "Jubilee",
        "timestamp": 1623198612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/241998878\">said</a>:</p>\n<blockquote>\n<p>like, I program as if rust was dependently typed and make up the difference with <code>unsafe</code></p>\n</blockquote>\n<p>Here's a trick you can use for that while still being safe: &lt;<a href=\"https://rust.godbolt.org/z/3bxrGqjdh\">https://rust.godbolt.org/z/3bxrGqjdh</a>&gt;</p>\n<p>By inlining the checks into the caller, without necessarily inlining the whole body, you can give the optimizer context that makes it easier for it to remove those checks.</p>",
        "id": 242004732,
        "sender_full_name": "scottmcm",
        "timestamp": 1623198684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/242004692\">said</a>:</p>\n<blockquote>\n<p>\"just jam more code DIRECTLY into the program and your optimizer will optimize more\"</p>\n</blockquote>\n<p>In a way this is the idea behind VSDG too, as I understand it -- just provide more and more ways of doing the same thing, and let the optimizer pick the best one later.</p>",
        "id": 242004803,
        "sender_full_name": "scottmcm",
        "timestamp": 1623198738
    },
    {
        "content": "<p>interesting</p>",
        "id": 242010095,
        "sender_full_name": "Jubilee",
        "timestamp": 1623204026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I'm guessing implementing the <code>std::Iterator::Sum</code> trait is not in scope for porting the <code>dot_product</code> example, right?</p>",
        "id": 243447424,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1624311866
    },
    {
        "content": "<p>Nope, that's in my PR though</p>",
        "id": 243447444,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311883
    },
    {
        "content": "<p>That is one of the things that should be in.. .yeah, <a href=\"https://github.com/rust-lang/rust/issues/136\">#136</a>!</p>",
        "id": 243447450,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311889
    },
    {
        "content": "<p>Oh neat neat.</p>",
        "id": 243447505,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1624311930
    },
    {
        "content": "<p>Though I just realized I think I am questioning how it's implemented, since it's not doing precisely an in-order sum (not even sure if that's what we'd expect)</p>",
        "id": 243447508,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311934
    },
    {
        "content": "<p>It could be documented</p>",
        "id": 243447522,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311946
    }
]