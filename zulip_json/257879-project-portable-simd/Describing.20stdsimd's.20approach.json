[
    {
        "content": "<p>I dumped some thoughts into this hackmd, which contains some scratch-space of idle musings followed by an RFC template. <a href=\"https://hackmd.io/u-XfyDs7QDm4H4zjFFXgAg\">https://hackmd.io/u-XfyDs7QDm4H4zjFFXgAg</a></p>",
        "id": 238865009,
        "sender_full_name": "Jubilee",
        "timestamp": 1621050429
    },
    {
        "content": "<p>( also feel free to poke at it. )</p>",
        "id": 238871139,
        "sender_full_name": "Jubilee",
        "timestamp": 1621057202
    },
    {
        "content": "<p>Okay, so I <strong>guess</strong> my question at the moment is why we aren't just trying to implement this entire thing as a trait on array types and then later slice types maybe?</p>",
        "id": 239001509,
        "sender_full_name": "Jubilee",
        "timestamp": 1621194356
    },
    {
        "content": "<p>I don't necessarily mean as a type that wraps arrays, like how <code>packed_simd</code> does it.<br>\nI mean literally <strong>on top</strong> of arrays.<br>\nToo ambitious, I guess?</p>",
        "id": 239001807,
        "sender_full_name": "Jubilee",
        "timestamp": 1621194670
    },
    {
        "content": "<p>Vectors have different alignment</p>",
        "id": 239003488,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621196424
    },
    {
        "content": "<p>Our types are basically just arrays with larger alignment</p>",
        "id": 239003508,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621196449
    },
    {
        "content": "<p>Yeah, that's probably the big catch.</p>",
        "id": 239003782,
        "sender_full_name": "Jubilee",
        "timestamp": 1621196750
    },
    {
        "content": "<p>Also, I think just conceptually an array is sequential and a vector is parallel</p>",
        "id": 239003865,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621196836
    },
    {
        "content": "<p>The only thing that's the same about them is the layout, so we allow conversion</p>",
        "id": 239003873,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621196855
    },
    {
        "content": "<p>Hmm, I imagine we _could_ have alignment defined by a trait.</p>",
        "id": 239010888,
        "sender_full_name": "Jubilee",
        "timestamp": 1621203841
    },
    {
        "content": "<p>but it would have to be impl'd differently for SimdArray vs. <code>array</code>, so.</p>",
        "id": 239010939,
        "sender_full_name": "Jubilee",
        "timestamp": 1621203861
    },
    {
        "content": "<p>How could you define alignment with a trait?  That doesn't really make sense to me</p>",
        "id": 239010979,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621203921
    },
    {
        "content": "<p>Uhmmm hmmm it would be more or less equivalent to repr(align) tbh?</p>",
        "id": 239348314,
        "sender_full_name": "Jubilee",
        "timestamp": 1621385665
    },
    {
        "content": "<p>I guess I mean how would you make an array that sometimes has different alignment</p>",
        "id": 239349388,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621386527
    },
    {
        "content": "<p>I think it inherently needs to be a different type for that</p>",
        "id": 239349433,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621386573
    },
    {
        "content": "<p>Yeah, that's what I slowly realized.</p>",
        "id": 239350048,
        "sender_full_name": "Jubilee",
        "timestamp": 1621387125
    },
    {
        "content": "<p>I think there <em>is</em> one thing we're strongly implying though: we do not expect arrays to have their alignment automagically \"right-sized\" to 16+ bytes and thus made eligible for certain easy retouches with vectorization.</p>",
        "id": 239504964,
        "sender_full_name": "Jubilee",
        "timestamp": 1621463409
    },
    {
        "content": "<p>Overaligning normal arrays would block a bunch of things like <code>as_chunks</code>, so I think it's a non-starter.  Thus the simd types for when that's wanted.</p>",
        "id": 239505071,
        "sender_full_name": "scottmcm",
        "timestamp": 1621463474
    },
    {
        "content": "<p>I think I'm still just hung up on them being semantically different even more than the layout.  Signed and unsigned ints have the same layout and could just be separate functions (like LLVM) but that's just not a particularly usable interface</p>",
        "id": 239505213,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621463557
    },
    {
        "content": "<p>I know, but we gotta put something in the alternatives section. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 239508522,
        "sender_full_name": "Jubilee",
        "timestamp": 1621465505
    },
    {
        "content": "<p>Speaking of overaligned arrays: they came up here, imagined as <code>Aligned&lt;[u8; 4], 4&gt;</code><br>\n<a href=\"https://github.com/rust-lang/rust/issues/76976\">https://github.com/rust-lang/rust/issues/76976</a><br>\n<a href=\"https://github.com/rust-lang/rust/issues/74985\">https://github.com/rust-lang/rust/issues/74985</a></p>",
        "id": 240254361,
        "sender_full_name": "Jubilee",
        "timestamp": 1621979272
    },
    {
        "content": "<p>OK, I guess the other question is: why don't we just use <code>Simd&lt;[T; N]&gt;</code> like packed_simd was moving towards? Too non-ergonomic or smth?</p>",
        "id": 241708774,
        "sender_full_name": "Jubilee",
        "timestamp": 1623010461
    },
    {
        "content": "<p>oh that would probably make the documentation for <code>Simd&lt;[T; N]&gt;</code> utterly illegible with all those different impl-dependent methods, and we'd probably be constantly breaking on weird method resolution issues.</p>",
        "id": 241708891,
        "sender_full_name": "Jubilee",
        "timestamp": 1623010666
    },
    {
        "content": "<p>I think we had wondered if it makes sense to be generic over the element type or not</p>",
        "id": 241709522,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623011526
    },
    {
        "content": "<p>We have a handful of functions that would work for any element type, but the vast majority don't, I think</p>",
        "id": 241709559,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623011625
    },
    {
        "content": "<p>Yeah. We could define SimdInt, SimdUint, and SimdFloat traits, I guess???</p>",
        "id": 241711788,
        "sender_full_name": "Jubilee",
        "timestamp": 1623015104
    },
    {
        "content": "<p>And probably a general vector trait as well</p>",
        "id": 241714416,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623019535
    },
    {
        "content": "<p>Note that we don't have a general \"array\" trait, nor a general \"integer\" trait, so it's not obvious that simd should have traits for those things either.</p>\n<p>(Not saying that it shouldn't, either, just that it would need justifying.)</p>",
        "id": 241716703,
        "sender_full_name": "scottmcm",
        "timestamp": 1623023456
    },
    {
        "content": "<p>I agree, they probably should have traits but I think that goes with whatever RFC is adding them for scalars (and in many ways perhaps they should share some traits with scalars?)</p>",
        "id": 241716716,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623023513
    },
    {
        "content": "<p>I mean we really should have a float trait though</p>",
        "id": 241716905,
        "sender_full_name": "Lokathor",
        "timestamp": 1623023790
    },
    {
        "content": "<p>I think it would be premature to design that trait without considering the design for scalars too</p>",
        "id": 241716917,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623023845
    },
    {
        "content": "<p>Right, <em>scalars</em> should have a Float trait is what I'm saying.</p>",
        "id": 241716921,
        "sender_full_name": "Lokathor",
        "timestamp": 1623023871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Describing.20stdsimd's.20approach/near/241716703\">said</a>:</p>\n<blockquote>\n<p>Note that we don't have a general \"array\" trait, nor a general \"integer\" trait, so it's not obvious that simd should have traits for those things either.</p>\n<p>(Not saying that it shouldn't, either, just that it would need justifying.)</p>\n</blockquote>\n<p>For SIMD, the primary trait over SIMD \"arrays\" in question will serve more as an equivalent to Iterator&lt;Item = T&gt; in its overall logical positioning in terms of traits and types.</p>",
        "id": 241717868,
        "sender_full_name": "Jubilee",
        "timestamp": 1623025331
    },
    {
        "content": "<p>What does this hypothetical trait do, I'm curious?  That AsRef, Into, etc don't</p>",
        "id": 241717895,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623025422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Describing.20stdsimd's.20approach/near/241717895\">said</a>:</p>\n<blockquote>\n<p>What does this hypothetical trait do, I'm curious?  That AsRef, Into, etc don't</p>\n</blockquote>\n<p>the biggest advantage and the reason I'd push for it even if it didn't offer any methods, tbh, is it gives us a way to express the vector:scalar relationship.</p>",
        "id": 241724221,
        "sender_full_name": "Jubilee",
        "timestamp": 1623035819
    },
    {
        "content": "<p>and in doing so, if we decide it's good, it will let us remove a <strong>lot</strong> of macro boilerplate.</p>",
        "id": 241724329,
        "sender_full_name": "Jubilee",
        "timestamp": 1623035969
    },
    {
        "content": "<p>Oh yeah, I would support that</p>",
        "id": 241724382,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623036027
    },
    {
        "content": "<p>the trait impl itself is kinda grody but like... the grodiness happens <strong>once</strong>. ^^;</p>",
        "id": 241724397,
        "sender_full_name": "Jubilee",
        "timestamp": 1623036097
    },
    {
        "content": "<p>Ah, and we should contrast against <a href=\"https://github.com/rust-lang/rfcs/pull/2948/files\">https://github.com/rust-lang/rfcs/pull/2948/files</a> as well.</p>",
        "id": 242238731,
        "sender_full_name": "Jubilee",
        "timestamp": 1623344761
    },
    {
        "content": "<p>hmm, should that pull request be closed in favor of waiting for the rfc we're working on?</p>",
        "id": 242258426,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623353491
    },
    {
        "content": "<p>I mean technically, we can just overwrite it, having \"updated it in response to concerns\". <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 242260440,
        "sender_full_name": "Jubilee",
        "timestamp": 1623354510
    },
    {
        "content": "<p>I don't want to close any PRs prematurely.</p>",
        "id": 242260452,
        "sender_full_name": "Jubilee",
        "timestamp": 1623354519
    },
    {
        "content": "<p>Slightly off -topic: <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> am I correct that before a PR lands in Rust's stdlib, it's run against all crates registered in <a href=\"http://crates.io\">crates.io</a> in a Crater run?</p>",
        "id": 242287938,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623371004
    },
    {
        "content": "<p>Crater is only run if it's expected to possibly break something</p>",
        "id": 242288043,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623371087
    },
    {
        "content": "<p>For example adding to core/std would not and doesn't require a crater run, but changing functionality might</p>",
        "id": 242288078,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623371124
    },
    {
        "content": "<p>Gotcha. Thanks!</p>",
        "id": 242288243,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623371330
    },
    {
        "content": "<p>But it is against all the packages in <a href=\"http://crates.io\">crates.io</a> with a compat bound on stable right?</p>",
        "id": 242288258,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623371352
    },
    {
        "content": "<p>Well not stable, since crater runs the nightly compiler, but yeah I think it's all crates</p>",
        "id": 242288798,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623371968
    },
    {
        "content": "<p>iirc crater also includes all publicly-visible projects on github</p>",
        "id": 242289879,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623373233
    },
    {
        "content": "<p>Crater is only run sparingly, experiments generally take multiple days to complete, and are only run in the case of great uncertainty. The Rust test suite includes all the regression tests that Rust is concerned with.</p>",
        "id": 242290088,
        "sender_full_name": "Jubilee",
        "timestamp": 1623373513
    },
    {
        "content": "<p>Ok, I'm aking because Julia runs a \"PkgEval\" run for every registered package against the new release to see if there are any breakages (v1.6 -&gt; v1.6.1 -&gt; v1.7 etc).</p>",
        "id": 242290457,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623373965
    },
    {
        "content": "<p>Oh there's simply too many and not enough processing power for that.</p>",
        "id": 242290568,
        "sender_full_name": "Jubilee",
        "timestamp": 1623374118
    },
    {
        "content": "<p>I mean, 4000 packages is a respectable count, I'm not saying Julia has a <strong>lack</strong> of libraries.<br>\nBut Rust has a bit longer compilation loop to begin with...<br>\n...and 62,461 entries in <a href=\"http://crates.io\">crates.io</a> alone.</p>",
        "id": 242290639,
        "sender_full_name": "Jubilee",
        "timestamp": 1623374194
    },
    {
        "content": "<p>So we're starting with that 60k and THEN adding whatever else crater finds in the wider \"Rust ecosystem\".</p>",
        "id": 242290747,
        "sender_full_name": "Jubilee",
        "timestamp": 1623374320
    },
    {
        "content": "<p>hot diggity damn, yeah that's understandable.</p>",
        "id": 242290871,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623374467
    },
    {
        "content": "<p>Thanks for the pointer!</p>",
        "id": 242290875,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623374470
    },
    {
        "content": "<p>I had it in my head that Rust is about 10x larger than Julia, and ~15x crates is close enough.</p>",
        "id": 242290915,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623374512
    },
    {
        "content": "<p>Last I ran crater, <a href=\"https://crater.rust-lang.org/ex/pr-82322\">the run</a> took 3½ days and the report said it looked at 146944 crates.</p>\n<p>...and that was a check-only run.  The ones that run <code>cargo test</code> instead of <code>cargo check</code> take even longer.</p>",
        "id": 242296078,
        "sender_full_name": "scottmcm",
        "timestamp": 1623380689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Describing.20stdsimd's.20approach/near/242290457\">said</a>:</p>\n<blockquote>\n<p>Ok, I'm aking because Julia runs a \"PkgEval\" run for every registered package against the new release to see if there are any breakages (v1.6 -&gt; v1.6.1 -&gt; v1.7 etc).</p>\n</blockquote>\n<p>Rust also runs a crater run against the beta.  Just not every PR.</p>",
        "id": 242296275,
        "sender_full_name": "scottmcm",
        "timestamp": 1623380847
    },
    {
        "content": "<p>Not to mention crater sometimes crashes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I had a PR a while back that took probably two weeks to complete</p>",
        "id": 242297788,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623382644
    },
    {
        "content": "<p>Awesome, thanks for the input people.</p>",
        "id": 242354017,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623422166
    },
    {
        "content": "<p>Does stdsimd give access to any of the MXCSR bit fields?</p>",
        "id": 242354073,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623422186
    },
    {
        "content": "<p>We need the <code>vldmxcsr, vldstmxcsr</code> instructions available to operate on those registers I think.</p>",
        "id": 242354583,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623422378
    },
    {
        "content": "<p>Hell No.</p>",
        "id": 242355798,
        "sender_full_name": "Jubilee",
        "timestamp": 1623422918
    },
    {
        "content": "<p>... ok...</p>",
        "id": 242356110,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623423069
    },
    {
        "content": "<p>...sorry. ^^;;;</p>",
        "id": 242356144,
        "sender_full_name": "Jubilee",
        "timestamp": 1623423087
    },
    {
        "content": "<p>So like... the problem with those is that access to the MXCSR bit field actually can break LLVM compilation assumptions.</p>",
        "id": 242356195,
        "sender_full_name": "Jubilee",
        "timestamp": 1623423116
    },
    {
        "content": "<p>it's literally UB.</p>",
        "id": 242356240,
        "sender_full_name": "Jubilee",
        "timestamp": 1623423125
    },
    {
        "content": "<p>To touch it. At all.<br>\nNow, it so happens that LLVM may not break your code if you actually do it, and LLVM is slowly growing the capability to handle altering MXCSR in a principled manner, but anyone touching it is doing so at their own risk, aware that it's UB.</p>\n<p>And we cannot at all expose that API to users, even unsafely, because some floating point vector targets require all alterations of the FP environment to be known and embedded in instructions statically.</p>",
        "id": 242356521,
        "sender_full_name": "Jubilee",
        "timestamp": 1623423255
    },
    {
        "content": "<p>Yeah, those are good reasons not to touch that then!</p>",
        "id": 242356848,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623423444
    },
    {
        "content": "<p>Another silly question - are <code>xmm</code> operations called scalar floating point, and <code>ymm/zmm</code> operations called vector floating point?</p>",
        "id": 242357047,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623423547
    },
    {
        "content": "<p>xmm is 128bit and can hold 2 64bit floats or 4 32bit floats. it can also hold integers. ymm is 256bit and zmm 512bit.</p>",
        "id": 242357130,
        "sender_full_name": "bjorn3",
        "timestamp": 1623423597
    },
    {
        "content": "<p>That I get - I'm just trying to make sense of the terminology used in this assembly/SIMD book I'm learning. It's <code>Modern x86 Assembly</code> By Kusswurm.</p>",
        "id": 242357243,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623423635
    },
    {
        "content": "<p>Uhhh, do we have horizontal packed addition and subtraction? (Not horizontal sum)</p>",
        "id": 242357783,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623423854
    },
    {
        "content": "<p>What's the difference?</p>",
        "id": 242357860,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623423888
    },
    {
        "content": "<p><code>vhaddps xmm3, xmm1, xmm2</code> does</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..=</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">..=</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242358288,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623424081
    },
    {
        "content": "<p><code>vhsubpd xmm3, xmm1, xmm2</code> does</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">xmm2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">xmm1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242358640,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623424198
    },
    {
        "content": "<p>xmm can be either scalar OR vector floating point.</p>",
        "id": 242358752,
        "sender_full_name": "Jubilee",
        "timestamp": 1623424235
    },
    {
        "content": "<p>Oh we don't have any partial adds like that, you'd have to shuffle the vectors to do that</p>",
        "id": 242358834,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623424284
    },
    {
        "content": "<p>Gotcha - is there a big latency penalty for using xmm and not fp registers? Or are all fp registers xmm registers?</p>",
        "id": 242358845,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623424288
    },
    {
        "content": "<p>xmm are the FP registers <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242358869,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623424305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> ok - Do we plan to support those instructions? I don't mind taking it on.</p>",
        "id": 242358922,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623424313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> , ah ok, that tracks.</p>",
        "id": 242358995,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623424323
    },
    {
        "content": "<p>Arm typically works like that nowadays as well</p>",
        "id": 242358999,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623424325
    },
    {
        "content": "<p>Though slightly differently</p>",
        "id": 242359020,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623424341
    },
    {
        "content": "<p>And you do <strong>not</strong> want to use the x87 FPU, generally, because it's slow and all hell breaks loose.</p>",
        "id": 242359024,
        "sender_full_name": "Jubilee",
        "timestamp": 1623424342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> we probably don't want to support any instructions like that since they're very intel-specific</p>",
        "id": 242359068,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623424367
    },
    {
        "content": "<p>You would be able to generate them with a shuffle but you'd probably get actual shuffles on most other architectures</p>",
        "id": 242359163,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623424407
    },
    {
        "content": "<p>yeah, my general question set for whether we want to support something is something like</p>\n<ol start=\"0\">\n<li>\n<p>does x86-64 support this?<br>\n0a. okay, I know I just asked, but does <strong>AMD</strong> support this?</p>\n</li>\n<li>\n<p>does Arm Neon support this?<br>\n1a. Arm SVE?</p>\n</li>\n<li>\n<p>Does Power support this?</p>\n</li>\n<li>How about RISCV-V?</li>\n<li>What about GPU vector units?</li>\n</ol>",
        "id": 242360289,
        "sender_full_name": "Jubilee",
        "timestamp": 1623424882
    },
    {
        "content": "<p>Ok ok - I just skimmed my Arm assembly book and yes, there's no instructions like that there.</p>",
        "id": 242360983,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623425198
    },
    {
        "content": "<p>Thanks for the explanations peeps, I'm writing it all down in the diary and starring the responses.</p>",
        "id": 242361022,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623425213
    },
    {
        "content": "<p>Note that we hardly need support for all of those but my feelings are somewhat warm towards \"flexible vectors\" precisely because there's actually more than one implementation of those already.</p>",
        "id": 242361274,
        "sender_full_name": "Jubilee",
        "timestamp": 1623425336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> what's the name of SIMD programming in RISCV? RISCV -V ?</p>",
        "id": 242361570,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623425457
    },
    {
        "content": "<p>Yeah, RISCV Vector Extension. I don't even know if it's fully standardized yet but I believe there's some implementations you can load into an FPGA or something. ^^; It's at like 0.999999-FINAL-NO-WAIT-REALLY still I think.</p>",
        "id": 242361779,
        "sender_full_name": "Jubilee",
        "timestamp": 1623425547
    },
    {
        "content": "<p>Neat - I read an essay about how vector programming works in RISCV and it does sound appealing.</p>",
        "id": 242361862,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623425586
    },
    {
        "content": "<p>Someone I spoke to complained that it implies a very specific underlying microarchitecture strongly (apparently very like GPUs) and they thought SVE was better for not doing that, but I have to admit RVV is nice for having this very regular abstraction. SVE is still miles better than x86's spiderweb, though, in terms of cleanliness.</p>",
        "id": 243452039,
        "sender_full_name": "Jubilee",
        "timestamp": 1624315076
    },
    {
        "content": "<p>icr if I linked it before in this thread, but this is definitely helpful reading for understanding: <a href=\"https://www.sigarch.org/simd-instructions-considered-harmful/\">https://www.sigarch.org/simd-instructions-considered-harmful/</a></p>",
        "id": 243452174,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624315186
    },
    {
        "content": "<p>note that was written before Arm SVE existed</p>",
        "id": 243452298,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624315234
    },
    {
        "content": "<p>x86's maze of instructions kind of requires you to implicitly shift between \"ymm\" and \"zmm\" and \"xmm\" modes anyways, IIRC.</p>",
        "id": 243452711,
        "sender_full_name": "Jubilee",
        "timestamp": 1624315590
    },
    {
        "content": "<p>and don't even mention mmx and 3dnow</p>",
        "id": 243452782,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624315675
    }
]