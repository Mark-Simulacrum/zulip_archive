[
    {
        "content": "<p>So this issue keeps being brought up to block work on our current implementation. But I think it comes up against enormous constraints when we consider what it actually would be implemented against.<br>\nFor reference, references: <a href=\"https://doc.rust-lang.org/std/primitive.reference.html\">https://doc.rust-lang.org/std/primitive.reference.html</a></p>\n<p>Even if we allow references in vectors, comparisons of <code>Simd&lt;&amp;T, _&gt;</code> should follow the semantic of deferring to the internal value, just like references do, and we can't allow <code>Simd&lt;&amp;T, _&gt;</code> _unless_ T: SimdElement still, or else it is invalid to use <code>Simd::gather</code> or <code>Simd::scatter</code> on those values.</p>\n<p>So we can elevate our bounds another rank and allow the new bound, which applies to both SimdElement and &amp;SimdElement, to be used in vectors, but I don't see a way forward to simply allow arbitrary references.</p>\n<p>This limitation also is what would allow us to be sure they are thin references, though.</p>",
        "id": 262631172,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782073
    },
    {
        "content": "<p>Are we not going to allow pointers to anything other than SimdElement either?  That doesn't seem quite right to me</p>",
        "id": 262631489,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782245
    },
    {
        "content": "<p>I <strong>believe</strong>, but am not 100% on, that raw pointers are always thin. In that sense they always satisfy the \"logical bound\" (as opposed to the programmatic representation of that bound) of being a scalar, and using them inappropriately can simply be <code>unsafe</code>.</p>",
        "id": 262631658,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782360
    },
    {
        "content": "<p>I'd just say <code>PartialEq</code> on <code>Simd&lt;&amp;T, N&gt;</code> is like calling <code>Debug</code>...there to make it easy when you really need it, but not intended for speed.</p>",
        "id": 262631747,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637782424
    },
    {
        "content": "<p>aka. it compiles to <code>a.into_iter().eq(b)</code> or similar, rather than a simd compare</p>",
        "id": 262631847,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637782473
    },
    {
        "content": "<p>Honestly, why bother at that point?</p>",
        "id": 262631860,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782487
    },
    {
        "content": "<p><code>Simd&lt;&amp;T, N&gt;::lane_eq</code> would just not exist or be called <code>lane_ptr_eq</code></p>",
        "id": 262631918,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637782524
    },
    {
        "content": "<p>why bother? cuz lifetimes are <em>really</em> useful, i would hate to be stuck with only raw pointers</p>",
        "id": 262631978,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637782564
    },
    {
        "content": "<p>re <span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> 's remark:</p>\n<blockquote>\n<p>vectors of fat pointers should totally be doable by just allocating <code>i128</code> lanes or twice as many lanes or similar (maybe both at different times?), though, yeah, we'll probably at first want a <code>T: Thin + ?Sized</code> bound for <code>Simd&lt;&amp;'a T, N&gt;</code>. Vectors of fat pointers will also need to deal with the possible future extensions of fat pointers to more arbitrary metadata types for <code>&amp;dyn Debug + Display</code> or custom metadata.</p>\n</blockquote>\n<p>This is kind of why I don't think we can rely on any specific size of references involved.</p>\n<p>If we did have that sort of thing allowed, it should be allowing Simd&lt;&amp;T&gt; to be equivalent to the matching struct (a vector of pointers, a vector of lengths, etc.)</p>",
        "id": 262631991,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782567
    },
    {
        "content": "<p>But at that point it's not clear why we don't evolve a more sophisticated design for <strong>actual complex types</strong>.</p>",
        "id": 262632071,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782618
    },
    {
        "content": "<p>Raw pointers aren't always thin. <code>*const [T]</code> and <code>*const dyn T</code> and such are example of fat thin pointers. That said, I think there's no point for Simd&lt;FatPointer, _&gt; of any sort, references or raw. The layout is unspecified, anyway</p>",
        "id": 262632073,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637782618
    },
    {
        "content": "<p>Yeah, we need a specified layout in order to work.</p>",
        "id": 262632122,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782642
    },
    {
        "content": "<p>What is the problem that Simd of references solves? I thought that SIMD is done using MD values on the stack(?)</p>",
        "id": 262632138,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1637782649
    },
    {
        "content": "<p>We could avoid the entire issue of references as elements if we don't assume that T: Trait means Simd&lt;T&gt;: Trait...</p>",
        "id": 262632151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782657
    },
    {
        "content": "<p>well, we're the rust compiler, we get to invent our own layout!</p>",
        "id": 262632181,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637782672
    },
    {
        "content": "<p>Only if we get everyone else to agree on it.</p>",
        "id": 262632240,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399416\">Jorge Leitao</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Hypothetical.20vector.20of.20reference.20comparators/near/262632138\">said</a>:</p>\n<blockquote>\n<p>What is the problem that Simd of references solves? I thought that SIMD is done using MD values on the stack(?)</p>\n</blockquote>\n<p>I mean the point of this thread is kinda that I have no idea, you tell me. :D</p>",
        "id": 262632283,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399416\">@Jorge Leitao</span> one thing it would solve is allowing scatter/gather where you can push off the safety guarantees to another part of code</p>",
        "id": 262632292,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782723
    },
    {
        "content": "<p>no one else has vectors of fat pointers, so we get to define what it does</p>",
        "id": 262632307,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637782734
    },
    {
        "content": "<p>scatter/gather only works on scalars tho'.</p>",
        "id": 262632342,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782762
    },
    {
        "content": "<p>Are fat pointers the ones that carry metadata?</p>",
        "id": 262632363,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1637782774
    },
    {
        "content": "<p>Yes.</p>",
        "id": 262632372,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782778
    },
    {
        "content": "<p>Yeah, it's just one example, we may come up with more reasons they're useful</p>",
        "id": 262632381,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782782
    },
    {
        "content": "<p>They're literally multiple usizes, thus \"fat\", because they are double-wide.</p>",
        "id": 262632385,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Hypothetical.20vector.20of.20reference.20comparators/near/262632381\">said</a>:</p>\n<blockquote>\n<p>Yeah, it's just one example, we may come up with more reasons they're useful</p>\n</blockquote>\n<p>I mean I think it's a legitimate example but it's why I think a design that elevates the bounds one rank is sufficient.</p>",
        "id": 262632463,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782811
    },
    {
        "content": "<p>gather works great for going from <code>Simd&lt;&amp;usize, N&gt;</code> to <code>Simd&lt;usize, N&gt;</code></p>",
        "id": 262632472,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637782820
    },
    {
        "content": "<p>I am just saying that T: Trait implies Simd&lt;T&gt;: Trait is wrong unless we limit ourselves to only primitives</p>",
        "id": 262632520,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782860
    },
    {
        "content": "<p>And I think that's a premature limitation to make</p>",
        "id": 262632553,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> is there a MWE of using fat pointers in SIMD yet?</p>",
        "id": 262632574,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1637782912
    },
    {
        "content": "<p>I'm personally not saying we absolutely need to add support for vectors of references, but I also don't want a design that prevents it</p>",
        "id": 262632589,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782920
    },
    {
        "content": "<p>No, not that I am aware of.</p>",
        "id": 262632590,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782920
    },
    {
        "content": "<p>I believe literally no one has done it.</p>",
        "id": 262632638,
        "sender_full_name": "Jubilee",
        "timestamp": 1637782927
    },
    {
        "content": "<p>Ground breaking :D</p>",
        "id": 262632648,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1637782939
    },
    {
        "content": "<p>I don't think it's fair to say no one has done it, because vectors of pointers is relatively common and rust uniquely has special pointers known as references</p>",
        "id": 262632709,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637782992
    },
    {
        "content": "<p>i think it's a bit dubious — note that the compiler is allowed to implicitly deref &amp;T when it feels like it</p>",
        "id": 262632717,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637782999
    },
    {
        "content": "<p>vector of pointers isnt really that common</p>",
        "id": 262632744,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783015
    },
    {
        "content": "<p>Well, it's common enough that I've used it several times</p>",
        "id": 262632780,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783041
    },
    {
        "content": "<p>its not unheard of but pretty much i've always seen people use vectors of indices for gathers</p>",
        "id": 262632793,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783043
    },
    {
        "content": "<p>There are data structures that are efficient if you store vectors of pointers</p>",
        "id": 262632853,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783063
    },
    {
        "content": "<p>What do those pointers point to tho' really.</p>",
        "id": 262632877,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783081
    },
    {
        "content": "<p>with vectors of indices the indices don't have to be 64 bit when your address space is 64 bit. this is why i always saw indices, since that can be a significant savings. anyway, i'm not trying to say that vectors of pointers are bad, just that i don't know that they're so good we need them and also vector of references</p>",
        "id": 262632962,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783154
    },
    {
        "content": "<p>it begs the question would we allow Simd&lt;Box&lt;T&gt;, _&gt;?</p>",
        "id": 262633020,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783165
    },
    {
        "content": "<p>Please no. :D</p>",
        "id": 262633035,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783173
    },
    {
        "content": "<p>which is a bit much</p>",
        "id": 262633039,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783174
    },
    {
        "content": "<p>Well, right now we define all elements to be Copy which I think is reasonable</p>",
        "id": 262633061,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783193
    },
    {
        "content": "<p>So no Box</p>",
        "id": 262633071,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783202
    },
    {
        "content": "<p>that also forbids Simd&lt;&amp;mut T, _&gt;</p>",
        "id": 262633083,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783214
    },
    {
        "content": "<p>which is a natural request if we have Simd&lt;&amp;T, _&gt;</p>",
        "id": 262633111,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783229
    },
    {
        "content": "<p>But not Cell&lt;&amp;mut T&gt;</p>",
        "id": 262633113,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783234
    },
    {
        "content": "<p>i don't follow.</p>",
        "id": 262633135,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783248
    },
    {
        "content": "<p>This feels like a shitpost, tbh.</p>",
        "id": 262633148,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783264
    },
    {
        "content": "<p>sorry, I'm not trying to shitpost.</p>",
        "id": 262633168,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783279
    },
    {
        "content": "<p>No, I mean <code>Simd&lt;Cell&lt;&amp;mut T&gt;, _&gt;</code></p>",
        "id": 262633227,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783298
    },
    {
        "content": "<p>yes thats a bit much.</p>",
        "id": 262633239,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783311
    },
    {
        "content": "<p>a vector you have to have runtime dynamic checks for each individual lane of???</p>",
        "id": 262633241,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783311
    },
    {
        "content": "<p>You could have Simd&lt;Cell&lt;&amp;mut T&gt;, _&gt; which is a safe equivalent to Simd&lt;* mut T, _&gt;</p>",
        "id": 262633248,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783316
    },
    {
        "content": "<p>?????????????</p>",
        "id": 262633251,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783319
    },
    {
        "content": "<p>Cell isn't copy either</p>",
        "id": 262633255,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783321
    },
    {
        "content": "<p>it just requires the value be Copy</p>",
        "id": 262633268,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637783339
    },
    {
        "content": "<p>Yeah that is true</p>",
        "id": 262633286,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783355
    },
    {
        "content": "<p>Okay,</p>",
        "id": 262633296,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783365
    },
    {
        "content": "<p>Like I said, I'm not attached to vectors of references, but I don't want to attach arbitrary limitations now that prevent them, either</p>",
        "id": 262633319,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783387
    },
    {
        "content": "<p>Or prevent any other unusual element types</p>",
        "id": 262633383,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783413
    },
    {
        "content": "<p>Given that we have the liberty to rewrite all this code at any moment</p>",
        "id": 262633394,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783424
    },
    {
        "content": "<p>that is only an issue if you are proposing stabilization today</p>",
        "id": 262633408,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783437
    },
    {
        "content": "<p>I don't think it's fair to say we should just write whatever we want because it's not going to be stable today</p>",
        "id": 262633442,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783464
    },
    {
        "content": "<p>We should be aiming for something that is correct now, even though it's possible we will come up with better solutions in the future</p>",
        "id": 262633479,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783497
    },
    {
        "content": "<p>Several of the examples you have brought up tho' don't even work with our current model.</p>",
        "id": 262633543,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783525
    },
    {
        "content": "<p>Even if we wiggle some of the trait bounds around.</p>",
        "id": 262633565,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783536
    },
    {
        "content": "<p>if something hasn't even been agreed on as an update to our model, it shouldn't be impacting how we write the code <strong>much</strong>.</p>",
        "id": 262633630,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783580
    },
    {
        "content": "<p>My fundamental concern is that T: Trait implying Simd&lt;T, _&gt;: Trait is wrong, this is just one example of why it might be wrong</p>",
        "id": 262633636,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783584
    },
    {
        "content": "<p>Regardless of if we actually want to support references or not</p>",
        "id": 262633669,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783610
    },
    {
        "content": "<p>I will agree that such is a reason for action when you post a revert of <a href=\"https://github.com/rust-lang/portable-simd/issues/36\">https://github.com/rust-lang/portable-simd/issues/36</a></p>",
        "id": 262633758,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783650
    },
    {
        "content": "<p>Yeah those functions are wrong too</p>",
        "id": 262633796,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783689
    },
    {
        "content": "<p>But I don't think we should be going full steam ahead with something we know is wrong because we already had some mistakes</p>",
        "id": 262633830,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783721
    },
    {
        "content": "<p>Throw down, then!<br>\nLike my issue here isn't that I think you're wrong, it's that I think your disagreement here functionally constitutes displacement of energy that could be put into actually making the changes you want to see.</p>",
        "id": 262633943,
        "sender_full_name": "Jubilee",
        "timestamp": 1637783773
    },
    {
        "content": "<p>Well, tomorrow is Thanksgiving and I personally don't have the time to make the changes at this moment, but now you already merged the other PR that I had objections with that just increases the amount of code I would need to change</p>",
        "id": 262634045,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783861
    },
    {
        "content": "<p>I don't think it's fair to continue merging code today because I haven't gotten around to fixing a months-old mistake I only recently noticed</p>",
        "id": 262634152,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637783913
    },
    {
        "content": "<p>And that is why I proposed <a href=\"https://github.com/rust-lang/portable-simd/issues/191\">portable-simd#191</a>.<br>\nAnyways. Go enjoy your holiday.<br>\nI don't have friends or family, so I do whatever instead.</p>",
        "id": 262634537,
        "sender_full_name": "Jubilee",
        "timestamp": 1637784125
    }
]