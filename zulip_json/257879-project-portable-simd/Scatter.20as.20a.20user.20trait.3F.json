[
    {
        "content": "<p>What if what you're scattering to doesn't have indices?</p>",
        "id": 265365053,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639777698
    },
    {
        "content": "<p>scatter to <code>HashSet</code>!!</p>",
        "id": 265365363,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639777826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Scatter.20to.20.5BMaybeUninit.3CT.3E.5D/near/265365053\">said</a>:</p>\n<blockquote>\n<p>What if what you're scattering to doesn't have indices?</p>\n</blockquote>\n<p>set <code>indices</code> to <code>Simd&lt;(), N&gt;</code>, of course!</p>",
        "id": 265365569,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639777955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Scatter.20to.20.5BMaybeUninit.3CT.3E.5D/near/265365053\">said</a>:</p>\n<blockquote>\n<p>What if what you're scattering to doesn't have indices?</p>\n</blockquote>\n<p>Uhh example?</p>",
        "id": 265365768,
        "sender_full_name": "Jubilee",
        "timestamp": 1639778115
    },
    {
        "content": "<p>and yeah <span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> was talking about making associated types and constants work Soon-ish for const generics, so I think a trait that used an associated type as an input to one of its implemented functions would be viable.</p>",
        "id": 265366567,
        "sender_full_name": "Jubilee",
        "timestamp": 1639778562
    },
    {
        "content": "<p>Well you mentioned the linked list example, you're not scattering to offsets to pointers, you're probably just using those pointers directly</p>",
        "id": 265366820,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639778704
    },
    {
        "content": "<p>Oh yes.</p>",
        "id": 265366844,
        "sender_full_name": "Jubilee",
        "timestamp": 1639778721
    },
    {
        "content": "<p>With an associated type it's actually fine if the linked list accepts pointers as \"\"\"indices\"\"\".</p>",
        "id": 265366999,
        "sender_full_name": "Jubilee",
        "timestamp": 1639778787
    },
    {
        "content": "<p>theoretically you could mush linked lists into that api, the indexes would be cursors or something, and the <code>self</code> would be the linked list itself</p>",
        "id": 265367014,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639778800
    },
    {
        "content": "<p>yeah.</p>",
        "id": 265367025,
        "sender_full_name": "Jubilee",
        "timestamp": 1639778810
    },
    {
        "content": "<p>there are other containers that that doesn't work on, such as sets</p>",
        "id": 265367078,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639778844
    },
    {
        "content": "<p>It just sounds potentially not ergonomic, and I'm not sure what exactly the gain is?</p>",
        "id": 265367098,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639778862
    },
    {
        "content": "<p>I'm interested to see an implementation but it seems difficult to make anything much better than something like the fns we already have</p>",
        "id": 265367178,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639778887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Scatter.20as.20a.20user.20trait.3F/near/265367098\">said</a>:</p>\n<blockquote>\n<p>It just sounds potentially not ergonomic, and I'm not sure what exactly the gain is?</p>\n</blockquote>\n<p>Mostly it would allow decoupling the scatter methods from a given container. We're providing them for slices because it seems natural but I am increasingly of the opinion that while there is nothing <strong>wrong</strong> with this, at the same time there is nothing <strong>right</strong> either.</p>",
        "id": 265371342,
        "sender_full_name": "Jubilee",
        "timestamp": 1639780672
    },
    {
        "content": "<p>The only good argument for slices is that it's a standard type and it's easy to write a safe wrapper, but it does get complicated if you don't want to compromise any performance</p>",
        "id": 265371639,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639780865
    },
    {
        "content": "<p>Most people would be happy with the regular pointer interface as the bare minimum anyway, I think</p>",
        "id": 265371685,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639780908
    },
    {
        "content": "<p>Beyond that is just convenience really</p>",
        "id": 265371762,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639780933
    },
    {
        "content": "<p>I agree none of this is really right or wrong</p>",
        "id": 265371782,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639780957
    },
    {
        "content": "<p>Yeah, I think the dealio is that if someone <strong>can</strong> write a performant safe interface for a container, they should be allowed to, and they will have internal knowledge we don't.</p>",
        "id": 265372575,
        "sender_full_name": "Jubilee",
        "timestamp": 1639781282
    },
    {
        "content": "<p>I expect this to be a thing where like users can implement it but in practice people only use the stdlib impls for slices.</p>",
        "id": 265372670,
        "sender_full_name": "Jubilee",
        "timestamp": 1639781340
    },
    {
        "content": "<p>Can we come up with an example for when a user would need to implement this? The bar for user-implemented traits in core is rather high, and usually indicates a fundamental concept</p>",
        "id": 265377865,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639785439
    },
    {
        "content": "<p>it's kinda like <code>std::io::Write::write_vectored</code></p>",
        "id": 265378078,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1639785608
    },
    {
        "content": "<p>Err, how so?</p>",
        "id": 265379120,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1639786362
    }
]