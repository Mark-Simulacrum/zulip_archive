[
    {
        "content": "<p>where should libmvec go?</p>",
        "id": 236095763,
        "sender_full_name": "Jubilee",
        "timestamp": 1619386764
    },
    {
        "content": "<p>I'm not really sure what we should do, I don't know if we should work with llvm to make our own vector math lib</p>",
        "id": 236095860,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619386844
    },
    {
        "content": "<p>We likely are going to want to provide more vectorized functions than existing libs provide</p>",
        "id": 236095873,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619386879
    },
    {
        "content": "<p>I also don't know what happens if our symbol names conflict with someone actually trying to link against a system vector math lib</p>",
        "id": 236095945,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619386942
    },
    {
        "content": "<p>Just realized this is another topic.</p>",
        "id": 236095982,
        "sender_full_name": "Jubilee",
        "timestamp": 1619387000
    },
    {
        "content": "<p>True lol</p>",
        "id": 236096088,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619387148
    },
    {
        "content": "<p>I'm also not sure what to do about calling convention</p>",
        "id": 236096094,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619387160
    },
    {
        "content": "<p>Perhaps we want to sort out the simd C ffi problem entirely first</p>",
        "id": 236096198,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619387263
    },
    {
        "content": "<p>imo, the calling convention thing is sorted by teaching rustc the cursed knowledge of what a vector register really is.</p>",
        "id": 236097766,
        "sender_full_name": "Jubilee",
        "timestamp": 1619388822
    },
    {
        "content": "<p>Well that's not really the issue, the issue is that SSE and AVX have different calling conventions right?</p>",
        "id": 236097936,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619388992
    },
    {
        "content": "<p>Only kinda, and that's what I mean by \"teach rustc the cursed knowledge of what a vector register really is\".</p>",
        "id": 236097972,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389061
    },
    {
        "content": "<p>Also to some extent the whole concept of a vector math lib only applies to x86-64</p>",
        "id": 236098027,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389102
    },
    {
        "content": "<p>does it?</p>",
        "id": 236098035,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389117
    },
    {
        "content": "<p>Well if you don't have NEON... You're just calling libm anyway</p>",
        "id": 236098044,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389135
    },
    {
        "content": "<p>Well yeah, but on aarch64 you have Neon by definition.</p>",
        "id": 236098057,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389152
    },
    {
        "content": "<p>So it should never generate libm calls on aarch64 anyway</p>",
        "id": 236098073,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389196
    },
    {
        "content": "<p>aarch64 is very \"like\" x86_64 in that it has a standard 128-bit vector register (Neon or SSE2) which is also the preferred form for floats.<br>\nweeeell...</p>",
        "id": 236098102,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389204
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">f32x4:</span><span class=\"err\">:</span><span class=\"nl\">powi:</span>\n        <span class=\"nf\">sub</span>     <span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#64</span>\n        <span class=\"nf\">str</span>     <span class=\"no\">x30</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#32</span><span class=\"p\">]</span>\n        <span class=\"nf\">stp</span>     <span class=\"no\">x20</span><span class=\"p\">,</span> <span class=\"no\">x19</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#48</span><span class=\"p\">]</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">q0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">x0</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">w0</span><span class=\"p\">,</span> <span class=\"no\">w1</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">w19</span><span class=\"p\">,</span> <span class=\"no\">w1</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">x20</span><span class=\"p\">,</span> <span class=\"no\">x8</span>\n        <span class=\"nf\">str</span>     <span class=\"no\">q0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#16</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">s0</span><span class=\"p\">,</span> <span class=\"no\">v0.s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"nf\">bl</span>      <span class=\"no\">__powisf2</span>\n        <span class=\"nf\">str</span>     <span class=\"no\">d0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">]</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">q0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#16</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">w0</span><span class=\"p\">,</span> <span class=\"no\">w19</span>\n        <span class=\"nf\">bl</span>      <span class=\"no\">__powisf2</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">q1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">w0</span><span class=\"p\">,</span> <span class=\"no\">w19</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">v0.s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"no\">v1.s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"nf\">str</span>     <span class=\"no\">q0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">]</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">q0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#16</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">s0</span><span class=\"p\">,</span> <span class=\"no\">v0.s</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"nf\">bl</span>      <span class=\"no\">__powisf2</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">q1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">w0</span><span class=\"p\">,</span> <span class=\"no\">w19</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">v1.s</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"no\">v0.s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">q0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#16</span><span class=\"p\">]</span>\n        <span class=\"nf\">str</span>     <span class=\"no\">q1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">s0</span><span class=\"p\">,</span> <span class=\"no\">v0.s</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"nf\">bl</span>      <span class=\"no\">__powisf2</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">q1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">]</span>\n        <span class=\"nf\">ldr</span>     <span class=\"no\">x30</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#32</span><span class=\"p\">]</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">v1.s</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"no\">v0.s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"nf\">str</span>     <span class=\"no\">q1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">x20</span><span class=\"p\">]</span>\n        <span class=\"nf\">ldp</span>     <span class=\"no\">x20</span><span class=\"p\">,</span> <span class=\"no\">x19</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#48</span><span class=\"p\">]</span>\n        <span class=\"nf\">add</span>     <span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"no\">sp</span><span class=\"p\">,</span> <span class=\"mi\">#64</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>",
        "id": 236098128,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389227
    },
    {
        "content": "<p>it turns out that is wishful thinking. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 236098151,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389261
    },
    {
        "content": "<p>Well in that case not sure we need libmvec, we just need to implement this without a compiler intrinsic</p>",
        "id": 236098207,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389314
    },
    {
        "content": "<p>Because NEON simply doesn't have an instruction for that</p>",
        "id": 236098261,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389338
    },
    {
        "content": "<p>isn't that kind of the same thing?</p>",
        "id": 236098263,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389339
    },
    {
        "content": "<p>No, libmvec is for when the architecture sometimes has an instruction</p>",
        "id": 236098270,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389357
    },
    {
        "content": "<p>I suppose.</p>",
        "id": 236098280,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389371
    },
    {
        "content": "<p>Like you have an fma instruction with FMA3 but not base x86-64</p>",
        "id": 236098285,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389378
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 236098304,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389438
    },
    {
        "content": "<p>Perhaps we should teach LLVM a sequence of LLVM IR to use instead of libm calls, though I'm not sure if that's the right solution either</p>",
        "id": 236098361,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389474
    },
    {
        "content": "<p>I guess the thing is that I expect this to crop up on other architectures over time. We're gonna gain new vector instructions.</p>",
        "id": 236098363,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389479
    },
    {
        "content": "<p>hmm.</p>",
        "id": 236098375,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389496
    },
    {
        "content": "<p>Right but are they going to be optional features</p>",
        "id": 236098378,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389501
    },
    {
        "content": "<p>probably?</p>",
        "id": 236098388,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389512
    },
    {
        "content": "<p>like... in the same sense they're \"optional\" on x86.</p>",
        "id": 236098405,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389524
    },
    {
        "content": "<p>NEON was optional on arm v7 but other than that optional vector extensions seems to be an Intel thing right now</p>",
        "id": 236098421,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389551
    },
    {
        "content": "<p>Note that I'm not suggesting we don't support it, just thinking that might give us a hint as to where we special-case things</p>",
        "id": 236098496,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389625
    },
    {
        "content": "<p>Oh no, it's going to be an Arm thing soon too.<br>\naarch64 with and without SVE, namely.</p>",
        "id": 236098499,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389630
    },
    {
        "content": "<p>Right, but I doubt they will break down functionality the way intel has. Like you have vectors but you can't take a square root. That kind of thing</p>",
        "id": 236098569,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389705
    },
    {
        "content": "<p>Either you'll have them or you won't, probably</p>",
        "id": 236098571,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389716
    },
    {
        "content": "<p>And Power has vector instructions dependent on version as well.</p>",
        "id": 236098583,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389749
    },
    {
        "content": "<p>Hmm</p>",
        "id": 236098586,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389760
    },
    {
        "content": "<p>which are explicitly enhancements to the existing 128 bit registers.</p>",
        "id": 236098587,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389763
    },
    {
        "content": "<p>i.e. basically the same story as SSE2 vs. SSE3 vs. SSE4.1 vs. SSE4.2</p>",
        "id": 236098602,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389777
    },
    {
        "content": "<p>The differences are more <em>subtle</em> on other architectures, I will grant.</p>",
        "id": 236098657,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389805
    },
    {
        "content": "<p>or more stark, in some ways.</p>",
        "id": 236098663,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389815
    },
    {
        "content": "<p>Intel clearly treats the extensions as patch releases</p>",
        "id": 236098692,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389847
    },
    {
        "content": "<p>Yeah, whereas AMD is more likely to apply a feature and then toy with it and then get rid of it(!)</p>",
        "id": 236098730,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389907
    },
    {
        "content": "<p>To be fair I think FMA4 was intel's fault for not wanting to add the instructions</p>",
        "id": 236098786,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389937
    },
    {
        "content": "<p>But yes</p>",
        "id": 236098791,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619389941
    },
    {
        "content": "<p>I mean yes but they've done it with other things too.</p>",
        "id": 236098797,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389946
    },
    {
        "content": "<p>which is <em>fine</em> imo.</p>",
        "id": 236098803,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389955
    },
    {
        "content": "<p>Anyway perhaps what we want to do is propose something to LLVM that's like compiler-rt, it's not some haphazard insertion of some other vector libms, it's actually a collection of all functions LLVM could possibly generate but without libm</p>",
        "id": 236098872,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390034
    },
    {
        "content": "<p>hmm.</p>",
        "id": 236098918,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390053
    },
    {
        "content": "<p>As it stands LLVM only uses vector math libs for like 3 functions, and we probably have around 10 that will generate libm calls</p>",
        "id": 236098971,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390104
    },
    {
        "content": "<p>Some of which aren't even provided by the various math libs</p>",
        "id": 236098995,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390128
    },
    {
        "content": "<p>right.</p>",
        "id": 236099008,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390157
    },
    {
        "content": "<p>It's also probably write-once as long as it's done in generic llvm vectors (even if it's in C/C++)</p>",
        "id": 236099010,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390159
    },
    {
        "content": "<p><span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 236099071,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390192
    },
    {
        "content": "<p>Though</p>",
        "id": 236099080,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390203
    },
    {
        "content": "<p>I am concerned that on many architectures the appropriate thing to do will be to call libm</p>",
        "id": 236099088,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390215
    },
    {
        "content": "<p>Like on armv7 without NEON... We should be calling libm</p>",
        "id": 236099099,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390229
    },
    {
        "content": "<p>mmm.</p>",
        "id": 236099101,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390233
    },
    {
        "content": "<p>Well, okay, so are you familiar with the notion of \"libcall legalizing\"?</p>",
        "id": 236099199,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390334
    },
    {
        "content": "<p>when to expand an abstract LLVM intrinsic into a libcall is something that LLVM's internal logic handles.</p>",
        "id": 236099226,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390400
    },
    {
        "content": "<p>Well not a formal name for it, but yes, it happens somewhere when lowering</p>",
        "id": 236099429,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390598
    },
    {
        "content": "<p>Right.<br>\nLLVM has a legalization phase, which is where the compiler decides what instructions are <strong>valid</strong> to use.</p>",
        "id": 236099486,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390678
    },
    {
        "content": "<p>Right</p>",
        "id": 236099499,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390710
    },
    {
        "content": "<p>So, the upshot of that is... LLVM already <em>knows</em> it has to use libm on Armv7 without Neon!<br>\nIt's fine.</p>",
        "id": 236099517,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390734
    },
    {
        "content": "<p>Oh yeah of course, I'm just suggesting we don't want to write a vectorized libm for armv7</p>",
        "id": 236099570,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619390770
    },
    {
        "content": "<p>well yes.</p>",
        "id": 236099577,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390778
    },
    {
        "content": "<p>closely related <a href=\"https://github.com/rust-lang/stdsimd/issues/109\">https://github.com/rust-lang/stdsimd/issues/109</a> funding potentially available for writing a libmvec</p>",
        "id": 236102422,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1619393832
    }
]