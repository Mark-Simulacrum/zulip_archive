[
    {
        "content": "<p>Hello everyone!<br>\n<a href=\"https://hackmd.io/cAW2WJISSYWOW5a3qlipGQ?both\">https://hackmd.io/cAW2WJISSYWOW5a3qlipGQ?both</a> is up!</p>",
        "id": 234220376,
        "sender_full_name": "Jubilee",
        "timestamp": 1618257430
    },
    {
        "content": "<p>We have two PRs open that are both kinda blocked on how we test wasm. I think that since wasm targets are \"moving\" in a much more significant sense, we should be comparing at least two with different implementations.</p>",
        "id": 234223788,
        "sender_full_name": "Jubilee",
        "timestamp": 1618258873
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89\">#89</a> seems totally uncontroversial if it weren't for that?<br>\n<a href=\"https://github.com/rust-lang/rust/issues/83\">#83</a>, I should take a closer look at again, there were a few documentation nits.</p>",
        "id": 234224600,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> did you see the issue I tagged you in?</p>",
        "id": 234224782,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259296
    },
    {
        "content": "<p>A little detail I left out, it looks like the wasm simd proposal has been finalized and the rust tooling has been updated to support it (but not wasm-bingen, yet)</p>",
        "id": 234224915,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259364
    },
    {
        "content": "<p>You mean <a href=\"https://github.com/rust-lang/rust/issues/92\">#92</a>?</p>",
        "id": 234224959,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259392
    },
    {
        "content": "<p>Yup that's the one</p>",
        "id": 234225067,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259417
    },
    {
        "content": "<p>I think the most important thing to note is nothing broke in chrome, it's purely an outdated dependency</p>",
        "id": 234225256,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259485
    },
    {
        "content": "<p>wasmparser? hm.</p>",
        "id": 234225261,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259487
    },
    {
        "content": "<p>Uhmm...</p>",
        "id": 234225303,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259504
    },
    {
        "content": "<p>...<em>blank stare into the distance</em> idgi,<br>\nwhat actually provoked the error then?</p>",
        "id": 234225348,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259520
    },
    {
        "content": "<p>It's a little silly, previous tests weren't actually exercising the simd comparison ops (we should probably add those)</p>",
        "id": 234225474,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259554
    },
    {
        "content": "<p>But they're used in the classification functions which are tested</p>",
        "id": 234225512,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259572
    },
    {
        "content": "<p>And the opcodes for those instructions aren't supported by the old version of wasmparser used by wasm-bingen</p>",
        "id": 234225611,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259607
    },
    {
        "content": "<p>right but I mean...<br>\nlet me rephrase back down to really basics, since I lost track of what's going on:<br>\nis the breakage at compile time or runtime?<br>\nif it is at runtime, is it due to a compile time error in code emission?</p>",
        "id": 234225691,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259640
    },
    {
        "content": "<p>Oh gotcha</p>",
        "id": 234225820,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259678
    },
    {
        "content": "<p>The error occurs because wasm-bingen parses the test module to some how massage it into something chrome can test</p>",
        "id": 234225868,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259702
    },
    {
        "content": "<p>So it's not really runtime or compile time?  I think the closest analogy is probably link time?</p>",
        "id": 234226005,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259762
    },
    {
        "content": "<p>I see.</p>",
        "id": 234226062,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259770
    },
    {
        "content": "<p>As far as cargo is concerned it's while running the tests, if that answers your question a little better</p>",
        "id": 234226126,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259792
    },
    {
        "content": "<p>Alright, so basically<br>\nwe hand a chunk of wasm to the test runner,<br>\nwhich includes wasmparser in it somewhere, which yields the actual wasm ops to Chrome?</p>",
        "id": 234226229,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259847
    },
    {
        "content": "<p>and _that_ errors?</p>",
        "id": 234226273,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259870
    },
    {
        "content": "<p>I see.</p>",
        "id": 234226298,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259881
    },
    {
        "content": "<p>Yeah basically.  It adds some extra testing apparatus to what cargo produces, and that step is erroring</p>",
        "id": 234226365,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618259894
    },
    {
        "content": "<p>Alright, now I am up to speed.</p>",
        "id": 234226480,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259950
    },
    {
        "content": "<p>Hmmm...</p>",
        "id": 234226493,
        "sender_full_name": "Jubilee",
        "timestamp": 1618259956
    },
    {
        "content": "<p>It's possible we'll miss stuff but I think we can generally ignore wasm at least for the time being</p>",
        "id": 234226694,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618260029
    },
    {
        "content": "<p>Mm, I guess so.</p>",
        "id": 234227380,
        "sender_full_name": "Jubilee",
        "timestamp": 1618260331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-04-12/near/234226694\">said</a>:</p>\n<blockquote>\n<p>It's possible we'll miss stuff but I think we can generally ignore wasm at least for the time being</p>\n</blockquote>\n<p>I would prefer to know exactly what is breaking, so I think we should disable the relevant tests on wasm targets, then. Does that make sense?</p>",
        "id": 234227768,
        "sender_full_name": "Jubilee",
        "timestamp": 1618260493
    },
    {
        "content": "<p>Yeah I suppose we could try that, though there's actually quite a few opcodes that aren't supported</p>",
        "id": 234228035,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618260631
    },
    {
        "content": "<p>Not just comparisons</p>",
        "id": 234228054,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618260636
    },
    {
        "content": "<p>(also quite a few functions are affected by comparisons)</p>",
        "id": 234228123,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618260674
    },
    {
        "content": "<p>If we can spend a moment teasing apart the tests and isolate a specific subset that break, that would be nice, if we can't, that's fine too. It's more of a \"try for 15 minutes\" thing.</p>",
        "id": 234228292,
        "sender_full_name": "Jubilee",
        "timestamp": 1618260743
    },
    {
        "content": "<p>I think we should probably do biweekly meetings instead because we seem to accidentally miss the weekly now and then without much impact. <span aria-label=\"sleepy\" class=\"emoji emoji-1f62a\" role=\"img\" title=\"sleepy\">:sleepy:</span> and a smol group is already at risk of losing energy.</p>",
        "id": 234228617,
        "sender_full_name": "Jubilee",
        "timestamp": 1618260901
    },
    {
        "content": "<p>That or retry a scheduling thing.</p>",
        "id": 234228667,
        "sender_full_name": "Jubilee",
        "timestamp": 1618260923
    },
    {
        "content": "<p>re: aarch64, I am much more uncomfortable with just shrugging off codegen/test failures, so I think switching to a lower lane limit was correct, but also lol?</p>",
        "id": 234228722,
        "sender_full_name": "Jubilee",
        "timestamp": 1618260949
    },
    {
        "content": "<p>It seems like such an error is not likely to be caught at the current moment by LLVM upstream, in spite of being a relatively trivial exercise of SIMD-on-aarch64 codegen, compared to what I would expect. Or at least, compared to what LLVM has managed to do in the past without vomiting all over the floor.</p>",
        "id": 234229338,
        "sender_full_name": "Jubilee",
        "timestamp": 1618261206
    },
    {
        "content": "<p>I am wondering if we shouldn't go even more sharply down and just focus on 16 lanes, even, so it's only 8 * 16, like Wasm did, and try to expand later. <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 234230192,
        "sender_full_name": "Jubilee",
        "timestamp": 1618261351
    },
    {
        "content": "<p>anyways, re: the trait thing, clearly we should go with FixedWidthSimd <em>nod</em></p>",
        "id": 234232135,
        "sender_full_name": "Jubilee",
        "timestamp": 1618261863
    },
    {
        "content": "<p>Sorry, got pulled away</p>",
        "id": 234234476,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618263100
    },
    {
        "content": "<p>My only thought with the wasm thing is that as we add more functionality and fix various things that were waiting on comparisons we'll be rejecting more and more tests and it'll just become a barrier to new PRs</p>",
        "id": 234234612,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618263166
    },
    {
        "content": "<p>Regarding scheduling I'm open to biweekly or finding new times or whatever</p>",
        "id": 234234700,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618263207
    },
    {
        "content": "<p>Regarding aarch64 I feel like it should be easy enough to fix but I can't actually figure out what was crashing the optimizer in the first place.</p>",
        "id": 234234896,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618263302
    },
    {
        "content": "<p>Reducing the supported vector widths is definitely a hack</p>",
        "id": 234235038,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618263375
    },
    {
        "content": "<p>It's a hack, I'm just wondering if it isn't preferable to go \"all the way\" as it were, on our hack, and focus on a more releasable \"product\", and leave expanding to larger lanes to a future Jubilee, Caleb, etc.</p>",
        "id": 234236547,
        "sender_full_name": "Jubilee",
        "timestamp": 1618264299
    },
    {
        "content": "<p>Personally I don't feel like it's releasable at any lane count while that bug exists because I'm not really sure what's causing it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 234236645,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618264353
    },
    {
        "content": "<p>lul</p>",
        "id": 234236678,
        "sender_full_name": "Jubilee",
        "timestamp": 1618264382
    },
    {
        "content": "<p>That's Fair.</p>",
        "id": 234236691,
        "sender_full_name": "Jubilee",
        "timestamp": 1618264388
    },
    {
        "content": "<p>But also I wouldn't want to go smaller than 32 lanes because AVX is mainstream and so is processing bytes</p>",
        "id": 234236729,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618264412
    },
    {
        "content": "<p>AVX512 we have a bit more leeway with</p>",
        "id": 234236797,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618264447
    },
    {
        "content": "<p>Okay, fair.</p>",
        "id": 234236832,
        "sender_full_name": "Jubilee",
        "timestamp": 1618264468
    },
    {
        "content": "<p>So we're drawing a hard line in the sand at 32 lanes.</p>",
        "id": 234236848,
        "sender_full_name": "Jubilee",
        "timestamp": 1618264477
    },
    {
        "content": "<p>If we absolutely had to we could shrink it further, but yes I think that's the practical minimum</p>",
        "id": 234236902,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618264510
    },
    {
        "content": "<p>I for one would take up torches and pitchforks if we went below 16, tbh, I'd rather give up single-lane SIMD. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> which is mostly there as a curiosity.</p>",
        "id": 234236966,
        "sender_full_name": "Jubilee",
        "timestamp": 1618264558
    },
    {
        "content": "<p>Lol, yeah I think single lane simd is only useful to give scalar code a simd interface</p>",
        "id": 234237195,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618264685
    },
    {
        "content": "<p>For generics</p>",
        "id": 234237226,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618264711
    },
    {
        "content": "<p>I'm going to file that as an issue.<br>\n\"What use a single lane?\"</p>",
        "id": 234237242,
        "sender_full_name": "Jubilee",
        "timestamp": 1618264727
    },
    {
        "content": "<p>Lol</p>",
        "id": 234237250,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618264738
    }
]