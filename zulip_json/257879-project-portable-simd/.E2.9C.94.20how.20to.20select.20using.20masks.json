[
    {
        "content": "<p>imho, yes. the issue is that llvm doesn't appear to use the optimal instruction on anything but avx512, everything else just turns into a scalar store sequence</p>",
        "id": 270899642,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644167050
    },
    {
        "content": "<p>imo portable-simd API is more than performance architecture-independent - a consistent way of describing simd in Rust is very useful, so offering the api for this (even if it can't hit optimal instructions on other families) is still valuable imo.</p>",
        "id": 270899766,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1644167244
    },
    {
        "content": "<p>yup, that's a large part of why I said yes, it'd make sense to support.</p>",
        "id": 270899901,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644167414
    },
    {
        "content": "<p>Awesome, filled here <a href=\"https://github.com/rust-lang/portable-simd/issues/240\">https://github.com/rust-lang/portable-simd/issues/240</a>. Will mark this thread resolved. Thanks a lot everyone!</p>",
        "id": 270900460,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1644168153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399416\">Jorge Leitao</span> has marked this topic as resolved.</p>",
        "id": 270900462,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644168155
    },
    {
        "content": "<p>well, apparently we both created a bug report simultaneously...</p>",
        "id": 270900597,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644168293
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/portable-simd/issues/241\">https://github.com/rust-lang/portable-simd/issues/241</a></p>",
        "id": 270900605,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644168301
    },
    {
        "content": "<p>If you don't have avx512 does it at least use something like pshufb and masked store?</p>",
        "id": 270900712,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1644168425
    },
    {
        "content": "<p>no, cuz figuring out where to store to is hard</p>",
        "id": 270900734,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644168457
    },
    {
        "content": "<p>Unfortunate but I guess that makes sense</p>",
        "id": 270900801,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1644168508
    },
    {
        "content": "<p>unfortunately no one seems to think of adding a prefix-sum instruction, otherwise using swizzle and masked store would totally work</p>",
        "id": 270900945,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644168705
    },
    {
        "content": "<p>Lol</p>",
        "id": 270900986,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1644168723
    },
    {
        "content": "<p>SimpleV does support prefix-sum tho</p>",
        "id": 270901004,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644168743
    },
    {
        "content": "<p>prefix sum...?</p>",
        "id": 271064958,
        "sender_full_name": "Jubilee",
        "timestamp": 1644280596
    },
    {
        "content": "<p>to make a compressing/expanding reg-&gt;reg op, prefix-sum over the mask converted to 0/1, the results are the indexes to read from in the swizzle</p>",
        "id": 271065195,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644280798
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...?</p>",
        "id": 271082086,
        "sender_full_name": "Jubilee",
        "timestamp": 1644297127
    },
    {
        "content": "<p>if you want to expand <code>[1.0, 3.0, 5.0, 7.0, 9.0]</code> with a mask of <code>[true, false, false, true, true]</code>, the prefix sum (I'm picking the variant of prefix-sum where each output lane is the sum of all previous lanes but not including itself) is <code>[0, 1, 1, 1, 2]</code>, giving <code>[1.0, 3.0, 3.0, 3.0, 5.0]</code>, which can be masked again to give <code>[1.0, ..., ..., 3.0, 5.0]</code></p>",
        "id": 271083265,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644298393
    },
    {
        "content": "<p>there's probably a way to make compression work too...though nothing occurs to me at the moment</p>",
        "id": 271083354,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644298496
    },
    {
        "content": "<p>oh.</p>",
        "id": 271083769,
        "sender_full_name": "Jubilee",
        "timestamp": 1644298944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399416\">@Jorge Leitao</span> A bit late but I implemented what you're describing as a big jump table (as there's no dyn swizzle, otherwise it could be a LUT)</p>\n<p><a href=\"https://github.com/RoaringBitmap/roaring-rs/blob/60ec7d2454b83919f3b22965e9a64f65294091a2/src/bitmap/store/array_store/vector.rs#L507\">https://github.com/RoaringBitmap/roaring-rs/blob/60ec7d2454b83919f3b22965e9a64f65294091a2/src/bitmap/store/array_store/vector.rs#L507</a></p>",
        "id": 271230183,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1644381612
    },
    {
        "content": "<p><span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 271230706,
        "sender_full_name": "Jubilee",
        "timestamp": 1644382400
    },
    {
        "content": "<p>i haven't tested it, but i'd expect store + gather load to be faster than a jump table, because of issues with that branch having pretty big latency and likely almost always mispredicting</p>",
        "id": 271230781,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644382501
    },
    {
        "content": "<p>It was more of a \"unblock some other work and wait for dyn swizzle\" sort of situation, but point taken.</p>",
        "id": 271231837,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1644383601
    }
]