[
    {
        "content": "<p>Almost immediately yesterday I ended up being reminded of how verbose a simd branch/merge is. My \"pattern\" ended up being</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">yes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">mask</span><span class=\"p\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">yes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Just now I threw together a little macro that seems to maybe pack it back down better:</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=ce1715a9ad94764ad7cd5f1584898a4f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=ce1715a9ad94764ad7cd5f1584898a4f</a></p>\n<p>Are there other tricks that work out well people have been using?</p>",
        "id": 265174966,
        "sender_full_name": "Lokathor",
        "timestamp": 1639669662
    },
    {
        "content": "<p>That macro is an interesting idea, it's actually more verbose but it's a little easier to remember the order etc</p>",
        "id": 265177269,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639670559
    },
    {
        "content": "<p>Yes, it makes  the data flow \"normal\" compared to how the eyes read <code>if</code> already.</p>",
        "id": 265180116,
        "sender_full_name": "Lokathor",
        "timestamp": 1639671779
    },
    {
        "content": "<p>Much more limited since there's no pattern matching, but you could do one for <code>match</code> too</p>",
        "id": 265180492,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639671967
    },
    {
        "content": "<p>oh wow an actual match would be so many branches</p>",
        "id": 265180539,
        "sender_full_name": "Lokathor",
        "timestamp": 1639671994
    },
    {
        "content": "<p>Yeah lol</p>",
        "id": 265180558,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639672004
    },
    {
        "content": "<p>You'd have to branch for each arm</p>",
        "id": 265180623,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639672037
    },
    {
        "content": "<p>i think one for <em>specifically</em> branching on the fp_classification might be useful, but even then you can often write code that doesn't look at the class</p>",
        "id": 265183423,
        "sender_full_name": "Lokathor",
        "timestamp": 1639673155
    },
    {
        "content": "<p>I have been considering a type that represents \"a vector plus the mask that was just generated from it\" which could be created or composed with ops that yield masks to get an API like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">vector</span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">lane_lt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)).</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">).</span><span class=\"n\">or</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which would, for lanes less than 0, add 5, and give the value 1 for the lanes equal to or greater than 0.</p>",
        "id": 265231895,
        "sender_full_name": "Jubilee",
        "timestamp": 1639695499
    },
    {
        "content": "<p>It might instead do a trick like <code>.and_then</code> tho', I haven't worked through all the implications.</p>",
        "id": 265232655,
        "sender_full_name": "Jubilee",
        "timestamp": 1639695915
    },
    {
        "content": "<p>Such a e.g. <code>Masked&lt;f32, N&gt;</code> type would essentially allow treating Mask as mostly a low-level primitive, and I believe that, while it may introduce a little overhead on spills to memory, it would otherwise have the desirable effect of allowing optimizers to more easily see the control flow that inevitably leads to using the vector and its mask as operands to the final computation. This would allow BEs which can handle SVE and AVX512 to basically always \"get it right\".</p>",
        "id": 265233994,
        "sender_full_name": "Jubilee",
        "timestamp": 1639696801
    },
    {
        "content": "<p>I doubt it would help the optimizer since the DAG is how the relationship is detected, but it might be useful for making a sort of SIMD Option</p>",
        "id": 265234382,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639697054
    },
    {
        "content": "<p>I don't think masks are always used in that way vs a one-off select, but I'm sure there are situations where it makes sense</p>",
        "id": 265234462,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1639697103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/So.20how.20do.20yall.20style.20your.20branches.3F/near/265234462\">said</a>:</p>\n<blockquote>\n<p>I don't think masks are always used in that way vs a one-off select, but I'm sure there are situations where it makes sense</p>\n</blockquote>\n<p>My idea is that <code>v1.filter(clos).or(v2)</code> would work.</p>",
        "id": 265235004,
        "sender_full_name": "Jubilee",
        "timestamp": 1639697474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/So.20how.20do.20yall.20style.20your.20branches.3F/near/265234382\">said</a>:</p>\n<blockquote>\n<p>I doubt it would help the optimizer since the DAG is how the relationship is detected, but it might be useful for making a sort of SIMD Option</p>\n</blockquote>\n<p>Yeah it would only just nudge people to chain things really tightly.</p>",
        "id": 265235115,
        "sender_full_name": "Jubilee",
        "timestamp": 1639697530
    }
]