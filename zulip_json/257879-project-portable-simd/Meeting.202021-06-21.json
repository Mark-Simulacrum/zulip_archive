[
    {
        "content": "<p>Oof. My apologies, I took way too much time to get up.</p>",
        "id": 243441933,
        "sender_full_name": "Jubilee",
        "timestamp": 1624309058
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 243441969,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624309078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Yaargh maties!</p>",
        "id": 243442493,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624309332
    },
    {
        "content": "<p>do we have a meeting agenda yet?</p>",
        "id": 243442866,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624309534
    },
    {
        "content": "<p>one thing to maybe look at: <a href=\"https://github.com/rust-lang/team/pull/582\">https://github.com/rust-lang/team/pull/582</a></p>",
        "id": 243443024,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624309611
    },
    {
        "content": "<p>I would like to talk about our next steps to nightly</p>",
        "id": 243443039,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624309614
    },
    {
        "content": "<p>Not sure who needs to approve that...</p>",
        "id": 243443092,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624309652
    },
    {
        "content": "<p>Looks like no.</p>\n<p>Yeah I don't control the team repo.<br>\nI am a-okay with that.</p>\n<p>There's a few PRs open, so I checked those.<br>\nThere's <a href=\"https://github.com/rust-lang/stdsimd/issues/138\">stdsimd#138</a> which I haven't reviewed properly, and <a href=\"https://github.com/rust-lang/stdsimd/issues/136\">stdsimd#136</a> which I did and merged.</p>",
        "id": 243443258,
        "sender_full_name": "Jubilee",
        "timestamp": 1624309721
    },
    {
        "content": "<p>And of course <a href=\"https://github.com/rust-lang/stdsimd/issues/139\">stdsimd#139</a></p>",
        "id": 243443449,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624309805
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/stdsimd/issues/131\">stdsimd#131</a> and <a href=\"https://github.com/rust-lang/stdsimd/issues/126\">stdsimd#126</a> which aaa.</p>",
        "id": 243443527,
        "sender_full_name": "Jubilee",
        "timestamp": 1624309848
    },
    {
        "content": "<p>to_radians could also use a special constant for more precision</p>",
        "id": 243443722,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624309965
    },
    {
        "content": "<p>My understanding is it wouldn't be necessary in that direction?</p>",
        "id": 243443761,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624309996
    },
    {
        "content": "<p>Also, just trying to keep parity with the scalar functions honestly.  If that gets changed then we can change it too</p>",
        "id": 243443806,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310024
    },
    {
        "content": "<p>well, if you use the scalar function to extract the constant like in to_degrees, you will always get the right one</p>",
        "id": 243443930,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310084
    },
    {
        "content": "<p>That is a good point</p>",
        "id": 243443950,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310099
    },
    {
        "content": "<p>Yeah, it should probably do that</p>",
        "id": 243443996,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310128
    },
    {
        "content": "<p>Alright, coffee.<br>\nNext steps to nightly.<br>\nWe have to flag the repo still, and then open a PR against rust-lang/rust to add it as a git subtree.<br>\nCan std even use feature flags...? I guess we are, since <code>infallible_alloc</code> is becoming a plan.</p>",
        "id": 243443998,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310129
    },
    {
        "content": "<p>What do you mean by flag?</p>",
        "id": 243444026,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310146
    },
    {
        "content": "<p>like the stability/feature flags.</p>",
        "id": 243444037,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310154
    },
    {
        "content": "<p><code>#[cfg(feature = \"blah\")]</code></p>",
        "id": 243444101,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310175
    },
    {
        "content": "<p>So, based on what stdarch did, I still think our best bet is to add the module with a single overall stability flag and then narrow it down in the future from there</p>",
        "id": 243444122,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310194
    },
    {
        "content": "<p>Right.</p>",
        "id": 243444131,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310203
    },
    {
        "content": "<p>(which just means the attribute wouldn't go in our repo)</p>",
        "id": 243444150,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310220
    },
    {
        "content": "<p>(at least none yet)</p>",
        "id": 243444161,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310227
    },
    {
        "content": "<p>it wouldn't?</p>",
        "id": 243444166,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310230
    },
    {
        "content": "<p>It seems to be in the stdarch repo, isn't it?</p>",
        "id": 243444175,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310241
    },
    {
        "content": "<p>Nope, you can just put a single on on the <code>mod simd</code></p>",
        "id": 243444189,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310250
    },
    {
        "content": "<p>doesn't every item have to be decorated with <code>#[unstable</code> of some sort?</p>",
        "id": 243444207,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310268
    },
    {
        "content": "<p>Nope, it will inherit from the parent by default</p>",
        "id": 243444263,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310286
    },
    {
        "content": "<p>ooh, didn't know that...</p>",
        "id": 243444288,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310300
    },
    {
        "content": "<p><code>#![unstable(feature = \"stdsimd\", issue = \"27731\")]</code></p>",
        "id": 243444299,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310308
    },
    {
        "content": "<p>it seems to be annotated in the stdarch repo</p>",
        "id": 243444319,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310314
    },
    {
        "content": "<p>am I confusing that with something else?</p>",
        "id": 243444324,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310321
    },
    {
        "content": "<p>Then you can override it. For example we can mark the module as unstable but mark a few select things as stable when we are ready (and still leave the module unstable)</p>",
        "id": 243444325,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310321
    },
    {
        "content": "<p>If you look over the stdarch repo not everything is annotated</p>",
        "id": 243444356,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310341
    },
    {
        "content": "<p>Anything that isn't annotated is unstable, since the entire module is unstable</p>",
        "id": 243444408,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310366
    },
    {
        "content": "<p>Right, but that <code>#![unstable]</code> annotates the entire thing.</p>",
        "id": 243444410,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310368
    },
    {
        "content": "<p>Oh you mean the entire crate? Yes we can do that.</p>",
        "id": 243444440,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310389
    },
    {
        "content": "<p>how will you be able to stabily name things if the parent module is unstable?</p>",
        "id": 243444449,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310392
    },
    {
        "content": "<p>It overrides it</p>",
        "id": 243444499,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310403
    },
    {
        "content": "<p>The overall stdarch module is still unstable despite plenty of intrinsics being marked stable</p>",
        "id": 243444563,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310424
    },
    {
        "content": "<p>I did some looking into stability and visibility and we have to be careful to not rely on reexport paths inheriting stability annotations.</p>",
        "id": 243444635,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310440
    },
    {
        "content": "<p>so <code>core::simd::blah</code> can be named but <code>core::simd</code> can't?!</p>",
        "id": 243444757,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310466
    },
    {
        "content": "<p>Kinda? Maybe?</p>",
        "id": 243444818,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310489
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/21905\">https://github.com/rust-lang/rust/issues/21905</a></p>",
        "id": 243444848,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310503
    },
    {
        "content": "<p>seems user unfriendly if I can't do <code>use std::simd</code></p>",
        "id": 243444876,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310518
    },
    {
        "content": "<p>I am guessing you can, since you can do it with stdarch too</p>",
        "id": 243444938,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310537
    },
    {
        "content": "<p>I think modules are treated differently</p>",
        "id": 243444948,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310543
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 243444959,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310552
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54283\">https://github.com/rust-lang/rust/issues/54283</a></p>",
        "id": 243444978,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310561
    },
    {
        "content": "<p>ooh lots of guessing here about some apparently very buggy pieces of code. :^)</p>",
        "id": 243444994,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310573
    },
    {
        "content": "<p>like I don't think it actually matters as long as we all fix it up within the 12 week cycle after we PR</p>",
        "id": 243445035,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310598
    },
    {
        "content": "<p>Well, all I am saying is that stdarch works so we should probably just do the exact same thing</p>",
        "id": 243445042,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310602
    },
    {
        "content": "<p>yeah.</p>",
        "id": 243445047,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310607
    },
    {
        "content": "<p>That's the only reason I mentioned marking the crate with a stability annotation. ^^; (because stdarch does)</p>",
        "id": 243445061,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310621
    },
    {
        "content": "<p>Yeah that makes sense to me, I just wanted to make sure everyone knew we didn't need to go mark every item <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 243445137,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310647
    },
    {
        "content": "<p>Oh yes, I get that part.</p>",
        "id": 243445170,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310664
    },
    {
        "content": "<p>We have to be careful about <em>reexports</em></p>",
        "id": 243445193,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310678
    },
    {
        "content": "<p>Fortunately it looks like the re-export error is conservative so we won't be stabilizing something that shouldn't be</p>",
        "id": 243445367,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310763
    },
    {
        "content": "<p>re: SimdArray,<br>\nmy hope was to just leave stuff on the trait and then either get SimdArray into the next prelude like Iterator gets special-cased or actually go and implement inherent impls. :^)</p>",
        "id": 243445381,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310767
    },
    {
        "content": "<p>well, my thought is might as well implement the functions directly on the type and we can make that decision in the future</p>",
        "id": 243445527,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310846
    },
    {
        "content": "<p>inherent impls sounds like the best plan to me!</p>",
        "id": 243445530,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310848
    },
    {
        "content": "<p>Yeah I like the idea of inherent impls but I don't think anything in std uses them?</p>",
        "id": 243445553,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310866
    },
    {
        "content": "<p>because they're not implemented yet...</p>",
        "id": 243445616,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310886
    },
    {
        "content": "<p>Oh not even an initial impl? Yeah that would be why lol.</p>",
        "id": 243445638,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310906
    },
    {
        "content": "<p>imho File should inherent impl Write</p>",
        "id": 243445657,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624310920
    },
    {
        "content": "<p>hehe.</p>",
        "id": 243445663,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310925
    },
    {
        "content": "<p>I think it would probably be best to implement it on the type directly, implement the trait, then cross the bridge of inherent impls when we get there</p>",
        "id": 243445703,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310951
    },
    {
        "content": "<p>But we don't know if we can deprecate the functions off the type though.</p>",
        "id": 243445724,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310970
    },
    {
        "content": "<p>It would also let us stabilize some types in the future without stabilizing the trait</p>",
        "id": 243445729,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624310975
    },
    {
        "content": "<p>if it's like that.</p>",
        "id": 243445731,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310976
    },
    {
        "content": "<p>sure but we aren't stabilizing anything yet.</p>",
        "id": 243445746,
        "sender_full_name": "Jubilee",
        "timestamp": 1624310997
    },
    {
        "content": "<p>make a <code>fake_inherent_impls</code> macro for <code>SimdArray</code> that just forwards to the trait</p>",
        "id": 243445791,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624311003
    },
    {
        "content": "<p>heh.</p>",
        "id": 243445803,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311008
    },
    {
        "content": "<p>We also aren't using inherent impls yet!</p>",
        "id": 243445811,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311011
    },
    {
        "content": "<p><em>laughs</em></p>",
        "id": 243445825,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311021
    },
    {
        "content": "<p>erm, what are inherent impl's?</p>",
        "id": 243445842,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624311037
    },
    {
        "content": "<p>My position is basically that the trait is like... not a big deal to import.</p>",
        "id": 243445852,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311042
    },
    {
        "content": "<p>and people will get errors when they try to use the trait methods without importing.</p>",
        "id": 243445881,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzm√°n Macedo</span> it allows you to write traits that have functions that are also directly part of the type</p>",
        "id": 243445908,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311074
    },
    {
        "content": "<p>I think that it's OK if it's just <strong>one</strong> trait import.</p>",
        "id": 243445919,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311083
    },
    {
        "content": "<p>inherent impls are where a type makes a trait's methods always visible for just that type</p>",
        "id": 243445937,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624311097
    },
    {
        "content": "<p>I agree that it's not a huge deal, but its a pretty big documentation issue right now IMO</p>",
        "id": 243445964,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311114
    },
    {
        "content": "<p>Well that's kind of the thing I want to address here:</p>\n<p>My experience is that new users will see a giant list of functions and then just check out, mentally.<br>\nBasically I disagree with Lokathor that traits harm documentation (if used correctly).<br>\nHaving less \"noise\" (functions that are just there because they're on u32, etc.) will improve the signal.</p>",
        "id": 243446125,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311208
    },
    {
        "content": "<p>I think there are too many open questions about inherent impls so we might as well act right now like they don't exist.  It probably needs to be part of that RFC to make it compatible with existing things</p>",
        "id": 243446147,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311214
    },
    {
        "content": "<p>So my argument doesn't really rely on SimdArray being an inherent impl or not per se.</p>",
        "id": 243446207,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311229
    },
    {
        "content": "<p>I agree to some extent, but some functions are inherently part of specific types so things will be a little split up</p>",
        "id": 243446372,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311264
    },
    {
        "content": "<p>Right, and that's fine.<br>\nI just want people to be able to look at SimdArray and then be able to cache that and carry it forward for SimdU32 etc.</p>",
        "id": 243446419,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311302
    },
    {
        "content": "<p>In that case maybe we go back and move everything to SimdArray which is probably fine</p>",
        "id": 243446444,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243446125\">said</a>:</p>\n<blockquote>\n<p>Well that's kind of the thing I want to address here:</p>\n<p>My experience is that new users will see a giant list of functions and then just check out, mentally.<br>\nBasically I disagree with Lokathor that traits harm documentation (if used correctly).<br>\nHaving less \"noise\" (functions that are just there because they're on u32, etc.) will improve the signal.</p>\n</blockquote>\n<p>That's still my experiences fwiw.</p>\n<p>I'm aiming to improve the docs but I have JuliaCon coming up so I'll get to the requested changes in a few.</p>",
        "id": 243446484,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624311338
    },
    {
        "content": "<p>having everything on SimdArrray makes it way easier in generic code</p>",
        "id": 243446559,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624311368
    },
    {
        "content": "<p>My biggest opposition to SimdArray isn't so much that it's \"bad\" as it's a significant departure from how the rest of std was done, for better or for worse</p>",
        "id": 243446592,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311391
    },
    {
        "content": "<p>I think the precedent is there (Iterator, as I often refer to), imo, but I do agree it's different.</p>",
        "id": 243446663,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311431
    },
    {
        "content": "<p>There are downsides to traits, particularly when it comes to UFCS</p>",
        "id": 243446697,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311448
    },
    {
        "content": "<p>right.</p>",
        "id": 243446702,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311451
    },
    {
        "content": "<p>That's why I wanted to keep it to <del>exactly one</del> as few traits <del>if</del> as possible. ^^;</p>",
        "id": 243446721,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311464
    },
    {
        "content": "<p>I think the type proliferation caused by simd justifies having traits that abstract over the types</p>",
        "id": 243446785,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624311483
    },
    {
        "content": "<p>I think one trait is possibly a good compromise, and any more traits could be part of some \"blessed\" crate or a future RFC</p>",
        "id": 243446811,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311508
    },
    {
        "content": "<p>Right.</p>",
        "id": 243446823,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311519
    },
    {
        "content": "<p>Perhaps a separate trait for masks would be appropriate, just because masks are so different</p>",
        "id": 243446903,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311586
    },
    {
        "content": "<p>how about putting traits in a <code>num-simd</code> crate?</p>",
        "id": 243446977,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624311608
    },
    {
        "content": "<p>Yeah that's kind of what I was thinking.  That's probably an eventuality</p>",
        "id": 243447007,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311627
    },
    {
        "content": "<p>I think traits that relate \"directly\" to the SIMDness should go in here, and then <code>num_simd</code> can be its own thing for things that we would like to see, basically.</p>",
        "id": 243447063,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311657
    },
    {
        "content": "<p>What are masks now, a generic type?</p>",
        "id": 243447106,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311675
    },
    {
        "content": "<p>Yes, one type per width</p>",
        "id": 243447213,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311728
    },
    {
        "content": "<p>Sorry for interrupting  but in <a href=\"https://github.com/rust-lang/stdsimd/pull/128\">Caleb's suggestion here</a> there's a trait for <code>sum</code> mentioned - I'm guessing it's not the same trait being talked about here?</p>",
        "id": 243447231,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624311740
    },
    {
        "content": "<p>Nope, that's the std::iter::Sum trait</p>",
        "id": 243447258,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311765
    },
    {
        "content": "<p>Ok, I will ask questions on the documentation thread.</p>",
        "id": 243447358,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624311835
    },
    {
        "content": "<p>Yeah I think a trait for SIMD vectors and a trait for SIMD masks is about the limit of what we should have in-crate for \"things we expect people to import regularly\".</p>",
        "id": 243447514,
        "sender_full_name": "Jubilee",
        "timestamp": 1624311939
    },
    {
        "content": "<p>I think I'd be fine with those two traits</p>",
        "id": 243447612,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624311976
    },
    {
        "content": "<p>I think we may want to split up SimdArray slightly, how about:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Simd</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdMask</span><span class=\"w\"> </span>: <span class=\"nc\">Simd</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdInt</span><span class=\"w\"> </span>: <span class=\"nc\">Simd</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdFloat</span><span class=\"w\"> </span>: <span class=\"nc\">Simd</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdUInt</span><span class=\"w\"> </span>: <span class=\"nc\">SimdInt</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdSInt</span><span class=\"w\"> </span>: <span class=\"nc\">SimdInt</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 243447614,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624311978
    },
    {
        "content": "<p>Ehh, most of those would be for num-simd, heh.</p>",
        "id": 243447645,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> I was interpreting the simd traits would not have any math in them whatsoever</p>",
        "id": 243447672,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312020
    },
    {
        "content": "<p>Strictly memory access things</p>",
        "id": 243447695,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243447614\">said</a>:</p>\n<blockquote>\n<p>I think we may want to split up SimdArray slightly, how about:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Simd</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdMask</span><span class=\"w\"> </span>: <span class=\"nc\">Simd</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>though this is a spicy take: <strong>should</strong> we just call it \"Simd\"?</p>",
        "id": 243447696,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312034
    },
    {
        "content": "<p>SimdArray might be appropriate since we are mostly treating Simd as an adjective</p>",
        "id": 243447734,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312064
    },
    {
        "content": "<p>do we have feelings about SimdVector?</p>",
        "id": 243447829,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312119
    },
    {
        "content": "<p>Still on the fence, vector is the right term</p>",
        "id": 243447868,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312149
    },
    {
        "content": "<p>I'm mostly happy as long as I can write generic code that abstracts over vector length</p>",
        "id": 243447870,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624312152
    },
    {
        "content": "<p>I posted my take but like... I'm not married.</p>",
        "id": 243447872,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312153
    },
    {
        "content": "<p>Though it absolutely is an array as well</p>",
        "id": 243447879,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312160
    },
    {
        "content": "<p>We're dating, but not exclusive.</p>",
        "id": 243447887,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312167
    },
    {
        "content": "<p>I think all simd arrays are vectors but not all vectors are arrays</p>",
        "id": 243447899,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312188
    },
    {
        "content": "<p>ooh can you expand on that?</p>",
        "id": 243447921,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312200
    },
    {
        "content": "<p>well, I should point out that there are people who think simd means mostly fixed-length, and vector means more SimpleV or RVV-style, with variable length</p>",
        "id": 243448011,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624312257
    },
    {
        "content": "<p>Well the registers (or even some of the types, such as __m128 or v128) are just buckets of bits and have no implication on what they actually contain</p>",
        "id": 243448026,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312267
    },
    {
        "content": "<p>Our types are strictly arrays</p>",
        "id": 243448036,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312276
    },
    {
        "content": "<p>see <a href=\"https://www.sigarch.org/simd-instructions-considered-harmful/\">https://www.sigarch.org/simd-instructions-considered-harmful/</a></p>",
        "id": 243448098,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624312316
    },
    {
        "content": "<p>Well, I would say if you are familiar with Intel, vector definitely means fixed</p>",
        "id": 243448102,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312320
    },
    {
        "content": "<p>Altivec as well</p>",
        "id": 243448156,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312334
    },
    {
        "content": "<p>(or linear algebra <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 243448175,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312353
    },
    {
        "content": "<p>well, i'd say that is definitely a misnomer, however common it is</p>",
        "id": 243448178,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624312357
    },
    {
        "content": "<p>well, <code>__m128i</code> can contain any integer type but <code>__m128</code> should be f32x4 or f32x1.<br>\n<code>__m128d</code> is double precision, so f64x1 of f64x2</p>",
        "id": 243448179,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312357
    },
    {
        "content": "<p>That's true until you hit a few of the corner cases where a __m128i has a float or a __m128 has an integer</p>",
        "id": 243448242,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312409
    },
    {
        "content": "<p>v128 is probably the best example, though</p>",
        "id": 243448308,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312443
    },
    {
        "content": "<p>oh god that sounds like a nightmare.</p>",
        "id": 243448351,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312482
    },
    {
        "content": "<p>then there's the weird case where in altivec a 128-bit register has a 32-bit float encoded as a 64-bit float...</p>",
        "id": 243448357,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624312487
    },
    {
        "content": "<p>I retract my statements and run fleeing into the hills.</p>",
        "id": 243448359,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312489
    },
    {
        "content": "<p>I would say all of our types are definitely both vectors and arrays so it's a wash</p>",
        "id": 243448398,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312515
    },
    {
        "content": "<p>\"simd array\" is not exactly something I've ever heard before but it's not confusing at all either, imo</p>",
        "id": 243448415,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312537
    },
    {
        "content": "<p>I've occasionally heard the term \"array processor\" but it's rare</p>",
        "id": 243448504,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312580
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 243448524,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312595
    },
    {
        "content": "<p>It's absolutely a... Unique take.</p>",
        "id": 243448539,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312612
    },
    {
        "content": "<p>Or well... more inspired by Fortran/APL derivatives.</p>",
        "id": 243448559,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243448242\">said</a>:</p>\n<blockquote>\n<p>That's true until you hit a few of the corner cases where a __m128i has a float or a __m128 has an integer</p>\n</blockquote>\n<p>But that only happens if you're doing SSE and you didn't clear the top bits or something when going to <code>ymm</code> registers right? ... Right?</p>",
        "id": 243448591,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624312657
    },
    {
        "content": "<p>We could also consider naming the traits simply \"Vector\" and \"Mask\" (in fact there is already a Mask trait)</p>",
        "id": 243448592,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312658
    },
    {
        "content": "<p>also true.</p>",
        "id": 243448606,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312670
    },
    {
        "content": "<p>I think I'd be happy with that <em>if</em> we can convince everyone that Vector has nothing to do with Vec.</p>",
        "id": 243448660,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzm√°n Macedo</span> I should have said many floats or many ints</p>",
        "id": 243448667,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> yeah it's slightly overloaded</p>",
        "id": 243448688,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312712
    },
    {
        "content": "<p>I am tempted to just say it's called Vector, go to nightly, and see what happens</p>",
        "id": 243448713,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624312733
    },
    {
        "content": "<p><code>NotVecVector</code> :)</p>",
        "id": 243448714,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624312734
    },
    {
        "content": "<p>re: your question, Jacob:</p>\n<blockquote>\n<p>Naming question: Do we want the gather/gather_or methods to take a mask? or will the masked variant be named gather_masked?</p>\n</blockquote>\n<p>My thought was that we would use <code>_select</code> for things that are masked, but also that we might not expose a \"default\" masked <code>gather</code>, because we would have to OR it with the bounds mask anyways.</p>",
        "id": 243448727,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243448504\">said</a>:</p>\n<blockquote>\n<p>I've occasionally heard the term \"array processor\" but it's rare</p>\n</blockquote>\n<p>Yup, array coprocessors because those differential equations are linear algebra and they need to go brrr.</p>",
        "id": 243448734,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624312749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243448713\">said</a>:</p>\n<blockquote>\n<p>I am tempted to just say it's called Vector, go to nightly, and see what happens</p>\n</blockquote>\n<p>This almost sounds like a good idea, tbh, considering we have an established fallback position staked out.</p>",
        "id": 243448899,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243448727\">said</a>:</p>\n<blockquote>\n<p>re: your question, Jacob:</p>\n<blockquote>\n<p>Naming question: Do we want the gather/gather_or methods to take a mask? or will the masked variant be named gather_masked?</p>\n</blockquote>\n<p>My thought was that we would use <code>_select</code> for things that are masked, but also that we might not expose a \"default\" masked <code>gather</code>, because we would have to OR it with the bounds mask anyways.</p>\n</blockquote>\n<p>I was thinking more of that gather/scatter should be thought of as always masked, and or-ing in the array bounds check is just part of safety...there would be unsafe variants without the bounds check</p>",
        "id": 243448961,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624312917
    },
    {
        "content": "<p>I'd like to merge it with SimdArray so that's in the git history, tidy things up a bit, and then we change it to <code>Vector</code> in the PR that adds our crate stability annotation, and then PR that to nightly.</p>",
        "id": 243449057,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312980
    },
    {
        "content": "<p>( if that makes sense. )</p>",
        "id": 243449070,
        "sender_full_name": "Jubilee",
        "timestamp": 1624312988
    },
    {
        "content": "<p>changing to <code>Vector</code> should be a separate commit...</p>",
        "id": 243449142,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313035
    },
    {
        "content": "<p>Right.</p>",
        "id": 243449146,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313040
    },
    {
        "content": "<p>Jacob knows what I'm yammering about.</p>",
        "id": 243449193,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243448961\">said</a>:</p>\n<blockquote>\n<p>I was thinking more of that gather/scatter should be thought of as always masked, and or-ing in the array bounds check is just part of safety...there would be unsafe variants without the bounds check</p>\n</blockquote>\n<p>Ah that's okay too!</p>",
        "id": 243449214,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313072
    },
    {
        "content": "<p>in particular, I would like to avoid people relying on the bounds check as a substitute for actually calculating a mask</p>",
        "id": 243449434,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313218
    },
    {
        "content": "<p>maybe we should panic in debug mode if any unmasked indexes are out-of-bounds</p>",
        "id": 243449609,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313316
    },
    {
        "content": "<p>Hm, I think that is fair, and hopefully if people generate a guaranteed-safe mask, that would optimize out.</p>",
        "id": 243449614,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313319
    },
    {
        "content": "<p>Unfortunately std is always compiled in one mode</p>",
        "id": 243449641,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624313334
    },
    {
        "content": "<p>Yeah honestly not keen on treating it as part of a user safety dealio that we go to large extents to add special debugging tools for.</p>",
        "id": 243449688,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313374
    },
    {
        "content": "<p>At that point I think you should just use a vector of pointers, everything's up to you, good luck</p>",
        "id": 243449716,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624313399
    },
    {
        "content": "<p>glhf isn't the worst plan</p>",
        "id": 243449764,
        "sender_full_name": "Lokathor",
        "timestamp": 1624313413
    },
    {
        "content": "<p>So my only remaining thought is that the \"no-mask\" version of <code>fn scatter</code> takes uhhh</p>",
        "id": 243449929,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313490
    },
    {
        "content": "<p>If you use it on an array I wonder if the select completely optimizes out</p>",
        "id": 243450018,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624313537
    },
    {
        "content": "<p>maybe have a <code>&lt;const panic_on_out_of_bounds: bool = false&gt;</code> on gather/scatter?</p>",
        "id": 243450034,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313561
    },
    {
        "content": "<p>though leaving that out could work...</p>",
        "id": 243450071,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313613
    },
    {
        "content": "<p>I guess my concern is that using out-of-bounds indexes to indicate masked-off doesn't happen in any other simd api that I'm aware of, making it harder to translate code</p>",
        "id": 243450182,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313690
    },
    {
        "content": "<p><code>fn scatter(self, slice: &amp;mut [Self::Scalar], idxs: SimdUsize&lt;LANES&gt;)</code><br>\nthis is the function signature for \"default scatter\", if it doesn't find things inbounds it just doesn't write, so there's no <code>_or</code> variant here.<br>\nMy thought was <code>gather_select</code> and <code>scatter_select</code> would take masks.</p>",
        "id": 243450227,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313728
    },
    {
        "content": "<p>yeah, scatter doesn't need _or. I'd say gather should be named gather_or or gather_or_default, no plain gather</p>",
        "id": 243450356,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313820
    },
    {
        "content": "<p>oh so <strong>no</strong> unadorned <code>gather</code>?</p>",
        "id": 243450384,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313841
    },
    {
        "content": "<p>okay!</p>",
        "id": 243450388,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313845
    },
    {
        "content": "<p>yeah, bad gathers just giving 0 instead sounds natural, in a way</p>",
        "id": 243450468,
        "sender_full_name": "Lokathor",
        "timestamp": 1624313887
    },
    {
        "content": "<p>there could be an unsafe unchecked_gather that assumes all lanes are always enabled...</p>",
        "id": 243450504,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624313930
    },
    {
        "content": "<p>damnit where's corro when I need them.</p>",
        "id": 243450521,
        "sender_full_name": "Jubilee",
        "timestamp": 1624313945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243450468\">said</a>:</p>\n<blockquote>\n<p>yeah, bad gathers just giving 0 instead sounds natural, in a way</p>\n</blockquote>\n<p>except nothing else does that for gather that i'm aware of...</p>",
        "id": 243450629,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314024
    },
    {
        "content": "<p>But yeah, if we want \"no <code>fn gather</code>, just <code>fn gather_or</code>, <code>fn gather_or_default</code>, and <code>fn gather_select</code>\" then that's fine.</p>",
        "id": 243450633,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314030
    },
    {
        "content": "<p>gather_select_or_default?</p>",
        "id": 243450660,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314070
    },
    {
        "content": "<p><del>aarch64</del> Neon consistently zero-fills when you do something naughty and out of bounds, and tbh some of these absolutely might be translated to a couple of vector loads and a <code>tbl</code>.</p>",
        "id": 243450664,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314075
    },
    {
        "content": "<p>like, I would <strong>hope</strong> a low-effort vector gather that hits a tiny space gets translated that way.</p>",
        "id": 243450759,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314148
    },
    {
        "content": "<p>but it can only zero-fill when the underlying instruction knows when it's out of bounds...</p>",
        "id": 243450767,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314157
    },
    {
        "content": "<p>absolutely.</p>",
        "id": 243450775,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314166
    },
    {
        "content": "<p>in my experience, neon always scalarizes gather/scatter due to lacking proper instructions</p>",
        "id": 243450918,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314284
    },
    {
        "content": "<p>Anyways I think we are largely resolved and we have once again run over time? But that's okay.<br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> If you are having second thoughts about parts of <a href=\"https://github.com/rust-lang/stdsimd/issues/138\">stdsimd#138</a> but are confident in others, it might be best to split it up into two PRs.</p>",
        "id": 243450935,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314297
    },
    {
        "content": "<p>llvm-dev stuff from <a href=\"https://github.com/rust-lang/stdsimd/issues/109\">stdsimd#109</a>: <a href=\"https://lists.llvm.org/pipermail/llvm-dev/2021-June/150965.html\">https://lists.llvm.org/pipermail/llvm-dev/2021-June/150965.html</a></p>",
        "id": 243451102,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314399
    },
    {
        "content": "<p>I'm confident with it, might just need to document it better</p>",
        "id": 243451157,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624314448
    },
    {
        "content": "<blockquote>\n<p>Not sure if I fully understand the question - but for our Burst HPC#<br>\ncompiler we just:</p>\n<p>- create our own TargetLibraryInfo<br>\n  - use <code>targetLibraryInfo.addVectorizableFunctions(descriptors);</code> to add<br>\n  scalar -&gt; vector mappings<br>\n  - profit?</p>\n<p>I can say that this has let us teach LLVM how to vectorize calls to math<br>\nfunctions that don't have matching LLVM intrinsics (like acos/asin/etc).</p>\n<p>-Neil.</p>\n</blockquote>",
        "id": 243451168,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314458
    },
    {
        "content": "<p>cool.</p>",
        "id": 243451173,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314461
    },
    {
        "content": "<p>was kindly pointed to <a href=\"https://reviews.llvm.org/D53927\">https://reviews.llvm.org/D53927</a></p>",
        "id": 243451189,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314478
    },
    {
        "content": "<p>iirc there's just one TargetLibraryInfo class in llvm, it contains all the code for the different libraries</p>",
        "id": 243451304,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314566
    },
    {
        "content": "<p>Cool.</p>",
        "id": 243451340,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314600
    },
    {
        "content": "<p>...do uh... okay who here actually knows C++</p>",
        "id": 243451400,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314619
    },
    {
        "content": "<p>writing a custom daughter class seems like the way to go only for external code</p>",
        "id": 243451408,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314628
    },
    {
        "content": "<p><em>keeps hands notably down</em></p>",
        "id": 243451410,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314630
    },
    {
        "content": "<p>i do but probably dont have time to do this in the near future</p>",
        "id": 243451420,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624314638
    },
    {
        "content": "<p>I have more experience in C++ than Rust</p>",
        "id": 243451437,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314652
    },
    {
        "content": "<p>I do but... Yeah lol</p>",
        "id": 243451439,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624314654
    },
    {
        "content": "<p>I'm proceeding with the assumption I'll probably be writing the llvm stuff</p>",
        "id": 243451483,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314695
    },
    {
        "content": "<p>Okay,<br>\nI don't think Thom or Caleb should be put on call for doing this, but I know you folks will be available to bounce ideas off each other.<br>\nIt looks like this is up to you, Jacob, or finding another sacrificial lamb.<br>\nBut <strong>please do</strong> chitchat about it as we go.</p>",
        "id": 243451491,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314710
    },
    {
        "content": "<p>ok, sounds good! if anyone feels so inclined, feel free to help out...it may be a while before I get around to llvm stuff</p>",
        "id": 243451624,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314790
    },
    {
        "content": "<p>And I mean this without intention of putting anyone on the spot for taking up the torch, just... uhhh...<br>\nif Jacob gets eaten by a grue, I'd like it if there were at least be lots of mysterious cassette tapes lying around containing fragments of conversation from which someone in the future can piece together the mystery. Ideally, we'd actually have like... real documentation as we go, but I know how things get.</p>",
        "id": 243451767,
        "sender_full_name": "Jubilee",
        "timestamp": 1624314896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243450629\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243450468\">said</a>:</p>\n<blockquote>\n<p>yeah, bad gathers just giving 0 instead sounds natural, in a way</p>\n</blockquote>\n<p>except nothing else does that for gather that i'm aware of...</p>\n</blockquote>\n<p>but you'd said gather_or_default, and default is 0.</p>",
        "id": 243451790,
        "sender_full_name": "Lokathor",
        "timestamp": 1624314918
    },
    {
        "content": "<p>the real docs are mostly <a href=\"https://github.com/rust-lang/stdsimd/issues/109\">stdsimd#109</a></p>",
        "id": 243451807,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-21/near/243451400\">said</a>:</p>\n<blockquote>\n<p>...do uh... okay who here actually knows C++</p>\n</blockquote>\n<p>lol working on it.</p>",
        "id": 243451924,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624314993
    },
    {
        "content": "<p>gather_or_default is explicitly asking for 0, I was saying implicit default 0 is uncommon</p>",
        "id": 243451929,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624314998
    },
    {
        "content": "<p>Alright beautiful people, gotta bounce but smell ya later <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> .<br>\nThanks for all the tips!</p>",
        "id": 243452011,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1624315055
    },
    {
        "content": "<p>bye!</p>",
        "id": 243452030,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1624315073
    },
    {
        "content": "<p>Yeah it's fine IMO if we have no \"basic\" <code>fn gather</code>  as long as we're on the same page re: that.</p>",
        "id": 243452133,
        "sender_full_name": "Jubilee",
        "timestamp": 1624315136
    },
    {
        "content": "<p>seeya!</p>",
        "id": 243452364,
        "sender_full_name": "Jubilee",
        "timestamp": 1624315288
    }
]