[
    {
        "content": "<p>This came on my radar today, it's an unrelated example and something we are allowed to break but we should remain aware of this kind of thing nonetheless. Portable SIMD shouldn't Break A Ton Of Programs, especially not ones not using SIMD at all. <a href=\"https://github.com/rust-lang/rust/issues/89254\">https://github.com/rust-lang/rust/issues/89254</a></p>",
        "id": 254866080,
        "sender_full_name": "Jubilee",
        "timestamp": 1632599920
    },
    {
        "content": "<p>Huh. I'm a little confused what's happening</p>",
        "id": 254866837,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632600553
    },
    {
        "content": "<p>Can you explain what we might do that could break programs?</p>",
        "id": 254866847,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632600566
    },
    {
        "content": "<p>adding impls that drive type inference to infer primitive/common Rust types, basically. But I THINK it only matters though if our code is actually pulled into scope, but it probably means we shouldn't get into the prelude, lol.</p>",
        "id": 254867276,
        "sender_full_name": "Jubilee",
        "timestamp": 1632600972
    },
    {
        "content": "<blockquote>\n<p>Looks like the problem is <code>impl PartialEq&lt;Value&gt; for u8</code> in serde_json. Without that, <code>impl PartialEq&lt;u8&gt; for u8</code> is the only <code>PartialEq</code> impl for <code>u8</code>.</p>\n</blockquote>\n<p>basically this.</p>",
        "id": 254867879,
        "sender_full_name": "Jubilee",
        "timestamp": 1632601567
    },
    {
        "content": "<p>Hmmm. I think we don't impl anything other than ops so we may be okay</p>",
        "id": 254868508,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632602206
    },
    {
        "content": "<p>Yeah, and people are used to having inference on adding integers falter. I just figured I'd mention it now so that we can remain aware now that we are getting closer integration with {core,std} and such.</p>",
        "id": 254868652,
        "sender_full_name": "Jubilee",
        "timestamp": 1632602346
    },
    {
        "content": "<p>Also, worth noting maybe we could end up in the prelude since that change would happen at an edition change</p>",
        "id": 254870490,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632603974
    },
    {
        "content": "<p>just stabilize before 2021 edition and go into that prelude ;3</p>",
        "id": 254871018,
        "sender_full_name": "Lokathor",
        "timestamp": 1632604508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Type.20inference.20concerns/near/254870490\">said</a>:</p>\n<blockquote>\n<p>Also, worth noting maybe we could end up in the prelude since that change would happen at an edition change</p>\n</blockquote>\n<p>there is nothing necessarily requiring prelude changes to be edition gated as I understand it, it just makes it messier.</p>",
        "id": 254872937,
        "sender_full_name": "Jubilee",
        "timestamp": 1632606441
    },
    {
        "content": "<p>New types in the prelude are generally fine.  It's just new traits that can cause problems -- and even those are only the kind of problem that we're allowed to cause even without an edition, so long as they're not too bad.</p>",
        "id": 258125051,
        "sender_full_name": "scottmcm",
        "timestamp": 1634604792
    },
    {
        "content": "<p>We hit one: <a href=\"https://github.com/rust-lang/rust/issues/90904\">https://github.com/rust-lang/rust/issues/90904</a></p>",
        "id": 261593805,
        "sender_full_name": "Jubilee",
        "timestamp": 1637033578
    },
    {
        "content": "<p><a href=\"https://github.com/sharkdp/bat/issues/1963\">https://github.com/sharkdp/bat/issues/1963</a> Breaking builds.</p>",
        "id": 263338468,
        "sender_full_name": "Jubilee",
        "timestamp": 1638384698
    },
    {
        "content": "<p>Those minimized things are weird.  Which are the problematic ones.  Just the <code>Add&lt;u8&gt;</code> ones and such?</p>",
        "id": 263352099,
        "sender_full_name": "scottmcm",
        "timestamp": 1638389998
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 263354872,
        "sender_full_name": "Jubilee",
        "timestamp": 1638391414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"https://github.com/rust-lang/rust/issues/90904#issuecomment-984048967\">said</a>:</p>\n<blockquote>\n<p>This was reviewed in the T-libs-api meeting today, right now, and it was decided that we will need to land a revert of the relevant impls that follow a format roughly equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Simd</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Simd</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AndYourDog</span>: <span class=\"nc\">ManySimdBounds</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Simd</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and, because this breakage has currently hit beta, beta backport it.</p>\n<p>However, the backport should be deferred (not very long!) until after the next scheduled beta crater run (which is very soon to come, within a week) so we can see the amount of ecosystem breakage in play and understand the relevant mitigations we can take for landing these impls in the future, if any. Essentially, \"Since we're here, we might as well see what all the broken cases actually are!\" We have until January ~7, to make sure we don't miss the cut, but there will be no reason to wait that long.</p>\n<p>Ideally we could land these in the future, but it may be a more distant one depending on the results of that and what may need to happen in order to accommodate these cases, if at all.</p>\n</blockquote>",
        "id": 263358680,
        "sender_full_name": "Jubilee",
        "timestamp": 1638393316
    },
    {
        "content": "<p><code>AndYourDog: ManySimdBounds</code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 263359270,
        "sender_full_name": "scottmcm",
        "timestamp": 1638393647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Type.20inference.20concerns/near/254867276\">said</a>:</p>\n<blockquote>\n<p>adding impls that drive type inference to infer primitive/common Rust types, basically. But I THINK it only matters though if our code is actually pulled into scope, but it probably means we shouldn't get into the prelude, lol.</p>\n</blockquote>\n<p>This doesn't actually really matter, as it turns out. :D</p>",
        "id": 263364677,
        "sender_full_name": "Jubilee",
        "timestamp": 1638396468
    },
    {
        "content": "<p>confirmed for prelude then</p>",
        "id": 263371061,
        "sender_full_name": "Lokathor",
        "timestamp": 1638400289
    },
    {
        "content": "<p>The required changes were folded in to <a href=\"https://github.com/rust-lang/portable-simd/pull/195\">https://github.com/rust-lang/portable-simd/pull/195</a> because that was the PR I was mangling the implementations of everything in anyways.</p>",
        "id": 263375021,
        "sender_full_name": "Jubilee",
        "timestamp": 1638402998
    },
    {
        "content": "<p>re: next sync, <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> We probably want to go earlier rather than later due to needing to backport the changes in order to not break users on stable. I realize it's awkward but <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 263523135,
        "sender_full_name": "Jubilee",
        "timestamp": 1638493790
    },
    {
        "content": "<p>maybe we should revert the bitops change before that sync?  And then we can readdress those more completely along with the other ops</p>",
        "id": 263523480,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1638494034
    },
    {
        "content": "<p>Mm, is it currently any more invalid than the other things, tho'?</p>",
        "id": 263523572,
        "sender_full_name": "Jubilee",
        "timestamp": 1638494084
    },
    {
        "content": "<p>I suppose it's no more invalid than the lane comparisons, if that's what you mean</p>",
        "id": 263523652,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1638494153
    },
    {
        "content": "<p>Basically.</p>",
        "id": 263523726,
        "sender_full_name": "Jubilee",
        "timestamp": 1638494173
    },
    {
        "content": "<p>it might be unnecessary work in that case</p>",
        "id": 263523738,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1638494188
    },
    {
        "content": "<p>I will probably set some time aside to automate the sync process so we can just resolve these questions by saying, \"nah, we're just gonna throw sync PRs as fast as bors can keep up\" instead.</p>",
        "id": 263523794,
        "sender_full_name": "Jubilee",
        "timestamp": 1638494242
    },
    {
        "content": "<p>get users goin' \"hey I like the code I can write this week more than the code I can write 2 weeks ago but I preferred the code I could write last month.\"</p>",
        "id": 263524247,
        "sender_full_name": "Jubilee",
        "timestamp": 1638494567
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"PowerShell\"><pre><span></span><code><span class=\"n\">error</span><span class=\"no\">[E0277]</span><span class=\"p\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">multiply</span> <span class=\"p\">`</span><span class=\"n\">Simd</span><span class=\"p\">&lt;</span><span class=\"n\">f32</span><span class=\"p\">,</span> <span class=\"n\">4_usize</span><span class=\"p\">&gt;`</span> <span class=\"n\">by</span> <span class=\"p\">`{</span><span class=\"n\">float</span><span class=\"p\">}`</span>\n  <span class=\"p\">--&gt;</span> <span class=\"n\">library</span><span class=\"p\">\\</span><span class=\"n\">core</span><span class=\"p\">\\</span><span class=\"n\">tests</span><span class=\"p\">\\</span><span class=\"n\">simd</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"n\">10</span><span class=\"p\">:</span><span class=\"n\">15</span>\n   <span class=\"p\">|</span>\n<span class=\"n\">10</span> <span class=\"p\">|</span>     <span class=\"n\">let</span> <span class=\"nb\">h </span><span class=\"p\">=</span> <span class=\"n\">x</span> <span class=\"p\">*</span> <span class=\"n\">0</span><span class=\"p\">.</span><span class=\"n\">5</span><span class=\"p\">;</span>\n   <span class=\"p\">|</span>               <span class=\"p\">^</span> <span class=\"n\">no</span> <span class=\"n\">implementation</span> <span class=\"k\">for</span> <span class=\"p\">`</span><span class=\"n\">Simd</span><span class=\"p\">&lt;</span><span class=\"n\">f32</span><span class=\"p\">,</span> <span class=\"n\">4_usize</span><span class=\"p\">&gt;</span> <span class=\"p\">*</span> <span class=\"p\">{</span><span class=\"n\">float</span><span class=\"p\">}`</span>\n   <span class=\"p\">|</span>\n   <span class=\"p\">=</span> <span class=\"n\">help</span><span class=\"p\">:</span> <span class=\"n\">the</span> <span class=\"n\">trait</span> <span class=\"p\">`</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">ops</span><span class=\"p\">::</span><span class=\"n\">Mul</span><span class=\"p\">&lt;{</span><span class=\"n\">float</span><span class=\"p\">}&gt;`</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">implemented</span> <span class=\"k\">for</span> <span class=\"p\">`</span><span class=\"n\">Simd</span><span class=\"p\">&lt;</span><span class=\"n\">f32</span><span class=\"p\">,</span> <span class=\"n\">4_usize</span><span class=\"p\">&gt;`</span>\n\n<span class=\"k\">For</span> <span class=\"n\">more</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">this</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"k\">try</span> <span class=\"p\">`</span><span class=\"n\">rustc</span> <span class=\"p\">-</span><span class=\"n\">-explain</span> <span class=\"n\">E0277</span><span class=\"p\">`.</span>\n</code></pre></div>\n<p>Pain.</p>",
        "id": 263529116,
        "sender_full_name": "Jubilee",
        "timestamp": 1638499002
    },
    {
        "content": "<p>why does rustc even report float and int as missing trait impls when they're not types you can actually make values of. silly rustc</p>",
        "id": 263531429,
        "sender_full_name": "Lokathor",
        "timestamp": 1638501560
    },
    {
        "content": "<p><code>{int}</code> and <code>{float}</code> are inference variables restricted to integers or floats. Rustc will unify them with any integer/float type, but not any other types like regular inference variables (printed as <code>_</code> in errors by default).</p>",
        "id": 263557121,
        "sender_full_name": "bjorn3",
        "timestamp": 1638525748
    },
    {
        "content": "<p>Whenever a float literal is written, the typechecker will create a <code>{float}</code> inference variable. <code>{int}</code> and <code>{float}</code> normally default to <code>i32</code> (or was it <code>u32</code>) and <code>f32</code>, but sometimes this defaulting doesn't happen.</p>",
        "id": 263557286,
        "sender_full_name": "bjorn3",
        "timestamp": 1638525857
    },
    {
        "content": "<p>umm, iirc <code>{int}</code> defaults to <code>i32</code> and <code>{float}</code> defaults to <code>f64</code></p>",
        "id": 263615506,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638554405
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/rust-by-example/types/literals.html\">https://doc.rust-lang.org/rust-by-example/types/literals.html</a> 2nd paragraph</p>",
        "id": 263615659,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638554474
    },
    {
        "content": "<blockquote>\n<p>The type of unsuffixed numeric literals will depend on how they are used. If no constraint exists, the compiler will use i32 for integers, and f64 for floating-point numbers.</p>\n</blockquote>",
        "id": 263615704,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638554495
    },
    {
        "content": "<p>Right that was my thinking, so it shouldn't ever try \"multiply by {int}\", because that clearly isn't a thing to begin with, so i would expect the message to be about i32, or in the case of {float} give a message about f64.</p>",
        "id": 263617306,
        "sender_full_name": "Lokathor",
        "timestamp": 1638555241
    },
    {
        "content": "<p>basically, if the compiler says \"the trait <code>Name</code> is not implemented for <code>Type</code>\", I expect that it should be possible to actually implement Name for Type (or for <em>someone</em> to be able to do it, orphan rules, whatever, you get the idea).</p>",
        "id": 263617673,
        "sender_full_name": "Lokathor",
        "timestamp": 1638555388
    },
    {
        "content": "<p>imho the message should still be about <code>{int}</code> or <code>{float}</code> cuz if you error about no impl for i32 users may have a harder time figuring out that an impl for u8 also works</p>",
        "id": 263617700,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638555401
    },
    {
        "content": "<p>it could explain what <code>{int}</code> means tho</p>",
        "id": 263617751,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638555429
    }
]