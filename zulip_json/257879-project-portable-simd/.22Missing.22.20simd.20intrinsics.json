[
    {
        "content": "<p>It is very weird there's simd_fabs but no simd_abs.<br>\nNo conclusion from this, just saying.</p>",
        "id": 234431544,
        "sender_full_name": "Jubilee",
        "timestamp": 1618367027
    },
    {
        "content": "<p>I think this is because the link of fabs is more general. For example, the abs of f32 needs to be linked to llvm.fabs.v2f32, but the abs of s32 on aarch64 needs to be linked to llvm.aarch64.neon.abs.v2i32.</p>",
        "id": 234432377,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1618367762
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 234432433,
        "sender_full_name": "Jubilee",
        "timestamp": 1618367787
    },
    {
        "content": "<p>I have not the foggiest idea for why this doesn't work. <a href=\"https://github.com/rust-lang/stdsimd/pull/95\">https://github.com/rust-lang/stdsimd/pull/95</a></p>",
        "id": 234433054,
        "sender_full_name": "Jubilee",
        "timestamp": 1618368376
    },
    {
        "content": "<p>I wonder if fabs is wrong, or not sufficient in some way</p>",
        "id": 234433770,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369060
    },
    {
        "content": "<p>And on your silicon it does something different</p>",
        "id": 234433777,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369076
    },
    {
        "content": "<p>Btw I noticed some bugs in your saturation code relating to abs, I started fixing them but can't finish until we get simd_abs</p>",
        "id": 234433845,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369122
    },
    {
        "content": "<p>whoops.</p>",
        "id": 234433850,
        "sender_full_name": "Jubilee",
        "timestamp": 1618369130
    },
    {
        "content": "<p>I was going to PR it once I get around to it...</p>",
        "id": 234433855,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369134
    },
    {
        "content": "<p>what were the bugs?</p>",
        "id": 234433860,
        "sender_full_name": "Jubilee",
        "timestamp": 1618369141
    },
    {
        "content": "<p>If you look at the saturation docs you messed up the formatting slightly</p>",
        "id": 234433886,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369175
    },
    {
        "content": "<p>And then it turns out those tests don't actually run</p>",
        "id": 234433896,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369186
    },
    {
        "content": "<p>oh wow.</p>",
        "id": 234433903,
        "sender_full_name": "Jubilee",
        "timestamp": 1618369200
    },
    {
        "content": "<p>And then it turns out we don't have abs for integers lol</p>",
        "id": 234433955,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369206
    },
    {
        "content": "<p>yeah, I knew that part.</p>",
        "id": 234433971,
        "sender_full_name": "Jubilee",
        "timestamp": 1618369218
    },
    {
        "content": "<p>I suppose we could implement it as a scalar op right now just until we get simd_abs</p>",
        "id": 234434039,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369259
    },
    {
        "content": "<p>I knew we ran the tests.</p>",
        "id": 234434072,
        "sender_full_name": "Jubilee",
        "timestamp": 1618369281
    },
    {
        "content": "<p>Or well, I know I ran the tests locally.</p>",
        "id": 234434079,
        "sender_full_name": "Jubilee",
        "timestamp": 1618369292
    },
    {
        "content": "<p>Ahh I see, I did mess up the syntax.</p>",
        "id": 234434283,
        "sender_full_name": "Jubilee",
        "timestamp": 1618369445
    },
    {
        "content": "<p>Yeah it looks like a copy paste error</p>",
        "id": 234434300,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369467
    },
    {
        "content": "<p>Something like that</p>",
        "id": 234434308,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618369480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I pulled out fix-sat-math as a branch including your commit and layered another commit on it if you want to take over that / cherry-pick / whatever.</p>",
        "id": 234435377,
        "sender_full_name": "Jubilee",
        "timestamp": 1618370502
    },
    {
        "content": "<p>Includes the amazing butcher-work of \"vecter? never heard of her\"</p>",
        "id": 234435493,
        "sender_full_name": "Jubilee",
        "timestamp": 1618370593
    },
    {
        "content": "<p>there's no \"abs\" intrinsic in the compiler, apparently.</p>",
        "id": 234438547,
        "sender_full_name": "Jubilee",
        "timestamp": 1618373481
    },
    {
        "content": "<p>...guess the compiler doesn't like to do crunhes <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 234438643,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1618373591
    },
    {
        "content": "<p>pffft.</p>",
        "id": 234438795,
        "sender_full_name": "Jubilee",
        "timestamp": 1618373734
    },
    {
        "content": "<p>there's no inherent abs in x86, apparently???<br>\nwait, there IS a SIMD absolute value</p>",
        "id": 234438875,
        "sender_full_name": "Jubilee",
        "timestamp": 1618373840
    },
    {
        "content": "<p>for 8~32 bit integers.</p>",
        "id": 234438891,
        "sender_full_name": "Jubilee",
        "timestamp": 1618373876
    },
    {
        "content": "<p><em>nudges rustc with toe</em><br>\nbootstrap!!</p>",
        "id": 234439784,
        "sender_full_name": "Jubilee",
        "timestamp": 1618374794
    },
    {
        "content": "<p>float abs is defined to be a bitwise operation on the sign bit, leaving all other bits unchanged. so some arches dont even provide it. ones that do i guess it's good to use to reduce pressure on integer ports though</p>",
        "id": 234441466,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618376498
    },
    {
        "content": "<p>oh, i misread</p>",
        "id": 234441474,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618376519
    },
    {
        "content": "<p>spent some time hacking on the compiler. trying to figure out how the LLVM API works. then I will be able to add intrinsics in so we can wrap up <a href=\"https://github.com/rust-lang/rust/issues/46\">#46</a>. there is support in the compiler for some things already but not others.</p>",
        "id": 234451343,
        "sender_full_name": "Jubilee",
        "timestamp": 1618384078
    },
    {
        "content": "<p>We don't need <code>simd_trunc</code> for fp -&gt; int conversion. <code>simd_cast</code> already does it.</p>",
        "id": 234537910,
        "sender_full_name": "Jubilee",
        "timestamp": 1618420367
    },
    {
        "content": "<p>Oh cool</p>",
        "id": 234538291,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618420522
    },
    {
        "content": "<p>Wouldn't <code>simd_cast</code> round instead of truncate?</p>",
        "id": 234538366,
        "sender_full_name": "bjorn3",
        "timestamp": 1618420556
    },
    {
        "content": "<p>It \"rounds\" towards 0.</p>",
        "id": 234538425,
        "sender_full_name": "Jubilee",
        "timestamp": 1618420569
    },
    {
        "content": "<p>which is the desired effect: float truncation to a plausibly signed integer value.</p>",
        "id": 234538523,
        "sender_full_name": "Jubilee",
        "timestamp": 1618420619
    },
    {
        "content": "<p>nice</p>",
        "id": 234538839,
        "sender_full_name": "Lokathor",
        "timestamp": 1618420746
    },
    {
        "content": "<p>Yeah, I think we determined that the way to round to int is to just do fround first</p>",
        "id": 234538843,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618420747
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">f32x4:</span><span class=\"err\">:</span><span class=\"nl\">trunc:</span>\n        <span class=\"nf\">movq</span>    <span class=\"nv\">%rdi</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n        <span class=\"nf\">cvttps2dq</span>       <span class=\"p\">(</span><span class=\"nv\">%rsi</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">movaps</span>  <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">)</span>\n        <span class=\"nf\">retq</span>\n</code></pre></div>\n<p>specifically this is what is called on x64 when you do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">trunc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simd_cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234540280,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421255
    },
    {
        "content": "<p>Okay so that looks like it's unsafe?</p>",
        "id": 234540512,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421324
    },
    {
        "content": "<p>oh <em>wildly</em></p>",
        "id": 234540530,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421334
    },
    {
        "content": "<p>The checks are fairly simple but we do need to check</p>",
        "id": 234540561,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421348
    },
    {
        "content": "<p>We still kiiinda need most of math.h, so I opened <a href=\"https://github.com/rust-lang/rust/pull/84205\">https://github.com/rust-lang/rust/pull/84205</a></p>",
        "id": 234588597,
        "sender_full_name": "Jubilee",
        "timestamp": 1618440533
    },
    {
        "content": "<p>Did you consider adding simd_abs to that?  Or is there a reason not too</p>",
        "id": 234588809,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618440670
    },
    {
        "content": "<p>It requires me to touch different segments of code, and isn't a floating-point intrinsic, so I decided to make it a separate PR.</p>",
        "id": 234588841,
        "sender_full_name": "Jubilee",
        "timestamp": 1618440704
    },
    {
        "content": "<p>Works for me</p>",
        "id": 234588905,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618440726
    },
    {
        "content": "<p>Is simd_trunc different from simd_cast?</p>",
        "id": 234588946,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618440752
    },
    {
        "content": "<p>casting to int is not <em>as</em> useful as truncating the float directly but keeping it as a float if you can do that.</p>",
        "id": 234589038,
        "sender_full_name": "Jubilee",
        "timestamp": 1618440840
    },
    {
        "content": "<p>Oh so the output is float, not int. Cool.</p>",
        "id": 234589346,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618440996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> Also besides, the same ops work for SIMD abs. :P ( I pushed that up to <code>fix-sat-math</code> actually, after doublechecking. )</p>",
        "id": 234590533,
        "sender_full_name": "Jubilee",
        "timestamp": 1618441640
    },
    {
        "content": "<p>produce a sign-mask (-1 or 0)<br>\nxor value by sign-mask<br>\nsubtract sign-mask</p>",
        "id": 234590828,
        "sender_full_name": "Jubilee",
        "timestamp": 1618441804
    },
    {
        "content": "<p>Mind, these do exist, so I wanna poke around more, but last night I got lost poking around the SIMD backend and realizing that there are multiple different ways intrinsics are built and fed to LLVM, giving me a headache. <a href=\"https://www.felixcloutier.com/x86/pabsb:pabsw:pabsd:pabsq\">https://www.felixcloutier.com/x86/pabsb:pabsw:pabsd:pabsq</a></p>",
        "id": 234590950,
        "sender_full_name": "Jubilee",
        "timestamp": 1618441865
    },
    {
        "content": "<p>Yeah, the abs instructions are theoretically a little better but negligibly so</p>",
        "id": 234592398,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618442846
    },
    {
        "content": "<p>I think is only relevant on x86 because x86 doesn't have a dedicated zero register</p>",
        "id": 234592738,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618443067
    },
    {
        "content": "<p>Hm? why would a zero register matter for Neon abs?</p>",
        "id": 234593934,
        "sender_full_name": "Jubilee",
        "timestamp": 1618443818
    },
    {
        "content": "<p>On neon abs would be <code>sub r0 r1 r1</code> but on x86 it would be</p>\n<div class=\"codehilite\"><pre><span></span><code>xor r0 r0 r0\nsub r0 r1 r1\n</code></pre></div>",
        "id": 234596592,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618445467
    },
    {
        "content": "<p>As opposed to just <code>pabs r1 r1</code> or whatever</p>",
        "id": 234596633,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618445514
    },
    {
        "content": "<p>...but that returns negative if r1 is positive, <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span></p>",
        "id": 234596729,
        "sender_full_name": "Jubilee",
        "timestamp": 1618445577
    },
    {
        "content": "<p>Oh wait I was thinking just negative lol</p>",
        "id": 234596751,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618445610
    },
    {
        "content": "<p>&lt;_&lt;;<br>\nNeon has a saturating abs intrinsic, amusingly.</p>",
        "id": 234596859,
        "sender_full_name": "Jubilee",
        "timestamp": 1618445702
    },
    {
        "content": "<p>So my current plan is basically to continue adding most of <a href=\"https://llvm.org/docs/LangRef.html#standard-c-c-library-intrinsics\">https://llvm.org/docs/LangRef.html#standard-c-c-library-intrinsics</a>, <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>, to Rust's platform intrinsics, until I'm satisfied. If you have any opinions or requests, I'm listening.</p>",
        "id": 234740039,
        "sender_full_name": "Jubilee",
        "timestamp": 1618515681
    },
    {
        "content": "<p>Please only add the intrinsics you actually need.</p>",
        "id": 234740548,
        "sender_full_name": "bjorn3",
        "timestamp": 1618515866
    },
    {
        "content": "<p>By the way you can find the full list of instructions supported by Cranelift at <a href=\"https://docs.rs/cranelift-codegen/0.73.0/cranelift_codegen/ir/trait.InstBuilder.html\">https://docs.rs/cranelift-codegen/0.73.0/cranelift_codegen/ir/trait.InstBuilder.html</a></p>",
        "id": 234740595,
        "sender_full_name": "bjorn3",
        "timestamp": 1618515892
    },
    {
        "content": "<p>Of course. That just will probably still be a Lot of them.</p>",
        "id": 234740649,
        "sender_full_name": "Jubilee",
        "timestamp": 1618515913
    },
    {
        "content": "<p>What kind of operations are necessary?</p>",
        "id": 234740720,
        "sender_full_name": "bjorn3",
        "timestamp": 1618515944
    },
    {
        "content": "<p>I think we are actually already in pretty good shape and not missing all that many</p>",
        "id": 234740766,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618515963
    },
    {
        "content": "<p>We probably still need almost all of the checked arithmetic, though</p>",
        "id": 234740866,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618515993
    },
    {
        "content": "<p>Does LLVM even support checked arith in the IR?</p>",
        "id": 234741150,
        "sender_full_name": "Jubilee",
        "timestamp": 1618516101
    },
    {
        "content": "<blockquote>\n<p>Arithmetic with Overflow Intrinsics</p>\n</blockquote>\n<p>Ah yeah.</p>",
        "id": 234741229,
        "sender_full_name": "Jubilee",
        "timestamp": 1618516131
    },
    {
        "content": "<p>Yup those.</p>",
        "id": 234741248,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618516143
    },
    {
        "content": "<p>I think we're fine with not adding those for now actually because while we want them, they're not in <code>packed_simd</code>, and I think I want to focus on getting on nightly first for things that aren't about establishing feature parity with <code>packed_simd</code>.</p>",
        "id": 234741619,
        "sender_full_name": "Jubilee",
        "timestamp": 1618516296
    },
    {
        "content": "<p>Yeah that's fair.  Those are the only ones I can think of where there are a lot missing, though</p>",
        "id": 234741770,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618516349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/.22Missing.22.20simd.20intrinsics/near/234740720\">said</a>:</p>\n<blockquote>\n<p>What kind of operations are necessary?</p>\n</blockquote>\n<p>Caleb would like <code>abs</code> for SimdInts. I am not sure how high priority that is because there <em>are</em> easy implementations for it. There are also vector instructions for it, tho'. <em>I</em> want LLVM's <code>shl.sat</code>. Specifically, I want <code>mul.sat</code>, actually. I can write a saturating multiply but it is absolutely wretched.</p>",
        "id": 234742715,
        "sender_full_name": "Jubilee",
        "timestamp": 1618516775
    },
    {
        "content": "<p>that or checked multiplication (deriving a mask, ideally) which allows saturation using the mask. Not sure how much either exist in hardware.</p>",
        "id": 234745651,
        "sender_full_name": "Jubilee",
        "timestamp": 1618517917
    },
    {
        "content": "<p>llvm has the fixed-point saturating multiply intrinsics, and fixed-point with 0 fractional bits is the same as integers.</p>",
        "id": 234754876,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1618521148
    },
    {
        "content": "<p>As I mentioned, I feel very dubious about that because from what I saw LLVM devs were not entirely confident it exactly matched either.</p>",
        "id": 234755988,
        "sender_full_name": "Jubilee",
        "timestamp": 1618521531
    },
    {
        "content": "<p><a href=\"https://llvm.godbolt.org/z/9YGPfxPs6\">https://llvm.godbolt.org/z/9YGPfxPs6</a></p>\n<p>have fun!</p>",
        "id": 234756382,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1618521687
    },
    {
        "content": "<p>I think that's definitely something that we test with fuzzing, since there's no reason it shouldn't match</p>",
        "id": 234756581,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618521761
    },
    {
        "content": "<p>Seems Sus.</p>",
        "id": 234757527,
        "sender_full_name": "Jubilee",
        "timestamp": 1618522190
    },
    {
        "content": "<p>one issue: that fixed point intrinsic is not supported on wasm for llvm 12: <a href=\"https://llvm.godbolt.org/z/cf6hehhGq\">https://llvm.godbolt.org/z/cf6hehhGq</a></p>",
        "id": 234757730,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1618522304
    },
    {
        "content": "<p>Sounds like a dealbreaker. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234758907,
        "sender_full_name": "Jubilee",
        "timestamp": 1618522895
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/84205\">https://github.com/rust-lang/rust/pull/84205</a> got merged~</p>",
        "id": 234795842,
        "sender_full_name": "Jubilee",
        "timestamp": 1618550097
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>feat/round 852d95c<span class=\"o\">]</span> Add SIMD rounding intrinsics\n <span class=\"m\">2</span> files changed, <span class=\"m\">48</span> insertions<span class=\"o\">(</span>+<span class=\"o\">)</span>, <span class=\"m\">12</span> deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 234923095,
        "sender_full_name": "Jubilee",
        "timestamp": 1618607715
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/107/checks\">https://github.com/rust-lang/stdsimd/pull/107/checks</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 236099613,
        "sender_full_name": "Jubilee",
        "timestamp": 1619390837
    }
]