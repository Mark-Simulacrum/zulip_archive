[
    {
        "content": "<p>Is SSE expected to produce negative zero when negating a lane of 0f32?  I'm writing the tests and it doesn't appear to (but I would expect it to)</p>",
        "id": 211800889,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601490346
    },
    {
        "content": "<p>It does on gcc, since it compiles to xoring each lane with 0x8000_0000:<br>\n<a href=\"https://gcc.godbolt.org/z/aK81r3\">https://gcc.godbolt.org/z/aK81r3</a></p>",
        "id": 211803992,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601491850
    },
    {
        "content": "<p>Yeah, I definitely would have expected just an xorps.  Haven't inspected the asm yet.  <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> maybe this is why packed_simd multiplies by -1 instead of subtracts from 0?</p>",
        "id": 211804230,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491959
    },
    {
        "content": "<p>Hmm, we were using 0-vec, yeah.</p>\n<p>I'd be fine with xor, but the mul I'm still unsure we'd get a good compile out of it</p>",
        "id": 211804289,
        "sender_full_name": "Lokathor",
        "timestamp": 1601492001
    },
    {
        "content": "<p>Once I get the tests pushed we can address it</p>",
        "id": 211804325,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601492030
    },
    {
        "content": "<p>If we need to handle some arches specially to make sure the crate actually works with the correct performance, that's what we're gonna do.</p>",
        "id": 211805669,
        "sender_full_name": "Jubilee",
        "timestamp": 1601492676
    },
    {
        "content": "<p>though we should at least see what <code>* -1</code> compiles to if that is what works mathematically.</p>",
        "id": 211805767,
        "sender_full_name": "Jubilee",
        "timestamp": 1601492730
    },
    {
        "content": "<p>the xor also works mathematically</p>",
        "id": 211805849,
        "sender_full_name": "Lokathor",
        "timestamp": 1601492765
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211805867,
        "sender_full_name": "Lokathor",
        "timestamp": 1601492775
    },
    {
        "content": "<p>or like.. bittily</p>",
        "id": 211805868,
        "sender_full_name": "Lokathor",
        "timestamp": 1601492776
    },
    {
        "content": "<p>yeah</p>",
        "id": 211805883,
        "sender_full_name": "Jubilee",
        "timestamp": 1601492786
    },
    {
        "content": "<p>I've definitely relied on multiplying by -1 in the past, but in C++ on GCC for limited architectures :)</p>",
        "id": 211806014,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601492877
    },
    {
        "content": "<p>Correctness first, optimization second, handling specific ISAs third, imo.</p>",
        "id": 211806245,
        "sender_full_name": "Jubilee",
        "timestamp": 1601492991
    },
    {
        "content": "<p>I tend to agree. If someone is looking for incorrect but faster behavior they should probably use std::arch instead</p>",
        "id": 211806406,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601493062
    },
    {
        "content": "<p>I would like us to have room for \"incorrect but faster\" but I definitely see our purview as satisfying Rust's requirements first, which are \"correctness, mostly, or at least safety and control\".</p>",
        "id": 211806550,
        "sender_full_name": "Jubilee",
        "timestamp": 1601493145
    },
    {
        "content": "<p>xor is both correct and fast.</p>\n<p>i initially said <code>0-vec</code> because it's correct for ints and i thought it was for floats too. the advantage was not needing two macro cases. Since it's not correct for floats we should probably keep <code>0-vec</code> for ints and use <code>vec^Self::splat(-0.0)</code> for floats.</p>",
        "id": 211808174,
        "sender_full_name": "Lokathor",
        "timestamp": 1601493998
    },
    {
        "content": "<p>float subtraction triggers rounding, basically</p>",
        "id": 211808980,
        "sender_full_name": "Jubilee",
        "timestamp": 1601494417
    },
    {
        "content": "<p>LLVM uses <code>-0.0 - x</code> for <code>-x</code>, though I think they're moving away from that.</p>",
        "id": 211810795,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601495315
    },
    {
        "content": "<p>at the risk of sounding overly cynical: If their name isn't William Kahan, don't trust their float impl farther than you can test them.</p>",
        "id": 211811353,
        "sender_full_name": "Jubilee",
        "timestamp": 1601495596
    },
    {
        "content": "<p>LLVM uses <code>-0.0 - x</code> for scalar neg too, so, either it's correct (which it is for the rounding mode LLVM assumes) or all code using fp neg compiled with LLVM is incorrect</p>",
        "id": 211812119,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601495957
    },
    {
        "content": "<p>see <a href=\"https://gcc.godbolt.org/z/oTEjh9\">https://gcc.godbolt.org/z/oTEjh9</a></p>",
        "id": 211813128,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601496428
    },
    {
        "content": "<p>Kahan Or <del>Bust</del> Test. :^)</p>",
        "id": 211813495,
        "sender_full_name": "Jubilee",
        "timestamp": 1601496600
    },
    {
        "content": "<p>Hello!</p>",
        "id": 211853038,
        "sender_full_name": "Horacio Hidalgo",
        "timestamp": 1601508869
    },
    {
        "content": "<p>IEEE754-2019 (and IIRC earlier, but I only have 2019 on hand) explicitly says negate should only touch the sign bit, and that it's explicitly <em>not</em> the same as a subtraction (from 5.5.1 \"Sign bit operations\"):</p>\n<blockquote>\n<p><code>negate(x)</code> copies a floating-point operand x to a destination in the same format, reversing the sign bit. negate(x) is not the same as subtraction(0, x)</p>\n</blockquote>\n<p>It also says (when introducing negate/abs/copysign) a few lines earlier:</p>\n<blockquote>\n<p>The operations treat floating-point numbers and NaNs alike, and signal no exception. These operations may propagate non-canonical encodings.</p>\n</blockquote>\n<p>This is all to say that xor is the correct implementation here, and mul or subtraction (even with -0.0) is incorrect.</p>",
        "id": 212454674,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602002856
    },
    {
        "content": "<p><code>-0.0 - x</code> is correct for the assumptions LLVM makes about floating-point types by default: always round-to-nearest-even, fp exceptions ignored, and no one cares about the difference between different NaN bit-patterns.</p>",
        "id": 212462213,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602006825
    },
    {
        "content": "<p>yeah but xor_ps also has meaningfully lower latency on at least intel systems. i'll have a patch for this up shortly</p>",
        "id": 212462302,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602006862
    },
    {
        "content": "<p>Did you check to make sure it doesn't optimize to xor_ps? I'm almost certain it will. In packed_simd it similarly used a multiply by -1, which should do the same</p>",
        "id": 212462395,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602006914
    },
    {
        "content": "<p>i did, although i used _mm_foo intrinsics and not the simd ones</p>",
        "id": 212462522,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602006966
    },
    {
        "content": "<p>llvm optimizes it to xorps:<br>\n<a href=\"https://gcc.godbolt.org/z/MPa5Tf\">https://gcc.godbolt.org/z/MPa5Tf</a></p>",
        "id": 212462799,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602007106
    },
    {
        "content": "<p>Interestingly, doesn't seem to optimize with <code>std::arch</code>: <a href=\"https://rust.godbolt.org/z/z7E8G6\">https://rust.godbolt.org/z/z7E8G6</a></p>",
        "id": 212463348,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602007330
    },
    {
        "content": "<p>needs to be -0.0</p>",
        "id": 212463401,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602007359
    },
    {
        "content": "<p>whoops</p>",
        "id": 212463411,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602007367
    },
    {
        "content": "<p>dumb mistake, it does work: <a href=\"https://rust.godbolt.org/z/61zGY8\">https://rust.godbolt.org/z/61zGY8</a></p>",
        "id": 212463455,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602007395
    },
    {
        "content": "<p>yeah, i just realized i had non-full optimization flags left  over in godbolt, which is why when i checked with _mm_foo it didn't seem to optimize it the way i'd hope</p>",
        "id": 212463499,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602007416
    },
    {
        "content": "<p>i think this transformation isn't legal on platforms that need to canonicalize values tho</p>",
        "id": 212463862,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602007582
    },
    {
        "content": "<p>which might just be wasm for some nans</p>",
        "id": 212463894,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602007601
    },
    {
        "content": "<p>i guess i can turn this patch into an float <code>abs</code> patch relatively easily, unless someone is already doing that.</p>",
        "id": 212464044,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602007698
    },
    {
        "content": "<p>most of it is a bit of plumbing for to_bits/from_bits (which i didn't make pub, since idk if we actually want the way i did them)</p>",
        "id": 212464097,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602007737
    },
    {
        "content": "<p>There's no reason <em>not</em> to use an xor that I'm seeing.</p>\n<ul>\n<li>It's absolutely correct</li>\n<li>It requires less optimization so it's nicer in debug mode</li>\n<li>It's closer to what the spec declares you should do.</li>\n</ul>\n<p>So we should just write it as xor and move on I think.</p>",
        "id": 212482832,
        "sender_full_name": "Lokathor",
        "timestamp": 1602016853
    },
    {
        "content": "<p>interesting.</p>",
        "id": 212485337,
        "sender_full_name": "Jubilee",
        "timestamp": 1602018165
    },
    {
        "content": "<blockquote>\n<p>It requires less optimization so it's nicer in debug mode</p>\n</blockquote>\n<p>is there any hope that this will be okay at all in debug mode? i had been assuming no — core::arch is totally abysmal there, although i guess the reasons for this (e.g. <code>#[target_feature]</code>'s design preventing <code>#[inline(always)]</code> and such) don't apply here.</p>\n<blockquote>\n<p>There's no reason not to use an xor that I'm seeing.</p>\n</blockquote>\n<p>Yes, it's actually not really valid to do this with subtract (or multiply) since:</p>\n<ul>\n<li>\n<p>those will raise invalid op for a sNaN argument  (not that anybody really cares). </p>\n</li>\n<li>\n<p>any platform that requires canonicalization of floats using <code>sub</code> will (incorrectly) canonicalize the argument. I think this include wasm's NaN handling, but the usual example for canonicalization is: if you have the \"flush subnormal numbers to zero\" flag in your fpenv, then all subnormal numbers are treated as non-canonical representations of zeros. </p>\n</li>\n</ul>\n<p>I think the default fpenv for (some?) 32 bit arm machines <em>does</em> flush denormals to zero in this way, so it's maybe worth checking on them</p>\n<p>or just changing it to be xor, it's pretty clear that the float spec intends sign bit operation\" (<code>copysign</code>/<code>abs</code>/<code>negate</code>) to all operate on the float's binary representation directly. It even calls out subtraction as invalid.</p>",
        "id": 212487213,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602019107
    },
    {
        "content": "<p>I don't think we'll get <em>good</em> performance in debug mode, no. Rust's performance in debug mode is generally a complete joke.</p>",
        "id": 212490689,
        "sender_full_name": "Lokathor",
        "timestamp": 1602021122
    },
    {
        "content": "<p>However, it's not unreasonable to keep an eye on things and at least try to lean towards what makes debug run well if it's the same either way in release mode.</p>",
        "id": 212490777,
        "sender_full_name": "Lokathor",
        "timestamp": 1602021166
    },
    {
        "content": "<p>yeah, I suspect the current code is probably wrong for subnormals on arm32 because it doesn't use xor. trying to verify, but that means i need to figure out why cross is broken on my linux box or finally set up the raspberry pi i have in a box.</p>",
        "id": 212492946,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602022520
    },
    {
        "content": "<p>DO IT.</p>",
        "id": 212494320,
        "sender_full_name": "Jubilee",
        "timestamp": 1602023565
    },
    {
        "content": "<p>Team Raspi!</p>",
        "id": 212494339,
        "sender_full_name": "Jubilee",
        "timestamp": 1602023587
    },
    {
        "content": "<p>( actually what version of Raspi do you have? )</p>",
        "id": 212494350,
        "sender_full_name": "Jubilee",
        "timestamp": 1602023602
    },
    {
        "content": "<p>rpi4</p>",
        "id": 212494517,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602023725
    },
    {
        "content": "<p>oh I am pretty sure RPI4 is a full aarch64 platform</p>",
        "id": 212494545,
        "sender_full_name": "Jubilee",
        "timestamp": 1602023747
    },
    {
        "content": "<p>the OS is usually armv6 but</p>",
        "id": 212494611,
        "sender_full_name": "Jubilee",
        "timestamp": 1602023775
    },
    {
        "content": "<p>that would determine both the target triple, and the initial fpcr value i think</p>",
        "id": 212494966,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602024039
    },
    {
        "content": "<p>yeah I am just noting because I am not 100% sure of the semantics of running \"aarch32\" programs on aarch64!</p>",
        "id": 212495051,
        "sender_full_name": "Jubilee",
        "timestamp": 1602024122
    },
    {
        "content": "<p>it looks like llvm does the right thing even though it's strictly speaking a miscompilation on that target. it seems to do the right thing even in debug builds, surprisingly, but if that ever stopped i suspect we'd have observably different behavior depending on optimization settings.</p>",
        "id": 212495633,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602024578
    },
    {
        "content": "<p>you can get the raspi OS in both 32 bit modes and 64 bit modes, but their 64-bit OS is only intended for the rpi3 and rpi4, not the older models.</p>",
        "id": 212496123,
        "sender_full_name": "Lokathor",
        "timestamp": 1602025022
    },
    {
        "content": "<p>with the changes in my CI patch, adding </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">, wasm_bindgen_test)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">neg_odd_floats</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">slice_chunks</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">apply_unary_lanewise</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"cp\">$scalar</span><span class=\"o\">&gt;</span>::<span class=\"n\">neg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert_biteq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>to the float ops tests causes a lot of platforms to fail unless we use xor for the negate. unfortunately, using xor for negate produces worse code on arm even in release builds...</p>",
        "id": 212583802,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602087844
    },
    {
        "content": "<p>What about multiplying by -1?</p>",
        "id": 212583886,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602087897
    },
    {
        "content": "<p>definitely invalid</p>",
        "id": 212583907,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602087906
    },
    {
        "content": "<p>Just curious because that's what packed_simd does</p>",
        "id": 212583940,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602087928
    },
    {
        "content": "<p>What's worse on arm, and what's failing on the other architectures?</p>",
        "id": 212583989,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602087955
    },
    {
        "content": "<p>multiplying by negative one will canonicalize which is the same reason subtraction is wrong</p>",
        "id": 212584046,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602087970
    },
    {
        "content": "<p>after the CI patch lands i'll put a patch up with just the failing test so you can see. it was a few things in various places</p>",
        "id": 212584100,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602088004
    },
    {
        "content": "<p>worse on arm is using xor to do the bitflip instead of the appropriate f32 vector neg instruciton it happens to have</p>",
        "id": 212584202,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602088056
    },
    {
        "content": "<p>Interesting</p>",
        "id": 212584586,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602088225
    },
    {
        "content": "<p>honestly that was the only one i actually looked at, there were a lot of suprising failures, some of the platforms only failed in debug builds, others only in release. i was surprised that xor fixed all of these</p>",
        "id": 212584706,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602088279
    },
    {
        "content": "<p>found the old CI run with just the test. there might be more wrong in the CI set up (all of the failures may not be because of this — but honestly it looks like most are): <a href=\"https://github.com/thomcc/stdsimd/runs/1220021695?check_suite_focus=true\">https://github.com/thomcc/stdsimd/runs/1220021695?check_suite_focus=true</a></p>",
        "id": 212585442,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602088625
    },
    {
        "content": "<p>If the outward API is consistent, there should be no problem with using internal conditional compilation to pick a specialized intrinsic on ARM or any other specific platform.</p>",
        "id": 212587808,
        "sender_full_name": "Lokathor",
        "timestamp": 1602089781
    },
    {
        "content": "<p>Maybe we should just get Rustc to expose an intrinsic for LLVM's <code>fneg</code> instruction?</p>",
        "id": 212588061,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602089909
    },
    {
        "content": "<p>LLVM sucking at something on a given platform just means we handroll more Rust code internally.</p>",
        "id": 212596666,
        "sender_full_name": "Jubilee",
        "timestamp": 1602093902
    },
    {
        "content": "<p>yeah a simd_neg like the other fns in <a href=\"http://intrinsics.rs\">intrinsics.rs</a> would solve this fine</p>",
        "id": 212596718,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602093934
    },
    {
        "content": "<p>and yeah, if we can pester LLVM to do it Properly that's also fine.</p>",
        "id": 212596817,
        "sender_full_name": "Jubilee",
        "timestamp": 1602093968
    },
    {
        "content": "<p>in the mean time the xor solution is correct everywhere tho, unlike sub/mul</p>",
        "id": 212597091,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602094108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/SSE.20and.20negative.20zero/near/212596817\">said</a>:</p>\n<blockquote>\n<p>and yeah, if we can pester LLVM to do it Properly that's also fine.</p>\n</blockquote>\n<p>LLVM does it properly with a dedicated <code>fneg</code> instruction since a few releases ago. Rust (apparently) just doesn't expose that yet.</p>",
        "id": 212601834,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602096337
    },
    {
        "content": "<p>Okay.<br>\nAdding that to the compiler shouldn't be too hard.</p>",
        "id": 212601932,
        "sender_full_name": "Jubilee",
        "timestamp": 1602096374
    },
    {
        "content": "<p>there's a PR up for the fix and I filed an issue for replacing it with an intrinsic later</p>",
        "id": 212605108,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602097736
    }
]