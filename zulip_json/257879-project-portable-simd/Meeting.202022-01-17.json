[
    {
        "content": "<p>meeting today?</p>",
        "id": 268310805,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642449781
    },
    {
        "content": "<p>Perhaps</p>",
        "id": 268312029,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642450772
    },
    {
        "content": "<p>No updates from me today</p>",
        "id": 268312035,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642450781
    },
    {
        "content": "<p>nothing from me either</p>",
        "id": 268314141,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642452621
    },
    {
        "content": "<p>Hello, <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>, I have broken free of the ice prison.<br>\nI reviewed your PR against rust-lang/rust, I only had a few thoughts after reviewing the code and mostly to the things being changed to apply to both vector and scalar. It's probably best to keep the functions in question meticulously (even pedantically) documented, so if they apply to vector operations that now includes explaining very briefly what the hell is going on with that.</p>",
        "id": 268314877,
        "sender_full_name": "Jubilee",
        "timestamp": 1642453253
    },
    {
        "content": "<p>I saw that you reviewed it but haven't gotten a chance to look it over, I'll do that in the next couple days hopefully</p>",
        "id": 268315175,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642453503
    },
    {
        "content": "<p>Though I think I get the gist of your suggestions</p>",
        "id": 268315215,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642453537
    },
    {
        "content": "<p>Yeah, it's baaasically just \"the code looks fine but now we have to explain what people might break if they touch certain lines.\"</p>",
        "id": 268315501,
        "sender_full_name": "Jubilee",
        "timestamp": 1642453772
    },
    {
        "content": "<p>for future reference, here's the pr: <a href=\"https://github.com/rust-lang/rust/pull/92425\">https://github.com/rust-lang/rust/pull/92425</a></p>",
        "id": 268315522,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642453800
    },
    {
        "content": "<p>Also hi!</p>",
        "id": 268315646,
        "sender_full_name": "Jubilee",
        "timestamp": 1642453907
    },
    {
        "content": "<p>One thing I wanted to bring up is that I think I'm settled on \"we should just use traits normally\" i.e. we implement scalar-specific functions on normal looking traits, and the user will need to import them/use generic bounds to access those functions</p>",
        "id": 268316229,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454415
    },
    {
        "content": "<p>Ah okay.</p>",
        "id": 268316254,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454437
    },
    {
        "content": "<p>Referring both to the PartialOrd PR and others in the future (unless we think of something better)</p>",
        "id": 268316261,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454446
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 268316266,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454450
    },
    {
        "content": "<p>I was about to say, I wanted to unstick that PR one way or another.</p>",
        "id": 268316275,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454465
    },
    {
        "content": "<p>Then the path forward is either move to the prelude or do inherent traits, or just decide it's fine to import traits</p>",
        "id": 268316305,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454495
    },
    {
        "content": "<p>Yeah.<br>\nWe're talking about <a href=\"https://github.com/rust-lang/portable-simd/pull/206\">https://github.com/rust-lang/portable-simd/pull/206</a>, for posterity.</p>",
        "id": 268316356,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454528
    },
    {
        "content": "<p>But a simple <code>use std::simd::* as _;</code> is fine (can you do that with globs?)</p>",
        "id": 268316363,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454544
    },
    {
        "content": "<p>I... think so, and if not we can provide an \"in-module\" prelude which does so.</p>",
        "id": 268316374,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454562
    },
    {
        "content": "<p>Yep</p>",
        "id": 268316396,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454587
    },
    {
        "content": "<p>I figure doing it this way is the least magic with only a slight inconvenience</p>",
        "id": 268316467,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454645
    },
    {
        "content": "<p>Then I think we have consensus on that, and mostly the rest will be about \"wait, <strong>which</strong> traits?\"</p>",
        "id": 268316504,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454685
    },
    {
        "content": "<p>or, basically, Naming Things.</p>",
        "id": 268316515,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454702
    },
    {
        "content": "<p>which... we were already going to go up against one way or another.</p>",
        "id": 268316545,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454736
    },
    {
        "content": "<p>one trait<br>\ntwo trait<br>\nred trait<br>\nblue trait</p>",
        "id": 268316550,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454745
    },
    {
        "content": "<p>Yep. The most straightforward imo is 3 traits to start for each of i_, u_, f_ and ignore that they have some overlap, that can be solved another day</p>",
        "id": 268316555,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454750
    },
    {
        "content": "<p>Eek, formatting</p>",
        "id": 268316561,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454757
    },
    {
        "content": "<p>sounds good to me.</p>",
        "id": 268316564,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454760
    },
    {
        "content": "<p>You gotta do the \\.</p>",
        "id": 268316616,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454782
    },
    {
        "content": "<p>hehehe.</p>",
        "id": 268316625,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454794
    },
    {
        "content": "<p>Oh right</p>",
        "id": 268316634,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454803
    },
    {
        "content": "<p>well...if we want to be totally terrible, just name them <code>Trait1</code>, <code>Trait2</code>, <code>Trait3</code>, ...</p>",
        "id": 268316653,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642454834
    },
    {
        "content": "<p>lol</p>",
        "id": 268316708,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454882
    },
    {
        "content": "<p>Opening up a UUID generator...</p>",
        "id": 268316747,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642454910
    },
    {
        "content": "<p>It has to start with a letter though, do UUIDs do that?</p>",
        "id": 268316761,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454927
    },
    {
        "content": "<p>( incredibly serious programming conversation here. )</p>",
        "id": 268316797,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454970
    },
    {
        "content": "<p>Okay, so where does that leave <a href=\"https://github.com/rust-lang/portable-simd/issues/206\">portable-simd#206</a> itself at the moment?</p>",
        "id": 268316823,
        "sender_full_name": "Jubilee",
        "timestamp": 1642454999
    },
    {
        "content": "<p>just do <code>tr -dc a-z &lt; /dev/urandom | head -c 10</code></p>",
        "id": 268316902,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642455051
    },
    {
        "content": "<p>Well, just to keep things clean we can close it (though my new PR will be heavily inspired by it)</p>",
        "id": 268316906,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455058
    },
    {
        "content": "<p>Ah yes that makes sense.</p>",
        "id": 268316908,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455061
    },
    {
        "content": "<p>Sounds good to me then.</p>",
        "id": 268316941,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>  That technically unblocks <a href=\"https://github.com/rust-lang/portable-simd/issues/209\">portable-simd#209</a>, should we merge that and then you work from on top of that point?</p>",
        "id": 268317042,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455206
    },
    {
        "content": "<p>So while it does, I think we would still want to wait and base it on the result of the new PR</p>",
        "id": 268317141,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455309
    },
    {
        "content": "<p>OK!</p>",
        "id": 268317146,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455318
    },
    {
        "content": "<p>I had some issues with 209 though I don't think I explained them all since they'll likely be irrelevant after the trait changes</p>",
        "id": 268317155,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455334
    },
    {
        "content": "<p>Right.</p>",
        "id": 268317225,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455389
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/portable-simd/issues/225\">https://github.com/rust-lang/portable-simd/issues/225</a> has posed a fair question in that we want to like, kinda semi-formally define what we mean by \"portable\".</p>",
        "id": 268317335,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455486
    },
    {
        "content": "<p>Agreed</p>",
        "id": 268317351,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455503
    },
    {
        "content": "<p>Or at least, explain all our constraints in a as concise a manner as possible.</p>",
        "id": 268317357,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455509
    },
    {
        "content": "<p>We should probably formalize it somewhere, though I assume our answer is going to be something like \"can be implemented reasonably on nearly all architectures and offers good performance for that particular operation as far as that architecture goes\"</p>",
        "id": 268317385,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455579
    },
    {
        "content": "<p>I think the point you made nails it, that just because there's an instruction it's not necessarily fast anyway</p>",
        "id": 268317446,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455615
    },
    {
        "content": "<p>i'd pick something like \"provide all reasonable primitive operations that a simd programmer would want in a mostly architecture independent way\"</p>",
        "id": 268317463,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642455660
    },
    {
        "content": "<p>Yep. I think we should also specify that for some architectures there might be entirely different ways to organize algorithms that avoid particular operations, and that's considered an optimization, not a flaw of portability</p>",
        "id": 268317544,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455737
    },
    {
        "content": "<p>\"it will do exactly what you tell it, as best as it can\"</p>",
        "id": 268317552,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455751
    },
    {
        "content": "<p>So, a compiler.</p>",
        "id": 268317571,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1642455769
    },
    {
        "content": "<p>lmao</p>",
        "id": 268317575,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455774
    },
    {
        "content": "<p>Yeah, lol, pretty much.  It really is just hooks into the compiler and nothing more special than that</p>",
        "id": 268317686,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642455899
    },
    {
        "content": "<p>a compiler -- other than C cuz C will do exactly what you tell it unless you do something a little unusual (e.g. <code>(uint16_t)0xFFFF * (uint16_t)0xFFFF</code>), at which point C will delete your code or format your hard drive</p>",
        "id": 268317690,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642455903
    },
    {
        "content": "<p>lol why is multiplying uints UB?</p>",
        "id": 268317719,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1642455944
    },
    {
        "content": "<p><em>sob</em></p>",
        "id": 268317795,
        "sender_full_name": "Jubilee",
        "timestamp": 1642455992
    },
    {
        "content": "<p>cuz uint16 is integer promoted to <code>int</code> which overflows cuz 0xFFFF0001 is more than INT_MAX</p>",
        "id": 268317805,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642456007
    },
    {
        "content": "<p>classic.</p>",
        "id": 268317825,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1642456032
    },
    {
        "content": "<p>Hint: it's always promotion</p>",
        "id": 268317837,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642456053
    },
    {
        "content": "<p>Half the smarts in Julia are about being able to raise type promotion to a library implementation and not a standardification issue. </p>\n<p>At any rate, thanks for the explainer.</p>",
        "id": 268317902,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1642456108
    },
    {
        "content": "<p>C also decided that amazing syntax like <code>3[a]</code> is valid array indexing</p>",
        "id": 268317921,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642456135
    },
    {
        "content": "<p>Love that one, as well as the <code>while (x --&gt; 0)</code> syntax</p>",
        "id": 268317954,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642456183
    },
    {
        "content": "<p>I hope no one else had anything to say about rust or std::simd because I don't even see the rails anymore</p>",
        "id": 268318033,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642456229
    },
    {
        "content": "<p>we're off to visit C wonderland where there's a unicorn named UB that's always chasing you</p>",
        "id": 268318113,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642456301
    },
    {
        "content": "<p>approx how many beers has std::simd given out to hold at this point?</p>",
        "id": 268318133,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1642456319
    },
    {
        "content": "<p>Well~</p>",
        "id": 268318266,
        "sender_full_name": "Jubilee",
        "timestamp": 1642456407
    },
    {
        "content": "<p>lost count (though that was while the count was still 0...i forgot)</p>",
        "id": 268318276,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642456419
    },
    {
        "content": "<p>Alright, I think that's most of what we've got. <a href=\"https://github.com/rust-lang/portable-simd/issues/206\">portable-simd#206</a> to close and reopen as a new PR, <a href=\"https://github.com/rust-lang/portable-simd/issues/209\">portable-simd#209</a> to remain blocked alas, I closed up <a href=\"https://github.com/rust-lang/portable-simd/issues/198\">portable-simd#198</a>, <a href=\"https://github.com/rust-lang/rust/issues/92425\">rust-lang/rust#92425</a> to be addressed soonish and once that's addressed it looks fine to merge.</p>",
        "id": 268319124,
        "sender_full_name": "Jubilee",
        "timestamp": 1642457134
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/portable-simd/pull/203\">https://github.com/rust-lang/portable-simd/pull/203</a> remains waiting on review.<br>\nI think <a href=\"https://github.com/rust-lang/portable-simd/pull/182\">https://github.com/rust-lang/portable-simd/pull/182</a> got stuck on something?<br>\nHello Raz, do you need any help with <a href=\"https://github.com/rust-lang/portable-simd/pull/128\">https://github.com/rust-lang/portable-simd/pull/128</a> ?</p>",
        "id": 268319256,
        "sender_full_name": "Jubilee",
        "timestamp": 1642457270
    },
    {
        "content": "<p>Clippy is still broken, so 182 probably isn't going anywhere yet</p>",
        "id": 268319612,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642457593
    },
    {
        "content": "<p>hokay,<br>\nI opened an issue for \"define portability\": <a href=\"https://github.com/rust-lang/portable-simd/issues/227\">https://github.com/rust-lang/portable-simd/issues/227</a><br>\nand \"make it more trait-y\": <a href=\"https://github.com/rust-lang/portable-simd/issues/228\">https://github.com/rust-lang/portable-simd/issues/228</a><br>\nAnd that's all folks! Thank you for playing~</p>",
        "id": 268322040,
        "sender_full_name": "Jubilee",
        "timestamp": 1642459676
    }
]