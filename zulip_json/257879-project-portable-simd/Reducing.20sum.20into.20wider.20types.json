[
    {
        "content": "<p>First, very grateful and excited about the work you all are doing. I think it'll be a game changer for those of us in science when it stabilizes.</p>\n<p>Anyway, I just started playing with the nightly API and couldn't figure out how to reduce/horizontally add packed u8 into wider packed simd types OR into wider scalars. See an <a href=\"https://github.com/Daniel-Liu-c0deb0t/triple_accel/blob/e921c1450a78b4d75bce1e81964e9a84bc4ffefa/src/jewel.rs#L2496\">example hamming distance implementation</a> where the author (not me!) reduces the packed vector first to a wider packed vector and then  eventually to a scalar.</p>\n<p>Sorry if this is type of conversion is something silly and obvious, still starting to digest the awesome work.</p>",
        "id": 277545385,
        "sender_full_name": "Samuel Shepard",
        "timestamp": 1648925683
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 277545398,
        "sender_full_name": "Jubilee",
        "timestamp": 1648925701
    },
    {
        "content": "<p>I can only imagine casting to a bigger size and then summing...?</p>",
        "id": 277545414,
        "sender_full_name": "Jubilee",
        "timestamp": 1648925729
    },
    {
        "content": "<p>Is the cast just transmuting? If so, wouldn't it affect the correctness of the sums when you finally did the reduction to scalar? </p>\n<p>The trick in this code basically embeds the partial sums as u16 within 2 packed u64 by adding to a zero vector. The max sum of the packed u8 can't be larger than u16 so this is safe in terms of correctness.</p>\n<p>I will try the cast and see. Thanks.</p>",
        "id": 277546062,
        "sender_full_name": "Samuel Shepard",
        "timestamp": 1648926464
    },
    {
        "content": "<p>the way <code>_mm_sad_epu8</code> works is absolutely nuts and unlikely to become an operation in the <em>portable</em> SIMD API that this part of the standard library is aiming to be.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// approximate rust for `_mm_sad_epu8`</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)).</span><span class=\"n\">abs_unsigned</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)).</span><span class=\"n\">abs_unsigned</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">c1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, if you just have a look over in <code>core::arch</code> you'll find the exact function you're looking for.</p>",
        "id": 277546073,
        "sender_full_name": "Lokathor",
        "timestamp": 1648926474
    },
    {
        "content": "<blockquote>\n<p>Compute the absolute differences of packed unsigned 8-bit integers in a and b, then horizontally sum each consecutive 8 differences to produce two unsigned 16-bit integers, and pack these unsigned 16-bit integers in the low 16 bits of 64-bit elements in dst.</p>\n</blockquote>\n<p><span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 277546107,
        "sender_full_name": "scottmcm",
        "timestamp": 1648926483
    },
    {
        "content": "<p>what</p>",
        "id": 277546160,
        "sender_full_name": "Jubilee",
        "timestamp": 1648926533
    },
    {
        "content": "<p>yes exactly</p>",
        "id": 277546173,
        "sender_full_name": "Lokathor",
        "timestamp": 1648926546
    },
    {
        "content": "<p>dst?</p>",
        "id": 277546308,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648926704
    },
    {
        "content": "<p>I don't understand what you're asking about</p>",
        "id": 277546352,
        "sender_full_name": "Lokathor",
        "timestamp": 1648926728
    },
    {
        "content": "<p>Comm. abbrev. for destination</p>",
        "id": 277546354,
        "sender_full_name": "Jubilee",
        "timestamp": 1648926730
    },
    {
        "content": "<p>Ach so. Thanks Jubilee.</p>",
        "id": 277546358,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648926742
    },
    {
        "content": "<p>but which destination</p>",
        "id": 277546361,
        "sender_full_name": "Lokathor",
        "timestamp": 1648926750
    },
    {
        "content": "<p>oh oh! in what scott posted! sorry</p>",
        "id": 277546372,
        "sender_full_name": "Lokathor",
        "timestamp": 1648926768
    },
    {
        "content": "<p>yeah what scott posted used <code>monospace</code> for the var names, which didn't paste into markdown properly</p>",
        "id": 277546385,
        "sender_full_name": "Lokathor",
        "timestamp": 1648926810
    },
    {
        "content": "<p>Oh yeah, I was just copying from the intel guide</p>",
        "id": 277546392,
        "sender_full_name": "scottmcm",
        "timestamp": 1648926828
    },
    {
        "content": "<p>Thanks for the kind suggestion and code example. The real work is being done in packed u8, so however I can add it up into a scalar without extra cleverness is probably fine.</p>\n<p>Thanks again!</p>",
        "id": 277546442,
        "sender_full_name": "Samuel Shepard",
        "timestamp": 1648926859
    },
    {
        "content": "<p>More generally, is there support for <code>Simd&lt;u8, N&gt;</code> -&gt; <code>Simd&lt;u16, N&gt;</code> today?  I didn't see anything obvious in the docs.</p>",
        "id": 277546457,
        "sender_full_name": "scottmcm",
        "timestamp": 1648926899
    },
    {
        "content": "<p>Yes, <code>.cast::&lt;U&gt;</code></p>",
        "id": 277546480,
        "sender_full_name": "Jubilee",
        "timestamp": 1648926957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480147\">@Samuel Shepard</span> note that if you use the <code>core::arch</code> version it will likely be much faster than what I wrote, though you'll need a few unsafe blocks and probably a few transmutes</p>",
        "id": 277546524,
        "sender_full_name": "Lokathor",
        "timestamp": 1648926978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480147\">Samuel Shepard</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277546062\">said</a>:</p>\n<blockquote>\n<p>Is the cast just transmuting? If so, wouldn't it affect the correctness of the sums when you finally did the reduction to scalar? </p>\n<p>The trick in this code basically embeds the partial sums as u16 within 2 packed u64 by adding to a zero vector. The max sum of the packed u8 can't be larger than u16 so this is safe in terms of correctness.</p>\n<p>I will try the cast and see. Thanks.</p>\n</blockquote>\n<p>No, <code>fn cast</code> is not a transmutation, it is a conversion that follows the semantics of <code>as</code></p>",
        "id": 277546532,
        "sender_full_name": "Jubilee",
        "timestamp": 1648926995
    },
    {
        "content": "<p>For this particular op, i highly doubt llvm will \"see what's going on\" and optimize to this specific intrinsic on its own</p>",
        "id": 277546562,
        "sender_full_name": "Lokathor",
        "timestamp": 1648927047
    },
    {
        "content": "<p>Might not need transmutes, since there are all the <code>From</code>s like <a href=\"https://doc.rust-lang.org/nightly/core/simd/struct.Simd.html#impl-From%3CSimd%3Ci8%2C%2032_usize%3E%3E\">https://doc.rust-lang.org/nightly/core/simd/struct.Simd.html#impl-From%3CSimd%3Ci8%2C%2032_usize%3E%3E</a></p>",
        "id": 277546565,
        "sender_full_name": "scottmcm",
        "timestamp": 1648927062
    },
    {
        "content": "<p>agreed, I didn't quite process the initial question.</p>",
        "id": 277546606,
        "sender_full_name": "Jubilee",
        "timestamp": 1648927087
    },
    {
        "content": "<p>I'm checking my own knowledge of that algo:<br>\nYou load 4 chars of u8s at a time from <code>a</code> and <code>b</code>,  widen them into i64x4 SIMD vectors, comp them, add the comparison into an accumulation vector, iterate that over the entire array and then <code>reduce_sum</code> at end, right?</p>",
        "id": 277546648,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648927191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480147\">Samuel Shepard</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277545385\">said</a>:</p>\n<blockquote>\n<p>Anyway, I just started playing with the nightly API and couldn't figure out how to reduce/horizontally add packed u8 into wider packed simd types OR into wider scalars.</p>\n</blockquote>\n<p>This looks like it works, for example: <a href=\"https://rust.godbolt.org/z/Me3T3qWq5\">https://rust.godbolt.org/z/Me3T3qWq5</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wider_reduce</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is that the kind of thing you meant?  If not, maybe you can give a function signature?</p>",
        "id": 277546708,
        "sender_full_name": "scottmcm",
        "timestamp": 1648927227
    },
    {
        "content": "<p>I think today my brain will let me actually review code.</p>",
        "id": 277546722,
        "sender_full_name": "Jubilee",
        "timestamp": 1648927272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277546708\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"480147\">Samuel Shepard</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277545385\">said</a>:</p>\n<blockquote>\n<p>Anyway, I just started playing with the nightly API and couldn't figure out how to reduce/horizontally add packed u8 into wider packed simd types OR into wider scalars.</p>\n</blockquote>\n<p>This looks like it works, for example: <a href=\"https://rust.godbolt.org/z/Me3T3qWq5\">https://rust.godbolt.org/z/Me3T3qWq5</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wider_reduce</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is that the kind of thing you meant?  If not, maybe you can give a function signature?</p>\n</blockquote>\n<p>This exactly, yes! Provided the cast does what I'd guess it to given other comments.</p>",
        "id": 277546951,
        "sender_full_name": "Samuel Shepard",
        "timestamp": 1648927561
    },
    {
        "content": "<p>Hmmm - this isn’t a bad beginner example either. IDK how much vanilla Rust perf can leave on the table for a decent iter() version.</p>",
        "id": 277547026,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648927652
    },
    {
        "content": "<p>I am not sure either. I would guess that, while I doubt <code>_mm_sad_epu8</code> will correctly resolve in isel in LLVM, that at least \"reduce into a wider type\" should consistently optimize correctly using explicit vectorization, it just might choose the \"wrong\" sum between the... many exotic summation instructions x86 offers.</p>",
        "id": 277547112,
        "sender_full_name": "Jubilee",
        "timestamp": 1648927757
    },
    {
        "content": "<p>Ah, it uses punpcklbw for the <code>zext</code>.  Makes sense.</p>",
        "id": 277547231,
        "sender_full_name": "scottmcm",
        "timestamp": 1648927917
    },
    {
        "content": "<p>ahhh.</p>",
        "id": 277547286,
        "sender_full_name": "Jubilee",
        "timestamp": 1648927946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277547026\">said</a>:</p>\n<blockquote>\n<p>Hmmm - this isn’t a bad beginner example either. IDK how much vanilla Rust perf can leave on the table for a decent iter() version.</p>\n</blockquote>\n<p>Interesting, this is a case where the loop version works perfectly but the obvious iter one doesn't: <a href=\"https://rust.godbolt.org/z/nYjohGKcs\">https://rust.godbolt.org/z/nYjohGKcs</a></p>",
        "id": 277547295,
        "sender_full_name": "scottmcm",
        "timestamp": 1648927965
    },
    {
        "content": "<p>that's</p>",
        "id": 277547304,
        "sender_full_name": "Jubilee",
        "timestamp": 1648927991
    },
    {
        "content": "<p>lmao</p>",
        "id": 277547309,
        "sender_full_name": "Jubilee",
        "timestamp": 1648927997
    },
    {
        "content": "<p>Oh, it's because <code>array::IntoIter</code> is apparently bad.  This one works greatL</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wider_reduce_iter</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">().</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kt\">u16</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)).</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277547315,
        "sender_full_name": "scottmcm",
        "timestamp": 1648928028
    },
    {
        "content": "<p>ohhh</p>",
        "id": 277547384,
        "sender_full_name": "Jubilee",
        "timestamp": 1648928131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277547231\">said</a>:</p>\n<blockquote>\n<p>punpcklbw</p>\n</blockquote>\n<p>looks like someone punched their keyboard</p>",
        "id": 277547493,
        "sender_full_name": "Cyborus",
        "timestamp": 1648928277
    },
    {
        "content": "<p>Hypothesis: it's using <code>.as_ref()</code> in the <code>fold</code> implementation.  And that usually pessimizes things.</p>\n<p>I'll go make a codegen test and experiment <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 277547608,
        "sender_full_name": "scottmcm",
        "timestamp": 1648928384
    },
    {
        "content": "<p>(This is why I added <a href=\"https://doc.rust-lang.org/nightly/src/core/iter/adapters/by_ref_sized.rs.html\">https://doc.rust-lang.org/nightly/src/core/iter/adapters/by_ref_sized.rs.html</a> to core)</p>",
        "id": 277547776,
        "sender_full_name": "scottmcm",
        "timestamp": 1648928547
    },
    {
        "content": "<p>Confirmed, it's the <code>as_ref</code> ruining everything, as usual.</p>",
        "id": 277548660,
        "sender_full_name": "scottmcm",
        "timestamp": 1648929630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277548660\">said</a>:</p>\n<blockquote>\n<p>Confirmed, it's the <code>as_ref</code> ruining everything, as usual.</p>\n</blockquote>\n<p>How did you confirm this?</p>",
        "id": 277548707,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648929707
    },
    {
        "content": "<p>(I'm guessing you added it to the godbolt snippet and then saw that the assembly gets horrible, but I'm a bit new to this.)</p>",
        "id": 277548749,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648929738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277548707\">said</a>:</p>\n<blockquote>\n<p>How did you confirm this?</p>\n</blockquote>\n<p>Oh, by changing <code>core</code>:<br>\n<a href=\"/user_uploads/4715/VVJr09IRicI-jHF_aJkJu8zs/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/VVJr09IRicI-jHF_aJkJu8zs/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/VVJr09IRicI-jHF_aJkJu8zs/image.png\"></a></div><p>And writing a codegen test:<br>\n<a href=\"/user_uploads/4715/OEzGOGQ9ARuuYnJ8ZNZycmZk/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/OEzGOGQ9ARuuYnJ8ZNZycmZk/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/OEzGOGQ9ARuuYnJ8ZNZycmZk/image.png\"></a></div>",
        "id": 277549020,
        "sender_full_name": "scottmcm",
        "timestamp": 1648930103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> oh gnarly - are you inlining <code>llvm-lit</code> tests into a Rust test?</p>",
        "id": 277549139,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648930236
    },
    {
        "content": "<p>Also I don't think I've ever changed anything in <code>core</code> - I'm guessing that requires a Rust recompile.</p>",
        "id": 277549153,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648930259
    },
    {
        "content": "<p>I've got the scalar version of <code>hamming0</code> in <a href=\"https://rust.godbolt.org/z/rrv5Kq9zd\">rust godbolt</a> if anyone wants to take a stab at the SIMD version.</p>",
        "id": 277549215,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648930330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277549139\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> oh gnarly - are you inlining <code>llvm-lit</code> tests into a Rust test?</p>\n</blockquote>\n<p>Absolutely -- that's what the <code>src/test/codegen</code> folder is there for <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>See <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/codegen/autovectorize-f32x4.rs\">https://github.com/rust-lang/rust/blob/master/src/test/codegen/autovectorize-f32x4.rs</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277549153\">said</a>:</p>\n<blockquote>\n<p>Also I don't think I've ever changed anything in <code>core</code> - I'm guessing that requires a Rust recompile.</p>\n</blockquote>\n<p>Yeah, I've got a rustc dev environment set up.</p>",
        "id": 277549217,
        "sender_full_name": "scottmcm",
        "timestamp": 1648930341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277549217\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277549139\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> oh gnarly - are you inlining <code>llvm-lit</code> tests into a Rust test?</p>\n</blockquote>\n<p>Absolutely -- that's what the <code>src/test/codegen</code> folder is there for <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>See <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/codegen/autovectorize-f32x4.rs\">https://github.com/rust-lang/rust/blob/master/src/test/codegen/autovectorize-f32x4.rs</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277549153\">said</a>:</p>\n<blockquote>\n<p>Also I don't think I've ever changed anything in <code>core</code> - I'm guessing that requires a Rust recompile.</p>\n</blockquote>\n<p>Yeah, I've got a rustc dev environment set up.</p>\n</blockquote>\n<p>Whoah, that rustc dev environemnt sounds gnarly. How long does a 1 line recompile take?</p>",
        "id": 277549243,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648930389
    },
    {
        "content": "<p>Depends greatly what you're changing.  If I just change a codegen test, it knows not to rebuild more than that so it's a few seconds.  But yeah, 2 years back a full build was well over two hours for me -- I've since upgraded to a 16T32C machine that makes things far less painful.</p>",
        "id": 277549321,
        "sender_full_name": "scottmcm",
        "timestamp": 1648930499
    },
    {
        "content": "<p>There's a bunch of special \"profiles\" you can use now, though, so you can avoid building llvm if you don't care, avoid building rustc if you're just working on rustdoc, etc.</p>",
        "id": 277549356,
        "sender_full_name": "scottmcm",
        "timestamp": 1648930554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277549321\">said</a>:</p>\n<blockquote>\n<p>Depends greatly what you're changing.  If I just change a codegen test, it knows not to rebuild more than that so it's a few seconds.  But yeah, 2 years back a full build was well over two hours for me -- I've since upgraded to a 16T32C machine that makes things far less painful.</p>\n</blockquote>\n<p>To quote <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> :<br>\n<a href=\"/user_uploads/4715/fKfhzfKkrmrYDROlxHLYDgix/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/fKfhzfKkrmrYDROlxHLYDgix/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/fKfhzfKkrmrYDROlxHLYDgix/image.png\"></a></div>",
        "id": 277549433,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648930648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277549243\">said</a>:</p>\n<blockquote>\n<p>Whoah, that rustc dev environemnt sounds gnarly. How long does a 1 line recompile take?</p>\n</blockquote>\n<p>Well, I added a new <code>DoubleEndedIterator</code> implementation in core, and there's what it did up through running the codegen test:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>&gt; python x.py -j 16 test --keep-stage 0 src\\test\\codegen --test-args wide-sum\nUpdating only changed submodules\n  Submodules updated in 0.03 seconds\nBuilding rustbuild\n    Finished dev [unoptimized] target(s) in 0.21s\nWarning: Using a potentially old libstd. This may not behave well.\nCopying stage0 std from stage0 (x86_64-pc-windows-msvc -&gt; x86_64-pc-windows-msvc / x86_64-pc-windows-msvc)\nWarning: Using a potentially old librustc. This may not behave well.\nWarning: Use `--keep-stage-std` if you want to rebuild the compiler when it changes\nCopying stage0 rustc from stage0 (x86_64-pc-windows-msvc -&gt; x86_64-pc-windows-msvc / x86_64-pc-windows-msvc)\nAssembling stage1 compiler (x86_64-pc-windows-msvc)\nBuilding stage0 tool lld-wrapper (x86_64-pc-windows-msvc)\n    Finished release [optimized] target(s) in 0.33s\nBuilding stage0 tool lld-wrapper (x86_64-pc-windows-msvc)\n    Finished release [optimized] target(s) in 0.33s\nBuilding stage1 std artifacts (x86_64-pc-windows-msvc -&gt; x86_64-pc-windows-msvc)\n   Compiling core v0.0.0 (C:\\src\\rust\\library\\core)\n   Compiling rustc-std-workspace-core v1.99.0 (C:\\src\\rust\\library\\rustc-std-workspace-core)\n   Compiling compiler_builtins v0.1.70\n   Compiling libc v0.2.116\n   Compiling alloc v0.0.0 (C:\\src\\rust\\library\\alloc)\n   Compiling cfg-if v0.1.10\n   Compiling memchr v2.4.1\n   Compiling adler v0.2.3\n   Compiling rustc-demangle v0.1.21\n   Compiling unwind v0.0.0 (C:\\src\\rust\\library\\unwind)\n   Compiling rustc-std-workspace-alloc v1.99.0 (C:\\src\\rust\\library\\rustc-std-workspace-alloc)\n   Compiling panic_unwind v0.0.0 (C:\\src\\rust\\library\\panic_unwind)\n   Compiling panic_abort v0.0.0 (C:\\src\\rust\\library\\panic_abort)\n   Compiling gimli v0.25.0\n   Compiling object v0.26.2\n   Compiling hashbrown v0.12.0\n   Compiling miniz_oxide v0.4.0\n   Compiling std_detect v0.1.5 (C:\\src\\rust\\library\\stdarch\\crates\\std_detect)\n   Compiling addr2line v0.16.0\n   Compiling std v0.0.0 (C:\\src\\rust\\library\\std)\n   Compiling rustc-std-workspace-std v1.99.0 (C:\\src\\rust\\library\\rustc-std-workspace-std)\n   Compiling proc_macro v0.0.0 (C:\\src\\rust\\library\\proc_macro)\n   Compiling unicode-width v0.1.8\n   Compiling getopts v0.2.21\n   Compiling test v0.0.0 (C:\\src\\rust\\library\\test)\n    Finished release [optimized] target(s) in 18.87s\nCopying stage1 std from stage1 (x86_64-pc-windows-msvc -&gt; x86_64-pc-windows-msvc / x86_64-pc-windows-msvc)\nBuilding stage0 tool compiletest (x86_64-pc-windows-msvc)\n    Finished release [optimized] target(s) in 0.52s\nCheck compiletest suite=codegen mode=codegen (x86_64-pc-windows-msvc -&gt; x86_64-pc-windows-msvc)\n\nrunning 1 test\n.\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 328 filtered out; finished in 0.10s\n\n        finished in 0.218 seconds\nBuild completed successfully in 0:00:21\n</code></pre></div>",
        "id": 277549784,
        "sender_full_name": "scottmcm",
        "timestamp": 1648931066
    },
    {
        "content": "<p>Neat!</p>",
        "id": 277550037,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648931423
    },
    {
        "content": "<p>PR up to fix the <code>.into_iter()</code> version of this: <a href=\"https://github.com/rust-lang/rust/issues/95602\">#95602</a></p>",
        "id": 277552807,
        "sender_full_name": "scottmcm",
        "timestamp": 1648935075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277546073\">said</a>:</p>\n<blockquote>\n<p>the way <code>_mm_sad_epu8</code> works is absolutely nuts and unlikely to become an operation in the <em>portable</em> SIMD API that this part of the standard library is aiming to be.</p>\n</blockquote>\n<p>We only really need <code>abs_diff</code> and then to ensure a horizontal sum for it does what's expected</p>",
        "id": 277659460,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649017824
    },
    {
        "content": "<p>And <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html#method.abs_diff\">https://doc.rust-lang.org/nightly/std/primitive.i16.html#method.abs_diff</a> is now stable on scalars, so it would make sense to offer on <code>Simd</code> too.</p>",
        "id": 277659537,
        "sender_full_name": "scottmcm",
        "timestamp": 1649017951
    },
    {
        "content": "<p>abs_diff+sum is the backbone of many video codecs, so it seems <em>very</em> useful to ensure <code>some_u8s.abs_diff(other_u8s).horizontal_sum::&lt;u32&gt;()</code> or something is possible (and does what's needed). The details of the x86 intrinsics are not important to preserve, though.</p>\n<p>We even jump through hoops to ensure it gets vectorized for summing a <code>[u8; 16]</code>: <a href=\"https://doc.rust-lang.org/nightly/src/core/num/uint_macros.rs.html#1650\">https://doc.rust-lang.org/nightly/src/core/num/uint_macros.rs.html#1650</a> (this was mostly needed because of how fragile LLVM's optimization for this is, though -- naively it fails unless the C-specific int promotion rules are used)</p>",
        "id": 277659632,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649018160
    },
    {
        "content": "<p>Do we have a widening sum?</p>",
        "id": 277659676,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649018188
    },
    {
        "content": "<p>Widening sum would be performed with cast and sum</p>",
        "id": 277659684,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649018209
    },
    {
        "content": "<p><code>abs_diff</code> should be pretty easy to implement, too.  For unsigned I think it's just <code>a.lanes_lt(b).select(b - a, a - b)</code>?</p>",
        "id": 277659686,
        "sender_full_name": "scottmcm",
        "timestamp": 1649018211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277659684\">said</a>:</p>\n<blockquote>\n<p>Widening sum would be performed with cast and sum</p>\n</blockquote>\n<p>This seems good (assuming it gets compiled right, which I'd expect).</p>",
        "id": 277659695,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649018237
    },
    {
        "content": "<p>(if it's requested enough a function could be added)</p>",
        "id": 277659696,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649018243
    },
    {
        "content": "<p>Yeah I'd hope it would work, there's no other way to represent it in LLVM afaik</p>",
        "id": 277659702,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649018262
    },
    {
        "content": "<p>so yeah, abs_diff + cast + sum would hopefully use psadbw. It might be worth checking that it actually does too, since (IMO) this is a pretty important operation.</p>",
        "id": 277659907,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649018471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Reducing.20sum.20into.20wider.20types/near/277659695\">said</a>:</p>\n<blockquote>\n<p>(assuming it gets compiled right, which I'd expect).</p>\n</blockquote>\n<p>Well, LLVM even turns the scalar version of the wider sum into <code>zext</code>+<code>reduce.sum</code>, so I'd expect that's the right way to represent it, at least.</p>\n<p>See the codegen test I'm adding in <a href=\"https://github.com/rust-lang/rust/pull/95602/files#diff-8cead13d3f6954e31e2d320dd04677b5031db80ffc0de93578c6b3cc9fd0ead4R23\">https://github.com/rust-lang/rust/pull/95602/files#diff-8cead13d3f6954e31e2d320dd04677b5031db80ffc0de93578c6b3cc9fd0ead4R23</a></p>\n<p>(Which also fixes a problem in <code>array::IntoIter</code> that kept it from autovectorizing too.)</p>",
        "id": 277659966,
        "sender_full_name": "scottmcm",
        "timestamp": 1649018523
    },
    {
        "content": "<p>and while emulating the x86 intrisinc would not be portable, certainly x86 and neon both have a way to do this efficiently, and i think altivec does too (but its been a while)</p>",
        "id": 277659973,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649018535
    },
    {
        "content": "<p>(it's used for motion estimation in video codecs)</p>",
        "id": 277659990,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649018583
    },
    {
        "content": "<p>Hmm, neither of these do <code>psadbw</code> &lt;<a href=\"https://rust.godbolt.org/z/P31endW8r\">https://rust.godbolt.org/z/P31endW8r</a>&gt;</p>",
        "id": 277660321,
        "sender_full_name": "scottmcm",
        "timestamp": 1649019094
    },
    {
        "content": "<p>No luck trying</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">abs_diff_then_wider_sum_3</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u16</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)).</span><span class=\"n\">cast</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>either.</p>",
        "id": 277660534,
        "sender_full_name": "scottmcm",
        "timestamp": 1649019320
    },
    {
        "content": "<p>I think it may be possible to use the underlying intrinsic to sum directly into a wider type.</p>",
        "id": 277660697,
        "sender_full_name": "Jubilee",
        "timestamp": 1649019485
    },
    {
        "content": "<p>Searching the LLVM issues hints that maybe psadbw is used only for optimizing special conditions of sums and not actually for sums of absolute differences</p>",
        "id": 277660725,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649019522
    },
    {
        "content": "<p>weird.</p>",
        "id": 277660769,
        "sender_full_name": "Jubilee",
        "timestamp": 1649019601
    },
    {
        "content": "<p>The LLVM instruction requires the output to be the same type</p>",
        "id": 277660871,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649019645
    },
    {
        "content": "<p>Oh it has to be the same type as the vector type? damn.</p>",
        "id": 277660874,
        "sender_full_name": "Jubilee",
        "timestamp": 1649019658
    },
    {
        "content": "<p>Yeah then cast is as far as we can go.</p>",
        "id": 277660880,
        "sender_full_name": "Jubilee",
        "timestamp": 1649019666
    },
    {
        "content": "<p>I think the cast is pretty explicit to the optimizer anyway</p>",
        "id": 277660887,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649019684
    },
    {
        "content": "<p>Then I would rather put \"cycles I have free on engaging with LLVM nonsense\" towards the dynamic swizzle and vectorized pointer ops, tbh.</p>",
        "id": 277660986,
        "sender_full_name": "Jubilee",
        "timestamp": 1649019836
    },
    {
        "content": "<p>Agreed</p>",
        "id": 277661289,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649020211
    },
    {
        "content": "<p>Hm, yes, it's hard to seriously consider this more important than those. I been naively assuming that it wouldn't be that bad, since it sometimes autovectorizes scalar code to use it.</p>",
        "id": 277697519,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1649060801
    }
]