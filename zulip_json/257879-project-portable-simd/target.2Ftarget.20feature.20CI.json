[
    {
        "content": "<p>The <code>-C target_feature</code> usage in the .travis.yml seems... confused? For example: I think these two are the same: <a href=\"https://github.com/rust-lang/stdsimd/blob/0b39351ba5b42becb7bc9b53adb8e95f9490cbdf/.travis.yml#L74-L85\">https://github.com/rust-lang/stdsimd/blob/0b39351ba5b42becb7bc9b53adb8e95f9490cbdf/.travis.yml#L74-L85</a>. E.g. one of them probably should be <code>TARGET_FEATURE=-neon</code> (this would require other changes to the script to handle the <code>-</code> but not the point).</p>\n<p>The target/feature coverage misses a lot of cases I'd be worried about, although I'm kind of impressed that travis has ppc/aarc64 runners. That said, for weirder stuff we'll want to use <code>cross</code> I think?</p>\n<p>If there's interest, it would be pretty easy for me to set up some github actions to test more targets with <code>cross</code>. This would be in addition to travis, and I would avoid doing it for anything that is already covered. So, would a patch for this be accepted?</p>\n<p>(I'm offering to do it for GHA instead of offering to extend the travis config with it... mostly just b/c it would take me way less time, since I've used it way more.... But, also Travis's website sometimes just takes me to a blank page that tells me that it failed to parse some JSON... and refuses to let me do anything until I've cleared its cookies)</p>",
        "id": 212502777,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602030468
    },
    {
        "content": "<p>other issues:</p>\n<ul>\n<li>these three are also equivalent: <a href=\"https://github.com/rust-lang/stdsimd/blob/0b39351ba5b42becb7bc9b53adb8e95f9490cbdf/.travis.yml#L10-L28\">https://github.com/rust-lang/stdsimd/blob/0b39351ba5b42becb7bc9b53adb8e95f9490cbdf/.travis.yml#L10-L28</a>.</li>\n<li>SSSE3 should probably be in the mix too. note that x86_64-apple-darwin (a tier 1 target) is <code>+sse,+sse2,+sse3,+ssse3</code>, and it's where we'll find the useful stuff like integer abs.</li>\n</ul>\n<p>related: if you turn on, say <code>target_feature=+sse3</code>, does that automatically turn on the \"lower\" features? (it seems to, but this is slightly surprising)</p>",
        "id": 212503250,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602030950
    },
    {
        "content": "<p>Yes, additional CI setups are deeply desired.</p>",
        "id": 212504015,
        "sender_full_name": "Lokathor",
        "timestamp": 1602031904
    },
    {
        "content": "<p>Also, i think the story with \"related\" features is that some features imply others within rust in a documented way, and some features imply others within llvm as well in a way that rust doesn't quite document (but which isn't hard to figure out).</p>",
        "id": 212504084,
        "sender_full_name": "Lokathor",
        "timestamp": 1602031996
    },
    {
        "content": "<p>yeah, i'm basically just looking at how <code>rustc --print=cfg --target=i586-unknown-linux-gnu -Ctarget-feature=&lt;thing here&gt;</code> changes stuff lol. i think someone (<span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> ?) mentioned the existence of a avx512 chip that... somehow didn't have some of the lower sse sets? this truly horrifies me if so</p>",
        "id": 212504163,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602032095
    },
    {
        "content": "<p>Yes, this is the Xeon Phi (\"Knight's\") series of chips: <a href=\"https://en.wikipedia.org/wiki/Xeon_Phi\">https://en.wikipedia.org/wiki/Xeon_Phi</a><br>\nthey're only really used in supercomputing so  we can mostly shrug them off. I wouldn't be excited if we were busted for them but \"Well, Rust doesn't work on some very niche non-commodity hardware\" is not exactly the most damning thing to say. :P</p>",
        "id": 212506608,
        "sender_full_name": "Jubilee",
        "timestamp": 1602034864
    },
    {
        "content": "<p>Still, they're a good example of how featuresets are... truly arbitrary, rather than building in a necessarily layered way, which is the real thing. We can't just dispatch hierarchically.<br>\nI believe <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> first found the Xeon Phi stuff.</p>",
        "id": 212506723,
        "sender_full_name": "Jubilee",
        "timestamp": 1602035037
    },
    {
        "content": "<p>thanks, that's extremely cursed. i very much hope that after this intel forgets that they can just set random bits inside the cpuid result</p>",
        "id": 212506928,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602035273
    },
    {
        "content": "<p>... honestly i wonder if \"buy old xeon phi on ebay\" is the cheapest way to run avx512 code</p>",
        "id": 212507043,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602035387
    },
    {
        "content": "<p>Actually, intel makes a NUC with a very slow i5 that for some reason has AVX512, that's probably the cheapest way</p>",
        "id": 212507137,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602035477
    },
    {
        "content": "<blockquote>\n<p>Knights Landing contains up to 72 Airmont (Atom) cores with four threads per core,[75][76] using LGA 3647 socket[77] supporting up to 384 GB of \"far\" DDR4 2133 RAM and 8â€“16 GB of stacked \"near\" 3D MCDRAM, a version of the Hybrid Memory Cube. Each core has two 512-bit vector units and supports AVX-512 SIMD instructions, specifically the Intel AVX-512 Foundational Instructions (AVX-512F) with Intel AVX-512 Conflict Detection Instructions (AVX-512CD), Intel AVX-512 Exponential and Reciprocal Instructions (AVX-512ER), and Intel AVX-512 Prefetch Instructions (AVX-512PF). Support for IMCI has been removed in favor of AVX-512.[78]</p>\n</blockquote>",
        "id": 212507156,
        "sender_full_name": "Jubilee",
        "timestamp": 1602035500
    },
    {
        "content": "<p>make sure it's Knight's Landing or later.</p>",
        "id": 212507228,
        "sender_full_name": "Jubilee",
        "timestamp": 1602035547
    },
    {
        "content": "<p>Well in 2 weeks of portable simd I've seen the highest density of cursed content in a while.</p>",
        "id": 212508832,
        "sender_full_name": "Lokathor",
        "timestamp": 1602037398
    },
    {
        "content": "<p>If we're looking for PowerPC CI, you can get it for free for open source projects here: <a href=\"https://osuosl.org/services/powerdev/\">https://osuosl.org/services/powerdev/</a></p>",
        "id": 212510538,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602039636
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/30\">https://github.com/rust-lang/stdsimd/pull/30</a></p>\n<p>as always with ci changes, this was built on a foundation of blood, sweat, and terrible commit messages</p>\n<p><a href=\"/user_uploads/4715/yWiD3hPjvsCNclCXgqTEl99R/Screen-Shot-2020-10-07-at-7.03.29-AM.png\">Screen-Shot-2020-10-07-at-7.03.29-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/yWiD3hPjvsCNclCXgqTEl99R/Screen-Shot-2020-10-07-at-7.03.29-AM.png\" title=\"Screen-Shot-2020-10-07-at-7.03.29-AM.png\"><img src=\"/user_uploads/4715/yWiD3hPjvsCNclCXgqTEl99R/Screen-Shot-2020-10-07-at-7.03.29-AM.png\"></a></div>",
        "id": 212583171,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602087554
    },
    {
        "content": "<p>mood</p>",
        "id": 212596739,
        "sender_full_name": "Jubilee",
        "timestamp": 1602093946
    },
    {
        "content": "<p>So that landed. I'm probably going to try to move some of this to a docker+qemu setup in a bit (more or less the way <code>stdarch</code> does it, although almost certainly with a different set of targets) since we'd like to be able to run stuff in qemu with specific target features enabled or disabled (among other things), and on targets cross doesn't have docker images for (cross lets you use custom docker images but it's kind of limited still).</p>",
        "id": 212735491,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602183911
    },
    {
        "content": "<p>I want to run on the actual metal for as many targets as possible, but I agree that docker + qemu stuff is great for everything else.</p>",
        "id": 212737858,
        "sender_full_name": "Jubilee",
        "timestamp": 1602185135
    },
    {
        "content": "<p>and even when we have access to the metal, dockerized qemu can help with lots, like dev envs and uh, verifying the dev envs are accurately virtualizing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212737963,
        "sender_full_name": "Jubilee",
        "timestamp": 1602185173
    },
    {
        "content": "<blockquote>\n<p>I want to run on the actual metal for as many targets as possible</p>\n</blockquote>\n<p>yeah definitely, i'm not getting rid of running on the actual targets everywhere possible.</p>",
        "id": 212740898,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602186695
    },
    {
        "content": "<p>i'm not super familiar with docker (familiar enough that setting this up sounds feasible, but not substantially more familiar lol) so i'll take your word for the other points, but another benefit of qemu over metal in some cases is that if you execute an instruction that requires a target feature you shouldn't have access to, it will always fail instead of depending on what the test runner happens to have.</p>",
        "id": 212741258,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602186880
    },
    {
        "content": "<p>but also qemu can have bugs so theres absolutely no substitute for running on hardware IMO</p>",
        "id": 212741354,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602186947
    },
    {
        "content": "<p>yeah, the packed_simd qemu targets just<br>\nfail randomly tbqh</p>",
        "id": 212741504,
        "sender_full_name": "Jubilee",
        "timestamp": 1602187025
    },
    {
        "content": "<p>the ones that fail hardest and most often are the ARM virtualizations (from x86_64 runners?).</p>",
        "id": 212742473,
        "sender_full_name": "Jubilee",
        "timestamp": 1602187516
    },
    {
        "content": "<p>but maybe I just notice it more in those cases because it has a lot of those.</p>",
        "id": 212742579,
        "sender_full_name": "Jubilee",
        "timestamp": 1602187564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/target.2Ftarget.20feature.20CI/near/212741354\">said</a>:</p>\n<blockquote>\n<p>but also qemu can have bugs so theres absolutely no substitute for running on hardware IMO</p>\n</blockquote>\n<p>That's for sure, I've encountered a pile of them myself when trying to verify Libre-SOC's processor matches POWER9.</p>",
        "id": 212783601,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1602219289
    }
]