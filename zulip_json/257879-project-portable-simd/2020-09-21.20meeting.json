[
    {
        "content": "<p>Honk honk, meeting time.<br>\nThe draft announcement is here:<br>\n<a href=\"https://hackmd.io/_2MnKA4FTEaiac7RR1MG4A?both\">https://hackmd.io/_2MnKA4FTEaiac7RR1MG4A?both</a></p>",
        "id": 210805775,
        "sender_full_name": "Jubilee",
        "timestamp": 1600725624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@everyone</span>, get in here. :^)</p>",
        "id": 210805845,
        "sender_full_name": "Jubilee",
        "timestamp": 1600725676
    },
    {
        "content": "<p>oh gosh zulip has at everyone too XD</p>",
        "id": 210805864,
        "sender_full_name": "Lokathor",
        "timestamp": 1600725693
    },
    {
        "content": "<p>SIMD&lt;[Grim Patron;4]&gt; <a href=\"https://www.youtube.com/watch?v=Oncuhkk-R3o\">https://www.youtube.com/watch?v=Oncuhkk-R3o</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Oncuhkk-R3o\" href=\"https://www.youtube.com/watch?v=Oncuhkk-R3o\"><img src=\"https://i.ytimg.com/vi/Oncuhkk-R3o/default.jpg\"></a></div>",
        "id": 210806018,
        "sender_full_name": "Jubilee",
        "timestamp": 1600725772
    },
    {
        "content": "<p>So I think the first thing to figure out is going to be... Where do we put this? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 210806028,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600725780
    },
    {
        "content": "<p>ANYWAYS... we can post this on to the rust-lang blog, right?</p>",
        "id": 210806049,
        "sender_full_name": "Jubilee",
        "timestamp": 1600725794
    },
    {
        "content": "<p>error-handling managed it so...<br>\nI assume the first two sections are not going to be part of the actual announcement post, given that they're organizational trivia.</p>",
        "id": 210806163,
        "sender_full_name": "Jubilee",
        "timestamp": 1600725862
    },
    {
        "content": "<p>let's post it on the blog after we decide and have a repo available for people to go to and subscribe to</p>",
        "id": 210806170,
        "sender_full_name": "Lokathor",
        "timestamp": 1600725872
    },
    {
        "content": "<p>Following the trend of <code>corearch</code> do we want a <code>rust-lang/coresimd</code> repository?</p>",
        "id": 210806233,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600725913
    },
    {
        "content": "<p>Yes, welcome mat first. Post might not go up until tomorrow or later this week as a result, but that's fine.</p>",
        "id": 210806237,
        "sender_full_name": "Jubilee",
        "timestamp": 1600725916
    },
    {
        "content": "<p>coresimd sounds fine, best to avoid over thinking it. Since this is essentially an internal detail of the standard library, and also a nightly one for now, we can move it later if we really need to</p>",
        "id": 210806288,
        "sender_full_name": "Lokathor",
        "timestamp": 1600725955
    },
    {
        "content": "<p>If you want to be consistent with <code>stdarch</code> I suggest <code>stdsimd</code>.</p>",
        "id": 210806361,
        "sender_full_name": "Amanieu",
        "timestamp": 1600725979
    },
    {
        "content": "<p>Oh I thought it was <code>corearch</code>... I must be misremembering :)</p>",
        "id": 210806388,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600725999
    },
    {
        "content": "<p>oh right, stdarch is the repo/crate name</p>",
        "id": 210806402,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726013
    },
    {
        "content": "<p>I would prefer to eventually see the code committed to rust-lang/rust since the stdlib is too, but it's fine if it's in another repo for now as part of buildout.</p>",
        "id": 210806404,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726018
    },
    {
        "content": "<p>Fun fact: <code>stdarch</code> used to be called <code>stdsimd</code>.</p>",
        "id": 210806407,
        "sender_full_name": "Amanieu",
        "timestamp": 1600726021
    },
    {
        "content": "<p>I am indeed misremembering</p>",
        "id": 210806411,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726023
    },
    {
        "content": "<p>yeah stdsimd is showing on <a href=\"http://docs.rs\">docs.rs</a> already</p>",
        "id": 210806436,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726044
    },
    {
        "content": "<p>std::simd2, electric boogaloo.</p>",
        "id": 210806445,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726056
    },
    {
        "content": "<p>the crate within the repo is <code>core_arch</code></p>",
        "id": 210806448,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600726056
    },
    {
        "content": "<p>I guess we'll be clobbering those docs <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 210806464,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726070
    },
    {
        "content": "<p><code>docs.rs/stdsimd</code> seems to hold the <code>is_x86_feature_detected</code>, or used to hold maybe.</p>",
        "id": 210806520,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726097
    },
    {
        "content": "<p>maybe the crate should be <code>core_simd</code> to be consistent as well?</p>",
        "id": 210806549,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600726121
    },
    {
        "content": "<p>You don't need a crate name, it's a submodule of libcore.</p>",
        "id": 210806573,
        "sender_full_name": "Amanieu",
        "timestamp": 1600726136
    },
    {
        "content": "<p>Figuring out our repo structure is good though</p>",
        "id": 210806593,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726158
    },
    {
        "content": "<p>I think that just putting everything in rust-lang/rust is OK.</p>",
        "id": 210806606,
        "sender_full_name": "Amanieu",
        "timestamp": 1600726174
    },
    {
        "content": "<p>yeah, the nomenklatura here isn't <em>too</em> important, And Yet...<br>\nare there any features that actually are expected to need std? alloc?</p>",
        "id": 210806607,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726175
    },
    {
        "content": "<p>Maybe prototype in the project group repo.</p>",
        "id": 210806617,
        "sender_full_name": "Amanieu",
        "timestamp": 1600726187
    },
    {
        "content": "<p>so to help clarify the <code>stdarch</code> repo contains a crate called <code>core_arch</code>, as well as other crates mostly named <code>std_thing</code>, <a href=\"https://github.com/rust-lang/stdarch/tree/master/crates\">https://github.com/rust-lang/stdarch/tree/master/crates</a></p>",
        "id": 210806704,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726243
    },
    {
        "content": "<p>why is <code>stdarch</code> separate then? historical?</p>",
        "id": 210806731,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600726264
    },
    {
        "content": "<p>Yes.</p>",
        "id": 210806738,
        "sender_full_name": "Amanieu",
        "timestamp": 1600726273
    },
    {
        "content": "<p>so from a <strong>repo browsing</strong> level, stdsimd seems like the name to go with, and internal crate names can just be whatever.</p>",
        "id": 210806755,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726290
    },
    {
        "content": "<p>Also stdarch has a ton of CI infrastructure to verify the intrinsics.</p>",
        "id": 210806759,
        "sender_full_name": "Amanieu",
        "timestamp": 1600726293
    },
    {
        "content": "<p>I think the experience of working on satellite repos has been more positive than in <code>rust-lang/rust</code> directly, so either way an external repo for a start seems good</p>",
        "id": 210806784,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726312
    },
    {
        "content": "<p>i'll give that a strong second</p>",
        "id": 210806837,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726327
    },
    {
        "content": "<p>Would we need to submodule it in _before_ doing a big source drop?</p>",
        "id": 210806862,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726357
    },
    {
        "content": "<p>Lokathor mentioned that recently, yes. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nMy only concern is that they tend to get less attention, which is why I think it should eventually reach std.</p>",
        "id": 210806871,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726365
    },
    {
        "content": "<p>I agree too.  I seem to spend a lot of time in <code>rust-lang/rust</code> rebasing in my casual experience</p>",
        "id": 210806872,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600726365
    },
    {
        "content": "<p>If not, we could work in <code>project-portable-simd</code>, otherwise maybe <code>stdsimd</code> would still be worth setting up</p>",
        "id": 210806885,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726381
    },
    {
        "content": "<p>my experience so far with simd is that users of simd are, uh, <em>passionate</em> about it, i don't think we'll lack for attention just by being in a side repo</p>",
        "id": 210806924,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726420
    },
    {
        "content": "<p>(I'm ok with either)</p>",
        "id": 210806929,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726424
    },
    {
        "content": "<p>We can always use giant signaling lights too.</p>",
        "id": 210807008,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726456
    },
    {
        "content": "<p>If you have a ton of custom CI like packed_simd does then it might be worth using a separate repo. Otherwise I think development would be easier if it were directly in rust-lang/rust since you don't need a separate PR to bump the submodule.</p>",
        "id": 210807017,
        "sender_full_name": "Amanieu",
        "timestamp": 1600726468
    },
    {
        "content": "<p>If version syncing is all that is the problem, then I will literally build a tool to make that happen automagically.</p>",
        "id": 210807074,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726508
    },
    {
        "content": "<p>Ah yes. <code>packed_simd</code> does indeed have a lot of CI infra</p>",
        "id": 210807095,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726519
    },
    {
        "content": "<p>I'm totally willing to accept the trouble of an occasional extra PR if it means staying away from <code>rust-lang/rust</code></p>",
        "id": 210807103,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726522
    },
    {
        "content": "<p>has everyone looked at the announcement post's current form?</p>",
        "id": 210807181,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726566
    },
    {
        "content": "<p>i have not, i'll check now.</p>",
        "id": 210807203,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726587
    },
    {
        "content": "<p>Ok. I think it's <code>rust-lang/stdsimd</code> then? With draft RFCs for stabilizing pieces living in <code>project-portable-simd</code>?</p>",
        "id": 210807367,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726648
    },
    {
        "content": "<p>Since we have special CI needs I guess we'll continue to live outside of <code>rust-lang/rust</code>?</p>",
        "id": 210807619,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726808
    },
    {
        "content": "<p>there i put in a note to help clarify that a simd vector isn't like a Vec</p>",
        "id": 210807629,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726815
    },
    {
        "content": "<p>hardware intrinsics are just functions that expand into asm, no?</p>",
        "id": 210807664,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726843
    },
    {
        "content": "<p>uh, \"mostly yes\"</p>",
        "id": 210807696,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726872
    },
    {
        "content": "<p>some of them expand to nothing at all and it's just a compile-time change, like some of the transmutes</p>",
        "id": 210807719,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726893
    },
    {
        "content": "<p>Is calling them \"intrinsic instructions\" too wishy-washy?</p>",
        "id": 210807734,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600726907
    },
    {
        "content": "<p>Yes.</p>",
        "id": 210807749,
        "sender_full_name": "Jubilee",
        "timestamp": 1600726922
    },
    {
        "content": "<p>i'd just say \"intrinsics\" since people already kinda know that's the word for \"sorta magical\", and people can ask later if they want more detail</p>",
        "id": 210807818,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726950
    },
    {
        "content": "<p>The key point of an intrinsic vs other functions is sorta that the compiler is expected to 'know more' about an intrinsic, and possibly optimize based on that</p>",
        "id": 210807839,
        "sender_full_name": "Lokathor",
        "timestamp": 1600726977
    },
    {
        "content": "<p>I think we should be careful about using the term and probably use instructions more often than not</p>",
        "id": 210807983,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600727116
    },
    {
        "content": "<p>we could also say \"operations\" which lets us sidestep if you literally get a particular asm instruction or not</p>",
        "id": 210807984,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727117
    },
    {
        "content": "<p>or that</p>",
        "id": 210807992,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600727121
    },
    {
        "content": "<p>Is the scope of this project strictly static-sized SIMD or also vector-length agnostic vectorization and the likes of OpenMP <code>omp simd reduction</code>?</p>",
        "id": 210808068,
        "sender_full_name": "Jed",
        "timestamp": 1600727168
    },
    {
        "content": "<p>For example, <code>core::simd</code> only converts to intrinsics because we happen to be using LLVM, but as far as the user is concerned <code>core::simd</code> itself is a set of intrinsics</p>",
        "id": 210808070,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600727169
    },
    {
        "content": "<p>that's a very good point Caleb, and i think a very good way to think of it</p>",
        "id": 210808096,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727197
    },
    {
        "content": "<p>We haven't discussed it but I'm thinking very likely only static-sized.  arm sve comes to mind as well and I'm not even sure C/C++ compilers have figured that out yet</p>",
        "id": 210808147,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600727242
    },
    {
        "content": "<p>Jed, do you mean selecting a simd type at runtime? I don't think that we'll do that directly, though i can imagine ways to help people out with building abstractions for that</p>",
        "id": 210808153,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727248
    },
    {
        "content": "<p>(I'm not familiar at all with OpenMP)</p>",
        "id": 210808159,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600727253
    },
    {
        "content": "<p>ARM SVE virtualizes the register length, but I'm just thinking of helping to write code that does not bake in the vector length.</p>",
        "id": 210808269,
        "sender_full_name": "Jed",
        "timestamp": 1600727317
    },
    {
        "content": "<p>The \"easy\" version is to make it simple for people to write lane-count agnostic generic code, and then they can expand the code to x4 or x8 or whatever lengths, and then the user can do a check at runtime and pick a code path</p>",
        "id": 210808289,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727335
    },
    {
        "content": "<p><a href=\"https://developer.arm.com/documentation/100891/0612/coding-considerations/using-sve-intrinsics-directly-in-your-c-code\">ARM SVE intrinsics</a></p>",
        "id": 210808292,
        "sender_full_name": "Amanieu",
        "timestamp": 1600727336
    },
    {
        "content": "<p>and making lane count agnostic code is actually pretty easy if you're willing to just go crazy with traits</p>",
        "id": 210808327,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727370
    },
    {
        "content": "<p>But this is unlikely to be supported anytime soon in Rust since it involves \"magic\" types that have an unknown size at compile-time.</p>",
        "id": 210808345,
        "sender_full_name": "Amanieu",
        "timestamp": 1600727391
    },
    {
        "content": "<p>As long as it isn't \"intrinsic instructions\" it's fine with me.</p>",
        "id": 210808425,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727426
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">double</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"cp\">#pragma omp simd reduction(+:sum)</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n</code></pre></div>\n\n\n<p>enables use of multiple accumulators with a final horizontal reduction at the end. This is kinda clumsy to write by hand. Note that associativity changes the result, but the pragma is saying that's okay.</p>",
        "id": 210808439,
        "sender_full_name": "Jed",
        "timestamp": 1600727437
    },
    {
        "content": "<p>On the topic of repository, I can reach out and get that set up for us. I'm also happy to work on the CI-side for us</p>",
        "id": 210808507,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600727510
    },
    {
        "content": "<p>I think you could get the same effect with a <code>FastFloat</code> type that allows for lower precision (<code>-ffast-math</code> style). Auto-vectorization would then take care of the rest.</p>",
        "id": 210808565,
        "sender_full_name": "Amanieu",
        "timestamp": 1600727540
    },
    {
        "content": "<p>We've got a few distinct threads in here, so I'll come back through later and split them up into a summary doc in HackMD</p>",
        "id": 210808594,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600727571
    },
    {
        "content": "<p>yes.</p>",
        "id": 210808605,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727582
    },
    {
        "content": "<p>Also, using say a 256-bit type when only 128-bit types are available should lower to just twice as many 128-bit ops, so you should be fine picking the widest type that's practical for you (based on likely element count, alignment, whatever).</p>",
        "id": 210808637,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"322310\">Jed</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-09-21.20meeting/near/210808439\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">double</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"cp\">#pragma omp simd reduction(+:sum)</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n</code></pre></div>\n\n\n<p>enables use of multiple accumulators with a final horizontal reduction at the end. This is kinda clumsy to write by hand. Note that associativity changes the result, but the pragma is saying that's okay.</p>\n</blockquote>\n<p>I think the goal of <code>core::simd</code> will be such that you can write this explicitly with a similar amount of code, not that you can write it as scalar code and have it convert automatically.</p>",
        "id": 210808719,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600727655
    },
    {
        "content": "<p>SIMD is a reasonably complex thing to talk and think about already so I am going to be paying close attention to terminology used in our forward-facing releases, but I am happy to defer on specifics. I am mostly going to be paying attention to eliminating vagueness.</p>",
        "id": 210808727,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727663
    },
    {
        "content": "<p>We'll absolutely want an intro document in the repo, not a full mdbook but probably a long single md file, to get newcomers on the same page</p>",
        "id": 210808794,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727726
    },
    {
        "content": "<p>could be the readme, but i like a short and sweet readme that points out the high level details since the readme is rendered in the web view on github</p>",
        "id": 210808830,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727762
    },
    {
        "content": "<p>re: \"intrinsics\" vs. \"instructions\", \"instructions\" suggests it expands into a given asm, which is kinda Eh, I would prefer \"functions\" if \"intrinsics\" is considered Not OK, because vendors actually do refer to intrinsics as functions. intrinsic functions.</p>",
        "id": 210808901,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727791
    },
    {
        "content": "<p>We always have an opportunity in Rust to make topics really accessible so I'd love to do that here too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 210808932,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600727820
    },
    {
        "content": "<p>e.g. <a href=\"https://www.keil.com/pack/doc/CMSIS/Core/html/group__intrinsic__SIMD__gr.html\">https://www.keil.com/pack/doc/CMSIS/Core/html/group__intrinsic__SIMD__gr.html</a></p>",
        "id": 210808934,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727822
    },
    {
        "content": "<p><a href=\"https://developer.arm.com/documentation/dui0497/a/CIHCAEJD\">https://developer.arm.com/documentation/dui0497/a/CIHCAEJD</a></p>",
        "id": 210808957,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727847
    },
    {
        "content": "<p>I think \"intrinsics\" is fine -- many people interested in this will have had some contact with Intel or Power intrinsics for C.</p>",
        "id": 210808985,
        "sender_full_name": "Jed",
        "timestamp": 1600727875
    },
    {
        "content": "<p>Intel flip-flops on this and actually does use \"intrinsic instructions\" in a few places.</p>",
        "id": 210809004,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727882
    },
    {
        "content": "<p>I think we can call this meeting topic \"finished\" now and split discussion into more discoverable topics :)</p>",
        "id": 210809067,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600727910
    },
    {
        "content": "<p>yeah, \"intrinsic functions\" or even \"simd operations\" is best. I'd like to point out that <em>many</em> useful things we'll naturally offer will not be single instructions. Eg: simd sin / cos / tan is a whole big thing that's like 15 asm instructions long, but you absolutely want that in the API despite it not being \"a single instruction\"</p>",
        "id": 210809073,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727915
    },
    {
        "content": "<p>yeah new topics.</p>",
        "id": 210809109,
        "sender_full_name": "Lokathor",
        "timestamp": 1600727952
    },
    {
        "content": "<p>so, let me summarize an agenda first:</p>",
        "id": 210809131,
        "sender_full_name": "Jubilee",
        "timestamp": 1600727975
    },
    {
        "content": "<p>1) Finish working over the announcement, it's not going out today. try to post it to rust-lang?<br>\n2) Build out a repo for std::simd, overwhelming preference is to have it outside rust-lang/rust for now.<br>\n3) Figure out our own project group repo and get some \"Hello, SIMD!\" intro on it.</p>",
        "id": 210809279,
        "sender_full_name": "Jubilee",
        "timestamp": 1600728097
    },
    {
        "content": "<p>I just created <a href=\"https://hackmd.io/T-cUNypRRUKGVBGlzr5fNA\">https://hackmd.io/T-cUNypRRUKGVBGlzr5fNA</a> for us to sketch out \"Hello, SIMD!\"</p>",
        "id": 210809294,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600728118
    },
    {
        "content": "<p>oh and<br>\n4) finish bikeshedding on \"what do we call intrinsics?\"<br>\n5) address the packed_simd maintenance question<br>\n6) same time next week? Or in 2 weeks?</p>",
        "id": 210809357,
        "sender_full_name": "Jubilee",
        "timestamp": 1600728139
    },
    {
        "content": "<p>I'll work on getting <code>rust-lang/stdsimd</code> set up for us</p>",
        "id": 210809359,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600728139
    },
    {
        "content": "<p>next week is probably best. there's a lot of TODOs there so we'll have some of them progressed or done.</p>",
        "id": 210809398,
        "sender_full_name": "Lokathor",
        "timestamp": 1600728175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I'm ok to catch up again synchronously in a week if we accumulate new bikes to shed <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 210809408,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600728182
    },
    {
        "content": "<p>Once the announcement is ready we can post it on the _Insiders_ blog</p>",
        "id": 210809437,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600728206
    },
    {
        "content": "<p>Thanks everyone! It's time for a coffee and a walk here <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 210809532,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600728264
    },
    {
        "content": "<p>In a week, then~ <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 210810018,
        "sender_full_name": "Jubilee",
        "timestamp": 1600728620
    },
    {
        "content": "<p>Captured some more summary here: <a href=\"https://hackmd.io/a2vhyS0ZTtq1e7JkH2kabA\">https://hackmd.io/a2vhyS0ZTtq1e7JkH2kabA</a></p>",
        "id": 210814897,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1600732659
    },
    {
        "content": "<p><time datetime=\"2020-09-28T22:00:00Z\">2020-09-28T15:00:00-07:00</time></p>",
        "id": 210822032,
        "sender_full_name": "Jubilee",
        "timestamp": 1600740537
    },
    {
        "content": "<p>cool, Zulip supports RFC3339 timestamps in the <code>&lt;time:{timestamp}&gt;</code> tag.</p>",
        "id": 210822124,
        "sender_full_name": "Jubilee",
        "timestamp": 1600740617
    },
    {
        "content": "<p>I guess i've added the lang team google calendar but not the libs team one, is there a link for that?</p>",
        "id": 210822127,
        "sender_full_name": "Lokathor",
        "timestamp": 1600740625
    }
]