[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> good call on <code>retpoline</code>.  Turns out it's not supported on macOS which probably has something to do with my being unaware of it.  I ran my benchmarks and sure enough with it enabled multiversioned function calls had huge overhead, something like 20 cycles on my machine.  Switching to branching for all functions dropped that back down to something like &lt;1 cycle</p>",
        "id": 227064153,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613794231
    },
    {
        "content": "<p>Sounds about right.</p>",
        "id": 227064573,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613794662
    },
    {
        "content": "<p>Are there any other mitigation techniques I should know about? The LLVM docs seemed to indicate that retpolines are the most common one.</p>",
        "id": 227065126,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613795260
    },
    {
        "content": "<p>Security is unfortunately... Very far from the field I work in usually</p>",
        "id": 227065217,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613795372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> what did Infra ever say regarding shipping more than one feature level of major targets?</p>",
        "id": 227065289,
        "sender_full_name": "Lokathor",
        "timestamp": 1613795448
    },
    {
        "content": "<p>Oh yeah, I also meant to say that shipping multiple stds might help with HashMap since the docs indicated it's SIMD accelerated</p>",
        "id": 227065495,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613795649
    },
    {
        "content": "<p>naisu~</p>",
        "id": 227065553,
        "sender_full_name": "Lokathor",
        "timestamp": 1613795740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> nagisa said they don't have any real objections to shipping more targets, it probably is mostly going to come down if they have the CI time. they might prefer to ship what is effectively a separate target rather than an additional component to a target.</p>",
        "id": 227065883,
        "sender_full_name": "Jubilee",
        "timestamp": 1613796084
    },
    {
        "content": "<p>oh i completely agree on that part</p>",
        "id": 227065949,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796144
    },
    {
        "content": "<p>nagisa was unsure why -Zbuild-std wouldn't address our needs tho'.</p>",
        "id": 227065958,
        "sender_full_name": "Jubilee",
        "timestamp": 1613796160
    },
    {
        "content": "<p>targets are all fake anyway, if it builds a binary that runs the target name doesn't matter</p>",
        "id": 227065963,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796164
    },
    {
        "content": "<p>heh.</p>",
        "id": 227065965,
        "sender_full_name": "Jubilee",
        "timestamp": 1613796168
    },
    {
        "content": "<p>well now that i'm on a real keyboard and not a phone keyboard i'll give you the long answer as to why -Zbuild-std can't just solve all of our problems.</p>",
        "id": 227065994,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796202
    },
    {
        "content": "<p>actually it basically can.</p>",
        "id": 227065996,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796208
    },
    {
        "content": "<p>less joking: the only problem that -Zbuild-std <em>can't fix</em> is Caleb's goal of having runtime feature detection and opt-in higher features</p>",
        "id": 227066072,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796266
    },
    {
        "content": "<p>because with -Zbuild-std you've turned on the feature for the full build</p>",
        "id": 227066079,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796279
    },
    {
        "content": "<p>Josh mentioned that he expects it to not be stable.<br>\nMmm~</p>",
        "id": 227066080,
        "sender_full_name": "Jubilee",
        "timestamp": 1613796280
    },
    {
        "content": "<p>Right.</p>",
        "id": 227066082,
        "sender_full_name": "Jubilee",
        "timestamp": 1613796291
    },
    {
        "content": "<p>which would let us do proper rounding on sse4+ and would even let us do cfg to have higher quality sse2 rounding</p>",
        "id": 227066113,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796336
    },
    {
        "content": "<p>and we'd never have to hit libm, and wouldn't need a vector math lib</p>",
        "id": 227066124,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796355
    },
    {
        "content": "<p>but then we lose runtime opt-in <em>unless</em></p>",
        "id": 227066180,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796383
    },
    {
        "content": "<p>big unless</p>",
        "id": 227066181,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796385
    },
    {
        "content": "<p>we're willing to just write the function twice</p>",
        "id": 227066187,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796399
    },
    {
        "content": "<p>can't we use target_feature(enable)?</p>",
        "id": 227066219,
        "sender_full_name": "Jubilee",
        "timestamp": 1613796472
    },
    {
        "content": "<p>we could, but the problem is that the best code to use with sse2 is literally different from the best code to use with sse4 (because of llvm's bad codegen)</p>",
        "id": 227066292,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796557
    },
    {
        "content": "<p>so instead of using a simplistic multiversion macro that takes a function and splits it into two identical functions, one of which has target_feature_enable, we'd need to write two functions, eg: round_sse2 and round_sse4, and then the runtime feature selection is a check and branch to one or the other functions that way</p>",
        "id": 227066362,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796622
    },
    {
        "content": "<p>of course, this makes things immensely difficult for downstreamers</p>",
        "id": 227066375,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796654
    },
    {
        "content": "<p>it's no longer as simple as saying <code>foo.round()</code> and trusting the compiler</p>",
        "id": 227066389,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796672
    },
    {
        "content": "<p>mm.</p>",
        "id": 227066405,
        "sender_full_name": "Jubilee",
        "timestamp": 1613796704
    },
    {
        "content": "<p>because runtime opt-in has to be picked at careful levels of granularity when it's used, otherwise you're doing too many checks</p>",
        "id": 227066406,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796705
    },
    {
        "content": "<p>of course, separate from any of that, llvm can have better codegen, which would reduce some burden, but llvm having better codegen is almost entirely orthogonal to any other concern.</p>",
        "id": 227066480,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796766
    },
    {
        "content": "<p>Even SSE3 probably has better codegen options because of pabs</p>",
        "id": 227066571,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613796864
    },
    {
        "content": "<p>Actually I think that's integer only</p>",
        "id": 227066600,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613796909
    },
    {
        "content": "<p>oh friend i think you mean ssse3, not just sse3</p>",
        "id": 227066665,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796974
    },
    {
        "content": "<p>because naming is hard and intel is Good at it.</p>",
        "id": 227066667,
        "sender_full_name": "Lokathor",
        "timestamp": 1613796979
    },
    {
        "content": "<p>Whoops yeah</p>",
        "id": 227066678,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613796996
    },
    {
        "content": "<p>SSE3 is addsub, for complex multiplication and division</p>",
        "id": 227066688,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613797012
    },
    {
        "content": "<p>And something else</p>",
        "id": 227066704,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613797031
    },
    {
        "content": "<p><a href=\"https://github.com/Lokathor/safe_arch/blob/main/src/x86_x64/sse3.rs\">https://github.com/Lokathor/safe_arch/blob/main/src/x86_x64/sse3.rs</a></p>",
        "id": 227066708,
        "sender_full_name": "Lokathor",
        "timestamp": 1613797038
    },
    {
        "content": "<p>Ah hadd right</p>",
        "id": 227066722,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613797074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I don't know the canonical set of mitigations these days. Retpolines are the big one, but there are also a few other speculation-prevention ones i think?</p>",
        "id": 227074695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613807267
    },
    {
        "content": "<p>I would check what Linux distributions are building C code with and see how to enable that in LLVM.</p>",
        "id": 227074756,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613807300
    },
    {
        "content": "<p>hadd/dp and such just turn into a sequence of sse2-level instructions in both AMD and intel last i heard, e.g. the reason to use them is just for slightly smaller instruction encoding. Unless things have changed a lot, they're fast exactly nowhere. for fast stuff you really want to avoid horizontal, and generally need to transpose then work in batches.</p>\n<p>(well... there are a few decently fast horizontal things. _mm_madd_epi16, _mm_maddubs_epi16, _mm_sad_epu8, and others that use the same instructions (pmaddwd, psadbw, pmaddubsw, psadbw, ...) are all fast but only exist for integers, and are just different enough from what you expect to be hard to use. they're very good if you can make use of them though, which is possible for some software rendering and image processing operations, as IIUC these were designed for use in video codecs)</p>\n<p>Edit: in retrospect, this was pretty off topic... I guess this is \"chit chat\" tho. It would be nice if we could support those more esoteric ops but, probably not going to happen.</p>",
        "id": 227076914,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613809744
    },
    {
        "content": "<p>yeah some of these threads would benefit from being on-topic and others benefit from being deliberately not. :^) just \"eh whatever\".</p>",
        "id": 227111924,
        "sender_full_name": "Jubilee",
        "timestamp": 1613848951
    },
    {
        "content": "<p>Yeah, I specified this is chit chat for that reason lol</p>",
        "id": 227112054,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613849144
    },
    {
        "content": "<p>Tangentially related to stdsimd</p>",
        "id": 227112057,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613849159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> Would it be a good idea to offer horizontal integer adds and not floating point horizontal adds, then?</p>",
        "id": 227112359,
        "sender_full_name": "Jubilee",
        "timestamp": 1613849468
    },
    {
        "content": "<p>There are still \"good\" ways of doing them even if they aren't a single instruction, so I think they may be worthwhile</p>",
        "id": 227112384,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613849521
    },
    {
        "content": "<p>I know there are some tricks for horizontal adds in neon as well</p>",
        "id": 227112452,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613849569
    },
    {
        "content": "<p>yeah we should still offer the float versions. also, those ops arent really horizontal adds. they're int dot products or sums of horizontal differences.</p>",
        "id": 227112478,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613849591
    },
    {
        "content": "<p>(and even int dot product is kinda wrong, but it can be used to build one)</p>",
        "id": 227112511,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613849614
    },
    {
        "content": "<p>thats why i described them as \"just different enough from what you expect to be hard to use\"</p>",
        "id": 227112543,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613849643
    },
    {
        "content": "<p>and there are reasons to use the float horizontal ops, they use less instruction bandwidth than the equivalent series of sse2 instructions. just, its not like thye're actually faster than them</p>",
        "id": 227112605,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613849696
    },
    {
        "content": "<p>In our situation I expect to use <code>llvm.vector.reduce.add</code> etc so we shouldn't have to worry about the implementation details</p>",
        "id": 227112633,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613849725
    },
    {
        "content": "<p>reducing instruction bandwidth is still useful</p>",
        "id": 227112641,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613849744
    },
    {
        "content": "<p>just not in most situations</p>",
        "id": 227112650,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613849759
    },
    {
        "content": "<p>right. i'm skeptical that llvm.vector.reduce.add will ever lower into psadbw for example, even if it is used to compute absolute differences. that said, itd be worth knowing if other isas have similar ops. if not its probably less of a big deal. if they do, IMO it might be worht supporting it even if it is a bit of a weird operation (i'd actually assume they do in some form, due to the use in motion estimation required for various video codecs)</p>",
        "id": 227112836,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613849904
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>sum:                                    # @sum\n        pshufd  xmm1, xmm0, 238                 # xmm1 = xmm0[2,3,2,3]\n        paddd   xmm1, xmm0\n        pshufd  xmm0, xmm1, 85                  # xmm0 = xmm1[1,1,1,1]\n        paddd   xmm0, xmm1\n        movd    eax, xmm0\n        ret\n</code></pre></div>",
        "id": 227113057,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613850164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>sum:                                    # @sum\n        pshufd  xmm1, xmm0, 238                 # xmm1 = xmm0[2,3,2,3]\n        paddw   xmm1, xmm0\n        pshufd  xmm0, xmm1, 85                  # xmm0 = xmm1[1,1,1,1]\n        paddw   xmm0, xmm1\n        movdqa  xmm1, xmm0\n        psrld   xmm1, 16\n        paddw   xmm1, xmm0\n        movd    eax, xmm1\n        ret\n</code></pre></div>",
        "id": 227113406,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613850548
    },
    {
        "content": "<p>ahhh.</p>",
        "id": 227114336,
        "sender_full_name": "Jubilee",
        "timestamp": 1613851423
    },
    {
        "content": "<p>tbh I'd like it if we could just provide like into_iter and then sum(), really.</p>",
        "id": 227117217,
        "sender_full_name": "Jubilee",
        "timestamp": 1613854388
    },
    {
        "content": "<p>Interesting idea, I think that would work</p>",
        "id": 227117251,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613854442
    },
    {
        "content": "<p>Implement Sum and Product</p>",
        "id": 227117310,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613854483
    },
    {
        "content": "<p>seems unlikely to compile well, tbh. but if it does that seems fine. Even if it's not an efficient operation or a common one in well-written (fsvo well-written) SIMD code, it's still a pretty common one for naively written simd code.</p>",
        "id": 227117349,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613854533
    },
    {
        "content": "<p>Why wouldn't it compile well?  We would still use the intrinsic</p>",
        "id": 227117408,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613854577
    },
    {
        "content": "<p>hmm, via specialization?</p>",
        "id": 227117411,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613854598
    },
    {
        "content": "<p>Why specialization?  Sum and Product are traits that can be implemented on our iterator</p>",
        "id": 227117421,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613854626
    },
    {
        "content": "<p>yeah you can provide the function an implementation even if it's normally implied.</p>",
        "id": 227117423,
        "sender_full_name": "Jubilee",
        "timestamp": 1613854627
    },
    {
        "content": "<p>hm, maybe it's been too long since I looked at the signatures of sum/product.</p>",
        "id": 227117439,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613854651
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Sum.html\">https://doc.rust-lang.org/std/iter/trait.Sum.html</a></p>",
        "id": 227117810,
        "sender_full_name": "Jubilee",
        "timestamp": 1613855099
    },
    {
        "content": "<p>actually now that I think about it, it would be somewhat problematic because it introduces a branch</p>",
        "id": 227117920,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613855213
    },
    {
        "content": "<p>because you can call sum after partially iterating</p>",
        "id": 227117927,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613855227
    },
    {
        "content": "<p>right, although in theory that should be optimized out...</p>",
        "id": 227117943,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613855250
    },
    {
        "content": "<p>yeah, I think that would probably optimize out</p>",
        "id": 227117951,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613855265
    },
    {
        "content": "<p>are you saying that you'd into_iter and then sum an individual simd value? not like a whole list of values being summed?</p>",
        "id": 227123838,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860609
    },
    {
        "content": "<p>like <code>my_f32x8.into_iter().sum()</code></p>",
        "id": 227123886,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860643
    },
    {
        "content": "<p>that sounds like <em>a</em> way to handle it, but... i sure wouldn't expect that as the way to handle it if i was a person who knew about horizontal sums.</p>",
        "id": 227123965,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860697
    },
    {
        "content": "<p>like i think the rustdoc there, and thus the discoverability, might be very bad if we're not careful</p>",
        "id": 227123977,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860716
    },
    {
        "content": "<p>rustdoc can be poor in many ways, but one of them is surely traits</p>",
        "id": 227123993,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860752
    },
    {
        "content": "<p>I know it's an unusual API from the \"expecting a horizontal fn\" / \"SIMD programmer\" perspective but it's a very Rusty API.<br>\nAnd I kinda think we should provide IntoIter anyways because it means you can <code>for</code> loop a SIMD vector.</p>",
        "id": 227126611,
        "sender_full_name": "Jubilee",
        "timestamp": 1613863396
    },
    {
        "content": "<p>Fwiw you can already do it with to_array or to_slice</p>",
        "id": 227126681,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613863467
    },
    {
        "content": "<p>I strongly feel that people should convert to arrays (which we make very easy) if they want do stuff like that</p>",
        "id": 227126682,
        "sender_full_name": "Lokathor",
        "timestamp": 1613863469
    },
    {
        "content": "<p>Yeah</p>",
        "id": 227126687,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613863474
    },
    {
        "content": "<p>i always think of a simd value as being a \"nearly opaque\" type that i can get some elements back from later if i ask right, but i shouldn't be checking up on the interior before then.</p>",
        "id": 227126715,
        "sender_full_name": "Lokathor",
        "timestamp": 1613863511
    }
]