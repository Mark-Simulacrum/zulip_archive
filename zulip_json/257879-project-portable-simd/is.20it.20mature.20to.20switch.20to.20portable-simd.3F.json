[
    {
        "content": "<p>Hey, we are users of packed_simd2, and someone is raising the idea of migrating to portable-simd. <a href=\"https://github.com/jorgecarleitao/arrow2/issues/580\">https://github.com/jorgecarleitao/arrow2/issues/580</a> Is this something that you would recommend, or is it too soon? Some people use our lib in production. We are fine with backward incompatible changes, just not so much with unsoundness ^_^</p>",
        "id": 261018409,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1636563159
    },
    {
        "content": "<p>Hi!  I don't know if I would consider it \"mature\", but we are pretty confident about the soundness.  Since you are already using packed_simd in production I think it would probably be safe to use, as long as you are okay with occasional backwards-incompatible changes as we improve the API.</p>",
        "id": 261019126,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636563418
    },
    {
        "content": "<p>It's worth noting that it will be available on nightly very soon as <code>std::simd</code> and we will be looking for people to try it out!</p>",
        "id": 261019427,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636563528
    },
    {
        "content": "<p>Thanks for your pointers.</p>\n<p>packed_simd2's API does not leak to our public API, so we do not care about breaking changes as they only affect our development.</p>\n<p>We have a set of benchmarks and can identify regressions over some of the vertical and horizontal operations (including using .select), so that will probably be how we gauge. Do you consider performance degradations over packed_simd2 as regressions (that justify an issue on github?)</p>",
        "id": 261020510,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1636563910
    },
    {
        "content": "<p>feel free to open issues, idk if we'd consider them regressions or not tho, probably depends on the severity and difficulty of fixing</p>",
        "id": 261020979,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636564108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399416\">Jorge Leitao</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/is.20it.20mature.20to.20switch.20to.20portable-simd.3F/near/261020510\">said</a>:</p>\n<blockquote>\n<p>Thanks for your pointers.</p>\n<p>packed_simd2's API does not leak to our public API, so we do not care about breaking changes as they only affect our development.</p>\n<p>We have a set of benchmarks and can identify regressions over some of the vertical and horizontal operations (including using .select), so that will probably be how we gauge. Do you consider performance degradations over packed_simd2 as regressions (that justify an issue on github?)</p>\n</blockquote>\n<p>Strictly speaking: No.<br>\nWe do want to be aware of them, however.<br>\n<code>portable-simd</code> is designed around a different view of constraints than <code>packed_simd</code> was.</p>",
        "id": 261037266,
        "sender_full_name": "Jubilee",
        "timestamp": 1636570498
    },
    {
        "content": "<p>Namely: We no longer view \"link directly against vendor intrinsics for each platform\" as a good option. We might do so as an absolute last resort.</p>",
        "id": 261037379,
        "sender_full_name": "Jubilee",
        "timestamp": 1636570553
    },
    {
        "content": "<p>I think to put it more simply, it's not a binary yes/no.  They are a regression to the extent that slow simd is useless.  If there is an instruction sequence that LLVM should be generating and it isn't, it is an issue, but we aren't necessarily considering it an issue with std::simd</p>",
        "id": 261037780,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636570732
    },
    {
        "content": "<p>We're not taking on the responsibility of all codegen being perfectly optimized, but we are passing the issues down the line to LLVM when we find them</p>",
        "id": 261037887,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636570787
    },
    {
        "content": "<p>Yeah. In certain niche cases, <code>packed_simd</code> likely has a better performance, at the cost of hardcoding each special architectural case into the library in a way that made it harder to maintain and use. We would still want to solve those problems, but ideally upstream in LLVM or something.</p>",
        "id": 261038159,
        "sender_full_name": "Jubilee",
        "timestamp": 1636570874
    },
    {
        "content": "<p>there are also situations (comparisons in particular) where the codegen will be worse in the name of portable handling for e.g. nan/neg 0/etc. eventually something like \"fast math\" support might bridge the gap there.</p>",
        "id": 261038265,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636570918
    },
    {
        "content": "<p>nice. <a href=\"https://github.com/jorgecarleitao/arrow2/issues/580#issuecomment-965728382\">https://github.com/jorgecarleitao/arrow2/issues/580#issuecomment-965728382</a></p>\n<blockquote>\n<p>core_simd_sum 2^20 f32     time:   [174.18 us 174.37 us 174.59 us]<br>\npacked_simd_sum 2^20 f32   time:   [183.91 us 184.10 us 184.33 us]<br>\nnonsimd_sum 2^20 f32       time:   [193.12 us 194.76 us 197.03 us]<br>\nnaive_sum null 2^20 f32    time:   [1.6468 ms 1.6513 ms 1.6555 ms]</p>\n</blockquote>",
        "id": 261054155,
        "sender_full_name": "Jubilee",
        "timestamp": 1636578100
    },
    {
        "content": "<p>Ok, I summarized some of my findings here: <a href=\"https://github.com/DataEngineeringLabs/simd-benches\">https://github.com/DataEngineeringLabs/simd-benches</a> . I am a bit surprised that not using packed nor core yields better results when nulls are involved (by 50%). I would be graceful If someone could help me understand whether I am using core_simd API incorrectly.</p>",
        "id": 261096674,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1636610240
    },
    {
        "content": "<p>what compiler options are you using, and what cpu do you have?</p>",
        "id": 261097061,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636610668
    },
    {
        "content": "<p>dam, forgot about that. Was not using RUSTFLAGS. cpu: Intel(R) Xeon(R) Platinum 8171M CPU @ 2.60GHz . Added results for <code>-C target-cpu=native</code>, which did significantly improve on bitmap bench.</p>",
        "id": 261097831,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1636611698
    },
    {
        "content": "<p>well, i'm not at a computer to test portable-simd, but from reading your source, i'd guess <code>mask32x16::from_array</code> is the main culprit: proposed replacement implementation and current implementation of <code>from_array</code>: <a href=\"https://rust.godbolt.org/z/GdTx63axx\">https://rust.godbolt.org/z/GdTx63axx</a></p>",
        "id": 261100448,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636614207
    },
    {
        "content": "<p>Is that transmute valid?</p>",
        "id": 261100546,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636614317
    },
    {
        "content": "<p>Might be a good way to go</p>",
        "id": 261100552,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636614323
    },
    {
        "content": "<p>the transmute is valid since bool is always a single byte with 0 for false, 1 for true</p>",
        "id": 261100618,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636614383
    },
    {
        "content": "<p>Ah so before 2018 the layout was not defined, which is what I was thinking of</p>",
        "id": 261100726,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636614522
    },
    {
        "content": "<p>But yes it's valid now</p>",
        "id": 261100742,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636614562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"399416\">@Jorge Leitao</span> bug <a href=\"https://github.com/rust-lang/portable-simd/issues/184\">https://github.com/rust-lang/portable-simd/issues/184</a></p>",
        "id": 261101210,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636615094
    },
    {
        "content": "<p>note: I added the bitmap case because we use the Apache Arrow in-memory format, which uses bitmaps to represent null values. Arrow uses bitmaps because AVX-512 uses them natively, and it was designed to hit those instructions (even though afaik we can't hit them yet).</p>",
        "id": 261103626,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1636617641
    },
    {
        "content": "<p>well...judging from the benchmarks, i'd guess <code>core_simd_sum bitmap</code> <em>is</em> using avx512</p>",
        "id": 261103887,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636617877
    },
    {
        "content": "<p>cuz the bitmap benchmark is basically just as fast as the plain simd add benchmark</p>",
        "id": 261104027,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636618001
    },
    {
        "content": "<p>Is the portable-simd still being published in crates, or we should adopt the latest nightly and follow it on the feature gate?</p>",
        "id": 261342527,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1636782948
    },
    {
        "content": "<p>We never published it as a crate, but yes you should use it from nightly.  It's not on nightly yet, but it did just merge to master, so it should be on nightly shortly.</p>",
        "id": 261342583,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636783077
    },
    {
        "content": "<p>It should be available starting literally tomorrow.</p>",
        "id": 261342638,
        "sender_full_name": "Jubilee",
        "timestamp": 1636783132
    },
    {
        "content": "<p>By \"just\" I mean within the hour, lol</p>",
        "id": 261342640,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636783141
    },
    {
        "content": "<p>living on the moment! thanks; that will allow to use it on a published crate.</p>",
        "id": 261344441,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1636785863
    },
    {
        "content": "<p>Liiiittle longer looks like. Hours.</p>",
        "id": 261351252,
        "sender_full_name": "Jubilee",
        "timestamp": 1636796294
    },
    {
        "content": "<p><span aria-label=\"time\" class=\"emoji emoji-1f557\" role=\"img\" title=\"time\">:time:</span><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 261352519,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1636798081
    },
    {
        "content": "<p>Fixing the regression requires teaching <code>fn simd_cast</code> to not explode on <code>Simd&lt;isize, _&gt;</code>, it looks like.</p>",
        "id": 261387519,
        "sender_full_name": "Jubilee",
        "timestamp": 1636848201
    },
    {
        "content": "<p>Is the performance still bad with the suggested fix?</p>",
        "id": 261388424,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636849496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> The performance is good, but the suggested fix only works if you know your <code>Mask</code> isn't <code>Mask&lt;isize, _&gt;</code></p>",
        "id": 261389080,
        "sender_full_name": "Jubilee",
        "timestamp": 1636850486
    },
    {
        "content": "<p>Oh right, I remember the issue now</p>",
        "id": 261390141,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636851997
    }
]