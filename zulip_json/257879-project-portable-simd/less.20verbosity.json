[
    {
        "content": "<p>Sure, but the goal here is to make the functions less verbose in general.</p>",
        "id": 275187387,
        "sender_full_name": "Jubilee",
        "timestamp": 1647223650
    },
    {
        "content": "<p>And it's not all that orthogonal to us, to be honest: from our perspective, what we would really want to be able to express is that all the numeric types are a sufficiently-ordered poset that <code>min</code> and <code>max</code> are coherent operations on them.</p>",
        "id": 275187436,
        "sender_full_name": "Jubilee",
        "timestamp": 1647223710
    },
    {
        "content": "<p>In the PR I just opened I left the prefixes (actually, changed them to <code>simd_</code>) because the disambiguation was necessary, but generally I agree on trying to avoid verbosity</p>",
        "id": 275188401,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647225159
    },
    {
        "content": "<p>It's not as simple as just saying it's an array of numbers that implement min and max when the container itself implements them as well</p>",
        "id": 275188438,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647225219
    },
    {
        "content": "<p><em>nodnod</em></p>",
        "id": 275189337,
        "sender_full_name": "Jubilee",
        "timestamp": 1647226563
    },
    {
        "content": "<p>Hmm, for shadowing precedent we have <br>\n<a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.eq\">https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.eq</a><br>\n<a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\">https://doc.rust-lang.org/std/cmp/trait.PartialEq.html</a></p>\n<p>Though I suppose iterators are rarely <code>PartialEq</code> themselves -- the <em>Into</em>iterators are <code>PartialEq</code>, but not the iterators.</p>",
        "id": 275191671,
        "sender_full_name": "scottmcm",
        "timestamp": 1647230102
    }
]