[
    {
        "content": "<p>How would I store a vector to a slice at some index i? Is something like <code>out.copy_from_slice(&amp;vec.to_array())</code> the best way? Did I miss something obvious in the docs?</p>",
        "id": 268901842,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1642798488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"469380\">Joel Pedraza</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/store.20to.20slice/near/268901842\">said</a>:</p>\n<blockquote>\n<p>How would I store a vector to a slice at some index i? Is something like <code>out.copy_from_slice(&amp;vec.to_array())</code> the best way? Did I miss something obvious in the docs?</p>\n</blockquote>\n<p>Yes, that's the best way in safe Rust.</p>",
        "id": 268909157,
        "sender_full_name": "Jubilee",
        "timestamp": 1642802559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Thanks. I'll open an issue to request  a (copy|store)_to method for ergonmonics.</p>",
        "id": 268912693,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1642804531
    },
    {
        "content": "<p>Going via <code>to_array</code> seems quite reasonable to me?</p>\n<p>The only thing that'd make it simpler is if a vector could just deref to its underlying array -- then it'd just be <code>.copy_from_slice(&amp;simd)</code> -- but I assume it's very intentional that such a <code>Deref</code> impl doesn't exist.</p>",
        "id": 268915299,
        "sender_full_name": "scottmcm",
        "timestamp": 1642806220
    },
    {
        "content": "<p>we'd probably want to have a unaligned vector store function, rather than relying on llvm to convert the scalar memcpy into a vector store</p>",
        "id": 268915527,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642806375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> we avoided deref at the beginning, but I'm not sure we're necessarily against it so much as wanted to avoid any unexpected consequences</p>",
        "id": 268915700,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642806477
    },
    {
        "content": "<p>imho <code>Deref</code> will make it waay too easy to accidentally generate scalar operations when you expected simd operations</p>",
        "id": 268916264,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642806828
    },
    {
        "content": "<p>Yeah, that's the main concern</p>",
        "id": 268916360,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642806873
    },
    {
        "content": "<p>Too bad copy_from_slice doesn't take Into&lt;[T]&gt;</p>",
        "id": 268916470,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642806961
    },
    {
        "content": "<p>if we want to generate a store rather than a memcpy in llvm ir, <code>ptr::write_unaligned</code> appears to be better than <code>copy_to_slice</code>: <a href=\"https://rust.godbolt.org/z/dqjETsxz5\">https://rust.godbolt.org/z/dqjETsxz5</a></p>",
        "id": 268918090,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642807979
    },
    {
        "content": "<p><a href=\"https://gist.github.com/8405669f19a329f31f2c2258e2efe1b5\">https://gist.github.com/8405669f19a329f31f2c2258e2efe1b5</a></p>",
        "id": 268918888,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642808494
    },
    {
        "content": "<p>whoops</p>",
        "id": 268918926,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642808497
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2021&amp;gist=117cc6b1245bae7bfd7ecb6ffb2db590\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2021&amp;gist=117cc6b1245bae7bfd7ecb6ffb2db590</a></p>",
        "id": 268918940,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642808505
    },
    {
        "content": "<p>they end up nearly the same though, fortunately</p>",
        "id": 268918954,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642808516
    },
    {
        "content": "<p>they may be different on some platform...i checked aarch64, powerpc64le, and x86-64</p>",
        "id": 268919145,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642808640
    },
    {
        "content": "<p>same assembly on all of those in release mode</p>",
        "id": 268919204,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642808659
    },
    {
        "content": "<p>if there's some platform with different assembly, i expect the version with <code>store</code> to be more optimal</p>",
        "id": 268919254,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642808711
    },
    {
        "content": "<p><code>write_unaligned</code> and <code>copy_to_slice</code> are both just <code>memcpy</code> under the hood, so I doubt that there's any real difference between the two.</p>\n<p>(Or if there is, I think it's an LLVM bug, not a rust problem.)</p>",
        "id": 268923240,
        "sender_full_name": "scottmcm",
        "timestamp": 1642811722
    },
    {
        "content": "<p>maybe the difference is that the <code>write_unaligned</code> code does the store at type <code>f32x16</code> whereas the other code had type <code>[f32]</code></p>",
        "id": 268923508,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642812000
    },
    {
        "content": "<p>Hmm, I am broadly in favor of explicit implementations of things that arrays implement, I dislike Deref-to-array. I don't think we should directly expose \"it's an array\" except in terms of our implementation.</p>",
        "id": 268926508,
        "sender_full_name": "Jubilee",
        "timestamp": 1642814456
    },
    {
        "content": "<p>i think we should expose \"it's an array\" but only through <code>as_array</code> and <code>as_ref</code> and maybe <code>borrow</code></p>",
        "id": 268926610,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642814558
    },
    {
        "content": "<p>yeah if you're visibly calling a method it's fine. Similar to how an RNG or Iterator is probably Copy in terms of literal data but we generally keep it to Clone only so that it's clear on the page when you're doing the duplication.</p>",
        "id": 268930583,
        "sender_full_name": "Lokathor",
        "timestamp": 1642818908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/store.20to.20slice/near/268916470\">said</a>:</p>\n<blockquote>\n<p>Too bad copy_from_slice doesn't take Into&lt;[T]&gt;</p>\n</blockquote>\n<p><code>Into</code> is wrong, but <code>AsRef&lt;[T]&gt;</code> might be interesting.  Probably not backwards-compatible, though :/</p>",
        "id": 268932079,
        "sender_full_name": "scottmcm",
        "timestamp": 1642820461
    }
]