[
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/rust/issues/103\">#103</a> I raised a mild question about using a (sealed) trait for the implementation. While I think having all the fairly <em>arithmetic</em> methods be \"core\" to the type makes the most sense, I have begun to think it might make sense to define something like a \"SimdVector\" trait that notionally implements the methods that \"view\" a vector type <em>as</em> an abstract vector, and that this may help futureproof us against situations where our API might have name collision with other things (this comes up with the \"rotate/shift\" stuff a lot) by allowing qualified path syntax as an escape valve.</p>",
        "id": 237394842,
        "sender_full_name": "Jubilee",
        "timestamp": 1620161109
    },
    {
        "content": "<p>I personally think this belongs in a separate crate, similar to num-traits</p>",
        "id": 237395236,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620161282
    },
    {
        "content": "<p>Providing a \"general purpose\" trait is particularly dangerous since it's so difficult to keep backward compatible</p>",
        "id": 237395394,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620161351
    },
    {
        "content": "<p>We should at least have a general purpose trait for <code>LanesAtMost32</code> that only depends on the lane count, not the underlying vector type, since this makes generic code waay easier to write.</p>",
        "id": 237396617,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620161916
    },
    {
        "content": "<p>You mean like <code>[(); LANES]: Trait</code></p>",
        "id": 237397078,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620162056
    },
    {
        "content": "<p>You're probably right</p>",
        "id": 237397100,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620162060
    },
    {
        "content": "<p>Should also probably make that trait more generically names since I think it will probably be stabilized eventually</p>",
        "id": 237397458,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620162128
    },
    {
        "content": "<p>Even if it eventually is implemented for all lanes from 0 to 65536 or whatever</p>",
        "id": 237397544,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620162146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdVector.20trait/near/237395394\">said</a>:</p>\n<blockquote>\n<p>Providing a \"general purpose\" trait is particularly dangerous since it's so difficult to keep backward compatible</p>\n</blockquote>\n<p>I don't think it should be fully general, I think it should have a point, and the point is more akin to the Iterator trait, in a sense?</p>",
        "id": 237403842,
        "sender_full_name": "Jubilee",
        "timestamp": 1620163936
    },
    {
        "content": "<p>idea for replacement for <code>LanesAtMost32</code>:<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ac1a184aa94782e3b4abf6a858208e1d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ac1a184aa94782e3b4abf6a858208e1d</a></p>",
        "id": 237404329,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620164159
    },
    {
        "content": "<p>I suppose I don't see any reason to use a trait for that</p>",
        "id": 237405190,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620164566
    },
    {
        "content": "<p>Integers don't have traits that abstract over their methods</p>",
        "id": 237405254,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620164592
    },
    {
        "content": "<p>Reading and writing is abstracted over multiple containers tho'. My contention is that here, we have something that more resembles a general abstraction, else why have <code>Select</code> as a trait at all?</p>",
        "id": 237406811,
        "sender_full_name": "Jubilee",
        "timestamp": 1620165400
    },
    {
        "content": "<p>Well Select specifically encodes that the type matches the mask</p>",
        "id": 237407912,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620165890
    },
    {
        "content": "<p>I think there's an argument for shuffles to potentially have that as well but not for the sake of name collision</p>",
        "id": 237408022,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620165939
    },
    {
        "content": "<p>Well, I think the name collision \"thing\" is basically a nice perk rather than a must-have.</p>",
        "id": 237408325,
        "sender_full_name": "Jubilee",
        "timestamp": 1620166091
    },
    {
        "content": "<p>So the reason to use a trait here was so select didn't have a different function for each vector type</p>",
        "id": 237408405,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620166137
    },
    {
        "content": "<p>I'm not sure if anything else will have that?</p>",
        "id": 237408434,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620166146
    },
    {
        "content": "<p>Except shuffles with the const type</p>",
        "id": 237408466,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620166167
    },
    {
        "content": "<p>Reminder: The fact that integers don't have a trait is <em>very bad</em> and <em>everyone hates it</em>.</p>",
        "id": 237410881,
        "sender_full_name": "Lokathor",
        "timestamp": 1620167591
    },
    {
        "content": "<p>Also T-libs members have actually, recently, solicited an impl PR for it.</p>",
        "id": 237410936,
        "sender_full_name": "Jubilee",
        "timestamp": 1620167634
    },
    {
        "content": "<p>That exact thing.</p>",
        "id": 237410957,
        "sender_full_name": "Jubilee",
        "timestamp": 1620167643
    },
    {
        "content": "<p>I think it would make sense to wait for the primitive traits and go from there</p>",
        "id": 237411269,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620167791
    },
    {
        "content": "<p>And perhaps take part in that conversation</p>",
        "id": 237411315,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620167822
    },
    {
        "content": "<p>Mmm, I don't think this is the same thing though. This is abstracting over what we <strong>don't</strong> have in common with numbers.</p>",
        "id": 237411377,
        "sender_full_name": "Jubilee",
        "timestamp": 1620167862
    },
    {
        "content": "<p>Right, but I think it would make sense to see what the implementation looks like</p>",
        "id": 237411481,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620167903
    },
    {
        "content": "<p>And implement the simd traits informed by that</p>",
        "id": 237411530,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620167938
    },
    {
        "content": "<p>Are you suggesting that we shouldn't have type member fns at all for these things and should only use traits? Because I don't think that's a good idea. And if the traits are purely on top of those then I don't see any harm in waiting</p>",
        "id": 237411725,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168034
    },
    {
        "content": "<p>Yeah, actually, that's what I think, because here I want a lucid API that has compartmentalization of information, and while I think having all the mathematical operations be immediate is one thing and is fine, I think a single abstract trait that implements the behavior of \"doing meta-manipulations over lanes\" is superior for those particular functions because then people can look at that one trait for reference on what they can do with our relevant types, just like they actually read the documentation for Iterator and can write abstractions over vector manipulations.</p>",
        "id": 237412444,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168449
    },
    {
        "content": "<p>Okay so I think I support that for shuffles</p>",
        "id": 237412566,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168522
    },
    {
        "content": "<p>(and I think I suggested it in one of these threads somewhere?)</p>",
        "id": 237412604,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168550
    },
    {
        "content": "<p>Possibly.</p>",
        "id": 237412611,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168556
    },
    {
        "content": "<p>Though I don't believe it should be a trait that you interact with, much like you don't interact with Select</p>",
        "id": 237412632,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168578
    },
    {
        "content": "<p>Maybe I'm wrong, maybe it should because of reverse etc</p>",
        "id": 237412721,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168612
    },
    {
        "content": "<p>I'm not sure that will scale to actual usage.</p>",
        "id": 237412724,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168613
    },
    {
        "content": "<p>But I think <code>shuffle</code> itself should be a free function, personally</p>",
        "id": 237412769,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168643
    },
    {
        "content": "<p>I'm not sure it makes much sense being a member fn</p>",
        "id": 237412840,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168697
    },
    {
        "content": "<p>The problem with traits is that you need to import them to use them</p>",
        "id": 237412948,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168768
    },
    {
        "content": "<p>Hm, that isn't part of the patterns in my brain that I intuit, but I'm not sure it's bad.</p>",
        "id": 237412953,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168772
    },
    {
        "content": "<p>Well, you need to import free fn as well.</p>",
        "id": 237412983,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168794
    },
    {
        "content": "<p>Not the biggest problem but may hurt discoverability</p>",
        "id": 237412985,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168794
    },
    {
        "content": "<p>Agreed</p>",
        "id": 237412995,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168806
    },
    {
        "content": "<p>I meant a free function as part of the trait thing, like iterator sum</p>",
        "id": 237413032,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168832
    },
    {
        "content": "<p>Ah.<br>\nWell, discoverability is basically why I want all the \"\"\"\"\"\"\"\"\"weird\"\"\"\"\"\"\"\"\" APIs to be in a single trait.</p>",
        "id": 237413060,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168843
    },
    {
        "content": "<p>airquoting heavily here</p>",
        "id": 237413110,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168867
    },
    {
        "content": "<p>might be able to fit a few more quotation marks in, let's see</p>",
        "id": 237413125,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168879
    },
    {
        "content": "<p>yeah that's about right.</p>",
        "id": 237413136,
        "sender_full_name": "Jubilee",
        "timestamp": 1620168892
    },
    {
        "content": "<p>Lol</p>",
        "id": 237413148,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620168899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdVector.20trait/near/237410936\">said</a>:</p>\n<blockquote>\n<p>Also T-libs members have actually, recently, solicited an impl PR for it.</p>\n</blockquote>\n<p>Yes please. I'd <em>love</em> to have a trait (or, more likely, a family of traits) that includes things like ::BITS.</p>",
        "id": 237415458,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620170262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdVector.20trait/near/237405190\">said</a>:</p>\n<blockquote>\n<p>I suppose I don't see any reason to use a trait for that</p>\n</blockquote>\n<p>you'd abstract over the lane count so you can implement element-wise operations. example:<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5f753543bd617494aeefdc0f9ff39c52\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5f753543bd617494aeefdc0f9ff39c52</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">example_generic_fn</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">SimdLanes</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">SimdU32</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">SimdF64</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SimdF64</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 237417335,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620171466
    },
    {
        "content": "<p>I am very much opposed to anything involving supertraits since they cannot be changed</p>",
        "id": 237417435,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620171526
    },
    {
        "content": "<p>yeah while I mentioned that I think a trait is a good idea I don't think supertraits are required here.</p>",
        "id": 237429046,
        "sender_full_name": "Jubilee",
        "timestamp": 1620179390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdVector.20trait/near/237417435\">said</a>:</p>\n<blockquote>\n<p>I am very much opposed to anything involving supertraits since they cannot be changed</p>\n</blockquote>\n<p>are you referring to <code>SimdLanes</code> in my example code, or something else?</p>",
        "id": 237472257,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620210426
    },
    {
        "content": "<p>Traits having to be imported just means we need to have our bonus prelude include all the traits.</p>",
        "id": 237490988,
        "sender_full_name": "Lokathor",
        "timestamp": 1620219838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> yes</p>",
        "id": 237497246,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620222375
    },
    {
        "content": "<p>hmm, well, I don't see how having <code>Sealed</code> be a supertrait of <code>SimdLanes</code> can cause any problems, it's not as if <code>Sealed</code> has any publicly accessible items...they are all <code>#[doc(hidden)]</code> and would be unstable implementation details.</p>\n<p>Also, if your using vectors with known lengths, you don't have to import any traits at all. <code>SimdLanes</code> has just one public field, <code>LANES</code>, and that's just cause it's handy, not because it's necessary.</p>",
        "id": 237552147,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620242830
    },
    {
        "content": "<p>I was referring to SimdLanes being a supertrait of Into and Mul like in your example</p>",
        "id": 237552212,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620242877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdVector.20trait/near/237552212\">said</a>:</p>\n<blockquote>\n<p>I was referring to SimdLanes being a supertrait of Into and Mul like in your example</p>\n</blockquote>\n<p>hmm, well I don't see how <code>SimdLanes</code> is a supertrait of <code>Into</code> or <code>Mul</code>, it's just a bound on the generic argument, just like how we need to write <code>SimdU32&lt;LANES&gt;: LanesAtMost32</code> now. If a user's code isn't being generic over the lane count, then it never needs to mention/import <code>SimdLanes</code>:</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d0243e557ef5e0055c92fe0fc20c02db\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d0243e557ef5e0055c92fe0fc20c02db</a></p>",
        "id": 237555085,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620244284
    }
]