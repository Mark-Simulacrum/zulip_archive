[
    {
        "content": "<p>So my thought for a splatting API was something that lets you <code>splat()</code> an integer or float and hopefully rustc can try to type-infer the vector length you meant using the awesome and disturbing powers of generic inference that are being unleashed in PRs like this one: <a href=\"https://github.com/rust-lang/rust/pull/76825/files\">https://github.com/rust-lang/rust/pull/76825/files</a> Though I'm not sure that works as well with tuples, which I'm filing under \"maybe SIMD types should just be a tagged array?\"</p>\n<p>I initially mentioned a splatting API from the place of formulating an objection which maybe is not the best space for design to come from honestly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  but I've given it some consideration and I realized I'm way more comfortable with f32x4 + f32 because, well, APL. I'm still ready to discuss whether or not that is best! But I gotta admit that it's a little less about inherent type clashing and more about explicitness and Rust conventions vs. other conventions.</p>\n<p>But I do think splats should have their own conversion. I hadn't organized my thoughts as coherently about it then but I realized that From/Into feels less appropriate for a splat API because most From/Into conversions are... simple, and not completely lossless but notionally about as much? That isn't a hard limit, but From as I see it is mostly changing the view into or container of the data, whereas a possible f32 =&gt; f32x4 =&gt; f32 =&gt; etc. conversion isn't quite so much a round trip: it's creating data and then truncating it. I'm also a little worried about such a From/Into implementation weakening type inference, but possibly unwarrantedly?</p>\n<p>As usual, it's always possible there's something else I'm missing.</p>",
        "id": 212356379,
        "sender_full_name": "Jubilee",
        "timestamp": 1601931771
    },
    {
        "content": "<p>So I'm not sure, but I have a feeling that type inference doesn't work at all with the binary core ops? Something with the RHS type being generic.  Scalars can already be splatted into vectors with Into but that doesn't work</p>",
        "id": 212356688,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601931943
    },
    {
        "content": "<p>do you mean <code>fn splat&lt;V: SomeSimdTrait&lt;Item = Self&gt;&gt;(self) -&gt; V</code> on primitive ints/floats so that you could do <code>3.0f32.splat::&lt;f32x4&gt;()</code> or something?</p>\n<p>seems fine, assuming in this future world exists after const traits work or whatever. in my own code (when not just using <code>_mmX_set1_foo</code>) i have a macro i like to use that allows <code>simd_const![s; 4]</code> or <code>simd_const![x, y, z, w]</code>. but i don't really love it — it's only a macro because of const fn limitations.</p>\n<p>(edit: note that one downside of this macro is that i have one version of it for each primitive type — putting it as an inherent function (as you suggest, if i'm interpreting it right) avoids this, although i do think probably a <code>f32x4::splat(v: f32) -&gt; f32x4</code>-style constructor is still desirable)</p>",
        "id": 212357563,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601932362
    },
    {
        "content": "<p>Something like that, yes.<br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> hrm, that's true, it _is_ the case that they're type generic.</p>",
        "id": 212358071,
        "sender_full_name": "Jubilee",
        "timestamp": 1601932669
    },
    {
        "content": "<p>But that doesn't actually mean that type inference can never work, otherwise collect() could not work. However, IntoIterator/FromIterator do exist because the type inference of rustc is generally too weak to discern correctly using <strong>From</strong> impls because there's just so many different ways to go.</p>",
        "id": 212358434,
        "sender_full_name": "Jubilee",
        "timestamp": 1601932880
    },
    {
        "content": "<p>I mean, with collect you either use a turbo fish or concretely define the type on the left, right?</p>",
        "id": 212358683,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933031
    },
    {
        "content": "<p>So I think that's the same</p>",
        "id": 212358691,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933036
    },
    {
        "content": "<p>No, .collect() can successfully discern without either.</p>",
        "id": 212358762,
        "sender_full_name": "Jubilee",
        "timestamp": 1601933061
    },
    {
        "content": "<p>this doesn't seem meaningfully more complex than <code>str::parse</code> (it seems simpler to me, but I could be mistaken), which works nicely in practice.</p>",
        "id": 212358777,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601933070
    },
    {
        "content": "<p>i also think turbofish is preferrable to needing to import a trait for ergonomics, but i guess i could imagine people disagreeing with me on that</p>",
        "id": 212358824,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601933097
    },
    {
        "content": "<p>yeah</p>",
        "id": 212358859,
        "sender_full_name": "Jubilee",
        "timestamp": 1601933110
    },
    {
        "content": "<p>Well at that point you can just do a + f32x4::splat(b)</p>",
        "id": 212359002,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933167
    },
    {
        "content": "<p>Iterator::collect in fact usually succeeds on pure inference more often than str::parse, probably because it has a more bounded set to go through. (personal observation, not assertion of pure fact)</p>",
        "id": 212359011,
        "sender_full_name": "Jubilee",
        "timestamp": 1601933170
    },
    {
        "content": "<p>No need for a generic</p>",
        "id": 212359020,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933176
    },
    {
        "content": "<p>by APL I mean this one, also: <a href=\"https://en.wikipedia.org/wiki/APL_(programming_language)\">https://en.wikipedia.org/wiki/APL_(programming_language)</a></p>",
        "id": 212359309,
        "sender_full_name": "Jubilee",
        "timestamp": 1601933362
    },
    {
        "content": "<p>I guess my question as far as type inference is concerned, how could we make a trait that somehow infers differently than Into?  I think fundamentally scalars splat into multiple vectors, and anyone can implement more core ops over vectors in their own crate, so that double inference (the into trait and the op rhs type) _must_ fail</p>",
        "id": 212359608,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933539
    },
    {
        "content": "<p>I think it inherently needs to be implemented on the vector type to avoid that problem</p>",
        "id": 212359637,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933572
    },
    {
        "content": "<p>maybe it could be made to work as <code>some_f32.splat::&lt;4&gt;()</code>? honestly i suspect this might be a little \"too cute\". i also suspect it needs terrifying amounts of system shenanigans to map 4 and f32 to f32x4 (okay, maybe it wouldn't be that bad, but it still might be too much for inference)</p>",
        "id": 212359645,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601933576
    },
    {
        "content": "<p>I don't think that would work without specialization</p>",
        "id": 212359687,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933600
    },
    {
        "content": "<p>And const specialization at that (idk if that's a thing?)</p>",
        "id": 212359710,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933615
    },
    {
        "content": "<p>You could make independent traits like Splat2, Splat4, etc that are associated with particular vectors</p>",
        "id": 212359793,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933669
    },
    {
        "content": "<p>But that doesn't seem particularly elegant (and doesn't really work with generic widths)</p>",
        "id": 212359863,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933723
    },
    {
        "content": "<p>Well, I raised the question because I wanted to see if people were game for the idea. I think exploring the total design space and all the nuances of type inference are slightly beyond the bounds of \"should we?\"</p>",
        "id": 212360017,
        "sender_full_name": "Jubilee",
        "timestamp": 1601933820
    },
    {
        "content": "<p>Well, this doesn't solve the ops issue, but I think a trait could be implemented across all vectors that implements splatting (among other common operations)</p>",
        "id": 212360171,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933913
    },
    {
        "content": "<p>Probably in a num-traits style trait</p>",
        "id": 212360211,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601933951
    },
    {
        "content": "<p>yeah, i know i mentioned a simd trait, but i think there should be a good reason for doing so. i think it's easy to go overboard with a trait-heavy design, and make things confusing and hard to use. (imo the stdlib avoiding this for the primitive types, was the right call, even though it's inconvenient at times).</p>",
        "id": 212361880,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601935164
    },
    {
        "content": "<p>Fundamentally, if you want all lanes multiplied by two, then you should be able to just write</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>and <em>anything</em> wordier than that gets the stink eye from me.</p>",
        "id": 212362179,
        "sender_full_name": "Lokathor",
        "timestamp": 1601935325
    },
    {
        "content": "<p>From a mathematical perspective I tend to agree.  You don't need to annotate that you are extending a scalar into a vector</p>",
        "id": 212364783,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601937239
    },
    {
        "content": "<p>what about having a module-level generic <code>splat</code> function? That way, adding 5 to all lanes would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>It would be declared something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SplatTarget</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">splat</span><span class=\"p\">(</span><span class=\"n\">item</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">splat</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">SplatTarget</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">item</span>: <span class=\"nc\">T</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>declaring it that way would also let you do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i32x4</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">splat</span>::<span class=\"o\">&lt;</span><span class=\"n\">i32x4</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212365752,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601937969
    },
    {
        "content": "<p>I don't think the type inference would work in the first example.  I stated it a bit further up but I don't think any type inference will work on the right-hand side of any of the core ops since since a user could always implement it in their own crate</p>",
        "id": 212365978,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601938154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Splatting.20APIs/near/212364783\">said</a>:</p>\n<blockquote>\n<p>From a mathematical perspective I tend to agree.  You don't need to annotate that you are extending a scalar into a vector</p>\n</blockquote>\n<p>I disagree, since I expect things like adding <code>i32x4</code>and <code>i32</code> to be a type error. For me, invisibly splatting only makes sense for mul and div, but I think it's better to be a bit verbose to improve clarity as well as for consistency with ops other than mul and div.</p>",
        "id": 212366117,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601938281
    },
    {
        "content": "<p>Sorry, when I said from a mathematical perspective, I meant it's normal to write something like 2 v bar to mean multiply each element by two in v bar</p>",
        "id": 212366199,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601938368
    },
    {
        "content": "<p>Which also carries over to many vector-first languages like matlab or mathematica</p>",
        "id": 212366233,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601938420
    },
    {
        "content": "<p>yeah, looking at <code>i32x4::splat(5)</code> vs <code>5i32.splat::&lt;i32x4&gt;()</code> vs <code>splat::&lt;i32x4&gt;(5)</code> honestly its hard for me not to think the first is clearly the best. least noisy, probably the simplest</p>",
        "id": 212366234,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601938423
    },
    {
        "content": "<p>i don't really like the thought of this being on <code>trait SplatTarget</code> since it would either need to be in a/the prelude, or manually imported. which is kind of annoying unless there's an actual benefit (and i don't think there is here)</p>",
        "id": 212366329,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601938503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Splatting.20APIs/near/212365978\">said</a>:</p>\n<blockquote>\n<p>I don't think the type inference would work in the first example.  I stated it a bit further up but I don't think any type inference will work on the right-hand side of any of the core ops since since a user could always implement it in their own crate</p>\n</blockquote>\n<p>It seems to work fine:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=48bebda6de3f069add70f544c02b9c81\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=48bebda6de3f069add70f544c02b9c81</a></p>",
        "id": 212366587,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601938712
    },
    {
        "content": "<p>well if you're going to put the type name first, you'll probably just use <code>from</code> since that's one whole letter less. And even then, it's really wordy.</p>",
        "id": 212366642,
        "sender_full_name": "Lokathor",
        "timestamp": 1601938771
    },
    {
        "content": "<p>cool.</p>",
        "id": 212366823,
        "sender_full_name": "Jubilee",
        "timestamp": 1601938893
    },
    {
        "content": "<p>Interesting, I wonder what exactly is different about that and using Into</p>",
        "id": 212366982,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601939029
    },
    {
        "content": "<p>I suppose I am starting to wonder what foot-guns we are avoiding by not supporting mixed vector-scalar ops on the first place</p>",
        "id": 212367215,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601939112
    },
    {
        "content": "<p>Because in the end vectors and scalars _are_ types you want to use together</p>",
        "id": 212367258,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601939146
    },
    {
        "content": "<p>Well from my perspective mixed vector + scalar ops are a slightly different question from how best to implement other type conversions / expansions / etc.</p>",
        "id": 212367329,
        "sender_full_name": "Jubilee",
        "timestamp": 1601939180
    },
    {
        "content": "<p>If we ignore the core ops issue, I personally think it makes sense to have a trait over vectors that implements splat</p>",
        "id": 212367763,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601939537
    },
    {
        "content": "<p>(which may not be a part of std::simd)</p>",
        "id": 212367777,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601939549
    },
    {
        "content": "<p>wouldn't that just be <code>From</code> though? i think splatting is specific enough that it doesn't need to have its own trait... like, i don't know what kind of functions i'd write that are generic over the ability to splat a number into a vector.</p>",
        "id": 212367964,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601939750
    },
    {
        "content": "<p>Yeah, might just be from</p>",
        "id": 212368042,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601939799
    },
    {
        "content": "<p>Tested module-level <code>splat</code> from a different crate: <a href=\"https://github.com/programmerjake/simd-splat-demo\">https://github.com/programmerjake/simd-splat-demo</a><br>\nIt still works fine.</p>",
        "id": 212368202,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601939927
    },
    {
        "content": "<p>So my question is what are we trying to solve that isn't solved by From/Into</p>",
        "id": 212368288,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601939975
    },
    {
        "content": "<p>Like I don't necessarily have a problem with a dedicated splat function and trait but that seems like a lot of extra code that does nearly the same thing with slightly different type inference properties</p>",
        "id": 212368434,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940027
    },
    {
        "content": "<p>more simply: \"from/into is a splat\" is not obvious.</p>",
        "id": 212368448,
        "sender_full_name": "Jubilee",
        "timestamp": 1601940035
    },
    {
        "content": "<p>Okay, that may be a good reason</p>",
        "id": 212368477,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940059
    },
    {
        "content": "<p>Kinda like <code>str::parse</code> should be different from just <code>try_into</code></p>",
        "id": 212368552,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601940107
    },
    {
        "content": "<p>the command expressed is \"using this base data, programmatically generate / reify this data as an entirely different thing\".<br>\nin an obviously trivial way, of course, which is why it can be easily encoded.</p>",
        "id": 212368687,
        "sender_full_name": "Jubilee",
        "timestamp": 1601940184
    },
    {
        "content": "<p>In that case I think that works with what I previously said, vectors can implement FromScalar</p>",
        "id": 212368756,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940235
    },
    {
        "content": "<p>Taking a vector and doing a scalar add... we can discuss whether or not that is acceptable w/o contending that splat should be the default from/into implementation elsewhere.</p>",
        "id": 212368814,
        "sender_full_name": "Jubilee",
        "timestamp": 1601940256
    },
    {
        "content": "<p>i think there's an argument someone could make that From should only set the bottom lane/element/w/e. i mean, i think this is obviously wrong, but there's (arguably) precedence in vendor functions like _mm_cvtsi32_si128 (which has \"convert\" in the name, although nobody would ever document it that way, i think).</p>\n<p>that said, if From is vague, i don't know if <code>trait Splat</code> is the solution. an <del>intrinsic</del> inherent method is fine.</p>",
        "id": 212368832,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601940275
    },
    {
        "content": "<p>My only opinion is that the trait should be implemented on the vector and not on the scalar</p>",
        "id": 212368888,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940320
    },
    {
        "content": "<p>Since it's a property of the vector, not the scalar</p>",
        "id": 212368893,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940328
    },
    {
        "content": "<p>Also fine with removing the From implementation in favor of this</p>",
        "id": 212368995,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940393
    },
    {
        "content": "<p>I really think we should use traits instead of magic generic intrinsics wherever it doesn't cause problems.</p>",
        "id": 212369014,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601940414
    },
    {
        "content": "<p>Sorry, \"intrinsic method\"?</p>",
        "id": 212369051,
        "sender_full_name": "Jubilee",
        "timestamp": 1601940462
    },
    {
        "content": "<p>sorry inherent</p>",
        "id": 212369063,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601940476
    },
    {
        "content": "<p>I basically view a default From/Into as a very strong statement... \"this conversion is always valid\" (explicit as it's not TryFrom) \"and always unambiguous and always in the way you want\" (implicit by being the default conversion trait on everything).</p>",
        "id": 212369278,
        "sender_full_name": "Jubilee",
        "timestamp": 1601940635
    },
    {
        "content": "<p>my point is basically that (IMO) one of the good things about libcore/libstd is that's generally pretty deliberate and conservative about when it introduces (public) traits. two types having a similar function isn't enough (the ecosystem can/will pick this up). this also allows things to vary in situations where it makes sense</p>",
        "id": 212369287,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601940642
    },
    {
        "content": "<p>One advantage of traits over inherent methods is you can write <code>splat(5i32)</code> when it's not ambiguous  instead of <code>i32x4::splat(5i32)</code> or the even worse <code>5i32.splat4()</code></p>",
        "id": 212369334,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601940695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I think I agree with your point, that here the definition of converting a scalar into a vector is contentious/not obvious enough for From/Into</p>",
        "id": 212369428,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940769
    },
    {
        "content": "<p>yeah, and the stdlib can use a trait like that without exposing it. i just don't know if splatting is where we want to spend API complexity budget</p>",
        "id": 212369430,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601940774
    },
    {
        "content": "<p>( with the few cases where it's not <em>completely</em> unambiguous and makes a choice as to how you're going to get it being literally things hotly debated for years. )</p>",
        "id": 212369477,
        "sender_full_name": "Jubilee",
        "timestamp": 1601940832
    },
    {
        "content": "<p>I also tend to agree that the ecosystem can pick it up as long as we provide the inherent methods</p>",
        "id": 212369480,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940838
    },
    {
        "content": "<p>though also having inherent methods on all vector types to avoid needing to import traits definitely could be useful</p>",
        "id": 212369520,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601940846
    },
    {
        "content": "<p>Also many algorithms are _not_ generic and the inherent method is probably better in those cases</p>",
        "id": 212369556,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601940895
    },
    {
        "content": "<p>I would argue for using the generic module-level function whenever not ambiguous since it's shorter to type</p>",
        "id": 212369667,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601940973
    },
    {
        "content": "<p>It's shorter but it's significantly less obvious what you're splatting to</p>",
        "id": 212369700,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601941010
    },
    {
        "content": "<p>yeah, and i also suspect you definitely have the vector type/s you're working with imported already</p>",
        "id": 212369989,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601941345
    },
    {
        "content": "<p>if it's not sufficiently obvious, that means it's ambiguous even if the compiler doesn't complain, therefore those cases should use the inherent method. I would guess that in the vast majority of cases it <em>is</em> sufficiently obvious. e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">average_color</span><span class=\"p\">(</span><span class=\"n\">pixels</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">f32x4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">pixel</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">pixels</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">pixel</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">pixels</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212370037,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1601941427
    },
    {
        "content": "<p>not to distract from your point but i'd probably argue that we should <code>impl ops::Div&lt;f32, Output = f32x4&gt; for f32x4</code> (and mul) rather than require explicit splatting for e.g. the final div</p>",
        "id": 212370535,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601941886
    },
    {
        "content": "<p>i dont feel that strongly about it, but i suspect you'll see people splatting all their constants up front if you require the explicit splat, (as a manual LICM or the like, when really this doesn't matter). i've definitely seen this in the past, where people overestimate the cost of creating vectors.</p>",
        "id": 212370703,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601942066
    },
    {
        "content": "<p>(that said i really don't care <em>that</em> much here, and perhaps its more in line with rust style to keep things explicit)</p>",
        "id": 212370724,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601942106
    },
    {
        "content": "<p>MMm, I think we will get a better feel of what different APIs actually look like once we gain more experience with them.</p>",
        "id": 212372220,
        "sender_full_name": "Jubilee",
        "timestamp": 1601943636
    },
    {
        "content": "<p>and have more feedback from people who don't always SIMD.</p>",
        "id": 212372239,
        "sender_full_name": "Jubilee",
        "timestamp": 1601943666
    }
]