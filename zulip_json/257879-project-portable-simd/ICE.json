[
    {
        "content": "<p>I found an ICE trying some const eval checked for shuffles: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=8a413d31ee0a1504b79d371ec1865b92\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=8a413d31ee0a1504b79d371ec1865b92</a></p>\n<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> do you happen to know if this is an expected limitation?</p>",
        "id": 247650192,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627598332
    },
    {
        "content": "<p>oh fun i've not seen this ICE before</p>",
        "id": 247652306,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1627599845
    },
    {
        "content": "<p>:)</p>",
        "id": 247652345,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627599886
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=468fc7b8bad3e6ca1ebc3348c4759388\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=468fc7b8bad3e6ca1ebc3348c4759388</a></p>",
        "id": 247653097,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1627600351
    },
    {
        "content": "<p>more minimal</p>",
        "id": 247653100,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1627600353
    },
    {
        "content": "<p>as far as I can tell, it just doesn't like slices</p>",
        "id": 247653157,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627600393
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, const_evaluatable_checked)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">S</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247654183,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1627601139
    },
    {
        "content": "<p>even smaller repro lol</p>",
        "id": 247654186,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1627601141
    },
    {
        "content": "<p>as far as I can tell, that's because valtrees aren't implemented yet, so all const generics have to be primitive values</p>",
        "id": 247654768,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627601638
    },
    {
        "content": "<p>Ah yeah, it might be because it's not a primitive or struct of primitives</p>",
        "id": 247655300,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627602078
    },
    {
        "content": "<p>Well, in case anyone has any clever ideas, what I'm basically trying to do is make a shuffle function that can take any arbitrary length of indices and produce a vector of that length.  e.g take 8 elements from a vector of 4</p>",
        "id": 247655402,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627602155
    },
    {
        "content": "<p>There aren't too many options in terms of API since the indices need to be const</p>",
        "id": 247655426,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627602175
    },
    {
        "content": "<p>hmm.</p>",
        "id": 247655801,
        "sender_full_name": "Jubilee",
        "timestamp": 1627602492
    },
    {
        "content": "<p>How about:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ConstIndices</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">INDICES</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">const_indices</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$($index</span>:<span class=\"nc\">expr</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">struct</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ConstIndices</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">INDICES</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"cp\">$($index</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">ConstIndices</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">I</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">const_indices</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247656009,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1627602714
    },
    {
        "content": "<p>Yeah, I came to the same conclusion that it needs to be an associated const, probably</p>",
        "id": 247656589,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627603225
    },
    {
        "content": "<p>I don't like that you need to define a whole new type for each shuffle</p>",
        "id": 247656666,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627603291
    },
    {
        "content": "<p>Though, then you could do something like</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Shuffle4&lt;const INDICES: [usize; 4]&gt;;\nstruct Shuffle8&lt;const INDICES: [usize; 8]&gt;;\n</code></pre></div>",
        "id": 247656821,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627603434
    },
    {
        "content": "<p>You just wouldn't be able to make that generic over lane count (though that's starting to look like a HKT I think?)</p>",
        "id": 247656938,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1627603509
    }
]