[
    {
        "content": "<p>Here we go again...</p>",
        "id": 239191731,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621307155
    },
    {
        "content": "<p>Alright, good morning people <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <br>\nI took a stab at it:</p>\n<ol>\n<li>Did the usual <code>monkey-see monkey-do</code> approach based on looking at <a href=\"https://github.com/rust-lang/rust/issues/76\">#76</a> and at <code>simd_fabs</code></li>\n<li>Added a test, check that the test dump did indeed generate f32 and f64 multi-lane tests<br>\n<a href=\"https://github.com/rust-lang/stdsimd/pull/120\">https://github.com/rust-lang/stdsimd/pull/120</a></li>\n</ol>",
        "id": 239264003,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621348507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> what does the <code>#[cfg(feature = \"std\")</code> feature do? How can I find documentaiton for it?</p>",
        "id": 239269899,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621350463
    },
    {
        "content": "<p>So all it means is that if you pass the std feature to the crate when you build it, it includes it</p>",
        "id": 239270597,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621350695
    },
    {
        "content": "<p>But we use that feature to indicate which things require the standard library (as opposed to being compatible with no_std)</p>",
        "id": 239270706,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621350728
    },
    {
        "content": "<p>Oooh, so like the people that like to work on embedded stuff don't include <code>std</code> or <code>simd</code> without asking explicitly for it. Gotcha.</p>",
        "id": 239270820,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621350774
    },
    {
        "content": "<p>Well they'll get the simd module no matter what, but yeah you can opt out of std</p>",
        "id": 239270907,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621350808
    },
    {
        "content": "<p>Nice. Also you can edit my PRs directly now I think.</p>",
        "id": 239271038,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621350845
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I don't know how to resolve Caleb's change request and not shut down your question <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 239271324,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621350941
    },
    {
        "content": "<p>no worries, \"sqrt in core\" has just been a pet peeve of mine for about 2 years now</p>",
        "id": 239274352,
        "sender_full_name": "Lokathor",
        "timestamp": 1621351994
    },
    {
        "content": "<p>Oh - what's the history there? Does Rust not have a simd sqrt in core?</p>",
        "id": 239274538,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621352065
    },
    {
        "content": "<p>Rust doesn't have most transcendental or otherwise weird functions like sqrt in core, because they rely on the system libm (which may not be present, for example in wasm or embedded)</p>",
        "id": 239274862,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352181
    },
    {
        "content": "<p>The solution for scalar functions is to static link a custom libm, and for simd there's a similar solution for LLVM</p>",
        "id": 239274964,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352225
    },
    {
        "content": "<p>oooh, that makes sense. Thanks!</p>",
        "id": 239275005,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621352242
    },
    {
        "content": "<p>So as much as <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> wants sqrt in core, it's consistent to only have it in std right now so don't worry too much <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239275092,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352274
    },
    {
        "content": "<p>yeah rust should \"just work\" in this area but whatever i guess</p>",
        "id": 239275292,
        "sender_full_name": "Lokathor",
        "timestamp": 1621352346
    },
    {
        "content": "<p>Is core closer to the bootstrapping part of Rust and std the standard libs?</p>",
        "id": 239275600,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621352457
    },
    {
        "content": "<p>core is the bare minimum to make rust work</p>",
        "id": 239275667,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352481
    },
    {
        "content": "<p>We have <code>Main.Core</code> and Main.Base.` in Julia for that.</p>",
        "id": 239275677,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621352483
    },
    {
        "content": "<p>core is actually more than a bare minimum</p>",
        "id": 239275733,
        "sender_full_name": "Lokathor",
        "timestamp": 1621352516
    },
    {
        "content": "<p>Yeah, I guess what I should say is by definition it's at least the bare minimum, but the goal is to put things in there when possible</p>",
        "id": 239276181,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352683
    },
    {
        "content": "<p>Anything that interacts with the OS will never be there, which trivially means things like filesystem interaction</p>",
        "id": 239276290,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352729
    },
    {
        "content": "<p>But it also bleeds into some things like allocation (Vec, Box, etc) and things like Error</p>",
        "id": 239276357,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352761
    },
    {
        "content": "<p>Floating point functions are really just a temporary limitation</p>",
        "id": 239276444,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352786
    },
    {
        "content": "<p>Ok ok.</p>",
        "id": 239276498,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621352809
    },
    {
        "content": "<p>Core is \"as much Rust as you can do without knowing about C or Allocation\"</p>",
        "id": 239276522,
        "sender_full_name": "Lokathor",
        "timestamp": 1621352819
    },
    {
        "content": "<p>The problem is that compilers have always relied on system libraries for things like math, for pretty good reason, and rust is in pretty uncharted territory for first class support of embedded</p>",
        "id": 239276789,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352906
    },
    {
        "content": "<p>If you use a C or C++ compiler for embedded you'll find that random bits of their standard libraries just don't work, so they aren't really compliant to the language</p>",
        "id": 239276904,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621352962
    },
    {
        "content": "<p>Is WASM SIMD likely to get support for widths greater than 128 soon?</p>",
        "id": 239278286,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621353415
    },
    {
        "content": "<p>I don't actually know but I'm assuming no, basically every architecture available has 128 but plenty don't have 256</p>",
        "id": 239279010,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621353615
    },
    {
        "content": "<p>I don't think wasm has quite the same goals as we do, we are okay with 256-nit vectors being an abstraction over two 128-bit vectors, but wasm seems to want to support only what's directly supported everywhere</p>",
        "id": 239279264,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621353694
    },
    {
        "content": "<p>There is work being done for flexible vectors which could cover longer vectors but not quite as explicitly I think</p>",
        "id": 239279473,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621353767
    },
    {
        "content": "<p>If you like, I'll add sqrt to vector-math next</p>",
        "id": 239294060,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621359167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> any blockers for the PR?</p>",
        "id": 239296297,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621360074
    },
    {
        "content": "<p>Probably not, I'll have to take another look later</p>",
        "id": 239296492,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621360163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/simd_fsqrt.20questions.20thread/near/239278286\">said</a>:</p>\n<blockquote>\n<p>Is WASM SIMD likely to get support for widths greater than 128 soon?</p>\n</blockquote>\n<p>No, there has been no such thing even advanced as a proposal. There has been a proposal for flexible vectors, which are the SVE/RISCV-V like ones, but it has not received much attention, as the intention was to get v128 in first.</p>",
        "id": 239323483,
        "sender_full_name": "Jubilee",
        "timestamp": 1621370918
    },
    {
        "content": "<p>the intention is for the flexible vectors proposal to cover &gt;=256-bit vectors including AVX2 and AVX512</p>",
        "id": 239323715,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621371009
    },
    {
        "content": "<p>not that it won't cover &lt;256-bit vectors</p>",
        "id": 239323861,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621371074
    },
    {
        "content": "<p>Right, I assume that however it would be implemented would allow using the larger x86 ones as well.</p>",
        "id": 239323931,
        "sender_full_name": "Jubilee",
        "timestamp": 1621371109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> were your concerns addressed? re: <a href=\"https://github.com/rust-lang/stdsimd/pull/120\">https://github.com/rust-lang/stdsimd/pull/120</a></p>",
        "id": 240117459,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893294
    }
]