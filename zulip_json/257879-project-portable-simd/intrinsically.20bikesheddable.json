[
    {
        "content": "<p>So we have a dilemma: portability includes implicitly \"between the minds of Rustaceans\", so we should think about how to say _everything_, and develop basically an internal glossary. And now, the question of \"wait, what do we call intrinsics, exactly?\" came up. Consensus seems to be against \"intrinsic instructions\" but aside from that so far it's still up in the air between:</p>\n<ol>\n<li>intrinsic functions</li>\n<li>just \"intrinsics\"</li>\n<li>\"hardware intrinsics\"</li>\n<li>\"intrinsic operations\"</li>\n<li>\"SIMD operations\"<br>\n<a href=\"https://www.youtube.com/watch?v=O4irXQhgMqg\">https://www.youtube.com/watch?v=O4irXQhgMqg</a><div class=\"youtube-video message_inline_image\"><a data-id=\"O4irXQhgMqg\" href=\"https://www.youtube.com/watch?v=O4irXQhgMqg\"><img src=\"https://i.ytimg.com/vi/O4irXQhgMqg/default.jpg\"></a></div></li>\n</ol>",
        "id": 210809713,
        "sender_full_name": "Jubilee",
        "timestamp": 1600728395
    },
    {
        "content": "<p>My opinion/understanding is that an intrinsic (or intrinsic function, both are probably accurate) is something provided by the compiler that performs some special functionality that only the compiler can do correctly.  In the case of C/C++ these are specified by the vendors, mostly because they extend the language.  I'm not sure there's a strong distinction between an intrinsic like <code>_mm_add_ps</code> and <code>__builtin_cos</code>, even if one converts to a particular SIMD instruction and one converts to maybe a call to glibc or something</p>",
        "id": 210810088,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600728697
    },
    {
        "content": "<p>relevantly:<br>\n<span class=\"user-mention silent\" data-user-id=\"204346\">Ashley Mannix</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-09-21.20meeting/near/210808932\">said</a>:</p>\n<blockquote>\n<p>We always have an opportunity in Rust to make topics really accessible so I'd love to do that here too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-09-21.20meeting/near/210808901\">said</a>:</p>\n<blockquote>\n<p>re: \"intrinsics\" vs. \"instructions\", \"instructions\" suggests it expands into a given asm, which is kinda Eh, I would prefer \"functions\" if \"intrinsics\" is considered Not OK, because vendors actually do refer to intrinsics as functions. intrinsic functions.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"322310\">Jed</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-09-21.20meeting/near/210808985\">said</a>:</p>\n<blockquote>\n<p>I think \"intrinsics\" is fine -- many people interested in this will have had some contact with Intel or Power intrinsics for C.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-09-21.20meeting/near/210809073\">said</a>:</p>\n<blockquote>\n<p>yeah, \"intrinsic functions\" or even \"simd operations\" is best. I'd like to point out that <em>many</em> useful things we'll naturally offer will not be single instructions. Eg: simd sin / cos / tan is a whole big thing that's like 15 asm instructions long, but you absolutely want that in the API despite it not being \"a single instruction\"</p>\n</blockquote>",
        "id": 210810170,
        "sender_full_name": "Jubilee",
        "timestamp": 1600728752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"322310\">Jed</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-09-21.20meeting/near/210808985\">said</a>:</p>\n<blockquote>\n<p>I think \"intrinsics\" is fine -- many people interested in this will have had some contact with Intel or Power intrinsics for C.</p>\n</blockquote>\n<p>My concern with this is I believe we shouldn't be making that assumption, since one of the goals (I think) is to make SIMD easier for everyone, including those who may have never used vendor intrinsics</p>",
        "id": 210810340,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600728903
    },
    {
        "content": "<p>I think a _little_ language overhead is to be expected, but also \"intrinsics\" are literally the things we are trying to abstract away, so internally we should be fine discussing intrinsics but  we should aim our external messaging @ \"intrinsic functions\" for clarity.</p>",
        "id": 210810629,
        "sender_full_name": "Jubilee",
        "timestamp": 1600729138
    },
    {
        "content": "<p>also is maximally googleable: <a href=\"https://en.wikipedia.org/wiki/Intrinsic_function\">https://en.wikipedia.org/wiki/Intrinsic_function</a></p>",
        "id": 210810664,
        "sender_full_name": "Jubilee",
        "timestamp": 1600729176
    },
    {
        "content": "<p>I think I agree.  Even then I think we can specify just \"function\" or \"SIMD operation\" in many of those places where we might use \"intrinsic\" or \"intrinsic function\"</p>",
        "id": 210810833,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600729255
    },
    {
        "content": "<p>I don't have strong feelings on this terminology. Intel's <a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/\">intrinsics guide</a> is quite useful and something I teach in my HPC class. Would it be feasible to maintain links in the docs from Rust portable intrinsics to vendor-specific intrinsics (with their hardware characteristics)?</p>",
        "id": 210810860,
        "sender_full_name": "Jed",
        "timestamp": 1600729276
    },
    {
        "content": "<p>I think that may belong in <code>core::arch</code>.  (and I agree that Intel's intrinsics guide is wonderful)</p>",
        "id": 210810952,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600729326
    },
    {
        "content": "<p>We can link to the intrinsics in general but not for specific functions: we don't want the portable SIMD documentation to promise a specific intrinsic, as that's literally what we're abstracting away.</p>",
        "id": 210810973,
        "sender_full_name": "Jubilee",
        "timestamp": 1600729348
    },
    {
        "content": "<p>Existence of gather/scatter varies by architecture and can make a big difference in how one implements an algorithm. We love portability, but using 512b primitives with scatter/gather likely won't run well on hardware that does not have scatter/gather.</p>",
        "id": 210811013,
        "sender_full_name": "Jed",
        "timestamp": 1600729377
    },
    {
        "content": "<p>I think noting general performance characteristics is fine.</p>",
        "id": 210811058,
        "sender_full_name": "Jubilee",
        "timestamp": 1600729408
    },
    {
        "content": "<p>Sounds fair. One would hope than an fmadd portable intrinsic translates to an fmadd instruction when the target arch supports it.</p>",
        "id": 210811158,
        "sender_full_name": "Jed",
        "timestamp": 1600729466
    },
    {
        "content": "<p>Oh yeah, obviously, we're just not gonna specify _which one_, because yes, sometimes there are multiple!</p>",
        "id": 210811193,
        "sender_full_name": "Jubilee",
        "timestamp": 1600729502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/intrinsically.20bikesheddable/near/210811193\">said</a>:</p>\n<blockquote>\n<p>Oh yeah, obviously, we're just not gonna specify _which one_, because yes, sometimes there are multiple!</p>\n</blockquote>\n<p>Yep, that's even true of an Intel intrinsic representing several instructions.</p>",
        "id": 210811323,
        "sender_full_name": "Jed",
        "timestamp": 1600729602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"322310\">Jed</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/intrinsically.20bikesheddable/near/210811013\">said</a>:</p>\n<blockquote>\n<p>Existence of gather/scatter varies by architecture and can make a big difference in how one implements an algorithm. We love portability, but using 512b primitives with scatter/gather likely won't run well on hardware that does not have scatter/gather.</p>\n</blockquote>\n<p>I believe this is solvable by implementing a version of the algorithm with and without gather/scatter, and with some combination of <code>#[cfg]</code> and <code>#[target_feature]</code> selecting the appropriate one for your instruction set</p>",
        "id": 210811327,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600729606
    },
    {
        "content": "<p>\"there is an fmadd intrinsic for that and it does not lower to an fmadd and we don't have a good reason why not\" is basically a bug, but we may have a good reason. For instance, \"so, about MMX: basically, that is Cursed Land.\"</p>",
        "id": 210811517,
        "sender_full_name": "Jubilee",
        "timestamp": 1600729782
    },
    {
        "content": "<p>\"at the end of the day if you want a given asm so bad you're gonna have to write the assembly yourself.\"</p>",
        "id": 210811719,
        "sender_full_name": "Jubilee",
        "timestamp": 1600729926
    },
    {
        "content": "<p><em>[catching up]</em> Yeah, so I'd really like to say that the user is performing an \"operation\", as in \"math operation\", and a given operation might expand to different code depending on the target situation. And we don't <em>promise</em> that a given operation is a LLVM intrinsic and/or a CPU intrinsic. If people want to look at the current implementation and see that we're calling LLVM intrinsics that's fine for them, but importantly Rust won't always build with LLVM so we do <em>not</em> want to make LLVM related promises for the long term if we don't have to.</p>",
        "id": 210811731,
        "sender_full_name": "Lokathor",
        "timestamp": 1600729945
    },
    {
        "content": "<p>And importantly, all of this portable SIMD stuff must be portable to systems with no SIMD support at all, so we can't even really promise that <code>f32x4 + f32x4</code> is a single instruction all the time.</p>",
        "id": 210811971,
        "sender_full_name": "Lokathor",
        "timestamp": 1600730105
    },
    {
        "content": "<p>Even with SIMD, f32x8 will pretty much always polyfill to two instructions on SSE</p>",
        "id": 210812102,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1600730216
    },
    {
        "content": "<p>yeah we only have sse/sse2 on by default, so <em>one detail</em> we'll need to have in our tutorial is how to turn that default setting higher.</p>",
        "id": 210812148,
        "sender_full_name": "Lokathor",
        "timestamp": 1600730266
    }
]