[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399416\">Jorge Leitao</span> has marked this topic as unresolved.</p>",
        "id": 274894638,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646946274
    },
    {
        "content": "<p>Hey, I am trying to solve this, but I am hitting a small issue. If we implement </p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;T, const LANES: usize&gt; Simd&lt;T, LANES&gt;\nwhere\n    T: SimdElement + Ord,\n    LaneCount&lt;LANES&gt;: SupportedLaneCount,\n{\n    #[must_use]\n    #[inline]\n    pub fn min(self, rhs: Self) -&gt; Self {\n        self.lanes_gt(rhs).select(rhs, self)\n    }\n\n    #[must_use]\n    #[inline]\n    pub fn max(self, rhs: Self) -&gt; Self {\n        self.lanes_lt(rhs).select(rhs, self)\n    }\n}\n</code></pre></div>\n<p>this won't compile because in the future it may collide with our current implementation of <code>min</code> and <code>max</code> for floats (i,e. if float ever gets <code>Ord</code>. Does anyone know a solution to this? </p>\n<p>An alternative is to only implement this for base types (i8-i64,u8-u64)</p>",
        "id": 274894860,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1646946387
    },
    {
        "content": "<p>the solution (for now) is to only implement it for specific types, rather than generically</p>",
        "id": 274894973,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646946463
    },
    {
        "content": "<p>u8-u64,i8-i64,usize,isize</p>",
        "id": 274895080,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646946501
    },
    {
        "content": "<p>Aside: it should probably be <code>lanes_max</code> since <code>Simd::max</code> already works, getting the one from <code>Ord</code>.</p>",
        "id": 274895105,
        "sender_full_name": "scottmcm",
        "timestamp": 1646946520
    },
    {
        "content": "<p>This collision issue is one of the reasons I'm playing with the idea of separating float and integer vectors, which would allow the functions to be implemented generically</p>",
        "id": 274895158,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646946565
    },
    {
        "content": "<p>The eventual solution might be the negative-impls-in-coherence project, for which work is already ongoing.  Because then we'll add <code>impl !Ord for f32{}</code>, and the overlap rules will work out</p>",
        "id": 274895184,
        "sender_full_name": "scottmcm",
        "timestamp": 1646946581
    },
    {
        "content": "<p>imho we should call it <code>max</code> since people expect <code>Simd::max</code> to be the lanewise version and are surprised</p>",
        "id": 274895187,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646946583
    },
    {
        "content": "<p>I'm very tempted to not implement Ord on vectors with how many times people have gotten confused by it</p>",
        "id": 274895277,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646946616
    },
    {
        "content": "<p>(you could always use arrays)</p>",
        "id": 274895300,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646946630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/incorrect.20max/near/274895300\">said</a>:</p>\n<blockquote>\n<p>(you could always use arrays)</p>\n</blockquote>\n<p>That's what I was thinking, yeah.</p>\n<p>Maybe not even <code>PartialEq</code>...</p>",
        "id": 274895325,
        "sender_full_name": "scottmcm",
        "timestamp": 1646946644
    },
    {
        "content": "<p>Yeah, both the Eq and Ord class of traits</p>",
        "id": 274895350,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646946664
    },
    {
        "content": "<p>imho vectors should be Ord, they should just also have functions that shadow Ord's functions</p>",
        "id": 274895357,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646946671
    },
    {
        "content": "<p>Yeah that's a possibility too. I'm not sure which is better, yet</p>",
        "id": 274895384,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646946695
    },
    {
        "content": "<p>since i don't want to always have to manually implement Ord whenever my type contains a Simd type</p>",
        "id": 274895461,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646946725
    },
    {
        "content": "<p>Shadowing them would make it less likely to use the wrong one probably, though we originally purposely avoided shadowing</p>",
        "id": 274895462,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646946725
    },
    {
        "content": "<p>Oh, and reminder <span class=\"user-mention\" data-user-id=\"399416\">@Jorge Leitao</span> that float vectors should probably get both max/min <em>and</em> <a href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.maximum\">maximum</a>/minimum.  (Yes, the naming is unfortunate.)</p>",
        "id": 274895645,
        "sender_full_name": "scottmcm",
        "timestamp": 1646946832
    },
    {
        "content": "<p>yeah...thanks for that, ieee (though i know there wasn't 1 good option that covers all usecases)</p>",
        "id": 274895869,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646946938
    },
    {
        "content": "<p>here it is: <a href=\"https://github.com/rust-lang/portable-simd/pull/260\">https://github.com/rust-lang/portable-simd/pull/260</a> I limited it to one problem (integers).</p>",
        "id": 274898257,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1646948231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/incorrect.20max/near/274895869\">said</a>:</p>\n<blockquote>\n<p>yeah...thanks for that, ieee</p>\n</blockquote>\n<p>I don't completely blame IEEE for that, actually.  <code>Option::min</code> has the same problem -- arguably even worse, since <code>Option::min</code> is like <code>minimum</code> (preserves a <code>None</code>) but <code>Option::max</code> is like <code>max</code> (ignores a single <code>None</code>).</p>",
        "id": 274911060,
        "sender_full_name": "scottmcm",
        "timestamp": 1646955097
    },
    {
        "content": "<p>(This is why I wish <code>Option</code> wasn't <code>Ord</code>, but obviously it's way too late to change that.)</p>",
        "id": 274911154,
        "sender_full_name": "scottmcm",
        "timestamp": 1646955145
    },
    {
        "content": "<p>I never even considered that Option was Ord and not just PartialOrd</p>",
        "id": 274911854,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646955633
    },
    {
        "content": "<p>I think C++ uses the same ordering</p>",
        "id": 274911882,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646955655
    },
    {
        "content": "<p>But yeah, <code>fold(None, cmp::min)</code> and <code>fold(None, cmp::max)</code> do <em>completely</em> different things, and that really annoys me.</p>",
        "id": 274912077,
        "sender_full_name": "scottmcm",
        "timestamp": 1646955797
    },
    {
        "content": "<p>At least <code>fold(NAN, f32::min)</code> and <code>fold(NAN, f32::max)</code> are consistent.</p>",
        "id": 274912123,
        "sender_full_name": "scottmcm",
        "timestamp": 1646955834
    },
    {
        "content": "<p>what if we had a \"malicious\" implementation of <code>PartialOrd</code></p>",
        "id": 274925416,
        "sender_full_name": "Jubilee",
        "timestamp": 1646966750
    },
    {
        "content": "<p>what do you mean by that?</p>",
        "id": 274925600,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646966949
    },
    {
        "content": "<p>I think <code>Simd&lt;T: Ord, N&gt;</code> should implement <code>Ord</code> lexicographically for ease of insertion in <code>BinaryHeap</code> and <code>BTree*</code> and <code>min</code>/<code>max</code>/<code>clamp</code>/etc. should be shadowed by inherent functions.</p>",
        "id": 274925871,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646967242
    },
    {
        "content": "<p>Well okay.</p>",
        "id": 274927204,
        "sender_full_name": "Jubilee",
        "timestamp": 1646968718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/incorrect.20max/near/274925600\">said</a>:</p>\n<blockquote>\n<p>what do you mean by that?</p>\n</blockquote>\n<p>this was mostly a joke but it would be \"just do elementwise <code>min</code> for <code>Ord::min</code> <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span> \" yes</p>",
        "id": 274927278,
        "sender_full_name": "Jubilee",
        "timestamp": 1646968806
    },
    {
        "content": "<p>Straight to jail</p>",
        "id": 274927382,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646968992
    },
    {
        "content": "<p>hahahaha.</p>",
        "id": 275034596,
        "sender_full_name": "Jubilee",
        "timestamp": 1647033289
    },
    {
        "content": "<p>incoming: <a href=\"https://github.com/rust-lang/rust/pull/94899\">https://github.com/rust-lang/rust/pull/94899</a></p>",
        "id": 275127021,
        "sender_full_name": "Jubilee",
        "timestamp": 1647136093
    },
    {
        "content": "<p>I'm not sure we're really finished with dealing with this yet?  Right now Simd has both <code>lanes_eq</code> and <code>eq</code>, for example...</p>",
        "id": 275127337,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647136699
    },
    {
        "content": "<p>Technically that's on <code>PartialEq</code>, not <code>Ord</code>.</p>",
        "id": 275127362,
        "sender_full_name": "Jubilee",
        "timestamp": 1647136785
    },
    {
        "content": "<p>Right, I'm just suggesting we're in a pretty inconsistent state that might be even more confusing</p>",
        "id": 275127507,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647136886
    },
    {
        "content": "<p>We're in an <strong>eventually</strong> consistent state. <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span></p>",
        "id": 275127519,
        "sender_full_name": "Jubilee",
        "timestamp": 1647136918
    },
    {
        "content": "<p>But I agree that we should try to fix up things sooner rather than later.</p>",
        "id": 275127656,
        "sender_full_name": "Jubilee",
        "timestamp": 1647137136
    },
    {
        "content": "<p>I'm just not sure we should be putting this particular state out for public consumption, explaining \"sometimes you use <code>lanes_eq</code>, sometimes you use <code>eq</code>\" probably isn't going to give anyone much confidence in the implementation</p>",
        "id": 275127773,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647137318
    },
    {
        "content": "<p>The other reason I am pushing it atm is because <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> wants to run tests on the latest libstd with SIMD stuff with Miri, and that requires some of the patches he sent us to propagate.</p>",
        "id": 275127923,
        "sender_full_name": "Jubilee",
        "timestamp": 1647137619
    },
    {
        "content": "<p>Ah right</p>",
        "id": 275129719,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647140735
    }
]