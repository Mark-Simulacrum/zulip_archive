[
    {
        "content": "<p>what's the semantics for our <code>f32 as i32</code> casts, again?</p>",
        "id": 234540653,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421387
    },
    {
        "content": "<p>Didn't I already make <code>to_int_unchecked</code>?</p>",
        "id": 234540664,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421392
    },
    {
        "content": "<p>Good question</p>",
        "id": 234540681,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421401
    },
    {
        "content": "<p>I would <em>like</em> to be able to overload the <code>as</code> operator, tbh.</p>",
        "id": 234540904,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421482
    },
    {
        "content": "<p>I think the general concensus is that <code>as</code> was a mistake for floats lol</p>",
        "id": 234540970,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421515
    },
    {
        "content": "<p>Precisely because the semantics are so unclear</p>",
        "id": 234541065,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421535
    },
    {
        "content": "<p>I know it's saturating.</p>",
        "id": 234541330,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421638
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// Since Rust 1.45, the `as` keyword performs a *saturating cast* when casting from float to int.</span>\n<span class=\"w\">    </span><span class=\"c1\">// If the floating point value exceeds the upper bound or is less than the lower bound, the returned value will be equal to the bound crossed.</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// 300.0 is 255</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"300.0 is {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">300.0_</span><span class=\"k\">f32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// -100.0 as u8 is 0</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"-100.0 as u8 is {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">100.0_</span><span class=\"k\">f32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// nan as u8 is 0</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"nan as u8 is {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span>::<span class=\"n\">NAN</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234541546,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421709
    },
    {
        "content": "<p>Okay, I see.</p>",
        "id": 234541553,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421711
    },
    {
        "content": "<p>it's saturating now, yes. used to be a soundness hole</p>",
        "id": 234541629,
        "sender_full_name": "Lokathor",
        "timestamp": 1618421738
    },
    {
        "content": "<p>Is it truncating?</p>",
        "id": 234541665,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421755
    },
    {
        "content": "<p>believe so</p>",
        "id": 234541738,
        "sender_full_name": "Lokathor",
        "timestamp": 1618421772
    },
    {
        "content": "<p>truncate then saturate</p>",
        "id": 234541787,
        "sender_full_name": "Lokathor",
        "timestamp": 1618421790
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/issues/38\">https://github.com/rust-lang/stdsimd/issues/38</a></p>",
        "id": 234541881,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> have you seen this issue?</p>",
        "id": 234541902,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421836
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"k\">f32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// -1</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">1.1</span><span class=\"k\">f32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// -1</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.1</span><span class=\"k\">f32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 1</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.6</span><span class=\"k\">f32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 1</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.6</span><span class=\"k\">f32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 0</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234541929,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421848
    },
    {
        "content": "<p>yup! I have indeed seen that issue.</p>",
        "id": 234541955,
        "sender_full_name": "Jubilee",
        "timestamp": 1618421865
    },
    {
        "content": "<p>Okay, just making sure. We already have the conversion so we just need the checked version</p>",
        "id": 234542248,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618421974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Let me overload <code>as</code> <span aria-label=\"smiling imp\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling imp\">:smiling_imp:</span></p>",
        "id": 234542538,
        "sender_full_name": "Jubilee",
        "timestamp": 1618422069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/.22Missing.22.20simd.20intrinsics/near/234542248\">said</a>:</p>\n<blockquote>\n<p>Okay, just making sure. We already have the conversion so we just need the checked version</p>\n</blockquote>\n<p>is <code>to_int</code> supposed to be equivalent to <code>as</code>?</p>",
        "id": 234542927,
        "sender_full_name": "Jubilee",
        "timestamp": 1618422211
    },
    {
        "content": "<p>It's supposed to be equivalent to std::f32::to_int (without the trait magic for different integer sizes, though)</p>",
        "id": 234543813,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618422443
    },
    {
        "content": "<p>All that means is we need to check that the value is representable as the integer before converting, and return None otherwise</p>",
        "id": 234544009,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618422498
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.to_int\">https://doc.rust-lang.org/nightly/std/primitive.f32.html#method.to_int</a> que?</p>",
        "id": 234544373,
        "sender_full_name": "Jubilee",
        "timestamp": 1618422624
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 234544731,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618422772
    }
]