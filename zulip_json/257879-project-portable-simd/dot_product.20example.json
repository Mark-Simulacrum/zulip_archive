[
    {
        "content": "<p>Alright - I'm back on the saddle and trying to flesh together <a href=\"https://github.com/rust-lang/portable-simd/pull/128\">this code</a>.</p>\n<p>After a rebase, I don't know how I can get around this error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/p/r/s/c/core_simd <span class=\"o\">(</span>dotprodexample<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"m\">101</span><span class=\"o\">]</span>&gt; cargo <span class=\"nb\">test</span>\n   Compiling core_simd v0.1.0 <span class=\"o\">(</span>/home/mrg/projects/rust/stdsimd/crates/core_simd<span class=\"o\">)</span>\nerror: unrecognized platform-specific intrinsic <span class=\"k\">function</span>: <span class=\"sb\">`</span>simd_as<span class=\"sb\">`</span>\n  --&gt; crates/core_simd/src/intrinsics.rs:72:5\n   <span class=\"p\">|</span>\n<span class=\"m\">72</span> <span class=\"p\">|</span>     pub<span class=\"o\">(</span>crate<span class=\"o\">)</span> fn simd_as&lt;T, U&gt;<span class=\"o\">(</span>x: T<span class=\"o\">)</span> -&gt; U<span class=\"p\">;</span>\n   <span class=\"p\">|</span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: could not compile <span class=\"sb\">`</span>core_simd<span class=\"sb\">`</span> due to previous error\n</code></pre></div>\n<p>I'm on <code>cargo version 1.58.0-nightly</code> and just rebased to <code>main</code> branch.</p>",
        "id": 276743415,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648325340
    },
    {
        "content": "<p><code>rustup update nightly</code></p>",
        "id": 276743488,
        "sender_full_name": "Jubilee",
        "timestamp": 1648325410
    },
    {
        "content": "<p><code>rustup update nightly --force</code> because the other choked on some <code>rls</code> stuff.</p>",
        "id": 276743516,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648325488
    },
    {
        "content": "<p>Ah, you should probably remove rls as a component.</p>",
        "id": 276743569,
        "sender_full_name": "Jubilee",
        "timestamp": 1648325541
    },
    {
        "content": "<p>Oh, will do.</p>",
        "id": 276743581,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648325560
    },
    {
        "content": "<p>Alright, I think we're in business.</p>",
        "id": 276744220,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648326573
    },
    {
        "content": "<p>What's the easiest way to make a vector of 1024 random ints/floats?</p>",
        "id": 276747983,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648331814
    },
    {
        "content": "<p>Ah, <code>let x = [2.0; 1000];</code> gets me what I want.</p>",
        "id": 276748273,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648332122
    },
    {
        "content": "<p><code>rand::random::&lt;[[f32; 32]; 32]&gt;().into_iter().flatten().collect()</code>, maybe?</p>",
        "id": 276748311,
        "sender_full_name": "scottmcm",
        "timestamp": 1648332155
    },
    {
        "content": "<p>(<a href=\"https://docs.rs/rand/latest/rand/fn.random.html#provided-implementations\">https://docs.rs/rand/latest/rand/fn.random.html#provided-implementations</a> suggests it's not const-generic yet, thus the dance to stay at 32.)</p>",
        "id": 276748321,
        "sender_full_name": "scottmcm",
        "timestamp": 1648332175
    },
    {
        "content": "<p>oh, wait, <code>std::iter::repeat_with(rand::random).take(1024).collect()</code> is way easier.</p>",
        "id": 276748393,
        "sender_full_name": "scottmcm",
        "timestamp": 1648332265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Thanks, I think the <code>[2.0; 1000].to_vec()</code> approach will do for now because it means inspecting the tests is easy.</p>",
        "id": 276748588,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648332512
    },
    {
        "content": "<p><strong>ack</strong> I see we don't have fma tests <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276748619,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648332602
    },
    {
        "content": "<p>Does anyone have an example of the API?</p>",
        "id": 276748732,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648332735
    },
    {
        "content": "<p>Ah, if you don't need random then <code>vec![2.0; 1000]</code> works.</p>",
        "id": 276748921,
        "sender_full_name": "scottmcm",
        "timestamp": 1648333055
    },
    {
        "content": "<p>oooh, neat, I hd forgotten that one.</p>",
        "id": 276749439,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648333883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/276748619\">said</a>:</p>\n<blockquote>\n<p><strong>ack</strong> I see we don't have fma tests <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>are you looking for mul_add?</p>",
        "id": 276749782,
        "sender_full_name": "Jubilee",
        "timestamp": 1648334359
    },
    {
        "content": "<p>Think so. Afk for a bit.</p>",
        "id": 276749935,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648334540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Ah, I'm not getting how to use it here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// A lot of knowledgeable use of SIMD comes from knowing specific instructions that are</span>\n<span class=\"c1\">// available - let's try to use the `mul_add` instruction, which is the fused-multiply-add we were looking for.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dot_prod_simd_2</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// TODO handle remainder when a.len() % 4 != 0</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">array_chunks</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">array_chunks</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276752045,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648337422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/276752045\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> Ah, I'm not getting how to use it here:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dot_prod_simd_2</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It's an function implemented via the StdFloat trait on vectors of floats, so you won't find it as an free function in the global namespace.</p>",
        "id": 276752178,
        "sender_full_name": "Jubilee",
        "timestamp": 1648337640
    },
    {
        "content": "<p>thus it looks like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">StdFloat</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276752236,
        "sender_full_name": "Jubilee",
        "timestamp": 1648337690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/276752236\">said</a>:</p>\n<blockquote>\n<p>thus it looks like</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">StdFloat</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hmm, I get an error here for <code>unresolved import</code>.</p>",
        "id": 276752378,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648337934
    },
    {
        "content": "<p>mmmm, you probably need a different path?</p>",
        "id": 276753430,
        "sender_full_name": "Jubilee",
        "timestamp": 1648339299
    },
    {
        "content": "<p>show the full error?</p>",
        "id": 276753431,
        "sender_full_name": "Jubilee",
        "timestamp": 1648339302
    },
    {
        "content": "<p>Worked for me with that path: <a href=\"https://rust.godbolt.org/z/GKoxTKjGW\">https://rust.godbolt.org/z/GKoxTKjGW</a></p>",
        "id": 276753554,
        "sender_full_name": "scottmcm",
        "timestamp": 1648339455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">I</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">mrg</span><span class=\"o\">@</span><span class=\"n\">JuliaLap</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">p</span><span class=\"o\">/</span><span class=\"n\">r</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">dotprodexample</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">101</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">core_simd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">mrg</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">stdsimd</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0599</span><span class=\"p\">]</span>: <span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">mul_add</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">core_simd</span>::<span class=\"n\">Simd</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">dot_product</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">84</span>:<span class=\"mi\">26</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                          </span><span class=\"o\">^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core_simd</span>::<span class=\"n\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">warning</span>: <span class=\"nc\">unused</span><span class=\"w\"> </span><span class=\"n\">import</span>: <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">StdFloat</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">dot_product</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">76</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">76</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">simd</span>::<span class=\"n\">StdFloat</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"cp\">#[warn(unused_imports)]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0599</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"err\">`</span><span class=\"n\">core_simd</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"s\">\"dot_product\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">generated</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">warning</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core_simd</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">warning</span><span class=\"w\"> </span><span class=\"n\">emitted</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276753657,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648339642
    },
    {
        "content": "<p>huh</p>",
        "id": 276754158,
        "sender_full_name": "Jubilee",
        "timestamp": 1648340456
    },
    {
        "content": "<p>…whelp.</p>",
        "id": 276754166,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648340480
    },
    {
        "content": "<p>oh<br>\nuse std_float::stdFloat;</p>",
        "id": 276754173,
        "sender_full_name": "Jubilee",
        "timestamp": 1648340503
    },
    {
        "content": "<p>Sweet! The arg order punk'd me for a bit but it's cool now <span aria-label=\"gym\" class=\"emoji emoji-1f3cb\" role=\"img\" title=\"gym\">:gym:</span></p>",
        "id": 276926745,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648499106
    },
    {
        "content": "<p>Alright, I think this isn’t too bad - I just need a way to run the different dot_products with benchmarks. What’s the recommended way for that?</p>",
        "id": 277035878,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648573365
    },
    {
        "content": "<p><a href=\"https://bheisler.github.io/criterion.rs/book/\">https://bheisler.github.io/criterion.rs/book/</a> is the usual recommendation for making trustworthy benchmarks.</p>",
        "id": 277037604,
        "sender_full_name": "scottmcm",
        "timestamp": 1648574121
    },
    {
        "content": "<p>Sweet. I’ll look into that. Is that a dependency that can be added only to the <code>examples</code> crate?</p>",
        "id": 277039058,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648574731
    },
    {
        "content": "<p>yeah it's a dev-dependency</p>",
        "id": 277039859,
        "sender_full_name": "Lokathor",
        "timestamp": 1648575071
    },
    {
        "content": "<p>See the example at <a href=\"https://bheisler.github.io/criterion.rs/book/user_guide/html_report/Fibonacci2/report/index.html\">https://bheisler.github.io/criterion.rs/book/user_guide/html_report/Fibonacci2/report/index.html</a> for why it's so much better than things like the built-in <code>#[bench]</code>.  The violin comparison plots, the regression line to confirm linearity, ... -- it's so important for making a convincing case and ensuring that the benchmark is actually working.</p>",
        "id": 277045501,
        "sender_full_name": "scottmcm",
        "timestamp": 1648577718
    },
    {
        "content": "<p>Cool cool. I’ll see if I can include output asm to confirm the data movement suspicions and build the proper narrative development.</p>",
        "id": 277052906,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648581507
    },
    {
        "content": "<p>OK I think benchmarking will be done later in a second PR - it seems sensible to have examples first and then setup the proper infra for benches and such in a second PR</p>",
        "id": 277071521,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648592111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <span aria-label=\"balloon\" class=\"emoji emoji-1f388\" role=\"img\" title=\"balloon\">:balloon:</span> : PR's up!</p>",
        "id": 277072456,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648592637
    },
    {
        "content": "<p>aha! brain thaw.</p>",
        "id": 277072550,
        "sender_full_name": "Jubilee",
        "timestamp": 1648592684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> it's pestering you to rustfmt</p>",
        "id": 277072614,
        "sender_full_name": "Jubilee",
        "timestamp": 1648592748
    },
    {
        "content": "<p><code>rustfmt</code> gods appeased <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 277072760,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648592873
    },
    {
        "content": "<p>praise <code>rustfmt</code></p>",
        "id": 277072875,
        "sender_full_name": "Cyborus",
        "timestamp": 1648592924
    },
    {
        "content": "<p>I just need to add in <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> 's example for the vanilla version and then it should be good.</p>",
        "id": 277073930,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648593586
    },
    {
        "content": "<p>hm, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Add</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Rust does not like this idiom, but I've not seen it before.</p>",
        "id": 277074337,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648593850
    },
    {
        "content": "<p>That should be fine, vectors also implement Sum</p>",
        "id": 277076377,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1648595603
    },
    {
        "content": "<p>I get </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/p/r/s/c/c/examples <span class=\"o\">(</span>dotprodexample<span class=\"o\">)</span>&gt; cargo <span class=\"nb\">test</span> --example dot_product\n   Compiling core_simd v0.1.0 <span class=\"o\">(</span>/home/mrg/projects/rust/stdsimd/crates/core_simd<span class=\"o\">)</span>\nerror<span class=\"o\">[</span>E0423<span class=\"o\">]</span>: expected value, found trait <span class=\"sb\">`</span>std::ops::Add<span class=\"sb\">`</span>\n   --&gt; crates/core_simd/examples/dot_product.rs:122:34\n    <span class=\"p\">|</span>\n<span class=\"m\">122</span> <span class=\"p\">|</span>         .fold<span class=\"o\">(</span>f32x4::splat<span class=\"o\">(</span><span class=\"m\">0</span>.0<span class=\"o\">)</span>, std::ops::Add<span class=\"o\">)</span>\n    <span class=\"p\">|</span>                                  ^^^^^^^^^^^^^ not a value\n\nwarning: unused import: <span class=\"sb\">`</span>std::ops::Add<span class=\"sb\">`</span>\n   --&gt; crates/core_simd/examples/dot_product.rs:115:5\n    <span class=\"p\">|</span>\n<span class=\"m\">115</span> <span class=\"p\">|</span> use std::ops::Add<span class=\"p\">;</span>\n    <span class=\"p\">|</span>     ^^^^^^^^^^^^^\n    <span class=\"p\">|</span>\n    <span class=\"o\">=</span> note: <span class=\"sb\">`</span><span class=\"c1\">#[warn(unused_imports)]` on by default</span>\n\nFor more information about this error, try <span class=\"sb\">`</span>rustc --explain E0423<span class=\"sb\">`</span>.\nwarning: <span class=\"sb\">`</span>core_simd<span class=\"sb\">`</span> <span class=\"o\">(</span>example <span class=\"s2\">\"dot_product\"</span> <span class=\"nb\">test</span><span class=\"o\">)</span> generated <span class=\"m\">1</span> warning\nerror: could not compile <span class=\"sb\">`</span>core_simd<span class=\"sb\">`</span> due to previous error<span class=\"p\">;</span> <span class=\"m\">1</span> warning emitted\n</code></pre></div>",
        "id": 277076628,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648595818
    },
    {
        "content": "<p>ah, the issue is that the import and that path is redundant.</p>",
        "id": 277076640,
        "sender_full_name": "Jubilee",
        "timestamp": 1648595847
    },
    {
        "content": "<p>the import makes it into <code>Add</code></p>",
        "id": 277076644,
        "sender_full_name": "Jubilee",
        "timestamp": 1648595857
    },
    {
        "content": "<p>should that be <code>.fold(f32x4::splat(0.0), std::ops::Add:add)</code>since <code>Add</code> is just a trait?</p>",
        "id": 277076757,
        "sender_full_name": "Cyborus",
        "timestamp": 1648595964
    },
    {
        "content": "<p>prooobably</p>",
        "id": 277076770,
        "sender_full_name": "Jubilee",
        "timestamp": 1648595988
    },
    {
        "content": "<p>(but with one more colon)</p>",
        "id": 277076971,
        "sender_full_name": "scottmcm",
        "timestamp": 1648596153
    },
    {
        "content": "<p>oops</p>",
        "id": 277076975,
        "sender_full_name": "Cyborus",
        "timestamp": 1648596159
    },
    {
        "content": "<p>and that's is why i love RA</p>",
        "id": 277077023,
        "sender_full_name": "Cyborus",
        "timestamp": 1648596237
    },
    {
        "content": "<p>Ah, <code>std::ops::Add</code> is the trait, <code>std::ops::Add::add</code> is the actual op.</p>",
        "id": 277077094,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648596279
    },
    {
        "content": "<p>yes.</p>",
        "id": 277077105,
        "sender_full_name": "Jubilee",
        "timestamp": 1648596287
    },
    {
        "content": "<p><span aria-label=\"writing\" class=\"emoji emoji-270d\" role=\"img\" title=\"writing\">:writing:</span> <em>brb <a href=\"https://miguelraz.github.io/diary/\">writing in Diary</a></em></p>",
        "id": 277077128,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648596304
    },
    {
        "content": "<p>Ah, I missed adding some tests.</p>",
        "id": 277077918,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648596912
    },
    {
        "content": "<p>Added!</p>",
        "id": 277078164,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648597106
    },
    {
        "content": "<p>(Added the <code>mul_add</code> arg order to the diary because grrrr...)</p>",
        "id": 277078350,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648597245
    },
    {
        "content": "<p>Alright, now I'm trying to add the output assembly with <code>cargo-asm</code>.<br>\nTheir examples says to try</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo asm lib_crate::bar::double_n --rust\n</code></pre></div>\n<p>and so I'm trying to do</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo asm core_simd::examples::dot_prod_scalar_0 --rust\n</code></pre></div>\n<p>but I can't find the function.</p>",
        "id": 277318052,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648749508
    },
    {
        "content": "<p>(I'm calling this within the <code>/examples/</code> folder.)</p>",
        "id": 277318172,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648749594
    },
    {
        "content": "<p>I think each example is compiled as its own crate sharing the name of the file, so I think it would be:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo asm dot_product::dot_prod_scalar_0 --rust\n</code></pre></div>\n<p>if <code>cargo asm</code> works with examples at all (which I don't know)</p>",
        "id": 277318492,
        "sender_full_name": "Cyborus",
        "timestamp": 1648749733
    },
    {
        "content": "<p>Hmmm. I'm not getting that to work. I might have to actually refactor it into separate mini crates.</p>",
        "id": 277319220,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648750087
    },
    {
        "content": "<p>I just reallly, <em>really</em> want to be able to have the assembly printed for each tight loop in the <code>dot_product.rs</code> example.</p>",
        "id": 277319335,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648750156
    },
    {
        "content": "<p>after a bit of testing myself, it seems it doesn't support examples</p>",
        "id": 277320257,
        "sender_full_name": "Cyborus",
        "timestamp": 1648750683
    },
    {
        "content": "<p>running <code>&gt; cargo asm</code> on its own will list all available functions, and doing that in the example directory just lists the functions from the main crate</p>",
        "id": 277320359,
        "sender_full_name": "Cyborus",
        "timestamp": 1648750732
    },
    {
        "content": "<p><span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 277320432,
        "sender_full_name": "Cyborus",
        "timestamp": 1648750775
    },
    {
        "content": "<p>Yeah ran into the same thing - and actually, there's not <em>that</em> many functions listed there. IDK if it is a heuristic cutoff or if not all of them are exported right now.</p>",
        "id": 277320554,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648750818
    },
    {
        "content": "<p>hmm, true. there's way more than just 6 functions in the crate I'm testing it on but that's all its showing.</p>",
        "id": 277320689,
        "sender_full_name": "Cyborus",
        "timestamp": 1648750900
    },
    {
        "content": "<p>hmmmm - untouched since August 2018. Maybe there's another option here.</p>",
        "id": 277320803,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648750952
    },
    {
        "content": "<p>I looked through the issues on that and one of them linked to a maintained fork that has a most recent commit from feb</p>",
        "id": 277320878,
        "sender_full_name": "Cyborus",
        "timestamp": 1648751002
    },
    {
        "content": "<p><a href=\"https://github.com/taiki-e/cargo-asm\">https://github.com/taiki-e/cargo-asm</a></p>",
        "id": 277320889,
        "sender_full_name": "Cyborus",
        "timestamp": 1648751008
    },
    {
        "content": "<p>Oh neat - I don't know how to include <code>fork</code> repos in the crate though.</p>",
        "id": 277320990,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648751047
    },
    {
        "content": "<p>wdym?</p>",
        "id": 277321055,
        "sender_full_name": "Cyborus",
        "timestamp": 1648751096
    },
    {
        "content": "<p>I only know how to do <code>cargo add foo</code> when <code>foo</code> is registered on <code>crates.io</code>.</p>",
        "id": 277321102,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648751125
    },
    {
        "content": "<p>You might also be able to do something like <code>cargo rustc -- --emit=asm</code>.  (Or <code>RUSTFLAGS=\"--emit=llvm-ir\" cargo build</code> or ....)</p>",
        "id": 277321113,
        "sender_full_name": "scottmcm",
        "timestamp": 1648751131
    },
    {
        "content": "<p>You can clone the repo and run <code>cargo install --path .</code></p>",
        "id": 277321265,
        "sender_full_name": "Cyborus",
        "timestamp": 1648751197
    },
    {
        "content": "<blockquote>\n<p>You might also be able to do something like <code>cargo rustc -- --emit=asm</code>.</p>\n</blockquote>\n<p>that worked! <code>cargo rustc --examples -- --emit=asm</code> will create a <code>./target/debug/examples/{name}.s</code> file</p>",
        "id": 277322015,
        "sender_full_name": "Cyborus",
        "timestamp": 1648751585
    },
    {
        "content": "<p>ok I can't get <code>cargo rustc --examples -- --emit=asm</code> to work <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 277324070,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648752548
    },
    {
        "content": "<p>oh no</p>",
        "id": 277324096,
        "sender_full_name": "Cyborus",
        "timestamp": 1648752561
    },
    {
        "content": "<p>what's going on?</p>",
        "id": 277324113,
        "sender_full_name": "Cyborus",
        "timestamp": 1648752567
    },
    {
        "content": "<p>ok<br>\n<code>cargo rust --release -- --emit=asm</code><br>\ncompiles and finishes, but then <code>.../target/release/examples</code> has nothing inside of it.</p>",
        "id": 277324894,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648752913
    },
    {
        "content": "<p>(Thanks for the support, I will write this down in the <code>README.md</code> when I finish to spare others the same grief)</p>",
        "id": 277324951,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648752936
    },
    {
        "content": "<p>did you pass the <code>--examples</code> flag?</p>",
        "id": 277325124,
        "sender_full_name": "Cyborus",
        "timestamp": 1648752988
    },
    {
        "content": "<p>yup</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/p/r/s/c/core_simd <span class=\"o\">(</span>assemblyexamples<span class=\"o\">)</span>&gt; ls\nCargo.toml  LICENSE-APACHE  src    webdriver.json\nexamples    LICENSE-MIT     tests\n<span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/p/r/s/c/core_simd <span class=\"o\">(</span>assemblyexamples<span class=\"o\">)</span>&gt; cargo rustc --examples -- --emit<span class=\"o\">=</span>asm\nerror: extra arguments to <span class=\"sb\">`</span>rustc<span class=\"sb\">`</span> can only be passed to one target, consider filtering\nthe package by passing, e.g., <span class=\"sb\">`</span>--lib<span class=\"sb\">`</span> or <span class=\"sb\">`</span>--bin NAME<span class=\"sb\">`</span> to specify a single target\n</code></pre></div>",
        "id": 277325250,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753037
    },
    {
        "content": "<p>lemme try it with Scott's RUSTFLAGS suggestion</p>",
        "id": 277325324,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753080
    },
    {
        "content": "<p>what directory are you checking for it in?</p>",
        "id": 277325754,
        "sender_full_name": "Cyborus",
        "timestamp": 1648753266
    },
    {
        "content": "<p>release or debug?</p>",
        "id": 277325776,
        "sender_full_name": "Cyborus",
        "timestamp": 1648753272
    },
    {
        "content": "<p>^ this recent one was at the top level <code>core_simd</code> (you can see it in the prompt).</p>",
        "id": 277325847,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753309
    },
    {
        "content": "<p>I'm trying to do release (I'm guessing debug won't run the autovectorizer, but I will check it in a bit)</p>",
        "id": 277325923,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753331
    },
    {
        "content": "<p>did you run <code>cargo rustc --examples -- --emit=asm</code> or <code>cargo rustc --examples --release -- --emit=asm</code>?</p>",
        "id": 277326386,
        "sender_full_name": "Cyborus",
        "timestamp": 1648753589
    },
    {
        "content": "<p>sorry i'm asking so many questions, just trying to understand exactly what's going on</p>",
        "id": 277326535,
        "sender_full_name": "Cyborus",
        "timestamp": 1648753680
    },
    {
        "content": "<p>No worries, ask  away!</p>",
        "id": 277326700,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753761
    },
    {
        "content": "<p>I got this to work: <code>[I] mrg@JuliaLap ~/p/r/s/c/core_simd (assemblyexamples)&gt; RUSTFLAGS=\"--emit=asm\" cargo test --release --examples dot_product.rs</code></p>",
        "id": 277326711,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753769
    },
    {
        "content": "<p>...but it produces a 760k line assembly file soooooo yeah.</p>",
        "id": 277326749,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753788
    },
    {
        "content": "<p>I'm going to try using the <code>cargo asm</code> crate after all.</p>",
        "id": 277326766,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753801
    },
    {
        "content": "<p>oh heck</p>",
        "id": 277326833,
        "sender_full_name": "Cyborus",
        "timestamp": 1648753816
    },
    {
        "content": "<p>yup.</p>",
        "id": 277327029,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648753909
    },
    {
        "content": "<p>Well this is even more confusing because I can't even find <code>dot_prod_scalar_0</code> in the outputted <code>target/release/dot_product-...-.s</code> files <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 277328170,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648754506
    },
    {
        "content": "<p>I was gonna suggest maybe they got optimized out but they're not even showing up in a debug build...</p>",
        "id": 277329961,
        "sender_full_name": "Cyborus",
        "timestamp": 1648755526
    },
    {
        "content": "<p>I’m guessing they should go into main().</p>",
        "id": 277330027,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648755555
    },
    {
        "content": "<p>possibly</p>",
        "id": 277330113,
        "sender_full_name": "Cyborus",
        "timestamp": 1648755602
    },
    {
        "content": "<p>it often helps to add <code>#[inline(never)]</code> to ensure your function shows up in the output.</p>",
        "id": 277330251,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648755671
    },
    {
        "content": "<p>Can examples be non-binaries?  Usually if I'm looking at assembly I do it by <em>not</em> having a <code>main</code>, and thus all the <code>pub</code> functions will be there.</p>\n<p>(And for extra fun, <code>#[inline(never)]</code> doesn't actually keep LLVM from inlining things in all situations.)</p>",
        "id": 277330819,
        "sender_full_name": "scottmcm",
        "timestamp": 1648756027
    },
    {
        "content": "<p><code>#[inline(please_dont)]</code></p>",
        "id": 277330953,
        "sender_full_name": "Cyborus",
        "timestamp": 1648756106
    },
    {
        "content": "<p>yes, you can make examples that are libs</p>",
        "id": 277331273,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648756259
    },
    {
        "content": "<p>i dont know why you would though</p>",
        "id": 277331277,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648756262
    },
    {
        "content": "<p>actually, <code>#[inline(minimal)]</code> would make sense</p>",
        "id": 277331340,
        "sender_full_name": "Cyborus",
        "timestamp": 1648756289
    },
    {
        "content": "<p>oops sorry getting off track</p>",
        "id": 277331351,
        "sender_full_name": "Cyborus",
        "timestamp": 1648756294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I’m up for examples being whatever as long as newbies like me can inspect the assembly in a bash 1liner</p>",
        "id": 277331441,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648756329
    },
    {
        "content": "<p>you might be able to paste the relevant funciton into <a href=\"https://rust.godbolt.org/\">https://rust.godbolt.org/</a>. i heavily use that when iterating on optimizations</p>",
        "id": 277331535,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648756380
    },
    {
        "content": "<p>it can be a pain in the ass though</p>",
        "id": 277331554,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648756389
    },
    {
        "content": "<p>I thought I could use something liek that, but idk how up to date their stdsimd libs are</p>",
        "id": 277331614,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648756430
    },
    {
        "content": "<p>It's usually fairly recent -- you can see from the <code>i</code>:<br>\n<a href=\"/user_uploads/4715/IcYV4ZezHs8trsc-_OSmbGgU/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/IcYV4ZezHs8trsc-_OSmbGgU/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/IcYV4ZezHs8trsc-_OSmbGgU/image.png\"></a></div>",
        "id": 277339526,
        "sender_full_name": "scottmcm",
        "timestamp": 1648760533
    },
    {
        "content": "<p>neat stuff. I’ll check it when I get back from lunch.</p>",
        "id": 277339592,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648760576
    },
    {
        "content": "<p>grrrrr</p>",
        "id": 277347459,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648765060
    },
    {
        "content": "<p>Does anyone have a \"hello world\" working on rust godbolt?</p>",
        "id": 277347471,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648765072
    },
    {
        "content": "<p>iirc you could get <code>cargo rustc</code> to work if you specify on the command line which example to compile, rather than passing <code>--examples</code> which tells it to compile all examples.</p>",
        "id": 277347618,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648765193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> thanks, I'll give it another shot in a sec</p>",
        "id": 277347783,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648765285
    },
    {
        "content": "<p>Sweet.</p>",
        "id": 277350085,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648766816
    },
    {
        "content": "<p>Anyone know why it says that <code>dot_prod_scalar_0</code> is never used here?<br>\n<a href=\"https://rust.godbolt.org/z/K3o9jPrds\">https://rust.godbolt.org/z/K3o9jPrds</a></p>",
        "id": 277350112,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648766835
    },
    {
        "content": "<p>because it thinks you're compiling a library rather than a binary and none of those functions are <code>pub</code>?</p>",
        "id": 277350313,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648766963
    },
    {
        "content": "<p>i'd delete <code>main</code> and change the functions to <code>pub</code></p>",
        "id": 277350341,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648766984
    },
    {
        "content": "<p>Oh...</p>",
        "id": 277350353,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648766994
    },
    {
        "content": "<p>Thanks for the tips, my scripting brain is trying to catch up with all these pub/mod/crate/exports hoops - I'm very much not used to them.</p>",
        "id": 277350449,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648767035
    },
    {
        "content": "<p>Oh wow - I don't even need a <code>main</code>, huh.</p>",
        "id": 277350694,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648767196
    },
    {
        "content": "<p>Alright, now I don't know how to get <code>use core_simd::*;</code> to work on rust godbolt.</p>",
        "id": 277350842,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648767277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> any reccs here?</p>",
        "id": 277350854,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648767293
    },
    {
        "content": "<p><code>use core::simd::*</code> and switch the compiler to nightly?</p>",
        "id": 277350897,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648767326
    },
    {
        "content": "<p>or <code>use std::simd::*</code></p>",
        "id": 277350923,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648767353
    },
    {
        "content": "<p>Hmm - <a href=\"https://rust.godbolt.org/z/bfPozMEPv\">tried both, no luck yet.</a></p>",
        "id": 277351172,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648767528
    },
    {
        "content": "<p>works for me: <a href=\"https://rust.godbolt.org/z/a8K14Gezo\">https://rust.godbolt.org/z/a8K14Gezo</a></p>",
        "id": 277351452,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648767697
    },
    {
        "content": "<p>you forgot to switch to the nightly compiler.</p>",
        "id": 277351524,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648767748
    },
    {
        "content": "<p>and the <code>use</code> needs to be <code>std::simd::*</code>, not <code>std::*</code></p>",
        "id": 277351564,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648767800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/277351452\">said</a>:</p>\n<blockquote>\n<p>works for me: <a href=\"https://rust.godbolt.org/z/a8K14Gezo\">https://rust.godbolt.org/z/a8K14Gezo</a></p>\n</blockquote>\n<p>Right, I had tried both the nightly and the beta compilers, thanks for the help &lt;3</p>",
        "id": 277351633,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648767849
    },
    {
        "content": "<p>Wait - that's <code>portable_simd</code>. Is that <code>== stdsimd</code>?</p>",
        "id": 277351762,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648767970
    },
    {
        "content": "<p>yes</p>",
        "id": 277351797,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648767993
    },
    {
        "content": "<p>but not <code>std::arch</code> (confusingly also called stdsimd)</p>",
        "id": 277351827,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648768035
    },
    {
        "content": "<p>Ok, I feel like I can cut myself some slack as to the confusion here then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> jajajaj</p>",
        "id": 277352009,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648768167
    },
    {
        "content": "<p>Yeah, that's why I figured we would want to make the rename, ultimately.</p>",
        "id": 277352480,
        "sender_full_name": "Jubilee",
        "timestamp": 1648768517
    },
    {
        "content": "<p>gotcha.</p>",
        "id": 277352504,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648768541
    },
    {
        "content": "<p>Oh, I think there's a nifty way to make the diff view with multiple different implementations neat here.</p>",
        "id": 277352523,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648768560
    },
    {
        "content": "<p>Alright, bikeshed time:<br>\nHow do people <a href=\"https://rust.godbolt.org/z/rzhYs9z8n\">like this view?</a></p>\n<p>I like that you can see both code versions in an apples-to-apples fashion and that you get the <code>llvm-mca</code> output on the right to truly, honestly say that both ways compile down to the same source <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 277353431,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648769309
    },
    {
        "content": "<p>too dense for mobile...</p>",
        "id": 277353500,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648769373
    },
    {
        "content": "<p>yes, it’s best viewed on a full screen 😭</p>",
        "id": 277353572,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648769408
    },
    {
        "content": "<p>Another possibility, since I wanted more vertical space for the IR: &lt;<a href=\"https://rust.godbolt.org/z/xn8bfPG9W\">https://rust.godbolt.org/z/xn8bfPG9W</a>&gt;</p>\n<p>(I have a 21½:9 monitor, though, so this might be too wide for some.)</p>",
        "id": 277354510,
        "sender_full_name": "scottmcm",
        "timestamp": 1648770280
    },
    {
        "content": "<p>Oooo0o0o0o0o0oh</p>",
        "id": 277354546,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648770323
    },
    {
        "content": "<p>Neat</p>",
        "id": 277354548,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648770325
    },
    {
        "content": "<p>Yes, I like these sort of \"pre-digested\" benchmark views.</p>",
        "id": 277354561,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648770348
    },
    {
        "content": "<p>Hmm, the MCA there seems unuseful -- It's including the <code>Debug::fmt</code>, for example.</p>",
        "id": 277354683,
        "sender_full_name": "scottmcm",
        "timestamp": 1648770478
    },
    {
        "content": "<p>Hmph. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> I don't know how to get rid of that.</p>",
        "id": 277355136,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648770907
    },
    {
        "content": "<p>use <code>assert!(a == b)</code> instead of <code>assert_eq!(a, b)</code></p>",
        "id": 277355898,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648771534
    },
    {
        "content": "<p>Ah, I was wondering how to propagate that length. thx!</p>",
        "id": 277355958,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648771565
    },
    {
        "content": "<p>or maybe <code>if a != b {return &lt;const&gt;;}</code>, it gets rid of the panic stuff</p>",
        "id": 277356027,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648771643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/277350854\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> any reccs here?</p>\n</blockquote>\n<p>Sorry, I'm in \"on the phone with health insurance\" hell today so I probably wont be able to answer many questions. Did you figure it out?</p>",
        "id": 277357885,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648773597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> Yes, made good progress <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 277357958,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648773661
    },
    {
        "content": "<p>Hope it all works out for ya.</p>",
        "id": 277357961,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648773667
    },
    {
        "content": "<p>LOL commenting out the <code>assert</code> gives some veeeery nice and compact assembly <span aria-label=\"speak no evil\" class=\"emoji emoji-1f64a\" role=\"img\" title=\"speak no evil\">:speak_no_evil:</span></p>",
        "id": 277361649,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648777535
    },
    {
        "content": "<p>panicking is B i g</p>",
        "id": 277361664,
        "sender_full_name": "Cyborus",
        "timestamp": 1648777558
    },
    {
        "content": "<p>yeah, hot dang.</p>",
        "id": 277361755,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648777642
    },
    {
        "content": "<p>(goes to write it down <span aria-label=\"writing\" class=\"emoji emoji-270d\" role=\"img\" title=\"writing\">:writing:</span> )</p>",
        "id": 277361763,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648777655
    },
    {
        "content": "<p>I wonder how much of it is formatting</p>",
        "id": 277362028,
        "sender_full_name": "Cyborus",
        "timestamp": 1648777928
    },
    {
        "content": "<p>one sec gonna see if i can check</p>",
        "id": 277362032,
        "sender_full_name": "Cyborus",
        "timestamp": 1648777940
    },
    {
        "content": "<p>update: turns out getting rid of panicking is hard</p>",
        "id": 277362497,
        "sender_full_name": "Cyborus",
        "timestamp": 1648778452
    },
    {
        "content": "<p>even </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>has panicking stuff</p>",
        "id": 277362517,
        "sender_full_name": "Cyborus",
        "timestamp": 1648778477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488929\">Cyborus</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/277362497\">said</a>:</p>\n<blockquote>\n<p>update: turns out getting rid of panicking is hard</p>\n</blockquote>\n<p>story of my life</p>",
        "id": 277362536,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648778496
    },
    {
        "content": "<p>oof</p>",
        "id": 277362549,
        "sender_full_name": "Cyborus",
        "timestamp": 1648778502
    },
    {
        "content": "<p>getting rid of main helps greatly</p>",
        "id": 277362550,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648778504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/277362550\">said</a>:</p>\n<blockquote>\n<p>getting rid of main helps greatly</p>\n</blockquote>\n<p>how so?</p>",
        "id": 277362556,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648778517
    },
    {
        "content": "<p>less register setup and teardown?</p>",
        "id": 277362601,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648778529
    },
    {
        "content": "<p>because main is where rustc generates tons of additional code for adapting C's main to rust's main</p>",
        "id": 277362633,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1648778578
    },
    {
        "content": "<p>Huh.</p>",
        "id": 277362665,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648778625
    },
    {
        "content": "<p>might make a new topic investigating this mystery</p>",
        "id": 277362870,
        "sender_full_name": "Cyborus",
        "timestamp": 1648778858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> so if there's no <code>main</code>... the program just \"runs\"/doesn't setup a runtime?</p>",
        "id": 277362964,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648778955
    },
    {
        "content": "<p>to make no <code>main</code>, you put <code>#![no_main]</code> at the top of the root file, and then have to create your own entry point for the program to start at</p>",
        "id": 277363059,
        "sender_full_name": "Cyborus",
        "timestamp": 1648779040
    },
    {
        "content": "<p>i.e. <code>#[no_mangle] pub extern \"C\" fn _start() -&gt; ! { /* ... */ }</code>for wasi</p>",
        "id": 277363084,
        "sender_full_name": "Cyborus",
        "timestamp": 1648779071
    },
    {
        "content": "<p>err, the <code>-&gt; !</code> might not be needed. one sec</p>",
        "id": 277363094,
        "sender_full_name": "Cyborus",
        "timestamp": 1648779099
    },
    {
        "content": "<p>yeah it isn't</p>",
        "id": 277363118,
        "sender_full_name": "Cyborus",
        "timestamp": 1648779122
    },
    {
        "content": "<p>Alright, does anyone know how to target SSE1, SSE2, AVX, AVX512 on the godbolt machine? I'm trying <code>-C -target-feature=+avx2</code> but no cigar.</p>",
        "id": 277363900,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648780051
    },
    {
        "content": "<p>squeeeee <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> check it out<br>\n<a href=\"https://rust.godbolt.org/z/jnbjxToE5\">https://rust.godbolt.org/z/jnbjxToE5</a></p>",
        "id": 277364768,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648781142
    },
    {
        "content": "<p>omg godbolt has has docs on hover for the <code>asm</code> instructions o.0</p>",
        "id": 277365265,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648781790
    },
    {
        "content": "<p><code>-C target-feature=+avx2</code></p>",
        "id": 277365565,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782174
    },
    {
        "content": "<p>not <code>-C -target-feature</code></p>",
        "id": 277365569,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782181
    },
    {
        "content": "<p>no dash</p>",
        "id": 277365574,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span>  actually you dont even need the leading space. <code>-Ctarget-feature=+avx2</code> should work. or <code>-Ctarget-cpu=native</code></p>",
        "id": 277365590,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782215
    },
    {
        "content": "<p>kk thx. brb.</p>",
        "id": 277365599,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648782235
    },
    {
        "content": "<p>(native might give you avx512 stuff, since its a server)</p>",
        "id": 277365603,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/277365590\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span>  actually you dont even need the leading space. <code>-Ctarget-feature=+avx2</code> should work. or <code>-Ctarget-cpu=native</code></p>\n</blockquote>\n<p>hmmm - not getting it <a href=\"https://rust.godbolt.org/z/zhhs5936h\">to work here</a></p>",
        "id": 277365812,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648782510
    },
    {
        "content": "<p>-Ctarget-feature=+avx2 -Copt-level=3 gets you to the next part (you need a -C for both).</p>",
        "id": 277365833,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782582
    },
    {
        "content": "<p>you also either need <code>pub unsafe fn dot_prod_simd_0</code> since #[target_feature(enable)] functions must be unsafe</p>",
        "id": 277365894,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782614
    },
    {
        "content": "<p>but you also could remove the target_feature(enable) since you're passing a -Ctarget-feature statically</p>",
        "id": 277365904,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782632
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/hMqbnjbbn\">https://rust.godbolt.org/z/hMqbnjbbn</a> (you don't need #[inline(never)] in this case)</p>",
        "id": 277365923,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648782697
    },
    {
        "content": "<p>yay I guessed the <code>-C</code> per chain was needed just before looking over here :D</p>",
        "id": 277365926,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648782713
    },
    {
        "content": "<p>and the <code>pub unsafe</code> stuff from looking at the errors.</p>",
        "id": 277365971,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648782728
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> yayyy it's aliveeee</p>",
        "id": 277365986,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648782779
    },
    {
        "content": "<p>you shouldn't do reduce_sum every iteration though</p>",
        "id": 277366133,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648783016
    },
    {
        "content": "<p>thats a very slow sequence of instructions</p>",
        "id": 277366134,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648783020
    },
    {
        "content": "<p>consider something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">sum</span>::<span class=\"o\">&lt;</span><span class=\"n\">f32x4</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"n\">f32x4</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277366206,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648783112
    },
    {
        "content": "<p>so that you only do the reduce_sum once at the end</p>",
        "id": 277366212,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648783119
    },
    {
        "content": "<p>yeah, so that's what the last few examples do. I wanted to keep the inefficient examples, measure their throuput, and build up the intuition on minimizing data movement in each iteration.</p>",
        "id": 277366244,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648783179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488929\">Cyborus</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/dot_product.20example/near/277362517\">said</a>:</p>\n<blockquote>\n<p>even </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>has panicking stuff</p>\n</blockquote>\n<p>All the more reason to use libraries when looking at assembly <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 277366917,
        "sender_full_name": "scottmcm",
        "timestamp": 1648783909
    },
    {
        "content": "<p>hmm, i wonder if it needs to or if that could be fixed</p>",
        "id": 277367184,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648784190
    },
    {
        "content": "<p>it'd be nice if <code>fn main()</code> didnt on its own bring in the panic runtime, althouhg realistically i guess there's no avoiding the next thing you do bringing it in in realistic cases</p>",
        "id": 277367204,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648784227
    },
    {
        "content": "<p>so far I've found the panic on windows (<a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/windows/stack_overflow.rs#L38\">here</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">c</span>::<span class=\"n\">AddVectoredExceptionHandler</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vectored_handler</span><span class=\"p\">).</span><span class=\"n\">is_null</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"failed to install exception handler\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277368086,
        "sender_full_name": "Cyborus",
        "timestamp": 1648785255
    },
    {
        "content": "<p>i find it kinda ironic that it causes the equivalent to an exception just after failing to set the exception handler</p>",
        "id": 277368117,
        "sender_full_name": "Cyborus",
        "timestamp": 1648785289
    },
    {
        "content": "<p>it seems the panics for unix/linux (and probably other platforms) come from within <code>Vec</code></p>",
        "id": 277368820,
        "sender_full_name": "Cyborus",
        "timestamp": 1648785964
    },
    {
        "content": "<p>branch is polluted with dirty commits but people can opine on it now I guess <a href=\"https://github.com/rust-lang/portable-simd/pull/270\">https://github.com/rust-lang/portable-simd/pull/270</a></p>",
        "id": 277370171,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648788121
    },
    {
        "content": "<p><span aria-label=\"balloon\" class=\"emoji emoji-1f388\" role=\"img\" title=\"balloon\">:balloon:</span> is up <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 277370247,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648788242
    },
    {
        "content": "<p>yay.</p>",
        "id": 277371319,
        "sender_full_name": "Jubilee",
        "timestamp": 1648789618
    },
    {
        "content": "<p>Alright I cleanded the PR branch with a nice rebase and <code>--force</code> push <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 277549978,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648931374
    },
    {
        "content": "<p>nice</p>",
        "id": 277550603,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932199
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/rust-lang/portable-simd/pull/128\">https://github.com/rust-lang/portable-simd/pull/128</a> didn't get rebased?</p>",
        "id": 277661615,
        "sender_full_name": "Jubilee",
        "timestamp": 1649020705
    }
]