[
    {
        "content": "<p>Well, I should clearly speak more authoritatively about the need for us to play nicely with GPU paradigms because people are straight-up just using rustc to emit SPIRV code for GPUs already with <code>#[repr(simd)]</code> types, I guess!</p>\n<p>So we already know about the Vec3 issue. <a href=\"https://github.com/rust-lang/stdsimd/issues/63#issuecomment-783205841\">https://github.com/rust-lang/stdsimd/issues/63#issuecomment-783205841</a><br>\nBut also, <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> what? <a href=\"https://github.com/rust-lang/rust/issues/81996#issuecomment-782232818\">https://github.com/rust-lang/rust/issues/81996#issuecomment-782232818</a></p>",
        "id": 227331089,
        "sender_full_name": "Jubilee",
        "timestamp": 1614025231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/GPUs.2C.20SIMD.2C.20and.20ABIs/near/227331089\">said</a>:</p>\n<blockquote>\n<p>But also, <span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> what? <a href=\"https://github.com/rust-lang/rust/issues/81996#issuecomment-782232818\">https://github.com/rust-lang/rust/issues/81996#issuecomment-782232818</a></p>\n</blockquote>\n<p>Ooh, are we getting architecture-independent type layout? That would let me just define a <code>struct</code> and know for certain that I can just write it to a network socket and read it from a totally different kind of computer, assured that after byteswapping, it will have the same values? Sounds awesome!<br>\nAlso handy for things like communication in a shared-memory computer with both RISC-V and PowerPC cores (which I've wanted to build).</p>",
        "id": 227332908,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1614026051
    },
    {
        "content": "<blockquote>\n<p>That's often not true anymore (though it was usually true in the distant past, for OpenGL 2.x hardware), AMD's GPUs convert all vector operations to scalar operations on each SIMT thread iirc. So, a vec3 will just become 3 separate f32 variables.</p>\n</blockquote>\n<p><em>takes a drink</em></p>",
        "id": 227333087,
        "sender_full_name": "Jubilee",
        "timestamp": 1614026150
    },
    {
        "content": "<p>not all GPU data is simd</p>",
        "id": 227334353,
        "sender_full_name": "Lokathor",
        "timestamp": 1614026758
    },
    {
        "content": "<p>fair enough!</p>",
        "id": 227334474,
        "sender_full_name": "Jubilee",
        "timestamp": 1614026804
    },
    {
        "content": "<p>or to look at it another way: all gpu data is simd (whether you program it as simd or not)</p>",
        "id": 227334479,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614026808
    },
    {
        "content": "<p>there are versioned standards, usually from GLSL, and they precisely define the exact layout of each field, size/align i mean</p>",
        "id": 227334510,
        "sender_full_name": "Lokathor",
        "timestamp": 1614026822
    },
    {
        "content": "<p>yes also your program doesn't execute like you think it does from the text on the page</p>",
        "id": 227334597,
        "sender_full_name": "Lokathor",
        "timestamp": 1614026862
    },
    {
        "content": "<p>oh yeah, I already knew that part.</p>",
        "id": 227334757,
        "sender_full_name": "Jubilee",
        "timestamp": 1614026921
    },
    {
        "content": "<p>basically if repr C is going to chase the local C compiler then we need something stable that chases nothing</p>",
        "id": 227334796,
        "sender_full_name": "Lokathor",
        "timestamp": 1614026943
    },
    {
        "content": "<p>agreed.</p>",
        "id": 227334817,
        "sender_full_name": "Jubilee",
        "timestamp": 1614026952
    },
    {
        "content": "<p>Wait, repr(C) is different for SPIR-V?</p>",
        "id": 227334882,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614026984
    },
    {
        "content": "<p>I think repr(C) should not chase the local C compiler unless all the C compilers agree on being buggy, lol, at which point we might as well sigh and join up.</p>",
        "id": 227334904,
        "sender_full_name": "Jubilee",
        "timestamp": 1614026993
    },
    {
        "content": "<p>I thought C was pretty clear on layout?</p>",
        "id": 227334910,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614026995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> WELCOME TO THE TRUE HORRORS OF THE ABYSS</p>",
        "id": 227334986,
        "sender_full_name": "Jubilee",
        "timestamp": 1614027011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> see the start of the issue linked at the top of this thread</p>",
        "id": 227335042,
        "sender_full_name": "Lokathor",
        "timestamp": 1614027040
    },
    {
        "content": "<p>You're not wrong</p>",
        "id": 227335045,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614027042
    },
    {
        "content": "<p>There's a few different conversations going on here.</p>",
        "id": 227335051,
        "sender_full_name": "Jubilee",
        "timestamp": 1614027048
    },
    {
        "content": "<p>Ok, so if I got this right, repr(C) is usually right because the C compiler is usually right, but sometimes it's not</p>",
        "id": 227335432,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614027211
    },
    {
        "content": "<p>Yes.<br>\n<span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I guess my question is how exactly is the GPU code using <code>repr(C)</code>?</p>",
        "id": 227335534,
        "sender_full_name": "Jubilee",
        "timestamp": 1614027247
    },
    {
        "content": "<p>repr C is the only repr allowed if you're pushing a struct out to ffi</p>",
        "id": 227335726,
        "sender_full_name": "Lokathor",
        "timestamp": 1614027326
    },
    {
        "content": "<p>ahhh OK, I see now.</p>",
        "id": 227335751,
        "sender_full_name": "Jubilee",
        "timestamp": 1614027339
    },
    {
        "content": "<p>repr(simd) is allowed with a dangerous nightly feature</p>",
        "id": 227335852,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614027368
    },
    {
        "content": "<p>so you make like, a Vec&lt;Std140Mat4&gt; or whatever, and buffer that directly to the GPU</p>",
        "id": 227335865,
        "sender_full_name": "Lokathor",
        "timestamp": 1614027373
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>9. If the member is a structure, the base alignment of the structure is N, where\nN is the largest base alignment value of any of its members, and rounded\nup to the base alignment of a vec4. The individual members of this sub-\nstructure are then assigned offsets by applying this set of rules recursively,\nwhere the base offset of the first member of the sub-structure is equal to the\naligned offset of the structure. The structure may have padding at the end;\nthe base offset of the member following the sub-structure is rounded up to\nthe next multiple of the base alignment of the structure.\n</code></pre></div>\n\n</blockquote>\n<p>lovely.</p>",
        "id": 227336098,
        "sender_full_name": "Jubilee",
        "timestamp": 1614027485
    },
    {
        "content": "<p><a href=\"https://giordi91.github.io/post/spirvvec3/\">https://giordi91.github.io/post/spirvvec3/</a> <em>takes a drink</em></p>",
        "id": 227336547,
        "sender_full_name": "Jubilee",
        "timestamp": 1614027685
    },
    {
        "content": "<p>this is why we need repr(simple)</p>",
        "id": 227337894,
        "sender_full_name": "Lokathor",
        "timestamp": 1614028264
    },
    {
        "content": "<p>afaict with the scalar layout extension, a <code>vec3</code> would have an alignment of 4 (alignment of <code>f32</code>), not the 12 the article claims. As a rule of thumb, if you somehow get an alignment that isn't a power of 2, you should triple check, since that usually means you messed up somewhere.</p>",
        "id": 227337932,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1614028275
    },
    {
        "content": "<p>\"just put it where i'm telling you to put it, and stop messing around\"</p>",
        "id": 227337974,
        "sender_full_name": "Lokathor",
        "timestamp": 1614028290
    },
    {
        "content": "<p>now of course, what would be neat but that the wider rust community would never accept (because we're a small language with a small standard library and not too many language features) is to just have <code>repr(glsl_std140)</code> and such built into the compiler</p>",
        "id": 227338127,
        "sender_full_name": "Lokathor",
        "timestamp": 1614028346
    },
    {
        "content": "<p>maybe we need a <code>repr(custom)</code> that uses const-eval to calculate the layout, so users can write their own layout calculations</p>",
        "id": 227338168,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1614028362
    },
    {
        "content": "<p>So basically, from what I understand, from what I <strong>can</strong> understand now, the SIMT model is even more wild than I thought, GPUs have their own calling convention and ABI, and it doesn't necessarily play nice with C assumptions about how the world is organized, but is reasonably stable and you can program against it.</p>",
        "id": 227353953,
        "sender_full_name": "Jubilee",
        "timestamp": 1614034780
    },
    {
        "content": "<p>oh I see... so it seems like the trick is that<br>\n<code>struct Stuff (Vec3&lt;f32&gt;, f32)</code> can have a size and alignment of 16 bytes and strides normally every 16 bytes, but otherwise where the last f32 would go is padding?</p>",
        "id": 227356834,
        "sender_full_name": "Jubilee",
        "timestamp": 1614036209
    },
    {
        "content": "<p>essentially</p>",
        "id": 227357359,
        "sender_full_name": "Lokathor",
        "timestamp": 1614036486
    },
    {
        "content": "<p>Mmm. That sounds kind of similar to what Swift does, then.</p>",
        "id": 227358836,
        "sender_full_name": "Jubilee",
        "timestamp": 1614037437
    },
    {
        "content": "<p>is there a way this could instead be modeled as some variation on #[repr(packed)]? it feels most reminiscent of that.</p>",
        "id": 227359173,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614037629
    },
    {
        "content": "<p>except with... different alignment constraints.</p>",
        "id": 227359219,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614037664
    },
    {
        "content": "<p><code>#[repr(packed)]</code> is like... \"blow away all the rules\" afaict. For these, it is still inherently rule-based, the algorithm is just custom.</p>",
        "id": 227362113,
        "sender_full_name": "Jubilee",
        "timestamp": 1614039267
    },
    {
        "content": "<p>Hmm, i guess the similarity in my mind is they're both cases where bytes which would otherwise be padding bytes are used to store values.</p>",
        "id": 227364952,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614040988
    },
    {
        "content": "<p>the padding is skipped over</p>",
        "id": 227365815,
        "sender_full_name": "Lokathor",
        "timestamp": 1614041488
    },
    {
        "content": "<p>My understanding is the difference here is that you can still have padding, or maybe not, it just tries to tightly align things.</p>",
        "id": 227366235,
        "sender_full_name": "Jubilee",
        "timestamp": 1614041755
    },
    {
        "content": "<p>yeah, in the same way that <code>repr(c) struct { u8, u16 }</code> has padding in it, the gpu layouts can end up with padding inside of a struct.</p>",
        "id": 227366756,
        "sender_full_name": "Lokathor",
        "timestamp": 1614042102
    },
    {
        "content": "<p>i'm definitely not saying that it's the same as repr(packed), but it feels like there's a commonality there</p>",
        "id": 227367869,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614042766
    },
    {
        "content": "<p>found out there's 4 different layout rules for GPU data lads.</p>",
        "id": 227390232,
        "sender_full_name": "Jubilee",
        "timestamp": 1614064104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/GPUs.2C.20SIMD.2C.20and.20ABIs/near/227338168\">said</a>:</p>\n<blockquote>\n<p>maybe we need a <code>repr(custom)</code> that uses const-eval to calculate the layout, so users can write their own layout calculations</p>\n</blockquote>\n<p>I think this is basically what we need in the lang on one level or another, yeah.</p>",
        "id": 233860579,
        "sender_full_name": "Jubilee",
        "timestamp": 1617989104
    }
]