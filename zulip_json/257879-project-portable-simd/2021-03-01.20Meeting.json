[
    {
        "content": "<p>Hello I have had no time to prepare as I have been fixing my computer all day.</p>",
        "id": 228308605,
        "sender_full_name": "Jubilee",
        "timestamp": 1614633829
    },
    {
        "content": "<p>Also my PR is dead in the water for similar reasons.</p>",
        "id": 228308903,
        "sender_full_name": "Jubilee",
        "timestamp": 1614633949
    },
    {
        "content": "<p><em>waves</em></p>",
        "id": 228311633,
        "sender_full_name": "Lokathor",
        "timestamp": 1614635112
    },
    {
        "content": "<p>I have not been productive lately</p>",
        "id": 228311941,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614635229
    },
    {
        "content": "<p>I think it's worth talking about our next steps to getting to nightly though</p>",
        "id": 228311980,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614635250
    },
    {
        "content": "<p>stdarch has begin moving to const generics, so that <em>should</em> begin to get const generics the wider usage we want in the style we're using it and they can be our canary in the coal mine</p>",
        "id": 228312712,
        "sender_full_name": "Lokathor",
        "timestamp": 1614635583
    },
    {
        "content": "<p>we need to carve out the stuff that needs to be std only into a library feature I think?</p>\n<p>termhn volunteered to help with trig.</p>\n<p>I determined that most of our possible API additions except for sat math will often compile to potentially sluggish scalar libm ops, if we just chuck it to LLVM, while I don't think we should document explicit instruction lowerings I would like anything that has that flaw when targeting x86_64 or aarch64 to be marked in docs.</p>",
        "id": 228313275,
        "sender_full_name": "Jubilee",
        "timestamp": 1614635819
    },
    {
        "content": "<p>like we can mark warnings not promises.</p>",
        "id": 228313513,
        "sender_full_name": "Jubilee",
        "timestamp": 1614635921
    },
    {
        "content": "<p>I think we need to also figure out if we truly need multiple features or not</p>",
        "id": 228313634,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614635978
    },
    {
        "content": "<p>Or if that's something we should just push off until we get closer to stabilization</p>",
        "id": 228313682,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636001
    },
    {
        "content": "<p>I imagine once we get closer to stabilization things will look different than they do now in terms of completeness</p>",
        "id": 228313864,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636041
    },
    {
        "content": "<p>(I mean nightly features, not cargo features for <code>std</code>)</p>",
        "id": 228313941,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636063
    },
    {
        "content": "<p>I think we will be best \"forward-compatibly\" served by having a single <code>portable_simd_arith</code> flag and carving out subfeatures as we go. Also having thought about it I am fine with our mod name being <code>core::simd</code> but I think we should use <code>portable_simd</code> as our baseline name for things like feature flags.</p>",
        "id": 228314294,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636192
    },
    {
        "content": "<p>So I suppose I was going to suggest the opposite, <code>portable_simd</code> always gets you everything and once we prepare to stabilize, we start carving features out</p>",
        "id": 228314443,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636254
    },
    {
        "content": "<p>I think the core version of the API, given current rust and llvm, is: float/double (add, sub, mul, div, blend), integer (add, sub, mul, div, mod, bitops, blend)</p>",
        "id": 228314469,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636268
    },
    {
        "content": "<p>oops, and ordering tests</p>",
        "id": 228314530,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636310
    },
    {
        "content": "<p>and just about anything more than that gets us into trouble</p>",
        "id": 228314565,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636324
    },
    {
        "content": "<p>We're still missing a lot of random \"basic\" ops and I don't think you should need to opt into new features to get them</p>",
        "id": 228314606,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636343
    },
    {
        "content": "<p>That aren't necessarily arithmetic</p>",
        "id": 228314631,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636350
    },
    {
        "content": "<p>do you mean like an essentially perma unstable name</p>",
        "id": 228314782,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636387
    },
    {
        "content": "<p>that implies all other flags</p>",
        "id": 228314823,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636407
    },
    {
        "content": "<p>Yeah, or at least potentially perma unstable</p>",
        "id": 228314864,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636425
    },
    {
        "content": "<p>At some point I expect all features to stabilize</p>",
        "id": 228314897,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636440
    },
    {
        "content": "<p>I hope lol</p>",
        "id": 228314903,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636444
    },
    {
        "content": "<p>\"stabilized last\"</p>",
        "id": 228314911,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636449
    },
    {
        "content": "<p>Yeah. And it gives us the flexibility to push all of that off until we have a better handle on things</p>",
        "id": 228314953,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636474
    },
    {
        "content": "<p>I think it's possible we go to nightly and end up reconsidering something the few of us consider pretty stable</p>",
        "id": 228315075,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636509
    },
    {
        "content": "<p>Because of feedback</p>",
        "id": 228315136,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636532
    },
    {
        "content": "<p>okay by my math there's 7 rust releases left in the entire year: Mar25, May6, Jun17, Jul29, Sep9, Oct21, Dec2</p>",
        "id": 228315208,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636558
    },
    {
        "content": "<p>I think Lokathor's objection that we should avoid vague generic names is still cromulent. I think we might want to talk to T-(compiler|libs) and project const generics before we make a hard and fast decision.</p>",
        "id": 228315226,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636564
    },
    {
        "content": "<p>I think it's reasonable to pick the minimal, and i mean <em>minimal</em> parts of the API, and stabilize that within 6 releases. Like we know there's floats and ints, and we know they can do plus and minus and stuff</p>",
        "id": 228315356,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636626
    },
    {
        "content": "<p>I think it's fine if <code>portable_simd_arith</code> winds up including a bunch of \"generic SIMD API surface\", but I would not object to name like min portable simd.</p>",
        "id": 228315430,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636662
    },
    {
        "content": "<p>Yeah I agree about names. I think there should be a complete <code>portable_simd</code> feature but our first stabilization feature shouldn't be <code>min_portable_simd</code> but something more descriptive</p>",
        "id": 228315432,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636662
    },
    {
        "content": "<p>i don't think the name is important, the content of the feature is important, and the content almost always informs the name once you know what the feature specifically does</p>",
        "id": 228315671,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636743
    },
    {
        "content": "<p>yeah.</p>",
        "id": 228315693,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636757
    },
    {
        "content": "<p>I want to know more about existing Rust policy re: feature names and moving stuff around.</p>",
        "id": 228315758,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636787
    },
    {
        "content": "<p>So is there any reason we <em>shouldn't</em> have a feature that gives you the entirety of the current state of std::simd?</p>",
        "id": 228315767,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636788
    },
    {
        "content": "<p>Yeah I'd be curious to know too. Because afaik anything in a nightly feature is just courtesy</p>",
        "id": 228315843,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614636830
    },
    {
        "content": "<p>given our current status: we should put it all under one feature. if in the future we want to carve out a subset we can make a new feature and move things around</p>",
        "id": 228315844,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636830
    },
    {
        "content": "<p>I guess I just don't know if that's considered acceptable practice mostly, also we would want to stabilize it.</p>",
        "id": 228315854,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636837
    },
    {
        "content": "<p>yeah.</p>",
        "id": 228315904,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636845
    },
    {
        "content": "<p>even knowing that we'll want to stabililze a minimal portion before the rest, it's still easier to just have only one feature</p>",
        "id": 228316057,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636890
    },
    {
        "content": "<p>I kinda would like to just flag <code>portable_simd_arith</code> and then worry about more nuanced feature arrangements later</p>",
        "id": 228316201,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636919
    },
    {
        "content": "<p>if the initial stabilization is \"the simd compatible with core\" then we call it core_simd and if we need more later we just say hek it and make core_simd2</p>",
        "id": 228316433,
        "sender_full_name": "Lokathor",
        "timestamp": 1614636980
    },
    {
        "content": "<p>lol</p>",
        "id": 228316451,
        "sender_full_name": "Jubilee",
        "timestamp": 1614636995
    },
    {
        "content": "<p>they're just dumb names for nightly people, stable people never use them, so really it's fine</p>",
        "id": 228316463,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637006
    },
    {
        "content": "<p>I just wouldn't go with arithmetic in the name now since we already have a bit more than that, and we're probably going to continue adding mostly non-arithmetic so it could get confusing</p>",
        "id": 228316545,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614637057
    },
    {
        "content": "<p>mmk</p>",
        "id": 228316556,
        "sender_full_name": "Jubilee",
        "timestamp": 1614637066
    },
    {
        "content": "<p>If we decide we want to stabilize only arithmetic first then maybe we add that feature?</p>",
        "id": 228316571,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614637078
    },
    {
        "content": "<p>well the core only part can't really have much more than arithmetic for floats</p>",
        "id": 228316619,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637087
    },
    {
        "content": "<p>practically anything else is going to trigger libm calls on some systems</p>",
        "id": 228316677,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637112
    },
    {
        "content": "<p>Sure, I was thinking we'd add a std feature and support both</p>",
        "id": 228316683,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614637114
    },
    {
        "content": "<p>From the start</p>",
        "id": 228316693,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614637121
    },
    {
        "content": "<p>that sounds like a whole separate nightly feature</p>",
        "id": 228316752,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637152
    },
    {
        "content": "<p>you kinda get breakages when you stabilize stuff anyways</p>",
        "id": 228316789,
        "sender_full_name": "Jubilee",
        "timestamp": 1614637176
    },
    {
        "content": "<p>currently, std just defines additional methods on f32 on top of what core defines, via magical powers, and i think that's the route we should go</p>",
        "id": 228316793,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637182
    },
    {
        "content": "<p>Two nightly features may make sense</p>",
        "id": 228317331,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614637400
    },
    {
        "content": "<p>It really is just a few float ops</p>",
        "id": 228317386,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614637429
    },
    {
        "content": "<p>big buddy vec gets one feature per experimental method, so we'd be fine</p>",
        "id": 228317520,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637471
    },
    {
        "content": "<p>lol</p>",
        "id": 228317868,
        "sender_full_name": "Jubilee",
        "timestamp": 1614637629
    },
    {
        "content": "<p>yeah.</p>",
        "id": 228317888,
        "sender_full_name": "Jubilee",
        "timestamp": 1614637637
    },
    {
        "content": "<p><code>core_portable_simd</code><br>\n<code>std_portable_simd</code><br>\n?</p>",
        "id": 228318202,
        "sender_full_name": "Jubilee",
        "timestamp": 1614637772
    },
    {
        "content": "<p>is core_simd taken?</p>",
        "id": 228318642,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637956
    },
    {
        "content": "<p>or core_simd_core</p>",
        "id": 228318691,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637985
    },
    {
        "content": "<p>core_simd_ext1, core_simd_ext2</p>",
        "id": 228318730,
        "sender_full_name": "Lokathor",
        "timestamp": 1614637996
    },
    {
        "content": "<p>no one would be upset by that</p>",
        "id": 228318739,
        "sender_full_name": "Lokathor",
        "timestamp": 1614638001
    },
    {
        "content": "<p>stdsimd is taken for some stdarch stuff but that's it I think</p>",
        "id": 228318909,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614638063
    },
    {
        "content": "<p>Right?</p>",
        "id": 228318917,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614638070
    },
    {
        "content": "<p>yeah, there's stuff under the stdsimd flag.</p>\n<p><code>libsimd</code>? :^)</p>",
        "id": 228319479,
        "sender_full_name": "Jubilee",
        "timestamp": 1614638335
    },
    {
        "content": "<p>bikeshed: <code>f32x&lt;4&gt;</code> you know you want it</p>",
        "id": 228319713,
        "sender_full_name": "Jubilee",
        "timestamp": 1614638435
    },
    {
        "content": "<p>oh boy do i ever not</p>",
        "id": 228319907,
        "sender_full_name": "Lokathor",
        "timestamp": 1614638524
    },
    {
        "content": "<p>haha</p>",
        "id": 228319936,
        "sender_full_name": "Jubilee",
        "timestamp": 1614638529
    },
    {
        "content": "<p>Lol. One thing that does bother me is <code>MaskSize</code></p>",
        "id": 228320010,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614638569
    },
    {
        "content": "<p>hey come on vf32 is good enough for LLVM! <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 228320032,
        "sender_full_name": "Jubilee",
        "timestamp": 1614638581
    },
    {
        "content": "<p>Yeah MaskSize is... unfortunate.</p>",
        "id": 228320189,
        "sender_full_name": "Jubilee",
        "timestamp": 1614638647
    },
    {
        "content": "<p>should we even support ptr width types? it feels like a thing for the sake of completeness without a use case</p>",
        "id": 228320320,
        "sender_full_name": "Jubilee",
        "timestamp": 1614638711
    },
    {
        "content": "<p>like if someone came to me with like \"hey I want to do SIMD pointer arithmetic\" my response isn't \"oh yeah let me help you out\" it's \"you WHAT?\"</p>",
        "id": 228320850,
        "sender_full_name": "Jubilee",
        "timestamp": 1614638972
    },
    {
        "content": "<p>anyways <code>core_simd</code> should be fine~</p>",
        "id": 228321296,
        "sender_full_name": "Jubilee",
        "timestamp": 1614639216
    },
    {
        "content": "<p>usize/isize/ptr simd is probably not necessary</p>",
        "id": 228324014,
        "sender_full_name": "Lokathor",
        "timestamp": 1614640623
    },
    {
        "content": "<p>though i have seen it done</p>",
        "id": 228324062,
        "sender_full_name": "Lokathor",
        "timestamp": 1614640650
    },
    {
        "content": "<p>I tend to agree, though I think it's disappointing if we omit it purely due to a bad naming convention</p>",
        "id": 228324077,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614640666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> <a href=\"https://matklad.github.io/2021/02/27/delete-cargo-integration-tests.html\">https://matklad.github.io/2021/02/27/delete-cargo-integration-tests.html</a> you see this?</p>",
        "id": 228324198,
        "sender_full_name": "Lokathor",
        "timestamp": 1614640718
    },
    {
        "content": "<p>I do think usize/isize/ptr SIMD is necessary, since it is used in some algorithms, such as following linked lists or transversing BSP trees for ray-tracing.</p>",
        "id": 228324918,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1614641069
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> yeah I did, I want to try combining the tests to see if that's faster or slower for us. I think it'll be slower but not sure</p>",
        "id": 228325131,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614641179
    },
    {
        "content": "<p>notably, vectors of pointers is how LLVM expresses gather-loads and scatter-stores</p>",
        "id": 228325135,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1614641183
    },
    {
        "content": "<p>I agree that vectors of pointers is useful</p>",
        "id": 228325162,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614641196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> why would it be slower?</p>",
        "id": 228325476,
        "sender_full_name": "Lokathor",
        "timestamp": 1614641355
    },
    {
        "content": "<p>In our specific case crate-parallelism seemed to be doing a lot</p>",
        "id": 228325733,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614641467
    },
    {
        "content": "<p>But I'm definitely going to try it and see</p>",
        "id": 228325756,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614641477
    },
    {
        "content": "<p>but the integration test still thread pools it</p>",
        "id": 228325774,
        "sender_full_name": "Lokathor",
        "timestamp": 1614641489
    },
    {
        "content": "<p>So our problem was it spent a lot of time in codegen rather than rustc itself</p>",
        "id": 228325894,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614641531
    },
    {
        "content": "<p>...kinda disappointing that neither gcc nor clang support vectors of pointers even though llvm does...rust can do better than that!</p>",
        "id": 228325951,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1614641566
    },
    {
        "content": "<p>I fixed a lot of that by reducing the number of monomorpisations but I think it's still the dominant chunk</p>",
        "id": 228325959,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614641570
    },
    {
        "content": "<p>Since each crate is one translation unit it might actually hurt us</p>",
        "id": 228326048,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614641608
    },
    {
        "content": "<p>i don't follow how it would hurt us</p>",
        "id": 228327564,
        "sender_full_name": "Lokathor",
        "timestamp": 1614642287
    },
    {
        "content": "<p>Combining into a single crate might reduce codegen parallelism</p>",
        "id": 228327851,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614642427
    },
    {
        "content": "<p>It also might not</p>",
        "id": 228327881,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614642433
    },
    {
        "content": "<p>Depends on the specific codegen step I think</p>",
        "id": 228327920,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614642456
    },
    {
        "content": "<p>don't the codegen units still run in parallel?</p>",
        "id": 228328480,
        "sender_full_name": "Lokathor",
        "timestamp": 1614642761
    },
    {
        "content": "<p>I think some steps do not, idk, I do think we should try it though</p>",
        "id": 228330970,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614643955
    },
    {
        "content": "<p>From what I have seen I no longer think \"how LLVM reasons about something\" is actually all that germane to how we should proceed, but I am interested to read examples of ray tracing code which uses size_t <span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span></p>",
        "id": 228357541,
        "sender_full_name": "Jubilee",
        "timestamp": 1614664273
    },
    {
        "content": "<p>simd ptrs is used in software rendering, or it can be i should say</p>",
        "id": 228361543,
        "sender_full_name": "Lokathor",
        "timestamp": 1614667432
    },
    {
        "content": "<p>for getting four texture positions at once</p>",
        "id": 228361601,
        "sender_full_name": "Lokathor",
        "timestamp": 1614667451
    },
    {
        "content": "<p>I think the point is more \"SIMD pointers are common enough that LLVM has them\" and not so much that it's LLVM-specific</p>",
        "id": 228396643,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614685880
    },
    {
        "content": "<p>fair enough.</p>",
        "id": 229370522,
        "sender_full_name": "Jubilee",
        "timestamp": 1615236338
    }
]