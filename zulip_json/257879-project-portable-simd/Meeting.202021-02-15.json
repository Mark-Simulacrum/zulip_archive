[
    {
        "content": "<p>Starts in ~5 minutes, correct?</p>",
        "id": 226428973,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613422505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 226429038,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613422554
    },
    {
        "content": "<p>The only thing I have for today is a bunch of open PRs</p>",
        "id": 226429220,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613422670
    },
    {
        "content": "<p>I like the expansion to the glossary.  <br>\nI was looking to see how the glossary relates lanes to bitwidth. If it was resolved last week, all good.  If not,  I'm uncertain about how we are relating MaxLaneCount of 64 with bitwidths (a vector term).</p>",
        "id": 226430870,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613423846
    },
    {
        "content": "<p>I'll have to look at how the glossary describes it, but the general idea is that SimdU8, for example, is generic over lane count.  Without the trait bound it's possible to cause a monomorpisation error by using an invalid size (a non-power-of-two).  The trait also limits to 64 lanes because of the current implementation of bitmasks</p>",
        "id": 226431139,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424068
    },
    {
        "content": "<p>I'm not exactly sure what you mean by bit width, do you mean the number of bits per lane, or something else?</p>",
        "id": 226431190,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424123
    },
    {
        "content": "<p>I hope I'm using it the same way the glossary does:  a bitwidth relates to vector size (not lane size).</p>",
        "id": 226431294,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424205
    },
    {
        "content": "<p>Like 128 bits for SSE or Neon?</p>",
        "id": 226431361,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424248
    },
    {
        "content": "<blockquote>\n<p><strong>Bit Widths:</strong> When talking about SIMD, the bit widths used are the bit size of the vectors involved, <em>not</em> the individual elements. So \"128-bit SIMD\" has 128-bit vectors</p>\n</blockquote>",
        "id": 226431363,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424249
    },
    {
        "content": "<p>hello!</p>",
        "id": 226431428,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424324
    },
    {
        "content": "<p>oh, I thought we were officially starting these at 13:30 lol.</p>",
        "id": 226431441,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424344
    },
    {
        "content": "<p>Ah gotcha.  So the maximum lane count is only tangentially related to bit width.  We picked 64 because that allows you to represent at least a u8x64 AVX-512 vector, which is our largest supported bit width  at the moment.</p>",
        "id": 226431510,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> which time zone? I thought we were sticking with this but I could be wrong</p>",
        "id": 226431571,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424434
    },
    {
        "content": "<p>Pacific. So I mean like right now.</p>",
        "id": 226431585,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424451
    },
    {
        "content": "<p>Oh okay, so pushed back half an hour? That works too.  Well we're here!</p>",
        "id": 226431610,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424480
    },
    {
        "content": "<p>Ah. That makes sense: u8 x 64 = max supported vector size = 512 bits.</p>",
        "id": 226431650,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424485
    },
    {
        "content": "<p>Yeah, our lane maximum is a logical, compiler limitation rather than a hardware one, but incidentally we expect the hardware to want up to 64, so we're going with that.</p>",
        "id": 226431687,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"388128\">@Edmund Cape</span> it's possible to do something much larger, such as a u128x64 (which gets lowered to a whole bunch of vectors), so 64 was intended to ensure we could support at least 512 bits.  We could have done 128 lanes as well but it wasn't necessary</p>",
        "id": 226431729,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424564
    },
    {
        "content": "<p>Got it. That 64 number is an overloaded number :)) I was thinking in terms of 64-bit.</p>",
        "id": 226431830,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424616
    },
    {
        "content": "<p>POWERS OF TWO!</p>",
        "id": 226431878,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424653
    },
    {
        "content": "<p>Does that mean we have a minimum lane size of 8-bit?</p>",
        "id": 226431879,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424653
    },
    {
        "content": "<p>Yep</p>",
        "id": 226431893,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424665
    },
    {
        "content": "<p>Effectively.</p>",
        "id": 226431896,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424667
    },
    {
        "content": "<p>Rust doesn't really support sub-byte addressing.</p>",
        "id": 226431909,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424679
    },
    {
        "content": "<p>Do we specify that min-lane-size somewhere?</p>",
        "id": 226431928,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424700
    },
    {
        "content": "<p>The bitmasks are technically vectors of 1 bit integers, but that's a special case</p>",
        "id": 226431934,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424709
    },
    {
        "content": "<p>Yes and no to the sub-byte addressing.  There are SIMD operations where I have worked on 4-bits</p>",
        "id": 226432001,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424744
    },
    {
        "content": "<p>We can interact with single bits by treating them as a bitfield embedded in a number, yes.<br>\nHmm, MinLaneWidth? No, we just don't provide any types that could use less. Since we control the types we're exposing directly, we're fine.</p>",
        "id": 226432002,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424744
    },
    {
        "content": "<p>It may need some updating, but I think it says somewhere that vectors are over rust primitive types</p>",
        "id": 226432007,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"388128\">@Edmund Cape</span> Have you done that with a Rust API, or with Intel intrinsics?</p>",
        "id": 226432077,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424794
    },
    {
        "content": "<p>I am <strong>very</strong> interested if the former is the case. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 226432126,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424830
    },
    {
        "content": "<p>All good.  I was just thinking that the logic for the Max64Lane constant because of the 512-bit max vector size, by definition means a min lane size... implied vs explicit.</p>",
        "id": 226432196,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613424863
    },
    {
        "content": "<p>If somehow rust added support for u4, there's nothing about the lane restriction that would prevent us from implementing it</p>",
        "id": 226432326,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613424969
    },
    {
        "content": "<p>Correct.<br>\nWe might up the lane max too, if we felt it was warranted.</p>",
        "id": 226432354,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> To be quite honest, I'm not sure! :)) what I mean by that is that I believe I was using a combination.  I suspect the 4-bit work was using the intrinsics API.</p>",
        "id": 226432355,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613425005
    },
    {
        "content": "<p>Okay. ^_^</p>",
        "id": 226432365,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425014
    },
    {
        "content": "<p>Rust has a deeply embedded logical memory model that operates on 1 or more octet bytes at a time, that doesn't mean it can't be hacked to do less than 8 bits at a time, it just means it has to express those operations in terms of byte-level operations.</p>",
        "id": 226432447,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425086
    },
    {
        "content": "<p>The way I see you all talking about it, I'm sure it was as you all describe.<br>\nConceptually, the line between Rust and the intrinsics is still a bit muddled for me.</p>",
        "id": 226432457,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613425098
    },
    {
        "content": "<p>Will users of this API ever bounce in and out of using intrinsics?</p>",
        "id": 226432510,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613425160
    },
    {
        "content": "<p>The goal is to minimize needing to do that, but making it easy to do it if you need to</p>",
        "id": 226432527,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613425181
    },
    {
        "content": "<p>We're kind of assuming yes.</p>",
        "id": 226432530,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425186
    },
    {
        "content": "<p>In a worse case, a simple note in the glossary explaining the logic is likely \"way good enough\".</p>",
        "id": 226432635,
        "sender_full_name": "Edmund Cape",
        "timestamp": 1613425214
    },
    {
        "content": "<p>but that it wouldn't be the main point... most people just want the abstract level. But a big enough minority will want the optimization powers of using explicit intrinsics, and we need to offer interop with those so they don't have to have that be their ENTIRE program.</p>\n<p>Oh yeah, I have more to go into the guide, I just wanted to make the glossary expansion thing its own PR.</p>",
        "id": 226432682,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I haven't reviewed the proptest branch extensively, but it looks like we can merge our PRs? I'm gonna squash my commits real quick.</p>",
        "id": 226432801,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425396
    },
    {
        "content": "<p>Yeah, I think they're all good to merge</p>",
        "id": 226432824,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613425441
    },
    {
        "content": "<p>I didn't actually change the existence of any tests, just changed how they're done (hopefully)</p>",
        "id": 226432893,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613425490
    },
    {
        "content": "<p>Hmm.<br>\nOK, then I will review proptest again and merge it when I have given it another pass.<br>\nI reviewed a lot of float intrinsics and have determined that a LOT of them are dependent on like<br>\nresolving our \"situation\" with regards to libm and floats, even the seemingly simple ones.</p>",
        "id": 226433028,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425615
    },
    {
        "content": "<p>Merging the lane limit PR now, if we're good on that?</p>",
        "id": 226433058,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425644
    },
    {
        "content": "<p>Agreed wrt floats</p>",
        "id": 226433195,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613425747
    },
    {
        "content": "<p>And my glossary PR should be good to go.<br>\nI have one and a half other docs things like, waiting in the wings. ^^; Well, mostly on me redrafting them.</p>",
        "id": 226433200,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425753
    },
    {
        "content": "<p>I'm not a designer person, but just having a chart of what all the different terms mean + pictures would probs help immensely.</p>",
        "id": 226433304,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613425845
    },
    {
        "content": "<p>I identified a few <code>platform-intrinsics</code> like <code>simd_fma</code> (which would be in as <code>mul_add</code>) which BETTER NOT resolve to calls to libm though, and I think we should make sure we've found those where they're already in, surfaced them, and commit them.</p>",
        "id": 226433307,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzm√°n Macedo</span> what kind of chart</p>",
        "id": 226433310,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425860
    },
    {
        "content": "<p>and/or what kind of pictures?</p>",
        "id": 226433315,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425867
    },
    {
        "content": "<p>Something like this, but with lanewidths, vector, and scalar tagged <a href=\"https://cheats.rs/#numeric-types-ref\">https://cheats.rs/#numeric-types-ref</a></p>",
        "id": 226433396,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613425938
    },
    {
        "content": "<p>like, general, vague waving in a direction is fine, just \"chart\" and \"pictures\" conjure... blankness</p>",
        "id": 226433398,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425943
    },
    {
        "content": "<p>aha</p>",
        "id": 226433404,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425945
    },
    {
        "content": "<p>Yes, we can do that.</p>",
        "id": 226433422,
        "sender_full_name": "Jubilee",
        "timestamp": 1613425963
    },
    {
        "content": "<p>\"Look at this memory - it has a lanesize of 128 bits, but each vector is of 32 bit floats.\"</p>",
        "id": 226433465,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426017
    },
    {
        "content": "<p>vector width of 128, lane width of 32 bits</p>",
        "id": 226433496,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426043
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226433526,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426053
    },
    {
        "content": "<p>lol, no, it's good, you instantly demonstrated why we need it.</p>",
        "id": 226433542,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426075
    },
    {
        "content": "<p>nooo, don't delete it. ^_^</p>",
        "id": 226433579,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426103
    },
    {
        "content": "<p>It's okay~!</p>",
        "id": 226433592,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426119
    },
    {
        "content": "<p>Then there is an \"a vertical operation is between the matching lanes of different SIMD vectors, and a horizontal operation is inside the same SIMD vector\"</p>",
        "id": 226433607,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426144
    },
    {
        "content": "<p>Right.<br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> Would you like to do the honors re: <a href=\"https://github.com/rust-lang/rust/issues/73\">#73</a><br>\nI feel silly about merging my own PR. :^)</p>",
        "id": 226433668,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzm√°n Macedo</span> Can you file that as an issue, please?</p>",
        "id": 226433673,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426183
    },
    {
        "content": "<p>Aye aye Cap'n.</p>",
        "id": 226433685,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> done</p>",
        "id": 226434111,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613426443
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 226434179,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426460
    },
    {
        "content": "<p>Same</p>",
        "id": 226434221,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426471
    },
    {
        "content": "<p>I don't mind merging my own as long as all of the reviewers approve or we discuss it</p>",
        "id": 226434326,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613426500
    },
    {
        "content": "<p>I liked the proptests ! &lt;3</p>",
        "id": 226434603,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426576
    },
    {
        "content": "<p>I mostly feel a little odd if I've diffed it and I'm not sure if people approve or just didn't notice. :^) <br>\nShould we have a slightly more formal merging policy?</p>",
        "id": 226434604,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426576
    },
    {
        "content": "<p>I'm not sure if when working on the crate, there is a way to opt out of them with some <code>cargo -- stuff?</code></p>",
        "id": 226434699,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426611
    },
    {
        "content": "<p>I think \"by consensus\" has been the policy effectively which is good but slightly more formal signaling on consensus maybe.</p>",
        "id": 226434728,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426625
    },
    {
        "content": "<p>there should be a way to run only one test?</p>",
        "id": 226434748,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426634
    },
    {
        "content": "<p>It's something like <code>cargo test path/to/test</code></p>",
        "id": 226435169,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426784
    },
    {
        "content": "<p>Yeah perhaps we need a more formal policy.  Though I think to some extent our PRs are more of a courtesy, if you look at the main rust repo you only need one approval</p>",
        "id": 226435312,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613426838
    },
    {
        "content": "<p>one formal approval from who. :^)</p>",
        "id": 226435389,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426872
    },
    {
        "content": "<p>Whoah, I thought the Rust people had some big public implementation pipeline with proposals.</p>",
        "id": 226435392,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426873
    },
    {
        "content": "<p>And a well defined state-machine and stuff.</p>",
        "id": 226435448,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426884
    },
    {
        "content": "<p>LOL</p>",
        "id": 226435471,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426887
    },
    {
        "content": "<p>no we're anarchists.</p>",
        "id": 226435480,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426890
    },
    {
        "content": "<p><span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 226435496,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613426895
    },
    {
        "content": "<p>I mean, yes, we have feature flags and RFCs and issues and such.</p>",
        "id": 226435523,
        "sender_full_name": "Jubilee",
        "timestamp": 1613426907
    },
    {
        "content": "<p>I think perhaps we just need to establish who has merge permissions (which we already have done de facto)</p>",
        "id": 226435651,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613426960
    },
    {
        "content": "<p>Once we're in nightly I think we for the most part follow the same rules as any other feature</p>",
        "id": 226435704,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613426981
    },
    {
        "content": "<p>Yeah.<br>\nOh, and proptest needs a rebase because... git is bad.</p>",
        "id": 226436200,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427167
    },
    {
        "content": "<p>My apologies. <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 226436443,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427257
    },
    {
        "content": "<p>Ha. I'll take care of it later today.</p>",
        "id": 226436479,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613427275
    },
    {
        "content": "<p>Once I've done that feel free to merge it once you've looked it over</p>",
        "id": 226436553,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613427310
    },
    {
        "content": "<p>yes!</p>",
        "id": 226436602,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427331
    },
    {
        "content": "<p>As far as future work goes I've started with the floating point classification functions</p>",
        "id": 226436844,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613427423
    },
    {
        "content": "<p>Oh nice.</p>",
        "id": 226436862,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427436
    },
    {
        "content": "<p>I figure those are useful to someone...</p>",
        "id": 226436869,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613427448
    },
    {
        "content": "<p>&lt;_&lt;;;</p>",
        "id": 226436873,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427454
    },
    {
        "content": "<p>I keep meaning to open a PR for mul_add but then I go \"oh I should see if I can add other float functions to this\"<br>\nand then I keep finding another float function that calls to libm</p>",
        "id": 226436884,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427480
    },
    {
        "content": "<p>And then I deep sigh.</p>",
        "id": 226436928,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427490
    },
    {
        "content": "<p>mul_add is a huge perk, that would be nice to have.</p>",
        "id": 226436934,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613427503
    },
    {
        "content": "<p>Yeah, I just am saying that to convince myself that it's not a sin to open a PR with one new function. :^)</p>",
        "id": 226436949,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427535
    },
    {
        "content": "<p>maybe if the function was <code>sin()</code></p>",
        "id": 226436970,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427560
    },
    {
        "content": "<p><em>arrives late</em></p>",
        "id": 226437035,
        "sender_full_name": "Lokathor",
        "timestamp": 1613427610
    },
    {
        "content": "<p>oh silly almost bikeshed painting level question:<br>\nsince all our ops are Wrapping implicitly<br>\nshould we even bother adding the <code>wrapping_*</code> functions?<br>\npros: more seamless transition I guess?<br>\ncons: they're just API clutter at that point</p>",
        "id": 226437403,
        "sender_full_name": "Jubilee",
        "timestamp": 1613427878
    },
    {
        "content": "<p>Oh yeah, looking over my old issues I noticed that. No I don't think we should</p>",
        "id": 226437640,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428040
    },
    {
        "content": "<p>I think we only need the checked variants</p>",
        "id": 226437666,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428079
    },
    {
        "content": "<p>and saturating ofc.</p>",
        "id": 226437710,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428086
    },
    {
        "content": "<p>Right</p>",
        "id": 226437717,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428092
    },
    {
        "content": "<p>And yeah I raised it because I'm mildly against, it misleads people into thinking they need the <code>wrapping_*</code> functions.</p>",
        "id": 226437720,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> this should work right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SIMDI32</span><span class=\"o\">&lt;</span><span class=\"mi\">128</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"k\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"k\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"k\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"k\">i32</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226437994,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613428343
    },
    {
        "content": "<p>isn't it &lt;4&gt; ?</p>",
        "id": 226438003,
        "sender_full_name": "Lokathor",
        "timestamp": 1613428361
    },
    {
        "content": "<p><code>SimdI32&lt;4&gt;</code></p>",
        "id": 226438017,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428377
    },
    {
        "content": "<p>Ah, gotcha.</p>",
        "id": 226438045,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613428390
    },
    {
        "content": "<p>and... uh, it's written slightly differently and my brain is freezing up on how.</p>",
        "id": 226438068,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428426
    },
    {
        "content": "<p>Is this not too shabby?<br>\n<a href=\"https://imgur.com/2vqE1XB.png\">https://imgur.com/2vqE1XB.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://imgur.com/2vqE1XB.png\"><img src=\"https://imgur.com/2vqE1XB.png\"></a></div>",
        "id": 226438071,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613428433
    },
    {
        "content": "<p>Sure.</p>",
        "id": 226438128,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzm√°n Macedo</span> that wouldn't work since the inner member is private, but you could use the Into trait</p>",
        "id": 226438138,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428473
    },
    {
        "content": "<p>serious question: does the inner member need to be private? It's just a number.</p>",
        "id": 226438179,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428527
    },
    {
        "content": "<p>well, number<strong>s</strong>. I forget why we need it to be private.</p>",
        "id": 226438200,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428555
    },
    {
        "content": "<p>I think there was actually a reason.</p>",
        "id": 226438244,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428567
    },
    {
        "content": "<p>i'd make the outside green, and the inside boxes blue, so that they match the text coloration</p>",
        "id": 226438302,
        "sender_full_name": "Lokathor",
        "timestamp": 1613428647
    },
    {
        "content": "<p>and the 4 should maybe be just be called \"lane count\"</p>",
        "id": 226452063,
        "sender_full_name": "Lokathor",
        "timestamp": 1613428705
    },
    {
        "content": "<p>I don't think it needs to be, but I do think it makes sense to make it very explicit if you're using an array or a slice instead of a simd operation?</p>",
        "id": 226452075,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428727
    },
    {
        "content": "<p>Also, I know it's UB to do signed integer overflow in C/C++, but is it UB to do so with SIMD intrinsics?</p>",
        "id": 226452111,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428754
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://imgur.com/pRGzCst.png\"><img src=\"https://imgur.com/pRGzCst.png\"></a></div>",
        "id": 226452288,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613428899
    },
    {
        "content": "<p>I think because rust specifies that integers are twos compliment it's not UB in rust?</p>",
        "id": 226452296,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428907
    },
    {
        "content": "<p>Oh I meant C/C++ specifically.</p>",
        "id": 226452377,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428961
    },
    {
        "content": "<p>LLVM's add instruction performs two's compliment overflow</p>",
        "id": 226452380,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428964
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://imgur.com/OjVAj1T.png\"><img src=\"https://imgur.com/OjVAj1T.png\"></a></div>",
        "id": 226452381,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613428964
    },
    {
        "content": "<p>I know thatit's not in Rust.</p>",
        "id": 226452385,
        "sender_full_name": "Jubilee",
        "timestamp": 1613428967
    },
    {
        "content": "<p>Oh, no you can use _mm_add_epi32 or whatever to do overflow and that's fine</p>",
        "id": 226452412,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613428996
    },
    {
        "content": "<p>(a compiler could provide an Intel add intrinsic for a single integer that does it as well)</p>",
        "id": 226452511,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613429056
    },
    {
        "content": "<p>Oh OK, so in SIMD intrinsics, basically, you're never given the \"overflow is UB\" catch anyways</p>",
        "id": 226452562,
        "sender_full_name": "Jubilee",
        "timestamp": 1613429111
    },
    {
        "content": "<p>Yeah. Well maybe on some one's compliment system <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 226452680,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613429189
    },
    {
        "content": "<p>Though I suppose there you'd just have different overflow semantics</p>",
        "id": 226452701,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613429210
    },
    {
        "content": "<p>Here's the ppt in case anyone wants to bikeshed my visual design <a href=\"https://docs.google.com/presentation/d/1UZAQThA0TwdHalYNLLGJOxe0BV-drCF8QavI3tl5Q68/edit?usp=sharing\">https://docs.google.com/presentation/d/1UZAQThA0TwdHalYNLLGJOxe0BV-drCF8QavI3tl5Q68/edit?usp=sharing</a></p>",
        "id": 226453021,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613429447
    },
    {
        "content": "<p>Just wanted to add that in here. <a href=\"https://github.com/rust-lang/stdsimd/issues/56#issuecomment-779475737\">https://github.com/rust-lang/stdsimd/issues/56#issuecomment-779475737</a><br>\nAnyways, then I think we are good for today. We still have a bit of work before we should launch into landing on nightly, I think, but we're making good progress.<br>\n<span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzm√°n Macedo</span> Nice!</p>",
        "id": 226453169,
        "sender_full_name": "Jubilee",
        "timestamp": 1613429631
    },
    {
        "content": "<p>ermahgerd it's tarcieri!</p>",
        "id": 226453338,
        "sender_full_name": "Miguel Raz Guzm√°n Macedo",
        "timestamp": 1613429782
    },
    {
        "content": "<p>Thank you all for coming! <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 226453740,
        "sender_full_name": "Jubilee",
        "timestamp": 1613430192
    }
]