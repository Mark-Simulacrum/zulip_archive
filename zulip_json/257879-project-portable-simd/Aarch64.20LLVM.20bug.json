[
    {
        "content": "<p>Moving discussion here regarding the LLVM bug</p>",
        "id": 232658366,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617221904
    },
    {
        "content": "<p>I seem to have been able to produce a fairly minimal test that fails to compile:</p>",
        "id": 232658386,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617221918
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>#[test]\nfn is_normal() {\n    assert!(core_simd::SimdF32::&lt;64&gt;::splat(0.).is_normal().to_array()[0]);\n}\n</code></pre></div>",
        "id": 232658395,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617221925
    },
    {
        "content": "<p>it _only_ fails with lane counts of 64, I think</p>",
        "id": 232658457,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617221959
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>#[test]\nfn bug() {\n    use core_simd::{SimdF32, SimdU32};\n    let v = SimdF32::&lt;64&gt;::splat(0.);\n    let m = v.lanes_eq(SimdF32::splat(0.0)) &amp; v.lanes_eq(SimdF32::splat(0.0));\n    assert!(m.to_array()[0]);\n}\n</code></pre></div>",
        "id": 232660162,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617222657
    },
    {
        "content": "<p>An even more reduced form</p>",
        "id": 232660187,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617222667
    },
    {
        "content": "<p>interesting</p>",
        "id": 232666910,
        "sender_full_name": "Jubilee",
        "timestamp": 1617225586
    },
    {
        "content": "<p>I can't really get it simpler than this, so I'm going to try building rustc with LLVM assertions enabled</p>",
        "id": 232667149,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617225680
    },
    {
        "content": "<p>I've been able to get it down to a ~50 line self contained example</p>",
        "id": 232681899,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617233644
    },
    {
        "content": "<p><a href=\"https://github.com/calebzulawski/llvm-aarch64-codegen-crash/blob/master/src/lib.rs\">https://github.com/calebzulawski/llvm-aarch64-codegen-crash/blob/master/src/lib.rs</a></p>",
        "id": 232681901,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617233648
    },
    {
        "content": "<p>I've also figured out it only happens when building tests, I can't seem to replicate the bug within the crate itself</p>",
        "id": 232681966,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617233709
    },
    {
        "content": "<p>I also built rustc and the aarch64 std and it's not triggering any assertions</p>",
        "id": 232682012,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617233758
    },
    {
        "content": "<p>hmmm</p>",
        "id": 232682674,
        "sender_full_name": "Jubilee",
        "timestamp": 1617234239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> so you can write the buggy code and push it into an executable crate and run it directly but it doesn't happen unless libtest is involved?</p>",
        "id": 232682773,
        "sender_full_name": "Jubilee",
        "timestamp": 1617234295
    },
    {
        "content": "<p>Oh wait, I just realized since it's generic it didn't actually do any codegen</p>",
        "id": 232682845,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617234342
    },
    {
        "content": "<p>That may be why</p>",
        "id": 232682861,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617234361
    },
    {
        "content": "<p>hehe</p>",
        "id": 232682958,
        "sender_full_name": "Jubilee",
        "timestamp": 1617234417
    },
    {
        "content": "<p>yeah, force it to run somehow.</p>",
        "id": 232682969,
        "sender_full_name": "Jubilee",
        "timestamp": 1617234427
    },
    {
        "content": "<p>print statements are very good for this.</p>",
        "id": 232682984,
        "sender_full_name": "Jubilee",
        "timestamp": 1617234444
    },
    {
        "content": "<p>Actually, even with forcing it to codegen I can't seem to get it to error outside of a test</p>",
        "id": 232683440,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617234749
    },
    {
        "content": "<p>hmm</p>",
        "id": 232688245,
        "sender_full_name": "Jubilee",
        "timestamp": 1617238285
    },
    {
        "content": "<p>I can't figure out any way to generate llvm IR from a test?</p>",
        "id": 232688737,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617238772
    },
    {
        "content": "<p>Maybe I can generate the LLVM for the x86-64 target and expect it's the same?</p>",
        "id": 232688816,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617238818
    },
    {
        "content": "<p>hmm idk</p>",
        "id": 232690560,
        "sender_full_name": "Jubilee",
        "timestamp": 1617240266
    },
    {
        "content": "<p>try using -Csave-temps and using the .bc files it creates (which are equivalent to IR)</p>",
        "id": 232690693,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617240388
    },
    {
        "content": "<p>Since the aarch64 crashes do we think we can use x86-64?</p>",
        "id": 232690750,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617240472
    },
    {
        "content": "<p>you could try, but i'd guess not. or at least, it would depend on how far along it compiled. -Csave-temps should have output even if it crashes though</p>\n<p>you should ask in the wg-llvm zulip, though</p>",
        "id": 232693243,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617242682
    },
    {
        "content": "<p>yeah I think that thread should have enough information to follow up on this? or at least extracting some slightly differential LLVMIRs</p>",
        "id": 232817493,
        "sender_full_name": "Jubilee",
        "timestamp": 1617307786
    },
    {
        "content": "<p>Little bit of an update on this, the problem is in the thin LTO optimization pass.  The problem with this is there is no way to run this optimization pass with <code>opt</code> on the CLI, though it may be possible to utter the correct incantation to produce something relatively similar that reproduces the error (without rustc)</p>",
        "id": 232964822,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617407026
    },
    {
        "content": "<p>One interesting thing to point out is that we could conceivably temporarily avoid the bug by limiting vector widths to 32 instead of 64, which would be disappointing for AVX 512</p>",
        "id": 232964935,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617407122
    },
    {
        "content": "<p>Hey, I got it to segfault with just an llvm bytecode file and <code>opt</code>!</p>",
        "id": 232967524,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617409911
    },
    {
        "content": "<p>nice!</p>",
        "id": 232971609,
        "sender_full_name": "Jubilee",
        "timestamp": 1617414621
    }
]