[
    {
        "content": "<p>So,<code>simd_extract</code> and <code>simd_insert</code> allow you to mess with individual values in a vector. If the index is known constantly, this is faster / better codegen, given that many architectures <em>cough x86 cough</em> have instructions that prefer immediates here. Per our approach to shuffles, we have established a generic desire to want to allow developers to be confident they are setting const values when this matters, and thus to expose const vs. dynamic APIs.</p>\n<p>I kind of want to use <code>fn get</code> and <code>fn set</code> as the methods to do this for our vector types, because <del>that's the term Arm NEON uses</del> \"extract\" is a bit ambiguous with some possible shuffles we might want to offer and overall I think it's a bit cleaner than \"insert\", but this admittedly results in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">, wasm_bindgen_test)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">simple_insert</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SimdF32</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">set</span>::<span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mf\">9.1e3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">to_array</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">5.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">9.1e3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which is kind of an unexpected pattern.</p>",
        "id": 227119716,
        "sender_full_name": "Jubilee",
        "timestamp": 1613857381
    },
    {
        "content": "<p>otoh I don't think it's <strong>bad</strong> either, so!</p>",
        "id": 227119817,
        "sender_full_name": "Jubilee",
        "timestamp": 1613857479
    },
    {
        "content": "<p>So, unlike shuffles, is there any reason to think codegen wouldn't use the immediate variant if possible?  Since it's only a single integer argument it should do a good job reasoning about it</p>",
        "id": 227119861,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613857552
    },
    {
        "content": "<p>atm for more dynamic indicing we already have Index/IndexMut, I should note!</p>",
        "id": 227120055,
        "sender_full_name": "Jubilee",
        "timestamp": 1613857733
    },
    {
        "content": "<p>( it's a good question tho'. )</p>",
        "id": 227120066,
        "sender_full_name": "Jubilee",
        "timestamp": 1613857747
    },
    {
        "content": "<p>What I mean is, is there any reason to suspect Index/IndexMut won't generate the more optimal forms if the index is a constant</p>",
        "id": 227120083,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613857788
    },
    {
        "content": "<p>Via const propagation etc I'd expect LLVM to know</p>",
        "id": 227120142,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613857812
    },
    {
        "content": "<p>uh, based on what i know of stdarch, llvm would not \"just know\"</p>",
        "id": 227124075,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860835
    },
    {
        "content": "<p>like, there's a whole thing with these dumb macros to \"constify\" the inputs of the args of these intrinsics that take const args</p>",
        "id": 227124092,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860861
    },
    {
        "content": "<p>which they're <em>already</em> trying to undo and take out now that min-const-generics is going to be a thing, because the macros are wildly bad for compilation time</p>",
        "id": 227124122,
        "sender_full_name": "Lokathor",
        "timestamp": 1613860887
    },
    {
        "content": "<p>That's because LLVM requires those arguments to be immediate</p>",
        "id": 227124234,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613860985
    },
    {
        "content": "<p>This is just an optimization</p>",
        "id": 227124247,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613860991
    },
    {
        "content": "<p>I would honestly expect it to do the same optimization when working with small arrays</p>",
        "id": 227124269,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861019
    },
    {
        "content": "<p>i suppose if we don't have to assure anyone that a specific instruction is being used it's all fine</p>",
        "id": 227124416,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861128
    },
    {
        "content": "<p>personally i think that get and set with min const generics is just weird enough to help convey to people that they really shouldn't be doing that too much</p>",
        "id": 227124484,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861165
    },
    {
        "content": "<blockquote>\n<p>The first operand of an ‘insertelement’ instruction is a value of vector type. The second operand is a scalar value whose type must equal the element type of the first operand. The third operand is an index indicating the position at which to insert the value. The index may be a variable of any integer type.</p>\n</blockquote>",
        "id": 227124623,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861302
    },
    {
        "content": "<p>\"it's weird, and that's good actually\" is an amusing take.</p>",
        "id": 227124630,
        "sender_full_name": "Jubilee",
        "timestamp": 1613861309
    },
    {
        "content": "<p>I don't believe LLVM even has an instruction for const index insert/extract</p>",
        "id": 227124654,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861334
    },
    {
        "content": "<p>If we do it with const generics it's still just relying on the optimizer to notice the index is const</p>",
        "id": 227124687,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> it's always the most important take. Weird things should be weird for notable reasons, and if it's not weird then the interface shouldn't be weird either.</p>",
        "id": 227124993,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861627
    },
    {
        "content": "<p>it's like a comic book or a high school movie: anything that stands out needs a clear schtick</p>",
        "id": 227125057,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> oh if the const thing is a fake requirement then we don't need to keep it around.</p>",
        "id": 227125073,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861686
    },
    {
        "content": "<p>I think get/set on masks is a good example.  You can't just access the elements there because they're not bools</p>",
        "id": 227125078,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861697
    },
    {
        "content": "<p>Well on the Intel intrinsics I'm positive they're real, but in generic LLVM there is no such requirement as far as I can tell</p>",
        "id": 227125115,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861729
    },
    {
        "content": "<p>i think masks is actually not the best example because, since we're handling it within a method call, you <em>can</em> just take a bool and return a bool and fiddle the data on the library's end so the user never needs to care about the difference</p>",
        "id": 227125183,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861778
    },
    {
        "content": "<p>since we're not indexing and getting a <code>&amp;mut bool</code> for the user to write to, then it doesn't matter that they're fake bools</p>",
        "id": 227125192,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861804
    },
    {
        "content": "<p>Sorry, I meant it has a good reason to be \"weird\" and by weird I mean not using Index</p>",
        "id": 227125198,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861811
    },
    {
        "content": "<p>ah, right</p>",
        "id": 227125201,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861819
    },
    {
        "content": "<p>well i think the same logic roughly holds: we don't (generally) want people making references into the middle of a simd value</p>",
        "id": 227125233,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861854
    },
    {
        "content": "<p>Well, with neon it's free</p>",
        "id": 227125250,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861882
    },
    {
        "content": "<p>But I don't think there's any reason to promote it any more than just using Index</p>",
        "id": 227125297,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861906
    },
    {
        "content": "<p>yeah but remember this is a lowest common denominator api, in general</p>",
        "id": 227125299,
        "sender_full_name": "Lokathor",
        "timestamp": 1613861917
    },
    {
        "content": "<p>Yeah.  There are still definitely reasons to do it</p>",
        "id": 227125326,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861952
    },
    {
        "content": "<p>expected grouchy SIMD programmer take: but I wanna <strong>know</strong> that it's const!</p>",
        "id": 227125337,
        "sender_full_name": "Jubilee",
        "timestamp": 1613861971
    },
    {
        "content": "<p>Some fast fourier transform kernels do it since you need to conjugate the third element of the vector</p>",
        "id": 227125342,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613861984
    },
    {
        "content": "<p>Even on x86-64</p>",
        "id": 227125380,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613862005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I imagine LLVM's lowering code just says \"if index is const do this, if not do that\"</p>",
        "id": 227125634,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613862251
    },
    {
        "content": "<p>My understanding is that the point of const propagation was to enable more LLVM optimizations like that, not to help anything in rustc itself</p>",
        "id": 227125651,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613862291
    },
    {
        "content": "<p>I will say though that it's like relying on rustc or LLVM to not interpret that as \"place value on stack, now write into array\". <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 227125954,
        "sender_full_name": "Jubilee",
        "timestamp": 1613862634
    },
    {
        "content": "<p>you <em>can</em> know it's const: assign it to a const and pass that const to the indexing function</p>",
        "id": 227126593,
        "sender_full_name": "Lokathor",
        "timestamp": 1613863380
    },
    {
        "content": "<p>:3333</p>",
        "id": 227126597,
        "sender_full_name": "Lokathor",
        "timestamp": 1613863384
    },
    {
        "content": "<p>whew</p>",
        "id": 227127383,
        "sender_full_name": "Jubilee",
        "timestamp": 1613864204
    },
    {
        "content": "<p>I want to have some kind of codegen tests for this so we can see if there's a difference.</p>",
        "id": 233861090,
        "sender_full_name": "Jubilee",
        "timestamp": 1617989336
    },
    {
        "content": "<p>since Index/IndexMut requires taking the address of the vector, there are a lot of ways this kind of thing can confuse LLVM ime</p>",
        "id": 233883128,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617998804
    },
    {
        "content": "<p>IMO Index/IndexMut might a reasonable thing to use as the dynamic version of the api, but would be nice to have a const version. that said i think simd code doesn't do this that much IME</p>",
        "id": 233883415,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617998927
    },
    {
        "content": "<p>Fwiw the arm vendor API explicitly supports indexing that way in the C api</p>",
        "id": 233883488,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617998969
    },
    {
        "content": "<p>I would imagine any issues there would have been shaken out in clang</p>",
        "id": 233883639,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617999032
    },
    {
        "content": "<p>Also my point wrt consts is if you look at LLVM IR, there is no const version, that's specifically part of the Intel vendor API</p>",
        "id": 233883771,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617999117
    },
    {
        "content": "<p>llvm has never been above special casing consts in the c++</p>",
        "id": 233884402,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617999478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/bikesheddable.3A.20get.2Fset.20.2B.20_dyn.3F/near/233883488\">said</a>:</p>\n<blockquote>\n<p>Fwiw the arm vendor API explicitly supports indexing that way in the C api</p>\n</blockquote>\n<p>indexing this way as in an analogue to IndexMut? like, pointer-based?</p>",
        "id": 233886040,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618000308
    },
    {
        "content": "<p>Yeah, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;arm_neon.h&gt;\n\nvoid foo(float *p, int i) {\n    auto v = vld1q_f32(p);\n    v[i] = 0;\n    vst1q_f32(p, v);\n}\n</code></pre></div>",
        "id": 233887335,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618000976
    },
    {
        "content": "<p>That seems notably different to me. My point is that the IndexMut trait is &amp;mut Vector =&gt; &amp;mut Elem</p>",
        "id": 233888051,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618001366
    },
    {
        "content": "<p>I don't see how we could implement that using vld1q and vst1q, for example</p>",
        "id": 233888206,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618001443
    },
    {
        "content": "<p>Oh, you mean the vector is taken by reference.  There's no way to avoid that, the repr(simd) calling convention is that all vectors are always taken by reference</p>",
        "id": 233888303,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618001504
    },
    {
        "content": "<p>(its totally possible to implement with pointer arithmetic and casting and the like, of course</p>",
        "id": 233888305,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618001506
    },
    {
        "content": "<p>The dereferences are optimized out of course</p>",
        "id": 233888389,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618001542
    },
    {
        "content": "<p>calling convention isn't super relevant here, since we expect these ops to be inlined</p>",
        "id": 233888399,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618001550
    },
    {
        "content": "<p>I think it is, if you look at the generated unoptimized LLVM IR, all accesses to vectors go through references</p>",
        "id": 233888469,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618001596
    },
    {
        "content": "<p>here's llvm ir generated by clang: <a href=\"https://gcc.godbolt.org/z/hr6jKPT9e\">https://gcc.godbolt.org/z/hr6jKPT9e</a></p>",
        "id": 233888617,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1618001700
    },
    {
        "content": "<p>Here's a rust example using <code>IndexMut</code>: <a href=\"https://rust.godbolt.org/z/vehdKze8v\">https://rust.godbolt.org/z/vehdKze8v</a></p>",
        "id": 233892722,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618002896
    },
    {
        "content": "<p>Remember <code>IndexMut</code> can panic, so that function itself is a little verbose, but calling it with a const index optimizes to <code>insertelement</code></p>",
        "id": 233893006,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618002967
    },
    {
        "content": "<p>also yes I just realized my naming has an off-by-one error :)</p>",
        "id": 233893252,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618003046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/bikesheddable.3A.20get.2Fset.20.2B.20_dyn.3F/near/233883488\">said</a>:</p>\n<blockquote>\n<p>Fwiw the arm vendor API explicitly supports indexing that way in the C api</p>\n</blockquote>\n<p>Arm also provides intrinsics for these tho'</p>",
        "id": 233907725,
        "sender_full_name": "Jubilee",
        "timestamp": 1618012191
    },
    {
        "content": "<p>Oh my point was more that this api already exists for some vendors</p>",
        "id": 233908218,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618012502
    },
    {
        "content": "<p>ah</p>",
        "id": 233910084,
        "sender_full_name": "Jubilee",
        "timestamp": 1618013933
    },
    {
        "content": "<p>i'm not sure that i follow how vld1q/vst1q as shown are equivalent to this?</p>",
        "id": 233922754,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618026581
    },
    {
        "content": "<p>the accessing with <code>[]</code> instead of an intrinsic was the point</p>",
        "id": 233923451,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618027370
    },
    {
        "content": "<p>I just needed a vector</p>",
        "id": 233923495,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618027402
    },
    {
        "content": "<p>oh, that's present in clang and gcc on all vector apis though, that's part of the \"extended vector types\" extension</p>",
        "id": 233953087,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618059293
    },
    {
        "content": "<p>Oh I wasn't aware, I never use extensions, I just knew it was part of the arm API</p>",
        "id": 233953728,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618059909
    },
    {
        "content": "<p>Yah, and at least gcc back in the day used to be a bit unpredictable with how the some of the magic would be compiled, to the point where we banned all of it at a place i worked</p>",
        "id": 233953812,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618059974
    },
    {
        "content": "<p>Is my example convincing to everyone that LLVM is just fine at optimizing through references and generating <code>insertvector</code> when reasonable?</p>",
        "id": 233953820,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618059982
    },
    {
        "content": "<p>i think the question is probably if it will do that in some patterns you see in batch processing, where there's a lot more pointers involved which could confuse llvm. also, i suspect for some cases a non-mutating \"return new vector with this value in that slot\" api is decidedly cleaner.</p>",
        "id": 233954160,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618060276
    },
    {
        "content": "<p>that said at the end of the day i dont think this is an api that matters not much, since its fundamentally 1 item at a time</p>",
        "id": 233954173,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618060292
    },
    {
        "content": "<p>so im not willing to fight that hard here</p>",
        "id": 233954180,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618060299
    },
    {
        "content": "<p>That's a good point about the non-mutating API</p>",
        "id": 233954278,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618060374
    },
    {
        "content": "<p>Not sure how important it is but it's the most notable difference</p>",
        "id": 233954290,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618060393
    },
    {
        "content": "<blockquote>\n<p>i think the question is probably if it will do that in some patterns you see in batch processing, where there's a lot more pointers involved which could confuse llvm. </p>\n</blockquote>\n<p>and whether or not whatever the answer there is stays true after <del>we inevitably turn mutable-noalias off when someone hits a new miscompilation</del> ... things happen.</p>",
        "id": 233954393,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618060477
    }
]