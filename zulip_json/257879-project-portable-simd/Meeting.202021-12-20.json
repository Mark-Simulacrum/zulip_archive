[
    {
        "content": "<p>Hello. Opening this early as usual.</p>",
        "id": 265601731,
        "sender_full_name": "Jubilee",
        "timestamp": 1640025776
    },
    {
        "content": "<p>Yow yow yow</p>",
        "id": 265601861,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640025857
    },
    {
        "content": "<p>Er, should have linked this earlier. <a href=\"https://hackmd.io/46NYGIAJRX-ir6tgkTKiLg?both\">https://hackmd.io/46NYGIAJRX-ir6tgkTKiLg?both</a></p>",
        "id": 265614689,
        "sender_full_name": "Jubilee",
        "timestamp": 1640033685
    },
    {
        "content": "<p>I propose addressing intrinsics for equality after the comparison trait ops since that directly affects that PR</p>",
        "id": 265614946,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640033844
    },
    {
        "content": "<p>Oh, look, if I willfully read 0 just right to suit my own purposes, then \"usability\" is part of what it's talking about.</p>\n<p>Well, just now I tried to convert some integer vals to float, normalize the values <code>(x / image_max) * type_max</code>, and then convert back to integer. And it seems I cannot do this without an unsafe call. This is unfortunate.</p>",
        "id": 265615046,
        "sender_full_name": "Lokathor",
        "timestamp": 1640033899
    },
    {
        "content": "<p>Fortunately I think that falls under \"who is going to fix cast\", or is at least related</p>",
        "id": 265615114,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640033956
    },
    {
        "content": "<p>Reminder that someone proposed <code>lanes_as</code>, I liked that idea</p>",
        "id": 265615156,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640033985
    },
    {
        "content": "<p>hmm, i'm concerned about how often \"lanes\" gets prefixed</p>",
        "id": 265615325,
        "sender_full_name": "Lokathor",
        "timestamp": 1640034054
    },
    {
        "content": "<p>I am too, actually.</p>",
        "id": 265615340,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034061
    },
    {
        "content": "<p>It is very tedious to read.</p>",
        "id": 265615385,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034083
    },
    {
        "content": "<p>and to write</p>",
        "id": 265615398,
        "sender_full_name": "Lokathor",
        "timestamp": 1640034088
    },
    {
        "content": "<p>Anyways HELLO EVERYONE!<br>\nOkay so there's actually a reason that I put <a href=\"https://github.com/rust-lang/portable-simd/issues/209\">portable-simd#209</a> first, or at least, after 0.</p>",
        "id": 265615495,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034138
    },
    {
        "content": "<p>And actually let's talk about The Story So Far.</p>",
        "id": 265615538,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034169
    },
    {
        "content": "<p>In the code I wrote for <a href=\"https://github.com/rust-lang/portable-simd/issues/109\">portable-simd#109</a>, I just used <code>to</code> as <code>splat</code>/<code>lanes_as</code>: <a href=\"https://salsa.debian.org/Kazan-team/vector-math/-/blob/684e8be4fa4b7cf3de3e841a68ad53c2b057221b/src/traits.rs#L29\">https://salsa.debian.org/Kazan-team/vector-math/-/blob/684e8be4fa4b7cf3de3e841a68ad53c2b057221b/src/traits.rs#L29</a></p>",
        "id": 265615539,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640034169
    },
    {
        "content": "<p>We merged portable-simd in and we have had two syncs since then, one for<br>\nremoving autosplats: <a href=\"https://github.com/rust-lang/rust/pull/91484\">https://github.com/rust-lang/rust/pull/91484</a><br>\nand one for fixing libcore builds because Petrochenkov likes to build with <code>cpu=native</code>. <a href=\"https://github.com/rust-lang/rust/pull/92028\">https://github.com/rust-lang/rust/pull/92028</a></p>",
        "id": 265615739,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034283
    },
    {
        "content": "<p>isn't that the definition of making non-portable binaries?</p>",
        "id": 265615885,
        "sender_full_name": "Lokathor",
        "timestamp": 1640034363
    },
    {
        "content": "<p>lol<br>\nWe haven't added the stuff to (triagebot?) yet to alert us but so far everyone has been good about not poking without commentary.<br>\nAlso this PR was opened which extends the <code>portable_simd</code> feature with a method on slices: <a href=\"https://github.com/rust-lang/rust/pull/91479\">https://github.com/rust-lang/rust/pull/91479</a></p>",
        "id": 265615927,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034396
    },
    {
        "content": "<p>Ah, AVX512 borked some native builds. Thanks for the follow up.</p>",
        "id": 265615931,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640034399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-12-20/near/265615885\">said</a>:</p>\n<blockquote>\n<p>isn't that the definition of making non-portable binaries?</p>\n</blockquote>\n<p>Yes but Petrochenkov does this for local dev.</p>",
        "id": 265615977,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034430
    },
    {
        "content": "<p>It actually was only a problem building core with native features, specifically.  Nightly itself wasn't affected</p>",
        "id": 265616008,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640034461
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 265616031,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034477
    },
    {
        "content": "<p>Oh, thx.</p>",
        "id": 265616098,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640034498
    },
    {
        "content": "<p>Also I did a bunch of research on \"ways to fix the libm problem?\"<br>\nEventually I settled on \"let's just add an extension trait for now\" because uh, all the other ways are Very Painful,<br>\nin <a href=\"https://github.com/rust-lang/rust/pull/91891\">https://github.com/rust-lang/rust/pull/91891</a></p>",
        "id": 265616266,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034597
    },
    {
        "content": "<p>This will likely be Temporary, since we want another, better, longer-term solution. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 265616489,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034722
    },
    {
        "content": "<p>on the issue of size of <code>Simd&lt;T, 3&gt;</code>, SimpleV and likely RISC-V V and maybe SVE all want it to be exactly equivalent to <code>[T; 3]</code> in size and alignment</p>",
        "id": 265616619,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640034827
    },
    {
        "content": "<p>The PR to the blog wasn't merged. <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span> I don't know who I should poke about that.</p>",
        "id": 265616630,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-12-20/near/265616619\">said</a>:</p>\n<blockquote>\n<p>on the issue of size of <code>Simd&lt;T, 3&gt;</code>, SimpleV and likely RISC-V V and maybe SVE all want it to be exactly equivalent to <code>[T; 3]</code> in size and alignment</p>\n</blockquote>\n<p>Uhh I see what you are saying but I think that involves unanswered questions about Rust's alignment model, tbh.</p>",
        "id": 265616717,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034881
    },
    {
        "content": "<p>Also about what LLVM is actually capable of</p>",
        "id": 265616754,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640034907
    },
    {
        "content": "<p>for SimpleV, at least, <code>Simd&lt;T, N&gt;</code> has alignment of <code>T</code></p>",
        "id": 265616773,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640034926
    },
    {
        "content": "<p>I think jubilee is referencing the discovery that rust assigns fairly arbitrary alignments to vectors</p>",
        "id": 265616858,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640034969
    },
    {
        "content": "<p>Yes.</p>",
        "id": 265616875,
        "sender_full_name": "Jubilee",
        "timestamp": 1640034983
    },
    {
        "content": "<p>It doesn't appear to break anything, but they're definitely not correct</p>",
        "id": 265616888,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035001
    },
    {
        "content": "<p>relevant llvm proposal on element-based alignment of vectors: <a href=\"https://lists.llvm.org/pipermail/llvm-dev/2021-December/154192.html\">https://lists.llvm.org/pipermail/llvm-dev/2021-December/154192.html</a></p>",
        "id": 265616902,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640035009
    },
    {
        "content": "<p>I am not sure if we just passthrough to LLVM or what here</p>",
        "id": 265616940,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035032
    },
    {
        "content": "<p>anyways</p>",
        "id": 265616949,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035037
    },
    {
        "content": "<p>Okay, so using <code>wide</code>, this is a proper excerpt of what my situation looks like, &lt;<a href=\"https://gist.github.com/rust-play/8d0915a84a83f65cb0b147305b65ad68\">https://gist.github.com/rust-play/8d0915a84a83f65cb0b147305b65ad68</a>&gt;</p>",
        "id": 265617102,
        "sender_full_name": "Lokathor",
        "timestamp": 1640035149
    },
    {
        "content": "<p>We may want to develop a policy on how much code should live outside our repo, thinking about it, and if things outside <code>{core,std}::simd</code> should use another feature or how we should track them or what.</p>\n<p>But it seemed a trifle to recommit the code and reexport it upstream if we really wanted another entire crate, which is why I just threw <a href=\"https://github.com/rust-lang/rust/pull/91891\">https://github.com/rust-lang/rust/pull/91891</a> out the door.</p>",
        "id": 265617139,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035201
    },
    {
        "content": "<p>the take away is that the current setup requires phrases like <code>TargetType::round_from_int(ints)</code>, but <code>ints.round_to_float()</code> would better fit the usual rust style.</p>",
        "id": 265617144,
        "sender_full_name": "Lokathor",
        "timestamp": 1640035202
    },
    {
        "content": "<p>I think our main goal atm is to document all our Weird Discoveries we have made.</p>",
        "id": 265617201,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035229
    },
    {
        "content": "<p>there's so many weird discoveries</p>",
        "id": 265617222,
        "sender_full_name": "Lokathor",
        "timestamp": 1640035244
    },
    {
        "content": "<p>I need to check that in Julia as well o.0</p>",
        "id": 265617284,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640035286
    },
    {
        "content": "<p>That is why I just injected this straight-up rambling into my PR in <a href=\"https://github.com/rust-lang/portable-simd/pull/210\">https://github.com/rust-lang/portable-simd/pull/210</a><br>\nBut first,<br>\n<a href=\"https://github.com/rust-lang/portable-simd/pull/209\">https://github.com/rust-lang/portable-simd/pull/209</a></p>",
        "id": 265617297,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035295
    },
    {
        "content": "<p>Uhm, I actually wanted to cover that first because I think it's a fairly small and anodyne PR as opposed to the contention around <a href=\"https://github.com/rust-lang/portable-simd/issues/206\">portable-simd#206</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so while I don't agree with it relaxing the trait bounds and I doubt that will be the absolute final impl I think anything else can rebase more easily atop it so we could probably just merge it?</p>",
        "id": 265617418,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035372
    },
    {
        "content": "<p>merging <a href=\"https://github.com/rust-lang/portable-simd/issues/209\">portable-simd#209</a> sounds good to me!</p>",
        "id": 265617556,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640035462
    },
    {
        "content": "<p>It's probably fine because we don't plan on adding any types that aren't PartialEq, but it's worth noting it affects the bounds in probably an undesirable way</p>",
        "id": 265617607,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035506
    },
    {
        "content": "<p>I also don't think it should call the intrinsics directly, it should use the mask functions</p>",
        "id": 265617705,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035572
    },
    {
        "content": "<p>Oh okay.</p>",
        "id": 265617710,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035579
    },
    {
        "content": "<p>I just figured it wasn't worth requesting changes if we were going to potentially replace it anyway</p>",
        "id": 265617763,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035641
    },
    {
        "content": "<p>Can you post your review comments? I am okay with delaying it on review but I would prefer we not have PRs wait on <em>each other</em> unless they <strong>have</strong> to.</p>",
        "id": 265617764,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035641
    },
    {
        "content": "<p>I mean</p>",
        "id": 265617786,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035663
    },
    {
        "content": "<p>Hm.</p>",
        "id": 265617795,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035669
    },
    {
        "content": "<p>Not as sure then. Moving on? For <a href=\"https://github.com/rust-lang/portable-simd/pull/203\">https://github.com/rust-lang/portable-simd/pull/203</a>, uh.</p>",
        "id": 265617838,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035683
    },
    {
        "content": "<p>I don't personally mind redoing things, just didn't want to waste their time</p>",
        "id": 265617849,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035684
    },
    {
        "content": "<p>...The code looks fine but I don't know what a \"spectral normalization\" is so I don't know if it actually is an example of such and what goals it would have. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 265617896,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035734
    },
    {
        "content": "<p>I haven't reviewed that PR at all, yet</p>",
        "id": 265617922,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035762
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 265617938,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035780
    },
    {
        "content": "<p>I do know what a spectral norm is though, so I'll take a look at some point</p>",
        "id": 265617955,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035798
    },
    {
        "content": "<p>Okay!<br>\nI think <a href=\"https://github.com/rust-lang/portable-simd/pull/210\">https://github.com/rust-lang/portable-simd/pull/210</a> is just waiting on me refactoring the macros again, right?</p>",
        "id": 265618028,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035824
    },
    {
        "content": "<p>Yup</p>",
        "id": 265618042,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035831
    },
    {
        "content": "<p>The change itself lgtm</p>",
        "id": 265618070,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035850
    },
    {
        "content": "<p>Cool.</p>",
        "id": 265618075,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035855
    },
    {
        "content": "<p>There was some drift since <a href=\"https://github.com/rust-lang/portable-simd/pull/182\">https://github.com/rust-lang/portable-simd/pull/182</a></p>",
        "id": 265618100,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035879
    },
    {
        "content": "<p>Yeah, I can redo that one</p>",
        "id": 265618117,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035893
    },
    {
        "content": "<p>I experimentally rebased it (deleting comments that drifted) here: <a href=\"https://github.com/rust-lang/portable-simd/pull/217\">https://github.com/rust-lang/portable-simd/pull/217</a></p>",
        "id": 265618132,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035911
    },
    {
        "content": "<p>Clippy was only just updated so I was waiting on that</p>",
        "id": 265618138,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640035913
    },
    {
        "content": "<p>hokay~</p>",
        "id": 265618216,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035945
    },
    {
        "content": "<p>Closing the other one then~</p>",
        "id": 265618282,
        "sender_full_name": "Jubilee",
        "timestamp": 1640035998
    },
    {
        "content": "<p>Do we have any commentary/discussion on <a href=\"https://github.com/rust-lang/rust/pull/91891\">https://github.com/rust-lang/rust/pull/91891</a> ? (the Float trait one)</p>",
        "id": 265618423,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036096
    },
    {
        "content": "<p>lgtm!</p>",
        "id": 265618573,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640036221
    },
    {
        "content": "<p>I wasn't aware of that one, planning on merging that back to stdsimd? Looks about right to me</p>",
        "id": 265618584,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036229
    },
    {
        "content": "<p>I'd like to run our test suite etc over that trait</p>",
        "id": 265618613,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036257
    },
    {
        "content": "<p>It would have to be in a separate crate.</p>",
        "id": 265618622,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036268
    },
    {
        "content": "<p>but otherwise sure, I can PR that against our stuff.</p>",
        "id": 265618673,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036288
    },
    {
        "content": "<p>I was just very \"zzz let's open this and see what someone says\" at the moment I wrote it.</p>",
        "id": 265618701,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036320
    },
    {
        "content": "<p>Not sure about the exact organization but I'd like it eventually along with the rest of the code</p>",
        "id": 265618741,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036373
    },
    {
        "content": "<p>Could probably be in the same crate but separate modules, too</p>",
        "id": 265618757,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-12-20/near/265618741\">said</a>:</p>\n<blockquote>\n<p>Not sure about the exact organization but I'd like it eventually along with the rest of the code</p>\n</blockquote>\n<p>Yeah, that can be arranged.</p>",
        "id": 265618759,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036388
    },
    {
        "content": "<p>I haven't actually looked at <a href=\"https://github.com/rust-lang/portable-simd/pull/206\">https://github.com/rust-lang/portable-simd/pull/206</a> since, tbh.</p>",
        "id": 265618826,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036425
    },
    {
        "content": "<p>After our last conversation about it I tried my best to split up what's happening, traits to indicate semantic meaning (including the bounds on the std::ops traits), and hiding the implementation in sealed traits</p>",
        "id": 265618945,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036524
    },
    {
        "content": "<p>I _think_ it accomplishes roughly what we are both looking for regarding both semantics and actual implementation</p>",
        "id": 265618990,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036572
    },
    {
        "content": "<p>I think we might be able to improve docs output, or at least the user's ability to understand docs output.</p>",
        "id": 265619019,
        "sender_full_name": "Lokathor",
        "timestamp": 1640036613
    },
    {
        "content": "<p>Hm, I don't think that was my issue exactly tho'...</p>",
        "id": 265619025,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036621
    },
    {
        "content": "<p>Yeah, my change actually addressed the docs too, but that wasn't really what I was aiming for</p>",
        "id": 265619082,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036655
    },
    {
        "content": "<p>I actually find it somewhat confusing the trait docs don't contain methods anymore...</p>",
        "id": 265619140,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036714
    },
    {
        "content": "<p>The current state is that there is <code>trait SimdPartialEq: PartialEq</code> which means it's a type that you can run a vectorized PartialEq on</p>",
        "id": 265619151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036723
    },
    {
        "content": "<p>Well,<br>\nThat's true of all the SimdElement types tho'.</p>",
        "id": 265619244,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036782
    },
    {
        "content": "<p>Well, the point is it's nearly identical to before, how you could call <code>lanes_eq</code> on something that implemented PartialEq, despite PartialEq not implementing simd ops</p>",
        "id": 265619265,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036809
    },
    {
        "content": "<p>Well, then we should add <code>SimdElement: PartialEq</code> maybe? I'm not sure if that's a good idea</p>",
        "id": 265619307,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036853
    },
    {
        "content": "<p>I mean, I think part of the point of divergence/confusion is that, to me, the intended bound <code>SimdElement</code> is to reflect is <code>MachScalar</code>.</p>",
        "id": 265619406,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036899
    },
    {
        "content": "<p>MachScalar?</p>",
        "id": 265619416,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640036912
    },
    {
        "content": "<p>\"Machine Scalar\".<br>\nBasically a direct clone of the rules in <code>rustc_typeck</code>.</p>",
        "id": 265619480,
        "sender_full_name": "Jubilee",
        "timestamp": 1640036967
    },
    {
        "content": "<p>Well, depends what you mean by that</p>",
        "id": 265619514,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037000
    },
    {
        "content": "<p>Are newtypes of scalars that carry special semantic meaning not machine scalars anymore?</p>",
        "id": 265619577,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037024
    },
    {
        "content": "<p>Hm.</p>",
        "id": 265619606,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037050
    },
    {
        "content": "<p>such as NonZeroU32?</p>",
        "id": 265619614,
        "sender_full_name": "Lokathor",
        "timestamp": 1640037057
    },
    {
        "content": "<p>well, SimpleV at least, allows you to construct vectors of vectors, so the element type isn't always a scalar...</p>",
        "id": 265619615,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640037057
    },
    {
        "content": "<p>Pointers are just integers on some (many?) architectures so that's already effectively a newtype around usize with special semantics</p>",
        "id": 265619655,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037094
    },
    {
        "content": "<p>oh, that isn't the case.</p>",
        "id": 265619724,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037128
    },
    {
        "content": "<p>And will probably become less so as time goes on.</p>",
        "id": 265619753,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037162
    },
    {
        "content": "<p>On CHERI, for instance,<br>\nyou simply cannot read a pointer if you do not read it perfectly aligned.<br>\nThat is, if you read half the bytes of the pointer along with some adjacent bytes<br>\nand half the bytes of the pointer along with some adjacent bytes<br>\nand compose them together<br>\nyou do not have the same pointer.<br>\nOn the hardware level.</p>",
        "id": 265619914,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037283
    },
    {
        "content": "<p>Basically all I'm saying is that PartialEq has to do with the semantics of the language and has nothing to do with whether or not it can be stored in a vector, and SimdElement is just saying it's something that has a simd-compatible layout, which could theoretically include newtypes with whatever arbitrary semantics they carry</p>",
        "id": 265619943,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037305
    },
    {
        "content": "<p>( more... conventional pointer tagging APIs already exist too. )</p>",
        "id": 265619963,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037322
    },
    {
        "content": "<p>And SimdPartialEq is the combination of the two that allows you to call a vector comparison on it</p>",
        "id": 265619975,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037335
    },
    {
        "content": "<blockquote>\n<p>Basically all I'm saying is that PartialEq has to do with the semantics of the language and has nothing to do with whether or not it can be stored in a vector</p>\n</blockquote>\n<p>true.</p>\n<blockquote>\n<p>and SimdElement is just saying it's something that has a simd-compatible layout, which could theoretically include newtypes with whatever arbitrary semantics they carry</p>\n</blockquote>\n<p>hmm, true but I think I want to interrogate that \"newtypes with arbitrary semantics\" bit more.</p>",
        "id": 265620055,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037387
    },
    {
        "content": "<p>Do we want to lock ourselves out of <code>Simd</code> being a <code>Pod</code> type?</p>",
        "id": 265620093,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037432
    },
    {
        "content": "<p>Right now <code>SimdElement</code> requires <code>Copy</code> which I think is a reasonable limitation</p>",
        "id": 265620134,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037471
    },
    {
        "content": "<p><code>Simd&lt;T, N&gt;: Pod</code> if <code>T: Pod</code></p>",
        "id": 265620192,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640037489
    },
    {
        "content": "<p>Right.</p>",
        "id": 265620196,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037496
    },
    {
        "content": "<p>So any newtype we want to be in a vector would necessarily be <code>Copy</code></p>",
        "id": 265620200,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037499
    },
    {
        "content": "<p>I think that locks us out from anything particularly disturbing</p>",
        "id": 265620218,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037521
    },
    {
        "content": "<p>All that remains are really just integers or pointers that provide slightly specialized operations</p>",
        "id": 265620255,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037548
    },
    {
        "content": "<p>I'd want a vector of mutable references...which are not <code>Copy</code></p>",
        "id": 265620258,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640037550
    },
    {
        "content": "<p>I think it would be reasonable to use pointers for that but we should reevaluate that case separately from this one IMO</p>",
        "id": 265620403,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037613
    },
    {
        "content": "<p>I'm just saying that this PR isn't opening the door to anything like that, it's just potentially allowing regular number with alternative semantics</p>",
        "id": 265620618,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037713
    },
    {
        "content": "<p>I'd really really hope to see a <code>Simd&lt;NonNan&lt;f32&gt;, _&gt;</code> or similar in the future</p>",
        "id": 265620726,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037768
    },
    {
        "content": "<p>e.g. <code>struct F16(u16); // no native f16 yet</code></p>",
        "id": 265620745,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640037780
    },
    {
        "content": "<p>Hm.</p>",
        "id": 265620753,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037786
    },
    {
        "content": "<p>I'm also definitely not proposing user-provided newtypes, that would be a nightmare</p>",
        "id": 265620781,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037806
    },
    {
        "content": "<p>I just figure any newtype important enough to end up in std should have full simd support too if it makes sense</p>",
        "id": 265620816,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037830
    },
    {
        "content": "<p><em>ponder</em></p>",
        "id": 265620932,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037886
    },
    {
        "content": "<p>For the same reason it would be a little weird to say no, you need to use <code>NonNull&lt;[* const _, N]&gt;</code></p>",
        "id": 265620992,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037928
    },
    {
        "content": "<p>so: <code>Simd&lt;MaybeUninit&lt;Cell&lt;Wrapping&lt;i16&gt;&gt;&gt;, 4&gt;</code>?</p>",
        "id": 265621004,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640037939
    },
    {
        "content": "<p>I see.</p>",
        "id": 265621016,
        "sender_full_name": "Jubilee",
        "timestamp": 1640037945
    },
    {
        "content": "<p>I'm not willing to address Cell yet, lol</p>",
        "id": 265621032,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037960
    },
    {
        "content": "<p>Right now I'm basically just thinking about basic types with slightly modified semantics</p>",
        "id": 265621118,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640037991
    },
    {
        "content": "<p>Things that are effectively machine types with no special behavior, other than language semantics like disallowing specific states</p>",
        "id": 265621215,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038059
    },
    {
        "content": "<p>This change doesn't mean we are _required_ to shove everything possible into <code>Simd</code>, it just allows us to implement the cases that are straightforward and make sense</p>",
        "id": 265621355,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038133
    },
    {
        "content": "<p><code>Simd&lt;AssertUnwindSafe&lt;ManuallyDrop&lt;MaybeUninit&lt;Saturating&lt;i128&gt;&gt;&gt;&gt;, 16&gt;</code></p>",
        "id": 265621507,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640038228
    },
    {
        "content": "<p>Ack, we got stuck on this. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265621752,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038375
    },
    {
        "content": "<p>It's also worth noting that ignoring the entire discussion of newtypes, there's no reasonable way of implementing <code>clamp</code> without the <code>SimdPartialOrd</code> trait.</p>",
        "id": 265621754,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038377
    },
    {
        "content": "<p>Does anyone want to fall on the sword of fixing <code>simd_cast</code>?</p>",
        "id": 265621787,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038398
    },
    {
        "content": "<p>Because integers and floats are fundamentally different, even more different than newtypes</p>",
        "id": 265621805,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038409
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 265621815,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038414
    },
    {
        "content": "<p>I wouldn't mind doing the cast changes, just might not get around to it right away</p>",
        "id": 265621836,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038437
    },
    {
        "content": "<p>Hm. when would you have time?</p>",
        "id": 265621943,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038455
    },
    {
        "content": "<p>I'm pretty familiar with that part of rustc by now</p>",
        "id": 265621960,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038459
    },
    {
        "content": "<p>Closer to the end of the month/beginning of January probably?</p>",
        "id": 265622078,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038487
    },
    {
        "content": "<p>Or whenever I feel particularly motivated</p>",
        "id": 265622131,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038501
    },
    {
        "content": "<p>Ahh okay!<br>\nUnderstandable.<br>\nHeh, iktf.</p>",
        "id": 265622188,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038514
    },
    {
        "content": "<p>XD</p>",
        "id": 265622204,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640038516
    },
    {
        "content": "<p>I'd like to add safe float casting too, which is a bit more work</p>",
        "id": 265622215,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038518
    },
    {
        "content": "<p>iirc you can just use llvm's saturating float conversion instrinsic, it trivially vectorizes</p>",
        "id": 265622394,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640038589
    },
    {
        "content": "<p>I am wondering if <code>simd_cast</code> shouldn't be like several intrinsics</p>",
        "id": 265622397,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038590
    },
    {
        "content": "<p>Yeah, I think it should be two intrinsics at least</p>",
        "id": 265622425,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038612
    },
    {
        "content": "<p>exactly as many intrinsics as <code>as</code> :P</p>",
        "id": 265622451,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640038638
    },
    {
        "content": "<p>I actually think I'm just going to add <code>simd_as</code> with the intention of identical behavior to <code>as</code></p>",
        "id": 265622544,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038683
    },
    {
        "content": "<p>pft</p>",
        "id": 265622563,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038699
    },
    {
        "content": "<p>And extend <code>simd_cast</code> to work with usize and no more special behavior</p>",
        "id": 265622572,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038709
    },
    {
        "content": "<p>Could be <code>simd_saturating_cast</code> if you don't like <code>simd_as</code> <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 265622634,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640038770
    },
    {
        "content": "<p>if your splitting it, may I suggest 9 intrinsics (not particularly serious): <code>simd_trunc</code> <code>simd_sext</code> <code>simd_zext</code>, <code>simd_bitcast</code>, <code>simd_ftoi</code>, <code>simd_ftoi_saturating</code>, <code>simd_itof</code>, <code>simd_fext</code>, <code>simd_ftrunc</code></p>",
        "id": 265622780,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640038847
    },
    {
        "content": "<p>inspired by llvm's hodgepodge of instructions/intrinsics</p>",
        "id": 265622910,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640038924
    },
    {
        "content": "<p>Oh, I just giggled for some reason / found it amusing.<br>\nAlright, I think I will leave the other bits for a future agenda. Thanks for coming!</p>",
        "id": 265622952,
        "sender_full_name": "Jubilee",
        "timestamp": 1640038953
    },
    {
        "content": "<p>And happy holidays/ NYE to those who <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 265623410,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640039324
    },
    {
        "content": "<p>Feliz Navidad~</p>",
        "id": 265625021,
        "sender_full_name": "Jubilee",
        "timestamp": 1640040516
    }
]