[
    {
        "content": "<p>So I guess it's time to analyze this once more, huh.</p>",
        "id": 252044854,
        "sender_full_name": "Jubilee",
        "timestamp": 1630811202
    },
    {
        "content": "<p>Passing on x86_64:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo test --all # note lack of optimization\ncargo test --release --test &quot;f*_ops&quot;\ncargo test --release --test &quot;[iu][1-6][1-6]_ops&quot;\n</code></pre></div>\n<p>Failing on x86_64:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo test --release --test [iu]8_ops\n</code></pre></div>\n<p>So the question is: what assumption is being made only on byte ops?</p>",
        "id": 252045594,
        "sender_full_name": "Jubilee",
        "timestamp": 1630812112
    },
    {
        "content": "<p>I suppose it's possible we're accidentally relying on some UB?</p>",
        "id": 252045678,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1630812199
    },
    {
        "content": "<p>That fails some sort of assertion?</p>",
        "id": 252045686,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1630812217
    },
    {
        "content": "<p>I mean it is also always possible that the error is with LLVM.</p>",
        "id": 252048254,
        "sender_full_name": "Jubilee",
        "timestamp": 1630815382
    },
    {
        "content": "<p>alright, re-rerunning the tests.</p>\n<p>I think the issue must be with inlining since it succeeds in debug.<br>\nIt would be nice to isolate where.</p>",
        "id": 252549642,
        "sender_full_name": "Jubilee",
        "timestamp": 1631143874
    },
    {
        "content": "<p>Same.</p>",
        "id": 252549808,
        "sender_full_name": "Jubilee",
        "timestamp": 1631144007
    },
    {
        "content": "<p>I assume LLVM has been updated recently?</p>",
        "id": 252550114,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631144233
    },
    {
        "content": "<p>I doubt anything changed on the rustc end</p>",
        "id": 252550134,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631144254
    },
    {
        "content": "<p>I believe we recently moved to LLVM 13.</p>",
        "id": 252550553,
        "sender_full_name": "Jubilee",
        "timestamp": 1631144549
    },
    {
        "content": "<p>Yes, it is, August 21 or so had LLVM 13 merged in, so right after the last green. <a href=\"https://github.com/rust-lang/rust/pull/87570\">https://github.com/rust-lang/rust/pull/87570</a><br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> Motion to merge with broken tests given we can verify everything else works OK and it is almost certainly LLVM 13. Also would accept: disabling these tests in CI and filing the issue.</p>",
        "id": 252551492,
        "sender_full_name": "Jubilee",
        "timestamp": 1631145304
    },
    {
        "content": "<p>I'm okay with merging it broken, to some extent I think I'd prefer keeping the broken tests</p>",
        "id": 252551617,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631145416
    },
    {
        "content": "<p>Considering they're by far the most frequent usage</p>",
        "id": 252551632,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631145426
    },
    {
        "content": "<p>Absolutely fine by me.</p>",
        "id": 252551674,
        "sender_full_name": "Jubilee",
        "timestamp": 1631145476
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/88769\">https://github.com/rust-lang/rust/issues/88769</a></p>",
        "id": 252552511,
        "sender_full_name": "Jubilee",
        "timestamp": 1631146119
    },
    {
        "content": "<p>Might be worth bringing that up in the LLVM channel if you haven't already</p>",
        "id": 252552703,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631146280
    },
    {
        "content": "<p>I wonder if it affects the stable intrinsics</p>",
        "id": 252552713,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631146289
    },
    {
        "content": "<p>It is entirely possible, tbh.</p>",
        "id": 252556761,
        "sender_full_name": "Jubilee",
        "timestamp": 1631149853
    },
    {
        "content": "<p>I wasn't under the impression they're tested particularly exhaustively</p>",
        "id": 252556786,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631149887
    },
    {
        "content": "<p>Nothing appears to break, running the stdarch tests.</p>",
        "id": 252559747,
        "sender_full_name": "Jubilee",
        "timestamp": 1631152669
    },
    {
        "content": "<p>That's good, I suppose</p>",
        "id": 252559798,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631152693
    },
    {
        "content": "<p>Though I was kind of hoping something did so it didn't fall completely on us <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 252559824,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631152724
    },
    {
        "content": "<p>pffft</p>",
        "id": 252560339,
        "sender_full_name": "Jubilee",
        "timestamp": 1631153107
    },
    {
        "content": "<p>...oh, many do if I turn on avx2.</p>",
        "id": 252560385,
        "sender_full_name": "Jubilee",
        "timestamp": 1631153150
    },
    {
        "content": "<p>It looks like it's mostly the instruction assertions.</p>",
        "id": 252560610,
        "sender_full_name": "Jubilee",
        "timestamp": 1631153317
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdarch/issues/1209\">https://github.com/rust-lang/stdarch/issues/1209</a><br>\nYeah in <code>--release</code> with higher-level instruction sets on it's doing extra optimizations and inlining.</p>",
        "id": 252562617,
        "sender_full_name": "Jubilee",
        "timestamp": 1631154945
    },
    {
        "content": "<p>Ah so might be okay</p>",
        "id": 252562692,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631154998
    },
    {
        "content": "<p>Well in this case it basically is emitting VEX prefixed versions of instructions.<br>\nI am guessing some optimization that LLVM now emits is subtly bogus.</p>",
        "id": 252562827,
        "sender_full_name": "Jubilee",
        "timestamp": 1631155125
    },
    {
        "content": "<p>That or we are majorly screwed up! :D</p>",
        "id": 252563269,
        "sender_full_name": "Jubilee",
        "timestamp": 1631155493
    },
    {
        "content": "<p>...nah that doesn't seem likely.</p>",
        "id": 252563280,
        "sender_full_name": "Jubilee",
        "timestamp": 1631155502
    },
    {
        "content": "<p>If we can narrow down which fns it's choking on maybe it will reveal we did screw up lol</p>",
        "id": 252563411,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631155594
    },
    {
        "content": "<p>But agreed it's unlikely</p>",
        "id": 252563421,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631155603
    },
    {
        "content": "<p>yeah, need to bisect the test suite.</p>",
        "id": 252574917,
        "sender_full_name": "Jubilee",
        "timestamp": 1631167032
    },
    {
        "content": "<p><code>cargo test --doc --release</code> passes, so there's that.</p>",
        "id": 252575207,
        "sender_full_name": "Jubilee",
        "timestamp": 1631167246
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">horizontal_product</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">test_helpers</span>::<span class=\"n\">test_1</span><span class=\"p\">(</span><span class=\"o\">&amp;|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">test_helpers</span>::<span class=\"n\">prop_assert_biteq</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"cp\">$vector</span>::<span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">horizontal_product</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">().</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>::<span class=\"n\">wrapping_mul</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I found the murderer.</p>",
        "id": 252575388,
        "sender_full_name": "Jubilee",
        "timestamp": 1631167417
    },
    {
        "content": "<p>Merely invoking</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"platform-intrinsic\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">simd_reduce_mul_ordered</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">U</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>isn't enough, though, it seems.</p>",
        "id": 252583069,
        "sender_full_name": "Jubilee",
        "timestamp": 1631172809
    },
    {
        "content": "<p><a href=\"https://bugs.llvm.org/show_bug.cgi?id=51811\">https://bugs.llvm.org/show_bug.cgi?id=51811</a> looks like it's this.</p>",
        "id": 252682154,
        "sender_full_name": "Jubilee",
        "timestamp": 1631216158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> has marked this topic as unresolved.</p>",
        "id": 253172323,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631573332
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>mkdir issue-88769\n<span class=\"nb\">cd</span> issue-88769\n\ncurl -sSO https://gist.githubusercontent.com/eddyb/08ea4736082d9b2326a984c4cb828a08/raw/6a2b96cd8422950fa2b160e518671df66965a863/issue-88769-min.rs\n\nrustup toolchain install nightly-2021-09-12 -c llvm-tools-preview\n\n<span class=\"c1\"># This will crash - ignore the crash and keep going, `-C save-temps` works.</span>\nrustc +nightly-2021-09-12 issue-88769-min.rs -O -C save-temps\n\n<span class=\"c1\"># This reproduces the crash using the `.bc` from `-C save-temps`.</span>\n~/.rustup/toolchains/2021-09-12-x*64*/lib/rustlib/x*64*/bin/opt -O3 issue-88769-min.*-cgu.3.rcgu.no-opt.bc &gt; opt.bc\n</code></pre></div>\n<p>Could someone run this and see if the minimization still repros?</p>",
        "id": 253172415,
        "sender_full_name": "Jubilee",
        "timestamp": 1631573403
    },
    {
        "content": "<p>Well, I didn't run the minimization yet, but I can't build portable-simd</p>",
        "id": 253178605,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631577545
    },
    {
        "content": "<p>really??? can't even <code>cargo build</code>?</p>",
        "id": 253178883,
        "sender_full_name": "Jubilee",
        "timestamp": 1631577710
    },
    {
        "content": "<p>I ran the example and opt crashes in the same spot</p>",
        "id": 253178947,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631577734
    },
    {
        "content": "<p>wait</p>",
        "id": 253178986,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631577764
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># rustc +nightly-2021-09-12 --version\nrustc 1.57.0-nightly (8c2b6ea37 2021-09-11)\n</code></pre></div>",
        "id": 253179016,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631577791
    },
    {
        "content": "<p>I tested in the meeting thread on today's nightly, probably <code>nightly-2021-09-13</code></p>",
        "id": 253179207,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1631577876
    },
    {
        "content": "<p>so to clarify, I can <code>cargo build --release</code>, I meant that I can't build the tests</p>",
        "id": 253179646,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631578083
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rustc 1.57.0-nightly (51e514c0f 2021-09-12)\n</code></pre></div>",
        "id": 253179826,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631578226
    },
    {
        "content": "<p>is the current nightly, that still fails</p>",
        "id": 253179832,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631578234
    },
    {
        "content": "<p>looking at the git log, the llvm update commit should be in that nightly commit</p>",
        "id": 253179878,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631578289
    },
    {
        "content": "<p>does the llvm build get cached? maybe it's using the old one by mistake</p>",
        "id": 253179980,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1631578359
    },
    {
        "content": "<p>is there any chance the release doesn't use the in-tree llvm?</p>",
        "id": 253180033,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631578419
    },
    {
        "content": "<p>maybe pulling from ci?</p>",
        "id": 253180041,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631578425
    },
    {
        "content": "<p>idk, didn't see anything after some looking, but it's highly likely I was just looking in the wrong spot</p>",
        "id": 253181014,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1631579191
    },
    {
        "content": "<p>Okay, it should be the nightly with the tree LLVM updated.z</p>",
        "id": 253181858,
        "sender_full_name": "Jubilee",
        "timestamp": 1631579921
    }
]