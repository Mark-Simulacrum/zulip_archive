[
    {
        "content": "<p>Heya! I'm curious what the reasoning behind SupportedLaneCount not supporting 64, like a <code>u8x64</code>. Let me know if there's any way I can help!</p>",
        "id": 254368683,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632318115
    },
    {
        "content": "<p>It hasn't been tested in a bit--but the restriction comes from a bug in LLVM aarch64 codegen</p>",
        "id": 254368849,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632318169
    },
    {
        "content": "<p>Vectors over 32 elements crashed the compiler</p>",
        "id": 254368909,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632318190
    },
    {
        "content": "<p>Oh interesting, I could give it a whirl. I could just add <code>64</code> as a supported lane count and give it a few tries? I'd love to go even wider as I deploy a lot to AVX-512 and being able to overcommit the CPU is usually really nice as most integer operations are 2 instr/cycle if they're independent, which usually can lead to doulbe the perf (eg. using a <code>u8x128</code> instead of <code>u8x64</code> on AVX-512)</p>",
        "id": 254369151,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632318277
    },
    {
        "content": "<p>I'd actually like vectors to go much, much wider to allow you to do things like manual loop unrolling (since very long rust vectors will just compile down to multiple hardware vectors)</p>",
        "id": 254369471,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632318386
    },
    {
        "content": "<p>yeah, that'd be awesome</p>",
        "id": 254369500,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632318399
    },
    {
        "content": "<p>If you want to give it a shot, it's possible it was fixed since LLVM has been updated since we found the bug</p>",
        "id": 254369544,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632318417
    },
    {
        "content": "<p>Though I'm not particularly optimistic</p>",
        "id": 254369559,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632318423
    },
    {
        "content": "<p>Would be so huge since it'd effectively double most of my logic's perf. I've verified that indeed doubling the width of vectors from native (for basic ops) is a straight 2x perf since the compiler just emits 2 non-dependent instructions for each op</p>",
        "id": 254369674,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632318466
    },
    {
        "content": "<p>Thoughts on making it relaxed for <code>cfg(x86)</code> or so if it's specifically and aarch64 codegen issue?</p>",
        "id": 254370063,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632318591
    },
    {
        "content": "<p>Yeah, in some cases throughput on Intel is 4x instructions so you can sometimes even quadruple the hardware vector length</p>",
        "id": 254370165,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632318615
    },
    {
        "content": "<p>Well, I don't think that's a good idea because the intent is not just to be safe, but to be portable across architectures</p>",
        "id": 254370219,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632318642
    },
    {
        "content": "<p>Hmm, my basic project at least seems to build just fine on both x86 and aarch64. At least <code>cargo build --release --target aarch64-unknown-linux-gnu</code> I've tried</p>",
        "id": 254372314,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632319317
    },
    {
        "content": "<p>Do you know if it was related to a specific interaction? <a href=\"https://gist.github.com/gamozolabs/31ce870a6f9cb510c893e12666f9dd11\">https://gist.github.com/gamozolabs/31ce870a6f9cb510c893e12666f9dd11</a></p>",
        "id": 254372454,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632319353
    },
    {
        "content": "<p>Take a look at <a href=\"https://github.com/rust-lang/rust/issues/84020\">#84020</a></p>",
        "id": 254377192,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632321084
    },
    {
        "content": "<p>I don't remember all of the details, but that's the issue I filed at the time</p>",
        "id": 254377221,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632321098
    },
    {
        "content": "<p>yeah, we want to be able to go to 256 elements at least.</p>",
        "id": 254401106,
        "sender_full_name": "Jubilee",
        "timestamp": 1632329982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"356799\">Brandon Falk</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/64.20element.20SupportedLaneCount/near/254370063\">said</a>:</p>\n<blockquote>\n<p>Thoughts on making it relaxed for <code>cfg(x86)</code> or so if it's specifically and aarch64 codegen issue?</p>\n</blockquote>\n<p>If you want AVX512 instructions specifically because you know they're enabled, you might as well write the AVX512 intrinsics. If you want it to be architecture-invariant, it should be architecture-invariant.</p>\n<p>The compiler is free to optimize as it sees fit and <strong>not</strong> use zmm registers, and that is not a bug per se.</p>",
        "id": 254402380,
        "sender_full_name": "Jubilee",
        "timestamp": 1632330397
    },
    {
        "content": "<p>(though it should generate AVX512 if that's the obvious optimization)</p>",
        "id": 254404447,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632331129
    },
    {
        "content": "<p>Yeah, I've been really satisfied with portable simd output ever since select was added such that I don't even write intrinsics anymore. Really useful for code that I might want others to be able to try/contribute to, but who don't have access to AVX-512 gear. It's completely changed my workflow</p>",
        "id": 254404681,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632331223
    },
    {
        "content": "<p>Most of the time I'm not using u8s so it's fine for lane width anyways, gonna try to see if the LLVM stuff is still breaking</p>",
        "id": 254404793,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632331292
    },
    {
        "content": "<p>I keep running my AVX-512-designed code on my aarch64 server and it's such a good feeling that it just works, and with really good perf</p>",
        "id": 254405235,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632331486
    },
    {
        "content": "<p>nice.</p>",
        "id": 254406236,
        "sender_full_name": "Jubilee",
        "timestamp": 1632331892
    },
    {
        "content": "<p>I can't wait until we are \"done\" and I have time to actually use it</p>",
        "id": 254406342,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632331926
    },
    {
        "content": "<p>What're the big things on the plate still?</p>",
        "id": 254407025,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632332187
    },
    {
        "content": "<p>Not much, fortunately. Cleaning up shuffles, implementation of dynamic shuffles</p>",
        "id": 254407176,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632332252
    },
    {
        "content": "<p>We are entirely missing trigonometry but I don't believe that's particularly common to use</p>",
        "id": 254407366,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632332327
    },
    {
        "content": "<p>A lot of testing and stabilization.</p>",
        "id": 254407765,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332481
    },
    {
        "content": "<p>Revising type sorcery.</p>",
        "id": 254408008,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332575
    },
    {
        "content": "<p>Figuring out where the hell these broken links are coming from</p>",
        "id": 254408070,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332598
    },
    {
        "content": "<p>Oooh nice, I haven't played with shuffles. I got really good ternlog emissions by doing basic bitwise operations, that was amazing. I did md5 in stdsimd and got out ternlog with the correct constants for each pass from LLVM. That's probably the only unique instruction I use and LLVM has a solver for finding the constants for it. I do need to play around with stdsimd scatters and gathers, haven't done those yet and I use those heavily</p>",
        "id": 254408274,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1632332673
    },
    {
        "content": "<p>I would like to also fix the architectural calling convention issues in target_feature, although that is <strong>technically</strong> not part of this project.</p>",
        "id": 254408347,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332703
    },
    {
        "content": "<p>awesome.</p>",
        "id": 254408366,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332709
    },
    {
        "content": "<p>The API we currently expose is very \"playing it safe\" at the moment.</p>",
        "id": 254408414,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332730
    },
    {
        "content": "<p>I implemented a fix for target feature 1.1 over a year ago and am still waiting for it to land <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 254408489,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632332759
    },
    {
        "content": "<p>lmaooo</p>",
        "id": 254408549,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332771
    },
    {
        "content": "<p>sorry about <a href=\"https://github.com/rust-lang/portable-simd/issues/109\">portable-simd#109</a> being stalled...</p>",
        "id": 254413139,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632334603
    },
    {
        "content": "<p>dw~</p>",
        "id": 254420412,
        "sender_full_name": "Jubilee",
        "timestamp": 1632337316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> no trig!? how dare!</p>",
        "id": 254424286,
        "sender_full_name": "Lokathor",
        "timestamp": 1632338919
    }
]