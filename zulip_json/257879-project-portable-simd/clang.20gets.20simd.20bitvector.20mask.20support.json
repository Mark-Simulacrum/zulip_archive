[
    {
        "content": "<p><a href=\"https://reviews.llvm.org/rG0aab34410403\">https://reviews.llvm.org/rG0aab34410403</a></p>",
        "id": 276105840,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647892886
    },
    {
        "content": "<p>Ooh</p>",
        "id": 276106085,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647892999
    },
    {
        "content": "<p>So is this still an i1 vector in IR?</p>",
        "id": 276106274,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647893077
    },
    {
        "content": "<p>It would be interesting to change repr(simd) to similarly accept bool but I think it would be exceptionally complicated since it's fundamentally an array in the type system</p>",
        "id": 276106860,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647893376
    },
    {
        "content": "<p>yup, it's an i1 vector</p>",
        "id": 276107845,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647893932
    },
    {
        "content": "<p>rustc could probably just replace the array type inside the <code>#[repr(simd)]</code> with an opaque blob type, maybe kinda like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// user's code</span>\n<span class=\"cp\">#[repr(simd)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Mask50</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// compiler converts it to something like:</span>\n<span class=\"cp\">#[derive(SimdCompilerMagic)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Mask50</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">Guts</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// opaque struct</span>\n<span class=\"cp\">#[repr(align(8)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Guts</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276108827,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894461
    },
    {
        "content": "<p>It's possible definitely, I'm just not sure if it's useful</p>",
        "id": 276108923,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647894500
    },
    {
        "content": "<p>Since masks are inherently pretty different anyway</p>",
        "id": 276108980,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647894526
    },
    {
        "content": "<p>imho we should probably wait till we get <code>sint::&lt;1&gt;</code> and just have it be a bit-packed array of <code>i1</code></p>",
        "id": 276109087,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894596
    },
    {
        "content": "<p>then a bitmask would just simply be <code>Simd&lt;i1, N&gt;</code></p>",
        "id": 276109214,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894656
    },
    {
        "content": "<p>That makes the assumption that arrays will be packed rather than each element being byte aligned minimum</p>",
        "id": 276109242,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647894670
    },
    {
        "content": "<p>That would completely break arrays since you wouldn't be able to aquire references to elements</p>",
        "id": 276109269,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647894689
    },
    {
        "content": "<p>that's what the bitpacked part does:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[repr(bitpacked)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bits</span>: <span class=\"p\">[</span><span class=\"n\">i1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276109391,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894744
    },
    {
        "content": "<p>clang doesn't support accessing elements of the bitvector</p>",
        "id": 276109441,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894773
    },
    {
        "content": "<p>rustc could just support direct read/write, no references</p>",
        "id": 276109474,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894797
    },
    {
        "content": "<p>or, maybe read into a temp var and return a reference to the temp var, then write back afterwards if it was a mut reference</p>",
        "id": 276109538,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894837
    },
    {
        "content": "<p>this is very much like how a packed struct doesn't support references to fields</p>",
        "id": 276109662,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894896
    },
    {
        "content": "<p>So what happens to AsRef&lt;[T]&gt; etc on vectors?</p>",
        "id": 276109766,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647894959
    },
    {
        "content": "<p>that only happens when <code>T</code> isn't an <code>i1</code>?</p>",
        "id": 276109853,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647894995
    },
    {
        "content": "<p>maybe we'd want another type anyway: <code>BitPackedSimd</code></p>",
        "id": 276109941,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647895044
    },
    {
        "content": "<p>We already have that, it's called Mask lol</p>",
        "id": 276109957,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647895057
    },
    {
        "content": "<p>it'd be useful for representing stuff like <code>BitPackedSimd&lt;i4, 25&gt;</code> too, not just masks</p>",
        "id": 276110037,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647895089
    },
    {
        "content": "<p>nvidia gpus support simd on 4-bit elements</p>",
        "id": 276110055,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647895111
    },
    {
        "content": "<p>imho arrays would still be byte (or more) aligned by default, bitpacked tells rustc that it should not use the default repr</p>",
        "id": 276110319,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647895238
    },
    {
        "content": "<p>(this is all making me wish computers would operate on individual bits rather than requiring addresses be multiples of bytes, oh well, history didn't go that way... I blame C! (just cuz, C wasn't the first))</p>",
        "id": 276110605,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647895416
    },
    {
        "content": "<p>Yeah, I don't think, from our perspective, it makes sense to have <code>bool; N</code> as a SIMD type.</p>",
        "id": 276122492,
        "sender_full_name": "Jubilee",
        "timestamp": 1647902047
    },
    {
        "content": "<p>as far as anything like <code>Simd&lt;i4, 32&gt;</code>, I don't know that that really makes sense..? Like I know we've been adventurous about supporting niche mechanisms but I don't see <code>i4x32</code> compiling that well on any of our target platforms...</p>",
        "id": 276269951,
        "sender_full_name": "Jubilee",
        "timestamp": 1647992968
    }
]