[
    {
        "content": "<p>I have been constructing the PR to import portable-simd into <code>rust/library/core</code> and it will probably require heavily rearranging a Lot internally to us to duplicate the particulars of this cursed architecture, just to give you a heads up <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 253027052,
        "sender_full_name": "Jubilee",
        "timestamp": 1631498082
    },
    {
        "content": "<p>Woo! But also oh no!</p>",
        "id": 253027074,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631498122
    },
    {
        "content": "<p>What kinds of changes are you expecting, generally?</p>",
        "id": 253027083,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631498143
    },
    {
        "content": "<p>Mostly making things internally slightly more nested rather than flat.</p>",
        "id": 253027131,
        "sender_full_name": "Jubilee",
        "timestamp": 1631498166
    },
    {
        "content": "<p>I think that's probably better, anyway</p>",
        "id": 253027144,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631498200
    },
    {
        "content": "<p>It causes problems if the rest of the crate is expecting literally <strong>everything</strong> in the root <code>lib.rs</code></p>",
        "id": 253027160,
        "sender_full_name": "Jubilee",
        "timestamp": 1631498225
    },
    {
        "content": "<p>Hmm</p>",
        "id": 253027167,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631498241
    },
    {
        "content": "<p>It can still be made to look flat to <strong>external</strong> users.</p>",
        "id": 253027181,
        "sender_full_name": "Jubilee",
        "timestamp": 1631498268
    },
    {
        "content": "<p>it just has to be able to pathfind internally relative to actually being uh a module of libcore.</p>",
        "id": 253027319,
        "sender_full_name": "Jubilee",
        "timestamp": 1631498400
    },
    {
        "content": "<p>I will try a couple different arrangements to see what satisfies my aesthetic preferences the most, but in the end, it shouldn't be anything disastrous.</p>",
        "id": 253027667,
        "sender_full_name": "Jubilee",
        "timestamp": 1631498704
    },
    {
        "content": "<p>Sounds good to me</p>",
        "id": 253027867,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631498950
    },
    {
        "content": "<p>I have a PR for true swizzles that I would like to get in before getting to nightly pending <a href=\"https://github.com/rust-lang/rust/issues/88855\">#88855</a>, but after that I don't have anything I really want to change</p>",
        "id": 253027945,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631499031
    },
    {
        "content": "<p>It's been approved so should be in the next few days</p>",
        "id": 253027958,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631499061
    },
    {
        "content": "<p><code>mod foo; pub use foo::*;</code></p>\n<p>you may not like it, but it's what peak crate design looks like.</p>",
        "id": 253049110,
        "sender_full_name": "Lokathor",
        "timestamp": 1631518530
    },
    {
        "content": "<p>yep.</p>",
        "id": 253142649,
        "sender_full_name": "Jubilee",
        "timestamp": 1631559989
    },
    {
        "content": "<p><code>x.py check</code> passed.</p>",
        "id": 253203314,
        "sender_full_name": "Jubilee",
        "timestamp": 1631600217
    },
    {
        "content": "<p>there are... many lines in this diff.</p>",
        "id": 253203466,
        "sender_full_name": "Jubilee",
        "timestamp": 1631600365
    },
    {
        "content": "<p>Okay, let me try to make this smaller so that it actually survives review and rebasing.</p>",
        "id": 253884325,
        "sender_full_name": "Jubilee",
        "timestamp": 1631988354
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/portable-simd/pull/160\">https://github.com/rust-lang/portable-simd/pull/160</a> Okay, easiest way to make this trivial to rebase is to hit us first with it. :P</p>",
        "id": 253908320,
        "sender_full_name": "Jubilee",
        "timestamp": 1632016385
    },
    {
        "content": "<p>So I just remembered we are using cargo features</p>",
        "id": 253968484,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632081962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> did you happen to see if what we do is compatible with core?</p>",
        "id": 253968555,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632082036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Rearranging.20everything/near/253968555\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> did you happen to see if what we do is compatible with core?</p>\n</blockquote>\n<p>Yes, I believe it should be fine.<br>\nMy only concern atm is the <code>std</code>-requiring ones.</p>",
        "id": 253973227,
        "sender_full_name": "Jubilee",
        "timestamp": 1632087040
    },
    {
        "content": "<p>at worst, we need to make them rustc-level features</p>",
        "id": 253973235,
        "sender_full_name": "Jubilee",
        "timestamp": 1632087058
    },
    {
        "content": "<p>I think these methods will have to be split into a separate crate included into libstd, similiar to std_detect.</p>",
        "id": 253974214,
        "sender_full_name": "bjorn3",
        "timestamp": 1632088137
    },
    {
        "content": "<p>Righto then.</p>",
        "id": 253975113,
        "sender_full_name": "Jubilee",
        "timestamp": 1632089135
    },
    {
        "content": "<p>Definitely doable</p>",
        "id": 253975218,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632089260
    },
    {
        "content": "<p>We may want to invert the const generic feature we have (I forget what it's called now), so we can enable it to disable those functions</p>",
        "id": 253975289,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632089317
    },
    {
        "content": "<p>And only enable that feature for testing</p>",
        "id": 253975296,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632089334
    },
    {
        "content": "<p>I will make sure a few tests come in to main to make sure core::simd doesn't do anything naughty.<br>\nLooks like most tests build with the library in.</p>\n<p>We only break a suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>---- <span class=\"o\">[</span>ui<span class=\"o\">]</span> ui<span class=\"se\">\\s</span>uggestions<span class=\"se\">\\i</span>ssue-71394-no-from-impl.rs stdout ----\n<span class=\"nv\">$DIR</span><span class=\"se\">\\i</span>ssue-71394-no-from-impl.rs\ndiff of stderr:\n\n<span class=\"m\">4</span>       LL <span class=\"p\">|</span>     <span class=\"nb\">let</span> _: <span class=\"p\">&amp;</span><span class=\"o\">[</span>i8<span class=\"o\">]</span> <span class=\"o\">=</span> data.into<span class=\"o\">()</span><span class=\"p\">;</span>\n<span class=\"m\">5</span>          <span class=\"p\">|</span>                         ^^^^ the trait <span class=\"sb\">`</span>From&lt;<span class=\"p\">&amp;</span><span class=\"o\">[</span>u8<span class=\"o\">]</span>&gt;<span class=\"sb\">`</span> is not implemented <span class=\"k\">for</span> <span class=\"sb\">`</span><span class=\"p\">&amp;</span><span class=\"o\">[</span>i8<span class=\"o\">]</span><span class=\"sb\">`</span>\n<span class=\"m\">6</span>          <span class=\"p\">|</span>\n+          <span class=\"o\">=</span> help: the following implementations were found:\n+                    &lt;<span class=\"o\">[</span>T<span class=\"p\">;</span> LANES<span class=\"o\">]</span> as From&lt;core::core_simd::vector::Simd&lt;T, LANES&gt;&gt;&gt;\n+                    &lt;<span class=\"o\">[</span>bool<span class=\"p\">;</span> LANES<span class=\"o\">]</span> as From&lt;core::core_simd::masks::Mask&lt;T, LANES&gt;&gt;&gt;\n<span class=\"nv\">7</span>          <span class=\"o\">=</span> note: required because of the requirements on the impl of <span class=\"sb\">`</span>Into&lt;<span class=\"p\">&amp;</span><span class=\"o\">[</span>i8<span class=\"o\">]</span>&gt;<span class=\"sb\">`</span> <span class=\"k\">for</span> <span class=\"sb\">`</span><span class=\"p\">&amp;</span><span class=\"o\">[</span>u8<span class=\"o\">]</span><span class=\"sb\">`</span>\n<span class=\"m\">8</span>\n<span class=\"m\">9</span>       error: aborting due to previous error\n</code></pre></div>\n<p>Though that is mildly concerning.</p>",
        "id": 254008470,
        "sender_full_name": "Jubilee",
        "timestamp": 1632123063
    },
    {
        "content": "<p>Based on what Esteban says the issue is the relevant privacy check not being principled, so we should make sure that doesn't affect stable Rust but we don't <strong>have</strong> to fix it before launching... just within ~6 weeks.</p>",
        "id": 254115509,
        "sender_full_name": "Jubilee",
        "timestamp": 1632170896
    },
    {
        "content": "<p>Oh okay.</p>",
        "id": 254116197,
        "sender_full_name": "Jubilee",
        "timestamp": 1632171224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">7</span>          <span class=\"o\">=</span> help: the following implementations were found:\n-                    &lt;<span class=\"o\">[</span>T<span class=\"p\">;</span> LANES<span class=\"o\">]</span> as From&lt;core::core_simd::vector::Simd&lt;T, LANES&gt;&gt;&gt;\n-                    &lt;<span class=\"o\">[</span>bool<span class=\"p\">;</span> LANES<span class=\"o\">]</span> as From&lt;core::core_simd::masks::Mask&lt;T, LANES&gt;&gt;&gt;\n+                    &lt;<span class=\"o\">[</span>T<span class=\"p\">;</span> LANES<span class=\"o\">]</span> as From&lt;Simd&lt;T, LANES&gt;&gt;&gt;\n+                    &lt;<span class=\"o\">[</span>bool<span class=\"p\">;</span> LANES<span class=\"o\">]</span> as From&lt;Mask&lt;T, LANES&gt;&gt;&gt;\n</code></pre></div>\n<p>It fixes itself (due to the very same being unprincipled, lmao) when I pull this into <code>std::simd</code>.</p>",
        "id": 254118309,
        "sender_full_name": "Jubilee",
        "timestamp": 1632172035
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error<span class=\"o\">[</span>E0599<span class=\"o\">]</span>: no method named <span class=\"sb\">`</span>ceil<span class=\"sb\">`</span> found <span class=\"k\">for</span> struct <span class=\"sb\">`</span>Simd<span class=\"sb\">`</span> <span class=\"k\">in</span> the current scope\n  --&gt; <span class=\"nv\">$DIR</span>/libm-no_std-cant-float.rs:14:16\n   <span class=\"p\">|</span>\nLL <span class=\"p\">|</span>     <span class=\"nb\">let</span> <span class=\"nv\">xc</span> <span class=\"o\">=</span> x.ceil<span class=\"o\">()</span><span class=\"p\">;</span>\n   <span class=\"p\">|</span>                ^^^^ method not found <span class=\"k\">in</span> <span class=\"sb\">`</span>Simd&lt;f32, 4_usize&gt;<span class=\"sb\">`</span>\n\nerror<span class=\"o\">[</span>E0599<span class=\"o\">]</span>: no method named <span class=\"sb\">`</span>floor<span class=\"sb\">`</span> found <span class=\"k\">for</span> struct <span class=\"sb\">`</span>Simd<span class=\"sb\">`</span> <span class=\"k\">in</span> the current scope\n  --&gt; <span class=\"nv\">$DIR</span>/libm-no_std-cant-float.rs:15:16\n   <span class=\"p\">|</span>\nLL <span class=\"p\">|</span>     <span class=\"nb\">let</span> <span class=\"nv\">xf</span> <span class=\"o\">=</span> x.floor<span class=\"o\">()</span><span class=\"p\">;</span>\n   <span class=\"p\">|</span>                ^^^^^ method not found <span class=\"k\">in</span> <span class=\"sb\">`</span>Simd&lt;f32, 4_usize&gt;<span class=\"sb\">`</span>\n\nerror<span class=\"o\">[</span>E0599<span class=\"o\">]</span>: no method named <span class=\"sb\">`</span>round<span class=\"sb\">`</span> found <span class=\"k\">for</span> struct <span class=\"sb\">`</span>Simd<span class=\"sb\">`</span> <span class=\"k\">in</span> the current scope\n  --&gt; <span class=\"nv\">$DIR</span>/libm-no_std-cant-float.rs:16:16\n   <span class=\"p\">|</span>\nLL <span class=\"p\">|</span>     <span class=\"nb\">let</span> <span class=\"nv\">xr</span> <span class=\"o\">=</span> x.round<span class=\"o\">()</span><span class=\"p\">;</span>\n   <span class=\"p\">|</span>                ^^^^^ method not found <span class=\"k\">in</span> <span class=\"sb\">`</span>Simd&lt;f32, 4_usize&gt;<span class=\"sb\">`</span>\n\nerror<span class=\"o\">[</span>E0599<span class=\"o\">]</span>: no method named <span class=\"sb\">`</span>trunc<span class=\"sb\">`</span> found <span class=\"k\">for</span> struct <span class=\"sb\">`</span>Simd<span class=\"sb\">`</span> <span class=\"k\">in</span> the current scope\n  --&gt; <span class=\"nv\">$DIR</span>/libm-no_std-cant-float.rs:17:16\n   <span class=\"p\">|</span>\nLL <span class=\"p\">|</span>     <span class=\"nb\">let</span> <span class=\"nv\">xt</span> <span class=\"o\">=</span> x.trunc<span class=\"o\">()</span><span class=\"p\">;</span>\n   <span class=\"p\">|</span>                ^^^^^ method not found <span class=\"k\">in</span> <span class=\"sb\">`</span>Simd&lt;f32, 4_usize&gt;<span class=\"sb\">`</span>\n\nerror: aborting due to <span class=\"m\">4</span> previous errors\n\nFor more information about this error, try <span class=\"sb\">`</span>rustc --explain E0599<span class=\"sb\">`</span>.\n</code></pre></div>\n<p>We're good on this front.</p>",
        "id": 254131328,
        "sender_full_name": "Jubilee",
        "timestamp": 1632178808
    },
    {
        "content": "<p>Yeah, I think we will have to reify the float stuff into its own feature.</p>",
        "id": 254145844,
        "sender_full_name": "Jubilee",
        "timestamp": 1632190147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I'm running into something a little odd related to this reorganization</p>",
        "id": 254299558,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271546
    },
    {
        "content": "<p>oh?</p>",
        "id": 254299573,
        "sender_full_name": "Jubilee",
        "timestamp": 1632271560
    },
    {
        "content": "<p>I'm trying out a macro, and inside the macro I want to reference <code>$crate::simd</code>, which I would have expected to work with both <code>core::simd</code> and <code>core_simd::simd</code></p>",
        "id": 254299629,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271591
    },
    {
        "content": "<p>y u p.</p>",
        "id": 254299637,
        "sender_full_name": "Jubilee",
        "timestamp": 1632271599
    },
    {
        "content": "<p>I had that exact sweat-drop moment today.</p>",
        "id": 254299651,
        "sender_full_name": "Jubilee",
        "timestamp": 1632271614
    },
    {
        "content": "<p>haha, okay.</p>",
        "id": 254299666,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271625
    },
    {
        "content": "<p>We didn't have any macros previously, so it didn't come up</p>",
        "id": 254299682,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271651
    },
    {
        "content": "<p>If you have an idea for a good solution I am listening.</p>",
        "id": 254299684,
        "sender_full_name": "Jubilee",
        "timestamp": 1632271652
    },
    {
        "content": "<p>\"we didn't have any macros previously\" eh. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 254299699,
        "sender_full_name": "Jubilee",
        "timestamp": 1632271669
    },
    {
        "content": "<p>external macros <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 254299704,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271677
    },
    {
        "content": "<p>I was going to suggest maybe we just rearrange the crate to have the same structure as core entirely, with a <code>simd</code> module and everything lives in there</p>",
        "id": 254299757,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271706
    },
    {
        "content": "<p>So the tests would look something like <code>use core_simd::simd::*;</code></p>",
        "id": 254299780,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271742
    },
    {
        "content": "<p>So I merged a PR this morning that does a sly trick, actually.</p>",
        "id": 254299785,
        "sender_full_name": "Jubilee",
        "timestamp": 1632271745
    },
    {
        "content": "<p>Ah, I haven't rebased</p>",
        "id": 254299796,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632271757
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-pub use self::core_simd::simd::*;</span>\n<span class=\"gi\">+use self::core_simd::simd;</span>\n<span class=\"gi\">+pub use simd::*;</span>\n</code></pre></div>",
        "id": 254299936,
        "sender_full_name": "Jubilee",
        "timestamp": 1632271892
    },
    {
        "content": "<p>Hmm I think that's pretty close to what I mean</p>",
        "id": 254300088,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632272030
    },
    {
        "content": "<p>why not just remove the <code>core_simd</code> module entirely, and make <code>simd</code> top level?</p>",
        "id": 254300142,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632272050
    },
    {
        "content": "<p>Many things break. I assure you. I tried it.</p>",
        "id": 254300486,
        "sender_full_name": "Jubilee",
        "timestamp": 1632272406
    },
    {
        "content": "<p>lol, okay</p>",
        "id": 254300598,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632272481
    },
    {
        "content": "<p>on the core end or on the side of our crate?</p>",
        "id": 254300616,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632272521
    },
    {
        "content": "<p>either way, I do think we should just rearrange our crate to be <code>crate::simd::Simd</code> etc</p>",
        "id": 254300665,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632272543
    },
    {
        "content": "<p>which would be as simple as changing your <code>use self::core_simd::simd;</code> to pub, I think</p>",
        "id": 254300684,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632272574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Rearranging.20everything/near/254300616\">said</a>:</p>\n<blockquote>\n<p>on the core end or on the side of our crate?</p>\n</blockquote>\n<p>wookie noise</p>",
        "id": 254304892,
        "sender_full_name": "Jubilee",
        "timestamp": 1632276250
    },
    {
        "content": "<p>Caleb, why does MaskElement have <code>#[doc(hidden)]</code> on its fn?</p>",
        "id": 254435900,
        "sender_full_name": "Jubilee",
        "timestamp": 1632343351
    },
    {
        "content": "<p>Okay, so those are all implementation details.  They are used to make the public API work, but they aren't strictly necessary on their own</p>",
        "id": 254436368,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632343550
    },
    {
        "content": "<p>eq, for example, was because I didn't want to make <code>MaskElement: PartialEq</code> because that could have implications down the line</p>",
        "id": 254436512,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632343614
    },
    {
        "content": "<p>Those values and fns should never be stabilized</p>",
        "id": 254436667,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632343686
    },
    {
        "content": "<p>To clarify a bit.</p>",
        "id": 254436987,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632343817
    },
    {
        "content": "<p>If you look at the functions such as <code>from_int</code>, you'll see that it's implemented for ALL masks.  The only way to do that is for all masks to have a method for checking int validity, hence <code>valid</code> in the trait.  But <code>valid</code> isn't of any use to a user itself</p>",
        "id": 254437197,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632343906
    },
    {
        "content": "<p>Since <code>MaskElement</code> is sealed it doesn't really matter what's in the trait</p>",
        "id": 254437390,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632343976
    },
    {
        "content": "<p>Okay, so, I am going to give these stub documentation and unhide them so that you see them every time you hit <code>cargo doc --open</code> on our repo, so that they annoy you.</p>\n<p>You see, the linkchecker currently breaks on hidden functions like these, which means this doesn't work in <code>rust-lang/rust master</code>.</p>",
        "id": 254440404,
        "sender_full_name": "Jubilee",
        "timestamp": 1632345147
    },
    {
        "content": "<p>I am going to report that as a bug, ofc, so maybe this will get fixed on that end.</p>",
        "id": 254440449,
        "sender_full_name": "Jubilee",
        "timestamp": 1632345178
    },
    {
        "content": "<p>In essence, they actually <strong>are not hidden at all</strong>.</p>",
        "id": 254440583,
        "sender_full_name": "Jubilee",
        "timestamp": 1632345245
    },
    {
        "content": "<p>( And this isn't about annoying you per se, it's going to annoy me as well, I just know that if I use any other means of making this problem \"go away\" that the actual problem will remain and not get fixed. )</p>",
        "id": 254441126,
        "sender_full_name": "Jubilee",
        "timestamp": 1632345507
    },
    {
        "content": "<p>My apologies.</p>",
        "id": 254441183,
        "sender_full_name": "Jubilee",
        "timestamp": 1632345543
    },
    {
        "content": "<p>oh, jyn beat me to it. <a href=\"https://github.com/rust-lang/rust/issues/89186\">https://github.com/rust-lang/rust/issues/89186</a></p>",
        "id": 254442201,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346067
    },
    {
        "content": "<p>Is this a recent regression?</p>",
        "id": 254442323,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346122
    },
    {
        "content": "<p>I don't believe unhiding them is the correct action, they aren't part of the API</p>",
        "id": 254442364,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346146
    },
    {
        "content": "<p>I am specifically concerned about code which may be written against nightly relying on things that aren't part of the API.</p>",
        "id": 254442515,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346207
    },
    {
        "content": "<p>No, it's not a regression.</p>",
        "id": 254442601,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346266
    },
    {
        "content": "<p>we just weren't checking.</p>",
        "id": 254442612,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346276
    },
    {
        "content": "<p>Are there no hidden items in the entirety of core/std? I find that hard to believe</p>",
        "id": 254442632,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346293
    },
    {
        "content": "<p>No no, you misunderstand.</p>",
        "id": 254442649,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346303
    },
    {
        "content": "<p>The <strong>implementation</strong> does not get hidden.</p>",
        "id": 254442663,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346312
    },
    {
        "content": "<p>Huh</p>",
        "id": 254442672,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346320
    },
    {
        "content": "<p>Because of that you need to document it in the trait itself?</p>",
        "id": 254442796,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346375
    },
    {
        "content": "<p>It means the function is fully visible to users on <code>i32</code> and other marked primitives.</p>",
        "id": 254442854,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346415
    },
    {
        "content": "<p>And the entire thing can be busted by simply importing the trait and then invoking fn on it.</p>",
        "id": 254442983,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346466
    },
    {
        "content": "<p>Well, the intention is those particular values/fns would also remain unstable</p>",
        "id": 254443068,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346512
    },
    {
        "content": "<p>I'm just wondering if there's a way around it other than making those public and implying they're part of the API</p>",
        "id": 254443131,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632346550
    },
    {
        "content": "<p>oh, the documentation is going to be \"this is supposed to be hidden <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>\"</p>",
        "id": 254443300,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// This is supposed to be a hidden helper function. Before stabilizing</span>\n<span class=\"w\">    </span><span class=\"sd\">/// this trait, it should be documented or erased from public access.</span>\n</code></pre></div>",
        "id": 254443748,
        "sender_full_name": "Jubilee",
        "timestamp": 1632346886
    },
    {
        "content": "<p>On the primitive pages, it looks like this: <a href=\"/user_uploads/4715/-Ggul1DqT_ZeYLMFxnHlaQOH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-Ggul1DqT_ZeYLMFxnHlaQOH/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/-Ggul1DqT_ZeYLMFxnHlaQOH/image.png\"></a></div>",
        "id": 254444050,
        "sender_full_name": "Jubilee",
        "timestamp": 1632347077
    },
    {
        "content": "<p>I wouldn't even say it should be documented, it should just be erased lol</p>",
        "id": 254444166,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632347147
    },
    {
        "content": "<p>If all we can do right now is document it, so be it</p>",
        "id": 254444239,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632347167
    },
    {
        "content": "<p>We should probably open a portable-simd issue too</p>",
        "id": 254444261,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632347182
    },
    {
        "content": "<p>kk!<br>\nwe could remove it in linkcheck but that Wouldn't Solve The Problem, y'see.</p>",
        "id": 254444288,
        "sender_full_name": "Jubilee",
        "timestamp": 1632347200
    },
    {
        "content": "<p>I think we just need to make it exceptionally clear it's not part of the API and never will be</p>",
        "id": 254444358,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632347237
    },
    {
        "content": "<p>like, it would still be there. visible. we just wouldn't solve the problem.<br>\nokay, writing this then:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// This is supposed to be a hidden helper function. Before stabilizing</span>\n<span class=\"w\">    </span><span class=\"sd\">/// this trait, it should be erased from public access.</span>\n</code></pre></div>",
        "id": 254444590,
        "sender_full_name": "Jubilee",
        "timestamp": 1632347363
    },
    {
        "content": "<p>we could take the approach <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> did in his swizzle pr:<br>\n<a href=\"https://github.com/rust-lang/portable-simd/blob/f5027828efc94a87e9e31d763a732bf081f9ae31/crates/core_simd/src/swizzle.rs#L136-L146\">https://github.com/rust-lang/portable-simd/blob/f5027828efc94a87e9e31d763a732bf081f9ae31/crates/core_simd/src/swizzle.rs#L136-L146</a></p>",
        "id": 254448729,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632349412
    },
    {
        "content": "<p>where we split the pub trait into a separate private trait with the impl details</p>",
        "id": 254448841,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632349459
    },
    {
        "content": "<p>I don't think that would work here, because those functions could only be implemented for some types, in the PR it's implemented for all because the compiler intrinsic doesn't have bounds attached to it</p>",
        "id": 254448886,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632349486
    },
    {
        "content": "<p>impl the private trait for just the types you want</p>",
        "id": 254448962,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632349533
    },
    {
        "content": "<p>But then you can't reference it from the public trait impl, because that's implemented for all MaskElements</p>",
        "id": 254449078,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632349576
    },
    {
        "content": "<p>make it a sealed trait, where the impl details are in the private mod?</p>",
        "id": 254449146,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632349624
    },
    {
        "content": "<p>Yeah, I was just going to say it could be sealed.</p>",
        "id": 254449179,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632349643
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">PublicAPI</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"bp\">Self</span>: <span class=\"nc\">private</span>::<span class=\"n\">PrivateAPI</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">private</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">PrivateAPI</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254449450,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632349729
    },
    {
        "content": "<p>That's probably the way to go here, it's even cleaner than hiding the various fns</p>",
        "id": 254449672,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632349778
    },
    {
        "content": "<p>though, now that i think of that, it makes it hard to use <code>f</code> in generic contexts where you can't name <code>PrivateAPI</code></p>",
        "id": 254449831,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632349825
    },
    {
        "content": "<p>Make it a subtrait instead</p>",
        "id": 254449907,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632349878
    },
    {
        "content": "<p>The trait is already sealed anyway</p>",
        "id": 254449923,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632349892
    },
    {
        "content": "<p>maybe Rust needs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">impl_details</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 254449924,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632349893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> if you want to wait a bit, I think I'd like to seal the trait and do it this way instead</p>",
        "id": 254450149,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350015
    },
    {
        "content": "<p>I can take care of it shortly</p>",
        "id": 254450169,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350026
    },
    {
        "content": "<p>if it's a subtrait: <code>PublicAPI: PrivateAPI</code> then private api things can still be named through inheritance, <code>PrivateAPI: PublicAPI</code> then generic contexts still can't do <code>T: PrivateAPI</code> due to privacy</p>",
        "id": 254450293,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632350092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Rearranging.20everything/near/254450149\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> if you want to wait a bit, I think I'd like to seal the trait and do it this way instead</p>\n</blockquote>\n<p>I already diffed the files and pushed, am waiting on rust-lang/rust CI to green or not.</p>",
        "id": 254450376,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350137
    },
    {
        "content": "<p>It won't need to, subtrait are satisfied at impl not when you call fns on the trait</p>",
        "id": 254450443,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> okay, well I'd like to make that change anyway, hopefully we can get it in sooner rather than later</p>",
        "id": 254450505,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350213
    },
    {
        "content": "<p>Tbh I'd like to wrap up the swizzle thing too before we \"go public\", at least to the extent of advertising it</p>",
        "id": 254450551,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350244
    },
    {
        "content": "<p>then how do you do: <code>fn user_fn&lt;T: PublicAPI&gt;(v: T) { v.requires_private_api() }</code></p>",
        "id": 254450556,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632350246
    },
    {
        "content": "<p>I'm just going to write the commit and see <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 254450587,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350274
    },
    {
        "content": "<p>~soft launch~</p>",
        "id": 254450686,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350319
    },
    {
        "content": "<p>people will notice as soon as twir comes out...</p>",
        "id": 254450729,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632350350
    },
    {
        "content": "<p>rust-lang/rust can be resynced again, dw.</p>",
        "id": 254450733,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350352
    },
    {
        "content": "<p>Also I am not afraid of renaming every single function in the API by a letter.</p>",
        "id": 254450776,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350379
    },
    {
        "content": "<p>I wonder--whats the deal with updating the subtree. How big of a deal is it?</p>",
        "id": 254450809,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350401
    },
    {
        "content": "<p>Can we do it on a whim whenever we merge a significant PR?</p>",
        "id": 254450893,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350438
    },
    {
        "content": "<p>I believe it's actually only resyncing from rust-lang/rust that's a pain.</p>",
        "id": 254450920,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350457
    },
    {
        "content": "<p>rename it to <code>std:: 🎉simd 🎉::f32x4</code> :P</p>",
        "id": 254450932,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632350466
    },
    {
        "content": "<p><code>std::🚀simd🚀</code></p>",
        "id": 254451226,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350567
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> So, I applied patches upstream and pulled them in as I worked on making the tests/plumbing good because that was easier than applying them in rust-lang/rust and resyncing \"up\" to portable-simd.</p>",
        "id": 254451428,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350692
    },
    {
        "content": "<p>It should be trivial to pull additional PRs in from rust-lang/portable-simd into rust-lang/rust/library/portable-simd</p>",
        "id": 254451487,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350743
    },
    {
        "content": "<p>reversing the flow actually breaks git unless you patch it lol</p>",
        "id": 254451571,
        "sender_full_name": "Jubilee",
        "timestamp": 1632350773
    },
    {
        "content": "<p>Is there a way to prevent people from making the changes directly to rust-lang/rust?</p>",
        "id": 254451630,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632350822
    }
]