[
    {
        "content": "<p>I have a general idea of <em>why</em> stdsimd has been so difficult from a design point of view, but if anyone has any input on the added value that Rust brings to SIMD land or the constraints that people didn’t know would come up (or multiple user groups having vastly different constraints and not agreeing on them), I’d appreciate it/write it down for posterity.</p>",
        "id": 278472518,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1649602725
    },
    {
        "content": "<p>I think the elevator pitch is that the standard for SIMD right now is C++ with vendor intrinsics, it's not so much that Rust brings something specific to SIMD as much as many people prefer Rust to C++.  Also, C++'s portable SIMD is experimental and doesn't hit as many use cases as our implementation</p>",
        "id": 278479348,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649611189
    },
    {
        "content": "<p>Another way to look at it is that there are effectively no portable SIMD implementations in widespread use and Rust is in a good position to try it out</p>",
        "id": 278479640,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649611446
    },
    {
        "content": "<p>rust has the standard memory-safety benefits...std::simd is better than most simd code/libraries because it is portable and, unlike most other simd portability libraries, it has an architecture-independent set of operations...most other simd portability libraries do something like give you all intel's simd intrinsics but make them portable to other archs -- kinda terrible because intel doesn't have all the useful ops and intel doesn't translate nicely to other archs (e.g. movmskps translates terribly to arm neon yet it's quite common and fast on x86)</p>",
        "id": 278479680,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649611504
    },
    {
        "content": "<p>Do you hve any examples of where stdsimd supports more use cases than experimental C++ or established C++ libs?</p>",
        "id": 278479747,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1649611578
    },
    {
        "content": "<p>That too, and using LLVM basically means we don't have to worry about the backend details and can focus on making a good API</p>",
        "id": 278479765,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649611617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> ah, the <code>movmskps</code> kind of detail is precisely the kind of examples I’m looking for.</p>",
        "id": 278479863,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1649611695
    },
    {
        "content": "<p>C++'s std::simd only supports basic arithmetic operations</p>",
        "id": 278479865,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649611701
    },
    {
        "content": "<p>(when I last checked, at least, again it's experimental)</p>",
        "id": 278479894,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649611756
    },
    {
        "content": "<p>I doubt there's anything we provide that C++ can't do, but our API is probably easier to use</p>",
        "id": 278479975,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649611843
    },
    {
        "content": "<p>well, when we eventually get <code>Simd&lt;&amp;T, N&gt;</code> aka simd-pointers, we will have stuff that i've not seen basically anywhere else (except llvm ir)</p>",
        "id": 278480060,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649611949
    },
    {
        "content": "<p>Gotcha - if anyone has any nice examples that’d compare C++/libs vs the Rust equivalent?</p>",
        "id": 278480061,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1649611956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> oooh - what kind of ops/API/workflow do you think will set it apart?</p>",
        "id": 278480081,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1649611994
    },
    {
        "content": "<p>I've never actually seen any C++ code using the experimental portable SIMD, I'm not even sure of the implementation status</p>",
        "id": 278480085,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649612001
    },
    {
        "content": "<p>well, you'll be able to do stuff like walk a tree using simd gather ops -- simd raytracing uses this a lot iirc</p>",
        "id": 278480151,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612087
    },
    {
        "content": "<p>that sounds like a <em>must include</em> on the examples branch. Cool!</p>",
        "id": 278480179,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1649612133
    },
    {
        "content": "<p>one other thing that I want us to have is simd elementwise atomic operations</p>",
        "id": 278480300,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612271
    },
    {
        "content": "<p>libre-soc and gpu arches commonly have that</p>",
        "id": 278480359,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612301
    },
    {
        "content": "<p>I'm not sure that's portable?</p>",
        "id": 278480388,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649612353
    },
    {
        "content": "<p>simd elementwise multi-threaded hash table insert could use that</p>",
        "id": 278480389,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612355
    },
    {
        "content": "<p>just as portable as simd integer division -- a few archs implement it</p>",
        "id": 278480416,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612388
    },
    {
        "content": "<p>another thing we're planning on adding is vector length independent ops -- kinda like risc-v v and libre-soc's svp64</p>",
        "id": 278480535,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612509
    },
    {
        "content": "<p>or, more specifically, dynamically settable vector lengths</p>",
        "id": 278480592,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612558
    },
    {
        "content": "<p>oh darn, i thought those riscv vector ops wouldn’t gel well with SIMD.</p>",
        "id": 278480606,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1649612571
    },
    {
        "content": "<p>arm sve2 claims to also be vector length independent but it's not usefully dynamically-settable-length (cuz the designers goofed) ... so we'd have to emulate that there, just like x86</p>",
        "id": 278480715,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649612730
    },
    {
        "content": "<p>AWS Graviton3 is being previewed and it includes 256-bit SVE2.</p>",
        "id": 278491383,
        "sender_full_name": "Jubilee",
        "timestamp": 1649627048
    },
    {
        "content": "<p>most other SVE2 impls are 128 bits wide. there are some supercomputer ones I am aware of but they use SVE, which is more limited (SVE2 implements more Neon-style ops).</p>",
        "id": 278491456,
        "sender_full_name": "Jubilee",
        "timestamp": 1649627165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/What.20Rust.20brings.20to.20the.20SIMD.20table/near/278480606\">said</a>:</p>\n<blockquote>\n<p>oh darn, i thought those riscv vector ops wouldn’t gel well with SIMD.</p>\n</blockquote>\n<p>So the thing is that we need to do more work on dynamic-length \"unsized\" types before people can really use them, but it's totally possible.</p>",
        "id": 278491710,
        "sender_full_name": "Jubilee",
        "timestamp": 1649627629
    }
]