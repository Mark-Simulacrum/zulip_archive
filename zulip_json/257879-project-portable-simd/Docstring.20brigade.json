[
    {
        "content": "<p>Alright, any one around here to bounce some silly questions here?</p>",
        "id": 241649773,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622917466
    },
    {
        "content": "<p>sure.</p>",
        "id": 241650039,
        "sender_full_name": "Jubilee",
        "timestamp": 1622917772
    },
    {
        "content": "<p>Weird, can't run <code>cargo test --quiet --doc</code></p>",
        "id": 241651155,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622919261
    },
    {
        "content": "<p>huh.</p>",
        "id": 241651286,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919440
    },
    {
        "content": "<p>OH right!<br>\ndoc tests are really different unfortunately. :(</p>",
        "id": 241651297,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919465
    },
    {
        "content": "<p>for... no _really_ good reason.</p>",
        "id": 241651302,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919472
    },
    {
        "content": "<p>:(</p>",
        "id": 241651303,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622919474
    },
    {
        "content": "<p>Can't do <code>cargo test --test-threads 8 --doc</code> either :(</p>",
        "id": 241651354,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622919490
    },
    {
        "content": "<p>iirc they're basically compiled as one big chunk instead of like most tests.</p>",
        "id": 241651366,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919508
    },
    {
        "content": "<p>which are separate.</p>",
        "id": 241651369,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919514
    },
    {
        "content": "<p>So try to keep all doctest examples as fairly terse. ^^;</p>",
        "id": 241651395,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919546
    },
    {
        "content": "<p>Right - I'm going for MWEs like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">            </span><span class=\"sd\">/// # use core_simd::*;</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let a = f32x4::from_array([-3.0, -0.0, 2.0, 0.0]);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let b = f32x4::from_array([3.0, 0.0, 2.0, 0.0]);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let c = f32x4::abs(a);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// assert_eq!(c, b);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n</code></pre></div>",
        "id": 241651406,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622919566
    },
    {
        "content": "<p>mhm.</p>",
        "id": 241651490,
        "sender_full_name": "Jubilee",
        "timestamp": 1622919658
    },
    {
        "content": "<p>Uuuh</p>",
        "id": 241652186,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622920625
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"sd\">/// Rounds to the nearest integer value. Ties round toward zero.</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">            </span><span class=\"sd\">/// # use core_simd::*;</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let a = f32x4::from_array([-3.6, -0.5, 2.5, 0.6]);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let b = f32x4::from_array([-4.0, 0.0, 2.0, 1.0]);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let c = f32x4::round(a);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// assert_eq!(c, b);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n</code></pre></div>",
        "id": 241652189,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622920643
    },
    {
        "content": "<p>Shouldn't <code>c == f32x4::from_array([-4.0, -1.0, 3.0, 1.0])</code> if <code>Ties round toward zero</code>?</p>",
        "id": 241652250,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622920709
    },
    {
        "content": "<p>Because I'm getting back</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">round</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">round</span>::<span class=\"k\">crate</span>::<span class=\"n\">SimdF64</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span>::<span class=\"n\">round</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">112</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span><span class=\"w\"></span>\n<span class=\"n\">Test</span><span class=\"w\"> </span><span class=\"n\">executable</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mi\">101</span><span class=\"p\">).</span><span class=\"w\"></span>\n\n<span class=\"n\">stderr</span>:\n<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">4.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">round</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">8</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241652275,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622920795
    },
    {
        "content": "<p>hmm?</p>",
        "id": 241652515,
        "sender_full_name": "Jubilee",
        "timestamp": 1622921148
    },
    {
        "content": "<p>...hmm.</p>",
        "id": 241652520,
        "sender_full_name": "Jubilee",
        "timestamp": 1622921160
    },
    {
        "content": "<p>try it with f64...</p>",
        "id": 241652572,
        "sender_full_name": "Jubilee",
        "timestamp": 1622921219
    },
    {
        "content": "<p>brb</p>",
        "id": 241652580,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622921253
    },
    {
        "content": "<p>NOPE, also fails with <code>f64x4</code></p>",
        "id": 241652732,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622921453
    },
    {
        "content": "<p>I mean, I don't mind clarifying what <code>Ties round away from zero</code> is the default, I just think it should be consistent.</p>",
        "id": 241652746,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622921483
    },
    {
        "content": "<p>Well that seems to be the Rust default anyways <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 241652814,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622921606
    },
    {
        "content": "<p>round away from zero is consistent with the normal float round in rust <a href=\"https://doc.rust-lang.org/std/primitive.f32.html#method.round\">https://doc.rust-lang.org/std/primitive.f32.html#method.round</a></p>",
        "id": 241652819,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622921613
    },
    {
        "content": "<p>Yeah, I just checked that in the Playgounr <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span>  - should I  ammend that docstring then?</p>",
        "id": 241652870,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622921657
    },
    {
        "content": "<p>yes</p>",
        "id": 241652880,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622921677
    },
    {
        "content": "<p>ohhh huh.</p>",
        "id": 241652900,
        "sender_full_name": "Jubilee",
        "timestamp": 1622921733
    },
    {
        "content": "<p>Alright, seems like a good thing to straighten out in the docs then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 241652949,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622921787
    },
    {
        "content": "<p>Yeah doc tests not caching is quite painful right now...</p>",
        "id": 241655017,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622925021
    },
    {
        "content": "<p>Can anyone help out with a MWE here? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"sd\">/// Returns a slice containing the entire SIMD vector.</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">            </span><span class=\"sd\">/// # use core_simd::*;</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let a = f32x4::from_array([1.0, 1.0, 1.0, 1.0]);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let b = a.as_slice();</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let c = [1.0, 1.0, 1.0, 1.0];</span>\n<span class=\"w\">            </span><span class=\"sd\">/// assert_eq!(c[0..3], b);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"cp\">$type</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 241655874,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622926519
    },
    {
        "content": "<p>that is technically accurate. ^^; I don't think there's anything to be done for that as far as examples go, it's just \"returns a slice\".</p>",
        "id": 241656123,
        "sender_full_name": "Jubilee",
        "timestamp": 1622926934
    },
    {
        "content": "<p>Fair enough.</p>",
        "id": 241656192,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622927086
    },
    {
        "content": "<p>Is this supposed to be a saturading add?</p>",
        "id": 241656262,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622927216
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"sd\">/// Horizontal add.  Returns the sum of the lanes of the vector, with saturating addition.</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">            </span><span class=\"sd\">/// # use core_simd::*;</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let a = f32x4::from_array([1.0, 2.0, 3.0, 4.0]).horizontal_sum();</span>\n<span class=\"w\">            </span><span class=\"sd\">/// assert_eq!(10.0, a);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let b = f32x4::from_array([f32::MAX, 2.0, 0.0, 0.0]).horizontal_sum();</span>\n<span class=\"w\">            </span><span class=\"sd\">/// assert_eq!(f32::MAX, b + 1.0);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n</code></pre></div>",
        "id": 241656271,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622927237
    },
    {
        "content": "<p>So f32x4 addition saturates, and f32x4 multiplication wraps.</p>",
        "id": 241656401,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622927473
    },
    {
        "content": "<p>How can this be <code>inf</code>?</p>",
        "id": 241656627,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622927890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"kt\">f32</span>::<span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"kt\">f32</span>::<span class=\"n\">MAX</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">]).</span><span class=\"n\">horizontal_product</span><span class=\"p\">())</span>:\n</code></pre></div>",
        "id": 241656633,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622927925
    },
    {
        "content": "<p>huh, that's odd.</p>",
        "id": 241656640,
        "sender_full_name": "Jubilee",
        "timestamp": 1622927946
    },
    {
        "content": "<p>Well it's live now</p>",
        "id": 241656960,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622928559
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/132\">https://github.com/rust-lang/stdsimd/pull/132</a></p>",
        "id": 241656961,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622928560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> the opposite kinda: normal unit tests are all in one thing, integration tests are one test executable per top level module (like how bins/ and examples/ work), and doc tests are one test executable <em>per doctest comment block</em> (aka \"bonkers slow\")</p>",
        "id": 241657909,
        "sender_full_name": "Lokathor",
        "timestamp": 1622930128
    },
    {
        "content": "<p>oh hm, I guess I was wrong.</p>",
        "id": 241657916,
        "sender_full_name": "Jubilee",
        "timestamp": 1622930155
    },
    {
        "content": "<p>Meh, still only takes about 15 secs on a single thread. Its not too bad.</p>",
        "id": 241658081,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622930406
    },
    {
        "content": "<p>I'm going for a walk, did some good coding today.</p>",
        "id": 241658101,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622930433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Docstring.20brigade/near/241658081\">said</a>:</p>\n<blockquote>\n<p>Meh, still only takes about 15 secs on a single thread. Its not too bad.</p>\n</blockquote>\n<p>yeah but unit/integration tests are like 100x faster to run through than doctests</p>",
        "id": 241660415,
        "sender_full_name": "Lokathor",
        "timestamp": 1622934494
    },
    {
        "content": "<p>Oh, gotcha.</p>",
        "id": 241660441,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622934554
    },
    {
        "content": "<p>linking is just so expensive by default that linking 100 small things is way more costly than linking one big thing.</p>",
        "id": 241660521,
        "sender_full_name": "Lokathor",
        "timestamp": 1622934697
    },
    {
        "content": "<p>... Y'all <em>really</em> need to port <code>mold</code> asap.</p>",
        "id": 241660638,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622934884
    },
    {
        "content": "<p><a href=\"https://github.com/rui314/mold#how-to-use\">https://github.com/rui314/mold#how-to-use</a></p>",
        "id": 241660645,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622934892
    },
    {
        "content": "<p>sure, just as soon as it works on anything but linux/x86_64 :P</p>",
        "id": 241660934,
        "sender_full_name": "Lokathor",
        "timestamp": 1622935436
    },
    {
        "content": "<p>... or RIIR would probs be better no?</p>",
        "id": 241660983,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622935476
    },
    {
        "content": "<p>Are masks obtained from <code>lanes_eq</code> and friends always lane-sized?</p>",
        "id": 241661138,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622935701
    },
    {
        "content": "<p>no, it's not even done yet. It's a tool, it doesn't have to be written in rust, we just call it as a tool.</p>",
        "id": 241661140,
        "sender_full_name": "Lokathor",
        "timestamp": 1622935708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Docstring.20brigade/near/241661138\">said</a>:</p>\n<blockquote>\n<p>Are masks obtained from <code>lanes_eq</code> and friends always lane-sized?</p>\n</blockquote>\n<p>they are, yeah, each lane of the mask will be trueish or falseish</p>",
        "id": 241661148,
        "sender_full_name": "Lokathor",
        "timestamp": 1622935729
    },
    {
        "content": "<p>so the entire lane will be filled with 1s or 0s, right?</p>",
        "id": 241661159,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622935760
    },
    {
        "content": "<p>yeah, f32x4.lanes_eq(f32x4) will give like mask32x4 where each mask32 is all 0 or all 1</p>",
        "id": 241661162,
        "sender_full_name": "Lokathor",
        "timestamp": 1622935774
    },
    {
        "content": "<p>Ok ok.</p>",
        "id": 241661164,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622935784
    },
    {
        "content": "<p>uh, assuming that the masks discussion got sorted out how i remember it</p>",
        "id": 241661208,
        "sender_full_name": "Lokathor",
        "timestamp": 1622935804
    },
    {
        "content": "<p>On some architectures it's only 1 bit per lane</p>",
        "id": 241661211,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622935807
    },
    {
        "content": "<p>oops, this is why we pay caleb the big bucks</p>",
        "id": 241661219,
        "sender_full_name": "Lokathor",
        "timestamp": 1622935832
    },
    {
        "content": "<p>\"some\" right now being only avx-512 but probably others in the future</p>",
        "id": 241661220,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622935835
    },
    {
        "content": "<p>That sounds like something that I should include in the docstrings...</p>",
        "id": 241661282,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622935942
    },
    {
        "content": "<p>The layout of the masks in general are unspecified</p>",
        "id": 241661287,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622935962
    },
    {
        "content": "<p>So I wouldn't get too specific about them in general.  They're just collections of truthy values</p>",
        "id": 241661298,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622935995
    },
    {
        "content": "<p>that, yes.</p>",
        "id": 241661301,
        "sender_full_name": "Jubilee",
        "timestamp": 1622936003
    },
    {
        "content": "<p>Notionally they are <code>[bool; N]</code>.</p>",
        "id": 241661350,
        "sender_full_name": "Jubilee",
        "timestamp": 1622936048
    },
    {
        "content": "<p>[truthy; N]</p>",
        "id": 241661930,
        "sender_full_name": "Lokathor",
        "timestamp": 1622937090
    },
    {
        "content": "<p><code>Into&lt;[bool; N]&gt;</code></p>",
        "id": 241662052,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622937277
    },
    {
        "content": "<p>Yeah, masks specifically have a value of <code>0</code> or <code>!0</code> for every lane, I should say.</p>",
        "id": 241662347,
        "sender_full_name": "Jubilee",
        "timestamp": 1622937745
    },
    {
        "content": "<p>Since the interface is bool I think it's fair to consider them bools, they just aren't directly mutable</p>",
        "id": 241662437,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622937932
    },
    {
        "content": "<p>is it safe to assume that masks have only 2^N states though? It might be N full words with some truthy function</p>",
        "id": 241663381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622939427
    },
    {
        "content": "<p>Yes</p>",
        "id": 241663383,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622939443
    },
    {
        "content": "<p>In LLVM it's truncated to <code>&lt;i1 x N&gt;</code> before using it</p>",
        "id": 241663399,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622939485
    },
    {
        "content": "<p>So only 1 bit per lane</p>",
        "id": 241663401,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622939500
    },
    {
        "content": "<p>Why doesn't this docstring<br>\n<a href=\"https://rust-lang.github.io/stdsimd/src/core_simd/select.rs.html#87\">https://rust-lang.github.io/stdsimd/src/core_simd/select.rs.html#87</a></p>",
        "id": 241664342,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622941231
    },
    {
        "content": "<p>Show up here</p>",
        "id": 241664343,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622941236
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/stdsimd/src/core_simd/select.rs.html#85\">https://rust-lang.github.io/stdsimd/src/core_simd/select.rs.html#85</a></p>",
        "id": 241664355,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622941266
    },
    {
        "content": "<p>It's not accessible via the sidebar either  <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 241664367,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622941284
    },
    {
        "content": "<p>aka if I look for <code>select</code> in the docs in doesn't show up</p>",
        "id": 241664372,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622941300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Docstring.20brigade/near/241662437\">said</a>:</p>\n<blockquote>\n<p>Since the interface is bool I think it's fair to consider them bools, they just aren't directly mutable</p>\n</blockquote>\n<p>incidentally though, if you convert a &amp;[SimdMask] to &amp;[bool], even adjusting for length, you'd be causing UB if any of the mask lanes were \"trueish\", because when those bytes are viewed as a <code>bool</code> it's an improper value (it would be <code>0b1111_1111</code>, not <code>0b0000_0001</code>).</p>",
        "id": 241664978,
        "sender_full_name": "Lokathor",
        "timestamp": 1622942315
    },
    {
        "content": "<p>Yeah, we don't provide any slice access at all though</p>",
        "id": 241665048,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622942442
    },
    {
        "content": "<p>Just <code>fn get(self, index: usize) -&gt; bool</code> etc</p>",
        "id": 241665052,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622942478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Docstring.20brigade/near/241664372\">said</a>:</p>\n<blockquote>\n<p>aka if I look for <code>select</code> in the docs in doesn't show up</p>\n</blockquote>\n<p>where in the docs are you looking? with the search engine?</p>",
        "id": 241667046,
        "sender_full_name": "Jubilee",
        "timestamp": 1622946146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> yes, I go to <a href=\"https://rust-lang.github.io/stdsimd/core_simd/trait.Select.html\">https://rust-lang.github.io/stdsimd/core_simd/trait.Select.html</a></p>",
        "id": 241667371,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622946731
    },
    {
        "content": "<p>Then I type in <code>select</code> in the search bar, and click the first result.</p>",
        "id": 241667374,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622946741
    },
    {
        "content": "<p>oh FML, I'm being silly and clicking on a trait and not a method.</p>",
        "id": 241667380,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1622946770
    }
]