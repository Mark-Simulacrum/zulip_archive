[
    {
        "content": "<p>Im implementing common shuffles per <a href=\"https://github.com/rust-lang/stdsimd/issues/93\">https://github.com/rust-lang/stdsimd/issues/93</a>, i was thinking about adding both <code>rotate_left</code> and <code>rotate_right</code>, should i do that or stick to just <code>rotate</code> which rotates left?</p>",
        "id": 236862700,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619800083
    },
    {
        "content": "<p>Also, should the factor be a <code>usize</code>?</p>",
        "id": 236862845,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619800131
    },
    {
        "content": "<p>I have been using <code>u32</code> for Reasons.</p>",
        "id": 236864089,
        "sender_full_name": "Jubilee",
        "timestamp": 1619800636
    },
    {
        "content": "<p>Alright, then i'll stick to <code>u32</code></p>",
        "id": 236864295,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619800709
    },
    {
        "content": "<p>And I think that we should either have both <code>rotate_left</code> and <code>rotate_right</code> or we should accept an i32 and decide negative is one way and positive is the other way.</p>",
        "id": 236864368,
        "sender_full_name": "Jubilee",
        "timestamp": 1619800740
    },
    {
        "content": "<p>I think considering the stdlib uses <code>rotate_left</code> and <code>rotate_right</code> in slices, we should just stick to that API for consistency</p>",
        "id": 236864474,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619800788
    },
    {
        "content": "<p>Probably yes.</p>",
        "id": 236864493,
        "sender_full_name": "Jubilee",
        "timestamp": 1619800798
    },
    {
        "content": "<p><code>simd_shuffle</code> uses u32 indices, so it's easier to just accept u32 because we can then just pass those through. u8s are not enough, but u16s probably would be.<br>\n<code>std</code> often uses u32 as \"a standard, small-sized value for talking about bits and bytes\", even if logically we probably won't see more than a u8, e.g.<br>\n<a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.rotate_right\">https://doc.rust-lang.org/std/primitive.u32.html#method.rotate_right</a></p>",
        "id": 236865422,
        "sender_full_name": "Jubilee",
        "timestamp": 1619801182
    },
    {
        "content": "<p>I see, makes sense</p>",
        "id": 236865674,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619801305
    },
    {
        "content": "<p>how come shuffles use const generics instead of normal params?</p>",
        "id": 236866080,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619801500
    },
    {
        "content": "<p>So, SIMD permutation like these are always slow compared to e.g. SIMD add or even load/store.<br>\nBut the fastest case assembly instructions tend to take immediates (const numbers) as inputs, so if we want the codegen to use those, we should provide constant values.</p>",
        "id": 236866623,
        "sender_full_name": "Jubilee",
        "timestamp": 1619801734
    },
    {
        "content": "<p>Oh i see, makes sense <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 236866717,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619801770
    },
    {
        "content": "<p>I just want to point out that I was unable to implement rotation.  Not to say it's impossible, but you run into an issue where you have dependent generic constants that rust (currently) can't handle</p>",
        "id": 236866819,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619801817
    },
    {
        "content": "<p>Dynamic permutations exist that are still are faster than a lot of things, but because SIMD shuffles are <em>so slow</em>, we want to provide an API that cannot fail to pass a const value through, and to make it explicit when you use the dynamic vs. const shuffle.</p>",
        "id": 236866852,
        "sender_full_name": "Jubilee",
        "timestamp": 1619801831
    },
    {
        "content": "<p>Hm, where did you encounter that?</p>",
        "id": 236866892,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619801855
    },
    {
        "content": "<p>Well, if you assume the signature looks something like <code>fn rotate&lt;const N: usize&gt;</code> you get an issue when you try to convert N into the shuffle indices</p>",
        "id": 236867127,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619801946
    },
    {
        "content": "<p>Perhaps there's a way to write it that doesn't have that issue, but that's what stopped me</p>",
        "id": 236867447,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802054
    },
    {
        "content": "<p>Do we need to make lane rotations const?</p>",
        "id": 236867551,
        "sender_full_name": "Jubilee",
        "timestamp": 1619802088
    },
    {
        "content": "<p>I think that's like asking if we need to make shuffles const? There's a place for both</p>",
        "id": 236867625,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802120
    },
    {
        "content": "<p>Oh i see what you mean</p>",
        "id": 236867745,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802149
    },
    {
        "content": "<p>Yeah thats unfortunate, i think rotate will need to wait for that</p>",
        "id": 236867781,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802162
    },
    {
        "content": "<p>fair, I guess I was asking if we expect the instructions we lower to to be impacted in terms of performance</p>",
        "id": 236867951,
        "sender_full_name": "Jubilee",
        "timestamp": 1619802228
    },
    {
        "content": "<p>wait you can just add a generic to the function then call it with the outer generic lol</p>",
        "id": 236868228,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802323
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">rotate_right</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">idx</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">permute</span>::<span class=\"n\">base_index_array</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">[</span><span class=\"cp\">$n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"n\">base</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">base</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">shuffle</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236868308,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802355
    },
    {
        "content": "<p>wait it doesnt allow it nvm lmao</p>",
        "id": 236868415,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802388
    },
    {
        "content": "<p>ah the pain, it didnt show the error because another function had an error <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 236868452,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802404
    },
    {
        "content": "<p>Yeah I think that generic becomes too complicated for rust for some reason</p>",
        "id": 236868453,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802405
    },
    {
        "content": "<p>i dont see why it has an issue with this, <code>this may fail depending on what value the parameter takes</code></p>",
        "id": 236868553,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I think we can do dynamic rotation because LLVM will probably do a very good job converting it to a static when possible</p>",
        "id": 236868612,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802455
    },
    {
        "content": "<p>do you know if this is behind a feature/not implemented or if it will just never be allowed?</p>",
        "id": 236868776,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802513
    },
    {
        "content": "<p>But we don't have any dynamic shuffles yet</p>",
        "id": 236868790,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802517
    },
    {
        "content": "<p>Could maybe add <code>dynamic_shuffle</code>?</p>",
        "id": 236868855,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802538
    },
    {
        "content": "<p>It's related to <code>const_evaluatable_checked</code> which is in the compiler but definitely incomplete</p>",
        "id": 236868884,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802550
    },
    {
        "content": "<p>I see, so it will probably take a good amount of time for it to be allowed</p>",
        "id": 236868931,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802569
    },
    {
        "content": "<p>Yeah I'm not really sure</p>",
        "id": 236868965,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802582
    },
    {
        "content": "<p>packed_simd had an implementation of <code>dyn_shuffle</code>.</p>",
        "id": 236868984,
        "sender_full_name": "Jubilee",
        "timestamp": 1619802591
    },
    {
        "content": "<p>i think <code>dynamic_shuffle</code> with a warning that this may be very slow could work</p>",
        "id": 236869158,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802638
    },
    {
        "content": "<p>You may be able to implement static rotation with dynamic shuffles as a stopgap too</p>",
        "id": 236869460,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802757
    },
    {
        "content": "<p>And I suspect it will compile to the same thing</p>",
        "id": 236869506,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802778
    },
    {
        "content": "<p>as in convert the const params to non-const then call dyn shuffle? yeah that should work</p>",
        "id": 236869555,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802793
    },
    {
        "content": "<p>Yeah exactly</p>",
        "id": 236869578,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802802
    },
    {
        "content": "<p>in that case should i make dyn_shuffle private?</p>",
        "id": 236869594,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802808
    },
    {
        "content": "<p>No, I think we want that in our public api too</p>",
        "id": 236869613,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802822
    },
    {
        "content": "<p>Ok, so ill add both</p>",
        "id": 236869629,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802829
    },
    {
        "content": "<p>We just haven't gotten around to it yet</p>",
        "id": 236869633,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802831
    },
    {
        "content": "<p>Btw I think dynamic shuffling should look like how I did select (in the feature/select branch)</p>",
        "id": 236869757,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802874
    },
    {
        "content": "<p>alright, ill check it out</p>",
        "id": 236869840,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802902
    },
    {
        "content": "<p>I think it should be a member fn of the index type and take the shuffle input as arguments</p>",
        "id": 236869861,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802907
    },
    {
        "content": "<p>So <code>index.dyn_shuffle(a, b)</code> or whatever</p>",
        "id": 236869945,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619802936
    },
    {
        "content": "<p>huh, why not just shuffle but with <code>indices: [u32; $n]</code>?</p>",
        "id": 236869960,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802942
    },
    {
        "content": "<p>in that case do you mean an extension trait or on the actual primitive? i forget we are working on core itself <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 236870098,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619802984
    },
    {
        "content": "<p>I think that gets confusing fast. I actually don't love our current shuffle API because the two things you're shuffling are so separate in the API</p>",
        "id": 236870145,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803008
    },
    {
        "content": "<p>Take a look at how I did select, it's on the mask type but uses a trait to constrain the inputs</p>",
        "id": 236870213,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803047
    },
    {
        "content": "<p>Alright</p>",
        "id": 236870241,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619803061
    },
    {
        "content": "<p>By the way, I think the index of dynamic shuffles is a simd vector with the same lane width and not an array (though it's basically the same)</p>",
        "id": 236870268,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803075
    },
    {
        "content": "<p>oh right, ill use vector so its more explicit</p>",
        "id": 236870365,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619803103
    },
    {
        "content": "<p>hmm then in that case it would just be a method on the actual vectors</p>",
        "id": 236870391,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619803118
    },
    {
        "content": "<p>Yeah I think so</p>",
        "id": 236870410,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803132
    },
    {
        "content": "<p>Yeah, shuffles basically tend to use SIMD vectors in the assembly, I used an array because that's the morally closest thing to a vector here.</p>",
        "id": 236870493,
        "sender_full_name": "Jubilee",
        "timestamp": 1619803176
    },
    {
        "content": "<p>Yeah and vectors arent allowed in const generics yet</p>",
        "id": 236870525,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619803195
    },
    {
        "content": "<p>Wait is core allowed to make vectors allowed in const generics? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 236870698,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619803246
    },
    {
        "content": "<p>They actually would be allowed but I don't think it's necessary</p>",
        "id": 236870720,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803261
    },
    {
        "content": "<p>There's nothing actually stopping us.</p>",
        "id": 236870749,
        "sender_full_name": "Jubilee",
        "timestamp": 1619803267
    },
    {
        "content": "<p>If it's const I think an array is better</p>",
        "id": 236870773,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803279
    },
    {
        "content": "<p>It actually took some compiler hacking to make monotuple arrays accepted.</p>",
        "id": 236870999,
        "sender_full_name": "Jubilee",
        "timestamp": 1619803365
    },
    {
        "content": "<p>And it broke wasm32 inadvertently :)</p>",
        "id": 236871302,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803474
    },
    {
        "content": "<p>oh nice</p>",
        "id": 236871319,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619803484
    },
    {
        "content": "<p>Still needs a bit more hacking</p>",
        "id": 236871330,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619803489
    },
    {
        "content": "<p>I am waiting for the current kerfluffle around Wasm to die down before I pick up the axe re: that.</p>",
        "id": 236871625,
        "sender_full_name": "Jubilee",
        "timestamp": 1619803615
    },
    {
        "content": "<p>for now i'll add a <code>dynamic_shuffle</code> method on vectors then have rotate call that</p>",
        "id": 236871751,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619803678
    },
    {
        "content": "<p>Examples in stuff like interleave doesnt use <code># Examples</code>, is this intentional?</p>",
        "id": 236887086,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619810080
    },
    {
        "content": "<p>Nope</p>",
        "id": 236887718,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619810392
    },
    {
        "content": "<p>they also seem to use <code># use core_simd::SimdU32;</code> for some odd reason</p>",
        "id": 236888422,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619810730
    },
    {
        "content": "<p>That's necessary because in the end it will be exposed as std::simd, not core_simd</p>",
        "id": 236888556,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619810787
    },
    {
        "content": "<p>Ah ok, so ill use <code># Examples</code> and that for the meantime</p>",
        "id": 236888666,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619810846
    },
    {
        "content": "<p>although examples get compiled during tests so that might not be desireable for now</p>",
        "id": 236888706,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619810866
    },
    {
        "content": "<p>We definitely want them compiled.  But I think all doc tests will, regardless of an Examples section?</p>",
        "id": 236888810,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619810904
    },
    {
        "content": "<p>I cant remember actually lol</p>",
        "id": 236888863,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619810937
    },
    {
        "content": "<blockquote>\n<p><code>shift (like rotate but insert 0s)</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> don't intrinsics specifically made for this exist already? why is this under shuffles?</p>",
        "id": 236895438,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619813904
    },
    {
        "content": "<p>I mean [1, 2, 3, 4] -&gt; [0, 0, 1, 2]</p>",
        "id": 236896066,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814185
    },
    {
        "content": "<p>Not bitwise operations</p>",
        "id": 236896080,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814192
    },
    {
        "content": "<p>right, i thought operations for that existed already for things like 32 or 64 bit numbers</p>",
        "id": 236896255,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619814282
    },
    {
        "content": "<p>I could be wrong but I don't think there are intrinsics for that</p>",
        "id": 236896733,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814520
    },
    {
        "content": "<p>I think the shuffle intrinsic is the only one that can move things across lanes like that</p>",
        "id": 236896755,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814536
    },
    {
        "content": "<p><a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/#techs=SSE,SSE2,SSE3,SSSE3,SSE4_1,SSE4_2,AVX&amp;expand=4912,3864,743,743,3869&amp;cats=Shift\">these instructions</a></p>",
        "id": 236896789,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619814557
    },
    {
        "content": "<p>btw i submitted the draft for rotate <a href=\"https://github.com/rust-lang/stdsimd/pull/111\">#111</a></p>",
        "id": 236896943,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619814623
    },
    {
        "content": "<p>Oh yes, that's why I want to provide them as a specific function.  It's something the compiler can likely do a very good job optimizing.</p>",
        "id": 236896967,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814633
    },
    {
        "content": "<p>But there's no way to represent that in LLVM IR other than a shuffle</p>",
        "id": 236897007,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814650
    },
    {
        "content": "<p>Oh ok, so relying on llvm to figure out it can be turned into those, got it</p>",
        "id": 236897010,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619814651
    },
    {
        "content": "<p>ah i see</p>",
        "id": 236897022,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619814656
    },
    {
        "content": "<p>makes sense, although not sure how to write that as a shift, a shift then a bitmask?</p>",
        "id": 236897071,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619814680
    },
    {
        "content": "<p>well, how to implement it in a way that will make llvm notice it</p>",
        "id": 236897335,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619814808
    },
    {
        "content": "<p>Well shuffle takes two vectors</p>",
        "id": 236897483,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814858
    },
    {
        "content": "<p>I think you can just splat a new vector to zero for the second input</p>",
        "id": 236897506,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619814871
    },
    {
        "content": "<p>Oh i see, if the operation is shifting <code>[2, 3]</code> to the right once then just generate indices of <code>[2, 0]</code> where the second vector is a zero-vector</p>",
        "id": 236897860,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815068
    },
    {
        "content": "<p>should this be a <code>Shl</code> impl or a normal function?</p>",
        "id": 236897915,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815085
    },
    {
        "content": "<p>I think a regular function, Shl is already used for bitwise shifts</p>",
        "id": 236897997,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815133
    },
    {
        "content": "<p>Alright, so ill just do the same as rotate and add shift_left and shift_right</p>",
        "id": 236898028,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815155
    },
    {
        "content": "<p>I wonder if we want to call it shift_lanes_left etc, just so it's clear what it's doing</p>",
        "id": 236898072,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815188
    },
    {
        "content": "<p>Same with rotate</p>",
        "id": 236898077,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815196
    },
    {
        "content": "<p>hmm, i think <code>rotate_bits_right</code> and stuff would be clearer if we ever add that since the most common use case is on lanes</p>",
        "id": 236898161,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815228
    },
    {
        "content": "<p>Hmm perhaps.  I'm not actually sure which is more common but open to bike shedding it</p>",
        "id": 236898244,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815269
    },
    {
        "content": "<p>does shuffle allow you to refer to the same index more than once?</p>",
        "id": 236898262,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815281
    },
    {
        "content": "<p>I believe so</p>",
        "id": 236898276,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815291
    },
    {
        "content": "<p>if so i'll just use the same index for all 0s</p>",
        "id": 236898288,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815301
    },
    {
        "content": "<p>You could actually use a lane count of 1 for the zero vector, I think</p>",
        "id": 236898379,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815338
    },
    {
        "content": "<p>At least the intrinsic supports that (not necessarily our shuffle function)</p>",
        "id": 236898399,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815355
    },
    {
        "content": "<p>But I doubt it actually makes a difference</p>",
        "id": 236898434,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815381
    },
    {
        "content": "<p>lane count is just a type system lie anyways so i dont think it would make a difference</p>",
        "id": 236898469,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815403
    },
    {
        "content": "<p>man reading the docs with rustdoc not autoexpanding impl blocks is incredibly painful</p>",
        "id": 236898566,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815446
    },
    {
        "content": "<p>Was that a change to rustdoc? I've noticed that happening only recently</p>",
        "id": 236898600,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815477
    },
    {
        "content": "<p>i asked the rustdoc folks and they said its a bug</p>",
        "id": 236898635,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815493
    },
    {
        "content": "<p>Ah makes sense</p>",
        "id": 236898658,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815504
    },
    {
        "content": "<p>hmm i dont think i can use splat with 0 since this wouldnt work for float vectors</p>",
        "id": 236898722,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815536
    },
    {
        "content": "<p>think i need to call the intrinsic manually with a constant type vector</p>",
        "id": 236898753,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815555
    },
    {
        "content": "<p>Oh you can use Default instead of 0</p>",
        "id": 236898965,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815642
    },
    {
        "content": "<p>oh i can? sweet</p>",
        "id": 236898983,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815650
    },
    {
        "content": "<p>Alternatively <code>0 as _</code> I think</p>",
        "id": 236899008,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815670
    },
    {
        "content": "<p>btw why dont 256 bit types exist?</p>",
        "id": 236899087,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815688
    },
    {
        "content": "<p>Like integers? No clue</p>",
        "id": 236899130,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815703
    },
    {
        "content": "<p>We ran into issues with just 128 bit integers</p>",
        "id": 236899151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815716
    },
    {
        "content": "<p>oh boy</p>",
        "id": 236899159,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815720
    },
    {
        "content": "<p>yeah avx2 is pretty common so its pretty important to look at adding them eventually</p>",
        "id": 236899194,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815739
    },
    {
        "content": "<p>avx512 is very rare so it doesnt have to be a priority but it should be supported (i work with HPC clusters with xeons so it would be nice for that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>)</p>",
        "id": 236899280,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815781
    },
    {
        "content": "<p>So i128 doesn't actually use SSE if that's what you're hinting at</p>",
        "id": 236899415,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815821
    },
    {
        "content": "<p>It uses arithmetic carry operations</p>",
        "id": 236899459,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815837
    },
    {
        "content": "<p>So it's still handled 64 bits at a time</p>",
        "id": 236899489,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619815850
    },
    {
        "content": "<p>hmm not sure how to say this but id like some way of handling 128 or 256 bit vectors as a whole, without em being split into like, 2 u64s</p>",
        "id": 236899726,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619815970
    },
    {
        "content": "<p>although that gets a bit weird because you wouldnt have lanes for them, so they would be special types</p>",
        "id": 236899826,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619816028
    },
    {
        "content": "<p>but i think <code>SimdU128</code> should definitely exist</p>",
        "id": 236899841,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619816036
    },
    {
        "content": "<p>Especially 128 bit and 256 bit bitmasks, which is what i often end up using simd for</p>",
        "id": 236899997,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619816101
    },
    {
        "content": "<p>So I guess the question though, is there any reason you couldn't just use a smaller type for that? If it's just bitwise operations</p>",
        "id": 236900053,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619816132
    },
    {
        "content": "<p>Well i think it would be kind of painful for certain operations, but i havent explored the API enough</p>",
        "id": 236900122,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619816164
    },
    {
        "content": "<p>Integers over 64 bits get complicated when you get to arithmetic because basically nothing has hardware support for that, especially in simd</p>",
        "id": 236900149,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619816169
    },
    {
        "content": "<p>yeah you're right</p>",
        "id": 236900176,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619816187
    },
    {
        "content": "<p>oof just realized we cant add shift either until the rotate const generic issue is fixed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 236902263,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619816747
    },
    {
        "content": "<p>Haha yep.  It can probably use the same dynamic shuffle trick for now too, though</p>",
        "id": 236904048,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619817297
    },
    {
        "content": "<p>this is definitely the worst const fn ive ever written, the funny thing is i wrote this to shift to the left, but its actually shifting to the right, so i guess ill just use this for shift_right <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">idx</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"cp\">$n</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"cp\">$n</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">base</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">base</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236904202,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619817340
    },
    {
        "content": "<p>Lol, whatever works</p>",
        "id": 236905448,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619817711
    },
    {
        "content": "<p>oh i just forgot <code>base[i - $n]</code> haha</p>",
        "id": 236905600,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619817744
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=9bcb321f7e2f9f80f77ad4e294fef63f\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=9bcb321f7e2f9f80f77ad4e294fef63f</a></p>",
        "id": 236907809,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1619818732
    },
    {
        "content": "<p>haha, that should work, what a hack though</p>",
        "id": 236907914,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619818805
    },
    {
        "content": "<p>^ rotate using macros</p>",
        "id": 236907931,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1619818821
    },
    {
        "content": "<p>i mean, stdsimd is already 80% macros</p>",
        "id": 236907962,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1619818839
    },
    {
        "content": "<p>it's true.</p>",
        "id": 236916713,
        "sender_full_name": "Jubilee",
        "timestamp": 1619825150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Common.20shuffles/near/236899726\">said</a>:</p>\n<blockquote>\n<p>hmm not sure how to say this but id like some way of handling 128 or 256 bit vectors as a whole, without em being split into like, 2 u64s</p>\n</blockquote>\n<p>I would <em>like</em> there to be a \"bit\" type, and for us to be able to have like <code>SimdBits&lt;128&gt;</code>, but that's basically \"future extension of Rust\" territory.</p>",
        "id": 236945535,
        "sender_full_name": "Jubilee",
        "timestamp": 1619852804
    },
    {
        "content": "<blockquote>\n<p>Swizzling using variable indices</p>\n<p>i8x16.swizzle(a: v128, s: v128) -&gt; v128</p>\n<p>Returns a new vector with lanes selected from the lanes of the first input vector a specified in the second input vector s. The indices i in range [0, 15] select the i-th element of a. For indices outside of the range the resulting lane is initialized to 0.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">S</span><span class=\"o\">.</span><span class=\"n\">swizzle</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">New</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">Lanes</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">lanes</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre></div>\n<p>Hey, wasm calls it a swizzle. :^)</p>",
        "id": 237601988,
        "sender_full_name": "Jubilee",
        "timestamp": 1620273716
    }
]