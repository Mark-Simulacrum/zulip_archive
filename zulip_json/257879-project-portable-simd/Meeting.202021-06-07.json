[
    {
        "content": "<p>Hello, do I have folks for today? <a href=\"https://hackmd.io/K-qO8F32TEKjUSrbiimNtw\">https://hackmd.io/K-qO8F32TEKjUSrbiimNtw</a></p>",
        "id": 241833786,
        "sender_full_name": "Jubilee",
        "timestamp": 1623096701
    },
    {
        "content": "<p>If not, next week is fine too: doing opposite weeks from PEH might be a better idea.</p>",
        "id": 241833977,
        "sender_full_name": "Jubilee",
        "timestamp": 1623096777
    },
    {
        "content": "<p>Hello! I'm back <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 241836889,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098071
    },
    {
        "content": "<p>And ready to talk about moving to nightly...</p>",
        "id": 241837147,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098211
    },
    {
        "content": "<p>Helloooo~</p>",
        "id": 241837301,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098271
    },
    {
        "content": "<p>Oh okay so</p>\n<blockquote>\n<p>My understanding is that once a feature flag is stabilized you're not supposed to move new things to it.</p>\n</blockquote>\n<blockquote>\n<p>My assumption is we probably still will not be stabilizing for a while, and can add things to it? I don't really know.</p>\n</blockquote>\n<p>Yes, you can move things around between feature flags.<br>\nI got a bit distracted by the <code>simd_gather</code> and trait thing because it took unexpected time and I had to bugfix the compiler! ^^;;;<br>\nBut also over the past few months I did a bunch of stabilization PRs to get familiar with the process and also Rust's feature gates. Making unstable and stabilizing library features is the easiest thing.</p>",
        "id": 241837699,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098479
    },
    {
        "content": "<p>I took a look at how stdarch is done and I think it's overall a good model</p>",
        "id": 241838052,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098645
    },
    {
        "content": "<p>The module overall is marked as unstable, so you can use a feature to enable the entire module</p>",
        "id": 241838127,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098693
    },
    {
        "content": "<p>And then once we stabilize things we can mark particular items as stable but leave the totality of the module unstable</p>",
        "id": 241838178,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098729
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 241838297,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098783
    },
    {
        "content": "<p>We can bikeshed naming to make sure it's not confusing but overall it's probably the easiest since the initial step is just marking the entire module unstable and allowing all the items to inherit that</p>",
        "id": 241838301,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098786
    },
    {
        "content": "<p>Yeah, individual functions can be annotated like<br>\n<code>#[unstable(feature = \"with_options\", issue = \"65439\")]</code><br>\n<code>#[stable(feature = \"with_options\", since = \"1.54.0\")]</code><br>\nand they don't have anything too special about them.</p>",
        "id": 241838345,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098815
    },
    {
        "content": "<p>But there is one important detail we have to make sure we do correctly. ^^;</p>",
        "id": 241838370,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098829
    },
    {
        "content": "<p>namely: stdarch is a submodule of rustc.</p>",
        "id": 241838377,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098838
    },
    {
        "content": "<p>...that has been a very bad thing for stdarch.</p>",
        "id": 241838392,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098844
    },
    {
        "content": "<p>We probably want to add this as a subtree.</p>",
        "id": 241838435,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098868
    },
    {
        "content": "<p>Is it that big of an issue?  My understanding is rustc has something like a dozen submodules</p>",
        "id": 241838485,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098883
    },
    {
        "content": "<p>Yes.</p>",
        "id": 241838510,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098892
    },
    {
        "content": "<p>It has been a huge pain, especially for tools, since sometimes a change needs to simultaneously hit rustc and a tool.</p>",
        "id": 241838563,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098921
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 241838583,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623098934
    },
    {
        "content": "<p>And because we're tinkering with compiler internals just to get our library to work, we really want to be able to poke both at the same time.</p>",
        "id": 241838619,
        "sender_full_name": "Jubilee",
        "timestamp": 1623098956
    },
    {
        "content": "<p>I'm honestly not familiar with subtrees, and submodules can be a pain, so as long as it makes sense sounds good to me</p>",
        "id": 241838689,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623099001
    },
    {
        "content": "<p>Subtrees are basically \"trick git into thinking it's all one repo\".</p>",
        "id": 241838802,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099039
    },
    {
        "content": "<p>From the git repo itself:</p>\n<blockquote>\n<p>Subtrees allow subprojects to be included within a subdirectory<br>\nof the main project, optionally including the subproject's<br>\nentire history.</p>\n<p>For example, you could include the source code for a library<br>\nas a subdirectory of your application.</p>\n<p>Subtrees are not to be confused with submodules, which are meant for<br>\nthe same task. Unlike submodules, subtrees do not need any special<br>\nconstructions (like '.gitmodules' files or gitlinks) be present in<br>\nyour repository, and do not force end-users of your<br>\nrepository to do anything special or to understand how subtrees<br>\nwork. A subtree is just a subdirectory that can be<br>\ncommitted to, branched, and merged along with your project in<br>\nany way you want.</p>\n<p>They are also not to be confused with using the subtree merge<br>\nstrategy. The main difference is that, besides merging<br>\nthe other project as a subdirectory, you can also extract the<br>\nentire history of a subdirectory from your project and make it<br>\ninto a standalone project. Unlike the subtree merge strategy<br>\nyou can alternate back and forth between these<br>\ntwo operations. If the standalone library gets updated, you can<br>\nautomatically merge the changes into your project; if you<br>\nupdate the library inside your project, you can \"split\" the<br>\nchanges back out again and merge them back into the library<br>\nproject.</p>\n</blockquote>",
        "id": 241838995,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099125
    },
    {
        "content": "<p>One question I don't have the answer to is if we will have to cough up an RFC <strong>before</strong> we open the PR? I expect we don't have to have the RFC merged.</p>",
        "id": 241839118,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099203
    },
    {
        "content": "<p>...we should actually ask T-libs that.</p>",
        "id": 241839161,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099220
    },
    {
        "content": "<p>Yeah that's a good question</p>",
        "id": 241839291,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623099274
    },
    {
        "content": "<p>I also think we've been supposed to be posting monthly-ish project updates which was being taken care of by Ashley and now no one is doing that? ^^; So we probably want to find where that was supposed to happen and post a project update at them and throw questions alongside it.</p>",
        "id": 241839315,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099285
    },
    {
        "content": "<p>Whoops</p>",
        "id": 241839389,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623099318
    },
    {
        "content": "<p>/shrug 2020 + 1</p>",
        "id": 241839410,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099332
    },
    {
        "content": "<p>Yeah my thoughts lol</p>",
        "id": 241839429,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623099340
    },
    {
        "content": "<p>hi!</p>",
        "id": 241839464,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623099359
    },
    {
        "content": "<p>Hello!</p>",
        "id": 241839550,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099388
    },
    {
        "content": "<p>I was waiting on additional replies to wg-llvm, then forgot to start the thread on the llvm mailing list <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 241839829,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623099493
    },
    {
        "content": "<p>that's fair. ^^;</p>",
        "id": 241839959,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099557
    },
    {
        "content": "<p>I can hardly call myself the Most Remembering Person Ever given I definitely got rabbitholed by other stuff. :P</p>",
        "id": 241840004,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099578
    },
    {
        "content": "<p>Oh so the SimdArray trait plus the gather/scatter impl can be seen here, I haven't PRed it yet because I'm probably going to rework some stuff and rebase it but this is all functional. ^^; <a href=\"https://github.com/rust-lang/stdsimd/compare/feat/gather\">https://github.com/rust-lang/stdsimd/compare/feat/gather</a></p>",
        "id": 241840131,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099618
    },
    {
        "content": "<p>I'll send that message to llvm-dev after the meeting, unless someone else gets to it first. please cc me if you do, I have llvm-dev emails turned off since I want to be able to at least find my non-llvm emails :)</p>",
        "id": 241840157,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623099637
    },
    {
        "content": "<p>yeah those e-mail lists are useless unless you have like inbox filtering for separate inboxes.</p>",
        "id": 241840210,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099660
    },
    {
        "content": "<p>anyone else I should cc?</p>",
        "id": 241840303,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623099710
    },
    {
        "content": "<p>I honestly don't understand mailing list etiquette so I don't know. ^^;;;;;</p>",
        "id": 241840485,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099788
    },
    {
        "content": "<p>I am not on the list tho'.</p>",
        "id": 241840509,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099803
    },
    {
        "content": "<p>basic summary of nailing list etiquette: avoid top-posting and be nice.</p>",
        "id": 241840652,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623099875
    },
    {
        "content": "<p>other than that, it doesn't seem like anything special to me.</p>",
        "id": 241840713,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623099917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> ah this is where it was from. <a href=\"https://github.com/rust-lang/compiler-team/issues/266\">https://github.com/rust-lang/compiler-team/issues/266</a></p>",
        "id": 241840740,
        "sender_full_name": "Jubilee",
        "timestamp": 1623099935
    },
    {
        "content": "<p>also, cc-ing people not on the mailing list works just fine</p>",
        "id": 241840873,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623099995
    },
    {
        "content": "<p>ah OK.</p>",
        "id": 241840886,
        "sender_full_name": "Jubilee",
        "timestamp": 1623100006
    },
    {
        "content": "<p>go ahead and cc me then!</p>",
        "id": 241840934,
        "sender_full_name": "Jubilee",
        "timestamp": 1623100042
    },
    {
        "content": "<p>just use reply-to-all so everyone can see your messages</p>",
        "id": 241840943,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623100052
    },
    {
        "content": "<p>Oh and... so... LLVM has an instruction called <code>getelementptr</code> or just <code>gep</code>, which is \"specifically modifying a pointer with rules for pointer arithmetic\".</p>",
        "id": 241841648,
        "sender_full_name": "Jubilee",
        "timestamp": 1623100413
    },
    {
        "content": "<p>gep is a load of fun!</p>",
        "id": 241841819,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623100507
    },
    {
        "content": "<p>stuck squarely in the overlap of alias analysis, undefined behavior, address wrapping, and general confusion</p>",
        "id": 241841970,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623100587
    },
    {
        "content": "<p><code>gep</code> supports operations of \"vectors of pointers\"<br>\nIn my draft, I wound up having to use casting pointers to ints and then back to pointers to get vectorized ops. That doesn't use <code>gep</code>. It came up in <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F</a> that we could  teach rustc to emit LLVM IR for <code>gep</code> instead of casting ptrs to ints and then back to ptrs. However that raises the question of if it imposes an implementation burden of any kind on e.g. cranelift? Do we want to someday do that?</p>",
        "id": 241842040,
        "sender_full_name": "Jubilee",
        "timestamp": 1623100635
    },
    {
        "content": "<p>I think we should support vector gep, since that theoretically improves performance due to better alias analysis</p>",
        "id": 241842194,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623100712
    },
    {
        "content": "<p>cranelift should pretty trivially be able translate it to an address calculation</p>",
        "id": 241842323,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623100755
    },
    {
        "content": "<p>I guess it basically is just implementable as math, yeah.</p>",
        "id": 241842691,
        "sender_full_name": "Jubilee",
        "timestamp": 1623100880
    },
    {
        "content": "<p>since gep is basically the llvm ir equivalent of something like <code>&amp;raw ptr.field1.field2[index].field3</code></p>",
        "id": 241842717,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623100894
    },
    {
        "content": "<p>\"<code>simd_offset</code>: see <code>simd_add</code> if you don't have an optimization for it. <em>shrug</em>\"</p>",
        "id": 241842841,
        "sender_full_name": "Jubilee",
        "timestamp": 1623100941
    },
    {
        "content": "<p>well, wrapping_offset/offset do have different semantics than ptr -&gt; int add -&gt; ptr</p>",
        "id": 241842975,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623101024
    },
    {
        "content": "<p>it's mostly about maintaining invariants in addition tho', no?</p>",
        "id": 241843106,
        "sender_full_name": "Jubilee",
        "timestamp": 1623101089
    },
    {
        "content": "<p>in particular they specify that the ptr input is the only thing that should be treated as a ptr, whereas <code>(ptr1 as usize + ptr2 as usize - ptr3 as usize) as *mut T</code> could be considered to be based on all of ptr1/2/3</p>",
        "id": 241843211,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623101158
    },
    {
        "content": "<p>for alias analysis</p>",
        "id": 241843265,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623101173
    },
    {
        "content": "<p>mmh.</p>",
        "id": 241844502,
        "sender_full_name": "Jubilee",
        "timestamp": 1623101825
    },
    {
        "content": "<p>I see.</p>",
        "id": 241844519,
        "sender_full_name": "Jubilee",
        "timestamp": 1623101838
    },
    {
        "content": "<p>...</p>",
        "id": 241844566,
        "sender_full_name": "Jubilee",
        "timestamp": 1623101869
    },
    {
        "content": "<p>...my scatter probably does weird things if it hits the same var twice.</p>",
        "id": 241844580,
        "sender_full_name": "Jubilee",
        "timestamp": 1623101879
    },
    {
        "content": "<p>lmao</p>",
        "id": 241844676,
        "sender_full_name": "Jubilee",
        "timestamp": 1623101912
    },
    {
        "content": "<p>hmm, idk what exact semantics llvm provides, but SimpleV specifies that later lanes always get written last</p>",
        "id": 241844749,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623101948
    },
    {
        "content": "<p>or at least the memory is as-if that were true</p>",
        "id": 241844793,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623101970
    },
    {
        "content": "<p>ah, llvm specifies:</p>\n<blockquote>\n<p>Scatter with overlapping addresses is guaranteed to be ordered from least-significant to most-significant element.</p>\n</blockquote>",
        "id": 241845140,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623102142
    },
    {
        "content": "<p>aha.</p>",
        "id": 241845152,
        "sender_full_name": "Jubilee",
        "timestamp": 1623102152
    },
    {
        "content": "<p>I'm assuming most-significant means highest index/last element</p>",
        "id": 241845311,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623102244
    },
    {
        "content": "<p>I would hope so? ^^;</p>",
        "id": 241845348,
        "sender_full_name": "Jubilee",
        "timestamp": 1623102270
    },
    {
        "content": "<blockquote>\n<p>If two or more destination indices completely overlap, the “earlier” write(s) may be skipped.</p>\n</blockquote>",
        "id": 241845874,
        "sender_full_name": "Jubilee",
        "timestamp": 1623102548
    },
    {
        "content": "<p><strong>may</strong> be skipped</p>",
        "id": 241845884,
        "sender_full_name": "Jubilee",
        "timestamp": 1623102557
    },
    {
        "content": "<p>seems fine to me...</p>",
        "id": 241845944,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623102600
    },
    {
        "content": "<p>just don't use scatter for volatile stores</p>",
        "id": 241846014,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623102621
    },
    {
        "content": "<p>I guess so.</p>",
        "id": 241846030,
        "sender_full_name": "Jubilee",
        "timestamp": 1623102633
    },
    {
        "content": "<p>for trig precision, i suggest we aim for opencl accuracy, though we may want more accurate than that in some cases</p>",
        "id": 241846473,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623102893
    },
    {
        "content": "<p><a href=\"https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_Env.html#_ulp_values_for_math_instructions_full_profile\">https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_Env.html#_ulp_values_for_math_instructions_full_profile</a></p>",
        "id": 241846851,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103104
    },
    {
        "content": "<p>Is there some standard the scalar implementations satisfy?</p>",
        "id": 241846936,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103178
    },
    {
        "content": "<p>yes, it's a free for all! seriously, idk</p>",
        "id": 241847086,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103212
    },
    {
        "content": "<p>I do suspect it's entirely up to the implementation <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 241847147,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103239
    },
    {
        "content": "<p>I believe IEEE754 has its own recommendations, but in practice we use libm for most things, which has whatever the C standard specifies.</p>",
        "id": 241847158,
        "sender_full_name": "Jubilee",
        "timestamp": 1623103245
    },
    {
        "content": "<p>there is crlibm which is specified to always give correctly rounded results</p>",
        "id": 241847195,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103266
    },
    {
        "content": "<p>Perhaps POSIX has a requirement?</p>",
        "id": 241847221,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103282
    },
    {
        "content": "<p>posix tends to defer to c99 or c11 for that stuff...</p>",
        "id": 241847270,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103313
    },
    {
        "content": "<p>Then perhaps ANSI/ISO has a requirement</p>",
        "id": 241847347,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103337
    },
    {
        "content": "<p>time to find out what all of them say. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 241847378,
        "sender_full_name": "Jubilee",
        "timestamp": 1623103363
    },
    {
        "content": "<p>Fwiw I don't particularly care what the accuracy is but I do hope we can at least justify it, and hopefully be consistent with scalar math</p>",
        "id": 241847394,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103375
    },
    {
        "content": "<p>Caleb, would you figure out what trig accuracy standards various things use, then? I can pull stuff out of IEEE754 but I don't really know where else to go looking.</p>",
        "id": 241847877,
        "sender_full_name": "Jubilee",
        "timestamp": 1623103646
    },
    {
        "content": "<p>c++ defers to c for trig accuracy, c doesn't specify. posix specifies a few special cases, but leaves the rest up to implementations.</p>",
        "id": 241847994,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103718
    },
    {
        "content": "<p><a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/cos.html\">https://pubs.opengroup.org/onlinepubs/9699919799/functions/cos.html</a></p>",
        "id": 241847997,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103721
    },
    {
        "content": "<p>Lol</p>",
        "id": 241848002,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103727
    },
    {
        "content": "<p>That's what I assumed</p>",
        "id": 241848006,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103732
    },
    {
        "content": "<p>I can dig into it more but I'm fine with opencl</p>",
        "id": 241848017,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623103743
    },
    {
        "content": "<p>opencl has a decent spec since it's aimed at people who like their math accuracy without excessive slowdown</p>",
        "id": 241848048,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103777
    },
    {
        "content": "<p>Vulkan/OpenGL are pitifully inaccurate</p>",
        "id": 241848141,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103819
    },
    {
        "content": "<p>to the point where f32 sin has as much accuracy as f16!</p>",
        "id": 241848176,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103854
    },
    {
        "content": "<p>welp lol.</p>",
        "id": 241848229,
        "sender_full_name": "Jubilee",
        "timestamp": 1623103895
    },
    {
        "content": "<p>the sin_pi functions I wrote are good enough for opencl</p>",
        "id": 241848233,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103896
    },
    {
        "content": "<p>2ulp over whole range with exact results at special input values, except they don't always give the correct sign for zeros</p>",
        "id": 241848337,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103951
    },
    {
        "content": "<p>opencl just requires 4ulp</p>",
        "id": 241848377,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623103986
    },
    {
        "content": "<p>except for f16 where it's just 2 ulp</p>",
        "id": 241848404,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104007
    },
    {
        "content": "<p>2 ulp sounds reasonable to me</p>",
        "id": 241848490,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623104046
    },
    {
        "content": "<p>I'm curious what glibc does</p>",
        "id": 241848521,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623104062
    },
    {
        "content": "<p>glibc likely has &lt;1ulp since they can go to tons of extra effort with double-double arithmetic</p>",
        "id": 241848595,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104117
    },
    {
        "content": "<p>True</p>",
        "id": 241848625,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623104143
    },
    {
        "content": "<p>2ulp doesn't require double-double for sin_pi</p>",
        "id": 241848700,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104171
    },
    {
        "content": "<p>it may be required for sin though because of the argument reduction</p>",
        "id": 241848749,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104199
    },
    {
        "content": "<p><a href=\"https://software.intel.com/content/www/us/en/develop/documentation/ipp-dev-reference/top/volume-1-signal-and-data-processing/fixed-accuracy-arithmetic-functions/trigonometric-functions/cos.html\">https://software.intel.com/content/www/us/en/develop/documentation/ipp-dev-reference/top/volume-1-signal-and-data-processing/fixed-accuracy-arithmetic-functions/trigonometric-functions/cos.html</a></p>",
        "id": 241848795,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623104226
    },
    {
        "content": "<p>May be worth looking at this for a commercial implementation's accuracy</p>",
        "id": 241848822,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623104244
    },
    {
        "content": "<p>Intel does have vectorized 1ulp implementations</p>",
        "id": 241848843,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623104264
    },
    {
        "content": "<p>huh.</p>",
        "id": 241849013,
        "sender_full_name": "Jubilee",
        "timestamp": 1623104363
    },
    {
        "content": "<p>wine's msvcrt just copied from musl</p>",
        "id": 241849154,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104468
    },
    {
        "content": "<p>sleef has a 0.5ulp sin</p>",
        "id": 241849296,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104575
    },
    {
        "content": "<p>using double-double arithmetic</p>",
        "id": 241849309,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104592
    },
    {
        "content": "<p>glibc's fallback cosf: <a href=\"https://github.com/bminor/glibc/blob/master/sysdeps/ieee754/flt-32/s_cosf.c\">https://github.com/bminor/glibc/blob/master/sysdeps/ieee754/flt-32/s_cosf.c</a></p>",
        "id": 241849819,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104959
    },
    {
        "content": "<p>&lt;0.6ulp</p>",
        "id": 241849844,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623104979
    },
    {
        "content": "<p>well, gtg. bye all!</p>",
        "id": 241850270,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623105282
    },
    {
        "content": "<p>ah sorry I got distracted. bye!</p>",
        "id": 241850579,
        "sender_full_name": "Jubilee",
        "timestamp": 1623105538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-06-07/near/241847394\">said</a>:</p>\n<blockquote>\n<p>Fwiw I don't particularly care what the accuracy is but I do hope we can at least justify it, and hopefully be consistent with scalar math</p>\n</blockquote>\n<p>Well efficient ½ULP is apparently still an open problem...</p>\n<p>AVX added a bunch of relative-error-2⁻²³ methods, like <code>_mm512_exp2a23_pd</code> -- any idea why they picked that threshold?</p>",
        "id": 241863454,
        "sender_full_name": "scottmcm",
        "timestamp": 1623118093
    },
    {
        "content": "<p>That seems to be 32bit float's epsilon:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">eps</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">)</span>\n<span class=\"mf\">1.1920929f-7</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">eps</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n<span class=\"mf\">2.220446049250313e-16</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">^</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n<span class=\"mf\">1.1920928955078125e-7</span>\n</code></pre></div>",
        "id": 241863568,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623118250
    },
    {
        "content": "<p><code>2^(-23) == eps(Float32)</code> yes?</p>",
        "id": 241863983,
        "sender_full_name": "Jubilee",
        "timestamp": 1623118804
    },
    {
        "content": "<p>Julia agrees</p>",
        "id": 241864018,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623118883
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">eps</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"o\">^-</span><span class=\"mi\">23</span>\n<span class=\"nb\">true</span>\n</code></pre></div>",
        "id": 241864019,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623118888
    },
    {
        "content": "<p>(<code>eps</code> here being the Machine epsilon for 32 bit floats, the smallest increment allowed in the spec)</p>",
        "id": 241864070,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623118924
    },
    {
        "content": "<p>(without counting subnormals I think)</p>",
        "id": 241864077,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623118939
    },
    {
        "content": "<p>Machine epsilon should be the largest possible error</p>",
        "id": 241864175,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623119065
    },
    {
        "content": "<p>ULPs are related to the smallest step (and those steps are relative to the value)</p>",
        "id": 241864187,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623119096
    },
    {
        "content": "<p>derp - right</p>",
        "id": 241864196,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623119108
    },
    {
        "content": "<p>my bad</p>",
        "id": 241864197,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1623119110
    },
    {
        "content": "<p>Np just worth being precise for this</p>",
        "id": 241864208,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623119126
    },
    {
        "content": "<p>iirc eps is the difference between 1.0 and the next float after</p>",
        "id": 241864465,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623119505
    },
    {
        "content": "<p>also: started a thread on llvm-dev <a href=\"https://lists.llvm.org/pipermail/llvm-dev/2021-June/150965.html\">https://lists.llvm.org/pipermail/llvm-dev/2021-June/150965.html</a></p>",
        "id": 241864520,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623119552
    },
    {
        "content": "<p>i think it would be pretty reasonable to offer reduced accuracy for simd special functions, honeslty. you can always just iterate over the scalars and call the high precision function.</p>\n<p>if not, it might better apply under fast-math stuff (I've been working on a pre-rfc for this in my spare time, although the focus has not really been on the optimizations that call approximated versions of special functions)</p>",
        "id": 242118966,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623267748
    },
    {
        "content": "<p><em>how</em> reduced is admittedly very hard to come up with any justification for</p>",
        "id": 242119014,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623267777
    }
]