[
    {
        "content": "<p>Hello! Meeting in ~3 hours. hackmd is here: <a href=\"https://hackmd.io/koVzlGQ0QsWqn1iwLf-Wyg\">https://hackmd.io/koVzlGQ0QsWqn1iwLf-Wyg</a></p>",
        "id": 212343708,
        "sender_full_name": "Jubilee",
        "timestamp": 1601925048
    },
    {
        "content": "<p>hi, how can i attend the meeting? or is it purely in zulip</p>",
        "id": 212348406,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601927722
    },
    {
        "content": "<p>just Zulip, we'll make a topic around the right time.</p>",
        "id": 212348454,
        "sender_full_name": "Lokathor",
        "timestamp": 1601927755
    },
    {
        "content": "<p>Actually we can just use this topic i guess, name already fits.</p>",
        "id": 212353079,
        "sender_full_name": "Lokathor",
        "timestamp": 1601930050
    },
    {
        "content": "<p>so it's at 3PST?</p>",
        "id": 212353824,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601930449
    },
    {
        "content": "<p>Correct, 80 minutes.</p>",
        "id": 212353843,
        "sender_full_name": "Jubilee",
        "timestamp": 1601930461
    },
    {
        "content": "<p>thanks, and sorry for all the questions</p>",
        "id": 212353885,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601930476
    },
    {
        "content": "<p>Questions are quite fine! Someone's got to ask them or we won't know what to answer.</p>",
        "id": 212356433,
        "sender_full_name": "Jubilee",
        "timestamp": 1601931807
    },
    {
        "content": "<p>Hey all! I‚Äôm on public transport again this morning so will try keep up but internet here is... patchy üòÖ</p>",
        "id": 212360524,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601934162
    },
    {
        "content": "<p>Hello everyone! Give a wave if you're present!</p>",
        "id": 212362007,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935237
    },
    {
        "content": "<p>Meeting agenda reminder: <a href=\"https://hackmd.io/koVzlGQ0QsWqn1iwLf-Wyg\">https://hackmd.io/koVzlGQ0QsWqn1iwLf-Wyg</a></p>",
        "id": 212362222,
        "sender_full_name": "Lokathor",
        "timestamp": 1601935375
    },
    {
        "content": "<p><a href=\"https://hackmd.io/koVzlGQ0QsWqn1iwLf-Wyg\">https://hackmd.io/koVzlGQ0QsWqn1iwLf-Wyg</a> hackmd is here still. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> <br>\nWe got an update on aarch64's expect SIMD capabilities (\"yes, ARMv8 Neon always.\")<br>\nI found a bug with simd_extract and simd_insert, plz do not kill Miri at least.</p>",
        "id": 212362224,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935377
    },
    {
        "content": "<p>There's a bunch of things we could talk about if people wanted but MUAHAHA I'm setting the agenda I guess. :^)</p>",
        "id": 212362340,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935462
    },
    {
        "content": "<p>I'm patiently waiting for point <a href=\"https://github.com/rust-lang/rust/issues/2\">#2</a> :)</p>",
        "id": 212362370,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601935494
    },
    {
        "content": "<p>testing crates: I dug through some older code from a while ago and found the parameterized test case crate was... uh, <code>test-case</code>.</p>",
        "id": 212362371,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935497
    },
    {
        "content": "<p>We've discussed adopting quickcheck or a similar crate in its \"family\" (proptest, hypothesis) although I don't know if any active motion towards that has happened aside from some poking around.</p>",
        "id": 212362416,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935543
    },
    {
        "content": "<p>That's all I wanted to say about that so unless anyone has anything to add?</p>",
        "id": 212362440,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935562
    },
    {
        "content": "<p>what makes testing for portable simd notably different than for e.g. any other project? (i'm a little surprised to see it called out, since yeah it's a concern but it's a concern for everything)</p>",
        "id": 212362494,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601935583
    },
    {
        "content": "<p>I haven't gone beyond reading up on quickcheck and proptest, shall I just continue and implement some tests for what we already have?</p>",
        "id": 212362499,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601935585
    },
    {
        "content": "<p>Sure.<br>\n<span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> mostly concerns about efficiently writing <strong>one million</strong> tests.</p>",
        "id": 212362522,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935617
    },
    {
        "content": "<p>er, parameterization.</p>",
        "id": 212362540,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935625
    },
    {
        "content": "<p>I wouldn't say it's much different than anything else that has an enormous number of possible inputs</p>",
        "id": 212362612,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601935683
    },
    {
        "content": "<p>with possible corner cases</p>",
        "id": 212362628,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601935694
    },
    {
        "content": "<p>I think that if we just have a few good lists of general corner case values for each element type we don't need the extra quick checking</p>",
        "id": 212362659,
        "sender_full_name": "Lokathor",
        "timestamp": 1601935723
    },
    {
        "content": "<p>i see. i've used quickcheck in the past for SIMD code (<a href=\"https://github.com/thomcc/bad3d/blob/master/t3m/src/simd.rs#L398-L417\">https://github.com/thomcc/bad3d/blob/master/t3m/src/simd.rs#L398-L417</a>) and it needed to be run in a loop in order to thoroughly test stuff. you'll note a few lines down i end up just testing programattically. i've heard this is less of an issue wiht proptest and such.</p>",
        "id": 212362663,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601935728
    },
    {
        "content": "<p>maybe not!</p>",
        "id": 212362668,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935732
    },
    {
        "content": "<p>Interesting.<br>\nYeah.<br>\nIf different vector length/types compile to notably different vendor APIs we need to actually try to catch differences in those, so we can't actually sidestep testing different vector length/types, so it winds up being the same tests over multiple things which often requires some kind of macro or something so nothing \"special\", just... \"quickly spitballing about what code is already written to make this go faster?\"<br>\nThe big thing is that nothing actually replaces testing the knowable edge cases (and testing the knowable edge cases is still a lot).</p>",
        "id": 212362698,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935758
    },
    {
        "content": "<p>I think quick checking sounds good for possibly discovering things due to either bugs in rustc or llvm, assuming we have perfect corner case test coverage</p>",
        "id": 212362792,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601935821
    },
    {
        "content": "<p>anyways... point <a href=\"https://github.com/rust-lang/rust/issues/2\">#2</a> that Caleb is eagerly awaiting for!</p>",
        "id": 212362846,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935864
    },
    {
        "content": "<p>to be clear i'm in favor of generated testing like this, but just didn't have the best experience with quickcheck here. it's feels optimized for quick sanity checks rather than something more like fuzzing. i also vaguely remember seeing <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span> say he would like something to replace it in the ecosystem, but i can't find it now</p>",
        "id": 212362862,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601935883
    },
    {
        "content": "<p>er... that's a rustc issue, uh. \"Organizing help (reports of ‚ÄúI want to help but I don‚Äôt know what I can help with? Who is working on what?‚Äù)\"</p>",
        "id": 212362873,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935891
    },
    {
        "content": "<p>quick checking is nice, but it adds another macro layer within the test modules, so let's put it off for now and have it be more of a \"2nd layer testing quality\" thing later if we turn out to need it.</p>",
        "id": 212362902,
        "sender_full_name": "Lokathor",
        "timestamp": 1601935918
    },
    {
        "content": "<p>works for me</p>",
        "id": 212362961,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601935941
    },
    {
        "content": "<p>So... I guess we need to write a CONTRIBUTING.md to start, huh?</p>",
        "id": 212363014,
        "sender_full_name": "Jubilee",
        "timestamp": 1601935990
    },
    {
        "content": "<p>Yeah probably</p>",
        "id": 212363092,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601936050
    },
    {
        "content": "<p>Yes. A contributor should add a minimum of one (1) method (eg: <code>sqrt</code>, <code>powef</code>, etc) to all types appropriate for the method as well as adding tests for the methods.</p>",
        "id": 212363099,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936055
    },
    {
        "content": "<p>yeah. when i looked at the repo a few days ago (which was the first i found out about it), it didn't seem like there was much actionable work to do other than subscribe to the issues. i only just thought today \"oh it would definitely have a zulip stream since it's a project group\"</p>",
        "id": 212363118,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936075
    },
    {
        "content": "<p>What <em>is</em> everyone working on currently? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> I was exploring rustc's LLVM interface.</p>",
        "id": 212363122,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936084
    },
    {
        "content": "<p>Ah wow, we probably have Zulip links from the project repo but not pointers from stdsimd.</p>",
        "id": 212363152,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936107
    },
    {
        "content": "<p>Also, in terms of actually assigning issues, I think if someone who is active in the group (in zulip?) wants to claim an issue, we should use github's assignees, otherwise just leave it open and if someone provides us a PR great</p>",
        "id": 212363187,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601936122
    },
    {
        "content": "<p>Sure.</p>",
        "id": 212363203,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936133
    },
    {
        "content": "<p>On large issues: people should be encouraged to go segment by segment, even if it means someone does a little more overhead in coordinating.</p>",
        "id": 212363271,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936165
    },
    {
        "content": "<p>I was looking into Julia's SIMD implementation</p>",
        "id": 212363309,
        "sender_full_name": "oliver",
        "timestamp": 1601936193
    },
    {
        "content": "<p>I'm perfectly willing to micro manage issue checkbox lists and just take in a series of smaller PRs.</p>",
        "id": 212363343,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936223
    },
    {
        "content": "<p>I haven't done much at all since the core ops PR got merged, though I'd like to take a look at some of the special ops soon</p>",
        "id": 212363371,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601936243
    },
    {
        "content": "<p>I have noticed that in rustc, large-ish issues which seem \"simple\" because they can be macro'd over or something actually often take a significant amount of overhead to write, and people go one-by-one and fail.</p>\n<p>But ones which are chunked into tiny amounts have been quickly cleaned up. Even if they're all \"related\" functions, people should probably be nudged to handle this stuff one fn at a time (unless it's <em>really related</em> or <em>really basic</em>).</p>",
        "id": 212363459,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936290
    },
    {
        "content": "<p>i have some bandwidth and could do stuff (i've written a lot of simd code in the past), but only just now noticed the \"We're currently working on an initial std::simd implementation over in the stdsimd repo.\" note <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212363466,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936298
    },
    {
        "content": "<p>We actually probably want a few more type change methods and then we can start implementing the tricky stuff</p>",
        "id": 212363491,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936313
    },
    {
        "content": "<p>and sometimes it is the case that like, 95% of the issue gets cleaned up and then a last 5% remains open for a long while, but that's the other reason chunking is good: so people don't all fail on that one nit.</p>",
        "id": 212363550,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936367
    },
    {
        "content": "<p>What sort of other type conversions do we want? I'm guessing we might want into/from arrays?<br>\n( <em>This is Jubilee thinking she is being subtle. She is not.</em> )</p>",
        "id": 212363582,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936386
    },
    {
        "content": "<p>we want float rounding to float and also float rounding to int</p>",
        "id": 212363672,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936436
    },
    {
        "content": "<p>reading stuff out of slices is IME much more common than working with arrays. arrays are mostly for constants and such i think</p>",
        "id": 212363674,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936436
    },
    {
        "content": "<p>and also int rounding to float</p>",
        "id": 212363706,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936468
    },
    {
        "content": "<p>Well, reading stuff out of slices is also more common because until const generics arrays were the devil to work with.</p>",
        "id": 212363709,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936470
    },
    {
        "content": "<p>is there any documentation on the current state of the design? i feel like there are a lot of open questions (do we have a plan for how swizzling will work? or how to make both runtime and compiletime detection viable without crippling runtime detection performance, ...) but i might just not be finding stuff</p>",
        "id": 212363727,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936485
    },
    {
        "content": "<p>Ahhh, the int / float conversions.</p>",
        "id": 212363733,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936490
    },
    {
        "content": "<p>we don't have a shuffle design</p>",
        "id": 212363767,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> maybe some of the special ops should be broken up into rounding, byte-related, lanewise math, etc</p>",
        "id": 212363818,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601936530
    },
    {
        "content": "<p>we do have a runtime detection \"design\" which is \"use the <code>multiversion</code> crate or similar\"</p>",
        "id": 212363826,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-10-05.20meeting/near/212363767\">said</a>:</p>\n<blockquote>\n<p>we don't have a shuffle design</p>\n</blockquote>\n<p>for testing?</p>",
        "id": 212363859,
        "sender_full_name": "oliver",
        "timestamp": 1601936573
    },
    {
        "content": "<p>huh, okay. i don't really think that (multiversion) solves the problem, but it's probably an ok start.</p>",
        "id": 212363863,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936578
    },
    {
        "content": "<p>We don't have a shuffle design aside from a vague noise about how we expect it to be const.<br>\nRuntime API detection is mostly considered out-of-scope (ish). A nice-to-have.</p>",
        "id": 212363864,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@Oliver</span> Also hello! What's interesting about Julia's SIMD implementation?</p>",
        "id": 212363916,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936636
    },
    {
        "content": "<p>ah that sounds super unfortunate... i guess it makes sense though, it's a hard problem, and solving it safely has a lot of overhead in the naive approach</p>",
        "id": 212363927,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-10-05.20meeting/near/212363916\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> Also hello! What's interesting about Julia's SIMD implementation?</p>\n</blockquote>\n<p>The vectorization</p>",
        "id": 212363998,
        "sender_full_name": "oliver",
        "timestamp": 1601936675
    },
    {
        "content": "<p>Oh?<br>\n<span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> Our goal is to stabilize something useful in 2021. This is \"breakneck speed\" compared to... a lot of projects that have been caught in thrash from taking on fairly grand designs.</p>",
        "id": 212364030,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936704
    },
    {
        "content": "<p>So all our ops are marked as <code>inline</code>, so the actual codegen happens in the caller's function, so if you use <code>target_feature(enable=\"foo\")</code> they should codegen with the appropriate feature level, which is what <code>multiversion</code> abstracts for you. So... it should all \"just work\" on its own without <code>core::simd</code> providing any explicit additional runtime detction options.</p>",
        "id": 212364056,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936730
    },
    {
        "content": "<p>that's fine, so long as the design can be extended to support use cases backed by runtime detection somehow</p>",
        "id": 212364060,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936732
    },
    {
        "content": "<p>i think it needs to be a consideration even if it's not a thing to solve immediately</p>",
        "id": 212364082,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936748
    },
    {
        "content": "<p>Yeah, the idea is that we don't do anything that significantly walls off future design space and we produce recommendations of design directions for the going-forward concerns.</p>",
        "id": 212364134,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936765
    },
    {
        "content": "<p>without actually saying anything firm on it.</p>",
        "id": 212364140,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936771
    },
    {
        "content": "<p>But also this is why I've been occasionally semi-jokingly suggesting \"so, how about we <em>literally only ship 128-bit vectors</em>?\"</p>",
        "id": 212364206,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936814
    },
    {
        "content": "<p>FWIW Julia is consitently best in class for the design of their numeric libraries, but looking at <a href=\"https://github.com/eschnett/SIMD.jl\">https://github.com/eschnett/SIMD.jl</a> (first result for simd julia) i think it's maybe too high level.</p>",
        "id": 212364242,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936839
    },
    {
        "content": "<p>so to expand on that, the current stance is that rust _already_ has runtime support, via <code>is_x86_feature_detected</code> etc and <code>#[target_feature]</code></p>",
        "id": 212364246,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601936841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-10-05.20meeting/near/212364242\">said</a>:</p>\n<blockquote>\n<p>FWIW Julia is consitently best in class for the design of their numeric libraries, but looking at <a href=\"https://github.com/eschnett/SIMD.jl\">https://github.com/eschnett/SIMD.jl</a> (first result for simd julia) i think it's maybe too high level.</p>\n</blockquote>\n<p>They have test cases</p>",
        "id": 212364264,
        "sender_full_name": "oliver",
        "timestamp": 1601936868
    },
    {
        "content": "<p>I think we should codify some of our non-goals.</p>",
        "id": 212364271,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936876
    },
    {
        "content": "<p>Explicitly.</p>",
        "id": 212364317,
        "sender_full_name": "Jubilee",
        "timestamp": 1601936884
    },
    {
        "content": "<p>i mean i think 128 bit vectors should be the default choice for 99% of people, but there are a lot of cases where you do want to go as wide as possible</p>",
        "id": 212364338,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601936901
    },
    {
        "content": "<p>i put the runtime feature detection into the FAQ, but maybe we need to make it part of the main readme or link the readme to the faq or something</p>",
        "id": 212364402,
        "sender_full_name": "Lokathor",
        "timestamp": 1601936968
    },
    {
        "content": "<p>Yes! Also as discussed there's like, real cases where you want 64-bit or 256-bit vectors. That is why it is only <strong>mostly</strong> a joke</p>",
        "id": 212364490,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937016
    },
    {
        "content": "<p>Or some fields (I work in DSP) where you simply want the widest vector possible :)</p>",
        "id": 212364524,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601937051
    },
    {
        "content": "<p>yeah. i do mostly agree though, i often tell people that sse2 oughta be enough for everyone :p. sadly, sometimes it's just not</p>",
        "id": 212364530,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937056
    },
    {
        "content": "<p>with the x64 stuff, even staying at 128-bit, higher feature levels unlock more operations</p>",
        "id": 212364578,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937092
    },
    {
        "content": "<p>If anything it's early support for 128-bit OSs</p>",
        "id": 212364588,
        "sender_full_name": "oliver",
        "timestamp": 1601937099
    },
    {
        "content": "<p>you want wider vectors for very parallelizable problems, or problems where you have a complex / slow inner loop where you benefit from getting as many items done in it as possible (among others)</p>",
        "id": 212364618,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937121
    },
    {
        "content": "<p>128-bit OS will be surreal to see.</p>",
        "id": 212364665,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937132
    },
    {
        "content": "<p>so uh, <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> , what's the story with insert/extract. if you use in bounds indexes does it ever cause problems?</p>",
        "id": 212364711,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937170
    },
    {
        "content": "<p>Okay, we have diverged into a few threads and it is already 3:30.<br>\n<span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Nope! It works fine.</p>",
        "id": 212364728,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937184
    },
    {
        "content": "<p>so we just need a bound check, or a wrap, but probably people want a bound check</p>",
        "id": 212364758,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937214
    },
    {
        "content": "<p>Yeah, I see no reason to diverge from rustc's implementation here for simd_shuffleN, basically.</p>",
        "id": 212364823,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937244
    },
    {
        "content": "<p>and, heck, <em>we are part of the standard library</em>, technically we'd be able to use <code>rustc_const_arg</code> on an experimental basis</p>",
        "id": 212364835,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937257
    },
    {
        "content": "<p>Yep!</p>",
        "id": 212364850,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937273
    },
    {
        "content": "<p>Have we looked into exposing the shuffle as a const generic instead of a const argument?</p>",
        "id": 212364865,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601937285
    },
    {
        "content": "<p>(underneath I assume it still uses a const argument, if that's what the intrinsic uses)</p>",
        "id": 212364878,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601937302
    },
    {
        "content": "<p>not yet that i know of, but that's probably the good long term plan. i think we'd be able to use min_const_generics even</p>",
        "id": 212364902,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937325
    },
    {
        "content": "<p>since really you're just taking in usize values</p>",
        "id": 212364912,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937330
    },
    {
        "content": "<p>So for simd_shuffleN, _insert, and _extract, right now it's a discussion re: the platform-intrinsics we link against in std::simd.</p>",
        "id": 212364926,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937351
    },
    {
        "content": "<p>Yeah, that's what I'd like to do.  If rust's generics go the way of C++'s const generics won't be foreign at all in a few years</p>",
        "id": 212364928,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601937356
    },
    {
        "content": "<p>so it'd be something like,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">shuffle</span>::<span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212364988,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937393
    },
    {
        "content": "<p>so mostly people aren't linking against these and they're unstable, and we are entitled to do whatever we want to that and then expose an entirely different API to users.</p>",
        "id": 212365006,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937421
    },
    {
        "content": "<p>if i understand it right, the platform intrinsics in this case are \"we're just gonna let you tell us what LLVM IR we should codegen\", kinda?</p>",
        "id": 212365053,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937467
    },
    {
        "content": "<p>note that multi-arg shuffles are common too, (e.g. <code>_mm_shuffle_foo</code> takes two vectors). i usually try to use swizzle to talk about this kind of constant-argument-single-vector shuffle, and use shuffle when talking about the more general (that said i'm not throwing shade at anybodys terminology, i'm probably the weird one here)</p>",
        "id": 212365055,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937469
    },
    {
        "content": "<p>swizzles are the more common case though.</p>",
        "id": 212365116,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937492
    },
    {
        "content": "<p>Hey if you have a strong argument for a given terminology I'm listening.</p>",
        "id": 212365118,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Yes.<br>\nI want to const-fix the index arguments because I believe doing so will prevent us from stepping into a bug until we're ready to actually lift that restriction (i.e. when we go after more dynamic APIs).</p>",
        "id": 212365139,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937522
    },
    {
        "content": "<p><code>swizzle</code> for lone value, <code>shuffle_with</code> for two args</p>",
        "id": 212365148,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937539
    },
    {
        "content": "<p>i do like the look of const generics there. much nicer than the required-const args</p>",
        "id": 212365162,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> One of our ongoing concerns is in fact creating a consistent way to talk about SIMD terms with respect to Rust that is vendor-neutral, not just a library but a shared way of discussing things, so that people can have a mental model that is independent of trying to reference a given vendor's model.</p>",
        "id": 212365265,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937626
    },
    {
        "content": "<p>yeah, i don't think the terminology i used is vendor specific. and yeah, i agree with that goal (although, hopefully documentation exists to help people coming from intrinsics ‚Äî <em>glares at safe_arch</em> üòõ)</p>",
        "id": 212365343,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937718
    },
    {
        "content": "<p>saywhatnow</p>",
        "id": 212365433,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937755
    },
    {
        "content": "<p>i don't know if that means i should add more docs to <code>safe_arch</code> or not</p>",
        "id": 212365623,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937884
    },
    {
        "content": "<p>(oh, just that you can't search mm_foo_bar and find what safe_arch has named that intrinsic ‚Äî makes it almost impossible to use for me, since so many of the functions are so low level anyway that the name you've chosen is... still pretty opaque ‚Äî i guess <code>combined_byte_shr_imm_m128i</code> is clearer than <code>_mm_alignr_epi8</code>, but...)</p>",
        "id": 212365637,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937897
    },
    {
        "content": "<p>ah, that, well i started to add that in the later feature levels, but didn't go back and do it for the earlier ones. PRs are open :P</p>",
        "id": 212365668,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937927
    },
    {
        "content": "<p>Oof?</p>",
        "id": 212365669,
        "sender_full_name": "Jubilee",
        "timestamp": 1601937929
    },
    {
        "content": "<p>so for the meeting, which seems to have died down... do we have any specific actions to aim for</p>",
        "id": 212365704,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937958
    },
    {
        "content": "<p>IMO the ideal solution to problems like this is just to make sure if you search for the vendor intrinsic name you can find the portable name.</p>",
        "id": 212365706,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601937960
    },
    {
        "content": "<p>well i can't fix that because rustdoc's search is pretty bad</p>",
        "id": 212365757,
        "sender_full_name": "Lokathor",
        "timestamp": 1601937977
    },
    {
        "content": "<p>(<a href=\"https://doc.rust-lang.org/beta/unstable-book/language-features/doc-alias.html\">https://doc.rust-lang.org/beta/unstable-book/language-features/doc-alias.html</a> maybe? idk)</p>",
        "id": 212365786,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601938008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I think it would be good to split up some of the special ops issues so there's a clear delineation of what should be worked on together</p>",
        "id": 212365788,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601938009
    },
    {
        "content": "<p>And I'd like to take one <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212365799,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601938022
    },
    {
        "content": "<p>okay, splitting issues, i can do that</p>",
        "id": 212365813,
        "sender_full_name": "Lokathor",
        "timestamp": 1601938031
    },
    {
        "content": "<p>As we've discussed before we're not going to provide a specific intrinsic mapping because that involves fixating a deliberately nonfixed part of our API but we can provide general notes.<br>\nYes, promises made in documentation are often considered part of the API.</p>",
        "id": 212365910,
        "sender_full_name": "Jubilee",
        "timestamp": 1601938096
    },
    {
        "content": "<p>I haven't been well lately and so it's been hard to sit and do actual rust work but i can still do issues in smaller time chunks</p>",
        "id": 212365915,
        "sender_full_name": "Lokathor",
        "timestamp": 1601938101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> yeah, i don't think it should be promised to be equivalent, just that it should be discoverable if you know the other name. at least for the weird ones anyway</p>",
        "id": 212365961,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601938143
    },
    {
        "content": "<p>I feel that.<br>\nWe've run a bit over, but no one seems to be in a particular hurry. Still, I think calling the formal end here is fine and we can convene same time next week?</p>",
        "id": 212366079,
        "sender_full_name": "Jubilee",
        "timestamp": 1601938228
    },
    {
        "content": "<p>Thank you all for coming!</p>",
        "id": 212366092,
        "sender_full_name": "Jubilee",
        "timestamp": 1601938248
    },
    {
        "content": "<p>re: special ops, do you mean like trancendental math functions? i concidentally was just working on sse2 cbrtf for totally unrelated reasons. idk if that's on the roadmap though, since it's rarely useful and almost certainly never provided in hardware.</p>",
        "id": 212366172,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601938328
    },
    {
        "content": "<p>we intend to provide most or all of the f32/f64 methods as SIMD variations</p>",
        "id": 212366355,
        "sender_full_name": "Lokathor",
        "timestamp": 1601938535
    },
    {
        "content": "<p>at least, the ones that have output types that SIMD supposrts. fp_classify, for example, probably doesn't get a SIMD form.</p>",
        "id": 212366432,
        "sender_full_name": "Lokathor",
        "timestamp": 1601938581
    },
    {
        "content": "<p>Anything that has a tuple output probably needs to be looked at as well</p>",
        "id": 212366467,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601938623
    },
    {
        "content": "<p>1199 seriously proposed not supporting div for vector types fwiw (without committing us to it).</p>",
        "id": 212366590,
        "sender_full_name": "Jubilee",
        "timestamp": 1601938714
    },
    {
        "content": "<p>1199?</p>",
        "id": 212367313,
        "sender_full_name": "Lokathor",
        "timestamp": 1601939168
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rfcs/1199-simd-infrastructure.html\">https://rust-lang.github.io/rfcs/1199-simd-infrastructure.html</a></p>",
        "id": 212367380,
        "sender_full_name": "Jubilee",
        "timestamp": 1601939252
    },
    {
        "content": "<p>it's one of the unanswered questions.</p>",
        "id": 212367526,
        "sender_full_name": "Jubilee",
        "timestamp": 1601939374
    },
    {
        "content": "<p>alright: i'll answer it: if you need div you need div and that's all there is to it. We don't offer perfect performance.</p>",
        "id": 212367640,
        "sender_full_name": "Lokathor",
        "timestamp": 1601939455
    },
    {
        "content": "<p>yeah I wasn't seriously suggesting we don't, I was more holding it up as an example of \"exact feature parity with scalar APIs was never a goal\"</p>",
        "id": 212367792,
        "sender_full_name": "Jubilee",
        "timestamp": 1601939565
    },
    {
        "content": "<p>re:testing, the sse2neon repo seems to have this monster of a test file <a href=\"https://github.com/DLTcollab/sse2neon/blob/master/tests/impl.cpp\">https://github.com/DLTcollab/sse2neon/blob/master/tests/impl.cpp</a> (it looks like the intel intrinsics, but it's actually a portable api)</p>\n<p>(sorry if we aren't supposed to use this thread after the meeting is done)</p>",
        "id": 212368093,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1601939865
    },
    {
        "content": "<p>I'll run through and catch up on everything now and post an update to the tracking issue <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 212368431,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1601940023
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 212375081,
        "sender_full_name": "Jubilee",
        "timestamp": 1601946806
    }
]