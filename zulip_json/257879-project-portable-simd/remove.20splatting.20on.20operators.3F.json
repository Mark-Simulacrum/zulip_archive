[
    {
        "content": "<p>Oh, the other reason LHS splatting is a touch odd goes for both commutative ops and non-commutative ops. Because we can't do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">scalar</span><span class=\"w\"> </span><span class=\"o\">/=</span><span class=\"w\"> </span><span class=\"n\">vector</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262023960,
        "sender_full_name": "Jubilee",
        "timestamp": 1637293838
    },
    {
        "content": "<p>yep</p>",
        "id": 262023969,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637293857
    },
    {
        "content": "<p>So, while I am not in favor of removing LHS splatting entirely, reserving implicit splatting on the LHS for the commutative cases seems fine for discouraging the habit.</p>",
        "id": 262024046,
        "sender_full_name": "Jubilee",
        "timestamp": 1637293953
    },
    {
        "content": "<p>I feel like it's odd if you can only splat on the rhs</p>",
        "id": 262024057,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637293987
    },
    {
        "content": "<p>well, or should I say, I think it's more odd, both are odd</p>",
        "id": 262024070,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637294012
    },
    {
        "content": "<p>Also: there are apparently type inference special casings in the Rust compiler for the lhs of <code>&lt;&lt;</code> and <code>&gt;&gt;</code>.</p>",
        "id": 262024093,
        "sender_full_name": "Jubilee",
        "timestamp": 1637294042
    },
    {
        "content": "<p>woo</p>",
        "id": 262024154,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637294135
    },
    {
        "content": "<p>well....we could add more...</p>",
        "id": 262024156,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294138
    },
    {
        "content": "<p>or not</p>",
        "id": 262024160,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294144
    },
    {
        "content": "<p>one idea is to just not have splatting on operators, kinda like we don't have automatic int-&gt;float on operators</p>",
        "id": 262024238,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294225
    },
    {
        "content": "<p>it would greatly simplify implementing all the operator overloads we need</p>",
        "id": 262024345,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294368
    },
    {
        "content": "<p>cuz both lhs and rhs would be <code>Simd</code></p>",
        "id": 262024361,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294395
    },
    {
        "content": "<p>I think that's probably a bit much when often even assembly instruction sets overload vector addition for the rhs.<br>\nNo joke.</p>",
        "id": 262024703,
        "sender_full_name": "Jubilee",
        "timestamp": 1637294702
    },
    {
        "content": "<p>well, assembly overloads cuz of speed, not cuz of ease of use</p>",
        "id": 262024798,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294814
    },
    {
        "content": "<p>Mmmh. The assembly language is encoding many slightly different instructions with the same name too.</p>",
        "id": 262024887,
        "sender_full_name": "Jubilee",
        "timestamp": 1637294923
    },
    {
        "content": "<p>I'm now imagining and chuckling about the person designing a commercial instruction set who's concerned about ease of use</p>",
        "id": 262024895,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637294942
    },
    {
        "content": "<p>depends on the architecture, e.g. riscv has the mnemonic change</p>",
        "id": 262024908,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294964
    },
    {
        "content": "<blockquote>\n<p>I'm now imagining and chuckling about the person designing a commercial instruction set who's concerned about ease of use</p>\n</blockquote>\n<p>you mean VAX?</p>",
        "id": 262024922,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637294992
    },
    {
        "content": "<p>VAX is famously orthogonal, at the cost of cpu complexity and speed</p>",
        "id": 262024988,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295066
    },
    {
        "content": "<p>I mean, my impression is that,<br>\nwithout offense intended,<br>\na lot of RISCV's proposals have a lot of design input from the Unix greybeard type,<br>\nand we know what their tastes tend to be like.</p>",
        "id": 262024989,
        "sender_full_name": "Jubilee",
        "timestamp": 1637295070
    },
    {
        "content": "<p>well, lots of other isas also have similar mnemonic changes too...</p>",
        "id": 262025041,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295134
    },
    {
        "content": "<p>Yes, but they tend to have more things live under the same mnemonic.</p>",
        "id": 262025057,
        "sender_full_name": "Jubilee",
        "timestamp": 1637295170
    },
    {
        "content": "<p>reminds me of <code>mov[bwlq]</code> in x86 at&amp;t syntax</p>",
        "id": 262025072,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295208
    },
    {
        "content": "<p>Right, from the RISC view, Intel's <code>mov</code> is overloading load and store to begin with. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 262025143,
        "sender_full_name": "Jubilee",
        "timestamp": 1637295279
    },
    {
        "content": "<p>simplev has registers suffixed with <code>.s</code> and <code>.v</code> to select between scalar (splatted) and vector</p>",
        "id": 262025156,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295317
    },
    {
        "content": "<p>I think from the risc view, mov is overloading basically everything</p>",
        "id": 262025158,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637295326
    },
    {
        "content": "<p>e.g. <code>sv.add r30.v, r80.s, r100.v</code></p>",
        "id": 262025169,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295348
    },
    {
        "content": "<p><a href=\"https://github.com/Battelle/movfuscator\">https://github.com/Battelle/movfuscator</a> literally, <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> ?</p>",
        "id": 262025214,
        "sender_full_name": "Jubilee",
        "timestamp": 1637295377
    },
    {
        "content": "<p>exactly what I was thinking about haha</p>",
        "id": 262025224,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637295393
    },
    {
        "content": "<p>considering you can even jump with faults</p>",
        "id": 262025226,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637295398
    },
    {
        "content": "<p>oh, i was just going to find the movfuscstor link, you're faster than I</p>",
        "id": 262025257,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295452
    },
    {
        "content": "<p>though, realistically, there are whole cpus that support only the mov instruction</p>",
        "id": 262025319,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295506
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Transport_triggered_architecture\">https://en.wikipedia.org/wiki/Transport_triggered_architecture</a></p>",
        "id": 262025345,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295553
    },
    {
        "content": "<p>I built one once, i got it to run a linear congruential random number generator</p>",
        "id": 262025406,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295606
    },
    {
        "content": "<p>and, unlike x86, it is <em>only</em> moving, no fancy address calculations</p>",
        "id": 262025440,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637295662
    },
    {
        "content": "<p>I suggest we keep auto-splat for add and mul, but not sub and div</p>",
        "id": 262072805,
        "sender_full_name": "Lokathor",
        "timestamp": 1637332108
    },
    {
        "content": "<p>that seems pretty odd on its own, tbh. i kind of feel like the autosplat isn't particularly idiomatic for rust (which generally requires explicit conversions in many places), but it is very convenient</p>",
        "id": 262091225,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637339655
    },
    {
        "content": "<p>imho, if we have autosplat on any of the arithmetic/logical operators, we should have it on all.</p>",
        "id": 262091832,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637339909
    },
    {
        "content": "<p>Agreed</p>",
        "id": 262092193,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637340063
    },
    {
        "content": "<p>maybe if we introduced a <code>Splat</code> trait and/or global function, splatting would be sufficiently ergonomic without needing autosplatting:<br>\neither (or both):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">simd</span>::<span class=\"p\">{</span><span class=\"n\">splat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and/or:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">simd</span>::<span class=\"p\">{</span><span class=\"n\">Splat</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f32x4</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">my_fn</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">f32x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">splat</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">splat</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262093475,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637340569
    },
    {
        "content": "<p>Well, right now it's as trivial as calling Simd::splat, I think type inference is the issue</p>",
        "id": 262093653,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637340629
    },
    {
        "content": "<p>k, though imho <code>Simd::splat</code> is still kinda long to put everywhere, <code>splat</code> is much shorter</p>",
        "id": 262093798,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637340694
    },
    {
        "content": "<p>yeah if i have to type :: even once in my code I'm already upset</p>",
        "id": 262094516,
        "sender_full_name": "Lokathor",
        "timestamp": 1637340959
    },
    {
        "content": "<p>hmm, i didn't see any type inference issues <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=d1705a9517aacc38802e74dfc000e20a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=d1705a9517aacc38802e74dfc000e20a</a> -- <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> have any demos?</p>",
        "id": 262099577,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637342988
    },
    {
        "content": "<p>Nope, I was just recalling what happened in the past when we last discussed it</p>",
        "id": 262099731,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637343047
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/portable-simd/pull/10#issuecomment-701658659\">https://github.com/rust-lang/portable-simd/pull/10#issuecomment-701658659</a></p>",
        "id": 262100356,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637343313
    },
    {
        "content": "<p>from what I can tell, the issue was with using <code>.into()</code>, imho <code>splat</code> shouldn't have that problem cuz it's less general -- the output type is tied to the input type.</p>",
        "id": 262100535,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637343390
    },
    {
        "content": "<p>Oh, yeah, that makes sense</p>",
        "id": 262100597,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637343418
    },
    {
        "content": "<p>if <code>splat</code> is too wordy, maybe we could come up with some shorthand function name? <code>sv</code> (splat vector);  <code>ss</code> (splat simd);  <code>simd</code>?</p>",
        "id": 262101212,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637343670
    },
    {
        "content": "<p>maybe we could add <code>1.23_f32x4</code> and <code>1.23_f32xN</code> literals?</p>",
        "id": 262101496,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637343792
    },
    {
        "content": "<p>I think you're going in the opposite direction from me, not only am I not concerned about wordiness, I think a free function rather than an associated function on Simd is odd</p>",
        "id": 262101499,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637343793
    },
    {
        "content": "<p>imho we need something more ergonomic than <code>Simd::splat</code> everywhere -- that's just too long, splatting is a very common operation</p>",
        "id": 262101774,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637343896
    },
    {
        "content": "<p>maybe Rust could gain support for <code>use core::simd::Simd::splat;</code></p>",
        "id": 262101967,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637343974
    },
    {
        "content": "<p>i'm not against also having an associated function</p>",
        "id": 262102152,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637344063
    },
    {
        "content": "<p>maybe we should add Simd splatting/casting to <code>as</code></p>",
        "id": 262102986,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637344365
    },
    {
        "content": "<p>as is so unpopular i doubt this would go over well</p>",
        "id": 262103059,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637344390
    },
    {
        "content": "<p>k</p>",
        "id": 262103076,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637344401
    },
    {
        "content": "<p><code>as</code> is <strong>desperately</strong> unpopular and basically being aimed at for \"removed from the language entirely\".</p>",
        "id": 262109111,
        "sender_full_name": "Jubilee",
        "timestamp": 1637346928
    },
    {
        "content": "<p>Anyways, I don't see any need to preserve symmetry across all arithmetic operators because not all arithmetic operators are symmetric.</p>",
        "id": 262119883,
        "sender_full_name": "Jubilee",
        "timestamp": 1637351249
    },
    {
        "content": "<p>thats true, but a lot of users think of the math operators as \"two numbers in, math stuff happens, number out\"</p>",
        "id": 262120191,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637351381
    },
    {
        "content": "<p>which appears symmetric if you squint</p>",
        "id": 262120214,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637351390
    },
    {
        "content": "<p>i'd be ok if we decided to just splat on the lhs or rhs of operators, but we shouldn't have splat on just <code>+</code> and <code>*</code> but not <code>-</code> and <code>/</code></p>",
        "id": 262120216,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637351391
    },
    {
        "content": "<p>the asymmetry of + on String is a constant source of confusion with beginners tbh, i dont think we should repeat that</p>",
        "id": 262120379,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637351442
    },
    {
        "content": "<p>without a very good reason anyway (perhaps strings reason is good enough)</p>",
        "id": 262120405,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637351459
    },
    {
        "content": "<p>splatting should be all or nothing when looking at what happens across the dimension of arithmetic/logical operators</p>",
        "id": 262120478,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637351495
    },
    {
        "content": "<p>i just meant the rhs/lhs dependence</p>",
        "id": 262120630,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637351550
    },
    {
        "content": "<p>yup, i'm describing an orthogonal issue</p>",
        "id": 262120675,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637351573
    },
    {
        "content": "<p>tbh i was mildly surprised when I first read our source code and saw that splatting was used, I thought \"I thought Rust didn't do automatic type conversion in operators?!\"</p>",
        "id": 262120957,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637351698
    },
    {
        "content": "<blockquote>\n<p>It is not a great amount of simplification, and having to manually splat everywhere makes reading the resulting code more complicated. Comparing it to the absence of numeric promotion is a false analogy, as the lanewise behavior does not vary, whereas numeric promotion does change lanewise behavior.</p>\n</blockquote>",
        "id": 262121073,
        "sender_full_name": "Jubilee",
        "timestamp": 1637351749
    },
    {
        "content": "<p>if we lose autosplatting, i suspect most of the inference errors related to simd in non-simd code will go away too</p>",
        "id": 262121224,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637351803
    },
    {
        "content": "<p><strong>That</strong> would probably be worth it, tbh.</p>",
        "id": 262121282,
        "sender_full_name": "Jubilee",
        "timestamp": 1637351834
    },
    {
        "content": "<p>I'm okay with either no autosplatting, or every operation does</p>",
        "id": 262121608,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637351977
    },
    {
        "content": "<p>I'm leaning towards none with that argument, and because of the complexity of the bounds on it</p>",
        "id": 262121787,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637352028
    },
    {
        "content": "<p>I am against any decisionmaking on \"the complexity of the bounds\", that's complexity we're asked to take up, not push onto our users.</p>",
        "id": 262122445,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352329
    },
    {
        "content": "<p>I just meant that the trait implementations literally have very complex bounds, which is maybe indicating a deeper issue</p>",
        "id": 262122585,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637352384
    },
    {
        "content": "<p>those bounds propagate to user code that wants to be generic...so the complexity is a somewhat significant issue</p>",
        "id": 262122612,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352400
    },
    {
        "content": "<p>inferred bounds will probably eventually get here in some form or another, supposedly</p>",
        "id": 262122673,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637352431
    },
    {
        "content": "<p>User code that wants to be generic doesn't want these shitty bounds that we foist on users, it wants something higher level like <code>Int</code> or <code>UInt</code>, As I Keep Saying.</p>",
        "id": 262122828,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352491
    },
    {
        "content": "<p>hmm, not sure we'd want code to infer all the bounds...</p>",
        "id": 262122842,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352497
    },
    {
        "content": "<p>maybe this is our cue to merge num-traits back into std?</p>",
        "id": 262122929,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352545
    },
    {
        "content": "<p>It is precisely this hostility to including a drop of complexity in <code>std</code> that makes this shit unmanageable for users.</p>",
        "id": 262122944,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352553
    },
    {
        "content": "<p><code>where</code> bounds are not \"inherited\" by supertraits and will be dragged along with the code no matter what</p>",
        "id": 262123115,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637352615
    },
    {
        "content": "<p>And rank promotion is a <strong>long</strong> established convention that does not actually have a problem in practice. Show me the user code that is greatly complicated by it. Show me the CVEs against fucking APL.</p>",
        "id": 262123125,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352619
    },
    {
        "content": "<p>though we couldn't use num-traits right away cuz we have <code>i128</code>/<code>u128</code> issues</p>",
        "id": 262123207,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352657
    },
    {
        "content": "<p>who still uses APL?</p>",
        "id": 262123229,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352671
    },
    {
        "content": "<p>A lot of people, actually.</p>",
        "id": 262123241,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352678
    },
    {
        "content": "<p>Banks still run large swathes of software on some of the descendants of APL (mostly the ones that preferentially use ASCII operators).</p>",
        "id": 262123381,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352741
    },
    {
        "content": "<p>hmm, just cuz it's a class in college and cuz some megacompany has old code they don't want to rewrite?</p>",
        "id": 262123392,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352747
    },
    {
        "content": "<p>This is, actually, <strong>not</strong> a source of problems for them.</p>",
        "id": 262123427,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352763
    },
    {
        "content": "<p>Every piece of code, including the \"Rust compiler\", currently in existence, is old code that someone doesn't want to rewrite.</p>",
        "id": 262123541,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352820
    },
    {
        "content": "<p>i wouldn't look at the average bank as the source of code advice worth following...they tend to use very old software and insecure crufty protocols</p>",
        "id": 262123551,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352826
    },
    {
        "content": "<p>The insecure crufty protocols are because no one fucking requires them to be secure.</p>",
        "id": 262123687,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352872
    },
    {
        "content": "<p>yup! hopefully that'll change before all my pii is scattered to the four winds</p>",
        "id": 262123790,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352920
    },
    {
        "content": "<p>Too late, Amazon already did that.</p>",
        "id": 262123820,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352936
    },
    {
        "content": "<p>well, at least amazon uses reasonably secure software, or at least appears to</p>",
        "id": 262123943,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637352988
    },
    {
        "content": "<p>Didn't you see the news? They can't actually map all the places they copied user data to.</p>",
        "id": 262123955,
        "sender_full_name": "Jubilee",
        "timestamp": 1637352997
    },
    {
        "content": "<p>\"S3 bucket left open\" is the like no. 1 security vuln in practice.</p>",
        "id": 262123986,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353018
    },
    {
        "content": "<p>Instead of relitigating ancient code I think it would be fair to say the autosplatting has caused enough problems and can be trivially avoided in user code, should we just agree to remove it without going into our personal reasons for removal?</p>",
        "id": 262124030,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353041
    },
    {
        "content": "<p>Since there isn't any software so secure a user can't break it.</p>",
        "id": 262124038,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> No.</p>",
        "id": 262124057,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353058
    },
    {
        "content": "<p>We're relitigating it precisely because we can't agree.</p>",
        "id": 262124088,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353078
    },
    {
        "content": "<p>Who is still in favor of it existing?</p>",
        "id": 262124162,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353095
    },
    {
        "content": "<p>Hi.</p>",
        "id": 262124171,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353098
    },
    {
        "content": "<blockquote>\n<p>Since there isn't any software so secure a user can't break it.</p>\n</blockquote>\n<p>well, i'm going to at least try to make it better...</p>",
        "id": 262124174,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353100
    },
    {
        "content": "<p>I thought you just suggested removing it to avoid the inference issues</p>",
        "id": 262124211,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353118
    },
    {
        "content": "<p>Trying to automate the user away is the source of most problems (and is the only way to make a system definitionally secure against a user).</p>",
        "id": 262124222,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353122
    },
    {
        "content": "<p>not trying is the easiest way to fail</p>",
        "id": 262124315,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353175
    },
    {
        "content": "<p>Not trying to make autosplatting work <strong>correctly</strong> is the easiest way to inflict RSI on all our users, yes.</p>",
        "id": 262124411,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353211
    },
    {
        "content": "<p>anyway, back to splatting, I'm mildly in favor of removing autosplatting</p>",
        "id": 262124435,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353222
    },
    {
        "content": "<p>Yeah, I'm mildly in favor, though with the proposed trait changes even more in favor</p>",
        "id": 262124479,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353257
    },
    {
        "content": "<p>Ugh fuck it.</p>",
        "id": 262124520,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353282
    },
    {
        "content": "<p>a<br>\n<span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/remove.20splatting.20on.20operators.3F/near/262124211\">said</a>:</p>\n<blockquote>\n<p>I thought you just suggested removing it to avoid the inference issues</p>\n</blockquote>\n<p>I acknowledged it would be the best reason to, I am very upset with the way I am continuously misunderstood.</p>",
        "id": 262124558,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353311
    },
    {
        "content": "<p>I think you should be able to do <code>v * 2</code> but it seems to cause more problems than it's worth</p>",
        "id": 262124620,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353326
    },
    {
        "content": "<p>Well fwiw I'm having a lot of trouble following your argument when it's immediately followed by a discussion of APL and Amazon and lots of other things I'm not really following</p>",
        "id": 262124695,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353377
    },
    {
        "content": "<p>Then ask.</p>",
        "id": 262124727,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353393
    },
    {
        "content": "<p>I did haha</p>",
        "id": 262124739,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353404
    },
    {
        "content": "<p>well, one idea is adding splatted literals: <code>3.5_f32x4</code> or <code>3.5_f32x_</code></p>",
        "id": 262124746,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353407
    },
    {
        "content": "<p>No, you did not.</p>",
        "id": 262124751,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353409
    },
    {
        "content": "<p>though honestly, splatted literals seem a little too much, <code>3.5.sp()</code> is short enough</p>",
        "id": 262124942,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353501
    },
    {
        "content": "<p>I think it would generally be reasonable to call <code>splat(scalar)</code></p>",
        "id": 262124955,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353507
    },
    {
        "content": "<p>I'm really not in favor of abbreviations</p>",
        "id": 262124973,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353517
    },
    {
        "content": "<p>k</p>",
        "id": 262124990,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353527
    },
    {
        "content": "<p>You just assumed you knew what I was saying and jumped off of that.<br>\nIf acknowledging a cost is real is treated as agreement that we should make a decision based on that alone, then no, you are not listening to what I am saying.</p>",
        "id": 262125006,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353535
    },
    {
        "content": "<p>It's unfortunate that you can't import an associated function</p>",
        "id": 262125010,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637353536
    },
    {
        "content": "<blockquote>\n<p>It's unfortunate that you can't import an associated function</p>\n</blockquote>\n<p>that's why I proposed the <code>splat</code> global fn</p>",
        "id": 262125169,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353599
    },
    {
        "content": "<p>Frankly, I am done with this entire project if my continued participation is going to be treated as a reason to reject, refuse, and ignore me.</p>",
        "id": 262125178,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353602
    },
    {
        "content": "<p>i'm not ignoring you, i'm disagreeing</p>",
        "id": 262125242,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353634
    },
    {
        "content": "<p>I do appreciate your efforts</p>",
        "id": 262125376,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353687
    },
    {
        "content": "<p>Then why can't I actually speak honestly without it being misinterpreted?</p>",
        "id": 262125422,
        "sender_full_name": "Jubilee",
        "timestamp": 1637353710
    },
    {
        "content": "<p>cuz i'm not perfect, i don't necessarily get your exact meaning the first (or second or third...)  time</p>",
        "id": 262125503,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637353778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/remove.20splatting.20on.20operators.3F/near/262124162\">said</a>:</p>\n<blockquote>\n<p>Who is still in favor of it existing?</p>\n</blockquote>\n<p>i am, but weakly. i think that my opinion depends mostly on the severity of the inference breakage</p>",
        "id": 262125934,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637354008
    },
    {
        "content": "<p>and if removing splatting actually helps there</p>",
        "id": 262125956,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637354022
    },
    {
        "content": "<p>actually, i'm probably not weakly in favor, i'm fully in favor of it with the caveats that</p>\n<ul>\n<li>widespread inference breakage would not be worth saving the papercut of needing to manually splat</li>\n<li>even if there are real differences between this and primitive arithmetic conversions, it <em>feels</em> similar</li>\n</ul>",
        "id": 262126445,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637354252
    },
    {
        "content": "<p>It is possible it doesn't, and it is likely that the changes to have it work on bounds, instead of individual implementations on every single variation of a type, will actually cause certain things to fail inference less often, because the <code>where</code> bounds will eliminate certain possibilities during candidate weeding.</p>\n<p>I am going to finish rewriting this fix to the library so our code does not have an explosive number of implementations, I am done with this conversation, I am against removing splatting, I wanted only to bring up how it is odd that the asymmetric operators have symmetric splatting, and how the existing way type inference works can privilege the LHS. That's it.</p>",
        "id": 262126464,
        "sender_full_name": "Jubilee",
        "timestamp": 1637354263
    },
    {
        "content": "<p>yeah, I agree that privileging the LHS is a problem, I also encountered that when trying to build a DSL in Rust for a hardware description language, i ended up having to build a proc macro that parses the experssions and calls a totally separate set of operator traits</p>\n<p><code>val!</code> in<br>\n<a href=\"https://salsa.debian.org/Kazan-team/rust-hdl/-/blob/master/examples/blinky.rs\">https://salsa.debian.org/Kazan-team/rust-hdl/-/blob/master/examples/blinky.rs</a></p>",
        "id": 262126871,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637354484
    },
    {
        "content": "<p>Removing splatting specifically on the LHS on the asymmetric operators would be quite probable to fix the remaining type inference issues some ~95% of the time. Making custom literals work would also be good, but is an even more ambitious plan than my wildest dreams tbh.</p>",
        "id": 262126929,
        "sender_full_name": "Jubilee",
        "timestamp": 1637354520
    },
    {
        "content": "<p>i'd be ok with that, as long as we don't do it differently for <code>+</code> vs. other operators</p>",
        "id": 262127226,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637354685
    },
    {
        "content": "<p>From a technical point of view I agree, but from the original justification of autosplatting I don't see any reason for <code>v * 2</code> to work but not <code>2 * v</code> to the extent that it seems negatively inconsistent</p>",
        "id": 262127267,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637354712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> true</p>",
        "id": 262127298,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637354733
    },
    {
        "content": "<p>The way type inference works on <code>+</code> is not the same way type inference works on <code>&lt;&lt;</code>.</p>",
        "id": 262127446,
        "sender_full_name": "Jubilee",
        "timestamp": 1637354813
    },
    {
        "content": "<p>yes, but <code>&lt;&lt;</code> and <code>&gt;&gt;</code> are the only exception out of the arith/logical ops</p>",
        "id": 262127525,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637354866
    },
    {
        "content": "<p>Perhaps we should make an exception for the only exception.<br>\nThat is literally what I was trying to say in the beginning.<br>\nAnd... I am going to actually close this tab, since apparently I have no self control.</p>",
        "id": 262127632,
        "sender_full_name": "Jubilee",
        "timestamp": 1637354925
    },
    {
        "content": "<p>tbh i'd say we should restrict simd shifting more, where the shift count can be a scalar or the exact same simd type</p>",
        "id": 262127819,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637355015
    },
    {
        "content": "<p>we can claim efficiency as the reason...</p>",
        "id": 262127888,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637355046
    },
    {
        "content": "<p>It doesn't really make sense to shift a scalar by a vector, but it does make sense to divide a scalar by a vector, they aren't the same thing so I agree</p>",
        "id": 262128016,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637355099
    },
    {
        "content": "<p>it totally makes sense to shift a scalar by a vector, if you have autosplatting...one example is building a mask to extract a different bit in each simd lane</p>",
        "id": 262128372,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1637355252
    },
    {
        "content": "<p>That is true</p>",
        "id": 262128398,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637355271
    },
    {
        "content": "<p>I guess I keep coming back to the argument that either every argument needs to support it, or none</p>",
        "id": 262128469,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637355309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/remove.20splatting.20on.20operators.3F/near/262126929\">said</a>:</p>\n<blockquote>\n<p>Removing splatting specifically on the LHS on the asymmetric operators would be quite probable to fix the remaining type inference issues some ~95% of the time. Making custom literals work would also be good, but is an even more ambitious plan than my wildest dreams tbh.</p>\n</blockquote>\n<p>Tbh... I'm really against having autosplatting only happen on one side or another, because i've done a lot of rust teaching work and have found the issue with String + &amp;str working, but &amp;str + String not working, being extremely confusing to newcomers. I think we shouldn't add more asymmetry to operators that are conceptually commutative.</p>",
        "id": 262128498,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637355321
    },
    {
        "content": "<p>I don't think we're helping anyone if it's inconsistent</p>",
        "id": 262128501,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637355322
    },
    {
        "content": "<p>I'd rather have no autosplatting than that, and I do like the autosplatting (since it cleans up a lot of code)</p>",
        "id": 262128529,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637355336
    },
    {
        "content": "<p>I completely agree with that</p>",
        "id": 262128628,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637355369
    },
    {
        "content": "<p>I'm like autosplatting as long as it's consistent and available everywhere</p>",
        "id": 262128660,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1637355389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I'm in big favor of it existing.</p>\n<p>I think the ideal should be that you can write a fn foo(x : f32) -&gt; f32 and then just stick some \"x4\" on there and it goes 4 wide.</p>",
        "id": 262133072,
        "sender_full_name": "Lokathor",
        "timestamp": 1637357631
    },
    {
        "content": "<p>also yall have convinced me that occasional splatting such as by left or right side is a bad idea</p>",
        "id": 262133404,
        "sender_full_name": "Lokathor",
        "timestamp": 1637357797
    },
    {
        "content": "<p>What does splatting look like if it's not automatic?  <code>Simd::from(x)</code> or is there something shorter?</p>",
        "id": 262645214,
        "sender_full_name": "scottmcm",
        "timestamp": 1637791405
    },
    {
        "content": "<p><code>Simd::splat(x)</code> yes</p>",
        "id": 262645294,
        "sender_full_name": "Jubilee",
        "timestamp": 1637791456
    }
]