[
    {
        "content": "<p>Hello! Let's get caught up in a couple hours. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  <a href=\"https://hackmd.io/t3zBrB9bQLGkpbL1twBHlw?both\">https://hackmd.io/t3zBrB9bQLGkpbL1twBHlw?both</a></p>",
        "id": 232314591,
        "sender_full_name": "Jubilee",
        "timestamp": 1617042918
    },
    {
        "content": "<p>Okay~<br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> Hello! Looks like it's just us. :^)</p>",
        "id": 232330924,
        "sender_full_name": "Jubilee",
        "timestamp": 1617049897
    },
    {
        "content": "<p>I got my saturating math thing together again, except... blurgh writing tests.<br>\nOkay let me complain about that actually.<br>\nIt seems very strange to have to know the underlying Ty for a SimdTy to be able to interact with e.g. it's constants, like Ty::MAX? Is there something I'm missing? I'm trying to compose a simple doctest inside a macro and I want to be able to write something like <code>&lt;$ty as Scalar&gt;::MAX</code></p>",
        "id": 232331162,
        "sender_full_name": "Jubilee",
        "timestamp": 1617049989
    },
    {
        "content": "<p>otherwise the macro needs both the $simd_ty and $scalar_ty passed in</p>",
        "id": 232331365,
        "sender_full_name": "Jubilee",
        "timestamp": 1617050068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I don't think it's possible until associated struct types are added</p>",
        "id": 232332650,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617050631
    },
    {
        "content": "<p>I tried to solve the problem earlier and there isn't a good way around it, you could use traits but then that bleeds into the interface everywhere</p>",
        "id": 232332825,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617050695
    },
    {
        "content": "<p>hmm.</p>",
        "id": 232334924,
        "sender_full_name": "Jubilee",
        "timestamp": 1617051585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-03-29.20Meeting/near/232332825\">said</a>:</p>\n<blockquote>\n<p>I tried to solve the problem earlier and there isn't a good way around it, you could use traits but then that bleeds into the interface everywhere</p>\n</blockquote>\n<p>I mean, sure, but for this case, all I want is to be able to take a known T and immediately use an associated type on a trait, doesn't seem so bad?<br>\n... oh wait, we don't have implicit associated traits.</p>",
        "id": 232335171,
        "sender_full_name": "Jubilee",
        "timestamp": 1617051670
    },
    {
        "content": "<p>Yep</p>",
        "id": 232335994,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617051999
    },
    {
        "content": "<p>hmm.</p>",
        "id": 232336569,
        "sender_full_name": "Jubilee",
        "timestamp": 1617052253
    },
    {
        "content": "<p>we _could_ just tack on the consts themselves, I guess? but that seems... weird, yeah?</p>",
        "id": 232336638,
        "sender_full_name": "Jubilee",
        "timestamp": 1617052284
    },
    {
        "content": "<p>Yeah. I honestly am fine with using an extra macro argument, as annoying as it is</p>",
        "id": 232337487,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617052586
    },
    {
        "content": "<p>siiigh~</p>",
        "id": 232343559,
        "sender_full_name": "Jubilee",
        "timestamp": 1617055524
    },
    {
        "content": "<p>ah darn.<br>\nmacro-expansion doesn't work for rustdoc. hrm.</p>",
        "id": 232345240,
        "sender_full_name": "Jubilee",
        "timestamp": 1617056555
    },
    {
        "content": "<p>Also, regarding that weird bug in my PR, I can't seem to pin it down at all.  The functions that cause rustc to crash sometimes don't crash when other things are happening in the same TU.  I don't know enough about the compiler to figure out where exactly it's crashing, especially since I can't replicate it in an aarch64 docker image (it compiled fine there)</p>",
        "id": 232345242,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617056557
    },
    {
        "content": "<p>I wanted to be able to write:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"sd\">/// Lanewise saturating add.</span>\n<span class=\"w\">            </span><span class=\"sd\">/// # Examples</span>\n<span class=\"w\">            </span><span class=\"sd\">///</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let x = $name::splat(10);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let max = $name::splat($n::MAX);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let unsat = x + max;</span>\n<span class=\"w\">            </span><span class=\"sd\">/// let sat = x.saturating_add(max);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// assert_ne!(sat, unsat);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// assert_eq!(sat, max);</span>\n<span class=\"w\">            </span><span class=\"sd\">/// ```</span>\n</code></pre></div>",
        "id": 232345291,
        "sender_full_name": "Jubilee",
        "timestamp": 1617056592
    },
    {
        "content": "<p>it IS very weird that it's crashing like that.</p>",
        "id": 232345385,
        "sender_full_name": "Jubilee",
        "timestamp": 1617056655
    },
    {
        "content": "<p>Oh, yeah, you can only get that to work with a combination of string literals and doc macros.  You could also use the paste crate</p>",
        "id": 232345398,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617056660
    },
    {
        "content": "<p>I think we could consider using a custom proc macro to do some of the stuff we use declarative macros for it it means less complicated code</p>",
        "id": 232345503,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617056761
    },
    {
        "content": "<p>But paste is probably fine too</p>",
        "id": 232345615,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617056825
    },
    {
        "content": "<p>\"doc macros\"?</p>",
        "id": 232345623,
        "sender_full_name": "Jubilee",
        "timestamp": 1617056828
    },
    {
        "content": "<p>yeah, I'm guessing slamming together a bunch of stuff and expanding it on top in a macro itself would in fact work.</p>",
        "id": 232345738,
        "sender_full_name": "Jubilee",
        "timestamp": 1617056920
    },
    {
        "content": "<p>Like, #[doc = \"literal\"]</p>",
        "id": 232347909,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617058324
    },
    {
        "content": "<p>Doc attribute is what I mean, I think</p>",
        "id": 232347952,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617058342
    },
    {
        "content": "<p>ohhh.</p>",
        "id": 232348035,
        "sender_full_name": "Jubilee",
        "timestamp": 1617058420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-03-29.20Meeting/near/232345503\">said</a>:</p>\n<blockquote>\n<p>I think we could consider using a custom proc macro to do some of the stuff we use declarative macros for it it means less complicated code</p>\n</blockquote>\n<p>can we use procmacros in libcore?</p>",
        "id": 232349869,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617059582
    },
    {
        "content": "<p>(even if it works, which i doubt for libcore but would believe for libstd, it would break -Zbuild-std on musl)</p>",
        "id": 232349929,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617059638
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"sd\">/// Lanewise saturating add.</span>\n<span class=\"w\">     </span><span class=\"sd\">///</span>\n<span class=\"w\">     </span><span class=\"sd\">/// Examples</span>\n<span class=\"w\">     </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">     </span><span class=\"sd\">/// # use core_simd::*;</span>\n<span class=\"w\">     </span><span class=\"cp\">#[doc = concat!(</span><span class=\"s\">\"let x = \"</span><span class=\"cp\">, stringify!($name), </span><span class=\"s\">\"::from_array([2, 4, 1, 9]);\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"cp\">#[doc = concat!(</span><span class=\"s\">\"let max = \"</span><span class=\"cp\">, stringify!($name), </span><span class=\"s\">\"::splat(\"</span><span class=\"cp\">, stringify!($n), </span><span class=\"s\">\"::MAX);\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"sd\">/// let unsat = x + max;</span>\n<span class=\"w\">     </span><span class=\"sd\">/// let sat = x.saturating_add(max);</span>\n<span class=\"w\">     </span><span class=\"sd\">/// assert_ne!(sat, unsat);</span>\n<span class=\"w\">     </span><span class=\"sd\">/// assert_eq!(x - 1, unsat);</span>\n<span class=\"w\">     </span><span class=\"sd\">/// assert_eq!(sat, max);</span>\n<span class=\"w\">     </span><span class=\"sd\">/// ```</span>\n</code></pre></div>\n<p>COMPUTER CRIMES</p>",
        "id": 232351696,
        "sender_full_name": "Jubilee",
        "timestamp": 1617060798
    },
    {
        "content": "<p>So, no proc macros required at all.</p>",
        "id": 232352039,
        "sender_full_name": "Jubilee",
        "timestamp": 1617061024
    },
    {
        "content": "<p>Oh man the doc view is kinda wretched atm (because of my own decisions, heh).</p>",
        "id": 232353586,
        "sender_full_name": "Jubilee",
        "timestamp": 1617062192
    },
    {
        "content": "<p>It's gross, but I like it</p>",
        "id": 232355693,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617063835
    },
    {
        "content": "<p>Any thoughts on course of action regarding the aarch64 bug?  I haven't been able to reproduce it anywhere but inside travis, so it's borderline impossible to debug.  I'm assuming it's LLVM but I haven't actually ruled out rustc</p>",
        "id": 232355946,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617064031
    },
    {
        "content": "<p>I don't really want to hold up those changes and the other PR I have lined up</p>",
        "id": 232355968,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617064066
    },
    {
        "content": "<p>you said you had no repro on QEMU, so not a native environment?</p>",
        "id": 232356063,
        "sender_full_name": "Jubilee",
        "timestamp": 1617064125
    },
    {
        "content": "<p>Yeah, unfortunately I don't have any access to a real machine</p>",
        "id": 232356426,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617064386
    },
    {
        "content": "<p>Not yet at least...</p>",
        "id": 232356453,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617064398
    },
    {
        "content": "<p>I'm surprised it isn't happening in QEMU though</p>",
        "id": 232356524,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617064446
    },
    {
        "content": "<p>what parts of it cause issues on aarch64? the entire thing, or just a few instructions?</p>",
        "id": 232356913,
        "sender_full_name": "Jubilee",
        "timestamp": 1617064743
    },
    {
        "content": "<p>It seemed like you had narrowed it down to just a few pieces.</p>",
        "id": 232357193,
        "sender_full_name": "Jubilee",
        "timestamp": 1617064967
    },
    {
        "content": "<p>Ah, <code>simd_ne</code>.<br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I think we should pull out the dependents on <code>simd_ne</code> and investigate that separately.</p>",
        "id": 232357485,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065251
    },
    {
        "content": "<p>So the only problem, I'm not actually convinced that's what's causing it.  I was able to actually get some of those functions compiling by just messing around with seemingly unrelated things.</p>",
        "id": 232357612,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617065330
    },
    {
        "content": "<p>...weird.</p>",
        "id": 232357639,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065362
    },
    {
        "content": "<p>Also, running those functions literally anywhere else in the test compiles just fine</p>",
        "id": 232357646,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617065370
    },
    {
        "content": "<p>hrm.</p>",
        "id": 232357654,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065376
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 232357672,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617065398
    },
    {
        "content": "<p>I have an RPi locally so I guess I'm warming that up, huh.</p>",
        "id": 232357715,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065407
    },
    {
        "content": "<p>i have an aarch64 mac (and i'm typing this on it) so i can try something if that helps</p>",
        "id": 232357802,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> oh that's even more convenient.<br>\nCan you check out Caleb's new comparisons PR?</p>",
        "id": 232357909,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065589
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/80\">https://github.com/rust-lang/stdsimd/pull/80</a> specifically.</p>",
        "id": 232357916,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065606
    },
    {
        "content": "<p>sure, i haven't ever built stdsimd on this machine, is it still just cargo build with a sufficiently up to date nightly?</p>",
        "id": 232357928,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065625
    },
    {
        "content": "<p>running <code>cargo test</code> now</p>",
        "id": 232358013,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065697
    },
    {
        "content": "<p>yes.</p>",
        "id": 232358026,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065709
    },
    {
        "content": "<p>wow we sure have a lot of tests. they all seem to pass though</p>",
        "id": 232358059,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065740
    },
    {
        "content": "<p>By the way, it only fails on release</p>",
        "id": 232358062,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617065744
    },
    {
        "content": "<p>ah, trying again on release</p>",
        "id": 232358070,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> thanks for testing it!</p>",
        "id": 232358071,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617065758
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> error: could not compile `core_simd`\n\nCaused by:\n  process didn&#39;t exit successfully: `rustc --crate-name f32_ops --edition=2018 crates/core_simd/tests/f32_ops.rs --error-format=json --json=diagnostic-rendered-ansi --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no --test --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;std&quot;&#39; -C metadata=9aedc98af17c3ed8 -C extra-filename=-9aedc98af17c3ed8 --out-dir /Users/thom/src/stdsimd/target/release/deps -L dependency=/Users/thom/src/stdsimd/target/release/deps --extern core_simd=/Users/thom/src/stdsimd/target/release/deps/libcore_simd-c0f5522459db4fe7.rlib --extern proptest=/Users/thom/src/stdsimd/target/release/deps/libproptest-56382428795db6b8.rlib --extern test_helpers=/Users/thom/src/stdsimd/target/release/deps/libtest_helpers-bf553b1d02820271.rlib` (signal: 11, SIGSEGV: invalid memory reference)\n</code></pre></div>\n<p><span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 232358135,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065793
    },
    {
        "content": "<p>uh, i'll update my nightly</p>",
        "id": 232358162,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065819
    },
    {
        "content": "<p>Hey! That's good!  That's the bug I couldn't reproduce!</p>",
        "id": 232358176,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617065832
    },
    {
        "content": "<p>oh</p>",
        "id": 232358181,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065842
    },
    {
        "content": "<p>i thought it was a test failure</p>",
        "id": 232358185,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065849
    },
    {
        "content": "<p>do update nightly to make sure.</p>",
        "id": 232358187,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065854
    },
    {
        "content": "<p>i see yeah</p>",
        "id": 232358188,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065854
    },
    {
        "content": "<p>i did, still have it though</p>",
        "id": 232358195,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065864
    },
    {
        "content": "<p>awesome.</p>",
        "id": 232358203,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065870
    },
    {
        "content": "<p>Nope, rustc is crashing compiling the tests and I have no idea what causes it. I'm not even sure if it's rustc or LLVM</p>",
        "id": 232358208,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617065881
    },
    {
        "content": "<p>probably need to do a debug build of rustc to be sure :(. unfortunately, in the past when i've tried to debug segfaults coming from rustc (or attach a debugger to cargo-invoked rustc) it was... very hard</p>",
        "id": 232358279,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617065930
    },
    {
        "content": "<p>If you can find an MCVE that would be nice?</p>",
        "id": 232358310,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065979
    },
    {
        "content": "<p>even if we don't get a clean error.</p>",
        "id": 232358318,
        "sender_full_name": "Jubilee",
        "timestamp": 1617065993
    },
    {
        "content": "<p>I haven't done it so wouldn't know where to begin.  I guess if it's a debug build you can use RUST_BACKTRACE?</p>",
        "id": 232358369,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617066008
    },
    {
        "content": "<p>If it's LLVM we can just submit an issue</p>",
        "id": 232358401,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617066026
    },
    {
        "content": "<p>segfault is in <code>librustc_driver-3d957a49f922b1cb.dylib</code>llvm::EVT::getExtendedVectorElementType() const + 4`</p>",
        "id": 232358423,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066045
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>* thread #9, name = &#39;LTO f32_ops.7xbu2ru5-cgu.6&#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x18)\n  * frame #0: 0x00000001017623a8 librustc_driver-3d957a49f922b1cb.dylib`llvm::EVT::getExtendedVectorElementType() const + 4\n    frame #1: 0x00000001011cf98c librustc_driver-3d957a49f922b1cb.dylib`llvm::AArch64TargetLowering::PerformDAGCombine(llvm::SDNode*, llvm::TargetLowering::DAGCombinerInfo&amp;) const + 14724\n    frame #2: 0x0000000101294850 librustc_driver-3d957a49f922b1cb.dylib`(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*) + 164\n    frame #3: 0x0000000101292e04 librustc_driver-3d957a49f922b1cb.dylib`llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level) + 1620\n    frame #4: 0x000000010140e450 librustc_driver-3d957a49f922b1cb.dylib`llvm::SelectionDAGISel::CodeGenAndEmitDAG() + 132\n    frame #5: 0x000000010140de20 librustc_driver-3d957a49f922b1cb.dylib`llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&amp;) + 5164\n    frame #6: 0x000000010140bebc librustc_driver-3d957a49f922b1cb.dylib`llvm::SelectionDAGISel::runOnMachineFunction(llvm::MachineFunction&amp;) + 1812\n    frame #7: 0x00000001015c31a4 librustc_driver-3d957a49f922b1cb.dylib`llvm::MachineFunctionPass::runOnFunction(llvm::Function&amp;) + 312\n    frame #8: 0x0000000101ecb94c librustc_driver-3d957a49f922b1cb.dylib`llvm::FPPassManager::runOnFunction(llvm::Function&amp;) + 656\n    frame #9: 0x0000000101ed10b0 librustc_driver-3d957a49f922b1cb.dylib`llvm::FPPassManager::runOnModule(llvm::Module&amp;) + 60\n    frame #10: 0x0000000101ecbe40 librustc_driver-3d957a49f922b1cb.dylib`llvm::legacy::PassManagerImpl::run(llvm::Module&amp;) + 836\n    frame #11: 0x00000001005a2718 librustc_driver-3d957a49f922b1cb.dylib`LLVMRustWriteOutputFile + 692\n    frame #12: 0x00000001004acb44 librustc_driver-3d957a49f922b1cb.dylib`rustc_codegen_llvm::back::write::write_output_file::h7968ee0eb60b654d + 200\n    frame #13: 0x00000001004b0a94 librustc_driver-3d957a49f922b1cb.dylib`rustc_codegen_llvm::back::write::codegen::h53fa963fa3235089 + 3636\n    frame #14: 0x00000001004bd630 librustc_driver-3d957a49f922b1cb.dylib`rustc_codegen_ssa::back::write::finish_intra_module_work::hf621f6a946ac5e9f + 184\n    frame #15: 0x00000001004b82b8 librustc_driver-3d957a49f922b1cb.dylib`rustc_codegen_ssa::back::write::execute_work_item::hba4c40984218d413 + 688\n    frame #16: 0x0000000100540988 librustc_driver-3d957a49f922b1cb.dylib`std::sys_common::backtrace::__rust_begin_short_backtrace::he60080f52fb51e5b + 180\n    frame #17: 0x000000010055242c librustc_driver-3d957a49f922b1cb.dylib`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::he14e7402727f1938 + 136\n    frame #18: 0x0000000106c3eb30 libstd-48f9d8def3882461.dylib`std::sys::unix::thread::Thread::new::thread_start::h80077e1f2252128e + 44\n    frame #19: 0x000000019f93206c libsystem_pthread.dylib`_pthread_start + 320\n</code></pre></div>\n<p>is a backtrace</p>",
        "id": 232358445,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066064
    },
    {
        "content": "<p>oh wow</p>",
        "id": 232358457,
        "sender_full_name": "Jubilee",
        "timestamp": 1617066075
    },
    {
        "content": "<p>i don't have debug info beyond symbols, it seems, so i cant help much more than that</p>",
        "id": 232358532,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066133
    },
    {
        "content": "<p>Well, that's a good start</p>",
        "id": 232358604,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617066194
    },
    {
        "content": "<p>yeah, this is good.</p>",
        "id": 232358611,
        "sender_full_name": "Jubilee",
        "timestamp": 1617066204
    },
    {
        "content": "<p>It looks like... \"yes, this is in LLVM codegen\"?</p>",
        "id": 232358636,
        "sender_full_name": "Jubilee",
        "timestamp": 1617066239
    },
    {
        "content": "<p>Honestly probably enough to submit an issue and maybe someone familiar can fix it</p>",
        "id": 232358673,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617066244
    },
    {
        "content": "<p>Glad we have a function to point to</p>",
        "id": 232358682,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617066255
    },
    {
        "content": "<p>if someone can tell me a straightforward set of commands to build rustc with more debug info and use it here i can probably do that too, although i'll be making dinner for a bit</p>",
        "id": 232358740,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066315
    },
    {
        "content": "<p>Unfortunately I've never done it</p>",
        "id": 232359030,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617066520
    },
    {
        "content": "<p>i'm cloning rust-lang/rust and going to build it while i make dinner, possibly</p>",
        "id": 232359113,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066599
    },
    {
        "content": "<blockquote>\n<p>Configuring the compiler</p>\n<p>By default, rustc is built without most debug information. To enable debug info, set debug = true in your config.toml.</p>\n<p>Setting debug = true turns on many different debug options (e.g., debug-assertions, debug-logging, etc.) which can be individually tweaked if you want to, but many people simply set debug = true. Check out the comments in config.toml.example for more info.</p>\n<p>You will need to rebuild the compiler once you've changed any configuration options.</p>\n</blockquote>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/compiler-debugging.html\">https://rustc-dev-guide.rust-lang.org/compiler-debugging.html</a></p>",
        "id": 232359311,
        "sender_full_name": "Jubilee",
        "timestamp": 1617066770
    },
    {
        "content": "<p><code>brew install ninja</code> for some reason is building... ffmpeg?</p>",
        "id": 232359350,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-03-29.20Meeting/near/232359311\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>By default, rustc is built without most debug information. To enable debug info, set debug = true in your config.toml.</p>\n</blockquote>\n</blockquote>\n<p>do you know if i need to do something separate for llvm to be built with debug?</p>",
        "id": 232359446,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066898
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/backend/debugging.html\">https://rustc-dev-guide.rust-lang.org/backend/debugging.html</a> ??</p>",
        "id": 232359503,
        "sender_full_name": "Jubilee",
        "timestamp": 1617066957
    },
    {
        "content": "<blockquote>\n<p>If you are encountering these, it is a good idea to try using a compiler with LLVM assertions enabled - either an \"alt\" nightly or a compiler you build yourself by setting [llvm] assertions=true in your config.toml - and see whether anything turns up.</p>\n</blockquote>",
        "id": 232359559,
        "sender_full_name": "Jubilee",
        "timestamp": 1617066981
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># Indicates whether the LLVM build is a Release or Debug build\n#optimize = true\n</code></pre></div>",
        "id": 232359562,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066986
    },
    {
        "content": "<p>hmmm</p>",
        "id": 232359563,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617066988
    },
    {
        "content": "<p>i'd like it to be CMAKE_BUILD_TYPE=RELWITHDEBINFO</p>",
        "id": 232359580,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617067017
    },
    {
        "content": "<p>which is probably</p>",
        "id": 232359588,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617067025
    },
    {
        "content": "<p>none of this</p>",
        "id": 232359589,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617067028
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 232359594,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617067030
    },
    {
        "content": "<blockquote>\n<p>The default rustc compilation pipeline has multiple codegen units, which is hard to replicate manually and means that LLVM is called multiple times in parallel. If you can get away with it (i.e. if it doesn't make your bug disappear), passing -C codegen-units=1 to rustc will make debugging easier.</p>\n</blockquote>\n<p>also<br>\nyeah idk</p>",
        "id": 232359601,
        "sender_full_name": "Jubilee",
        "timestamp": 1617067037
    },
    {
        "content": "<p>okay its building, i'll get back in an, uh, while</p>",
        "id": 232359707,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617067161
    },
    {
        "content": "<p>thank you so much for your efforts!</p>",
        "id": 232359922,
        "sender_full_name": "Jubilee",
        "timestamp": 1617067328
    },
    {
        "content": "<p>god i wonder how long actually building stdsimd will take with debug no-opt rustc+llvm</p>",
        "id": 232359951,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617067355
    },
    {
        "content": "<p><span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 232359958,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617067363
    },
    {
        "content": "<p>so x.py build has finished</p>",
        "id": 232361643,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617068906
    },
    {
        "content": "<p>does uh, anybody know how i can use this</p>",
        "id": 232361647,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617068912
    },
    {
        "content": "<p>perhaps i need to x.py install</p>",
        "id": 232361913,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617069171
    },
    {
        "content": "<p>Have you seen the dev guide?</p>",
        "id": 232362170,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617069362
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/\">https://rustc-dev-guide.rust-lang.org/</a></p>",
        "id": 232362220,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617069381
    },
    {
        "content": "<p>I remember seeing somewhere that you can install it to rustup, I've done it before but don't remember how</p>",
        "id": 232362240,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617069413
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html?highlight=Rustup#creating-a-rustup-toolchain\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html?highlight=Rustup#creating-a-rustup-toolchain</a></p>",
        "id": 232362342,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617069514
    },
    {
        "content": "<p>yeah i think its x.py install</p>",
        "id": 232363863,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617070937
    },
    {
        "content": "<p>which im runnning now but it's doing the stage 2 build</p>",
        "id": 232363867,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617070944
    },
    {
        "content": "<p>e.g. building debug rustc using debug rustc</p>",
        "id": 232363874,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617070951
    },
    {
        "content": "<p>which is, unsurprisingly, very slow</p>",
        "id": 232363885,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617070959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-03-29.20Meeting/near/232363874\">said</a>:</p>\n<blockquote>\n<p>e.g. building debug rustc using debug rustc</p>\n</blockquote>\n<p>you probably don't need this final step.</p>",
        "id": 232364811,
        "sender_full_name": "Jubilee",
        "timestamp": 1617071794
    },
    {
        "content": "<p>well</p>",
        "id": 232364920,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617071901
    },
    {
        "content": "<p>i'm on 202/218 so</p>",
        "id": 232364923,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617071906
    },
    {
        "content": "<p>okay so x.py finished the stage 2 build, then failed to install it</p>",
        "id": 232368965,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075431
    },
    {
        "content": "<p>I think I've only ever used the stage 1 compiler</p>",
        "id": 232369028,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617075486
    },
    {
        "content": "<p>same but i've never installed it globally</p>",
        "id": 232369051,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075511
    },
    {
        "content": "<p>or used it to build something external</p>",
        "id": 232369056,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075518
    },
    {
        "content": "<p>i dont know how to do that without installing it into rustup</p>",
        "id": 232369060,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075526
    },
    {
        "content": "<p>I've installed the stage 1 to rustup, never stage 2</p>",
        "id": 232369062,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617075530
    },
    {
        "content": "<p>how</p>",
        "id": 232369069,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075533
    },
    {
        "content": "<p>I think</p>",
        "id": 232369070,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617075533
    },
    {
        "content": "<p>how do you install either stage into rustup</p>",
        "id": 232369084,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075549
    },
    {
        "content": "<p>Let me see if it's in my shell history lol</p>",
        "id": 232369104,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617075568
    },
    {
        "content": "<p><code>rustup toolchain link stage1 build/x86_64-apple-darwin/stage1</code></p>",
        "id": 232369212,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617075641
    },
    {
        "content": "<p>That was months ago so hopefully not out of date</p>",
        "id": 232369235,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617075665
    },
    {
        "content": "<p>yeah i see</p>",
        "id": 232369244,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075678
    },
    {
        "content": "<p>thanks</p>",
        "id": 232369254,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617075687
    },
    {
        "content": "<p>Np. From there I think you can do <code>cargo +stage1 test</code> or whatever</p>",
        "id": 232369278,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617075712
    },
    {
        "content": "<p>well, after all this, it doesnt seem to have debug info. i have a bit more info than i started with, but i'm still dumped in aarch64 assembly:</p>\n<div class=\"codehilite\"><pre><span></span><code>* thread #9, name = &#39;LTO f64_ops.4vffyy4v-cgu.7&#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x8)\n    frame #0: 0x0000000100473f7c librustc_driver-6566963bd0589bc0.dylib`llvm::Type::getTypeID() const + 12\n    frame #1: 0x0000000100474468 librustc_driver-6566963bd0589bc0.dylib`llvm::Type::isVectorTy() const + 32\n    frame #2: 0x000000010047453c librustc_driver-6566963bd0589bc0.dylib`llvm::Type::getScalarType() const + 32\n    frame #3: 0x00000001007e4b68 librustc_driver-6566963bd0589bc0.dylib`llvm::Type::isIntOrIntVectorTy() const + 24\n    frame #4: 0x000000010311a8b0 librustc_driver-6566963bd0589bc0.dylib`llvm::EVT::isExtendedInteger() const + 116\n    frame #5: 0x000000010048cdb8 librustc_driver-6566963bd0589bc0.dylib`llvm::EVT::isInteger() const + 64\n    frame #6: 0x000000010278d710 librustc_driver-6566963bd0589bc0.dylib`llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&amp;, llvm::EVT, llvm::SDValue, llvm::SDNodeFlags) + 5776\n    frame #7: 0x0000000102778264 librustc_driver-6566963bd0589bc0.dylib`llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&amp;, llvm::EVT, llvm::SDValue) + 156\n    frame #8: 0x000000010231db08 librustc_driver-6566963bd0589bc0.dylib`performExtendCombine(llvm::SDNode*, llvm::TargetLowering::DAGCombinerInfo&amp;, llvm::SelectionDAG&amp;) + 832\n    frame #9: 0x0000000102317e48 librustc_driver-6566963bd0589bc0.dylib`llvm::AArch64TargetLowering::PerformDAGCombine(llvm::SDNode*, llvm::TargetLowering::DAGCombinerInfo&amp;) const + 1128\n    frame #10: 0x0000000102541298 librustc_driver-6566963bd0589bc0.dylib`(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*) + 364\n    frame #11: 0x000000010253a094 librustc_driver-6566963bd0589bc0.dylib`(anonymous namespace)::DAGCombiner::Run(llvm::CombineLevel) + 820\n    frame #12: 0x0000000102539ce0 librustc_driver-6566963bd0589bc0.dylib`llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level) + 92\n    frame #13: 0x00000001027df038 librustc_driver-6566963bd0589bc0.dylib`llvm::SelectionDAGISel::CodeGenAndEmitDAG() + 1084\n    frame #14: 0x00000001027deb8c librustc_driver-6566963bd0589bc0.dylib`llvm::SelectionDAGISel::SelectBasicBlock(llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, true, false, void&gt;, false, true&gt;, llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, true, false, void&gt;, false, true&gt;, bool&amp;) + 352\n    frame #15: 0x00000001027de010 librustc_driver-6566963bd0589bc0.dylib`llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&amp;) + 4444\n    frame #16: 0x00000001027dbb98 librustc_driver-6566963bd0589bc0.dylib`llvm::SelectionDAGISel::runOnMachineFunction(llvm::MachineFunction&amp;) + 1568\n    frame #17: 0x000000010229e0e8 librustc_driver-6566963bd0589bc0.dylib`(anonymous namespace)::AArch64DAGToDAGISel::runOnMachineFunction(llvm::MachineFunction&amp;) + 56\n    frame #18: 0x0000000102d18d00 librustc_driver-6566963bd0589bc0.dylib`llvm::MachineFunctionPass::runOnFunction(llvm::Function&amp;) + 460\n    frame #19: 0x000000010426b76c librustc_driver-6566963bd0589bc0.dylib`llvm::FPPassManager::runOnFunction(llvm::Function&amp;) + 548\n    frame #20: 0x0000000104272588 librustc_driver-6566963bd0589bc0.dylib`llvm::FPPassManager::runOnModule(llvm::Module&amp;) + 116\n    frame #21: 0x000000010426bfd8 librustc_driver-6566963bd0589bc0.dylib`(anonymous namespace)::MPPassManager::runOnModule(llvm::Module&amp;) + 688\n    frame #22: 0x000000010426bb70 librustc_driver-6566963bd0589bc0.dylib`llvm::legacy::PassManagerImpl::run(llvm::Module&amp;) + 272\n    frame #23: 0x00000001042729a4 librustc_driver-6566963bd0589bc0.dylib`llvm::legacy::PassManager::run(llvm::Module&amp;) + 36\n    frame #24: 0x00000001003f9a58 librustc_driver-6566963bd0589bc0.dylib`LLVMRustWriteOutputFile + 696\n    frame #25: 0x00000001003465a4 librustc_driver-6566963bd0589bc0.dylib`rustc_codegen_llvm::back::write::write_output_file::hc09c4bfb3a246709 + 356\n  * frame #26: 0x0000000100344f60 librustc_driver-6566963bd0589bc0.dylib`rustc_codegen_llvm::back::write::codegen::with_codegen::h9282ea3405df7f19 + 140\n    frame #27: 0x000000010034964c librustc_driver-6566963bd0589bc0.dylib`rustc_codegen_llvm::back::write::codegen::h18b6d47a71c14803 + 2616\n    frame #28: 0x0000000100384f44 librustc_driver-6566963bd0589bc0.dylib`rustc_codegen_ssa::back::write::finish_intra_module_work::ha36a9bd9f4a0717d + 180\n    frame #29: 0x00000001003802a8 librustc_driver-6566963bd0589bc0.dylib`rustc_codegen_ssa::back::write::execute_work_item::ha652a44c2011cc51 + 1228\n    frame #30: 0x000000010038b80c librustc_driver-6566963bd0589bc0.dylib`std::sys_common::backtrace::__rust_begin_short_backtrace::he5bf95f074532528 + 180\n    frame #31: 0x00000001003289e4 librustc_driver-6566963bd0589bc0.dylib`std::panicking::try::hc21045c482577b07 + 48\n    frame #32: 0x000000010038e33c librustc_driver-6566963bd0589bc0.dylib`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::hd4c96fd994a769dd + 144\n    frame #33: 0x0000000115c4ee34 libstd-405150871270d457.dylib`_$LT$alloc..boxed..Box$LT$F$C$A$GT$$u20$as$u20$core..ops..function..FnOnce$LT$Args$GT$$GT$::call_once::hc929de8808b588b8 [inlined] _$LT$alloc..boxed..Box$LT$F$C$A$GT$$u20$as$u20$core..ops..function..FnOnce$LT$Args$GT$$GT$::call_once::h2b5dd4f23298a6af at boxed.rs:1546:9 [opt]\n    frame #34: 0x0000000115c4ee28 libstd-405150871270d457.dylib`_$LT$alloc..boxed..Box$LT$F$C$A$GT$$u20$as$u20$core..ops..function..FnOnce$LT$Args$GT$$GT$::call_once::hc929de8808b588b8 at boxed.rs:1546 [opt]\n    frame #35: 0x0000000115c5073c libstd-405150871270d457.dylib`std::sys::unix::thread::Thread::new::thread_start::hd74574d62a5c9da7 at thread.rs:71:17 [opt]\n    frame #36: 0x000000019f93206c libsystem_pthread.dylib`_pthread_start + 320\n</code></pre></div>",
        "id": 232369790,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617076146
    },
    {
        "content": "<p>mm</p>",
        "id": 232371034,
        "sender_full_name": "Jubilee",
        "timestamp": 1617077259
    },
    {
        "content": "<p>try using the debug settings recommended in <a href=\"https://rustc-dev-guide.rust-lang.org/backend/debugging.html\">https://rustc-dev-guide.rust-lang.org/backend/debugging.html</a> and recover the LLVM IR if you can?</p>",
        "id": 232374432,
        "sender_full_name": "Jubilee",
        "timestamp": 1617080440
    },
    {
        "content": "<p>hmm, unfortunately, i'm not sure which file it is that it's segfaulting on. (also, i'll try this more tomorrow afternoon)</p>",
        "id": 232377162,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617083378
    },
    {
        "content": "<p>it's also not really a code generation bug, so much as a code generation crash. e.g. that seems to be geared towards cases where the LLVM output is incorrect, but in this case LLVM is derefing a null pointer</p>",
        "id": 232377256,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617083449
    },
    {
        "content": "<p>(well, effectively null — address of 0x8 means it's a field on a struct which is pointed to by a null pointer)</p>",
        "id": 232377264,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617083461
    },
    {
        "content": "<p>I asked for some advice over <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Debugging.20segfault.20in.20LLVM\">https://rust-lang.zulipchat.com/#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Debugging.20segfault.20in.20LLVM</a></p>",
        "id": 232377587,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617083804
    },
    {
        "content": "<p>oh, i guess i could get the IR that on the debug build turns into IR that on the release build segfaults. sadly, I don't really know where to start with that. I havent been paying attention to that PR (I basically only focus on this zulip)...</p>",
        "id": 232378118,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617084266
    },
    {
        "content": "<p>hm.</p>",
        "id": 232458279,
        "sender_full_name": "Jubilee",
        "timestamp": 1617122864
    },
    {
        "content": "<p>(unfortunately, i'm likely going to be unable to dig into this tonight)</p>",
        "id": 232511404,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617145519
    },
    {
        "content": "<p>does the issue repro when building tests for a aarch64 target on non-aarch64 though? e.g. say, <code>cargo test --target=aarch64-unknown-linux-gnu</code>?</p>",
        "id": 232511527,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617145585
    },
    {
        "content": "<p>It does not</p>",
        "id": 232511553,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617145609
    },
    {
        "content": "<p>It seems to be a problem with aarch64 hosts, not targets, I think?</p>",
        "id": 232511608,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617145638
    },
    {
        "content": "<p>nah, i just reproed it on x86_64-apple-darwin</p>",
        "id": 232511901,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617145809
    },
    {
        "content": "<p><code>cargo build --release --tests --target=aarch64-apple-darwin</code></p>",
        "id": 232511905,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617145811
    },
    {
        "content": "<p>From an x86-64 mac?  I'll need to see if I can repro</p>",
        "id": 232511979,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617145854
    },
    {
        "content": "<p>I swear I built it for aarch64-unknown-linux-gnu and couldn't repro</p>",
        "id": 232512017,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617145882
    },
    {
        "content": "<p>did you build with --tests?</p>",
        "id": 232512041,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617145917
    },
    {
        "content": "<p>Hm.... it's possible I forgot that</p>",
        "id": 232512097,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617145937
    },
    {
        "content": "<p>the code that segfaults is aarch64 instruction selection, and it being a null pointer, it doesnt really make sense that it would be host specific</p>",
        "id": 232512118,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617145954
    },
    {
        "content": "<p>Agreed, that definitely makes more sense</p>",
        "id": 232512138,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617145968
    },
    {
        "content": "<p>(i'm trying to move myself out of the critical path here, since i probably can't spend that much time on this)</p>",
        "id": 232512155,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617145986
    },
    {
        "content": "<p>That's fine, thanks for all the help</p>",
        "id": 232512182,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617146001
    },
    {
        "content": "<p>If I can repro tonight I can move forward with it</p>",
        "id": 232512194,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617146012
    },
    {
        "content": "<p>Most important will be stripping down to a minimal reproduction I think</p>",
        "id": 232512273,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617146056
    },
    {
        "content": "<p>right, which sounds like a lot of work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 232512369,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617146141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-03-29.20Meeting/near/232512155\">said</a>:</p>\n<blockquote>\n<p>(i'm trying to move myself out of the critical path here, since i probably can't spend that much time on this)</p>\n</blockquote>\n<p>you've given us a lot of help by confirming repro already, and getting a better backtrace.</p>",
        "id": 232519889,
        "sender_full_name": "Jubilee",
        "timestamp": 1617151689
    },
    {
        "content": "<p>sorry i couldn't help more!</p>",
        "id": 232520068,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617151821
    },
    {
        "content": "<p>oh, fyi, if you hit the segfault the steps to get it into e.g. lldb are</p>\n<ol>\n<li>run the failing command. it will say something like: process didn't exit successfully: <code>rustc $LOTS_OF_IMPORTANT_STUFF_HERE</code> (signal: 11, SIGSEGV: invalid memory reference)</li>\n<li>run <code>rustup +whatever which rustc</code>. it will spit out <code>$MY_RUSTC</code></li>\n<li>run <code>lldb -- $MY_RUSTC $LOTS_OF_IMPORTANT_STUFF_HERE</code> where <code>$LOTS_OF_IMPORTANT_STUFF_HERE</code> comes from step 1.</li>\n<li>type r, running the debugger, as always</li>\n</ol>",
        "id": 232520245,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617151989
    },
    {
        "content": "<p>in case that needed to be written down</p>",
        "id": 232520269,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617152021
    },
    {
        "content": "<p>Yes, that's very helpful</p>",
        "id": 232520628,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617152309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> I was just able to reproduce it cross-compiling so I should be able to pick it up from here</p>",
        "id": 232527670,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617158310
    },
    {
        "content": "<p>hurray!</p>",
        "id": 232527682,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617158325
    },
    {
        "content": "<p>:p</p>",
        "id": 232527686,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617158336
    },
    {
        "content": "<p>I think my mistake was even more embarrassing, I think I forgot to build it for release last time I tried</p>",
        "id": 232527724,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617158388
    }
]