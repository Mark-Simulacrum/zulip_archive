[
    {
        "content": "<p>I am getting this strange bug. The below fails:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    let a = i64x2::from_array([0, 0]);\n    let b = i64x2::from_array([1, -10]);\n    let max = a.max(b);\n    assert_eq!(max, i64x2::from_array([1, 0]));\n}\n</code></pre></div>\n<p>However, I can't find an obvious error in the core_simd code. Can someone reproduce this?</p>",
        "id": 274513250,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1646730619
    },
    {
        "content": "<p>that is <a href=\"https://github.com/rust-lang/portable-simd/issues/247\">portable-simd#247</a></p>",
        "id": 274515424,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646731982
    },
    {
        "content": "<p>basically, min/max are currently only defined for floats, so you're seeing Ord::max, which compares the whole vector as a unit, rather than lane-wise</p>",
        "id": 274515666,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646732089
    },
    {
        "content": "<p>is there an API to perform the lane-wise comparison?</p>",
        "id": 274515769,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1646732151
    },
    {
        "content": "<p>yes, lanes_lt combined with select</p>",
        "id": 274515874,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646732183
    },
    {
        "content": "<p>there isn't a lanewise min/max, though we plan on most likely adding one</p>",
        "id": 274515913,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646732217
    },
    {
        "content": "<p>we just rolled std::simd to arrow2 and Polars to give it a spin and had to revert all of that because of this. XD</p>",
        "id": 274516982,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1646732823
    },
    {
        "content": "<p>well, the correct max will probably just call lanes_lt and select internally, llvm has no separate simd integer max operations.</p>",
        "id": 274517435,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646733085
    },
    {
        "content": "<p>afaict lanewise <code>a.max(b)</code> is just <code>a.lanes_lt(b).select(b, a)</code></p>",
        "id": 274517740,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646733251
    },
    {
        "content": "<p>created: <a href=\"https://github.com/rust-lang/portable-simd/issues/257\">https://github.com/rust-lang/portable-simd/issues/257</a></p>",
        "id": 274518861,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646733853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399416\">Jorge Leitao</span> has marked this topic as resolved.</p>",
        "id": 274518934,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646733914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/.E2.9C.94.20incorrect.20max/near/274517435\">said</a>:</p>\n<blockquote>\n<p>well, the correct max will probably just call lanes_lt and select internally, llvm has no separate simd integer max operations.</p>\n</blockquote>\n<p>That used to be the case, but on trunk they've added them: <a href=\"https://llvm.org/docs/LangRef.html#llvm-smax-intrinsic\">https://llvm.org/docs/LangRef.html#llvm-smax-intrinsic</a></p>",
        "id": 274601143,
        "sender_full_name": "scottmcm",
        "timestamp": 1646770973
    },
    {
        "content": "<p>ooh, neat!</p>",
        "id": 274602492,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646771607
    },
    {
        "content": "<p>yooo that's on 13.0</p>",
        "id": 274602760,
        "sender_full_name": "Jubilee",
        "timestamp": 1646771727
    },
    {
        "content": "<p>Oh I think it's on 12 too.</p>",
        "id": 274602912,
        "sender_full_name": "Jubilee",
        "timestamp": 1646771791
    },
    {
        "content": "<p>it was added here: <a href=\"https://github.com/llvm/llvm-project/commit/fef0cf081076006887362d6bfcfc306522ce2bd3\">https://github.com/llvm/llvm-project/commit/fef0cf081076006887362d6bfcfc306522ce2bd3</a></p>",
        "id": 274604553,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646772563
    },
    {
        "content": "<p>they added abs too</p>",
        "id": 274604686,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1646772605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"399416\">Jorge Leitao</span> has marked this topic as resolved.</p>",
        "id": 275136848,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647152493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/.E2.9C.94.20incorrect.20max/near/275127773\">said</a>:</p>\n<blockquote>\n<p>I'm just not sure we should be putting this particular state out for public consumption, explaining \"sometimes you use <code>lanes_eq</code>, sometimes you use <code>eq</code>\" probably isn't going to give anyone much confidence in the implementation</p>\n</blockquote>\n<p>dunno, makes a lot of sense to me -- these two functions don't even have the same type, so it seems unlikely one would confuse them.<br>\nbut then it should be <code>lanes_max</code> etc. (in particular it should also be that for float vectors, so this is somewhat orthogonal to <code>Ord</code>.)</p>",
        "id": 275186069,
        "sender_full_name": "RalfJ",
        "timestamp": 1647221601
    }
]