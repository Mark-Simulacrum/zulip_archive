[
    {
        "content": "<p>I think it's safe to say that if we're going to favor portability, we also will have to occasionally lower ops to scalar variants on some targets (that's the whole idea, to a certain extent). Lets say I'm using core::simd, and consider this quite undesirable — like, imagine I'm writing a vectorized implementation of something in libcore or libstd, or honestly any performance-oriented crate.</p>\n<p>Is there some way I can ensure, possibly via tooling we can provide, that the code will, in fact, run vectorized without hitting scalar fallbacks on a given target. I think the answer is clearly no at the moment, but that seems bad, so can we brainstorm ways this could work? Lets assume we want to have the answer here be better than either \"examine the generated code\" or \"profile it\".</p>\n<p>Note that non-<code>core</code> simd crates built from non-portable operations can trivially provide these guarantees, by just not supporting the operations. Obviously we can't do that, but if I'm bothering to write something in SIMD, this can defeat the entire point — here's no reason to think of an algorithm that processes 16 bytes at a time in batch operations, if one of those operations happens to just loop over each byte.</p>",
        "id": 233953628,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618059821
    },
    {
        "content": "<p>I'm not sure this is completely reasonable since some operations like Div won't have a vectorized implementation on most architectures.  I think it depends what you mean by vectorized too, what about horizontal reductions that might result in say 3 SIMD instructions instead of 4 scalar ones?</p>",
        "id": 233954710,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618060792
    },
    {
        "content": "<p>I know it's explicitly what you said you don't want to do, but I've definitely had to examine generated code and profile it even when using vendor APIs</p>",
        "id": 233954854,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618060895
    },
    {
        "content": "<p>Anyway, as far as tooling goes, if it were possible I think it would need to be part of LLVM?  Maybe there's some way we could hack it together but in the end we don't have any control over how IR is lowered to instructions</p>",
        "id": 233954962,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618060982
    },
    {
        "content": "<p>I don't personally mind looking at asm, but it can be easy to miss things, especially in a large vectorized function. Horizontal ops are not what I'm worried about, since if they're being done, it's explicit and at least something you can know to watch out for.</p>",
        "id": 233964109,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618067966
    },
    {
        "content": "<p>My concern is the end of this that we have a pretty API which is easy to end up being not substantially faster than the scalar version, and for people to have no real path forward for figuring out why. Autovectorization being a perf footgun is why people don't like relying on it, and I'd like this not to be that way at all</p>",
        "id": 233964258,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068080
    },
    {
        "content": "<p>Yeah, something that can take a rust function and report that you <em>didn't</em> get the vector version of <code>foo_op</code> that you intended. so a horizontal op that lowers to whatever bad-performing horizontal hardware thing is... what you wrote at least.</p>",
        "id": 233964275,
        "sender_full_name": "Lokathor",
        "timestamp": 1618068117
    },
    {
        "content": "<p>but getting 4 libm::sqrt calls is <em>not</em> want you want to see</p>",
        "id": 233964334,
        "sender_full_name": "Lokathor",
        "timestamp": 1618068145
    },
    {
        "content": "<p>I feel like that falls on us and not the end user to test</p>",
        "id": 233964504,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068312
    },
    {
        "content": "<p>In general the other thing I'd like to avoid is for people to have a good reason to use vendor intrinsics over portable simd, in cases where the vendor intrinsics are (nominally) totally covered by the API.</p>",
        "id": 233964524,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068326
    },
    {
        "content": "<p>We know what's going on with sqrt for example and we know how to fix it</p>",
        "id": 233964535,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> is your concern that for some reason LLVM might generate addss instead of vaddps?</p>",
        "id": 233964607,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068397
    },
    {
        "content": "<p>Ehhhh, I think it falls on us to provide an API either without that sort of footgun or that at least provides a way to detect it. It doesn't take many times getting bit by something like that before you just give up on the thing and do the way that can't bite you.</p>",
        "id": 233964608,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068397
    },
    {
        "content": "<p>not at all</p>",
        "id": 233964619,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068409
    },
    {
        "content": "<p>no, it's that i'll call a function that isn't supported in a vectorized way on the platform, or that has a <code>blah.iter()...</code> loop inside its body in the rust for some reason (i saw we had one on i586 for some function and thought \"huh that seems like quite a footgun\")</p>",
        "id": 233964709,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068495
    },
    {
        "content": "<p>but it wasnt until today when i was picking up a patch for libcore, and thought \"this could be vectorized\" when i thought about this, mostly because if i'm going to take the time to write it, and the libs team is going to bother having the more complex code like that in there</p>",
        "id": 233964743,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068565
    },
    {
        "content": "<p>it needs to be doing what it thinks its doing</p>",
        "id": 233964749,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068574
    },
    {
        "content": "<p>So that is there on i586 to avoid some weird issues with 80-bit floats.  That only occurs on platforms that don't have SSE anyway</p>",
        "id": 233964750,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068575
    },
    {
        "content": "<p>sure, i wasn't super worried about that particuar case</p>",
        "id": 233964756,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068590
    },
    {
        "content": "<p>we have other cases where we have scalar loops thouhg</p>",
        "id": 233964759,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068597
    },
    {
        "content": "<p>We do?</p>",
        "id": 233964812,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068608
    },
    {
        "content": "<p>uh, do we not anymore</p>",
        "id": 233964821,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068619
    },
    {
        "content": "<p>I don't think we have any</p>",
        "id": 233964835,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068632
    },
    {
        "content": "<p>either way, LLVM will definitely emit those for unhandled things</p>",
        "id": 233964842,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068634
    },
    {
        "content": "<p>Yeah of course, like integer division on nearly every platform</p>",
        "id": 233964859,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068655
    },
    {
        "content": "<p>right</p>",
        "id": 233964861,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068659
    },
    {
        "content": "<p>nothing we can do about that, but perhaps we can somehow provide some tooling that either peeks at IR or something</p>",
        "id": 233964887,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068694
    },
    {
        "content": "<p>I'm just not sure that whether or not it uses a vector op is the right question most of the time, a vectorized square root will still be slower than say some non-vectorized shuffle</p>",
        "id": 233964948,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068727
    },
    {
        "content": "<p>yes, but if i told it to do the vectorized sqrt</p>",
        "id": 233964971,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068745
    },
    {
        "content": "<p>its doing what i said and that problem with the code is obvious</p>",
        "id": 233964977,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068756
    },
    {
        "content": "<p>in that its in the source</p>",
        "id": 233964980,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068761
    },
    {
        "content": "<p>i mean it almost feels like a thing we could have as a lint, where we just know which targets support what things. but that probably gets too unmanagable when you consider target features and such</p>",
        "id": 233964988,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068775
    },
    {
        "content": "<p>My concern with that is that you didn't tell it to do a vectorized square root, you told it to do a square root on a vector and try its best</p>",
        "id": 233965038,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068828
    },
    {
        "content": "<p>sure, it's still doing what you told it to do</p>",
        "id": 233965105,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068849
    },
    {
        "content": "<p>Inevitably certain things in many SIMD algorithms will not be vectorized because they can't be</p>",
        "id": 233965124,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068870
    },
    {
        "content": "<p>Also I usually multiversion functions so one variant will inevitably have no or minimal vector ops I think</p>",
        "id": 233965181,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618068930
    },
    {
        "content": "<p>hm? for a large class of SIMD algorithms the entire speedup comes from processing things entirely in <code>lane</code> items at a time, and as soon as you add a fully scalar operation you end up wiht almost no benefit to using simd</p>",
        "id": 233965182,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618068933
    },
    {
        "content": "<p>Of course but there are plenty of algorithms that aren't fully parallel that still benefit from SIMD</p>",
        "id": 233965294,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618069031
    },
    {
        "content": "<p>My point is that I don't think the compiler is smart enough to figure that out a lot of the time, and I don't think it's reasonable to put a bunch of #[allow] or whatever to silence those false alarms</p>",
        "id": 233965398,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618069127
    },
    {
        "content": "<p>well, sure, but i think the fully parallel ones are probably more common, and even if not, they're the ones hurt most by having something surprisingly iterating over each lane</p>",
        "id": 233965421,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618069161
    },
    {
        "content": "<p>oh if it were a lint it would be allow by default</p>",
        "id": 233965425,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618069167
    },
    {
        "content": "<p>you'd only turn it on when you wanted to check this stuff</p>",
        "id": 233965434,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618069181
    },
    {
        "content": "<p>a separate tool would be fine</p>",
        "id": 233965513,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618069227
    },
    {
        "content": "<p>I guess what I'm thinking is that since we're targeting a minimal SIMD subset there's no reason to suspect it will ever generate truly scalar ops (once we sort out the libm problem) except for Div</p>",
        "id": 233965559,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618069276
    },
    {
        "content": "<p>i just want to avoid a situation where the best practice for high perf simd code ends up being using core::arch for everything, because the stdsimd api is too unreliable</p>",
        "id": 233965656,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618069349
    },
    {
        "content": "<p>Yeah definitely.  I think that's prevented by our choice of functions though</p>",
        "id": 233965892,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618069576
    },
    {
        "content": "<p>hmm, i think we have a lot of things that are not supported in vectorized ways by all arches</p>",
        "id": 233965973,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618069649
    },
    {
        "content": "<p>Do you have a specific example you're concerned about?</p>",
        "id": 233965989,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618069674
    },
    {
        "content": "<p>Nothing comes to mind to me</p>",
        "id": 233966029,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618069686
    },
    {
        "content": "<p>hm, i guess we'll see. i think there are a lot of sse2 examples. but maybe its not <em>that</em> bad</p>",
        "id": 233966189,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618069861
    },
    {
        "content": "<p>I think there are a bunch that correspond to libm functions but that's more of a problem with our codegen and not some fundamental reason they can't be vector ops</p>",
        "id": 233966423,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070075
    },
    {
        "content": "<p>i think the libm problem is separate</p>",
        "id": 233966438,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618070097
    },
    {
        "content": "<p>Agreed, just making sure</p>",
        "id": 233966451,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070107
    },
    {
        "content": "<p>i'm imagining the future world in which we solve the libm problem</p>",
        "id": 233966465,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618070127
    },
    {
        "content": "<p>because i cant bear to imagine the future where we dont</p>",
        "id": 233966475,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618070136
    },
    {
        "content": "<p>or well</p>",
        "id": 233966481,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618070139
    },
    {
        "content": "<p>Haha I'll PR LLVM myself if that's what it takes</p>",
        "id": 233966563,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070198
    },
    {
        "content": "<p>I looked over the float API and I don't think there's anything there that couldn't work with SSE2</p>",
        "id": 233966568,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070216
    },
    {
        "content": "<p>Integer too</p>",
        "id": 233966589,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070237
    },
    {
        "content": "<p>Really the only weird things are if your platform doesn't have saturating integer math, or if you try to do a nasty shuffle</p>",
        "id": 233966597,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070265
    },
    {
        "content": "<p>or at least the future where we dont solve it should be the future were we come up with a special case hack for floor/round and such, and then dont provide fancy functions</p>",
        "id": 233966610,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618070281
    },
    {
        "content": "<p>but that would suck</p>",
        "id": 233966667,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618070305
    },
    {
        "content": "<p>Yep</p>",
        "id": 233966669,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070314
    },
    {
        "content": "<p>I clicked through the docs and I can't imagine any SIMD instruction set that doesn't have these operations</p>",
        "id": 233966699,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070358
    },
    {
        "content": "<p>Unless it's something like SSE and just doesn't have integer operations at all</p>",
        "id": 233966845,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618070455
    },
    {
        "content": "<p>sse absolutely has integer operations</p>",
        "id": 233973366,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618076427
    },
    {
        "content": "<p>they're just not the integer operations that you want</p>",
        "id": 233973384,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618076441
    },
    {
        "content": "<p>unless what you want to do is like, motion estimation for some video codec</p>",
        "id": 233973411,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618076474
    },
    {
        "content": "<p>but i'll have you know i used <code>_mm_madd_epi16</code> very recently, and even thought \"damn, i'll have to come up with another way to do this on non-intel\"</p>",
        "id": 233973502,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618076550
    },
    {
        "content": "<p>I thought not a single integer vector operation came until SSE2</p>",
        "id": 233973504,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618076551
    },
    {
        "content": "<p>oh maybe sse2</p>",
        "id": 233973509,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618076557
    },
    {
        "content": "<p>sorry, i forgot that SSE existed on its own since yeah its practically useless</p>",
        "id": 233973526,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618076591
    },
    {
        "content": "<p>Lol. Agreed</p>",
        "id": 233973529,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618076598
    },
    {
        "content": "<p>I think SSE and arm v6 SIMD served the same purpose, providing IEEE floats with SIMD tacked on and ignoring integer SIMD</p>",
        "id": 233973685,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618076744
    },
    {
        "content": "<p>I've never heard of an integer</p>",
        "id": 233975713,
        "sender_full_name": "Lokathor",
        "timestamp": 1618078822
    },
    {
        "content": "<p>what's an integer?</p>",
        "id": 233991142,
        "sender_full_name": "Jubilee",
        "timestamp": 1618090558
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/issues/76#issuecomment-821749814\">https://github.com/rust-lang/stdsimd/issues/76#issuecomment-821749814</a> optimizer go brrr</p>",
        "id": 234951635,
        "sender_full_name": "Jubilee",
        "timestamp": 1618625771
    },
    {
        "content": "<p>Hmm that's a change in LLVM 12 I assume?</p>",
        "id": 234952198,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618626390
    },
    {
        "content": "<p>probably</p>",
        "id": 234952315,
        "sender_full_name": "Jubilee",
        "timestamp": 1618626522
    },
    {
        "content": "<p>wow, aarch64 really just... handles this like a boss:</p>\n<div class=\"codehilite\" data-code-language=\"a64asm\"><pre><span></span><code>&lt;&amp;T as core::fmt::Debug&gt;::fmt:\n        ldr     x0, [x0]\n        b       _ZN4core3fmt5float50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$f32$GT$3fmt17h68f66863527610f0E\n\ncore::ptr::drop_in_place&lt;&amp;f32&gt;:\n        ret\n\nexample::f32x4::ceil:\n        ldr     q0, [x0]\n        frintp  v0.4s, v0.4s\n        str     q0, [x8]\n        ret\n\nexample::f32x4::floor:\n        ldr     q0, [x0]\n        frintm  v0.4s, v0.4s\n        str     q0, [x8]\n        ret\n\nexample::f32x4::round:\n        ldr     q0, [x0]\n        frinta  v0.4s, v0.4s\n        str     q0, [x8]\n        ret\n\nexample::f32x4::trunc:\n        ldr     q0, [x0]\n        frintz  v0.4s, v0.4s\n        str     q0, [x8]\n        ret\n\nexample::f32x4::mul_add:\n        ldr     q0, [x0]\n        ldr     q1, [x1]\n        ldr     q2, [x2]\n        fmla    v2.4s, v1.4s, v0.4s\n        str     q2, [x8]\n        ret\n\nexample::f32x4::abs:\n        ldr     q0, [x0]\n        fabs    v0.4s, v0.4s\n        str     q0, [x8]\n        ret\n\nexample::f32x4::sqrt:\n        ldr     q0, [x0]\n        fsqrt   v0.4s, v0.4s\n        str     q0, [x8]\n        ret\n</code></pre></div>",
        "id": 234953080,
        "sender_full_name": "Jubilee",
        "timestamp": 1618627367
    },
    {
        "content": "<p>It's a great instruction set</p>",
        "id": 234953166,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618627497
    },
    {
        "content": "<p>upsetting that drop_in_place is still visible</p>",
        "id": 234956294,
        "sender_full_name": "Lokathor",
        "timestamp": 1618630796
    },
    {
        "content": "<p>has to be for any trait object</p>",
        "id": 234956367,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618630841
    },
    {
        "content": "<p>the dtor is referenced in the vtable</p>",
        "id": 234956376,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1618630859
    },
    {
        "content": "<p>i guess it's called from fmt?</p>",
        "id": 234956749,
        "sender_full_name": "Lokathor",
        "timestamp": 1618631397
    },
    {
        "content": "<p>yeah.</p>",
        "id": 234956901,
        "sender_full_name": "Jubilee",
        "timestamp": 1618631586
    },
    {
        "content": "<p>well at least it's not as bad as the assembly for the instruction_set attribute</p>",
        "id": 234959219,
        "sender_full_name": "Lokathor",
        "timestamp": 1618634511
    },
    {
        "content": "<p>Should we document <strong>known</strong> vectorization \"inflection points\"?</p>",
        "id": 236095515,
        "sender_full_name": "Jubilee",
        "timestamp": 1619386499
    },
    {
        "content": "<p>What do you mean by that?</p>",
        "id": 236095541,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619386525
    },
    {
        "content": "<p>\"on SSE3, this is probably scalarized, on SSE4.1, this is probably vectorized.\"</p>",
        "id": 236095553,
        "sender_full_name": "Jubilee",
        "timestamp": 1619386542
    },
    {
        "content": "<p>We could be slightly nebulous by saying things like \"recommended with SSE3 and better on x86_64\".</p>",
        "id": 236095643,
        "sender_full_name": "Jubilee",
        "timestamp": 1619386608
    },
    {
        "content": "<p>I don't think we should do that because it depends on the function</p>",
        "id": 236095668,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619386656
    },
    {
        "content": "<p>oh yeah I meant on a function-by-function basis.</p>",
        "id": 236095677,
        "sender_full_name": "Jubilee",
        "timestamp": 1619386676
    },
    {
        "content": "<p>And it would get very confusing very fast for something supposedly portable</p>",
        "id": 236095679,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619386679
    },
    {
        "content": "<p>lol, tru.</p>",
        "id": 236095698,
        "sender_full_name": "Jubilee",
        "timestamp": 1619386684
    },
    {
        "content": "<p>We already have a path forward through a vector math lib</p>",
        "id": 236095731,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619386708
    },
    {
        "content": "<p>yeah, just <em>gurgling noises</em></p>",
        "id": 236095753,
        "sender_full_name": "Jubilee",
        "timestamp": 1619386743
    }
]