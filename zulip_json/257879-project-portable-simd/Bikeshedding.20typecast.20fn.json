[
    {
        "content": "<p>Oh?</p>",
        "id": 259149006,
        "sender_full_name": "Jubilee",
        "timestamp": 1635276710
    },
    {
        "content": "<p>I think the name we pick should be very short, since it will be a common operation, hence why I suggested just plain <code>to</code></p>",
        "id": 259149069,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276727
    },
    {
        "content": "<p>I don't like it because it's already a Simd, maybe not the same one, but the conversion is specifically the scalar inside</p>",
        "id": 259149109,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276763
    },
    {
        "content": "<p>it should be easier to reach for than the equivalent bitcast</p>",
        "id": 259149163,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276794
    },
    {
        "content": "<p>Simd is a type parameterized by that scalar tho'.</p>",
        "id": 259149168,
        "sender_full_name": "Jubilee",
        "timestamp": 1635276797
    },
    {
        "content": "<p>Plain <code>to</code> is maybe a little odd if you use type deduction and you just have <code>a = a.to()</code></p>",
        "id": 259149187,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276808
    },
    {
        "content": "<p>like <code>x as _</code></p>",
        "id": 259149223,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276825
    },
    {
        "content": "<p>Yeah it is, but that name implies you're turning something that isn't a Simd into a Simd, I think?</p>",
        "id": 259149242,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276834
    },
    {
        "content": "<p>imho it implies your converting, <em>what</em> your converting is unsaid</p>",
        "id": 259149338,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276868
    },
    {
        "content": "<p>remember <code>i32::into() -&gt; i64</code>? <code>to</code> can be similar</p>",
        "id": 259149424,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276913
    },
    {
        "content": "<p>I mean,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_vec</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259149603,
        "sender_full_name": "Jubilee",
        "timestamp": 1635276989
    },
    {
        "content": "<p>I guess all I am getting at is that <code>to_int_unchecked</code> for example indicates that the scalar is changing</p>",
        "id": 259149636,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277004
    },
    {
        "content": "<p>if you want to supply the target type: <code>Simd::&lt;f32, N&gt;::to::&lt;f64&gt;()</code></p>",
        "id": 259149637,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635277005
    },
    {
        "content": "<p>But fair.</p>",
        "id": 259149685,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277032
    },
    {
        "content": "<p>I agree that it wouldn't be wrong, I just don't think that it's clear either</p>",
        "id": 259149732,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277059
    },
    {
        "content": "<p>I don't think plain <code>to</code> is either</p>",
        "id": 259149757,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277072
    },
    {
        "content": "<p><code>to</code> is cute but would wind up being a bit cryptic often, yeah.</p>",
        "id": 259149833,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277094
    },
    {
        "content": "<p>I mean I guess we could just leave it to normal try_into/into conversions.</p>",
        "id": 259149876,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277111
    },
    {
        "content": "<p>ugh no.</p>",
        "id": 259149884,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277115
    },
    {
        "content": "<p>I agree it's the same as <code>as _</code> but that's a commonly known pattern</p>",
        "id": 259149900,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277122
    },
    {
        "content": "<p><code>into</code>, because it's a trait, makes it a pain to supply the target type, <code>to</code> you can just write <code>x.to::&lt;f32&gt;()</code></p>",
        "id": 259150015,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635277182
    },
    {
        "content": "<p>true.</p>",
        "id": 259150019,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277190
    },
    {
        "content": "<p>we should split this off into a simd type conversions topic...</p>",
        "id": 259150135,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635277243
    },
    {
        "content": "<p>Eh it's relevant to this lol</p>",
        "id": 259150159,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277259
    },
    {
        "content": "<p>it's relevant, but anyone looking for type conversions discussion will miss it</p>",
        "id": 259150230,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635277301
    },
    {
        "content": "<p>If there wasn't already a naming convention in rust I would just go with <code>cast</code></p>",
        "id": 259150256,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277312
    },
    {
        "content": "<p>I dislike <code>cast</code> because it is ambiguous on the cost dimension.</p>",
        "id": 259150547,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Bikeshedding.20typecast.20fn/near/259150135\">said</a>:</p>\n<blockquote>\n<p>we should split this off into a simd type conversions topic...</p>\n</blockquote>\n<p>Done.</p>",
        "id": 259150634,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277465
    },
    {
        "content": "<p>one other benefit of <code>to</code> over <code>into</code>: you only have to specify the target lane type, you don't have to write out the full target simd type</p>",
        "id": 259150772,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635277529
    },
    {
        "content": "<p>Yeah it is a little ambiguous, though the convention we have isn't really suitable for capturing the cost either</p>",
        "id": 259150778,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277532
    },
    {
        "content": "<p>hm.</p>",
        "id": 259150812,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277555
    },
    {
        "content": "<p>Technically this should be <code>into_</code> then I think, since integer casts are so inexpensive</p>",
        "id": 259150872,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277566
    },
    {
        "content": "<p>We could just use separate functions.</p>",
        "id": 259150876,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277567
    },
    {
        "content": "<p>I considered that.  It's much more explicit</p>",
        "id": 259150932,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277597
    },
    {
        "content": "<p>separate functions makes it a pain to use generically...</p>",
        "id": 259150939,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635277601
    },
    {
        "content": "<p>Yeah, I kind of agree, though it's no worse than <code>to_int_unchecked</code></p>",
        "id": 259151049,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277661
    },
    {
        "content": "<p>I was thinking it would be split along the integer/float dimension.</p>",
        "id": 259151310,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277774
    },
    {
        "content": "<p>I'm not exactly sure what you'd call the width conversions</p>",
        "id": 259151507,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635277871
    },
    {
        "content": "<p><code>resize</code>. :^)</p>",
        "id": 259151533,
        "sender_full_name": "Jubilee",
        "timestamp": 1635277887
    },
    {
        "content": "<p>idea:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdCast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cast</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Simd</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">to</span><span class=\"o\">&lt;</span><span class=\"n\">Tgt</span>: <span class=\"nc\">SimdCast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"n\">Tgt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SimdCast</span>::<span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259151623,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635277929
    },
    {
        "content": "<p>I think my fundamental issue is still that <code>x = x.to()</code> is nearly meaningless, though the implementation is good</p>",
        "id": 259151922,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278064
    },
    {
        "content": "<p>then write <code>x = x.to::&lt;f32&gt;()</code> ... much more obvious</p>",
        "id": 259151997,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278102
    },
    {
        "content": "<p>imho any word we pick will have the same issue as <code>x = x.to()</code></p>",
        "id": 259152177,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278165
    },
    {
        "content": "<p>I agree with Caleb that I don't want to trust people that much to not write bad code lol</p>",
        "id": 259152181,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278166
    },
    {
        "content": "<p>it's quite similar to <code>x = x.into()</code> imho</p>",
        "id": 259152407,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278253
    },
    {
        "content": "<p>Hmm that's bounded by each having an explicit implementation (even if it's often in terms of <code>From</code>).</p>",
        "id": 259152484,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278282
    },
    {
        "content": "<p><code>Into</code>, like <code>as</code> are common though</p>",
        "id": 259152506,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278285
    },
    {
        "content": "<p>So there's a search space.</p>",
        "id": 259152511,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278291
    },
    {
        "content": "<p>You see a plain <code>into()</code> and know exactly what it's doing</p>",
        "id": 259152540,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278306
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 259152545,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278312
    },
    {
        "content": "<p>ok, how about <code>str::parse</code> which has a nearly identical design?</p>",
        "id": 259152603,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278341
    },
    {
        "content": "<p>\"convert the type in a reasonable way\" basically</p>",
        "id": 259152605,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278341
    },
    {
        "content": "<p>That's always from str to something else.</p>",
        "id": 259152710,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278388
    },
    {
        "content": "<p>Parse is a word that can be searched, and also guessed by knowing the what the word parse means</p>",
        "id": 259152744,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278400
    },
    {
        "content": "<p>It's literally impossible to search the word \"to\"</p>",
        "id": 259152820,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278409
    },
    {
        "content": "<p>yes.</p>",
        "id": 259152842,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278414
    },
    {
        "content": "<p>k, name it <code>cast</code> then</p>",
        "id": 259152916,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278437
    },
    {
        "content": "<p>my brain, throwing darts at a wall: <code>fn rescale</code></p>",
        "id": 259152924,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278440
    },
    {
        "content": "<p>I'm amenable to cast</p>",
        "id": 259152962,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278461
    },
    {
        "content": "<p>I definitely have begun to see the merits of <code>fn cast</code>, though I want to swirl it around in my brain before agreeing outright.</p>",
        "id": 259153010,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278483
    },
    {
        "content": "<p>It doesn't indicate cost but converting ints vs floats is totally different in cost anyway</p>",
        "id": 259153018,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278485
    },
    {
        "content": "<p><code>rescale</code> makes me think of multiplying lanes by some scaling factor, like to_degrees</p>",
        "id": 259153065,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278504
    },
    {
        "content": "<p>In a sense, it is, multiplying the bit count. :^)</p>",
        "id": 259153109,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278522
    },
    {
        "content": "<p>e.g. <code>rescale</code> &lt;-&gt; <code>x * 3.456</code></p>",
        "id": 259153174,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278538
    },
    {
        "content": "<p>It's also mostly a pun on \"scalar\" tho'.</p>",
        "id": 259153178,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278540
    },
    {
        "content": "<p>And we have clearly hit the point where lobbing ideas from left field is not going to hurt.</p>",
        "id": 259153259,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278581
    },
    {
        "content": "<p>i'd be happy if we used the <code>to</code> API I posted, but renamed to <code>cast</code></p>",
        "id": 259153480,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278672
    },
    {
        "content": "<p>Yeah, I'd be okay with that too</p>",
        "id": 259153527,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278691
    },
    {
        "content": "<p>We probably want to add a simd_cast_checked intrinsic for that</p>",
        "id": 259153629,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278734
    },
    {
        "content": "<p>lol.</p>",
        "id": 259153667,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278753
    },
    {
        "content": "<p>Well simd_saturating_cast might be more descriptive</p>",
        "id": 259153668,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278753
    },
    {
        "content": "<p>yes.</p>",
        "id": 259153677,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278757
    },
    {
        "content": "<p>Well.</p>",
        "id": 259153696,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278762
    },
    {
        "content": "<p>...not quite.</p>",
        "id": 259153732,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278766
    },
    {
        "content": "<p>wait, wait, <code>as</code> isn't checked...</p>",
        "id": 259153744,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278769
    },
    {
        "content": "<p>It is now!</p>",
        "id": 259153755,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278777
    },
    {
        "content": "<p>It's not checked, it's saturating</p>",
        "id": 259153774,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278789
    },
    {
        "content": "<p>aaa why does std::arch have to be out-of-compiler.</p>",
        "id": 259153787,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278793
    },
    {
        "content": "<p>makes it hard to coordinate.</p>",
        "id": 259153795,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278798
    },
    {
        "content": "<p>sigh.</p>",
        "id": 259153804,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278802
    },
    {
        "content": "<p>Well, we are too, pot, kettle</p>",
        "id": 259153813,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278808
    },
    {
        "content": "<p>Lol</p>",
        "id": 259153821,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278814
    },
    {
        "content": "<p>Eh the subtree will be simultaneously editable, which is what really matters.</p>",
        "id": 259153849,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278827
    },
    {
        "content": "<p>saturating isn't checked...checked is panicking or returning result/option</p>",
        "id": 259153854,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278829
    },
    {
        "content": "<p>trollpost: <code>simd_as</code></p>",
        "id": 259153873,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278838
    },
    {
        "content": "<p>Yeah that's why I amended what I said</p>",
        "id": 259153906,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278854
    },
    {
        "content": "<p>Lol, it's dumb but I'm not totally opposed to that because it's... Accurate</p>",
        "id": 259153941,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278866
    },
    {
        "content": "<p>also, saturating doesn't match <code>as</code> for int -&gt; int</p>",
        "id": 259154040,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278894
    },
    {
        "content": "<p>Yes, I was partly saying it because that is what the <code>\"platform-intrinsic\"</code> should be named.</p>",
        "id": 259154118,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278932
    },
    {
        "content": "<p>how about naming the intrinsic <code>simd_as</code> since it matches <code>as</code>'s behavior? Imho the public Simd method shouldn't be named <code>simd_as</code> tho</p>",
        "id": 259154205,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278978
    },
    {
        "content": "<p>I'm okay with naming the platform intrinsic that lol</p>",
        "id": 259154222,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635278987
    },
    {
        "content": "<p>but tbh it's not a <em>terrible</em> name for the user fn</p>",
        "id": 259154227,
        "sender_full_name": "Jubilee",
        "timestamp": 1635278992
    },
    {
        "content": "<p>maybe <code>as_</code>?</p>",
        "id": 259154244,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635278999
    },
    {
        "content": "<p>CONSIDERING THE ALTERNATIVES</p>",
        "id": 259154248,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279001
    },
    {
        "content": "<p><code>as_</code> in function names has a different implication, unfortunately</p>",
        "id": 259154321,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279022
    },
    {
        "content": "<p>yeah.</p>",
        "id": 259154329,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279027
    },
    {
        "content": "<p><code>lw_as</code> -- lanewise as</p>",
        "id": 259154400,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279060
    },
    {
        "content": "<p>If there wasn't essentially a language-wide tendency away from <code>as</code>, I would seriously propose just implementing <code>as</code> for Simd.</p>",
        "id": 259154403,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279062
    },
    {
        "content": "<p>Ohh, <code>lanes_as</code></p>",
        "id": 259154436,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279077
    },
    {
        "content": "<p>Hmm that could work</p>",
        "id": 259154459,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279087
    },
    {
        "content": "<p>I still don't love it, but I don't love <code>lanes_eq</code> either and I think it's the best name we've come up with</p>",
        "id": 259154573,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279127
    },
    {
        "content": "<p>And the type it should be templated on is the scalar, of course</p>",
        "id": 259154618,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279151
    },
    {
        "content": "<p>Ugh I've been writing too much C++</p>",
        "id": 259154650,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279171
    },
    {
        "content": "<p>Generic over</p>",
        "id": 259154656,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279174
    },
    {
        "content": "<p>there but for the grace of Ferris</p>",
        "id": 259154715,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279201
    },
    {
        "content": "<p>same thing...:)</p>",
        "id": 259154723,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279203
    },
    {
        "content": "<p><code>x.lanes_as::&lt;f32&gt;()</code> isn't too bad</p>",
        "id": 259154773,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279230
    },
    {
        "content": "<p>It reads well</p>",
        "id": 259154833,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279246
    },
    {
        "content": "<p>if only there was a shorter way to write <code>lanes_as</code>...</p>",
        "id": 259154872,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279264
    },
    {
        "content": "<p>I don't think it needs to be shorter</p>",
        "id": 259154930,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279293
    },
    {
        "content": "<p>8 characters is pretty reasonable to me</p>",
        "id": 259154967,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279312
    },
    {
        "content": "<p>trying to avoid beginners reaching for <code>into</code> or similar and getting bitcast by mistake...C stupidly made that the default</p>",
        "id": 259154996,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279329
    },
    {
        "content": "<p>Luckily our bitcasts are very explicit</p>",
        "id": 259155110,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> C made what huh?</p>",
        "id": 259155146,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279390
    },
    {
        "content": "<p>in C, <code>a = (f32x4)b</code> does a bitcast</p>",
        "id": 259155191,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279421
    },
    {
        "content": "<p>oh wild.</p>",
        "id": 259155207,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279429
    },
    {
        "content": "<p>specifically only for SIMD types, scalars are more sane</p>",
        "id": 259155245,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279460
    },
    {
        "content": "<p>simd casting is spelled <code>a = __builtin_convertvector(b, f32x4)</code></p>",
        "id": 259155390,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279535
    },
    {
        "content": "<p>But wait, that is a GCC extension, innit</p>",
        "id": 259155438,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279570
    },
    {
        "content": "<p>Yep</p>",
        "id": 259155457,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279583
    },
    {
        "content": "<p>yup, plain C doesn't have simd at all</p>",
        "id": 259155469,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279591
    },
    {
        "content": "<p>Yeah that's GCC's fault. :P</p>",
        "id": 259155479,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279600
    },
    {
        "content": "<p>Perhaps also the arm specification, though, which is a C language extension</p>",
        "id": 259155527,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635279606
    },
    {
        "content": "<p><code>__builtin_convertvector</code> is actually a clang extension, gcc didn't have a target-generic way to do that for the longest time</p>",
        "id": 259155610,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279658
    },
    {
        "content": "<p>oh wild.</p>",
        "id": 259155634,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279668
    },
    {
        "content": "<p>Still GCC's fault.</p>",
        "id": 259155644,
        "sender_full_name": "Jubilee",
        "timestamp": 1635279678
    },
    {
        "content": "<p>yup!</p>",
        "id": 259155658,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279686
    },
    {
        "content": "<p>gcc didn't implement it till 2019!! <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85052\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85052</a></p>",
        "id": 259155943,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635279848
    }
]