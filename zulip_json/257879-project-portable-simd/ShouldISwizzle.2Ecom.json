[
    {
        "content": "<p>This seems relevant to folks here:</p>\n<p><a href=\"https://twitter.com/taquitos/status/1457861729644269571?s=20\">https://twitter.com/taquitos/status/1457861729644269571?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/taquitos/status/1457861729644269571?s=20\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/c31688677ac9e6a451274c5d480ce622bbbe9950/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3935383535333534303534343232393337372f54625f70584f674a5f6e6f726d616c2e6a7067\"></a><p>Ever needed a flow chart for when you should consider Swizzling? Somebody finally chased it down and made a beautiful visualization <span aria-label=\"bar chart\" class=\"emoji emoji-1f4ca\" role=\"img\" title=\"bar chart\">:bar_chart:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span>\n<a href=\"https://t.co/yh1SJ4klJT\">http://shouldISwizzle.com</a></p><span>- ðŸŒ®ðŸŽ‰ Josh Liebowitz (@taquitos)</span></div></div><p>Oh. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 260739336,
        "sender_full_name": "Miguel Raz GuzmÃ¡n Macedo",
        "timestamp": 1636417930
    },
    {
        "content": "<p>:x</p>",
        "id": 260742508,
        "sender_full_name": "Jubilee",
        "timestamp": 1636420536
    },
    {
        "content": "<p>It still seems weird that we decided not to use shuffle because it has other meanings, and then went with swizzle which... also has many other meanings. but i guess i don't feel like revisiting this again</p>",
        "id": 260832991,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636480021
    },
    {
        "content": "<p>To be fair, the objective C technique is actually called method swizzling</p>",
        "id": 260833593,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636480241
    },
    {
        "content": "<p>thats exactly what i mean</p>",
        "id": 260834187,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636480472
    },
    {
        "content": "<p>I just mean to differentiate it from simd swizzling</p>",
        "id": 260834271,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636480504
    },
    {
        "content": "<p>Just like pointer swizzling</p>",
        "id": 260834309,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636480519
    },
    {
        "content": "<p>i mean you can basically always add more words to make things more clear. for swizzle, we don't in our apis, and most people using those terms don't when they use them either (as evidenced by that website)</p>",
        "id": 260834622,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636480641
    },
    {
        "content": "<p>The reason is more that swizzle has several very precise meanings and we're using one of them.  Shuffle happens to be the word Intel uses, but in regular English means something somewhat different</p>",
        "id": 260834901,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636480739
    },
    {
        "content": "<p>You can't shuffle a deck of cards into 10 aces of spades, but that is a swizzle</p>",
        "id": 260835045,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636480798
    },
    {
        "content": "<p>well, not that anybody uses it in the context of simd, but <code>lut</code> (look-up table) can accurately describes simd swizzling since each output lane is retrieved by looking up the index selected for that output in the table of all input lanes: <code>output[i] = input[which[i]]</code></p>",
        "id": 260835413,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636480918
    },
    {
        "content": "<p>i think the argument against shuffle is fairly reasonable, but the argument in favor of swizzle is highly dubious. most of the time i hear people talk about swizzles it's something else (texture swizzling, method swizzling, pointer swizzling...)</p>",
        "id": 260835419,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636480919
    },
    {
        "content": "<p>Well, neon calls them luts more or less with tbl/tbx</p>",
        "id": 260835576,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636480975
    },
    {
        "content": "<p>anyway i don't really have the energy for this now, but i do feel like it was a bit of a baffling choice that will confuse people using this api (and reading code using it) in the future</p>",
        "id": 260835591,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636480981
    },
    {
        "content": "<p>well, in game programming, swizzling almost always referrs to simd swizzling</p>",
        "id": 260835605,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636480988
    },
    {
        "content": "<p>texture swizzling is just applying a simd swizzle to the results of a texture lookup...</p>",
        "id": 260835672,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636481018
    },
    {
        "content": "<p>it is not</p>",
        "id": 260835679,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481023
    },
    {
        "content": "<p>I think generally the word swizzle means to remap a table</p>",
        "id": 260835700,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481034
    },
    {
        "content": "<p>In objective C method swizzling is remapping the dispatch table</p>",
        "id": 260835766,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481049
    },
    {
        "content": "<p>texture swizzling often refers to the transformation into a GPU-internal texture format (especially on console dev where this format is documented)</p>",
        "id": 260835802,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481069
    },
    {
        "content": "<p>in opengl and vulkan, that's what texture swizzling is</p>",
        "id": 260835826,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636481079
    },
    {
        "content": "<p>what your referring to is called format conversion</p>",
        "id": 260835867,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636481101
    },
    {
        "content": "<p>Isn't that still a simd swizzle? The hardware format is just in a different order</p>",
        "id": 260835959,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481143
    },
    {
        "content": "<p>it's a bit more nuanced than that but i don't have time to argue it. yes, you could also call it format conversion, but it's more about the change to e.g. z-order</p>",
        "id": 260836059,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481169
    },
    {
        "content": "<p>Isn't z-order just a specific order?</p>",
        "id": 260836219,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481264
    },
    {
        "content": "<p>format conversion can be waay more complex, the process can involve stuff as complex as texture compression (kinda like jpeg, but optimized for texture lookup)</p>",
        "id": 260836347,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636481310
    },
    {
        "content": "<p>as well as decompression</p>",
        "id": 260836400,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636481339
    },
    {
        "content": "<p><a href=\"https://fgiesen.wordpress.com/2011/01/17/texture-tiling-and-swizzling/\">https://fgiesen.wordpress.com/2011/01/17/texture-tiling-and-swizzling/</a> talks about texture swizzling, and this matches what i've always heard \"texture swizzle\" called</p>",
        "id": 260836502,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481387
    },
    {
        "content": "<p>that said i had lumped some other things in with it mentally</p>",
        "id": 260836639,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481427
    },
    {
        "content": "<p>This looks like just a vector reorder to me?</p>",
        "id": 260836761,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481489
    },
    {
        "content": "<p>In a specific domain with a specific order, but just a vector reorder</p>",
        "id": 260836789,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481506
    },
    {
        "content": "<p>the thing thats being reordered there is the intger index, not the data.</p>",
        "id": 260836916,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481555
    },
    {
        "content": "<p>the bits of the integer index, rather.</p>",
        "id": 260836929,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481563
    },
    {
        "content": "<p>the top result for \"texture swizzle\" in the Vulkan spec is: <a href=\"https://www.khronos.org/registry/vulkan/specs/1.2/html/chap16.html#textures-component-swizzle\">https://www.khronos.org/registry/vulkan/specs/1.2/html/chap16.html#textures-component-swizzle</a></p>",
        "id": 260836959,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636481574
    },
    {
        "content": "<p>which is, as I said, simd swizzling the results of texture lookups</p>",
        "id": 260837017,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636481607
    },
    {
        "content": "<p>yeah, my point isnt that that isn't used, just that there's another somewhat common use in graphics code.</p>",
        "id": 260837124,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481650
    },
    {
        "content": "<p>I feel like this falls under what I said before that \"swizzle means remapping a table\"</p>",
        "id": 260837192,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481682
    },
    {
        "content": "<p>perhaps. that does apply to method swizzling and maybe even pointer swizzling (if you squint)... but i don't know that that makes the term particularly clear or unambiguous.</p>",
        "id": 260837542,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481843
    },
    {
        "content": "<p>I don't think it's at all obvious that \"broadcasting\" a value (as Intel would put it) or concatenating two vectors into a larger vector is shuffling though, either</p>",
        "id": 260837757,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636481924
    },
    {
        "content": "<p>yeah, i don't think shuffling is a great name either, i just think swizzling has the same problems</p>",
        "id": 260837864,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636481976
    },
    {
        "content": "<p>I think there is at least the benefit that it has identical meaning to what's used in vulkan etc</p>",
        "id": 260837969,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636482013
    },
    {
        "content": "<p>And even Intel does use the word, just not frequently</p>",
        "id": 260838021,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636482039
    },
    {
        "content": "<p>We could just overload gather.</p>",
        "id": 260840670,
        "sender_full_name": "Jubilee",
        "timestamp": 1636483077
    },
    {
        "content": "<p>the issue isn't that its a misuse so much as there are other completely unrelated uses that could cause confusion. i've already seen this when... complaining to a friend of mine about the initial version of the swizzle api, they thought it was \"extremely cursed to have swizzling in std\", but were thinking of another kind of swizzling (i didn't ask which, just that i explained that it was reordering the elements of a vector)</p>",
        "id": 260840673,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636483079
    },
    {
        "content": "<p>Since what we're looking at is a vector index lookup table.<br>\nWhich is what a gather is.</p>",
        "id": 260840792,
        "sender_full_name": "Jubilee",
        "timestamp": 1636483114
    },
    {
        "content": "<p>We could rename both gather and swizzle to be something related to table lookup</p>",
        "id": 260840801,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483118
    },
    {
        "content": "<p>i feel like <code>reorder</code> might work for the single vector case</p>",
        "id": 260840804,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636483119
    },
    {
        "content": "<p>You're not changing the order, though, really</p>",
        "id": 260840863,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483139
    },
    {
        "content": "<p>yeah one is <code>reg_lut</code> and the other <code>mem_lut</code>.</p>",
        "id": 260840879,
        "sender_full_name": "Jubilee",
        "timestamp": 1636483144
    },
    {
        "content": "<p>reorder, like shuffle, implies you can't duplicate/delete lanes</p>",
        "id": 260840894,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636483152
    },
    {
        "content": "<p>Could also just call it \"lookup\"</p>",
        "id": 260840948,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483179
    },
    {
        "content": "<p><code>lane_lut</code> and <code>mem_lut</code>?</p>",
        "id": 260840951,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636483180
    },
    {
        "content": "<p>Instead of lut</p>",
        "id": 260840962,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483183
    },
    {
        "content": "<p><code>lane_gather</code></p>",
        "id": 260840999,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636483196
    },
    {
        "content": "<p><code>lookup</code> is fine, I am just like referencing the shorthand in my head.</p>",
        "id": 260841056,
        "sender_full_name": "Jubilee",
        "timestamp": 1636483208
    },
    {
        "content": "<p>i think if we called it gather or lookup, it risks being very misleading to people who have familiarity with existing simd apis.</p>",
        "id": 260841144,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636483245
    },
    {
        "content": "<p>It's still very confusing because there's gather (register-memory), swizzle (const-register), and the dynamic one we don't support yet (register-register)</p>",
        "id": 260841193,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483272
    },
    {
        "content": "<p>I understand that, but I am becoming increasingly persuaded that we should just accept weirdness here.</p>",
        "id": 260841344,
        "sender_full_name": "Jubilee",
        "timestamp": 1636483332
    },
    {
        "content": "<p>The problem is that every simd API has used every word to mean different things</p>",
        "id": 260841408,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483353
    },
    {
        "content": "<p><code>fn lanewise_index&lt;T, const SrcN: usize, const DstN: usize&gt;(value: Simd&lt;T, SrcN&gt;, indexes: Simd&lt;usize, DstN&gt;) -&gt; Simd&lt;T, DstN&gt;</code></p>",
        "id": 260841451,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636483370
    },
    {
        "content": "<p>Because there kinda _aren't_ \"shuffles\" in ARM.<br>\nthere's <code>tbl</code> and <code>tbx</code>.</p>",
        "id": 260841500,
        "sender_full_name": "Jubilee",
        "timestamp": 1636483389
    },
    {
        "content": "<p>lanewise version of <code>values[index]</code></p>",
        "id": 260841532,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636483401
    },
    {
        "content": "<p>I'm hesitant to use index or lookup instead of swizzle because of the possibility of resizing the vector</p>",
        "id": 260842023,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483591
    },
    {
        "content": "<p>Isn't that implied? If you index a <code>Vec</code>, you get one instance of <code>T</code>, if you slice-index a <code>Vec</code>, you get <code>[T]</code>. Size is determined by the indexer.</p>",
        "id": 260842290,
        "sender_full_name": "Jubilee",
        "timestamp": 1636483695
    },
    {
        "content": "<p>easy, <code>index</code> being <code>N</code> elements means the output must also be <code>N</code> elements, the values your indexing into are <code>M</code> elements</p>",
        "id": 260842294,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636483696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/ShouldISwizzle.2Ecom/near/260841344\">said</a>:</p>\n<blockquote>\n<p>I understand that, but I am becoming increasingly persuaded that we should just accept weirdness here.</p>\n</blockquote>\n<p>Yeah, I'm inclined to agree, all these are worse â€” I only mention it because the one time I've shown code using this, they immediately thought it meant something else, which was a thing the choice of <code>swizzle</code> was intended to avoid (i recall one of the arguments in favor was that you'd have to check the docs cuz the name is weird)</p>",
        "id": 260842650,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636483833
    },
    {
        "content": "<p>I agree that it's possible, I'm just suggesting it's not necessarily an obvious name</p>",
        "id": 260842656,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483834
    },
    {
        "content": "<p>but the other names weve come up with so far seem like they have that problem but worse</p>",
        "id": 260842695,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636483848
    },
    {
        "content": "<p>If Rust ever gets <code>MoveIndex</code> (returns a value, not a reference), we should implement <code>MoveIndex&lt;Simd&lt;usize, N&gt;&gt; for Simd&lt;T, M&gt;</code> with <code>Target = Simd&lt;T, N&gt;</code>, so swizzle can just be written as <code>values[indexes]</code></p>",
        "id": 260842736,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1636483864
    },
    {
        "content": "<p>I'm curious what was it interpreted to mean?</p>",
        "id": 260842765,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483875
    },
    {
        "content": "<p>i'll ask, it was a few months ago though</p>",
        "id": 260842812,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636483890
    },
    {
        "content": "<p>i assume pointer swizzling</p>",
        "id": 260842908,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636483921
    },
    {
        "content": "<p>Doesn't pointer swizzling need additional memory?</p>",
        "id": 260843095,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483985
    },
    {
        "content": "<p>Like a list or something?</p>",
        "id": 260843132,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636483997
    },
    {
        "content": "<p>i mean yes, the api doesnt at all look like pointer swizzling, although the initial implementation of swizzle had a lot of complexity that i don't fault someone for being confused about what it was actually doing</p>",
        "id": 260843498,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636484158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/ShouldISwizzle.2Ecom/near/260842650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/ShouldISwizzle.2Ecom/near/260841344\">said</a>:</p>\n<blockquote>\n<p>I understand that, but I am becoming increasingly persuaded that we should just accept weirdness here.</p>\n</blockquote>\n<p>Yeah, I'm inclined to agree, all these are worse â€” I only mention it because the one time I've shown code using this, they immediately thought it meant something else, which was a thing the choice of <code>swizzle</code> was intended to avoid (i recall one of the arguments in favor was that you'd have to check the docs cuz the name is weird)</p>\n</blockquote>\n<p>what is \"this\" here, <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span>?</p>",
        "id": 260860677,
        "sender_full_name": "Jubilee",
        "timestamp": 1636491732
    },
    {
        "content": "<p>oh, it was the initial swizzle api pr</p>",
        "id": 260869008,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1636495643
    },
    {
        "content": "<p>I think with the swizzle macro that's mostly a non-issue now, I hope</p>",
        "id": 260869165,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1636495712
    },
    {
        "content": "<p>fwiw, as an entry into the return of the bikeshed painting event:<br>\nA user of packed_simd <strong>expects</strong> a <code>v_lut</code> function to be provided by name.<br>\n<a href=\"https://github.com/rust-lang/packed_simd/issues/339\">https://github.com/rust-lang/packed_simd/issues/339</a><br>\n<a href=\"https://docs.opencv.org/4.5.3/df/d91/group__core__hal__intrin.html#ga37fe7c336a68ae5f48967a066473a4ff\">https://docs.opencv.org/4.5.3/df/d91/group__core__hal__intrin.html#ga37fe7c336a68ae5f48967a066473a4ff</a></p>",
        "id": 261378783,
        "sender_full_name": "Jubilee",
        "timestamp": 1636835675
    }
]