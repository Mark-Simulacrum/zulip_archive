[
    {
        "content": "<p>hey all, looking for a way how I can contribute to this</p>",
        "id": 218141303,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1606527862
    },
    {
        "content": "<p>I think the <em>most pressing</em> issues are</p>\n<ul>\n<li>getting SIMD intrinsics into rustc itself so that rustc can correctly lower rust SIMD stuff according to the codegen backend used (either LLVM or Cranelift). I think there's some PR progress on this but i'm not sure if the one PR will resolve all of the rustc intrinsics concerns.</li>\n<li>getting the stdsimd to have all the various methods. Each method that's part of the (eventually) stable API will <em>internally</em> call an intrinsic. Not every  function will use exactly one intrinsic, just the \"base\" level functions. And then other functions will build on top of that. For example, <code>sin</code> and <code>cos</code> aren't intrinsic ops, they're implemented using a bunch of intrinsic add, truncate, mul, etc. ops though.</li>\n</ul>",
        "id": 218150628,
        "sender_full_name": "Lokathor",
        "timestamp": 1606544512
    },
    {
        "content": "<p><code>sin</code> and <code>cos</code> should be intrinsics, they're supported by LLVM and some processors have special instructions to implement them (e.g. AMDGPU, Libre-SOC's CPU/GPU)</p>",
        "id": 218228953,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1606681795
    },
    {
        "content": "<p>okay well then pick whatever other useful op you care to name that's built using other intrinsics</p>",
        "id": 218386724,
        "sender_full_name": "Lokathor",
        "timestamp": 1606806712
    },
    {
        "content": "<p>hi all, finally holidays so spending time with simd and the rust compiler.</p>",
        "id": 220788038,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608729893
    },
    {
        "content": "<p>I have some questions while I am trying to find my way in this code base</p>",
        "id": 220788071,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608729925
    },
    {
        "content": "<p><a href=\"http://intrinsics.rs\">intrinsics.rs</a> is the file where the currently implemented simd intrinsics are declared</p>",
        "id": 220788155,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608729969
    },
    {
        "content": "<p>these intrinsics points to the rust compiler implemented intrinsics in the file: library/stdarch/crates/core_arch/src/simd_llvm.rs</p>",
        "id": 220788228,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730043
    },
    {
        "content": "<p>as commented in the <a href=\"http://intrinsics.rs\">intrinsics.rs</a> file we now generate llvm intrinsics and let llvm generate the simd instructions for the platform.</p>",
        "id": 220788323,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730097
    },
    {
        "content": "<p>we do not use the wrappers in the core arch crate</p>",
        "id": 220788352,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730135
    },
    {
        "content": "<p>So far, is this reasoning correct ?</p>",
        "id": 220788381,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730167
    },
    {
        "content": "<p>extending the amount of implemented intrinsics require to extend the <a href=\"http://intrinsics.rs\">intrinsics.rs</a> file and extend the rust complier if necessary, in the library/starch/crates/core_arch/simd_llvm.rs</p>",
        "id": 220788553,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730296
    },
    {
        "content": "<p>correct ?</p>",
        "id": 220788664,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730373
    },
    {
        "content": "<p>Is it possible to test what is currently available in stdsimd to use in an application ? I don't wanna use it in a commercial application, but I want to build functionality that I use on a daily base in my dayjob (image resizing, filtering, tensor transformations, ...) to run some benchmarks.</p>",
        "id": 220788835,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730508
    },
    {
        "content": "<p>The intrinsics we are using don't point to core::arch, but special functions that are exposed directly by rustc</p>",
        "id": 220788931,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1608730576
    },
    {
        "content": "<p>ok where can they be found ?</p>",
        "id": 220788969,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608730614
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/intrinsic.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/intrinsic.rs</a></p>",
        "id": 220789112,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1608730735
    },
    {
        "content": "<p>This file has the implementation for the LLVM backend</p>",
        "id": 220789124,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1608730749
    },
    {
        "content": "<p>Also, you can use the stdsimd crate that's currently on github, however it's changing quite frequently and is still missing most functionality</p>",
        "id": 220789227,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1608730813
    },
    {
        "content": "<p>thank you Caleb, I am continuing with this information</p>",
        "id": 220789753,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1608731324
    },
    {
        "content": "<p>Note that <strong>currently</strong> the crate must be depended on directly in <code>Cargo.toml</code>, and it's not on <a href=\"http://crates.io\">crates.io</a> so you'll need to use a git url. Also, work is slightly on hold during December.</p>\n<p>However, when things pick back up we'd like to work toward having the crate shipped as part of <code>core</code> (though you'd still need a Nightly compiler to use an unstable part of <code>core</code>)</p>",
        "id": 220841143,
        "sender_full_name": "Lokathor",
        "timestamp": 1608771905
    },
    {
        "content": "<p>Yes I do that all the time</p>",
        "id": 221448554,
        "sender_full_name": "Jan Van Sweevelt",
        "timestamp": 1609676593
    },
    {
        "content": "<p>Hey all, I noticed that there are two simd related repositories on the Github,packed_simd and std::simd.Is there any connection between them?</p>",
        "id": 223499525,
        "sender_full_name": "Guoqiang QI",
        "timestamp": 1611231160
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"382762\">@Guoqiang QI</span>! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <code>packed_simd</code> is an earlier iteration of a portable SIMD API. <code>stdsimd</code> is where weâ€™re currently working to get something into the standard library. It builds off the work done in <code>packed_simd</code> but also takes advantage of new language features that have come along since, like const generics</p>",
        "id": 223502246,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611233006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> Get it and so sorry about the delay due to time difference. I'm a rust novice, but in the past I've had a lot of experiences with simd, so i will be happy to try contributing to the rust simd module when i have a spare time. Thank you again for your reply.</p>",
        "id": 223593652,
        "sender_full_name": "Guoqiang QI",
        "timestamp": 1611278785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382762\">@Guoqiang QI</span> Even if you have some thoughts on your experiences using SIMD in other languages to share those are great contributions too and all feedback is welcome</p>",
        "id": 223594367,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611279520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> In the past few months, i have mainly participated in the development and optimization of simd in the Eigen project. Eigen is a basic linear algebra library which optimizes the underlying calculations on different hardware to varying degrees, so i am also thinking about whether there is an opportunity to introduce some of its optimization methods into rust. Of course, these have a premise that it is equivalent to a significant performance improvement in the current implementation.</p>",
        "id": 223594967,
        "sender_full_name": "Guoqiang QI",
        "timestamp": 1611280194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> <br>\nI noticed that the main purpose of std::simd is to provide a general simd api to shield the interface differences caused by the hardware, so whether the api completion job is one of a key point in std::simd? Or i just misunstand it.Also be happy to listen your suggestiones.</p>",
        "id": 223595807,
        "sender_full_name": "Guoqiang QI",
        "timestamp": 1611281078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382762\">@Guoqiang QI</span> I've used eigen, std::simd is a much lower level interface but should make it much easier to write something like eigen that works well on all hardware</p>",
        "id": 223596358,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611281689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I think it may just like the Core/Arch module in Eigen and some work was done in std::arch.</p>",
        "id": 223597924,
        "sender_full_name": "Guoqiang QI",
        "timestamp": 1611283540
    }
]