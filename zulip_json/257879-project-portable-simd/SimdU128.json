[
    {
        "content": "<p>So, like... I'm not <em>opposed</em> to adding them per se, but I just kinda wanna know... is anyone actually gonna use 'em?</p>",
        "id": 236098029,
        "sender_full_name": "Jubilee",
        "timestamp": 1619389104
    },
    {
        "content": "<p>I should also note, <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>, that part of my trepidation is because there's already several special casings in the Rust compiler test framework for 128-bit integers, because of things like <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/119\">https://github.com/rust-lang/unsafe-code-guidelines/issues/119</a></p>",
        "id": 236100210,
        "sender_full_name": "Jubilee",
        "timestamp": 1619391512
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54341\">https://github.com/rust-lang/rust/issues/54341</a> <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 236100219,
        "sender_full_name": "Jubilee",
        "timestamp": 1619391531
    },
    {
        "content": "<p>Well that's not good lol</p>",
        "id": 236100354,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619391630
    },
    {
        "content": "<p>I suppose there is no AtomicU128 right? So it wouldn't be shocking to not have it at least for now</p>",
        "id": 236100413,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619391676
    },
    {
        "content": "<blockquote>\n<p>AtomicBool    <br>\nAtomicI8    <br>\nAtomicI16   <br>\nAtomicI32   <br>\nAtomicI64   <br>\nAtomicIsize <br>\nAtomicPtr   <br>\nAtomicU8    <br>\nAtomicU16   <br>\nAtomicU32   <br>\nAtomicU64   <br>\nAtomicUsize</p>\n</blockquote>",
        "id": 236100533,
        "sender_full_name": "Jubilee",
        "timestamp": 1619391784
    },
    {
        "content": "<p>apparently it's based on the system atomic width!</p>",
        "id": 236100693,
        "sender_full_name": "Jubilee",
        "timestamp": 1619391951
    },
    {
        "content": "<p>this is usually 64-bit, except Apple mandates 128-bit. Interesting.</p>",
        "id": 236100749,
        "sender_full_name": "Jubilee",
        "timestamp": 1619391980
    },
    {
        "content": "<p>Interesting, usually it's just the pointer width</p>",
        "id": 236100757,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619391999
    },
    {
        "content": "<p>How do they even do that?? They still use x86-64</p>",
        "id": 236100778,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619392053
    },
    {
        "content": "<p>Unless you mean for arm64e</p>",
        "id": 236100789,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619392069
    },
    {
        "content": "<p>Apple just requires it and doesn't work on x86_64 machines that don't have Atomic U128s.</p>",
        "id": 236100828,
        "sender_full_name": "Jubilee",
        "timestamp": 1619392088
    },
    {
        "content": "<p>Like I said, I think we should come back to this, but I also think we should like... come back when we have a <strong>plan</strong>.</p>",
        "id": 236100880,
        "sender_full_name": "Jubilee",
        "timestamp": 1619392158
    },
    {
        "content": "<p>Yeah, we can just remove them if you want</p>",
        "id": 236100971,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619392241
    },
    {
        "content": "<p>It's unfortunate that LLVM doesn't do anything even remotely clever</p>",
        "id": 236100973,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619392255
    },
    {
        "content": "<p>iirc x86_64, aarch64, and ppc64 all support 128-bit cmpxchg at the hw level (with appropriate isa extensions), so AtomicU128 <em>should</em> be supported on them.</p>",
        "id": 236103019,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1619394392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/SimdU128/near/236103019\">said</a>:</p>\n<blockquote>\n<p>iirc x86_64, aarch64, and ppc64 all support 128-bit cmpxchg at the hw level (with appropriate isa extensions), so AtomicU128 <em>should</em> be supported on them.</p>\n</blockquote>\n<p>It turns out: \"No, actually.\"<br>\nx86_64's earliest implementations, back when it was mostly known as amd64, did not support cmpxchg16b.<br>\naarch64 <em>does</em> support AtomicU128.</p>",
        "id": 236103279,
        "sender_full_name": "Jubilee",
        "timestamp": 1619394621
    },
    {
        "content": "<p>This means that the Windows and Linux targets, which define themselves as supporting the lowest common denominator of x86_64, don't have AtomicU128 <strong>by default</strong>.</p>",
        "id": 236103323,
        "sender_full_name": "Jubilee",
        "timestamp": 1619394672
    },
    {
        "content": "<p>Oh right, apple mandates more than SSE2</p>",
        "id": 236103348,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619394714
    },
    {
        "content": "<p>Now it all makes sense</p>",
        "id": 236103394,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619394732
    },
    {
        "content": "<p>aarch64 at least has atomic128 load/store via stlxp and ldaxp. i don't know if it has ll/sc or a cas, though. i think i've heard it does</p>",
        "id": 236103520,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619394861
    },
    {
        "content": "<p>i think apple might mandate more than ssse3 in practice, since we require macos 10.7+. never bothered to look which hardware that actually supports</p>",
        "id": 236103568,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619394929
    },
    {
        "content": "<p>Anyways, I made sure to make it one nice commit to revert later. :^)</p>",
        "id": 236103696,
        "sender_full_name": "Jubilee",
        "timestamp": 1619395081
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/100/commits/92d643b6283b0171873de4c46f708005af025f33\">https://github.com/rust-lang/stdsimd/pull/100/commits/92d643b6283b0171873de4c46f708005af025f33</a></p>",
        "id": 236103748,
        "sender_full_name": "Jubilee",
        "timestamp": 1619395098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/SimdU128/near/236103279\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/SimdU128/near/236103019\">said</a>:</p>\n<blockquote>\n<p>iirc x86_64, aarch64, and ppc64 all support 128-bit cmpxchg at the hw level (with appropriate isa extensions), so AtomicU128 <em>should</em> be supported on them.</p>\n</blockquote>\n<p>It turns out: \"No, actually.\"<br>\nx86_64's earliest implementations, back when it was mostly known as amd64, did not support cmpxchg16b.<br>\naarch64 <em>does</em> support AtomicU128.</p>\n</blockquote>\n<p>you missed that I said \"with appropriate isa extensions\" -- so that means cmpxchg16b on x86_64</p>",
        "id": 236106059,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1619397689
    },
    {
        "content": "<p>Blah, okay yes. sorry.</p>",
        "id": 236106350,
        "sender_full_name": "Jubilee",
        "timestamp": 1619398019
    },
    {
        "content": "<p>That would require building std yourself</p>",
        "id": 236106595,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619398247
    }
]