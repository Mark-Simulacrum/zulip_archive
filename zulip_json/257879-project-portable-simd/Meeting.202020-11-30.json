[
    {
        "content": "<p>Hello everyone. I expect everyone might have been pretty busy trying to not go crazy the past week, or maybe I just think that because I'm an American who was indeed kinda busy trying not to go crazy, but if anyone has anything to catch up on the floor is open. I actually managed to fix whatever brain-bug was stopping me from looking at code, uh, sometime last night lol, and am actually working through the \"simple, quick\" PR I intended to do.</p>",
        "id": 218345166,
        "sender_full_name": "Jubilee",
        "timestamp": 1606769970
    },
    {
        "content": "<p>All I have to report is that <a href=\"https://github.com/rust-lang/stdsimd/pull/44\">https://github.com/rust-lang/stdsimd/pull/44</a> is now passing</p>",
        "id": 218345983,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606770326
    },
    {
        "content": "<p>There's potentially some discussion left on how to name the masks, but I think we can also save that for later</p>",
        "id": 218346107,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606770377
    },
    {
        "content": "<p>(I think some min_const_generic type interface will probably mess that all up anyway)</p>",
        "id": 218346175,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606770421
    },
    {
        "content": "<p>sweet bikeshed man let's paint it hot pink.</p>",
        "id": 218346237,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770463
    },
    {
        "content": "<p>Yeah let's talk about that actually since we're both here.</p>",
        "id": 218346741,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770712
    },
    {
        "content": "<p>What might we want that to look like?<br>\nMaskx4&lt;16&gt;?<br>\nmask16&lt;4&gt;?</p>",
        "id": 218346843,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770751
    },
    {
        "content": "<p>I think we bandied about vf32&lt;4&gt;?</p>",
        "id": 218346994,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770838
    },
    {
        "content": "<p>I'm not sure, I think we could have something like MaskM&lt;N&gt;</p>",
        "id": 218347117,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606770886
    },
    {
        "content": "<p>Well I'm not sure</p>",
        "id": 218347158,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606770908
    },
    {
        "content": "<p>I believe we agreed that Simd&lt;f32, 4&gt; was going a bit far so we were thinking about stuff more like vf32 or Vx4&lt;f32&gt;.</p>",
        "id": 218347177,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770919
    },
    {
        "content": "<p>Uint32&lt;4&gt;?</p>",
        "id": 218347223,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606770946
    },
    {
        "content": "<p>The type should probably indicate that it's a vector</p>",
        "id": 218347292,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606770966
    },
    {
        "content": "<p>yeah, thus vf32 over f32.</p>",
        "id": 218347334,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770989
    },
    {
        "content": "<p>Too subtle?</p>",
        "id": 218347343,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770993
    },
    {
        "content": "<p>SimdF32?</p>",
        "id": 218347390,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771021
    },
    {
        "content": "<p>Yeah, I think for the generic types that could be confusing</p>",
        "id": 218347397,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771025
    },
    {
        "content": "<p>An f32x4 type alias is probably fine</p>",
        "id": 218347421,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771043
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 218347513,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771084
    },
    {
        "content": "<p>so just name it whatever and let the type alias pick up the nomenclature slack?</p>",
        "id": 218347554,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771110
    },
    {
        "content": "<p>Maybe. Uint32Vector&lt;N&gt;?</p>",
        "id": 218347601,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771144
    },
    {
        "content": "<p>Hmm, I think Simd{U,F,I}{16,32,64}&lt;N&gt; make slightly more sense here.</p>",
        "id": 218347664,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771190
    },
    {
        "content": "<p>because of our slightly unfortunate choice to name our dynamic array type Vec</p>",
        "id": 218347765,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771230
    },
    {
        "content": "<p>That's true</p>",
        "id": 218347784,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771243
    },
    {
        "content": "<p>Yeah I meant U32 not Uint32, been writing c++ all day <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 218347823,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771282
    },
    {
        "content": "<p>ahaha.</p>",
        "id": 218347832,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771288
    },
    {
        "content": "<p>that's fair.</p>",
        "id": 218347841,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771294
    },
    {
        "content": "<p>Simd&lt;[f32;4]&gt; is <em>close</em> to the API we want, it's just too many abstraction levels deep, basically, so just shuffling the type letters leftwards should make things work alright.</p>",
        "id": 218347938,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771332
    },
    {
        "content": "<p>shitposty: f32x&lt;4&gt;</p>",
        "id": 218348164,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771492
    },
    {
        "content": "<p>Lol</p>",
        "id": 218348168,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771497
    },
    {
        "content": "<p>I'm not completely opposed to having the type be generic as well. It would certainly make some things easier</p>",
        "id": 218348207,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771525
    },
    {
        "content": "<p>award winning API design right there.</p>",
        "id": 218348234,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771542
    },
    {
        "content": "<p>what things would it make easier do you think?</p>",
        "id": 218348246,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771551
    },
    {
        "content": "<p>Though with const generics I think it could just be Simd&lt;f32, 4&gt; which is easier to read</p>",
        "id": 218348262,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771560
    },
    {
        "content": "<p>It would be easier to make code like num-traits</p>",
        "id": 218348319,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771574
    },
    {
        "content": "<p>Any traits over the type</p>",
        "id": 218348348,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771585
    },
    {
        "content": "<p>Mmm, I guess we could do stuff like SimdF&lt;32, 4&gt;</p>",
        "id": 218348441,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771636
    },
    {
        "content": "<p>That's... Scary</p>",
        "id": 218348491,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771662
    },
    {
        "content": "<p>I am not sure how abstracting over Simd&lt;f32, 4&gt; and Simd&lt;f64, 2&gt; and say hypothetically Simd&lt;f16, 16&gt; in your design would work?</p>",
        "id": 218348591,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771694
    },
    {
        "content": "<p>but that might just be my brain refusing to recall all my const generics knowledge into memory just right now.</p>",
        "id": 218348644,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771719
    },
    {
        "content": "<p>I think the idea is that some impls would be for specific types, and some would not</p>",
        "id": 218349008,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771901
    },
    {
        "content": "<p>hmm.</p>",
        "id": 218349105,
        "sender_full_name": "Jubilee",
        "timestamp": 1606771925
    },
    {
        "content": "<p>I think the widths should not matter at all since the compiler intrinsics hopefully would support any width (or at least any power of two?)</p>",
        "id": 218349188,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606771970
    },
    {
        "content": "<p>Should.</p>",
        "id": 218349269,
        "sender_full_name": "Jubilee",
        "timestamp": 1606772015
    },
    {
        "content": "<p>And we can use const wellformedness to make sure that it's some 2.pow(N).</p>",
        "id": 218349436,
        "sender_full_name": "Jubilee",
        "timestamp": 1606772108
    },
    {
        "content": "<p>Hello! I'm new here, and haven't looked into this project specifically much yet, but I do have extensive experience writing SIMD frameworks and working with <code>packed_simd</code>. Would it be okay to bring up some concerns I have based on what I've seen so far and with <code>packed_simd</code>? If you'd like, I can also point towards my WIP portable SIMD framework if that could be used as inspiration.</p>",
        "id": 218349602,
        "sender_full_name": "novacrazy",
        "timestamp": 1606772187
    },
    {
        "content": "<p>Yep.  We can probably add some custom compiler behavior to make everything error pretty if you use the wrong types or sizes</p>",
        "id": 218349615,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606772192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245942\">@novacrazy</span> yes, concerns with packed_simd are definitely welcome.</p>",
        "id": 218349704,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606772244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245942\">@novacrazy</span> sure! packed_simd is not our only reference point so you might mention something we're already leaning away from but we are still looking at it along with other things, and I am definitely listening.</p>",
        "id": 218349846,
        "sender_full_name": "Jubilee",
        "timestamp": 1606772311
    },
    {
        "content": "<p>I think the biggest problem with abstracting over types entirely is that it... OK this might just be me but  Simd&lt;u32, 4&gt; and SimdU32&lt;4&gt; <em>say something different</em> about how interchangeable that u32 is supposed to be? Like, implicitly it's \"just\" a type parameter but the idea that it's parameterized sends a stronger message of \"you can put anything here and it will work\" and I think that risks being a little deceptive about the underlying realities of the machine. Yes, we're abstracting over that, but we want to be careful about where we layer that more deeply.</p>",
        "id": 218350712,
        "sender_full_name": "Jubilee",
        "timestamp": 1606772810
    },
    {
        "content": "<p>I might feel different about how it actually works out in practice tho'.</p>",
        "id": 218350764,
        "sender_full_name": "Jubilee",
        "timestamp": 1606772844
    },
    {
        "content": "<p>Ok I agree with that.</p>",
        "id": 218350784,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606772862
    },
    {
        "content": "<p>It's not really generic, it just supports many types</p>",
        "id": 218350808,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606772882
    },
    {
        "content": "<p>I think I'm already talked out of it</p>",
        "id": 218350923,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606772932
    },
    {
        "content": "<p>Basically, there are a few deal-breakers when working with simple \"portable\" SIMD, mostly to do with dynamic dispatch and <code>#[target_feature]</code> attributes. Unless all code is inlined into the single call site under target-feature, the code will deoptimize to the lowest instruction set enabled globally, probably SSE or SSE2 (can't remember which is the default for rustc). Of course, if you use any kind of recursion, that will break the optimizations instantly. SIMDeez suffers from this as well.</p>\n<p>As a point of reference, in the project I'm working on (<a href=\"https://github.com/raygon-renderer/thermite\">https://github.com/raygon-renderer/thermite</a>), I solve this by relying on a generic parameter to supply the instruction set to a match statement generated by a procedural macro that dispatches to inner functions annotated with the correct target_feature. All functions end up monomorphized to the correct instruction set and dispatch to only the single instruction set given by the generic parameter.</p>\n<p>Secondly, crossing instructions between integer and floating values will incur a 1-4 cycle delay on most modern CPUs, as it has to copy values between the domains. Casting bits between float and int for bitwise operations can incur this overhead, so exposing the floating point bitwise instructions would be nice. This can also affect your mask types.</p>\n<p>Next, some of the codegen for the LLVM platform intrinsics is sub-optimal and \"too safe\", such as with <code>simd_select</code>, which will generate a comparison instruction first to ensure all bits in the mask are the same. Casts could use work, too. </p>\n<p>Finally, exposing bitwise operations on float vectors is a must. Getting the sign from a float vector with <code>&amp; -0.0</code> and using it to flip the signs in other float vectors with XOR is much, much more efficient than getting a signum and multiplying. Multiplication is like 5 cycles, while XOR is 1 cycle.</p>",
        "id": 218351634,
        "sender_full_name": "novacrazy",
        "timestamp": 1606773291
    },
    {
        "content": "<p>If you want to support multiple instruction sets in a single binary, it must monomorphize the functions somehow, and I haven't seen much discussion around that in std. Though like I said, I haven't been paying attention until recently.</p>",
        "id": 218351919,
        "sender_full_name": "novacrazy",
        "timestamp": 1606773463
    },
    {
        "content": "<p>So, the vagaries of multiversioning are in fact explicitly out of scope for this project. The goal is to cross a very specific finish line, which is that there is a safe portable SIMD API. Fixing target_feature or LLVM deoptimization bugs are not our primary concern except insofar as we must account for future solutions (or lack thereof) to those in our API.</p>",
        "id": 218352390,
        "sender_full_name": "Jubilee",
        "timestamp": 1606773711
    },
    {
        "content": "<p>I see. That's unfortunate.</p>",
        "id": 218352992,
        "sender_full_name": "novacrazy",
        "timestamp": 1606774029
    },
    {
        "content": "<p>It is indeed! This is not even a scope limitation out of <strong>lack of interest</strong>, no, it's because every SIMD project to date has tilted at this windmill and then suddenly taken on all the problems with SIMD at once, been crushed by how demoralizing that was, and died. Figuratively speaking. At least, I think the last person who tried is still alive. It's 2020, so I don't know for sure.</p>\n<p>We have even had discussions about cutting many features in our API that would otherwise be considered essential, even by just a hypothetical average portable SIMD API user, just to be able to touch that milestone, and we have already encountered lots of Fun additional difficulties that would otherwise be out of scope but we have to resolve anyways.</p>",
        "id": 218353159,
        "sender_full_name": "Jubilee",
        "timestamp": 1606774114
    },
    {
        "content": "<p>This leaves your concern about bitwise ops on SIMD vectors of floats, which is something we will have to evaluate given that uh, Floats Are Hard, but seems like a reasonable request nonetheless!</p>",
        "id": 218353584,
        "sender_full_name": "Jubilee",
        "timestamp": 1606774293
    },
    {
        "content": "<p>There are specific bitwise instructions for float vectors, so as to not incur the cross-domain penalty. They just aren't exposed in the (rather-limited) platform intrinsics. <code>simd_fabs</code> uses such instructions to clear the sign bit, for example.</p>",
        "id": 218353936,
        "sender_full_name": "novacrazy",
        "timestamp": 1606774439
    },
    {
        "content": "<p>LLVM is generally very intelligent about using the best operation based on the domain</p>",
        "id": 218354151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606774562
    },
    {
        "content": "<p>Yeah, we're already stuck with \"we're gonna have to add more platform intrinsics just to get our API to work at a baseline level of functionality\" so I guess that's implicitly in scope even though it's \"not supposed to be\" so I think what I'm going to do is file an issue for collecting platform intrinsics we already know we should add to rustc into a list, and people can just throw their comments at that.</p>",
        "id": 218354263,
        "sender_full_name": "Jubilee",
        "timestamp": 1606774611
    },
    {
        "content": "<p>so we have a nice referenceable list.</p>",
        "id": 218354280,
        "sender_full_name": "Jubilee",
        "timestamp": 1606774621
    },
    {
        "content": "<p>oh snap Caleb beat me to it, <a href=\"https://github.com/rust-lang/stdsimd/issues/46\">https://github.com/rust-lang/stdsimd/issues/46</a></p>",
        "id": 218354343,
        "sender_full_name": "Jubilee",
        "timestamp": 1606774665
    },
    {
        "content": "<p>Hehe</p>",
        "id": 218354457,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606774710
    },
    {
        "content": "<p>Well, consider this: <a href=\"https://godbolt.org/z/zeWeas\">https://godbolt.org/z/zeWeas</a></p>\n<p>Simply flipping the sign of one based on the other. LLVM does not correctly optimize it at all. Recently I had a real-world problem run into this, and was able to shave off dozens of cycles by switching to bitwise ops with the sign bit.</p>",
        "id": 218355335,
        "sender_full_name": "novacrazy",
        "timestamp": 1606775152
    },
    {
        "content": "<p>Yeah, \"LLVM is kinda short-sighted sometimes\" is kind of why we're trying to furnish an explicitly vectorizing API anyways so I am not going to pretend LLVM is necessarily going to take care of every issue here, only that uh, sometimes an LLVM bug is still an LLVM bug.</p>\n<p><span class=\"user-mention\" data-user-id=\"245942\">@novacrazy</span> You likely know more than I do about all the ops that are supported by LLVM (and especially, all the ones that are actually <strong>needed</strong> in practice), so I would encourage you to add a comment to stdsimd#46 there, or file another issue.</p>\n<p>For other concerns, esp. insofar as they hit existing specific technical deficiencies of the compiler, I suggest filing an issue on rust-lang/rust and we will keep an eye on it. Though I expect the inadequacies of simd_select in particular might get punted to LLVM's fora.</p>",
        "id": 218355888,
        "sender_full_name": "Jubilee",
        "timestamp": 1606775441
    },
    {
        "content": "<p>Also this meeting has run a bit long so to formally state it: adjourned. Thanks for coming and thanks for staying with us. <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 218356219,
        "sender_full_name": "Jubilee",
        "timestamp": 1606775639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245942\">@novacrazy</span> I'm not sure that was necessarily a fair comparison.  LLVM is certainly worse at optimizing certain operations than others (in this case it may not have been allowed to make the optimization because of some floating-point consideration).  If you change the generic code to use <code>and</code> and <code>xor</code> directly LLVM uses the correct domain instructions: <a href=\"https://godbolt.org/z/4v8Y7q\">https://godbolt.org/z/4v8Y7q</a></p>",
        "id": 218356816,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606776001
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245942\">@novacrazy</span> IIRC <code>x &lt; 0.0</code> is <em>not</em> the same as getting the sign bit, since <code>-0.0</code> is not less than <code>0.0</code>.</p>",
        "id": 218402364,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1606817932
    }
]