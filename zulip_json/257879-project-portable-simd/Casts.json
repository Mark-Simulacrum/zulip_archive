[
    {
        "content": "<p>Has anyone thought about how casts should be performed?  Lossless conversions should use <code>From</code>/<code>Into</code>, but what about lossy conversions and byte casts?</p>",
        "id": 212140947,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601681786
    },
    {
        "content": "<p>I think a decent number of functions are blocking on casting to and from vectors of <code>u8</code></p>",
        "id": 212140988,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601681854
    },
    {
        "content": "<p>Well, I think that we should \"name the cast\" that we're doing and put it as methods.</p>\n<p>For example: f32xN::truncate_int, f32xN::round_int, etc, whatever the operation does. There's so many variant ways that we should use explicit method names by default. We might <em>also</em> add trait impls that are backed by the methods if a particular method is the \"most common\" variant.</p>",
        "id": 212141477,
        "sender_full_name": "Lokathor",
        "timestamp": 1601682440
    },
    {
        "content": "<p>I think that, for converting to <code>u8</code> sequences, people can get the slice of elements and then use whatever slice casting techniques they want (<code>bytemuck</code>, <code>zerocopy</code>, etc etc).</p>\n<p>The Safe Transmute Project is doing well right now, and I think that they'll be able to stabilize within the same time frame we're aiming for (before the end of 2021), so having just mild casting for a while and letting the safe transmute group do the heavy lifting later on seems like a good choice.</p>",
        "id": 212141650,
        "sender_full_name": "Lokathor",
        "timestamp": 1601682607
    },
    {
        "content": "<p>I think we're going to need (at least internally) some casting to <code>u8</code> for changing things like endianness, but good point</p>",
        "id": 212142000,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601683019
    },
    {
        "content": "<p>good idea on waiting for something to stabilize</p>",
        "id": 212142011,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601683028
    },
    {
        "content": "<p>Hmm, can you give an example of the internal u8 cast you're thinking of?</p>",
        "id": 212142270,
        "sender_full_name": "Lokathor",
        "timestamp": 1601683257
    },
    {
        "content": "<p>something like <code>u32x4::swap_bytes</code> I'm guessing will cast to <code>u8x16</code> and do a const shuffle</p>",
        "id": 212142394,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601683364
    },
    {
        "content": "<p>(and cast back)</p>",
        "id": 212142397,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601683370
    },
    {
        "content": "<p>Ah, for that we can just have the ever so lovely <code>union bits128 { ... }</code> with all the variants we ever need.</p>",
        "id": 212142486,
        "sender_full_name": "Lokathor",
        "timestamp": 1601683448
    },
    {
        "content": "<p>and 256, 512, 64, etc</p>",
        "id": 212142494,
        "sender_full_name": "Lokathor",
        "timestamp": 1601683462
    },
    {
        "content": "<p>haha, I would probably just transmute at that point I think?</p>",
        "id": 212142532,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601683513
    },
    {
        "content": "<p>I was just hoping for a safe interface</p>",
        "id": 212142550,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601683542
    },
    {
        "content": "<p>I like the union better because you can put in a specific list of \"known good\" types and verify it it one place. If the field is on the union, you can do that change over, no worries.</p>\n<p>You could also put safe methods on the type too for that matter.</p>",
        "id": 212142634,
        "sender_full_name": "Lokathor",
        "timestamp": 1601683601
    },
    {
        "content": "<p>good point</p>",
        "id": 212142882,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601683816
    },
    {
        "content": "<p>Ideally, safe-transmute should solve this problem. It should be possible to transmute safely between any pair of 128-bit types, for instance.</p>",
        "id": 212183802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601749390
    },
    {
        "content": "<p>Got it, maybe this is not something that specifically needs to be handled for SIMD (as it is in packed_simd)</p>",
        "id": 212187387,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601755172
    },
    {
        "content": "<p>I do think that it's important to arrange simple ways to transmute between these types. Especially if they end up using different types than the native SIMD.</p>",
        "id": 212231022,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601830625
    },
    {
        "content": "<p>That said, in an ideal world, portable SIMD would use exactly the same vector types as the native SIMD.</p>",
        "id": 212231027,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601830651
    },
    {
        "content": "<p>So that without casting at all, you could trivially switch between portable operations and native operations.</p>",
        "id": 212231028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601830671
    },
    {
        "content": "<p>Well, the native types are a little easier so we've implemented From/Into for those, so that part should work fine without safe transmute</p>",
        "id": 212231088,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601830760
    },
    {
        "content": "<p>That's helpful.</p>",
        "id": 212231841,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601831985
    },
    {
        "content": "<p>But I'm curious, is there any <em>fundamental</em> reason that the native types and the portable types couldn't be the same type, on each platform?</p>",
        "id": 212231887,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832006
    },
    {
        "content": "<p>(At least, when a native type exists?)</p>",
        "id": 212231892,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832010
    },
    {
        "content": "<p>I imagine it would be fine, but I think that std::arch should probably use the std::simd types and not the other way around</p>",
        "id": 212231995,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832148
    },
    {
        "content": "<p>Sure, assuming they match I don't see any reason why not. :)</p>",
        "id": 212232005,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832182
    },
    {
        "content": "<p>But the native types done really exactly match.  What is an __m128i? Is it u8x16, u16x8, u32x4, u64x2?</p>",
        "id": 212232073,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832249
    },
    {
        "content": "<p>\"yes\" ;)</p>",
        "id": 212232188,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832372
    },
    {
        "content": "<p>All of those types should be easily interchangeable, with at most a <code>.into()</code>.</p>",
        "id": 212232210,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832421
    },
    {
        "content": "<p>There are plenty of SIMD algorithms that involve assuming those are interchangeable.</p>",
        "id": 212232223,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832446
    },
    {
        "content": "<p>Well I agree they should be interchangeable but I'm not sure about with into</p>",
        "id": 212232225,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832449
    },
    {
        "content": "<p>Well, if they could be interchangeable <em>without</em> into, that'd be fine too. ;)</p>",
        "id": 212232230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832463
    },
    {
        "content": "<p>They certainly shouldn't require <code>unsafe</code> to transmute between.</p>",
        "id": 212232238,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832475
    },
    {
        "content": "<p>I agree, it should be safe</p>",
        "id": 212232276,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832485
    },
    {
        "content": "<p>I'm concerned about confusion of what that conversion does. [u8; 8] doesn't impl  From&lt;u64&gt; because I think that would be confusing</p>",
        "id": 212232298,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832550
    },
    {
        "content": "<p>I don't think it'd be that confusing. But regardless, for SIMD it <em>is</em> important to be able to move between <code>[u8;16]</code> and the 128-bit SIMD type, or <code>u32;8</code> and the 256-bit SIMD type.</p>",
        "id": 212232365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832631
    },
    {
        "content": "<p>u16x8 can impl From&lt;u8x8&gt; which is probably more in the style of what From/Into are used for</p>",
        "id": 212232366,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832632
    },
    {
        "content": "<p>That's a very different conversion (widening).</p>",
        "id": 212232375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832653
    },
    {
        "content": "<p>Yep, which is what From/Into is currently used for</p>",
        "id": 212232385,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832669
    },
    {
        "content": "<p>As compared to a zero-cost reinterpretation of a vector register.</p>",
        "id": 212232387,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832672
    },
    {
        "content": "<p>Into for widening and TryInto for narrowing, right?</p>",
        "id": 212232392,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832685
    },
    {
        "content": "<p>Widening should be <code>.into()</code> and narrowing should be <code>.try_into()</code>, but the reverse shouldn't be a limitation.</p>",
        "id": 212232426,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832724
    },
    {
        "content": "<p><code>.into()</code> is used for lots of other things.</p>",
        "id": 212232442,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832733
    },
    {
        "content": "<p>It can convert between Box and Vec, or &amp;str and String.</p>",
        "id": 212232448,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832751
    },
    {
        "content": "<p>I can't think of any cases where it changes the underlying type though</p>",
        "id": 212232468,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832788
    },
    {
        "content": "<p>It seems like a reasonable thing to use for a same-size zero-cost conversion, if we need any indication at all and can't just use the same type.</p>",
        "id": 212232469,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832789
    },
    {
        "content": "<p>What do you mean by \"changes the underlying type\"?</p>",
        "id": 212232475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832801
    },
    {
        "content": "<p>Not to say it isn't safe, I just can't think of any uses of Into in that way</p>",
        "id": 212232478,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832804
    },
    {
        "content": "<p>Well even something as simple as From&lt;i8&gt; for u8, I'd have to check but I don't think that exists</p>",
        "id": 212232530,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832855
    },
    {
        "content": "<p>That <em>shouldn't</em> exist, but <code>TryFrom</code> should.</p>",
        "id": 212232537,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832882
    },
    {
        "content": "<p>Right, but that's my point. It's a narrowing op, not a cast</p>",
        "id": 212232552,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832907
    },
    {
        "content": "<p>That one isn't \"narrowing\", exactly. But I sorta get what you mean.</p>",
        "id": 212232567,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832934
    },
    {
        "content": "<p>From&lt;Vec&lt;u16&gt;&gt; for Vec&lt;u8&gt; _could_ exist but I'm not sure that it should?</p>",
        "id": 212232573,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832955
    },
    {
        "content": "<p>It seems that From/Into never changes the meaning of the data</p>",
        "id": 212232617,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832980
    },
    {
        "content": "<p>Right. I think I understand what you're getting at; you're suggesting that <em>reinterpretation</em> is different.</p>",
        "id": 212232620,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601832986
    },
    {
        "content": "<p>Yes, that's what I'm getting at</p>",
        "id": 212232623,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601832996
    },
    {
        "content": "<p>safe-transmute does seem like it more accurately captures the intent.</p>",
        "id": 212232626,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833000
    },
    {
        "content": "<p>\"change these bytes to a different type that's compatible\".</p>",
        "id": 212232631,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833010
    },
    {
        "content": "<p>You should be able to safe-transmute <code>Vec&lt;u16&gt;</code> to <code>Vec&lt;u8&gt;</code>, and <code>i8</code> to <code>u8</code> or vice versa.</p>",
        "id": 212232644,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833042
    },
    {
        "content": "<p>Which brings us back to, what should it look like to reinterpret between SIMD types.</p>",
        "id": 212232652,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833072
    },
    {
        "content": "<p>Yep. Well transmuting Vec depends on the implementation (size in bytes vs elements) but yep</p>",
        "id": 212232697,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833090
    },
    {
        "content": "<p>Not sure what you mean by that last bit.</p>",
        "id": 212232704,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833107
    },
    {
        "content": "<p>If the capacity/used size in a Vec is represented by number of elements instead of number of bytes you can't simply transmute them</p>",
        "id": 212232726,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833152
    },
    {
        "content": "<p>But that's irrelevant to this haha</p>",
        "id": 212232730,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833160
    },
    {
        "content": "<p>Ah, sure; I was thinking of the underlying data, not the Vec's fields like capacity and length.</p>",
        "id": 212232754,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833188
    },
    {
        "content": "<p>So I should say differently:</p>",
        "id": 212232760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833197
    },
    {
        "content": "<p>It should be possible to safe-transmute between <code>[u16]</code> and <code>[u8]</code>.</p>",
        "id": 212232811,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833216
    },
    {
        "content": "<p>Yeah, I agree</p>",
        "id": 212232820,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833239
    },
    {
        "content": "<p>And similarly some SIMD types</p>",
        "id": 212232828,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833250
    },
    {
        "content": "<p>So, safe-transmute does seem like a reasonable fit there. I think the bigger question is whether you should need an explicit conversion at all.</p>",
        "id": 212232854,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833293
    },
    {
        "content": "<p>It could get confusing, like transmuting u8 back to f32 is fine but you're pretty likely to get nans if you're not careful</p>",
        "id": 212232859,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833296
    },
    {
        "content": "<p>Yeah</p>",
        "id": 212232864,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833300
    },
    {
        "content": "<p>There are absolutely algorithms where, instruction-by-instruction, you want to treat a 256-bit register as 4 64-bit values or 32 8-bit values.</p>",
        "id": 212232925,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833347
    },
    {
        "content": "<p>There's also value in type-safety.</p>",
        "id": 212232934,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833364
    },
    {
        "content": "<p>I'm wondering if it might make sense to guarantee (type-wise) that they all have the same memory representation, such that they're all transparent newtype wrappers where .0 is the internal value that works in any of them.</p>",
        "id": 212232955,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833407
    },
    {
        "content": "<p>My general thought is that with From/Into it should \"just work\" as long as it compiles, so we might want a different trait to indicate it might not \"just work\" while still being safe</p>",
        "id": 212232972,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833427
    },
    {
        "content": "<p>I mean, they're all just bits, and they have the same alignment requirement, so it'll definitely \"work\" in some sense; the question is if someone may accidentally use an operation they didn't intend.</p>",
        "id": 212233027,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833471
    },
    {
        "content": "<p>So I think the reason that doesn't work is the way that platform-intrinsics work</p>",
        "id": 212233029,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833473
    },
    {
        "content": "<p>How so?</p>",
        "id": 212233052,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833516
    },
    {
        "content": "<p>As far as I can tell it uses the underlying type somehow to figure out which function to use</p>",
        "id": 212233054,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833518
    },
    {
        "content": "<p>Which monomorphization if that's the right word</p>",
        "id": 212233071,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833540
    },
    {
        "content": "<p>They're generic</p>",
        "id": 212233074,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833544
    },
    {
        "content": "<p>Interesting. That seems like a property of the language-level intrinsics, rather than the compiler-level intrinsic operations.</p>",
        "id": 212233122,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833567
    },
    {
        "content": "<p>But in any case, the newtypes can call the right intrinsics easily enough.</p>",
        "id": 212233133,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601833587
    },
    {
        "content": "<p>Without calling the llvm intrinsics directly I'm not so sure</p>",
        "id": 212233169,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833644
    },
    {
        "content": "<p>My only thought is maybe the platform-intrinsics panic on overflow in debug mode?  Otherwise I'm not sure what the difference could be</p>",
        "id": 212233335,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833885
    },
    {
        "content": "<p>They seem to lower directly to the llvm intrinsics but I admittedly haven't dug into the codegen at all</p>",
        "id": 212233347,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601833917
    },
    {
        "content": "<p>I believe that's the intended effect, yes.</p>",
        "id": 212233466,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601834064
    },
    {
        "content": "<p>If it turns out that it requires a safe-transmute operation to get between the portable SIMD types and the native ones, that'd be OK, but if there's some way to avoid that it'd be nice to avoid it. Either way, the critical thing would be that it needs to compile to zero code, and just reuse the same register.</p>",
        "id": 212233500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601834131
    },
    {
        "content": "<p>Yeah, right now it just uses transmute which should do that</p>",
        "id": 212233692,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601834319
    },
    {
        "content": "<p>I think that <code>From</code> and <code>Into</code> are a poor fit for this sort of conversion.</p>",
        "id": 212234183,
        "sender_full_name": "Lokathor",
        "timestamp": 1601834891
    },
    {
        "content": "<p>So either we just accept that it's a poor fit and put in the impls anyway and move on with life, or we just use other methods that aren't specifically <code>from</code> and <code>into</code>.</p>",
        "id": 212234215,
        "sender_full_name": "Lokathor",
        "timestamp": 1601834954
    },
    {
        "content": "<p>But we should require an explicit conversion to re-interpret the bit layout of a register in general.</p>",
        "id": 212234279,
        "sender_full_name": "Lokathor",
        "timestamp": 1601835019
    },
    {
        "content": "<p>I don't see any reason to avoid transmutation here, and once safe transmutation is available i don't see any reason to avoid that.</p>",
        "id": 212234326,
        "sender_full_name": "Lokathor",
        "timestamp": 1601835078
    },
    {
        "content": "<p>Ultimately, this <em>is</em> a transmutation, and there's no way around that. The only thing to bother with is how safe and ergonomic we can make it.</p>",
        "id": 212234384,
        "sender_full_name": "Lokathor",
        "timestamp": 1601835127
    },
    {
        "content": "<blockquote>\n<p>You should be able to safe-transmute Vec&lt;u16&gt; to Vec&lt;u8&gt;, and i8 to u8 or vice versa.</p>\n</blockquote>\n<p>Small niggle here: you cannot. Alignment changes are illegal with <code>Vec</code> casting because of the allocator. You could do this with an array/slice though.</p>",
        "id": 212234700,
        "sender_full_name": "Lokathor",
        "timestamp": 1601835572
    }
]