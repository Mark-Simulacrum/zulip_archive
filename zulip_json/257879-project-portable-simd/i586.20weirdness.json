[
    {
        "content": "<p>I know we had some concerns about i586 but what exactly is the problem?  I've been working on the reduction ops and can't seem to get sum or product of lanes to work quite right on i586.</p>",
        "id": 230026180,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1615554838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I think you may have brought up i586 originally</p>",
        "id": 230026273,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1615554872
    },
    {
        "content": "<p>among other possible problems: i586 f32 ops are not all bit-preserving</p>",
        "id": 230039932,
        "sender_full_name": "Lokathor",
        "timestamp": 1615560277
    },
    {
        "content": "<p>bit-preserving meaning?</p>",
        "id": 230043091,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1615561433
    },
    {
        "content": "<p>i586 uses 80-bit floating-point precision internally</p>",
        "id": 230043225,
        "sender_full_name": "Amanieu",
        "timestamp": 1615561460
    },
    {
        "content": "<p>Because the x86 FPU is designed that way. You only get sane floating-point behavior with SSE (available on the i686 target)</p>",
        "id": 230043298,
        "sender_full_name": "Amanieu",
        "timestamp": 1615561496
    },
    {
        "content": "<p>Oh right, forgot that it's 80 bits</p>",
        "id": 230043491,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1615561548
    },
    {
        "content": "<p>I wonder if some implementations of sum and product are moving to gp registers and rounding to 64 bits between operations?</p>",
        "id": 230046623,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1615562629
    },
    {
        "content": "<p>particularly: <code>f32::from_bits(x).to_bits() == x</code> does not always pass if the bits of X are nan, which means that sse bitwise operation emulation doesn't work right.</p>",
        "id": 230065816,
        "sender_full_name": "Lokathor",
        "timestamp": 1615569273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/i586.20weirdness/near/230046623\">said</a>:</p>\n<blockquote>\n<p>I wonder if some implementations of sum and product are moving to gp registers and rounding to 64 bits between operations?</p>\n</blockquote>\n<p>my understanding is that it's partly because the System V ABI specifies where results are supposed to be passed, values move in/out of the x87 registers as a result, and a canonicalizing operation occurs.</p>",
        "id": 230089571,
        "sender_full_name": "Jubilee",
        "timestamp": 1615579619
    },
    {
        "content": "<p>I think on i586 I have to manually sum and product because LLVM is not respecting that same canonicalization</p>",
        "id": 230090110,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1615579833
    },
    {
        "content": "<p>Which is probably fine in most contexts but I think we'd rather have consistency here</p>",
        "id": 230090149,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1615579850
    }
]