[
    {
        "content": "<p>Figured folks in the WG might be interested, but a new paper on SIMD-enabled utf-8 validation was just posted on ArXiV <a href=\"https://arxiv.org/abs/2010.03090\">https://arxiv.org/abs/2010.03090</a> -- this got linked to by the author in <a href=\"https://github.com/rust-lang/rust/issues/68455#issuecomment-706225279\">https://github.com/rust-lang/rust/issues/68455#issuecomment-706225279</a></p>\n<p>Perhaps one day this could be adapted to be written using portable SIMD instructions ^^</p>",
        "id": 213169616,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1602601744
    },
    {
        "content": "<p>I (poorly) implemented one of daniel lemire's papers in the past, with just SSSE3 (what's statically available on my macos). Wasn't able to get that great performance but didn't have any special casing for ASCII either... a tricky thing for libcore functionality is that feature detection code needs to be duplicated from stdarch. (it's not core::is_x86_feature_detected, although it <a href=\"https://docs.rs/core_detect/0.1.0/core_detect/\">could be</a>)</p>\n<p>maybe this group will solve that idk. would be nice but I think we're putting off most concerns on feature detection.</p>",
        "id": 213184792,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602607865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> I thought the blocker there was was that feature detection is in <code>std</code> but we need this in <code>core</code>?</p>",
        "id": 213224184,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602627694
    },
    {
        "content": "<p>Err, yes. That's what I was trying to say, sorry if it's unclear.</p>",
        "id": 213224252,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602627726
    },
    {
        "content": "<p>All good! I've just had _unify <code>std</code>_ in my head lately so am looking for things that are related <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213224778,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602628113
    },
    {
        "content": "<p>Without digging into core_detect, don't you need to know whether your OS supports AVX (for saving the ymm registers at context switches)?</p>",
        "id": 213224831,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602628155
    },
    {
        "content": "<p>It's literally the code from std_detect. std_detect requires libstd only on non-x86 targets.</p>",
        "id": 213226377,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602628891
    },
    {
        "content": "<p>Which is to say, I assume that's the same as the CPUID bits for AVX, in which case yes.</p>",
        "id": 213226412,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602628917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> well, that's certainly a problem that gets easier if \"unify std\" happens. Even if it isn't stablely exposed via core (because of only 1 platform supporting it) it could still allow libcore functions to use feature detection to provide accelerated impls in some cases</p>",
        "id": 213227600,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602629831
    },
    {
        "content": "<p>Ah, on x86-64 there's a register that indicates if the OS supports AVX, so no syscall necessary</p>",
        "id": 213227653,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602629872
    },
    {
        "content": "<p>doesnt the OS also control (in some manner) what CPUID gives us?</p>",
        "id": 213227747,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602629917
    },
    {
        "content": "<p>I don't check that register, but neither does std::is_x86_feature_...</p>",
        "id": 213227767,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602629938
    },
    {
        "content": "<p>I was told that CPUID would return the right thing for OSes that disable various SIMD features tho</p>",
        "id": 213227806,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602629972
    },
    {
        "content": "<p>It does check it, that's what <code>xgetbv</code> does</p>",
        "id": 213227832,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602629998
    },
    {
        "content": "<p>And cpuid indicates support of that instruction</p>",
        "id": 213227935,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602630020
    },
    {
        "content": "<p>ah you're right. i forgot that this is more involved than just reading some values out of cpuid. I check it though <a href=\"https://github.com/thomcc/core_detect/blob/0bcd5ef3b10626401f61ec16c25f930a4ab76c32/src/os/x86.rs#L203\">https://github.com/thomcc/core_detect/blob/0bcd5ef3b10626401f61ec16c25f930a4ab76c32/src/os/x86.rs#L203</a></p>",
        "id": 213228003,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602630074
    },
    {
        "content": "<p>and by \"I\" i mean \"the code I copied from std_detect\" does</p>",
        "id": 213228041,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602630098
    },
    {
        "content": "<p><code>encoding_rs</code> has SIMD-accelerated ASCII handling for UTF-8 validation such that it's faster than the standard library for x86_64 and aarch64. It's not as fancy as Daniel Lemire's solution. My intent has been to upstream it to the standard library once the standard library gains portable SIMD.</p>\n<p>Unfortunately, ARMv7 being what it is, SIMD wasn't a win there.</p>",
        "id": 213312507,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1602691445
    }
]