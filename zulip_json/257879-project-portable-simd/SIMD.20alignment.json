[
    {
        "content": "<p>also I did some reading and AltiVec apparently heavily penalizes unaligned loads because it handles unaligned loads in the simplest way.<br>\nyou'll never guess what the simplest way is! :D</p>",
        "id": 240360470,
        "sender_full_name": "Jubilee",
        "timestamp": 1622049990
    },
    {
        "content": "<p>it's really quite elegant! :D</p>",
        "id": 240360508,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050005
    },
    {
        "content": "<p><strong>truncation</strong></p>",
        "id": 240360522,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050013
    },
    {
        "content": "<p>no trap on alignment failures! :D</p>",
        "id": 240360594,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050042
    },
    {
        "content": "<p>all reads perform at the same speed! :D</p>",
        "id": 240360628,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050059
    },
    {
        "content": "<p>you just uh, have to read twice if you do an unaligned read</p>",
        "id": 240360755,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050120
    },
    {
        "content": "<p>This doesn't actually matter much for people who aren't coding against a PS3 as later POWER versions now support unaligned loads at normal speed (so, still penalized, but only a \"normal\" amount instead of 200%).</p>\n<p>But anyways the numbers I cited were actually <strong>for</strong> memcpy.</p>",
        "id": 240362127,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050794
    },
    {
        "content": "<p>and the 50% was basically the worst case where someone managed to try really hard to find the pathological behavior.</p>",
        "id": 240362283,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050856
    },
    {
        "content": "<p>Yeah. I think the best way to go is do what makes sense for your algorithm</p>",
        "id": 240362350,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622050888
    },
    {
        "content": "<p><a href=\"https://lemire.me/blog/2012/05/31/data-alignment-for-speed-myth-or-reality/\">https://lemire.me/blog/2012/05/31/data-alignment-for-speed-myth-or-reality/</a></p>",
        "id": 240362362,
        "sender_full_name": "Jubilee",
        "timestamp": 1622050896
    },
    {
        "content": "<p>But for our case, my question is which alignments we're actually <strong>worried</strong> about</p>",
        "id": 240362629,
        "sender_full_name": "Jubilee",
        "timestamp": 1622051004
    },
    {
        "content": "<p>my understanding is that, in all of these cases, the read is aligned to the <strong>element</strong> size</p>",
        "id": 240362662,
        "sender_full_name": "Jubilee",
        "timestamp": 1622051024
    },
    {
        "content": "<p>Yes, I think minimum we assume element alignment</p>",
        "id": 240362917,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622051139
    },
    {
        "content": "<p>Though I'm not actually sure there's much of a difference between the elements being aligned vs unaligned</p>",
        "id": 240363023,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622051166
    },
    {
        "content": "<p>Integers definitely don't need to be aligned to the element either</p>",
        "id": 240363079,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622051202
    },
    {
        "content": "<p>Well it's probably a logic error unless they're reading raw bytes.</p>",
        "id": 240363147,
        "sender_full_name": "Jubilee",
        "timestamp": 1622051244
    },
    {
        "content": "<p>Agreed</p>",
        "id": 240363892,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622051539
    },
    {
        "content": "<p>So I would like to worry a lot about element alignment and <strong>almost</strong> not at all about vector alignment.<br>\nAnd worry most about ergonomics.</p>",
        "id": 240367968,
        "sender_full_name": "Jubilee",
        "timestamp": 1622053278
    },
    {
        "content": "<p>Agreed, I think</p>",
        "id": 240368497,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622053488
    },
    {
        "content": "<p>SimpleV will have a speed advantage for things aligned to element size or bigger</p>",
        "id": 240374949,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622056006
    },
    {
        "content": "<p>I'm thinking we may want to provide a function that is like <code>align_to</code> but safe</p>",
        "id": 240406094,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073323
    },
    {
        "content": "<p>Since we know the transmute is valid</p>",
        "id": 240406100,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073336
    },
    {
        "content": "<p>That's strictly just for convenience though</p>",
        "id": 240406163,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073382
    },
    {
        "content": "<p>honestly the align_to-style is often a bad pattern for simd. You usually want to do the first and last elements with a read_unaligned, and handle the overlap somehow</p>",
        "id": 240406171,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622073398
    },
    {
        "content": "<p>typiclally way more efficient than handling the unaligned head/tail with separate loops</p>",
        "id": 240406208,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622073451
    },
    {
        "content": "<p>Yeah, I ran into that in the past as well</p>",
        "id": 240406393,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073640
    },
    {
        "content": "<p>It doesn't work if you want to reprocess overlapping elements to get a full vector</p>",
        "id": 240406417,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073668
    },
    {
        "content": "<p>But align_to can still be used in that case to determine the alignment</p>",
        "id": 240406434,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073698
    },
    {
        "content": "<p>sort of. note that align_to is allowed to return the full slice in the first element, and under miri it will (actually, maybe this has been changed)</p>",
        "id": 240406510,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622073760
    },
    {
        "content": "<p>:/</p>",
        "id": 240406532,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073796
    },
    {
        "content": "<p>Hopefully fixed</p>",
        "id": 240406536,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622073801
    },
    {
        "content": "<p>It's pretty fundamental that MIRI doesn't ever treat anything as overaligned, though, AFAIK.  It <em>can't</em> know how to align a <code>[u8; N].align_to::&lt;u16&gt;()</code> (unless maybe that <code>[u8]</code> came from something like a <code>[u32]</code> originally).</p>",
        "id": 240406684,
        "sender_full_name": "scottmcm",
        "timestamp": 1622073957
    },
    {
        "content": "<p>i think that's not true. iirc it treats allocations as initially aligned to 8 bytes or something</p>",
        "id": 240406770,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622074028
    },
    {
        "content": "<p>I don't see why it should.  <code>GlobalAlloc</code> doesn't promise that.  And even if it does for allocations, I don't see why it would apply to local variables, say.</p>",
        "id": 240406837,
        "sender_full_name": "scottmcm",
        "timestamp": 1622074088
    },
    {
        "content": "<p>i think it was a concession to how much code being strict about it broke</p>",
        "id": 240406849,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622074106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> might be around to confirm or correct</p>",
        "id": 240406857,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622074118
    },
    {
        "content": "<p>I guess it depends on <code>-Zmiri-disable-alignment-check</code> and <code>-Zmiri-symbolic-alignment-check</code> and such.</p>",
        "id": 240406960,
        "sender_full_name": "scottmcm",
        "timestamp": 1622074225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/240406684\">said</a>:</p>\n<blockquote>\n<p>It <em>can't</em> know how to align a <code>[u8; N].align_to::&lt;u16&gt;()</code> (unless maybe that <code>[u8]</code> came from something like a <code>[u32]</code> originally).</p>\n</blockquote>\n<p>Part of the frustrating thing about this function is that IMO a \"correct\" implementation of, say align_to for [u8] should never return more than <code>size_of::&lt;T&gt;()</code> bytes in the head or tail slice. anyway, using align_to to determine alignment is probably subpar compared to using, say, align_offset</p>",
        "id": 240406963,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622074230
    },
    {
        "content": "<p>the need for safe-transmute strikes again</p>",
        "id": 240411923,
        "sender_full_name": "Lokathor",
        "timestamp": 1622079876
    },
    {
        "content": "<p>not really, this is unaligned and thus wouldn't be safe to transmute</p>",
        "id": 240412139,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622080173
    },
    {
        "content": "<p>i think if it was easy to make a zeroed array or vec of SimdType, and then safe convert the mutable slice of that into a mutable slice of ElementType and initialize the elements that way, then that would cover a lot of ground</p>",
        "id": 240422904,
        "sender_full_name": "Lokathor",
        "timestamp": 1622094482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Porting.20benchamark.20examples/near/240406510\">said</a>:</p>\n<blockquote>\n<p>sort of. note that align_to is allowed to return the full slice in the first element, and under miri it will (actually, maybe this has been changed)</p>\n</blockquote>\n<p>this has been changed a long time ago, to better align miri's default behavior with rustc's real behavior. I don't quite understand why the myth that miri still does this is so persistent, it comes up every other month or so.^^<br>\nhowever, there is still a flag <code>-Zmiri-symbolic-alignment-check</code> that switches back to the old behavior (that flag is better at catching alignment violations than the default behavior).<br>\nmoreover, if we ever want to support <code>aling_to</code> in <code>const</code>, then it has no choice but to return the full slice in the first element in many cases.</p>",
        "id": 240428748,
        "sender_full_name": "RalfJ",
        "timestamp": 1622100250
    },
    {
        "content": "<blockquote>\n<p>Part of the frustrating thing about this function is that IMO a \"correct\" implementation of, say align_to for [u8] should never return more than size_of::&lt;T&gt;() bytes in the head or tail slice. </p>\n</blockquote>\n<p>This is impossible to implement during const-time, so guaranteeing this means we can never support <code>align_to</code> in CTFE. (I don't have a strong opinion either way here, just pointing out why that guarantee has not been added yet.)</p>",
        "id": 240428807,
        "sender_full_name": "RalfJ",
        "timestamp": 1622100318
    },
    {
        "content": "<p>avx512 wants 64-byte alignment IIRC</p>",
        "id": 240514082,
        "sender_full_name": "Jubilee",
        "timestamp": 1622141682
    },
    {
        "content": "<p>Reading Arm, while they don't seem to require \"vector alignment\" very much for Neon, they do want <strong>element</strong> alignment.</p>",
        "id": 240515189,
        "sender_full_name": "Jubilee",
        "timestamp": 1622142130
    },
    {
        "content": "<p>Okay, actually I just realized the data alignment thing is its own conversation so I am going to split it out into a new thing. Righto.</p>",
        "id": 240517001,
        "sender_full_name": "Jubilee",
        "timestamp": 1622142894
    },
    {
        "content": "<p>Nice, okay, that makes this easier to read the context of, and now I can ping people and ask for help and not have them have to read a million unrelated questions.</p>",
        "id": 240517320,
        "sender_full_name": "Jubilee",
        "timestamp": 1622143030
    },
    {
        "content": "<p>Also apparently the x86-64 AVX+ environment is actually pretty loosey-goosey about unaligned accesses:</p>\n<blockquote>\n<p>According to the AVX spec:<br>\n“Most arithmetic and data processing instructions encoded using the VEX prefix and<br>\nperforming memory accesses have more flexible memory alignment requirements<br>\nthan instructions that are encoded without the VEX prefix. Specifically,<br>\n• With the exception of explicitly aligned 16 or 32 byte SIMD load/store instructions,<br>\nmost VEX-encoded, arithmetic and data processing instructions operate in<br>\na flexible environment regarding memory address alignment, i.e. VEX-encoded<br>\ninstruction with 32-byte or 16-byte load semantics will support unaligned load<br>\noperation by default. Memory arguments for most instructions with VEX prefix<br>\noperate normally without causing #GP(0) on any byte-granularity alignment<br>\n(unlike Legacy SSE instructions).”</p>\n</blockquote>",
        "id": 240522577,
        "sender_full_name": "Jubilee",
        "timestamp": 1622145388
    },
    {
        "content": "<p>aarch64 PCS:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Type Class</th>\n<th align=\"left\">Machine Type</th>\n<th align=\"center\">Byte size</th>\n<th align=\"center\">Natural Alignment (bytes)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Short vector</td>\n<td align=\"left\">64-bit vector</td>\n<td align=\"center\">8</td>\n<td align=\"center\">8</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">128-bit vector</td>\n<td align=\"center\">16</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"left\">Scalable Vector</td>\n<td align=\"left\">VG×64-bit vector of 8-bit elements</td>\n<td align=\"center\">VG×8</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">VG×64-bit vector of 16-bit elements</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">VG×64-bit vector of 32-bit elements</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">VG×64-bit vector of 64-bit elements</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">Scalable Predicate</td>\n<td align=\"left\">VG×8-bit predicate</td>\n<td align=\"center\">VG</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody>\n</table>",
        "id": 240526501,
        "sender_full_name": "Jubilee",
        "timestamp": 1622147213
    },
    {
        "content": "<p>So, Arm does care about 16 byte alignment for Neon vectors, or at least, would rather you do so. And also 16-byte alignment for Scalable vectors.</p>",
        "id": 240526983,
        "sender_full_name": "Jubilee",
        "timestamp": 1622147437
    },
    {
        "content": "<p>I really appreciate that Neon and SVE vectors share the same natural alignment. That makes many things simpler. ^^;</p>",
        "id": 240531093,
        "sender_full_name": "Jubilee",
        "timestamp": 1622149304
    },
    {
        "content": "<p>This is interesting.<br>\n<a href=\"https://www.aes.tu-berlin.de/fileadmin/fg196/publication/old-juurlink/performance_impact_of_misaligned_accesses_in_simd_extensions.pdf\">https://www.aes.tu-berlin.de/fileadmin/fg196/publication/old-juurlink/performance_impact_of_misaligned_accesses_in_simd_extensions.pdf</a></p>\n<blockquote>\n<p>Furthermore, the MMX and SSE implementations using loop peeling technique are up to 1.45 and 1.66 faster than their implementation for addition of two arrays with different sizes, respectively.</p>\n</blockquote>",
        "id": 240534208,
        "sender_full_name": "Jubilee",
        "timestamp": 1622150776
    },
    {
        "content": "<p>How old is that?</p>",
        "id": 240535466,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622151492
    },
    {
        "content": "<p>Ah yeah, the numbers are measured on pentium 3 and 4, that's probably quite old. My experience here is that this hasn't been true for some time. I think daniel lemire's blog has some numbers here, IIRC (I can't check at the moment)</p>",
        "id": 240535555,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622151556
    },
    {
        "content": "<p>yeah very</p>",
        "id": 240538262,
        "sender_full_name": "Jubilee",
        "timestamp": 1622153079
    },
    {
        "content": "<p>I think you're thinking of <a href=\"https://lemire.me/blog/2012/05/31/data-alignment-for-speed-myth-or-reality/\">https://lemire.me/blog/2012/05/31/data-alignment-for-speed-myth-or-reality/</a> yeah?</p>",
        "id": 240538491,
        "sender_full_name": "Jubilee",
        "timestamp": 1622153237
    },
    {
        "content": "<p>I remember one about simd but I could be wrong</p>",
        "id": 240539727,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622154210
    }
]