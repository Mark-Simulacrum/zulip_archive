[
    {
        "content": "<p>First, hi. I hope this is the right place for user questions on std::simd. If so I apologize in advance for my lack of general simd knowledge. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>First question, is there a vertical (lane-wise) min? min looks like it's returning a lexicographic min</p>",
        "id": 268743708,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1642706420
    },
    {
        "content": "<p>Is it neither of these?<br>\n<a href=\"https://doc.rust-lang.org/nightly/std/simd/struct.Simd.html#method.min\">https://doc.rust-lang.org/nightly/std/simd/struct.Simd.html#method.min</a><br>\n<a href=\"https://doc.rust-lang.org/nightly/std/simd/struct.Simd.html#method.horizontal_min\">https://doc.rust-lang.org/nightly/std/simd/struct.Simd.html#method.horizontal_min</a></p>",
        "id": 268744044,
        "sender_full_name": "scottmcm",
        "timestamp": 1642706568
    },
    {
        "content": "<p>min and max are already lanewise, if that's what you want</p>",
        "id": 268744173,
        "sender_full_name": "Lokathor",
        "timestamp": 1642706638
    },
    {
        "content": "<p>Though I wonder if it should be renamed to <code>lanes_min</code>, to disambiguate from <code>Ord::min</code>, the way it's <code>lanes_eq</code> to distinguish from <code>PartialEq::eq</code>.</p>",
        "id": 268744242,
        "sender_full_name": "scottmcm",
        "timestamp": 1642706654
    },
    {
        "content": "<p>i was wondering that myself but honestly all the \"lanes\" stuff is extremely tedious</p>",
        "id": 268744405,
        "sender_full_name": "Lokathor",
        "timestamp": 1642706736
    },
    {
        "content": "<p>Ah, I'm using <code>Ord::min</code>. Is there no lane min for unsigned int types. Specifically <code>u16x4</code>?</p>",
        "id": 268744785,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1642706905
    },
    {
        "content": "<p>Hmm, I guess at least one of them should be renamed.  Because if using inherents to shadow is fine, then <code>lanes_eq</code> could just be <code>eq</code>.</p>",
        "id": 268744833,
        "sender_full_name": "scottmcm",
        "timestamp": 1642706929
    },
    {
        "content": "<p>It's likely going to be moved to a trait which will help disambiguate it, but yeah, it's potentially confusing</p>",
        "id": 268744871,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642706946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"469380\">Joel Pedraza</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/vertical.20min.3F/near/268744785\">said</a>:</p>\n<blockquote>\n<p>Ah, I'm using <code>Ord::min</code>. Is there no lane min for unsigned int types. Specifically <code>u16x4</code>?</p>\n</blockquote>\n<p>Oh, I hadn't noticed that the methods are only for floats</p>",
        "id": 268744934,
        "sender_full_name": "scottmcm",
        "timestamp": 1642706979
    },
    {
        "content": "<p>I guess for now you'll need <code>lanes_lt</code>+<code>select</code>.  (Well, however you spell <code>select</code> for std::simd.)</p>",
        "id": 268744984,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707002
    },
    {
        "content": "<p>Yeah, I'd recommend that for now. I'm working on changes that bring min/max/clamp to all vectors</p>",
        "id": 268745070,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1642707031
    },
    {
        "content": "<p><code>select</code>: <a href=\"https://doc.rust-lang.org/nightly/std/simd/struct.Mask.html#method.select\">https://doc.rust-lang.org/nightly/std/simd/struct.Mask.html#method.select</a></p>",
        "id": 268745237,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642707100
    },
    {
        "content": "<p>Trying to write <a href=\"https://doc.rust-lang.org/stable/core/arch/x86/fn._mm_alignr_epi8.html\">https://doc.rust-lang.org/stable/core/arch/x86/fn._mm_alignr_epi8.html</a> in terms of std::simd</p>\n<blockquote>\n<p>Concatenate 16-byte blocks in a and b into a 32-byte temporary result, shift the result right by n bytes, and returns the low 16 bytes.</p>\n</blockquote>\n<p>Not sure if I should be implementing as concat a b to u16x16, shift, truncate.  Or shift a left, shift a right, mask them together. Or something else?</p>",
        "id": 268753798,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1642711018
    },
    {
        "content": "<p>In this case, the const I'm shifting right by is always 2 (so one u16)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">[</span><span class=\"kt\">u16</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"p\">[</span><span class=\"kt\">u16</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expected</span>: <span class=\"p\">[</span><span class=\"kt\">u16</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268754531,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1642711357
    },
    {
        "content": "<p>Oh, I think that's trivially a swizzle</p>",
        "id": 268755627,
        "sender_full_name": "Joel Pedraza",
        "timestamp": 1642711880
    }
]