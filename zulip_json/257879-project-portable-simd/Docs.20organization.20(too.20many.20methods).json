[
    {
        "content": "<p>If there were types such as <code>elementxN</code> (<code>f32xN</code>, <code>i32xN</code>, etc) then the various methods could be implemented on those type aliases. This would split up the method soup that is the current docs output, so that you could look at the <code>f32xN</code> page and see only the methods that work for <code>f32</code> elements. For example, &lt;<a href=\"https://doc.rust-lang.org/nightly/core/simd/type.f32x4.html\">https://doc.rust-lang.org/nightly/core/simd/type.f32x4.html</a>&gt; </p>\n<p>though, unfortunately for whatever reason, the docs of the <code>std</code> version of the simd module don't uphold that splitting up of things. Perhaps that's a rustdoc bug that could be addressed.</p>",
        "id": 265620952,
        "sender_full_name": "Lokathor",
        "timestamp": 1640037902
    },
    {
        "content": "<p>iirc that's how portable-simd was originally, i prefer a single <code>Simd&lt;T, N&gt;</code> type cuz that's conceptually simpler and more useful in generic code</p>",
        "id": 265653383,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640069853
    },
    {
        "content": "<p>(plus <code>Mask&lt;T, N&gt;</code>)</p>",
        "id": 265653430,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640069886
    },
    {
        "content": "<p>no no no, i'm not saying to change that part, i'm saying to change how the impl blocks themselves are declared, because it's the same in terms of code, but rustdoc sorts out things based on that</p>",
        "id": 265653434,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069889
    },
    {
        "content": "<p><code>impl From&lt;__m128&gt; for f32x4 { ... }</code> and <code>impl From&lt;__m128&gt; for Simd&lt;f32, 4&gt; { ... }</code> are the same effect in terms of code, but different rustdoc output is generated</p>",
        "id": 265653455,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069940
    },
    {
        "content": "<p>rustdoc will sort impls on a type alias onto the type alias's page</p>",
        "id": 265653470,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069973
    },
    {
        "content": "<p>The rustdoc output actually isn't any different</p>",
        "id": 265653483,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070002
    },
    {
        "content": "<p>ah, ok...in that case I have no particular opinion rn</p>",
        "id": 265653512,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640070003
    },
    {
        "content": "<p>when you impl on the alias it's reduced down to being the same as implementing on that type</p>",
        "id": 265653581,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070023
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>pub struct A;\n\npub type B = A;\n\nimpl B {\n    pub fn foo() {}\n}\n</code></pre></div>",
        "id": 265653636,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070086
    },
    {
        "content": "<p>you can do this, <code>foo</code> appears directly on <code>A</code></p>",
        "id": 265653650,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070104
    },
    {
        "content": "<p>while you say that, <code>From&lt;__m128&gt;</code> is on the f32x4 page but not the general Simd page</p>",
        "id": 265653711,
        "sender_full_name": "Lokathor",
        "timestamp": 1640070152
    },
    {
        "content": "<p>and even if it appeared on both pages, that'd still improve the situation quite a bit i think because you can go to the element aliased page to at least see <em>just</em> methods that work for your element you're using</p>",
        "id": 265653747,
        "sender_full_name": "Lokathor",
        "timestamp": 1640070189
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/simd/struct.Simd.html#impl-From%3C__m128%3E\">https://doc.rust-lang.org/nightly/std/simd/struct.Simd.html#impl-From%3C__m128%3E</a></p>",
        "id": 265653839,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070268
    },
    {
        "content": "<p>it is there</p>",
        "id": 265653846,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070277
    },
    {
        "content": "<p>yes, the std page is a re-export and sorts differently from the core page</p>",
        "id": 265653870,
        "sender_full_name": "Lokathor",
        "timestamp": 1640070304
    },
    {
        "content": "<p>when they fixed up type aliases in rustdoc they probably missed the re-export case</p>",
        "id": 265653890,
        "sender_full_name": "Lokathor",
        "timestamp": 1640070325
    },
    {
        "content": "<ul>\n<li>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/simd/type.f32x4.html\">https://doc.rust-lang.org/nightly/core/simd/type.f32x4.html</a>&gt;</li>\n<li>&lt;<a href=\"https://doc.rust-lang.org/nightly/core/simd/struct.Simd.html\">https://doc.rust-lang.org/nightly/core/simd/struct.Simd.html</a>&gt;</li>\n</ul>",
        "id": 265653904,
        "sender_full_name": "Lokathor",
        "timestamp": 1640070348
    },
    {
        "content": "<p>hmm, that must be a quirk of traits</p>",
        "id": 265653907,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070356
    },
    {
        "content": "<p>if you directly implement a function it appears on the original type</p>",
        "id": 265653954,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640070378
    },
    {
        "content": "<p>hmm, i'd expect all trait impls to always show up in the docs on any type, even if the impl was written using an alias of that type.</p>",
        "id": 265654007,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640070471
    },
    {
        "content": "<p>if you impl a method on a type you get it in both places</p>",
        "id": 265654056,
        "sender_full_name": "Lokathor",
        "timestamp": 1640070497
    }
]