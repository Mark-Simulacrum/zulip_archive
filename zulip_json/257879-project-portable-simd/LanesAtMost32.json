[
    {
        "content": "<p>Should we consider the possibility that this trait isn't temporary?  Even if we lift some of the restrictions there will still be a limitation on maximum lane count right?</p>",
        "id": 235428910,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618959538
    },
    {
        "content": "<p>It will certainly be higher than 32 but also lower than usize::MAX I imagine</p>",
        "id": 235428984,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618959586
    },
    {
        "content": "<p>Well, you can't make a <code>[u8; usize::MAX]</code> either, so it might be ok for simd to do the same kind of \"yeah, no\" errors that that makes.</p>",
        "id": 235433192,
        "sender_full_name": "scottmcm",
        "timestamp": 1618962284
    },
    {
        "content": "<p>I don't think it's quite the same since <code>[u8; usize::MAX]</code> is a completely valid type, you just can't construct one.  The SIMD issue is a little more complicated because <code>SimdF32&lt;{ usize::MAX }&gt;</code> isn't even a valid type and errors the moment it's hit during typeck (or monomorphisation)</p>",
        "id": 235434035,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618962811
    },
    {
        "content": "<p>well, lane counts I care about in practice are mostly:<br>\n{ 2, 3, 4, 8, 16, 32, 48, 64, 80... 256 }</p>",
        "id": 235447209,
        "sender_full_name": "Jubilee",
        "timestamp": 1618974274
    },
    {
        "content": "<p>Ooh, it was pointed out to me that I probably actually care about every even number up to 32! :D</p>",
        "id": 235456865,
        "sender_full_name": "Jubilee",
        "timestamp": 1618982145
    },
    {
        "content": "<p>Yeah, I just mean that I don't know how important it is for it to fail at typeck.  I agree that <code>SimdF32&lt;{1 &lt;&lt; 20}&gt;</code> is not a type that's ever going to go well, but I also don't see it being materially worse than <code>[f32; 1&lt;&lt;20]</code> that also doesn't fail at typeck.</p>",
        "id": 235457124,
        "sender_full_name": "scottmcm",
        "timestamp": 1618982346
    },
    {
        "content": "<p>It needs to fail at typeck because it needs to fail before layout calculation</p>",
        "id": 235457168,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618982391
    },
    {
        "content": "<p>At a minimum it needs to fail before going to the backend in any form, though</p>",
        "id": 235457259,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618982454
    },
    {
        "content": "<p>How is layout calculated for something that is supported, like <code>Simd&lt;96&gt;</code>?</p>",
        "id": 235457500,
        "sender_full_name": "scottmcm",
        "timestamp": 1618982651
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/layout.rs#L667\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/layout.rs#L667</a></p>",
        "id": 235457785,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618982975
    },
    {
        "content": "<p>This match arm</p>",
        "id": 235457787,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618982980
    },
    {
        "content": "<p>spicy.</p>",
        "id": 235459328,
        "sender_full_name": "Jubilee",
        "timestamp": 1618984479
    },
    {
        "content": "<p>Ah, which eventually ends up here: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_target/abi/mod.rs.html#208-217\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_target/abi/mod.rs.html#208-217</a></p>\n<p>That seems like it could hypothetically support arbitrary size, so <code>align_of::&lt;Simd&lt;f32, 100000&gt;&gt;</code> â†’ 524288, even if you can never actually make an instance without things exploding...</p>",
        "id": 235460645,
        "sender_full_name": "scottmcm",
        "timestamp": 1618985557
    },
    {
        "content": "<p>What happens when that would overflow?</p>",
        "id": 235460684,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1618985606
    },
    {
        "content": "<p>Might be fine to just do a <code>error[E0080]: values of the type ... are too big for the current architecture</code> like <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ebaad7d8a951720088a9731d6da34037\">this</a>.</p>",
        "id": 235460866,
        "sender_full_name": "scottmcm",
        "timestamp": 1618985790
    },
    {
        "content": "<p>Oh, that even happens earlier than I'd expected -- <code>[u8; isize::MAX as usize / 2]</code> is no good either.</p>",
        "id": 235461012,
        "sender_full_name": "scottmcm",
        "timestamp": 1618985919
    },
    {
        "content": "<p>Basically, if an already-stable <code>min_const_generics</code> array wrapper doesn't error for this in typeck, then I don't know that <code>Simd</code> really <em>needs</em> to either.</p>",
        "id": 235461290,
        "sender_full_name": "scottmcm",
        "timestamp": 1618986155
    },
    {
        "content": "<p>speaking of, I would like to get all the SIMD stuff that isn't particular to the LLVM lowering out <code>rustc_codegen_llvm</code> and into <code>rustc_codegen_ssa</code></p>",
        "id": 235533763,
        "sender_full_name": "Jubilee",
        "timestamp": 1619019751
    },
    {
        "content": "<p>Heya, I'm curious what's the limitation behind the <code>LanesAtMost32</code>? Is it related to the <code>[T; 0-32]</code> genericness of Rust?</p>",
        "id": 236779343,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1619752310
    },
    {
        "content": "<p>IIRC it has to do with LLVM barfing hard if you try to use the size-generic stuff for too large a size.</p>",
        "id": 236779549,
        "sender_full_name": "Lokathor",
        "timestamp": 1619752521
    },
    {
        "content": "<p>Well, we had to pick an upper limit because we don't have a method of implementing all sizes yet. The upper limit in the compiler is 2^15 due to backend support.  We originally picked 64 because that supports 512 bit vectors of u8.  But we had to drop it down to 32 because the aarch64 optimizer crashes on 64 for some reason</p>",
        "id": 236779690,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1619752672
    }
]