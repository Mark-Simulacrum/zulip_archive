[
    {
        "content": "<p>Hey everyone! Did we want to run our regular meeting? Weâ€™ve got one in the calendar for: <a href=\"https://calendar.google.com/calendar/event?eid=YWxta2xrc2lqZXB1YnM4bTM4Z2NtcGY0dWtfMjAyMTAxMThUMjEwMDAwWiA5a3V1OGV2cTRlaDZ1YWNtMjYyazBwaHJpOEBn\">https://calendar.google.com/calendar/event?eid=YWxta2xrc2lqZXB1YnM4bTM4Z2NtcGY0dWtfMjAyMTAxMThUMjEwMDAwWiA5a3V1OGV2cTRlaDZ1YWNtMjYyazBwaHJpOEBn</a></p>",
        "id": 223112488,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1610972186
    },
    {
        "content": "<p>I wouldâ€™ve dropped a Zulip timestamp but am on mobile and can never remember the syntax ðŸ˜„</p>",
        "id": 223112533,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1610972232
    },
    {
        "content": "<p>Sure!</p>",
        "id": 223127690,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1610980877
    },
    {
        "content": "<p>I'll try to remember to show up</p>",
        "id": 223140243,
        "sender_full_name": "Lokathor",
        "timestamp": 1610986817
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 223165108,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005254
    },
    {
        "content": "<p>A little late <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 223165116,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005277
    },
    {
        "content": "<p>So how are we traveling? Do we think weâ€™re far from landing in <code>nightly</code>?</p>",
        "id": 223165186,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005330
    },
    {
        "content": "<p>Also this meeting is happening in the far distant future but thatâ€™s ok</p>",
        "id": 223165218,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005381
    },
    {
        "content": "<p>I don't think we're too bad in that regard.  My PR should resolve the really obvious compiler weirdness</p>",
        "id": 223165235,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005396
    },
    {
        "content": "<p>Ignoring cranelift, at least</p>",
        "id": 223165296,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005421
    },
    {
        "content": "<p>Do we know what state Craneliftâ€™s const generic SIMD is in? I wouldnâ€™t be surprised if it was a lot less weird already</p>",
        "id": 223165333,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005477
    },
    {
        "content": "<p>Once that's in I think it should be really hard to ICE the LLVM backend even with const generics</p>",
        "id": 223165340,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005500
    },
    {
        "content": "<p>I believe there is no support for non-power-of-two vector lengths</p>",
        "id": 223165396,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005529
    },
    {
        "content": "<p>LLVM supports it nearly flawlessly (ignoring some potential floating point signalling weirdness)</p>",
        "id": 223165423,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005564
    },
    {
        "content": "<p>Ahh I see. Did we want to restrict to powers of 2?</p>",
        "id": 223165450,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005593
    },
    {
        "content": "<p>One option would be to amend my PR to do that, yeah</p>",
        "id": 223165453,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005600
    },
    {
        "content": "<p>Not sure if anyone is relying on that somewhere but repr(simd) is unstable...</p>",
        "id": 223165477,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005631
    },
    {
        "content": "<p>Yeh, I donâ€™t think packed_simd does but there could be another crate out there somewhere</p>",
        "id": 223165548,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005686
    },
    {
        "content": "<p>One remaining issue is that you can end up with some really cryptic monomorpisation errors, which isn't optimal, but it's also not an ICE</p>",
        "id": 223165579,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005726
    },
    {
        "content": "<p>Maybe we should try do whatever is going to get us onto <code>nightly</code> faster, maybe with an <code>allow(incomplete_features)</code> so itâ€™s clear itâ€™s still very WIP</p>",
        "id": 223165655,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005780
    },
    {
        "content": "<p>Yeah, I forgot about that, probably a good idea</p>",
        "id": 223165689,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005826
    },
    {
        "content": "<p>I have a branch with a lot of testing, it only runs with the compiler PR but everything passes</p>",
        "id": 223165768,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005896
    },
    {
        "content": "<p>Iâ€™ll ping the compiler team about our proposal for fallback implementations</p>",
        "id": 223165770,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005906
    },
    {
        "content": "<p>Oo is that the prop testing one?</p>",
        "id": 223165773,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611005916
    },
    {
        "content": "<p>Yep. The tests take insanely long to compile which is problematic (probably a macro issue) but it tests basically everything and at a variety of lane counts</p>",
        "id": 223165805,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005967
    },
    {
        "content": "<p>So I'm pretty confident everything works</p>",
        "id": 223165810,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611005989
    },
    {
        "content": "<p>That sounds vaguely familiar having lots of macros take a long time to compile <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 223165862,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006010
    },
    {
        "content": "<p>Maybe a proc macro would be faster</p>",
        "id": 223165882,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006041
    },
    {
        "content": "<p>So once the compiler PR is in and the testing PR is in did we want to try get a <code>nightly</code> PR going that submodules it in? The Libs team might want a tour of it all</p>",
        "id": 223165903,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006069
    },
    {
        "content": "<p>Yeah I think we're close to that.  Maybe we want to wrap up some of the mask stuff first but then I think we're in good shape</p>",
        "id": 223165930,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006117
    },
    {
        "content": "<p>Super exciting! Is there anything I can do to help?</p>",
        "id": 223165987,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006145
    },
    {
        "content": "<p>Hmm I don't quite remember the state of that, I know there are problems making single-bit-per-lane masks since they require a bound on the generic width right now</p>",
        "id": 223166029,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006216
    },
    {
        "content": "<p>We'd probably want to unrestrict vector sizes being powers of 2 later, since SimpleV and variable-length vector ISAs do let you use non-power-of-2 vector sizes with a performance advantage for doing so rather than using the next bigger power of 2 and ignoring the vector elements past the size you actually want.</p>",
        "id": 223166093,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611006271
    },
    {
        "content": "<p>We may want to brainstorm a way of solving that without encountering the generic bounds issue at all</p>",
        "id": 223166098,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> agreed</p>",
        "id": 223166126,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006303
    },
    {
        "content": "<p>Unfortunately cranelift only stores the log of the lane count right now so it probably would require a decent amount of work there</p>",
        "id": 223166144,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006334
    },
    {
        "content": "<p>Ahh ok. Maybe we can raise an issue at least and see what it would take</p>",
        "id": 223166211,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006371
    },
    {
        "content": "<p>Yep. My understanding is it's in cranelift itself, not the compiler backend, so it might take a while</p>",
        "id": 223166231,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006413
    },
    {
        "content": "<p>Definitely should bring it up somewhere though</p>",
        "id": 223166243,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006428
    },
    {
        "content": "<p>Maybe we just have to accept the limitation for the time being until it works its way back up?</p>",
        "id": 223166265,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006463
    },
    {
        "content": "<p>I'm ok with that</p>",
        "id": 223166271,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006472
    },
    {
        "content": "<p>Would we want to paper in some checking in your PR to ensure theyâ€™re powers of 2 with a note on wanting to remove it once Cranelift supports it?</p>",
        "id": 223166337,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006517
    },
    {
        "content": "<p>Or just let it be a bug in Cranelift?</p>",
        "id": 223166363,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006550
    },
    {
        "content": "<p>Yeah, I think so. I think I also need to reduce the maximum lane count by a power of two as well</p>",
        "id": 223166372,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006560
    },
    {
        "content": "<p>We could leave the check in the cranelift backend too, actually</p>",
        "id": 223166403,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006590
    },
    {
        "content": "<p>Rather than on the repr(simd) attribute</p>",
        "id": 223166439,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006604
    },
    {
        "content": "<p>Though I don't want to make it too hard to get cranelift into stable either, limiting overall might be the best compromise</p>",
        "id": 223166483,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006646
    },
    {
        "content": "<p>That sounds good to me. I donâ€™t want to get in Craneliftâ€™s way either ðŸ˜„</p>",
        "id": 223166504,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006686
    },
    {
        "content": "<p>I think once we have something in nightly people will really start to kick the tyres on it</p>",
        "id": 223166574,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006762
    },
    {
        "content": "<p>Yep. Though we're still missing shuffles which are probably the last big missing piece</p>",
        "id": 223166605,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006799
    },
    {
        "content": "<p>Ahh did they require full const generics too? Or were we going to magic them?</p>",
        "id": 223166637,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006837
    },
    {
        "content": "<p>I'm pretty sure we can get away with min const generics for those, but not sure</p>",
        "id": 223166699,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006882
    },
    {
        "content": "<p>We can at least do variable shuffles, or whatever you want to call them. The non-const ones</p>",
        "id": 223166725,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006919
    },
    {
        "content": "<p>So itâ€™s just a piece of the API we need to design and theyâ€™re not necessarily blocked on anything?</p>",
        "id": 223166738,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611006934
    },
    {
        "content": "<p>Yeah, I think so</p>",
        "id": 223166753,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611006947
    },
    {
        "content": "<p>Iâ€™d be up for a design session sometime if we like ðŸ˜„ Could break out a Miro board and try sketch out all the missing pieces. Or if youâ€™ve got a pretty clear idea of how things should look we could try write it up somewhere</p>",
        "id": 223166847,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611007026
    },
    {
        "content": "<p>I definitely do not have a clear idea haha. Packed_simd uses macros which we definitely are going to avoid</p>",
        "id": 223166871,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611007063
    },
    {
        "content": "<p>Yeh I think that mightâ€™ve been the first thing that came up when looking at packed_simd ðŸ˜„</p>",
        "id": 223166938,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611007116
    },
    {
        "content": "<p>I don't think variable-length vectors would work with the current api as the current api requires a fixed vector size, while the variable-length vector may be smaller on some cpus. Possibly even only a single lane.</p>",
        "id": 223166960,
        "sender_full_name": "bjorn3",
        "timestamp": 1611007157
    },
    {
        "content": "<p>Hmm I'm not sure what you mean by variable-length</p>",
        "id": 223167167,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611007239
    },
    {
        "content": "<p>Is that about the discussion from before on removing the power of 2 requirement as something that might affect variable length ISAs?</p>",
        "id": 223167264,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611007276
    },
    {
        "content": "<p>When we already have a big design decision that affects them: using fixed length vectors at all?</p>",
        "id": 223167340,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611007311
    },
    {
        "content": "<p>yes, i was talking about the power of 2 requirement.</p>",
        "id": 223167442,
        "sender_full_name": "bjorn3",
        "timestamp": 1611007340
    },
    {
        "content": "<p>Yeh, I think for now we were going to try make LLVMâ€™s codegen consistent and look at the requirement asynchronously</p>",
        "id": 223167739,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611007453
    },
    {
        "content": "<p>I think I'm less concerned about variable length SIMD (which probably requires a completely different interface) and more just concerned about polyfilling non-power-of-two vector lengths with traditional SIMD</p>",
        "id": 223168195,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611007874
    },
    {
        "content": "<p>Ahh I thought weâ€™d just compile fail in that case?</p>",
        "id": 223168482,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611008114
    },
    {
        "content": "<p>If not maybe I really do need to make progress on the fallbacks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223168516,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611008139
    },
    {
        "content": "<p>For now I think we can error</p>",
        "id": 223168581,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611008178
    },
    {
        "content": "<p>So next steps are:</p>\n<ul>\n<li>Add a power of 2 restriction to repr(simd) lane widths</li>\n<li>Merge in the mega test PR</li>\n<li>See if we can wrap up the mask API a little more</li>\n<li>Design shuffles</li>\n<li>Submodule into nightly</li>\n</ul>\n<p>How does that look?</p>",
        "id": 223169491,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611009105
    },
    {
        "content": "<p>Oh I forgot one:</p>\n<ul>\n<li>Profit $</li>\n</ul>",
        "id": 223169559,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611009156
    },
    {
        "content": "<p>Looks good to me</p>",
        "id": 223169562,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611009158
    },
    {
        "content": "<p>Lol</p>",
        "id": 223169563,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611009162
    },
    {
        "content": "<p>Iâ€™ll try catch up on where our masks are at so I might be able to be useful on them ðŸ™‚</p>",
        "id": 223169603,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611009209
    },
    {
        "content": "<p>I absolutely forgot about the meeting.</p>",
        "id": 223186058,
        "sender_full_name": "Lokathor",
        "timestamp": 1611029994
    },
    {
        "content": "<p>But instead there's a new wasm tutorial out in the world, fair trade i guess</p>",
        "id": 223186102,
        "sender_full_name": "Lokathor",
        "timestamp": 1611030017
    },
    {
        "content": "<p>Hello all!<br>\nIs there a meeting scheduled for today?</p>",
        "id": 223958123,
        "sender_full_name": "Miguel Raz GuzmÃ¡n Macedo",
        "timestamp": 1611607913
    },
    {
        "content": "<p>Ah.</p>",
        "id": 223958459,
        "sender_full_name": "Jubilee",
        "timestamp": 1611608087
    }
]