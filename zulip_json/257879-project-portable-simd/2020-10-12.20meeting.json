[
    {
        "content": "<p>Per <a href=\"https://hackmd.io/h5Coi4l8RZWS6T1Esw5WKQ?view\">https://hackmd.io/h5Coi4l8RZWS6T1Esw5WKQ?view</a> , there's going to be a meeting today. At what time?</p>",
        "id": 213007902,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1602489577
    },
    {
        "content": "<p>uhm, 14 hours, about</p>",
        "id": 213008217,
        "sender_full_name": "Lokathor",
        "timestamp": 1602489750
    },
    {
        "content": "<p>Ouch. That's night time for me.</p>\n<p>Thanks.</p>",
        "id": 213009091,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1602490342
    },
    {
        "content": "<p>Upgraded to RFC3339 timestamp.</p>",
        "id": 213054801,
        "sender_full_name": "Jubilee",
        "timestamp": 1602517500
    },
    {
        "content": "<p>Hm, no, too much. Chilled out a little. Still ISO8601 compatible, I think.</p>",
        "id": 213055499,
        "sender_full_name": "Jubilee",
        "timestamp": 1602517890
    },
    {
        "content": "<p>Could we adjust the meeting times to something more friendly for <span class=\"user-mention\" data-user-id=\"314350\">@Henri Sivonen</span>'s timezone?</p>",
        "id": 213068619,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602525557
    },
    {
        "content": "<p>Maybe not for this meeting but in the future.</p>",
        "id": 213068627,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602525567
    },
    {
        "content": "<p>i'm open to some possible time changes as long as they day of the week stays the same</p>",
        "id": 213069033,
        "sender_full_name": "Lokathor",
        "timestamp": 1602525829
    },
    {
        "content": "<p>I would also vote for slightly earlier meeting times :)</p>",
        "id": 213070810,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602526953
    },
    {
        "content": "<p>The Error handling group just finished theirs so I think we could push back to as early as <time datetime=\"2020-10-12T19:30:00Z\">2020-10-13T05:30:00+10:00</time></p>",
        "id": 213074916,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602529290
    },
    {
        "content": "<p>That also would probably ensure I could keep attending moving forward — I start a new job soon and don't know if I'd be able to attend the current time since it's sorta in the middle of the workday, whereas that's during lunchtime.</p>",
        "id": 213076626,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602530338
    },
    {
        "content": "<p>According to the timezone setting in Zulip (which may or may not be right), that's 10pm for Henri, which might be rough. No clue though</p>",
        "id": 213076773,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602530421
    },
    {
        "content": "<p>Hm. For me that time is in the workday but I should still usually be able to attend, I think</p>",
        "id": 213076820,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602530461
    },
    {
        "content": "<p>Yeah I suspect in practice I'll be able to attend in the workday, or at least I don't know yet.</p>",
        "id": 213076857,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602530492
    },
    {
        "content": "<p>Just to make sure I got the TZ right, that's in like 10 minutes right?</p>",
        "id": 213076965,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602530553
    },
    {
        "content": "<p>So wait, are we pushing it back this week?</p>",
        "id": 213077001,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602530584
    },
    {
        "content": "<p>It sounded like the plan is stick with the original time today but consider the new time for next week?</p>",
        "id": 213077043,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602530620
    },
    {
        "content": "<p>yes, we are not changing times day-of unless we <em>have to</em>.</p>",
        "id": 213077212,
        "sender_full_name": "Jubilee",
        "timestamp": 1602530712
    },
    {
        "content": "<p>Okay, I thought so but I was thrown off by the date on the time above being \"Oct 12\"</p>",
        "id": 213077235,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602530735
    },
    {
        "content": "<p>It would confuse people to change it today :), thanks for consideration though!</p>",
        "id": 213077313,
        "sender_full_name": "Jakub Duchniewicz",
        "timestamp": 1602530767
    },
    {
        "content": "<p>Ah sorry! I just used that timestamp since it was already close to that time</p>",
        "id": 213077359,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602530801
    },
    {
        "content": "<p>Ready</p>",
        "id": 213090005,
        "sender_full_name": "Lokathor",
        "timestamp": 1602539608
    },
    {
        "content": "<p>I've just had something else come up so will have to try catch up afterwards <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> Sorry everyone!</p>",
        "id": 213090085,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602539661
    },
    {
        "content": "<p>Hello everyone! Wave if you're here!</p>",
        "id": 213090113,
        "sender_full_name": "Jubilee",
        "timestamp": 1602539692
    },
    {
        "content": "<p>Looks like we're mostly here. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> So, <em>do</em> we want to move meeting times backwards from 15:00 to 12:30? The only thing I didn't see addressed is if it would be an improvement for hsivonen... But we know it'll be an improvement for Thom, which is already a strong argument for doing so.</p>",
        "id": 213090358,
        "sender_full_name": "Jubilee",
        "timestamp": 1602539951
    },
    {
        "content": "<p>Well, my time zone it's 16:00, probably want to be clearer with one of those zulip time things if we can</p>",
        "id": 213090402,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540001
    },
    {
        "content": "<p>Lets wait to hear from hsivonen. I don't know for sure if it will matter for me yet, since I haven't started the new job. I suspect they'll care about my involvement in Rust things, which would allow me to attend meetings.</p>",
        "id": 213090470,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540029
    },
    {
        "content": "<p>Agreed, in mine it's 18:00 :)</p>",
        "id": 213090477,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540031
    },
    {
        "content": "<p><time datetime=\"2020-10-19T19:30:00Z\">2020-10-19T12:30:00-07:00</time></p>",
        "id": 213090487,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540037
    },
    {
        "content": "<p>( basically, as Ashley suggested it. )<br>\nAlright, so _if_ it's an improvement, we move back?</p>",
        "id": 213090525,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540065
    },
    {
        "content": "<p>I mean this is certainly going to be better for hsivonen over 1AM his time</p>",
        "id": 213090554,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540087
    },
    {
        "content": "<p>one hour after that time would avoid clashing with the T-lang meetings</p>",
        "id": 213090559,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540090
    },
    {
        "content": "<p>Just might not be enough of one to attend. We probably should plan on that time being tentative.</p>",
        "id": 213090566,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540102
    },
    {
        "content": "<p>(but a T-lang clash isn't a critical deal)</p>",
        "id": 213090572,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540114
    },
    {
        "content": "<p>Alright.</p>",
        "id": 213090639,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540141
    },
    {
        "content": "<p>I think we don't have the right group to decide what the better time is, because only the people for which this time works are here</p>",
        "id": 213090648,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540149
    },
    {
        "content": "<p>accurate</p>",
        "id": 213090656,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540162
    },
    {
        "content": "<p>yes, paradoxically. :P But we also have to assent to a timechange.</p>",
        "id": 213090660,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540163
    },
    {
        "content": "<p>It goes two ways.</p>",
        "id": 213090674,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540170
    },
    {
        "content": "<p>Yeah definitely, but it's just probably best an asynchronous discussion.</p>",
        "id": 213090690,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540189
    },
    {
        "content": "<p>Indeed. It got on the agenda though so...!<br>\n<code>agenda.pop()</code><br>\nIs there anything we want to raise at the Libs meeting later this week?</p>",
        "id": 213090710,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540221
    },
    {
        "content": "<p>i don't think so</p>",
        "id": 213090774,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540260
    },
    {
        "content": "<p>Mmkay~<br>\nI feel like we should mention the next issue to <em>someone</em>...?<br>\nHow do we feel about disabling RISCV in CI for now?</p>",
        "id": 213090882,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540366
    },
    {
        "content": "<p>i'm not the happiest about it, but that's actually more T-compiler than T-libs</p>",
        "id": 213090908,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540397
    },
    {
        "content": "<p>Yeah, I think it's mostly a compiler issue, and if for some reason it languishes a while we can revisit polyfill for those functions</p>",
        "id": 213090941,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540435
    },
    {
        "content": "<p>Sorry, I think I missed the issues here since apparently I wasn't watching the github repo until now. Can I have some context?</p>",
        "id": 213090959,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540454
    },
    {
        "content": "<p>I'm not even sure the riscv target I added to CI is remotely the right target.</p>",
        "id": 213090981,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540470
    },
    {
        "content": "<p>the intrinsics for rounding don't lower properly on all targets it seems</p>",
        "id": 213090992,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540479
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/34\">https://github.com/rust-lang/stdsimd/pull/34</a></p>",
        "id": 213091032,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540486
    },
    {
        "content": "<p>Basically rustc seems to be lowering LLVM intrinsics to the wrong IR, only for riscv and only on SIMD type FFI</p>",
        "id": 213091040,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540495
    },
    {
        "content": "<p>SIMD vectors are passed by reference, but rustc should be passing vectors, not pointers, to the LLVM intrinsics</p>",
        "id": 213091068,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540531
    },
    {
        "content": "<p>Ah, I mean part of the reason I did add some weird stuff was to catch stuff like this. I wonder if there's a better way we can explicitly ignore an issue on one platform for CI so that we can track it more granularly</p>",
        "id": 213091076,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540541
    },
    {
        "content": "<p>we could cfg out individual tests</p>",
        "id": 213091111,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540579
    },
    {
        "content": "<p>The problem is as we start expanding API surface I think the vast majority of tests will use LLVM intrinsics</p>",
        "id": 213091122,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540601
    },
    {
        "content": "<p>probably the case, yeah</p>",
        "id": 213091171,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540614
    },
    {
        "content": "<p>I think we need to have insiht into how broken they are, and need to later be able to file bugs.</p>",
        "id": 213091184,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540633
    },
    {
        "content": "<p>Also, I have a feeling it fails on risc32 as well and we just don't have a way to test it</p>",
        "id": 213091190,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540638
    },
    {
        "content": "<p>It's pretty broken, it causes a compiler error</p>",
        "id": 213091200,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540651
    },
    {
        "content": "<p>I don't care about the riscv issue but we could pass in <code>--cfg ci_target=\"riscv64gc-unknown-linux-gnu\"</code> (except for each target) and disable the test on cfg(ci_target = \"...\") and just have a meta issue where we note when we have to do this for some target</p>",
        "id": 213091217,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540670
    },
    {
        "content": "<p>In my opinion there's not much of a difference between not testing it at all, and compiling and not testing because the codegen is invalid</p>",
        "id": 213091299,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540731
    },
    {
        "content": "<p>Right because i had the repo not watched i thought nobody was working on it, and so I didn't push forward with further CI improvements, now that I've fixed that I'll do what I promised before re: other targets. Please let me know in the other channel which you think are worth testing though</p>",
        "id": 213091308,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540738
    },
    {
        "content": "<p>the hardest part about it right now is that right now all our tests are made in huge dense macro_rules. i'd hate to write out the examples more individually, but i'm not sure how well we can cfg individual tests on individual targets otherwise. <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> what do you think?</p>",
        "id": 213091332,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> It's a lot easier to track this as we go vs at the end trying to figure everything that's broken.</p>",
        "id": 213091338,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540780
    },
    {
        "content": "<p>Unless we dont' intend to support it.</p>",
        "id": 213091347,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540788
    },
    {
        "content": "<p>If we don't want to support simd on those targets they shouldn't be in CI I agree</p>",
        "id": 213091363,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540806
    },
    {
        "content": "<p>It would be very annoying if we didn't support tier2 hosts.</p>",
        "id": 213091373,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540814
    },
    {
        "content": "<p>I think there's no problem cfging them out, I just don't see much of a benefit since it's still leaving the crate incomplete on that host</p>",
        "id": 213091380,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540831
    },
    {
        "content": "<p>I mean the reason I added RISCV is mostly beacuse</p>\n<ol>\n<li>want something that actually does the different masking strategy</li>\n<li>people here care about it.</li>\n</ol>",
        "id": 213091420,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> it's because we intend to follow up on the bad codegen.</p>",
        "id": 213091448,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540865
    },
    {
        "content": "<p>fwiw I left it in the CI script with a todo and a link to the issue, I didn't remove all traces of it</p>",
        "id": 213091471,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540890
    },
    {
        "content": "<p>I also opened an issue in the repo for it</p>",
        "id": 213091477,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540897
    },
    {
        "content": "<p>does the crate build on riscv64gc?</p>",
        "id": 213091481,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540902
    },
    {
        "content": "<p>yeah i saw thats fine</p>",
        "id": 213091487,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540902
    },
    {
        "content": "<p>or is it just a broken test?</p>",
        "id": 213091496,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540912
    },
    {
        "content": "<p>\"just\"</p>",
        "id": 213091519,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540922
    },
    {
        "content": "<p>the crate builds but once it actually goes to codegen the compiler crashes</p>",
        "id": 213091528,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602540928
    },
    {
        "content": "<p>oh huh</p>",
        "id": 213091531,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540933
    },
    {
        "content": "<p>i thought at runtime it crashed.</p>",
        "id": 213091541,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602540939
    },
    {
        "content": "<p>yeah it's not a test failure, it's an ICE</p>",
        "id": 213091543,
        "sender_full_name": "Lokathor",
        "timestamp": 1602540942
    },
    {
        "content": "<p>So, RISCV64 is a tier2 host, and that means we have to build on it.</p>",
        "id": 213091593,
        "sender_full_name": "Jubilee",
        "timestamp": 1602540964
    },
    {
        "content": "<p>IMO disable test, file a bug right away for ICEs</p>",
        "id": 213091613,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541004
    },
    {
        "content": "<p>I am pretty sure that this means we can't expose the crate.</p>",
        "id": 213091614,
        "sender_full_name": "Jubilee",
        "timestamp": 1602541005
    },
    {
        "content": "<p>That's a lot more damaging.</p>",
        "id": 213091621,
        "sender_full_name": "Jubilee",
        "timestamp": 1602541017
    },
    {
        "content": "<p>So the thing is, even if we disable the tests, the crate itself is broken on that target</p>",
        "id": 213091629,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541024
    },
    {
        "content": "<p>anywhere it goes to codegen will cause the ICE</p>",
        "id": 213091636,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541031
    },
    {
        "content": "<p>yeah.</p>",
        "id": 213091638,
        "sender_full_name": "Jubilee",
        "timestamp": 1602541032
    },
    {
        "content": "<p>And it's a required build target.</p>",
        "id": 213091645,
        "sender_full_name": "Jubilee",
        "timestamp": 1602541037
    },
    {
        "content": "<p>disable the busted functionality behind target_arch then</p>",
        "id": 213091663,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541052
    },
    {
        "content": "<p>I don't think disabling the tests gets us anywhere, but it puts more strain on actually writing tests</p>",
        "id": 213091665,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541057
    },
    {
        "content": "<p>I guess my stance is that the busted functionality is _all_ the functionality, since we've already more or less exhausted the platform intrinsics, other than shuffles</p>",
        "id": 213091726,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541098
    },
    {
        "content": "<p>everything ices on that target? not just the rounding?</p>",
        "id": 213091774,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541156
    },
    {
        "content": "<p>it'll be annoying if we add 50 more functions and they all need to be cfged out</p>",
        "id": 213091776,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541160
    },
    {
        "content": "<p>it's any LLVM intrinsic</p>",
        "id": 213091782,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541166
    },
    {
        "content": "<p>I agree with Caleb, picking over it bit by bit when it ICEs is a dead letter. We indefinitely block releasing to nightly until this is fixed. We are scheduling ourselves for a massive cleanup on Aisle RISCV64 and that's fine.</p>",
        "id": 213091794,
        "sender_full_name": "Jubilee",
        "timestamp": 1602541180
    },
    {
        "content": "<p>oh, okay we should take it out then.</p>",
        "id": 213091799,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541183
    },
    {
        "content": "<p>if it was only some stuff i would say we should still expose/test the bits that work, but if it's everything then yes it does us no good.</p>",
        "id": 213091871,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541228
    },
    {
        "content": "<p>until the riscv ice is fixed, people can still use this crate on nightly as just a normal crate, if we were to put it on <a href=\"http://crates.io\">crates.io</a>, right? that's fine as a temporary path forward</p>",
        "id": 213091890,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541254
    },
    {
        "content": "<p>yep. and if the ICE gets fixed we won't need to release a new version to get it working there</p>",
        "id": 213091937,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541301
    },
    {
        "content": "<p>(if we don't cfg anything)</p>",
        "id": 213091944,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541322
    },
    {
        "content": "<p>if we put it on <a href=\"http://crates.io\">crates.io</a> we might want to consider</p>\n<div class=\"codehilite\"><pre><span></span><code>#[cfg(target_arch = &quot;riscvXX&quot;)]\ncompile_error!(&quot;This crate currently causes ICEs on architectures: ...&quot;);\n</code></pre></div>",
        "id": 213091993,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541335
    },
    {
        "content": "<p>but only if we do that</p>",
        "id": 213092002,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541347
    },
    {
        "content": "<p>okay, no test cfg, <a href=\"http://crates.io\">crates.io</a> release. or tell people to use it out of master, but <a href=\"http://crates.io\">crates.io</a> would be better, this isn't golang</p>",
        "id": 213092012,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541363
    },
    {
        "content": "<p>i think \"use out of master\" is fine for a little while longer</p>",
        "id": 213092023,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541382
    },
    {
        "content": "<p>right, at this exact moment we can't even compare lanes</p>",
        "id": 213092040,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541397
    },
    {
        "content": "<p>nice segue</p>",
        "id": 213092060,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541416
    },
    {
        "content": "<p>i will say with SSE you can do are_all_negative/are_any_negative with one op, wheras going to a mask first takes 2</p>",
        "id": 213092148,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541488
    },
    {
        "content": "<p>I'm not sure if LLVM has intrinsics for that or not, I haven't looked yet</p>",
        "id": 213092191,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541542
    },
    {
        "content": "<p>otherwise I would expect the optimizer to handle it</p>",
        "id": 213092200,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541553
    },
    {
        "content": "<p>yeah i dunno exactly what the story is for the wide set of features without llvm intrinsics</p>",
        "id": 213092224,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541562
    },
    {
        "content": "<p>packed_simd exists now and i never hear people call it lacking in features so probably they solved that somehow?</p>",
        "id": 213092265,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541589
    },
    {
        "content": "<p>hmm.</p>",
        "id": 213092279,
        "sender_full_name": "Jubilee",
        "timestamp": 1602541613
    },
    {
        "content": "<p>stdarch does sse comparisons with sse specific llvm calls, it looks like</p>",
        "id": 213092295,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541644
    },
    {
        "content": "<p>so we might start breaking out the cfg_if or similar</p>",
        "id": 213092299,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541661
    },
    {
        "content": "<p>I would be hesitant to do that because it won't interact well with target_feature, I think</p>",
        "id": 213092362,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541707
    },
    {
        "content": "<p>i'll investigate and if the codegen is shit i'll report back. ironically (<em>not</em> opening this can of worms) it's because movemask literally returns a bitmask of the sign bits of each lane.</p>",
        "id": 213092368,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541713
    },
    {
        "content": "<p>but yeah, if the codegen isn't good it might be the way to go</p>",
        "id": 213092377,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541731
    },
    {
        "content": "<p>packed_simd doesn't appear to have any sort of function for comparing all lanes (other than for masks)</p>",
        "id": 213092405,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541768
    },
    {
        "content": "<p>horizontal comparisons, whatever we want to call them</p>",
        "id": 213092418,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541787
    },
    {
        "content": "<p>i thought it had eq and neq and all that</p>",
        "id": 213092421,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541789
    },
    {
        "content": "<p>yeah, <a href=\"https://docs.rs/packed_simd_2/0.3.4/packed_simd_2/type.f32x4.html#method.eq\">https://docs.rs/packed_simd_2/0.3.4/packed_simd_2/type.f32x4.html#method.eq</a></p>",
        "id": 213092483,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541819
    },
    {
        "content": "<p>I mean it doesn't have the comparisons that yield a single bool, just the ones that return vectors</p>",
        "id": 213092486,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541822
    },
    {
        "content": "<p>oh</p>",
        "id": 213092494,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541831
    },
    {
        "content": "<p>yeah i'd expect that to be an op on a mask, actually</p>",
        "id": 213092504,
        "sender_full_name": "Lokathor",
        "timestamp": 1602541842
    },
    {
        "content": "<p>LLVM definitely has intrinsics for comparisons that return masks</p>",
        "id": 213092513,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541849
    },
    {
        "content": "<p>anyway you mentioned any_nan/all_nan: why call these out separately? is there a reason they should specifically not go via masks?</p>",
        "id": 213092623,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602541940
    },
    {
        "content": "<p>there should probably be more, like <code>any_finite</code>/<code>all_finite</code> etc</p>",
        "id": 213092648,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602541971
    },
    {
        "content": "<p>i suspect is_nan is just <code>x.lane_eq(x)</code> most places.</p>",
        "id": 213092690,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542006
    },
    {
        "content": "<p>but mostly because comparisons with nans are somewhat nontrivial if you don't really know how nans work, so it's probably a good method to provide</p>",
        "id": 213092691,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542007
    },
    {
        "content": "<p>yeah I agree, it wouldn't be much more than that</p>",
        "id": 213092699,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542022
    },
    {
        "content": "<p>err, lane_neq</p>",
        "id": 213092701,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542023
    },
    {
        "content": "<p>e.g. all of the classification ops seem like they can be provided without intrinsics, although maybe some arch does it better than another</p>",
        "id": 213092783,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542073
    },
    {
        "content": "<p>I could see someone being frustrated with <code>x.lane_eq(f32x4::NAN)</code> or whatever</p>",
        "id": 213092794,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542086
    },
    {
        "content": "<p>yes i agree we should give them a function for it</p>",
        "id": 213092809,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542099
    },
    {
        "content": "<p>I think I would just use the intrinsics since LLVM provides them</p>",
        "id": 213092829,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542110
    },
    {
        "content": "<p>does it provide one?</p>",
        "id": 213092841,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542124
    },
    {
        "content": "<p>sorry, I mean where there is an intrinsic, I'm sure some don't exist</p>",
        "id": 213092863,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542142
    },
    {
        "content": "<p>this is getting a bit theoretical.</p>",
        "id": 213092879,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542161
    },
    {
        "content": "<p>agreed</p>",
        "id": 213092917,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542166
    },
    {
        "content": "<p>haha</p>",
        "id": 213092922,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542169
    },
    {
        "content": "<p>re: bikeshed, IEEE764 calls the operation for is_sign_negative <code>isSignMinus</code></p>",
        "id": 213092926,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542170
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"llvm.x86.sse.cmp.ss\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cmpss</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">__m128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">__m128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">imm8</span>: <span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">__m128</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Is what stdarch uses, with a control code for each comparison</p>",
        "id": 213092940,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542189
    },
    {
        "content": "<p>so each arch family might have its own intriniscs</p>",
        "id": 213092966,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542215
    },
    {
        "content": "<p>I believe there is a generic set fortunately</p>",
        "id": 213092979,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542230
    },
    {
        "content": "<p>ah, good</p>",
        "id": 213092983,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542236
    },
    {
        "content": "<p>i also think <code>is_normal</code> might be confusing to provide. keep in mind that 0 is a subnormal</p>",
        "id": 213092989,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542241
    },
    {
        "content": "<p>I am also pretty sure that values that are subnormal on f32 are normal on f64?</p>",
        "id": 213093015,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542273
    },
    {
        "content": "<p>Er, not all, but some.</p>",
        "id": 213093026,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542282
    },
    {
        "content": "<p>that seems likely</p>",
        "id": 213093063,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542286
    },
    {
        "content": "<p>yeah some of them, more bits after all</p>",
        "id": 213093073,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542291
    },
    {
        "content": "<p>Yeah, let's not.</p>",
        "id": 213093087,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542306
    },
    {
        "content": "<p>it's a reasonable method, it just needs more docs than a 1-liner</p>",
        "id": 213093128,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542349
    },
    {
        "content": "<p>anyway--I suppose my question with comparisons--should I proceed with some subset of comparisons while also addressing some of our mask bikeshedding so we can try to settle on an implementation?</p>",
        "id": 213093145,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542363
    },
    {
        "content": "<p>oh, it's in std, hmm.</p>",
        "id": 213093163,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542384
    },
    {
        "content": "<p>Yes.</p>",
        "id": 213093164,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542384
    },
    {
        "content": "<p>is_{nan,positive,negative,finite,infinite} is probably enough for classification</p>",
        "id": 213093214,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542405
    },
    {
        "content": "<p>If you don't proceed i don't think anything else in the mean time would \"unblock\" that, so proceed</p>",
        "id": 213093224,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542414
    },
    {
        "content": "<p>It's too late actually.</p>",
        "id": 213093226,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542415
    },
    {
        "content": "<p>oh if libstd has is_normal then okay</p>",
        "id": 213093246,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542433
    },
    {
        "content": "<p>And: I feel weird about exposing each and every one of these as a specialized set of any_ and all_ functions, it's huge API bloats.</p>",
        "id": 213093247,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542436
    },
    {
        "content": "<p>yes i think the right way to do it would be <code>is_finite().all()</code> or something</p>",
        "id": 213093266,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542457
    },
    {
        "content": "<p>yeah as a method on the mask seems good</p>",
        "id": 213093284,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542470
    },
    {
        "content": "<p>or the reverse.</p>",
        "id": 213093286,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542471
    },
    {
        "content": "<p>Yeah I'm not exactly sure about the any and all functions yet, it may be fine to only provide those methods on masks</p>",
        "id": 213093288,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542474
    },
    {
        "content": "<p>so</p>",
        "id": 213093296,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542481
    },
    {
        "content": "<p>whatever makes it more modular.</p>",
        "id": 213093297,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542485
    },
    {
        "content": "<p>some architectures actually provide horizontal comparisons as instructions</p>",
        "id": 213093306,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542498
    },
    {
        "content": "<p>I forget where I was reading it the other day, I think MIPS</p>",
        "id": 213093314,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542508
    },
    {
        "content": "<p>ughhhh XD</p>",
        "id": 213093322,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542515
    },
    {
        "content": "<p>(though that's something I really hope the optimizer can handle)</p>",
        "id": 213093368,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542525
    },
    {
        "content": "<p>at some point we <em>do</em> get to say \"use core::arch\", that might be one point</p>",
        "id": 213093390,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542557
    },
    {
        "content": "<p>I would rather seriously attempt to teach the optimizer to do it than have every single <code>is_</code> be three functions now.</p>",
        "id": 213093393,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542558
    },
    {
        "content": "<p>and yes, that.</p>",
        "id": 213093398,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> so, the mask types will have <code>any</code> and <code>all</code> methods no matter what</p>",
        "id": 213093411,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542586
    },
    {
        "content": "<p>I'm fine with only providing the method on the mask for now</p>",
        "id": 213093412,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542587
    },
    {
        "content": "<p>OK!</p>",
        "id": 213093422,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542601
    },
    {
        "content": "<p>well.</p>",
        "id": 213093425,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542608
    },
    {
        "content": "<p>It's equivalently readable (maybe even more so?)</p>",
        "id": 213093426,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542609
    },
    {
        "content": "<p>as long as it's not on the f32x4 I mean.</p>",
        "id": 213093429,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542624
    },
    {
        "content": "<p>horizontal ops perform worse everywhere with very few exceptions</p>",
        "id": 213093439,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542634
    },
    {
        "content": "<p>fine with keeping that API minimal for now</p>",
        "id": 213093496,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542658
    },
    {
        "content": "<p>even hadd_ps/dp_ps are pretty crap on x86. the times when there is a fast intrinsic it's super weird and specific like <a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_sad_epu8&amp;expand=4853\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_sad_epu8&amp;expand=4853</a></p>",
        "id": 213093565,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542735
    },
    {
        "content": "<p>yeah, put off all horizontal until later as a general policy</p>",
        "id": 213093583,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542760
    },
    {
        "content": "<p>so i think we should offer horizontal ops but probably not let them influence our api that much</p>",
        "id": 213093590,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542761
    },
    {
        "content": "<p>since usually it's the kind of thing where \"this intrinsic does like 4 things at once and is intended for video codecs\"</p>",
        "id": 213093672,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542828
    },
    {
        "content": "<p>I think GPUs hate horizontal ops even more.</p>",
        "id": 213093677,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542832
    },
    {
        "content": "<p>Just catching up now! So we're moving along ok and don't think we need to raise anything specifically? Do you think it would be good to try get some more eyes on the source itself? On the meeting time do you think we should widen it to 1hr instead of 30mins too?</p>",
        "id": 213093706,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602542880
    },
    {
        "content": "<p>well today was 45 mins about</p>",
        "id": 213093768,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542916
    },
    {
        "content": "<p>Might make sense, we can always end early</p>",
        "id": 213093770,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1602542919
    },
    {
        "content": "<p>much of this meeting could have been pushed into later discussion though</p>",
        "id": 213093779,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602542932
    },
    {
        "content": "<p>I am basically just sipping coffee and mulling now, yes.</p>",
        "id": 213093782,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542933
    },
    {
        "content": "<p>yeah.</p>",
        "id": 213093784,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542936
    },
    {
        "content": "<p>same here</p>",
        "id": 213093792,
        "sender_full_name": "Lokathor",
        "timestamp": 1602542943
    },
    {
        "content": "<p>I think we should mention \"we can't release to nightly because of a compiler bug, lol.\"</p>",
        "id": 213093817,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542981
    },
    {
        "content": "<p>even if it's not libs' concern. Just. For their information.</p>",
        "id": 213093826,
        "sender_full_name": "Jubilee",
        "timestamp": 1602542995
    },
    {
        "content": "<p>I think I originally only made it 30mins in case we ended up using Zoom or something and don't think anything more than 30mins is good for that format, but text seems different <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213093829,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602542998
    },
    {
        "content": "<p>goals for this week: </p>\n<ul>\n<li>more CI magic</li>\n<li>comparison methods</li>\n<li>T-compiler needs to know about the ICE</li>\n</ul>",
        "id": 213093836,
        "sender_full_name": "Lokathor",
        "timestamp": 1602543002
    },
    {
        "content": "<p>Communicating our roadmap to getting the API in <code>std</code> sounds good <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213093898,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602543036
    },
    {
        "content": "<p>I think in general for APIs it's best if we try to adhere to Rusty conventions where they're available.</p>",
        "id": 213093910,
        "sender_full_name": "Jubilee",
        "timestamp": 1602543046
    },
    {
        "content": "<p>( as opposed to taking marching orders from Intel or Arm or Khronos, I mean. )</p>",
        "id": 213093943,
        "sender_full_name": "Jubilee",
        "timestamp": 1602543101
    },
    {
        "content": "<p>I'll write up a summary! It's amazing how much progress y'all have made in such a short time <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 213093946,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1602543104
    },
    {
        "content": "<p>I could get us down to a hard 30 minutes by pulling in triagebot or w/e and running a tighter ship but so far meetings are Cozy and That's Nice, so \"we run a bit over\" is fine. \"We run a bit under\" is also fine.</p>\n<p>But! It's true that time's up already. Next week at... er... some time! As opposed to Same Bat Time. But! Same Bat Channel!<br>\nThank you all for coming.</p>",
        "id": 213094034,
        "sender_full_name": "Jubilee",
        "timestamp": 1602543196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204346\">Ashley Mannix</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2020-10-12.20meeting/near/213074916\">said</a>:</p>\n<blockquote>\n<p>The Error handling group just finished theirs so I think we could push back to as early as <time datetime=\"2020-10-12T19:30:00Z\">2020-10-13T05:30:00+10:00</time></p>\n</blockquote>\n<p>Going forward, 22:30 Helsinki time instead of 01:00 would be nice. However, I see that most of the discussion revolves around floating point issues, and my input isn't useful on that. I'm interested in the non-float stuff.</p>",
        "id": 213312037,
        "sender_full_name": "Henri Sivonen",
        "timestamp": 1602691257
    },
    {
        "content": "<p>Well, I don't expect it will remain All Floats, All The Time going forward.</p>",
        "id": 213365702,
        "sender_full_name": "Jubilee",
        "timestamp": 1602720240
    }
]