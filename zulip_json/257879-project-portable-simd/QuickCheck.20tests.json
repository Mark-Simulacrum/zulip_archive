[
    {
        "content": "<p>I'm looking into using quickcheck to expand our test suite (I haven't used it before).  Is the expectation to replace the vast majority of tests with quickcheck, such as those checking that various ops actually work correctly?  For example, would you use it to ensure that core::ops::Add actually adds two u8x8s lanewise, or is that too trivial a case?</p>",
        "id": 212144314,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601685565
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> since you brought it up originally, I think</p>",
        "id": 212144326,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601685584
    },
    {
        "content": "<p>quickcheck and its relatives like proptest are for testing a sample of possible inputs that validate <em>properties</em> that should hold, yes.</p>",
        "id": 212144481,
        "sender_full_name": "Jubilee",
        "timestamp": 1601685751
    },
    {
        "content": "<p>It's <em>not</em> however a replacement for testing edge cases, which is why I specified a list of unusual cases to test... it will only once in a blue moon land on \"test input with T::MAX\".</p>",
        "id": 212144509,
        "sender_full_name": "Jubilee",
        "timestamp": 1601685801
    },
    {
        "content": "<p>I see. though it seems to be a sibling of fuzzing (for discovering otherwise unknown edge cases)</p>",
        "id": 212144538,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601685843
    },
    {
        "content": "<p>correct!</p>",
        "id": 212144572,
        "sender_full_name": "Jubilee",
        "timestamp": 1601685850
    },
    {
        "content": "<p>so in that case, it seems the intention is to use it for entirely normal ops</p>",
        "id": 212144583,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601685875
    },
    {
        "content": "<p>You need the ordinary regression tests on edge cases, and it effectively fuzzes your other assumptions.</p>",
        "id": 212144589,
        "sender_full_name": "Jubilee",
        "timestamp": 1601685888
    },
    {
        "content": "<p>makes sense, definitely seems like a good idea</p>",
        "id": 212144610,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601685928
    },
    {
        "content": "<p>any opinions on quickcheck vs proptest?  i'm guessing shrinking is not particularly important to us</p>",
        "id": 212144622,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601685949
    },
    {
        "content": "<p>quickcheck is supposed to be faster, proptest has more nuanced control, which is why I suggested quickcheck.</p>",
        "id": 212144699,
        "sender_full_name": "Jubilee",
        "timestamp": 1601686055
    },
    {
        "content": "<p>sounds good to me</p>",
        "id": 212144764,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601686113
    },
    {
        "content": "<p>This is the argument for the proptest/hypothesis way of doing things: <a href=\"https://hypothesis.works/articles/integrated-shrinking/\">https://hypothesis.works/articles/integrated-shrinking/</a></p>",
        "id": 212145182,
        "sender_full_name": "Jubilee",
        "timestamp": 1601686566
    },
    {
        "content": "<p>it's uh, pretty contentiously posed. :P but not completely insane.</p>",
        "id": 212145240,
        "sender_full_name": "Jubilee",
        "timestamp": 1601686679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I'm looking into resurrecting this topic (if only for ease of adding new tests)</p>\n<p>I've looked into proptest and it has pretty good support for generating specific classes of floating point values (normal, subnormal, infinity, etc) and should make it easy to generate things like vectors with only a single non-normal value, etc.  I think this is probably worth the (hopefully minimal) performance hit vs quickcheck.</p>\n<p>Regarding the \"standard\" set of tests, is there anything in particular you are looking for, beyond just checking normal values?</p>",
        "id": 218229415,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1606682408
    },
    {
        "content": "<p>Oh awesome.</p>\n<p>Yeah basically tests should check the fixed interesting values + the subnormals, with both signs.</p>",
        "id": 218346179,
        "sender_full_name": "Jubilee",
        "timestamp": 1606770424
    },
    {
        "content": "<p>So the good news: with the recent rustc PR in, I can now run my proptest branch on nightly, and it produces ~4000 passing tests</p>",
        "id": 225949046,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613019566
    },
    {
        "content": "<p>The bad news is that on my relatively beefy MBP it takes 7 minutes to compile :/</p>",
        "id": 225949057,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613019584
    },
    {
        "content": "<p>oof!</p>",
        "id": 225949058,
        "sender_full_name": "Jubilee",
        "timestamp": 1613019593
    },
    {
        "content": "<p>4000 tests means 4000 functions to codegen, which I'm guessing is the problem</p>",
        "id": 225949124,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613019620
    },
    {
        "content": "<p>We could change it to only test a single lane count (maybe 8? 16?) by default which seems to reduce it pretty significantly</p>",
        "id": 225949221,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613019749
    },
    {
        "content": "<p>also almost all of what takes so long are the integer tests, I'm not sure if splitting it into different files would allow the compiler to parallelize better?</p>",
        "id": 225949272,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613019806
    },
    {
        "content": "<p>sure, try splitting it up? it probably will go one module at a time.</p>",
        "id": 225949615,
        "sender_full_name": "Jubilee",
        "timestamp": 1613020280
    },
    {
        "content": "<p>no, file breakup don't affect it. the unit of translation in rust is the crate.</p>\n<p>you could try increasing the codegen-units in the profile though.</p>",
        "id": 225990614,
        "sender_full_name": "Lokathor",
        "timestamp": 1613050776
    },
    {
        "content": "<p>The most basic unit of partitioning is de-facto a module (not a function), so splitting into files might help if they are in the same module currently.</p>",
        "id": 225992761,
        "sender_full_name": "tm",
        "timestamp": 1613051686
    },
    {
        "content": "<p>hm.</p>",
        "id": 226004669,
        "sender_full_name": "Jubilee",
        "timestamp": 1613056341
    },
    {
        "content": "<p>no, separate files doesn't affect rust's compilation process.</p>",
        "id": 226031992,
        "sender_full_name": "Lokathor",
        "timestamp": 1613066387
    },
    {
        "content": "<p>it affects like, ease of editing or item privacy or whatever, but each entire crate is a translation unit.</p>",
        "id": 226032154,
        "sender_full_name": "Lokathor",
        "timestamp": 1613066437
    },
    {
        "content": "<p><a href=\"https://github.com/jakubadamw/rutenspitz\">https://github.com/jakubadamw/rutenspitz</a> though maybe this could simplify the test suite? someone told me it's the new hotness in testing</p>",
        "id": 226032505,
        "sender_full_name": "Lokathor",
        "timestamp": 1613066564
    },
    {
        "content": "<p>codegen-units controls the number of a code generations units within a single crate.</p>",
        "id": 226032540,
        "sender_full_name": "tm",
        "timestamp": 1613066579
    },
    {
        "content": "<p>I am pretty sure there is a nonzero amount of logical partitioning of compilation in-crate. The final _codegen and linking_ does happen all at once for a crate, but some eventful things like macros might be sub-crate.</p>",
        "id": 226032894,
        "sender_full_name": "Jubilee",
        "timestamp": 1613066716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> i said that :3</p>",
        "id": 226033200,
        "sender_full_name": "Lokathor",
        "timestamp": 1613066816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> while possible, i doubt it currently works like this. intra-crate parallelism is very poor in the compiler.</p>",
        "id": 226033321,
        "sender_full_name": "Lokathor",
        "timestamp": 1613066870
    },
    {
        "content": "<p>Unfortunately it seems all the time is spent in codegen <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 226033787,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613067066
    },
    {
        "content": "<p>That's what <code>-Ztime-passes</code> seemed to show</p>",
        "id": 226033858,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613067106
    },
    {
        "content": "<p>The CGUs look unbalanced, so this is exactly the case where additional modules would help</p>",
        "id": 226035684,
        "sender_full_name": "tm",
        "timestamp": 1613067929
    },
    {
        "content": "<p>So actually now that I think about it, each \"test\" is actually its own module with 7 tests in it</p>",
        "id": 226036041,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613068087
    },
    {
        "content": "<p>So there are several hundred modules</p>",
        "id": 226036063,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613068099
    },
    {
        "content": "<p>Each type has a module too, so they're broken down between 10ish top level modules too</p>",
        "id": 226036162,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613068146
    },
    {
        "content": "<p>Something like 10 modules containing 50 modules each containing 7 tests each...</p>",
        "id": 226036236,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613068184
    },
    {
        "content": "<p>For me an outlier in compilation time is <code>LLVM_lto_optimize(ops.9l6yo248-cgu.15)</code> it contains mostly things from <code>crates/core_simd/tests/ops_impl/*_macros.rs</code>. I would try splitting that if possible.</p>",
        "id": 226036922,
        "sender_full_name": "tm",
        "timestamp": 1613068446
    },
    {
        "content": "<p>Oh I'm talking about my proptest branch, which is dramatically slower than anything in master right now</p>",
        "id": 226037230,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613068575
    },
    {
        "content": "<p>It's a much more complete test suite</p>",
        "id": 226037278,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613068602
    },
    {
        "content": "<p>Oh! The general steps would be to identify codegen units that take longer from others in <code>-Ztime-passes</code>, check what they contain with <code>-Zprint-mono-items=lazy</code> or <code>--emit=llvm-ir</code>, and if they are unbalanced try splitting further.</p>",
        "id": 226037650,
        "sender_full_name": "tm",
        "timestamp": 1613068777
    },
    {
        "content": "<p>F.</p>",
        "id": 226039134,
        "sender_full_name": "Jubilee",
        "timestamp": 1613069473
    },
    {
        "content": "<p>so hold on, do separate modules let things be split between the codegen units better?</p>",
        "id": 226056602,
        "sender_full_name": "Lokathor",
        "timestamp": 1613077202
    },
    {
        "content": "<p>My understanding is each module corresponds to an LLVM codegen unit</p>",
        "id": 226056761,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613077262
    },
    {
        "content": "<p>how on earth did no one ever explain this before</p>",
        "id": 226057272,
        "sender_full_name": "Lokathor",
        "timestamp": 1613077471
    },
    {
        "content": "<p>I had no idea that modules were relevant.  I thought it could split arbitrary items.</p>",
        "id": 226057465,
        "sender_full_name": "scottmcm",
        "timestamp": 1613077547
    },
    {
        "content": "<p>Initially functions from the same module are organized together in the same unit. Subsequently modules are merged until desired number of units is obtained, i.e., -Ccodegen-units=N. Thus, functions from one module won't be  split.  In incremental builds some details differ.</p>",
        "id": 226057621,
        "sender_full_name": "tm",
        "timestamp": 1613077600
    },
    {
        "content": "<p>Inline functions are included in every unit that references them.</p>",
        "id": 226058046,
        "sender_full_name": "tm",
        "timestamp": 1613077782
    },
    {
        "content": "<p>wowdonttalktomeiangy</p>",
        "id": 226071614,
        "sender_full_name": "Lokathor",
        "timestamp": 1613084855
    },
    {
        "content": "<p>Relevant: consider using <code>proptest</code> as a library<br>\n<a href=\"https://twitter.com/sunshowers6/status/1349819044967313408\">https://twitter.com/sunshowers6/status/1349819044967313408</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/sunshowers6/status/1349819044967313408\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1338638166148796416/LhQ820kS_normal.jpg\"></a><p>The most important difference between proptest and quickcheck is composability. I've used both extensively, in practice reusing valuable test infrastructure is much easier with proptest. (guppy even has proptest helpers in the public API, behind an optional feature.) <a href=\"https://t.co/vn19tTenDM\">https://twitter.com/sunshowers6/status/1349819044967313408/photo/1</a></p><span>- rain 🌧 (@sunshowers6)</span><div class=\"twitter-image\"><a href=\"https://t.co/vn19tTenDM\"><img src=\"https://pbs.twimg.com/media/EruE7yqU0AAWqBF.jpg:thumb\"></a></div></div></div>",
        "id": 226096140,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613102599
    },
    {
        "content": "<p>I am actually using proptest!</p>",
        "id": 226097114,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613104087
    },
    {
        "content": "<p>I'm not sure it makes a huge difference for us but it is definitely slightly more user friendly, supposedly at the cost of speed</p>",
        "id": 226097122,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613104113
    },
    {
        "content": "<p>Unfortunately the tests run very fast, they just take forever to compile</p>",
        "id": 226097127,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613104132
    },
    {
        "content": "<p>The top few phases from <code>-Z time-passes</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>time:  10.465   run_linker\ntime:  18.384   monomorphization_collector_graph_walk\ntime:  29.552   link_binary\ntime:  29.579   link_crate\ntime: 186.976   finish_ongoing_codegen\ntime: 200.034   codegen_to_LLVM_IR\ntime: 216.851   link\ntime: 223.035   codegen_crate\ntime: 316.505   LLVM_passes(crate)\ntime: 450.932   total\n</code></pre></div>",
        "id": 226229844,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613197170
    },
    {
        "content": "<p>This is funny:<br>\n<a href=\"https://github.com/rust-lang/stdsimd/pull/72/checks?check_run_id=1892401655#step:6:194\">https://github.com/rust-lang/stdsimd/pull/72/checks?check_run_id=1892401655#step:6:194</a><br>\nLLVM actually runs out of memory in github actions <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 226229901,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613197237
    },
    {
        "content": "<p>Interesting to note it seems to scale linearly.  Only building tests for 16-lane vectors isn't too bad, finishes in just under a minute for me:</p>\n<div class=\"codehilite\"><pre><span></span><code>time:   1.010   run_linker\ntime:   1.019   blocked_on_dep_graph_loading\ntime:   2.080   monomorphization_collector_graph_walk\ntime:   3.869   link_binary\ntime:   3.883   link_crate\ntime:  19.201   codegen_to_LLVM_IR\ntime:  21.840   codegen_crate\ntime:  23.151   finish_ongoing_codegen\ntime:  27.335   link\ntime:  35.083   LLVM_passes(crate)\ntime:  52.639   total\n</code></pre></div>",
        "id": 226230067,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613197544
    },
    {
        "content": "<p>Ah I think I may have figured it out.  I wrote the test helper functions parameterized over generic types that implement <code>Fn</code>, which end up regenerating the code for every single test</p>",
        "id": 226231083,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613199426
    },
    {
        "content": "<p>Since performance isn't really an issue perhaps I can use <code>dyn Trait</code> to monomorphize the heavy functions into just a few variants instead of thousands</p>",
        "id": 226231134,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613199512
    },
    {
        "content": "<p>Yep, down from 7.5 minutes to under a minute... we're getting somewhere</p>",
        "id": 226231574,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613200376
    },
    {
        "content": "<p>nice.</p>",
        "id": 226232226,
        "sender_full_name": "Jubilee",
        "timestamp": 1613201559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I think I may have found a floating point bug? I'm not really sure what it is</p>",
        "id": 226262843,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613244992
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/72/checks?check_run_id=1894682308#step:6:384\">https://github.com/rust-lang/stdsimd/pull/72/checks?check_run_id=1894682308#step:6:384</a></p>",
        "id": 226262844,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613244997
    },
    {
        "content": "<p><code>0 *= x</code> should be <code>0</code> but it looks like we're getting <code>-x</code> for small <code>x</code>?</p>",
        "id": 226262859,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613245032
    },
    {
        "content": "<p>Maybe LLVM is optimizing something incorrectly?</p>",
        "id": 226262862,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613245049
    },
    {
        "content": "<p>do those tests check for biteq?</p>",
        "id": 226262941,
        "sender_full_name": "Jubilee",
        "timestamp": 1613245129
    },
    {
        "content": "<p>yes they do, that link has the actual bit pattern in parens</p>",
        "id": 226262978,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613245198
    },
    {
        "content": "<p>they aren't nans though</p>",
        "id": 226262980,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613245201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>  That number is <code>-9.54e-39</code> - you're hitting subnormals/denormal numbers. Float64s only go down to ~<code>2e-17</code> for machine epsilon.</p>",
        "id": 226263351,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613245735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> was that off the top of your head?</p>",
        "id": 226263377,
        "sender_full_name": "Jubilee",
        "timestamp": 1613245801
    },
    {
        "content": "<p>Hmmm you're right.  Why would it be different with vectors though?</p>",
        "id": 226263419,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613245807
    },
    {
        "content": "<p>Also only for MulAssign and not Mul</p>",
        "id": 226263450,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613245920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> the machine epsilon yes. The numbers in the error trace look way smaller than that, so I played around with it a bit in Julia to confirm some suspicions, and the manual backed me up:</p>\n<blockquote>\n<p><a href=\"https://web.mit.edu/julia_v0.6.2/julia/share/doc/julia/html/en/manual/performance-tips.html#Treat-Subnormal-Numbers-as-Zeros-1\">Treating subnormals as zeros should be used with caution, because doing so breaks some identities, such as x-y == 0 implies x == y:</a></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">eps</span><span class=\"p\">()</span>\n<span class=\"mf\">2.220446049250313e-16</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mf\">3f-38</span><span class=\"p\">;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mf\">2f-38</span><span class=\"p\">;</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">set_zero_subnormals</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">0.0f0</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">set_zero_subnormals</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">1.0000001f-38</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 226263512,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613245998
    },
    {
        "content": "<p>hehe</p>",
        "id": 226263516,
        "sender_full_name": "Jubilee",
        "timestamp": 1613246018
    },
    {
        "content": "<p>Also enforcing bit equality with floats will be tricky because </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226263650,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613246194
    },
    {
        "content": "<p>Yes, we use biteq comparisons in certain tests only when we actually expect biteq.</p>",
        "id": 226263669,
        "sender_full_name": "Jubilee",
        "timestamp": 1613246238
    },
    {
        "content": "<p>(I think in most places we expect it)</p>",
        "id": 226263676,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613246264
    },
    {
        "content": "<p>Ah nice. I was trying to figure out from the trace if the proper method was being called but it's a bit hard to read the output.</p>",
        "id": 226263680,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613246267
    },
    {
        "content": "<p>Yeah proptest doesn't provide the cleanest formatting, but it shows the input and output values</p>",
        "id": 226263723,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613246303
    },
    {
        "content": "<p>And the assert that failed was against the equivalent scalar computation</p>",
        "id": 226263731,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613246320
    },
    {
        "content": "<p>This is the test recipe that is generating the failures right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_binary_elementwise</span><span class=\"o\">&lt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Scalar1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Scalar2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ScalarResult</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Vector1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Vector2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">VectorResult</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fv</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">Vector1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Vector2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">VectorResult</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fs</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">Scalar1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Scalar2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ScalarResult</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">([</span><span class=\"n\">Scalar1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Scalar2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Scalar1</span>: <span class=\"nb\">Copy</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">DefaultStrategy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Scalar2</span>: <span class=\"nb\">Copy</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">DefaultStrategy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ScalarResult</span>: <span class=\"nb\">Copy</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">biteq</span>::<span class=\"n\">BitEq</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">DefaultStrategy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Vector1</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Scalar1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Scalar1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Vector2</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Scalar2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Scalar2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">VectorResult</span>: <span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">ScalarResult</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">ScalarResult</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test_2</span><span class=\"p\">(</span><span class=\"o\">&amp;|</span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"n\">Scalar1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"p\">[</span><span class=\"n\">Scalar2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">proptest</span>::<span class=\"n\">prop_assume</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_1</span>: <span class=\"p\">[</span><span class=\"n\">ScalarResult</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()).</span><span class=\"n\">into</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_2</span>: <span class=\"p\">[</span><span class=\"n\">ScalarResult</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ScalarResult</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">i1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()).</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">*</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">i2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">result</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">crate</span>::<span class=\"n\">prop_assert_biteq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">result_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226263953,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613246576
    },
    {
        "content": "<p>Yep</p>",
        "id": 226264003,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613246640
    },
    {
        "content": "<p>I'm gonna be the naive tourist and just ask:</p>\n<ol>\n<li>What's the <code>*o</code> that gets pattern matched in the <code>for</code>?</li>\n</ol>",
        "id": 226264097,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613246749
    },
    {
        "content": "<p>It's a mutable reference</p>",
        "id": 226264157,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613246797
    },
    {
        "content": "<p>From result.iter_mut()</p>",
        "id": 226264175,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613246818
    },
    {
        "content": "<p>Right, to assign back into the elements.</p>",
        "id": 226264183,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613246834
    },
    {
        "content": "<p>Yep</p>",
        "id": 226264256,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613246897
    },
    {
        "content": "<p>How can I find what <code>fv</code> and <code>fs</code> are for the first failure?</p>",
        "id": 226264299,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613246977
    },
    {
        "content": "<p>You are perfectly welcome to ask \"naive tourist\" questions.</p>",
        "id": 226264387,
        "sender_full_name": "Jubilee",
        "timestamp": 1613247080
    },
    {
        "content": "<p>I'm figuring it's a good pop quiz for y'all to make sure that everything is \"plugged in\" where it should be <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> and I get to learn along the way.</p>",
        "id": 226264405,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613247119
    },
    {
        "content": "<p>I think this is a good reminder to crack open my Numerical Analysis textbook which needs some de-dusting anyways.</p>",
        "id": 226264489,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613247238
    },
    {
        "content": "<p>I think the best way would be to look at the backtrace (which doesn't appear to be enabled)</p>",
        "id": 226264626,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247399
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/blob/feature/proptest/crates/core_simd/tests/ops_macros.rs#L50-L64\">https://github.com/rust-lang/stdsimd/blob/feature/proptest/crates/core_simd/tests/ops_macros.rs#L50-L64</a></p>",
        "id": 226264709,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247500
    },
    {
        "content": "<p>this is where those tests are defined</p>",
        "id": 226264711,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247505
    },
    {
        "content": "<p>oh wait</p>",
        "id": 226264721,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247529
    },
    {
        "content": "<p>ha</p>",
        "id": 226264723,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> you were absolutely right</p>",
        "id": 226264731,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247542
    },
    {
        "content": "<p>I had a typo using <code>SubAssign</code></p>",
        "id": 226264741,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247560
    },
    {
        "content": "<p>:)</p>",
        "id": 226264744,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247566
    },
    {
        "content": "<p>THE NAIVE TOURIST METHOD STRIKES AGAIN <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 226264754,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613247591
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/blob/feature/proptest/crates/core_simd/tests/ops_macros.rs#L190\">https://github.com/rust-lang/stdsimd/blob/feature/proptest/crates/core_simd/tests/ops_macros.rs#L190</a></p>",
        "id": 226264758,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247596
    },
    {
        "content": "<p>Ohhh lol yeah. That explains the subnormals - catastrophic cancellation with small inputs.</p>",
        "id": 226264812,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613247635
    },
    {
        "content": "<p>Yup, I think that's exactly what was happening</p>",
        "id": 226264840,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247689
    },
    {
        "content": "<p>Well, as dumb as that was, I'd prefer a copy-paste error to an actual codegen issue...</p>",
        "id": 226264889,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247727
    },
    {
        "content": "<p>Yeah those are some heroic looking macros my friend.</p>",
        "id": 226264895,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613247745
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 226264898,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247759
    },
    {
        "content": "<p>They're actually not too bad, but could use some documenting</p>",
        "id": 226264906,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247767
    },
    {
        "content": "<p>I just learned about <code>cargo test --quiet</code> which is useful when there's such a large number of tests</p>",
        "id": 226265008,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613247915
    },
    {
        "content": "<p>Yeah the dot printing is nice.</p>",
        "id": 226265011,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613247930
    },
    {
        "content": "<p>How long is it to run the test suite locally <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> ? I assume the CI machines are beefy with many cores.</p>",
        "id": 226265091,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613248030
    },
    {
        "content": "<p>it's actually not too bad anymore</p>",
        "id": 226265100,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613248044
    },
    {
        "content": "<p>running only takes a few seconds</p>",
        "id": 226265102,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613248048
    },
    {
        "content": "<p>I'll run a clean build in a second to get an idea</p>",
        "id": 226265107,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613248059
    },
    {
        "content": "<p>Ah got it.</p>",
        "id": 226265157,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613248097
    },
    {
        "content": "<p>A clean build test took just under a minute</p>",
        "id": 226265315,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613248254
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226265318,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613248255
    },
    {
        "content": "<p>my branch is actually in <code>rust-lang/stdsimd</code></p>",
        "id": 226265334,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613248277
    },
    {
        "content": "<p>That explains why I couldn't find it then <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 226265351,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613248305
    },
    {
        "content": "<p>Ran tests with your fix, all good!</p>",
        "id": 226266230,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613249227
    },
    {
        "content": "<p>WASM testing is REALLY slow with this, as are the cross builds.</p>",
        "id": 226557787,
        "sender_full_name": "Jubilee",
        "timestamp": 1613501324
    },
    {
        "content": "<p>Anything we can do to cut down the test surface area on our non-tier-1 architectures (x86 and aarch64, ofc) is welcome, I think, especially if we're not running on the actual metal.</p>",
        "id": 226558176,
        "sender_full_name": "Jubilee",
        "timestamp": 1613501505
    },
    {
        "content": "<p>Unfortunately I'm not sure there's really a way to do that without skipping things</p>",
        "id": 226558302,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613501547
    },
    {
        "content": "<p>is dropping the # of lanes tested an option?</p>",
        "id": 226558377,
        "sender_full_name": "Jubilee",
        "timestamp": 1613501593
    },
    {
        "content": "<p>Well I'd be worried about missing weird errors, but yeah</p>",
        "id": 226558408,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613501619
    },
    {
        "content": "<p>I'm a little confused why cross is so slow, does it run the compiler itself in a VM?</p>",
        "id": 226558533,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613501659
    },
    {
        "content": "<p>maybe?</p>",
        "id": 226558551,
        "sender_full_name": "Jubilee",
        "timestamp": 1613501667
    },
    {
        "content": "<p>it'd be nice to test like... 4 lanes and then a random N for all tests, when we don't care too much.</p>",
        "id": 226558568,
        "sender_full_name": "Jubilee",
        "timestamp": 1613501680
    }
]