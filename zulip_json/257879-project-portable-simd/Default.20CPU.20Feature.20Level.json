[
    {
        "content": "<p>It's my understanding that, as far as CPU SIMD features go, by default:</p>\n<ul>\n<li>i586 has no features.</li>\n<li>i686 and x86_64 targets have <code>sse</code> and <code>sse2</code></li>\n<li>arm and aarch64 have no features</li>\n<li>other arches also have no features I guess?</li>\n</ul>",
        "id": 211398948,
        "sender_full_name": "Lokathor",
        "timestamp": 1601183027
    },
    {
        "content": "<p>confirm/deny? Uh, maybe <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> would know this one.</p>",
        "id": 211398991,
        "sender_full_name": "Lokathor",
        "timestamp": 1601183054
    },
    {
        "content": "<p>Some arm targets have neon. Some specify it in the arch string, but I think some others also that don't explicitly say neon have it as well</p>",
        "id": 211399190,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601183415
    },
    {
        "content": "<p>aarch64 has Neon by default, I believe.</p>",
        "id": 211401464,
        "sender_full_name": "Jubilee",
        "timestamp": 1601188205
    },
    {
        "content": "<p>I have not confirmed this exhaustively.</p>",
        "id": 211401485,
        "sender_full_name": "Jubilee",
        "timestamp": 1601188265
    },
    {
        "content": "<p>Note that if so this says nothing about other ARM triples in that same \"generation\" (ARMv8). <em>Just</em> aarch64.</p>",
        "id": 211401727,
        "sender_full_name": "Jubilee",
        "timestamp": 1601188731
    },
    {
        "content": "<p>and that aarch64 is specifically an execution state (yes, we're \"long mode\" now) of a specific ARM architecture right now (armv8a).</p>",
        "id": 211401863,
        "sender_full_name": "Jubilee",
        "timestamp": 1601188991
    },
    {
        "content": "<p>well for the purposes of this one list, we're only concerned about specifically rust targets that start with <code>aarch64</code></p>",
        "id": 211406344,
        "sender_full_name": "Lokathor",
        "timestamp": 1601197193
    },
    {
        "content": "<p>I think armv7 may have neon, but I'm not sure.</p>",
        "id": 211414646,
        "sender_full_name": "Amanieu",
        "timestamp": 1601210310
    },
    {
        "content": "<p>Neon is mostly a feature of the \"ARMv7-A\" profile but it is optional (it will <em>very likely</em> have Neon, though).</p>",
        "id": 211429157,
        "sender_full_name": "Jubilee",
        "timestamp": 1601232900
    },
    {
        "content": "<p>I looked in the <code>rustc_target</code> crate and there didn't seem to be feature selections in the profiles there. Where else would it be defined?</p>",
        "id": 211429174,
        "sender_full_name": "Lokathor",
        "timestamp": 1601232946
    },
    {
        "content": "<p>(or maybe i just looked in the wrong area of the crate?)</p>",
        "id": 211429190,
        "sender_full_name": "Lokathor",
        "timestamp": 1601232963
    },
    {
        "content": "<p>doing some investigating, Linux kernels seem to assume aarch64 always has Neon/\"Advanced SIMD\", so we probably can as well.</p>",
        "id": 211429220,
        "sender_full_name": "Jubilee",
        "timestamp": 1601232982
    },
    {
        "content": "<p>That's probably similar to assuming i686 has SSE2, even though pentium IIIs didn't have it, I believe</p>",
        "id": 211429241,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601233036
    },
    {
        "content": "<p>given that based on everything I've read off the ARM site, they seem to say you will always have Neon on ARMv8-A/aarch64 too, I dunno.</p>",
        "id": 211429293,
        "sender_full_name": "Jubilee",
        "timestamp": 1601233127
    },
    {
        "content": "<p>I think it's optional as far as the specification goes, but no one has actually manufactured a v8 core without neon</p>",
        "id": 211429396,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601233309
    },
    {
        "content": "<p>It was optional in ARMv7A but that doesn't mean it's optional in ARMv8A. Anyways, the obvious solution is to just ask ARM. :^)</p>",
        "id": 211429443,
        "sender_full_name": "Jubilee",
        "timestamp": 1601233344
    },
    {
        "content": "<p>In v8 VFP and NEON were combined so the only core without it would be soft float</p>",
        "id": 211429475,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601233430
    },
    {
        "content": "<p>So I doubt one would ever be manufacturered</p>",
        "id": 211429477,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601233440
    },
    {
        "content": "<p>v7 is more complicated because you can have vfpv3 or v4</p>",
        "id": 211429543,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601233514
    },
    {
        "content": "<p>Or vfp with no neon</p>",
        "id": 211429550,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601233552
    },
    {
        "content": "<p>I believe v8-A without Neon would actually violate the spec for ARMv8-A then.<br>\nARMv8-M without Neon though would happen.</p>",
        "id": 211429879,
        "sender_full_name": "Jubilee",
        "timestamp": 1601233924
    },
    {
        "content": "<p>because I believe \"has hardware support for floats\" is part of the v8A spec. It's <em>not</em> part of the v8M or v8R, though I believe those can also <em>opt in</em> to it, but they will never (as far as I know) use the aarch64 profile.</p>",
        "id": 211429992,
        "sender_full_name": "Jubilee",
        "timestamp": 1601234150
    },
    {
        "content": "<p>and aarch64 is a subset of ARMv8A... if it can't do 64-bit execution, it can't do aarch64. I still think the best and obvious solution though is to literally just ask ARM, given they have shown up in rust-lang/rfcs</p>",
        "id": 211430072,
        "sender_full_name": "Jubilee",
        "timestamp": 1601234278
    },
    {
        "content": "<p>keep bothering them like <a href=\"https://www.youtube.com/watch?v=yg5RgI2GeKk\">https://www.youtube.com/watch?v=yg5RgI2GeKk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"yg5RgI2GeKk\" href=\"https://www.youtube.com/watch?v=yg5RgI2GeKk\"><img src=\"https://i.ytimg.com/vi/yg5RgI2GeKk/default.jpg\"></a></div>",
        "id": 211430135,
        "sender_full_name": "Jubilee",
        "timestamp": 1601234341
    },
    {
        "content": "<p>That sounds plausible. It also likely doesn't matter what arm says, since the rust target doesn't have to exactly match</p>",
        "id": 211430144,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601234356
    },
    {
        "content": "<p>Well, yeah true, it's just convenient if we actually do.</p>",
        "id": 211430159,
        "sender_full_name": "Jubilee",
        "timestamp": 1601234397
    },
    {
        "content": "<p>I'd like to always have Rust use triples that make sense, rather than e.g. maintaining compatibility with GCC or LLVM.</p>",
        "id": 211430332,
        "sender_full_name": "Jubilee",
        "timestamp": 1601234568
    },
    {
        "content": "<p>I think with x86 and x86_64 triples that ship has sailed, everyone's used to whatever badness is currently around, but if we can make sense with other things? it'd be nice.</p>",
        "id": 211430408,
        "sender_full_name": "Jubilee",
        "timestamp": 1601234657
    },
    {
        "content": "<p><a href=\"https://static.docs.arm.com/ddi0487/ea/DDI0487E_a_armv8_arm.pdf\">https://static.docs.arm.com/ddi0487/ea/DDI0487E_a_armv8_arm.pdf</a> This is <em>the</em> authoritative document on ARMv8A. I found that their other documentation releases aimed at e.g. programmers mentioned they defer to <em>this</em>.<br>\n<a href=\"https://static.docs.arm.com/102105/0100/102105_ArmARM_Fb_known_issues.pdf\">https://static.docs.arm.com/102105/0100/102105_ArmARM_Fb_known_issues.pdf</a> Here is its errata.<br>\nAnd in the ARMv8A programmer's guide: <a href=\"https://developer.arm.com/documentation/den0024/a/aarch64-floating-point-and-neon\">https://developer.arm.com/documentation/den0024/a/aarch64-floating-point-and-neon</a></p>\n<blockquote>\n<p>Both floating-point and NEON are required in all standard ARMv8 implementations. However, implementations targeting specialized markets may support the following combinations:<br>\n    No NEON or floating-point.<br>\n    Full floating-point and SIMD support with exception trapping.<br>\n    Full floating-point and SIMD support without exception trapping.</p>\n</blockquote>",
        "id": 211430846,
        "sender_full_name": "Jubilee",
        "timestamp": 1601235270
    },
    {
        "content": "<p>Ah there we go. So it's not technically required but is as far as the spec goes. Sounds like our answer</p>",
        "id": 211430876,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601235362
    },
    {
        "content": "<p>So, from our perspective, I think we should basically say that we have three triples here, and our generic aarch64-unknown-linux-gnu should follow the \"standard Neon/FP\" assumption, and if someone is trying to compile for aarch64 and isn't using a different triple than normal, that's their problem.</p>",
        "id": 211430920,
        "sender_full_name": "Jubilee",
        "timestamp": 1601235377
    },
    {
        "content": "<p>i believe also specifically the \"no exception trapping\" option, because llvm doesn't (yet) support floating exceptions.</p>",
        "id": 211430951,
        "sender_full_name": "Lokathor",
        "timestamp": 1601235478
    },
    {
        "content": "<p>I think so, yes.<br>\nI believe in practice \"no NEON\" is going to be ARMv8M and \"ARMv8 NEON with different exception handling\" is going to be ARMv8R.</p>",
        "id": 211431007,
        "sender_full_name": "Jubilee",
        "timestamp": 1601235522
    },
    {
        "content": "<p>So this leads me back to the other question: where are these target defaults defined within the rust codebase?</p>",
        "id": 211431024,
        "sender_full_name": "Lokathor",
        "timestamp": 1601235587
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/0f9f0b384a0a3c997c1ea8f838f5591f12f96633/compiler/rustc_codegen_llvm/src/llvm_util.rs#L166\">https://github.com/rust-lang/rust/blob/0f9f0b384a0a3c997c1ea8f838f5591f12f96633/compiler/rustc_codegen_llvm/src/llvm_util.rs#L166</a> Hmm.</p>",
        "id": 211431188,
        "sender_full_name": "Jubilee",
        "timestamp": 1601235749
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_target/src/spec/aarch64_linux_android.rs#L11\">https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_target/src/spec/aarch64_linux_android.rs#L11</a> <br>\nOh, here?</p>",
        "id": 211431318,
        "sender_full_name": "Jubilee",
        "timestamp": 1601235904
    },
    {
        "content": "<p>Hmm, i686_pc_windows_msvc doesn't seem to have features set in it though</p>",
        "id": 211431488,
        "sender_full_name": "Lokathor",
        "timestamp": 1601236157
    },
    {
        "content": "<p>does x86_64?</p>",
        "id": 211431552,
        "sender_full_name": "Jubilee",
        "timestamp": 1601236212
    },
    {
        "content": "<p>doesn't appear that way</p>",
        "id": 211431570,
        "sender_full_name": "Lokathor",
        "timestamp": 1601236254
    },
    {
        "content": "<p>unless setting <code>base.cpu</code> picks some features, which it totally might.</p>",
        "id": 211431584,
        "sender_full_name": "Lokathor",
        "timestamp": 1601236280
    },
    {
        "content": "<p>but i mean, if so, then what features are part of what base cpu</p>",
        "id": 211431593,
        "sender_full_name": "Lokathor",
        "timestamp": 1601236307
    },
    {
        "content": "<p>might. It seems the current story for feature setting is a bit chaotic.</p>",
        "id": 211431634,
        "sender_full_name": "Jubilee",
        "timestamp": 1601236325
    },
    {
        "content": "<p>\"yay\"</p>",
        "id": 211431647,
        "sender_full_name": "Lokathor",
        "timestamp": 1601236362
    },
    {
        "content": "<p>OH LOOK, CLEANING UP TECHNICAL DEBT. I HAVEN'T BEEN DOING ANY OF THAT RECENTLY. &lt;_&lt;</p>",
        "id": 211431676,
        "sender_full_name": "Jubilee",
        "timestamp": 1601236420
    }
]