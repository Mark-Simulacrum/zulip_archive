[
    {
        "content": "<p>Soon tee emm. I am currently out and about so I will not be able to do note taking effectively.</p>",
        "id": 214619422,
        "sender_full_name": "Jubilee",
        "timestamp": 1603739237
    },
    {
        "content": "<p>I can take notes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214620107,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603739585
    },
    {
        "content": "<p>Stubbed out a working doc here: <a href=\"https://hackmd.io/PYi0ZMVdRF64J0we5Z4Ucw\">https://hackmd.io/PYi0ZMVdRF64J0we5Z4Ucw</a></p>",
        "id": 214625094,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742233
    },
    {
        "content": "<p>Hello everyone! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 214625161,
        "sender_full_name": "Jubilee",
        "timestamp": 1603742265
    },
    {
        "content": "<p>So how's everything tracking do you think <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span>?</p>",
        "id": 214625471,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742408
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/rust-lang/rust/issues/77866\">https://github.com/rust-lang/rust/issues/77866</a> is still blocking us from <code>nightly</code></p>",
        "id": 214625561,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742462
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/stdsimd/issues/40\">https://github.com/rust-lang/stdsimd/issues/40</a> might need some concrete path forward too?</p>",
        "id": 214625721,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742540
    },
    {
        "content": "<p>Yes to both, I believe</p>",
        "id": 214625778,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603742580
    },
    {
        "content": "<p>It's a beautiful day outside.<br>\nThe birds are singing.<br>\nFlowers are blooming.<br>\nOn a day like this, PLs like you...</p>\n<p>are in compiler hell.<br>\nYeah basically.</p>",
        "id": 214625805,
        "sender_full_name": "Jubilee",
        "timestamp": 1603742591
    },
    {
        "content": "<p>So both are intersections with <code>T-compiler</code>, aren't they?</p>",
        "id": 214625947,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742662
    },
    {
        "content": "<p>I think what needs to happen is that someone needs to sit down with bjorn and go over what cranelift's current powers in dealing with simd properties are in a more documented form, so we can narrow down what we need to make happen to make current progress.</p>",
        "id": 214626022,
        "sender_full_name": "Jubilee",
        "timestamp": 1603742715
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 214626032,
        "sender_full_name": "Jubilee",
        "timestamp": 1603742723
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 214626048,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742736
    },
    {
        "content": "<p>Ok, I'll ping them on our issue and let's see what we can hash out?</p>",
        "id": 214626159,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742789
    },
    {
        "content": "<p>Yeah. Nagisa said that adding vectors to MIR wasn't quite what we wanted but sounded not opposed in the long term.</p>",
        "id": 214626229,
        "sender_full_name": "Jubilee",
        "timestamp": 1603742835
    },
    {
        "content": "<p>There wasn't a lot of enthusiasm for <code>#[cfg(cranelift)]</code> was there?</p>",
        "id": 214626390,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603742895
    },
    {
        "content": "<p>Basically it seems what we want is there needs to be some code that the codegen crates can pull in and choose how to use.</p>",
        "id": 214626392,
        "sender_full_name": "Jubilee",
        "timestamp": 1603742897
    },
    {
        "content": "<p>not really no.</p>",
        "id": 214626444,
        "sender_full_name": "Jubilee",
        "timestamp": 1603742924
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> reading the previous messages right now.</p>",
        "id": 214626652,
        "sender_full_name": "bjorn3",
        "timestamp": 1603743029
    },
    {
        "content": "<p>also we discovered that we have some intrinsics in stdarch that... are using a rustc API that const eval wants to deprecate.</p>",
        "id": 214626684,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743048
    },
    {
        "content": "<p>So instead of, say, linking to the <code>llvm.floor.v4f64</code> intrinsic directly, we want something like <code>rust.floor.v4f64</code>, which calls the appropriate backend intrinsic?</p>",
        "id": 214626687,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743049
    },
    {
        "content": "<p>I suppose!</p>",
        "id": 214626722,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743071
    },
    {
        "content": "<p>Rust has generics, so it doesn't need the vector type in the name.</p>",
        "id": 214626780,
        "sender_full_name": "bjorn3",
        "timestamp": 1603743100
    },
    {
        "content": "<p>I think the idea would be more like just <code>simd_floor</code> and allow the compiler to resolve a generic</p>",
        "id": 214626788,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603743105
    },
    {
        "content": "<p>yeah</p>",
        "id": 214626791,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603743107
    },
    {
        "content": "<p>but yes to the general idea of a rust intrinsic</p>",
        "id": 214626875,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603743126
    },
    {
        "content": "<p>Gotcha <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 214626892,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743137
    },
    {
        "content": "<p>we are bringing librustc_simd_intrinsics back it's good again awoo</p>",
        "id": 214626963,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743188
    },
    {
        "content": "<p>How much of a blocker to a Cranelift backend do we think it would be if they had to implement some simd intrinsics that <code>std::simd</code> needed?</p>",
        "id": 214627103,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743250
    },
    {
        "content": "<p>As far as I can remember that crate was for platform dependent intrinsics, while we are introducing platform independent ones.</p>",
        "id": 214627143,
        "sender_full_name": "bjorn3",
        "timestamp": 1603743275
    },
    {
        "content": "<p>True.</p>\n<p>Notably we want to be able to add at least simd_fneg which has infra in LLVM because it does bad codegen on ARM without.</p>",
        "id": 214627227,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743319
    },
    {
        "content": "<p>We had discussed making the backend support opt-in, so the compiler could use pure-rust implementations</p>",
        "id": 214627300,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603743359
    },
    {
        "content": "<p>In the quantity that std::simd needs I think combined with the fact that a shim can be vector type independent I don't think it would be too much effort to implement all necessary intrinsics in cg_clif.</p>",
        "id": 214627301,
        "sender_full_name": "bjorn3",
        "timestamp": 1603743359
    },
    {
        "content": "<p>Okay, so everything is feasible just not done yet.</p>",
        "id": 214627411,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743397
    },
    {
        "content": "<p>So should we try kick off a SIMD intrinsics MCP under <code>T-compiler</code> to see if we can get some momentum on that and keep compiler folks in the loop?</p>",
        "id": 214627486,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743438
    },
    {
        "content": "<p>probably</p>",
        "id": 214627558,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603743483
    },
    {
        "content": "<p>that sounds like a good idea to me</p>",
        "id": 214627594,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603743489
    },
    {
        "content": "<p>I'm happy to write that up unless somebody else would like to <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214627628,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743520
    },
    {
        "content": "<p>go for it.</p>",
        "id": 214627697,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743566
    },
    {
        "content": "<p>oops forgot the time, hi</p>",
        "id": 214627702,
        "sender_full_name": "Lokathor",
        "timestamp": 1603743568
    },
    {
        "content": "<p>I'll scribble it up in a HackMD and drop a link <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 214627808,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743619
    },
    {
        "content": "<p>As for RISCV that's just still currently borked?</p>",
        "id": 214627867,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743664
    },
    {
        "content": "<p>We weren't using their draft V extension or anything were we?</p>",
        "id": 214627906,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743686
    },
    {
        "content": "<p>as far as I can tell it's just lowering the wrong LLVM for some reason, it's unclear if it even has anything to do with RISC-V specifically</p>",
        "id": 214628014,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603743730
    },
    {
        "content": "<p>Ahh ok</p>",
        "id": 214628046,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603743754
    },
    {
        "content": "<p>yeah, it would help if we could make it use pure Rust thoooo.</p>",
        "id": 214628242,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743877
    },
    {
        "content": "<p>as a for the duration thing.</p>",
        "id": 214628286,
        "sender_full_name": "Jubilee",
        "timestamp": 1603743900
    },
    {
        "content": "<p>I actually have a <code>riscv64gc</code> compatible board ordered so maybe we can figure it out sometime next year when shipping brings it down to the bottom of the world here <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 214628564,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603744045
    },
    {
        "content": "<p>Was there anything else we wanted to try sync on?</p>",
        "id": 214628813,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603744171
    },
    {
        "content": "<p>nothing for me</p>",
        "id": 214628941,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603744223
    },
    {
        "content": "<p>I'm guessing the SIMD guide might be easier to work on when we've got something on <code>nightly</code> for people to use. So the next step is trying to get something started on rustc SIMD intrinsics?</p>",
        "id": 214629064,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603744284
    },
    {
        "content": "<p>I. am working on analyzing our float situation and am interested in hearing others on desirables.</p>",
        "id": 214629070,
        "sender_full_name": "Jubilee",
        "timestamp": 1603744288
    },
    {
        "content": "<p>What do you think we need to do there? Try nail down some semantics and RFC them?</p>",
        "id": 214629950,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603744720
    },
    {
        "content": "<p>whoops, sorry, I didn't notice Zulip eating <strong>my entire battery</strong>, I ran out of power. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 214640211,
        "sender_full_name": "Jubilee",
        "timestamp": 1603750581
    },
    {
        "content": "<p>Something like that? It's really another project, I think mostly the thing missing is trying to figure out what is considered most needful for various goals, aside from \"IEEE754 compliance would be nice\".</p>",
        "id": 214640394,
        "sender_full_name": "Jubilee",
        "timestamp": 1603750712
    },
    {
        "content": "<p>Do you think this is more of a lang project?</p>",
        "id": 214641543,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1603751540
    },
    {
        "content": "<p>Right.<br>\nI think it's just important to figure out what core::simd would consider as a minimum necessary foundation for our API.</p>",
        "id": 214641707,
        "sender_full_name": "Jubilee",
        "timestamp": 1603751648
    },
    {
        "content": "<p>For instance, we could opt to not support Neon at all on ARMv7, only support ARMv8 and later Neon, and otherwise only use vector implementations that we know are IEEE754 compliant. Or we could say \"we need a way of opting in to fast math so ARMv7 vector registers are usable\".</p>",
        "id": 214643842,
        "sender_full_name": "Jubilee",
        "timestamp": 1603753468
    },
    {
        "content": "<p>Wouldn't that include VFP as well?</p>",
        "id": 214643997,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1603753628
    },
    {
        "content": "<p>So I have to check but I believe the answer is no, due to ARMv7 having a flag you can set in order to disable flushing denormals. I'm not certain of the performance penalty here. We could also just straight-up emulate denormals. <em>shrug</em></p>",
        "id": 214765679,
        "sender_full_name": "Jubilee",
        "timestamp": 1603833583
    }
]