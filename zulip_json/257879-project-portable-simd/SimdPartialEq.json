[
    {
        "content": "<p>Do you expect any SIMD vectors that are <code>Eq</code> but not <code>SimdPartialEq</code>? Can I use that trait's method to parallelize <code>PartialEq</code>'s <code>eq</code>?</p>",
        "id": 277962876,
        "sender_full_name": "Sean Stangl",
        "timestamp": 1649206039
    },
    {
        "content": "<p>Nope, unfortunately there just isn't an easy way to ensure that in the type system</p>",
        "id": 277962950,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341811\">Sean Stangl</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/SimdPartialEq/near/277962876\">said</a>:</p>\n<blockquote>\n<p>Do you expect any SIMD vectors that are <code>Eq</code> but not <code>SimdPartialEq</code>?</p>\n</blockquote>\n<p>Doubtful, but if there was a type that had a weird story re: Eq/PartialEq, it would be pointers.</p>",
        "id": 277962989,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206153
    },
    {
        "content": "<p>I definitely think it's reasonable to implement <code>PartialEq: SimdPartialEq</code></p>",
        "id": 277962991,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206155
    },
    {
        "content": "<p>If that's specifically what you mean</p>",
        "id": 277962999,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206165
    },
    {
        "content": "<p>Oh, what's special about pointer equality?</p>",
        "id": 277963056,
        "sender_full_name": "Sean Stangl",
        "timestamp": 1649206209
    },
    {
        "content": "<p>wait, no...<code>String</code> is <code>PartialEq</code>, but definitely not <code>SimdPartialEq</code></p>",
        "id": 277963063,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649206223
    },
    {
        "content": "<p>Yes but String is not a vector.</p>",
        "id": 277963068,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> I meant on the impl on Simd</p>",
        "id": 277963072,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206250
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 277963077,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649206260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"341811\">Sean Stangl</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/SimdPartialEq/near/277963056\">said</a>:</p>\n<blockquote>\n<p>Oh, what's special about pointer equality?</p>\n</blockquote>\n<p>Pointer equality was a mistake.</p>",
        "id": 277963080,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206263
    },
    {
        "content": "<p>Lol</p>",
        "id": 277963084,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206269
    },
    {
        "content": "<p>We can match how pointer equality works with SimdPartialEq easy</p>",
        "id": 277963102,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206291
    },
    {
        "content": "<p>So I think there won't be any cases where we implement PartialEq without the SIMD version</p>",
        "id": 277963120,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206319
    },
    {
        "content": "<p>Oh I was worried it was something like \"Strict provenance means that tagged assumed-pointers-at-runtime compare not-equal with untagged pointers with the same numeric component\"</p>",
        "id": 277963121,
        "sender_full_name": "Sean Stangl",
        "timestamp": 1649206320
    },
    {
        "content": "<p>imho pointer equality should be defined...you just have to know it's comparing addresses, not permissions to read/write</p>",
        "id": 277963183,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649206342
    },
    {
        "content": "<p>Yes Actually That Is What It Should Mean.</p>",
        "id": 277963184,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206344
    },
    {
        "content": "<p>Uh-oh.</p>",
        "id": 277963192,
        "sender_full_name": "Sean Stangl",
        "timestamp": 1649206352
    },
    {
        "content": "<p>Well that's fine Jacob.</p>",
        "id": 277963195,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206359
    },
    {
        "content": "<p>I think provenance is fine with pointer equality because provenance only actually comes into play when you dereference</p>",
        "id": 277963236,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206439
    },
    {
        "content": "<p>Or modify the pointer</p>",
        "id": 277963293,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206453
    },
    {
        "content": "<p>though, iirc pointer comparison in C is only defined for comparing pointers to the same allocation (or one past the end)</p>",
        "id": 277963297,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649206459
    },
    {
        "content": "<p>tl;dr <code>addr_eq</code> is a fine question to ask.</p>",
        "id": 277963328,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206490
    },
    {
        "content": "<p>but is subtly different from \"but are they EQUAL?\"</p>",
        "id": 277963340,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206509
    },
    {
        "content": "<p>I don't know about C but C++ doesn't care about the allocation when comparing, it's purely treated as an integer address</p>",
        "id": 277963360,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206545
    },
    {
        "content": "<p>Are you talking about that in terms of implementations or in terms of The Rules.</p>",
        "id": 277963425,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206573
    },
    {
        "content": "<p>They Are Subtly Different.</p>",
        "id": 277963433,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206584
    },
    {
        "content": "<p>In the spec, you can compare any pointers of the same type</p>",
        "id": 277963443,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206595
    },
    {
        "content": "<p>Oh okay.</p>",
        "id": 277963451,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206600
    },
    {
        "content": "<p>iirc C++ has the same restriction...you have to use <code>std::less</code> to compare between allocations</p>",
        "id": 277963455,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649206602
    },
    {
        "content": "<p>Wait a second, isn't pointer equality broken with segmented memory in general?</p>",
        "id": 277963457,
        "sender_full_name": "Sean Stangl",
        "timestamp": 1649206604
    },
    {
        "content": "<p>YEAH KINDA</p>",
        "id": 277963460,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206609
    },
    {
        "content": "<p>MANY MISTAKES WERE MADE</p>",
        "id": 277963466,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206618
    },
    {
        "content": "<p>RIP ðŸª¦</p>",
        "id": 277963479,
        "sender_full_name": "Miguel Raz GuzmÃ¡n Macedo",
        "timestamp": 1649206638
    },
    {
        "content": "<p>memory...the hard part of computing (though you wouldn't think so as a beginner)</p>",
        "id": 277963503,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649206666
    },
    {
        "content": "<blockquote>\n<p>iirc C++ has the same restriction...you have to use <code>std::less</code> to compare between allocations</p>\n</blockquote>\n<p>Yeah I was just referring to equality, order is implementation defined</p>",
        "id": 277963586,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649206738
    },
    {
        "content": "<p>Ahhh yeah.</p>",
        "id": 277963600,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206751
    },
    {
        "content": "<p>...</p>",
        "id": 277963604,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206760
    },
    {
        "content": "<p>...oh man.</p>",
        "id": 277963607,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206763
    },
    {
        "content": "<p>on 80286 with segmented memory, you can't convert a pointer to an address...like paging on modern cpus but we agree to conveniently ignore that...</p>",
        "id": 277963617,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649206783
    },
    {
        "content": "<p>That means in C++ you can have <code>ptr1 == ptr2</code> return true but <code>ptr1 &lt;= ptr2</code> can return false.</p>",
        "id": 277963628,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206800
    },
    {
        "content": "<p>innit</p>",
        "id": 277963695,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206811
    },
    {
        "content": "<p>or <code>ptr1 == prt2</code> returns true but <code>ptr1 &lt; ptr2</code> is also true.</p>",
        "id": 277963743,
        "sender_full_name": "Jubilee",
        "timestamp": 1649206846
    },
    {
        "content": "<blockquote>\n<p>or <code>ptr1 == prt2</code> returns true but <code>ptr1 &lt; ptr2</code> is also true.</p>\n</blockquote>\n<p>of course it does, cuz <code>ptr1</code> and <code>prt2</code> are at <code>0x1234</code> but <code>ptr2</code> is at <code>0x1248</code> :P</p>",
        "id": 277963908,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649207014
    },
    {
        "content": "<p>standards are a pain when they're that ill-specified.</p>",
        "id": 277964023,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649207118
    },
    {
        "content": "<p>And that's why <code>std::less</code> is specialized for pointers, not the same as <code>&lt;</code>.</p>",
        "id": 277993254,
        "sender_full_name": "scottmcm",
        "timestamp": 1649235030
    },
    {
        "content": "<p>though every compiler i've seen just implements <code>std::less</code> for pointers using <code>&lt;</code>, which the compiler just defines to compare addresses numerically.</p>",
        "id": 278041155,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649258954
    },
    {
        "content": "<p>(though iirc that was just gcc and clang with libstdc++ and libc++)</p>",
        "id": 278041457,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649259032
    }
]