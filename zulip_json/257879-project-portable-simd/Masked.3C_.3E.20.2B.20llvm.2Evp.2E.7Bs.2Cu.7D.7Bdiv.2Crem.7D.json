[
    {
        "content": "<p>So, in Rust, we panic when we divide by zero. But in SIMD, we would like to <strong>not</strong> panic. Panics are hard to optimize out. Panics are <strong>a branch</strong>. So we would <strong>like</strong> to actually just <strong>not</strong> touch zero lanes at all. But why do we panic? </p>\n<p>Well, the result is undefined, right? At least for integer division, there's no commonly accepted answer, and so there are multiple machine implementations as well.  So yes, in LLVM, division by zero taints the result: it produces <code>undef</code>, the \"value that can be any value\". In fact, it emits <code>undef</code> for the <strong>entire vector</strong>. This means we have to know what we are giving to LLVM when we divide, or else the rest of Rust gets miscompiled because of this error. We don't get to avoid touching the divided-by-zero lanes.</p>\n<p>This has a very unfortunate effect. It means that on operations we would like to make Go Fast, we actually have to, at every step, perform a Rust-level <code>Mask::select</code> or other operation in order to adjust the vectors into something that would work, or we have to panic.<br>\n...Right?</p>\n<p>...Well, I have done some research and thought, and I believe we may in fact choose to not touch them at all. We can use the <code>llvm.vp.{s,u}{div,rem}</code> intrinsics, which predicate a vector operation. These operate differently than applying LLVM instructions like <code>sdiv</code> to a vector. They simply accept a mask and then make the lanes disabled by the mask <code>undef</code> in the result. This means that as long as we keep the mask paired with the vector (so we know what lanes we can look at later), we can avoid selecting more than once, at the end of a computation. So, we pass the mask around in a struct paired with the vector. Enter <code>Masked&lt;_&gt;</code>.</p>\n<p>Seems easy enough, in theory. I wanted to ask to see if anyone can spot any obvious flaws in my plan. I also know that Jacob in particular is more familiar with the <code>vp</code> intrinsics than I am.</p>",
        "id": 270603700,
        "sender_full_name": "Jubilee",
        "timestamp": 1643916342
    },
    {
        "content": "<p>My recollection is that division by zero is more weird than other things because it's a hard abort in the asm semantics, not something that \"just\" returns an unusable or unknown value.  Which is why LLVM still has <code>udiv</code> by zero as immediate UB, not just the <code>poison</code> that LLVM has been moving most of its operations to produce when called improperly.</p>\n<p>Note that exposing an <code>undef</code> to safe code is unsound, so what's your plan to avoid that?</p>",
        "id": 270604577,
        "sender_full_name": "scottmcm",
        "timestamp": 1643916705
    },
    {
        "content": "<p>exposing <code>undef</code> is sound if you wrap it in <code>MaybeUninit</code>...that said, i think the idea is that <code>Masked</code> is kinda like <code>Simd&lt;Option&lt;T&gt;, N&gt;</code>, implemented as <code>struct Masked&lt;T, const N: usize&gt;{value: Simd&lt;MaybeUninit&lt;T&gt;, N&gt;, mask: Mask&lt;&lt;T as SimdElement&gt;::Mask, N&gt;,}</code></p>",
        "id": 270605406,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643917045
    },
    {
        "content": "<p>Ah, I see; I'd missed the detail of <code>Masked</code> to keep people from getting the <code>undef</code> in an <code>f32</code>.</p>",
        "id": 270605614,
        "sender_full_name": "scottmcm",
        "timestamp": 1643917122
    },
    {
        "content": "<p>An alternative would be something like <code>fn div_or</code> on integers (since it doesn't apply to floats)</p>",
        "id": 270605824,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1643917219
    },
    {
        "content": "<p>That still implies potentially gratuitous numbers of selects.</p>",
        "id": 270605866,
        "sender_full_name": "Jubilee",
        "timestamp": 1643917236
    },
    {
        "content": "<p><em>inserts a newline or two to give <code>Masked</code> proper attention</em></p>",
        "id": 270605936,
        "sender_full_name": "Jubilee",
        "timestamp": 1643917273
    },
    {
        "content": "<p>Silly question: how much support for big vectorized integer divisions do chips really have?  I always think of <code>udiv</code> as super slow already, and thus wonder if there's really all that replicated enough for <code>/ Simd&lt;u64, 8&gt;</code> to even be useful...</p>",
        "id": 270606119,
        "sender_full_name": "scottmcm",
        "timestamp": 1643917348
    },
    {
        "content": "<p>we'd still need logic in <code>Masked::div</code> to check unmasked lanes for zero/overflow and panic or mask them out, maybe we should only provide <code>checked_div</code></p>",
        "id": 270606157,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643917364
    },
    {
        "content": "<p>There isn't really any support, we only provide it for consistency, because eventually someone will want to divide</p>",
        "id": 270606230,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1643917395
    },
    {
        "content": "<p>the cpu Libre-SOC is working on will likely support vectorized int division</p>",
        "id": 270606262,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643917410
    },
    {
        "content": "<p>So there will be 1 CPU with it :)</p>",
        "id": 270606306,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1643917438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Masked.3C_.3E.20.2B.20llvm.2Evp.2E.7Bs.2Cu.7D.7Bdiv.2Crem.7D/near/270604577\">said</a>:</p>\n<blockquote>\n<p>My recollection is that division by zero is more weird than other things because it's a hard abort in the asm semantics, not something that \"just\" returns an unusable or unknown value.  Which is why LLVM still has <code>udiv</code> by zero as immediate UB, not just the <code>poison</code> that LLVM has been moving most of its operations to produce when called improperly.</p>\n<p>Note that exposing an <code>undef</code> to safe code is unsound, so what's your plan to avoid that?</p>\n</blockquote>\n<p>Well, actually: Arm doesn't trap at all on <code>sdiv</code>.</p>",
        "id": 270606419,
        "sender_full_name": "Jubilee",
        "timestamp": 1643917474
    },
    {
        "content": "<p>Also you're right, it is immediate UB lol WHOOPS, my bad.</p>",
        "id": 270606568,
        "sender_full_name": "Jubilee",
        "timestamp": 1643917530
    },
    {
        "content": "<p>risc-v and powerpc don't trap either, risc-v provides a specificly defined result, powerpc just has architecturally undefined results</p>",
        "id": 270606685,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643917568
    },
    {
        "content": "<p>Yeah, what I want is specifically to allow a design which allows the compiler to lower this to scalar looping a <strong>well-defined div instruction</strong>.</p>",
        "id": 270606766,
        "sender_full_name": "Jubilee",
        "timestamp": 1643917610
    },
    {
        "content": "<p>Because we promise not to read any of the naughty lanes that could be whatever.</p>",
        "id": 270606829,
        "sender_full_name": "Jubilee",
        "timestamp": 1643917639
    },
    {
        "content": "<p>Libre-SOC's cpu basically needs fast fp div, and the fp div hw can also do int div (and fp sqrt)</p>",
        "id": 270606896,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643917667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Masked.3C_.3E.20.2B.20llvm.2Evp.2E.7Bs.2Cu.7D.7Bdiv.2Crem.7D/near/270606119\">said</a>:</p>\n<blockquote>\n<p>Silly question: how much support for big vectorized integer divisions do chips really have?  I always think of <code>udiv</code> as super slow already, and thus wonder if there's really all that replicated enough for <code>/ Simd&lt;u64, 8&gt;</code> to even be useful...</p>\n</blockquote>\n<p>Also I think that x86 actually does have weird fixpoint SIMD div instructions on some instruction sets???</p>",
        "id": 270607068,
        "sender_full_name": "Jubilee",
        "timestamp": 1643917727
    },
    {
        "content": "<p>But yeah, I agree this may not actually prove that useful, but I believe that it's worth a shot. We'd basically be looking at offering an improvement to <code>i32x4.div(i32x4)</code>, and mostly on Arm, PowerPC, and RISCV, by letting the compiler simply lower to the scalar <code>sdiv</code>. Also, I think this kind of infrastructure may allow us to improve our NaN handling down the line, potentially, when paired with proposed constructs like <code>NonNan</code>.</p>",
        "id": 270608363,
        "sender_full_name": "Jubilee",
        "timestamp": 1643918239
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CheckedDiv</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Masked</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">checked_div</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">lane_eq_or</span><span class=\"p\">(</span><span class=\"n\">Simd</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">ZERO</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">.</span><span class=\"n\">mask</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">SIGNED</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">mask</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">.</span><span class=\"n\">lane_eq_or</span><span class=\"p\">(</span><span class=\"n\">Simd</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">MIN</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">lane_eq_or</span><span class=\"p\">(</span><span class=\"n\">Simd</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">T</span>::<span class=\"n\">NEG_ONE</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Masked</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">simd_vp_div</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 270609542,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643918708
    },
    {
        "content": "<p>even on arm, powerpc, and risc-v, div-by-zero may be very slow, so compilers may want to mask anyway, or just replace the divisor by <code>1</code> in masked out lanes</p>",
        "id": 270610238,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643919023
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 270610258,
        "sender_full_name": "Jubilee",
        "timestamp": 1643919034
    },
    {
        "content": "<p>but that should be left to llvm imho, rustc should just emit <code>llvm.vp.udiv</code></p>",
        "id": 270610382,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643919095
    },
    {
        "content": "<p>And the mask is right there in the <code>llvm.vp.{s,u}div</code> intrinsic if they want to do that.</p>",
        "id": 270610399,
        "sender_full_name": "Jubilee",
        "timestamp": 1643919100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Masked.3C_.3E.20.2B.20llvm.2Evp.2E.7Bs.2Cu.7D.7Bdiv.2Crem.7D/near/270606119\">said</a>:</p>\n<blockquote>\n<p>Silly question: how much support for big vectorized integer divisions do chips really have?  I always think of <code>udiv</code> as super slow already, and thus wonder if there's really all that replicated enough for <code>/ Simd&lt;u64, 8&gt;</code> to even be useful...</p>\n</blockquote>\n<p>Also also...<br>\nGenerally, it is the <strong>compilers</strong> that foot the \"fast div implementation\" side of things, because they have more knowledge of the surrounding context. So I believe this would make it easier to apply the common \"reciprocal division\" strategies on the compiler end, which use multiplication, or even a \"cast to doubles, fdiv, truncate to to int\" approach for smaller ints.</p>",
        "id": 270613666,
        "sender_full_name": "Jubilee",
        "timestamp": 1643920506
    },
    {
        "content": "<p>RISC-V V supports vector division: <a href=\"https://llvm.godbolt.org/z/YGz4Gn7Yj\">https://llvm.godbolt.org/z/YGz4Gn7Yj</a></p>",
        "id": 270615065,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643921156
    },
    {
        "content": "<p>so does Arm SVE: <a href=\"https://llvm.godbolt.org/z/Wc7f7qM7v\">https://llvm.godbolt.org/z/Wc7f7qM7v</a></p>",
        "id": 270617094,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643922159
    },
    {
        "content": "<p>AH, so they got it by then.</p>",
        "id": 270617954,
        "sender_full_name": "Jubilee",
        "timestamp": 1643922509
    },
    {
        "content": "<p>Hm, it seems LLVM is not terribly clever about division, alas: <a href=\"https://llvm.godbolt.org/z/3nrbejeMc\">https://llvm.godbolt.org/z/3nrbejeMc</a></p>",
        "id": 270633156,
        "sender_full_name": "Jubilee",
        "timestamp": 1643929939
    },
    {
        "content": "<p>how bad is does codegen get for something for testing if any members are 0, and if so doing a unlikely-hinted branching with a call to a inline(never) function with the panic -- i feel like that shouldn't be so bad...</p>",
        "id": 270633959,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643930367
    },
    {
        "content": "<p>If the issue is llvm spilling all the simd regs because it gets spooked by the call, in theory coldcc is supposed to solve that (but IDT we have a way to use it easily)</p>",
        "id": 270633984,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643930380
    },
    {
        "content": "<p>This would probably mean we have worse information about the actual panic source when backtraces are off. that's unfortunate, but might be worth it if avoids bad codegen for simd. </p>\n<p>Like, we made the tradeoff at some point that <code>unwrap()</code> having good error reporting is more important than it having good codegen, and so the compiler passes the caller's location info unto the unwrap, which makes the code somewhat worse in the call site. I think this was the right call there, but possibly the calculus is not the same for simd, which is entirely about performance.</p>",
        "id": 270634472,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643930641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Masked.3C_.3E.20.2B.20llvm.2Evp.2E.7Bs.2Cu.7D.7Bdiv.2Crem.7D/near/270633156\">said</a>:</p>\n<blockquote>\n<p>Hm, it seems LLVM is not terribly clever about division, alas: <a href=\"https://llvm.godbolt.org/z/3nrbejeMc\">https://llvm.godbolt.org/z/3nrbejeMc</a></p>\n</blockquote>\n<p>on the upside, there's no huge pessimization either (<strong>relatively</strong> speaking... the codegen is sufficiently bad it does not get enormously worse), so the question starts to be how it looks like when embedded in Rust's semantics.</p>",
        "id": 270634520,
        "sender_full_name": "Jubilee",
        "timestamp": 1643930646
    },
    {
        "content": "<p>doesn't marking something <code>#[cold]</code> change the abi to coldcc?</p>",
        "id": 270634536,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643930652
    },
    {
        "content": "<p>I don't think it does</p>",
        "id": 270634590,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1643930681
    },
    {
        "content": "<p>maybe it should...</p>",
        "id": 270634615,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643930697
    },
    {
        "content": "<p>I think it's equivalent to the unlikely intrinsic?</p>",
        "id": 270634616,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1643930698
    },
    {
        "content": "<p>no, it actually still uses fastcc</p>",
        "id": 270634618,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643930699
    },
    {
        "content": "<p>coldcc is really aggressively cold. i could see it being used for cold+noreturn</p>",
        "id": 270634649,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643930718
    },
    {
        "content": "<p>but people use cold for realloc branches in vectors and such</p>",
        "id": 270634703,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643930750
    },
    {
        "content": "<p>that sadi, putting fastcc on #[cold] functions is goofy and honestly bad</p>",
        "id": 270634779,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643930773
    },
    {
        "content": "<p>Oh, I mislabeled some of my own functions, heh.</p>",
        "id": 270634903,
        "sender_full_name": "Jubilee",
        "timestamp": 1643930841
    },
    {
        "content": "<p>well, panic at least should be changed to coldcc</p>",
        "id": 270634925,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643930853
    },
    {
        "content": "<p><a href=\"https://llvm.godbolt.org/z/4eo8jG733\">https://llvm.godbolt.org/z/4eo8jG733</a><br>\nAh, I think that aligns all the function names.</p>",
        "id": 270635240,
        "sender_full_name": "Jubilee",
        "timestamp": 1643931019
    },
    {
        "content": "<p>i did experimentation at one point on std::vec::Vec, and preservemostcc was really good for the cold functions there (concretely, it helped avoid that thing where you can look at a x86_64 asm and tell its rust by the fact that it pushes half a dozen registers at the start). tragically, its not stable.</p>",
        "id": 270635265,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643931035
    },
    {
        "content": "<p>that said adding extern \"C\" actually had a similar benefit, but not as much -- i think \"use fastcc on literally all functions\" is probably not the ideal way to apply calling conventions.</p>",
        "id": 270635307,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643931060
    },
    {
        "content": "<p>i meant to write this up and file an issue at one point but it felt pretty likely to just sink into rust-lang/rust/issues without ever getting a comment so i just made a mental note of it</p>",
        "id": 270635368,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1643931114
    },
    {
        "content": "<p>well, i've wanted to create a better abi that lets you return more than 2 <code>i64</code>s in registers...you should be able to return just as much stuff as will fit in call arguments</p>",
        "id": 270635520,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643931222
    },
    {
        "content": "<p>(thoroughly off topic)</p>",
        "id": 270635558,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1643931240
    },
    {
        "content": "<p>hm.</p>",
        "id": 270644854,
        "sender_full_name": "Jubilee",
        "timestamp": 1643931887
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nv\">%neg1</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">bitcast</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"m\">-1</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">%pos1</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">mul</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%neg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%neg1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">%is_neg1</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%neg1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">%is_min</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">eq</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"m\">-128</span><span class=\"p\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">%overflows</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%is_neg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%is_min</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nv\">%divisor</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%overflows</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%pos1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">16</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%b</span><span class=\"w\"></span>\n</code></pre></div>\n<p>today I found out I will do <strong>almost</strong> anything to avoid having to write a literal vector for LLVM IR.</p>",
        "id": 270650971,
        "sender_full_name": "Jubilee",
        "timestamp": 1643935553
    },
    {
        "content": "<p>Well, first I finished making <code>Simd&lt;T, N&gt;</code> into <code>Simd&lt;Wrapping&lt;T&gt;, N&gt;</code>: <a href=\"https://github.com/rust-lang/portable-simd/pull/243\">https://github.com/rust-lang/portable-simd/pull/243</a></p>",
        "id": 271200871,
        "sender_full_name": "Jubilee",
        "timestamp": 1644359313
    }
]