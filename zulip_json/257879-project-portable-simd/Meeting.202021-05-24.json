[
    {
        "content": "<p>If you are meeting tonight, I would like to talk a little about function approximation.</p>",
        "id": 240097721,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621883583
    },
    {
        "content": "<p>meeting is in an hour and a half, it's on the libs calendar: <a href=\"https://calendar.google.com/calendar/u/0/embed?src=9kuu8evq4eh6uacm262k0phri8@group.calendar.google.com\">https://calendar.google.com/calendar/u/0/embed?src=9kuu8evq4eh6uacm262k0phri8@group.calendar.google.com</a></p>",
        "id": 240099235,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621884290
    },
    {
        "content": "<p>it's just held in zulip</p>",
        "id": 240099248,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621884299
    },
    {
        "content": "<p>I can't control that definition or I would make it biweekly like it is supposed to be. ^^;</p>",
        "id": 240100053,
        "sender_full_name": "Jubilee",
        "timestamp": 1621884644
    },
    {
        "content": "<p>oh, til</p>",
        "id": 240100529,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621884830
    },
    {
        "content": "<p>there is one this week tho right?</p>",
        "id": 240100592,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621884851
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 240100780,
        "sender_full_name": "Jubilee",
        "timestamp": 1621884942
    },
    {
        "content": "<p>can't you just ask whoever is part of the libs team to edit for you?</p>",
        "id": 240101239,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621885161
    },
    {
        "content": "<p>Even better, I can obtain the power.<br>\nFixed.</p>",
        "id": 240101359,
        "sender_full_name": "Jubilee",
        "timestamp": 1621885211
    },
    {
        "content": "<p>Hello, there we go.</p>",
        "id": 240111495,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890136
    },
    {
        "content": "<p>hi, all</p>",
        "id": 240111531,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621890159
    },
    {
        "content": "<p>Meeting time, how is everyone today? I have not actually gotten the hackmd up, because I have had a very strange day. <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 240111569,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890176
    },
    {
        "content": "<p>My first time, so assume I know nothing :)</p>",
        "id": 240111578,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621890181
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 240111691,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621890219
    },
    {
        "content": "<p>I thought that I should contribute something to the SIMD side of things as it is my sepciality.</p>",
        "id": 240112046,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621890418
    },
    {
        "content": "<p>or speciality as the case may be.</p>",
        "id": 240112081,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621890437
    },
    {
        "content": "<p>:)</p>",
        "id": 240112218,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621890509
    },
    {
        "content": "<p>Glad to have you here! ^^<br>\nHere we go. <a href=\"https://hackmd.io/tRDC_oOBRCeZrvK7ZMuXNQ\">https://hackmd.io/tRDC_oOBRCeZrvK7ZMuXNQ</a></p>",
        "id": 240112230,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890513
    },
    {
        "content": "<blockquote>\n<ol start=\"0\">\n<li>are we ready to open a PR to land on nightly?</li>\n</ol>\n</blockquote>\n<p>No. Next question.</p>",
        "id": 240112244,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890524
    },
    {
        "content": "<blockquote>\n<ol>\n<li>what did wg-llvm say?</li>\n</ol>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> ?</p>",
        "id": 240112285,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890539
    },
    {
        "content": "<p>basically no one noticed till an hour or two ago, all they said so far is that they don't want stuff added to the llvm/rust bindings, it should go upstream</p>",
        "id": 240112496,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621890667
    },
    {
        "content": "<p>Always a challenge to keep patches in forks.</p>",
        "id": 240112750,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621890794
    },
    {
        "content": "<p>though <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> did mention he tested inlining lib calls and that works</p>",
        "id": 240112777,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621890801
    },
    {
        "content": "<p>alright, wg-llvm says it is less maintainable to put that in our fork.</p>",
        "id": 240112888,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890829
    },
    {
        "content": "<p>I am working on 8. The trig functions. I have two very good candidates.</p>",
        "id": 240113079,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621890919
    },
    {
        "content": "<blockquote>\n<ol start=\"3\">\n<li>we need to draft the RFC?</li>\n</ol>\n</blockquote>\n<p>I have been collecting draft notes <a href=\"https://hackmd.io/u-XfyDs7QDm4H4zjFFXgAg\">here</a> they should probably go in the project group repo and we should probably start using that more.</p>",
        "id": 240113084,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890920
    },
    {
        "content": "<blockquote>\n<ol start=\"4\">\n<li>schedule vector-of-pointers for review someday, somewhere <span aria-label=\"rainbow\" class=\"emoji emoji-1f308\" role=\"img\" title=\"rainbow\">:rainbow:</span> </li>\n</ol>\n</blockquote>\n<p>I think we can handle this async, unless there's objections?</p>",
        "id": 240113130,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890953
    },
    {
        "content": "<p>so, I guess the next step is wait to see if anyone else in wg-llvm has stuff to say, otherwise start a thread on llvm's mailing list?</p>",
        "id": 240113151,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621890963
    },
    {
        "content": "<p>Yeah I guess that isn't really a resolution. Hm.</p>",
        "id": 240113222,
        "sender_full_name": "Jubilee",
        "timestamp": 1621890988
    },
    {
        "content": "<ol start=\"4\">\n<li>async sounds good!</li>\n</ol>",
        "id": 240113227,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621890990
    },
    {
        "content": "<p>Yeah, next steps are asking upstream (LLVM) how it feels about this.</p>",
        "id": 240113244,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891003
    },
    {
        "content": "<p>What changes are you planning to push to upstream LLVM?</p>",
        "id": 240113295,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891034
    },
    {
        "content": "<p>do you want to followup on their mailing list, Jacob? I assume <code>llvm-devel</code>?</p>",
        "id": 240113322,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891062
    },
    {
        "content": "<p>sure!</p>",
        "id": 240113405,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412320\">Andy Thomson</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240113295\">said</a>:</p>\n<blockquote>\n<p>What changes are you planning to push to upstream LLVM?</p>\n</blockquote>\n<p>We would like to extend the ability of LLVM to be able to handle more complex libcall legalizations for SIMD in the form of a more expansive <code>libmvec</code>.</p>",
        "id": 240113603,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891207
    },
    {
        "content": "<p>the stuff we wanted to upstream is the code llvm uses to convert its builtin functions to calls to a vector math library -- adding rust's vector math library to the list of libraries it supports</p>",
        "id": 240113692,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891272
    },
    {
        "content": "<p>It is essential to inline libm functions or most of the benefits will be lost.</p>",
        "id": 240113742,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891290
    },
    {
        "content": "<p>explained somewhat here: <a href=\"https://github.com/rust-lang/stdsimd/issues/109\">https://github.com/rust-lang/stdsimd/issues/109</a></p>",
        "id": 240113743,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891291
    },
    {
        "content": "<p>yup, llvm will inline them, that's what <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> tested as mentioned earlier</p>",
        "id": 240113843,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891344
    },
    {
        "content": "<p>Short functions are easy to inline. The IA64 ABI is a poor choice for SIMD calls.</p>",
        "id": 240113927,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891410
    },
    {
        "content": "<p>IA-64 what</p>",
        "id": 240113948,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891435
    },
    {
        "content": "<p>don't you mean the x86-64 GNU/Linux ABI?</p>",
        "id": 240114046,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891488
    },
    {
        "content": "<p>LLVM uses the IA64 ABI (originally the Itanium) in most cases. It has a calling convention for SIMD.</p>",
        "id": 240114050,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891489
    },
    {
        "content": "<p>actually correctly called x86_64 SystemV ABI</p>",
        "id": 240114141,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891546
    },
    {
        "content": "<p>well, I don't think anyone's running Rust code on the Itanic, we're mostly concerned about the AMD64 System V ABI and the MSVC ABI. ^^;</p>",
        "id": 240114303,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891628
    },
    {
        "content": "<p>iirc the Itanium ABI has to do with the C++ name mangling scheme, not as much the SIMD argument passing protocol</p>",
        "id": 240114346,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891660
    },
    {
        "content": "<p>The ABI derived from the Itanium, but is now the convention for x86_64.</p>",
        "id": 240114353,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891664
    },
    {
        "content": "<p>That was a <em>long</em> time ago.</p>",
        "id": 240114373,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891679
    },
    {
        "content": "<p>There is in fact a separately-specified AMD64 standard.</p>",
        "id": 240114428,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891692
    },
    {
        "content": "<p>well, in any case, we expect stuff to be inlined. Rustc doesn't currently even support passing SIMD values except through memory</p>",
        "id": 240114490,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891734
    },
    {
        "content": "<p>I'll check my compiler history. No worries. Just avoid passing SIMD registers over function boundaries.</p>",
        "id": 240114498,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412320\">Andy Thomson</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240114498\">said</a>:</p>\n<blockquote>\n<p>I'll check my compiler history. No worries. Just avoid passing SIMD registers over function boundaries.</p>\n</blockquote>\n<p>Rust exerts its own influence over the calling convention that Rust functions are called with, this is currently the source of some pessimizations, it may in the future be the source of some optimizations, passing data over function boundaries this way is not a concern per se.</p>",
        "id": 240114647,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891816
    },
    {
        "content": "<p>rustc chose that precisely because of the ABI issues with enabling AVX changing how types are passed (and other related problems)</p>",
        "id": 240114656,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891820
    },
    {
        "content": "<p>also, I'd expect that llvm is perfectly capable of calling lib functions with a different declared ABI than C</p>",
        "id": 240114752,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891874
    },
    {
        "content": "<p>so I assure you, we are aware of what we are doing, and are aware that it is quite complicated. ^^;</p>",
        "id": 240114793,
        "sender_full_name": "Jubilee",
        "timestamp": 1621891911
    },
    {
        "content": "<p>if not, adding that support shouldn't be too hard</p>",
        "id": 240114808,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891920
    },
    {
        "content": "<p>It has a wide set of ABIs to use.</p>",
        "id": 240114813,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891922
    },
    {
        "content": "<p>We did a lot of work on this at Sony.</p>",
        "id": 240114891,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621891960
    },
    {
        "content": "<p>for a different project, I was using the tailcc ABI just recently</p>",
        "id": 240114906,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621891969
    },
    {
        "content": "<p>Cool</p>",
        "id": 240114995,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892000
    },
    {
        "content": "<p>cranelift is the next item?</p>",
        "id": 240115430,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892209
    },
    {
        "content": "<p>Can you tell me a bit about this?</p>",
        "id": 240115466,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892226
    },
    {
        "content": "<p>The current situation, <span class=\"user-mention\" data-user-id=\"412320\">@Andy Thomson</span>, is that for some libcall legalized items, the data of a vector is torn apart and <strong>individually passed, as scalar calls, for each item</strong>.</p>",
        "id": 240115520,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892254
    },
    {
        "content": "<p>The System V AMD64 ABI permits the use of an actual SIMD register in a function call.</p>",
        "id": 240115621,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892291
    },
    {
        "content": "<p>As does, to some extent, the MSVC ABI, the other one we care about a lot.</p>",
        "id": 240115636,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892299
    },
    {
        "content": "<p>(for x86_64 at least)</p>",
        "id": 240115673,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892320
    },
    {
        "content": "<p>Ouch! That is not ideal. Worse than memory.</p>",
        "id": 240115679,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892323
    },
    {
        "content": "<p>indeed.</p>",
        "id": 240115686,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892324
    },
    {
        "content": "<p>There is absolutely no way that, even without inlining, that our plans cannot improve on that.</p>",
        "id": 240115704,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892336
    },
    {
        "content": "<p>plus, writing a vector-math library means we can use sin in core!</p>",
        "id": 240115769,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892376
    },
    {
        "content": "<p>anyways!</p>",
        "id": 240115778,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892384
    },
    {
        "content": "<p>Cranelift:<br>\nCranelift is an alternate backend to LLVM.</p>",
        "id": 240115894,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892440
    },
    {
        "content": "<p>than llvm. cranelift is not part of llvm</p>",
        "id": 240115937,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892472
    },
    {
        "content": "<p>I've just been reading.</p>",
        "id": 240115938,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892473
    },
    {
        "content": "<p>alternate to LLVM from Rust's perspective? ^^;</p>",
        "id": 240115950,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892487
    },
    {
        "content": "<p>:)</p>",
        "id": 240115960,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892495
    },
    {
        "content": "<p>It is faster at generating code because it is primarily designed as a JIT backend and it does not do many of the things that LLVM does, starting with \"caring about things like types that are not raw bitwidths\".</p>",
        "id": 240115986,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892517
    },
    {
        "content": "<p>If you avoid all the Dwarf generation, you can save a lot of compile time.</p>",
        "id": 240116096,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892565
    },
    {
        "content": "<p>also, cranelift is more optimized for speed of compiling, whereas llvm is very much optimized for speed of resulting code at the expense of compile-time</p>",
        "id": 240116159,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892600
    },
    {
        "content": "<p>Cranelift still can and does emit DWARF, it's primarily meant for faster debug builds in the Rust context. The thing that is really saving time is that Cranelift does as much as possible in-place.</p>",
        "id": 240116173,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892610
    },
    {
        "content": "<p>I always had beef with  LLVM's steadfast single threadedness.</p>",
        "id": 240116223,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892643
    },
    {
        "content": "<p>llvm is built on linked-lists &amp; graphs which are known to be awful for cache performance</p>",
        "id": 240116285,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892666
    },
    {
        "content": "<p>Very rapid streaming lowering, not as many transformations that alter _size_ of the data, so it doesn't have to move those around. Just one big array of instructions, more or less.</p>",
        "id": 240116304,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892679
    },
    {
        "content": "<p>anyways we haven't really been testing this so we don't know how broken the lib is on Cranelift. Slight problem if we're going to share space on nightly with Cranelift.</p>",
        "id": 240116415,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892749
    },
    {
        "content": "<p>LLVM's many IRs is a big source of makework and lack of good codegen.</p>",
        "id": 240116431,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892758
    },
    {
        "content": "<p>at least 5 for the average debug build?</p>",
        "id": 240116511,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892786
    },
    {
        "content": "<p>I think someone just needs to sit down and harass bjorn3 a lot.<br>\nI've already poked around at Cranelift so maybe I should do it? ^^;</p>",
        "id": 240116611,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892831
    },
    {
        "content": "<p><a href=\"https://llvm.org/devmtg/2014-04/PDFs/Talks/Tenseconds.pdf\">https://llvm.org/devmtg/2014-04/PDFs/Talks/Tenseconds.pdf</a></p>",
        "id": 240116648,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892840
    },
    {
        "content": "<p>llvm ir -&gt; selection dag -&gt; mir -&gt; assembly -&gt; machine code?</p>",
        "id": 240116668,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621892848
    },
    {
        "content": "<p>likewise someone needs to add the stability attributes.</p>",
        "id": 240116716,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892875
    },
    {
        "content": "<p>Very interesting to see. I have some reading to do.</p>",
        "id": 240116891,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621892967
    },
    {
        "content": "<p>Ugh actually I am going to itemize the cranelift review and put up a request, I should probably get on top of the stability attributes adding and such since I've done more of that and it will be less overhead.</p>",
        "id": 240116894,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892972
    },
    {
        "content": "<p>Here's <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift\">https://github.com/bytecodealliance/wasmtime/tree/main/cranelift</a></p>",
        "id": 240116916,
        "sender_full_name": "Jubilee",
        "timestamp": 1621892989
    },
    {
        "content": "<p>and <code>cg_clif</code> support for SIMD is tracked here: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/171\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/171</a></p>",
        "id": 240116991,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893020
    },
    {
        "content": "<p>do note that cranelift is currently transitioning from their old x86 backend to their new backend</p>",
        "id": 240117037,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893051
    },
    {
        "content": "<p>Did you resolve the LLVM interpretation of min and max. It currently uses a two-instruction sequence?</p>",
        "id": 240117038,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893054
    },
    {
        "content": "<p>well, what can I say? NaN correctness!</p>",
        "id": 240117093,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893092
    },
    {
        "content": "<p>Nan correctness should be anything + NaN = NaN!</p>",
        "id": 240117123,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893116
    },
    {
        "content": "<p>But when we know we have no NaNs we can do this faster.</p>",
        "id": 240117219,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893157
    },
    {
        "content": "<p>x86 min/max instructions always return their second(?) arg if either input is a NaN, which doesn't match any of ieee 754's 3 different min/max definitions</p>",
        "id": 240117255,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893184
    },
    {
        "content": "<p>Codegen is only in scope insofar as it matters to our library's implementation working at all, honestly. ^^;</p>",
        "id": 240117289,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893206
    },
    {
        "content": "<p>the aggro scalarization just was literally bad enough to be worth fixing since we wanted, ideally, to impl this library as part of <code>core</code>, not <code>std</code></p>",
        "id": 240117372,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893246
    },
    {
        "content": "<p>but libm is a <code>std</code> thing.</p>",
        "id": 240117398,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893257
    },
    {
        "content": "<p>I think the motivation of this strange NaN behaviour is to allow a min/max reduction with the first values as a NaN.</p>",
        "id": 240117404,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893261
    },
    {
        "content": "<p>( it's complicated. )</p>",
        "id": 240117405,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893261
    },
    {
        "content": "<p>re: the PR 120, uh...</p>",
        "id": 240117431,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893278
    },
    {
        "content": "<p>I'd expect if you told llvm it doesn't need to care about signed zeros or nans then it'll use one instruction, but those are fastmath flags -- mostly out of scope for core::simd</p>",
        "id": 240117454,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893291
    },
    {
        "content": "<p>Alright.</p>",
        "id": 240117668,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893399
    },
    {
        "content": "<p>Finally. ^^; Trig stuff.</p>",
        "id": 240117684,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893407
    },
    {
        "content": "<p>I'd guess the x86 min/max semantics were chosen for people who wrote C min/max macros like <code>a &lt; b ? a : b</code></p>",
        "id": 240117707,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893425
    },
    {
        "content": "<p>what are you working on exactly? There's been some ongoing discussion.</p>",
        "id": 240117717,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893432
    },
    {
        "content": "<p>I'm working on a computer algebra library using <code>syn</code>. As a byproduct of this, I've generated some candidates for sin and cos using Newtonian polynomials.</p>",
        "id": 240117894,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893551
    },
    {
        "content": "<p><em>actually reviews PR 121</em></p>",
        "id": 240117917,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893569
    },
    {
        "content": "<p>Welp! I guess it works. ^^;</p>",
        "id": 240117934,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893580
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn sin(x: f32) -&gt; f32 {\n    let x = x * (1.0 / (std::f32::consts::PI * 2.0));\n    let x = x - x.floor() - 0.5;\n    12.268859941019306_f32\n        .mul_add(x * x, -41.216241051002875_f32)\n        .mul_add(x * x, 76.58672703334098_f32)\n        .mul_add(x * x, -81.59746095374902_f32)\n        .mul_add(x * x, 41.34151143437585_f32)\n        .mul_add(x * x, -6.283184525811273_f32)\n        * x\n}\n</code></pre></div>",
        "id": 240118199,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893661
    },
    {
        "content": "<p>For example.</p>",
        "id": 240118222,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893672
    },
    {
        "content": "<p>I see.<br>\nWell, generally we have been trying to match our scalar implementations, and currently <code>sin</code> and <code>cos</code> on f32 and f64 call to libm, iirc.</p>",
        "id": 240118246,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893690
    },
    {
        "content": "<p>So I suppose we have to raise the question of whether we care about that for these.</p>",
        "id": 240118286,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893708
    },
    {
        "content": "<p>I have working sin_cos_pi functions implemented in vector-math, I've been inspired by <span class=\"user-mention\" data-user-id=\"412320\">@Andy Thomson</span> to switch those to sin(2<em>pi</em>x), that way the multiplication by 0.5 needed for sin_pi and by 1/(2*pi) for sin allows them both to use sin_cos_2_pi as their implementation</p>",
        "id": 240118360,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893734
    },
    {
        "content": "<p>I'm happy for you to do anything you like with the code.</p>",
        "id": 240118610,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893853
    },
    {
        "content": "<p>Andy, you should use roundeven there, it's 1 instruction on most arches and saves the subtraction of 0.5 afterward</p>",
        "id": 240118638,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893878
    },
    {
        "content": "<p>And I know that these functions tend to have varying needs (approximate + fast vs. slow + precise),</p>",
        "id": 240118646,
        "sender_full_name": "Jubilee",
        "timestamp": 1621893884
    },
    {
        "content": "<p>avoiding total loss of precision near zero</p>",
        "id": 240118658,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621893899
    },
    {
        "content": "<p>I did think of that. That is a win.</p>",
        "id": 240118672,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893907
    },
    {
        "content": "<p>If you want precise, use f64 and round down to f32. I think this is what libm does. You loose half your performance, though.</p>",
        "id": 240118760,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893958
    },
    {
        "content": "<p>Most importantly, libm does not inline and hence does not autovectorise or get loop scheduling benefits.</p>",
        "id": 240118844,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621893995
    },
    {
        "content": "<p>maybe more than half since there's all the lane-crossing conversions</p>",
        "id": 240118865,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894009
    },
    {
        "content": "<p>lane-crossing can be expensive on some architectures</p>",
        "id": 240118916,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894056
    },
    {
        "content": "<p>It is an interesting point as to whether anyone wants the extra 1ulp over the slowdown.</p>",
        "id": 240118919,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894057
    },
    {
        "content": "<p>You probably should not be using f32 if you need that extra bit of precision.</p>",
        "id": 240118997,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894097
    },
    {
        "content": "<p>well, the function you gave has waay more than 1ulp error near zero</p>",
        "id": 240119006,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894099
    },
    {
        "content": "<p>But the max error is always &lt; 2^-22</p>",
        "id": 240119042,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894130
    },
    {
        "content": "<p>so \"how many ulps of precision do we care about?\"</p>",
        "id": 240119043,
        "sender_full_name": "Jubilee",
        "timestamp": 1621894130
    },
    {
        "content": "<p>also near +-pi</p>",
        "id": 240119049,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894135
    },
    {
        "content": "<p>It is impossible to get high relative ULP when the values are very small.</p>",
        "id": 240119115,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894168
    },
    {
        "content": "<p>Again the max error is all anyone cares about.</p>",
        "id": 240119146,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894188
    },
    {
        "content": "<p>the sin_cos_pi function i implemented is +-2ulp across all f32 values (tested all 2^32 values). it gives exact results (other than sign of zero) for all inputs where the ideal result is -1, 0, or 1</p>",
        "id": 240119259,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894250
    },
    {
        "content": "<p>It is important for the abs value to be under 1 at max as people foolishly do acos(sin(x)).</p>",
        "id": 240119280,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894268
    },
    {
        "content": "<p>yup, tested that too--passes</p>",
        "id": 240119306,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894290
    },
    {
        "content": "<p>...wait, what definition of max error differs from ulps of precision? ^^;</p>",
        "id": 240119328,
        "sender_full_name": "Jubilee",
        "timestamp": 1621894311
    },
    {
        "content": "<p>It is in all the games textbooks for finding direction. Much better to use atan2.</p>",
        "id": 240119331,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894315
    },
    {
        "content": "<p>ULP is defined as (a.to_bits() - b.to_bits()).abs()</p>",
        "id": 240119414,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> absolute error</p>",
        "id": 240119421,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894360
    },
    {
        "content": "<p>absolute error is how far on the real number line is it off</p>",
        "id": 240119465,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894396
    },
    {
        "content": "<p>relative error is absolute error / magnitude of correct result</p>",
        "id": 240119498,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894425
    },
    {
        "content": "<p>less than 2^-22 or 0.0000001 ish</p>",
        "id": 240119500,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894426
    },
    {
        "content": "<p>ulps is more-or-less scaled relative error</p>",
        "id": 240119530,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894443
    },
    {
        "content": "<p>Now 10^-30 is different from 10^-20 by a massive margin in ULP terms even though the absolute difference is tiny.</p>",
        "id": 240119604,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894485
    },
    {
        "content": "<p>Mmm.</p>",
        "id": 240119700,
        "sender_full_name": "Jubilee",
        "timestamp": 1621894555
    },
    {
        "content": "<p>well, small numbers are important when calculating sinc</p>",
        "id": 240119701,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894555
    },
    {
        "content": "<p>getting sin(1e-20)=0.00000001 gives a huge error for sinc</p>",
        "id": 240119777,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894589
    },
    {
        "content": "<p>sinc is very common in signal processing (audio and otherwise)</p>",
        "id": 240119833,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894631
    },
    {
        "content": "<p>Sinc is ok, especially if you don't multiply by x in the first place. As the last thing we do is multiply by , then dividing by x should give you the sinc fuction perfectly.</p>",
        "id": 240119838,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894635
    },
    {
        "content": "<p>But to be honest, we should provide sinc as its own function and avoid the very very expensive divide.</p>",
        "id": 240119965,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412320\">Andy Thomson</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240117894\">said</a>:</p>\n<blockquote>\n<p>I'm working on a computer algebra library using <code>syn</code>. As a byproduct of this, I've generated some candidates for sin and cos using Newtonian polynomials.</p>\n</blockquote>\n<p>Oh interesting - is this public? Written in Rust?</p>",
        "id": 240119986,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621894730
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn sinc(x: f32) -&gt; f32 {\n    let x = x * (1.0 / (std::f32::consts::PI * 2.0));\n    let x = x - x.floor() - 0.5;\n    12.268859941019306_f32\n        .mul_add(x * x, -41.216241051002875_f32)\n        .mul_add(x * x, 76.58672703334098_f32)\n        .mul_add(x * x, -81.59746095374902_f32)\n        .mul_add(x * x, 41.34151143437585_f32)\n        .mul_add(x * x, -6.283184525811273_f32)\n}\n</code></pre></div>",
        "id": 240120012,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894752
    },
    {
        "content": "<p>I've been using maxima</p>",
        "id": 240120014,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894755
    },
    {
        "content": "<p>It is a curious Frankenstein's monster. I do miss Maple, but I can't afford it.</p>",
        "id": 240120050,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894795
    },
    {
        "content": "<p>I wrote a Computer Algebra System in C++ many years ago</p>",
        "id": 240120115,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894823
    },
    {
        "content": "<p>syn makes it a lot easier. I'm too lazy to write a parser :)</p>",
        "id": 240120158,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894849
    },
    {
        "content": "<p>And for codegen for Rust, you can't beat it.</p>",
        "id": 240120243,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894889
    },
    {
        "content": "<p>I wrote it before I knew how to properly parse stuff, so that was always a little wonky</p>",
        "id": 240120276,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621894915
    },
    {
        "content": "<p>The plan is to make a procedural macro crate that codegens math functions to order.</p>",
        "id": 240120382,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621894974
    },
    {
        "content": "<p>Anyway. We should get on with the agenda.</p>",
        "id": 240120507,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895052
    },
    {
        "content": "<p>what do you do for f64 math fns where f64 is not enough precision?</p>",
        "id": 240120522,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412320\">Andy Thomson</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240118199\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"kt\">f32</span>::<span class=\"n\">consts</span>::<span class=\"n\">PI</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">floor</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mf\">0.5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mf\">12.268859941019306_</span><span class=\"k\">f32</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">41.216241051002875_</span><span class=\"k\">f32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">76.58672703334098_</span><span class=\"k\">f32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">81.59746095374902_</span><span class=\"k\">f32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">41.34151143437585_</span><span class=\"k\">f32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">mul_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">6.283184525811273_</span><span class=\"k\">f32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>hmm, mb dumb question but why <code>x * x</code> here?</p>",
        "id": 240120588,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895105
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn gen_sin() -&gt; proc_macro2::TokenStream {\n    let xmin = -0.5;\n    let xmax = 0.5;\n\n    let approx = expr!((x * 3.1415926535897932384626433 * 2.0).sin() * -1.0)\n        .approx(14, xmin, xmax, name!(x), Parity::Odd)\n        .unwrap()\n        .use_suffix(Some(&quot;f32&quot;.to_string()))\n        .unwrap()\n        .into_inner();\n\n    quote!(\n        fn sin(x: f32) -&gt; f32 {\n            let x = x * (1.0 / (std::f32::consts::PI * 2.0));\n            let x = x - x.floor() - 0.5;\n            #approx\n        }\n    )\n}\n</code></pre></div>",
        "id": 240120591,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895108
    },
    {
        "content": "<p>The x * x is a common subexpression. The compiler trivially aggregates them.</p>",
        "id": 240120730,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895192
    },
    {
        "content": "<p>simd_fsqrt: I'm working on a fall-back implementation in vector-math. I'm trying to make it have correct rounding since most cpus have native correctly-rounded sqrt instructions</p>",
        "id": 240120753,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895211
    },
    {
        "content": "<p>The sin function is odd, so most of the terms are in x^2</p>",
        "id": 240120767,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895220
    },
    {
        "content": "<p>I haven't measured <code>vsqrtps</code>. The newton-raphson steps converge very rapidly.</p>",
        "id": 240120918,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895304
    },
    {
        "content": "<p>in debug mode it actually does the mul every time. ^^;</p>",
        "id": 240120937,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895322
    },
    {
        "content": "<p>newton's method is slow due to all the divisions, I'm using a different method</p>",
        "id": 240120999,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895370
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/XKDBCtIoqp6UqzGlJuFIwQHB/Screenshot_20210524-152823.png\">Screenshot_20210524-152823.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/XKDBCtIoqp6UqzGlJuFIwQHB/Screenshot_20210524-152823.png\" title=\"Screenshot_20210524-152823.png\"><img src=\"/user_uploads/4715/XKDBCtIoqp6UqzGlJuFIwQHB/Screenshot_20210524-152823.png\"></a></div>",
        "id": 240121014,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895390
    },
    {
        "content": "<p>Being a game dev, I don't tend to look to hard at Debug mode :)</p>",
        "id": 240121027,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895395
    },
    {
        "content": "<p>Reciprocal sqrt is very fast. There is also a method where you calculate sqrt(x) and 1/sqrt(x) together.</p>",
        "id": 240121184,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895475
    },
    {
        "content": "<p>yeah, the combined sqrt/rsqrt method is what I'm using</p>",
        "id": 240121222,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895505
    },
    {
        "content": "<p>goldschmidt's method iirc</p>",
        "id": 240121276,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895524
    },
    {
        "content": "<p>That's the one :) I'm terrible with names.</p>",
        "id": 240121304,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895542
    },
    {
        "content": "<p>yeah took me 2 min to remember</p>",
        "id": 240121320,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895560
    },
    {
        "content": "<p>Well, one of the considerations here is we do care about test performance.</p>",
        "id": 240121325,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895566
    },
    {
        "content": "<p>Easy to factor out the CSE into a variable.</p>",
        "id": 240121370,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895588
    },
    {
        "content": "<p><code>#[inline(always)]</code></p>",
        "id": 240121412,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895599
    },
    {
        "content": "<p>-C opt-level=3</p>",
        "id": 240121436,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895618
    },
    {
        "content": "<p>opt-level=3 makes debugging a pain</p>",
        "id": 240121507,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895650
    },
    {
        "content": "<p>True. But try running Unreal in Debug mode :)</p>",
        "id": 240121552,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240121412\">said</a>:</p>\n<blockquote>\n<p><code>#[inline(always)]</code></p>\n</blockquote>\n<p>the inline(always) antipattern is actually exactly why I brought it up. ^^;</p>",
        "id": 240121555,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895674
    },
    {
        "content": "<p>well, if a call/ret combo is more expensive than the function body, i'd say inline it, even in debug mode</p>",
        "id": 240121648,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895741
    },
    {
        "content": "<p>Nearly always, especially with cold code.</p>",
        "id": 240121718,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895766
    },
    {
        "content": "<p>even in opt-level=0 mode</p>",
        "id": 240121721,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895767
    },
    {
        "content": "<p>What is our policy here on #[inline()]?</p>",
        "id": 240121766,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895800
    },
    {
        "content": "<p>figure-it-out-later? :P</p>",
        "id": 240121804,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895829
    },
    {
        "content": "<p>Always the wisest choice.</p>",
        "id": 240121818,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895842
    },
    {
        "content": "<p>Generally we've been annotating everything with #[inline] but that's only really because of the rustc bugs with SIMD.</p>",
        "id": 240121821,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895843
    },
    {
        "content": "<p>prefer to not use #[inline(always)]</p>",
        "id": 240121830,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895855
    },
    {
        "content": "<p>LLVM (or cranelift) will probably do sensible things.</p>",
        "id": 240121932,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895909
    },
    {
        "content": "<p>for vector-math, I've just been ignoring inline completely for now, planning on splattering inline everywhere at some point</p>",
        "id": 240121941,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895913
    },
    {
        "content": "<p>idk about cranelift, does it have an inlining pass?</p>",
        "id": 240121967,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412320\">Andy Thomson</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240121932\">said</a>:</p>\n<blockquote>\n<p>LLVM (or cranelift) will probably do sensible things.</p>\n</blockquote>\n<p>this entire library exists because LLVM does not do sensible things, unfortunately. ^^;</p>",
        "id": 240121968,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895936
    },
    {
        "content": "<p>I'm not sure about cross-crate boundaries. I'm presuming something clever happens with inlining.</p>",
        "id": 240121973,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895943
    },
    {
        "content": "<p>Anyways this has run over time by some bit. Thank you for coming! Time to get some answers to things.</p>",
        "id": 240121982,
        "sender_full_name": "Jubilee",
        "timestamp": 1621895949
    },
    {
        "content": "<p>It's been great. Sorry to stir things up. Thanks for hosting Jubilee.</p>",
        "id": 240122002,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621895975
    },
    {
        "content": "<p>:)</p>",
        "id": 240122028,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621895992
    },
    {
        "content": "<p>#[inline] is needed for stuff to work cross-crate unless there are generics. For simd, because of the calling convention issues, we'd ratehr things get inlined than not, so i think we tend to use #[inline]</p>",
        "id": 240122082,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621896006
    },
    {
        "content": "<p>but not #[inline(always)]</p>",
        "id": 240122106,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621896021
    },
    {
        "content": "<p>:)</p>",
        "id": 240122129,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621896029
    },
    {
        "content": "<p>Thanks, Thom.</p>",
        "id": 240122149,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621896042
    },
    {
        "content": "<p>I guess we'd better wrap up.</p>",
        "id": 240122199,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621896086
    },
    {
        "content": "<p>If I missed something, please feel free to add it to here: <a href=\"https://hackmd.io/tRDC_oOBRCeZrvK7ZMuXNQ?both\">https://hackmd.io/tRDC_oOBRCeZrvK7ZMuXNQ?both</a></p>",
        "id": 240122221,
        "sender_full_name": "Jubilee",
        "timestamp": 1621896107
    },
    {
        "content": "<p>See you all. Time for bed for me.</p>",
        "id": 240122284,
        "sender_full_name": "Andy Thomson",
        "timestamp": 1621896134
    },
    {
        "content": "<p>I have my own appointments. Have a good night!</p>",
        "id": 240122361,
        "sender_full_name": "Jubilee",
        "timestamp": 1621896218
    },
    {
        "content": "<p>bye all</p>",
        "id": 240122376,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621896231
    },
    {
        "content": "<p>Bye!</p>",
        "id": 240123244,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621896786
    },
    {
        "content": "<p>Forgot to note I will be in the sticks with limited internet for a couple weeks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> I merged the sqrt PR</p>",
        "id": 240124644,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621897780
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> woohooooo <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> thanks <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> ! Enjoy the sticks!</p>",
        "id": 240124678,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621897803
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 240125046,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621898065
    },
    {
        "content": "<p>all good, enjoy!</p>",
        "id": 240125149,
        "sender_full_name": "Jubilee",
        "timestamp": 1621898150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240120999\">said</a>:</p>\n<blockquote>\n<p>newton's method is slow due to all the divisions, I'm using a different method</p>\n</blockquote>\n<p>Out of curiosity, how bad is <em>one</em> division?  I'd be curious how Padé would compare.  Like doing <code>sin</code> as</p>\n<div class=\"codehilite\"><pre><span></span><code>551 x^5 - 22260 x^3 + 166320 x\n------------------------------\n  75 x^4 + 5460 x^2 + 166320)\n</code></pre></div>\n<p>(Well, probably with the constants pre-divided out, but that's what WA gave me easily.)</p>",
        "id": 240130395,
        "sender_full_name": "scottmcm",
        "timestamp": 1621902797
    },
    {
        "content": "<p>well, on Haswell, a SIMD f64 division takes 19-35 cycles and it can run a division every 16-28 cycles, whereas, on the same CPU, a SIMD f64 fma takes 5 cycles and it can run 2 fmas every cycle (so 0.5 cycles per fma). See page 242 of <a href=\"https://www.agner.org/optimize/instruction_tables.pdf\">https://www.agner.org/optimize/instruction_tables.pdf</a></p>",
        "id": 240132633,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621905247
    },
    {
        "content": "<p>so, you could evaluate <code>sin</code>'s taylor series to &gt;10 terms in the time it takes to do one division.</p>",
        "id": 240132718,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621905365
    },
    {
        "content": "<p>by splitting the evaluation into odd/even polynomials and evaluating them in parallel.</p>",
        "id": 240132735,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621905400
    },
    {
        "content": "<p>and that still leaves plenty of wiggle room.</p>",
        "id": 240132761,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621905468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240116611\">said</a>:</p>\n<blockquote>\n<p>I think someone just needs to sit down and harass bjorn3 a lot.<br>\nI've already poked around at Cranelift so maybe I should do it? ^^;</p>\n</blockquote>\n<p>No need to harass me :) I opened <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1175\">bjorn3/rustc_codegen_cranelift#1175</a></p>",
        "id": 240166050,
        "sender_full_name": "bjorn3",
        "timestamp": 1621937364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240117037\">said</a>:</p>\n<blockquote>\n<p>do note that cranelift is currently transitioning from their old x86 backend to their new backend</p>\n</blockquote>\n<p>cg_clif already switched a while ago. Wasmtime has switched too. I expect the old backend to be removed completely soonish.</p>",
        "id": 240166229,
        "sender_full_name": "bjorn3",
        "timestamp": 1621937484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240121967\">said</a>:</p>\n<blockquote>\n<p>idk about cranelift, does it have an inlining pass?</p>\n</blockquote>\n<p>No, it compiles a single function at a time all the way down to machine code.</p>",
        "id": 240166794,
        "sender_full_name": "bjorn3",
        "timestamp": 1621937842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240121967\">said</a>:</p>\n<blockquote>\n<p>idk about cranelift, does it have an inlining pass?</p>\n</blockquote>\n<p>MIR has an inliner (albeit I don't think it's on-by-default right now) so we don't have to rely on the codegen backend.</p>",
        "id": 240224478,
        "sender_full_name": "scottmcm",
        "timestamp": 1621964646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-24/near/240166050\">said</a>:</p>\n<blockquote>\n<p>No need to harass me :) I opened <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1175\">bjorn3/rustc_codegen_cranelift#1175</a></p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 240230229,
        "sender_full_name": "Jubilee",
        "timestamp": 1621967235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> The MIR inliner is disabled by default. I do have it on for sysroot builds in cg_clif though, but not user builds.</p>",
        "id": 240232098,
        "sender_full_name": "bjorn3",
        "timestamp": 1621968102
    }
]