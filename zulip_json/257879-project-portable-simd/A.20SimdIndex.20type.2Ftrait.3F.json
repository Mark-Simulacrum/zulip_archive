[
    {
        "content": "<p>Do we want to separate out \"a vector of indices\" as an idea from SimdUsize or our current occasional instances of <code>[u32; N]</code>?</p>",
        "id": 240864500,
        "sender_full_name": "Jubilee",
        "timestamp": 1622489010
    },
    {
        "content": "<p>I think it may make sense, particularly if indices have different sizes on various architectures.  It may also make sense to have different index vector types for dynamic shuffle and for scatter/gather</p>",
        "id": 240866031,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622490479
    },
    {
        "content": "<p>Also, I looked again at LLVM and it's not clear that there's any distinction between dynamic and static shuffles.  They're the same instruction.</p>",
        "id": 240866119,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622490538
    },
    {
        "content": "<p>(so we may want to attempt to use a single index type for them, and perhaps unify the interface entirely)</p>",
        "id": 240866201,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622490609
    },
    {
        "content": "<p>i still think it's valuable to have dynamic and static shuffles separated even if llvm unifies them</p>",
        "id": 240868499,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622492692
    },
    {
        "content": "<p>what Thom said: things that are mere hints to LLVM are still valuable to encode at our type level.</p>",
        "id": 240868753,
        "sender_full_name": "Jubilee",
        "timestamp": 1622492915
    },
    {
        "content": "<p>actually, iirc llvm only has static shuffle in its generic IR, dynamic shuffle has to use arch-specific intrinsics</p>",
        "id": 240869390,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622493519
    },
    {
        "content": "<p>huh, are you sure? I was almost certain shufflevector accepted dynamic arguments.</p>",
        "id": 240869416,
        "sender_full_name": "Jubilee",
        "timestamp": 1622493547
    },
    {
        "content": "<blockquote>\n<p>The mask vector elements must be constant integers or undef values.</p>\n</blockquote>",
        "id": 240869446,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622493575
    },
    {
        "content": "<p>welp.</p>",
        "id": 240869451,
        "sender_full_name": "Jubilee",
        "timestamp": 1622493582
    },
    {
        "content": "<p><a href=\"https://llvm.org/docs/LangRef.html#shufflevector-instruction\">https://llvm.org/docs/LangRef.html#shufflevector-instruction</a></p>",
        "id": 240869519,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622493611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/240866031\">said</a>:</p>\n<blockquote>\n<p>I think it may make sense, particularly if indices have different sizes on various architectures.  It may also make sense to have different index vector types for dynamic shuffle and for scatter/gather</p>\n</blockquote>\n<p>for scatter/gather, aarch64 SVE2 uses 64 bits (which is also usize/isize, Obviously), but zext/sexts from 32 bits<br>\nIntel uses up to u32 for shuffles and gathers.<br>\nsome explicit vectorization libraries for C++ use u32 always.</p>",
        "id": 240874542,
        "sender_full_name": "Jubilee",
        "timestamp": 1622498235
    },
    {
        "content": "<p>I am sure the RISCV-V spec does something absolutely wild. Let's see...</p>\n<blockquote>\n<p>The vrgather.vv form uses SEW/LMUL for both the data and indices. The vrgatherei16.vv form uses SEW/LMUL for the data in vs2 but EEW=16 and EMUL = (16/SEW)*LMUL for the indices in vs1.</p>\n<blockquote>\n<p>Note<br>\n    When SEW=8, vrgather.vv can only reference vector elements 0-255. The vrgatherei16 form can index 64K elements, and can also be used to reduce the register capacity needed to hold indices when SEW &gt; 16. <br>\n</p>\n</blockquote>\n</blockquote>\n<p>ah yep.</p>",
        "id": 240874882,
        "sender_full_name": "Jubilee",
        "timestamp": 1622498615
    },
    {
        "content": "<p>65535 elements, or whatever the numeric size actually allows.</p>",
        "id": 240874954,
        "sender_full_name": "Jubilee",
        "timestamp": 1622498683
    },
    {
        "content": "<p>for gather/scatter, x86 supports both 32 and 64-bit indexes (icr if 32-bit indexes are sign/zero extended when computing addresses)</p>",
        "id": 240877522,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622501574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/240877522\">said</a>:</p>\n<blockquote>\n<p>for gather/scatter, x86 supports both 32 and 64-bit indexes (icr if 32-bit indexes are sign/zero extended when computing addresses)</p>\n</blockquote>\n<p>ah, the instructions I read used 32 bit indices? hm.</p>",
        "id": 240877614,
        "sender_full_name": "Jubilee",
        "timestamp": 1622501657
    },
    {
        "content": "<p>they were offset by a 64 bit number, obviously.</p>",
        "id": 240877616,
        "sender_full_name": "Jubilee",
        "timestamp": 1622501667
    },
    {
        "content": "<blockquote>\n<p>_mm512_i64scatter_ps, _mm512_mask_i64scatter_ps</p>\n</blockquote>\n<p>ah, well.</p>",
        "id": 240877681,
        "sender_full_name": "Jubilee",
        "timestamp": 1622501760
    },
    {
        "content": "<blockquote>\n<p>Gathers 2/4 packed single-precision floating point values from memory referenced by the given base address, qword indices and scale. The corresponding IntelÂ® AVX2 instruction is VGATHERQPS</p>\n</blockquote>\n<p>hmm actually they can use qword indices on AVX2, odd.</p>",
        "id": 240877974,
        "sender_full_name": "Jubilee",
        "timestamp": 1622502060
    },
    {
        "content": "<blockquote>\n<p>error[E0512]: cannot transmute between types of different sizes, or dependently-sized types<br>\n  --&gt; crates\\core_simd\\src\\array.rs:46:45<br>\n   |<br>\n46 |             let ptrs: [*const i32; LANES] = mem::transmute(ptrs);<br>\n   |                                             ^^^^^^^^^^^^^^<br>\n   |<br>\n   = note: source type: <code>uint::SimdUsize&lt;LANES&gt;</code> (size can vary because of [usize; LANES])<br>\n   = note: target type: <code>[*const i32; LANES]</code> (this type does not have a fixed size)</p>\n</blockquote>\n<p>oookay.</p>",
        "id": 240891032,
        "sender_full_name": "Jubilee",
        "timestamp": 1622518066
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(simd)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">ptrx2</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<blockquote>\n<p>error[E0077]: SIMD vector element type should be a primitive scalar (integer/float/pointer) type</p>\n</blockquote>\n<p>Feel like I'm absolutely losing my mind here.</p>",
        "id": 240892155,
        "sender_full_name": "Jubilee",
        "timestamp": 1622519602
    },
    {
        "content": "<p>That seems like a compiler bug (or maybe vectors of pointers were explicitly removed for some reason?)</p>",
        "id": 240892684,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622520402
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(repr_simd)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Copy, Clone, Debug)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(simd)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ptrx2</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptrx2</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this is legal? what is rustc smoking.</p>",
        "id": 240892847,
        "sender_full_name": "Jubilee",
        "timestamp": 1622520611
    },
    {
        "content": "<p>Maybe the error message is wrong?  Maybe it doesn't support pointers?</p>",
        "id": 240892963,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622520809
    },
    {
        "content": "<p>(yet)</p>",
        "id": 240892966,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622520817
    },
    {
        "content": "<p>no, that is me successfully instantiating a double ptr, but it only works when I use generic T as the type.</p>",
        "id": 240892975,
        "sender_full_name": "Jubilee",
        "timestamp": 1622520841
    },
    {
        "content": "<p>...wait.</p>",
        "id": 240893024,
        "sender_full_name": "Jubilee",
        "timestamp": 1622520894
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>let x = ptrx2(&#39;a&#39;, &#39;a&#39;);\n</code></pre></div>\n\n</blockquote>\n<p>that _also_ works.<br>\n...but chars should be banned..</p>",
        "id": 240893087,
        "sender_full_name": "Jubilee",
        "timestamp": 1622520982
    },
    {
        "content": "<p>I at least got it to error on strings and Vecs, so the entire world hasn't crumbled yet.</p>",
        "id": 240893185,
        "sender_full_name": "Jubilee",
        "timestamp": 1622521137
    },
    {
        "content": "<p>but i need Simd&lt;[String; 4]&gt; for perf</p>",
        "id": 240893438,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622521450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/240893438\">said</a>:</p>\n<blockquote>\n<p>but i need Simd&lt;[String; 4]&gt; for perf</p>\n</blockquote>\n<p>HMMMMM</p>",
        "id": 240893566,
        "sender_full_name": "Jubilee",
        "timestamp": 1622521599
    },
    {
        "content": "<p>I'd hazard a guess that normally it's checking that the type must be a primitive (overly restrictive) and during monomorphization it just checks that it's scalar (overly permitting)</p>",
        "id": 240893604,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1622521643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/240893566\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/240893438\">said</a>:</p>\n<blockquote>\n<p>but i need Simd&lt;[String; 4]&gt; for perf</p>\n</blockquote>\n<p>HMMMMM</p>\n</blockquote>\n<p>oh no i wasnt serious</p>",
        "id": 240893705,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622521758
    },
    {
        "content": "<p>It's too late Thom, I'm already planning to wedge vectorized strings into Rust somehow. <em>nod</em></p>",
        "id": 240893766,
        "sender_full_name": "Jubilee",
        "timestamp": 1622521827
    },
    {
        "content": "<p><em>Daniel Lemire has entered the chat</em></p>",
        "id": 240893803,
        "sender_full_name": "Miguel Raz GuzmÃ¡n Macedo",
        "timestamp": 1622521902
    },
    {
        "content": "<p>well, string operations in simd is absolutely a thing we'll support (and already do), it's just... it won't look like a vector of <code>String</code></p>",
        "id": 240894919,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1622523389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/240891032\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>error[E0512]: cannot transmute between types of different sizes, or dependently-sized types<br>\n  --&gt; crates\\core_simd\\src\\array.rs:46:45<br>\n   |<br>\n46 |             let ptrs: [*const i32; LANES] = mem::transmute(ptrs);<br>\n   |                                             ^^^^^^^^^^^^^^<br>\n   |<br>\n   = note: source type: <code>uint::SimdUsize&lt;LANES&gt;</code> (size can vary because of [usize; LANES])<br>\n   = note: target type: <code>[*const i32; LANES]</code> (this type does not have a fixed size)</p>\n</blockquote>\n<p>oookay.</p>\n</blockquote>\n<p>Time for <code>transmute_copy</code>!</p>",
        "id": 240897392,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622526665
    },
    {
        "content": "<p>ran into a wall again.<br>\npretty sure something about ptr-vectors is busted.</p>",
        "id": 240900183,
        "sender_full_name": "Jubilee",
        "timestamp": 1622529557
    },
    {
        "content": "<p>will come back tomorrow.</p>",
        "id": 240900199,
        "sender_full_name": "Jubilee",
        "timestamp": 1622529580
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/85915\">https://github.com/rust-lang/rust/issues/85915</a></p>",
        "id": 241070711,
        "sender_full_name": "Jubilee",
        "timestamp": 1622579292
    },
    {
        "content": "<p>And going to continue discussion of debugging that over here, whether or not anyone responds to it. ^^; <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/SIMD.20pointers.20monomorphization.20error.3F/near/241072019\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/SIMD.20pointers.20monomorphization.20error.3F/near/241072019</a></p>",
        "id": 241074323,
        "sender_full_name": "Jubilee",
        "timestamp": 1622580948
    },
    {
        "content": "<p>Aaand PR up to fix it in rustc: <a href=\"https://github.com/rust-lang/rust/pull/85919\">https://github.com/rust-lang/rust/pull/85919</a></p>",
        "id": 241091167,
        "sender_full_name": "Jubilee",
        "timestamp": 1622592460
    },
    {
        "content": "<p>commenting here since GitHub broke:</p>\n<blockquote>\n<p>Ah, I meant if you could find something that _does_ pass and _doesn't error_... a monomorphization time error (which is currently what happens) is the expected result. It's ugly and undesirable but the status quo, and improving on that is left for later work.</p>\n</blockquote>\n<p>hmm, maybe raw pointers to external types? can't think of anything else... I added a test case for vector of optional nonnull ptr to extern type... though github doesn't seem to want to update my pull request.<br>\n<a href=\"https://github.com/programmerjake/rust\">https://github.com/programmerjake/rust</a> <a href=\"https://github.com/rust-lang/rust/commit/713b864c5798ea0fdae579d404c21a39d972993b\">713b864c5798ea0fdae579d404c21a39d972993b</a><br>\n/src/test/ui/simd/simd-type-generic-monomorphisation-extern-nonnull-ptr.rs</p>\n<p>github seems seriously broken since it won't let me comment with a link to that commit</p>",
        "id": 241119638,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622622822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> ^</p>",
        "id": 241119738,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622622871
    },
    {
        "content": "<p><a href=\"https://github.com/programmerjake/rust/blob/713b864c5798ea0fdae579d404c21a39d972993b/src/test/ui/simd/simd-type-generic-monomorphisation-extern-nonnull-ptr.rs\">https://github.com/programmerjake/rust/blob/713b864c5798ea0fdae579d404c21a39d972993b/src/test/ui/simd/simd-type-generic-monomorphisation-extern-nonnull-ptr.rs</a></p>",
        "id": 241119829,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622622939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> I am not sure that a NonNull working is erroneous, these seem to be valid pointer types.</p>",
        "id": 241309193,
        "sender_full_name": "Jubilee",
        "timestamp": 1622662787
    },
    {
        "content": "<p>I did mean to find MVCEs for <em>issues</em>, not additions to this PR. ^^;</p>",
        "id": 241312393,
        "sender_full_name": "Jubilee",
        "timestamp": 1622664337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/241309193\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> I am not sure that a NonNull working is erroneous, these seem to be valid pointer types.</p>\n</blockquote>\n<p>apparently I can't read...I thought you meant add a test case that passes since you didn't like the test case that fails...</p>\n<p>I don't have any special insight for things that should fail but are passing, but I do think those test cases are useful to help ensure extern type ptrs with simd aren't broken and that fat ptrs correctly fail.</p>",
        "id": 241312539,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622664403
    },
    {
        "content": "<p>I don't know what the proper behavior for extern ptrs are, and I have already verified that fat ptrs fail monomorphization and I believe there's a test though I don't want to dig through the entire ui directory to find it. That's why I was deliberately conservative.</p>",
        "id": 241313481,
        "sender_full_name": "Jubilee",
        "timestamp": 1622664871
    },
    {
        "content": "<p>I didn't see a test for fat ptrs...so I added one</p>",
        "id": 241315067,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622665651
    },
    {
        "content": "<p>mm.</p>",
        "id": 241315159,
        "sender_full_name": "Jubilee",
        "timestamp": 1622665690
    },
    {
        "content": "<p>for extern ptrs, since they're thin, I'd expect them to work</p>",
        "id": 241315243,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622665741
    },
    {
        "content": "<p>welp lol</p>",
        "id": 241320722,
        "sender_full_name": "Jubilee",
        "timestamp": 1622668476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> looks like I'll be taking on those tests then. ^^;; lmk if you are done</p>",
        "id": 241322281,
        "sender_full_name": "Jubilee",
        "timestamp": 1622669330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/A.20SimdIndex.20type.2Ftrait.3F/near/241322281\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> looks like I'll be taking on those tests then. ^^;; lmk if you are done</p>\n</blockquote>\n<p>done, unless something else comes up.</p>",
        "id": 241327937,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622672859
    },
    {
        "content": "<p>thank you!</p>",
        "id": 241329586,
        "sender_full_name": "Jubilee",
        "timestamp": 1622674238
    },
    {
        "content": "<p>Aaand now I have a safe <code>fn gather</code> implementation.</p>",
        "id": 241669033,
        "sender_full_name": "Jubilee",
        "timestamp": 1622949321
    },
    {
        "content": "<p>And <code>fn scatter</code></p>",
        "id": 241701167,
        "sender_full_name": "Jubilee",
        "timestamp": 1622999954
    },
    {
        "content": "<p>Safe meaning it uses slice indices? Exciting</p>",
        "id": 241701701,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623000731
    },
    {
        "content": "<p>yep!</p>",
        "id": 241702780,
        "sender_full_name": "Jubilee",
        "timestamp": 1623002499
    },
    {
        "content": "<p>And it uses the mask to do a bounds check.</p>",
        "id": 241702786,
        "sender_full_name": "Jubilee",
        "timestamp": 1623002517
    },
    {
        "content": "<p>Hmm not sure what you mean but you mentioned that earlier</p>",
        "id": 241702927,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623002702
    },
    {
        "content": "<p>I'll look at the PR when you're done lol</p>",
        "id": 241702933,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623002710
    },
    {
        "content": "<p>Oh, so, basically, <code>simd_gather</code> and <code>simd_scatter</code> take masks.<br>\nFor these safe functions, if an index is not in-bounds, the mask is constructed internally from <code>lanes_lt</code> to bar the read/write, and because of this they don't accept an external mask.</p>",
        "id": 241703018,
        "sender_full_name": "Jubilee",
        "timestamp": 1623002833
    },
    {
        "content": "<p>Speaking of... do we want to standardize on \"indices\" or \"indexes\"?</p>",
        "id": 243454740,
        "sender_full_name": "Jubilee",
        "timestamp": 1624316934
    },
    {
        "content": "<p>both are valid, indexes is the North American variant.</p>",
        "id": 243454753,
        "sender_full_name": "Jubilee",
        "timestamp": 1624316952
    },
    {
        "content": "<p>In my experience indices is used for anything technical and indexes more for things like \"stock indexes\"</p>",
        "id": 243454982,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624317129
    },
    {
        "content": "<p>So I vote indices for both the technical usage and probably more universal outside the US?</p>",
        "id": 243455016,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1624317180
    },
    {
        "content": "<p>Hey, Canada is infected with our usage too. /s</p>",
        "id": 243455026,
        "sender_full_name": "Jubilee",
        "timestamp": 1624317195
    },
    {
        "content": "<p>my experience is that indices is more common in the US too</p>",
        "id": 243455680,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624317742
    },
    {
        "content": "<p>going for indices then.</p>",
        "id": 243455746,
        "sender_full_name": "Jubilee",
        "timestamp": 1624317814
    },
    {
        "content": "<p>I prefer indices (and colour) personally ð¨ð¦, but Rust docs usually use US spelling.</p>",
        "id": 243463581,
        "sender_full_name": "scottmcm",
        "timestamp": 1624325722
    },
    {
        "content": "<p>i dont know how to search only docs, but <a href=\"https://github.com/rust-lang/rust/search?q=indices\">https://github.com/rust-lang/rust/search?q=indices</a> vs <a href=\"https://github.com/rust-lang/rust/search?q=indexes\">https://github.com/rust-lang/rust/search?q=indexes</a> shows that the former is overwhelmingly more common</p>",
        "id": 243467135,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1624330229
    }
]