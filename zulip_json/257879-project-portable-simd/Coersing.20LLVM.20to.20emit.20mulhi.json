[
    {
        "content": "<p>Good evening cuties! I've been playing around with trying to get LLVM to emit <code>pmulhuw</code>, the 16-bit variant of multiply-high unsigned on x86. I'm having no luck and I'm curious if there's a more creative way I could write the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">mulhi</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">as_array</span><span class=\"p\">()[</span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It's interesting that LLVM does actually emit a single <code>pmulhw</code>, but it's encaspulated in about ~40 lines of packing, unpacking, and shuffles.</p>",
        "id": 259034735,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635205222
    },
    {
        "content": "<p>Ugh, yeah.<br>\n<span class=\"user-mention\" data-user-id=\"356799\">@Brandon Falk</span> So like, a dead array here or there can be optimized out, but this is asking a lot when you pull out that many arrays.</p>",
        "id": 259036236,
        "sender_full_name": "Jubilee",
        "timestamp": 1635206588
    },
    {
        "content": "<p>I bet this might work if you used... hm.</p>",
        "id": 259036318,
        "sender_full_name": "Jubilee",
        "timestamp": 1635206657
    },
    {
        "content": "<p>I bet this needs <code>simd_cast</code>.</p>",
        "id": 259036341,
        "sender_full_name": "Jubilee",
        "timestamp": 1635206687
    },
    {
        "content": "<p>Yeah I'm thinking: cast to u32, multiply, shr, cast back down</p>",
        "id": 259036572,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635206919
    },
    {
        "content": "<p>Then it's 4 intrinsics, and hopefully it's a pattern LLVM recognizes in codegen</p>",
        "id": 259036591,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635206947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"356799\">@Brandon Falk</span> Be our test dummy for a bit? Add <code>#![feature(platform_intrinsics)]</code> to your code for a second, and this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"platform-intrinsic\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">simd_cast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">simd_u16_to_u32</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">simd_cast</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">simd_u32_to_u16</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">simd_cast</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 259036695,
        "sender_full_name": "Jubilee",
        "timestamp": 1635207057
    },
    {
        "content": "<p>Whatever you're working on is going to be a more realistic test of whether it uses <code>mulhi</code> correctly than the assembly in isolation.</p>",
        "id": 259036741,
        "sender_full_name": "Jubilee",
        "timestamp": 1635207112
    },
    {
        "content": "<p>I'll try it when I get back home :3</p>",
        "id": 259037803,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635208076
    },
    {
        "content": "<p>Excellent.<br>\nIf we see that working, then we can just drop the appropriate impls in. We dallied on some things because they weren't priority or we weren't sure how LLVM would optimize them in practice.</p>",
        "id": 259038101,
        "sender_full_name": "Jubilee",
        "timestamp": 1635208323
    },
    {
        "content": "<p>Do we not have conversions like that yet? It totally slipped my mind</p>",
        "id": 259038128,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635208356
    },
    {
        "content": "<p>Also I'm not exactly sure what happens if that narrowing cast is out of range</p>",
        "id": 259038167,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635208406
    },
    {
        "content": "<p>(which it obviously can't be here, but more generally)</p>",
        "id": 259038188,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635208427
    },
    {
        "content": "<p>Yes, we don't.</p>",
        "id": 259038521,
        "sender_full_name": "Jubilee",
        "timestamp": 1635208725
    },
    {
        "content": "<p>and yes in this case I think the main blocker was \"wait, exactly what failure mode do we want to offer?\"</p>",
        "id": 259038535,
        "sender_full_name": "Jubilee",
        "timestamp": 1635208750
    },
    {
        "content": "<p>it works: <a href=\"https://rust.godbolt.org/z/cKxncaW71\">https://rust.godbolt.org/z/cKxncaW71</a></p>",
        "id": 259038541,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635208758
    },
    {
        "content": "<p>neat!</p>",
        "id": 259038553,
        "sender_full_name": "Jubilee",
        "timestamp": 1635208778
    },
    {
        "content": "<p>Awesome</p>",
        "id": 259038559,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635208786
    },
    {
        "content": "<p>I am still curious what Brandon's version looks like in like... the middle of his actual code?</p>",
        "id": 259038565,
        "sender_full_name": "Jubilee",
        "timestamp": 1635208798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Coersing.20LLVM.20to.20emit.20mulhi/near/259038167\">said</a>:</p>\n<blockquote>\n<p>Also I'm not exactly sure what happens if that narrowing cast is out of range</p>\n</blockquote>\n<p>I'd assume the narrowing cast follows llvm's usual <code>trunc</code> rules -- the answer for each lane is the same thing you'd get with <code>as</code></p>",
        "id": 259046773,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635217492
    },
    {
        "content": "<p>Yep, this works perfect in my code, exactly what I was hoping for (vector casts)</p>",
        "id": 259049210,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635220502
    },
    {
        "content": "<p>Excellent, then it's figuring out a name for it and writing it in.</p>",
        "id": 259050962,
        "sender_full_name": "Jubilee",
        "timestamp": 1635222543
    },
    {
        "content": "<p><code>Simd::&lt;T, N&gt;::cast::&lt;U&gt;</code></p>",
        "id": 259051011,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635222604
    },
    {
        "content": "<p>like <code>&lt;*const T&gt;::cast</code></p>",
        "id": 259051031,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635222635
    },
    {
        "content": "<p>It's not a reinterpretation tho'.</p>",
        "id": 259051097,
        "sender_full_name": "Jubilee",
        "timestamp": 1635222732
    },
    {
        "content": "<p>Sign/zero extend kinda makes sense since that's what it's doing, but that'd be interpreted from the typing so it's kinda weird to have it be explicit</p>",
        "id": 259052020,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635224007
    },
    {
        "content": "<p>I'm so glad LLVM can turn this into a single instruction, it's so cool. x86 has so many wacky instructions and it'll be nice to be able to use them without breaking support for other arches</p>",
        "id": 259052031,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635224038
    },
    {
        "content": "<p>It's gotta be like... an <code>fn as_simd</code> with a very explicit annotation that it follows the semantics of <code>as</code> and a test for same.</p>",
        "id": 259052266,
        "sender_full_name": "Jubilee",
        "timestamp": 1635224322
    },
    {
        "content": "<p>Is there a big list of all the SIMD platform intrinsics? I might be curious to see if there's anything else that makes it possible to express complex operations</p>",
        "id": 259052309,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635224390
    },
    {
        "content": "<p>Has anyone tried emitting aesenc using portable simd? That would be _really_ cool</p>",
        "id": 259052368,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635224409
    },
    {
        "content": "<p>i highly doubt llvm will detect the portable bit-manipulation and table lookups and emit aes instructions...</p>",
        "id": 259052448,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635224480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"356799\">Brandon Falk</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Coersing.20LLVM.20to.20emit.20mulhi/near/259052309\">said</a>:</p>\n<blockquote>\n<p>Is there a big list of all the SIMD platform intrinsics? I might be curious to see if there's anything else that makes it possible to express complex operations</p>\n</blockquote>\n<p>There is no publicly issued API for it. It is buried deep in the compiler. But the truth is \"whatever we write.\"</p>",
        "id": 259052597,
        "sender_full_name": "Jubilee",
        "timestamp": 1635224666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Coersing.20LLVM.20to.20emit.20mulhi/near/259051097\">said</a>:</p>\n<blockquote>\n<p>It's not a reinterpretation tho'.</p>\n</blockquote>\n<p>yeah, but it follows <code>as</code>, just like <code>ptr::cast</code> is <code>x as *const U</code>. If it were reinterpret it would be named bitcast, transmute, or similar. imho the word cast is much closer to <code>as</code> in implied semantics</p>",
        "id": 259052613,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635224686
    },
    {
        "content": "<p>A <code>\"platform-intrinsic\"</code> is essentially issuing a direct command to the codegen backend.</p>",
        "id": 259052698,
        "sender_full_name": "Jubilee",
        "timestamp": 1635224793
    },
    {
        "content": "<p>another option could be <code>to</code></p>",
        "id": 259052702,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635224803
    },
    {
        "content": "<p>oh, i was thinking of the name for the user-visible API, not the intrinsic name</p>",
        "id": 259052720,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635224846
    },
    {
        "content": "<p>I was continuing my explanation to Brandon.</p>",
        "id": 259052739,
        "sender_full_name": "Jubilee",
        "timestamp": 1635224878
    },
    {
        "content": "<p>ah, carry on</p>",
        "id": 259052779,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635224892
    },
    {
        "content": "<p>Exploring using this to try to get better emission of non-usize based gathers yields an ICE, damn</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"platform-intrinsic\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">simd_cast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">simd_u16_to_usize</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Simd</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">simd_cast</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">gather_good</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u16</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">idxs</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Simd</span>::<span class=\"n\">gather_or_default</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">simd_u16_to_usize</span><span class=\"p\">(</span><span class=\"n\">idxs</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, compiler/rustc_codegen_llvm/src/intrinsic.rs:1684:62\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/00d5e42e776da900049fe19087bc9b0057ec70cd/library/std/src/panicking.rs:495:5\n   1: core::panicking::panic_fmt\n             at /rustc/00d5e42e776da900049fe19087bc9b0057ec70cd/library/core/src/panicking.rs:107:14\n   2: core::panicking::panic\n             at /rustc/00d5e42e776da900049fe19087bc9b0057ec70cd/library/core/src/panicking.rs:50:5\n   3: rustc_codegen_llvm::intrinsic::generic_simd_intrinsic\n   4: &lt;rustc_codegen_llvm::builder::Builder as rustc_codegen_ssa::traits::intrinsic::IntrinsicCallMethods&gt;::codegen_intrinsic_call\n   5: &lt;rustc_codegen_ssa::mir::FunctionCx&lt;rustc_codegen_llvm::builder::Builder&gt;&gt;::codegen_intrinsic_call\n   6: rustc_codegen_ssa::mir::codegen_mir::&lt;rustc_codegen_llvm::builder::Builder&gt;\n   7: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\n   8: &lt;rustc_query_system::dep_graph::graph::DepGraph&lt;rustc_middle::dep_graph::dep_node::DepKind&gt;&gt;::with_task::&lt;rustc_middle::ty::context::TyCtxt, rustc_span::symbol::Symbol, rustc_codegen_ssa::ModuleCodegen&lt;rustc_codegen_llvm::ModuleLlvm&gt;&gt;\n   9: rustc_codegen_llvm::base::compile_codegen_unit\n  10: rustc_codegen_ssa::base::codegen_crate::&lt;rustc_codegen_llvm::LlvmCodegenBackend&gt;\n  11: &lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate\n  12: &lt;rustc_session::session::Session&gt;::time::&lt;alloc::boxed::Box&lt;dyn core::any::Any&gt;, rustc_interface::passes::start_codegen::{closure#0}&gt;\n  13: &lt;rustc_interface::queries::Queries&gt;::ongoing_codegen\n  14: &lt;rustc_interface::interface::Compiler&gt;::enter::&lt;rustc_driver::run_compiler::{closure#1}::{closure#2}, core::result::Result&lt;core::option::Option&lt;rustc_interface::queries::Linker&gt;, rustc_errors::ErrorReported&gt;&gt;\n  15: rustc_span::with_source_map::&lt;core::result::Result&lt;(), rustc_errors::ErrorReported&gt;, rustc_interface::interface::create_compiler_and_run&lt;core::result::Result&lt;(), rustc_errors::ErrorReported&gt;, rustc_driver::run_compiler::{closure#1}&gt;::{closure#0}&gt;\n  16: &lt;scoped_tls::ScopedKey&lt;rustc_span::SessionGlobals&gt;&gt;::set::&lt;rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals&lt;rustc_interface::interface::run_compiler&lt;core::result::Result&lt;(), rustc_errors::ErrorReported&gt;, rustc_driver::run_compiler::{closure#1}&gt;::{closure#0}, core::result::Result&lt;(), rustc_errors::ErrorReported&gt;&gt;::{closure#0}::{closure#0}, core::result::Result&lt;(), rustc_errors::ErrorReported&gt;&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>\n<p>Gonna play around with this a bit, as using &lt;usize indicies would be huge, and I'd imagine if LLVM knows they were just zero-extended it will know it doesn't have to emit the <code>usize</code> logic</p>",
        "id": 259060275,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635233110
    },
    {
        "content": "<p>I think this is like the very last thing I'm looking for from portable simd before everything I write should work in it. I use non-usize indicies _a lot_ and current code gen is pretty bad</p>",
        "id": 259060464,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635233216
    },
    {
        "content": "<p>Ah, this seems to be specifically related to <code>usize</code>, casting to<code>u64</code> does work</p>",
        "id": 259060799,
        "sender_full_name": "Brandon Falk",
        "timestamp": 1635233426
    },
    {
        "content": "<p>well...rustc's llvm backend expects that usize should have been caught earlier...but it isn't: <a href=\"https://github.com/rust-lang/rust/blob/17e13b549f5f83cd9ffca9a540090754eb95115c/compiler/rustc_codegen_llvm/src/intrinsic.rs#L1675\">https://github.com/rust-lang/rust/blob/17e13b549f5f83cd9ffca9a540090754eb95115c/compiler/rustc_codegen_llvm/src/intrinsic.rs#L1675</a></p>",
        "id": 259061277,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635233759
    },
    {
        "content": "<p>so, rustc probably needs to gain usize/isize support for simd_cast</p>",
        "id": 259061396,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635233830
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/portable-simd/issues/116\">portable-simd#116</a></p>",
        "id": 259062070,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635234322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span>  I am thinking <code>into_simd</code> as our fn name for the \"lanewise <code>as</code> cast\".<br>\n<code>to</code> doesn't seem right because it's not <em>always</em> going to be a high cost, but it's not necessarily free either.</p>",
        "id": 259145991,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275364
    },
    {
        "content": "<p>i'd consider it nearly free, it's not doing anything like calling an allocator and it's generally faster than a f32 division even if tons of swizzling is needed cuz the ISA design is borked.</p>",
        "id": 259146390,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635275540
    },
    {
        "content": "<p>I'm guessing it's usually only twice as costly as a move, roughly</p>",
        "id": 259146700,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635275605
    },
    {
        "content": "<p>At worst</p>",
        "id": 259146753,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635275617
    },
    {
        "content": "<p>Right.<br>\nMy thinking is that <code>into_</code> is when it's nearly free but not always, basically, and <code>to_</code> is for \"expensive\" conversions.<br>\n<code>as_</code> is, ironically, for basically \"no really literally free\".</p>",
        "id": 259146783,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275625
    },
    {
        "content": "<p>Also, is this effectively what this function is? <a href=\"https://doc.rust-lang.org/std/primitive.u64.html#method.widening_mul\">https://doc.rust-lang.org/std/primitive.u64.html#method.widening_mul</a></p>",
        "id": 259146832,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635275636
    },
    {
        "content": "<p>yes.</p>",
        "id": 259146898,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275647
    },
    {
        "content": "<p>Perhaps we should also implement it</p>",
        "id": 259146903,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635275648
    },
    {
        "content": "<p>Yeah I am thinking we want that.</p>",
        "id": 259146918,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275658
    },
    {
        "content": "<p>I've personally never used it but seems useful if you're doing bigint stuff</p>",
        "id": 259146960,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635275681
    },
    {
        "content": "<p><code>into_vec</code> for instance is often just basically attaching a capacity/len to a Box.</p>",
        "id": 259146976,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275691
    },
    {
        "content": "<p>whereas <code>as_bytes</code> is pure reinterpretation.</p>",
        "id": 259147022,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275719
    },
    {
        "content": "<p>int as float/float as int isn't literally free either though</p>",
        "id": 259147063,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1635275741
    },
    {
        "content": "<p>that said i have 0 horse in this race</p>",
        "id": 259147085,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1635275756
    },
    {
        "content": "<p>Yes, that's why it can't be <code>as_simd</code>. :'(</p>",
        "id": 259147134,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275766
    },
    {
        "content": "<p>Especially now that it's saturating!</p>",
        "id": 259147138,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635275767
    },
    {
        "content": "<p>but it's actually surprisingly cheap.</p>",
        "id": 259147150,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275778
    },
    {
        "content": "<p><code>to_vec</code> is usually for \"copy the entire damn slice\".</p>",
        "id": 259147195,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275812
    },
    {
        "content": "<p>and basically <code>into_</code> is allowed to be as expensive as <code>to_</code> in theory but isn't necessarily.</p>",
        "id": 259147278,
        "sender_full_name": "Jubilee",
        "timestamp": 1635275859
    },
    {
        "content": "<p>So I don't think <code>into_</code> or <code>to_</code> are good names for this just because it's doing slightly different than most type conversions</p>",
        "id": 259147355,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635275899
    },
    {
        "content": "<p>into can be quite expensive...<code>let v: Arc&lt;str&gt; = \"abcd\".repeat(1 &lt;&lt; 18).into();</code> copies 1MB</p>",
        "id": 259147406,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635275936
    },
    {
        "content": "<p>as well as calling the allocator</p>",
        "id": 259147446,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635275962
    },
    {
        "content": "<p>if we wanted this to be super nice and consistent to use, <code>as</code> could do SIMD casts (<em>not</em> transmute)</p>",
        "id": 259147793,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Coersing.20LLVM.20to.20emit.20mulhi/near/259147355\">said</a>:</p>\n<blockquote>\n<p>So I don't think <code>into_</code> or <code>to_</code> are good names for this just because it's doing slightly different than most type conversions</p>\n</blockquote>\n<p>Oh?</p>",
        "id": 259147858,
        "sender_full_name": "Jubilee",
        "timestamp": 1635276161
    },
    {
        "content": "<p>Well, maybe with a very carefully selected name it would be okay</p>",
        "id": 259147926,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276194
    },
    {
        "content": "<p>But this isn't like <code>to_string</code> or anything like that at all</p>",
        "id": 259147978,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276226
    },
    {
        "content": "<p>imho casting should be 100% identical to <code>as</code> for each lane, if we're doing something else then we should name it something else.</p>",
        "id": 259148062,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276253
    },
    {
        "content": "<p>such as bitcast or transmute or <code>to_int_unchecked</code></p>",
        "id": 259148140,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276302
    },
    {
        "content": "<p>Yeah, it's similar to <code>to_int</code></p>",
        "id": 259148163,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276316
    },
    {
        "content": "<p>oh, <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <code>to</code> is very light-weight there</p>",
        "id": 259148205,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276340
    },
    {
        "content": "<p>even more than <code>as</code></p>",
        "id": 259148243,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Coersing.20LLVM.20to.20emit.20mulhi/near/259148163\">said</a>:</p>\n<blockquote>\n<p>Yeah, it's similar to <code>to_int</code></p>\n</blockquote>\n<p>I am confused now.</p>",
        "id": 259148599,
        "sender_full_name": "Jubilee",
        "timestamp": 1635276528
    },
    {
        "content": "<p>Oh, it's also worth noting I think we need to extend the compiler to do saturating int-to-float casts</p>",
        "id": 259148611,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276535
    },
    {
        "content": "<p>and <code>usize</code>/<code>isize</code> casts too</p>",
        "id": 259148672,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276564
    },
    {
        "content": "<p>you mean float-to-int? int-to-float is always rounding to nearest, ties to even</p>",
        "id": 259148791,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635276606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I guess I was thinking of it more like sext/zext</p>",
        "id": 259148800,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276608
    },
    {
        "content": "<p>...that's a type transformation tho'.</p>",
        "id": 259148830,
        "sender_full_name": "Jubilee",
        "timestamp": 1635276626
    },
    {
        "content": "<p>Whoops, yeah float-to-int</p>",
        "id": 259148833,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276627
    },
    {
        "content": "<p>Yeah, idk I'm not adamant on any naming</p>",
        "id": 259148936,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276671
    },
    {
        "content": "<p>I'm opposed to <code>to_simd</code> specifically though</p>",
        "id": 259148982,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635276698
    }
]