[
    {
        "content": "<p>Our library relies a bit on being \"Plain ol' data\" types to make it easy to bitcast in certain places, but we are considering possibly supporting hypothetically transparent types, <code>Simd&lt;NonNan&lt;f32&gt;, N&gt;</code> or <code>Simd&lt;NonZeroU32, N&gt;</code>. We need a more worked design for how to avoid podcasting in those cases.</p>",
        "id": 265647477,
        "sender_full_name": "Jubilee",
        "timestamp": 1640062705
    },
    {
        "content": "<p>I come from C++, so maybe you're just throwing around POD so I want to make sure that's exactly what you mean</p>",
        "id": 265648013,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640063299
    },
    {
        "content": "<p>C++ deprecated POD since it wasn't particularly useful on its own, it sounds like the comparison to C++ would be the distinction between trivial and standard layout types, where <code>Copy</code> is nearly identical to standard layout, and trivial doesn't really have an equivalent since rust has no default constructors</p>",
        "id": 265648109,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640063430
    },
    {
        "content": "<p>In C++ the transparent wrappers would all be considered standard layout</p>",
        "id": 265648136,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640063476
    },
    {
        "content": "<p>referencing this actually <a href=\"https://docs.rs/bytemuck/latest/bytemuck/trait.Pod.html\">https://docs.rs/bytemuck/latest/bytemuck/trait.Pod.html</a></p>",
        "id": 265648356,
        "sender_full_name": "Jubilee",
        "timestamp": 1640063708
    },
    {
        "content": "<p>I am also an incorrigible punster however.</p>",
        "id": 265648378,
        "sender_full_name": "Jubilee",
        "timestamp": 1640063740
    },
    {
        "content": "<p>What is podcasting and why is having trabslarent types a good thing?</p>",
        "id": 265648453,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640063815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/To.20podcast.20or.20not.20to.20podcast/near/265648453\">said</a>:</p>\n<blockquote>\n<p>What is podcasting and why is having trabslarent types a good thing?</p>\n</blockquote>\n<p>if all bitpatterns for a type are admissible, a bitcast is always valid between equally sized types.</p>",
        "id": 265648477,
        "sender_full_name": "Jubilee",
        "timestamp": 1640063859
    },
    {
        "content": "<p>Ah, yeah that would be good for barring NaNs</p>",
        "id": 265648529,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640063891
    },
    {
        "content": "<p>a little off-topic: looking through <code>Pod</code>'s definition -- why does <code>PhantomData&lt;T&gt;: Pod</code> require <code>T: Pod</code>?</p>",
        "id": 265648544,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640063920
    },
    {
        "content": "<p>idk, ask <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>?<br>\n<span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span>  Well actually that's the problem: NaNs are what make all float bitpatterns valid.</p>",
        "id": 265648566,
        "sender_full_name": "Jubilee",
        "timestamp": 1640063962
    },
    {
        "content": "<p>thus allowing transmute from u32 to f32</p>",
        "id": 265648587,
        "sender_full_name": "Jubilee",
        "timestamp": 1640063999
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 265648640,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640064027
    },
    {
        "content": "<p>Hmm</p>",
        "id": 265648671,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640064070
    },
    {
        "content": "<p>Well type casting happens - I’m guessing the library problem here is avoiding all the type combination explosions for the different castings</p>",
        "id": 265648728,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640064136
    },
    {
        "content": "<p>which gets gnarly with the lane number and lane width</p>",
        "id": 265648743,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1640064163
    },
    {
        "content": "<p>wouldn't it work to simply require <code>unsafe</code> wherever <code>std::simd</code>'s api could result in a invalid value (e.g. nonzero add wrapping around to zero)?</p>",
        "id": 265648768,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640064215
    },
    {
        "content": "<p>idk, just noting it is a nontrivial difference.</p>",
        "id": 265648959,
        "sender_full_name": "Jubilee",
        "timestamp": 1640064440
    },
    {
        "content": "<p>is there any reason a simd element must be valid for all bit patterns?</p>",
        "id": 265650389,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640066252
    },
    {
        "content": "<p>not that I can think of...we'd just not implement <code>Into</code> conversion for <code>_m128i</code> for <code>Simd&lt;NonZeroI32, 4&gt;</code></p>",
        "id": 265650485,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640066392
    },
    {
        "content": "<p>It's worth noting that while we are going down the POD rabbit hole, it's pretty easy in C++ to create a trivial and standard layout type that semantically disallows particular bit patterns:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">integral</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">NonZero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">consteval</span><span class=\"w\"> </span><span class=\"n\">NonZero</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"s\">\"value cannot be zero\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">NonZero</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">delete</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">private</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265650626,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640066461
    },
    {
        "content": "<p>it's even easier than that: <code>typedef bool MyType;</code></p>",
        "id": 265650706,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640066538
    },
    {
        "content": "<p>I don't think there's any good reason to define anything stricter than <code>Copy</code> for rust</p>",
        "id": 265650710,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640066543
    },
    {
        "content": "<p>lmao, I guess that's the clever solution, but yes, bool disallows most bit patterns of course</p>",
        "id": 265650726,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640066575
    },
    {
        "content": "<p>I guess I was just trying to illustrate that as far as C++ is concerned, <code>NonZero</code> is the equivalent of POD in C++20</p>",
        "id": 265650738,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640066621
    },
    {
        "content": "<p>Since rust isn't concerned about constructors or inheritance, I think <code>Copy</code> is sufficient</p>",
        "id": 265650802,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640066684
    },
    {
        "content": "<p>Mostly it is very concerned about type validity.</p>",
        "id": 265651088,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067068
    },
    {
        "content": "<p>What do you mean by type validity?</p>",
        "id": 265651181,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067180
    },
    {
        "content": "<p>I just mean that things unravel if you accidentally declare 2 is a bool.</p>",
        "id": 265651200,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067227
    },
    {
        "content": "<p>The same is true for a regular, scalar bool, no?</p>",
        "id": 265651257,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067272
    },
    {
        "content": "<p>I wasn't proposing Simd&lt;bool&gt;, though.</p>",
        "id": 265651294,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067359
    },
    {
        "content": "<p>While that's not necessarily a useful type, is there any reason it couldn't exist?</p>",
        "id": 265651348,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067398
    },
    {
        "content": "<p>likewise I'd like <code>Simd&lt;(), N&gt;</code> and also other ZSTs</p>",
        "id": 265651389,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640067472
    },
    {
        "content": "<p>Curious, why?</p>",
        "id": 265651445,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/To.20podcast.20or.20not.20to.20podcast/near/265651348\">said</a>:</p>\n<blockquote>\n<p>While that's not necessarily a useful type, is there any reason it couldn't exist?</p>\n</blockquote>\n<p>It shouldn't because people would assume it's like std::vector&lt;bool&gt;</p>",
        "id": 265651454,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067529
    },
    {
        "content": "<p>I suppose we should ban <code>Vec&lt;bool&gt;</code>, then!</p>",
        "id": 265651479,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067575
    },
    {
        "content": "<p>That's harmless because there isn't a Mask type right next to it. :P</p>",
        "id": 265651546,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067610
    },
    {
        "content": "<p>Which is, in fact, sometimes rather like vector&lt;bool&gt;</p>",
        "id": 265651552,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/To.20podcast.20or.20not.20to.20podcast/near/265651552\">said</a>:</p>\n<blockquote>\n<p>Which is, in fact, sometimes rather like vector&lt;bool&gt;</p>\n</blockquote>\n<p>To no end of grief etc.</p>",
        "id": 265651562,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067647
    },
    {
        "content": "<p>While I don't necessarily think there should be vectors of bools, I don't think it's worth pretending there's a technical reason it couldn't be done</p>",
        "id": 265651567,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067659
    },
    {
        "content": "<p>It's an API decision.</p>",
        "id": 265651578,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067683
    },
    {
        "content": "<p>I don't know that there isn't, actually?</p>",
        "id": 265651580,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067690
    },
    {
        "content": "<p>Why couldn't there be?</p>",
        "id": 265651584,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640067698
    },
    {
        "content": "<p>I mean for one it's banned in<code>compiler::rustc_typeck</code>. :P<br>\nFor two it's not obvious it monomorphizes and compiles. We certainly thought <code>Simd&lt;f32, 3&gt;</code> would compile without effort, until it didn't.<br>\nWe can't just handwave these details.</p>",
        "id": 265651742,
        "sender_full_name": "Jubilee",
        "timestamp": 1640067903
    },
    {
        "content": "<p>Unfortunately the person who originally wrote that code didn't also have my habit of rambling about related details alongside their code or didn't know or put those notes elsewhere, or we might be able to simply read those notes and know what would validly compile.</p>",
        "id": 265651822,
        "sender_full_name": "Jubilee",
        "timestamp": 1640068016
    },
    {
        "content": "<p>I don't see how that's relevant to handling all bit patterns though. It's certainly possible LLVM wouldn't handle bool specifically, but transparent wrappers of our already supported simd types don't have that problem</p>",
        "id": 265651892,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640068091
    },
    {
        "content": "<p>Have you already run the experiment, then?</p>",
        "id": 265651911,
        "sender_full_name": "Jubilee",
        "timestamp": 1640068128
    },
    {
        "content": "<p>You wouldn't call intrinsics on a NonZero&lt;u8&gt;, you implement it by obtaining the underlying u8</p>",
        "id": 265651920,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640068164
    },
    {
        "content": "<p>All that would need to be extended is repr(simd) to calculate the layout</p>",
        "id": 265651926,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640068193
    },
    {
        "content": "<p>Yes, but it still has to be valid for <code>#[repr(simd)]</code></p>",
        "id": 265651928,
        "sender_full_name": "Jubilee",
        "timestamp": 1640068193
    },
    {
        "content": "<p>yes.</p>",
        "id": 265651934,
        "sender_full_name": "Jubilee",
        "timestamp": 1640068197
    },
    {
        "content": "<p>That's trivial though? That's the whole point of repr(transparent)</p>",
        "id": 265651989,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640068213
    },
    {
        "content": "<p>Is it?</p>",
        "id": 265651997,
        "sender_full_name": "Jubilee",
        "timestamp": 1640068232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/To.20podcast.20or.20not.20to.20podcast/near/265648544\">said</a>:</p>\n<blockquote>\n<p>a little off-topic: looking through <code>Pod</code>'s definition -- why does <code>PhantomData&lt;T&gt;: Pod</code> require <code>T: Pod</code>?</p>\n</blockquote>\n<p>The thinking is that if you have a <code>PhantomData</code> field <em>at all</em> it's quite weird, and mostly the bound there only affects the <code>derive</code> macro anyway because (unlike <code>Copy</code>!) you can always just override the system and say that your type is Pod even if not all fields are Pod (but probably that's unwise (but i'm not your parents (so do whatever))).</p>",
        "id": 265652030,
        "sender_full_name": "Lokathor",
        "timestamp": 1640068293
    },
    {
        "content": "<p>I mean really I was just noting we will need to, at least, audit our implementation for all the cites of transmutes to make sure they're correct.</p>",
        "id": 265652035,
        "sender_full_name": "Jubilee",
        "timestamp": 1640068310
    },
    {
        "content": "<p>Yeah why not? It guarantees the layout and ABI is identical to the field</p>",
        "id": 265652036,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640068311
    },
    {
        "content": "<p>Yeah, I agree that we will need to, which is why <code>SimdElement</code> is unsafe</p>",
        "id": 265652096,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640068340
    },
    {
        "content": "<p>cuz those ZSTs are useful for generics and macros, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">struct_of_arrays</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"cp\">$name</span>:<span class=\"nc\">ident</span><span class=\"p\">[</span><span class=\"cp\">$($generics</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$($field</span>:<span class=\"nc\">ident</span>:<span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"cp\">$name</span><span class=\"o\">&lt;</span><span class=\"cp\">$($generics</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$($field</span>: <span class=\"nc\">Simd</span><span class=\"o\">&lt;</span><span class=\"cp\">$ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">struct_of_arrays</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">MutNodeWalker</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">node</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">prev_node</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_phantom</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265652100,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640068361
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 265652139,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640068433
    },
    {
        "content": "<p>(stupid zulip app)</p>",
        "id": 265652187,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640068457
    },
    {
        "content": "<p>Also, notably, I just recently added this &lt;<a href=\"https://docs.rs/bytemuck/latest/src/bytemuck/pod.rs.html#113-119\">https://docs.rs/bytemuck/latest/src/bytemuck/pod.rs.html#113-119</a>&gt;, though it doesn't show up in the <a href=\"http://docs.rs\">docs.rs</a> build right now.</p>",
        "id": 265652291,
        "sender_full_name": "Lokathor",
        "timestamp": 1640068575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/To.20podcast.20or.20not.20to.20podcast/near/265650710\">said</a>:</p>\n<blockquote>\n<p>I don't think there's any good reason to define anything stricter than <code>Copy</code> for rust</p>\n</blockquote>\n<p>well, once the full safe-transmute project has happened (&lt;3 u jack) then you're correct. But until it happens, you are not.</p>",
        "id": 265652315,
        "sender_full_name": "Lokathor",
        "timestamp": 1640068619
    },
    {
        "content": "<p>for example, when can we view <code>&amp;mut T</code> as a <code>&amp;mut [u8]</code> instead? It's a fair question, inquiring minds want to know.</p>",
        "id": 265652384,
        "sender_full_name": "Lokathor",
        "timestamp": 1640068697
    },
    {
        "content": "<p>My concern is that it feels like my todo list is getting infinitely long, that I now need to implement repr(simd) for transparent types just to get <code>Simd::&lt;i32, _&gt;::clamp</code>, signals are getting crossed between \"this design prevents future improvement/is currently somewhat limiting\" and \"we need to fully test every branch of possible development before even implementing any possible prior components\"</p>",
        "id": 265652391,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640068711
    },
    {
        "content": "<p>well....us talking about what we want in the shiny far-off future doesn't stop us from working on the quickly achievable parts now</p>",
        "id": 265652549,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640068881
    },
    {
        "content": "<p>Personally, I don't think that <code>repr(transparent)</code> should be a concern at this stage. As long as any current designs don't fully lock out the future possibilities it's probably fine.</p>\n<p>And I strongly suspect that special newtype wrappers in general aren't a good fit for simd.</p>",
        "id": 265652550,
        "sender_full_name": "Lokathor",
        "timestamp": 1640068883
    },
    {
        "content": "<p>like, \"a float that's non-nan\" isn't even a thing that core does, so i really don't suspect that simd will do it any faster</p>",
        "id": 265652604,
        "sender_full_name": "Lokathor",
        "timestamp": 1640068935
    },
    {
        "content": "<p>simple feature parity with core, and in the case of floats with std, is already a very tall task</p>",
        "id": 265652624,
        "sender_full_name": "Lokathor",
        "timestamp": 1640068973
    },
    {
        "content": "<p>...but i <em>like</em> nan...<span aria-label=\"bread\" class=\"emoji emoji-1f35e\" role=\"img\" title=\"bread\">:bread:</span></p>",
        "id": 265652649,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640069015
    },
    {
        "content": "<blockquote>\n<p>well....us talking about what we want in the shiny far-off future doesn't stop us from working on the quickly achievable parts now</p>\n</blockquote>\n<p>Well, yes except my PR has been contested for over 2 weeks on the concerns about what it potentially opens up in the future, and we still don't have integer clamp <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 265652650,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640069018
    },
    {
        "content": "<p>but you do have varying shift! which i never put into <code>wide</code> (yet?)</p>",
        "id": 265652717,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069078
    },
    {
        "content": "<p>My point is that the conversion to traits to reduce the API has been stalled on far future possibilities of weird reprs and types</p>",
        "id": 265652753,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640069147
    },
    {
        "content": "<p>that'd be much easier if we took the approach \"SimdElement\" is the only trait a user can see, there won't be any parent traits until we decide what those are to prevent unexpected dependencies ... though maybe that's unnecessary cuz it's still all unstable.</p>",
        "id": 265652923,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640069332
    },
    {
        "content": "<p>That won't really be possible when it's time to implement something like <code>abs</code>, only valid for some element types</p>",
        "id": 265652959,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640069401
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SimdElement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">HAS_ABS</span>: <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265653120,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640069536
    },
    {
        "content": "<p>idk if rustc is far enough along for that to work tho</p>",
        "id": 265653142,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1640069563
    },
    {
        "content": "<p>It is not the current design to have so many traits, but an Abs trait would be a good fit probably</p>",
        "id": 265653170,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069588
    },
    {
        "content": "<p>and so on for more math ops</p>",
        "id": 265653177,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069604
    },
    {
        "content": "<p>I believe the trait would actually be <code>Signed</code>, since we have a handful of other signed ops</p>",
        "id": 265653204,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640069625
    },
    {
        "content": "<p>possibly, though usually grouping too many things under one trait gives a bad time. Better to have more traits that are each dead simple.</p>",
        "id": 265653250,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069667
    },
    {
        "content": "<p>It is the current design to have so many traits, when it was decided that we couldn't keep the individually implemented functions due to the documentation.</p>",
        "id": 265653254,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640069676
    },
    {
        "content": "<p>apologies, i mean the current design of the rest of the standard library</p>",
        "id": 265653266,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069703
    },
    {
        "content": "<p>Agreed</p>",
        "id": 265653273,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1640069711
    },
    {
        "content": "<p>speaking of docs, did you see my idea in the other thread?</p>",
        "id": 265653281,
        "sender_full_name": "Lokathor",
        "timestamp": 1640069722
    }
]