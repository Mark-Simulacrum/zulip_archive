[
    {
        "content": "<blockquote>\n<p>x86-64: CMOV, CMPXCHG8B, FPU, FXSR, MMX, FXSR, SCE, SSE, SSE2<br>\n   x86-64-v2: (close to Nehalem) CMPXCHG16B, LAHF-SAHF, POPCNT, SSE3, SSE4.1, SSE4.2, SSSE3<br>\n   x86-64-v3: (close to Haswell) AVX, AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE, XSAVE<br>\n   x86-64-v4: AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL</p>\n</blockquote>\n<p>These are the proposed target feature levels. Seems about right?<br>\nAMD implemented POPCNT and LZCNT as one set, but Intel deferred LZCNT into part of BMI1.</p>",
        "id": 227035953,
        "sender_full_name": "Jubilee",
        "timestamp": 1613772292
    },
    {
        "content": "<p>Yep</p>",
        "id": 227036253,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613772378
    },
    {
        "content": "<p>oh, it's not this groups problem but i wonder if this gives us a path forward to stabilizing AtomicU128 <em>somewhere</em></p>",
        "id": 227037227,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613772671
    },
    {
        "content": "<p>Never even thought of that, do any architectures actually have 128-bit atomics or do they all need fences?</p>",
        "id": 227037917,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613772827
    },
    {
        "content": "<p>I'm guessing your statement means one of these features provides it...</p>",
        "id": 227038127,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613772882
    },
    {
        "content": "<p>CMPXCHG16B does</p>",
        "id": 227038419,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1613773035
    },
    {
        "content": "<p>\"atomic compare-and-exchange 16 bytes\"</p>",
        "id": 227038580,
        "sender_full_name": "Jubilee",
        "timestamp": 1613773119
    },
    {
        "content": "<p>Ah that'll do it</p>",
        "id": 227038679,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613773177
    },
    {
        "content": "<p>rustc doesn't recognize all these feature names btw, these are from the GCC list so maybe there's a different name we should be using, or maybe rustc hasn't been taught about these names.</p>",
        "id": 227038845,
        "sender_full_name": "Jubilee",
        "timestamp": 1613773236
    },
    {
        "content": "<p>( it should be roughly the same set of features across compilers, since inevitably you'll wind up using the same logic in any case. )</p>",
        "id": 227038899,
        "sender_full_name": "Jubilee",
        "timestamp": 1613773268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Target.20feature.20levels/near/227037917\">said</a>:</p>\n<blockquote>\n<p>Never even thought of that, do any architectures actually have 128-bit atomics or do they all need fences?</p>\n</blockquote>\n<p>x86_64-v2 and itanium both have it. it's helpful for implementing lockfree algorithms (the traditional example is a lockfree stack) without pointer tagging or complicated reclamation algorithms.</p>",
        "id": 227039632,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613773644
    },
    {
        "content": "<p>Yeah, I could also see using that to write two pointers at a time for insertion/removal in certain data structures</p>",
        "id": 227040765,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613774268
    },
    {
        "content": "<p>a pointer and a counter often, but yeah</p>",
        "id": 227042410,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613775241
    },
    {
        "content": "<p>too bad that vec isn't defined as 2 pointers wide instead of 3 pointers</p>",
        "id": 227042588,
        "sender_full_name": "Jubilee",
        "timestamp": 1613775354
    },
    {
        "content": "<p>...what's the third pointer width for?</p>",
        "id": 227042766,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613775456
    },
    {
        "content": "<p>pointer, length, capacity</p>",
        "id": 227042787,
        "sender_full_name": "Jubilee",
        "timestamp": 1613775472
    },
    {
        "content": "<p>I know, it's upsetting.</p>",
        "id": 227042845,
        "sender_full_name": "Jubilee",
        "timestamp": 1613775486
    },
    {
        "content": "<p>Oh forgot completely that length and capacity are separate.  It's the same in C++. Makes some things very efficient</p>",
        "id": 227042899,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613775512
    },
    {
        "content": "<p>I've often lamented that <code>Box&lt;str&gt;</code> wasnt used over String, since then you could turn a <code>&amp;[Box&lt;str&gt;]</code> into a <code>&amp;[&amp;str]</code> 0 cost, whereas <code>&amp;[String]</code> =&gt; <code>&amp;[&amp;str]</code> is not zero cost. Anyway, this is getting pretty off topic.</p>",
        "id": 227042913,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613775521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> okay but do you really usually need to know both length and capacity without following the pointer, or would one be adequate and then storing the other at the pointer landing?</p>",
        "id": 227043000,
        "sender_full_name": "Jubilee",
        "timestamp": 1613775570
    },
    {
        "content": "<p>Cache locality!</p>",
        "id": 227043240,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613775692
    },
    {
        "content": "<p>yeah but if it was 16 bytes it would fit in an xmm register <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 227043350,
        "sender_full_name": "Jubilee",
        "timestamp": 1613775736
    },
    {
        "content": "<p>I can imagine ways to store it in 16 bytes, if we accepted a few limitations.</p>",
        "id": 227049080,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613779560
    },
    {
        "content": "<p>For instance, if we limited the capacity to be representable in an ARM-style immediate encoding.</p>",
        "id": 227049186,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613779633
    },
    {
        "content": "<p>VecButNotTooMany&lt;T&gt;</p>",
        "id": 227049213,
        "sender_full_name": "Lokathor",
        "timestamp": 1613779659
    },
    {
        "content": "<p>More like \"VecButNotTooPreciselyDifferentFromAPowerOfTwo\".</p>",
        "id": 227049230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1613779678
    },
    {
        "content": "<p>that's amazing.</p>",
        "id": 227052257,
        "sender_full_name": "Jubilee",
        "timestamp": 1613782118
    },
    {
        "content": "<p>also I should note that generally size increasing algorithms for Vec or Vec-like things either use 2^N or  something roughly equivalent to *1.5</p>",
        "id": 227052534,
        "sender_full_name": "Jubilee",
        "timestamp": 1613782328
    },
    {
        "content": "<p>so like<br>\nthat would actually very much work, probably. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 227052863,
        "sender_full_name": "Jubilee",
        "timestamp": 1613782600
    },
    {
        "content": "<blockquote>\n<p>Most fundamentally, Vec is and always will be a (pointer, capacity, length) triplet. No more, no less. The order of these fields is completely unspecified, and you should use the appropriate methods to modify these. The pointer will never be null, so this type is null-pointer-optimized.</p>\n</blockquote>\n<p>hmm.</p>",
        "id": 227053016,
        "sender_full_name": "Jubilee",
        "timestamp": 1613782717
    },
    {
        "content": "<p>Thank you for reminding me to finish writing my copy-free growing implementation of Vec using mmap</p>",
        "id": 227053633,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613783248
    },
    {
        "content": "<p>someone just please make a CopyKeyHashMap it would be so handy</p>",
        "id": 227060375,
        "sender_full_name": "Lokathor",
        "timestamp": 1613790323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> a what</p>",
        "id": 227060457,
        "sender_full_name": "Jubilee",
        "timestamp": 1613790415
    },
    {
        "content": "<p>A HashMap but the key must always be Copy so you never need to sometimes pass it by reference and sometimes pass it owned</p>",
        "id": 227060478,
        "sender_full_name": "Lokathor",
        "timestamp": 1613790451
    },
    {
        "content": "<p>ahh</p>",
        "id": 227060488,
        "sender_full_name": "Jubilee",
        "timestamp": 1613790467
    },
    {
        "content": "<p>think of how much simpler life could be for us all</p>",
        "id": 227060490,
        "sender_full_name": "Lokathor",
        "timestamp": 1613790471
    },
    {
        "content": "<p>I feel like that can just be a wrapper over HashMap</p>",
        "id": 227060545,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1613790499
    },
    {
        "content": "<p>quite possibly yes</p>",
        "id": 227060656,
        "sender_full_name": "Lokathor",
        "timestamp": 1613790631
    },
    {
        "content": "<p>could even Deref into a hashmap much of the time</p>",
        "id": 227060665,
        "sender_full_name": "Lokathor",
        "timestamp": 1613790647
    },
    {
        "content": "<p>This is part of why I complained that Vec isn't 16 bytes, btw: <a href=\"https://github.com/rust-lang/rust/issues/35093\">https://github.com/rust-lang/rust/issues/35093</a></p>",
        "id": 227112305,
        "sender_full_name": "Jubilee",
        "timestamp": 1613849405
    }
]