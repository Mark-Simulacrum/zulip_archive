[
    {
        "content": "<p>It's probably more of a userlib thing but it's a question that matters I guess to our shiny future if we want to keep it open or not: Do we want to support a notion of \"Broadcasting\" where e.g. SimdF32&lt;9&gt; + SimdF32&lt;3&gt; works?</p>",
        "id": 242131999,
        "sender_full_name": "Jubilee",
        "timestamp": 1623273538
    },
    {
        "content": "<p>What would that do?</p>",
        "id": 242134172,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623274624
    },
    {
        "content": "<p>broadcasting is like splatting but it \"tiles\" the result instead, so in that example it adds elements lhs: 0..3 and rhs: 0..3, lhs 3..6 and rhs: 0..3, rhs 6..9 and lhs 0..3</p>",
        "id": 242135952,
        "sender_full_name": "Jubilee",
        "timestamp": 1623275576
    },
    {
        "content": "<p>I would support a function that did that (if that's even possible to make efficient?) but I don't think I like the idea of it being automatic</p>",
        "id": 242136122,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623275674
    },
    {
        "content": "<p>Broadcasting to me just means splatting (that's what Intel calls it)</p>",
        "id": 242136191,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623275712
    },
    {
        "content": "<p>i think we want this for literals and probably not for anything else.</p>",
        "id": 242138117,
        "sender_full_name": "Lokathor",
        "timestamp": 1623276953
    },
    {
        "content": "<p>I don't think Rust has a notion of \"only literals\" here. ^^;;;</p>",
        "id": 242138993,
        "sender_full_name": "Jubilee",
        "timestamp": 1623277636
    },
    {
        "content": "<p>though that raises <strong>another</strong> question, lol<br>\ndo we want Simd{Int}&lt;4&gt; + [{nt}; 4] to work</p>",
        "id": 242139154,
        "sender_full_name": "Jubilee",
        "timestamp": 1623277752
    },
    {
        "content": "<p>I don't think most automatic conversions make sense because they're questionably efficient</p>",
        "id": 242140677,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623278877
    },
    {
        "content": "<p>Well this is more cause to have custom literals</p>",
        "id": 242143825,
        "sender_full_name": "Lokathor",
        "timestamp": 1623281537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Do.20we.20want.20to.20Broadcast.20someday.3F/near/242140677\">said</a>:</p>\n<blockquote>\n<p>I don't think most automatic conversions make sense because they're questionably efficient</p>\n</blockquote>\n<p>so I kinda agree but I <strong>wonder</strong> about that re: array of equivalent size vs. operation on a SIMD type, since aside from using <code>movups</code> to load into memory, it's basically going to be equivalent.</p>",
        "id": 242145410,
        "sender_full_name": "Jubilee",
        "timestamp": 1623282973
    },
    {
        "content": "<p>Depending what happens that move is potentially exceptionally expensive</p>",
        "id": 242145437,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623283019
    },
    {
        "content": "<p>Not to say vectors can't spill into memory but the compiler will try hard not to</p>",
        "id": 242145462,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623283056
    },
    {
        "content": "<p>I'm more thinking that if something is in memory, it has to be moved into a vector register at some point, so if you want to add an array and a SIMD register, well, it shouldn't casually fall back into an array, so it should only be one-way, but it doesn't seem significantly different re: optimizations.</p>",
        "id": 242145700,
        "sender_full_name": "Jubilee",
        "timestamp": 1623283219
    },
    {
        "content": "<p>Well I agree with that, but then I think you can just use <code>from_array</code></p>",
        "id": 242145867,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1623283336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Do.20we.20want.20to.20Broadcast.20someday.3F/near/242139154\">said</a>:</p>\n<blockquote>\n<p>do we want Simd{Int}&lt;4&gt; + [{nt}; 4] to work</p>\n</blockquote>\n<p>I'd say that's an easy cut from v1.  It can always be added later.</p>",
        "id": 242146083,
        "sender_full_name": "scottmcm",
        "timestamp": 1623283561
    }
]