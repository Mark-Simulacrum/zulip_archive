[
    {
        "content": "<p>So, we made an MCP that has been seconded where we basically are on point to restructure SIMD codegen. <br>\nBecause <span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span> I love doing more work! <span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span> <br>\n<a href=\"https://github.com/rust-lang/compiler-team/issues/381\">https://github.com/rust-lang/compiler-team/issues/381</a></p>\n<p>Right now, <code>rustc_codegen_llvm</code> is where most of the \"platform intrinsics\" are functionally defined: their names also appear elsewhere but the entire implementation is really in <code>cg_llvm</code>. Right now, however, rustc supports <code>rustc_codegen_ssa</code>, which afaict is basically the pile of backend-agnostic middleware, and so will be our main interface point to any codegen backend.</p>\n<p>The draft of the MCP describes roughly what we're about to do. We have already made some tweaks to <code>cg_llvm</code> because we have been having overly Interesting results from codegen, but this will probably wind up refactoring it a lot more.</p>",
        "id": 235537429,
        "sender_full_name": "Jubilee",
        "timestamp": 1619021176
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Set an expectation that <code>simd_*</code> intrinsics from <code>extern \"platform-intrinsic\"</code> will form the basis of backend-agnostic intrinsics within the standard library.</li>\n<li>Fill in any missing gaps in existing <code>simd_*</code> intrinsics so that <code>core::simd</code> can avoid any direct LLVM dependency.</li>\n<li>Provide non-vectorized reference implementations for all <code>simd_*</code> intrinsics that are exposed through <code>compiler_builtins</code>.</li>\n</ul>\n</blockquote>",
        "id": 235542943,
        "sender_full_name": "Jubilee",
        "timestamp": 1619023313
    },
    {
        "content": "<p>For platform intrinsics, <code>cg_llvm</code> partly uses methods that <code>cg_ssa</code> already requires a backend to implement (which incidentally aligns to what uses a C++ wrapper) but exploiting the fact that all of them are overloaded for SIMD in LLVM, and partly emits LLVM IR directly.</p>\n<p><code>cg_clif</code> has a partial implementation of most of our \"platform intrinsics\", so we already have some points of comparison for those.</p>",
        "id": 235543152,
        "sender_full_name": "Jubilee",
        "timestamp": 1619023410
    }
]