[
    {
        "content": "<p>'ello everyone. HacKMD is here. <a href=\"https://hackmd.io/z_gTcq9CSyegzgclNrlRzg\">https://hackmd.io/z_gTcq9CSyegzgclNrlRzg</a> Meeting in... 90 minutes?</p>",
        "id": 216920214,
        "sender_full_name": "Jubilee",
        "timestamp": 1605555279
    },
    {
        "content": "<p>Proud to report that aside from reading enough to catch up more or less with where we're at I got nothing done over the past week because I spent 4 days mired in a continuous disaster regarding medical supplies and shipping. Huz<strong>zah</strong>. This is America.</p>",
        "id": 216921668,
        "sender_full_name": "Jubilee",
        "timestamp": 1605556084
    },
    {
        "content": "<p>That doesn't sound good .. <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 216924591,
        "sender_full_name": "oliver",
        "timestamp": 1605557376
    },
    {
        "content": "<p>everything cool now?</p>",
        "id": 216925086,
        "sender_full_name": "oliver",
        "timestamp": 1605557568
    },
    {
        "content": "<p>i will be fine. I just warned Ashley a while back that my living in the USA would inevitably cause my participation to waver and I feel oddly vindicated that I actually can point to a specific example. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216926669,
        "sender_full_name": "Jubilee",
        "timestamp": 1605558182
    },
    {
        "content": "<p>Hey all! Sorry I wonâ€™t be able to make it this morning but will catch up later on ðŸ™‚</p>",
        "id": 216929264,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1605559426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202020-11-16/near/216926669\">said</a>:</p>\n<blockquote>\n<p>i will be fine. I just warned Ashley a while back that my living in the USA would inevitably cause my participation to waver and I feel oddly vindicated that I actually can point to a specific example. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>Land of the Free <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 216930053,
        "sender_full_name": "oliver",
        "timestamp": 1605559869
    },
    {
        "content": "<p>honkhonk. <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 216931428,
        "sender_full_name": "Jubilee",
        "timestamp": 1605560499
    },
    {
        "content": "<p>Interesting updates: </p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/78863\">https://github.com/rust-lang/rust/pull/78863</a> has been approved, will merge Sometime Soon.</li>\n<li>It seems we're largely in agreement re: <a href=\"https://github.com/rust-lang/stdsimd/pull/44\">https://github.com/rust-lang/stdsimd/pull/44</a>, <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span></li>\n</ul>",
        "id": 216931684,
        "sender_full_name": "Jubilee",
        "timestamp": 1605560616
    },
    {
        "content": "<p>excellent work on the repr(simd) improvement</p>",
        "id": 216931902,
        "sender_full_name": "Lokathor",
        "timestamp": 1605560707
    },
    {
        "content": "<p>and i guess we can merge the masks pr?</p>",
        "id": 216931932,
        "sender_full_name": "Lokathor",
        "timestamp": 1605560727
    },
    {
        "content": "<p>I wonder if, pending the repr(simd) improvement, the discussion about masks get simpler if we decide to just use const generics</p>",
        "id": 216931937,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605560731
    },
    {
        "content": "<p>All simd types, really, but the masks seem to be the ones that ballooned the most</p>",
        "id": 216931981,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605560760
    },
    {
        "content": "<p>Yeah the definition of each type can probably be greatly simplified and i bet it would even improve compile times</p>",
        "id": 216932214,
        "sender_full_name": "Lokathor",
        "timestamp": 1605560860
    },
    {
        "content": "<p>to not have 64 field structs</p>",
        "id": 216932230,
        "sender_full_name": "Lokathor",
        "timestamp": 1605560866
    },
    {
        "content": "<p>Also significantly cut down on the macros</p>",
        "id": 216932273,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605560884
    },
    {
        "content": "<p>Would much prefer generics over macros in general</p>",
        "id": 216932334,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605560900
    },
    {
        "content": "<p>yeah, it is like i keep telling people, a lot of rust is \"necessary evil\" category stuff XD</p>",
        "id": 216932576,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561013
    },
    {
        "content": "<p>Come to think of it, once we move to platform intrinsics the functions themselves could probably also be defined over generic vector length?</p>",
        "id": 216932699,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561075
    },
    {
        "content": "<p>pretty much</p>",
        "id": 216932749,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561104
    },
    {
        "content": "<p>Though like array ops we probably will start by only implementing on the base set</p>",
        "id": 216932764,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561112
    },
    {
        "content": "<p>Yeah, <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> did a great job on reviving that~</p>",
        "id": 216932767,
        "sender_full_name": "Jubilee",
        "timestamp": 1605561113
    },
    {
        "content": "<p>yeah we'd have to be careful about lane counts of people would think they can just do any lane count and get good results</p>",
        "id": 216932885,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561148
    },
    {
        "content": "<p>And I agree, we probably will want to review stuff if that gets in! (and doesn't have some horrible compiler clash)</p>",
        "id": 216932897,
        "sender_full_name": "Jubilee",
        "timestamp": 1605561153
    },
    {
        "content": "<p>which is... not super the case</p>",
        "id": 216932903,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561155
    },
    {
        "content": "<p>Yep. Though I could see wanting to write some arbitrarily long vector type because it's convenient for some reason</p>",
        "id": 216933001,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561205
    },
    {
        "content": "<p>A vector&lt;f32, 1024&gt; should probably work fine if for some reason that's what you want</p>",
        "id": 216933108,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561245
    },
    {
        "content": "<p>That is the ideal i suppose</p>",
        "id": 216933132,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561259
    },
    {
        "content": "<p>We probably will find ways to limit the API so it makes sense as more const generic stuff comes out. We shouldn't stabilize without those limitations, but it would be fine if we played a little fast and loose right now and riddled our code with FIXMEs.</p>",
        "id": 216933617,
        "sender_full_name": "Jubilee",
        "timestamp": 1605561503
    },
    {
        "content": "<p>i agree, that's really what Nightly is all about after all</p>",
        "id": 216933668,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561536
    },
    {
        "content": "<p>I would like to at least be able to define our types via const generics to start</p>",
        "id": 216933732,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561582
    },
    {
        "content": "<p>I only briefly looked at the PR but it looks like that was tested?</p>",
        "id": 216933761,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561601
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 216933821,
        "sender_full_name": "Jubilee",
        "timestamp": 1605561614
    },
    {
        "content": "<p>Awesome</p>",
        "id": 216933832,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561618
    },
    {
        "content": "<p>baaaasically this feature is for us soooo we'll want to put it through all the paces.</p>",
        "id": 216933876,
        "sender_full_name": "Jubilee",
        "timestamp": 1605561642
    },
    {
        "content": "<p>Well, a generic vec and then type aliases is how packed_simd went, and it was ultimately not the worst thing in the world, though we vaguely resolved in the past to not expose a generic API using std_simd</p>",
        "id": 216933891,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561653
    },
    {
        "content": "<p>Maybe we should reconsider it? Though it would probably be useful to at a minimum provide aliases to specific lane counts</p>",
        "id": 216934023,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561718
    },
    {
        "content": "<p>So the mild problem is that we want to offer different ops for signed int, unsigned int, and floating point types</p>",
        "id": 216934134,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561758
    },
    {
        "content": "<p>but if we have base types for <code>iNxL</code>, <code>uNxL</code>, and <code>fNxL</code> and then put ops on those types</p>",
        "id": 216934196,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561794
    },
    {
        "content": "<p>that might keep things making sense</p>",
        "id": 216934211,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561802
    },
    {
        "content": "<p>and realistically, the integer types might be the same set of ops as well</p>",
        "id": 216934254,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561821
    },
    {
        "content": "<p>Yeah, that's one way to do it</p>",
        "id": 216934264,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561825
    },
    {
        "content": "<p>Actually I think you can add impl blocks for like.. <code>impl Simd&lt;f32, N&gt; { ...</code> and then we put the floating ops there, and then we have just two blocks that can be done via macro or whatever</p>",
        "id": 216934484,
        "sender_full_name": "Lokathor",
        "timestamp": 1605561939
    },
    {
        "content": "<p>Yeah, I was just wondering if that's possible, making N generic there too?</p>",
        "id": 216934578,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561970
    },
    {
        "content": "<p>I think we can change our mind if the affordances are good enough.</p>",
        "id": 216934591,
        "sender_full_name": "Jubilee",
        "timestamp": 1605561979
    },
    {
        "content": "<p>Agreed</p>",
        "id": 216934604,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605561985
    },
    {
        "content": "<p>the reason the generic API kinda was bad was that it was uh bad</p>",
        "id": 216934635,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562000
    },
    {
        "content": "<p>oops i missed the N generic part, so uh, you <em>should</em> be able to write <code>impl&lt;const N: usize&gt; Simd&lt;$this_ty, N&gt; {</code> in a macro, and then the macro expands that for both f32 and f64</p>",
        "id": 216934704,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562037
    },
    {
        "content": "<p>Not... awful, but not great. But that was intimately tied with the state of generics and therefore const generics at the time.</p>",
        "id": 216934711,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562039
    },
    {
        "content": "<p>Yeah, I think we should only expose it without compromises</p>",
        "id": 216934886,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562125
    },
    {
        "content": "<p>\"without compromises\"?</p>",
        "id": 216934937,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562148
    },
    {
        "content": "<p>I need to do the thing I said I was going to do last week, this week.</p>",
        "id": 216934941,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562150
    },
    {
        "content": "<p>Like, don't make anything \"weird\" in the interface because of const generics limitations, just make it non-generic instead</p>",
        "id": 216935057,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562209
    },
    {
        "content": "<p>Like how array traits have been slowly moving to generic as it's supported</p>",
        "id": 216935090,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562230
    },
    {
        "content": "<p>Ah yeah.</p>",
        "id": 216935110,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562241
    },
    {
        "content": "<p>Though I guess they're probably all done now</p>",
        "id": 216935115,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562246
    },
    {
        "content": "<p>well with a const generic impl block that's got f32 applied in the \"element type\" position, it'll have for example Simd&lt;f32, 4&gt; and Simd&lt;f32, 5&gt; and so on all available.</p>",
        "id": 216935122,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562251
    },
    {
        "content": "<p>with min_const_generics stabilized it shouldn't give anyone any trouble, and that's aimed for stable by the end of the year</p>",
        "id": 216935184,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562284
    },
    {
        "content": "<p>hmm I think we might want to do something that looks more like vf32&lt;4&gt;</p>",
        "id": 216935192,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562289
    },
    {
        "content": "<p>we also totally could do vf32 and vf64 and vi32 etc</p>",
        "id": 216935319,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562337
    },
    {
        "content": "<p>That would require a tiny bit more duplication, but might be better</p>",
        "id": 216935328,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562341
    },
    {
        "content": "<p>There are only so many primitive types...</p>",
        "id": 216935360,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562359
    },
    {
        "content": "<p>like 12 i think</p>",
        "id": 216935428,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562389
    },
    {
        "content": "<p>Yep</p>",
        "id": 216935477,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562417
    },
    {
        "content": "<p>Yeah, I think it's more natural with the way Rust's types are laid out.</p>",
        "id": 216935565,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562448
    },
    {
        "content": "<p>Maybe I'll wait for the PR to land and make it to nightly and pick this up again from there</p>",
        "id": 216935733,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562541
    },
    {
        "content": "<p>Whatever works with your schedule imo.</p>",
        "id": 216935815,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562568
    },
    {
        "content": "<p>yeah since we're basically also assuming min_const_generics here then we don't need to rush</p>",
        "id": 216935902,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562622
    },
    {
        "content": "<p>Yep</p>",
        "id": 216935935,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562642
    },
    {
        "content": "<p>Though I think this could stabilize before min_const_generics does if we really wanted to (and somehow managed to beat it to the finish line)</p>",
        "id": 216936139,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562734
    },
    {
        "content": "<p>Ha ha we won't.</p>",
        "id": 216936167,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562747
    },
    {
        "content": "<p>&lt;_&lt;</p>",
        "id": 216936173,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562749
    },
    {
        "content": "<p>I mean, I don't want to go \"boo on optimism\" I just mean that mcg afaict is like, verging on the edge of stabilization and doing cleanup work to do that, not mid-implementation.</p>",
        "id": 216936256,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562799
    },
    {
        "content": "<p>min_const_generics is scheduled for \"end of the year\", we've got <em>way</em> too much ground to cover, and our \"shake it out in Nightly\" period will probably be at least a 3 month cycle</p>",
        "id": 216936349,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562837
    },
    {
        "content": "<p>we might be able to beat full const generics though</p>",
        "id": 216936405,
        "sender_full_name": "Lokathor",
        "timestamp": 1605562869
    },
    {
        "content": "<p>I was mostly joking, but pointing out that we can internally use unstable features</p>",
        "id": 216936416,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1605562875
    },
    {
        "content": "<p>That is <em>very</em> true and will be even more useful for the more advanced const generics features that will be apart from mcg.</p>",
        "id": 216936474,
        "sender_full_name": "Jubilee",
        "timestamp": 1605562909
    },
    {
        "content": "<p>But so, useful discussion, it sounds like we are currently on Cruise Control for this week and will begin twiddling with things soon, probably should check on status of our MCP.</p>",
        "id": 216937337,
        "sender_full_name": "Jubilee",
        "timestamp": 1605563360
    },
    {
        "content": "<p>Everyone is in favor of reconsidering the amount of genericness in our API to some degree but there is a slight lean towards avoiding the Totally Generic API like packed_simd which I think is good.</p>",
        "id": 216937510,
        "sender_full_name": "Jubilee",
        "timestamp": 1605563443
    },
    {
        "content": "<p>You are now free to move about the cabin. <span aria-label=\"airplane\" class=\"emoji emoji-2708\" role=\"img\" title=\"airplane\">:airplane:</span></p>",
        "id": 216937566,
        "sender_full_name": "Jubilee",
        "timestamp": 1605563474
    },
    {
        "content": "<p>Just catching up now <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I'm going to try implement <code>platform-intrinsics</code> for <code>floor</code>, <code>ceil</code>, <code>round</code>, and <code>truncate</code> ahead of our MCP, which is waiting on a <code>r+</code> from the compiler team <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216957760,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1605577856
    },
    {
        "content": "<p>Can always do the <code>LengthAtMost32</code>-style trick if you want to restrict it to a particular set of lengths for a while.</p>",
        "id": 216967043,
        "sender_full_name": "scottmcm",
        "timestamp": 1605589513
    }
]