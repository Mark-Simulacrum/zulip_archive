[
    {
        "content": "<p>hi</p>",
        "id": 259018996,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635195158
    },
    {
        "content": "<p>Oh hello.</p>",
        "id": 259019075,
        "sender_full_name": "Jubilee",
        "timestamp": 1635195209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> meeting</p>",
        "id": 259019828,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635195602
    },
    {
        "content": "<p>for <a href=\"https://github.com/rust-lang/portable-simd/issues/177\">portable-simd#177</a>, do we want that API, or is <code>f32x8::from_array(s[..8].try_into().unwrap())</code> sufficient?</p>",
        "id": 259020240,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635195775
    },
    {
        "content": "<p>I think we should have an explicit variant for convenience.</p>",
        "id": 259020653,
        "sender_full_name": "Jubilee",
        "timestamp": 1635195975
    },
    {
        "content": "<p>Hi, apparently my zulip notifications are broken but I got that ping via email</p>",
        "id": 259020743,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196036
    },
    {
        "content": "<p>I think we want that API too, probably, but it should use try_into internally</p>",
        "id": 259020921,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196117
    },
    {
        "content": "<p>I'm on the fence if we should have one for aligned slice accesses, since that's a little bit contradictory to what a slice means</p>",
        "id": 259020999,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196155
    },
    {
        "content": "<p>zulip notifications are broken for me too, sadly...</p>",
        "id": 259021067,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635196201
    },
    {
        "content": "<p>(a function to convert slices of scalars into slices of vectors would be nice)</p>",
        "id": 259021113,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196206
    },
    {
        "content": "<p>that one would have to get the alignment right, plain <code>from_slice</code> can use an unaligned load.</p>",
        "id": 259021211,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635196266
    },
    {
        "content": "<p>Yeah, I'm thinking they would be very different</p>",
        "id": 259021263,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196299
    },
    {
        "content": "<p>maybe we should let safe transmute handle the slice to slice of vectors conversion?</p>",
        "id": 259021372,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635196345
    },
    {
        "content": "<p>maybe via a <code>[T]::aligned_chunks_transmute</code> or similar function?</p>",
        "id": 259021573,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635196448
    },
    {
        "content": "<p>Yeah I'm willing to hold off with that one, you can do it right now with align_to, it's just unsafe</p>",
        "id": 259021590,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-10-25/near/259021113\">said</a>:</p>\n<blockquote>\n<p>(a function to convert slices of scalars into slices of vectors would be nice)</p>\n</blockquote>\n<p>Isn't this just <code>fn align_to</code>?</p>",
        "id": 259021597,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196461
    },
    {
        "content": "<p>ah</p>",
        "id": 259021602,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196464
    },
    {
        "content": "<p>With vectors you can do it safely, that's the only difference</p>",
        "id": 259021623,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196475
    },
    {
        "content": "<p>So yeah, probably safe transmute, not us</p>",
        "id": 259021639,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196486
    },
    {
        "content": "<p>Ah.</p>",
        "id": 259021815,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196576
    },
    {
        "content": "<p>But yeah, I offered my comment: <a href=\"https://github.com/rust-lang/portable-simd/pull/177#issuecomment-951338180\">https://github.com/rust-lang/portable-simd/pull/177#issuecomment-951338180</a></p>",
        "id": 259021827,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196590
    },
    {
        "content": "<p>Basically, \"fuck alignment\".</p>",
        "id": 259021849,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196609
    },
    {
        "content": "<p>\"The processor WILL compensate.\"</p>",
        "id": 259021862,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196619
    },
    {
        "content": "<p>Anything you can do in a function, and not doing basically type sorcery, will compile in enough branches that we basically shouldn't offer a specially aligned function unless it IS as an unsafe assertion.</p>",
        "id": 259022056,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196715
    },
    {
        "content": "<p>I think if you want alignment you might as well do it yourself, the way you want it, with a slice of vectors</p>",
        "id": 259022142,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196765
    },
    {
        "content": "<p>Right.</p>",
        "id": 259022157,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196777
    },
    {
        "content": "<p>Because you're going to inherently need to handle the unaligned part</p>",
        "id": 259022171,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196785
    },
    {
        "content": "<p>That's kind of what I mean re: type sorcery.</p>",
        "id": 259022181,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196789
    },
    {
        "content": "<p>Yep</p>",
        "id": 259022190,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196793
    },
    {
        "content": "<p>Realistically I almost always use unaligned loads and stores and they're fine for most things</p>",
        "id": 259022266,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635196816
    },
    {
        "content": "<p>There's this guy who helped design the stdx::simd for C++ API and he has similar notes on basically \"yeah, you can achieve better vectorization by using types that are already parameterized by vector lengths\".</p>",
        "id": 259022369,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196869
    },
    {
        "content": "<p>I have it saved somewhere in my infinite tabs.</p>",
        "id": 259022403,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196893
    },
    {
        "content": "<blockquote>\n<p>My conclusion is that there is no strong reason to require alignment, as modern Arm and x86-64 processors will incur at most a minimal speed penalty. My understanding is that the situation is only slightly worse on PPC, requiring a more recent ISA to be specified. That also helps with x86-64 as everything becomes VEX encoded, which allows certain leniencies.</p>\n</blockquote>",
        "id": 259022503,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196931
    },
    {
        "content": "<p>Can you check me on the PPC knowledge, <span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span>?</p>",
        "id": 259022549,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196965
    },
    {
        "content": "<p>If you happen to know off the top of your head.</p>",
        "id": 259022573,
        "sender_full_name": "Jubilee",
        "timestamp": 1635196980
    },
    {
        "content": "<p>sounds about right, though I'm not as familiar with the PPC SIMD instructions (VSX/VMX aka. AltiVec)</p>",
        "id": 259022750,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635197075
    },
    {
        "content": "<p>Yeah, the earliest PPC ones are a bit gnarly since you have to reissue the instruction.</p>",
        "id": 259022808,
        "sender_full_name": "Jubilee",
        "timestamp": 1635197111
    },
    {
        "content": "<p>lol</p>",
        "id": 259022813,
        "sender_full_name": "Jubilee",
        "timestamp": 1635197114
    },
    {
        "content": "<p>And to zoom in, I think basically we want to provide at most three things for slices that aren't \"vector ops per se\":</p>\n<blockquote>\n<p>So, given that, the known-alignment version would be best off for now as an explicit unsafe variant, to erase checks. You don't have to add that to this PR, and I think it can already be written anyways? A version that might enable iteration for a large slice and multiple reads might be better off optimized by us, but it's not immediately obvious what the best way to write that is, so it should also be left to the future.</p>\n</blockquote>\n<p>Basically: we can offer <code>movaps</code> as a direct function for people who <strong>know they want to and can use movaps</strong>.</p>",
        "id": 259022863,
        "sender_full_name": "Jubilee",
        "timestamp": 1635197153
    },
    {
        "content": "<p>And <code>from_slice</code> is basically <code>movups</code> and what you should default to.</p>",
        "id": 259022933,
        "sender_full_name": "Jubilee",
        "timestamp": 1635197173
    },
    {
        "content": "<p>well, there's no problem for SimpleV since all load/stores only require element alignment at most, not whole-vector alignment.</p>",
        "id": 259023009,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635197228
    },
    {
        "content": "<p>And then we might want to offer basically a preoptimized stripmining loop.</p>",
        "id": 259023018,
        "sender_full_name": "Jubilee",
        "timestamp": 1635197234
    },
    {
        "content": "<p>Basically: a loop already optimized for <code>align_to</code>.<br>\nAnd right, that kind of loop being optimized on a hardware basis is another thing.</p>",
        "id": 259023165,
        "sender_full_name": "Jubilee",
        "timestamp": 1635197317
    },
    {
        "content": "<p>I think that loop logic would basically be provided by safe transmute's <code>[T]::aligned_chunks_transmute</code> function I referred to above?</p>",
        "id": 259023594,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635197539
    },
    {
        "content": "<p>Ah, then we probably shouldn't bother.</p>",
        "id": 259023684,
        "sender_full_name": "Jubilee",
        "timestamp": 1635197627
    },
    {
        "content": "<p>maybe a better name is <code>safe_align_to</code></p>",
        "id": 259023696,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635197636
    },
    {
        "content": "<p>No idea about the test failures.</p>",
        "id": 259024404,
        "sender_full_name": "Jubilee",
        "timestamp": 1635198040
    },
    {
        "content": "<p>the unsafe known-alignment known-size version of <code>Simd::from_slice</code> should just be <code>ptr::read(s.as_ptr() as *const _)</code> imho</p>",
        "id": 259024420,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635198049
    },
    {
        "content": "<p>Yeah I think leaving it as that would be fine.</p>",
        "id": 259024463,
        "sender_full_name": "Jubilee",
        "timestamp": 1635198095
    },
    {
        "content": "<p>I think we also have <a href=\"https://github.com/rust-lang/rust/pull/88868\">https://github.com/rust-lang/rust/pull/88868</a> as a concern? <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span></p>",
        "id": 259024482,
        "sender_full_name": "Jubilee",
        "timestamp": 1635198109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-10-25/near/259024404\">said</a>:</p>\n<blockquote>\n<p>No idea about the test failures.</p>\n</blockquote>\n<p>same here, I'd guess it's a llvm bug.</p>",
        "id": 259024502,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635198121
    },
    {
        "content": "<p>Love you too, LLVM.</p>",
        "id": 259024632,
        "sender_full_name": "Jubilee",
        "timestamp": 1635198201
    },
    {
        "content": "<p>created <a href=\"https://github.com/rust-lang/project-safe-transmute/issues/12\">https://github.com/rust-lang/project-safe-transmute/issues/12</a> for <code>safe_align_to</code></p>",
        "id": 259025515,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1635198802
    },
    {
        "content": "<p>Another thought for the <code>align_to</code> conversation: there's (nightly) <code>as_chunks</code> on slices that does <code>&amp;[T]</code> =&gt; <code>(&amp;[[T; N]], &amp;[T])</code>.  Maybe have a specific <code>as_simd</code> on slices that does the <code>&amp;[T]</code> =&gt; <code>(&amp;[T], &amp;[Simd&lt;T, N&gt;], &amp;[T])</code>?</p>",
        "id": 259025904,
        "sender_full_name": "scottmcm",
        "timestamp": 1635199079
    },
    {
        "content": "<p>Having it doable through safe transmute would be nice too, but I think the specific version would still be worth having.</p>",
        "id": 259025985,
        "sender_full_name": "scottmcm",
        "timestamp": 1635199122
    },
    {
        "content": "<p>Plausible.</p>",
        "id": 259026060,
        "sender_full_name": "Jubilee",
        "timestamp": 1635199180
    },
    {
        "content": "<p>Ah so... Righto. I think we didn't have much to discuss. ^^;<br>\nI am thinking about adding some simplifications to the way the crate is written but uhhh there isn't really much to discuss there until I actually write it, tbh.</p>",
        "id": 259026426,
        "sender_full_name": "Jubilee",
        "timestamp": 1635199365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> It can't use <code>try_into</code> due to limits on const trait fn.</p>",
        "id": 259029184,
        "sender_full_name": "Jubilee",
        "timestamp": 1635200977
    },
    {
        "content": "<p>Ah right</p>",
        "id": 259029601,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635201250
    },
    {
        "content": "<p>Hopefully the compiler optimizes that well</p>",
        "id": 259029753,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1635201346
    },
    {
        "content": "<p>It could be non-<code>const fn</code>.</p>",
        "id": 259031942,
        "sender_full_name": "Jubilee",
        "timestamp": 1635202873
    }
]