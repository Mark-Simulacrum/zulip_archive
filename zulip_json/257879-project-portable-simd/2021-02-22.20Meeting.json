[
    {
        "content": "<p>Hello everyone! hackmd is here: <a href=\"https://hackmd.io/DIIR21LWTKmEIhgTVaL9zg\">https://hackmd.io/DIIR21LWTKmEIhgTVaL9zg</a><br>\nEveryone kinda already chatted a bit but let's formally say hi for a moment!<br>\nDoes anyone have anything to introduce?</p>",
        "id": 227340527,
        "sender_full_name": "Jubilee",
        "timestamp": 1614029426
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 227340571,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614029448
    },
    {
        "content": "<p>none to introduce here</p>",
        "id": 227340602,
        "sender_full_name": "Lokathor",
        "timestamp": 1614029459
    },
    {
        "content": "<p>Nothing here really either</p>",
        "id": 227340810,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614029540
    },
    {
        "content": "<p>Alrighty then.<br>\nAre we in consensus that barring non-2^N vectors inside rustc should be reverted on account of the SPIRV/glam issue?</p>",
        "id": 227341039,
        "sender_full_name": "Jubilee",
        "timestamp": 1614029627
    },
    {
        "content": "<p>yeah, i'm not even clear why that was done in the first place, i thought the lenatmost64 fixed things</p>",
        "id": 227341142,
        "sender_full_name": "Lokathor",
        "timestamp": 1614029659
    },
    {
        "content": "<p>It was mostly because cranelift didn't support it so you'll get errors there</p>",
        "id": 227341193,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614029691
    },
    {
        "content": "<p>So it was an attempt to unify behavior</p>",
        "id": 227341226,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614029703
    },
    {
        "content": "<p>Mostly to make things easier for cg_clif, they may need a bit more error-handling code to tolerate that case, which is fine.<br>\nI think our library can be limited to 2^N vectors just fine.</p>",
        "id": 227341229,
        "sender_full_name": "Jubilee",
        "timestamp": 1614029704
    },
    {
        "content": "<p>We can add another feature that enables non-power-of-two vectors if we wanted too</p>",
        "id": 227341319,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614029737
    },
    {
        "content": "<p><em>grumbles</em></p>",
        "id": 227341347,
        "sender_full_name": "Lokathor",
        "timestamp": 1614029752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> ?</p>",
        "id": 227341412,
        "sender_full_name": "Jubilee",
        "timestamp": 1614029766
    },
    {
        "content": "<p>i mean i guess we don't need to give cranelift problems, but this is what i've always been against the idea of: limiting the common case that one of our backends <em>can</em> handle just because some <em>other</em> backend <em>can't</em> handle it.</p>",
        "id": 227341530,
        "sender_full_name": "Lokathor",
        "timestamp": 1614029819
    },
    {
        "content": "<p>i'm gonna make the lokalift backend, and all inputs will crash, better cancel rustc ;P</p>",
        "id": 227341611,
        "sender_full_name": "Lokathor",
        "timestamp": 1614029854
    },
    {
        "content": "<p>lol</p>",
        "id": 227341617,
        "sender_full_name": "Jubilee",
        "timestamp": 1614029859
    },
    {
        "content": "<p>Well, I think we Need to relax the restrictions inside rustc, and our library can be a bit pessimistic for right now for the user's sake with an eye to quickly loosening things up on that score.</p>",
        "id": 227341822,
        "sender_full_name": "Jubilee",
        "timestamp": 1614029946
    },
    {
        "content": "<p>( honestly, at this point half the reason is that simd_shuffle isn't generic over length. )</p>",
        "id": 227342153,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030092
    },
    {
        "content": "<p>SO<br>\nGPUs and ABIs oh my</p>",
        "id": 227342176,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030106
    },
    {
        "content": "<p>...I, personally, am still trying to decipher that bit of the Vulkan standard.</p>",
        "id": 227342309,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030156
    },
    {
        "content": "<p>like I start reading it and it gets very \"I am not sure if I am on drugs or if I need to take more drugs\" very quickly.</p>",
        "id": 227342382,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030188
    },
    {
        "content": "<p>I think Vec3s are in the immediate sense \"out of scope\" for us, but I think we should definitely aim at generating data structures that people expect in the long term, since there's some fairly obvious utility overlap. It'd be kinda nice to not care whether the vector registers we're interacting with are on a CPU or GPU!</p>",
        "id": 227342819,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030354
    },
    {
        "content": "<p>especially since we're already const generic over length.<br>\nI don't think there's anything terribly actionable atm though, thinking about it, aside from \"maybe someday we'll have to convey that data structures can get really weird to rustc\".</p>\n<p>which brings me to the libm thing and the soundness hole.</p>",
        "id": 227343085,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030471
    },
    {
        "content": "<p>I don't see any solution aside from \"teach rustc what a vector register actually is\" in the long term.<br>\nIn the short term, do we have to split the crate into a core_simd and std_simd? That's not great but if it's what we've got to do then I guess it's what we've got to do?</p>",
        "id": 227343317,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030555
    },
    {
        "content": "<p>What would be std specific?</p>",
        "id": 227343382,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030587
    },
    {
        "content": "<p>You mean the libm functions?</p>",
        "id": 227343439,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030603
    },
    {
        "content": "<p>the stuff for SimdF32 yeah.</p>",
        "id": 227343497,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030617
    },
    {
        "content": "<p>That makes sense to me (though I don't think we need to split the crate, just use a cargo feature)</p>",
        "id": 227343529,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030634
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I know Lokathor has used similar solutions for his crates before, <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> do you think that would work?</p>",
        "id": 227343669,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030713
    },
    {
        "content": "<p>i don't think that <em>simd</em> data types and <em>gpu</em> data types should be the same</p>",
        "id": 227343761,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030736
    },
    {
        "content": "<p>For <code>round</code> specifically though I think we just need to teach LLVM to generate that.  Rounding isn't <em>that hard</em></p>",
        "id": 227343784,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030751
    },
    {
        "content": "<p>they follow their own rules for their own purposes, and trying to make them magically identical doesn't get you as much as a From impl here and there does.</p>",
        "id": 227343815,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030765
    },
    {
        "content": "<p>fair enough!</p>",
        "id": 227343830,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030774
    },
    {
        "content": "<p>I think I disagree only because LLVM treats them as one and the same</p>",
        "id": 227343869,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030791
    },
    {
        "content": "<p>on the gpu you're following a spec like the Std130 or Std430 or whatever spec, and there's no reason that such a spec necessarily lines up with how an intel sse register works, or with a neon register works</p>",
        "id": 227344005,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030845
    },
    {
        "content": "<p>and in rust you want to then account for the padding as empty spaces to avoid uninit memory</p>",
        "id": 227344046,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030863
    },
    {
        "content": "<p>and all these concerns</p>",
        "id": 227344052,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030866
    },
    {
        "content": "<p>There are simd instruction sets that probably don't need padding</p>",
        "id": 227344117,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030904
    },
    {
        "content": "<p>tbf that also applies between two different SIMD registers on different architectures.</p>",
        "id": 227344133,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030908
    },
    {
        "content": "<p>as we have unfortunately encountered.</p>",
        "id": 227344173,
        "sender_full_name": "Jubilee",
        "timestamp": 1614030924
    },
    {
        "content": "<p>okay but i mean on the GPU you need that padding</p>",
        "id": 227344183,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030929
    },
    {
        "content": "<p>specifically, you're usually building up <em>structs</em> of these things on the GPU, like \"this is all my vertex data\" and then the position of one field is set by previous fields and stuff, it's much more like a C struct than a list of identical elements of some length N</p>",
        "id": 227344231,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030954
    },
    {
        "content": "<p>A Vec3 on SSE needs padding too</p>",
        "id": 227344232,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030955
    },
    {
        "content": "<p>What's the difference?</p>",
        "id": 227344273,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030964
    },
    {
        "content": "<p>I think perhaps layout of SIMD vectors are platform-specific</p>",
        "id": 227344343,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614030987
    },
    {
        "content": "<p>right but in sse you don't have \"a vec3 then a vec2 then a vec 3 then a vec3, now an array where each element is what i just said\"</p>",
        "id": 227344344,
        "sender_full_name": "Lokathor",
        "timestamp": 1614030987
    },
    {
        "content": "<p>Well you can do that, but the layout would be different</p>",
        "id": 227344415,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031021
    },
    {
        "content": "<p>I don't think there's any way to avoid layout being platform specific</p>",
        "id": 227344509,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031067
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> already found bugs in the x86 vector layouts, where small vectors are misaligned</p>",
        "id": 227344584,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031091
    },
    {
        "content": "<p>sure, but in this case, each gpu standard is \"a platform\", and also it doesn't need to be represented within llvm as being a simd thing</p>",
        "id": 227344633,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031120
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 227344638,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031127
    },
    {
        "content": "<p>Well, they <em>are</em> LLVM vectors though, right?</p>",
        "id": 227344698,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031154
    },
    {
        "content": "<p>no</p>",
        "id": 227344724,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031160
    },
    {
        "content": "<p>the spirv compiler doesn't even use LLVM</p>",
        "id": 227344740,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031166
    },
    {
        "content": "<p>fwiw</p>",
        "id": 227344746,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031168
    },
    {
        "content": "<p>though I don't know if there is a GPU compiler does use LLVM</p>",
        "id": 227344781,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031183
    },
    {
        "content": "<p>I believe there's experimental SPIR-V for LLVM, I could be wrong</p>",
        "id": 227344890,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031207
    },
    {
        "content": "<p>CUDA definitely uses LLVM but I don't know much beyond that</p>",
        "id": 227344977,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031221
    },
    {
        "content": "<p>these are gpu types called things like vec3 and mat4 and so on, but they're basically just syntax sugar for a pile of float fields (or integer, double, bool etc)</p>",
        "id": 227345030,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031230
    },
    {
        "content": "<p>but like, you don't do vec8</p>",
        "id": 227345136,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031249
    },
    {
        "content": "<p>Well I'm okay with putting off if stdsimd maps to gpu or not</p>",
        "id": 227345240,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031270
    },
    {
        "content": "<p>I'm still not convinced</p>",
        "id": 227345281,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031279
    },
    {
        "content": "<p>You don't do missized vectors on SSE either but LLVM pads them to fit</p>",
        "id": 227345397,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031303
    },
    {
        "content": "<p>I do think we should use these problems to come to a conclusion if stdsimd's vectors are guaranteed to have the same layout (particularly size) on all platforms</p>",
        "id": 227345890,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031412
    },
    {
        "content": "<p>the answer is almost surely \"they're not\"</p>",
        "id": 227345959,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031435
    },
    {
        "content": "<p>I agree. Which I think leaves the door open to us supporting gpu as simd if that makes sense in the future</p>",
        "id": 227346128,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031473
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 227346258,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031509
    },
    {
        "content": "<p>I think we are still left mostly with a lack of conclusion here.</p>",
        "id": 227346342,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031530
    },
    {
        "content": "<p>I remember there was some grumbling over \"f32x3 has the same size as f32x4 on most platforms\" earlier</p>",
        "id": 227346354,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031534
    },
    {
        "content": "<p>but I am not terribly worried about that.</p>",
        "id": 227346408,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-02-22.20Meeting/near/227344781\">said</a>:</p>\n<blockquote>\n<p>though I don't know if there is a GPU compiler does use LLVM</p>\n</blockquote>\n<p>the underlying compilers of shader languages in the GPU drivers sometimes use LLVM, for sure. not that its terribly relevant to us.</p>",
        "id": 227346421,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614031551
    },
    {
        "content": "<p>Mmm~</p>",
        "id": 227346515,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031568
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/issues/6#issuecomment-783708710\">https://github.com/rust-lang/stdsimd/issues/6#issuecomment-783708710</a></p>",
        "id": 227346675,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031610
    },
    {
        "content": "<p>I think maybe our answer is \"we aren't saying they're definitely <em>not</em> gpu vectors, but they might not be\"</p>",
        "id": 227346685,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031612
    },
    {
        "content": "<p>we have a volunteer</p>",
        "id": 227346698,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031615
    },
    {
        "content": "<p>I have a draft branch I have been warming up for saturating add and saturating sub for integers.</p>",
        "id": 227346986,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031693
    },
    {
        "content": "<p>Maybe we can come to a conclusion if it's okay if <code>SimdX&lt;N&gt;</code> has a different size than <code>[X; N]</code> since that's a more immediate variation of the same problem?</p>",
        "id": 227347044,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031710
    },
    {
        "content": "<p>i think we can say, almost for sure, that a non-power-of-2 SimdN will round up to a power of 2 on some targets (but not on others)</p>",
        "id": 227347286,
        "sender_full_name": "Lokathor",
        "timestamp": 1614031787
    },
    {
        "content": "<p>I'm good with that.</p>",
        "id": 227347453,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614031828
    },
    {
        "content": "<p>( also const generics being able to infer lengths is really cool. )</p>",
        "id": 227347454,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031828
    },
    {
        "content": "<p>clearly we should follow llvm in calling our types <code>v{f,i,u}${N}</code> tho' :^)</p>",
        "id": 227347745,
        "sender_full_name": "Jubilee",
        "timestamp": 1614031918
    },
    {
        "content": "<p>dollarsign for sure</p>",
        "id": 227348081,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032014
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/issues/6#issuecomment-783712668\">https://github.com/rust-lang/stdsimd/issues/6#issuecomment-783712668</a> does this sound right?</p>",
        "id": 227348678,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032177
    },
    {
        "content": "<p>that sounds mostly correct, yes.</p>",
        "id": 227348791,
        "sender_full_name": "Jubilee",
        "timestamp": 1614032222
    },
    {
        "content": "<p>Why not use simd_sin/cos right off the bat?</p>",
        "id": 227348828,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032241
    },
    {
        "content": "<p>With which features would it and wouldn't it use libm</p>",
        "id": 227348942,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032285
    },
    {
        "content": "<p>do they work off the bat?</p>",
        "id": 227349062,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032347
    },
    {
        "content": "<p>Do any (existing) architectures actually have sin/cos simd instructions</p>",
        "id": 227349064,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032348
    },
    {
        "content": "<p>No clue</p>",
        "id": 227349083,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032351
    },
    {
        "content": "<p>how soon could someone besides <code>termhn</code> attempt to implement it using intrinsics off the bat?</p>",
        "id": 227349197,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032403
    },
    {
        "content": "<p>if the answer is, \"not right away\", then i think we can let them do it</p>",
        "id": 227349291,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032429
    },
    {
        "content": "<p>she already knows that the code might get replaced later</p>",
        "id": 227349310,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032438
    },
    {
        "content": "<p>Is there some reason using sin/cos would be any different than any of the other intrinsics?</p>",
        "id": 227349318,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032443
    },
    {
        "content": "<p>i just thought they weren't in the compiler</p>",
        "id": 227349339,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span>? I'm pretty sure they are already there</p>",
        "id": 227349397,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032474
    },
    {
        "content": "<p>Just sin and cos</p>",
        "id": 227349408,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032477
    },
    {
        "content": "<p>simd_sin and simd_cos emit conversion to scalar and then a set of libm calls</p>",
        "id": 227349434,
        "sender_full_name": "Jubilee",
        "timestamp": 1614032495
    },
    {
        "content": "<p>Is that true even with AVX?</p>",
        "id": 227349453,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032506
    },
    {
        "content": "<p>even with <code>-Ctarget-feature=sse4.2,avx2,fma</code></p>",
        "id": 227349465,
        "sender_full_name": "Jubilee",
        "timestamp": 1614032514
    },
    {
        "content": "<p>poo</p>",
        "id": 227349542,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032537
    },
    {
        "content": "<p>Okay. Yeah I'm not sure any architectures actually have trig simd instructions</p>",
        "id": 227349544,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032539
    },
    {
        "content": "<p>So go ahead with doing it without the intrinsics I think, since we probably beat LLVM</p>",
        "id": 227349578,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032564
    },
    {
        "content": "<p>when i asked this before i was told there were</p>",
        "id": 227349602,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614032576
    },
    {
        "content": "<p>I think Simple V may or may not have them</p>",
        "id": 227349638,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032596
    },
    {
        "content": "<p>but yeah i dont remember which ones. i had thought <em>you</em> told me there were, but it was a while ago.</p>",
        "id": 227349646,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614032600
    },
    {
        "content": "<p>But I don't think anything LLVM currently targets has them?</p>",
        "id": 227349664,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032612
    },
    {
        "content": "<p>alright, someone who isn't me please make a comment seconding the motion that termhn can get to work whenever they're available (it should mostly be copy and paste from wide and a small fix-up), and we'll sort out the rest later. <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> / <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 227349833,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032687
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">f32x4:</span><span class=\"err\">:</span><span class=\"nl\">cos:</span>\n        <span class=\"nf\">pushq</span>   <span class=\"nv\">%r15</span>\n        <span class=\"nf\">pushq</span>   <span class=\"nv\">%r14</span>\n        <span class=\"nf\">pushq</span>   <span class=\"nv\">%rbx</span>\n        <span class=\"nf\">subq</span>    <span class=\"no\">$32</span><span class=\"p\">,</span> <span class=\"nv\">%rsp</span>\n        <span class=\"nf\">movq</span>    <span class=\"nv\">%rsi</span><span class=\"p\">,</span> <span class=\"nv\">%rbx</span>\n        <span class=\"nf\">movq</span>    <span class=\"nv\">%rdi</span><span class=\"p\">,</span> <span class=\"nv\">%r14</span>\n        <span class=\"nf\">vmovss</span>  <span class=\"p\">(</span><span class=\"nv\">%rsi</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">vmovss</span>  <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">)</span>\n        <span class=\"nf\">vmovss</span>  <span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"nv\">%rsi</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">movq</span>    <span class=\"no\">cosf@GOTPCREL</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span> <span class=\"nv\">%r15</span>\n        <span class=\"nf\">callq</span>   <span class=\"p\">*</span><span class=\"nv\">%r15</span>\n        <span class=\"nf\">vmovaps</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">)</span>\n        <span class=\"nf\">vmovss</span>  <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">callq</span>   <span class=\"p\">*</span><span class=\"nv\">%r15</span>\n        <span class=\"nf\">vinsertps</span>       <span class=\"no\">$16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">vmovaps</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">)</span>\n        <span class=\"nf\">vmovss</span>  <span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"nv\">%rbx</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">callq</span>   <span class=\"p\">*</span><span class=\"nv\">%r15</span>\n        <span class=\"nf\">vmovaps</span> <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">),</span> <span class=\"nv\">%xmm1</span>\n        <span class=\"nf\">vinsertps</span>       <span class=\"no\">$32</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"nv\">%xmm1</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">vmovaps</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">)</span>\n        <span class=\"nf\">vmovss</span>  <span class=\"mi\">12</span><span class=\"p\">(</span><span class=\"nv\">%rbx</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">callq</span>   <span class=\"p\">*</span><span class=\"nv\">%r15</span>\n        <span class=\"nf\">vmovaps</span> <span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">),</span> <span class=\"nv\">%xmm1</span>\n        <span class=\"nf\">vinsertps</span>       <span class=\"no\">$48</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"nv\">%xmm1</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n        <span class=\"nf\">vmovaps</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%r14</span><span class=\"p\">)</span>\n        <span class=\"nf\">movq</span>    <span class=\"nv\">%r14</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n        <span class=\"nf\">addq</span>    <span class=\"no\">$32</span><span class=\"p\">,</span> <span class=\"nv\">%rsp</span>\n        <span class=\"nf\">popq</span>    <span class=\"nv\">%rbx</span>\n        <span class=\"nf\">popq</span>    <span class=\"nv\">%r14</span>\n        <span class=\"nf\">popq</span>    <span class=\"nv\">%r15</span>\n        <span class=\"nf\">retq</span>\n</code></pre></div>",
        "id": 227349845,
        "sender_full_name": "Jubilee",
        "timestamp": 1614032692
    },
    {
        "content": "<p>I think by the time SimpleV has an official LLVM backend we can migrate to libmvec which would solve that problem</p>",
        "id": 227349848,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032693
    },
    {
        "content": "<p>Yeah, i will happily second. <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 227349898,
        "sender_full_name": "Jubilee",
        "timestamp": 1614032716
    },
    {
        "content": "<p><code>movq    cosf@GOTPCREL(%rip), %r15</code> <em>target register on the end!?!? grossssss</em></p>",
        "id": 227349922,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032732
    },
    {
        "content": "<p>Lol</p>",
        "id": 227349943,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032743
    },
    {
        "content": "<p>well if there's nothing further for the real time conversation, i've got some new shoes to break in a bit, so i'm going to walk to the gas station and get mint chocolate muddy buddies</p>",
        "id": 227350085,
        "sender_full_name": "Lokathor",
        "timestamp": 1614032808
    },
    {
        "content": "<p>yeah looks like we're good! <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 227350126,
        "sender_full_name": "Jubilee",
        "timestamp": 1614032827
    },
    {
        "content": "<p>Yeah I think we're in good shape</p>",
        "id": 227350157,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614032845
    }
]