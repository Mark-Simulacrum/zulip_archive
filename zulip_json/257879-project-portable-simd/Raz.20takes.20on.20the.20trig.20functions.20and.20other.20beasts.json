[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Using.20multiple.20feature.20gates/near/225121422\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> You are quite welcome to take a look at implementing the trig functions listed here! <a href=\"https://github.com/rust-lang/stdsimd/issues/6\">https://github.com/rust-lang/stdsimd/issues/6</a></p>\n</blockquote>\n<p>Posting this for posterity. <a href=\"https://github.com/vectorclass/version2/blob/master/vectormath_trig.h\">https://github.com/vectorclass/version2/blob/master/vectormath_trig.h</a></p>",
        "id": 225626391,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612827993
    },
    {
        "content": "<p>I'm making a new thread so I can continue my onslaught against silly Rust questions.</p>",
        "id": 225626458,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612828073
    },
    {
        "content": "<p>(And post occasional PR updates.)</p>",
        "id": 225626509,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612828086
    },
    {
        "content": "<p>Dear lord Rust just made me type </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"k\">f32</span><span class=\"p\">).</span><span class=\"n\">cos</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and I just died a little x_x</p>",
        "id": 225629878,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612830568
    },
    {
        "content": "<p>ENJOY.</p>",
        "id": 225630153,
        "sender_full_name": "Jubilee",
        "timestamp": 1612830794
    },
    {
        "content": "<p>yeah it's<br>\nyeah.</p>",
        "id": 225630158,
        "sender_full_name": "Jubilee",
        "timestamp": 1612830807
    },
    {
        "content": "<ol>\n<li>Great, I think this will help point out places we're missing support for operations. IMO our library should be complete enough to support this stuff</li>\n<li>Note that the vectorclass impls are a good reference point but don't in many cases have the same precision/range as what ieee754 recommends. See <a href=\"https://www.agner.org/optimize/vcl_manual.pdf\">https://www.agner.org/optimize/vcl_manual.pdf</a> which lists various functions and also lists known divergences<p>- Note that subnormals are explicitly not handled by all functions.<br>\n  - We won't want to encode error info in the nan payloads the way it does, just return NaN/Inf as required by IEEE</p>\n</li>\n</ol>",
        "id": 225631217,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612831624
    },
    {
        "content": "<p>Alright. Thanks for the pointers <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> and <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> . Imma start a stream - finish an Exercism and then begin with the simplest possible function to write.</p>",
        "id": 225641008,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612840423
    },
    {
        "content": "<p>(Because it's late and lord knows IEEE754 is an early morning read.)</p>",
        "id": 225641016,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612840441
    },
    {
        "content": "<p>I actually thought about doing a few of these a while ago but wasnt 100% certain where it would go, since eventually to support the arches with this builtin we need a <code>simd_sin</code> (or w/e) builtin, but then we need to provide the manual fallback on the ones without it.</p>",
        "id": 225641090,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612840508
    },
    {
        "content": "<p>Gotcha. Starting the stream now...</p>",
        "id": 225641459,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612840953
    },
    {
        "content": "<p><a href=\"https://meet.jit.si/173738969826348\">Click to join video call</a></p>",
        "id": 225641463,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612840958
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> exercism vanquished, onto the <code>cos</code> and <code>sin</code>.</p>",
        "id": 225642415,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612841913
    },
    {
        "content": "<p>OK I think I added the appropriate tests in <code>float_macros.rs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">, wasm_bindgen_test)]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">sin</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">slice_chunks</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">apply_unary_lanewise</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"cp\">$scalar</span><span class=\"o\">&gt;</span>::<span class=\"n\">sin</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">assert_biteq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">sin</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">, wasm_bindgen_test)]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">cos</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">slice_chunks</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">apply_unary_lanewise</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"cp\">$scalar</span><span class=\"o\">&gt;</span>::<span class=\"n\">cos</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">assert_biteq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">cos</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225643458,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612843104
    },
    {
        "content": "<p>A PR draft has been made!<br>\n<a href=\"https://github.com/rust-lang/stdsimd/pull/66\">https://github.com/rust-lang/stdsimd/pull/66</a></p>",
        "id": 225644405,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612844253
    },
    {
        "content": "<p>I'm off for the night!</p>",
        "id": 225644522,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612844367
    },
    {
        "content": "<p>... <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> what's the canonical way to run <code>lldb</code> on rust programs? Google is coming up with some hairy answers.</p>\n<p>Or do people use another debugger in Rust?</p>",
        "id": 225647192,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612847951
    },
    {
        "content": "<p>uhhh.</p>",
        "id": 225647194,
        "sender_full_name": "Jubilee",
        "timestamp": 1612847961
    },
    {
        "content": "<p>I wish I knew LOL</p>",
        "id": 225647195,
        "sender_full_name": "Jubilee",
        "timestamp": 1612847968
    },
    {
        "content": "<p>wuuuuut</p>",
        "id": 225647198,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612847978
    },
    {
        "content": "<p>Hi, I don't actually know how to use a debugger. ^^;</p>",
        "id": 225647199,
        "sender_full_name": "Jubilee",
        "timestamp": 1612847983
    },
    {
        "content": "<p>however you'd normally use lldb</p>",
        "id": 225647201,
        "sender_full_name": "Lokathor",
        "timestamp": 1612847989
    },
    {
        "content": "<p>the binary is in target/debug/thing_name</p>",
        "id": 225647205,
        "sender_full_name": "Lokathor",
        "timestamp": 1612847997
    },
    {
        "content": "<p>generally</p>",
        "id": 225647206,
        "sender_full_name": "Lokathor",
        "timestamp": 1612847998
    },
    {
        "content": "<p>Ok ok</p>",
        "id": 225647249,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848018
    },
    {
        "content": "<p>also i'm with jubilee, i am a no-debugger scrub</p>",
        "id": 225647250,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848025
    },
    {
        "content": "<p>and i ship over 20,000 crate downloads a day!</p>",
        "id": 225647253,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848039
    },
    {
        "content": "<p>frightening when you think about it</p>",
        "id": 225647255,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848044
    },
    {
        "content": "<p>Yeah I built a project for this Stanford Rust class and it compiled but parts of it didn't work so I'm not touching it without a debugger.</p>",
        "id": 225647259,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848051
    },
    {
        "content": "<p>Oh, well maybe <code>rr</code> will convince you to take a look again at debugging - a deterministic debugger!</p>",
        "id": 225647275,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848091
    },
    {
        "content": "<p><a href=\"https://rr-project.org/\">https://rr-project.org/</a></p>",
        "id": 225647280,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848095
    },
    {
        "content": "<p>your statement implies that i ever knew how to use a debugger.</p>",
        "id": 225647338,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848138
    },
    {
        "content": "<p>Damn, I was hoping the RustGang would have a really nice colorful debugger with some emoji printfs and stuff.</p>",
        "id": 225647342,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848150
    },
    {
        "content": "<p>15 Years An Idiot: the Rustacean story</p>",
        "id": 225647344,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848156
    },
    {
        "content": "<p>coming soon to a theater near you</p>",
        "id": 225647358,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848181
    },
    {
        "content": "<p>I use gdb extensively with C++, but I've never really used it with rust</p>",
        "id": 225647371,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612848213
    },
    {
        "content": "<p>I think the combination of good incremental build + the Debug trait makes it a lot less necessary</p>",
        "id": 225647422,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612848269
    },
    {
        "content": "<p>I take it people also rejoice in sprinkling the <code>prinln!</code>s to debug?</p>",
        "id": 225647431,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848301
    },
    {
        "content": "<p>it \"works\" :)</p>",
        "id": 225647439,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612848323
    },
    {
        "content": "<p>Can't be too bad if it works.</p>",
        "id": 225647455,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848345
    },
    {
        "content": "<p>most stuff i build can be fixed with <code>cargo watch</code> that either runs printing to stdout (which i redirect into a file as a cheapo logger thingy) or runs the test suite</p>",
        "id": 225647460,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848355
    },
    {
        "content": "<p>I've seriously rebuilt my entire GL bindings generation this week with just <code>cargo watch -c -x \"run gl-2010-02-03.xml &gt;target/stdout.txt\"</code></p>",
        "id": 225647518,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848398
    },
    {
        "content": "<p>yeah  it's kind of funny, but all the other tools like <a href=\"http://tracing.rs\">tracing.rs</a>, flamegraphs, etc. are stuff I know how to use.</p>",
        "id": 225647549,
        "sender_full_name": "Jubilee",
        "timestamp": 1612848468
    },
    {
        "content": "<p><code>cargo watch</code>? brb...</p>",
        "id": 225647552,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848471
    },
    {
        "content": "<p><code>perf</code>, too.</p>",
        "id": 225647557,
        "sender_full_name": "Jubilee",
        "timestamp": 1612848477
    },
    {
        "content": "<p>alternatively, the trickiest stuff I've had to debug is async and the debugger doesn't do very well with that anyway</p>",
        "id": 225647596,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612848484
    },
    {
        "content": "<p><code>cargo install cargo-watch</code> to get it, it's not a builtin command</p>",
        "id": 225647599,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848490
    },
    {
        "content": "<p>+1 to perf, I use that a ton</p>",
        "id": 225647601,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612848492
    },
    {
        "content": "<p>God it takes ages to setup a benchmark in Rust for me still :/</p>",
        "id": 225647602,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848494
    },
    {
        "content": "<p>what do you use to bench</p>",
        "id": 225647620,
        "sender_full_name": "Jubilee",
        "timestamp": 1612848527
    },
    {
        "content": "<p>I just tried out hyperfine, but I haven't used a bench harness in Rust yet.</p>",
        "id": 225647638,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848552
    },
    {
        "content": "<p>In Julia it's a trivial <code>@benchmark foo(3.0)</code> in the REPL and you get all the statistics for your function.</p>",
        "id": 225647654,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848589
    },
    {
        "content": "<p>Also thanks for all y'alls tips, I keep starring the comments and I'm slowly building a library of Rust tricks <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225647705,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848635
    },
    {
        "content": "<p>Julia seems to be a very well-designed technology that, by focusing on a particular set of use cases very tightly, has gotten a lot of powerful tooling around that. Rust, otoh, is more of the \"you can bench if you want to, you can leave your friends behind\" attitude.</p>\n<p>I generally just use the nightly <code>cargo bench</code> thing, unless I know I need something more complex. <a href=\"https://doc.rust-lang.org/cargo/commands/cargo-bench.html\">https://doc.rust-lang.org/cargo/commands/cargo-bench.html</a></p>",
        "id": 225647805,
        "sender_full_name": "Jubilee",
        "timestamp": 1612848785
    },
    {
        "content": "<p>the difficulty with benchmarks in rust is that there's a \"built in\" benchmarker in Nightly, but it's not as good as the advanced benchmarkers you can get from crates</p>",
        "id": 225647832,
        "sender_full_name": "Lokathor",
        "timestamp": 1612848807
    },
    {
        "content": "<p>Yeah Julia went full in on interactive technical computing. I think it might pick up steam for a more general audience but it's pretty solid. </p>\n<p>Oh nice <span aria-label=\"musical score\" class=\"emoji emoji-1f3bc\" role=\"img\" title=\"musical score\">:musical_score:</span> !</p>",
        "id": 225647908,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612848931
    },
    {
        "content": "<p>yeah, criterion or hyperfine or w/e are better, unfortunately.</p>",
        "id": 225647982,
        "sender_full_name": "Jubilee",
        "timestamp": 1612849076
    },
    {
        "content": "<p>sadly, the perfect has been the enemy of the good for builtin benchmarking</p>",
        "id": 225648032,
        "sender_full_name": "Lokathor",
        "timestamp": 1612849106
    },
    {
        "content": "<p>alas.</p>",
        "id": 225648048,
        "sender_full_name": "Jubilee",
        "timestamp": 1612849133
    },
    {
        "content": "<p>Well, fun is cancelled anyways because arch is mad at me and I keep getting this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/p/r/c/w/part-1-hello-world <span class=\"o\">(</span>main<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"m\">127</span><span class=\"o\">]</span>&gt; rust-lldb\nlldb: error <span class=\"k\">while</span> loading shared libraries: liblldb.so.13git: cannot open shared object file: No such file or directory\nlldb: error <span class=\"k\">while</span> loading shared libraries: liblldb.so.13git: cannot open shared object file: No such file or directory\n<span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/p/r/c/w/part-1-hello-world <span class=\"o\">(</span>main<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"m\">127</span><span class=\"o\">]</span>&gt; lldb-server\nlldb-server: error <span class=\"k\">while</span> loading shared libraries: libclang-cpp.so.11: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 225648219,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849345
    },
    {
        "content": "<p>Even though I did a full LLVM build over the weekend.</p>",
        "id": 225648232,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849360
    },
    {
        "content": "<p>I think I found the culprit:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/.c/bin <span class=\"o\">[</span><span class=\"m\">127</span><span class=\"o\">]</span>&gt; ./rust-gdb\ngdb: error <span class=\"k\">while</span> loading shared libraries: libpython3.9.so.1.0: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 225648297,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849458
    },
    {
        "content": "<p>i thought you could use the system's gdb</p>",
        "id": 225648394,
        "sender_full_name": "Lokathor",
        "timestamp": 1612849657
    },
    {
        "content": "<p><span aria-label=\"clown\" class=\"emoji emoji-1f921\" role=\"img\" title=\"clown\">:clown:</span> &lt;---- me</p>",
        "id": 225648550,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849853
    },
    {
        "content": "<p>fresh install from the <code>sudo pacman -Sy gdb</code> yields:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>I<span class=\"o\">]</span> mrg@JuliaLap ~/.c/bin <span class=\"o\">[</span><span class=\"m\">127</span><span class=\"o\">]</span>&gt; gdb\ngdb: error <span class=\"k\">while</span> loading shared libraries: libpython3.9.so.1.0: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 225648568,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849891
    },
    {
        "content": "<p>big oops</p>",
        "id": 225648570,
        "sender_full_name": "Lokathor",
        "timestamp": 1612849903
    },
    {
        "content": "<p>well</p>",
        "id": 225648575,
        "sender_full_name": "Jubilee",
        "timestamp": 1612849915
    },
    {
        "content": "<p>I am just going to blame the python package manager and keep going with my day.</p>",
        "id": 225648620,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849938
    },
    {
        "content": "<p>I wonder how <a href=\"https://headcrab.rs/\">https://headcrab.rs/</a> is coming along.</p>",
        "id": 225648622,
        "sender_full_name": "Jubilee",
        "timestamp": 1612849941
    },
    {
        "content": "<p>I saw it posted today but couldn't get it to install.</p>",
        "id": 225648629,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849968
    },
    {
        "content": "<blockquote>\n<p>cross-platform: x86_64 for Linux &amp; macOS</p>\n</blockquote>\n<p><em>[screaming externally]</em></p>",
        "id": 225648641,
        "sender_full_name": "Lokathor",
        "timestamp": 1612849976
    },
    {
        "content": "<p>^ why is that?</p>",
        "id": 225648652,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612849996
    },
    {
        "content": "<p>lul x86_64 for MacOS</p>",
        "id": 225648671,
        "sender_full_name": "Jubilee",
        "timestamp": 1612850023
    },
    {
        "content": "<p>Any time that a project doesn't list Windows support first I just assume it's going to be accidental at best.</p>",
        "id": 225648672,
        "sender_full_name": "Lokathor",
        "timestamp": 1612850025
    },
    {
        "content": "<p>oh wait - x86_64 is the one that can use 32 bit and 64 bit archs right?</p>",
        "id": 225648764,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612850115
    },
    {
        "content": "<p>yes, x86_64 chips can execute x86 code</p>",
        "id": 225648776,
        "sender_full_name": "Lokathor",
        "timestamp": 1612850145
    },
    {
        "content": "<p>Alright, bedtime, for realsies. Thanks people!</p>",
        "id": 225649181,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612850600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/225648622\">said</a>:</p>\n<blockquote>\n<p>I wonder how <a href=\"https://headcrab.rs/\">https://headcrab.rs/</a> is coming along.</p>\n</blockquote>\n<p>There was a post just today:<br>\n<a href=\"https://headcrab.zulipchat.com/#narrow/stream/248039-general/topic/still.20active.3F/near/225623269\">https://headcrab.zulipchat.com/#narrow/stream/248039-general/topic/still.20active.3F/near/225623269</a><br>\n<span class=\"user-mention silent\" data-user-id=\"210946\">Nikita Baksalyar</span></p>\n<blockquote>\n<p>[...]</p>\n<p>A more elaborate answer: lately I haven't been able to find much spare time as I would like to work on open source, but the design/architecture/planning phase is active. I'm sorry for a lack of updates and uncertainty - that's my fault. With regards to funding and OpenCollective contributions: the funds are not being used at this time, and I'm happy to do refunds. That said, all unused funds eventually will be directed towards further development (for issue bounties, contributor rewards, infrastructure, etc.).</p>\n<p>The thing I'm working on right now is a development plan for 2021: I believe the focus should be on making Headcrab a practical, usable toolkit first and foremost - I see multiple simple use cases where it can provide value. The actual coding might take a bit of time, but abandoning this project was never an intent - personally, I see it as a long-term one. :)</p>\n</blockquote>",
        "id": 225657509,
        "sender_full_name": "bjorn3",
        "timestamp": 1612859676
    },
    {
        "content": "<p>tfw</p>",
        "id": 225687591,
        "sender_full_name": "Jubilee",
        "timestamp": 1612876714
    },
    {
        "content": "<p>here's some stuff on cross platform: <a href=\"https://fosdem.org/2021/schedule/event/a_journey_to_performance/\">https://fosdem.org/2021/schedule/event/a_journey_to_performance/</a></p>",
        "id": 225707811,
        "sender_full_name": "oliver",
        "timestamp": 1612885076
    },
    {
        "content": "<p>If you need to debug rust, I recommend using the VSCode-LLDB plugin, which basically can set itself up on rust projects and works quite well (with the caveat that I've had absolutely no luck figuring out what's going wrong when it fails to work beyond generally uninstall+reinstall fixing it)</p>\n<p>Probably doesn't work on Windows (although I think it claims to so YMMV) and has an actual UI.</p>",
        "id": 225722117,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612890302
    },
    {
        "content": "<p>Thanks Thom, I'll look into that.</p>",
        "id": 225722382,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612890380
    },
    {
        "content": "<p>here's what Rust debugging in Code would look like for reference: <br>\n<a href=\"/user_uploads/4715/IixG2zcwRRBQTd5Aoy7KJgGI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/IixG2zcwRRBQTd5Aoy7KJgGI/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/IixG2zcwRRBQTd5Aoy7KJgGI/image.png\"></a></div>",
        "id": 225743997,
        "sender_full_name": "oliver",
        "timestamp": 1612898995
    },
    {
        "content": "<p>Oh sweet <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> , defs will check it out in a sec.</p>",
        "id": 225764500,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612908073
    },
    {
        "content": "<p>OK I installed the VSCode plugin \"CodeLLDB\" v1.6.1.<br>\nHow do I fire it up on a hello world script?</p>",
        "id": 225765487,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612908600
    },
    {
        "content": "<p>Answering my own question: <code>Alt+Shift+D</code> will get you a pop up profile and you can start from there.</p>",
        "id": 225766051,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612908920
    },
    {
        "content": "<p>X_X I need to write a JSON file for every crate? :/</p>",
        "id": 225767151,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612909511
    },
    {
        "content": "<p>what, a JSON file for every crate?</p>",
        "id": 225767664,
        "sender_full_name": "Jubilee",
        "timestamp": 1612909834
    },
    {
        "content": "<blockquote>\n<p>You'll have to manually change the executable name under \"program\".</p>\n</blockquote>",
        "id": 225768129,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910108
    },
    {
        "content": "<p><a href=\"https://www.forrestthewoods.com/blog/how-to-debug-rust-with-visual-studio-code/\">https://www.forrestthewoods.com/blog/how-to-debug-rust-with-visual-studio-code/</a></p>",
        "id": 225768149,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910117
    },
    {
        "content": "<p>But hey! It's working now!</p>",
        "id": 225768166,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910131
    },
    {
        "content": "<p>that was a screenshot from the extension homepage, I use Vim <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 225768357,
        "sender_full_name": "oliver",
        "timestamp": 1612910246
    },
    {
        "content": "<p>I thought it was neat they had a nice Rust example</p>",
        "id": 225768402,
        "sender_full_name": "oliver",
        "timestamp": 1612910277
    },
    {
        "content": "<p>Do you use any rust integration with vim?</p>",
        "id": 225768461,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612910301
    },
    {
        "content": "<p>I use vim but haven't set any up</p>",
        "id": 225768468,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612910309
    },
    {
        "content": "<p>yeah I have quite a bit of configuration</p>",
        "id": 225768496,
        "sender_full_name": "oliver",
        "timestamp": 1612910334
    },
    {
        "content": "<p>Oh My, you can see the vectorized register! <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 225768548,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910393
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://imgur.com/wfUj7KC.png\"><img src=\"https://imgur.com/wfUj7KC.png\"></a></div>",
        "id": 225768622,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910423
    },
    {
        "content": "<p>&lt; on the left</p>",
        "id": 225768630,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910431
    },
    {
        "content": "<p>neat.</p>",
        "id": 225768657,
        "sender_full_name": "Jubilee",
        "timestamp": 1612910452
    },
    {
        "content": "<p>is that different from hexdump?</p>",
        "id": 225768670,
        "sender_full_name": "oliver",
        "timestamp": 1612910461
    },
    {
        "content": "<p>no idea Oliver.</p>",
        "id": 225768687,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910471
    },
    {
        "content": "<p>I just set a breakpoint in this program and started the debugger.</p>",
        "id": 225768701,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910485
    },
    {
        "content": "<p>I need some care to pass the args to the program :/</p>",
        "id": 225768726,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/225768670\">said</a>:</p>\n<blockquote>\n<p>is that different from hexdump?</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/-wJc8YblVw3fFv46v0V_01UH/image.png\">image.png</a>  I guess so</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/-wJc8YblVw3fFv46v0V_01UH/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/-wJc8YblVw3fFv46v0V_01UH/image.png\"></a></div>",
        "id": 225769053,
        "sender_full_name": "oliver",
        "timestamp": 1612910669
    },
    {
        "content": "<p>^ those are just my printlns from trying to debug the program initially. They're printing to terminal.</p>",
        "id": 225769109,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910708
    },
    {
        "content": "<p>but you ran the program with the break point and it presents memory information there?</p>",
        "id": 225769236,
        "sender_full_name": "oliver",
        "timestamp": 1612910766
    },
    {
        "content": "<p>or it updates its static representation as you code?</p>",
        "id": 225769261,
        "sender_full_name": "oliver",
        "timestamp": 1612910788
    },
    {
        "content": "<p>Yeah, clicked on the left panel. All the variables have their values updated as you step through.</p>",
        "id": 225769279,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612910799
    },
    {
        "content": "<p>OK this is still a bit rougher than I expected</p>",
        "id": 225770895,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612911859
    },
    {
        "content": "<p>vscode's debugger still leaves a lot to be desired</p>",
        "id": 225771323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612912156
    },
    {
        "content": "<p>yep</p>",
        "id": 225777320,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612915965
    },
    {
        "content": "<p>Whelp I have a deadlock or livelock or something in my code now <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 225779930,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612917745
    },
    {
        "content": "<p>And the debugger is not cooperating as I was hoping it would.</p>",
        "id": 225779946,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612917762
    },
    {
        "content": "<p>pic?</p>",
        "id": 225780079,
        "sender_full_name": "oliver",
        "timestamp": 1612917852
    },
    {
        "content": "<p>Debugger seems to struggle when stepping into the <code>children.push(thread::spawn(move || loop { ...</code> function.</p>",
        "id": 225780327,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612918032
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://imgur.com/E3MTswK.png\"><img src=\"https://imgur.com/E3MTswK.png\"></a></div>",
        "id": 225780329,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612918036
    },
    {
        "content": "<p>it's very probable that llvm doesn't have a concept for move closures or captures or both</p>",
        "id": 225780415,
        "sender_full_name": "oliver",
        "timestamp": 1612918084
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/jATO3Jafeysepah-tL1UuNji/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jATO3Jafeysepah-tL1UuNji/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/jATO3Jafeysepah-tL1UuNji/image.png\"></a></div>",
        "id": 225780477,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612918160
    },
    {
        "content": "<p>I'm not a debugger expert or anything</p>",
        "id": 225780483,
        "sender_full_name": "oliver",
        "timestamp": 1612918165
    },
    {
        "content": "<p>but that's the general explaination</p>",
        "id": 225780565,
        "sender_full_name": "oliver",
        "timestamp": 1612918211
    },
    {
        "content": "<p>someone mentioned that gdb support for Rust used to be better than lldb though I don't know if that still holds</p>",
        "id": 225780628,
        "sender_full_name": "oliver",
        "timestamp": 1612918286
    },
    {
        "content": "<p>you might find this useful: <a href=\"https://www.hawktracer.org/\">https://www.hawktracer.org/</a></p>",
        "id": 225780775,
        "sender_full_name": "oliver",
        "timestamp": 1612918406
    },
    {
        "content": "<p>Looks cool - though the one I look forward to the most is this one;<br>\n<a href=\"https://github.com/plasma-umass/coz\">https://github.com/plasma-umass/coz</a></p>",
        "id": 225780903,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612918484
    },
    {
        "content": "<p>does that have Rust bindings?</p>",
        "id": 225781083,
        "sender_full_name": "oliver",
        "timestamp": 1612918605
    },
    {
        "content": "<p>YUP, they had a separate repo and then upstreamed it to the main one</p>",
        "id": 225781141,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612918648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> <a href=\"https://github.com/plasma-umass/coz/blob/master/rust/examples/toy.rs\">https://github.com/plasma-umass/coz/blob/master/rust/examples/toy.rs</a></p>",
        "id": 225781234,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612918692
    },
    {
        "content": "<p>use that!!</p>",
        "id": 225781321,
        "sender_full_name": "oliver",
        "timestamp": 1612918772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/225780903\">said</a>:</p>\n<blockquote>\n<p>Looks cool - though the one I look forward to the most is this one;<br>\n<a href=\"https://github.com/plasma-umass/coz\">https://github.com/plasma-umass/coz</a></p>\n</blockquote>\n<p>that's very interesting, thanks for the link.</p>",
        "id": 225781596,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1612918929
    },
    {
        "content": "<p>No probs <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> . Emery Berger's conference talk is a very funny and entertaining talk, 100% recommended.</p>",
        "id": 225781846,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919111
    },
    {
        "content": "<p>what do you like about it?</p>",
        "id": 225781961,
        "sender_full_name": "oliver",
        "timestamp": 1612919174
    },
    {
        "content": "<p>causal profiling let's you affirm the following :<br>\n\"I profiled this function with multi threading - if I speedup this function by x%, I can speedup my program by Y%\"</p>",
        "id": 225782019,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919227
    },
    {
        "content": "<p>Because in multithreading land, sometimes speeding up one function can lead to the program actually going slower.</p>",
        "id": 225782057,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919263
    },
    {
        "content": "<p>It also runs robust statistical tests in the backend to make that affirmation and not just eyeball the statistics like \"well, on average it's faster\"</p>",
        "id": 225782134,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919295
    },
    {
        "content": "<p>do you have an example file?</p>",
        "id": 225782206,
        "sender_full_name": "oliver",
        "timestamp": 1612919347
    },
    {
        "content": "<p>Not yet - I'm trying to run it atm.<br>\nHere's the juicy part of the presentation fwiw<br>\n<a href=\"https://youtu.be/r-TLSBdHe1A?t=2177\">https://youtu.be/r-TLSBdHe1A?t=2177</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"r-TLSBdHe1A\" href=\"https://youtu.be/r-TLSBdHe1A?t=2177\"><img src=\"https://i.ytimg.com/vi/r-TLSBdHe1A/default.jpg\"></a></div>",
        "id": 225782395,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919512
    },
    {
        "content": "<p>(He's also very entertaining, so it's a very light and funny watch.)</p>",
        "id": 225782443,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919524
    },
    {
        "content": "<p>so the program speedup isn't derived it's measured along with the function?</p>",
        "id": 225782472,
        "sender_full_name": "oliver",
        "timestamp": 1612919563
    },
    {
        "content": "<p>Sorta - They key insight in the paper is that, in a multithreaded program, if you \"stop\" every other thread, and let the one you want progress, you can simulate that thread being \"sped up\" by whatever amount you delayed everyone else.</p>",
        "id": 225782530,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919640
    },
    {
        "content": "<p>Then you add the following careful observations:<br>\nIf you repeatedly shuffle a bunch of factors about your program, and measure the different \"speedups\", by the law of large numbers all those other effects will add up to random noise in the aggregate.</p>\n<p>This is very, very freaking worrying because the team found certain programs that got 30% perf whacks because of the person's user name (as that would make a perf critical section overlap different pages and take a horrible caching hit) amongst many other shenanigans. Coz takes trouble to randomize memory addresses and many other things to get statistical guarantees about the performance prediction.</p>",
        "id": 225782747,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919788
    },
    {
        "content": "<p>(Not to mention the super fun cases of -O3 running slower than -O2.)</p>",
        "id": 225782782,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919833
    },
    {
        "content": "<p>So yeah, verifying optimizations actually work and are better than a null hypothesis - important!</p>",
        "id": 225782795,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612919853
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 225783008,
        "sender_full_name": "oliver",
        "timestamp": 1612920053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span><br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=ea771aa8939937399412ea442f990348\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=ea771aa8939937399412ea442f990348</a><br>\nThere is a <code>simd_fcos</code> you might want to start with, in the compiler, and also a <code>simd_fsin</code>.</p>",
        "id": 225948599,
        "sender_full_name": "Jubilee",
        "timestamp": 1613018960
    },
    {
        "content": "<p>Noted.</p>",
        "id": 225948724,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613019132
    },
    {
        "content": "<p>It does not appear to compile to any weird strange Intel instruction, SHOCKINGLY, DESPITE THERE BEING MANY, just what I assume is a reasonably-optimized set of multiplications and such.</p>",
        "id": 225948755,
        "sender_full_name": "Jubilee",
        "timestamp": 1613019190
    },
    {
        "content": "<p>it compiles to 4 calls to <code>cosf</code> for me, which unfortunately isn't usable for libcore</p>",
        "id": 225951828,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613023345
    },
    {
        "content": "<p>ohh.</p>",
        "id": 225952046,
        "sender_full_name": "Jubilee",
        "timestamp": 1613023640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> wait so that's to libm?</p>",
        "id": 225952063,
        "sender_full_name": "Jubilee",
        "timestamp": 1613023679
    },
    {
        "content": "<p>mhm</p>",
        "id": 225952103,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613023690
    },
    {
        "content": "<p>ohhhh... damn! nevermind then.</p>",
        "id": 225952109,
        "sender_full_name": "Jubilee",
        "timestamp": 1613023703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> DISREGARD.</p>",
        "id": 225952112,
        "sender_full_name": "Jubilee",
        "timestamp": 1613023708
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/xaWbjT\">https://rust.godbolt.org/z/xaWbjT</a></p>\n<p>I imagine if there <em>is</em> an instruction for this, that would emit it, and I doubt there's a way to do it otherwise. We sort of want a way to test if the target actually has an optimized impl</p>",
        "id": 225952240,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613023876
    },
    {
        "content": "<p>that said historically the way this gets solved is landing code in <a href=\"https://github.com/rust-lang/compiler-builtins\">https://github.com/rust-lang/compiler-builtins</a>, i think</p>",
        "id": 225952248,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613023904
    },
    {
        "content": "<p>i believe the reason that's not really done for libm-in-core (even though it clearly could be — that project even has a libm submodule) is that we do actually want to use system libm wherever possible because it's likely much better than libm-rust. But this doesnt apply to something like simd_fcos</p>",
        "id": 225952347,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613024008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/225641090\">said</a>:</p>\n<blockquote>\n<p>I actually thought about doing a few of these a while ago but wasnt 100% certain where it would go, since eventually to support the arches with this builtin we need a <code>simd_sin</code> (or w/e) builtin, but then we need to provide the manual fallback on the ones without it.</p>\n</blockquote>\n<p>This whole mess... is kinda what i was alluding to here.</p>",
        "id": 225952418,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613024062
    },
    {
        "content": "<p>welp.</p>",
        "id": 225952516,
        "sender_full_name": "Jubilee",
        "timestamp": 1613024200
    },
    {
        "content": "<p>can you summarize these problems in the issue for future reference, given that I am pretty sure this is my 2nd time hearing this.</p>",
        "id": 225952535,
        "sender_full_name": "Jubilee",
        "timestamp": 1613024271
    },
    {
        "content": "<p>that said perhaps a way forward would be:</p>\n<ol>\n<li>implement them \"in software\" in the core_arch crate</li>\n<li>figure out the situation for lowering to an actual platform intrinsic on platforms that have hardware vectorized cosine later</li>\n</ol>\n<p>are we supporting platforms out of the gate that actually have these instructions?</p>",
        "id": 225952576,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613024286
    },
    {
        "content": "<p>it would be much appreciated if plausible.</p>",
        "id": 225952577,
        "sender_full_name": "Jubilee",
        "timestamp": 1613024296
    },
    {
        "content": "<p>I am not sure.</p>",
        "id": 225952578,
        "sender_full_name": "Jubilee",
        "timestamp": 1613024303
    },
    {
        "content": "<p>uh, sadly i'm a bit preoccupied right now, but i can probably fill it in tomorrow. i also could basically copypaste the zulip convo in but, i imagine that's not quite what you want</p>",
        "id": 225952617,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613024397
    },
    {
        "content": "<p>At your leisure, ofc.</p>",
        "id": 225952656,
        "sender_full_name": "Jubilee",
        "timestamp": 1613024417
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/50145\">https://github.com/rust-lang/rust/issues/50145</a> aha</p>",
        "id": 226224483,
        "sender_full_name": "Jubilee",
        "timestamp": 1613188189
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/73\">https://github.com/rust-lang/stdsimd/pull/73</a> Would this have settled your questions from way back when, <span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span>?</p>",
        "id": 226232258,
        "sender_full_name": "Jubilee",
        "timestamp": 1613201611
    },
    {
        "content": "<p>Yes, it does help. Let me try and add a specific code snippet to see if that helps clarify it a little bit.<br>\nI tried putting the simplest sum loop to the see the autovectorizer in action but the ASM output was quite dizzying.<br>\nHere's my attempt at it in the <a href=\"http://lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bbbd67fd4b5b63b570e67aeb8803d706\">Rust Playground</a></p>",
        "id": 226259385,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613240447
    },
    {
        "content": "<p>The idea was to have a code snippet that was like \"This is a very simple sum loop on floats, so the autovectorizer is very likely to hit, here are the <code>xmm</code> registers being shuffled around (decent indication that the autovectorizer was used. This is us using the <code>stdsimd</code> internals to build that stuff ourselves and screaming at the compiler to actually use the vector registers.</p>",
        "id": 226259543,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613240678
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bbbd67fd4b5b63b570e67aeb8803d706\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bbbd67fd4b5b63b570e67aeb8803d706</a> ?</p>\n<p>Make sure to turn on Release... the optimizer basically doesn't do jack until you push it into release, lol.<br>\n<span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> Also, don't use floats if you want \"xmm is proof that SIMD happened\". xmm registers actually are used for scalar floats very often in x86_64!</p>",
        "id": 226259684,
        "sender_full_name": "Jubilee",
        "timestamp": 1613240863
    },
    {
        "content": "<p>And yes, basically it's forcing an expression of \"parallelize this using the SIMD pattern\" into the compiler.</p>",
        "id": 226259743,
        "sender_full_name": "Jubilee",
        "timestamp": 1613240904
    },
    {
        "content": "<p>Gah, bitten again by default debug build! Yeah that explains the tomes of unoptimized assembly then.</p>",
        "id": 226259764,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613240966
    },
    {
        "content": "<p>Oh wow on the <code>x86_64</code> thing o.0</p>",
        "id": 226259774,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613240996
    },
    {
        "content": "<p>Yeah so, basically, x86 has these float registers that are 80 bit floating point registers, but x86_64 has SSE2 by default, which means it has xmm registers including floating point, and those can do 32 bit or 64 bit floating point. The calling convention for \"x64\" actually specifies use of the xmm registers for most floating point things. Partially this is because everyone realized MMX was a mistake, lol.</p>\n<p>MMX was the first attempt to enable SIMD on x86. It... switches the floating point registers that previously were used into a new state, and you have to emit an instruction to switch them back. But this was incredibly unwieldy in practice. There's a reason we just removed it from Rust.</p>",
        "id": 226260010,
        "sender_full_name": "Jubilee",
        "timestamp": 1613241261
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226263296,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613245675
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/73/files\">https://github.com/rust-lang/stdsimd/pull/73/files</a> still good?</p>\n<p>I saved the notes on what else was in there, but after some thought I think we should throw in a \"tips &amp;&amp; tricks: reading asm\" bit as a separate section.</p>",
        "id": 226277543,
        "sender_full_name": "Jubilee",
        "timestamp": 1613263303
    },
    {
        "content": "<p>Just approved. LGTM!</p>",
        "id": 226277723,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613263620
    },
    {
        "content": "<p>hehe</p>",
        "id": 226277780,
        "sender_full_name": "Jubilee",
        "timestamp": 1613263731
    },
    {
        "content": "<p>there's a slight problem in trying to get an example of a \"simple\" autovectorization occurring and that is basically \"compiler perturbations lol\".</p>",
        "id": 226278008,
        "sender_full_name": "Jubilee",
        "timestamp": 1613264078
    },
    {
        "content": "<p>silly compilers getting in the way of My Perfect Code <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 226278185,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613264353
    },
    {
        "content": "<p>like, we can definitely try to include a demo and some sample code to try to help \"sell\" the library, but it will have to literally include the disclaimer of \"lol this might not autovectorize even though we say it should, which incidentally is also the point of the library\".</p>",
        "id": 226278206,
        "sender_full_name": "Jubilee",
        "timestamp": 1613264403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/226260010\">said</a>:</p>\n<blockquote>\n<p>Yeah so, basically, x86 has these float registers that are 80 bit floating point registers, but x86_64 has SSE2 by default, which means it has xmm registers including floating point, and those can do 32 bit or 64 bit floating point. The calling convention for \"x64\" actually specifies use of the xmm registers for most floating point things. Partially this is because everyone realized MMX was a mistake, lol.</p>\n</blockquote>\n<p>Another big reason x86_64 switched to using <code>xmm</code> registers for floating-point is that it makes floating-point math more consistent so a <code>f32</code> always works in <code>f32</code> precision, and a <code>f64</code> always works in <code>f64</code> precision. previously, since they used 80-bit floating point registers and operations, a <code>f32</code> would have <code>f32</code> precision only in memory, if it were in registers it would have 80-bit precision. similarly for <code>f64</code>. this made for confusing identities and rounding rules and made code behave differently on x86 compared to Arm or PowerPC or nearly every other CPU.</p>",
        "id": 226316526,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1613324963
    },
    {
        "content": "<p>Muahaha useless internet competition points! Julia at 29, Rust at 30.<br>\n<a href=\"https://www.tiobe.com/tiobe-index/\">https://www.tiobe.com/tiobe-index/</a></p>",
        "id": 226328644,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613340721
    },
    {
        "content": "<p>Whatcha gonna do <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>",
        "id": 226328731,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613340829
    },
    {
        "content": "<p>you must be a good scientist if you care about a 0.03% delta</p>",
        "id": 226329112,
        "sender_full_name": "oliver",
        "timestamp": 1613341416
    },
    {
        "content": "<p>Nothing but the best Science <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> to back up all my opinions to die on <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 226329206,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613341533
    },
    {
        "content": "<p>will you wave from the moon?</p>",
        "id": 226330654,
        "sender_full_name": "oliver",
        "timestamp": 1613343723
    },
    {
        "content": "<p>in your space helmet</p>",
        "id": 226330690,
        "sender_full_name": "oliver",
        "timestamp": 1613343746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> would you care to do a more comprehensive literature review <a href=\"https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved\">https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved</a></p>",
        "id": 226334629,
        "sender_full_name": "Jubilee",
        "timestamp": 1613349034
    },
    {
        "content": "<p>Jajaja, nice.</p>",
        "id": 226334640,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613349081
    },
    {
        "content": "<p>Clearly a conspiracy in action by BigRust!</p>",
        "id": 226334650,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613349095
    },
    {
        "content": "<p>All jokes aside, I enjoy that there's tons of people working on a safe, cool language that empowers people to build hard stuff. Credit where it's due.</p>",
        "id": 226334701,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613349133
    },
    {
        "content": "<p>What IDE do people use? I'm trying to figure out rust-analyzer vs Rust VSCode plugins.</p>",
        "id": 226400607,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613404779
    },
    {
        "content": "<p>Oh, I can just click the settings on the Rust Plugin to have rust-analyzer as a backend. Noooice.</p>",
        "id": 226401127,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613404899
    },
    {
        "content": "<p>My IDE is Unix. :^)<br>\nbut yes, \"whatever lets people use rust-analyzer, or quickly <code>cargo check</code>\".<br>\nOh, and it's very important to actually run <code>cargo check</code> if you run into a sticking point, rust-analyzer interfaces usually fail to pass on all the information relevant that rustc has.</p>",
        "id": 226431579,
        "sender_full_name": "Jubilee",
        "timestamp": 1613424438
    },
    {
        "content": "<p>Bumping this up again.<br>\n<span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> would porting Julia's libm re-implementation of <code>simd_fcos</code> for 32bit floats be a good starting point?</p>",
        "id": 239809403,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621629222
    },
    {
        "content": "<p>wait, julia has a simd cos?</p>",
        "id": 239809551,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621629273
    },
    {
        "content": "<p>I only saw the scalar version</p>",
        "id": 239809579,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621629290
    },
    {
        "content": "<p>We have a scalar version, but I imagine calling the <code>stdsimd</code> on appropriate length lanes would be a decent starting point.</p>",
        "id": 239809625,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621629315
    },
    {
        "content": "<p>Unless I'm missing some key steps into how calculating <code>simd_fcos</code> is different from a scalar <code>cos</code> applied to many lanes.</p>",
        "id": 239809672,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621629342
    },
    {
        "content": "<p>the code would usually be reorganized since stuff like <code>match</code> expressions don't really vectorize that well</p>",
        "id": 239809926,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621629463
    },
    {
        "content": "<p>See the implementation of <code>sin_cos_pi</code> in vector-math for an example: <a href=\"https://salsa.debian.org/Kazan-team/vector-math/-/blob/f2d096a09d964631f8273f2c8ca0d1fa0ddfbdfc/src/algorithms/trig_pi.rs#L143\">https://salsa.debian.org/Kazan-team/vector-math/-/blob/f2d096a09d964631f8273f2c8ca0d1fa0ddfbdfc/src/algorithms/trig_pi.rs#L143</a></p>",
        "id": 239810138,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621629582
    },
    {
        "content": "<p>If you do create a vector sin implementation, please put it in vector-math, and please use the <code>Context</code> abstraction layer so Kazan can also use it.</p>",
        "id": 239810316,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621629683
    },
    {
        "content": "<p>...wat.<br>\nWhat is that code?<br>\nDear Lord Rust does not look like math at all sometimes <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 239810327,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621629694
    },
    {
        "content": "<p>What is Kazan and what are the <code>Context</code> abstraction layers?</p>",
        "id": 239810449,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621629763
    },
    {
        "content": "<p>See all the stuff I wrote here: <a href=\"https://github.com/rust-lang/stdsimd/issues/109\">https://github.com/rust-lang/stdsimd/issues/109</a></p>",
        "id": 239810525,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621629823
    },
    {
        "content": "<p>Kazan is a Vulkan GPU driver for Libre-SOC</p>",
        "id": 239810611,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621629857
    },
    {
        "content": "<p>Oh neat.</p>",
        "id": 239810846,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621630002
    },
    {
        "content": "<p>Context is a trait designed to allow algorithms to either be directly executed (by passing an empty struct as the Context) or to generate compiler IR (by passing a reference to the compilers' internals as the Context)</p>",
        "id": 239810847,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630003
    },
    {
        "content": "<p>direct execution using <code>Scalar</code> as a <code>Context</code>: <a href=\"https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/scalar.rs\">https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/scalar.rs</a></p>",
        "id": 239810992,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630071
    },
    {
        "content": "<p>direct execution using <code>core::simd</code>: <a href=\"https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/stdsimd.rs\">https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/stdsimd.rs</a></p>",
        "id": 239811114,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630116
    },
    {
        "content": "<p>demo of generating compiler IR: <a href=\"https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/ir.rs#L1663\">https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/ir.rs#L1663</a></p>",
        "id": 239811177,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> ok, that projects seems very cool, but I'm working on a \"small Rust at a time\" scope and trying to figure out what's just beyond my reach and work towards it. I think that project is a bit too much complexity for me to handle at the moment.</p>",
        "id": 239811296,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621630215
    },
    {
        "content": "<p>Others may be interested - I'm just trying to figure out a good plan for something manageable to work on.</p>",
        "id": 239811345,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621630234
    },
    {
        "content": "<p>ok, good luck!</p>",
        "id": 239811370,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630245
    },
    {
        "content": "<p>(It maybe be that it's feasible but I don't have enough information to conclude that right now.)</p>",
        "id": 239811429,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621630284
    },
    {
        "content": "<p>an example of a much simpler function: <a href=\"https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/algorithms/base.rs#L18\">https://salsa.debian.org/Kazan-team/vector-math/-/blob/master/src/algorithms/base.rs#L18</a></p>",
        "id": 239811450,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630302
    },
    {
        "content": "<p>^ <code>copy_sign</code></p>",
        "id": 239811466,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630321
    },
    {
        "content": "<p>I tried to design <code>Context</code> to be as easy as possible to write algorithms using, pushing nearly all the burden onto those writing new <code>Context</code> implementations</p>",
        "id": 239811780,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621630490
    },
    {
        "content": "<p>There <em>is</em> a more fundamental issue at hand: SIMD functions cannot branch, otherwise you cannot do it in parallel, and I do not know if Julia's impementation uses <code>if</code> and the like.</p>",
        "id": 239812715,
        "sender_full_name": "Jubilee",
        "timestamp": 1621631018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> do note that Libre-SOC is funding development of vector-math, if you do implement something we need, you can get paid by NLnet, who is funding Libre-SOC</p>",
        "id": 239812773,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621631045
    },
    {
        "content": "<p>@jubilee The kernels don't branch, but the handlers do:</p>",
        "id": 239813085,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621631265
    },
    {
        "content": "<p><a href=\"https://github.com/JuliaLang/julia/blob/b1a4129338113181f01754371633d67bd8d17760/base/special/trig.jl#L69\">https://github.com/JuliaLang/julia/blob/b1a4129338113181f01754371633d67bd8d17760/base/special/trig.jl#L69</a></p>",
        "id": 239813107,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621631280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/239812715\">said</a>:</p>\n<blockquote>\n<p>There <em>is</em> a more fundamental issue at hand: SIMD functions cannot branch, otherwise you cannot do it in parallel, and I do not know if Julia's impementation uses <code>if</code> and the like.</p>\n</blockquote>\n<p>yup, that's what I was referring to when I mentioned <code>match</code> above. There is <code>select</code>, which is like <code>if cond { a } else { b }</code> except that both the true and false branches are always executed, just the final result is selected.</p>",
        "id": 239813149,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621631288
    },
    {
        "content": "<p>one of the other things that <code>sin</code> is blocked on is gather-load support, for loading the right part of a giant approximation to <code>2/pi</code></p>",
        "id": 239813402,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621631425
    },
    {
        "content": "<p>(or whatever pi-related constant is needed for argument reduction)</p>",
        "id": 239813485,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621631488
    },
    {
        "content": "<p>I've been pretty busy lately but maybe I'll prioritize scatter gather next?  Unless <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> was planning on handling that</p>",
        "id": 239813507,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621631500
    },
    {
        "content": "<p>Also, to all reading this:<br>\nI suggested taking on <code>simd_fcos</code> because I thought it was another good \"getting my feet wet\" contribution, but if anyone else has a good suggestion on what else I can attempt that is welcome too.</p>",
        "id": 239813643,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1621631563
    },
    {
        "content": "<p>some functions that shouldn't be blocked on anything that are needed are <code>log2</code> and <code>exp2</code> and friends, as well as cube root.</p>",
        "id": 239813729,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621631625
    },
    {
        "content": "<p>log2 should be pretty easy since you just run <code>ilogb</code> (already implemented) then add the log2 kernel for the fraction part</p>",
        "id": 239814025,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621631721
    },
    {
        "content": "<p>along with a few <code>select</code> for handling special cases (inf, zero, nan, and negative inputs)</p>",
        "id": 239814328,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621631916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/239813402\">said</a>:</p>\n<blockquote>\n<p>one of the other things that <code>sin</code> is blocked on is gather-load support, for loading the right part of a giant approximation to <code>2/pi</code></p>\n</blockquote>\n<p>hrm, gathering from a static array?</p>",
        "id": 239815116,
        "sender_full_name": "Jubilee",
        "timestamp": 1621632464
    },
    {
        "content": "<p>What's the actual sequence of loads look like?</p>",
        "id": 239815575,
        "sender_full_name": "Jubilee",
        "timestamp": 1621632761
    },
    {
        "content": "<p>random access based on the exponent field of the input elements</p>",
        "id": 239816130,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621633107
    },
    {
        "content": "<p>for f64 there's something like 4kiB of tables</p>",
        "id": 239816159,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621633147
    },
    {
        "content": "<p>Aha.</p>",
        "id": 239818150,
        "sender_full_name": "Jubilee",
        "timestamp": 1621634467
    },
    {
        "content": "<p>so you manipulate the vector to reduce the inputs to their exponents and then, after doing some manipulation, gather using that vector from the table.</p>",
        "id": 239818364,
        "sender_full_name": "Jubilee",
        "timestamp": 1621634587
    },
    {
        "content": "<p>i don't see the issue</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"cp\">$vecf</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239819199,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621635081
    },
    {
        "content": "<p>Small angle approximation I see</p>",
        "id": 239819331,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621635182
    },
    {
        "content": "<p>Completely accurate for all <code>NaN</code> inputs! :P</p>",
        "id": 239819376,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635227
    },
    {
        "content": "<p><del>sm</del>all angles</p>",
        "id": 239819388,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621635239
    },
    {
        "content": "<p>Sleef's table for sin/cos/etc.: <a href=\"https://github.com/shibatch/sleef/blob/85440a5e87dae36ca1b891de14bc83b441ae7c43/src/libm/rempitab.c#L14\">https://github.com/shibatch/sleef/blob/85440a5e87dae36ca1b891de14bc83b441ae7c43/src/libm/rempitab.c#L14</a></p>",
        "id": 239819459,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635266
    },
    {
        "content": "<p>I assume you may be able to use const generics to build yours?</p>",
        "id": 239819520,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621635313
    },
    {
        "content": "<p>I mean const fn</p>",
        "id": 239819542,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621635327
    },
    {
        "content": "<p>I'm using <code>maxima</code></p>",
        "id": 239819558,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635337
    },
    {
        "content": "<p>arbitrary-precision arithmetic FTW!</p>",
        "id": 239819586,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635359
    },
    {
        "content": "<p><a href=\"https://salsa.debian.org/Kazan-team/vector-math/-/blob/f2d096a09d964631f8273f2c8ca0d1fa0ddfbdfc/src/algorithms/trig_pi.rs#L10\">https://salsa.debian.org/Kazan-team/vector-math/-/blob/f2d096a09d964631f8273f2c8ca0d1fa0ddfbdfc/src/algorithms/trig_pi.rs#L10</a></p>",
        "id": 239819725,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635430
    },
    {
        "content": "<p>...maxima's something like 50 years old now...</p>",
        "id": 239819930,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635588
    },
    {
        "content": "<blockquote>\n<p>Maxima is a descendant of Macsyma, the legendary computer algebra system developed in the late 1960s at the Massachusetts Institute of Technology.</p>\n</blockquote>",
        "id": 239820143,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635690
    },
    {
        "content": "<p>predates C!</p>",
        "id": 239820225,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621635737
    },
    {
        "content": "<p>the wide crate has some implementations but you'd have to check the C they're based on (linked in a comment in the source) for notes about accuracy range and such <a href=\"https://docs.rs/wide/0.6.4/src/wide/f32x4_.rs.html#850\">https://docs.rs/wide/0.6.4/src/wide/f32x4_.rs.html#850</a></p>",
        "id": 239820585,
        "sender_full_name": "Lokathor",
        "timestamp": 1621635995
    },
    {
        "content": "<p>that <code>wide</code> function is only accurate for small inputs</p>",
        "id": 239821669,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621636776
    },
    {
        "content": "<p>if you only care about that, sin_cos is trivial: <code>fn sin_cos(x) { sin_cos_pi(x * (1.0 / PI)) }</code></p>",
        "id": 239821786,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621636866
    },
    {
        "content": "<p>since I already implemented <code>sin_cos_pi</code></p>",
        "id": 239821807,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621636892
    },
    {
        "content": "<p><code>sin_cos_pi</code> is accurate for all inputs</p>",
        "id": 239821870,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621636927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Raz.20takes.20on.20the.20trig.20functions.20and.20other.20beasts/near/239819459\">said</a>:</p>\n<blockquote>\n<p>Sleef's table for sin/cos/etc.: <a href=\"https://github.com/shibatch/sleef/blob/85440a5e87dae36ca1b891de14bc83b441ae7c43/src/libm/rempitab.c#L14\">https://github.com/shibatch/sleef/blob/85440a5e87dae36ca1b891de14bc83b441ae7c43/src/libm/rempitab.c#L14</a></p>\n</blockquote>\n<p>Just looking now, hopefully we can do better than that — that's extremely poor information density (look at all the duplicated values).</p>",
        "id": 239835717,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621649583
    },
    {
        "content": "<p>it's designed for speed, not for smallness...</p>",
        "id": 239835739,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621649632
    },
    {
        "content": "<p>In general big lookup tables are not necessarily as good of a tradeoff if we expect everything to be duplicated per-binary</p>",
        "id": 239835741,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621649636
    },
    {
        "content": "<p>these days those are often the same. with the unicode tables we've definitely seen that the tradeoff towards \"smaller table\" at the cost of more complex lookup function is worth it</p>",
        "id": 239835810,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621649677
    },
    {
        "content": "<p>Yeah, bigger can look good in microbenchmarks, but in real code the one that uses up less of the cache helps.</p>",
        "id": 239835841,
        "sender_full_name": "scottmcm",
        "timestamp": 1621649717
    },
    {
        "content": "<p>Agreed on cache</p>",
        "id": 239836093,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621649968
    },
    {
        "content": "<p>If it's evicted from L1 cache for whatever reason it'll probably slow it down quite a bit more than the algorithm having a bit of math to use a smaller table</p>",
        "id": 239836181,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1621650058
    },
    {
        "content": "<p>one part that helps is the table is only really used for large inputs, and those are much less common usually</p>",
        "id": 239837149,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621651121
    },
    {
        "content": "<p>kinda like using the part of the unicode table dedicated to ancient egyptian is less common</p>",
        "id": 239837175,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621651175
    },
    {
        "content": "<p>a 30kb table in libcore for edge cases would be very unfortunate</p>",
        "id": 239838005,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621652121
    },
    {
        "content": "<p>I'd expect we can shrink it some...iirc julia uses something like 1kbit (128 bytes)</p>",
        "id": 239838079,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1621652207
    },
    {
        "content": "<p>Yeaaaah it really needs to be within a couple kb, we can't use up basically all of people's L1 cache for a table. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 239838962,
        "sender_full_name": "Jubilee",
        "timestamp": 1621652975
    },
    {
        "content": "<p>but 128 bytes would be within reason. That's basically two Mat4 values. And people dont <em>have</em> to use our sin/cos function after all.</p>",
        "id": 239842995,
        "sender_full_name": "Lokathor",
        "timestamp": 1621657651
    },
    {
        "content": "<p>yeah, 128 bytes is fine. Even 256 or 512 would be worth considering.</p>",
        "id": 239845198,
        "sender_full_name": "Jubilee",
        "timestamp": 1621660016
    },
    {
        "content": "<p>oh yeah 128 bytes is definely fine</p>",
        "id": 239845575,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621660437
    },
    {
        "content": "<p>even 1 or 2k would be fine</p>",
        "id": 239845614,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621660446
    },
    {
        "content": "<p>30... not so much</p>",
        "id": 239845628,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621660461
    },
    {
        "content": "<p>I wonder if we could get away with just saying that once 1ULP in the input is ≥π, that SIMD no longer guarantees accurate answers with it.  Because I really don't see how anyone can care at that point anyway...</p>",
        "id": 239850139,
        "sender_full_name": "scottmcm",
        "timestamp": 1621665394
    }
]