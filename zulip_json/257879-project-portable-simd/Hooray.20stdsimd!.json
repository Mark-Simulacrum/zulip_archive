[
    {
        "content": "<p>Congrats all for getting this in nightly.  I used it in <a href=\"https://users.rust-lang.org/t/converting-a-bgra-u8-to-rgb-u8-n-for-images/67938/12?u=scottmcm\">https://users.rust-lang.org/t/converting-a-bgra-u8-to-rgb-u8-n-for-images/67938/12?u=scottmcm</a> and it proved an excellent solution -- easily to write, and wonderfully adapted for different target-cpus.</p>\n<p>(Well, great once I realized how to do a shuffle -- my first version used <code>scatter</code> and was <em>way</em> worse than the na√Øve scalar code.)</p>",
        "id": 262915632,
        "sender_full_name": "scottmcm",
        "timestamp": 1638085704
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"ActionScript\"><pre><span></span><code><span class=\"nx\">example</span><span class=\"o\">::</span><span class=\"nx\">convert_via_std_simd_swizzle</span><span class=\"o\">:</span> <span class=\"o\">;</span> <span class=\"nx\">SSSE3</span>\n        <span class=\"nx\">movdqu</span>  <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmmword</span> <span class=\"nx\">ptr</span> <span class=\"p\">[</span><span class=\"nx\">rdi</span><span class=\"p\">]</span>\n        <span class=\"nx\">pshufb</span>  <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmmword</span> <span class=\"nx\">ptr</span> <span class=\"p\">[</span><span class=\"nx\">rip</span> <span class=\"o\">+</span> <span class=\"p\">.</span><span class=\"nx\">LCPI2_0</span><span class=\"p\">]</span>\n        <span class=\"nx\">movq</span>    <span class=\"nx\">rax</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span>\n        <span class=\"nx\">pshufd</span>  <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"mi\">238</span>\n        <span class=\"nx\">movq</span>    <span class=\"nx\">rdx</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span>\n        <span class=\"nx\">ret</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"ActionScript\"><pre><span></span><code><span class=\"nx\">example</span><span class=\"o\">::</span><span class=\"nx\">convert_via_std_simd_swizzle</span><span class=\"o\">:</span> <span class=\"o\">;</span><span class=\"nx\">SSE4</span><span class=\"p\">.</span><span class=\"mi\">2</span>\n        <span class=\"nx\">movdqu</span>  <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmmword</span> <span class=\"nx\">ptr</span> <span class=\"p\">[</span><span class=\"nx\">rdi</span><span class=\"p\">]</span>\n        <span class=\"nx\">pshufb</span>  <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmmword</span> <span class=\"nx\">ptr</span> <span class=\"p\">[</span><span class=\"nx\">rip</span> <span class=\"o\">+</span> <span class=\"p\">.</span><span class=\"nx\">LCPI2_0</span><span class=\"p\">]</span>\n        <span class=\"nx\">movq</span>    <span class=\"nx\">rax</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span>\n        <span class=\"nx\">pextrq</span>  <span class=\"nx\">rdx</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n        <span class=\"nx\">ret</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"ActionScript\"><pre><span></span><code><span class=\"nx\">example</span><span class=\"o\">::</span><span class=\"nx\">convert_via_std_simd_swizzle</span><span class=\"o\">:</span> <span class=\"o\">;</span> <span class=\"nx\">AVX</span>\n        <span class=\"nx\">vmovdqu</span> <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmmword</span> <span class=\"nx\">ptr</span> <span class=\"p\">[</span><span class=\"nx\">rdi</span><span class=\"p\">]</span>\n        <span class=\"nx\">vpshufb</span> <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"nx\">xmmword</span> <span class=\"nx\">ptr</span> <span class=\"p\">[</span><span class=\"nx\">rip</span> <span class=\"o\">+</span> <span class=\"p\">.</span><span class=\"nx\">LCPI2_0</span><span class=\"p\">]</span>\n        <span class=\"nx\">vmovq</span>   <span class=\"nx\">rax</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span>\n        <span class=\"nx\">vpextrq</span> <span class=\"nx\">rdx</span><span class=\"o\">,</span> <span class=\"nx\">xmm0</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n        <span class=\"nx\">ret</span>\n</code></pre></div>\n<p>bwahaha... but wait, there's more.</p>\n<div class=\"codehilite\" data-code-language=\"ActionScript\"><pre><span></span><code><span class=\"nx\">example</span><span class=\"o\">::</span><span class=\"nx\">convert_via_std_simd_swizzle</span><span class=\"o\">:</span> <span class=\"o\">;</span> <span class=\"nx\">AArch64</span> <span class=\"nx\">Neon</span>\n        <span class=\"nx\">adrp</span>    <span class=\"nx\">x8</span><span class=\"o\">,</span> <span class=\"p\">.</span><span class=\"nx\">LCPI2_0</span>\n        <span class=\"nx\">ldr</span>     <span class=\"nx\">q0</span><span class=\"o\">,</span> <span class=\"p\">[</span><span class=\"nx\">x0</span><span class=\"p\">]</span>\n        <span class=\"nx\">ldr</span>     <span class=\"nx\">q1</span><span class=\"o\">,</span> <span class=\"p\">[</span><span class=\"nx\">x8</span><span class=\"o\">,</span> <span class=\"o\">:</span><span class=\"nx\">lo12</span><span class=\"o\">:</span><span class=\"p\">.</span><span class=\"nx\">LCPI2_0</span><span class=\"p\">]</span>\n        <span class=\"nx\">tbl</span>     <span class=\"nx\">v0</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"nx\">b</span><span class=\"o\">,</span> <span class=\"p\">{</span> <span class=\"nx\">v0</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"nx\">b</span> <span class=\"p\">}</span><span class=\"o\">,</span> <span class=\"nx\">v1</span><span class=\"p\">.</span><span class=\"mi\">16</span><span class=\"nx\">b</span>\n        <span class=\"nx\">mov</span>     <span class=\"nx\">x1</span><span class=\"o\">,</span> <span class=\"nx\">v0</span><span class=\"p\">.</span><span class=\"nx\">d</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"nx\">fmov</span>    <span class=\"nx\">x0</span><span class=\"o\">,</span> <span class=\"nx\">d0</span>\n        <span class=\"nx\">ret</span>\n</code></pre></div>",
        "id": 262916216,
        "sender_full_name": "Jubilee",
        "timestamp": 1638086757
    },
    {
        "content": "<p>all of those have the issue that the calling convention requires the returned array be in integer registers, requiring several more instructions just to move from vector to integer registers...most actual applications of the function, when inlined, would just compute directly in the vector registers and store the result directly, no <code>movq rax, xmm0</code> or equivalent necessary</p>",
        "id": 262916472,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638087233
    },
    {
        "content": "<p>true, it's pretty to look at all the vectors tho'.</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example_convert_via_std_simd_swizzle:</span> <span class=\"c1\">; PowerPC64 with Altivec and VSX</span>\n        <span class=\"na\">.quad</span>   <span class=\"no\">.Lfunc_begin2</span>\n        <span class=\"na\">.quad</span>   <span class=\"no\">.TOC.@tocbase</span>\n        <span class=\"na\">.quad</span>   <span class=\"mi\">0</span>\n<span class=\"nl\">.Lfunc_begin2:</span>\n        <span class=\"nf\">li</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">15</span>\n        <span class=\"nf\">lvsl</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n        <span class=\"nf\">lvx</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">lvx</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n        <span class=\"nf\">addis</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"no\">.LCPI2_0@toc@ha</span>\n        <span class=\"nf\">addi</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"no\">.LCPI2_0@toc@l</span>\n        <span class=\"nf\">vperm</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n        <span class=\"nf\">lxvw4x</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n        <span class=\"nf\">addi</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">-16</span>\n        <span class=\"nf\">vperm</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n        <span class=\"nf\">stxvd2x</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n        <span class=\"nf\">ld</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">-8</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nf\">ld</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">-16</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nf\">rotldi</span>  <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">32</span>\n        <span class=\"nf\">rldimi</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n        <span class=\"nf\">rldicl</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span>\n        <span class=\"nf\">blr</span>\n        <span class=\"na\">.long</span>   <span class=\"mi\">0</span>\n        <span class=\"na\">.quad</span>   <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 262916576,
        "sender_full_name": "Jubilee",
        "timestamp": 1638087366
    },
    {
        "content": "<p>i'd expect that to shrink to 4 instructions with SimpleV: <code>setvli</code> to set the vector length, <code>sv.lbu</code> to load the byte vector, <code>sv.shufflei</code> shuffle with immediate, and <code>blr</code> return</p>",
        "id": 262916962,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638088101
    },
    {
        "content": "<p>I was particularly impressed that this base-x64-target monstrosity actually performed great in CAD97's benchmarking:</p>\n<div class=\"codehilite\" data-code-language=\"NASM\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">convert_via_std_simd_swizzle:</span>\n        <span class=\"nf\">movdqu</span>  <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmmword</span> <span class=\"nv\">ptr</span> <span class=\"p\">[</span><span class=\"nb\">rdi</span><span class=\"p\">]</span>\n        <span class=\"nf\">pxor</span>    <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span>\n        <span class=\"nf\">movdqa</span>  <span class=\"nv\">xmm2</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span>\n        <span class=\"nf\">punpcklbw</span>       <span class=\"nv\">xmm2</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span>\n        <span class=\"nf\">pshufd</span>  <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"nv\">xmm2</span><span class=\"p\">,</span> <span class=\"mi\">212</span>\n        <span class=\"nf\">pshufhw</span> <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"mi\">237</span>\n        <span class=\"nf\">punpckhbw</span>       <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span>\n        <span class=\"nf\">pshufd</span>  <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"mi\">108</span>\n        <span class=\"nf\">pshuflw</span> <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"mi\">232</span>\n        <span class=\"nf\">pshufd</span>  <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"mi\">216</span>\n        <span class=\"nf\">pshufhw</span> <span class=\"nv\">xmm4</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"mi\">116</span>\n        <span class=\"nf\">shufps</span>  <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"nv\">xmm4</span><span class=\"p\">,</span> <span class=\"mi\">50</span>\n        <span class=\"nf\">pshuflw</span> <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"mi\">180</span>\n        <span class=\"nf\">shufps</span>  <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"mi\">132</span>\n        <span class=\"nf\">pshuflw</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"mi\">230</span>\n        <span class=\"nf\">pshufhw</span> <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"nv\">xmm2</span><span class=\"p\">,</span> <span class=\"mi\">225</span>\n        <span class=\"nf\">movsd</span>   <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span>\n        <span class=\"nf\">pshufd</span>  <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm2</span><span class=\"p\">,</span> <span class=\"mi\">216</span>\n        <span class=\"nf\">pshufhw</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"mi\">232</span>\n        <span class=\"nf\">pshufd</span>  <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"mi\">104</span>\n        <span class=\"nf\">pshuflw</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"mi\">198</span>\n        <span class=\"nf\">shufps</span>  <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm3</span><span class=\"p\">,</span> <span class=\"mi\">36</span>\n        <span class=\"nf\">packuswb</span>        <span class=\"nv\">xmm0</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span>\n        <span class=\"nf\">movq</span>    <span class=\"nb\">rax</span><span class=\"p\">,</span> <span class=\"nv\">xmm0</span>\n        <span class=\"nf\">packuswb</span>        <span class=\"nv\">xmm1</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span>\n        <span class=\"nf\">movq</span>    <span class=\"nb\">rdx</span><span class=\"p\">,</span> <span class=\"nv\">xmm1</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>",
        "id": 262922277,
        "sender_full_name": "scottmcm",
        "timestamp": 1638097159
    },
    {
        "content": "<p>Yeah, pshufb really simplifies it, because pshufb is the \"dynamic\" swizzle, but keeping everything in vector registers and doing a bunch of manipulations that look complex is still fast. It can be performant mostly because those are all immediates, so tracking the dependency is simple</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">reg0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pshuf_not_b</span><span class=\"p\">(</span><span class=\"n\">reg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CONST</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with only shufps being</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">reg0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">shufps</span><span class=\"p\">(</span><span class=\"n\">reg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CONST</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which is why it often does two different sets of manipulations on different registers and then merges them using shufps, trying to keep a pattern like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">reg0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pshuf_</span><span class=\"o\">?</span><span class=\"p\">(</span><span class=\"n\">reg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CONST0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">reg1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pshuf_</span><span class=\"o\">?</span><span class=\"p\">(</span><span class=\"n\">reg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CONST1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">reg0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">shufps</span><span class=\"p\">(</span><span class=\"n\">reg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">reg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CONST2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">reg2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pshuf_</span><span class=\"o\">?</span><span class=\"p\">(</span><span class=\"n\">reg2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CONST3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// etc.</span>\n</code></pre></div>\n<p>because that way, since your processor is superscalar, most of these instructions get to go <strong>at the same time</strong>.</p>",
        "id": 263060880,
        "sender_full_name": "Jubilee",
        "timestamp": 1638216167
    }
]