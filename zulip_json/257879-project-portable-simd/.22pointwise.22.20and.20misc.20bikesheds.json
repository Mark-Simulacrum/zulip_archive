[
    {
        "content": "<p>maybe lean into the map/reduce terminology and call lanewise ops <code>map_X</code> and use <code>reduce_X</code></p>",
        "id": 272627835,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645403968
    },
    {
        "content": "<p>heh.</p>",
        "id": 272627912,
        "sender_full_name": "Jubilee",
        "timestamp": 1645404056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/.22pointwise.22.20over.20.22lanewise.22.3F.20.28bikeshed.29/near/272627648\">said</a>:</p>\n<blockquote>\n<p>something that's like one letter would honestly be best</p>\n</blockquote>\n<p>I did suggest we could use <code>sum</code> and <code>product</code>!</p>",
        "id": 272627921,
        "sender_full_name": "Jubilee",
        "timestamp": 1645404076
    },
    {
        "content": "<p>but also yes, like<br>\n<code>vmin</code> (<code>vector_min</code>) is worth considering.<br>\n<code>lne</code> (<code>lanes_ne</code>) too.<br>\nor <code>rsum</code> and <code>meq</code>, following Jacob's suggested pattern.</p>",
        "id": 272628020,
        "sender_full_name": "Jubilee",
        "timestamp": 1645404236
    },
    {
        "content": "<p>I think it's probably fine to actually just use eq etc, considering you generally don't want PartialEq</p>",
        "id": 272629116,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1645405456
    },
    {
        "content": "<p>I would prefer if we could figure out a way to not have any prefix at all for elementwise operations</p>",
        "id": 272629140,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1645405494
    },
    {
        "content": "<p>Yeah, I have been thinking so too.</p>",
        "id": 272629144,
        "sender_full_name": "Jubilee",
        "timestamp": 1645405502
    },
    {
        "content": "<p>I think that having a trait actually helps here.</p>",
        "id": 272629172,
        "sender_full_name": "Jubilee",
        "timestamp": 1645405526
    },
    {
        "content": "<p>If someone really needs to use the actual <code>PartialEq</code> methods... for one, there's <code>==</code>. For two, <code>&lt;Simd as PartialEq&gt;::eq</code> allows it. Likewise, the reverse, if a given method is on a trait that syntax is always available as an option to allow total disambiguation.</p>",
        "id": 272629371,
        "sender_full_name": "Jubilee",
        "timestamp": 1645405757
    },
    {
        "content": "<p>So I think <code>Simd::{eq,ne}</code> and/or <code>SimdEq::{eq,ne}</code> are obvious choices.<br>\nmin/max require a little more handling.</p>",
        "id": 272629475,
        "sender_full_name": "Jubilee",
        "timestamp": 1645405871
    },
    {
        "content": "<p>imho we should use inherent functions rather than <code>SimdEq::eq</code> because you'd have to disambiguate everytime you wanted to call <code>eq</code></p>",
        "id": 272629828,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645406323
    },
    {
        "content": "<p>PartialEq isn't automatically in scope.</p>",
        "id": 272629854,
        "sender_full_name": "Jubilee",
        "timestamp": 1645406351
    },
    {
        "content": "<p>neither would SimdEq be, admittedly!</p>",
        "id": 272629861,
        "sender_full_name": "Jubilee",
        "timestamp": 1645406366
    },
    {
        "content": "<p>Having the \"broadcasting syntax\" that Julia and Swift have, where <code>.==</code> means \"elementwise equality and return a mask\" would be nice, but uhhh is ambitious.</p>",
        "id": 272629877,
        "sender_full_name": "Jubilee",
        "timestamp": 1645406397
    },
    {
        "content": "<p><code>PartialEq</code> is automatically in scope: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=cc241059f82ccb4028bec6e254477559\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=cc241059f82ccb4028bec6e254477559</a></p>",
        "id": 272629948,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645406463
    },
    {
        "content": "<p>Oh okay, then disregard me.</p>",
        "id": 272629967,
        "sender_full_name": "Jubilee",
        "timestamp": 1645406495
    },
    {
        "content": "<p>...I have no idea why... <del>wait, no, I know why.</del> nope! I have no idea why I thought otherwise, then.</p>",
        "id": 272630045,
        "sender_full_name": "Jubilee",
        "timestamp": 1645406590
    },
    {
        "content": "<p>v_min and v_add and so on would i think be better than not having the underscore there</p>",
        "id": 272634176,
        "sender_full_name": "Lokathor",
        "timestamp": 1645411428
    },
    {
        "content": "<p>that'd be fair.</p>",
        "id": 272634228,
        "sender_full_name": "Jubilee",
        "timestamp": 1645411457
    },
    {
        "content": "<p>as to broadcasting_eq, you \"just\" have to convince T-lang to allow custom operators (which are a natural good that should already have been in Rust long ago, of course)</p>",
        "id": 272634467,
        "sender_full_name": "Lokathor",
        "timestamp": 1645411727
    },
    {
        "content": "<p>Haha.</p>",
        "id": 272636548,
        "sender_full_name": "Jubilee",
        "timestamp": 1645413738
    },
    {
        "content": "<p>FWIW, as one member of T-lang, while I wouldn't want completely custom <em>symbol</em> operators, I would love to see a  \"infix binary function\" mechanism.</p>",
        "id": 272642238,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645420431
    },
    {
        "content": "<p>e.g. in Haskell if you can write <code>add 2 4</code> you can also write <code>2 `add` 4</code>.</p>",
        "id": 272642325,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645420522
    },
    {
        "content": "<p>I think that would be worth spending one symbol on.</p>",
        "id": 272642405,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645420575
    },
    {
        "content": "<p>Well, Julia has this:<br>\n<a href=\"https://docs.julialang.org/en/v1/manual/arrays/#man-array-and-vectorized-operators-and-functions\">https://docs.julialang.org/en/v1/manual/arrays/#man-array-and-vectorized-operators-and-functions</a><br>\nwhich is a fully general form of this:<br>\n<a href=\"https://developer.apple.com/documentation/swift/simd/3139466\">https://developer.apple.com/documentation/swift/simd/3139466</a></p>",
        "id": 272642494,
        "sender_full_name": "Jubilee",
        "timestamp": 1645420685
    },
    {
        "content": "<p>I heard the signal, whatsup <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 272642515,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645420718
    },
    {
        "content": "<p>lmao</p>",
        "id": 272642520,
        "sender_full_name": "Jubilee",
        "timestamp": 1645420724
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272642521,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645420724
    },
    {
        "content": "<p>I believe the syntax was taken from Matlab, but only applies to inbuilt functions.</p>",
        "id": 272642561,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645420778
    },
    {
        "content": "<p>Julia made it full blown generic and dimension aware</p>",
        "id": 272642572,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645420797
    },
    {
        "content": "<p>The big bonus come up when you can elide multiple copies of array operations, see this initial blog post announcement:</p>",
        "id": 272642655,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645420891
    },
    {
        "content": "<p><a href=\"https://julialang.org/blog/2017/01/moredots/\">https://julialang.org/blog/2017/01/moredots/</a></p>",
        "id": 272642657,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645420894
    },
    {
        "content": "<p>more dots</p>",
        "id": 272642766,
        "sender_full_name": "Jubilee",
        "timestamp": 1645421004
    },
    {
        "content": "<p>and here’s what I mean with “dimension aware”</p>",
        "id": 272642850,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645421066
    },
    {
        "content": "<p><a href=\"https://twitter.com/miguelraz_/status/1493752694061813761?s=21\">https://twitter.com/miguelraz_/status/1493752694061813761?s=21</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/miguelraz_/status/1493752694061813761?s=21\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/8fa1ed55b76d48577f2c0bac0576cb110ae4ea69/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313331373134323731363837353034323831362f386a5f77454c4d7a5f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/kdpsinghlab\">@kdpsinghlab</a> broadcasting in Julia is aware of the array dimensions tho’\n\n[1 2] .+ [1 2] != [1, 2] .+ [1 2]\n                             ^\n                        note the comma\nand the resulting vector types/dims as an exterior product\n\nDon’t think R has those capabilities for any user funcs</p><span>- Julia REPL stan account (@miguelraz_)</span></div></div>",
        "id": 272642852,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645421069
    },
    {
        "content": "<p>I propose cancelling std::simd and opening an RFC for dots</p>",
        "id": 272642907,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1645421150
    },
    {
        "content": "<p>The syntax might be inspired by Matlab, which uses <code>A * B</code> to refer to matrix multiplication but <code>A .* B</code> for elementwise, etc for each operator</p>",
        "id": 272643070,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1645421306
    },
    {
        "content": "<p>Yes.</p>",
        "id": 272643089,
        "sender_full_name": "Jubilee",
        "timestamp": 1645421337
    },
    {
        "content": "<p>yeah, you add a “point” to your operator, which makes it “pointwise”.</p>",
        "id": 272643090,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645421338
    },
    {
        "content": "<p><em>points up</em></p>",
        "id": 272643101,
        "sender_full_name": "Jubilee",
        "timestamp": 1645421349
    },
    {
        "content": "<p>SEE?</p>",
        "id": 272643104,
        "sender_full_name": "Jubilee",
        "timestamp": 1645421353
    },
    {
        "content": "<p>it's apparently a math thing.</p>",
        "id": 272643119,
        "sender_full_name": "Jubilee",
        "timestamp": 1645421374
    },
    {
        "content": "<p>I just checked the Matlab docs and they just say \"element by element\"</p>",
        "id": 272643194,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1645421409
    },
    {
        "content": "<p>Fortunately, for my sanity</p>",
        "id": 272643202,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1645421416
    },
    {
        "content": "<p>and I’m pretty sure Matlab got it as an ASCII verdion of APL’s ¨ operator, but thats for another day 🍵</p>",
        "id": 272643378,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1645421631
    },
    {
        "content": "<p>⍝ Note well</p>",
        "id": 272643475,
        "sender_full_name": "Jubilee",
        "timestamp": 1645421731
    },
    {
        "content": "<p>decided to poke twitter for vibes: <a href=\"https://twitter.com/workingjubilee/status/1501274323939520514\">https://twitter.com/workingjubilee/status/1501274323939520514</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/workingjubilee/status/1501274323939520514\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/b918d32b7ab0e274b678c4f5dfa1cb06074b0d52/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313335393238383834383733323138303438342f52675f333955665f5f6e6f726d616c2e6a7067\"></a><p>completely random vibe check for what feels best for the terminology for the most common SIMD type to SIMD type operations (feel free to reply with your \"other\"... these are also called \"vertical\" operations, but we are leaning towards \"vertical is bad, actually\"):</p><span>- hyper💉💉💉jubilee (@workingjubilee)</span></div></div>",
        "id": 274909676,
        "sender_full_name": "Jubilee",
        "timestamp": 1646954132
    },
    {
        "content": "<p>If we went with elementwise (which I'd be ok with, I think) we'd probably want to remove all references to lanes</p>",
        "id": 274910262,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646954511
    },
    {
        "content": "<p>still rooting for <code>vadd</code> and <code>vmax</code> and <code>vclamp</code> etc</p>",
        "id": 274915136,
        "sender_full_name": "Lokathor",
        "timestamp": 1646957851
    },
    {
        "content": "<p>Yeah, I would just say \"elements\" and \"elementwise\" and if I have to, refer to the \"index\".</p>",
        "id": 274918691,
        "sender_full_name": "Jubilee",
        "timestamp": 1646960364
    },
    {
        "content": "<p>Yeah, can't really avoid index for things like scatter/gather</p>",
        "id": 274918863,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1646960463
    },
    {
        "content": "<p>Okay, it seems like the overwhelming winner is in fact elementwise.</p>",
        "id": 275034782,
        "sender_full_name": "Jubilee",
        "timestamp": 1647033387
    },
    {
        "content": "<p><a href=\"https://libre-soc.org/irclog/%23libre-soc.2022-03-11.log.html#t2022-03-11T21:20:52\">shared on #libre-soc</a>, i remember Luke making a big deal about preferring element rather than lane when referring to vectors</p>",
        "id": 275035719,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647033929
    },
    {
        "content": "<p>Yeah, I don't pretend this is like... big scientific experiment, there is an insane amount of sampling bias.</p>",
        "id": 275035943,
        "sender_full_name": "Jubilee",
        "timestamp": 1647034045
    },
    {
        "content": "<p>in our svp64 docs, vertical/horizontal is kinda swapped from what portable-simd currently uses</p>",
        "id": 275035988,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647034080
    },
    {
        "content": "<p>in svp64, horizontal means elementwise, vertical is a kinda hardware-vectorized loop, and we use reduce rather than portable-simd's horizontal</p>",
        "id": 275036252,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647034211
    },
    {
        "content": "<p>imho we (portable-simd) should probably rename <code>Simd::horizontal_*</code> to <code>Simd::reduce_*</code></p>",
        "id": 275036376,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647034308
    },
    {
        "content": "<p>I'd be okay with reduce</p>",
        "id": 275038621,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647035484
    },
    {
        "content": "<p>I don't think it's ambiguous in any way</p>",
        "id": 275038651,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647035505
    },
    {
        "content": "<p>I agree that <code>reduc{e,ing}</code> is marginally better. I am also fine with Weird Inconsistencies if they \"feel right\", tho'.</p>",
        "id": 275063948,
        "sender_full_name": "Jubilee",
        "timestamp": 1647042954
    },
    {
        "content": "<p>We have <code>Iterator::reduce</code> now, so there's precedent for the term.  (Could also use <code>fold</code>.)</p>",
        "id": 275064038,
        "sender_full_name": "scottmcm",
        "timestamp": 1647043045
    },
    {
        "content": "<p>imho fold is worse for simd, since i've never seen it used with simd, whereas i've seen reduce used in quite a few simd libraries/apis</p>",
        "id": 275064610,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647043490
    },
    {
        "content": "<p>Yeah, LLVM uses it, for example.</p>",
        "id": 275068365,
        "sender_full_name": "scottmcm",
        "timestamp": 1647047246
    }
]