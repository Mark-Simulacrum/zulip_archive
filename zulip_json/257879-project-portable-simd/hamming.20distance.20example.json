[
    {
        "content": "<p>Posting here if anyone wants to take a crack at coming up with the fastest SIMD version of the <code>hamming distance</code> exercise</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">hamming0</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">acc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">acc</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hamming0</span><span class=\"p\">(</span><span class=\"s\">\"abcabc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"abcabb\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277549667,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648930958
    },
    {
        "content": "<p>I do plan to try,  happy for anyone else to do so as well since you have much more experience, but for my application I'm interested in the u8 version because that's how we store genetic information.</p>",
        "id": 277549970,
        "sender_full_name": "Samuel Shepard",
        "timestamp": 1648931331
    },
    {
        "content": "<p>Oh, yeah, the <code>.chars()</code> there is going to essentially keep it from ever using simd.</p>",
        "id": 277549981,
        "sender_full_name": "scottmcm",
        "timestamp": 1648931383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480147\">@Samuel Shepard</span> if you're already looking at DNA/RNA seq's,</p>\n<ol>\n<li>May I suggest looking at Julia's <code>BioSequences.jl</code> <a href=\"https://biojulia.net/BioSequences.jl/stable/counting/\">package</a>?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"k\">using</span> <span class=\"n\">BioSequences</span>\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"o\">!=</span><span class=\"p\">,</span> <span class=\"sa\">dna</span><span class=\"s\">\"ATCGM\"</span><span class=\"p\">,</span> <span class=\"sa\">dna</span><span class=\"s\">\"GCCGM\"</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n</code></pre></div>\n<p>That package will already handle most of the super efficient encoding and bit packing and SIMD that you want. No need to reinvent the wheel if you just want something that's already productive. Specifically, if you can provide more specific information on the base pair encoding,it is possible to speedup the computations and such by simply changing the types.</p>\n<ol start=\"2\">\n<li><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> what's the alternative to <code>chars()</code> here? I'm fighting <code>rustc</code> to give me a plain bytes iterator.</li>\n</ol>",
        "id": 277550289,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648931835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277550289\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> what's the alternative to <code>chars()</code> here? I'm fighting <code>rustc</code> to give me a plain bytes iterator.</li>\n</ol>\n</blockquote>\n<p><code>.bytes()</code></p>",
        "id": 277550360,
        "sender_full_name": "Jubilee",
        "timestamp": 1648931885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277550289\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> what's the alternative to <code>chars()</code> here? I'm fighting <code>rustc</code> to give me a plain bytes iterator.</li>\n</ol>\n</blockquote>\n<p>or <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes\">https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes</a> for a <code>&amp;[u8]</code>.</p>",
        "id": 277550369,
        "sender_full_name": "scottmcm",
        "timestamp": 1648931894
    },
    {
        "content": "<p>...darn it I would've sworn I tried that.</p>",
        "id": 277550386,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648931924
    },
    {
        "content": "<p>Here's my stab at a scalar version: <a href=\"https://rust.godbolt.org/z/n3KMr1xxr\">https://rust.godbolt.org/z/n3KMr1xxr</a></p>",
        "id": 277550400,
        "sender_full_name": "scottmcm",
        "timestamp": 1648931943
    },
    {
        "content": "<p>Neat!</p>",
        "id": 277550489,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648932028
    },
    {
        "content": "<p>What are the metrics that we want to talk to people about here?</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>Iterations:        100\nInstructions:      12100\nTotal Cycles:      3220\nTotal uOps:        12700\n\nDispatch Width:    6\nuOps Per Cycle:    3.94\nIPC:               3.76\nBlock RThroughput: 31.0\n</code></pre></div>",
        "id": 277550502,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648932049
    },
    {
        "content": "<p>It's okay to flail a bit. No language has a perfect story for \"here's the method you want to use when you want type X\".<br>\nlike<br>\nit'd work if you knew the Bytes type exists.</p>",
        "id": 277550503,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932053
    },
    {
        "content": "<p>and is in fact an iterator over bytes<br>\nbut you don't know a priori what the iterator over bytes is named</p>",
        "id": 277550519,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932081
    },
    {
        "content": "<p>Oh, with a higher target-cpu that works much better:  <a href=\"https://rust.godbolt.org/z/5cWE836xq\">https://rust.godbolt.org/z/5cWE836xq</a></p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%17</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ne</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%wide.load</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%wide.load29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!84</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%18</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ne</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%wide.load26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%wide.load30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!84</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%19</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ne</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%wide.load27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%wide.load31</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!84</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%20</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">icmp</span><span class=\"w\"> </span><span class=\"k\">ne</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%wide.load28</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%wide.load32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!84</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%21</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">zext</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%17</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!105</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%22</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">zext</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%18</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!105</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%23</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">zext</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%19</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!105</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%24</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">zext</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i1</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%20</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!105</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%25</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%vec.phi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%21</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!106</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%26</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%vec.phi23</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!106</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%27</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%vec.phi24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%23</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!106</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%28</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">add</span><span class=\"w\"> </span><span class=\"p\">&lt;</span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"k\">x</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nv\">%vec.phi25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">%24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">!dbg</span><span class=\"w\"> </span><span class=\"nv nv-Anonymous\">!106</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277550521,
        "sender_full_name": "scottmcm",
        "timestamp": 1648932083
    },
    {
        "content": "<p>Surely there's a neat explainer that can go in the <code>Beginner Guide</code>/<code>README.md</code></p>",
        "id": 277550525,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648932088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277550519\">said</a>:</p>\n<blockquote>\n<p>and is in fact an iterator over bytes<br>\nbut you don't know a priori what the iterator over bytes is named</p>\n</blockquote>\n<p>If we had smth like Haskell's type-driven search for \"I want the function on type X that returns a type that <code>impl Iterator&lt;Item = u8&gt;</code> actually that would be pretty good.</p>",
        "id": 277550577,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> whoa, didn't know you could change the target-cpu like that...</p>\n<p>I should <span aria-label=\"writing\" class=\"emoji emoji-270d\" role=\"img\" title=\"writing\">:writing:</span> in the <code>README.md</code>...</p>",
        "id": 277550579,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648932158
    },
    {
        "content": "<p>Yes.</p>",
        "id": 277550585,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932165
    },
    {
        "content": "<p>Do we support tune-cpu yet?</p>",
        "id": 277550588,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932178
    },
    {
        "content": "<p>Only on nightly, maybe?</p>",
        "id": 277550596,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932184
    },
    {
        "content": "<p>Oh, switching off <code>usize</code> down to <code>u32</code> unsurprisingly helps a bunch, at it does 8-LANES instead of 4-LANES: <a href=\"https://rust.godbolt.org/z/W8roKjsxM\">https://rust.godbolt.org/z/W8roKjsxM</a></p>",
        "id": 277550653,
        "sender_full_name": "scottmcm",
        "timestamp": 1648932245
    },
    {
        "content": "<p>I guess it doesn't know how to sink casts into simd chains the way it does for scalar code.</p>",
        "id": 277550675,
        "sender_full_name": "scottmcm",
        "timestamp": 1648932303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277550653\">said</a>:</p>\n<blockquote>\n<p>Oh, switching off <code>usize</code> down to <code>u32</code> unsurprisingly helps a bunch, at it does 8-LANES instead of 4-LANES: <a href=\"https://rust.godbolt.org/z/W8roKjsxM\">https://rust.godbolt.org/z/W8roKjsxM</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> is there a list of all the different comp targets besids <code>target-cpu=znver2</code> that I can point our kind readers to?</p>",
        "id": 277550688,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648932347
    },
    {
        "content": "<p><code>-C target-cpu=help</code></p>",
        "id": 277550740,
        "sender_full_name": "scottmcm",
        "timestamp": 1648932385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span>  I am specifically rewriting some things I have in other languages in Rust for a production purpose. All of these simple functions have been written somewhere by someone, it's just a matter of learning the basics of vectorization so I can accelerate whatever I want. To that end, I'm starting with simple and familiar problems.</p>\n<p>I'm particularly impressed with Rust's overall portability. It also helps me to write better code. I briefly looked at Julia, but AOT compile story was very painful. I liked it otherwise.</p>\n<p>Sorry for the tangent.</p>",
        "id": 277550750,
        "sender_full_name": "Samuel Shepard",
        "timestamp": 1648932401
    },
    {
        "content": "<p>ha ha only serious: compiler that takes Julia code and emits Rust</p>",
        "id": 277550815,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480147\">Samuel Shepard</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277550750\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span>  I am specifically rewriting some things I have in other languages in Rust for a production purpose. All of these simple functions have been written somewhere by someone, it's just a matter of learning the basics of vectorization so I can accelerate whatever I want. To that end, I'm starting with simple and familiar problems.</p>\n<p>I'm particularly impressed with Rust's overall portability. It also helps me to write better code. I briefly looked at Julia, but AOT compile story was very painful. I liked it otherwise.</p>\n<p>Sorry for the tangent.</p>\n</blockquote>\n<p>No worries - that's a good reason to switch to Rust imo. It's gotten way, way better in the last few releases if you are willing to take a look at it again, but no worries.</p>",
        "id": 277550828,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648932538
    },
    {
        "content": "<p>The most useful targets for me are </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">v4</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which you can read more about in <a href=\"https://github.com/rust-lang/rust/issues/82024\">#82024</a></p>\n<p>Because individual chips are generally not that useful (running on your own machine only you can use <code>native</code>), but the different \"eras\" of chips (since x64 is so old) can help.</p>",
        "id": 277550830,
        "sender_full_name": "scottmcm",
        "timestamp": 1648932542
    },
    {
        "content": "<p><code>rustc --print</code> accepts the following arguments:</p>\n<p><code>[crate-name|file-names|sysroot|target-libdir|cfg|target-list|target-cpus|target-features|relocation-models|code-models|tls-models|target-spec-json|native-static-libs|stack-protector-strategies|link-args]</code></p>",
        "id": 277550889,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932608
    },
    {
        "content": "<p>Often you want to combine this with e.g.<br>\n<code>--target</code></p>",
        "id": 277550899,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932642
    },
    {
        "content": "<p>so you compose those with <code>| grep &lt;PATTERN&gt;</code> to answer a query like<br>\n\"what are the features for this?\"<br>\nhere is an example of this being done in a rustc issue, because this was one of my recent side adventures<br>\n<a href=\"https://github.com/rust-lang/rust/issues/95122\">https://github.com/rust-lang/rust/issues/95122</a></p>",
        "id": 277550969,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277550830\">said</a>:</p>\n<blockquote>\n<p>The most useful targets for me are </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"o\">-</span><span class=\"n\">v4</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which you can read more about in <a href=\"https://github.com/rust-lang/rust/issues/82024\">#82024</a></p>\n<p>Because individual chips are generally not that useful (running on your own machine only you can use <code>native</code>), but the different \"eras\" of chips (since x64 is so old) can help.</p>\n</blockquote>\n<p>Oh thank you, this really simplifies down a bunch of stuff. I'm so glad these features got coalesced into a single monotonic version number.</p>",
        "id": 277551013,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648932804
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/95319\">https://github.com/rust-lang/rust/issues/95319</a> <code>--print cfg</code> is particularly useful</p>",
        "id": 277551022,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932816
    },
    {
        "content": "<p>Yeah, those targets emerged from LLVM and GCC sitting down with like, some distro maintainers I think also? and hashing out the \"what should the targets be?\"</p>",
        "id": 277551142,
        "sender_full_name": "Jubilee",
        "timestamp": 1648932948
    },
    {
        "content": "<p>Oh, the table in the PDF is pretty nice:<br>\n<a href=\"/user_uploads/4715/DVTHx0CzfJOYByVbAMVpHTDY/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/DVTHx0CzfJOYByVbAMVpHTDY/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/DVTHx0CzfJOYByVbAMVpHTDY/image.png\"></a></div>",
        "id": 277551206,
        "sender_full_name": "scottmcm",
        "timestamp": 1648932992
    },
    {
        "content": "<p>It turns out they're almost identical to certain CPUs, like e.g. v3 is very very close to <code>-Ctarget-cpu=haswell</code>.</p>",
        "id": 277551213,
        "sender_full_name": "Jubilee",
        "timestamp": 1648933020
    },
    {
        "content": "<p>But that's more a function of \"the Haswell happens to be very representative of the 'era' of x86-64 CPUs they wanted to describe\" than anything else. v3 may, for instance, use different scheduling information than the Haswell.</p>",
        "id": 277551231,
        "sender_full_name": "Jubilee",
        "timestamp": 1648933079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277551206\">said</a>:</p>\n<blockquote>\n<p>Oh, the table in the PDF is pretty nice:<br>\n<a href=\"/user_uploads/4715/DVTHx0CzfJOYByVbAMVpHTDY/image.png\">image.png</a></p>\n</blockquote>\n<p>So do those represent that if you are in <code>v2</code>, you at least have all the instructions in <code>v1</code>, and maybe but not necessarily all of those in <code>v2</code>?</p>",
        "id": 277551292,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648933128
    },
    {
        "content": "<p>And for simd, it looks like it's largely \"basic 128-bit simd\", \"good 128-bit simd\", \"256-bit simd\", \"newfangled 512-bit simd\" <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 277551312,
        "sender_full_name": "scottmcm",
        "timestamp": 1648933155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277551312\">said</a>:</p>\n<blockquote>\n<p>And for simd, it looks like it's largely \"basic 128-bit simd\", \"good 128-bit simd\", \"256-bit simd\", \"newfangled 512-bit simd\" <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>Correct.</p>",
        "id": 277551397,
        "sender_full_name": "Jubilee",
        "timestamp": 1648933217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277551292\">said</a>:</p>\n<blockquote>\n<p>So do those represent that if you are in <code>v2</code>, you at least have all the instructions in <code>v1</code>, and maybe but not necessarily all of those in <code>v2</code>?</p>\n</blockquote>\n<p>No, they are \"this codegens assuming all of these features are available\"</p>",
        "id": 277551438,
        "sender_full_name": "Jubilee",
        "timestamp": 1648933247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277551292\">said</a>:</p>\n<blockquote>\n<p>So do those represent that if you are in <code>v2</code>, you at least have all the instructions in <code>v1</code>, and maybe but not necessarily all of those in <code>v2</code>?</p>\n</blockquote>\n<p>I think it's \"everything in your row and above for sure, and you can use runtime detection for fancier things if you want\".</p>",
        "id": 277551439,
        "sender_full_name": "scottmcm",
        "timestamp": 1648933253
    },
    {
        "content": "<p>So a recent Ryzen processor can run <code>v3</code> code but would sigill on <code>v4</code>.</p>",
        "id": 277551460,
        "sender_full_name": "Jubilee",
        "timestamp": 1648933313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I got almost identical timings (IIUC) to your <code>filter/count</code> with the <code>map/fold</code> and appropriate <code>&amp;[u8] -&gt; usize</code> <a href=\"https://rust.godbolt.org/z/bvo15hfhE\">switching here</a></p>",
        "id": 277551937,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1648933902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/hamming.20distance.20example/near/277551937\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> I got almost identical timings (IIUC) to your <code>filter/count</code> with the <code>map/fold</code> and appropriate <code>&amp;[u8] -&gt; usize</code> <a href=\"https://rust.godbolt.org/z/bvo15hfhE\">switching here</a></p>\n</blockquote>\n<p>That's to be expected, with <code>usize</code>, because <code>filter</code>+<code>count</code> is implemented using <code>map</code>+<code>sum</code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>  <a href=\"https://doc.rust-lang.org/1.59.0/src/core/iter/adapters/filter.rs.html#77\">https://doc.rust-lang.org/1.59.0/src/core/iter/adapters/filter.rs.html#77</a></p>\n<p>Try comparing these two instead: <a href=\"https://rust.godbolt.org/z/oTE1dosaf\">https://rust.godbolt.org/z/oTE1dosaf</a></p>",
        "id": 277552478,
        "sender_full_name": "scottmcm",
        "timestamp": 1648934629
    }
]