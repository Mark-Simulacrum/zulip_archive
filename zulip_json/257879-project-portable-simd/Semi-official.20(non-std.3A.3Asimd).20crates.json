[
    {
        "content": "<p>Not sure if this is really under the purview of our charter, but it may be a good idea to set the groundwork for some semi-official crates similar to the <code>num-*</code> crates, such as maybe <code>simd-traits</code> and <code>simd-complex</code>.  I think this would allow us to provide some more experimental functionality while still stabilizing the fundamentals.  Thoughts?</p>",
        "id": 211292821,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601057095
    },
    {
        "content": "<p>depends? I think it would be better to put those things in the core crate API if they are part of our design. OTOH it's also fine if we build things outside of it that do work like what you are saying, I don't know what the contents you are thinking of are.</p>",
        "id": 211293873,
        "sender_full_name": "Jubilee",
        "timestamp": 1601057618
    },
    {
        "content": "<p>Like, I have used the num-traits crate, to be clear! I just am not entirely sure where you are going with this.</p>",
        "id": 211294032,
        "sender_full_name": "Jubilee",
        "timestamp": 1601057692
    },
    {
        "content": "<p>I think all I'm getting at is there are things that are important enough to be part of the ecosystem but not necessarily complete enough to be stabilized in core, and it might make our jobs a bit easier to make that distinction.</p>",
        "id": 211294468,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601057923
    },
    {
        "content": "<p>That's fair.</p>",
        "id": 211294496,
        "sender_full_name": "Jubilee",
        "timestamp": 1601057938
    },
    {
        "content": "<p>I guess my pushback is that if we have core abstraction traits then they should be part of std's API, unless someone can present to me a really good reason for not. It feels kind of absurd to me that Integer, Signed, and Unsigned are not core, for instance. But for simd-complex, yes, that should be a separate crate.</p>",
        "id": 211294567,
        "sender_full_name": "Jubilee",
        "timestamp": 1601057987
    },
    {
        "content": "<p>For example, it would probably be nice to have a trait that all vectors implement indicating number of lanes, scalar type, etc.  But I'm not sure that _must_ be in core, an auxiliary crate might be sufficient</p>",
        "id": 211294591,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058001
    },
    {
        "content": "<p>Yeah, simd-complex must be simply since num-complex isn't in core.</p>",
        "id": 211294703,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058045
    },
    {
        "content": "<p>even just in spirit, I feel doubt about a particular implementation of complex numbers or such being non-core, I guess? But like, Float, Signed, Unsigned? I just feel _weird_ about that decision in 2020.</p>",
        "id": 211295081,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058218
    },
    {
        "content": "<p>I think the biggest argument against putting it in core is that the interface is permanent. Not that num-traits frequently changes, but I think it's broad enough that it could need breaking changes</p>",
        "id": 211295083,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058220
    },
    {
        "content": "<p>That's fair, I do think if something we're not sure of, we should push it out.</p>",
        "id": 211295159,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058246
    },
    {
        "content": "<p>Something came up in my PR for the initial vector types whether or not we should support a vector type of pointers.  I think that would be a good candidate for an auxiliary crate that can be RFC'd in the future</p>",
        "id": 211295343,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058344
    },
    {
        "content": "<p>Rust <em>needs</em> to present an abstraction over vectors, but anything in std should be one we're happy with 20 years later. So nothing should get stabilized before we're 20-years-confident. Because at the very minimum, it would take 3 years to break on an edition boundary. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 211295350,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058347
    },
    {
        "content": "<p>Exactly. I'm not confident that num-traits for example will be perfectly fine in 20 years. But f32 itself probably is fine.</p>",
        "id": 211295493,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058409
    },
    {
        "content": "<p>I mean.<br>\nf32 needs to exist even if it sucks and has underspecified semantics. &lt;_&lt;</p>",
        "id": 211295536,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058431
    },
    {
        "content": "<p>Heh true</p>",
        "id": 211295553,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058439
    },
    {
        "content": "<p>And that's one thing not covered by the stability promise:<br>\nUNDERSPECIFIED SEMANTICS ARE SUBJECT TO CHANGE AT ANY TIME.</p>",
        "id": 211295578,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058454
    },
    {
        "content": "<p>Maybe i32 would have been a better choice for my argument :)</p>",
        "id": 211295704,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058491
    },
    {
        "content": "<p>yeah i32s will be fine~<br>\nI actually think it's perfectly appropriate since the problem with f32 is actually that the semantics are underspecified, so we can work around that.</p>",
        "id": 211295853,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058559
    },
    {
        "content": "<p><del>std doesn't _say_ it's an IEEE754 floating point number, just that it's a floating point number. :^)</del><br>\nWait it does. Damn, I was looking in the wrong place!</p>",
        "id": 211295897,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058586
    },
    {
        "content": "<p>Haha I thought it did</p>",
        "id": 211296035,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601058636
    },
    {
        "content": "<p>BETTER VERSION: std doesn't say it provides IEEE754 behavior even in the absence of machine support.</p>",
        "id": 211296068,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058657
    },
    {
        "content": "<p><del>though I would actually like it to.</del></p>",
        "id": 211296157,
        "sender_full_name": "Jubilee",
        "timestamp": 1601058707
    },
    {
        "content": "<p>I agree that the vector type over pointers may be a bit too Interesting for core tho', looking at them.</p>\n<p>One thing that is happening is that libs is actually discussing changing e.g. Mutex, because it's poison-dependent, and there have been Problems with how that has been handled (esp. in user code), so that sort of particular implementation detail... something that doesn't seem obvious, but is rather an opinionated decision exposed directly in the API, and one that doesn't have a clear alignment so far with Rust's other strong opinions... also seems like a thing to pay attention to.</p>",
        "id": 211299114,
        "sender_full_name": "Jubilee",
        "timestamp": 1601060093
    },
    {
        "content": "<p>So, taking a page from core::ops, we clearly could have some core::simd::ops, and that would be traits of vetical operations like add and mul and bitand and sqrt</p>",
        "id": 211329331,
        "sender_full_name": "Lokathor",
        "timestamp": 1601076888
    },
    {
        "content": "<p>and then we don't need to specify every possible float thing or integer thing all at once</p>",
        "id": 211329353,
        "sender_full_name": "Lokathor",
        "timestamp": 1601076915
    },
    {
        "content": "<p>I assumed we would simply implement core::ops::* for vectors</p>",
        "id": 211329679,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601077283
    },
    {
        "content": "<p>The traits in num-traits are generally supertraits of those with some extra functionality</p>",
        "id": 211329734,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601077325
    },
    {
        "content": "<p>I also assumed core::ops for simd types. i guess we'd only need the completely new ops to be in core::simd::ops, so like sqrt, cos, sin, etc</p>",
        "id": 211332739,
        "sender_full_name": "Lokathor",
        "timestamp": 1601081073
    },
    {
        "content": "<p>Wouldn't those just be member fns, just like f32 etc?</p>",
        "id": 211332760,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601081125
    },
    {
        "content": "<p>Yes, but you want to be able to write generics too</p>",
        "id": 211332818,
        "sender_full_name": "Lokathor",
        "timestamp": 1601081183
    },
    {
        "content": "<p>since every lane count is a different type, we need to be <em>extra</em> generic friendly</p>",
        "id": 211332830,
        "sender_full_name": "Lokathor",
        "timestamp": 1601081207
    },
    {
        "content": "<p>I suppose that is the sort of thing I am proposing to exist in simd-traits as opposed to core</p>",
        "id": 211332839,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601081224
    },
    {
        "content": "<p>I think each trait is so simple and obvious that just putting it in core is the simpler route</p>",
        "id": 211332897,
        "sender_full_name": "Lokathor",
        "timestamp": 1601081296
    },
    {
        "content": "<p>Why is num-traits not part of core?  My guess is that it's not quite so obvious</p>",
        "id": 211333208,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601081737
    },
    {
        "content": "<p>I think one reason is that once you've defined a supertrait you can't change the subtraits</p>",
        "id": 211333235,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601081762
    },
    {
        "content": "<p>One possibility that comes to mind is that core may add another operator that desugars into some trait, but we can't add that as a subtrait to say core::simd::Integer or whatever</p>",
        "id": 211333461,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601082049
    },
    {
        "content": "<p>you can probably hunt down the PRs, issues, and RFCs that discuss num-traits and why it isn't in core.</p>",
        "id": 211337867,
        "sender_full_name": "Jubilee",
        "timestamp": 1601088212
    },
    {
        "content": "<p>and if someone does that, we will be significantly more armed for this discussion.</p>",
        "id": 211337882,
        "sender_full_name": "Jubilee",
        "timestamp": 1601088237
    },
    {
        "content": "<p>Well <strong>one</strong> issue is that num-traits is, uh, <em>broad</em> traits. Like, there's <a href=\"https://docs.rs/num-traits/0.2.12/num_traits/trait.Num.html\">Num</a> which requires <em>four</em> traits, and <em>three</em> of those have other required elements themselves. It's complicated, but not in a good way. I'm sure it works well in practice, but it's not <em>obviously</em> the most correct design. There's other designs that you could have </p>\n<p>On the other hand, the design of the <code>core::ops</code> traits are <em>way</em> simpler and much more obviously correct. There aren't batches of things that go together. You can impl <code>Add</code> without <code>Mul</code>, without <code>Div</code>, etc etc. By making the traits one op at a time, you <em>do</em> get gross piles of trait bounds on generic math (eg <code>where T: foo+bar+baz+quack+moo+bark</code>), but each trait can be simply understood in isolation, and it can be implemented for each type just fine.</p>",
        "id": 211338627,
        "sender_full_name": "Lokathor",
        "timestamp": 1601089228
    },
    {
        "content": "<p>I think I'm fine with adding the base traits, just skeptical of the supertraits (like Num, Float, Signed, etc).  If any traits can/should be common with scalar types I'm guessing it doesn't belong in the std::simd namespace</p>",
        "id": 211339403,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601090471
    },
    {
        "content": "<p>I'd be fine with just recording an official stance that \"SIMD types should, by default, implement ops traits vertically\", and then leaving more traits to be added to <code>core::num</code> later on. Perhaps a \"we also propose the following traits but they can be accepted separately from the main SIMD work\"</p>",
        "id": 211339560,
        "sender_full_name": "Lokathor",
        "timestamp": 1601090723
    }
]