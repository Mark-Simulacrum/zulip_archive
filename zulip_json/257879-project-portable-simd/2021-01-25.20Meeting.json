[
    {
        "content": "<p>Hello everyone! Are we here? 'cause I sure wasn't last week! <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 223958635,
        "sender_full_name": "Jubilee",
        "timestamp": 1611608163
    },
    {
        "content": "<p>I'm busy but should be able to pop in around half an hour?</p>",
        "id": 223958735,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611608207
    },
    {
        "content": "<p>I'll spend the next 30min straightening out my brain then! ( just kidding, it will never be straight, it recurs too often. )</p>",
        "id": 223958774,
        "sender_full_name": "Jubilee",
        "timestamp": 1611608232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> There is your answer! Not now, but in 30.<br>\nping <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span></p>",
        "id": 223959238,
        "sender_full_name": "Jubilee",
        "timestamp": 1611608418
    },
    {
        "content": "<p>I should be around</p>",
        "id": 223960827,
        "sender_full_name": "Lokathor",
        "timestamp": 1611609097
    },
    {
        "content": "<p>Does the link get posted here?</p>",
        "id": 223961353,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611609356
    },
    {
        "content": "<p>You mean the hackmd?</p>",
        "id": 223962168,
        "sender_full_name": "Jubilee",
        "timestamp": 1611609724
    },
    {
        "content": "<p>Oh, perhaps I misunderstood \"meeting\" as \"everyone joins a video call at a designated time\" but perhaps people mean they will all be here in chat typing away.</p>",
        "id": 223962321,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611609819
    },
    {
        "content": "<p>Thus asking for a link to join said video call meeting.</p>",
        "id": 223962359,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611609840
    },
    {
        "content": "<p>It's just \"we all show up to type in the topic at the same time.\"</p>",
        "id": 223962456,
        "sender_full_name": "Lokathor",
        "timestamp": 1611609879
    },
    {
        "content": "<p>Gotcha. Thanks.</p>",
        "id": 223962556,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611609929
    },
    {
        "content": "<p>We discussed that but I expressed a preference for text precisely because it can be reviewed later by uh, people who miss the meeting. <strong>cough</strong></p>",
        "id": 223962827,
        "sender_full_name": "Jubilee",
        "timestamp": 1611610031
    },
    {
        "content": "<p>Also makes it easier if it doesn't require rigidly dedicated quiet spacetime since lots of people would be in kind of awkward positions with respect to attending the meeting-time if it was that.</p>\n<p>And speaking of, hello everyone!</p>",
        "id": 223963415,
        "sender_full_name": "Jubilee",
        "timestamp": 1611610297
    },
    {
        "content": "<p>I spent basically every waking moment of last week either venting steam or doing things that involve overheating, so I haven't really gotten caught up with things yet. Where are we at?</p>",
        "id": 223963659,
        "sender_full_name": "Jubilee",
        "timestamp": 1611610410
    },
    {
        "content": "<p>It seems we last left off with<br>\n<span class=\"user-mention silent\" data-user-id=\"204346\">Ashley Mannix</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/regular.20meeting.2020201-01-18.2F19/near/223169491\">said</a>:</p>\n<blockquote>\n<p>So next steps are:</p>\n<ul>\n<li>Add a power of 2 restriction to repr(simd) lane widths</li>\n<li>Merge in the mega test PR</li>\n<li>See if we can wrap up the mask API a little more</li>\n<li>Design shuffles</li>\n<li>Submodule into nightly</li>\n</ul>\n<p>How does that look?</p>\n</blockquote>",
        "id": 223963803,
        "sender_full_name": "Jubilee",
        "timestamp": 1611610466
    },
    {
        "content": "<p>That's still roughly where we are</p>",
        "id": 223963851,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611610491
    },
    {
        "content": "<p>I added the power of two restrictions to my rustc PR, but that still needs to be merged</p>",
        "id": 223963905,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611610515
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223963910,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611610517
    },
    {
        "content": "<p>And probably needs to wait on crater <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 223963941,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611610529
    },
    {
        "content": "<p>if it's a crater run, it might be done soon or it might take a while, depending on the queue. We know the first part of the changes are good, so is there a reason we need to wait on crater specifically?</p>",
        "id": 223964262,
        "sender_full_name": "Jubilee",
        "timestamp": 1611610689
    },
    {
        "content": "<p>mega test PR?</p>",
        "id": 223964501,
        "sender_full_name": "Jubilee",
        "timestamp": 1611610841
    },
    {
        "content": "<p>No one has triggered crater yet, but the PR introduces a bunch of breaking changes for #repr(simd) so we should make sure we aren't hitting anything important</p>",
        "id": 223964677,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611610929
    },
    {
        "content": "<p>hm, so we'd have to crater even if we split things up? fair enough</p>",
        "id": 223964715,
        "sender_full_name": "Jubilee",
        "timestamp": 1611610960
    },
    {
        "content": "<p>So the \"mega test PR\" is that one?</p>",
        "id": 223964857,
        "sender_full_name": "Jubilee",
        "timestamp": 1611611046
    },
    {
        "content": "<p>And it looks like most of the remaining issue is designing our first draft for shuffles.</p>",
        "id": 223964984,
        "sender_full_name": "Jubilee",
        "timestamp": 1611611111
    },
    {
        "content": "<p>No, the mega test PR is just my branch with a ton of proptests</p>",
        "id": 223965285,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611611277
    },
    {
        "content": "<p>Which for now only works with my branch of rustc</p>",
        "id": 223965347,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611611291
    },
    {
        "content": "<p>ohhh.</p>",
        "id": 223965371,
        "sender_full_name": "Jubilee",
        "timestamp": 1611611301
    },
    {
        "content": "<p>And yeah, shuffles and masks are completely independent</p>",
        "id": 223965395,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611611312
    },
    {
        "content": "<p>so the simd_shuffle API is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">simd_shuffle</span><span class=\"p\">(</span><span class=\"n\">v1</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arr</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">S</span><span class=\"w\"></span>\n</code></pre></div>\n<p>because it was hacked in using exceptions,<br>\nbut a version of that with const generics looks more like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">simd_shuffle</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v1</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">S</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">S</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and as a method it could look like, in usage</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">shuffle</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223965889,
        "sender_full_name": "Jubilee",
        "timestamp": 1611611582
    },
    {
        "content": "<p>I believe so. Unfortunately that requires full const generics</p>",
        "id": 223966117,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611611690
    },
    {
        "content": "<p>This offers the ability to smoothly compile x86 shuffles with immediate arguments, but many ISAs currently offer a fully \"dynamic\" shuffle that would look more like...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">simd_shuffle</span><span class=\"p\">(</span><span class=\"n\">v1</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">S</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arr</span>: <span class=\"p\">[</span><span class=\"n\">X</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">S</span><span class=\"w\"></span>\n<span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">shuffle</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223966229,
        "sender_full_name": "Jubilee",
        "timestamp": 1611611748
    },
    {
        "content": "<p>It would probably make sense for them to be separate functions</p>",
        "id": 223966344,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611611793
    },
    {
        "content": "<p>Right, it's probably fine if we just use different functions here, just That's Also A Choice.<br>\nI think sometimes people call one of these swizzling and one of these shuffling but I have no idea if there's a strict pattern to that to follow, so uh lol</p>",
        "id": 223966639,
        "sender_full_name": "Jubilee",
        "timestamp": 1611611930
    },
    {
        "content": "<p>by \"full const generics\" do you mean \"it requires const wellformedness\"? My impression is that it does require more than minimum const generics but const wf is closer at hand than other forms of const generic features.</p>",
        "id": 223966806,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612002
    },
    {
        "content": "<p>I just meant generally it doesn't use min_const_generics</p>",
        "id": 223967011,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612034
    },
    {
        "content": "<p>Oh yeah.<br>\nI think that's fine for our purposes.</p>",
        "id": 223967108,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612054
    },
    {
        "content": "<p>Yeah probably</p>",
        "id": 223967142,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612061
    },
    {
        "content": "<p>the docs team meeting ran long but yall have my full attention now, in the last -1 minutes of the meeting</p>",
        "id": 223967210,
        "sender_full_name": "Lokathor",
        "timestamp": 1611612074
    },
    {
        "content": "<p>Oh hey Lokathor!</p>",
        "id": 223967270,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612086
    },
    {
        "content": "<p>I would only consider it to be a problem if it was a blocker to stabilization. I'd rather have the nice API using generics than some bodge.</p>",
        "id": 223967394,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612113
    },
    {
        "content": "<p>(I'm here too but mostly lurking. Most of this is overmy head - for now.)</p>",
        "id": 223967502,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611612130
    },
    {
        "content": "<p>wait why are full const generics neede for the shuffle?</p>",
        "id": 223967679,
        "sender_full_name": "Lokathor",
        "timestamp": 1611612187
    },
    {
        "content": "<p>If the const argument is an array</p>",
        "id": 223967759,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612210
    },
    {
        "content": "<p>They would require \"const wellformedness\" to guarantee that they actually are within bounds and satisfy other constraints.</p>",
        "id": 223967821,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612226
    },
    {
        "content": "<p>hm, sorta</p>",
        "id": 223968084,
        "sender_full_name": "Lokathor",
        "timestamp": 1611612287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> Please feel free to ask questions! If they are relatively simple to answer it is possible to do so with little overhead, and it might help clarify things for everyone involved. If you ask something we can't toss off a quick answer to, it can be answered later.</p>",
        "id": 223968092,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-01-25.20Meeting/near/223968084\">said</a>:</p>\n<blockquote>\n<p>hm, sorta</p>\n</blockquote>\n<p>sorta? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 223968160,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612311
    },
    {
        "content": "<p>you can just accept excessive inputs and take only the lowest X bits from each input arg, which is sorta how they're claimed to work in the first place</p>",
        "id": 223968177,
        "sender_full_name": "Lokathor",
        "timestamp": 1611612317
    },
    {
        "content": "<p>I'm not sure what that means</p>",
        "id": 223968289,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612352
    },
    {
        "content": "<p>dunno if min_const_generics lets us use arrays of integers, but i don't think so</p>",
        "id": 223968290,
        "sender_full_name": "Lokathor",
        "timestamp": 1611612352
    },
    {
        "content": "<p>It does not</p>",
        "id": 223968312,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612361
    },
    {
        "content": "<p>Unfortunately</p>",
        "id": 223968367,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612369
    },
    {
        "content": "<p>oof.</p>",
        "id": 223968408,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612379
    },
    {
        "content": "<p>so like, say you have a f32x4, and you go to shuffle it, your lanes have to be 2 bits each. if someone puts in 5, that just takes the low 2 bits, the value effectively \"wraps\" back to 1</p>",
        "id": 223968487,
        "sender_full_name": "Lokathor",
        "timestamp": 1611612399
    },
    {
        "content": "<p>I haven't checked in on const generics in a while, but my understanding is that they were breaking up the const generics into subfeatures so that they could stabilize what they could stabilize as they go.</p>",
        "id": 223968587,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612428
    },
    {
        "content": "<p>yeah, min_const_generics is already riding the train to 1.51, i've got a crate lined up and everything</p>",
        "id": 223968646,
        "sender_full_name": "Lokathor",
        "timestamp": 1611612447
    },
    {
        "content": "<p>Right, I mean even moreso with features like const_generic_floats (or something like that) and such.</p>",
        "id": 223968911,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612520
    },
    {
        "content": "<p>So I think that seeing const_generic_arrays or whatever feature we might require is actually more plausible than not.</p>",
        "id": 223969610,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612725
    },
    {
        "content": "<p>Looks like maybe there should be a function like shuffle_u8 which takes a (generic length) u8 vector for a dynamic shuffle</p>",
        "id": 223969616,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612727
    },
    {
        "content": "<p>If we can, I'd like shuffle's semantics to <em>not</em> rely on vector lengths being powers-of-2 (required for masking), so can we have some other semantics please?</p>",
        "id": 223969683,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611612747
    },
    {
        "content": "<p>And then a function \"shuffle\" which just takes a const usize argument or something</p>",
        "id": 223969689,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611612749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> Can you elaborate how that looks a bit more?</p>",
        "id": 223969823,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> Have the proposed <em>shuffle</em> APIs been reliant on powers of 2 in some way I've not noticed? I thought we just required current SIMD types to line up.</p>",
        "id": 223970026,
        "sender_full_name": "Jubilee",
        "timestamp": 1611612852
    },
    {
        "content": "<p>how about just panicking, which is similar to what you'd get if you did <code>let a: [u8; 4] = ...; a[6]</code></p>",
        "id": 223970062,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611612866
    },
    {
        "content": "<p>it's the ignoring upper bits in the shuffle's const argument, masking off the top bits only works if the vector length is a power-of-2</p>",
        "id": 223970276,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611612941
    },
    {
        "content": "<p>ahh, yeah.<br>\nI think ideally we would just use const wellformedness instead, but honestly, my understanding is that the RISCVV arch doesn't differentiate between \"const\" and \"dynamic\" shuffles in terms of runtime? would SimpleV?</p>",
        "id": 223970523,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613047
    },
    {
        "content": "<p>since you get actual-lane-index = const-argument % vec-len which translates to actual-lane-index = const-argument &amp; (vec-len - 1) if vec-len is a power of 2</p>",
        "id": 223970545,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611613051
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>impl&lt;const N: usize&gt; SimdF32 {\n    pub fn shuffle&lt;const M: usize, const Indices: [usize; M]&gt;(self, other: Self) -&gt; SimdF32&lt;M&gt; { ... }\n    pub fn shuffle_usize&lt;const M: usize&gt;(self, other: Self, indices: SimdUsize&lt;M&gt;) -&gt; SimdF32&lt;M&gt; { ... }\n}\n</code></pre></div>",
        "id": 223970601,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613062
    },
    {
        "content": "<p>SimpleV (the new vectors for PowerPC) does support constant shuffles more efficiently, since it can address registers part-way through the vector since a vector is just a range of consecutive registers</p>",
        "id": 223970997,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611613187
    },
    {
        "content": "<p>also, there are some special shuffle instructions</p>",
        "id": 223971088,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611613224
    },
    {
        "content": "<p>Ah OK, then I withdraw my lamentation partly.</p>",
        "id": 223971112,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613239
    },
    {
        "content": "<p>I would vote for panicking or UB for out of range indices</p>",
        "id": 223971114,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613240
    },
    {
        "content": "<p>Probably with a checked and unchecked variant of the function</p>",
        "id": 223971147,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613257
    },
    {
        "content": "<p>Though if we could guarantee behavior without panicking that would be nice</p>",
        "id": 223971189,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613285
    },
    {
        "content": "<p>I imagine that's not possible since it's just architecture specific</p>",
        "id": 223971240,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613312
    },
    {
        "content": "<p>at the LLVM IR level, out of range indexes become undef elements iirc</p>",
        "id": 223971294,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611613325
    },
    {
        "content": "<p>I think for const indices we should compile error ideally, and for dynamic anything we can either say panic or provide an <code>unsafe shuffle_YOLO</code></p>",
        "id": 223971305,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613331
    },
    {
        "content": "<p>Undef meaning UB to access?</p>",
        "id": 223971328,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613348
    },
    {
        "content": "<p>Yeah I think we're all in agreement</p>",
        "id": 223971364,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613374
    },
    {
        "content": "<p>undef being <code>MaybeUninit::uninit()</code></p>",
        "id": 223971377,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611613382
    },
    {
        "content": "<p>I'm OK with slightly constraining shuffles to fit within architectural bounds here.</p>",
        "id": 223971403,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613404
    },
    {
        "content": "<p>if it makes the API cleaner, basically.</p>",
        "id": 223971416,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613414
    },
    {
        "content": "<p>though I'd have to double check, the shuffle may instead produce poison, which is UB to access</p>",
        "id": 223971446,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611613431
    },
    {
        "content": "<p>I'm ok with saying it's UB regardless of what LLVM does</p>",
        "id": 223971538,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613471
    },
    {
        "content": "<p>I don't think cranelift necessarily needs to match every quirk of LLVM</p>",
        "id": 223971565,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613494
    },
    {
        "content": "<p>And who knows what it does/will do</p>",
        "id": 223971585,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613511
    },
    {
        "content": "<p>Oh, so shuffle_usize is for producing a variable-length vector?</p>",
        "id": 223971612,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613525
    },
    {
        "content": "<p>Yes</p>",
        "id": 223971621,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613534
    },
    {
        "content": "<p>They actually both can change the length of the vector</p>",
        "id": 223971650,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613550
    },
    {
        "content": "<p>Though typically I assume you will want the same size</p>",
        "id": 223971715,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613573
    },
    {
        "content": "<p>...OK, not sure what shuffle_u8 would be for!</p>",
        "id": 223971829,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613651
    },
    {
        "content": "<p>so, llvm IR only has a const shuffle, dynamic shuffle would probably have to use cpu-specific intrinsics. llvm probably assumes element indexes are in-range since they are a constant, but it doesn't say for sure.</p>",
        "id": 223971849,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1611613661
    },
    {
        "content": "<p>...ah. Then I think we are implicitly moving dynamic shuffles to the back burner by comparison and assuming const shuffles for right now until we have more support out of rustc itself.</p>",
        "id": 223972038,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> shuffling within a very small range of the vector? Not sure either.</p>",
        "id": 223972042,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613777
    },
    {
        "content": "<p>I'm ok with that. I think const shuffles overall are more common</p>",
        "id": 223972244,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613882
    },
    {
        "content": "<p>speaking of, byte permutations are another weird shuffle intrinsic that a lot of arches support, I think even Intel does now but with AVX512? but I'm not sure if that's meaningfully different from \"treat SIMD type as a u8xN now, then do shuffle ops\".</p>",
        "id": 223972308,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613920
    },
    {
        "content": "<p>from the perspective of in-lang semantics</p>",
        "id": 223972357,
        "sender_full_name": "Jubilee",
        "timestamp": 1611613936
    },
    {
        "content": "<p>Yeah, probably not</p>",
        "id": 223972378,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613949
    },
    {
        "content": "<p>That's probably a safe-transmute issue</p>",
        "id": 223972404,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611613968
    },
    {
        "content": "<p>Thanks a lot @jubilee. <br>\nI'd like to tackle <a href=\"https://github.com/rust-lang/stdsimd/issues/54\">https://github.com/rust-lang/stdsimd/issues/54</a> as my first contribution.<br>\nI've </p>\n<ul>\n<li>checked out the contributing guide</li>\n<li>read the beginner's guide to SIMD markdown file in the repo<br>\nI'm looking at the code of <code>neg</code> <a href=\"https://github.com/rust-lang/stdsimd/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates/core_simd/tests/ops_impl/float_macros.rs#L298\">here</a> but would appreciate some pointers before diving in.</li>\n</ul>",
        "id": 223972572,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611614055
    },
    {
        "content": "<p>and now my brain finally caught up: shuffle_usize is for dynamic indices, but still needs a statically known vector length. right, OK.</p>",
        "id": 223972632,
        "sender_full_name": "Jubilee",
        "timestamp": 1611614107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> I think that one is a relatively straightforward fix once you find the operator implementations. The PR I mentioned in a comment is merged so nothing should be blocking it</p>",
        "id": 223972696,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611614160
    },
    {
        "content": "<p>If you run into any problems you can just ping us here</p>",
        "id": 223972816,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611614222
    },
    {
        "content": "<p>Ok, that sounds good <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> thanks for that.</p>",
        "id": 223972850,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611614244
    },
    {
        "content": "<p>Yeah, that is the test file for that, you mentioned you haven't looked at macros before so I suggest keeping <a href=\"https://cheats.rs/#macros-attributes\">https://cheats.rs/#macros-attributes</a> close at hand because that is always what I first open when I start fiddling with macros. ^^;</p>",
        "id": 223972853,
        "sender_full_name": "Jubilee",
        "timestamp": 1611614246
    },
    {
        "content": "<p>You will find most of the float vector code over here: <del>https://github.com/rust-lang/stdsimd/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates/core_simd/src/macros.rs#L273-L315</del></p>\n<p><a href=\"https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/macros.rs\">https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/macros.rs</a></p>",
        "id": 223973209,
        "sender_full_name": "Jubilee",
        "timestamp": 1611614460
    },
    {
        "content": "<p>Ah, I was looking at the test file -_-</p>",
        "id": 223973211,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611614460
    },
    {
        "content": "<p>I thought it was just you exhibiting good practice, you know, look at the tests first. :^)</p>",
        "id": 223973244,
        "sender_full_name": "Jubilee",
        "timestamp": 1611614487
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/ops.rs\">https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/ops.rs</a></p>",
        "id": 223973634,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611614704
    },
    {
        "content": "<p>This is where the ops themselves are</p>",
        "id": 223973657,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611614715
    },
    {
        "content": "<p>A maze of twisty little files, all alike.</p>",
        "id": 223973686,
        "sender_full_name": "Jubilee",
        "timestamp": 1611614732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I think that revision you linked is pre-const-generics</p>",
        "id": 223973701,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611614741
    },
    {
        "content": "<p>oh simd</p>",
        "id": 223973765,
        "sender_full_name": "Jubilee",
        "timestamp": 1611614763
    },
    {
        "content": "<p>yeah, that was a few revisions ago, whoops. <a href=\"https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/macros.rs\">https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/macros.rs</a></p>",
        "id": 223974280,
        "sender_full_name": "Jubilee",
        "timestamp": 1611615093
    },
    {
        "content": "<p>Is it alright to ask newbie questions here?<br>\nI've downloaded the repo, <code>cargo test</code> passes all tests, but I read I may have to mainpulate the <code>RUSTFLAGS</code> to test specific instruction sets. <code>cargo test -- --target=+avx</code> but don't think that is on the right path...</p>",
        "id": 223975958,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611616079
    },
    {
        "content": "<p>It's not convenient, but you can look at what the automated testing does</p>",
        "id": 223976053,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611616126
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/blob/master/.github/workflows/ci.yml#L71\">https://github.com/rust-lang/stdsimd/blob/master/.github/workflows/ci.yml#L71</a></p>",
        "id": 223976135,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611616184
    },
    {
        "content": "<p>Maybe not the best example</p>",
        "id": 223976139,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611616188
    },
    {
        "content": "<p>You can set RUSTFLAGS=-Ctarget-cpu=native for an easy solution</p>",
        "id": 223976240,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611616236
    },
    {
        "content": "<p><code>export RUSTFFLAGS=-Ctarget-cpu=native</code> seems to work.</p>",
        "id": 223976262,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611616250
    },
    {
        "content": "<p>Ah, beat me to it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 223976276,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611616265
    },
    {
        "content": "<p>(though for this particular issue I don't think you need to set any features, I never really do)</p>",
        "id": 223976277,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611616265
    },
    {
        "content": "<p>OK. I'm on 1.51.0-nightly right now - is that prudent for working on my branch?</p>",
        "id": 223976369,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611616346
    },
    {
        "content": "<p>Yup. I update nightly every once in a while for this just in case something changes</p>",
        "id": 223976413,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611616415
    },
    {
        "content": "<p>OK, I think I should be all set for firing all the footguns <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 223976599,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611616556
    },
    {
        "content": "<p>Ok, so grokking this lib - there is just an unholy amount of macros to reimplement the basic ops on all the permutations of lanes x vector sizes x numeric types, right?</p>",
        "id": 223977210,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611616994
    },
    {
        "content": "<p>Correct.<br>\nAnd const generics is the version with <em>less</em> macros.</p>",
        "id": 223978219,
        "sender_full_name": "Jubilee",
        "timestamp": 1611617655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-01-25.20Meeting/near/223973634\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/ops.rs\">https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/ops.rs</a></p>\n</blockquote>\n<p>OK so the mission, should I choose to accept it, is to dive into the problematic ops from the github issue that are found in the link above, sprinkle in some <code>match</code>es to <code>panic!</code> in the problematic cases, and make sure that appropriate tests get added to test for the regression.<br>\nRight?</p>",
        "id": 223978433,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611617810
    },
    {
        "content": "<p>Hey all! It’s a public holiday here so ended up having a sleep in 😅 Catching up now. I’ll kick off crater if it hasn’t been done already</p>",
        "id": 223978552,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1611617908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> Shouldn't the first three overflow in release? I assume we mean \"in debug conditions\"?</p>",
        "id": 223980689,
        "sender_full_name": "Jubilee",
        "timestamp": 1611619495
    },
    {
        "content": "<p>OK gang, I'm submitting a very, very rough WIP PR to get a hang of contributing here.<br>\nThanks a lot for answering many of my questions already - I look forward to seeing some good progress.</p>",
        "id": 223980740,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611619555
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/pull/55\">https://github.com/rust-lang/stdsimd/pull/55</a></p>",
        "id": 223980782,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611619563
    },
    {
        "content": "<p>I think I will ask silly Rust questions here if no one objects and specific design stuff over on the PR. <br>\nGotta bounce for a bit, see ya soon. <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 223980818,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611619606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I'm not sure, now that I think of it.  If we want them to do that we need to modify rustc. Were there any reasons we didn't want that?</p>",
        "id": 223981186,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611619894
    },
    {
        "content": "<p>Oh, div/rem with overflow do panic. Cool, didn't know that.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"k\">i32</span><span class=\"o\">..</span><span class=\"mi\">1</span><span class=\"k\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span>::<span class=\"n\">MIN</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>just prints</p>\n<div class=\"codehilite\"><pre><span></span><code>2147483647\n-2147483648\n</code></pre></div>\n<p>which is kinda what I expected, but the divide and remainder operations trigger panics.</p>",
        "id": 223981215,
        "sender_full_name": "Jubilee",
        "timestamp": 1611619922
    },
    {
        "content": "<p>I think I'm ok with rem and div having unconditional extra branching since they're unsafe-ish ops in the first place</p>",
        "id": 223981362,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611620032
    },
    {
        "content": "<p>I took these examples directly from LLVM's lang ref which says it's UB to do it</p>",
        "id": 223981440,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611620068
    },
    {
        "content": "<p>I'm not sure if very many architectures even have vectorized integer div or rem</p>",
        "id": 223981544,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611620151
    },
    {
        "content": "<p>Yeah, I'm fine with that, I just wanted to doublecheck things because it made me go \"???\" internally.</p>",
        "id": 223981955,
        "sender_full_name": "Jubilee",
        "timestamp": 1611620449
    },
    {
        "content": "<p>Does that mean it's not a good idea for my PR to implement a branch?</p>",
        "id": 223986424,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611623996
    },
    {
        "content": "<p>No, go ahead and do it</p>",
        "id": 223986668,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611624192
    },
    {
        "content": "<p>And we are on Crater now. <a href=\"https://crater.rust-lang.org/ex/pr-80652\">https://crater.rust-lang.org/ex/pr-80652</a></p>",
        "id": 223988470,
        "sender_full_name": "Jubilee",
        "timestamp": 1611625836
    },
    {
        "content": "<p>Given the wait times for the others, we may be waiting a bit, but hopefully we'll see results by next week. We uh... may not, because it may take 8 days, looking at my napkin math. lol. Well.</p>",
        "id": 223988728,
        "sender_full_name": "Jubilee",
        "timestamp": 1611626101
    },
    {
        "content": "<p>Newbie question - what does crater add to the project?</p>",
        "id": 223991459,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611629193
    },
    {
        "content": "<p>Crater basically tests the compiler on a huge number of crates so you can see if anything broke</p>",
        "id": 223991587,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611629397
    },
    {
        "content": "<p>My PR changes how the #[repr(simd)] attribute works and some code could potentially now not work, so we want to make sure no one is relying on that. Or at least let them know why it's changing and how to fix it</p>",
        "id": 223991659,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611629455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> So, a crater run is mostly because it's a compiler PR. It's possible to just ship changes into nightly and wait and see if anyone yells, but that's not really as exhaustive as actually having the compiler's try-commit attempt to compile every single crate on <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 223991670,
        "sender_full_name": "Jubilee",
        "timestamp": 1611629469
    },
    {
        "content": "<p>Most of stdsimd issues, like the one you adopted, only require changes to core::simd's library code. Unfortunately we've run into a lot of different bugs because the previous attempts to implement various SIMD APIs in Rust never really resolved to \"Rust is good at SIMD now and everything is stable!\" so it requires compiler commits and will likely require breaking changes, and while nightly is unstable, unfortunately it's also like... a situation where SIMD code in the wild is often relying on nightly rustc's current best-effort attempts and it is Very Rude to break them at the moment, so running into a situation where it's an obvious possible breakage merits caution.</p>",
        "id": 223992010,
        "sender_full_name": "Jubilee",
        "timestamp": 1611629838
    },
    {
        "content": "<p>Oh nice! Thanks for the tips. <br>\nSounds like the term crater run is videogame related...</p>",
        "id": 223992747,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611630680
    },
    {
        "content": "<p>Oh, ouch for the brave souls living on nightly when you change internals for SIMD.</p>",
        "id": 223992822,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611630781
    },
    {
        "content": "<p>this conversation can probably continue over here <a href=\"#narrow/stream/257879-project-portable-simd/topic/MGR.20opens.20a.20PR!.20(issue.20.2354)\">https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd/topic/MGR.20opens.20a.20PR!.20(issue.20.2354)</a><br>\nsince uh meeting is over even though I never formally called it. <strong>cough</strong></p>",
        "id": 223993266,
        "sender_full_name": "Jubilee",
        "timestamp": 1611631326
    }
]