[
    {
        "content": "<p>Hmm, I don't think I like the idea of not being able to guarantee that Mask has a size_of &lt;= its vector?</p>",
        "id": 277663643,
        "sender_full_name": "Jubilee",
        "timestamp": 1649023493
    },
    {
        "content": "<p>Just to check my understanding, a Mask&lt;X, LANES2&gt; can be used on a Simd&lt;T, LANES&gt; iff size_of::&lt;X&gt;() == size_of::&lt;T&gt;() &amp;&amp; LANES == LANES2?</p>",
        "id": 277663667,
        "sender_full_name": "Sean Stangl",
        "timestamp": 1649023531
    },
    {
        "content": "<p>Correct.</p>",
        "id": 277663818,
        "sender_full_name": "Jubilee",
        "timestamp": 1649023709
    },
    {
        "content": "<p>This represents the most strict hardware constraint, while not actually necessarily saying anything about the Mask size <strong>per se</strong>.</p>",
        "id": 277663831,
        "sender_full_name": "Jubilee",
        "timestamp": 1649023743
    },
    {
        "content": "<p>So from the programmatic perspective, in terms purely of the way the type is defined atm: Yes, Jake is 100% correct.</p>",
        "id": 277664162,
        "sender_full_name": "Jubilee",
        "timestamp": 1649024149
    },
    {
        "content": "<p>I am saying we should probably be able to guarantee to unsafe code that \"for enough bytes that fit a vector, you can also fit a mask for that vector\", but that's probably not best-placed in an aside comment on a typedef.</p>",
        "id": 277664291,
        "sender_full_name": "Jubilee",
        "timestamp": 1649024291
    },
    {
        "content": "<p>that guarantee might cause problems with arches that have a mask take 8-bits per element always, and then they decide to add <code>Simd&lt;i4, ...&gt;</code> support, now the vector is smaller than the mask</p>",
        "id": 277664935,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649025162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Mask.20repr.20.28min.20vs.2E.20max.20guarantees.29/near/277664935\">said</a>:</p>\n<blockquote>\n<p>that guarantee might cause problems with arches that have a mask take 8-bits per element always, and then they decide to add <code>Simd&lt;i4, ...&gt;</code> support, now the vector is smaller than the mask</p>\n</blockquote>\n<p>Would the guarantee of <code>max(bitsize_of::&lt;u8&gt;(), bitsize_of::&lt;T&gt;()) * VLEN</code> suit better?</p>",
        "id": 277664999,
        "sender_full_name": "Jubilee",
        "timestamp": 1649025271
    },
    {
        "content": "<p>no, there's also the issue that arches with bitvectors may decide <code>Mask</code> is always an array of <code>u64</code> no matter the lane count ... that is bigger than <code>Simd&lt;u8, 2&gt;</code>.</p>",
        "id": 277665077,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649025420
    },
    {
        "content": "<p>that last one is more realistic...libre-soc will probably want to do that</p>",
        "id": 277665160,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649025552
    },
    {
        "content": "<p>I don't really think that's rea... oh.</p>",
        "id": 277665167,
        "sender_full_name": "Jubilee",
        "timestamp": 1649025557
    },
    {
        "content": "<p>You say you literally want to do that, okay.</p>",
        "id": 277665172,
        "sender_full_name": "Jubilee",
        "timestamp": 1649025565
    },
    {
        "content": "<p>Are you really going to be storing u64xN back to memory and not compressing it?</p>",
        "id": 277665244,
        "sender_full_name": "Jubilee",
        "timestamp": 1649025632
    },
    {
        "content": "<p>it would be a single <code>u64</code> unless there were more than 64 lanes</p>",
        "id": 277665278,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649025678
    },
    {
        "content": "<p>that said, libre-soc may also decide not to do that...</p>",
        "id": 277665380,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649025783
    },
    {
        "content": "<p>Oh.</p>",
        "id": 277665457,
        "sender_full_name": "Jubilee",
        "timestamp": 1649025863
    },
    {
        "content": "<p>Hm.</p>",
        "id": 277665463,
        "sender_full_name": "Jubilee",
        "timestamp": 1649025875
    },
    {
        "content": "<p>How would you handle endianness?</p>",
        "id": 277665566,
        "sender_full_name": "Jubilee",
        "timestamp": 1649026081
    },
    {
        "content": "<p>element <code>n</code> is stored at <code>((mask.u64_array[n / 64] &gt;&gt; (n % 64)) &amp; 1) != 0</code></p>",
        "id": 277665699,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026212
    },
    {
        "content": "<p>I think I'm okay with masks having no specified layout whatsoever other than being Copy</p>",
        "id": 277665736,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649026286
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 277665743,
        "sender_full_name": "Jubilee",
        "timestamp": 1649026292
    },
    {
        "content": "<p>I guess I would like to have <strong>some</strong> kind of maximum upper bound we can express, but I am pretty ambivalent about what it is.</p>",
        "id": 277665799,
        "sender_full_name": "Jubilee",
        "timestamp": 1649026332
    },
    {
        "content": "<p><code>Mask&lt;T, N&gt;: Copy + Send + Sync</code> sounds good to me</p>",
        "id": 277665804,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026358
    },
    {
        "content": "<p>oh, and <code>Freeze</code></p>",
        "id": 277665808,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026375
    },
    {
        "content": "<p>maximum bound: not absurdly huge</p>",
        "id": 277665818,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026400
    },
    {
        "content": "<p>Yes, Basically.</p>",
        "id": 277665823,
        "sender_full_name": "Jubilee",
        "timestamp": 1649026414
    },
    {
        "content": "<p>we promise not to blow your stack if you ask for a reasonable lane count</p>",
        "id": 277665827,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026425
    },
    {
        "content": "<p>lmao</p>",
        "id": 277665834,
        "sender_full_name": "Jubilee",
        "timestamp": 1649026429
    },
    {
        "content": "<p>we should probably explicitly mention in the docs that <code>Mask</code> can be bigger or smaller than <code>Simd</code></p>",
        "id": 277666008,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026615
    },
    {
        "content": "<p>so people don't assume it's the same size</p>",
        "id": 277666033,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026639
    },
    {
        "content": "<p>Probably.<br>\nFor the moment, is <a href=\"https://github.com/rust-lang/portable-simd/pull/272\">https://github.com/rust-lang/portable-simd/pull/272</a> gtg?</p>",
        "id": 277666046,
        "sender_full_name": "Jubilee",
        "timestamp": 1649026678
    },
    {
        "content": "<p>Lgtm</p>",
        "id": 277666084,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1649026761
    },
    {
        "content": "<p>me too</p>",
        "id": 277666291,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649026935
    },
    {
        "content": "<p>merge?</p>",
        "id": 277666882,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649027865
    },
    {
        "content": "<p>bang.</p>",
        "id": 277666923,
        "sender_full_name": "Jubilee",
        "timestamp": 1649027902
    },
    {
        "content": "<p>XD</p>",
        "id": 277666925,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1649027911
    }
]