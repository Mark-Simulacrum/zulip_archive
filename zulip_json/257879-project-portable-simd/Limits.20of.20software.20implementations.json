[
    {
        "content": "<p>LLVM doesn't offer saturating ops that aren't add/sub and left shift for integers, and that last one was added only very recently so it's not available for most. So I opened <a href=\"https://github.com/rust-lang/stdsimd/pull/87\">https://github.com/rust-lang/stdsimd/pull/87</a> because the behavior of abs/neg with MIN are a huge gotcha, and getting working saturating versions seems desirable.</p>\n<p>That leaves out saturating mul. That's only offered in fixed point arithmetic, which seemed like it might do weird things if we turned integers into fixed-point and then multiplied them, so I also jiggered a software unsigned integer saturating multiply into existence, but I didn't PR that yet because I wanted to ask if that is even a good idea.</p>",
        "id": 232916957,
        "sender_full_name": "Jubilee",
        "timestamp": 1617379720
    },
    {
        "content": "<p>LLVM supports fixed-point fractional arithmetic?</p>",
        "id": 232917552,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617380028
    },
    {
        "content": "<p>apparently.</p>",
        "id": 232918440,
        "sender_full_name": "Jubilee",
        "timestamp": 1617380418
    },
    {
        "content": "<p>where the hell is my core::fixed_point rfc</p>",
        "id": 232928679,
        "sender_full_name": "Lokathor",
        "timestamp": 1617385000
    },
    {
        "content": "<p>afaict using the saturating fixed-point ops with scale=0 gives the corresponding integer ops, so you can express saturating <code>u16</code> multiplication using <code>@llvm.umul.fix.sat.i16(i16 %a, i16 %b, i32 0)</code></p>",
        "id": 232959146,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1617402444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Limits.20of.20software.20implementations/near/232959146\">said</a>:</p>\n<blockquote>\n<p>afaict using the saturating fixed-point ops with scale=0 gives the corresponding integer ops, so you can express saturating <code>u16</code> multiplication using <code>@llvm.umul.fix.sat.i16(i16 %a, i16 %b, i32 0)</code></p>\n</blockquote>\n<p>wrt this I'm mostly concerned about some rounding rule kicking in somewhere.</p>",
        "id": 233240033,
        "sender_full_name": "Jubilee",
        "timestamp": 1617661668
    },
    {
        "content": "<p>I think it should be the same but I think this is where the proptests help</p>",
        "id": 233240165,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617661754
    },
    {
        "content": "<p>truuu</p>",
        "id": 233254664,
        "sender_full_name": "Jubilee",
        "timestamp": 1617673295
    }
]