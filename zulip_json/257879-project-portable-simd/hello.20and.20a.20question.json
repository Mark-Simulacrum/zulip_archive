[
    {
        "content": "<p>Hello! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>I love simd, i have used it in big projects (x86 intrinsics only though), and i love the premise of std::simd, therefore this project has a lot of value for me. I had just one question, <a href=\"https://github.com/rust-lang/stdsimd/pull/10/files#diff-f68c0b0d5d2d8d30e501dc8e4b157051\">this file</a> states these intrinsics are lowered by rustc into llvm stuff. Where are the docs for the available functions? is <a href=\"https://llvm.org/docs/LangRef.html#id2337\">this</a> the place? if so, how would functions like cos and sin be implemented, im not aware of intrinsics for those functions, thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211800574,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490173
    },
    {
        "content": "<p>Unfortunately those intrinsics aren't actually documented anywhere, so those docs were my best efforts from reading through github issues and a bit of the rustc source.  I believe trig functions will be implemented by directly linking against llvm, rather than using <code>platform-intrinsic</code>.  I would take a look at how it's implemented in packed-simd for inspiration</p>",
        "id": 211801304,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601490537
    },
    {
        "content": "<p>How come stdsimd was made from scratch instead of extending packed_simd?</p>",
        "id": 211801365,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490575
    },
    {
        "content": "<p>A mandate from libs, essentially.<br>\nThere was not enough confidence on the libs team that the packed_simd design is the best one as-is.</p>",
        "id": 211801607,
        "sender_full_name": "Jubilee",
        "timestamp": 1601490703
    },
    {
        "content": "<p>Oh i found it, yeah thats direct linking to llvm items, thats pretty hardcore haha, but i guess thats the only way <br>\n<a href=\"https://github.com/rust-lang/packed_simd/blob/master/src/codegen/math/float/cos.rs\">https://github.com/rust-lang/packed_simd/blob/master/src/codegen/math/float/cos.rs</a></p>",
        "id": 211801704,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490735
    },
    {
        "content": "<p>Ah i see, makes sense</p>",
        "id": 211801726,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490747
    },
    {
        "content": "<p>Other SIMD libs have popped up recently to address particular concerns with packed_simd, so the idea is to learn lessons from all of them, I think</p>",
        "id": 211801785,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601490781
    },
    {
        "content": "<p>It is going to look very similar, as two of the team members have authored their own simd crates and literally everyone converged on \"very like packed_simd\", but \"exactly the same\" was the sticking point.</p>",
        "id": 211801838,
        "sender_full_name": "Jubilee",
        "timestamp": 1601490811
    },
    {
        "content": "<p>Are there any particular concerns with packed simd which led to wanting to rewrite it?</p>",
        "id": 211801840,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490813
    },
    {
        "content": "<p>You may be overestimating the amount of rewriting that is going to go on if you start from the assumption that it is being \"made from scratch\".</p>",
        "id": 211801985,
        "sender_full_name": "Jubilee",
        "timestamp": 1601490868
    },
    {
        "content": "<p>A particular concern of mine, at least, is a somewhat overcomplicated interface (the SIMD types are all implemented by a single generic type)</p>",
        "id": 211801988,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601490869
    },
    {
        "content": "<p>Yeah i found that pretty odd that they are all a wrapper around <code>Simd&lt;/* */&gt;</code></p>",
        "id": 211802035,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490894
    },
    {
        "content": "<p>But agreed, it's definitely not \"from scratch\" at least as far as design goes</p>",
        "id": 211802063,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601490909
    },
    {
        "content": "<p>Yeah some things definitely look similar</p>",
        "id": 211802082,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490919
    },
    {
        "content": "<p>If i wanted to impl basic float ops like cos, sin, tan, etc would i use the same direct linking method as packed_simd or were there discussions of doing it another way?</p>",
        "id": 211802202,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601490972
    },
    {
        "content": "<p>probably just called to the simd llvm trig intrinsics will be sufficient to start with.</p>",
        "id": 211802707,
        "sender_full_name": "Lokathor",
        "timestamp": 1601491210
    },
    {
        "content": "<p>I believe linking to LLVM is correct.  We should be careful to check the LLVM docs to ensure we don't perform any undefined behavior though--packed_simd has a few soundness issues there</p>",
        "id": 211802726,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491220
    },
    {
        "content": "<p>What is the reason for this fixme? <code>FIXME 64-bit fabsgle elem vectors</code>, occurs with other float intrinsics too</p>",
        "id": 211802774,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601491248
    },
    {
        "content": "<p>is that in packed_simd?<br>\nIf it is, the answer is: I have no idea.</p>",
        "id": 211802844,
        "sender_full_name": "Jubilee",
        "timestamp": 1601491292
    },
    {
        "content": "<p>haha alright</p>",
        "id": 211802891,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601491323
    },
    {
        "content": "<p>No idea either, but looking at the LLVM docs, some platforms don't support fabs, which is the only thing that stands out to me</p>",
        "id": 211802964,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491344
    },
    {
        "content": "<p>Yeah im wondering how stdsimd will handle that, will there be fallbacks?</p>",
        "id": 211803011,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601491371
    },
    {
        "content": "<p>However my guess is that's _probably_ referring to 80 bit floats and not 32- or 64-bit</p>",
        "id": 211803016,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491375
    },
    {
        "content": "<p>Oh interesting</p>",
        "id": 211803027,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601491382
    },
    {
        "content": "<p>Yes, anything that doesn't work on vectors will certainly at least have scalar fallbacks</p>",
        "id": 211803065,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491403
    },
    {
        "content": "<p>that doesn't sound right.</p>",
        "id": 211803072,
        "sender_full_name": "Jubilee",
        "timestamp": 1601491406
    },
    {
        "content": "<p>which part?</p>",
        "id": 211803205,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491460
    },
    {
        "content": "<p>that it's referring to 80 bit floats.</p>",
        "id": 211803303,
        "sender_full_name": "Jubilee",
        "timestamp": 1601491534
    },
    {
        "content": "<p><a href=\"https://llvm.org/docs/LangRef.html#llvm-fabs-intrinsic\">https://llvm.org/docs/LangRef.html#llvm-fabs-intrinsic</a> here's the doc if you're curious</p>",
        "id": 211803317,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491545
    },
    {
        "content": "<p>the example has 80- and 128-bit floats from what I can tell</p>",
        "id": 211803343,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491561
    },
    {
        "content": "<p>\"gle\"?</p>",
        "id": 211803464,
        "sender_full_name": "Jubilee",
        "timestamp": 1601491604
    },
    {
        "content": "<p>hmm.</p>",
        "id": 211803473,
        "sender_full_name": "Jubilee",
        "timestamp": 1601491607
    },
    {
        "content": "<p>Still wondering about that part</p>",
        "id": 211803494,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491623
    },
    {
        "content": "<p>Its referring to 64 bit however, so i dont think 80/128 bit items are the issue here</p>",
        "id": 211803536,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1601491651
    },
    {
        "content": "<p>good point...</p>",
        "id": 211803556,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601491661
    },
    {
        "content": "<p>hello</p>",
        "id": 211853541,
        "sender_full_name": "Horacio Hidalgo",
        "timestamp": 1601509299
    },
    {
        "content": "<p>Please feel free to ask questions!</p>",
        "id": 211853557,
        "sender_full_name": "Jubilee",
        "timestamp": 1601509316
    },
    {
        "content": "<p>or rather, hello!</p>",
        "id": 211856028,
        "sender_full_name": "Jubilee",
        "timestamp": 1601511502
    },
    {
        "content": "<p>Specifically in the case of float abs: that's easy enough to implement on our own if there's any trouble. You just <code>&amp;</code> with all bits except the sign bit.</p>",
        "id": 211858945,
        "sender_full_name": "Lokathor",
        "timestamp": 1601514424
    },
    {
        "content": "<p><span aria-label=\"musical score\" class=\"emoji emoji-1f3bc\" role=\"img\" title=\"musical score\">:musical_score:</span> Whack that bit <span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span><br>\n<span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span>  Give the AST a slip <span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span><br>\n<span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span> Push stuff on the stack <span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span> <br>\n<span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span> Break a server rack <span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span></p>",
        "id": 211859330,
        "sender_full_name": "Jubilee",
        "timestamp": 1601514911
    },
    {
        "content": "<p>Hi there!</p>\n<p>I think I will stay around in this chat for a while, and see how it develops ;-)</p>",
        "id": 211965128,
        "sender_full_name": "Roland Ruckerbauer",
        "timestamp": 1601582020
    },
    {
        "content": "<p>Hello guys, </p>\n<p>I have a couple of questions for you as I think this group is probably the best one to ask it<br>\n(if not then I'm really sorry and please forward me to some better place)</p>\n<p>I know fast-math for Rust can't be turned on via LLVM -ffast-math switch but there are some<br>\ncore intrinsics which from my experience work surprisingly well. </p>\n<ol>\n<li>\n<p>What's the relation between fast-math and SIMD in the context of Rust?<br>\nI read Locathor's github post that those things are orthogonal and LLVM can use both<br>\nof them at the same time. Is that true?</p>\n</li>\n<li>\n<p>Could fast-math intrinsics be combined with SIMD calls (for performance gains)? Would it make sense at all?</p>\n</li>\n<li>\n<p>Are there any plans to allow fast-math to be enabled for certain crates in Rust via some<br>\nsort of feature? </p>\n</li>\n<li>\n<p>Does fast-math even matter when using SIMD ?</p>\n</li>\n<li>Do I understand correctly that this new portable-simd initiative is meant as a replacement for packed-simd crate?</li>\n</ol>\n<p>Thanks!</p>",
        "id": 227437876,
        "sender_full_name": "NBot",
        "timestamp": 1614090434
    },
    {
        "content": "<p>fast-math lets llvm do floating point optimizations, but other than that it's not very connected to SIMD, and it's not something this group is aiming for.</p>\n<p>It's potentially harder than SIMD to get right XD</p>",
        "id": 227446831,
        "sender_full_name": "Lokathor",
        "timestamp": 1614093521
    },
    {
        "content": "<p>but yes, we do aim to replace the packed-simd crate</p>",
        "id": 227446865,
        "sender_full_name": "Lokathor",
        "timestamp": 1614093537
    },
    {
        "content": "<p>Hey - thanks for getting back to me! Do you know how C/C++ handle those orthogonal functionalities? Why this fast math stuff is so complicated? Do you have some resources describing this issue?</p>",
        "id": 227447415,
        "sender_full_name": "NBot",
        "timestamp": 1614093747
    },
    {
        "content": "<p>I'm new to Rust and I'm literally overwhelmed with things to learn, but I'm very much interested in SIMD features and I see Rust can do this quite elegantly</p>",
        "id": 227447951,
        "sender_full_name": "NBot",
        "timestamp": 1614093947
    },
    {
        "content": "<p>C/C++ don't really handle them.  Fast math is hard because it makes some well behaved things much faster, but for \"general purpose\" math it can cause some very unexpected and probably \"incorrect\" results.</p>",
        "id": 227448725,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614094266
    },
    {
        "content": "<p>A possible approach in rust would be to provide functions or types that allow certain special optimizations, like allowing reordering of operations to be more efficient.  It's critical to not introduce undefined behavior though, which some optimizations might cause</p>",
        "id": 227449090,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614094404
    },
    {
        "content": "<p>SIMD is only related to the extent that these special functions or types could also exist for SIMD floating point types</p>",
        "id": 227449228,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614094461
    },
    {
        "content": "<p>Got it, thanks. I'm mostly interested because in the case of for example DSP audio code or games fast math is something you can have as long as you algorithm is stable and the game... well... works :-) <br>\nI tracked several discussions for fast math, but now I understand it's a different story and not for this stream/channel<br>\nSo if I understand correctly portable simd is supposed to create a facade for SIMD types and instructions that are deconstructed based on desired CPU architecture and used with LLVM SIMD intrinsics. Is that correct?</p>",
        "id": 227449634,
        "sender_full_name": "NBot",
        "timestamp": 1614094635
    },
    {
        "content": "<p>More or less, yep.  That's the foundation at least, certain algorithms such as trigonometry will go beyond just intrinsics</p>",
        "id": 227450063,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614094796
    },
    {
        "content": "<p>The goal is to use rust's type system to make SIMD as convenient as possible to write</p>",
        "id": 227450276,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614094868
    },
    {
        "content": "<p>That's actually pretty neat if you ask me :)</p>",
        "id": 227450372,
        "sender_full_name": "NBot",
        "timestamp": 1614094902
    },
    {
        "content": "<p>Are there even SIMD trigonometry intrinsics ? I saw some @llvm.sin.f32 stuff - is this the one you're talking about ?</p>",
        "id": 227450535,
        "sender_full_name": "NBot",
        "timestamp": 1614094949
    },
    {
        "content": "<p>Yeah there are, though it's a complicated saga and the summary is we need to implement them ourselves</p>",
        "id": 227450947,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614095108
    },
    {
        "content": "<p>That's what the \"libm\" thread in this group is about</p>",
        "id": 227451021,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1614095137
    },
    {
        "content": "<p>Yeah, I saw the libm discussion on github, but I don't I understand it yet. Ok, those answers should be enough for me for now - thank you very much and thank you for all your hard work!</p>",
        "id": 227451330,
        "sender_full_name": "NBot",
        "timestamp": 1614095265
    },
    {
        "content": "<p>don't worry, we barely understand it either, so you're in good company.<br>\nwill concede, \"barely\" is possibly a lot more than \"at all\", so don't feel bad about it taking a bit to get up to that even if you put effort into it.</p>",
        "id": 227456403,
        "sender_full_name": "Jubilee",
        "timestamp": 1614096642
    },
    {
        "content": "<p>Haha, well .. you know definitely more than I do :-) Thanks again!</p>",
        "id": 227458181,
        "sender_full_name": "NBot",
        "timestamp": 1614097173
    }
]