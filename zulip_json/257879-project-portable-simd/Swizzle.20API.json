[
    {
        "content": "<p>I found a _very_ interesting hack that we can use to make a generic swizzle API.  The problem that we originally ran into is that you can't do something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn swizzle&lt;const LANES: usize, const INDICES: [usize; LANES]&gt;(self) -&gt; Simd&lt;T, LANES&gt; { ... }\n</code></pre></div>\n<p>There is something we can do that does work though <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>trait Swizzle&lt;const LANES: usize&gt; {\n    const INDICES: [usize; LANES];\n}\n...\nfn swizzle&lt;const LANES: usize&gt;(self, indices: impl Swizzle&lt;LANES&gt;) -&gt; Simd&lt;T, LANES&gt; { ... }\n</code></pre></div>",
        "id": 253354188,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631673476
    },
    {
        "content": "<p>Basically, impl trait tricks the type system into allowing a dependently-sized const array, because it's not technically in the list of generic types!</p>",
        "id": 253354300,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631673588
    },
    {
        "content": "<p>well, I have an almost perfect api, but eek:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: InterpErrorInfo(InterpErrorInfoInner { kind: the type `[u32; OUTPUT_LANES]` has an unknown layout, backtrace: None })&#39;, compiler/rustc_const_eval/src/const_eval/mod.rs:146:41\n</code></pre></div>",
        "id": 253360954,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631680345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: InterpErrorInfo(InterpErrorInfoInner { kind: the type `[u32; OUTPUT_LANES]` has an unknown layout, backtrace: None })&#39;, compiler/rustc_const_eval/src/const_eval/mod.rs:146:41\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::result::unwrap_failed\n   3: rustc_const_eval::const_eval::destructure_const\n   4: core::ops::function::FnOnce::call_once\n   5: rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps\n   6: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n   7: rustc_data_structures::stack::ensure_sufficient_stack\n   8: rustc_query_system::query::plumbing::get_query_impl\n   9: rustc_query_system::query::plumbing::get_query\n  10: &lt;rustc_query_impl::Queries as rustc_middle::ty::query::QueryEngine&gt;::destructure_const\n  11: rustc_codegen_ssa::mir::constant::&lt;impl rustc_codegen_ssa::mir::FunctionCx&lt;Bx&gt;&gt;::simd_shuffle_indices\n  12: &lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold\n  13: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n  14: rustc_codegen_ssa::mir::block::&lt;impl rustc_codegen_ssa::mir::FunctionCx&lt;Bx&gt;&gt;::codegen_terminator\n  15: rustc_codegen_ssa::mir::codegen_mir\n  16: rustc_codegen_ssa::base::codegen_instance\n  17: &lt;rustc_middle::mir::mono::MonoItem as rustc_codegen_ssa::mono_item::MonoItemExt&gt;::define\n  18: rustc_codegen_llvm::base::compile_codegen_unit::module_codegen\n  19: rustc_middle::dep_graph::&lt;impl rustc_query_system::dep_graph::DepKind for rustc_middle::dep_graph::dep_node::DepKind&gt;::with_deps\n  20: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task\n  21: rustc_codegen_llvm::base::compile_codegen_unit\n  22: rustc_codegen_ssa::base::codegen_crate\n  23: &lt;rustc_codegen_llvm::LlvmCodegenBackend as rustc_codegen_ssa::traits::backend::CodegenBackend&gt;::codegen_crate\n  24: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n  25: rustc_interface::passes::start_codegen\n  26: rustc_interface::passes::QueryContext::enter\n  27: rustc_interface::queries::Query&lt;T&gt;::compute\n  28: rustc_interface::queries::Queries::ongoing_codegen\n  29: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n  30: rustc_span::with_source_map\n  31: rustc_interface::interface::create_compiler_and_run\n  32: scoped_tls::ScopedKey&lt;T&gt;::set\n</code></pre></div>",
        "id": 253361201,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631680615
    },
    {
        "content": "<p>The offending line: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/mir/constant.rs#L64\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/mir/constant.rs#L64</a></p>",
        "id": 253361329,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631680786
    },
    {
        "content": "<p>my understanding is that <code>reveal_all</code> should prevent problems like this, since we're already up to codegen at this point, so I'm guessing maybe it's not injecting the ParamEnv properly wherever it's computing the layout</p>",
        "id": 253361404,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631680845
    },
    {
        "content": "<p>do you have code for repro the ICE</p>",
        "id": 253362173,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631681673
    },
    {
        "content": "<p>it's on a branch of rustc that hasn't been merged into master (yet)</p>",
        "id": 253362194,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631681703
    },
    {
        "content": "<p>link? seems like it might be fun to poke at the ICE</p>",
        "id": 253362291,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631681783
    },
    {
        "content": "<p>The branch is in <a href=\"https://github.com/rust-lang/rust/issues/88855\">#88855</a></p>",
        "id": 253362393,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631681896
    },
    {
        "content": "<p>I'll push the code that causes it momentarily</p>",
        "id": 253362403,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631681913
    },
    {
        "content": "<p>okay, it's in the <code>feature/swizzle</code> branch of portable-simd.  just run <code>cargo test</code> with the compiler from that PR</p>",
        "id": 253362474,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631681991
    },
    {
        "content": "<p>a shot in the dark, I think it's this line: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/interpret/operand.rs#L593\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/interpret/operand.rs#L593</a></p>",
        "id": 253362560,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631682016
    },
    {
        "content": "<p>which I followed down from this line: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/const_eval/mod.rs#L146\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/const_eval/mod.rs#L146</a></p>",
        "id": 253362714,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631682132
    },
    {
        "content": "<p>which I believe is the unwrap that's panicking</p>",
        "id": 253362724,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631682143
    },
    {
        "content": "<p>I don't know enough about how consts are handled, but since we're in codegen maybe we can say \"since we're in codegen, just take the entire param env\"</p>",
        "id": 253362761,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631682185
    },
    {
        "content": "<p>though maybe it's something more complicated than that</p>",
        "id": 253362776,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631682208
    },
    {
        "content": "<p>honestly who knows compiles are magic <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 253362851,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631682274
    },
    {
        "content": "<p>now that I think about it, one of the problems is that the intrinsic is effectively a generic, but nothing actually ties the const value to it like an actual generic</p>",
        "id": 253363007,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631682391
    },
    {
        "content": "<p>(this is true for all of the intrinsics, but so far we've only passed in vectors, not plain arrays)</p>",
        "id": 253363033,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631682422
    },
    {
        "content": "<p>damn your repo builds way faster than rustc</p>",
        "id": 253363733,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631683050
    },
    {
        "content": "<p>that's for sure</p>",
        "id": 253363771,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631683076
    },
    {
        "content": "<p>ay fixed the ICE <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 253368136,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631687001
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/mir/block.rs#L669\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/mir/block.rs#L669</a></p>",
        "id": 253368137,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631687003
    },
    {
        "content": "<p>I think you need to monomorphize the constant.ty() here or inside <code>simd_shuffle_indices</code> or somewhere</p>",
        "id": 253368145,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631687012
    },
    {
        "content": "<p>we try calculating the layout of something like <code>[u32; N]</code> (where the constant is generic)</p>",
        "id": 253368216,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631687055
    },
    {
        "content": "<p>despite the fact that we're codegen'ing  something where <code>N</code> has substs of a concrete thing</p>",
        "id": 253368228,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631687077
    },
    {
        "content": "<p>Im not familiar with this code though so I dont know if:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                               </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">llval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">simd_shuffle_indices</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"o\">&amp;</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">constant</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">monomorphize</span><span class=\"p\">(</span><span class=\"n\">constant</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is a correct fix here but it does fix it locally</p>",
        "id": 253368280,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1631687143
    },
    {
        "content": "<p>Oh wow, that makes sense, thanks!</p>",
        "id": 253399840,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631706419
    },
    {
        "content": "<p>I'll dig into it and try to figure out where the right spot is</p>",
        "id": 253399864,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631706435
    },
    {
        "content": "<p>Okay, looking through elsewhere in the compiler, I think that's the proper place to monomorphize it</p>",
        "id": 253517751,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631758245
    },
    {
        "content": "<p>Since my PR was already approved, is it a no-no to make more changes to it?  Or can it just be reapproved...</p>",
        "id": 253517801,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631758298
    },
    {
        "content": "<p>tell bors r-</p>",
        "id": 253518482,
        "sender_full_name": "Jubilee",
        "timestamp": 1631758851
    },
    {
        "content": "<p>Hmm, I assume I'll have permissions to deapprove my own PR?</p>",
        "id": 253518739,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631759045
    },
    {
        "content": "<p>either you do, or I will.</p>",
        "id": 253518766,
        "sender_full_name": "Jubilee",
        "timestamp": 1631759064
    },
    {
        "content": "<p>well, I can try</p>",
        "id": 253518777,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631759079
    },
    {
        "content": "<p>cool thanks, it does work</p>",
        "id": 253518848,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631759138
    },
    {
        "content": "<p>Good. Best to comment on why, but now you can work on it.</p>",
        "id": 253518930,
        "sender_full_name": "Jubilee",
        "timestamp": 1631759192
    },
    {
        "content": "<p>Hi, I used to help with SIMD things in the past, and would like to start helping again. Glad to see there are a lot of people involved.</p>",
        "id": 253868211,
        "sender_full_name": "Gonzalo Brito (gnzlbg)",
        "timestamp": 1631971217
    },
    {
        "content": "<p>Hello and welcome back!  We do see your legacy all over the codebase <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 253868323,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631971324
    },
    {
        "content": "<p>Do we think swizzles are rare enough that importing a trait to use them is acceptable?</p>",
        "id": 253899254,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632005614
    },
    {
        "content": "<p>(you may be implementing this trait yourself sometimes, anyway)</p>",
        "id": 253899308,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632005649
    },
    {
        "content": "<p>Probably.</p>",
        "id": 253907977,
        "sender_full_name": "Jubilee",
        "timestamp": 1632015930
    },
    {
        "content": "<p>I decided to diff the crate first to make sure CI still passes with the requisite changes.</p>",
        "id": 253908116,
        "sender_full_name": "Jubilee",
        "timestamp": 1632016091
    },
    {
        "content": "<p>Some good news--with the new swizzle API I was able to implement <code>rotate_{left,right}</code></p>",
        "id": 253914316,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632023338
    },
    {
        "content": "<p>Swizzles (or shuffles, or whatever) are exceptionally common, I'm not sure I've written any simd code of moderate complexity that didn't have several in them.</p>\n<p>Also, this isn't just importing a trait, this is importing a trait, defining a dummy struct, and implemnting that trait for the struct.</p>",
        "id": 253993299,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632108675
    },
    {
        "content": "<p>I think this is example of mistaking the overly generic code you find in the stdlib implementation to be representative of the kinds of code users will be actually writing</p>",
        "id": 253993307,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632108691
    },
    {
        "content": "<p>Did you see my latest comment on the PR? There is still room to provide the most common cases</p>",
        "id": 253993362,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632108732
    },
    {
        "content": "<p>(within this framework)</p>",
        "id": 253993373,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632108765
    },
    {
        "content": "<p>It's fine if it's importing a trait, that's light-weight.</p>\n<p>People do a lot of io/fs code and have to write the imports for that.<br>\nDefining an impl is a lot, however, yes.</p>",
        "id": 253993784,
        "sender_full_name": "Jubilee",
        "timestamp": 1632109287
    },
    {
        "content": "<p>So trait impls can have an associated const, but they don't work out if it's a const generic trait impl?</p>",
        "id": 253997031,
        "sender_full_name": "Lokathor",
        "timestamp": 1632113052
    },
    {
        "content": "<p>The impl itself can be generic (unless I'm misunderstanding what you mean)</p>",
        "id": 253997110,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632113103
    },
    {
        "content": "<p>i feel a lot less strongly if we keep an api for doing the N =&gt; N length-preserving shuffle/swizzle. (And I think this api is probably not in a state where we could stabilize it)</p>",
        "id": 253997318,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632113403
    },
    {
        "content": "<p>I'm thinking that it might be user friendly to have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f32x4</span>::<span class=\"n\">swizzle_from</span>::<span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where it's like, <code>impl&lt;const generics A,B,C,D&gt; SwizzleFrom&lt;[A,B,C,D]&gt; for TargeType { .. }</code>, sorta like how <code>From</code> works</p>",
        "id": 253997341,
        "sender_full_name": "Lokathor",
        "timestamp": 1632113420
    },
    {
        "content": "<p>like Jubilee said: pulling in a trait isn't a huge ask, doing an impl is a huge ask</p>",
        "id": 253997355,
        "sender_full_name": "Lokathor",
        "timestamp": 1632113446
    },
    {
        "content": "<p>That sounds like an idea to tinker around with.</p>",
        "id": 253997462,
        "sender_full_name": "Jubilee",
        "timestamp": 1632113573
    },
    {
        "content": "<p>Well, to keep it consistent, that's why I suggested something like <code>Shuffle4</code>, rather than a separate function, but you could keep it</p>",
        "id": 253997469,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632113584
    },
    {
        "content": "<p>I'm concerned about _only_ providing those functions since you would be effectively preventing writing shuffles on generic code</p>",
        "id": 253997546,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632113660
    },
    {
        "content": "<p>I guess it'd be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SwizzleFrom</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">swizzle_from</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but since we control both the trait and the type people can't add weird impls for it on their own, we don't really even need to seal this one.</p>",
        "id": 253997554,
        "sender_full_name": "Lokathor",
        "timestamp": 1632113674
    },
    {
        "content": "<p>but yeah it'd be rough for generics i guess</p>",
        "id": 253997607,
        "sender_full_name": "Lokathor",
        "timestamp": 1632113754
    },
    {
        "content": "<p>I definitely think there's room for making the common cases simpler, but I don't think there is any way to provide generic swizzles without an API like this</p>",
        "id": 253997695,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632113860
    },
    {
        "content": "<p>Something else we haven't even discussed that this addresses is swizzles that change the length of vectors, it's not common but both AVX and NEON have it</p>",
        "id": 253997761,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632113915
    },
    {
        "content": "<p>It's also useful when you're using rust vectors that are larger than your hardware vectors</p>",
        "id": 253997802,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632113978
    },
    {
        "content": "<p>I think we need some method of getting consts with generic types, and Caleb's method is good enough for nightly...we may want to extend the compiler to allow <code>&lt;const N: usize, const V: [usize; N]&gt;</code> before stabilizing though</p>",
        "id": 253997913,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632114026
    },
    {
        "content": "<p>length-changing swizzles are likely the most common type for gpu code</p>",
        "id": 253997980,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632114086
    },
    {
        "content": "<p>yeah, we'll figure out how to make this work well one way or another.</p>",
        "id": 253998183,
        "sender_full_name": "Jubilee",
        "timestamp": 1632114253
    },
    {
        "content": "<p>I would completely be okay with that, but I don't think that's even on the radar with const generics.  I don't know enough to say if that's a reasonable thing to change in the compiler</p>",
        "id": 253998186,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632114260
    },
    {
        "content": "<p><code>const V: [usize; N]</code> is something that will probably happen</p>",
        "id": 253998206,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1632114294
    },
    {
        "content": "<p>That's good to know, then it's a race <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 253998238,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632114336
    },
    {
        "content": "<p>I'd declare const generics hobbled if we don't eventually get <code>const V: [usize; N]</code></p>",
        "id": 253998299,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632114373
    },
    {
        "content": "<p>so, we need const generic const generics :P</p>",
        "id": 253998320,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632114403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> that's with N being a generic itself?</p>",
        "id": 253998327,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632114416
    },
    {
        "content": "<p>yea</p>",
        "id": 253998329,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1632114420
    },
    {
        "content": "<p><code>feature(adt_const_params)</code> doesnt support generic const param types like <code>[usize; N]</code> but its something that's been talked about <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 253998348,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1632114445
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>length-changing swizzles are likely the most common type for gpu code\n</code></pre></div>\n<p>hm, sure, but just to be clear: for CPU code, length-preserving is overwhelmingly the most common (IME anyway, but this is hard to debate since the APIs dont really provide much else, tbh. although I've also never missed it)</p>",
        "id": 253998371,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632114471
    },
    {
        "content": "<p>I think it's important to note that if you are using rust vectors larger than your hardware vectors, you can absolutely change the length in code without actually generating any special instructions</p>",
        "id": 253998467,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632114555
    },
    {
        "content": "<p>i think we should provide both, to be clear, but if length-changing swizzles need a dedicated impl, we should provide a way so that length-preserving ones don't, since i expect they'll be very common.</p>",
        "id": 253998469,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1632114557
    },
    {
        "content": "<p>I think if we get the ability to make the array length generic it can all be one fn</p>",
        "id": 253998488,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632114594
    },
    {
        "content": "<p>The output len with these traits as well as the hypothetical fn is deduced from either the index array len or from the deducing the output type</p>",
        "id": 253998576,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632114663
    },
    {
        "content": "<p>gpu code makes length changing swizzles nearly trivial to do, and (ab)uses different length simd vectors for mathematical vectors, rgb/rgba colors, 2d texture coordinates, etc.</p>",
        "id": 253998594,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632114681
    },
    {
        "content": "<p>there was a reason the length-changing version I offered was getting 4 items out of an 8 item vector, a \"realistic\" CPU length-changing swizzle.</p>",
        "id": 253998806,
        "sender_full_name": "Jubilee",
        "timestamp": 1632114914
    },
    {
        "content": "<p>having a separate length-preserving function is probably a good idea even if we get <code>&lt;const V: [usize; N]&gt;</code> since it will not need a type annotation (more of a problem with dynamic swizzles...)</p>",
        "id": 253998825,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632114954
    },
    {
        "content": "<p>realistic cpu swizzles could be like mixing 7.1 surround sound to stereo, 8 lanes -&gt; 2 lanes</p>",
        "id": 253999237,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632115425
    },
    {
        "content": "<p>I am checking on the swizzle PR regularly fwiw I am not just ignoring it, I am just waiting for the conversation to iterate to its fixed point.</p>",
        "id": 254408838,
        "sender_full_name": "Jubilee",
        "timestamp": 1632332886
    },
    {
        "content": "<p>thanks for the ping <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> - I’ll see it latwr this afternoon. I finally finished moving and classes started, so things should be more mellow now. 😊</p>",
        "id": 254437218,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1632343912
    },
    {
        "content": "<p>Looking over the PR again, I think <span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> caught most of the rough edges, those have been ironed out</p>",
        "id": 254463334,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632358518
    },
    {
        "content": "<p>The only thing that bothers me is finding a better name for the <code>Which</code> enum, which I picked just so I could move on with the implementation</p>",
        "id": 254463356,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632358540
    },
    {
        "content": "<p>I think I would prefer for it to have an equivalently short name, but maybe something a little more descriptive as to what it's doing</p>",
        "id": 254463486,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632358625
    },
    {
        "content": "<p>VecOrdinal? i can't think of any decent names</p>",
        "id": 254463820,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1632358842
    },
    {
        "content": "<p>lmao <code>Nth</code></p>",
        "id": 254464208,
        "sender_full_name": "Jubilee",
        "timestamp": 1632359192
    },
    {
        "content": "<p>It's unfortunate because <code>Select</code> is kind of the right word, but we already use that to mean something</p>",
        "id": 254535097,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632403860
    },
    {
        "content": "<p>Since a swizzle is reconstituting a vector we could maybe use <code>Take</code></p>",
        "id": 254535224,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632403914
    },
    {
        "content": "<p>Though that already has meaning elsewhere...</p>",
        "id": 254535299,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632403929
    },
    {
        "content": "<p><code>SimdSrc</code></p>",
        "id": 254546589,
        "sender_full_name": "Lokathor",
        "timestamp": 1632408074
    },
    {
        "content": "<p><code>Source</code> could work</p>",
        "id": 254546989,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1632408223
    }
]