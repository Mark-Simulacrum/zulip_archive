[
    {
        "content": "<p>Hi, is there a way to write things like the below via <code>std::simd</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>#[inline]\nfn from_chunk_u16(chunk: u16) -&gt; m32x16 {\n    let idx = u32x16::new(\n        1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768,\n    );\n    let vecmask = u32x16::splat(chunk as u32);\n\n    (idx &amp; vecmask).eq(idx)\n}\n</code></pre></div>\n<p>These operations are needed when masking values from <code>Simd</code> lanes of size <code>16</code> (and 8, 16, 32, 64 for other mask sizes)</p>\n<p>For larger the code becomes a bit cumbersome, e.g. </p>\n<div class=\"codehilite\"><pre><span></span><code>#[inline]\nfn from_chunk_u32(chunk: u32) -&gt; m16x32 {\n    let idx = u16x32::new(\n        1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 1, 2, 4, 8,\n        16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768,\n    );\n    let left = u16x32::from_chunk(&amp;[\n        1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ]);\n    let right = u16x32::from_chunk(&amp;[\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512,\n        1024, 2048, 4096, 8192, 16384, 32768,\n    ]);\n\n    let a = chunk.to_ne_bytes();\n    let a1 = u16::from_ne_bytes([a[2], a[3]]);\n    let a2 = u16::from_ne_bytes([a[0], a[1]]);\n\n    let vecmask1 = u16x32::splat(a1);\n    let vecmask2 = u16x32::splat(a2);\n\n    (idx &amp; left &amp; vecmask1).eq(idx) | (idx &amp; right &amp; vecmask2).eq(idx)\n}\n</code></pre></div>",
        "id": 267922564,
        "sender_full_name": "Jorge Leitao",
        "timestamp": 1642104139
    },
    {
        "content": "<p>from_chunk_u32 is sensitive to processor endian...idk that that's intended</p>",
        "id": 267922969,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642104302
    },
    {
        "content": "<p>hmm, how about using a loop in a const fn to build your array into a const, then using <code>Simd::from_array</code>?</p>",
        "id": 267923130,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642104374
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">make_it</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u16</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">retval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">retval</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">retval</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">THE_CONST</span>: <span class=\"p\">[</span><span class=\"kt\">u16</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">make_it</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Simd</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">THE_CONST</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267923717,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1642104636
    }
]