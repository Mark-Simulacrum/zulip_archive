[
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> pointed out in the <a href=\"https://github.com/rust-lang/rust/issues/2\">#2</a> PR: the build times <em>just declaring the type basics</em> are already super high. And the RAM usage is also much higher than one would like. They reported 3GB of RAM used, I observed 1GB used on my own system, but we're only talking about <code>cargo check</code> of a single crate which is supposed to be a <em>portion</em> of <code>core</code>, not some sprawling 400 dep project.</p>\n<p>So there's already some chatter in the PR thread about it, but it seems worth noting here too.</p>",
        "id": 211362721,
        "sender_full_name": "Lokathor",
        "timestamp": 1601130736
    },
    {
        "content": "<p>A big jump seems to come from dead checking:</p>\n<div class=\"codehilite\"><pre><span></span><code>time: 0.000; rss: 953MB layout_testing\ntime: 27.495; rss: 1712MB       death_checking\n</code></pre></div>",
        "id": 211362925,
        "sender_full_name": "bjorn3",
        "timestamp": 1601130996
    },
    {
        "content": "<p>That only happens in incremental mode, so I guess it is from loading the dep graph or something like that.</p>",
        "id": 211362995,
        "sender_full_name": "bjorn3",
        "timestamp": 1601131099
    },
    {
        "content": "<p>when i checked on my rpi4, it took as long (49s) to <code>cargo check</code> a fresh <code>stdsimd</code> as it did to do a fresh build of a \"hello world\" gba rom, but the gba rom is including the build-std step which builds <code>compiler_builtins</code> and <code>core</code>, and then linking and all that.</p>\n<p>So that's a poor time.</p>",
        "id": 211363162,
        "sender_full_name": "Lokathor",
        "timestamp": 1601131328
    },
    {
        "content": "<p>I wonder if stdarch has the same problem? They have the same types as far as I know</p>",
        "id": 211365828,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601134852
    },
    {
        "content": "<p>You mean packed-simd? That one also has terrible compilation times and memory usage: <a href=\"https://github.com/rust-lang/rust/issues/76647\">https://github.com/rust-lang/rust/issues/76647</a></p>",
        "id": 211365915,
        "sender_full_name": "bjorn3",
        "timestamp": 1601134979
    },
    {
        "content": "<p>No, stdarch has similar types. However after a closer look there is no usize/isize or u128/i128 as expected</p>",
        "id": 211366025,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601135123
    },
    {
        "content": "<p>And vectors are limited to 64 through 512 bits</p>",
        "id": 211366044,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601135141
    },
    {
        "content": "<p>stdarch doesn't implement <code>Display</code> and things like that for those types.</p>",
        "id": 211366101,
        "sender_full_name": "bjorn3",
        "timestamp": 1601135178
    },
    {
        "content": "<p>That's a good point</p>",
        "id": 211366290,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601135410
    },
    {
        "content": "<p>Not sure if this would actually cut down on compilation time, but we can implement new types that implement many of the traits as long as the underlying types implement AsRef&lt;[T]&gt;</p>",
        "id": 211366894,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601136135
    },
    {
        "content": "<p>That's similar to the method used by packed-simd, but the poor memory usage there seems to be a result of macro expansion, from what I can tell</p>",
        "id": 211367175,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601136486
    },
    {
        "content": "<p>Stupid question--how do I display RSS?  <code>-Ztime-passes</code> only seems to print times for me</p>",
        "id": 211370596,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601141396
    },
    {
        "content": "<p>Are you on Windows?</p>",
        "id": 211370642,
        "sender_full_name": "bjorn3",
        "timestamp": 1601141409
    },
    {
        "content": "<p>nope, mac. though I guess that may be it</p>",
        "id": 211370648,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601141422
    },
    {
        "content": "<p>On Unix systems it reads <code>/proc/self/statm</code>. <code>/proc</code> doesn't exist on macOS. <a href=\"https://github.com/rust-lang/rust/blob/956e06c6c85e918524b67503c4d65c7baf539585/compiler/rustc_data_structures/src/profiling.rs#L629\">https://github.com/rust-lang/rust/blob/956e06c6c85e918524b67503c4d65c7baf539585/compiler/rustc_data_structures/src/profiling.rs#L629</a></p>",
        "id": 211370669,
        "sender_full_name": "bjorn3",
        "timestamp": 1601141493
    },
    {
        "content": "<p>interesting--would have expected it to use getrusage</p>",
        "id": 211370806,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601141667
    },
    {
        "content": "<p>Okay, well I was able to reproduce in docker.</p>\n<div class=\"codehilite\"><pre><span></span><code>time: 0.000; rss: 521MB encode_query_results_for(rustc_middle::ty::query::queries::unsafety_check_result)\ntime: 1.275; rss: 1583MB        encode_query_results_for(rustc_middle::ty::query::queries::typeck)\n</code></pre></div>",
        "id": 211371111,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601142163
    },
    {
        "content": "<p>this is where I see the jump (mine caps out at around 1.5GB)</p>",
        "id": 211371115,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601142176
    },
    {
        "content": "<p>as a comparison, building core::arch caps out a bit over 400MB, for me</p>",
        "id": 211371252,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601142414
    },
    {
        "content": "<p>Something interesting to note--removing the manually implemented traits does almost nothing to the memory usage, but removing the <code>derive</code>d traits dramatically reduces it</p>",
        "id": 211371714,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1601143061
    },
    {
        "content": "<p>I should have thought of that, there's been problems with the efficiency of <code>derive</code> stuff before in <code>winapi</code>.</p>\n<p>good to have it fixed</p>",
        "id": 211377713,
        "sender_full_name": "Lokathor",
        "timestamp": 1601148400
    }
]