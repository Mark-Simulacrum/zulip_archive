[
    {
        "content": "<p>maybe we should manually code bitreverse in Mask::to_bits? it gets terrible efficiency on anything without a native bitreverse instruction...<br>\n<a href=\"https://llvm.godbolt.org/z/b1TreYWd8\">https://llvm.godbolt.org/z/b1TreYWd8</a><br>\nllvm needs an intrinsic for grev which fixes this exact problem...grev is kinda any combination of bitreverse, i2 reverse, nibble reverse, byte reverse, i16 reverse, i32 reverse, etc. all rolled into 1 instruction. RISC-V was planning on getting it (it was partially dropped from the v1.0 of bitmanip, leaving only bit and byte reverse instructions); it's also in the instructions Libre-SOC is busy working on adding to OpenPower: <a href=\"https://libre-soc.org/openpower/sv/bitmanip/\">https://libre-soc.org/openpower/sv/bitmanip/</a></p>",
        "id": 275607295,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647492682
    },
    {
        "content": "<p>Yeah, maybe.  I also think a \"to_native_bitmask\" function is probably the most useful overall</p>",
        "id": 275607373,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647492802
    },
    {
        "content": "<p>i'd call it <code>to_ne_bits</code></p>",
        "id": 275607384,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647492831
    },
    {
        "content": "<p>I think it's questionable to call it endianness</p>",
        "id": 275607427,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647492861
    },
    {
        "content": "<p>it's bit-endianness?</p>",
        "id": 275607446,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647492905
    },
    {
        "content": "<p>And I think depending on backend and target it could potentially be stranger than just bit-reversed</p>",
        "id": 275607452,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647492915
    },
    {
        "content": "<p>well...llvm converts i4 bitreverse to i64 bitreverse (since that's the only legal word size) and a shift, but there's no bitreverse instruction, so it converts the i64 bitreverse to a series of 18(!) shift/and/or  instructions</p>",
        "id": 275607564,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647493083
    },
    {
        "content": "<p>whereas for i4 bitreverse you only need 6 shift/and/or instructions</p>",
        "id": 275607599,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647493141
    },
    {
        "content": "<p>Sorry I meant a native bitmask might have any arbitrary layout depending on whatever instructions the target happens to have</p>",
        "id": 275607616,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647493187
    },
    {
        "content": "<p>Yeah it seems like llvm is not very good at this</p>",
        "id": 275607759,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647493268
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">rev_4</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"nc\">i4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mh\">0x5</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mh\">0xA</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 275607829,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647493330
    },
    {
        "content": "<p>What happens if you explicitly clear the unused bits afterwards? One of the passes might remove the dead shuffles then</p>",
        "id": 275607830,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647493335
    },
    {
        "content": "<p>i explicitly branched before to tell llvm it was 0 &lt;= v &lt; 16, and it still generated a i64 bitreverse</p>",
        "id": 275607849,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647493394
    },
    {
        "content": "<p>I meant more like bitand afterwards so even if it generates the i64 bit-reverse it can throw out the unused portion</p>",
        "id": 275607905,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647493451
    },
    {
        "content": "<p>also, i miscalculated instruction count...it would be 28 instructions for i64 bitreverse and 8 for i4</p>",
        "id": 275607921,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647493474
    },
    {
        "content": "<p>masking afterwards does nothing: <a href=\"https://llvm.godbolt.org/z/TPa9hMaMK\">https://llvm.godbolt.org/z/TPa9hMaMK</a></p>",
        "id": 275608038,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1647493663
    },
    {
        "content": "<p>Unfortunate</p>",
        "id": 275608079,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1647493692
    }
]