[
    {
        "content": "<p>For some reason, the version of our crate with <code>simd_shuffle</code> now breaks on the latest master, <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>, even when it doesn't on our crate. It says it needs a length. Are we deriving this length via type inference?</p>",
        "id": 258453803,
        "sender_full_name": "Jubilee",
        "timestamp": 1634768520
    },
    {
        "content": "<p>Sorry, I don't understand what you mean. You mean on the merge into core? vs our crate?</p>",
        "id": 258453916,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634768575
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 258453994,
        "sender_full_name": "Jubilee",
        "timestamp": 1634768621
    },
    {
        "content": "<p>This is absolutely baffling to me tbh.</p>",
        "id": 258454072,
        "sender_full_name": "Jubilee",
        "timestamp": 1634768646
    },
    {
        "content": "<p>Is it possible something went bad with the merge?</p>",
        "id": 258454151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634768704
    },
    {
        "content": "<p>nope lol<br>\nit looks exactly correct.</p>",
        "id": 258454179,
        "sender_full_name": "Jubilee",
        "timestamp": 1634768736
    },
    {
        "content": "<p>I suppose there could be a bug with inference or something?  Or did someone maybe revert the code in typeck?</p>",
        "id": 258454286,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634768797
    },
    {
        "content": "<p>I don't remember exactly but I think I removed that error entirely.</p>",
        "id": 258454343,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634768825
    },
    {
        "content": "<p>You mean in this PR? <a href=\"https://github.com/rust-lang/rust/pull/88855\">https://github.com/rust-lang/rust/pull/88855</a></p>",
        "id": 258454462,
        "sender_full_name": "Jubilee",
        "timestamp": 1634768890
    },
    {
        "content": "<p>Yep. So the error was removed</p>",
        "id": 258454572,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634768965
    },
    {
        "content": "<p>One way or another it made it back in</p>",
        "id": 258454663,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634769010
    },
    {
        "content": "<p>wrong master lol</p>",
        "id": 258454706,
        "sender_full_name": "Jubilee",
        "timestamp": 1634769039
    },
    {
        "content": "<p>...hm.</p>",
        "id": 258455342,
        "sender_full_name": "Jubilee",
        "timestamp": 1634769386
    },
    {
        "content": "<p>what rustc do we use for building nightly...?</p>",
        "id": 258455353,
        "sender_full_name": "Jubilee",
        "timestamp": 1634769395
    },
    {
        "content": "<p>Does that matter??</p>",
        "id": 258455425,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634769435
    },
    {
        "content": "<p>You mean the bootstrap compiler?</p>",
        "id": 258455547,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634769498
    },
    {
        "content": "<p>yes.</p>",
        "id": 258455780,
        "sender_full_name": "Jubilee",
        "timestamp": 1634769625
    },
    {
        "content": "<p>sure it does.</p>",
        "id": 258455787,
        "sender_full_name": "Jubilee",
        "timestamp": 1634769629
    },
    {
        "content": "<blockquote>\n<p>Complications of bootstrapping</p>\n<p>Since the build system uses the current beta compiler to build the stage-1 bootstrapping compiler, the compiler source code can't use some features until they reach beta (because otherwise the beta compiler doesn't support them). On the other hand, for compiler intrinsics and internal features, the features have to be used. Additionally, the compiler makes heavy use of nightly features (#![feature(...)]). How can we resolve this problem?</p>\n<p>There are two methods used:</p>\n<p>The build system sets --cfg bootstrap when building with stage0, so we can use cfg(not(bootstrap)) to only use features when built with stage1. This is useful for e.g. features that were just stabilized, which require #![feature(...)] when built with stage0, but not for stage1.<br>\n    The build system sets RUSTC_BOOTSTRAP=1. This special variable means to break the stability guarantees of rust: Allow using #![feature(...)] with a compiler that's not nightly. This should never be used except when bootstrapping the compiler.</p>\n</blockquote>",
        "id": 258455874,
        "sender_full_name": "Jubilee",
        "timestamp": 1634769686
    },
    {
        "content": "<p>Soo... When will my code hit beta, lol</p>",
        "id": 258456035,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634769762
    },
    {
        "content": "<p>Like tomorrow. But really I just gotta add some cfg bootstrap goo.</p>",
        "id": 258456077,
        "sender_full_name": "Jubilee",
        "timestamp": 1634769787
    },
    {
        "content": "<p>Yeah, looks like you can probably just wrap the entire simd module in that</p>",
        "id": 258456119,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1634769821
    },
    {
        "content": "<p>We have ignition.</p>",
        "id": 258456860,
        "sender_full_name": "Jubilee",
        "timestamp": 1634770261
    },
    {
        "content": "<p>Now hopefully this makes it to the linkchecker...</p>",
        "id": 258457289,
        "sender_full_name": "Jubilee",
        "timestamp": 1634770551
    }
]