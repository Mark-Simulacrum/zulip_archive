[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> So I have a branch here <a href=\"https://github.com/miguelraz/stdsimd?organization=miguelraz&amp;organization=miguelraz\">https://github.com/miguelraz/stdsimd?organization=miguelraz&amp;organization=miguelraz</a> that fixes the <code>AsRef -&gt; as_slice()</code> ugliness.<br>\nBut that branch is based on my repo - How can I pull in the changes from the main branch in <code>stdsim</code> ito my own <code>main</code> and then rebase the commits of <code>as-slice-fixes</code> onto that?</p>\n<p>... Because usually I just nuke the fork and make a new one with the new changes and... yeah...</p>",
        "id": 224971939,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612325997
    },
    {
        "content": "<p>Also I'm going to bed but will read this early and will read some git theory tomorrow so as to not be such a n00b at it.</p>",
        "id": 224972012,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612326077
    },
    {
        "content": "<p>this is what <code>git rebase &lt;trunk&gt; &lt;branch&gt;</code> is for, basically.</p>",
        "id": 224972095,
        "sender_full_name": "Jubilee",
        "timestamp": 1612326183
    },
    {
        "content": "<p>that said I think you can just open the PR? Since your stuff was accepted it should basically be the same? idk.</p>",
        "id": 224972168,
        "sender_full_name": "Jubilee",
        "timestamp": 1612326264
    },
    {
        "content": "<p>I've made a new mess on the <code>as-slices-pretty</code> PR now :/</p>",
        "id": 225027624,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612364743
    },
    {
        "content": "<p>Alright so now I mixed up commits from the <code>as-slices</code> with the old comits into a single PR.</p>\n<p>Normally I would delte the fork, PR and start from scratch (given that it's a tiny change.) but that does not seem sustainable dev ops :/</p>",
        "id": 225029022,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612365249
    },
    {
        "content": "<p>oh nooo lol.</p>",
        "id": 225033860,
        "sender_full_name": "Jubilee",
        "timestamp": 1612367216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span><br>\nback the branch out of your rebase attempt by resetting to a place in the reflog,<br>\nthen <code>git reset HEAD~N</code> where N is the number of commits that are supposed to only be in that PR.<br>\n<code>git stash</code><br>\nthen switch to main, delete the PR branch and remake it from main, and <code>git stash apply</code></p>",
        "id": 225034229,
        "sender_full_name": "Jubilee",
        "timestamp": 1612367365
    },
    {
        "content": "<p>Huh, I think it worked...</p>",
        "id": 225100393,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612396066
    },
    {
        "content": "<p>yep!</p>",
        "id": 225102060,
        "sender_full_name": "Jubilee",
        "timestamp": 1612397189
    },
    {
        "content": "<p>:3 So you see, sometimes rebuilding <strong>is</strong> the correct strategy,  but as you have noticed, it is more efficient to rebuild <strong>less</strong> than \"the entire repo\". If one can.</p>",
        "id": 225102127,
        "sender_full_name": "Jubilee",
        "timestamp": 1612397247
    },
    {
        "content": "<p>yup yup</p>",
        "id": 225102248,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612397322
    },
    {
        "content": "<p>I REally really wish I'd heard of <code>git reflog</code> before.</p>",
        "id": 225102278,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612397349
    },
    {
        "content": "<p>git stash is one of the more useful of the \"obscure\" commands, because it lets you quickly move diffs around like that.</p>",
        "id": 225102395,
        "sender_full_name": "Jubilee",
        "timestamp": 1612397417
    },
    {
        "content": "<p>Alright if I started a RustLang stream to make a few SIMD examples for some perhaps future docs would anyone be interested ?</p>",
        "id": 225112383,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406122
    },
    {
        "content": "<p>(I've not used the Zulip videocall thingy before but am willing to try it if it doesn't bork the site for others.)</p>",
        "id": 225112390,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> I've done coding streams and tutorials in the past - they really help learning and building cool stuff</p>",
        "id": 225112632,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406405
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=EkgCENBFrAY\">https://www.youtube.com/watch?v=EkgCENBFrAY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"EkgCENBFrAY\" href=\"https://www.youtube.com/watch?v=EkgCENBFrAY\"><img src=\"https://i.ytimg.com/vi/EkgCENBFrAY/default.jpg\"></a></div>",
        "id": 225112643,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406431
    },
    {
        "content": "<p>And the stream (a bit dusty) is here <br>\n<a href=\"https://www.twitch.tv/brainrpg\">https://www.twitch.tv/brainrpg</a></p>",
        "id": 225112652,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406452
    },
    {
        "content": "<p>ohhhhhhh. Perhaps!</p>",
        "id": 225112895,
        "sender_full_name": "Jubilee",
        "timestamp": 1612406747
    },
    {
        "content": "<p>OK</p>",
        "id": 225112963,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406812
    },
    {
        "content": "<p>I will start a  jitsi thing here if people wanna check it as I work on some examples</p>",
        "id": 225112973,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406829
    },
    {
        "content": "<p><a href=\"https://meet.jit.si/550373528225847\">Click to join video call</a></p>",
        "id": 225112975,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612406833
    },
    {
        "content": "<p>oh uhm now aaa.</p>",
        "id": 225113296,
        "sender_full_name": "Jubilee",
        "timestamp": 1612407263
    },
    {
        "content": "<p>LOL can't even do a hello world with <code>use core_simd::*;</code>.</p>",
        "id": 225113490,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612407597
    },
    {
        "content": "<p>So a question for the Rust wizards.<br>\nConst generics allows you to specialize functions with integers at compile time for now right?</p>",
        "id": 225115271,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612409720
    },
    {
        "content": "<p>Correct, you use a type parameter that is specified, instead of like <code>&lt;T&gt;</code>, as <code>&lt;const T: ${type}&gt;</code></p>",
        "id": 225115375,
        "sender_full_name": "Jubilee",
        "timestamp": 1612409860
    },
    {
        "content": "<p>Not specialize, but parameterize</p>",
        "id": 225115379,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612409867
    },
    {
        "content": "<p>and yes specialization is technically a different thing.</p>",
        "id": 225115396,
        "sender_full_name": "Jubilee",
        "timestamp": 1612409882
    },
    {
        "content": "<p>Ok ok</p>",
        "id": 225115424,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612409891
    },
    {
        "content": "<p>Specialize would be overloading a particular set of parameters of a generic with a \"specialized\" implementation</p>",
        "id": 225115441,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612409919
    },
    {
        "content": "<p>OK OK gotcha. But the compiler technically will leverage the knowledge that those <code>const</code> things will ahve at compile time right?</p>",
        "id": 225115474,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612409980
    },
    {
        "content": "<p>Yep</p>",
        "id": 225115573,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612410082
    },
    {
        "content": "<p>OK wait a sec</p>",
        "id": 225115580,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410093
    },
    {
        "content": "<p>What if I have a function</p>",
        "id": 225115587,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410099
    },
    {
        "content": "<p>It doesn't <em>have</em> to evaluate it at compile time but it is allowed to</p>",
        "id": 225115592,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612410113
    },
    {
        "content": "<p>and that function needs 2 parameters that I determine a, N, M, and then it munges on a bunch of data.</p>",
        "id": 225115638,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410136
    },
    {
        "content": "<p>But!</p>",
        "id": 225115640,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410138
    },
    {
        "content": "<p>The munging of the data can be incredibly sped up with SIMD stuff  if I can calculate a matrix that dependes on knowing the values of N,M</p>",
        "id": 225115652,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410170
    },
    {
        "content": "<p>So N =3, M = 4 would be something like \"Oh, you need to calculate these coefficients of a 3x4 matrix. Here's your super optimized loop\"</p>",
        "id": 225115668,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410221
    },
    {
        "content": "<p>But if I passed in N = 5, M = 3, those same coefficietns and the looping and indexing would need to change quite a bit as well.</p>",
        "id": 225115733,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410266
    },
    {
        "content": "<p>Would rust generate a different function for each of those at runtime? Or it needs to know at compile time all my possible combinations of those parameters that I want to use.</p>",
        "id": 225115754,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410312
    },
    {
        "content": "<p>(Sorry for lack of clarity I'm handwaving some Julia code I wrote that is very heavy on the SIMD optimized metaprogramming and not all of it is easily Rust-translateable)</p>",
        "id": 225115765,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410346
    },
    {
        "content": "<p>Yes, each one \"monomorpisation\" of a generic function is its own function</p>",
        "id": 225115770,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612410351
    },
    {
        "content": "<p>OK cool, so it would be monomorphized.</p>",
        "id": 225115825,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410411
    },
    {
        "content": "<p>But if I only called the N=3, M=4 version, and the N=5,M=3 version, only those versions would be compiled and used right?</p>",
        "id": 225115838,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410442
    },
    {
        "content": "<p>Yup</p>",
        "id": 225115889,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612410484
    },
    {
        "content": "<p>OK, last question - can my function have macros inside it and not mess with the monomorphization*?</p>",
        "id": 225115925,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410563
    },
    {
        "content": "<p>Macros just turn into normal code before it gets to that point</p>",
        "id": 225116091,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612410804
    },
    {
        "content": "<p>So yes</p>",
        "id": 225116095,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612410808
    },
    {
        "content": "<p>Oh that's neat.</p>",
        "id": 225116112,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410832
    },
    {
        "content": "<p>I <em>think</em> that means I could port this code to Rust</p>",
        "id": 225116185,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410878
    },
    {
        "content": "<p><a href=\"https://github.com/miguelraz/StagedFilters.jl\">https://github.com/miguelraz/StagedFilters.jl</a></p>",
        "id": 225116186,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410879
    },
    {
        "content": "<p>Which is a generalized version of the \"rolling average\" function, but with some other nice statistical properties and  hand unrolled SIMD loops for all possible combinations of M,N</p>",
        "id": 225116214,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612410931
    },
    {
        "content": "<p>Oh and last I checked it was 2x faster than the SciPy implementation, and it should work with GPUs because Julia <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span> (but I haven't touched it in a while so shhhh)</p>",
        "id": 225116590,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612411347
    },
    {
        "content": "<p>yeah functions in Rust are consistently monomorphized to their type parameters and dead code is eliminated as usual, you will see a function does dynamic dispatch instead of is monomorphized because the type it works on will be behind a pointer.</p>",
        "id": 225116700,
        "sender_full_name": "Jubilee",
        "timestamp": 1612411484
    },
    {
        "content": "<p>eventually such Dynamically Sized Types might actually get on the stack but they will have distinct type signatures because it will be things like Trait Objects and such.</p>",
        "id": 225116727,
        "sender_full_name": "Jubilee",
        "timestamp": 1612411526
    },
    {
        "content": "<p>DST?</p>",
        "id": 225116734,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612411541
    },
    {
        "content": "<p>Dynamically Sized Type.<br>\nA trait object will generally look like Box&lt;dyn Trait&gt; (the Box is the pointer) but there's gradually evolving syntax that allows just dyn Trait to be specified in most cases.</p>",
        "id": 225116806,
        "sender_full_name": "Jubilee",
        "timestamp": 1612411626
    },
    {
        "content": "<p>Gotcha. Thx!</p>",
        "id": 225116914,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612411755
    },
    {
        "content": "<p>Alright gang - I will attempt some Rust exercisms (where <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> is a maintainer).<br>\nFeel free to drop by!</p>",
        "id": 225260509,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612499566
    },
    {
        "content": "<p>(Will start soonish - currently upping my git-foo with <a href=\"https://codewords.recurse.com/issues/two/git-from-the-inside-out\">https://codewords.recurse.com/issues/two/git-from-the-inside-out</a>)</p>",
        "id": 225262208,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612501775
    },
    {
        "content": "<p>obligatory link to <a href=\"https://git-scm.com/doc\">https://git-scm.com/doc</a><br>\nthe hosted manpages may not be very useful but the books, cheatsheets, etc. are</p>",
        "id": 225359813,
        "sender_full_name": "Jubilee",
        "timestamp": 1612560363
    },
    {
        "content": "<p>Ooh, I'd never seen those links. Thanks!</p>",
        "id": 225363874,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612562624
    },
    {
        "content": "<p>Alright. Actual friday stream for some exercisms after I learn some git.</p>",
        "id": 225368283,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612565204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> If I want to try and run Caleb's PR locally, what's the procedure?</p>\n<ol>\n<li>Add his branch to my local machine with <code>git remote add caleb ...</code></li>\n<li>Switch to it</li>\n<li>Run the test?</li>\n</ol>",
        "id": 226265336,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613248278
    },
    {
        "content": "<p>Answering my question:</p>\n<ol>\n<li>Pull the branch locally with<code>git pull origin feature/proptest</code></li>\n<li>Switch to it with <code>git checkout --track origin/feature/proptest</code></li>\n</ol>",
        "id": 226265465,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1613248429
    }
]