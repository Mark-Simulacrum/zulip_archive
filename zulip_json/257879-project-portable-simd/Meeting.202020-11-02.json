[
    {
        "content": "<p>It's Monday!</p>",
        "id": 215369805,
        "sender_full_name": "Lokathor",
        "timestamp": 1604346806
    },
    {
        "content": "<p>Been Monday all month <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 215370042,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604346926
    },
    {
        "content": "<p>Today is extra Monday, one of the most extra Mondays all March :P</p>",
        "id": 215370264,
        "sender_full_name": "Lokathor",
        "timestamp": 1604347037
    },
    {
        "content": "<p>Was there anything we wanted to discuss today? Iâ€™ve got:</p>\n<ul>\n<li>A very early and incomplete draft of an MCP for more SIMD intrinsics that floats a couple strawman suggestions on how to introduce them I was hoping for input on: <a href=\"https://hackmd.io/vtoVeGpQTeSeUH1HaOpRCw\">https://hackmd.io/vtoVeGpQTeSeUH1HaOpRCw</a></li>\n<li>The open PR for comparisons: <a href=\"https://github.com/rust-lang/stdsimd/pull/44\">https://github.com/rust-lang/stdsimd/pull/44</a></li>\n</ul>",
        "id": 215370299,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604347062
    },
    {
        "content": "<p>Looks like the PR has some macro expansion problems at this exact moment</p>",
        "id": 215370454,
        "sender_full_name": "Lokathor",
        "timestamp": 1604347136
    },
    {
        "content": "<p>I'd note in the MCP ,</p>\n<blockquote>\n<p>it's easier for Cranelift to target the small number of <code>simd_*</code> intrinsics than the large number of corresponding <code>llvm.*.v*</code> ones.</p>\n</blockquote>\n<p>I might say instead/also that it's easier for stdlib code because then they don't have to cfg on cranelift or LLVM.</p>",
        "id": 215370949,
        "sender_full_name": "Lokathor",
        "timestamp": 1604347401
    },
    {
        "content": "<p>Because it could use <code>core::simd</code> itself on either?</p>",
        "id": 215371127,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604347503
    },
    {
        "content": "<p>We will also end up expanding the simd_* intrinsics significantly I think. Still certainly smaller than the entirety of LLVM but will need some more</p>",
        "id": 215371270,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604347572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I saw weâ€™re going to be pulling in a couple of existing comparison intrinsics soon, were there any new ones you know weâ€™ll need off the top of your head?</p>",
        "id": 215371575,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604347766
    },
    {
        "content": "<p>Comparison and rounding are the ones that came to mind</p>",
        "id": 215371683,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604347808
    },
    {
        "content": "<p>Though I think comparisons are mostly already covered</p>",
        "id": 215371730,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604347831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> yeah because <em>without</em> <code>simd_foo</code> rustc intrinsics, <code>core::simd</code> would have to link to <code>llvm.*</code> and also some sort of <code>cranelift.*</code> (because presumably cranelift wouldn't actually link things under llvm names even if it had those abilities), and so <code>core::simd</code> would need some sort of cfg ability to see what the codegen backend is, which we want to avoid code ever having if we can.</p>",
        "id": 215371819,
        "sender_full_name": "Lokathor",
        "timestamp": 1604347871
    },
    {
        "content": "<p>And Iâ€™m guessing shuffles would need some new ones too?</p>",
        "id": 215371879,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604347912
    },
    {
        "content": "<p>I think shuffles are already covered</p>",
        "id": 215371933,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604347928
    },
    {
        "content": "<p>Though I haven't looked super closely</p>",
        "id": 215371949,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604347937
    },
    {
        "content": "<p>i also think shuffle is in</p>",
        "id": 215371957,
        "sender_full_name": "Lokathor",
        "timestamp": 1604347942
    },
    {
        "content": "<p>Ah great!</p>",
        "id": 215371970,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604347952
    },
    {
        "content": "<p>If I had to take a guess we probably will eventually double the number of simd_* intrinsics</p>",
        "id": 215372000,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604347976
    },
    {
        "content": "<p>It might be the case that the shuffle is very \"LLVM-y\" in how it works, so we might need to clarify the API in a more agnostic way</p>",
        "id": 215372027,
        "sender_full_name": "Lokathor",
        "timestamp": 1604347989
    },
    {
        "content": "<p>This should be the full list of currently existing platform-intrinsics: <a href=\"https://github.com/rust-lang/stdarch/blob/master/crates/core_arch/src/simd_llvm.rs\">https://github.com/rust-lang/stdarch/blob/master/crates/core_arch/src/simd_llvm.rs</a></p>",
        "id": 215372039,
        "sender_full_name": "bjorn3",
        "timestamp": 1604347997
    },
    {
        "content": "<p>How do we feel about committing to making sure thereâ€™s a reference implementation in <code>miri</code> for the intrinsics weâ€™re going to depend on?</p>",
        "id": 215372172,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348050
    },
    {
        "content": "<p>Very important</p>",
        "id": 215372191,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348066
    },
    {
        "content": "<p>And it automatically makes MIRI able to handle SIMD since we already have the MIR forms of each intrinsic written down</p>",
        "id": 215372226,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348088
    },
    {
        "content": "<p>Would it be in miri, or simply part of rustc that lowers to plain rust?</p>",
        "id": 215372268,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348110
    },
    {
        "content": "<p>Or both</p>",
        "id": 215372293,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348126
    },
    {
        "content": "<p>i think the idea is \"a MIR version exists\", even if it's not used on say intel + LLVM</p>",
        "id": 215372305,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348136
    },
    {
        "content": "<p>and you'd only use it on powerpc or... whatever</p>",
        "id": 215372324,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348147
    },
    {
        "content": "<p>Iâ€™m not sure what the preference of compiler folks would be ðŸ™‚ I was mostly thinking of living documentation of what intrinsics should do so if things donâ€™t line up on different platforms we know whoâ€™s conformant and whoâ€™s not plus miri support for portable SIMD (which seems important)</p>",
        "id": 215372524,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348268
    },
    {
        "content": "<p>I've never tried to read MIR, so i don't know if it makes clear code or not. Most of these operations might want a doc of what to do \"in plain english\"</p>",
        "id": 215372637,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348314
    },
    {
        "content": "<p>Oh I thought miriâ€™s intrinsics were written in plain Rust ðŸ˜„</p>",
        "id": 215372719,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348358
    },
    {
        "content": "<p>i just assume they were an alternate IR like how LLVM IR is an alternate language, but maybe they <em>are</em> written in plain rust</p>",
        "id": 215372764,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348391
    },
    {
        "content": "<p>So I thought the idea was that when lowering to MIR you check the backend support and convert the intrinsics to plain rust MIR if the backend doesn't support it</p>",
        "id": 215373018,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348511
    },
    {
        "content": "<p>Which would work for MIRI, I think?</p>",
        "id": 215373095,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348528
    },
    {
        "content": "<p>That would work with miri, and would work with backends that don't have an intrinsic.</p>",
        "id": 215373234,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348605
    },
    {
        "content": "<p>I just had some other crazy notion in mind i guess</p>",
        "id": 215373248,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348613
    },
    {
        "content": "<p>I think MIRI could specialize the intrinsics in the future if there's some benefit to it</p>",
        "id": 215373380,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348667
    },
    {
        "content": "<p>At that stage our intrinsics would still look like <code>simd_*</code> function calls, would they?</p>",
        "id": 215373397,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348681
    },
    {
        "content": "<p>In MIR?</p>",
        "id": 215373413,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348691
    },
    {
        "content": "<p>Or would the backend have already expanded them by then?</p>",
        "id": 215373457,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348721
    },
    {
        "content": "<p>I don't know. We'd need a compiler person</p>",
        "id": 215373497,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348745
    },
    {
        "content": "<p>Well, I was thinking one of the passes on MIR would check if platform-intrinsics have a match on the backend, and if not replace the intrinsic with plain rust</p>",
        "id": 215373639,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348811
    },
    {
        "content": "<p>But we definitely need a compiler person</p>",
        "id": 215373653,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348819
    },
    {
        "content": "<p>So intrinsics would still come out <em>sometimes</em>?</p>",
        "id": 215373735,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348860
    },
    {
        "content": "<p>I imagined our MIR would be invoking <code>simd_*</code>, which miriâ€™s interpreter would pick up in its big olâ€™ match block and call a plain Rust implementation of that intrinsic. Sounds like we definitely need a compiler person ðŸ™‚ And maybe the best way to do that is write up what we think should happen in the MCP and if itâ€™s wrong somebody will jump on it ðŸ˜„</p>",
        "id": 215373741,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348861
    },
    {
        "content": "<p>I think the reason to do it as a MIR pass was so cranelift or any other backend could also use plain rust initially, not just MIRI</p>",
        "id": 215373869,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348914
    },
    {
        "content": "<p>Basically add initial support in one place as opposed to every consumer of MIR</p>",
        "id": 215373929,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348947
    },
    {
        "content": "<p>Ahh, that makes sense</p>",
        "id": 215374077,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604348975
    },
    {
        "content": "<p>But fundamentally I think it's the same thing regardless of where it occurs? I think we're on the same page more or less haha</p>",
        "id": 215374115,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604348999
    },
    {
        "content": "<p>Also, I think that if there's an assured MIR equivalent then it's better for const-eval as well</p>",
        "id": 215374294,
        "sender_full_name": "Lokathor",
        "timestamp": 1604349066
    },
    {
        "content": "<p>I think so <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> It sounds like we definitely want reference implementations that backends can use _somewhere_</p>",
        "id": 215374312,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604349073
    },
    {
        "content": "<p>Didn't even consider const fn. Great point</p>",
        "id": 215374533,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604349165
    },
    {
        "content": "<p>Const fn floats are certainly up in the air at the moment, but const fn int is very cut and dry, so there's no reason we can't have const fn simd ints</p>",
        "id": 215374619,
        "sender_full_name": "Lokathor",
        "timestamp": 1604349208
    },
    {
        "content": "<p>Feel free to drop any scratch notes or comments on the MCP so far! Iâ€™ll aim to finish it up and raise it this week ðŸ™‚ I think the compiler folks will probably want to talk about it in one of their meetings</p>",
        "id": 215374640,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604349222
    },
    {
        "content": "<p>Instead of a MIR pass, there could be a function that takes a platform-intrinsic call and maybe a local as temporary and then returns a list of mir statements that is equivalent to the platform-intrinsic. That would allow the backend to implement just some platform-intrinsics and leave the rest to this function.</p>",
        "id": 215374770,
        "sender_full_name": "bjorn3",
        "timestamp": 1604349273
    },
    {
        "content": "<p>I wonder if the plain rust equivalents should be implemented somewhere like core::intrinsics, though something like that might be too magic</p>",
        "id": 215375088,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604349429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> So just to float the simplest thing that could possible work, we make a crate of simd intrinsics in plain Rust, compile them to MIR, dump that in a text file and check it in, and then parse and serve fragments of that on-demand?</p>",
        "id": 215375320,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604349530
    },
    {
        "content": "<p>Iâ€™m sure we wouldnâ€™t actually have to do things that way ðŸ˜„</p>",
        "id": 215375533,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604349628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"204346\">Ashley Mannix</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202020-11-02/near/215375320\">said</a>:</p>\n<blockquote>\n<p>just to float </p>\n</blockquote>\n<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 215375573,
        "sender_full_name": "oliver",
        "timestamp": 1604349642
    },
    {
        "content": "<p>I meant a function that returns something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source_info</span>: <span class=\"cm\">/* ... */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"cm\">/* ... */</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source_info</span>: <span class=\"cm\">/* ... */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"cm\">/* ... */</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source_info</span>: <span class=\"cm\">/* ... */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"cm\">/* ... */</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">source_info</span>: <span class=\"cm\">/* ... */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"cm\">/* ... */</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for a vector type with four lanes.</p>",
        "id": 215375642,
        "sender_full_name": "bjorn3",
        "timestamp": 1604349677
    },
    {
        "content": "<p>That's kinda why I'm suggesting putting them in core (but unstable).  Then we get to skip that whole compile to MIR process</p>",
        "id": 215375672,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604349690
    },
    {
        "content": "<p>well, <code>core</code> gets compiled very rarely anyway</p>",
        "id": 215375846,
        "sender_full_name": "Lokathor",
        "timestamp": 1604349763
    },
    {
        "content": "<p>most people never compile it</p>",
        "id": 215375865,
        "sender_full_name": "Lokathor",
        "timestamp": 1604349774
    },
    {
        "content": "<p>actually, hmm, hold on, we want all this inlined into the user's code space as often as possible</p>",
        "id": 215375903,
        "sender_full_name": "Lokathor",
        "timestamp": 1604349797
    },
    {
        "content": "<p>to pick up on the user's cpu feature settings</p>",
        "id": 215375915,
        "sender_full_name": "Lokathor",
        "timestamp": 1604349805
    },
    {
        "content": "<p>Sorry, I meant we get to skip manually compiling a separate crate with the polyfill as <span class=\"user-mention\" data-user-id=\"204346\">@Ashley Mannix</span> suggested</p>",
        "id": 215375921,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604349806
    },
    {
        "content": "<p>So instead of using independent bits of MIR you can use calls to fns in core. Which would work with either a MIR pass or <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> 's method I think</p>",
        "id": 215376084,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604349867
    },
    {
        "content": "<p>Maybe if we just list our requirements for writing pollyfills in plain Rust and for having those pollyfills available to any backend without having to translate them manually we can fill in the blanks with more compiler team input?</p>",
        "id": 215376211,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604349945
    },
    {
        "content": "<p>Yeah as long as it's written in rust and not directly in MIR I think we're good</p>",
        "id": 215376319,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604349988
    },
    {
        "content": "<p>And as long as <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> doesnâ€™t have to rewrite them all to make things work in Cranelift weâ€™re good</p>",
        "id": 215376429,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604350060
    },
    {
        "content": "<p>Ok, Iâ€™ll keep working on that MCP and keep you all up to date!</p>",
        "id": 215377189,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604350436
    },
    {
        "content": "<p>hmm my brain fell out again. I should actually write a notification down.</p>",
        "id": 215392092,
        "sender_full_name": "Jubilee",
        "timestamp": 1604358905
    },
    {
        "content": "<p>Whoops. Hope you recovered it without incident</p>",
        "id": 215392363,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604359109
    },
    {
        "content": "<p>Also the time shifted i think because it's in the calendar as UTC, but we did daylight shift</p>",
        "id": 215392942,
        "sender_full_name": "Lokathor",
        "timestamp": 1604359607
    },
    {
        "content": "<p>Oh I completely forgot about DST, wondering why the time was different</p>",
        "id": 215392981,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604359650
    },
    {
        "content": "<p>oh yeah actually</p>",
        "id": 215395815,
        "sender_full_name": "Jubilee",
        "timestamp": 1604361700
    },
    {
        "content": "<p>Now that some folks are in DST do you think we should consider shifting the time? I left it in UTC so it didn't automatically shift :)</p>",
        "id": 215432951,
        "sender_full_name": "Ashley Mannix",
        "timestamp": 1604398110
    },
    {
        "content": "<p>I'm ok with either time</p>",
        "id": 215447067,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1604406865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202020-11-02/near/215376084\">said</a>:</p>\n<blockquote>\n<p>So instead of using independent bits of MIR you can use calls to fns in core. Which would work with either a MIR pass or <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> 's method I think</p>\n</blockquote>\n<p>IIRC that's what <a href=\"https://github.com/rust-lang/compiler-builtins\"><code>compiler-builtins</code></a> is for?  Last I heard internal stuff like that wasn't wanted in <code>core</code>.</p>",
        "id": 215461604,
        "sender_full_name": "scottmcm",
        "timestamp": 1604414449
    }
]