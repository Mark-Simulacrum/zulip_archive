[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> <a href=\"https://www.youtube.com/watch?v=zeKE0NHUtUw\">joins the battle!</a><br>\n...wait wrong link. Here we go. <a href=\"https://github.com/rust-lang/stdsimd/pull/55\">MGR opens a PR!</a><br>\nto address <a href=\"https://github.com/rust-lang/stdsimd/issues/54\">https://github.com/rust-lang/stdsimd/issues/54</a><br>\nSi tienes más pregunta, preguntar áqui por favor. (oh god I probably botched that horribly)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"zeKE0NHUtUw\" href=\"https://www.youtube.com/watch?v=zeKE0NHUtUw\"><img src=\"https://i.ytimg.com/vi/zeKE0NHUtUw/default.jpg\"></a></div>",
        "id": 223992750,
        "sender_full_name": "Jubilee",
        "timestamp": 1611630687
    },
    {
        "content": "<p>Awwww yisss</p>",
        "id": 223994389,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611632881
    },
    {
        "content": "<p>Si tienes más preguntas(1), pregunta(2) aquí(3) por favor. </p>\n<ol>\n<li>Plurals need 's'</li>\n<li>Imperative</li>\n<li>Accent always the i on this one.</li>\n</ol>",
        "id": 223994465,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611632997
    },
    {
        "content": "<p>Oh wow <strong>only</strong> making that many typos? Nice.</p>",
        "id": 223995623,
        "sender_full_name": "Jubilee",
        "timestamp": 1611634595
    },
    {
        "content": "<p>Alright, I think I can give it another push tonight.</p>",
        "id": 223995763,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611634798
    },
    {
        "content": "<p>Also, my initials are technically MRG, but I prefer to just be called Raz.</p>",
        "id": 223995834,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611634865
    },
    {
        "content": "<p>oh sheesh~ I'm sorry! reading everything backwards.</p>",
        "id": 223998435,
        "sender_full_name": "Jubilee",
        "timestamp": 1611638215
    },
    {
        "content": "<p>OK, trying to write the test now. How do I make sure that the attribute is applied only to integer types? Is it enough that I am writing the test within <code>ops_impl/int_macros.rs</code>? There's a <code>@float</code> macro guard in some of the other ones and I'm not sure if I should care about that here.</p>",
        "id": 224003100,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611644287
    },
    {
        "content": "<p>OK this is my progress so far - it seems to pass tests locally.<br>\n<code>tests/ops_impl/int_macros.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>            #[test]\n            #[cfg_attr(target_arch = &quot;wasm32&quot;, wasm_bindgen_test)]\n            fn neg() {\n                let v = from_slice(&amp;A);\n                let expected = apply_unary_lanewise(v, core::ops::Neg::neg);\n                assert_biteq!(-v, expected);\n            }\n            #[test]\n            #[cfg_attr(target_arch = &quot;wasm32&quot;, wasm_bindgen_test)]\n            #[should_panic]\n            fn neg_panics() {\n                let v = from_slice(&amp;vec![$scalar::MIN; 64]);\n                // neg(MIN) should panic for integer types\n                let expected = apply_unary_lanewise(v, core::ops::Neg::neg);\n                assert_biteq!(-v, expected);\n            }\n</code></pre></div>",
        "id": 224003637,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611645058
    },
    {
        "content": "<p>@jubilee How do people usually handle navigating the test file dumps? I just <code>cargo test &gt; temp</code> and then check it out in vim to see that the entire test matrix got produced and ran accordingly. Do people use a more ergonomic workflow?</p>",
        "id": 224066421,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611679231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> Most of the tests will simply say whether they completed or not, so you don't need to review the entire test log, it will just tell you what you failed.</p>",
        "id": 224087746,
        "sender_full_name": "Jubilee",
        "timestamp": 1611688208
    },
    {
        "content": "<p>Gotcha. I just wanted to make sure I wasn't generating float tests for the int macros.</p>",
        "id": 224087857,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611688272
    },
    {
        "content": "<p>the trick with @float only matters for the macros which are deliberately applied to both.</p>",
        "id": 224088554,
        "sender_full_name": "Jubilee",
        "timestamp": 1611688595
    },
    {
        "content": "<p>OK, I pushed the appropriate tests (I think).<br>\nIf I run <code>cargo test</code> locally, all pass.<br>\nOn CI, the new tests all fail (which is fine, for now.)<br>\nHow can I run <code>cargo test --test ops</code>?</p>",
        "id": 224116069,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611701234
    },
    {
        "content": "<p>Are you trying to just run a subset of the tests?</p>",
        "id": 224116221,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611701314
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> , because the <code>ops</code> <code>int_macros</code> are the only ones touched by my PR.</p>",
        "id": 224117236,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611701938
    },
    {
        "content": "<p>I believe you should be able to do something like <code>cargo test ops_impl::*</code></p>",
        "id": 224117299,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611701988
    },
    {
        "content": "<p>Though I think that's basically all of the tests</p>",
        "id": 224117387,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611702037
    },
    {
        "content": "<p>OK. Then I need a new idea for how to run my tests locally so I can reproduce the failures CI is seeing with their command to run tests.</p>",
        "id": 224117531,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611702122
    },
    {
        "content": "<p>It's curious that they'd be passing at all for you</p>",
        "id": 224117608,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611702157
    },
    {
        "content": "<p>When I investigated the compiler backend it doesn't appear to produce any panics in any situations</p>",
        "id": 224117643,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611702182
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 224117662,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611702189
    },
    {
        "content": "<p>I'll check out your branch in a bit and see if I can reproduce</p>",
        "id": 224117725,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611702232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[I] mrg@JuliaLap ~/p/r/s/c/core_simd (min-panics)&gt; cargo test --quiet\nwarning: the feature `min_const_generics` has been stable since 1.51.0 and no longer requires an attribute to enable\n --&gt; crates/core_simd/src/lib.rs:2:76\n  |\n2 | #![feature(repr_simd, platform_intrinsics, link_llvm_intrinsics, simd_ffi, min_const_generics)]\n  |                                                                            ^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: 1 warning emitted\n\nwarning: the feature `min_const_generics` has been stable since 1.51.0 and no longer requires an attribute to enable\n --&gt; crates/core_simd/src/lib.rs:2:76\n  |\n2 | #![feature(repr_simd, platform_intrinsics, link_llvm_intrinsics, simd_ffi, min_const_generics)]\n  |                                                                            ^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(stable_features)]` on by default\n\nwarning: 1 warning emitted\n\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\nrunning 2318 tests\n.................................................................................................... 100/2318\n.................................................................................................... 200/2318\n.................................................................................................... 300/2318\n.................................................................................................... 400/2318\n.................................................................................................... 500/2318\n.................................................................................................... 600/2318\n.................................................................................................... 700/2318\n.................................................................................................... 800/2318\n.................................................................................................... 900/2318\n.................................................................................................... 1000/2318\n.................................................................................................... 1100/2318\n.................................................................................................... 1200/2318\n.................................................................................................... 1300/2318\n.................................................................................................... 1400/2318\n.................................................................................................... 1500/2318\n.................................................................................................... 1600/2318\n.................................................................................................... 1700/2318\n.................................................................................................... 1800/2318\n.................................................................................................... 1900/2318\n.................................................................................................... 2000/2318\n.................................................................................................... 2100/2318\n.................................................................................................... 2200/2318\n.................................................................................................... 2300/2318\n..................\ntest result: ok. 2318 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.10s\nrunning 0 tests\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n</code></pre></div>",
        "id": 224117727,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611702237
    },
    {
        "content": "<p>Well, that is the same number of tests... so it's not like it's skipping it</p>",
        "id": 224117850,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611702317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> I also do not get any errors</p>",
        "id": 224124423,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707196
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.tenor.com/images/6f934479914fbd708238bab284eeff0a/tenor.gif\"><img src=\"https://media.tenor.com/images/6f934479914fbd708238bab284eeff0a/tenor.gif\"></a></div>",
        "id": 224124473,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611707248
    },
    {
        "content": "<p>ah I figured it out. <code>cargo test --release</code> does not panic</p>",
        "id": 224124552,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707290
    },
    {
        "content": "<p>the panics only occur in debug mode</p>",
        "id": 224124572,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707308
    },
    {
        "content": "<p>Oh!</p>",
        "id": 224124586,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611707325
    },
    {
        "content": "<p>interestingly, this is because our <code>Neg</code> implementation uses <code>Sub</code> under the hood</p>",
        "id": 224124673,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707402
    },
    {
        "content": "<p>(I think)</p>",
        "id": 224124733,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707417
    },
    {
        "content": "<p>This appears to match the scalar behavior</p>",
        "id": 224124840,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707512
    },
    {
        "content": "<p>Yes, theres a <code>Self::splat(0) - self</code> call.</p>",
        "id": 224124848,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611707515
    },
    {
        "content": "<p>Ok, no idea how to handle panics in release mode. I poked around the Rust book for a bit but I've never done error handling before Rust <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 224125364,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611707867
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ec0381fa3a628ad0730fb052fc12c536\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ec0381fa3a628ad0730fb052fc12c536</a></p>",
        "id": 224125466,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707942
    },
    {
        "content": "<p>This is interesting because it doesn't panic?</p>",
        "id": 224125478,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611707952
    },
    {
        "content": "<p>Hmmm.</p>",
        "id": 224125831,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611708239
    },
    {
        "content": "<p>I looked at the backend and there's no obvious reason why it would panic. I'm not actually convinced it is panicking :(</p>",
        "id": 224126044,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708356
    },
    {
        "content": "<p>No wait that's good for now - I only added the tests so that I can get them to pass later.</p>",
        "id": 224126141,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611708426
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>---- ops_impl::isize::isizex8::neg_of_int_min_panics stdout ----\nthread &#39;ops_impl::isize::isizex8::neg_of_int_min_panics&#39; panicked at &#39;attempt to negate with overflow&#39;, /rustc/f4eb5d9f719cd3c849befc8914ad8ce0ddcf34ed/library/core/src/ops/arith.rs:672:1\n</code></pre></div>\n<p>alas</p>",
        "id": 224126146,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708428
    },
    {
        "content": "<p>I just wasn't sure how to trigger the \"please do panic on release\" on my machine.</p>",
        "id": 224126162,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611708447
    },
    {
        "content": "<p>I still think something is somewhat wrong here</p>",
        "id": 224126185,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708468
    },
    {
        "content": "<p>... yeah that's kinda my luck when working with code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 224126244,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611708494
    },
    {
        "content": "<p>I would expect it to never panic, I'm not actually sure what is causing this panic</p>",
        "id": 224126248,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708497
    },
    {
        "content": "<p>And why I can't reproduce it on the playground!</p>",
        "id": 224126281,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708529
    },
    {
        "content": "<p>Oh lol.</p>",
        "id": 224126293,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611708539
    },
    {
        "content": "<p>And why it's even talking about negating!</p>",
        "id": 224126297,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708543
    },
    {
        "content": "<p>oh wait, ha</p>",
        "id": 224126327,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708578
    },
    {
        "content": "<p>looking at your test again</p>",
        "id": 224126334,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708583
    },
    {
        "content": "<p>you are using <code>apply_unary_lanewise</code> which will do both the simd and the scalar op.  it's not the simd op that's panicking here, it's the scalar op</p>",
        "id": 224126416,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708623
    },
    {
        "content": "<p>I would recommend just calling <code>neg</code> directly, since we don't actually care what the result is</p>",
        "id": 224126459,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708664
    },
    {
        "content": "<p>(since it's not producing one)</p>",
        "id": 224126476,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708676
    },
    {
        "content": "<p>Probably something like <code>let _ = -v;</code> would be sufficient</p>",
        "id": 224126638,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611708797
    },
    {
        "content": "<p>OK, that actually makes the tests fails because they are not panicking properly.</p>",
        "id": 224126834,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611708952
    },
    {
        "content": "<p>yup!</p>",
        "id": 224126945,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611709046
    },
    {
        "content": "<p>Yup, and that makes sense because I haven't implemented the branch to check yet.</p>",
        "id": 224127080,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611709155
    },
    {
        "content": "<p>It seems the Rust plugin I have for vim runs the appropriate tests, but not <code>cargo test</code>.<br>\nWhelp, tests seem to work for neg now, pushing to the branch.</p>",
        "id": 224127883,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611709774
    },
    {
        "content": "<p>Uh, what do people use to check out the disassembly / llvm IR that Rust emits? Just wanna make sure the branch check isn't generating monstrous code.</p>",
        "id": 224128321,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611710098
    },
    {
        "content": "<p>Any tips <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> ? Julia spoils me with the REPL + macros.<br>\nDo all the Rust peeps just use godbolt?</p>",
        "id": 224128356,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611710136
    },
    {
        "content": "<p>you can make it do so manually, which is really all Rust does, and you can also use <a href=\"http://play.rust-lang.org\">play.rust-lang.org</a>, but yes, we don't have any REPL.</p>",
        "id": 224128441,
        "sender_full_name": "Jubilee",
        "timestamp": 1611710185
    },
    {
        "content": "<p>The branch is probably going to be not too good until we have some better support for comparisons</p>",
        "id": 224128565,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611710284
    },
    {
        "content": "<p>Specifically a vectorized \"any\"</p>",
        "id": 224128591,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611710317
    },
    {
        "content": "<p>I thought about explicitly doing a lane-to-lane vertical equality comparison with the <code>[$scalar::MIN; LANES]</code> but that still needs a horizontal reduction at some point.</p>",
        "id": 224128767,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611710490
    },
    {
        "content": "<p>The long-term solution will probably be to use single-bit masks, cast it to an integer, and check if it's zero</p>",
        "id": 224128897,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611710602
    },
    {
        "content": "<p>Which at least on intel produces a very efficient horizontal reduction</p>",
        "id": 224128912,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611710618
    },
    {
        "content": "<p>But until we have those masks I think your way is fine</p>",
        "id": 224128972,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611710646
    },
    {
        "content": "<p>... I have yet to wander into ARM/NEON and I have no idea what the tradeoffs are.<br>\nOK, I think I will implement the rest of the cases and bail on performance for now.</p>",
        "id": 224128987,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611710676
    },
    {
        "content": "<p>For efficiency we will have wrapping_neg anyway</p>",
        "id": 224128990,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611710682
    },
    {
        "content": "<p>I saw a comment on <a href=\"https://github.com/rust-lang/rust/issues/54\">#54</a> but don't know why the wrapping is prefereable.</p>",
        "id": 224129134,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611710822
    },
    {
        "content": "<p>I'm not sure either, but that's consistent with the scalar ops</p>",
        "id": 224129173,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611710866
    },
    {
        "content": "<p>Good news for today:</p>\n<ol>\n<li>Tests pass accordingly for the <code>neg(MIN)</code> test matrix</li>\n<li>The tests for the remaining 4 cases seem to panic as they should.</li>\n<li>Test matrix passes on 41 CI systems, except for Travis, which I think is due to their, uh, recent change of policy wrt FOSS.</li>\n</ol>",
        "id": 224134053,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611715741
    },
    {
        "content": "<p>Great news! Yeah I heard about travis and completely forgot.  Perhaps we will need to migrate back to GH Actions with <code>cross</code></p>",
        "id": 224134156,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611715832
    },
    {
        "content": "<p>Great.</p>",
        "id": 224134171,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611715869
    },
    {
        "content": "<p>I guess this means the PR needs to be reviewed, then squashed and merged?</p>",
        "id": 224134180,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611715887
    },
    {
        "content": "<p>I had planned to log that as an issue but I didn't want to be alarmist.</p>",
        "id": 224134194,
        "sender_full_name": "Jubilee",
        "timestamp": 1611715917
    },
    {
        "content": "<p>I checked and it doesn't have to do with that, it's issue <a href=\"https://github.com/rust-lang/stdsimd/issues/51\">https://github.com/rust-lang/stdsimd/issues/51</a> (I think)</p>",
        "id": 224134267,
        "sender_full_name": "Jubilee",
        "timestamp": 1611715996
    },
    {
        "content": "<p>So the Travis failures where only on webassemly builds (5/7 were succesful).</p>",
        "id": 224134272,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611716011
    },
    {
        "content": "<p>Ah, thanks for the catch @jubilee.</p>",
        "id": 224134284,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611716037
    },
    {
        "content": "<p>Ugh the wasm bug is back?  I had found a workaround but forgot what it was.  Something stupid.  One of my recent commits has it.</p>",
        "id": 224134340,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611716082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> whenever you're ready yeah, we'll review it and merge it in</p>",
        "id": 224134355,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611716106
    },
    {
        "content": "<p>It looks like it's not picking up the #[should_panic] annotation properly in wasm.</p>",
        "id": 224134460,
        "sender_full_name": "Jubilee",
        "timestamp": 1611716196
    },
    {
        "content": "<p>I'm ready now if anyone else is. What's the standard operating procedure? Change suggestions on the Github PR and following up the conversation over there?</p>",
        "id": 224134465,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611716202
    },
    {
        "content": "<p>yeah, suggestions on the PR though if it gets confusing we'll just talk here</p>",
        "id": 224134514,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611716261
    },
    {
        "content": "<p>we don't really have a formal policy</p>",
        "id": 224134523,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611716276
    },
    {
        "content": "<p>Cool cool.</p>",
        "id": 224134529,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611716281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> pong</p>",
        "id": 224135038,
        "sender_full_name": "Jubilee",
        "timestamp": 1611716781
    },
    {
        "content": "<p>On it.</p>",
        "id": 224135154,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611716935
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://thumbs.gfycat.com/CriminalKnobbyHind-small.gif\"><img src=\"https://thumbs.gfycat.com/CriminalKnobbyHind-small.gif\"></a></div>",
        "id": 224135181,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611716987
    },
    {
        "content": "<p>I figured it out lol. <a href=\"https://github.com/rust-lang/stdsimd/pull/55/files#r564994539\">https://github.com/rust-lang/stdsimd/pull/55/files#r564994539</a></p>",
        "id": 224135273,
        "sender_full_name": "Jubilee",
        "timestamp": 1611717081
    },
    {
        "content": "<p>OK, I looked and mask128x4 appears to actually work now, so we should close stdsimd/51.</p>",
        "id": 224135954,
        "sender_full_name": "Jubilee",
        "timestamp": 1611717922
    },
    {
        "content": "<p>It only works because of my hack, let me find it</p>",
        "id": 224136023,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611717966
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/macros.rs#L54-L73\">https://github.com/rust-lang/stdsimd/blob/master/crates/core_simd/src/macros.rs#L54-L73</a></p>",
        "id": 224136045,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611717997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> is that something I should add to the PR?</p>",
        "id": 224136081,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611718063
    },
    {
        "content": "<p>Nope, just why that bug is still open</p>",
        "id": 224136151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611718102
    },
    {
        "content": "<p>oh.</p>",
        "id": 224136154,
        "sender_full_name": "Jubilee",
        "timestamp": 1611718106
    },
    {
        "content": "<p>Wasn't there a way for github to let people write their recommended change and teh PR author / a reviewer could click something to accept it and modify the PR?</p>",
        "id": 224136547,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611718556
    },
    {
        "content": "<p>That is a thing but honestly I have no idea how to write a suggestion :)</p>",
        "id": 224136598,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611718590
    },
    {
        "content": "<p>\\```suggestion</p>",
        "id": 224136619,
        "sender_full_name": "Jubilee",
        "timestamp": 1611718631
    },
    {
        "content": "<p>oh, that's easy</p>",
        "id": 224136628,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611718651
    },
    {
        "content": "<p>it's easier than getting zulip to cooperate, I see</p>",
        "id": 224136677,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611718688
    },
    {
        "content": "<p>Yes.<br>\nThere's also a button to click to add it.</p>",
        "id": 224136692,
        "sender_full_name": "Jubilee",
        "timestamp": 1611718705
    },
    {
        "content": "<p>Ugh, I dislike how pushing the changes suggested in a review doesn't pop up a diff from successive commits. Kinda hard to see if the suggestions have been addressed.</p>",
        "id": 224136797,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611718846
    },
    {
        "content": "<p>you mean this diff? <a href=\"https://github.com/rust-lang/stdsimd/pull/55/commits/f334776b764fbbc7c77fde2b3f83f7da26725d67\">https://github.com/rust-lang/stdsimd/pull/55/commits/f334776b764fbbc7c77fde2b3f83f7da26725d67</a></p>",
        "id": 224136826,
        "sender_full_name": "Jubilee",
        "timestamp": 1611718903
    },
    {
        "content": "<p>Yup, that one - but it doesn't have the floating convo with the person + convo who started the suggestion right next to the code</p>",
        "id": 224136907,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611718991
    },
    {
        "content": "<p>Also, what do people mean with the wrapping the SIMD vector, and why is that an ergonomic design? I'm assuming that it's handy to do somehtinkg like <code>result.unwrap(...)</code> and if something in the simd-op went awry you can recover from it that way, but haven't seen it in the codebase yet.</p>",
        "id": 224137020,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719141
    },
    {
        "content": "<p>Ah it's a little confusing, sorry, wrapping in this context means wrapping around from positive to negative integers, or maximum value to 0 for unsigned integers</p>",
        "id": 224137089,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611719204
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.wrapping_add\">https://doc.rust-lang.org/std/primitive.u32.html#method.wrapping_add</a><br>\nlike this function</p>",
        "id": 224137105,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611719242
    },
    {
        "content": "<p>also known as modular arithmetic.</p>",
        "id": 224137168,
        "sender_full_name": "Jubilee",
        "timestamp": 1611719290
    },
    {
        "content": "<p>Oh, <em>that</em> wrapping. Yeah gotcha.</p>",
        "id": 224137169,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719292
    },
    {
        "content": "<p>CS is ... 2 problems... naming things, all that.</p>",
        "id": 224137173,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719307
    },
    {
        "content": "<p>CS is 0 problems, naming things and handling overflow errors.</p>",
        "id": 224137265,
        "sender_full_name": "Jubilee",
        "timestamp": 1611719415
    },
    {
        "content": "<p>Alright - should I wait for others to chime in on the disallowing the wasm tests until tomorrow?<br>\nThe remaining blocker seems to be </p>\n<ol>\n<li>wg consensus on wrapping-behaviour.</li>\n</ol>",
        "id": 224137292,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719474
    },
    {
        "content": "<p>Question for the chat - all of these operations are unlikely to come up when writing normal user safe code right? People have to deliberately reach for this crate and cast to SIMD vectors to use the functions IIUC. That seems to me that people would be willing to undertake the performance vs safety tradeoff that is expected in using SIMD.</p>",
        "id": 224137375,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719580
    },
    {
        "content": "<p>Correct.</p>",
        "id": 224137381,
        "sender_full_name": "Jubilee",
        "timestamp": 1611719594
    },
    {
        "content": "<p>though this crate will hopefully be part of core eventually, it is not a trivial concern regarding every mathematical op Ever. Our concerns basically revolve around how consistent we want to be</p>",
        "id": 224137453,
        "sender_full_name": "Jubilee",
        "timestamp": 1611719668
    },
    {
        "content": "<p>OK - in Julia some SIMD could maybe happen if you wrote compiler friendly loops but the understanding over there is similar to \"checked arithmetic kills FLOP/s, opt into it if you want, otherwise loops go brrr\".</p>",
        "id": 224137457,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719680
    },
    {
        "content": "<p>This library cannot affect autovectorization.</p>",
        "id": 224137487,
        "sender_full_name": "Jubilee",
        "timestamp": 1611719735
    },
    {
        "content": "<p>I think you're fine with the wasm tests.  There's really no workaround for that</p>",
        "id": 224137497,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611719757
    },
    {
        "content": "<p>oooh - that makes a lot more sense. Thanks Jubilee.</p>",
        "id": 224137538,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719766
    },
    {
        "content": "<p>Right, autovec != SIMD intrinsics.</p>",
        "id": 224137545,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611719778
    },
    {
        "content": "<p>Alright, anything else I can work on right now?</p>",
        "id": 224137723,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611720003
    },
    {
        "content": "<p>This is related to autovectorization since it's also best-effort, but it's a little more explicit</p>",
        "id": 224137735,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611720013
    },
    {
        "content": "<p>Y'all are missing craploads of doctests examples. Maybe I could add some of those and learn about some of the lib functions along the way.</p>",
        "id": 224137760,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611720053
    },
    {
        "content": "<p>Sure!<br>\nI should note though that div/rem panic on overflow on release mode also.</p>",
        "id": 224137786,
        "sender_full_name": "Jubilee",
        "timestamp": 1611720093
    },
    {
        "content": "<p>the \"overflow or not?\" concern is literally only re: neg</p>",
        "id": 224137801,
        "sender_full_name": "Jubilee",
        "timestamp": 1611720117
    },
    {
        "content": "<p>Ah gotcha.</p>",
        "id": 224137843,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611720130
    },
    {
        "content": "<p>So, I am splitting the Neg question into its own topic, in essence. Sorry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  <a href=\"https://github.com/rust-lang/stdsimd/issues/56\">https://github.com/rust-lang/stdsimd/issues/56</a></p>",
        "id": 224138111,
        "sender_full_name": "Jubilee",
        "timestamp": 1611720542
    },
    {
        "content": "<p>It's all good - the point is to get the problem right or at least make a good effort.</p>",
        "id": 224138458,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721051
    },
    {
        "content": "<p>I'm guessing that means I should remove the code for <code>neg</code> and just leave the regression tests?</p>",
        "id": 224138526,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721118
    },
    {
        "content": "<p>so about those regression tests.</p>",
        "id": 224138731,
        "sender_full_name": "Jubilee",
        "timestamp": 1611721363
    },
    {
        "content": "<p>F?</p>",
        "id": 224138736,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721377
    },
    {
        "content": "<p>\"apply_binary_scalar_rhs_lanewise\" is doing scalar ops, which of course panic.</p>",
        "id": 224138817,
        "sender_full_name": "Jubilee",
        "timestamp": 1611721466
    },
    {
        "content": "<blockquote>\n<p>process didn't exit successfully: <code>~/projects/stdsimd/target/debug/deps/ops-6770e1bc9a8f6e58</code> (signal: 8, SIGFPE: erroneous arithmetic operation)</p>\n</blockquote>",
        "id": 224138968,
        "sender_full_name": "Jubilee",
        "timestamp": 1611721651
    },
    {
        "content": "<p>Whelp - lemme try and read the code because I just realized those functions are not doing what I think they are doing.</p>",
        "id": 224138990,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721681
    },
    {
        "content": "<p>these regression tests do not regress when the scalar code is removed, so you get to write some actual guards anyways. :^)</p>",
        "id": 224139040,
        "sender_full_name": "Jubilee",
        "timestamp": 1611721703
    },
    {
        "content": "<p>it's basically \"let's do this SIMD op but in a scalar way so we can make sure the scalar and the SIMD versions return the same thing\". But if you do this with an op that panics in scalar code, while waiting for a panic, uh, you get the behavior of rustc.</p>",
        "id": 224139074,
        "sender_full_name": "Jubilee",
        "timestamp": 1611721768
    },
    {
        "content": "<p>OK ok.</p>",
        "id": 224139088,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721788
    },
    {
        "content": "<p>Ohhhhh that's what scalar means here.</p>",
        "id": 224139137,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721804
    },
    {
        "content": "<p>yes! SIMD units are actually vectors, as opposed to scalar values.</p>",
        "id": 224139147,
        "sender_full_name": "Jubilee",
        "timestamp": 1611721817
    },
    {
        "content": "<p>Yeah those functions (<em>apply_foo_lanewise</em>) are missing from <a href=\"https://github.com/rust-lang/stdsimd/blob/master/beginners-guide.md\">https://github.com/rust-lang/stdsimd/blob/master/beginners-guide.md</a> so I wasn't very clear on them.</p>",
        "id": 224139163,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721859
    },
    {
        "content": "<p>I see we don't mention \"scalar\" there for comparison. OK, I was wondering what was most needed in the docs. Thank you~</p>",
        "id": 224139179,
        "sender_full_name": "Jubilee",
        "timestamp": 1611721901
    },
    {
        "content": "<p>Oh right, you take a scalar, and apply an op to every element of the vec, so it is lanewise.</p>",
        "id": 224139186,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611721909
    },
    {
        "content": "<p>OK, I think I got the right operations now.<br>\nHow do I mark some operations as \"not used\" and get the warnings to chill out?</p>",
        "id": 224140064,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611722892
    },
    {
        "content": "<p>How can I get the appropriate SIMDified <code>b</code> here? My Rust-type foo is failing me:</p>\n<div class=\"codehilite\"><pre><span></span><code>            #[test]\n            #[should_panic]\n            fn rem_min_panic() {\n                let a = from_slice(&amp;vec![$scalar::MIN; 64]);\n                let b = from_slice(&amp;vec![-1 ; 64]);\n                a % b;\n            }\n</code></pre></div>",
        "id": 224140316,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611723231
    },
    {
        "content": "<p>Because that gets me your same fun error <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> : </p>\n<div class=\"codehilite\"><pre><span></span><code>error: test failed, to rerun pass &#39;--test ops&#39;\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/mrg/projects/rust/stdsimd/target/debug/deps/ops-cd097366a3944da4 rem_min_panic` (signal: 8, SIGFPE: erroneous arithmetic operation)\n</code></pre></div>",
        "id": 224140369,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611723282
    },
    {
        "content": "<p>(Side note, It's bedtime here, I will read this in the morning. Thanks for all the help, till tomorrow!) <br>\n<span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 224140380,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611723306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> I'm not sure what you mean re: getting things to chill out.</p>\n<p>But that code looks like that is correct, no? You merely need to modify the rem op so that it panics appropriately now.</p>",
        "id": 224141309,
        "sender_full_name": "Jubilee",
        "timestamp": 1611724397
    },
    {
        "content": "<p>rustc warns that <code> a % b</code> is unused.</p>",
        "id": 224141553,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611724727
    },
    {
        "content": "<p>And since it gets blurted out x 20 test cases... I'd like to know how to suppress it - or how to add a dummy expression there.</p>",
        "id": 224141698,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611724912
    },
    {
        "content": "<p>I think you may need <code>let _ = a % b;</code> to indicate the value is unused</p>",
        "id": 224142080,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1611725355
    },
    {
        "content": "<p>Ohhh! Yeah, that.</p>",
        "id": 224142307,
        "sender_full_name": "Jubilee",
        "timestamp": 1611725670
    },
    {
        "content": "<p>It's also totally ok to <code>#[allow(some_lints)]</code> in test code, depending what's best for the code.</p>\n<p>Can also do hybrid things, like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_stuff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224147075,
        "sender_full_name": "scottmcm",
        "timestamp": 1611731745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246783\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/MGR.20opens.20a.20PR!.20(issue.20.2354)/near/224128356\">said</a>:</p>\n<blockquote>\n<p>Any tips <span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> ? Julia spoils me with the REPL + macros.<br>\nDo all the Rust peeps just use godbolt?</p>\n</blockquote>\n<p><a href=\"https://github.com/google/evcxr/\">https://github.com/google/evcxr/</a> is a REPL with both commandline and jupyter notebook support.</p>",
        "id": 224153927,
        "sender_full_name": "bjorn3",
        "timestamp": 1611737637
    },
    {
        "content": "<p>oh, that's cute.</p>",
        "id": 224170792,
        "sender_full_name": "Jubilee",
        "timestamp": 1611748775
    },
    {
        "content": "<p>I use evcxr heavily (and contribute to it some — i added multiline support by writing a hacky rust lexer). but honestly yeah i mostly use it as a calculator, and use <a href=\"http://play.rust-lang.org\">play.rust-lang.org</a> or godbolt for anything larger</p>",
        "id": 224221915,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1611770624
    },
    {
        "content": "<p>OK time for some really Rust noob questions - whyyyyy oh why does Rust have <code>usize, isize</code> besides <code>uint</code> and <code>int</code>?</p>",
        "id": 224240610,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611778330
    },
    {
        "content": "<p>I've never needed this distinction before and they just super confuse me when I can't access arrays without casting stuff randomly into what the compiler asks for.</p>",
        "id": 224240697,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611778376
    },
    {
        "content": "<p>OK found this and am now calming down a bit. <a href=\"https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types\">https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types</a></p>",
        "id": 224240754,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611778419
    },
    {
        "content": "<p>OK defs need some help for this <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> :<br>\nI'm implementing the branch to check that <code>div(MIN, -1)</code> doesn't happen.<br>\nHow do I constrain the macros to only act on <code>int</code> types and not <code>uint</code> types? <br>\nRust is erroring because it rightly points out that <code>-1</code> can't happen in <code>uint</code>.<br>\nI'm guessing I need to write 2 macros for each case, one for <code>int</code> and one for <code>uint</code>.</p>",
        "id": 224241687,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611778850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> usize and isize are the size of a pointer on a given architecture, yes.<br>\nRust's primitives mostly have very sharp specifications on them, unlike C which says \"int is eh whatever, but in practice an i16\".</p>",
        "id": 224242387,
        "sender_full_name": "Jubilee",
        "timestamp": 1611779216
    },
    {
        "content": "<p>this is in <code>core_simd/ops.rs</code>, right?</p>",
        "id": 224242482,
        "sender_full_name": "Jubilee",
        "timestamp": 1611779271
    },
    {
        "content": "<p>OK, so,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">impl_op</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">impl_op</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"cp\">$type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Add</span>::<span class=\"n\">add</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">AddAssign</span>::<span class=\"n\">add_assign</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">simd_add</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">impl_op</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"cp\">$type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Sub</span>::<span class=\"n\">sub</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubAssign</span>::<span class=\"n\">sub_assign</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">simd_sub</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">impl_op</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"cp\">$type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Mul</span>::<span class=\"n\">mul</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MulAssign</span>::<span class=\"n\">mul_assign</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">simd_mul</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Div</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">impl_op</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"cp\">$type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Div</span>::<span class=\"n\">div</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DivAssign</span>::<span class=\"n\">div_assign</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">simd_div</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Rem</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">impl_op</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"cp\">$type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Rem</span>::<span class=\"n\">rem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RemAssign</span>::<span class=\"n\">rem_assign</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">simd_rem</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"c1\">// snip a bunch of code</span>\n\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">impl_ref_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"cp\">$type</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">fn</span> <span class=\"nf\">neg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">Self</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">float</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">impl_ref_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"cp\">$type</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">fn</span> <span class=\"nf\">neg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// FIXME: Replace this with fneg intrinsic once available.</span>\n<span class=\"w\">                    </span><span class=\"c1\">// https://github.com/rust-lang/stdsimd/issues/32</span>\n<span class=\"w\">                    </span><span class=\"bp\">Self</span>::<span class=\"n\">from_bits</span><span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.0</span><span class=\"p\">).</span><span class=\"n\">to_bits</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">to_bits</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So you see here how in this huge macro definition, there is a pattern on the left side,<br>\n<code>{ something something something }</code><br>\nthen the  <code>=&gt;</code> from <code>match</code>?<br>\nthen actual content on the right side? what it expands into, basically.<br>\nAnd you see here how there's _two_ things that both expand into an impl of Neg, right? But one is different.</p>",
        "id": 224243193,
        "sender_full_name": "Jubilee",
        "timestamp": 1611779582
    },
    {
        "content": "<p>Having different signed and unsigned macros is fairly common, <span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span>  -- you can look at the ones in core for the NonZero types, for example.  The other thing you can do is <code>-1 as _</code>, which will work for signed and unsigned.</p>",
        "id": 224243514,
        "sender_full_name": "scottmcm",
        "timestamp": 1611779723
    },
    {
        "content": "<p>To oversimplify it, Rust basically tries to do a <code>match</code> on the tokens you have given, and that's how it can distinguish between when it uses one expansion or another.</p>\n<p>There is also potentially splitting things up and using two different macros, but that will require you to do some footwork elsewhere in the code where the macros are actually used.</p>",
        "id": 224243574,
        "sender_full_name": "Jubilee",
        "timestamp": 1611779759
    },
    {
        "content": "<p>Also, it's pretty normal to not be all that careful about constraining macros, when they're not exported.  For internal macros it's expected that people just will use them correctly -- if you call <code>do_the_simd_stuff!(String)</code> and the expansion blows up horribly, that's fine.</p>",
        "id": 224243728,
        "sender_full_name": "scottmcm",
        "timestamp": 1611779828
    },
    {
        "content": "<p>Yeah, if you make something messy that works, it's fine, if someone somehow finds a way to drag them out into the open and use them that is uhhh very their problem, not ours.</p>",
        "id": 224243890,
        "sender_full_name": "Jubilee",
        "timestamp": 1611779890
    },
    {
        "content": "<p>In this case I don't think <code>-1 as _</code> is correct since there is no <code>MIN / -1</code> special case in unsigned division AFAIK</p>",
        "id": 224255528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611785372
    },
    {
        "content": "<p>Ah, yeah, if it's division-related then usual \"meh whatever\" of 2's complement doesn't apply</p>",
        "id": 224260678,
        "sender_full_name": "scottmcm",
        "timestamp": 1611788130
    },
    {
        "content": "<p>Sorry peeps, meatspace was not kind today. I will try to look into this tomorrow.<br>\nAlso, hi <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> ! I rcognize you from the Lean forums - hope Metamath is coming along swimmingly.<br>\n(Any word on the Lean4 mathlib port? I'm a bit out of the loop.)</p>",
        "id": 224284164,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1611809348
    },
    {
        "content": "<p>Alright, I'm back. @jubilee thanks for your previous posts and codes and comments.<br>\nHere's what I've done so far:</p>\n<ol start=\"0\">\n<li>Brushed up on the \"Too many linked lists\" and a couple projects from the Stanford CS 110L. I wrote a bunch of crappy Rust this weekend but I am a bit less cared from big codebases now.</li>\n<li>I punted on the work stuff I did for <code>neg</code> because of <a href=\"https://github.com/rust-lang/rust/issues/56\">#56</a>, that will be for some other day.</li>\n<li>I tried to implement the special cases for <code>rem</code>, this is my effort so far.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"c1\">// remainder panics on zero divisor</span>\n<span class=\"w\">                </span><span class=\"n\">impl_ref_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Rem</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"cp\">$vector</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">fn</span> <span class=\"nf\">rem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"p\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                               </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"attempt to calculate the remainder with a divisor of zero\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">simd_rem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">impl_ref_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Rem</span><span class=\"o\">&lt;</span><span class=\"cp\">$scalar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"cp\">$vector</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">fn</span> <span class=\"nf\">rem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"cp\">$scalar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"attempt to calculate the remainder with a divisor of zero\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"c1\">// Help! U.U</span>\n<span class=\"w\">                            </span><span class=\"c1\">//let any_min = self.as_slice()</span>\n<span class=\"w\">                                </span><span class=\"c1\">//.iter()</span>\n<span class=\"w\">                                </span><span class=\"c1\">//.any(|x| *x == &lt;$scalar&gt;::MIN);</span>\n<span class=\"w\">                            </span><span class=\"c1\">//if any_min &amp;&amp; rhs == -1 {</span>\n<span class=\"w\">                                </span><span class=\"c1\">//panic!(\"dividing the MIN integer by -1 is undefined\");</span>\n<span class=\"w\">                            </span><span class=\"c1\">//}</span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">simd_rem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">impl_ref_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Rem</span><span class=\"o\">&lt;</span><span class=\"k\">crate</span>::<span class=\"cp\">$vector</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"cp\">$vector</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">fn</span> <span class=\"nf\">rem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">crate</span>::<span class=\"cp\">$vector</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"division by zero is undefined\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">crate</span>::<span class=\"cp\">$vector</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224689120,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612160106
    },
    {
        "content": "<p>OK, I think I made some progress in isolating failures.</p>",
        "id": 224770325,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612204357
    },
    {
        "content": "<p>I just pushed to the branch so if anyone wants to drop a hint as to how to implement the proper guards for <code>div(MIN, -1)</code> and <code>rem(MIN, -1)</code>  I would be very thankful.</p>",
        "id": 224770997,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612204628
    },
    {
        "content": "<p>It may be best to split the macro for signed and unsigned ints.  You could also do something like <code>if scalar::MIN != 0</code> to determine if it's signed but you'd probably need to suppress a warning, not sure how everyone feels about that</p>",
        "id": 224771975,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612205045
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> . I searched your previous suggestion of Nonzero but couldn't find a grep hit in the code.</p>",
        "id": 224772079,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612205088
    },
    {
        "content": "<p>Hmmm I will think about how to split up the macro for un/signed ints.</p>",
        "id": 224772339,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612205190
    },
    {
        "content": "<p>I don't have the code in front of me but I think you can do something similar to @float but with @signed</p>",
        "id": 224772406,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612205228
    },
    {
        "content": "<p>Making it two macros is fine, also.</p>",
        "id": 224801992,
        "sender_full_name": "Jubilee",
        "timestamp": 1612218185
    },
    {
        "content": "<p>Yeah, agreed, that's pretty much the same thing</p>",
        "id": 224802018,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612218209
    },
    {
        "content": "<p>But perhaps easier to follow</p>",
        "id": 224802042,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612218226
    },
    {
        "content": "<p>My head hurts doing this <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 224812573,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612224482
    },
    {
        "content": "<p>I tried adding a static branch of  <code>if $scalar::MIN != 0 { macro1} else {macro2}</code> but the pattern matcher didn't like that.</p>",
        "id": 224812714,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612224599
    },
    {
        "content": "<p>Oh, It's because we have </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">impl_signed_int_ops</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">....</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">impl_unsigned_int_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224813004,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612224833
    },
    {
        "content": "<p>OK I'm calming down a bit an am reading a book on Rust macros to ease the pain with wisdom.<br>\n<a href=\"https://danielkeep.github.io/tlborm/book/pim-README.html\">https://danielkeep.github.io/tlborm/book/pim-README.html</a></p>",
        "id": 224816812,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612227860
    },
    {
        "content": "<p>oh wow <code>@</code> is not a macro only magic infix operator?</p>",
        "id": 224818626,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612229723
    },
    {
        "content": "<p>Nope, it's an operator in patterns.</p>",
        "id": 224819574,
        "sender_full_name": "scottmcm",
        "timestamp": 1612230651
    },
    {
        "content": "<p>nope!</p>",
        "id": 224819575,
        "sender_full_name": "Jubilee",
        "timestamp": 1612230653
    },
    {
        "content": "<p>Oh right, found a nice match destructuring example with <code>@</code>.</p>",
        "id": 224819600,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612230689
    },
    {
        "content": "<p>orz.<br>\nreminder of <a href=\"https://cheats.rs/#macros-attributes\">https://cheats.rs/#macros-attributes</a></p>",
        "id": 224819605,
        "sender_full_name": "Jubilee",
        "timestamp": 1612230691
    },
    {
        "content": "<p>yup, I've been reading that and just finished teh above macro book, and a little snippets here and there.</p>",
        "id": 224819623,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612230718
    },
    {
        "content": "<p>(I mildly felt like this for a <a href=\"http://[image.png](/user_uploads/4715/SkKytah2QXK0-HOfAwdaLYjk/image.png)\">hot second</a></p>",
        "id": 224819684,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612230756
    },
    {
        "content": "<p>Also this: <a href=\"https://doc.rust-lang.org/stable/book/appendix-02-operators.html\">https://doc.rust-lang.org/stable/book/appendix-02-operators.html</a></p>",
        "id": 224819694,
        "sender_full_name": "Jubilee",
        "timestamp": 1612230776
    },
    {
        "content": "<p>Nice.<br>\nSo when</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span>:<span class=\"nc\">ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>:<span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">float</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is used, it is used to restricted the macro so that it doesn't match on arms with a token tree after the <code>$scalar</code>, right?</p>",
        "id": 224819797,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612230885
    },
    {
        "content": "<p>(Which I assume are all the floats, where <code>neg</code> makes no sense</p>",
        "id": 224819809,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612230902
    },
    {
        "content": "<p>Correct.</p>",
        "id": 224819828,
        "sender_full_name": "Jubilee",
        "timestamp": 1612230932
    },
    {
        "content": "<p>Yayyy learnings++</p>",
        "id": 224819836,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612230944
    },
    {
        "content": "<p><code>learnings += 1;</code>, <code>++</code> isn't valid in Rust. :^)</p>",
        "id": 224820104,
        "sender_full_name": "Jubilee",
        "timestamp": 1612231206
    },
    {
        "content": "<p>(I feel this | | close to being acutally prodcutive with this codebase)</p>",
        "id": 224820109,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612231209
    },
    {
        "content": "<p>huzzah!<br>\nalso NonZero{U,I}{8*2^N} came up and I am not entirely sure why because my recall is slightly fuzzy at this precise second, but if you need to reference this, here it is: <a href=\"https://doc.rust-lang.org/std/num/struct.NonZeroU64.html\">https://doc.rust-lang.org/std/num/struct.NonZeroU64.html</a></p>",
        "id": 224820327,
        "sender_full_name": "Jubilee",
        "timestamp": 1612231475
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 224820338,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612231493
    },
    {
        "content": "<p>OK, I don't know what my next strategy is.<br>\nI want to </p>\n<ol>\n<li>write 2 macros that include  proper division guards with div and rem.</li>\n<li>Implement the proper guards.</li>\n</ol>\n<p>I'm at 1, but my options seem to be:<br>\nA. constrian the macro expansion (possibly very hair)<br>\nB. Write 2 macros, one for uints and one for ints.</p>\n<p>I like option B, but that means I have to stop the <code>impl_signed_int_ops</code> into expanding the macros where it shouldn't,  which sounds like the problem with A.<br>\nBut I know the problem with A is that I can't add <code>if ... {}</code> inside a match arm</p>",
        "id": 224820532,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612231778
    },
    {
        "content": "<p>So I'm stuck atm.</p>",
        "id": 224820534,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612231788
    },
    {
        "content": "<p>Why would you have to do the former? We will just not invoke the macro when it is not appropriate.</p>",
        "id": 224820695,
        "sender_full_name": "Jubilee",
        "timestamp": 1612231975
    },
    {
        "content": "<p>By former you mean .... ?</p>",
        "id": 224820718,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612232019
    },
    {
        "content": "<p>Why do you have to constrain the macro expansion so that it does not expand when it shouldn't? We will just not use it when it should not be used.</p>",
        "id": 224820782,
        "sender_full_name": "Jubilee",
        "timestamp": 1612232070
    },
    {
        "content": "<p>You just have to make sure that it expands correctly when used correctly, not that you have to handle \"bad\" cases, because this is a private macro for our usage, not the usage of passerby.</p>",
        "id": 224820883,
        "sender_full_name": "Jubilee",
        "timestamp": 1612232204
    },
    {
        "content": "<p>OK, let me write what I mean a bi tmore precisely.<br>\nlet's say I want to implement the <code>div</code> guards.<br>\nOn the code I'm looking at, that means adding 5 branches to the <code>fn div(...)</code> implementations that are under <code>impl_unsigned_int_ops</code>.</p>\n<p>These are unsigned ints,  so if I try to use <code>if $scalar::MIN !0 {...}</code> inside the <code>fn</code> body, my code errors (because it gets expanded to some cases where <code>rhs == -1</code> and <code>rhs</code> is unsigned.</p>",
        "id": 224821051,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612232407
    },
    {
        "content": "<p>(Also thank you very much to all the people still handholding my Rust adventure, muchas, muchas gracias &lt;3)</p>",
        "id": 224821067,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612232444
    },
    {
        "content": "<p>You can always cheat a bit and put the checks in a <code>if $t::MIN != 0</code> block <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>\n<p>The compiler's really good at optimizing out that kind of thing.</p>",
        "id": 224821136,
        "sender_full_name": "scottmcm",
        "timestamp": 1612232548
    },
    {
        "content": "<p>I tried! But the compiler doesn't propagate that info :(</p>",
        "id": 224821148,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612232579
    },
    {
        "content": "<p>...wait, how?</p>",
        "id": 224821251,
        "sender_full_name": "Jubilee",
        "timestamp": 1612232701
    },
    {
        "content": "<p>Oh wait, * think you might be right*. I was only reaching to the scalar known to the inner macro, but I could reach onto the <code>impl_unsigned_int_ops</code> type.</p>",
        "id": 224821268,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612232722
    },
    {
        "content": "<p>dividing 1u32 by -1i32 is an invalid operation to begin with, because you need to do a type conversion to make it valid.</p>",
        "id": 224821320,
        "sender_full_name": "Jubilee",
        "timestamp": 1612232768
    },
    {
        "content": "<p>And as far as i am concerned as long as it compiles and the code is good, if you delete the entire macros page and then rewrite it, I am happy, so any lesser modification that involves duplicating, omitting certain macros, or w/e, is fine.</p>",
        "id": 224821416,
        "sender_full_name": "Jubilee",
        "timestamp": 1612232885
    },
    {
        "content": "<p>OK, this is the simplest MWE of where I am stuck:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">impl_ref_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">Div</span><span class=\"o\">&lt;</span><span class=\"cp\">$scalar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"cp\">$vector</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                        </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">fn</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"cp\">$scalar</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"attempt to divide by zero\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"cp\">$scalar</span><span class=\"o\">&gt;</span>::<span class=\"n\">MIN</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"dividing MIN by -1 is undefined\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">simd_div</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224821706,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612233242
    },
    {
        "content": "<p>I believe you need <code>rhs == -1 as _</code></p>",
        "id": 224821755,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612233280
    },
    {
        "content": "<p>If I try that I get </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0600</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">unary</span><span class=\"w\"> </span><span class=\"n\">operator</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">-</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"kt\">usize</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">core_simd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">307</span>:<span class=\"mi\">63</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">307</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                               </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"cp\">$scalar</span><span class=\"o\">&gt;</span>::<span class=\"n\">MIN</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                                 </span><span class=\"o\">^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                                 </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                                 </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">apply</span><span class=\"w\"> </span><span class=\"n\">unary</span><span class=\"w\"> </span><span class=\"n\">operator</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">-</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                                 </span><span class=\"n\">help</span>: <span class=\"nc\">you</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">meant</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">maximum</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">usize</span><span class=\"err\">`</span>: <span class=\"err\">`</span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"mi\">540</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">impl_unsigned_int_ops</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">541</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">SimdU8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"mi\">542</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kt\">u16</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">SimdU16</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"mi\">543</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">SimdU32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">546</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">SimdUsize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"mi\">547</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">invocation</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">unsigned</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">negated</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224821757,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612233280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> IDK why it didn't compile last time, but now it does compile!</p>",
        "id": 224821792,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612233355
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 224821799,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612233359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> <code>as _</code> does a trick where it takes -1, and then says \"as whatever this type should be\"</p>",
        "id": 224821985,
        "sender_full_name": "Jubilee",
        "timestamp": 1612233599
    },
    {
        "content": "<p>Yup yup - I tried it a couple of times a few days ago and couldn't please Ferris so I tried other stuff.</p>",
        "id": 224822035,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612233630
    },
    {
        "content": "<p>Anyways, I'm now adding these guards.</p>",
        "id": 224822045,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612233645
    },
    {
        "content": "<p>LOL y'all get to see my most horrible code with iterators now muahahah</p>",
        "id": 224822129,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612233735
    },
    {
        "content": "<p><code>as</code> does an always-valid conversion, which has some surprising consequences (for instance, <code>-1 as u{8,16...}</code> follows two's complement reasoning, so <code>-1 as u8</code> is 0xFF), and <code>_</code> where a type should go creates an explicit request to fill in that type from context.</p>",
        "id": 224822165,
        "sender_full_name": "Jubilee",
        "timestamp": 1612233790
    },
    {
        "content": "<p>Ok, I think it's shaping up well.</p>",
        "id": 224822605,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612234341
    },
    {
        "content": "<p>Question for the chat:<br>\nDoes </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>:<span class=\"nc\">crate</span>::<span class=\"cp\">$vector</span><span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span>::<span class=\"cp\">$vector</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>as well as the <code>div_assign</code>fall back to the implementations of <code>fn div(self, rhs:$scalar)</code>?</p>",
        "id": 224822697,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612234467
    },
    {
        "content": "<p>Hah! Yes it does! And the corresponding tests now pass :D</p>",
        "id": 224822741,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612234540
    },
    {
        "content": "<p>Yes.</p>",
        "id": 224822742,
        "sender_full_name": "Jubilee",
        "timestamp": 1612234543
    },
    {
        "content": "<p>or... well, actually let me be precise, because I think I might be confused. It transforms it into a vector and then attempts to do vector division.</p>",
        "id": 224822818,
        "sender_full_name": "Jubilee",
        "timestamp": 1612234659
    },
    {
        "content": "<p>OK, tests pass locally. Pushing to branch now.</p>",
        "id": 224823002,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612234917
    },
    {
        "content": "<p><span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span> pushed!</p>",
        "id": 224823079,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612234966
    },
    {
        "content": "<p>All green except for Travis!</p>",
        "id": 224823307,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612235225
    },
    {
        "content": "<p>There's a single straggler : AArm64 Linux Xenial. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 224823551,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612235553
    },
    {
        "content": "<p>Alright, ALL PASSED! <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span></p>",
        "id": 224823569,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612235576
    },
    {
        "content": "<p>nice!</p>",
        "id": 224823908,
        "sender_full_name": "Jubilee",
        "timestamp": 1612235954
    },
    {
        "content": "<p>Alright!</p>",
        "id": 224826781,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612238893
    },
    {
        "content": "<p>I feel like I broke GitHub's review interface lol.</p>",
        "id": 224828284,
        "sender_full_name": "Jubilee",
        "timestamp": 1612240769
    },
    {
        "content": "<p>Pong'ed right back at ya.</p>",
        "id": 224828758,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612241370
    },
    {
        "content": "<p>Thanks for the <code>as_slice()</code> recc <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> , there's some other methods that use that and I think I can clean it up in a follow up PR.</p>",
        "id": 224829213,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612241965
    },
    {
        "content": "<p>Oh, I just saw the \"add to batch option on github\". Derp.</p>",
        "id": 224829641,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612242455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> How come your review suggestions I can click on to amend the PR but not <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> 's ? Did she miss a click?</p>",
        "id": 224829713,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612242520
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 224829729,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612242575
    },
    {
        "content": "<p>I only learned how to do them like... this week so no clue</p>",
        "id": 224829782,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612242617
    },
    {
        "content": "<p>I omitted the ```suggestion on purpose, because there were a few different places to fix up and didn't want to add too much weight to a given conclusion.</p>",
        "id": 224829799,
        "sender_full_name": "Jubilee",
        "timestamp": 1612242655
    },
    {
        "content": "<p>That definitely improves quality of life a lot. Thanks!<br>\nDo you click on the <code>+</code> sign next to the code ? or how does it work?</p>",
        "id": 224829801,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612242659
    },
    {
        "content": "<p>I think you can batch apply suggestions if that's what you're concerned about</p>",
        "id": 224829901,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612242759
    },
    {
        "content": "<p>Neat-o.</p>",
        "id": 224829922,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612242802
    },
    {
        "content": "<p>Also the PR can be rebased/squashed. :^)</p>",
        "id": 224829928,
        "sender_full_name": "Jubilee",
        "timestamp": 1612242820
    },
    {
        "content": "<p>Yup - but that's after y'all ahve merged it no?</p>",
        "id": 224829991,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612242860
    },
    {
        "content": "<p>I plan to review git internals tomorrow and learn bisecting and squash merging and rebasing.</p>",
        "id": 224830008,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612242893
    },
    {
        "content": "<p>Wait, but this <code>-1 as _</code> thing is still wrong, I think</p>",
        "id": 224830085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612242968
    },
    {
        "content": "<p>This code block</p>\n<div class=\"codehilite\"><pre><span></span><code>if &lt;$scalar&gt;::MIN != 0  &amp;&amp; rhs == -1 {\n   panic!(&quot;dividing MIN by -1 is undefined&quot;);\n}\n</code></pre></div>\n<p>needs to not exist for unsigned types</p>",
        "id": 224830122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612243015
    },
    {
        "content": "<p>that's what <code>&lt;$scalar&gt;::MIN != 0</code> checks</p>",
        "id": 224830135,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612243033
    },
    {
        "content": "<p>Oh I see. But then the check is wrong because you need to check that the lhs is <code>MIN</code></p>",
        "id": 224830166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612243069
    },
    {
        "content": "<p>Oh wow, you're right</p>",
        "id": 224830213,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612243085
    },
    {
        "content": "<p>.LOL</p>",
        "id": 224830222,
        "sender_full_name": "Jubilee",
        "timestamp": 1612243094
    },
    {
        "content": "<p><code>CRITICAL HIT</code></p>",
        "id": 224830226,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612243105
    },
    {
        "content": "<p>I can't wait until my proptest branch gets merged :)</p>",
        "id": 224830235,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612243128
    },
    {
        "content": "<p>that would have caught it, I think</p>",
        "id": 224830238,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612243134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> Please add a test case explicitly testing that <code>if lhs != T::MIN &amp;&amp; rhs == -1</code> then <code>lhs / -1</code> is　だいじょうぶ.</p>",
        "id": 224830338,
        "sender_full_name": "Jubilee",
        "timestamp": 1612243277
    },
    {
        "content": "<p>I thought I already had a test to catch that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[should_panic]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">div_min_panics</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"cp\">$scalar</span>::<span class=\"n\">MIN</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224830414,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612243405
    },
    {
        "content": "<p>is-not</p>",
        "id": 224830428,
        "sender_full_name": "Jubilee",
        "timestamp": 1612243428
    },
    {
        "content": "<p>as in the reverse, that values that are not T::MIN do <strong>not</strong> panic if divided by -1.</p>",
        "id": 224830477,
        "sender_full_name": "Jubilee",
        "timestamp": 1612243454
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 224830483,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612243470
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">, wasm_bindgen_test)]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">div_min_neg_one_no_panic</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">from_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 224830623,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612243651
    },
    {
        "content": "<p>sounds good to me.</p>",
        "id": 224830634,
        "sender_full_name": "Jubilee",
        "timestamp": 1612243672
    },
    {
        "content": "<p>Added an analogous test for the <code>rem</code> case to the one above.</p>",
        "id": 224831080,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612244269
    },
    {
        "content": "<p>pulled -&gt; rebased -&gt; pushed</p>",
        "id": 224831535,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612244825
    },
    {
        "content": "<p>Looks good to me, <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> you can merge it whenever you're ready</p>",
        "id": 224831643,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612244982
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/Zg7clvqHE3CdW/giphy.gif\"><img src=\"https://media.giphy.com/media/Zg7clvqHE3CdW/giphy.gif\"></a></div>",
        "id": 224832458,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612245948
    },
    {
        "content": "<p>Nice. I'm going to give myself a bit because right now my head hurts and then do a slightly more comprehensive check to make sure the math works OK before merging it, but it should be in tomorrow.</p>",
        "id": 224832857,
        "sender_full_name": "Jubilee",
        "timestamp": 1612246487
    },
    {
        "content": "<p>Awesome - sounds like a great idea to rest as well.<br>\nThanks to <span class=\"user-mention\" data-user-id=\"267402\">@cchndl</span>, <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>  and you <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> .<br>\nThis is my very first Rust ever PR! :D</p>",
        "id": 224832888,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612246558
    },
    {
        "content": "<p>(Also I have a PR ready for when this one lands to clean up the <code>AsRef</code> shenanigans <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> )</p>",
        "id": 224832940,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612246593
    },
    {
        "content": "<p>... So uh, recommendations on new work is welcome. <br>\nPerhaps adding more SIMD intrinsics? <br>\nNot sure why <code>stdsimd</code> needs a <code>crate</code> per <code>intrinsic</code> but OK.</p>",
        "id": 224833009,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612246728
    },
    {
        "content": "<p>Or rather I don't know what <code>pub(crate)</code> means.</p>",
        "id": 224833174,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612246987
    },
    {
        "content": "<p>oh, that's <code>pub</code>lic code with a <code>(crate)</code> restricted scoping.</p>",
        "id": 224833353,
        "sender_full_name": "Jubilee",
        "timestamp": 1612247152
    },
    {
        "content": "<p>Rust restricts all visibility to private by default, so <code>pub</code> is required to make something available elsewhere. In order to make certain visibility concerns less of a headache, <code>crate</code> is a modifier for when you \"need\" it to be \"public to settle internal crate availability, but not actually part of the public API\".</p>",
        "id": 224833520,
        "sender_full_name": "Jubilee",
        "timestamp": 1612247348
    },
    {
        "content": "<p>Ach so. Gotcha.</p>",
        "id": 224833527,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612247367
    },
    {
        "content": "<p>re: pub and crate organization, <a href=\"https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\">https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html</a></p>",
        "id": 224939154,
        "sender_full_name": "Jubilee",
        "timestamp": 1612301233
    },
    {
        "content": "<p>In general I recommend reading the whole book if you haven't!  I had a head start since I know C++ very well but I didn't really consult any references other than the book, it doesn't really make any assumptions about the reader</p>",
        "id": 224941506,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612302316
    },
    {
        "content": "<p>This is actually tiresome for many people who already know computer programming because they feel they have to read it \"cover to cover\" and really it works best if you just treat it like a pile of HTML, which is what it is. Skip around and read the entire thing <em>eventually</em>.</p>",
        "id": 224942395,
        "sender_full_name": "Jubilee",
        "timestamp": 1612302751
    },
    {
        "content": "<p>Yeah true.  I did read it cover to cover despite my experience but you can definitely do that too</p>",
        "id": 224942489,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612302819
    },
    {
        "content": "<p>Only reason I would recommend reading the whole thing is you may find (unusual) things you didn't already know</p>",
        "id": 224942638,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612302872
    },
    {
        "content": "<p>Like the @ operator from earlier, I'm not sure I've ever used it so I probably only know it from the book</p>",
        "id": 224942733,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612302917
    },
    {
        "content": "<p>Yeah, I just mentioned it because 1) I'm ADHD, and 2) I've heard learners complain, \"But I know all this stuff\" re: like the first few chapters.</p>",
        "id": 224943312,
        "sender_full_name": "Jubilee",
        "timestamp": 1612303205
    },
    {
        "content": "<p>Either way good source of info</p>",
        "id": 224943461,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612303278
    },
    {
        "content": "<p>Got it.<br>\nI read it a while ago, I think a second pass with some more experience is warranted.</p>",
        "id": 224946780,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612305018
    },
    {
        "content": "<p>Moment of appreciation for having 2^8 members on this Zulip <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span></p>",
        "id": 224948115,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612305818
    },
    {
        "content": "<p>2⁷ ;)</p>",
        "id": 224949624,
        "sender_full_name": "scottmcm",
        "timestamp": 1612306709
    },
    {
        "content": "<p>Lucky number seven!</p>",
        "id": 224949672,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612306745
    },
    {
        "content": "<p>Alrighty then. I might be off for a while because exams but thank you all for all the love, time and attention. See ya soon! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <br>\nIf you have any other decent intro-level contributions please ping away.</p>",
        "id": 224952176,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612308403
    },
    {
        "content": "<p>...why is i32::MIN % -1 illegal while i32::MIN % 1 is not and the result is the same?</p>",
        "id": 224954720,
        "sender_full_name": "Jubilee",
        "timestamp": 1612310091
    },
    {
        "content": "<p>pardon if this is a stupid question.</p>",
        "id": 224954749,
        "sender_full_name": "Jubilee",
        "timestamp": 1612310108
    },
    {
        "content": "<p>It's not stupid, it's not obvious</p>",
        "id": 224954780,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612310139
    },
    {
        "content": "<p>MIN/-1 overflows</p>",
        "id": 224954856,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612310169
    },
    {
        "content": "<p>% is actually remainder, not modulus</p>",
        "id": 224954879,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612310183
    },
    {
        "content": "<p><em>stares into space</em></p>",
        "id": 224954889,
        "sender_full_name": "Jubilee",
        "timestamp": 1612310196
    },
    {
        "content": "<p>Lol</p>",
        "id": 224954942,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612310232
    },
    {
        "content": "<p>\"A foolish consistency is the hobgoblin of little minds, adored by little statesmen and philosophers and divines.\"  ―Henry David Thoreau</p>",
        "id": 224954998,
        "sender_full_name": "Jubilee",
        "timestamp": 1612310268
    },
    {
        "content": "<p>granted, I suppose I am not much one to talk because it gets under my skin a bit that i32::MIN &gt; (i32::MAX * -1)</p>",
        "id": 224955414,
        "sender_full_name": "Jubilee",
        "timestamp": 1612310521
    },
    {
        "content": "<p>actually <code>i32::MIN &lt; (i32::MAX * -1)</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 224955585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612310614
    },
    {
        "content": "<p>...I think I meant to put the -1 the other way around.</p>",
        "id": 224955654,
        "sender_full_name": "Jubilee",
        "timestamp": 1612310644
    },
    {
        "content": "<p>I clearly need more water and probably either tea or coffee.<br>\nhm.</p>",
        "id": 224955672,
        "sender_full_name": "Jubilee",
        "timestamp": 1612310658
    },
    {
        "content": "<p>If we used one's complement we wouldn't need to branch here!</p>",
        "id": 224955886,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612310772
    },
    {
        "content": "<p>Ah yes, clearly I dream of running Rust on all the 1s' complement computers out there. :^)</p>",
        "id": 224956278,
        "sender_full_name": "Jubilee",
        "timestamp": 1612311079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/MGR.20opens.20a.20PR!.20(issue.20.2354)/near/224954879\">said</a>:</p>\n<blockquote>\n<p>% is actually remainder, not modulus</p>\n</blockquote>\n<p>Uhhh I think I have to change a panic message then</p>",
        "id": 224957018,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612311554
    },
    {
        "content": "<p>I believe you took my suggestion, which changed it</p>",
        "id": 224957139,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1612311625
    },
    {
        "content": "<p>There's a reason I decided to actually merge this AFTER a night's sleep and a chance to actually pull in the tree into a fresh project as a library, you know, how it will actually be used. :^)</p>",
        "id": 224957223,
        "sender_full_name": "Jubilee",
        "timestamp": 1612311696
    },
    {
        "content": "<p>and yes.</p>",
        "id": 224957258,
        "sender_full_name": "Jubilee",
        "timestamp": 1612311715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> I might have changed it back <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 224957302,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612311723
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/reference/tokens.html#punctuation\">https://doc.rust-lang.org/reference/tokens.html#punctuation</a></p>",
        "id": 224957400,
        "sender_full_name": "oliver",
        "timestamp": 1612311792
    },
    {
        "content": "<p>Oh hello <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span></p>",
        "id": 224957415,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612311813
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span> will understand my fury when trying out rust and finding out that <code>2^3 != 8</code> coming from Julialand</p>",
        "id": 224957542,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612311886
    },
    {
        "content": "<p>hehe you've been spoiled</p>",
        "id": 224957732,
        "sender_full_name": "oliver",
        "timestamp": 1612312029
    },
    {
        "content": "<p>fix is on the PR, <span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span></p>",
        "id": 224957868,
        "sender_full_name": "Jubilee",
        "timestamp": 1612312121
    },
    {
        "content": "<p>ugh, you beat me by a second, was about to push :D</p>",
        "id": 224957884,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612312140
    },
    {
        "content": "<p>Big ups to sleeping, world's best debugging tool.</p>",
        "id": 224958100,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612312313
    },
    {
        "content": "<p>No really - there's solid science behind it (courtesy of HIllel Wayne).</p>",
        "id": 224958193,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612312375
    },
    {
        "content": "<p><a href=\"https://twitter.com/IncrementMag/status/1356555465493254144\">https://twitter.com/IncrementMag/status/1356555465493254144</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/IncrementMag/status/1356555465493254144\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/879384470108815360/3-ESXgnG_normal.jpg\"></a><p>“It’s easy to point to a bug and say, ‘This couldn’t have happened in Rust.’ It’s a lot harder to point to a bug and say, ‘This wouldn’t have happened if the programmer wasn’t stressed out and sleep-deprived.’”—<a href=\"https://twitter.com/hillelogram\">@hillelogram</a>\n<a href=\"https://t.co/3RDrKR6AXS\">https://increment.com/teams/the-epistemology-of-software-quality/</a></p><span>- Increment (@IncrementMag)</span></div></div>",
        "id": 224958213,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612312383
    },
    {
        "content": "<p>da</p>",
        "id": 224958378,
        "sender_full_name": "Jubilee",
        "timestamp": 1612312478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> does it also show you in the PR that you are asking for a Review, but doesn't show that review request?</p>",
        "id": 224959017,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612313029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246783\">@Miguel Raz Guzmán Macedo</span> so, re: <code>git rebase</code>, it actually can be performed on a branch with no \"other\" branch involved... it instead takes the branch at a previous point, and then replays the rebased commits atop that previous point. Now, you might wonder, \"why the hell would I do that?\" but a large part of the reason is that it allows you to take, say, 20 commits, and mash them down.</p>",
        "id": 224959309,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313235
    },
    {
        "content": "<p>oh right</p>",
        "id": 224959339,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612313262
    },
    {
        "content": "<p>this requires a force push to a pushed branch, but it is less disruptive to force a single branch (though GitHub can and does lose track of review flows that you force over.</p>",
        "id": 224959413,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313304
    },
    {
        "content": "<p>ok</p>",
        "id": 224959455,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612313364
    },
    {
        "content": "<p>So I can do <br>\n(on the target branch)<br>\n<code>git rebase commit-hash-from-HEAD</code></p>",
        "id": 224959482,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612313400
    },
    {
        "content": "<p>Gosh I need to start reusing git forge in emacs again.</p>",
        "id": 224959550,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612313431
    },
    {
        "content": "<p><code>git rebase -i HEAD~20</code> will walk back 20 commits and open an interactive choice list in whatever editor you've set as your EDITOR with the option to rewrite things into a smaller branch.</p>",
        "id": 224959608,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313482
    },
    {
        "content": "<p>you may wish to make a new branch before doing this</p>",
        "id": 224959624,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313499
    },
    {
        "content": "<p>just so that you can trash that branch after experimenting.</p>",
        "id": 224959643,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313519
    },
    {
        "content": "<p>( doing this isn't a condition of me merging your PR I am just offering you the opportunity to do this now with someone to talk to as you do it. :^). )</p>",
        "id": 224959871,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313678
    },
    {
        "content": "<p>Awesome</p>",
        "id": 224960071,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612313846
    },
    {
        "content": "<p>I tried it in a test branch</p>",
        "id": 224960076,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612313851
    },
    {
        "content": "<p>if you push that up to GH I can just look at it and we can compare them.</p>",
        "id": 224960197,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313941
    },
    {
        "content": "<p>( on the test branch name, I mean. )</p>",
        "id": 224960259,
        "sender_full_name": "Jubilee",
        "timestamp": 1612313997
    },
    {
        "content": "<p>whelp</p>",
        "id": 224960328,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314026
    },
    {
        "content": "<p>oh no, what happened. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 224960379,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314079
    },
    {
        "content": "<p>lol</p>",
        "id": 224960453,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314128
    },
    {
        "content": "<p>I used the <code>force</code> master!</p>",
        "id": 224960462,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314137
    },
    {
        "content": "<p>I can actually see and compare to other branches on your repo on GH, you know. :^)</p>",
        "id": 224960493,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314167
    },
    {
        "content": "<p>Oh right.</p>",
        "id": 224960513,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314188
    },
    {
        "content": "<p>If you are happy with this commit I am happy to merge it, if you would like to try again, I contain vast and sorcerous power. :^)</p>",
        "id": 224960556,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314221
    },
    {
        "content": "<p>Power enough to reverse the irreversible. :^)</p>",
        "id": 224960638,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314295
    },
    {
        "content": "<p>I am happy to merge - IIUC, I did the rebase succesfully.</p>",
        "id": 224960640,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314297
    },
    {
        "content": "<p>Oh lord now THOSE are powers I'd love to learn.</p>",
        "id": 224960654,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314310
    },
    {
        "content": "<p>are you sure? :^)</p>",
        "id": 224960688,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314344
    },
    {
        "content": "<p>type in <code>git reflog</code></p>",
        "id": 224960700,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314354
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 224960788,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314391
    },
    {
        "content": "<p>WHELP</p>",
        "id": 224960791,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314394
    },
    {
        "content": "<p>as you can see, <code>git reflog</code> contains a <code>log</code> of a bunch of <code>ref</code>erences in git to various commit objects.</p>",
        "id": 224960881,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314480
    },
    {
        "content": "<p>(I was using <code>git log --oneline</code> to see if I was remaking the history properly)</p>",
        "id": 224960951,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314517
    },
    {
        "content": "<p>hehe.</p>",
        "id": 224960971,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314530
    },
    {
        "content": "<p>So I had an option of doing something like</p>\n<div class=\"codehilite\"><pre><span></span><code>pick hash1 commit20\nsquash hash2 commit19\n...\nsquash hash20 commit 1\n</code></pre></div>\n<p>So I chose pick for the last one, and 19 squashes.</p>",
        "id": 224961108,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314632
    },
    {
        "content": "<p>you can use <code>git reset HEAD@{number}</code> to go back to somewhere that is still in the reflog.</p>",
        "id": 224961165,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314698
    },
    {
        "content": "<p>Wait<br>\nis that git time traveling?</p>",
        "id": 224961280,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314789
    },
    {
        "content": "<p>yeah.</p>",
        "id": 224961288,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314795
    },
    {
        "content": "<p>for all branches?</p>",
        "id": 224961293,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314801
    },
    {
        "content": "<p>hmm.</p>",
        "id": 224961308,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314816
    },
    {
        "content": "<p>Oh lord - I knew it existed and I've tried <code>reset --hard</code> before but never seen it as clearly as now.</p>",
        "id": 224961315,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314825
    },
    {
        "content": "<p>I am not sure what you are asking by \"for all branches\". :^)</p>",
        "id": 224961333,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314841
    },
    {
        "content": "<p>it's ok.</p>",
        "id": 224961373,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314848
    },
    {
        "content": "<p>OK.</p>",
        "id": 224961383,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314851
    },
    {
        "content": "<p>So my reflog != log</p>",
        "id": 224961410,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314862
    },
    {
        "content": "<p>So the rebase was ... not succesful?</p>",
        "id": 224961430,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314878
    },
    {
        "content": "<p>oh the rebase was successful!</p>",
        "id": 224961457,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314901
    },
    {
        "content": "<p>Or did it clobber the history in a weird way?<br>\nBecause I 1. picked up all the commits I wanted and 2. Made them all into a single commit</p>",
        "id": 224961471,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314909
    },
    {
        "content": "<p>OH LORD thanks</p>",
        "id": 224961475,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314913
    },
    {
        "content": "<p>you just said you wanted infinite cosmic power so I offered a rehearsal of that.</p>",
        "id": 224961481,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314922
    },
    {
        "content": "<p>Oh thanks thanks</p>",
        "id": 224961493,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314930
    },
    {
        "content": "<p>I mean clobbering the history is technically exactly what rebase \"does\".</p>",
        "id": 224961507,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314938
    },
    {
        "content": "<p>(this is cool and I appreciate it, feel free to go on)</p>",
        "id": 224961523,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314951
    },
    {
        "content": "<p>it just is, for this purpose, rewriting the history with... er, the history.</p>",
        "id": 224961586,
        "sender_full_name": "Jubilee",
        "timestamp": 1612314973
    },
    {
        "content": "<p>Also how did you count the git commits so quickly? I would have needed some care and time to count to 20 commits to HEAD</p>",
        "id": 224961595,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612314979
    },
    {
        "content": "<ol start=\"0\">\n<li>I am very used to doing this.</li>\n<li>I looked at the PR's commit count on GitHub.</li>\n</ol>",
        "id": 224961631,
        "sender_full_name": "Jubilee",
        "timestamp": 1612315008
    },
    {
        "content": "<p>aiit aiit cool flex ahhaha</p>",
        "id": 224961666,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612315032
    },
    {
        "content": "<p>Also the entire time I have had the previous version of the branch on my own local so even if you bodged your entire <code>.git</code> somehow, I had that at hand and ready to push back up if you needed it. :^)</p>",
        "id": 224961792,
        "sender_full_name": "Jubilee",
        "timestamp": 1612315124
    },
    {
        "content": "<p>\"Ese apoyo sí se ve &lt;3\"</p>",
        "id": 224961832,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612315156
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> !!!</p>",
        "id": 224962111,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612315330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/MGR.20opens.20a.20PR!.20(issue.20.2354)/near/224960881\">said</a>:</p>\n<blockquote>\n<p>as you can see, <code>git reflog</code> contains a <code>log</code> of a bunch of <code>ref</code>erences in git to various commit objects.</p>\n</blockquote>\n<p><code>git reflog</code> is a great security blanket.  I used to make duplicate branches before I rebased, worried that I was going to mess everything up.  But then I found out that git just keeps around everything I committed in the last 30 days even if I told it I didn't want those things any more :)</p>",
        "id": 224962162,
        "sender_full_name": "scottmcm",
        "timestamp": 1612315372
    },
    {
        "content": "<p>That should have been like within the first 15 mintues of someone teaching git</p>",
        "id": 224962219,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1612315420
    },
    {
        "content": "<p>A lot of people who believe they are very knowledgeable about Git and teach others about using Git do not even know <code>git reflog</code> exists. That, or they think that people will misuse it if it is too early in the early curriculum. Meddling with <code>git reflog</code> can be a... very <code>unsafe</code> operation.<br>\nFor my own part, I do not blame them.<br>\nI simply try to offer a glimpse into the Untempered Schism to others and hope people don't lose <strong>all</strong> their SAN. :^)</p>",
        "id": 224962636,
        "sender_full_name": "Jubilee",
        "timestamp": 1612315765
    },
    {
        "content": "<p>(Aside: That's the best usage of the muscle emoji I've ever seen)</p>",
        "id": 224962651,
        "sender_full_name": "scottmcm",
        "timestamp": 1612315778
    }
]