[
    {
        "content": "<p>I've been reading some of the discussion around (safe) transmuting between different simd types, and is this what's currently the best option for f32x8 -&gt; f32x2 or is there a safe and nice alternative? (to_array -&gt; array_chunk -&gt; from_array is quite cumbersome)</p>\n<div class=\"codehilite\"><pre><span></span><code>unsafe { std::mem::transmute::&lt;f32x8, [f32x2; 4]&gt;(*x) }\n</code></pre></div>\n<p>combined with a <code>flat_map</code> it's a fairly ergonomic way to convert aside from the use of <code>unsafe</code>. Given that the f32x8 is aligned, then each f32x2 should also be aligned on a 64 bit machine?</p>",
        "id": 271756690,
        "sender_full_name": "Joost",
        "timestamp": 1644773972
    },
    {
        "content": "<p>A way to do something similar today would be to use <code>align_to</code> on slices, but that's not quite the same</p>",
        "id": 271756811,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1644774162
    },
    {
        "content": "<p>iirc the canonical method that llvm uses is swizzle...swizzle can have different sizes of inputs and outputs</p>",
        "id": 271757702,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644775513
    },
    {
        "content": "<p>e.g. <code>simd_swizzle!(x, [0, 1])</code> gives you the first 2 lanes of <code>x</code> as <code>Simd&lt;T, 2&gt;</code></p>",
        "id": 271757789,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644775641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"478500\">Joost</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Cast.20lane.20size/near/271756690\">said</a>:</p>\n<blockquote>\n<p>I've been reading some of the discussion around (safe) transmuting between different simd types, and is this what's currently the best option for f32x8 -&gt; f32x2 or is there a safe and nice alternative? (to_array -&gt; array_chunk -&gt; from_array is quite cumbersome)</p>\n<div class=\"codehilite\"><pre><span></span><code>unsafe { std::mem::transmute::&lt;f32x8, [f32x2; 4]&gt;(*x) }\n</code></pre></div>\n<p>combined with a <code>flat_map</code> it's a fairly ergonomic way to convert aside from the use of <code>unsafe</code>. Given that the f32x8 is aligned, then each f32x2 should also be aligned on a 64 bit machine?</p>\n</blockquote>\n<p>The alignment of SIMD vectors does not depend on the normal datapath width.</p>",
        "id": 271759632,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778334
    },
    {
        "content": "<p>However, you should be wary of assuming it is safe to decrease the alignment of a vector below 16. Your example drops from 32 to 8. The example you gave is not UB, per se, but only because if the alignment winds up being borked then the vector may wind up being copied, which can wind up being a performance regression.</p>",
        "id": 271759758,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778523
    },
    {
        "content": "<p>Definitely do <strong>not</strong> combine this with aligned pointer reads.</p>",
        "id": 271759813,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778588
    },
    {
        "content": "<p>uuh...you seem to be confusing casting pointers (where alignment is an issue) with transmuting values (where alignment usually isn't an issue in terms of UB or not)</p>",
        "id": 271759881,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644778684
    },
    {
        "content": "<p>Yes.</p>",
        "id": 271759887,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778690
    },
    {
        "content": "<p>Or rather, no, I am not confusing them, I am aware of the difference.<br>\nI am saying the transmutation is fine,<br>\nbut that... agh.</p>",
        "id": 271759895,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Cast.20lane.20size/near/271759881\">said</a>:</p>\n<blockquote>\n<p>uuh...you seem to be confusing casting pointers (where alignment is an issue) with transmuting values (where alignment usually isn't an issue in terms of UB or not)</p>\n</blockquote>\n<p>A vector should obtain an alignment of 16 according to the x86 ABI, I am saying that an element aligned only to 8 in the x86 ABI that is read into a vector via pointer is a bad idea.</p>",
        "id": 271760003,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778830
    },
    {
        "content": "<p>I am saying there is another step which could be bad.</p>",
        "id": 271760013,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778846
    },
    {
        "content": "<p>well....anyway....if <code>Simd&lt;T, N&gt;</code> is always laid out like <code>[T; N]</code> in memory, then that transmute is fine. i don't know that we guarantee that though. llvm guarantees that, assuming <code>Simd&lt;T, N&gt;</code> is exactly a llvm vector</p>",
        "id": 271760023,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1644778856
    },
    {
        "content": "<p>We haven't exactly decided how we want to handle vectors on x86 which may obtain an alignment below 16. There are lots of possible answers and most of them are annoying to someone. Thus \"the transmutation will handle them correctly regardless of whatever but please don't read those in an <code>unsafe</code> manner because things could get hilarious.\"</p>",
        "id": 271760096,
        "sender_full_name": "Jubilee",
        "timestamp": 1644778950
    },
    {
        "content": "<p>If you want to go from f32x8 to f32x4 (or whatever lane change count) I'd transmute the vector into an array of the smaller vectors, then just index the part you want.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">[</span><span class=\"n\">f32x4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">my_f32x8</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 4*2 == 8</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271765717,
        "sender_full_name": "Lokathor",
        "timestamp": 1644786684
    }
]