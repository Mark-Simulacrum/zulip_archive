[
    {
        "content": "<p>Hello everyone! It's been 2 weeks! Meeting in ~45min.<br>\n<a href=\"https://hackmd.io/bk7HHiZeSaC7r1tnwFtZhA\">https://hackmd.io/bk7HHiZeSaC7r1tnwFtZhA</a></p>",
        "id": 238201030,
        "sender_full_name": "Jubilee",
        "timestamp": 1620676137
    },
    {
        "content": "<p>maybe talk about what all you'd want to see in vector-math for it to be used as the math library for std::simd (and maybe f32::sin in core)</p>",
        "id": 238204848,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620677765
    },
    {
        "content": "<p>Don't we already have a port of musl libm for that? I think there are just other issues preventing it from being the default</p>",
        "id": 238205009,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620677845
    },
    {
        "content": "<p>are you talking about the hypothetical libmvec?</p>",
        "id": 238205922,
        "sender_full_name": "Jubilee",
        "timestamp": 1620678248
    },
    {
        "content": "<p>I am, I think Caleb is talking about scalar functions</p>",
        "id": 238206091,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620678335
    },
    {
        "content": "<p>the hypothetical is becoming reality: <a href=\"https://salsa.debian.org/Kazan-team/vector-math\">https://salsa.debian.org/Kazan-team/vector-math</a></p>",
        "id": 238206359,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620678466
    },
    {
        "content": "<p>Mmm.</p>",
        "id": 238207034,
        "sender_full_name": "Jubilee",
        "timestamp": 1620678729
    },
    {
        "content": "<p>So PR <a href=\"https://github.com/rust-lang/rust/issues/117\">#117</a> <del>implements <code>select</code></del> implements <code>select</code> for masks.<br>\n<span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> You expressed support for using the bitops for this, do those not already work? I haven't sat down and written a bunch of mask-using code since.</p>",
        "id": 238207382,
        "sender_full_name": "Jubilee",
        "timestamp": 1620678846
    },
    {
        "content": "<p>It just adds select specifically on masks</p>",
        "id": 238207491,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620678880
    },
    {
        "content": "<p>Ah yeah sorry. ^^;</p>",
        "id": 238207559,
        "sender_full_name": "Jubilee",
        "timestamp": 1620678909
    },
    {
        "content": "<p>It uses bitops to implement it, though</p>",
        "id": 238207569,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620678915
    },
    {
        "content": "<p>True. Is there a reason we shouldn't tell people to just use <code>mask &amp; true_values | !mask &amp; false_values</code> for it?</p>",
        "id": 238207732,
        "sender_full_name": "Jubilee",
        "timestamp": 1620678979
    },
    {
        "content": "<p>Do we expect that to be common, I guess?</p>",
        "id": 238207780,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> How does the LLVM IR particularly matter here?</p>",
        "id": 238207932,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679071
    },
    {
        "content": "<p>I expect select on masks to generate the llvm ir select instruction for full-masks at least</p>",
        "id": 238207951,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679078
    },
    {
        "content": "<p>for bitmasks, I think it might matter less</p>",
        "id": 238208096,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679123
    },
    {
        "content": "<p>That is a detail we are deliberately trying to avoid exposing to our users tho'. Bitops should optimize however they need to be optimized.</p>",
        "id": 238208161,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679155
    },
    {
        "content": "<p>the LLVM IR matters because <code>select</code> is the instruction known by llvm's optimizers.</p>",
        "id": 238208210,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679188
    },
    {
        "content": "<p>for full masks, why not just call <code>select</code> on the underlying SimdI32 or whatever?</p>",
        "id": 238208340,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679243
    },
    {
        "content": "<p>My point is more of \"select is the best way to implement select\", not \"lets punch a bunch of holes in the abstraction layer\"</p>",
        "id": 238208495,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679313
    },
    {
        "content": "<p>I am aware certain instructions may be favored by LLVM for optimization, but I am also aware that LLVM can pattern match and reconstruct the LLVM IR however it needs to.</p>",
        "id": 238208552,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679327
    },
    {
        "content": "<p>yes, but optimization usually works better when it doesn't have to wait to the \"reencode as select\" pass before it can understand it</p>",
        "id": 238208712,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679412
    },
    {
        "content": "<p>The current PR does not satisfy your request, it merely exposes a function.</p>",
        "id": 238208720,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679419
    },
    {
        "content": "<p>I would like to see something more concrete, I suppose.</p>",
        "id": 238208734,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679425
    },
    {
        "content": "<p>more concrete pr, or more concrete reasoning?</p>",
        "id": 238208841,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679456
    },
    {
        "content": "<p>More concrete examples.</p>",
        "id": 238208858,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679465
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 238208876,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679477
    },
    {
        "content": "<p>I am fairly positive this will optimize correctly since it's nearly a trivial optimization</p>",
        "id": 238208882,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620679479
    },
    {
        "content": "<p>Binary operation optimizations are well understood</p>",
        "id": 238208935,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620679511
    },
    {
        "content": "<p>hmm, well, I guess it doesn't matter that much</p>",
        "id": 238208955,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679518
    },
    {
        "content": "<p>Yeah, I would basically like to see an example of LLVM failing to optimize simple boolean logic correctly.</p>",
        "id": 238208959,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679521
    },
    {
        "content": "<p>because we have problems if so. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 238208992,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679537
    },
    {
        "content": "<p>It also makes the code dramatically simpler since we don't need to then specialize the select implementation on mask implementation</p>",
        "id": 238209014,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620679547
    },
    {
        "content": "<p>i'd have to look at rustc's llvm pass order, but if inlining is done before select conversion, it could not inline due to a function being too big</p>",
        "id": 238209126,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679592
    },
    {
        "content": "<p>in retrospect, it's probably not worth the hassle to specialize it, though I'd expect it to be 15loc or so</p>",
        "id": 238209549,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679772
    },
    {
        "content": "<p>You're telling me we could save a whole 15 loc? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 238209670,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679805
    },
    {
        "content": "<p><span aria-label=\"knife\" class=\"emoji emoji-1f52a\" role=\"img\" title=\"knife\">:knife:</span> <span aria-label=\"knife\" class=\"emoji emoji-1f52a\" role=\"img\" title=\"knife\">:knife:</span> <span aria-label=\"knife\" class=\"emoji emoji-1f52a\" role=\"img\" title=\"knife\">:knife:</span></p>",
        "id": 238209708,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679816
    },
    {
        "content": "<p>I'm not sure if I understand <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>'s comment in <a href=\"https://github.com/rust-lang/stdsimd/issues/114#issuecomment-834669511\">https://github.com/rust-lang/stdsimd/issues/114#issuecomment-834669511</a>. I guess that would be in favor of creating the function and naming it select anyways, and using the boolean internal implementation? Is that your understanding, <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>?</p>",
        "id": 238209860,
        "sender_full_name": "Jubilee",
        "timestamp": 1620679886
    },
    {
        "content": "<p>I'd definitely like to keep the mask code as small as possible wrt the 15loc thing, it's pretty annoying to work with</p>",
        "id": 238210010,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620679948
    },
    {
        "content": "<p>i want as many named ops and as few magic external phrases to know</p>",
        "id": 238210059,
        "sender_full_name": "Lokathor",
        "timestamp": 1620679970
    },
    {
        "content": "<p>I'm all for having a select function, i just no longer think it's worth arguing about how to implement it</p>",
        "id": 238210073,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620679977
    },
    {
        "content": "<p>i also don't care about the internals</p>",
        "id": 238210117,
        "sender_full_name": "Lokathor",
        "timestamp": 1620679997
    },
    {
        "content": "<p>Cool, so we do have consensus on implementing it, and if anyone comes forward with a concrete argument about how we're missing an optimization we'll review our impl.</p>",
        "id": 238210147,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680010
    },
    {
        "content": "<p>Yeah I agree with that sentiment <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>, as long as the function description isn't more confusing than the function itself</p>",
        "id": 238210151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680011
    },
    {
        "content": "<p>Select is straightforward</p>",
        "id": 238210164,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680018
    },
    {
        "content": "<p><em>goes back to gardening</em></p>",
        "id": 238210266,
        "sender_full_name": "Lokathor",
        "timestamp": 1620680051
    },
    {
        "content": "<p>Cool, merging.</p>",
        "id": 238210595,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680171
    },
    {
        "content": "<p>Consensus on scatter/gather seems to be that we should avoid the vector of pointers model <em>for now</em>, instead use a vector of indices (which, not <em>too</em> different, kinda?), and provide safe functions for it. Unless we should use u32 indices, I guess? <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span>?</p>",
        "id": 238211200,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680432
    },
    {
        "content": "<p>tedious detail I realize, but I wasn't entirely sure.</p>",
        "id": 238211373,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680512
    },
    {
        "content": "<p>I think we should provide both vector of pointers and vector of indices, though vector of pointers can definitely be under a different separately-stabilized feature</p>",
        "id": 238211384,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620680515
    },
    {
        "content": "<p>I don't have a particularly strong opinion.  Vector of indices is probably better for our API and as long as we don't use <code>inbounds</code> I don't think provenance matters</p>",
        "id": 238211453,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680534
    },
    {
        "content": "<p>I have a bias against the pointers not because of gather/scatter specifically but because it's a confusing and much larger API</p>",
        "id": 238211525,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680570
    },
    {
        "content": "<p>Mmkay.<br>\nI think we'll get to pointers later, basically.</p>",
        "id": 238211527,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> sounds good, as long as we're not saying <em>no</em> pointers must ever touch our vectors!</p>",
        "id": 238211672,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620680630
    },
    {
        "content": "<p>Just from the algorithmic point of view, where I would use scatter gather, indices are probably easier to work with as well</p>",
        "id": 238211682,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680635
    },
    {
        "content": "<blockquote>\n<ol start=\"2\">\n<li>Are there remaining concerns for nightly? Some possible ones:<br>\n  2a. How do we test that we work on cranelift?<br>\n  2b. We still need to add the rustc stability attributes<br>\n  2c. Are there missing parts of our API?</li>\n</ol>\n</blockquote>",
        "id": 238211845,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680700
    },
    {
        "content": "<p>I don't think we need to work with cranelift to hit nightly initially</p>",
        "id": 238211939,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680737
    },
    {
        "content": "<p>Is there anything we feel we're really missing? It feels like we're wrapping up the basics.</p>",
        "id": 238211983,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680753
    },
    {
        "content": "<p>My opinion is select was the last thing</p>",
        "id": 238212056,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680776
    },
    {
        "content": "<p>as long as we don't break cranelift for people who aren't using std::simd, sounds good</p>",
        "id": 238212103,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620680796
    },
    {
        "content": "<p>We'll probably end up reworking some of the trait bounds etc but not the fundamental API</p>",
        "id": 238212136,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680810
    },
    {
        "content": "<p>Yeah, we have other stuff that we can go back and fill in but it feels like we have enough for someone to really ruin their day with.</p>",
        "id": 238212174,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680831
    },
    {
        "content": "<p>:^)</p>",
        "id": 238212186,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680837
    },
    {
        "content": "<p>We probably should try to focus on adding more documentation.</p>",
        "id": 238212199,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680848
    },
    {
        "content": "<p>vector-math seems like a decent test of std::simd's core api</p>",
        "id": 238212347,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620680905
    },
    {
        "content": "<p>gotta add the rustc stability attributes and land stdsimd as a subtree with compiler/libs help.</p>",
        "id": 238212351,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680908
    },
    {
        "content": "<p>So one thing regarding the stability stuff</p>",
        "id": 238212457,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680958
    },
    {
        "content": "<p>mhm?</p>",
        "id": 238212475,
        "sender_full_name": "Jubilee",
        "timestamp": 1620680965
    },
    {
        "content": "<p>I think perhaps we should include it right now under just a single feature?  We can break it up in the future if we think we aren't going to stabilize it all at once</p>",
        "id": 238212546,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620680996
    },
    {
        "content": "<p>exactly what I was just going to say</p>",
        "id": 238212618,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620681017
    },
    {
        "content": "<p>But I think we're far enough from stabilization that we really have no idea where those lines are going to be drawn</p>",
        "id": 238212632,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681026
    },
    {
        "content": "<p>OK!</p>",
        "id": 238212654,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681030
    },
    {
        "content": "<p>It might turn out we stabilize all at once!</p>",
        "id": 238212681,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681045
    },
    {
        "content": "<p>I also don't think there's anything wrong with potentially breaking our API on nightly occasionally</p>",
        "id": 238212835,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681119
    },
    {
        "content": "<p>It's going on nightly so we can get feedback, but presumably we're going to act on it</p>",
        "id": 238212984,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681148
    },
    {
        "content": "<p>yup! kinda hoping that happens around the hard-to-use generically LanesAtMost32</p>",
        "id": 238213105,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620681173
    },
    {
        "content": "<p>Absolutely not.<br>\nHowever, I made a few PRs where I carved up existing features.<br>\nI found it's easiest to think about if there's a clear sense of directionality: what should go where. Having overly broad flags does not help, using overly specific ones makes it easier to go \"okay, here's what I should leave under this flag\". So in the interest of having a clear \"where to go\" when carving stuff up, which is a concern I noticed, can we land as <code>core_simd_arith</code> and carve stuff out later?</p>",
        "id": 238213167,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681189
    },
    {
        "content": "<p>Yeah, LanesAtMost32 and Mask are traits I'm slightly unsure about atm</p>",
        "id": 238213198,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681196
    },
    {
        "content": "<p>I don't think we should focus on arithmetic, I think we have a lot more in the API at this point</p>",
        "id": 238213369,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681265
    },
    {
        "content": "<p>Notably select and the non-generic shuffles</p>",
        "id": 238213393,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681277
    },
    {
        "content": "<p>Yes, I am saying that using an inaccurately narrow flag is easier than an overly vague flag.</p>",
        "id": 238213449,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681297
    },
    {
        "content": "<p>From the perspective of sectioning it later on.</p>",
        "id": 238213479,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681312
    },
    {
        "content": "<p>I don't think that's true, I think we should make a flag that enables everything</p>",
        "id": 238213515,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681335
    },
    {
        "content": "<p>what about using stdsimd_tbd as the feature name?</p>",
        "id": 238213551,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620681349
    },
    {
        "content": "<p>I am saying that we should have a flag that enables everything, and for the moment it should be <code>core_simd_arith</code>. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 238213568,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681355
    },
    {
        "content": "<p>I should note that removing a feature flag that has been added ever is not a trivial thing.</p>",
        "id": 238213631,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681369
    },
    {
        "content": "<p>Why not just <code>core_simd</code>?</p>",
        "id": 238213667,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681386
    },
    {
        "content": "<p>I think the \"arithmetic\" was throwing me off</p>",
        "id": 238213713,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681415
    },
    {
        "content": "<p>core_simd_base?</p>",
        "id": 238213753,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620681438
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84510\">https://github.com/rust-lang/rust/issues/84510</a></p>",
        "id": 238213761,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681444
    },
    {
        "content": "<p>Because of issues like this one.</p>",
        "id": 238213768,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681451
    },
    {
        "content": "<p>I don't want a name we're going to later decide to <em>not</em> stabilize.</p>",
        "id": 238213793,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681474
    },
    {
        "content": "<p>Well my thought was that would be the name for the initial stabilization</p>",
        "id": 238213863,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681497
    },
    {
        "content": "<p>Then if we have specific things we're holding back we can name them specifically with new features</p>",
        "id": 238213906,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681521
    },
    {
        "content": "<p>Well, that's never been how broad names have actually panned out before, so I don't think we should strategize around that.</p>",
        "id": 238213935,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681537
    },
    {
        "content": "<p>see: const_generics -&gt; min_const_generics</p>",
        "id": 238213952,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681547
    },
    {
        "content": "<p><code>core_simd_generic_shuffle</code></p>",
        "id": 238213973,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681553
    },
    {
        "content": "<p>I think const generics is the only example of that and because it's a language feature</p>",
        "id": 238214017,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681576
    },
    {
        "content": "<p>specialization -&gt; min_specialization. :^)<br>\nconst_fn :^)</p>",
        "id": 238214040,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681591
    },
    {
        "content": "<p>Look at for example <code>is_subnormal</code></p>",
        "id": 238214051,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681600
    },
    {
        "content": "<p>It's a specific feature around a specific function</p>",
        "id": 238214125,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681616
    },
    {
        "content": "<p>yeah.</p>",
        "id": 238214162,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681632
    },
    {
        "content": "<p>I don't think there's anything wrong with somewhat changing the scope of a feature ahead of stabilization</p>",
        "id": 238214240,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681669
    },
    {
        "content": "<p>Like excluding a handful of functions</p>",
        "id": 238214259,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681677
    },
    {
        "content": "<p>I don't think so either?</p>",
        "id": 238214283,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681696
    },
    {
        "content": "<p>I don't expect core::simd to be stabilized piecemeal, I think we'll probably stabilize almost all of it and we can use <code>core_simd</code> for that</p>",
        "id": 238214369,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681728
    },
    {
        "content": "<p>And add a handful of new features for anything weird that we hold back</p>",
        "id": 238214405,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681746
    },
    {
        "content": "<p>core_simd_lanes_at_most_32</p>",
        "id": 238214469,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620681782
    },
    {
        "content": "<p>I'm looking at it that <code>core_simd</code> indicates the existence of a core::simd module, not that the entirety of the module is done</p>",
        "id": 238214490,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681791
    },
    {
        "content": "<p>(it probably never will be)</p>",
        "id": 238214546,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681834
    },
    {
        "content": "<p>OK, so your perspective is, whatever we stabilize first should be named core_simd, because it adds the module, even if there's <em>one</em> function and <em>one</em> type in it, correct?</p>",
        "id": 238214618,
        "sender_full_name": "Jubilee",
        "timestamp": 1620681860
    },
    {
        "content": "<p>Well, I think it's unlikely that we would do that, but yeah</p>",
        "id": 238214768,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681931
    },
    {
        "content": "<p>I think if we stabilized every vector type with only std::ops implementations that's what it should be called (though I imagine we'd have more than that)</p>",
        "id": 238214863,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620681972
    },
    {
        "content": "<p>I think the mistake with const generics was that _so many_ crates relied on it on nightly and the implementation is complicated enough that they didn't want to break everything by changing the scope of the feature</p>",
        "id": 238215075,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682087
    },
    {
        "content": "<p>I expect we will have as many dependents, possibly more.</p>",
        "id": 238215106,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682104
    },
    {
        "content": "<p>I don't think so, but even if we do, I think the number that use features we don't stabilize right away will be much smaller</p>",
        "id": 238215201,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682159
    },
    {
        "content": "<p>can rustc be told that a feature is an alias for a group of other features? then core_simd could be converted to such an alias, preventing breakage</p>",
        "id": 238215347,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620682219
    },
    {
        "content": "<p>Honestly I don't think we've run into anything other than the generic shuffles that can't or shouldn't be stabilized right away</p>",
        "id": 238215364,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> well the feature would just enable the module so it would be pretty easy to enable it on both features, even if it's not strictly an alias</p>",
        "id": 238215496,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682298
    },
    {
        "content": "<p>so, wait, you can have two <code>#[unstable(...)]</code> on the same item?!</p>",
        "id": 238215599,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620682352
    },
    {
        "content": "<p>So here's my perspective as to why we should name it <code>core_simd_arith</code>:</p>\n<ol start=\"0\">\n<li>It becomes easier to know what should be moved out of <code>core_simd_arith</code> into other feature flags, because it becomes automatic: if it's not <code>core_simd_arith</code>, it can of course just be named something else and moved into a new feature flag. Again, this sort of making-future-decisions-about-sectioning-easier is my main reason.</li>\n<li>It's better to under-promise and over-deliver. I don't want to have to explain to someone, \"yeah, we stabilized <code>core_simd</code> but... only a few things...?\" I'd rather say \"yeah, we stabilized <code>core_simd_arith</code>metic and all this other stuff!\"</li>\n<li>The<code> const_generics</code> and nightly dependency thing is a real issue still.</li>\n<li>This is kinda just 0 again, but I should note that uncertainty about how to section things had delayed me by <strong>literal months</strong> on how to do something, because I could not consciously vocalize what my issue was. I have practice now, but it's actually quite nontrivial, and this is actually a recurring concern with everyone else, specialization, const fn (no, const fn is not const generics), not just const generics. I know it <em>seems</em> trivial, but it's actually a weirdly big issue.</li>\n</ol>",
        "id": 238215874,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682499
    },
    {
        "content": "<p>Unless, of course, I don't ever have to do any of the landing, feature, and stabilization PRs. Then of course I will bow out, because the oddities of my brain don't matter nearly as much. :^)</p>",
        "id": 238216031,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682573
    },
    {
        "content": "<p>I still just don't like that we are containing things that aren't arithmetic in something named arithmetic</p>",
        "id": 238216136,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682648
    },
    {
        "content": "<p>I think that's significantly more confusing</p>",
        "id": 238216151,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682656
    },
    {
        "content": "<p>I don't actually see how naming it something else solves any of those issues</p>",
        "id": 238216362,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682788
    },
    {
        "content": "<p>We will just end up with people using generic shuffle from the <code>core_simd_arith</code> feature and still need to add a separate feature for that</p>",
        "id": 238216495,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682836
    },
    {
        "content": "<p>add a separate feature for what?</p>",
        "id": 238216529,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682860
    },
    {
        "content": "<p>generic shuffle</p>",
        "id": 238216554,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620682872
    },
    {
        "content": "<p>Later stabilization of something like generic shuffles, hypothetically</p>",
        "id": 238216560,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682878
    },
    {
        "content": "<p>sure?<br>\nI am not proposing not breaking people on nightly?<br>\n0 is the big issue, again.</p>",
        "id": 238216593,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682903
    },
    {
        "content": "<p>so big I mentioned it twice.</p>",
        "id": 238216607,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682911
    },
    {
        "content": "<ol start=\"0\">\n<li>is because everything is part of <code>core_simd</code> notionally so there's no automatic notion of what should be subdivided out into an additional thing.</li>\n</ol>",
        "id": 238216659,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682926
    },
    {
        "content": "<p>I just don't understand why we shouldn't call it <code>core_simd</code></p>",
        "id": 238216694,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682943
    },
    {
        "content": "<p>core_simd_base!</p>",
        "id": 238216706,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620682951
    },
    {
        "content": "<p>the idea that it should be \"whatever is stabilized first\" is not apparent.</p>",
        "id": 238216707,
        "sender_full_name": "Jubilee",
        "timestamp": 1620682951
    },
    {
        "content": "<p><code>core_simd_base</code> isn't bad, I think it's more descriptive at least</p>",
        "id": 238216752,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620682988
    },
    {
        "content": "<p>You cannot choose to not mislead people.<br>\nYou can choose to mislead people in a specific direction. :^)</p>",
        "id": 238216775,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683004
    },
    {
        "content": "<p>core_simd_initial_stuff?</p>",
        "id": 238216792,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620683016
    },
    {
        "content": "<p>I think it's very unlikely that we will only stabilize arithmetic first</p>",
        "id": 238216814,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683029
    },
    {
        "content": "<p>At a minimum I think we will also have select and comparisons</p>",
        "id": 238216902,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683057
    },
    {
        "content": "<p>and to that I point at 1. :^)</p>",
        "id": 238216909,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683067
    },
    {
        "content": "<p>everyone else will have their own ideas about what \"base\" means.</p>",
        "id": 238216938,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683095
    },
    {
        "content": "<p>Isn't the whole point here that you don't like that there is both <code>min_const_generics</code> and <code>const_generics</code>? I think I that's significantly more descriptive than something <code>core_simd_arith</code> containing significantly more than arithmetic</p>",
        "id": 238217033,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683148
    },
    {
        "content": "<p>we'll probably want to eventually add masked div/rem where division by zero isn't UB/doesn't panic for disabled lanes</p>",
        "id": 238217043,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620683154
    },
    {
        "content": "<p>I have had to explain why simple const expressions don't work for <code>min_const_generics</code> a lot.</p>",
        "id": 238217218,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683252
    },
    {
        "content": "<p>So my experience is that it's not actually more descriptive based on what users say.</p>",
        "id": 238217280,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683284
    },
    {
        "content": "<p>Right but we aren't developing a language feature</p>",
        "id": 238217411,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683363
    },
    {
        "content": "<p>Right but we aren't developing a language feature</p>",
        "id": 238217414,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683366
    },
    {
        "content": "<p>The docs will indicate which feature is required for that function</p>",
        "id": 238217429,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683380
    },
    {
        "content": "<p>I believe in good documentation but tbh 80% of our users are not going to read it.</p>",
        "id": 238217513,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683413
    },
    {
        "content": "<p>and it will be weird when <code>core_simd_arith</code> is required to get <code>select</code></p>",
        "id": 238217527,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683422
    },
    {
        "content": "<p>they're just gonna throw stuff at the wall, get yelled at by the compiler to add a feature gate, and move on.</p>",
        "id": 238217565,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683436
    },
    {
        "content": "<p>I just don't see the reason to put arithmetic in the name at all, it seems arbitrary</p>",
        "id": 238217653,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683498
    },
    {
        "content": "<p>The existence of a simd type isn't arithmetic</p>",
        "id": 238217672,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683515
    },
    {
        "content": "<p>Expectation management. :^)<br>\nBut you are correct, it is largely arbitrary.<br>\nIt is the amount that I predict we will always stabilize first.</p>",
        "id": 238217748,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683546
    },
    {
        "content": "<p>Well I think the minimum we stabilize first will be the types, which isn't arithmetic</p>",
        "id": 238217780,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683578
    },
    {
        "content": "<p>And with the types we'll stabilize std::ops::Add, which is arithmetic. :^)</p>",
        "id": 238217799,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683596
    },
    {
        "content": "<p>and BitAnd, which isn't arithmetic</p>",
        "id": 238217827,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620683624
    },
    {
        "content": "<p>What do you mean, it's the product of the bits. :^)</p>",
        "id": 238217894,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683647
    },
    {
        "content": "<p>There's going to be an announcement post when it's stabilized, would it make sense to regular people who haven't seen it on nightly for it to say <code>core_simd</code> is stabilized, of <code>core_simd_arith</code>?</p>",
        "id": 238217919,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683659
    },
    {
        "content": "<p>The feature we're gating is the module</p>",
        "id": 238217960,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683682
    },
    {
        "content": "<p>based on the reaction to <code>min_const_generics</code>, people assumed that all sorts of shit got stabilized with <code>min_const_generics</code>.</p>",
        "id": 238217993,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683702
    },
    {
        "content": "<p>which is why I am more amenable to <code>core_simd_base</code>, but</p>",
        "id": 238218133,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683766
    },
    {
        "content": "<p>I have to note we can't actually know what those assumptions are going to be.</p>",
        "id": 238218138,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683771
    },
    {
        "content": "<p>Well I will repeat that it's a language feature, but we aren't a language feature, we're stabilizing a module</p>",
        "id": 238218162,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683787
    },
    {
        "content": "<p>From the external user perspective there's no difference.</p>",
        "id": 238218186,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683807
    },
    {
        "content": "<p>You can go to the rust std docs to see what got stabilized</p>",
        "id": 238218195,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683816
    },
    {
        "content": "<p>...yeah but they don't read the docs.</p>",
        "id": 238218211,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683823
    },
    {
        "content": "<p>I do...</p>",
        "id": 238218228,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620683831
    },
    {
        "content": "<p>You're in this madhouse with us. :^)</p>",
        "id": 238218235,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683840
    },
    {
        "content": "<p>XD</p>",
        "id": 238218241,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620683846
    },
    {
        "content": "<p>I honestly haven't run into this hypothetical user who never reads docs and made assumptions about min_const_generics</p>",
        "id": 238218270,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683869
    },
    {
        "content": "<p>I answer questions about Rust as a hobby.</p>",
        "id": 238218285,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683881
    },
    {
        "content": "<p>I don't think that's the same person</p>",
        "id": 238218327,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683885
    },
    {
        "content": "<p>So I do it for like 5 to 20 hours a week.</p>",
        "id": 238218355,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683898
    },
    {
        "content": "<p>basically every week.</p>",
        "id": 238218359,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683902
    },
    {
        "content": "<p>And I field a question about SIMD libs at a steadily intensifying rate, it's above 2/week at this point.</p>",
        "id": 238218415,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683946
    },
    {
        "content": "<p>I don't think we are doing anyone any favors by choosing an intentionally wrong feature name</p>",
        "id": 238218436,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620683958
    },
    {
        "content": "<p>All names are wrong, but some are valuable. :^)</p>",
        "id": 238218459,
        "sender_full_name": "Jubilee",
        "timestamp": 1620683980
    },
    {
        "content": "<p>Fundamentally we are stabilizing the <code>core::simd</code> module, our charter is to stabilize the <code>core::simd</code> module, and that's the first thing we're going to do, I don't really have any argument beyond that</p>",
        "id": 238218648,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684057
    },
    {
        "content": "<p>reminds me of \"there are 2 hard parts in programming: memory, naming, and off-by-one errors\"</p>",
        "id": 238218653,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684058
    },
    {
        "content": "<p>Anyways,<br>\n<code>core_simd_base</code> is fine, and at least lends the directional attribute which is my main concern.<br>\nWe'll worry about the rest later.</p>",
        "id": 238218672,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684067
    },
    {
        "content": "<p>sounds good to me!</p>",
        "id": 238218726,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684108
    },
    {
        "content": "<p>Because in 2022 if everyone here gets hit by a bus, and someone comes by and figures \"we should divide this up and stabilize some part\", it should be obvious that they should add new <code>core_simd_${name}</code> flags and then stabilize <code>_base</code>.</p>",
        "id": 238218891,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684188
    },
    {
        "content": "<p>Even if we don't document anything else.</p>",
        "id": 238218977,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684237
    },
    {
        "content": "<p>Which we should, ideally.</p>",
        "id": 238218981,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684242
    },
    {
        "content": "<p>circumnavigating buses...</p>",
        "id": 238218987,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684243
    },
    {
        "content": "<p>Isn't that implicit? There are new functions added to std all the time</p>",
        "id": 238219029,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684253
    },
    {
        "content": "<p>It was not to me. :^)</p>",
        "id": 238219062,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684271
    },
    {
        "content": "<p>when I worked on several feature stabilization PRs. :^)</p>",
        "id": 238219076,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684281
    },
    {
        "content": "<p>Hmm well my thought is if you look at the list of unstable features, their names are exactly the name of the feature</p>",
        "id": 238219108,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684304
    },
    {
        "content": "<p>leave comments on the std::simd module?</p>",
        "id": 238219130,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684318
    },
    {
        "content": "<p>Yeah, I'm gonna shove a bunch of comments in as I go.</p>",
        "id": 238219151,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684332
    },
    {
        "content": "<p><code>f32:s_subnormal</code> is <code>is_subnormal</code>, <code>doc(cfg)</code> is <code>doc_cfg</code>, I think breaking that convention is more confusing</p>",
        "id": 238219238,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684365
    },
    {
        "content": "<p>well, simd_arch isn't that way...</p>",
        "id": 238219450,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684486
    },
    {
        "content": "<p>simd_arch is core::arch</p>",
        "id": 238219510,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684525
    },
    {
        "content": "<p>yeah there's actually issues open to rearrange the other simd/arch feature flags that never got addressed.</p>",
        "id": 238219590,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684563
    },
    {
        "content": "<p>Yeah a few things don't follow that convention, and they're the confusing ones! That's my point!</p>",
        "id": 238219751,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684658
    },
    {
        "content": "<p>I don't think we should make the assumption that we will be like <code>const_generics</code> when it was just one of dozens of features to have that issue, and it's not even that particularly big of an issue</p>",
        "id": 238219869,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684720
    },
    {
        "content": "<p>core_simd_base seems less confusing to me</p>",
        "id": 238219893,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684724
    },
    {
        "content": "<p>Yeah, I still think base is more confusing than just saying <code>core_simd</code>, but it's better</p>",
        "id": 238219971,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684761
    },
    {
        "content": "<p>core_simd_mod?</p>",
        "id": 238220045,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620684822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/257879-project-portable-simd/topic/Meeting.202021-05-10/near/238219869\">said</a>:</p>\n<blockquote>\n<p>I don't think we should make the assumption that we will be like <code>const_generics</code> when it was just one of dozens of features to have that issue, and it's not even that particularly big of an issue</p>\n</blockquote>\n<p>I think the safe assumption is actually that none of us will be here for stabilizing this feature, our documentation will be unfinished, our implicit assumptions never written down, the psychology of our successors alien to us.</p>",
        "id": 238220155,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684885
    },
    {
        "content": "<p>because that is what has been the case for every other group which has tried to do this.</p>",
        "id": 238220228,
        "sender_full_name": "Jubilee",
        "timestamp": 1620684923
    },
    {
        "content": "<p>Sure, but language isn't!  If our successors don't speak English very well <code>core_simd_arith</code> is probably exceptionally misleading</p>",
        "id": 238220277,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684958
    },
    {
        "content": "<p>(and even if they do, it's probably pretty misleading)</p>",
        "id": 238220345,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620684987
    },
    {
        "content": "<p><code>core_simd_mod</code> sounds pretty good to me, it's descriptive and not wrong in any way</p>",
        "id": 238220381,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620685025
    },
    {
        "content": "<p>A good point. I will cheerfully relent to that. :^)</p>",
        "id": 238220488,
        "sender_full_name": "Jubilee",
        "timestamp": 1620685098
    },
    {
        "content": "<p>Thank you for being so patient with discussing this, I know my perspective is slightly frustrating, I just am not sure how I am best off communicating the seeming alienness of my <em>own</em> perspective.</p>",
        "id": 238220876,
        "sender_full_name": "Jubilee",
        "timestamp": 1620685327
    },
    {
        "content": "<p>np</p>",
        "id": 238220908,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620685350
    },
    {
        "content": "<p>I'm probably in a similar boat</p>",
        "id": 238220956,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620685393
    },
    {
        "content": "<p>I think we narrowed it down to something we're probably all okay with</p>",
        "id": 238221065,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620685456
    },
    {
        "content": "<p>So a success</p>",
        "id": 238221088,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620685470
    },
    {
        "content": "<p>For: <code>2c. Are there missing parts of our API?</code>, I'd say yes, but we can stabilize initial stuff first and find out what's missing as we go</p>",
        "id": 238221492,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620685718
    },
    {
        "content": "<p>we also need to take everything we've learned so far and start writing it into an RFC form</p>",
        "id": 238221721,
        "sender_full_name": "Jubilee",
        "timestamp": 1620685864
    },
    {
        "content": "<p>I guess next is libmvec...</p>",
        "id": 238222394,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686222
    },
    {
        "content": "<p>Lol</p>",
        "id": 238222414,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620686241
    },
    {
        "content": "<p>I think our biggest question will be how to move forward with LLVM.  I can ask llvm-wg how to proceed with coordinating that?</p>",
        "id": 238222521,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620686293
    },
    {
        "content": "<p>I've started writing an implementation over here: <a href=\"https://salsa.debian.org/Kazan-team/vector-math\">https://salsa.debian.org/Kazan-team/vector-math</a></p>",
        "id": 238222546,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686308
    },
    {
        "content": "<p>I'm thinking I could look at getting the llvm bits wired up, they look simple enough from 10000ft...</p>",
        "id": 238222619,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686362
    },
    {
        "content": "<p>such that llvm would use our math lib for vector functions</p>",
        "id": 238222655,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686392
    },
    {
        "content": "<p>I've so far implemented ilogb for f16, f32, and f64 and sin_cos_pi for f16 and f32</p>",
        "id": 238222791,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686462
    },
    {
        "content": "<p>Sure, asking wg-llvm sounds good.</p>",
        "id": 238222952,
        "sender_full_name": "Jubilee",
        "timestamp": 1620686547
    },
    {
        "content": "<p>even just \"hey have you heard of this? :D\"</p>",
        "id": 238222972,
        "sender_full_name": "Jubilee",
        "timestamp": 1620686556
    },
    {
        "content": "<p>I would probably need to add extern \"C\" wrappers for the Rust functions...</p>",
        "id": 238223064,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686623
    },
    {
        "content": "<p>We should probably implement some kind of <code>{to,from}_ne_bytes</code> transmute.</p>",
        "id": 238223078,
        "sender_full_name": "Jubilee",
        "timestamp": 1620686635
    },
    {
        "content": "<p>The problem with llvm is first of all it only supports like 3 vector lib fns and we need a bunch more, also it's a question of should we spoof another library's API or should we add our own to llvm</p>",
        "id": 238223204,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620686712
    },
    {
        "content": "<p>I think we should add our own, it can live in the rust-llvm interface c++ until upstreamed to llvm</p>",
        "id": 238223409,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686809
    },
    {
        "content": "<p>Well it's not that simple, llvm generates calls to the library so it needs to know the symbol names</p>",
        "id": 238223488,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620686852
    },
    {
        "content": "<p>yes, hence why I was adding the extern \"C\" wrapper fns mentioned above</p>",
        "id": 238223616,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620686942
    },
    {
        "content": "<p>so we'd end up with something like rust_vector_math_sin_f32x4</p>",
        "id": 238223718,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687005
    },
    {
        "content": "<p>those would live in core via a subtree</p>",
        "id": 238223782,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687062
    },
    {
        "content": "<p>or some other suitable crate</p>",
        "id": 238223808,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687091
    },
    {
        "content": "<p>I think we'd want to figure out exactly how it all works, it seems to be connected to llvm::TargetLibraryInfo::getVectorizedFunction</p>",
        "id": 238224238,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687376
    },
    {
        "content": "<p>\"someone please add a full problem statement of the libmvec thing somewhere\": vector math functions are not widely available and can't be used from core due to needing the external library, therefore we build a math lib for Rust that can be used everywhere and doesn't require external dependencies allowing it to be used in core</p>",
        "id": 238224643,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687653
    },
    {
        "content": "<p>so: SimdF32::sin() would then work everywhere SimdF32 works</p>",
        "id": 238224754,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687703
    },
    {
        "content": "<p>including webassembly, microcontrollers, etc</p>",
        "id": 238224836,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687730
    },
    {
        "content": "<p>also, it would be faster than just calling f32::sin a bunch of times</p>",
        "id": 238224884,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687771
    },
    {
        "content": "<p>the reason we go through all the hassle of getting llvm to generate calls to our library is then because it can instead generate the native sin instruction where supported, leaving it up to lllvm is by far the best option since it can do const-propagation, optimization, and is the best spot to make target-specific decisions</p>",
        "id": 238225207,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620687994
    },
    {
        "content": "<p>hopefully that's a good enough explanation for now</p>",
        "id": 238225263,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620688041
    },
    {
        "content": "<p>I think that sums it up, maybe we want to formalize it somewhere</p>",
        "id": 238225284,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620688060
    },
    {
        "content": "<p>\"but also we need to teach llvm to recognize the symbol names\"</p>",
        "id": 238225320,
        "sender_full_name": "Jubilee",
        "timestamp": 1620688084
    },
    {
        "content": "<p>yup, that's part of the hassle of getting llvm to call our vector math lib</p>",
        "id": 238225381,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620688121
    },
    {
        "content": "<p>we'd probably do that by creating another implementation of the <a href=\"https://llvm.org/doxygen/classllvm_1_1TargetLibraryInfo.html\">https://llvm.org/doxygen/classllvm_1_1TargetLibraryInfo.html</a> class</p>",
        "id": 238225505,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620688205
    },
    {
        "content": "<p>It will also involve expanding the functions LLVM supports for vector libs</p>",
        "id": 238225549,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620688236
    },
    {
        "content": "<p>so, should I remove the \"potentially\" from <a href=\"https://github.com/rust-lang/stdsimd/issues/109\">stdsimd#109</a> and assume we want this at this time?</p>",
        "id": 238226566,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620688900
    },
    {
        "content": "<p>I think there's still a lot of open questions</p>",
        "id": 238226646,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620688965
    },
    {
        "content": "<p>yeah, but it's at least more than just me who wants it?</p>",
        "id": 238226694,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620689025
    },
    {
        "content": "<p>I think rust will want a rust implementation and if it happens to be a shared implementation that's great, but unrelated to the API etc</p>",
        "id": 238226746,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620689045
    },
    {
        "content": "<p>I meant morph <a href=\"https://github.com/rust-lang/stdsimd/issues/109\">stdsimd#109</a> into a top-level bug for building a vector math lib</p>",
        "id": 238227077,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1620689309
    },
    {
        "content": "<p>Oh sure</p>",
        "id": 238227094,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1620689327
    },
    {
        "content": "<p>okay, okay, we'll just do the MCU thing</p>",
        "id": 238235560,
        "sender_full_name": "Lokathor",
        "timestamp": 1620694762
    },
    {
        "content": "<p><code>core_simd_phase1</code>, <code>core_simd_avengers</code>, <code>core_simd_phase2</code>, <code>guardians_of_the_core_simd</code>, etc</p>",
        "id": 238235626,
        "sender_full_name": "Lokathor",
        "timestamp": 1620694804
    },
    {
        "content": "<p>if you can't match people's expectations, just don't let them expect anything and then they <em>have</em> to read your docs</p>",
        "id": 238235689,
        "sender_full_name": "Lokathor",
        "timestamp": 1620694842
    },
    {
        "content": "<p><code>simd_os_lion</code>, <code>simd_os_jaguar</code>, ...</p>",
        "id": 238236486,
        "sender_full_name": "scottmcm",
        "timestamp": 1620695506
    }
]