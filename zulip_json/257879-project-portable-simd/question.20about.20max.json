[
    {
        "content": "<p>Hi All, I'm Kai</p>\n<p>I hope i'm in the right place here, if not, please tell me so (new to zulip AND simd unfortunately)  <br>\nI tried to do the following</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u32x4</span>::<span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u32x4</span>::<span class=\"n\">from_array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"max: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and expected [2, 2, 2, 3] but got [0, 1, 2, 3] since max looks to be simply derived from core::cmp::Ord  </p>\n<p>Now my question is since to me (as an absolute noob in this area) this was really unexpected behavior: is this intenintional/somehow required? Or is this due that just not being done yet? Or did I misunderstand something?  </p>\n<p>The alternative I found (in packed_simd <a href=\"http://float.rs\">float.rs</a>) was <code>a.lanes_le(b).select(b, a)</code>which imo is a way more sane answer of calling max on two vectors.</p>\n<p>Thanks in advance!</p>",
        "id": 264091626,
        "sender_full_name": "Kai Roßwag",
        "timestamp": 1638920982
    },
    {
        "content": "<p>In the example shall it be a.max(b) maybe or why is a defined</p>",
        "id": 264092601,
        "sender_full_name": "andjo403",
        "timestamp": 1638921486
    },
    {
        "content": "<p>you want <code>lanes_max</code>, <code>PartialOrd::max</code> is designed for scalars so won't do what you want here</p>",
        "id": 264093131,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638921739
    },
    {
        "content": "<p><code>PartialOrd</code> is implemented so you can use simd types inside types that you'd use for <code>BTreeMap</code> keys or similar</p>",
        "id": 264093305,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638921819
    },
    {
        "content": "<p>yes, a.max(b) it should be</p>",
        "id": 264093324,
        "sender_full_name": "Kai Roßwag",
        "timestamp": 1638921828
    },
    {
        "content": "<p>oh, yeah, i forgot about the naming...nm about <code>lanes_max</code></p>",
        "id": 264093540,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638921955
    },
    {
        "content": "<p>i'd agree though that a lanes_max would definetly have shortened my search quiet a good bit!</p>",
        "id": 264093619,
        "sender_full_name": "Kai Roßwag",
        "timestamp": 1638922003
    },
    {
        "content": "<p>maybe we should have either <code>lanes_max</code> to go with <code>lanes_eq</code>, or rename <code>lanes_eq</code> to <code>eq</code>, so they match.</p>",
        "id": 264093721,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638922080
    },
    {
        "content": "<p>there is an eq though that returns bool (from core::cmp::PartialEq again)</p>",
        "id": 264093984,
        "sender_full_name": "Kai Roßwag",
        "timestamp": 1638922241
    },
    {
        "content": "<p>just like the <code>max</code> from <code>PartialOrd</code>...consistency is important</p>",
        "id": 264094045,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1638922298
    },
    {
        "content": "<p>ah yes, that is true - though u32x4::max(a, b) will use core::cmp::Ord::max which returns Self.</p>",
        "id": 264094324,
        "sender_full_name": "Kai Roßwag",
        "timestamp": 1638922462
    },
    {
        "content": "<p>From the peanut gallery: with eq being <code>-&gt; bool</code>, it makes sense to me to have <code>foo_eq</code> or <code>eq_foo</code> for the <code>-&gt; Simd&lt;boolish, N&gt;</code> versions</p>",
        "id": 264105046,
        "sender_full_name": "scottmcm",
        "timestamp": 1638931940
    }
]