[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> I r+'d the stealable query PR -- but was it a perf regression?</p>",
        "id": 240088592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621879657
    },
    {
        "content": "<p>I'm wondering if we should investigate that more</p>",
        "id": 240088601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621879664
    },
    {
        "content": "<p>That seems surprising</p>",
        "id": 240088605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621879668
    },
    {
        "content": "<p>I <em>would</em> though expect a memory use improvement</p>",
        "id": 240088617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621879672
    },
    {
        "content": "<p>It's a regression on instruction counts for <code>incr-full</code> and <code>incr-patched</code> runs</p>",
        "id": 240088812,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621879760
    },
    {
        "content": "<p>So I guess it's just incremental compilation taking longer because it has an additional query to process, or something?</p>",
        "id": 240088875,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621879799
    },
    {
        "content": "<p>As for the memory it does looks like an improvement, but it's pretty mixed</p>",
        "id": 240089062,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621879876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/stealable.20query/near/240088601\">said</a>:</p>\n<blockquote>\n<p>I'm wondering if we should investigate that more</p>\n</blockquote>\n<p>Happy to do that but I don't know much about incremental compilation, so I'd love to have some hints</p>",
        "id": 240089216,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621879944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> I see, it's <em>specifically</em> incremental?</p>",
        "id": 240090151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880362
    },
    {
        "content": "<p>I wonder why that should be</p>",
        "id": 240090171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880380
    },
    {
        "content": "<p>At this point, are we building the THIR more than once for any given function?</p>",
        "id": 240090180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880389
    },
    {
        "content": "<p>Do you want to try to benchmark the <code>Box</code> variant I talked about?</p>",
        "id": 240090211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880402
    },
    {
        "content": "<p>It probably doesn't make much difference</p>",
        "id": 240090254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880406
    },
    {
        "content": "<p>Just N bytes per function</p>",
        "id": 240090267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/stealable.20query/near/240090180\">said</a>:</p>\n<blockquote>\n<p>At this point, are we building the THIR more than once for any given function?</p>\n</blockquote>\n<p>We're only building it once through the query for <code>mir_build</code> and building the patterns for exhaustiveness checking (not through the query)</p>",
        "id": 240090545,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621880533
    },
    {
        "content": "<p>THIR unsafeck is gated under <code>-Z thir-unsafeck</code> so it doesn't get ran in perf</p>",
        "id": 240090616,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621880568
    },
    {
        "content": "<p>got it</p>",
        "id": 240090756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880642
    },
    {
        "content": "<p>If the regression happens for incr-full and incr-patch only, it may be related to stable hashing.</p>",
        "id": 240090821,
        "sender_full_name": "cjgillot",
        "timestamp": 1621880659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> meaning that we have to do more hashing than we used to?</p>",
        "id": 240090924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880705
    },
    {
        "content": "<p>We did not hash the THIR, and now we do.</p>",
        "id": 240090955,
        "sender_full_name": "cjgillot",
        "timestamp": 1621880721
    },
    {
        "content": "<p>right</p>",
        "id": 240090961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880726
    },
    {
        "content": "<p>The query returns <code>(&amp;'tcx Steal&lt;thir::Thir&lt;'tcx&gt;&gt;, thir::ExprId)</code></p>",
        "id": 240090973,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621880732
    },
    {
        "content": "<p>Right, makes sense</p>",
        "id": 240091145,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621880816
    },
    {
        "content": "<p>For some reason I though \"oh, the THIR gets stolen and dropped so it won't be hashed\", but I'm assuming it gets hashed on its first call?</p>",
        "id": 240091228,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621880861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> What if we apply <code>no_hash</code> on <code>thir_body</code>?</p>",
        "id": 240245610,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621974455
    },
    {
        "content": "<p>Would that make sense to (hopefully) negate the perf impact?</p>",
        "id": 240245821,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621974558
    },
    {
        "content": "<p>And what is the consequence of making a query <code>no_hash</code>?</p>",
        "id": 240245991,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621974646
    },
    {
        "content": "<p>Making a query no_hash prevents the query system from knowing whether its results changed. As a consequence, the query system assumes that the no_hash query is green iff all its dependencies are green. In other words, everything happens as if all the information from all the dependencies appeared inside the <code>thir_body</code>. Hashing allows the query system to know that only a subset of this information appears in <code>thir_body</code>, and only rerun the query when that information subset changes.</p>",
        "id": 240248959,
        "sender_full_name": "cjgillot",
        "timestamp": 1621976212
    },
    {
        "content": "<p>But it appears that this is ineffective for <code>thir_body</code>, since we get regressions on <code>incr-patched</code> runs, no?</p>",
        "id": 240385729,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622060594
    },
    {
        "content": "<p>Opened a PR to test the perf impact of making it <code>no_hash</code></p>",
        "id": 240388292,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622061730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> The results are in <a href=\"https://github.com/rust-lang/rust/pull/85729#issuecomment-849177378\">https://github.com/rust-lang/rust/pull/85729#issuecomment-849177378</a></p>",
        "id": 240403216,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622070568
    },
    {
        "content": "<p>It's a clear improvement on instruction counts</p>",
        "id": 240403317,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622070647
    },
    {
        "content": "<p>But it looks kind of  mixed on max-rss and wall times</p>",
        "id": 240403428,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622070740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> hmm I r+'d, but I didn't look as closely as you did (embarassing)</p>",
        "id": 240611320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622211973
    },
    {
        "content": "<p>I wonder if we should change the perf output to show all three bits of info</p>",
        "id": 240611335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622211981
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>)</p>",
        "id": 240611350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622211986
    },
    {
        "content": "<p>wall times seem pretty noisy though</p>",
        "id": 240629079,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1622219722
    },
    {
        "content": "<p>I wonder if the report could, in general, always include a column reporting the changes in units of \"the usual noise\"...</p>",
        "id": 240635304,
        "sender_full_name": "scottmcm",
        "timestamp": 1622222635
    },
    {
        "content": "<p>wall times are quite noisy, I usually ignore them</p>",
        "id": 241145856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639442
    },
    {
        "content": "<p>I'd like to see max-rss though</p>",
        "id": 241145869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622639446
    }
]