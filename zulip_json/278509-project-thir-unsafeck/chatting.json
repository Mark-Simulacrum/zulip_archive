[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> :)</p>",
        "id": 227279713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006340
    },
    {
        "content": "<p>so....let's see</p>",
        "id": 227279749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006356
    },
    {
        "content": "<p>I've done a bit of research/tinkering on my part</p>",
        "id": 227279841,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006374
    },
    {
        "content": "<p>I guess I better start by pouring myself a mug of coffee <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 227279854,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006379
    },
    {
        "content": "<p>awesome</p>",
        "id": 227279863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006383
    },
    {
        "content": "<p>Had a few notes in <a href=\"https://hackmd.io/REEW4jiNRe2Al72r31CQIA?both\">https://hackmd.io/REEW4jiNRe2Al72r31CQIA?both</a></p>",
        "id": 227279870,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006385
    },
    {
        "content": "<p>one thing I was wondering about -- I don't know at this point whether THIR is only created during MIR construction or if it is created beforehand anywhere</p>",
        "id": 227279941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006417
    },
    {
        "content": "<p>It's only created for MIR AFAICT</p>",
        "id": 227280004,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006433
    },
    {
        "content": "<p>that was my expectation</p>",
        "id": 227280084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006467
    },
    {
        "content": "<p>we used to create it \"lazilly\"</p>",
        "id": 227280093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006472
    },
    {
        "content": "<p>I think we stopped doing that</p>",
        "id": 227280096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006474
    },
    {
        "content": "<p>Pattern checks don't even construct the whole THIR, they just visit the HIR and construct only the patterns</p>",
        "id": 227280168,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006488
    },
    {
        "content": "<p>by lazilly, I mean that as MIR construction proceeded, we would build the THIR for one expression at a time</p>",
        "id": 227280198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006505
    },
    {
        "content": "<p>I wrote some code as I was thinking</p>",
        "id": 227280271,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006537
    },
    {
        "content": "<p>I'm looking over your hackmd</p>",
        "id": 227280285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006544
    },
    {
        "content": "<p>So I had a <code>check_expr</code> that just recurses</p>",
        "id": 227280320,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006554
    },
    {
        "content": "<p>Mirroring the HIR into THIR as it progresses</p>",
        "id": 227280353,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006568
    },
    {
        "content": "<p>As a first prototype</p>",
        "id": 227280363,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006577
    },
    {
        "content": "<p>Hi <span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> :D</p>",
        "id": 227280465,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006615
    },
    {
        "content": "<p>ok</p>",
        "id": 227280542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006661
    },
    {
        "content": "<p>where is the prototype?</p>",
        "id": 227280570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006670
    },
    {
        "content": "<p>I guess I'll drop some notes into the doc</p>",
        "id": 227280585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006678
    },
    {
        "content": "<p>I only have it locally</p>",
        "id": 227280615,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006686
    },
    {
        "content": "<p>Should I create a gist/integrate it in the hackmd?</p>",
        "id": 227280652,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006698
    },
    {
        "content": "<p>I mean, it's not even a prototype since it doesn't work yet :)</p>",
        "id": 227280712,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006721
    },
    {
        "content": "<p>sure, if you like</p>",
        "id": 227280790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006738
    },
    {
        "content": "<p>I'm also going to open up the code</p>",
        "id": 227280805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006745
    },
    {
        "content": "<p>I see you wrote out the unsafe operations</p>",
        "id": 227280821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006751
    },
    {
        "content": "<p>that's helpful, I was thinking that would be a good thing to do</p>",
        "id": 227280830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006757
    },
    {
        "content": "<p>what is <code>InitializingTypeWith</code> ?</p>",
        "id": 227280901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006787
    },
    {
        "content": "<p>It's \"initializing type with <code>rustc_layout_scalar_valid_range</code> attr\"</p>",
        "id": 227281028,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006842
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 227281107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006862
    },
    {
        "content": "<p>hmm</p>",
        "id": 227281120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006871
    },
    {
        "content": "<p>we still have <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir_build/thir/enum.BlockSafety.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir_build/thir/enum.BlockSafety.html</a> :)</p>",
        "id": 227281124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006873
    },
    {
        "content": "<p>well, that answers some of your questions</p>",
        "id": 227281131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006877
    },
    {
        "content": "<p>(I like to refer to the implementation of <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.UnsafetyViolationDetails.html#method.description_and_note\"><code>description_and_note</code></a>)</p>",
        "id": 227281136,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006880
    },
    {
        "content": "<p>most notably you cannot skip unsafe blocks</p>",
        "id": 227281164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006895
    },
    {
        "content": "<p>not sure if you're familiar with that block safety stuff, but it was introduced to allow us to do a kind of unsafety hygiene</p>",
        "id": 227281236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006919
    },
    {
        "content": "<p>it may not be used anymore</p>",
        "id": 227281246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006922
    },
    {
        "content": "<p>because the feature for which it was initially added was removed</p>",
        "id": 227281261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006930
    },
    {
        "content": "<p>Oh</p>",
        "id": 227281276,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006938
    },
    {
        "content": "<p>What was it for? Curious now :)</p>",
        "id": 227281307,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614006950
    },
    {
        "content": "<p>the idea was that you could \"push\" and \"pop\" unsafe, so that you could go into an unsafe block and then back out again</p>",
        "id": 227281322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006957
    },
    {
        "content": "<p>it was used for the <code>a &lt;- b</code> operator</p>",
        "id": 227281370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006964
    },
    {
        "content": "<p>the desugaring thereof</p>",
        "id": 227281400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006972
    },
    {
        "content": "<p>this was used to do in-place initialization</p>",
        "id": 227281421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006980
    },
    {
        "content": "<p>e.g., <code>vec &lt;- element</code></p>",
        "id": 227281429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006983
    },
    {
        "content": "<p>was kind of equivalent to <code>vec.push(element)</code> except that it didn't make a temporary</p>",
        "id": 227281451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614006992
    },
    {
        "content": "<p>Dropped my current code in the HackMD</p>",
        "id": 227281576,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007053
    },
    {
        "content": "<p>Don't look at the <code>ControlFlow</code>s, I was just thinking about how I could handle early exits</p>",
        "id": 227281733,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007101
    },
    {
        "content": "<p>I'd like to read a bit into how the THIR is constructed I guess</p>",
        "id": 227281743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007105
    },
    {
        "content": "<p>I'm wondering if we want to introduce a query</p>",
        "id": 227281761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007113
    },
    {
        "content": "<p>or just kind of \"pack this into\" MIR construction</p>",
        "id": 227281779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-t-compiler.2Fproject-unsafe-thir-refactor/topic/chatting/near/227281743\">said</a>:</p>\n<blockquote>\n<p>I'd like to read a bit into how the THIR is constructed I guess</p>\n</blockquote>\n<p>You mean, how THIR consumers construct it, or how the construction itself is implemented?</p>",
        "id": 227282357,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007328
    },
    {
        "content": "<p>the former</p>",
        "id": 227282412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007354
    },
    {
        "content": "<p>where is it :)</p>",
        "id": 227282477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007378
    },
    {
        "content": "<p>Probably in <code>rustc_mir_build::build</code> I think</p>",
        "id": 227282598,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007421
    },
    {
        "content": "<p>yes</p>",
        "id": 227282729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007457
    },
    {
        "content": "<p>I'm tracking along the code there</p>",
        "id": 227282824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007508
    },
    {
        "content": "<p>Found <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir_build/build/struct.Builder.html#method.into_expr\"><code>Builder::into_expr</code></a></p>",
        "id": 227283070,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007585
    },
    {
        "content": "<p>Which to me seems to define how the MIR builder recurses over/constructs the THIR</p>",
        "id": 227283134,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007619
    },
    {
        "content": "<p>heh</p>",
        "id": 227283266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007676
    },
    {
        "content": "<p>it takes us quite a while to invoke mirror!</p>",
        "id": 227283290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007683
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_mir_build/src/build/mod.rs#L947-L948\">here</a></p>",
        "id": 227283364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007695
    },
    {
        "content": "<p>I thought everything above is just setting up the MIR builder</p>",
        "id": 227283509,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007735
    },
    {
        "content": "<p>This line:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(</span><span class=\"n\">Place</span>::<span class=\"n\">return_place</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>calls <code>Builder::into_expr</code> in the end</p>",
        "id": 227283629,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007787
    },
    {
        "content": "<p>yeah</p>",
        "id": 227283885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007869
    },
    {
        "content": "<p>so</p>",
        "id": 227283888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007869
    },
    {
        "content": "<p><a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_mir_build/src/thir/mod.rs#L406-L422\">comment</a></p>",
        "id": 227283950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007896
    },
    {
        "content": "<p>there is basically a 2-phase thing, right? we convert HIR to THIR (<code>self.hir.mirror(...)</code>) and then thir to MIR</p>",
        "id": 227284030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007922
    },
    {
        "content": "<p>but it does appear that basically everything before is irrelevant to THIR construction</p>",
        "id": 227284126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007945
    },
    {
        "content": "<p>after all, <code>let body = self.hir.mirror(ast_body);</code> -- only depends on <code>self.hir</code> and <code>ast_body</code></p>",
        "id": 227284181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007963
    },
    {
        "content": "<p>That only mirrors one layer?</p>",
        "id": 227284225,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614007980
    },
    {
        "content": "<p>I think that's untrue</p>",
        "id": 227284249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007987
    },
    {
        "content": "<p>despite the comment</p>",
        "id": 227284263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007990
    },
    {
        "content": "<p>but regardless</p>",
        "id": 227284275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007992
    },
    {
        "content": "<p>it gives you everything you need to mirror other layers</p>",
        "id": 227284292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614007999
    },
    {
        "content": "<p>(I sort of thought we stopped doing that?)</p>",
        "id": 227284308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008006
    },
    {
        "content": "<p>regardless, if we are going to do multiple passes over the THIR...</p>",
        "id": 227284355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008026
    },
    {
        "content": "<p>hmm</p>",
        "id": 227284374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008031
    },
    {
        "content": "<p><em>so</em></p>",
        "id": 227284392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008036
    },
    {
        "content": "<p>we could implement the \"unsafety check\" as kind of an \"inverse visitor\"</p>",
        "id": 227284465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008045
    },
    {
        "content": "<p>i.e., as the THIR is lazilly traversed, whenever something is mirrored, say, it gives a callback to the unsafety check (and maybe other THIR-based checks later on)</p>",
        "id": 227284557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008081
    },
    {
        "content": "<p>however I'm not sure I like that</p>",
        "id": 227284621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-t-compiler.2Fproject-unsafe-thir-refactor/topic/chatting/near/227284621\">said</a>:</p>\n<blockquote>\n<p>however I'm not sure I like that</p>\n</blockquote>\n<p>Because we are going to build the entire THIR tree anyway?</p>",
        "id": 227284690,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008131
    },
    {
        "content": "<p>no</p>",
        "id": 227284701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008137
    },
    {
        "content": "<p>rather because it relies on the <em>MIR build</em> to walk everything</p>",
        "id": 227284719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008146
    },
    {
        "content": "<p>but it's not obvious that MIR build would always want to do that</p>",
        "id": 227284730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008152
    },
    {
        "content": "<p>e.g., you could imagine an optimization where MIR build stops walking after a <code>return</code> statement</p>",
        "id": 227284761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008163
    },
    {
        "content": "<p>rather than generating dead code that will be stripped out later</p>",
        "id": 227284799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008169
    },
    {
        "content": "<blockquote>\n<p>rather because it relies on the MIR build to walk everything</p>\n</blockquote>\n<p>Does it? Sorry, I'm not sure I understand</p>",
        "id": 227284819,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008172
    },
    {
        "content": "<p>so--</p>",
        "id": 227284855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008189
    },
    {
        "content": "<p><em>assuming</em> THIR construction is lazy</p>",
        "id": 227284866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008194
    },
    {
        "content": "<p>I thought we could only use <code>mirror</code> all the way down</p>",
        "id": 227284915,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008214
    },
    {
        "content": "<p>the way it used to work was that you would get back a single layer, with \"stubs\" for the layers below</p>",
        "id": 227284918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008214
    },
    {
        "content": "<p>Right</p>",
        "id": 227284946,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008223
    },
    {
        "content": "<p>so then you would match on the outer layer</p>",
        "id": 227284975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008229
    },
    {
        "content": "<p>and recursively invoke <code>mirror</code> on those stubs</p>",
        "id": 227284991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008234
    },
    {
        "content": "<p>I'm reading into the code to see if this is what it still does</p>",
        "id": 227285257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008333
    },
    {
        "content": "<p>actually, I think it is?</p>",
        "id": 227285316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008352
    },
    {
        "content": "<p>e.g., in <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_mir_build/src/thir/cx/expr.rs#L151-L156\">this code</a> we convert a method-call...</p>",
        "id": 227285367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008376
    },
    {
        "content": "<p>...and for each sub-function we are invoking <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_mir_build/src/thir/cx/to_ref.rs#L10-L16\"><code>to_ref</code></a>...</p>",
        "id": 227285423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008395
    },
    {
        "content": "<p>and <code>to_ref</code> just seems to <a href=\"https://github.com/nikomatsakis/rust/blob/a118ee2c13cc96ceb27bd5030c1cca1052377604/compiler/rustc_mir_build/src/thir/cx/to_ref.rs#L14-L15\">embed a pointer to the HIR, but not recursively construct anything</a></p>",
        "id": 227285539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008423
    },
    {
        "content": "<p>do you agree, or am I missing something?</p>",
        "id": 227285568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008434
    },
    {
        "content": "<p>ps I'm looking over the code you pasted in.</p>",
        "id": 227285607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008450
    },
    {
        "content": "<p>Yes, this is what I had understood too</p>",
        "id": 227285613,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008453
    },
    {
        "content": "<p>OK, so</p>",
        "id": 227285623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008456
    },
    {
        "content": "<p>I would like to avoid constructing the THIR twice</p>",
        "id": 227285636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008463
    },
    {
        "content": "<p>so what I was saying is</p>",
        "id": 227285663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008474
    },
    {
        "content": "<p>you could <em>imagine</em> having a callback on the <code>mirror</code> or something</p>",
        "id": 227285727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008506
    },
    {
        "content": "<p>so that the \"unsafety\" check would be implemented by receiving these callbacks</p>",
        "id": 227285754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008519
    },
    {
        "content": "<p>like \"we just mirrored this, figure out if it is unsafe\"</p>",
        "id": 227285824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008530
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 227285833,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008535
    },
    {
        "content": "<p>And you didn't like it because unsafety checking then relies on MIR building</p>",
        "id": 227285867,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008551
    },
    {
        "content": "<p>but I don't like that because it implies that the MIR builder is required to mirror everything</p>",
        "id": 227285868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008551
    },
    {
        "content": "<p>and probably in some specific order</p>",
        "id": 227285881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008555
    },
    {
        "content": "<p>or else the code gets more complicated</p>",
        "id": 227285891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/278509-t-compiler.2Fproject-unsafe-thir-refactor/topic/chatting/near/227285867\">said</a>:</p>\n<blockquote>\n<p>And you didn't like it because unsafety checking then relies on MIR building</p>\n</blockquote>\n<p>yes, exactly</p>",
        "id": 227285941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008577
    },
    {
        "content": "<p>I understand now, thank you</p>",
        "id": 227285949,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008579
    },
    {
        "content": "<p>I'm somewhat unconvinced that lazilly mirror is valuable</p>",
        "id": 227285962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008584
    },
    {
        "content": "<p>at least on this granularity</p>",
        "id": 227285993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008591
    },
    {
        "content": "<p>I implemented it initially but I'm not sure why besides that I could :P</p>",
        "id": 227286021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008603
    },
    {
        "content": "<p>So you'd suggest to just have a query to construct the THIR?</p>",
        "id": 227286066,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008627
    },
    {
        "content": "<p>the real reason: I think I was concerned about peak memory usage</p>",
        "id": 227286067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008627
    },
    {
        "content": "<p>which... you know ... is valid</p>",
        "id": 227286076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008631
    },
    {
        "content": "<p>well, I'm not super keen on a query</p>",
        "id": 227286096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008638
    },
    {
        "content": "<p>precisely because of peak memory usage</p>",
        "id": 227286153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008645
    },
    {
        "content": "<p>Right</p>",
        "id": 227286173,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008652
    },
    {
        "content": "<p>or if we did a query, I would want a \"stealable\" one</p>",
        "id": 227286194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008660
    },
    {
        "content": "<p>but what I <em>was</em> thinking is that we could</p>",
        "id": 227286213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008667
    },
    {
        "content": "<p>(a) remove the whole <code>ExprRef::Hir</code> business</p>",
        "id": 227286234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008678
    },
    {
        "content": "<p>and instead just convert to THIR eagerly</p>",
        "id": 227286250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008684
    },
    {
        "content": "<p>this would simplify the code overall, removing the need to recursively call <code>self.cx.mirror</code> during MIR construction</p>",
        "id": 227286277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008695
    },
    {
        "content": "<p>if we did that</p>",
        "id": 227286655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008807
    },
    {
        "content": "<p>then we could basically make MIR build do something like:</p>",
        "id": 227286692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008824
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">build_thir</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">unsafety_check</span><span class=\"p\">(</span><span class=\"n\">thir</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mir_build</span><span class=\"p\">(</span><span class=\"n\">thir</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227286752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008842
    },
    {
        "content": "<p>and then drop the <code>thir</code> at the end</p>",
        "id": 227286763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008847
    },
    {
        "content": "<p>I suspect this would be sufficient to keep peak memory usage under control</p>",
        "id": 227286790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008858
    },
    {
        "content": "<p>it would also allow us (over time) to do more things on THIR</p>",
        "id": 227286816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-t-compiler.2Fproject-unsafe-thir-refactor/topic/chatting/near/227286655\">said</a>:</p>\n<blockquote>\n<p>if we did that</p>\n</blockquote>\n<p>Side note: it would also make <a href=\"https://github.com/rust-lang/compiler-team/issues/408\">https://github.com/rust-lang/compiler-team/issues/408</a> much easier to implement <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 227286830,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008874
    },
    {
        "content": "<p>yeah:)</p>",
        "id": 227286886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008884
    },
    {
        "content": "<p>I think THIR is a really useful representation point</p>",
        "id": 227286914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008889
    },
    {
        "content": "<p>e.g., I suspect that const generics might like it too</p>",
        "id": 227286939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008902
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>)</p>",
        "id": 227286959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008909
    },
    {
        "content": "<p>but one thing at a time</p>",
        "id": 227286967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-t-compiler.2Fproject-unsafe-thir-refactor/topic/chatting/near/227286234\">said</a>:</p>\n<blockquote>\n<p>(a) remove the whole <code>ExprRef::Hir</code> business</p>\n</blockquote>\n<p>this would make a good PR on its own</p>",
        "id": 227286980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008919
    },
    {
        "content": "<p>btw</p>",
        "id": 227286999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008928
    },
    {
        "content": "<p>I'm going to create a repository to track this stuff</p>",
        "id": 227287015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008934
    },
    {
        "content": "<p>I can totally do it</p>",
        "id": 227287016,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008934
    },
    {
        "content": "<p>(like, right now)</p>",
        "id": 227287044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008945
    },
    {
        "content": "<p>Does that deserve a MCP of its own?</p>",
        "id": 227287075,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008955
    },
    {
        "content": "<p>hmm</p>",
        "id": 227287083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008961
    },
    {
        "content": "<p>yeah</p>",
        "id": 227287103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008968
    },
    {
        "content": "<p>if you want to write it, I'll just second it right now</p>",
        "id": 227287113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008973
    },
    {
        "content": "<p>but that'll give folks a chance to comment</p>",
        "id": 227287125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008976
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 227287152,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008986
    },
    {
        "content": "<p>I kind of felt it was \"part of\" the original one, but you're right that it's worth calling out</p>",
        "id": 227287157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614008988
    },
    {
        "content": "<p>I'll write it with elements from this topic</p>",
        "id": 227287186,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614008997
    },
    {
        "content": "<p>perfect, thank you!</p>",
        "id": 227287418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009070
    },
    {
        "content": "<p>Just one doubt: you don't need to build a THIR tree to perform analysis on patterns, right?</p>",
        "id": 227289247,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614009675
    },
    {
        "content": "<p>I don't know how that code works</p>",
        "id": 227289313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009686
    },
    {
        "content": "<p>Pattern checks only build the patterns they check?</p>",
        "id": 227289352,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614009692
    },
    {
        "content": "<p>but I guess it would benefit from this too..?</p>",
        "id": 227289356,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009693
    },
    {
        "content": "<p>are we building the patterns twice?</p>",
        "id": 227289391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009698
    },
    {
        "content": "<p>I think so</p>",
        "id": 227289456,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614009709
    },
    {
        "content": "<p>this <em>may</em> be an argument to create a query with stealable stuff</p>",
        "id": 227289525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009723
    },
    {
        "content": "<p>I'm not sure if pattern check is a query today that returns useful info?</p>",
        "id": 227289626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009740
    },
    {
        "content": "<p>IIUC, match checking works by recursing over the HIR and only building THIR patterns</p>",
        "id": 227289665,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614009749
    },
    {
        "content": "<p>well</p>",
        "id": 227290670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009978
    },
    {
        "content": "<p>I'd probably refactor that as a follow-up</p>",
        "id": 227290691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009982
    },
    {
        "content": "<p>that'd be a good thing to call out in the MCP and get feedback</p>",
        "id": 227290766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614009999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/compiler-team/issues/409\">https://github.com/rust-lang/compiler-team/issues/409</a></p>",
        "id": 227291511,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614010235
    }
]