[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'd like some advice about the query model for all the queries that need THIR. I've been thinking about this and I have a few ideas, I'd love to have your feedback</p>\n<p>First, how do I pass the THIR across the query boundary? I'm assuming that the keys are hashed to be stored in cache, and I don't think the THIR should be hashed, so I thought I could create a wrapper that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">ThirAnd</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">key</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">thir</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">thir</span> <span class=\"nc\">Expr</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Hash</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Hash</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ThirAnd</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">hash</span><span class=\"o\">&lt;</span><span class=\"n\">H</span>: <span class=\"nc\">Hasher</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And then define my queries to take e.g. <code>ThirAnd&lt;LocalDefId&gt;</code>.</p>\n<p>Second, how do I share the THIR with every query that needs it? I thought that instead of queries ensuring themselves all over the place, I could have the <code>analysis</code> query create the THIR and call all relevant queries, which allows to call e.g. the thir unsafeck without building MIR.</p>\n<p>Third, in the unsafeck, I need to be able to know in which safety context a particular closure has been created, and I see two options to solve this problem:</p>\n<ul>\n<li>after unsafe-checking the parent body, return a list of closures and their safety context, and handle closures last in <code>analysis</code> (the list gets stored as the result of a query, which sounds suboptimal)</li>\n<li>have the THIR be a stealable query, and make the unsafeck generate THIR for closures when it needs to (might cause the THIR for closures to pile up in memory before getting freed)</li>\n</ul>",
        "id": 230276499,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1615762196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/THIR-dependent.20queries.20design/near/230276499\">said</a>:</p>\n<blockquote>\n<p>First, how do I pass the THIR across the query boundary?</p>\n</blockquote>\n<p>The simplest would probably be <code>LocalDefId -&gt; Steal&lt;Thir&lt;'tcx, 'tcx&gt;&gt;</code> query.<br>\nI agree the THIR should not be hashed. Since it merges the HIR and the type checking results,<br>\nan anonymous query could be enough.</p>\n<blockquote>\n<p>Second, how do I share the THIR with every query that needs it? I thought that instead of queries ensuring themselves all over the place, I could have the <code>analysis</code> query create the THIR and call all relevant queries, which allows to call e.g. the thir unsafeck without building MIR.</p>\n</blockquote>\n<p>IIUC, the THIR will be stolen by <code>mir_built</code>.<br>\nIn that case, it makes sense for that query to ensure that all THIR-dependent queries have run.</p>\n<blockquote>\n<p>Third, in the unsafeck, I need to be able to know in which safety context a particular closure has been created, and I see two options to solve this problem:</p>\n<ul>\n<li>after unsafe-checking the parent body, return a list of closures and their safety context, and handle closures last in <code>analysis</code> (the list gets stored as the result of a query, which sounds suboptimal)</li>\n<li>have the THIR be a stealable query, and make the unsafeck generate THIR for closures when it needs to (might cause the THIR for closures to pile up in memory before getting freed)</li>\n</ul>\n</blockquote>\n<p>I guess the question is: how is the THIR split?<br>\nDoes the <code>LocalDefId</code>represent a HIR owner or a definition?<br>\nHIR owners roughly correspond to Items, while definitions can also encompass closures.<br>\nHIR is split by HIR owner, MIR is split by definition.</p>",
        "id": 230392344,
        "sender_full_name": "cjgillot",
        "timestamp": 1615831452
    },
    {
        "content": "<p>Why do you think the THIR should not be hashed, <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> ?</p>",
        "id": 230401174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615835184
    },
    {
        "content": "<p>Hashing would have the advantage of working well with the incremental computation system</p>",
        "id": 230401212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615835204
    },
    {
        "content": "<p>But perhaps the belief is that if the HIR is different, the THIR will also be different. I guess i'd say 'maybe'</p>",
        "id": 230401245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615835223
    },
    {
        "content": "<p>I'm not saying that the THIR should never be hashed, I just don't think we should hash it <em>as a key</em> to some query</p>",
        "id": 230402234,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1615835705
    },
    {
        "content": "<p>I wouldn't expect it to be the key to any query</p>",
        "id": 230434590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615849138
    },
    {
        "content": "<p>i would expect te steal strategy, as <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> suggested</p>",
        "id": 230434603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615849146
    },
    {
        "content": "<p>we will have to hash it then as the <strong>result</strong> of a query</p>",
        "id": 230434620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615849160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 230434628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1615849170
    },
    {
        "content": "<p>After a suggestion from <span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> I tried storing the THIR in <code>IndexVec</code>s instead of in an <code>Arena</code>, to be able to fit it in a stealable query. Implementation is in <a href=\"https://github.com/rust-lang/rust/issues/83842\">#83842</a></p>",
        "id": 233115778,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617573624
    },
    {
        "content": "<p>A first perf run reported mild regressions in instruction counts on many tests, and mas-rss blew up (up to 23.7%) on a few tests</p>",
        "id": 233115899,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617573760
    },
    {
        "content": "<p>I also have a prototype for the actual query, but I'm getting incremental compilation errors (\"found unstable fingerprints\"), probably because I slapped <code>#[derive(HashStable)]</code> on any type that needed it without really thinking <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 233116036,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617573916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'd like to have your thoughts on this</p>",
        "id": 233179158,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617633159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> so we are now arena allocating the THIR for everything? interesting that we saw max-rss blow-up</p>",
        "id": 233184830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635359
    },
    {
        "content": "<p>I would think that we would actually be able to <em>reduce</em> max-rss</p>",
        "id": 233184864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635371
    },
    {
        "content": "<p>via stealable queries</p>",
        "id": 233184877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635375
    },
    {
        "content": "<p>maybe we can set it up to pipeline a bit better</p>",
        "id": 233184906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635383
    },
    {
        "content": "<p>by and large I think <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span>'s suggeston is good, but the perf regressions are a drag</p>",
        "id": 233184936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/THIR-dependent.20queries.20design/near/233184906\">said</a>:</p>\n<blockquote>\n<p>maybe we can set it up to pipeline a bit better</p>\n</blockquote>\n<p>specifically: before I think we never built the THIR for more than one fn at a time</p>",
        "id": 233185028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635409
    },
    {
        "content": "<p>I suspect we can preserve that property with a bit of tweaking</p>",
        "id": 233185055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635417
    },
    {
        "content": "<p>Right now we just tested the perf for the change from arena-allocation to \"vec-allocation\"</p>",
        "id": 233185065,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617635421
    },
    {
        "content": "<p>And patterns are still handled separately</p>",
        "id": 233185161,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617635446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/THIR-dependent.20queries.20design/near/233184864\">said</a>:</p>\n<blockquote>\n<p>I would think that we would actually be able to <em>reduce</em> max-rss</p>\n</blockquote>\n<p>It only blew up on a few tests, for the rest of the tests it's not a clear regression</p>",
        "id": 233185518,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617635580
    },
    {
        "content": "<p>ok</p>",
        "id": 233185837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635729
    },
    {
        "content": "<p>do you see what I mean about being able to reduce total memory usage?</p>",
        "id": 233185855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635739
    },
    {
        "content": "<p>specifically, I think that when constructing MIR, we should steal the THIR, and then drop it</p>",
        "id": 233185878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635747
    },
    {
        "content": "<p>and we should make the \"unsafe checking\" be per function</p>",
        "id": 233185908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635761
    },
    {
        "content": "<p>so that we don't build the THIR for all functions ever, but instead work all the way through for one function</p>",
        "id": 233185966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1617635772
    },
    {
        "content": "<p>Yes, I have tried to implement that on top of this change, but I hit incremental compilation errors</p>",
        "id": 233186047,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617635820
    },
    {
        "content": "<p>Let me push the branch</p>",
        "id": 233186107,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617635853
    },
    {
        "content": "<p>This PR does not implement the stealing part yet, does it?</p>",
        "id": 233186126,
        "sender_full_name": "cjgillot",
        "timestamp": 1617635862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/THIR-dependent.20queries.20design/near/233186126\">said</a>:</p>\n<blockquote>\n<p>This PR does not implement the stealing part yet, does it?</p>\n</blockquote>\n<p>Correct</p>",
        "id": 233186147,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617635872
    },
    {
        "content": "<p>I am quite puzzled that the size of <code>Expr</code> increases. Any idea why?</p>",
        "id": 233186243,
        "sender_full_name": "cjgillot",
        "timestamp": 1617635893
    },
    {
        "content": "<p>Are <code>newtype_index!</code> types always <code>u32</code>?</p>",
        "id": 233186474,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617635946
    },
    {
        "content": "<p>Yes, and the compiler reserves part of the range for layout optimizations.</p>",
        "id": 233186854,
        "sender_full_name": "cjgillot",
        "timestamp": 1617636064
    },
    {
        "content": "<p>So its actually more like 31 bits.</p>",
        "id": 233186931,
        "sender_full_name": "cjgillot",
        "timestamp": 1617636092
    },
    {
        "content": "<p>Ah, interesting, I thought it could be because we removed the niche in e.g. <code>Option&lt;ExprId&gt;</code></p>",
        "id": 233186971,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617636122
    },
    {
        "content": "<p>Could it be changing <code>FruInfo::field_types</code> from a slice to a <code>Vec</code>?</p>",
        "id": 233187383,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617636296
    },
    {
        "content": "<p>It's used in <code>ExprKind::Adt</code> and I wouldn't be surprised if it was the biggest variant in the enum</p>",
        "id": 233187691,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617636405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> Do you want to try a perf run with <code>Box&lt;[Ty]&gt;</code> instead of <code>Vec&lt;Ty&gt;</code>?</p>",
        "id": 233188379,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617636721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/THIR-dependent.20queries.20design/near/233186047\">said</a>:</p>\n<blockquote>\n<p>Yes, I have tried to implement that on top of this change, but I hit incremental compilation errors</p>\n</blockquote>\n<p>Current state of implementation: <a href=\"https://github.com/LeSeulArtichaut/rust/tree/thir-query\">https://github.com/LeSeulArtichaut/rust/tree/thir-query</a></p>",
        "id": 233189140,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617637042
    },
    {
        "content": "<p>So what do we want to do with <a href=\"https://github.com/rust-lang/rust/issues/83842\">#83842</a>?</p>",
        "id": 233855814,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617987071
    },
    {
        "content": "<p>looking</p>",
        "id": 234173705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> the memory usage etc is still significantly worse, right?</p>",
        "id": 234173767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239511
    },
    {
        "content": "<p>maybe we can schedule a time to dig into this? I've had a hard time finding time to talk or think about it :)</p>",
        "id": 234173798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1618239523
    },
    {
        "content": "<p>There hasn't been a perf run since last time</p>",
        "id": 234173838,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1618239546
    },
    {
        "content": "<p>So we haven't tested the perf impact of replacing the Vec with a boxed slice</p>",
        "id": 234173920,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1618239583
    },
    {
        "content": "<blockquote>\n<p>maybe we can schedule a time to dig into this? I've had a hard time finding time to talk or think about it :)</p>\n</blockquote>\n<p>No problem, I just can't make progress without guidance here. Also I have no computer currently (hard drive problem <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span>) so I wouldn't be able to do anything right now anyway</p>",
        "id": 234174558,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1618239698
    },
    {
        "content": "<p>Having a scheduled time to talk would be great though</p>",
        "id": 234175251,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1618239839
    },
    {
        "content": "<p>Alright, I'm back with a working computer now :)</p>",
        "id": 237739543,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1620339621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> So fixing my dumb mistake of using a <code>Vec</code> instead of a boxed slice helped reducing the perf impact of <a href=\"https://github.com/rust-lang/rust/issues/83842\">#83842</a> approximately by half: the worst max-rss regression goes from 23.7% to 11.5%, and the worst instructions count regression goes from 1.3% to 0.7%.</p>",
        "id": 237890671,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1620421826
    },
    {
        "content": "<p>oh, nice!</p>",
        "id": 238338261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620750605
    },
    {
        "content": "<p>I'm running into an issue in <a href=\"https://github.com/rust-lang/rust/issues/85273\">#85273</a> where rustc doesn't run the THIR unsafeck for all bodies in the crate, leading to some tests failing because I don't emit all the errors that are expected</p>",
        "id": 238778854,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621003799
    },
    {
        "content": "<p>I'm going to debug it, but if someone has an idea (even vague) of why this happens, I'll take it :)</p>",
        "id": 238779123,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621003919
    },
    {
        "content": "<p>Ok, a few builds later I have found the issue</p>",
        "id": 238791549,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621009120
    },
    {
        "content": "<p>looking briefly</p>",
        "id": 238792002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621009322
    },
    {
        "content": "<p>oh, you found it</p>",
        "id": 238792222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621009408
    },
    {
        "content": "<p>ok!</p>",
        "id": 238792224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621009409
    },
    {
        "content": "<p>Sometimes (looks like constants and async fns are concerned) typeck needs to run borrowck</p>",
        "id": 238792389,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621009474
    },
    {
        "content": "<p>Which needs mir_build, which triggers thir-unsafeck</p>",
        "id": 238792436,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621009502
    },
    {
        "content": "<p>And since an error in typeck short-circuits the rest of the compilation process we don't get to check the rest of the crate</p>",
        "id": 238792777,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621009588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> How would I fix this? Do I just accept that I get only a part of the errors or would you prefer another solution?</p>",
        "id": 238792987,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621009632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> Ah, hmm, so the problem is that we are now running thir-unsafeck eralier in the pipeline?</p>",
        "id": 238819244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621021394
    },
    {
        "content": "<p>can you point me at the test?</p>",
        "id": 238819255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621021400
    },
    {
        "content": "<p>I'm grmpy about typeck running borrowck, I dont like that :)</p>",
        "id": 238819274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621021411
    },
    {
        "content": "<p>Well, we're not running thir-unsafeck earlier, it's being run by mir_build which is required by typeck in specific cases</p>",
        "id": 238821660,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621022453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/THIR-dependent.20queries.20design/near/238819255\">said</a>:</p>\n<blockquote>\n<p>can you point me at the test?</p>\n</blockquote>\n<p>See the failures in <a href=\"https://github.com/rust-lang/rust/runs/2587180748\">https://github.com/rust-lang/rust/runs/2587180748</a></p>",
        "id": 238827125,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1621025090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/THIR-dependent.20queries.20design/near/238821660\">said</a>:</p>\n<blockquote>\n<p>Well, we're not running thir-unsafeck earlier, it's being run by mir_build which is required by typeck in specific cases</p>\n</blockquote>\n<p>this is what  meant by earlier-- earlier in the \"pipeline\"</p>",
        "id": 238876579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063262
    },
    {
        "content": "<p>that said, this seems potentially just \"ok\" to me</p>",
        "id": 238876627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063302
    },
    {
        "content": "<p>we may want to adjust the tests though</p>",
        "id": 238876631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621063313
    }
]