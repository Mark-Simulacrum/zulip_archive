[
    {
        "content": "<p>hey <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-group-mention silent\" data-user-group-id=\"3805\">project-const-generics</span> needs some simplified ast to compare for equality of two generic constants, e.g. to check that <code>N - 1</code> and <code>N - 1</code> are the same. We currently use the unoptimized mir for this: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/traits/const_evaluatable/fn.mir_abstract_const.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/traits/const_evaluatable/fn.mir_abstract_const.html</a></p>\n<p>This has afaict the same issues as unsafeck as we drop some information when building the mir, so for example <code>N as u8 as u8</code> is considered the same as just <code>N as u8</code>.</p>",
        "id": 251363450,
        "sender_full_name": "lcnr",
        "timestamp": 1630406123
    },
    {
        "content": "<p>so we're also looking to replace the mir based ast with one using thir. Are there still some noteworthy refactoring of either the <code>thir_body</code> query or the structure of the thir itself planned for unsafeck? In this case it would probably make sense to wait for these until we use the thir for const generics. Switching to thir here has pretty much no time constraint, so we could also wait for a year without many issues :p</p>",
        "id": 251363870,
        "sender_full_name": "lcnr",
        "timestamp": 1630406383
    },
    {
        "content": "<p>dont we just get rid of the built thir after constructing mir?</p>",
        "id": 251364265,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1630406585
    },
    {
        "content": "<p>i thought it wasn't kept around so how would that work with unifying consts across crates</p>",
        "id": 251364294,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1630406602
    },
    {
        "content": "<p>this project group added a new query <code>thir_body</code> for this which returns the thir</p>",
        "id": 251364348,
        "sender_full_name": "lcnr",
        "timestamp": 1630406640
    },
    {
        "content": "<p>right which takes a LocalDefId which brings back to cross-crate unifying of consts</p>",
        "id": 251364445,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1630406686
    },
    {
        "content": "<p>it uses <code>Steal&lt;Thir&lt;'tcx&gt;&gt;</code> so mir building (probably) is going to get rid of the thir and all queries which need the hir  have to get called before this</p>",
        "id": 251364459,
        "sender_full_name": "lcnr",
        "timestamp": 1630406698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/thir.20for.20const.20generics/near/251364445\">said</a>:</p>\n<blockquote>\n<p>right which takes a LocalDefId which brings back to cross-crate unifying of consts</p>\n</blockquote>\n<p>we can encode the <code>AbstractConst</code> for all local constants so we don't rely on the thir for constants from external crates</p>",
        "id": 251364531,
        "sender_full_name": "lcnr",
        "timestamp": 1630406749
    },
    {
        "content": "<blockquote>\n<p>Are there still some noteworthy refactoring of either the <code>thir_body</code> query or the structure of the thir itself planned for unsafeck?</p>\n</blockquote>\n<p>We wanted to try changing the exhaustiveness checker to use the <code>thir_body</code> query instead of re-lowering all patterns (for performance), and that might require some changes to how patterns are represented THIR.</p>",
        "id": 251380748,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1630415120
    },
    {
        "content": "<blockquote>\n<p>it uses <code>Steal&lt;Thir&lt;'tcx&gt;&gt;</code> so mir building (probably) is going to get rid of the thir and all queries which need the hir  have to get called before this</p>\n</blockquote>\n<p>Correct, that's what we do for unsafeck: <a href=\"https://github.com/rust-lang/rust/blob/fe37929e4cba2c5c21e6805805769630c736bc3d/compiler/rustc_mir_build/src/build/mod.rs#L47-L55\">https://github.com/rust-lang/rust/blob/fe37929e4cba2c5c21e6805805769630c736bc3d/compiler/rustc_mir_build/src/build/mod.rs#L47-L55</a></p>",
        "id": 251381528,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1630415438
    }
]