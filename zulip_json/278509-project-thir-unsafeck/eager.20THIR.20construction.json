[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> I'm making this topic to track notes on that -- you said you have a WIP prototype?</p>",
        "id": 227582697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165168
    },
    {
        "content": "<p>Well, I'm still doing the refractor</p>",
        "id": 227582781,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165202
    },
    {
        "content": "<p>Currently I have to fix 145 errors :3</p>",
        "id": 227582815,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165221
    },
    {
        "content": "<p>Fun =)</p>",
        "id": 227582824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165225
    },
    {
        "content": "<p>ok</p>",
        "id": 227582825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165226
    },
    {
        "content": "<p>we should probably add that to the project board I guess</p>",
        "id": 227582844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165236
    },
    {
        "content": "<p>I guess I sort of did</p>",
        "id": 227582853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165240
    },
    {
        "content": "<p>never mind</p>",
        "id": 227582858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165242
    },
    {
        "content": "<p>Oh while you're here</p>",
        "id": 227582889,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165244
    },
    {
        "content": "<p>yep</p>",
        "id": 227582902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165247
    },
    {
        "content": "<p>I don't know if I should be using <code>box</code> expressions</p>",
        "id": 227582932,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165257
    },
    {
        "content": "<p>Basically, my <code>ExprKind</code> holds some <code>Box&lt;Expr&gt;</code></p>",
        "id": 227583052,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165320
    },
    {
        "content": "<p>Which I think should be the expected form, so that it gets dropped as soon as it's not needed?</p>",
        "id": 227583182,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165377
    },
    {
        "content": "<p>And so when I'm building the THIR</p>",
        "id": 227583258,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165435
    },
    {
        "content": "<p>Should I <code>Box::new(expr)</code> or <code>box expr</code>?</p>",
        "id": 227583276,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165448
    },
    {
        "content": "<p>I've never used <code>box x</code> expressions before <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 227583304,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165469
    },
    {
        "content": "<p>use either at your leasure in the compiler</p>",
        "id": 227583419,
        "sender_full_name": "oli",
        "timestamp": 1614165511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> interesting</p>",
        "id": 227583650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165637
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 227583677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165653
    },
    {
        "content": "<p>I hadn't really thought about how we never needed to even <em>box</em> THIR before</p>",
        "id": 227583698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165664
    },
    {
        "content": "<p>I am pondering if we should use a local arena :)</p>",
        "id": 227583711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165670
    },
    {
        "content": "<p>I kind of think yes</p>",
        "id": 227583714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165673
    },
    {
        "content": "<p>but that makes the refactor rather more invasive :)</p>",
        "id": 227583728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165682
    },
    {
        "content": "<p>(you would need <code>'thir</code> everywhere)</p>",
        "id": 227583738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614165692
    },
    {
        "content": "<p>If that sounds good to you, I will do a first pass with <code>Box</code>es</p>",
        "id": 227583943,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614165806
    },
    {
        "content": "<p>I'm wondering if as a first test we could be \"eager\" by walking the THIR and lowering all <code>Thir</code> variants to <code>Mirror</code> variants and not actually change anything else</p>",
        "id": 227584118,
        "sender_full_name": "oli",
        "timestamp": 1614165904
    },
    {
        "content": "<p>once that is done, we can start removing mirror calls everywhere else (which can now be done in small steps instead of everywhere at once)</p>",
        "id": 227584184,
        "sender_full_name": "oli",
        "timestamp": 1614165942
    },
    {
        "content": "<p>and when that is done we can rewrite the THIR construction in small steps, too</p>",
        "id": 227584272,
        "sender_full_name": "oli",
        "timestamp": 1614165976
    },
    {
        "content": "<p>(hopefully avoiding the 145x errors-to-fix situation)</p>",
        "id": 227584286,
        "sender_full_name": "oli",
        "timestamp": 1614165994
    },
    {
        "content": "<p>I'm not sure I understand how that would work, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 227584536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166153
    },
    {
        "content": "<p>We have the current THIR datastructure that mostly uses <code>Thir</code> variants and only mirrors them on demand. So if we want to measure a worst case impact on max-rss, <del>we could grab the root expression that we use to go from THIR to MIR and before doing that conversion we walk said expression </del>.... ok wait, we can indeed just start doing a more eager THIR construction without causing any breakage. Basically we keep the current datastructure, but at every expression level we immediately start calling mirror.</p>",
        "id": 227584881,
        "sender_full_name": "oli",
        "timestamp": 1614166386
    },
    {
        "content": "<p>If we don't touch the datastructures, we should get zero breakage, thus being able to start making THIR construction eager in small steps instead of having to do everything at once</p>",
        "id": 227585032,
        "sender_full_name": "oli",
        "timestamp": 1614166461
    },
    {
        "content": "<p>the problem is</p>",
        "id": 227585216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166597
    },
    {
        "content": "<p>we can't just call mirror unless we store them all in a vector or something?</p>",
        "id": 227585227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166609
    },
    {
        "content": "<p>we could do that</p>",
        "id": 227585230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166613
    },
    {
        "content": "<p>they have to be stored <em>somewhere</em></p>",
        "id": 227585236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166619
    },
    {
        "content": "<p>it would give us a measurement, for sure</p>",
        "id": 227585261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166633
    },
    {
        "content": "<p>a pessimistic one</p>",
        "id": 227585264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614166637
    },
    {
        "content": "<p>I read that on the docs of the <code>Mirror</code> trait, but I don't see how that actually happens in practice (\"that\" being \"getting multiple THIR expressions from a single HIR expression\")</p>",
        "id": 227585397,
        "sender_full_name": "oli",
        "timestamp": 1614166720
    },
    {
        "content": "<p>I'm already deep into the bruteforce refractor</p>",
        "id": 227586149,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614167243
    },
    {
        "content": "<p>:)</p>",
        "id": 227586154,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614167246
    },
    {
        "content": "<p>ok <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 227586155,
        "sender_full_name": "oli",
        "timestamp": 1614167247
    },
    {
        "content": "<p>It won't be pleasant to review though :D</p>",
        "id": 227586170,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614167264
    },
    {
        "content": "<p>Alright, I got rustc to compile</p>",
        "id": 227643422,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614189531
    },
    {
        "content": "<p>I have two failing tests (<code>ui/issues/issue-74564-if-expr-stack-overflow.rs</code> and <code>ui/nll/issue-54382-use-span-of-tail-of-block.rs</code>)</p>",
        "id": 227643456,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614189541
    },
    {
        "content": "<p>Wrap your recursive function calls in the ensure sufficient stack function (on mobile, I forget the name)</p>",
        "id": 227660807,
        "sender_full_name": "oli",
        "timestamp": 1614196390
    },
    {
        "content": "<p>That should fix the failures, as they are likely due to stack overflow in deeply nested expressions</p>",
        "id": 227660954,
        "sender_full_name": "oli",
        "timestamp": 1614196448
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/issues/82495\">#82495</a> for a first perf run</p>",
        "id": 227668131,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614199126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/eager.20THIR.20construction/near/227660807\">said</a>:</p>\n<blockquote>\n<p>Wrap your recursive function calls in the ensure sufficient stack function (on mobile, I forget the name)</p>\n</blockquote>\n<p>I had removed one of those <code>ensure_sufficient_stack</code> calls, so I thought just adding it back would be enough, turns out it isn't</p>",
        "id": 227692823,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614209194
    },
    {
        "content": "<p>Oh, of course</p>",
        "id": 227693127,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614209351
    },
    {
        "content": "<p>Because I don't hit it during THIR construction</p>",
        "id": 227693149,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614209361
    },
    {
        "content": "<p>Welp, perf is... not good</p>",
        "id": 227735935,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614243057
    },
    {
        "content": "<p>I would guess this is related to the use of <code>Box</code> everywhere</p>",
        "id": 227741148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246130
    },
    {
        "content": "<p>that reminds me</p>",
        "id": 227741169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246143
    },
    {
        "content": "<p><em>ah</em></p>",
        "id": 227741242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246188
    },
    {
        "content": "<p>I understand now what <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was saying about using <code>ExprRef::Mirror</code> everywhere</p>",
        "id": 227741264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246198
    },
    {
        "content": "<p>I forgot that <code>ExprRef</code> was an enum</p>",
        "id": 227741280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246207
    },
    {
        "content": "<p>ok, I definitely agree then that this would've been a more incremental path :)</p>",
        "id": 227741328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246227
    },
    {
        "content": "<p>so I think the question is --</p>",
        "id": 227741348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246237
    },
    {
        "content": "<p>is it worth trying to prototype a version based on arenas?</p>",
        "id": 227741389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246244
    },
    {
        "content": "<p>that will require a lot of lifetime threading</p>",
        "id": 227741418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614246251
    },
    {
        "content": "<p>as an experiment it may suffice put an arena into a <code>static</code> and thus just use <code>'static</code> lifetimes on the arena references everywhere</p>",
        "id": 227757703,
        "sender_full_name": "oli",
        "timestamp": 1614255528
    },
    {
        "content": "<p>that will blow up max-rss, but we should see whether it has positive effects on instructions counts</p>",
        "id": 227757784,
        "sender_full_name": "oli",
        "timestamp": 1614255591
    },
    {
        "content": "<p>another idea could be to start out with doing this eager stuff just for patterns, since patterns are being built twice today</p>",
        "id": 227757994,
        "sender_full_name": "oli",
        "timestamp": 1614255717
    },
    {
        "content": "<p>I haven't had time to experiment more on this this week-end unfortunately. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> should there be a concern on the MCP so it doesn't get accepted immediately?</p>",
        "id": 228463372,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614710735
    },
    {
        "content": "<p>i think <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> we should just drop a note on the MCP saying that we are experimenting to see about performance overhead</p>",
        "id": 228464119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614710981
    },
    {
        "content": "<p>I just pushed a commit refractoring <code>Builder</code> to not take <code>thir::Cx</code> (since it shouldn't produce THIR anymore).</p>",
        "id": 228612661,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614785938
    },
    {
        "content": "<p>I don't think it will change perf, but I'm usually so off with predicting perf that maybe it would be worth it to have a perf run?</p>",
        "id": 228612757,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614785981
    },
    {
        "content": "<p><code>&lt;rustc_mir_build::thir::Expr as core::clone::Clone&gt;::clone</code> is one of new things on the profile. Possibly something that was cheap when conversion was lazy, but is expensive now?</p>",
        "id": 228615341,
        "sender_full_name": "tm",
        "timestamp": 1614786799
    },
    {
        "content": "<p>Oh, there a way to get the profile?</p>",
        "id": 228615960,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614786975
    },
    {
        "content": "<p>Ohhhh, by clicking on the different run numbers. That's helpful <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228616050,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614787007
    },
    {
        "content": "<p>Thanks for the help <span class=\"user-mention\" data-user-id=\"352985\">@tm</span>. Indeed I'm surprised that there is need to clone <code>Expr</code>s. I need to dive back into the code</p>",
        "id": 228616254,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614787074
    },
    {
        "content": "<p>Dropping <code>ExprKind</code> also looks quite costly. The suggestions about using arena for the purpose would probably help quite a bit.</p>",
        "id": 228616913,
        "sender_full_name": "tm",
        "timestamp": 1614787274
    },
    {
        "content": "<p>Removing the clones sounds like a good place to start though.</p>",
        "id": 228617131,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614787346
    },
    {
        "content": "<p>Generally, regarding profiling, I mostly run perf locally using CI artifiacts.</p>",
        "id": 228617250,
        "sender_full_name": "tm",
        "timestamp": 1614787388
    },
    {
        "content": "<p>Do try builds produce artifacts for all targets? I don't have access to a linux machine unfortunately</p>",
        "id": 228617534,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614787468
    },
    {
        "content": "<p>Trying out a custom allocator so that the various  <code>Vec</code>s can also use the arena might be interesting.</p>",
        "id": 228617536,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614787468
    },
    {
        "content": "<p>Just linux unfortunately</p>",
        "id": 228617556,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614787478
    },
    {
        "content": "<p>This line is very suspicious: <a href=\"https://github.com/rust-lang/rust/blob/7dddea717ab06132820afb1349585d3f5fa5f8d9/compiler/rustc_mir_build/src/build/expr/stmt.rs#L24\">https://github.com/rust-lang/rust/blob/7dddea717ab06132820afb1349585d3f5fa5f8d9/compiler/rustc_mir_build/src/build/expr/stmt.rs#L24</a></p>",
        "id": 228627391,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614790840
    },
    {
        "content": "<p>I just removed the <code>Clone</code> implementation for <code>thir::Expr</code> for now</p>",
        "id": 228627522,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614790879
    },
    {
        "content": "<p>Which appart from that line is apparently unused :D</p>",
        "id": 228627917,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614791005
    },
    {
        "content": "<p>It's used in a couple of other places when passing values to <code>mirror</code>,  but I guess those are gone now.</p>",
        "id": 228628620,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614791251
    },
    {
        "content": "<p>Right, I see</p>",
        "id": 228628851,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614791335
    },
    {
        "content": "<p>Pushed a commit</p>",
        "id": 228628859,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614791339
    },
    {
        "content": "<p>Can someone start yet another perf run? Or maybe not now, I don't want to flood the perf queue</p>",
        "id": 228628966,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614791386
    },
    {
        "content": "<p>Wow, actually my \"Pull <code>thir::Cx</code> out of the MIR <code>Builder</code>\" commit helped a lot with memory consumption, according to the max-rss benchmarks</p>",
        "id": 228643801,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614796674
    },
    {
        "content": "<p>Now we arguably have an improvement over the old approach instead of the expected regression</p>",
        "id": 228643945,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614796717
    },
    {
        "content": "<p>Next on my list is arena allocation, I'll try to work on that tomorrow</p>",
        "id": 228644211,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614796808
    },
    {
        "content": "<p>The instruction counts are already looking better with that <code>clone()</code> removed</p>",
        "id": 228673546,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614807661
    },
    {
        "content": "<p>But max-rss is looking terrible again</p>",
        "id": 228673784,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614807757
    },
    {
        "content": "<p>Do those memory benchmark have a lot of variation?</p>",
        "id": 228673821,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614807776
    },
    {
        "content": "<p>They have a lot, but those benchmarks look like it's a real regression.</p>",
        "id": 228674036,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614807855
    },
    {
        "content": "<p>Right, but <a href=\"https://perf.rust-lang.org/compare.html?start=939b14334dfec68d85b01b62c1be0172cee03339&amp;end=08d3254f572a6f05bab6fc26045af712e7707394&amp;stat=max-rss\">the previous benchmark</a> looked like it was a real improvement, and nothing should have triggered a regression this bad in the last commit. How could removing some <code>#[derive(Clone)]</code>s and a <code>clone()</code> trigger such a regression?</p>",
        "id": 228674253,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614807961
    },
    {
        "content": "<p>A match-stress-enum instruction count regression is in usefulness checking and quite likely unrelated.</p>",
        "id": 228680238,
        "sender_full_name": "tm",
        "timestamp": 1614810488
    },
    {
        "content": "<p>Usefulness checking does build the THIR for patterns though</p>",
        "id": 228680396,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614810568
    },
    {
        "content": "<p>There is just one function that takes 40% of runtime while being very sensitive to optimizer decision.</p>",
        "id": 228680696,
        "sender_full_name": "tm",
        "timestamp": 1614810707
    },
    {
        "content": "<p>Just pushed a commit with arena allocation</p>",
        "id": 229025599,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614978710
    },
    {
        "content": "<p>Asked for a perf run</p>",
        "id": 229025947,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614978846
    },
    {
        "content": "<p>(I still need to arena-allocate patterns)</p>",
        "id": 229039476,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614985584
    },
    {
        "content": "<p>wow, that's already an improvement. Memory does regress a bit on the stress tests, but that's expected for now.</p>",
        "id": 229073673,
        "sender_full_name": "oli",
        "timestamp": 1615014089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/278509-project-thir-unsafeck/topic/eager.20THIR.20construction/near/229073673\">said</a>:</p>\n<blockquote>\n<p>wow, that's already an improvement. Memory does regress a bit on the stress tests, but that's expected for now.</p>\n</blockquote>\n<p>So you think we should land it before implementing \"build THIR only once for MIR building and exhaustiveness checking\"?</p>",
        "id": 229106989,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1615045319
    },
    {
        "content": "<p>yes</p>",
        "id": 229109566,
        "sender_full_name": "oli",
        "timestamp": 1615047447
    },
    {
        "content": "<p>with big things like this, taking the smallest useful step at a time is the best and fastest way to go forward</p>",
        "id": 229109626,
        "sender_full_name": "oli",
        "timestamp": 1615047488
    },
    {
        "content": "<p>Got it. Let me do some cleanup then.</p>",
        "id": 229112803,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1615050355
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/82495\">#82495</a> is now merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 229899570,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1615486725
    }
]