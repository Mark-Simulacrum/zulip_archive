[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"336739\">@Alastair Reid</span></p>",
        "id": 243190702,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624038360
    },
    {
        "content": "<p>I mean i agree, that having a shared language for even a subset of tools is desirable, but even in the simple 'law' example you presented there are highly non-trivial tradeoffs</p>",
        "id": 243190818,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624038403
    },
    {
        "content": "<p>Have you looked at hte specifications of either my tool (Creusot) or Prusti?</p>",
        "id": 243190857,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624038439
    },
    {
        "content": "<p>I've implemented my prototype language as a standalone crate</p>",
        "id": 243190872,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624038453
    },
    {
        "content": "<p>And while I think that we should work to have a common language, perhaps one day converging towards an 'official' one, I worry about 'de facto' standardizing on the first / easiest thing. <br>\nThere are a few key questions on which i think different tools have different answers/perferences:</p>\n<ul>\n<li>Mutable borrows: How are the represented in specifications, what can you say?</li>\n<li>Representations / Type invariants: Essential for modeling things like vec but very non-trivial </li>\n<li>Marker traits, trait laws: There are also several tricky questions related to this, though I'll have a more complete story / answer to share in mid july after paper deadlines</li>\n</ul>",
        "id": 243191176,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624038645
    },
    {
        "content": "<p>I would love to discuss these issues with the rest of the Rust FV community, perhaps we're all in agreement on the best approaches to these problems, and if not I'm sure the disagreements will be stimulating/insightful.</p>",
        "id": 243191475,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624038873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> Reposting a bit of what I said in the other discussion so that others can see the law example</p>\n<div class=\"codehilite\"><pre><span></span><code>#[law]\nfn R_is_reflexive(x: T) -&gt; bool { R(x, x) }\n</code></pre></div>\n<p>Clearly a limited format since it is limited to (implicit) universal quantification, is limited to what can be expressed in Rust, etc.<br>\nBut... also something that I could imagine a fuzzer checking, symbolic execution, BMC, abstract interpretation and interactive tools being used to prove. And clearly useful to interactive tools but also maybe useful to the automatic verifiers as well. (The last bit is a bit speculative)</p>\n<p>Reminding myself what Prusti looks like from this paper (<a href=\"http://pm.inf.ethz.ch/publications/getpdf.php?bibname=Own&amp;id=AstrauskasMuellerPoliSummers19b.pdf\">http://pm.inf.ethz.ch/publications/getpdf.php?bibname=Own&amp;id=AstrauskasMuellerPoliSummers19b.pdf</a>), it looks like #[requires/ensures/invariant/...] attributes containing a pure expression that can call pure functions, use quantifiers, use 'old' to refer to earlier values of an expression, etc.)<br>\n(Is Creusot similar?)</p>\n<p>I doubt very much that a (broadly construed) Rust FV community are in agreement about approach.<br>\nBut I think that there is value in trying to converge different corners to see what comes out of it.<br>\nAnd I think that writing a spec for &lt;some tricky interesting thing that many people need a spec of&gt; (eg trait laws or bits of libstd) would<br>\n1) Give us something that we could translate to some other notation or compare against another spec<br>\n2) Highlight the limitations of whatever notation people happened to use.</p>",
        "id": 243192788,
        "sender_full_name": "Alastair Reid",
        "timestamp": 1624039695
    },
    {
        "content": "<p>Creusot is _similar_ in the sense that it uses requires/ensures/invariant but the specification language is different.<br>\nIn particular we don't use pledges but instead have a special operator <code>^</code> (pronounced 'fin') which accesses the final value of a mutable borrow. Additionally, the grammar of Creusot is more flexible than that of prusti as it's based on a custom syn-parser,  but thats more of an implementation detail. </p>\n<p>Given that Prusti and Creusot use widly different translations, I think we will diverge quite a bit on the questions of type invariants, whats possible, where and how. <br>\nI also know that we have different solutions for traits based on the no longer implemented master's thesis on traits in Prusti and my own unimplemented approach (its on paper though!).</p>",
        "id": 243193288,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624040022
    },
    {
        "content": "<p>I welcome discussion, I'm just wary of accidental lock-in, once a language is adopted by a tool, changing it is not a fun / easy task which can easily lead to defacto standardization.</p>",
        "id": 243193457,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624040141
    },
    {
        "content": "<p>But a meeting where we present different ways of specifying some simple / interesting problems could be fun</p>",
        "id": 243193554,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624040185
    },
    {
        "content": "<p>I get your point about accidental lock-in.<br>\nI think the way to avoid that is for people to keep talking about what they are doing/planning, how it turned out, etc.</p>\n<p>One of my memories of the Haskell committee (back when there were about 4 independent Haskell compilers/interpreters) was that we kept sharing examples and thinking about how we could take what other teams had done and implement something the same on our system. For some ideas, like GHC's rank-2 polymorphism, this was just fundamentally impossible for some typecheckers. For others like the foreign function call system it was challenging doing the same in a compiler and an interpreter but it was quickly obvious what we should do and what short-term hack we could use until we had the energy.  And for some things, we would suggest a change that made it easier to implement a feature on a broad range of implementations.</p>\n<p>So I think we should try things out, try copying what others have done and/or talk about changes that make it easier to for multiple groups to implement. Some of the problems are obvious in advance (eg I have no clue what a symbolic execution tool or a fuzzer could possibly do with an existential quantifier) - but I bet that there is a lot of scope for shared syntax, shared specs, etc. as long as we share our ideas, design and experience and try to build on what the others are doing when we can.</p>",
        "id": 243201010,
        "sender_full_name": "Alastair Reid",
        "timestamp": 1624045388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"336739\">@Alastair Reid</span> hacspec now better integrates with proptest and quickcheck. However, the properties are not yet translated to the interactive backends. Could your proposal be helpful for hacspec?<br>\nhacspec seems like the smallest non-trivial subset of rust, so it may be a good target to test ideas on.</p>",
        "id": 243301530,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1624193102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382207\">@Bas Spitters</span> Yes, I think that the proptest API could be a good interface that many forms of verifier could use.</p>\n<p>For those unfamiliar with proptest (<a href=\"https://altsysrq.github.io/proptest-book/proptest/tutorial/macro-proptest.html\">https://altsysrq.github.io/proptest-book/proptest/tutorial/macro-proptest.html</a>), it basically adds two things:</p>\n<ul>\n<li>An Embedded Domain Specific Language (EDSL) for defining sets of values (including the usual collection operations: map, filter, etc.)</li>\n<li>A macro proptest!{... fn f(a in S1, b in S2) } for writing universally quantified properties: drawing values a, b from the sets of values S1, S2.<br>\nProperties fail by panicking on some input values: failing an assertion or overflow/bounds error/etc.</li>\n</ul>\n<p>We reimplemented the proptest API as part of our work with KLEE (See <a href=\"https://alastairreid.github.io/why-not-both/\">https://alastairreid.github.io/why-not-both/</a> for a minimal example).<br>\nSome things that we've used it to verify the obvious properties of base64 and some outputs of the Prost protobuf compiler - \"forall x, decode(encode(x)) == x\" and \"forall x, decode(x) != panic\". (And proptest has been used much more extensively.)</p>\n<p>The way we implemented proptest should work for any verifier that has an API to create a symbolic value and to add assumptions about values.<br>\nThis should include other symbolic execution tools and bounded model checkers. (Our code is liberally licensed: <a href=\"https://github.com/project-oak/rust-verification-tools/tree/main/propverify\">https://github.com/project-oak/rust-verification-tools/tree/main/propverify</a>)<br>\nIt obviously supports blackbox fuzz testing (that's what proptest uses).<br>\nI think it could also support coverage-guided (greybox) fuzz testing (not tested - but don't see any obvious obstacle).</p>\n<p>And, since it is just a universally quantified formula, I think that interactive tools would be able to support properties of this form - though it presumably needs some tooling to extract proptest!{...} to Coq/LEAN/etc .</p>",
        "id": 243308297,
        "sender_full_name": "Alastair Reid",
        "timestamp": 1624203823
    },
    {
        "content": "<p>I'd need to look at the details, but I agree, it should hopefully be straightforward to translated those properties to the ITPs. One could even hope to prove some of them automatically (e.g. tactics in Coq, or SMT in EC, F*).</p>\n<p>BTW have you looked at quickspec for haskell. It automatically proposes specifications using quick check. I guess the approach should work for some pure subset of rust too.</p>",
        "id": 243309853,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1624206099
    },
    {
        "content": "<p>Regarding the law example posted by <span class=\"user-mention\" data-user-id=\"336739\">@Alastair Reid</span>, it looks similar to listing 4 (page 3) of this Prusti project proposal: <a href=\"https://ethz.ch/content/dam/ethz/special-interest/infk/chair-program-method/pm/documents/Education/Theses/Johannes%20Schilling%20MS_Description.pdf\">https://ethz.ch/content/dam/ethz/special-interest/infk/chair-program-method/pm/documents/Education/Theses/Johannes%20Schilling%20MS_Description.pdf</a></p>",
        "id": 243353670,
        "sender_full_name": "Federico Poli",
        "timestamp": 1624264828
    },
    {
        "content": "<p>Thanks for the link <span class=\"user-mention\" data-user-id=\"116427\">@Federico Poli</span> <br>\nIt's interesting that it seems that formulae are written in (a subset of) normal Rust syntax. eg listing 3 (page 2) writes quantifiers like this \"forall(|i : usize| ...)\". I don't see any examples like that in the OOPSLA 2019 paper - how did this evolve since then?</p>\n<p>There is an interesting design choice for annotations/properties/formulae of whether</p>\n<ol>\n<li>They are written as an internal EDSL embedded in the Rust code (parsed and typechecker using the Rust typechecker) </li>\n<li>They are written as an external EDSL with a custom parser, typechecker, etc. written in procedural macros, etc.<br>\nBoth choices have really strong pros/cons.</li>\n</ol>\n<p>(btw I should have said that I saw the #[law] syntax and the idea of using functions returning bool in an example by Georg Schmid at EPFL.)</p>",
        "id": 243361353,
        "sender_full_name": "Alastair Reid",
        "timestamp": 1624269930
    },
    {
        "content": "<p>hacspec uses the rust parser, but a standalone type checker. I could imagine such a hybrid approach could be useful for formulas too.</p>",
        "id": 243364691,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1624272309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"336739\">@Alastair Reid</span> The new syntax is described <a href=\"https://viperproject.github.io/prusti-dev/user-guide/verify/predicate.html\">here</a>, it's indeed the rust-function-like <code>forall(|i : usize| ...)</code> quantification. The user guide at that link should be up-to-date with Prusti.</p>",
        "id": 243374653,
        "sender_full_name": "Federico Poli",
        "timestamp": 1624278557
    },
    {
        "content": "<p>Prusti annotations are implemented as procedural macros, which generate (dead) code that compiles only if the user-provided annotation type/borrow checks.</p>",
        "id": 243375003,
        "sender_full_name": "Federico Poli",
        "timestamp": 1624278764
    },
    {
        "content": "<p>In Creusot I chose to use a custom syntax for quantifiers: <code>forall&lt;binder:type&gt; prop</code>, it distinguishes it from normal functions rather than overloading similar but different concepts into the same syntax. <br>\nWriting the proc macro isn't all that problematic and was needed anyways so that we can write prophetic assertions on mutable borrows</p>",
        "id": 243379910,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1624281375
    }
]