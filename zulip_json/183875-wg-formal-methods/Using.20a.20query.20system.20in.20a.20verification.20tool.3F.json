[
    {
        "content": "<p>Hey! Does anyone have experience using a query system like <code>salsa</code> to architecture their tool? I find that integrating with the <code>rustc</code> api pushes you in that direction already. However, I was wondering how a query system could 'extend' the queries from <code>rustc</code>, would you have to wrap all the <code>tcx.*</code> queries?</p>",
        "id": 258817684,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1634987229
    },
    {
        "content": "<p>We tried to adapt <code>salsa</code> and failed because it does not support types with lifetimes.</p>",
        "id": 258822638,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1634994787
    },
    {
        "content": "<p>ah hmm that seems fairly limiting, especially if you want to return data which contains <code>rustc</code> datastructures</p>",
        "id": 259724208,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635591163
    },
    {
        "content": "<p>is <code>salsa</code> what <code>rust-analyzer</code> uses?</p>",
        "id": 259724228,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635591178
    },
    {
        "content": "<p>yes. rust-analyzer doesn't use arenas in the way that rustc does, because it runs continually over long periods of time, so the restriction isn't really a problem</p>",
        "id": 259725092,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1635592387
    },
    {
        "content": "<p>i'm not sure i quite understand why running for a long time would mean that there would be no need to return lifetime dependent data</p>",
        "id": 259725234,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635592614
    },
    {
        "content": "<p>is there any hope that salsa will grow that ability? perhaps thanks to higher rank lifetimes?</p>",
        "id": 259725238,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635592633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Using.20a.20query.20system.20in.20a.20verification.20tool.3F/near/259725234\">said</a>:</p>\n<blockquote>\n<p>i'm not sure i quite understand why running for a long time would mean that there would be no need to return lifetime dependent data</p>\n</blockquote>\n<p>As I understand it, rustc can store a lot of data in arenas that just get cleaned up at the end of the compiler session at once, and it uses references into those arenas a lot. rust-analyzer can't do that: it runs for a long time, and the database evolves continuously, so it can't just clean up once at the end, and there can't be any data that is guaranteed to live for the whole lifetime of the database. Hence it mostly uses individual ref-counted pieces of data that can be created and destroyed independently, so it doesn't need (and isn't able to use) references as much.</p>",
        "id": 259725813,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1635593451
    },
    {
        "content": "<p>I'm not sure what lifetimes data returned by a salsa query <em>could</em> depend on. But I'm not an expert in salsa, and maybe there have been considerations about it</p>",
        "id": 259725883,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1635593532
    },
    {
        "content": "<p>Well the lifetime of the database, right?</p>",
        "id": 259977357,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635849391
    },
    {
        "content": "<p>I see the difference now, and honestly a verification tool could fall in either camp though <em>ideally</em> the latter</p>",
        "id": 259977405,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635849423
    },
    {
        "content": "<p>but fundamentally I would need queries that return data which comes from rustc (and thus has a lifetime)</p>",
        "id": 259977440,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635849447
    },
    {
        "content": "<p>I guess as long as I'm using the rustc api, i'm going to be going against the grain of salsa. Perhaps I should see if I can use the rustc query system instead</p>",
        "id": 259977617,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635849530
    },
    {
        "content": "<p>argh, it seems to not really be extensible, the <code>rustc_query_system</code> crate (reasonably) assumes it will only be used in the context of rustc</p>",
        "id": 259978933,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635850341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Using.20a.20query.20system.20in.20a.20verification.20tool.3F/near/259977357\">said</a>:</p>\n<blockquote>\n<p>Well the lifetime of the database, right?</p>\n</blockquote>\n<p>right, but I don't really see how there could be any data with the database's lifetime that a query could have access to, since you're writing the queries only with access to the database trait</p>",
        "id": 259985181,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1635854299
    },
    {
        "content": "<p>something something HRTB?</p>",
        "id": 260301279,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1636045033
    }
]