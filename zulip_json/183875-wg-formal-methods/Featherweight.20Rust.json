[
    {
        "content": "<p>Hello everyone,<br>\nI am not sure it is the right place to ask this, but: is the analog of Featherweight Java had been define for Rust ?</p>",
        "id": 194432229,
        "sender_full_name": "Nicolas Osborne",
        "timestamp": 1587126751
    },
    {
        "content": "<p><a href=\"https://plv.mpi-sws.org/rustbelt/\" title=\"https://plv.mpi-sws.org/rustbelt/\">https://plv.mpi-sws.org/rustbelt/</a></p>",
        "id": 194433566,
        "sender_full_name": "bjorn3",
        "timestamp": 1587127423
    },
    {
        "content": "<p>Yes, this is a fascinating project. But if I remember correctly, they define Lambda-Rust which is a separation logic and is expressed in continuation passing style. I was thinking of a language close to Rust but with less features.</p>",
        "id": 194435364,
        "sender_full_name": "Nicolas Osborne",
        "timestamp": 1587128309
    },
    {
        "content": "<p>You may be interested in e.g. sealed rust</p>",
        "id": 194435780,
        "sender_full_name": "simulacrum",
        "timestamp": 1587128466
    },
    {
        "content": "<p>As far as I know sealed rust is still a concept.</p>",
        "id": 194436113,
        "sender_full_name": "bjorn3",
        "timestamp": 1587128589
    },
    {
        "content": "<p>yes, though there's active work on it</p>",
        "id": 194436160,
        "sender_full_name": "simulacrum",
        "timestamp": 1587128617
    },
    {
        "content": "<p>This is exactly what I was thinking about ! Thanks.</p>",
        "id": 194436242,
        "sender_full_name": "Nicolas Osborne",
        "timestamp": 1587128653
    },
    {
        "content": "<p><a href=\"https://arxiv.org/pdf/1903.00982.pdf\" title=\"https://arxiv.org/pdf/1903.00982.pdf\">https://arxiv.org/pdf/1903.00982.pdf</a></p>",
        "id": 194550082,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1587223756
    },
    {
        "content": "<p>one of the authors, Niko Matsakis, is in this chat - you can talk to them if you wish.</p>",
        "id": 194550268,
        "sender_full_name": "Shnatsel",
        "timestamp": 1587224004
    },
    {
        "content": "<p>That's even better. Many thanks.</p>",
        "id": 194550956,
        "sender_full_name": "Nicolas Osborne",
        "timestamp": 1587224850
    },
    {
        "content": "<p>Note though that that paper contains some flaws (it's a preprint, not a reviewed published paper). the authors are working on a significantly improved next version. not sure if that is already available somewhere.</p>",
        "id": 194584591,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span>, another author of that paper, is also here in this chat and might know ;)</p>",
        "id": 194584607,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282467
    },
    {
        "content": "<p>and btw I'm one of the authors of the rustbelt paper mentioned above</p>",
        "id": 194584612,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282480
    },
    {
        "content": "<p>I really enjoyed the rustbelt paper (I didn't understand all of it, I have to work a bit more :-) )</p>\n<p>In the context of the compilation course for my master degree, I am implementing something like a borrow-checker. But, on the side, I am interested in investigating whether it is possible to implement a compilator \"correct by construction\" for a very little language (like Imp in <em>Software Foundations</em>) in Agda. (Here, correct means with semantic preservation).</p>\n<p>For now, I am just experimenting in expressing syntax and semantics.  The first step would be to have a type-checker correct by construction like what did McBride and McKinna for the simply typed lambda calculus in <em>The view from the left</em>. So, I am drawn in puting more features in the language like functions and affine type system.</p>",
        "id": 194591078,
        "sender_full_name": "Nicolas Osborne",
        "timestamp": 1587293088
    },
    {
        "content": "<p>that sounds like a fun project :D</p>",
        "id": 194592828,
        "sender_full_name": "RalfJ",
        "timestamp": 1587295586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Featherweight.20Rust/near/194584607\" title=\"#narrow/stream/183875-wg-formal-methods/topic/Featherweight.20Rust/near/194584607\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127262\">Aaron Weiss</span>, another author of that paper, is also here in this chat and might know ;)</p>\n</blockquote>\n<p>I am indeed here, and happy to answer any questions. There has indeed been a lot of fixes to Oxide since that draft was uploaded, but I will hopefully be uploading a new (and hopefully much-improved) draft in the next few weeks.</p>",
        "id": 194689160,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1587395713
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span>. Is the updated draft available somewhere? I’m in a reasearch group that’s very interested in the intersection between the borrow checker and software verification (we’re aware and very keen of Prusti).</p>",
        "id": 201034858,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1592322422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116852\">Andrea Lattuada</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Featherweight.20Rust/near/201034858\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"127262\">Aaron Weiss</span>. Is the updated draft available somewhere? I’m in a reasearch group that’s very interested in the intersection between the borrow checker and software verification (we’re aware and very keen of Prusti).</p>\n</blockquote>\n<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Is an updated draft of the Oxide paper available somewhere?</p>",
        "id": 201266090,
        "sender_full_name": "Andrea Lattuada",
        "timestamp": 1592486388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266274\">@Nicolas Osborne</span>:</p>\n<blockquote>\n<p>But, on the side, I am interested in investigating whether it is possible to implement a compilator \"correct by construction\" for a very little language (like Imp in <em>Software Foundations</em>) in Agda. (Here, correct means with semantic preservation).</p>\n</blockquote>\n<p>I read <a href=\"https://people.csail.mit.edu/jgross/personal-website/papers/2015-jgross-thesis.pdf\">this thesis</a> a while back, which you may find interesting, regardless of what it is you actually build. It draws some parallels between proof trees and parse trees in Coq, yielding verified parsers as a result.</p>\n<blockquote>\n<p>For now, I am just experimenting in expressing syntax and semantics.  The first step would be to have a type-checker correct by construction like what did McBride and McKinna for the simply typed lambda calculus in <em>The view from the left</em>. So, I am drawn in puting more features in the language like functions and affine type system.</p>\n</blockquote>\n<p>Neat, I haven't seen that paper! How are you parsing and evaluating the syntax? I've used <a href=\"https://github.com/lalrpop/lalrpop\">LALRPOP</a> in the past for very simple things and been really happy, and I've seen starts to the full Rust language in it.</p>",
        "id": 205803173,
        "sender_full_name": "Nathan Lilienthal",
        "timestamp": 1596466359
    },
    {
        "content": "<p>did you mean to reply to this topic? i can't see the messages you were quoting but they seem interesting</p>",
        "id": 205807249,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1596468065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> I did mean to reply here, though I'll admit to being a new Zulip user who may be doing it wrong. IDK why the messages aren't visible, perhaps I loaded them a while back without realizing.</p>",
        "id": 205808068,
        "sender_full_name": "Nathan Lilienthal",
        "timestamp": 1596468487
    },
    {
        "content": "<p>btw we have an update to the previous question: Aaron mentioned earlier that they would upload the latest Oxide draft very soon (depending on internet connectivity)</p>",
        "id": 205841939,
        "sender_full_name": "lqd",
        "timestamp": 1596485633
    },
    {
        "content": "<p>Sorry, I haven’t been active on Zulip! Didn’t have it installed on anything, but the latest draft is now on my website and should hit arXiv soon (and includes the full appendix this time): <a href=\"https://aaronweiss.us/pubs/draft20-oxide.pdf\">https://aaronweiss.us/pubs/draft20-oxide.pdf</a></p>",
        "id": 206875812,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1597355220
    },
    {
        "content": "<p>Feel free to ping me here (I’ll actually see it now) or email me if you have any questions, comments, etc.</p>",
        "id": 206875863,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1597355261
    },
    {
        "content": "<p>The delay from when I had said “next few weeks” was the result of stumbling onto a bunch more work to be done, unfortunately.</p>",
        "id": 206875956,
        "sender_full_name": "Aaron Weiss",
        "timestamp": 1597355309
    },
    {
        "content": "<p>(just in case people haven't seen it there's also a repo for the implementation and test suite at <a href=\"https://github.com/aatxe/oxide\">https://github.com/aatxe/oxide</a>)</p>",
        "id": 206911657,
        "sender_full_name": "lqd",
        "timestamp": 1597397059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245809\">@Nathan Lilienthal</span> <br>\nSorry for the late answer.<br>\nThanks for the pointers. Actually, I don't really bother with parsing for now. I just work on abstract syntax, but this is good to know.</p>",
        "id": 207510796,
        "sender_full_name": "Nicolas Osborne",
        "timestamp": 1597921582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127262\">@Aaron Weiss</span> Thanks for the interesting work on Oxide. What is the status of your Coq formalization?</p>",
        "id": 223485582,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1611221539
    }
]