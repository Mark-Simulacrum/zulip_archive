[
    {
        "content": "<p>I'd like to define a specification language as an extension of rust syntax (adding quantifiers for example, at the very least).. but since my tool works from mir all variables have been turned into locals already. what's the best way to turn variables in the specs to locals?</p>",
        "id": 202075160,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593168380
    },
    {
        "content": "<p>The very hackish solution would be to take the mir debuginfo and lookup the entry/entries (<code>let a = 0; let a = 1;</code> will give two entries) that match the name of the variable and then look at the place to get the local.</p>\n<p>The better solution would be to thread the extension all the way through ast and hir up to mir. So for example an assertion would be a <code>rustc::mir::StatementKind::ProofAssertion</code>. The hir gets turned into mir at <a href=\"https://github.com/rust-lang/rust/tree/master/src/librustc_mir_build\">https://github.com/rust-lang/rust/tree/master/src/librustc_mir_build</a>.</p>",
        "id": 202079338,
        "sender_full_name": "bjorn3",
        "timestamp": 1593171514
    },
    {
        "content": "<p>I'm hesitant to make modifications to the compiler, as much as possible I'd like to build things to be  easy to keep up to date.</p>",
        "id": 202080723,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593172767
    },
    {
        "content": "<p>I do wish there was a fairly generic 'dummy' statement though :P that way I could easily lower invariants / assertions. But it'd be useless for anything except translation to a formal verif tool</p>",
        "id": 202080862,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593172881
    },
    {
        "content": "<blockquote>\n<p>I do wish there was a fairly generic 'dummy' statement though</p>\n</blockquote>\n<p>I agree that this would be nice. Similarly to how Miri virtual machine has a <a href=\"https://github.com/rust-lang/rust/blob/ff4a2533a0720f9cdd86e02eafa3725f07aa7752/src/librustc_mir/interpret/memory.rs#L35\">custom memory variant</a> that can be used by the extensions for their own purpose.</p>",
        "id": 202103055,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1593184384
    },
    {
        "content": "<p>the statement could also just be thrown out at the beginning of optimization so future passes don't need to care at all</p>",
        "id": 202106982,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593186218
    },
    {
        "content": "<p>Miri's <code>EvalContext</code> is generic over the <code>Machine</code> trait. <code>Mir</code> as returned by <code>mir_built</code> or any other query can't be generic.</p>",
        "id": 202107363,
        "sender_full_name": "bjorn3",
        "timestamp": 1593186417
    },
    {
        "content": "<p>Also you have to teach <code>rustc_mir_build</code> to construct any custom statements, so you have to change rustc anyway.</p>",
        "id": 202107461,
        "sender_full_name": "bjorn3",
        "timestamp": 1593186480
    },
    {
        "content": "<p>yea, I'm just saying that I'd rather not fork the compiler to add a custom statement. If there were a 'dummy' statement in mainline that would be useful though</p>",
        "id": 202108175,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593186818
    },
    {
        "content": "<p>i know that's not going to happen because the burden is unjustified</p>",
        "id": 202108501,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593186977
    },
    {
        "content": "<p>How about just consulting <code>var_debug_info</code> to find the local id for the variable?<br>\nWhen there are multiple variables with the same name it is a bit tough, though.</p>",
        "id": 202184582,
        "sender_full_name": "Yusuke Matsushita",
        "timestamp": 1593262017
    },
    {
        "content": "<p>yea thats what i'm going to do for now it's just nicer to have a 'proper' solution</p>",
        "id": 202191242,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593271350
    },
    {
        "content": "<p>I see. I don't think that MIR currently has a nice solution to that. I hope Rust will offer better native support for program analysis.</p>",
        "id": 202198057,
        "sender_full_name": "Yusuke Matsushita",
        "timestamp": 1593281347
    },
    {
        "content": "<p>I understand like 40% of this conversation, but I'm thinking that maybe you could bring it up in a meeting or something. Maybe write a proposal. I don't know how this would work. </p>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> this is like the third time I ping you this week, should I stop?<br>\nAnywho. How would you recommend this idea to proceed? A MCP, a RFC, a meeting...? What are the steps for getting this going? I'm sorry I have to ask but I don't know the formalities x3</p>",
        "id": 202205164,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593292232
    },
    {
        "content": "<p>My question in the end is: what's the road from now to getting something like these program analysis hooks into the compiler?</p>",
        "id": 202205173,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593292277
    },
    {
        "content": "<p>I'm afraid you are asking the wrong person^^ I suggest you talk to the compiler team for that (of which I am not a member)</p>",
        "id": 202248739,
        "sender_full_name": "RalfJ",
        "timestamp": 1593369402
    },
    {
        "content": "<p>I can help a lot with the theory and formal side of Rust, but when it comes to actual implementation the only two folders I really know are <code>src/librustc_mir/interpret</code> and <code>src/tools/miri</code> ;)</p>",
        "id": 202248753,
        "sender_full_name": "RalfJ",
        "timestamp": 1593369456
    },
    {
        "content": "<p>You are <em>not</em> a member? XD Ralf, with the literature that's behind you, and the level of participation that you have, I had assumed you were!</p>",
        "id": 202256732,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593380321
    },
    {
        "content": "<p>Well, I will see what I can do. I'm not sure who is the right person to ask who is also familiar with formal methods and specifications. Maybe Niko Matsakis is a good option?</p>",
        "id": 202256773,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593380396
    },
    {
        "content": "<p>Or maybe Eddyb... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 202256819,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593380415
    },
    {
        "content": "<p>I'm working on a PoC patch to expose region information as well (which is the other big thing that would be great for verif)</p>",
        "id": 202346914,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593453751
    },
    {
        "content": "<p>I don't have a ton of time rn since i'm writing but afterwards i'd like to get that finished up</p>",
        "id": 202346970,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593453776
    },
    {
        "content": "<p>figuring out how to expose region info would be terrific</p>",
        "id": 202347020,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593453796
    },
    {
        "content": "<p>and sorry by region i mean lifetime</p>",
        "id": 202347082,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593453828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> halp, here we need some guidance and you are <em>the</em> lifetime expert that I know of.</p>",
        "id": 202347263,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593453931
    },
    {
        "content": "<p>I was just planning on exposing a summary of lifetime info as  part of the borrowck results</p>",
        "id": 202354978,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593457730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> I was just reading on this survey of formal verification tools for Rust, maybe some of them use or create the kind of hooks that you need? :3 <a href=\"https://alastairreid.github.io/rust-verification-tools/\">https://alastairreid.github.io/rust-verification-tools/</a></p>",
        "id": 202484580,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593545933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> I'm not sure exactly what you're asking for but I would like us to be moving towads providing more information. That said, the approach I've been thinking of  -- <a href=\"http://smallcultfollowing.com/babysteps/blog/2020/04/09/libraryification/\">which I outlined here</a> -- is kind of a \"long game\"</p>",
        "id": 202487080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593547198
    },
    {
        "content": "<p>in the case of regions in particular I was expecting to expose a structured interface via a polonius-like setup</p>",
        "id": 202487147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1593547210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212698\">@Félix Fischer</span> that's a cool list. As far as I know most tools hook into the <code>mir_validated</code> query and then manually run polonius to extract things like borrow information. For annotations Prusti still uses some kind of hacky stuff but essentially places markers in the code that it can then look up</p>",
        "id": 202495820,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593551694
    },
    {
        "content": "<p>having access to structured region information would be amazing and I hope it'll be a side-effect of polonius integration.</p>",
        "id": 202496116,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1593551807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"212698\">Félix Fischer</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/.22lowering.22.20specification.20language.20to.20MIR/near/202256732\">said</a>:</p>\n<blockquote>\n<p>You are <em>not</em> a member? XD Ralf, with the literature that's behind you, and the level of participation that you have, I had assumed you were!</p>\n</blockquote>\n<p>I am a member of the UCG WG and sort-of an advisor to the lang team, which fits the literature \"behind me\". ;) the compiler team is a whole different game though. They architect the compiler. I hardly know the compiler sources outside the <code>interpret</code> folder(s).</p>",
        "id": 202909335,
        "sender_full_name": "RalfJ",
        "timestamp": 1593933364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/.22lowering.22.20specification.20language.20to.20MIR/near/202346970\">said</a>:</p>\n<blockquote>\n<p>I don't have a ton of time rn since i'm writing but afterwards i'd like to get that finished up</p>\n</blockquote>\n<p>ah, POPL deadline? ;)</p>",
        "id": 202909342,
        "sender_full_name": "RalfJ",
        "timestamp": 1593933395
    },
    {
        "content": "<p>of a sorts ;) have to finish my master's thesis so i can start my PhD one haha</p>",
        "id": 202977060,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594034428
    }
]