[
    {
        "content": "<p>Some of you might find this recently submitted paper interesting. :)<br>\n<a href=\"http://plv.mpi-sws.org/rustbelt/ghostcell/\">http://plv.mpi-sws.org/rustbelt/ghostcell/</a></p>",
        "id": 229129349,
        "sender_full_name": "RalfJ",
        "timestamp": 1615064919
    },
    {
        "content": "<p>Interesting! <br>\nThe distance between rustbelt and real rust still seems fairly big. Do you think a standardization initiative like Ferrocene could help?</p>",
        "id": 229189696,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1615125643
    },
    {
        "content": "<p>Minor typo in the implementation: the doc comments for the <code>Send</code> and <code>Sync</code> <code>impl</code>s for <code>GhostCell</code> <a href=\"https://gitlab.mpi-sws.org/FP/ghostcell/-/blob/master/ghostcell/src/lib.rs#L95-105\">are swapped</a>.</p>",
        "id": 229200007,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1615134790
    },
    {
        "content": "<p>Also, is there a reason why the <code>borrow</code> and <code>borrow_mut</code> methods are not implemented for all <code>T: ?Sized</code> types?</p>",
        "id": 229200020,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1615134840
    },
    {
        "content": "<p>And I don't understand the choice of implementation for <code>InvariantLifetime</code>. Were it up to me, I would have chosen an implementation that only makes the parameter invariant and doesn't also disable <code>Send</code> and <code>Sync</code>. But then the bounds <code>for&lt;'id&gt; GhostToken&lt;'id&gt; : Send + Sync</code> and <code>for&lt;'id, T: Send&gt; GhostCell&lt;'id, T&gt; : Send</code> would be automatic and it is not clear to me whether this is a coincidence.</p>",
        "id": 229201417,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1615136113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369545\">Gwaihir Thorondorsen</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Branding.20(.22generative.20types.22).20in.20Rust/near/229200007\">said</a>:</p>\n<blockquote>\n<p>Minor typo in the implementation: the doc comments for the <code>Send</code> and <code>Sync</code> <code>impl</code>s for <code>GhostCell</code> <a href=\"https://gitlab.mpi-sws.org/FP/ghostcell/-/blob/master/ghostcell/src/lib.rs#L95-105\">are swapped</a>.</p>\n</blockquote>\n<p>good catch, thanks!</p>",
        "id": 230152960,
        "sender_full_name": "RalfJ",
        "timestamp": 1615630317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369545\">Gwaihir Thorondorsen</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Branding.20(.22generative.20types.22).20in.20Rust/near/229200020\">said</a>:</p>\n<blockquote>\n<p>Also, is there a reason why the <code>borrow</code> and <code>borrow_mut</code> methods are not implemented for all <code>T: ?Sized</code> types?</p>\n</blockquote>\n<p>not really, we tend to not think much about unsized types^^ (and our formalization can't handle them)</p>",
        "id": 230153007,
        "sender_full_name": "RalfJ",
        "timestamp": 1615630337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369545\">Gwaihir Thorondorsen</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Branding.20(.22generative.20types.22).20in.20Rust/near/229201417\">said</a>:</p>\n<blockquote>\n<p>And I don't understand the choice of implementation for <code>InvariantLifetime</code>. Were it up to me, I would have chosen an implementation that only makes the parameter invariant and doesn't also disable <code>Send</code> and <code>Sync</code>. But then the bounds <code>for&lt;'id&gt; GhostToken&lt;'id&gt; : Send + Sync</code> and <code>for&lt;'id, T: Send&gt; GhostCell&lt;'id, T&gt; : Send</code> would be automatic and it is not clear to me whether this is a coincidence.</p>\n</blockquote>\n<p>for <code>GhostCell</code>, there's an <code>UnsafeCell</code>, doesnt that kill Send+Sync?<br>\nanyway I think explicit <code>Send</code>+<code>Sync</code> are always preferable. leaving it implicit <a href=\"https://www.ralfj.de/blog/2017/06/09/mutexguard-sync.html\">quickly leads to bugs like this</a>.</p>",
        "id": 230153049,
        "sender_full_name": "RalfJ",
        "timestamp": 1615630415
    },
    {
        "content": "<p>automatic Send/Sync makes a lot of sense in safe code, but once you write unsafe code with custom datatype invariants (\"unsafe fields\"), you <em>need</em> to think about whether that invariant does anything thread-local. explicit send/sync impls acknowledge that they do not.</p>",
        "id": 230153110,
        "sender_full_name": "RalfJ",
        "timestamp": 1615630461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"382207\">Bas Spitters</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Branding.20(.22generative.20types.22).20in.20Rust/near/229189696\">said</a>:</p>\n<blockquote>\n<p>Interesting! <br>\nThe distance between rustbelt and real rust still seems fairly big. Do you think a standardization initiative like Ferrocene could help?</p>\n</blockquote>\n<p>I think the largest chunk of work here is something that has to happen on the rustbelt side. ;) we have ideas for making lambda-rust more like MIR, but it turns out \"places+values\" (\"lvalues +rvalues\") make the type system a lot more complicated to state and we haven't reach a satisfactory formulation of that yet. also we should make our lifetime analysis closer to the borrow checker; I am putting a lot of hope into Polonious and its formalization via Oxide for that.</p>",
        "id": 230153215,
        "sender_full_name": "RalfJ",
        "timestamp": 1615630616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Thanks. I had the impression that Oxide was a bit stalled. I'm happy that you're impression is different.<br>\nWe're working on verified extraction from Coq to rust, as part of <a href=\"https://github.com/AU-COBRA/ConCert\">https://github.com/AU-COBRA/ConCert</a><br>\nWe need a reference saying that the \"functional part\" of rust satisfies weak CbV semantics. It should be \"obvious\", but I haven't seen it stated. Have you?</p>",
        "id": 230159159,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1615637959
    },
    {
        "content": "<p>I dont know the status of Oxide, indeed there hasn't been much news recently but I am still keeping my hopes up :)</p>",
        "id": 230159325,
        "sender_full_name": "RalfJ",
        "timestamp": 1615638124
    },
    {
        "content": "<blockquote>\n<p>We need a reference saying that the \"functional part\" of rust satisfies weak CbV semantics. It should be \"obvious\", but I haven't seen it stated. Have you?</p>\n</blockquote>\n<p>No I haven't. Given an imperative language semantics, how would one usually go about formally stating (and proving) this?</p>",
        "id": 230160190,
        "sender_full_name": "RalfJ",
        "timestamp": 1615639133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Branding.20(.22generative.20types.22).20in.20Rust/near/230153049\">said</a>:</p>\n<blockquote>\n<p>for <code>GhostCell</code>, there's an <code>UnsafeCell</code>, doesnt that kill Send+Sync?</p>\n</blockquote>\n<p>The <code>UnsafeCell&lt;T&gt;</code> <a href=\"https://doc.rust-lang.org/nightly/std/cell/struct.UnsafeCell.html#impl-Sync\">definitely is <code>!Sync</code> for every <code>T</code></a>, but it <a href=\"https://doc.rust-lang.org/nightly/std/cell/struct.UnsafeCell.html#impl-Send\">is <code>Send</code> whenever <code>T: Send</code></a>. Considering <code>UnsafeCell&lt;T&gt;</code> and <code>T</code> are the same <em>when owned</em>, I guess that makes sense. (I had the same reaction but went extra careful and checked the docs.)</p>",
        "id": 230160871,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1615639861
    },
    {
        "content": "<p>The caution w.r.t. <code>Send</code> &amp; <code>Sync</code> in <code>unsafe</code> code makes sense; I guess I was just surprised the concerns weren't separated (which I now understand is just very nitpicky).</p>",
        "id": 230160973,
        "sender_full_name": "Gwaihir Thorondorsen",
        "timestamp": 1615639967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"369545\">Gwaihir Thorondorsen</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Branding.20(.22generative.20types.22).20in.20Rust/near/230160973\">said</a>:</p>\n<blockquote>\n<p>The caution w.r.t. <code>Send</code> &amp; <code>Sync</code> in <code>unsafe</code> code makes sense; I guess I was just surprised the concerns weren't separated (which I now understand is just very nitpicky).</p>\n</blockquote>\n<p>to be fair we didnt really think about it so deeply ;)</p>",
        "id": 230161445,
        "sender_full_name": "RalfJ",
        "timestamp": 1615640496
    },
    {
        "content": "<p>I did not realize that <code>InvariantLifetime</code> kills Send+Sync because we weren't concerned with auto-deriving that anyway</p>",
        "id": 230161505,
        "sender_full_name": "RalfJ",
        "timestamp": 1615640531
    },
    {
        "content": "<p>I find unfortunate that we don't have a syntax to express <code>GhostToken::new</code> as returning a <code>GhostToken&lt;'id&gt;</code> for some unique non-unifiable lifetime <code>'id</code>. This would allow making this idiom easier to use.</p>",
        "id": 230560683,
        "sender_full_name": "cjgillot",
        "timestamp": 1615917140
    },
    {
        "content": "<p>yeah, being able to return a fresh lifetime would be nice. <code>fn foo() -&gt; exists&lt;'a&gt; T&lt;'a&gt;</code>...</p>",
        "id": 230560834,
        "sender_full_name": "RalfJ",
        "timestamp": 1615917200
    }
]