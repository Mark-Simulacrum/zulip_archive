[
    {
        "content": "<p>Hey, if anyone's interested, here's the report from my master's internship / final project. I developed a translation from a MIR-like language to a WhyML-like language and proved it correct. It uses the same representation of borrows shown in RustHorn as a pair of a current and 'final' value.</p>",
        "id": 209486519,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599641766
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/vVQNWxC9ZALl65oHkmB4Lrbr/paper.pdf\">paper.pdf</a></p>",
        "id": 209486522,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599641770
    },
    {
        "content": "<p>I'll be starting from this for my PhD thesis in october.</p>",
        "id": 209486563,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599641805
    },
    {
        "content": "<p>There was a page limit of 18 pages on the report so if anyone has questions don't hesitate to ask.</p>",
        "id": 209486630,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599641851
    },
    {
        "content": "<p>Do you know how this relates to Sebastian Ullrich's Electrolysis?<br>\n(Electrolysis translated Rust to Lean so that you could verify the code. My memory was that it also used ideas from RustHorn - but I don't see any mention so I must be imagining it.)</p>\n<p>Blog: <a href=\"https://kha.github.io/2016/07/22/formally-verifying-rusts-binary-search.html\">https://kha.github.io/2016/07/22/formally-verifying-rusts-binary-search.html</a><br>\nMasters thesis: <a href=\"https://pp.ipd.kit.edu/uploads/publikationen/ullrich16masterarbeit.pdf\">https://pp.ipd.kit.edu/uploads/publikationen/ullrich16masterarbeit.pdf</a><br>\nSlides: <a href=\"http://kha.github.io/electrolysis/presentation.pdf\">http://kha.github.io/electrolysis/presentation.pdf</a><br>\nCode: <a href=\"https://github.com/Kha/electrolysis\">https://github.com/Kha/electrolysis</a> (no longer being developed)</p>",
        "id": 209549274,
        "sender_full_name": "Alastair Reid",
        "timestamp": 1599676024
    },
    {
        "content": "<p>I'm familiar with the generalities of electrolysis but not in detail. It uses a rather different translation and representation for borrows though</p>",
        "id": 209561857,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599682554
    },
    {
        "content": "<p>it predates the work on RustHorn by several years though</p>",
        "id": 209561995,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599682621
    },
    {
        "content": "<p>It does reference RustBelt which was ongoing work at the time and formalized a Rust kernel language (lambda rust)</p>",
        "id": 209562060,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599682663
    },
    {
        "content": "<p>In electrolysis borrows are represented by lenses into a structure  whereas the key detail of both our and RustHorn's approach is to represent mutable borrows as a pair of a current and final value</p>",
        "id": 209562541,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599682883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> nice work :) the RustHorn idea is ingenious, and I am very curious what will come out of that.</p>",
        "id": 209760340,
        "sender_full_name": "RalfJ",
        "timestamp": 1599817627
    },
    {
        "content": "<p>One thing I am wondering -- you write that it is crucial that you know when a lifetime ends. I do not have a deep understanding of Polonius, but from what I gather, the notion of lifetime there isn't really associated with a region of code any more, so there's no (fixed) \"place where a lifetime ends\". That is one reason why Stacked Borrows, unlike my earlier approach, does not rely any more on such a place being syntactically fixed. Do you have any thoughts for how to handle that with your approach?</p>",
        "id": 209760546,
        "sender_full_name": "RalfJ",
        "timestamp": 1599817709
    },
    {
        "content": "<p>I mean in polonius the regions (lifetimes) still have a static subgraph they are active over</p>",
        "id": 209869406,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599896348
    },
    {
        "content": "<p>I mean in polonius the regions (lifetimes) still have a static subgraph they are active over</p>",
        "id": 209869408,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599896361
    },
    {
        "content": "<p>Afaik</p>",
        "id": 209869409,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599896361
    },
    {
        "content": "<p>With this approach  we only require that each edge out of that subgraph is a thaw instruction for the associated lifetime</p>",
        "id": 209869453,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599896428
    },
    {
        "content": "<p>We absolutely do not require thee to be a unique thaw instruction, so it’s possible to encode NLL programs</p>",
        "id": 209869464,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599896472
    },
    {
        "content": "<p>Stacked Borrows is another thing though since we’d need a static over approximation</p>",
        "id": 209869469,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599896502
    },
    {
        "content": "<p>Which is something Vytautas is looking at I believe</p>",
        "id": 209869483,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1599896522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/183875-wg-formal-methods/topic/Master's.20Work/near/209869469\">said</a>:</p>\n<blockquote>\n<p>Stacked Borrows is another thing though since we’d need a static over approximation</p>\n</blockquote>\n<p>that static overapproximation already exists, it is called the borrow checker ;)</p>",
        "id": 209870891,
        "sender_full_name": "RalfJ",
        "timestamp": 1599898929
    }
]