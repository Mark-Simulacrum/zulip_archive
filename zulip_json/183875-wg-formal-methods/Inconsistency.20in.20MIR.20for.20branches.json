[
    {
        "content": "<p>This isn't a correctness issue, but i noticed something odd in the MIR for several branches, if you move into a borrow in a branch, all but one branch will be compiled to a reborrow. It's probably not clear when I say it like this but it should be with MIR:</p>\n<p>Given the rust code:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main () {\n  let mut a = 10;\n  let mut b = 10;\n  let mut c = 10;\n\n  let x = &amp;mut a;\n  let y = &amp;mut b;\n  let z = &amp;mut c;\n  let mut w;\n\n\n  match 3 {\n    1 =&gt; { * x = 6; w = x; }\n    2 =&gt; { * y = 7; w = y; }\n    _ =&gt; { * z = 8; w = z; }\n  }\n\n  * w = 5;\n}\n</code></pre></div>\n\n\n<p>We get the MIR: (annotated with polonius loan liveness)</p>\n<div class=\"codehilite\"><pre><span></span><code>StorageLive(_1)                     live=[L5, L6] dying=[]\n_1 = const 10_i32                   live=[L5, L6] dying=[]\nFakeRead(ForLet, _1)                live=[L5, L6] dying=[]\nStorageLive(_2)                     live=[L5, L6] dying=[]\n_2 = const 10_i32                   live=[L5, L6] dying=[]\nFakeRead(ForLet, _2)                live=[L5, L6] dying=[]\nStorageLive(_3)                     live=[L5, L6] dying=[]\n_3 = const 10_i32                   live=[L5, L6] dying=[]\nFakeRead(ForLet, _3)                live=[L5, L6] dying=[]\nStorageLive(_4)                     live=[L5, L6] dying=[]\n_4 = &amp;mut _1                        live=[L5, L6] dying=[]\nFakeRead(ForLet, _4)                live=[L0, L5, L6] dying=[]\nStorageLive(_5)                     live=[L0, L5, L6] dying=[]\n_5 = &amp;mut _2                        live=[L0, L5, L6] dying=[]\nFakeRead(ForLet, _5)                live=[L0, L1, L5, L6] dying=[]\nStorageLive(_6)                     live=[L0, L1, L5, L6] dying=[]\n_6 = &amp;mut _3                        live=[L0, L1, L5, L6] dying=[]\nFakeRead(ForLet, _6)                live=[L0, L1, L2, L5, L6] dying=[]\nStorageLive(_7)                     live=[L0, L1, L2, L5, L6] dying=[]\nStorageLive(_8)                     live=[L0, L1, L2, L5, L6] dying=[]\nStorageLive(_9)                     live=[L0, L1, L2, L5, L6] dying=[]\n_9 = const 3_i32                    live=[L0, L1, L2, L5, L6] dying=[]\nFakeRead(ForMatchedPlace, _9)       live=[L0, L1, L2, L5, L6] dying=[]\nswitchInt(_9) -&gt; [1_i32: bb1, 2_i32: bb2, otherwise: bb3] live=[L0, L1, L2, L5, L6] dying=[]\n\nfalseEdge -&gt; [real: bb4, imaginary: bb2] live=[L0, L1, L2, L5, L6] dying=[]\n\nfalseEdge -&gt; [real: bb5, imaginary: bb3] live=[L1, L2, L5, L6] dying=[]\n\n(*_6) = const 8_i32                 live=[L2, L5, L6] dying=[]\nStorageLive(_12)                    live=[L2, L5, L6] dying=[]\n_12 = &amp;mut (*_6)                    live=[L2, L5, L6] dying=[]\n_7 = move _12                       live=[L2, L3, L5, L6] dying=[]\nStorageDead(_12)                    live=[L2, L3, L5, L6] dying=[]\n_8 = const ()                       live=[L2, L3, L5, L6] dying=[]\ngoto -&gt; bb6                         live=[L2, L3, L5, L6] dying=[]\n\n(*_4) = const 6_i32                 live=[L0, L5, L6] dying=[]\nStorageLive(_10)                    live=[L0, L5, L6] dying=[]\n_10 = move _4                       live=[L0, L5, L6] dying=[]\n_7 = move _10                       live=[L0, L5, L6] dying=[]\nStorageDead(_10)                    live=[L0, L5, L6] dying=[]\n_8 = const ()                       live=[L0, L5, L6] dying=[]\ngoto -&gt; bb6                         live=[L0, L5, L6] dying=[]\n\n(*_5) = const 7_i32                 live=[L1, L5, L6] dying=[]\nStorageLive(_11)                    live=[L1, L5, L6] dying=[]\n_11 = &amp;mut (*_5)                    live=[L1, L5, L6] dying=[]\n_7 = move _11                       live=[L1, L4, L5, L6] dying=[]\nStorageDead(_11)                    live=[L1, L4, L5, L6] dying=[]\n_8 = const ()                       live=[L1, L4, L5, L6] dying=[]\ngoto -&gt; bb6                         live=[L1, L4, L5, L6] dying=[]\n\nStorageDead(_9)                     live=[L0, L1, L2, L3, L4, L5, L6] dying=[]\nStorageDead(_8)                     live=[L0, L1, L2, L3, L4, L5, L6] dying=[]\n(*_7) = const 5_i32                 live=[L0, L1, L2, L3, L4, L5, L6] dying=[L0, L1, L2, L3, L4]\n_0 = const ()                       live=[L5, L6] dying=[]\nStorageDead(_7)                     live=[L5, L6] dying=[]\nStorageDead(_6)                     live=[L5, L6] dying=[]\nStorageDead(_5)                     live=[L5, L6] dying=[]\nStorageDead(_4)                     live=[L5, L6] dying=[]\nStorageDead(_3)                     live=[L5, L6] dying=[]\nStorageDead(_2)                     live=[L5, L6] dying=[]\nStorageDead(_1)                     live=[L5, L6] dying=[]\nreturn                              live=[L5, L6] dying=[L5, L6]\n</code></pre></div>\n\n\n<p>Note how _4 is not reborrowed before assigning into _10.<br>\nIs there any reason  for this I'm missing? or is it just an implementation artefact?</p>",
        "id": 214769775,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603835922
    },
    {
        "content": "<p>I guess you are more likely to get an explanation in <a class=\"stream\" data-stream-id=\"186049\" href=\"/#narrow/stream/186049-t-compiler.2Fwg-polonius\">#t-compiler/wg-polonius</a>.</p>",
        "id": 214802666,
        "sender_full_name": "Vytautas Astrauskas [he/him]",
        "timestamp": 1603870261
    },
    {
        "content": "<p>Yea I wasn't really sure since this seems like it's more of a compilation question</p>",
        "id": 214817899,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1603881101
    }
]