[
    {
        "content": "<p>Hey there, while scanning crates for some soundness problems, we came across the fork of rayon (<a href=\"https://github.com/rust-lang/rustc-rayon\">https://github.com/rust-lang/rustc-rayon</a>) that rustc uses in parallel mode. The <code>WorkerLocal</code> type it has seems to implement <code>Send</code> and <code>Sync</code> unconditionally for all types <code>T</code>: <a href=\"https://github.com/rust-lang/rustc-rayon/blob/ae7bbbd2756a324c493aef5f5d52473101b2f491/rayon-core/src/worker_local.rs#L10-L19\">https://github.com/rust-lang/rustc-rayon/blob/ae7bbbd2756a324c493aef5f5d52473101b2f491/rayon-core/src/worker_local.rs#L10-L19</a></p>\n<p>While the current inhabitants of <code>T</code> in rustc seem sound, i.e they're fine to be sent across threads, should this be bound by <code>T: Send</code> to avoid someone accidentally using a non-Sendable type like <code>Rc</code> across threads? Would this be worth making an issue about on the rust repo?</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> who wrote the <code>WorkerLocal</code> type; <span class=\"user-mention\" data-user-id=\"329529\">@Yechan Bae</span> part of the team doing the scanning)</p>",
        "id": 224118580,
        "sender_full_name": "Ammar Askar",
        "timestamp": 1611702898
    },
    {
        "content": "<p>yes, <code>T: Send</code> seems appropriate</p>",
        "id": 224120628,
        "sender_full_name": "cuviper",
        "timestamp": 1611704490
    },
    {
        "content": "<p><del>and matching <code>T: Sync</code> for <code>Sync</code></del> (edit: can still be <code>T: Send</code> as long as it's not enabling sharing)</p>",
        "id": 224120710,
        "sender_full_name": "cuviper",
        "timestamp": 1611704546
    },
    {
        "content": "<p>I think <code>Deref</code> to <code>&amp;T</code> is most often how it would be used</p>",
        "id": 224120769,
        "sender_full_name": "cuviper",
        "timestamp": 1611704616
    },
    {
        "content": "<p>actually, I wonder why auto-impl isn't good enough</p>",
        "id": 224120903,
        "sender_full_name": "cuviper",
        "timestamp": 1611704702
    },
    {
        "content": "<p>Maybe I misunderstand the design as documented in the comments there; Isn't there an attempt in <code>WorkerLocal</code> to dynamically enforce a rule that you cannot access the underlying <code>T</code> from other threads?</p>",
        "id": 224124032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611706907
    },
    {
        "content": "<p><code>WorkerLocal::into_inner</code> collects them all into <code>Vec&lt;T&gt;</code></p>",
        "id": 224124282,
        "sender_full_name": "cuviper",
        "timestamp": 1611707114
    },
    {
        "content": "<p>and they're initially created locally in a simple range-map-collect</p>",
        "id": 224124325,
        "sender_full_name": "cuviper",
        "timestamp": 1611707151
    },
    {
        "content": "<p>so ultimately it is shipping <code>T</code> across threads, though I guess it does enforce that <code>T</code> won't be <em>shared</em> across threads -- so <code>T: Send</code> is fine</p>",
        "id": 224124465,
        "sender_full_name": "cuviper",
        "timestamp": 1611707232
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">locals</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WorkerLocal</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// T = &amp;Cell&lt;_&gt;</span>\n<span class=\"c1\">// now threadpool accesses are sharing the same cell!</span>\n</code></pre></div>",
        "id": 224124771,
        "sender_full_name": "cuviper",
        "timestamp": 1611707443
    },
    {
        "content": "<p>now i see, okay</p>",
        "id": 224125453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611707932
    },
    {
        "content": "<p>Probably because the auto-impl would restrict it to the tighter <code>T: Sync</code> bound for <code>Sync</code> whereas it should just be <code>Send</code></p>",
        "id": 224131491,
        "sender_full_name": "Ammar Askar",
        "timestamp": 1611713043
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81425\">https://github.com/rust-lang/rust/issues/81425</a></p>",
        "id": 224133344,
        "sender_full_name": "Ammar Askar",
        "timestamp": 1611714999
    }
]