[
    {
        "content": "<p>quick update on jobserver work: afaict, the new(?) rayon is buggy and releases jobserver tokens it didn't acquire</p>",
        "id": 181931318,
        "sender_full_name": "simulacrum",
        "timestamp": 1574781712
    },
    {
        "content": "<p>which may have led to magical performance that we were seeing, uncertain</p>",
        "id": 181931378,
        "sender_full_name": "simulacrum",
        "timestamp": 1574781725
    },
    {
        "content": "<p>in any case, investigating to see if I can fix now</p>",
        "id": 181931387,
        "sender_full_name": "simulacrum",
        "timestamp": 1574781732
    },
    {
        "content": "<p>As in rustc-rayon, used on master?</p>",
        "id": 181931773,
        "sender_full_name": "Zoxc",
        "timestamp": 1574781943
    },
    {
        "content": "<p>no, the one we're trialing</p>",
        "id": 181934878,
        "sender_full_name": "simulacrum",
        "timestamp": 1574783551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Am I correct that we expect rustc to never release a jobserver token until after it's acquired it itself? i.e., it should not release the token that cargo acquired to spawn it</p>",
        "id": 181934951,
        "sender_full_name": "simulacrum",
        "timestamp": 1574783589
    },
    {
        "content": "<p>Yes</p>",
        "id": 181934975,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574783612
    },
    {
        "content": "<p>(in particular, rayon does this before blocking -- I'm not sure yet on what)</p>",
        "id": 181935087,
        "sender_full_name": "simulacrum",
        "timestamp": 1574783652
    },
    {
        "content": "<p>rustc can and will release the implicit token given to it by cargo though, which it didn't explicitly acquire.</p>",
        "id": 181935798,
        "sender_full_name": "Zoxc",
        "timestamp": 1574784044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> I'm confused</p>",
        "id": 181936808,
        "sender_full_name": "simulacrum",
        "timestamp": 1574784589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> just said that we should <em>never</em> do that</p>",
        "id": 181936823,
        "sender_full_name": "simulacrum",
        "timestamp": 1574784598
    },
    {
        "content": "<p>(and I tend to agree, otherwise we can end up with a bunch of rustcs even with <code>-j1</code>)</p>",
        "id": 181936913,
        "sender_full_name": "simulacrum",
        "timestamp": 1574784630
    },
    {
        "content": "<p>Ideally we shouldn't do it, but it's not buggy</p>",
        "id": 181938150,
        "sender_full_name": "Zoxc",
        "timestamp": 1574785423
    },
    {
        "content": "<p>well</p>",
        "id": 181938519,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785678
    },
    {
        "content": "<p>I feel like it is buggy?</p>",
        "id": 181938568,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785687
    },
    {
        "content": "<p>i.e., if you release that token then we're basically ending up in a situation where we can deadlock, right? since no one is able to make progress</p>",
        "id": 181938603,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785722
    },
    {
        "content": "<p>you need each process to always have at least one token, otherwise it shouldn't do anything</p>",
        "id": 181938647,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785749
    },
    {
        "content": "<p>It will immediately (or before) acquire the token back with the Rayon threadpool though.</p>",
        "id": 181938800,
        "sender_full_name": "Zoxc",
        "timestamp": 1574785828
    },
    {
        "content": "<p>but it can lose that race</p>",
        "id": 181938818,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785842
    },
    {
        "content": "<p>at which point no one is going to make progress</p>",
        "id": 181938850,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785878
    },
    {
        "content": "<p>How so?</p>",
        "id": 181938857,
        "sender_full_name": "Zoxc",
        "timestamp": 1574785887
    },
    {
        "content": "<p>hm, okay, I should clarify -- eventually, it'll make progress</p>",
        "id": 181938889,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785917
    },
    {
        "content": "<p>but it'll stall until (potentially) N other rustcs try to finish</p>",
        "id": 181938941,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785928
    },
    {
        "content": "<p>in any case it seems pretty clear that this behavior is pretty suboptimal</p>",
        "id": 181938965,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785950
    },
    {
        "content": "<p>(since it means that <code>-j1</code> is no longer guaranteed to have at most one rustc process, etc)</p>",
        "id": 181938985,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785973
    },
    {
        "content": "<p>and that to me even seems like just flat \"buggy\"</p>",
        "id": 181938997,
        "sender_full_name": "simulacrum",
        "timestamp": 1574785985
    },
    {
        "content": "<p>I guess I won't try to fix it and just hope things actually work, even if I can't really tell due to this</p>",
        "id": 181939156,
        "sender_full_name": "simulacrum",
        "timestamp": 1574786104
    },
    {
        "content": "<p>rustc can also \"stall\" in the same way due to Rayon giving up tokens to one of the threads it's using while it's idle, or due to rustc waiting on a query which is currently computing on another thread.</p>",
        "id": 181939809,
        "sender_full_name": "Zoxc",
        "timestamp": 1574786559
    },
    {
        "content": "<p>It would be nice to ensure that rustc always keeps at least one token. There was code to do this in some of the cases, but I removed it since it was buggy (<a href=\"https://github.com/rust-lang/rust/pull/59804/files\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59804/files\">https://github.com/rust-lang/rust/pull/59804/files</a>). To fix the transfer of the jobserver token from the main thread to the thread pool would probably require some less pretty Rayon changes (an API to enter a thread pool while holding a token to be given to the thread pool).</p>",
        "id": 181940420,
        "sender_full_name": "Zoxc",
        "timestamp": 1574786949
    },
    {
        "content": "<p>well, it'd mostly be a matter of using the thread pool on the side</p>",
        "id": 181940627,
        "sender_full_name": "simulacrum",
        "timestamp": 1574787060
    },
    {
        "content": "<p>e.g. you'd not have the 'main' thread be a threadpool thread</p>",
        "id": 181940648,
        "sender_full_name": "simulacrum",
        "timestamp": 1574787070
    },
    {
        "content": "<p>(which I think is largely true most of the time? e.g. in non-rustc land)</p>",
        "id": 181940679,
        "sender_full_name": "simulacrum",
        "timestamp": 1574787084
    },
    {
        "content": "<p>It has to be a threadpool thread though, for efficiency and for <code>WorkerLocal</code> to work.</p>",
        "id": 181940724,
        "sender_full_name": "Zoxc",
        "timestamp": 1574787109
    },
    {
        "content": "<p>Using it off the threadpool hits the slow paths in Rayon.</p>",
        "id": 181940808,
        "sender_full_name": "Zoxc",
        "timestamp": 1574787133
    },
    {
        "content": "<p>okay, but that seems like a solveable problem</p>",
        "id": 181941300,
        "sender_full_name": "simulacrum",
        "timestamp": 1574787481
    },
    {
        "content": "<p>maybe this is a good reason to not use rayon (as we've discussed a little)</p>",
        "id": 181941351,
        "sender_full_name": "simulacrum",
        "timestamp": 1574787494
    },
    {
        "content": "<p>No, any other thread pool should be designed the same way and we should be running the main rustc thread on it =P</p>\n<p>Maybe an API for a rustc thread to become one of the Rayon threadpool threads would work? Or just an API for spawning and joining the threadpool at once should also probably suffice.</p>",
        "id": 181941852,
        "sender_full_name": "Zoxc",
        "timestamp": 1574787789
    },
    {
        "content": "<p>Actually we could just provide a parameter to the thread pool with how many jobserver tokens it starts with and skip acquiring tokens for some threads, and then have an API to enter the thread pool without giving up any tokens.</p>",
        "id": 181942737,
        "sender_full_name": "Zoxc",
        "timestamp": 1574788288
    },
    {
        "content": "<p>I don't really know what the APIs etc need to be like</p>",
        "id": 181942907,
        "sender_full_name": "simulacrum",
        "timestamp": 1574788419
    },
    {
        "content": "<p>but it does seem like we need to more deeply integrate token management into rayon</p>",
        "id": 181942924,
        "sender_full_name": "simulacrum",
        "timestamp": 1574788436
    },
    {
        "content": "<p>I guess we can just do nothing with jobserver tokens when entering a thread pool then. So we just need a flag which tells Rayon one of its threads don't need to release / acquire a jobserver token on startup / exit</p>",
        "id": 181943998,
        "sender_full_name": "Zoxc",
        "timestamp": 1574789240
    },
    {
        "content": "<p>Sorry haven't caught up on the discussion here, but it is incorrect for rustc to release its implicit token</p>",
        "id": 181945608,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790252
    },
    {
        "content": "<p>and that is a bug we cannot ship with</p>",
        "id": 181945613,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790256
    },
    {
        "content": "<p>part of the major purpose of the jobserver is to limit memory consumption</p>",
        "id": 181945626,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790266
    },
    {
        "content": "<p>if you release the implicit token then it's possible to spawn unlimited rustc instances</p>",
        "id": 181945633,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790276
    },
    {
        "content": "<p>and they're all just sitting idle consuming memory</p>",
        "id": 181945638,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790281
    },
    {
        "content": "<p>for example if you run with <code>-j1</code>, only one will ever be doing work</p>",
        "id": 181945645,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790290
    },
    {
        "content": "<p>but we may spawn hundreds of <code>rustc</code> instances in parallel</p>",
        "id": 181945654,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790297
    },
    {
        "content": "<p>which can kill builds that rely on <code>-j</code> for limiting memory</p>",
        "id": 181945671,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574790305
    },
    {
        "content": "<p>That doesn't seem to be an easy property to guarantee</p>",
        "id": 181951196,
        "sender_full_name": "Zoxc",
        "timestamp": 1574793984
    },
    {
        "content": "<p>no, it is not, and this is one reason why the llvm backend is so complicated right now, it has to juggle around this \"implicit token\"</p>",
        "id": 181951713,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574794308
    },
    {
        "content": "<p>I'm guessing it would require fibers in Rayon to avoid giving up jobserver tokens when waiting on queries, but I'm not sure if that covers all cases. Fiber also can also cause excessive memory usage if not limited by waiting, so it's not a great fix.</p>",
        "id": 181952660,
        "sender_full_name": "Zoxc",
        "timestamp": 1574794843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> in theory <a href=\"https://github.com/rust-lang/rust/commit/cf92e2ebf129f4fd8075650b21c612d196b7a2f8\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/cf92e2ebf129f4fd8075650b21c612d196b7a2f8\">cf92e2ebf129f4fd8075650b21c612d196b7a2f8</a> should be a valid try commit (you want alt build as usual, and you'll need to rebuild cargo -- I'm not sure if we uploaded a copy)</p>",
        "id": 181960696,
        "sender_full_name": "simulacrum",
        "timestamp": 1574800372
    },
    {
        "content": "<p>or how to get that copy if we did</p>",
        "id": 181960731,
        "sender_full_name": "simulacrum",
        "timestamp": 1574800393
    },
    {
        "content": "<p><a href=\"https://github.com/Mark-Simulacrum/cargo/commit/c8373fbde42777e389c889e8b16a1d5f823e7a68\" target=\"_blank\" title=\"https://github.com/Mark-Simulacrum/cargo/commit/c8373fbde42777e389c889e8b16a1d5f823e7a68\">https://github.com/Mark-Simulacrum/cargo/commit/c8373fbde42777e389c889e8b16a1d5f823e7a68</a> should be enough to rebuild cargo so hopefully not too hard</p>",
        "id": 181960780,
        "sender_full_name": "simulacrum",
        "timestamp": 1574800441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> awesome, thanks!</p>",
        "id": 181975812,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574811958
    },
    {
        "content": "<p>my computer with 28 cores got shut down today and is being shipped to me over the thanksgiving break</p>",
        "id": 181975857,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574811968
    },
    {
        "content": "<p>so I'llg et back to you next monday on the numbers for that</p>",
        "id": 181975864,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574811974
    },
    {
        "content": "<p>okay, sounds good</p>",
        "id": 181975871,
        "sender_full_name": "simulacrum",
        "timestamp": 1574811978
    },
    {
        "content": "<p>to make sure I understand this right, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/commit/cf92e2ebf129f4fd8075650b21c612d196b7a2f8\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/cf92e2ebf129f4fd8075650b21c612d196b7a2f8\">cf92e2ebf129f4fd8075650b21c612d196b7a2f8</a> is a build which is new rayon plus semaphore-for-jobserver, right? no other changes/</p>",
        "id": 182367041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575306906
    },
    {
        "content": "<p>this looks to be a massive improvement</p>",
        "id": 182367246,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307027
    },
    {
        "content": "<p>Correct, yes</p>",
        "id": 182368142,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307561
    },
    {
        "content": "<p>Possibly modulo cargo update to latest master but I can't imagine that makes a difference</p>",
        "id": 182368235,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307593
    },
    {
        "content": "<p>ok so the numbers aren't entirely exonerating</p>",
        "id": 182368328,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307644
    },
    {
        "content": "<p>but I posted them to <a href=\"https://hackmd.io/bmB35-7oRzCeGOCanI0SkA?both\" target=\"_blank\" title=\"https://hackmd.io/bmB35-7oRzCeGOCanI0SkA?both\">https://hackmd.io/bmB35-7oRzCeGOCanI0SkA?both</a></p>",
        "id": 182368343,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307648
    },
    {
        "content": "<p>they look massively better than the prior version</p>",
        "id": 182368356,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307656
    },
    {
        "content": "<p>I found a flag on <code>epoll</code> that might allow us to avoid thundering herd problem with the pipe, too, which might be enough that we can use that for now</p>",
        "id": 182368357,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307656
    },
    {
        "content": "<p>oh nice</p>",
        "id": 182368387,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307675
    },
    {
        "content": "<p>oh -- are you using the right cargo there?</p>",
        "id": 182368440,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307688
    },
    {
        "content": "<p>you need to use the one from that toolchain</p>",
        "id": 182368451,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307694
    },
    {
        "content": "<p>I ran <code>cargo +...</code></p>",
        "id": 182368462,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307700
    },
    {
        "content": "<p>basically what the script snippets say</p>",
        "id": 182368487,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307712
    },
    {
        "content": "<p>I think rustup-toolchain-install-master doesn't do that though</p>",
        "id": 182368493,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307715
    },
    {
        "content": "<p>oh fascinating</p>",
        "id": 182368513,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307727
    },
    {
        "content": "<p>I may need to fix my thing then</p>",
        "id": 182368520,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307730
    },
    {
        "content": "<p>i.e., you're not downloading cargo by default</p>",
        "id": 182368527,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307731
    },
    {
        "content": "<p>also how did this</p>",
        "id": 182368530,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307732
    },
    {
        "content": "<p>I must be using the equivalent of no jobserver then</p>",
        "id": 182368545,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307741
    },
    {
        "content": "<p>ok I'll need to recollect data</p>",
        "id": 182368556,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307745
    },
    {
        "content": "<p>yeah normal cargo would basically be no jobserver (well, cargo itself would limit to 28, but not internal parallelism)</p>",
        "id": 182368620,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307781
    },
    {
        "content": "<p>I cna't collect numbers right this second, will be a bit</p>",
        "id": 182368642,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575307797
    },
    {
        "content": "<p>sounds good -- I think you shouldn't need to build the cargo, but it's probably best to do so -- just to be safe -- the submodule in that commit was updated as needed to an appropriate commit I think</p>",
        "id": 182368913,
        "sender_full_name": "simulacrum",
        "timestamp": 1575307924
    },
    {
        "content": "<p>ok I think it's working now</p>",
        "id": 182369523,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308301
    },
    {
        "content": "<p>I downloaded the precompiled cargo</p>",
        "id": 182369530,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308304
    },
    {
        "content": "<p>and i confirmed that <code>-j3</code> actually limits things</p>",
        "id": 182369540,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308312
    },
    {
        "content": "<p>(it'll loosely not work due to new-rayon bugs that we spoke about last week)</p>",
        "id": 182369566,
        "sender_full_name": "simulacrum",
        "timestamp": 1575308329
    },
    {
        "content": "<p>i.e., I think we can get in a situation where we have more than N running rustcs and such, but we will (hopefully) never actually be doing more than N threads of work</p>",
        "id": 182369600,
        "sender_full_name": "simulacrum",
        "timestamp": 1575308357
    },
    {
        "content": "<p>ok those numbers look even better -- <a href=\"https://hackmd.io/bmB35-7oRzCeGOCanI0SkA?both\" target=\"_blank\" title=\"https://hackmd.io/bmB35-7oRzCeGOCanI0SkA?both\">https://hackmd.io/bmB35-7oRzCeGOCanI0SkA?both</a></p>",
        "id": 182369906,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308543
    },
    {
        "content": "<p>system time barely changes</p>",
        "id": 182369933,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308562
    },
    {
        "content": "<p><code>top</code> still shows a smidge of red, but nowhere near where it was before</p>",
        "id": 182369968,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308592
    },
    {
        "content": "<p>14 threads seems to be a sweet spot for me</p>",
        "id": 182370091,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308658
    },
    {
        "content": "<p>so not ahuge amount of benefit for hyperthreads</p>",
        "id": 182370097,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308663
    },
    {
        "content": "<p>do you know if you're using LLD by default locally?</p>",
        "id": 182370117,
        "sender_full_name": "simulacrum",
        "timestamp": 1575308675
    },
    {
        "content": "<p>I am not</p>",
        "id": 182370198,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308746
    },
    {
        "content": "<p>gtg now</p>",
        "id": 182370202,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575308748
    },
    {
        "content": "<p>okay, was going to suggest disabling threading if yes</p>",
        "id": 182370273,
        "sender_full_name": "simulacrum",
        "timestamp": 1575308788
    },
    {
        "content": "<p>When compiling one crate on 8 cores, SMT made things slower until I landed some PRs which reduced contention. I'm using a Ryzen R7 1700, so I don't know how SMT affect performance on Intel chips, but I know AMD generally performs better in multi-threaded workloads.</p>",
        "id": 182374573,
        "sender_full_name": "Zoxc",
        "timestamp": 1575311437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:acquire_thread_then_spawn?expand=1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...spastorino:acquire_thread_then_spawn?expand=1\">https://github.com/rust-lang/rust/compare/master...spastorino:acquire_thread_then_spawn?expand=1</a></p>",
        "id": 182375746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1575312116
    },
    {
        "content": "<p>handler code is basically the default handler code and added the acquire and release stuff before and after spawning</p>",
        "id": 182375801,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1575312125
    },
    {
        "content": "<p>That would release the token before the spawned thread finished, right?</p>",
        "id": 182377861,
        "sender_full_name": "bjorn3",
        "timestamp": 1575313408
    },
    {
        "content": "<p>ouch, we want that right after the run call</p>",
        "id": 182379894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1575314653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/pull/66972\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66972\">https://github.com/rust-lang/rust/pull/66972</a></p>",
        "id": 182380969,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1575315366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> Wouldn't that cause rustc to wait until it has all the tokens before doing anything? Or did you do some Rayon changes to thread spawning too?</p>",
        "id": 182382188,
        "sender_full_name": "Zoxc",
        "timestamp": 1575316171
    },
    {
        "content": "<p>did this as request of <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> but we didn't touch rayon thread spawning</p>",
        "id": 182383173,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1575316761
    },
    {
        "content": "<p>Rayon also acquires tokens when spawning / closing threads, so you'll need to remove those too</p>",
        "id": 182383416,
        "sender_full_name": "Zoxc",
        "timestamp": 1575316893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I've been looking into the EPOLLEXCLUSIVE improvement I mentioned, and it looks like it's definitely linux-specific (along with all of epoll). It also looks like kqueue on macOS is claimed to avoid the thundering herd problem, but I can find no evidence of this in manpages (just in random blog posts).</p>\n<p>Right now as far as I can tell we can just break compatibility with make, and use semaphores (which are supported on macOS and Linux, at least, and are in POSIX so I expect pretty wide support). That's probably not really tenable though. The alternative then is to work on the Cargo integration to have a single process read/write the file descriptor I guess.</p>\n<p>Do you feel that working on the Cargo integration would be reasonable? Should we consider 'just' breaking?</p>",
        "id": 182594527,
        "sender_full_name": "simulacrum",
        "timestamp": 1575490684
    },
    {
        "content": "<p>If we pursue the route of semaphores, here's what I think we should do:</p>",
        "id": 182595026,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491014
    },
    {
        "content": "<p>well, let me just type it out</p>",
        "id": 182595038,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491022
    },
    {
        "content": "<p>I think we should add dual support in the <code>jobserver</code> crate for semaphores and pipes. Cargo would then tell the compiler either (a) here's a semaphore, go wild, or (b) here's a pipe jobserver, you can spawn at most N threads where N is like 10.</p>",
        "id": 182595131,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491061
    },
    {
        "content": "<p>Most compilations with Cargo do not integrate with an external jobserver</p>",
        "id": 182595144,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491071
    },
    {
        "content": "<p>so that means most compilations would use the semaphore and can go wild</p>",
        "id": 182595153,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491079
    },
    {
        "content": "<p>for those that do we'd limit rustc's parallelism to alleviate the thundering herd problem</p>",
        "id": 182595167,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491091
    },
    {
        "content": "<p>and we can have a work item for later to fix this</p>",
        "id": 182595191,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491106
    },
    {
        "content": "<p>basically Cargo just needs the ability to query a <code>jobserver::Client</code> if it's a semaphore or a pipe</p>",
        "id": 182595211,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491125
    },
    {
        "content": "<p>and the <code>jobserver</code> crate auto-detects semaphores or pipes</p>",
        "id": 182595222,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> does that sound reasonable?</p>",
        "id": 182595229,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491140
    },
    {
        "content": "<p>I think that should give us a lot of bang for not a lot of buck, while leaving it possible to fix this in the future</p>",
        "id": 182595253,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491156
    },
    {
        "content": "<p>my impression is that most compilations do shell out to cmake/make somewhere or so which my impression was limits what we can do</p>",
        "id": 182595325,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491196
    },
    {
        "content": "<p>but yes, that sounds reasonable</p>",
        "id": 182595358,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491227
    },
    {
        "content": "<p>I can work on a PR to jobserver-rs to make that logic happen</p>",
        "id": 182595374,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491243
    },
    {
        "content": "<p>(it's worth noting that e.g. on Windows it seems initial measurements suggest that a semaphore there still suffers from the thundering herd problem though we don't have super knowledgeable people testing that yet)</p>",
        "id": 182595402,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491273
    },
    {
        "content": "<p>but this does sounds reasonable</p>",
        "id": 182595520,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> will go ahead and start work on this</p>",
        "id": 182595539,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491364
    },
    {
        "content": "<p>Oh wait right</p>",
        "id": 182595634,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491404
    },
    {
        "content": "<p>I forgot that</p>",
        "id": 182595644,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491408
    },
    {
        "content": "<p>The cmake make stuff</p>",
        "id": 182595689,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> let's leave this on the backburner for now</p>",
        "id": 182595848,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491549
    },
    {
        "content": "<p>and fix windows first</p>",
        "id": 182595853,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491553
    },
    {
        "content": "<p>and see what that requires</p>",
        "id": 182595856,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491555
    },
    {
        "content": "<p>if semaphores don't work there we'll likely <em>require</em> a system where cargo manages everything anyway</p>",
        "id": 182595879,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575491573
    },
    {
        "content": "<p>hm, okay</p>",
        "id": 182595918,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491601
    },
    {
        "content": "<p>so fixing windows is basically a \"shrug\" from me -- I can look around at documentation for the primitives we use today</p>",
        "id": 182595937,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491621
    },
    {
        "content": "<p>but if those -- already being semaphores -- are still leading to a bunch of wakeups, then there's plausibly nothing we can do</p>",
        "id": 182595962,
        "sender_full_name": "simulacrum",
        "timestamp": 1575491642
    },
    {
        "content": "<p>well the thing we can do to fix that is what we'd do to fix the integration with the jobserver</p>",
        "id": 182596548,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575492024
    },
    {
        "content": "<p>which is that each rustc instances has a separate ipc mechanism connecting it to cargo</p>",
        "id": 182596557,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575492033
    },
    {
        "content": "<p>and cargo selects which rustc to wake up, only waking up one instead of all of them</p>",
        "id": 182596571,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575492040
    },
    {
        "content": "<p>like there would be N jobservers instead of just 1</p>",
        "id": 182596592,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575492053
    },
    {
        "content": "<p>(ish)</p>",
        "id": 182596594,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575492054
    },
    {
        "content": "<p>but not literally jobservers because cargo has to react to a request for a token</p>",
        "id": 182596638,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575492078
    },
    {
        "content": "<p>oh</p>",
        "id": 182596647,
        "sender_full_name": "simulacrum",
        "timestamp": 1575492084
    },
    {
        "content": "<p>I thought you meant fixing windows without doing the cargo thing</p>",
        "id": 182596660,
        "sender_full_name": "simulacrum",
        "timestamp": 1575492094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> so do you expect to invest time into trying to fix windows semaphores, and then if that fails, we invest into making cargo be the one to dispatch all jobserver operations?</p>",
        "id": 182598087,
        "sender_full_name": "simulacrum",
        "timestamp": 1575492909
    },
    {
        "content": "<p>oh sorry so to clarify, I mean that we should \"fix windows\" in that we should find <em>some</em> solution that is on the same par of performance as linux</p>",
        "id": 182598297,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575493014
    },
    {
        "content": "<p>I don't think it matters what that is, and it could be the semaphores we have today with a tweak, but we should fix it somehow</p>",
        "id": 182598319,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575493029
    },
    {
        "content": "<p>and then we can go from there to see how to unify all the implementations and land this all for real</p>",
        "id": 182598334,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575493040
    },
    {
        "content": "<p>ah, okay</p>",
        "id": 182598341,
        "sender_full_name": "simulacrum",
        "timestamp": 1575493048
    },
    {
        "content": "<p>I don't think I'll personally have time to work on this, but I can allocate time if necessary</p>",
        "id": 182598345,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575493054
    },
    {
        "content": "<p>Windows won't really get on par with Linux though. It's pretty known to be slow, especially with multithreading =P</p>",
        "id": 182598365,
        "sender_full_name": "Zoxc",
        "timestamp": 1575493071
    },
    {
        "content": "<p>makes sense; I can look at the flags to the semaphore primitives we use today at least</p>",
        "id": 182598380,
        "sender_full_name": "simulacrum",
        "timestamp": 1575493081
    },
    {
        "content": "<p>and then failing that take a look at making the cargo refactor</p>",
        "id": 182598435,
        "sender_full_name": "simulacrum",
        "timestamp": 1575493097
    },
    {
        "content": "<p>but do not know how mush the jobserver is affecting the times because when I look at eg. the cargo crate then there is no other crate running and I still get longer times with 32 threads compared with 4 threads at least on windows</p>",
        "id": 182600932,
        "sender_full_name": "andjo403",
        "timestamp": 1575494492
    },
    {
        "content": "<p>There's likely contention with thread spawning in Windows and inside rustc too (miri, symbols, spans, unknown stuff)</p>",
        "id": 182603784,
        "sender_full_name": "Zoxc",
        "timestamp": 1575496250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> fwiw, all the contention during normal execution we were able to detect with some loose benchmarks wasn't really at the syscall level -- of course, this may just be indicative of either bad measurement or lack of good parallelism in the compiler</p>",
        "id": 182604428,
        "sender_full_name": "simulacrum",
        "timestamp": 1575496711
    },
    {
        "content": "<p>as a quick update it looks like there's no better primitive to be using on windows at least that I can see</p>",
        "id": 182789057,
        "sender_full_name": "simulacrum",
        "timestamp": 1575656911
    },
    {
        "content": "<p>(based on MS docs)</p>",
        "id": 182789069,
        "sender_full_name": "simulacrum",
        "timestamp": 1575656918
    },
    {
        "content": "<p>I guess then the next step is to start working on making cargo act as the jobserver for rustc instances.. I'll start working on that soon then I suppose, though it feels quite painful</p>",
        "id": 182789147,
        "sender_full_name": "simulacrum",
        "timestamp": 1575656968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> One idea I would be to have separate process and thread tokens. We could use semaphores on Linux for the thread tokens. Also if a process gives up all its thread tokens temporarily, it couldn't be used to spawn further processes.</p>",
        "id": 183595993,
        "sender_full_name": "Zoxc",
        "timestamp": 1576533838
    },
    {
        "content": "<p>we discussed this a bit and came up with a solution which we expect to work -- the gist is that each rustc gets its own jobserver pipe/semaphore/whatever which it'll only read from and just before blocking on read it'll print out a message to cargo asking for a token; cargo will then be the only one acquiring tokens from the real jobserver pipe</p>",
        "id": 183596134,
        "sender_full_name": "simulacrum",
        "timestamp": 1576533929
    }
]