[
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> we could discuss possibly refactoring the transitive relation code here</p>",
        "id": 175849620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568665880
    },
    {
        "content": "<p>hey</p>",
        "id": 175849827,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568665956
    },
    {
        "content": "<p>sure</p>",
        "id": 175849828,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568665957
    },
    {
        "content": "<p>I was finishing watching the recording</p>",
        "id": 175849853,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568665970
    },
    {
        "content": "<p>but yeah, already saw the transitive relation part :)</p>",
        "id": 175849888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568665998
    },
    {
        "content": "<p>I'm not sure what I would do here either except that it feels sort of complex the way it is :)</p>",
        "id": 175849999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568666085
    },
    {
        "content": "<p>I'd need to read a bit the code to see what's about, right now I can't even ask questions :)</p>",
        "id": 175850022,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1568666125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do I understand correctly that the transitive relation is essentially just saying that for a, b, c, if a &lt;: b and b &lt;:c then a &lt;: c?</p>",
        "id": 175850103,
        "sender_full_name": "simulacrum",
        "timestamp": 1568666180
    },
    {
        "content": "<p>It does look like it's essentially tracking that along with querying that information</p>",
        "id": 175850218,
        "sender_full_name": "simulacrum",
        "timestamp": 1568666285
    },
    {
        "content": "<p>I was thinking that we might be able to store/manipulate this fairly optimally via <a href=\"https://en.wikipedia.org/wiki/Disjoint-set_data_structure\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Disjoint-set_data_structure\">https://en.wikipedia.org/wiki/Disjoint-set_data_structure</a> with the addition that we \"sort\" the elements in each set</p>",
        "id": 175850463,
        "sender_full_name": "simulacrum",
        "timestamp": 1568666428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yes that is all that it is tracking, and yes it's not a super smart data structure. I mean for that matter, we could just .. do a DFS. It's typically pretty small sets.</p>",
        "id": 176400877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569266966
    },
    {
        "content": "<p>I don't quite know what use disjoint set would have</p>",
        "id": 176400912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569266988
    },
    {
        "content": "<p>isn't that more for \"equality classes\"? in particular, it doesn't capture ordering within a set, I don't think?</p>",
        "id": 176400941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569267003
    },
    {
        "content": "<p>I think what'd start with is just removing the transitive computation and doing a DFS</p>",
        "id": 176400994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569267016
    },
    {
        "content": "<p>and see how that performs :)</p>",
        "id": 176400998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569267019
    },
    {
        "content": "<p>well, wait, there's a <em>bit</em> more to it</p>",
        "id": 176401011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569267030
    },
    {
        "content": "<p>I remember there is some stuff, the postdom methods</p>",
        "id": 176401020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569267037
    },
    {
        "content": "<p>that said, this is something we can totally make thread-safe, since it's redundant computation</p>",
        "id": 176401033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569267048
    },
    {
        "content": "<p>Hm, I was thinking that we would sort within each set to maintain transitivity, but maybe that doesn't really make sense</p>",
        "id": 176401112,
        "sender_full_name": "simulacrum",
        "timestamp": 1569267095
    },
    {
        "content": "<p>Isn't this only used in the AST borrowchecker?</p>",
        "id": 176405785,
        "sender_full_name": "Zoxc",
        "timestamp": 1569270105
    },
    {
        "content": "<p>no, it's still used in NLL</p>",
        "id": 176407824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271509
    },
    {
        "content": "<p>anyway <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the elements of this set are named lifetimes like <code>'a</code>, <code>'b</code> -- so there usually aren't <em>that</em> many members</p>",
        "id": 176407856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271540
    },
    {
        "content": "<blockquote>\n<p>no, it's still used in NLL</p>\n</blockquote>\n<p>hmm but, in NLL it's probably thread-local</p>",
        "id": 176408116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271727
    },
    {
        "content": "<p>ah well it still appears in the <code>TypeckTables</code></p>",
        "id": 176408163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271768
    },
    {
        "content": "<p>the truth is that the most obvious change to make here would just be to improve how the thing itself works; e.g., use an <code>Arc</code> to store the computed transitive value and avoid holding the lock quite so long, but otherwise leave it</p>",
        "id": 176408364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569271877
    },
    {
        "content": "<p>Ah if it's only named lifetimes (not inferred relations or so between anonymous lifetimes) then seems fine to just redo the calculations each time I imagine? Like, I can't imagine more than like 5 elements in these lists</p>",
        "id": 176408949,
        "sender_full_name": "simulacrum",
        "timestamp": 1569272260
    },
    {
        "content": "<p>Unless I'm missing something</p>",
        "id": 176408957,
        "sender_full_name": "simulacrum",
        "timestamp": 1569272266
    },
    {
        "content": "<p>well I think it can be more because it includes anonymous lifetimes</p>",
        "id": 176408985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569272286
    },
    {
        "content": "<p>but yeah the magnitude is small</p>",
        "id": 176409024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569272289
    },
    {
        "content": "<p>we could try just disabling caching and doing a perf run =)</p>",
        "id": 176409044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569272301
    },
    {
        "content": "<p>just to see</p>",
        "id": 176409050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569272307
    },
    {
        "content": "<p>Ah, so \"anonymous lifetimes\" sounds like not \"named lifetimes\" :)</p>",
        "id": 176409094,
        "sender_full_name": "simulacrum",
        "timestamp": 1569272355
    },
    {
        "content": "<p>But then yeah, I could see there being more - I can probably get a branch for a perf run w/o the cache put together</p>",
        "id": 176409112,
        "sender_full_name": "simulacrum",
        "timestamp": 1569272373
    },
    {
        "content": "<blockquote>\n<p>Ah, so \"anonymous lifetimes\" sounds like not \"named lifetimes\" :)</p>\n</blockquote>\n<p>yeah so I really just mean \"lifetime parameters\"</p>",
        "id": 176409222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569272432
    },
    {
        "content": "<p>was coming back to this but saw <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> took care of it</p>",
        "id": 176700463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569534898
    },
    {
        "content": "<p>great :)</p>",
        "id": 176700466,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569534901
    },
    {
        "content": "<p>It might not be done perse</p>",
        "id": 176700483,
        "sender_full_name": "simulacrum",
        "timestamp": 1569534914
    },
    {
        "content": "<p>I don't think Niko has reviewed PR?</p>",
        "id": 176700491,
        "sender_full_name": "simulacrum",
        "timestamp": 1569534925
    },
    {
        "content": "<p>probably not?</p>",
        "id": 176700566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569534968
    },
    {
        "content": "<p>why did grammar regressed 25%?</p>",
        "id": 176700580,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569534988
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/64719\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64719\">https://github.com/rust-lang/rust/pull/64719</a></p>",
        "id": 176700608,
        "sender_full_name": "simulacrum",
        "timestamp": 1569535021
    },
    {
        "content": "<p>well, we _did_ remove caching</p>",
        "id": 176700621,
        "sender_full_name": "simulacrum",
        "timestamp": 1569535029
    },
    {
        "content": "<p>I haven't profiled though</p>",
        "id": 176700626,
        "sender_full_name": "simulacrum",
        "timestamp": 1569535033
    },
    {
        "content": "<p>ahh yeah but wall time is more or less the same</p>",
        "id": 176700703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569535085
    },
    {
        "content": "<p>so you meant that there are more instructions being executed for that particular profile but it more or less takes the same time?</p>",
        "id": 176700733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569535130
    },
    {
        "content": "<p>unsure I'm understanding what you meant</p>",
        "id": 176700745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569535150
    },
    {
        "content": "<p>I'm saying that I don't know why there's such a big instruction regression for grammar beyond \"less caching\"</p>",
        "id": 176701160,
        "sender_full_name": "simulacrum",
        "timestamp": 1569535546
    },
    {
        "content": "<p>btw, would be nice to check <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=572a74f4ea21f93cea1bd5d1c73c3b713c386146&amp;benchmark=wg-grammar-check&amp;run_name=clean\" target=\"_blank\" title=\"https://perf.rust-lang.org/detailed-query.html?commit=572a74f4ea21f93cea1bd5d1c73c3b713c386146&amp;benchmark=wg-grammar-check&amp;run_name=clean\">https://perf.rust-lang.org/detailed-query.html?commit=572a74f4ea21f93cea1bd5d1c73c3b713c386146&amp;benchmark=wg-grammar-check&amp;run_name=clean</a> against same done with <a href=\"https://github.com/rust-lang/rust/commit/ac5a6680a0eaa7f90438ea011e8fc748864dbf1b\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/ac5a6680a0eaa7f90438ea011e8fc748864dbf1b\">https://github.com/rust-lang/rust/commit/ac5a6680a0eaa7f90438ea011e8fc748864dbf1b</a></p>",
        "id": 176705709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569540285
    },
    {
        "content": "<p>unsure if you can get and compare profile results for both commits on <a href=\"https://perf.rust-lang.org/\" target=\"_blank\" title=\"https://perf.rust-lang.org/\">https://perf.rust-lang.org/</a></p>",
        "id": 176705746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569540346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> Not sure I follow you, which two commits do you want diff'd?</p>",
        "id": 176705855,
        "sender_full_name": "simulacrum",
        "timestamp": 1569540466
    },
    {
        "content": "<p>we can recollect and then there'll be self profile diff between master/new</p>",
        "id": 176705916,
        "sender_full_name": "simulacrum",
        "timestamp": 1569540500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> wanted to compare between your branch and master</p>",
        "id": 176706733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541631
    },
    {
        "content": "<p>ah, yeah, we'll need another run for that -- I'll go start one</p>",
        "id": 176706740,
        "sender_full_name": "simulacrum",
        "timestamp": 1569541659
    },
    {
        "content": "<p>how you do that?</p>",
        "id": 176706744,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541679
    },
    {
        "content": "<p>Just rerun perf :)</p>",
        "id": 176706788,
        "sender_full_name": "simulacrum",
        "timestamp": 1569541702
    },
    {
        "content": "<p><code>@bors try @rust-timer queue</code></p>",
        "id": 176706789,
        "sender_full_name": "simulacrum",
        "timestamp": 1569541705
    },
    {
        "content": "<p>I mean, but isn't that what you already did?</p>",
        "id": 176706791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541721
    },
    {
        "content": "<p>I think I'm not following you :)</p>",
        "id": 176706798,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541733
    },
    {
        "content": "<p>of course one can do that easily locally just using perf</p>",
        "id": 176706808,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541745
    },
    {
        "content": "<p>my question is ... <code>@bors try @rust-timer queue</code> seems to be showing that detailed view only of the PR</p>",
        "id": 176706817,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541774
    },
    {
        "content": "<p>but I want to see the PR and master (the thing we are comparing against)</p>",
        "id": 176706821,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541787
    },
    {
        "content": "<p>to see where is wasting more time the pr in comparison against master</p>",
        "id": 176706866,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1569541803
    },
    {
        "content": "<p>Well so there's two things at play here</p>",
        "id": 176706872,
        "sender_full_name": "simulacrum",
        "timestamp": 1569541813
    },
    {
        "content": "<p>the perf run that I did on that PR was before we landed self-profile work</p>",
        "id": 176706877,
        "sender_full_name": "simulacrum",
        "timestamp": 1569541829
    },
    {
        "content": "<p>so that's why I'm recollecting</p>",
        "id": 176706884,
        "sender_full_name": "simulacrum",
        "timestamp": 1569541850
    },
    {
        "content": "<p>but to get the diff detailed query view you generally click on %change column on the compare page</p>",
        "id": 176706897,
        "sender_full_name": "simulacrum",
        "timestamp": 1569541872
    }
]