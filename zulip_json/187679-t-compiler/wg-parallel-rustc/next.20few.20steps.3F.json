[
    {
        "content": "<p>I know there is a plan, or at least a vague one, but I don't remember precisely what it is .. what are the next few steps we have in mind? <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> if nothing else maybe we can enumerate your pending PRs. =)</p>\n<p>Do we have some kind of \"criteria\" that we want to have established before we stabilize? (Performance and otherwise)</p>\n<p>I remember <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> in particular raising concerns about using our own fork of rayon. We should probably be forming a plan for how to stop doing that, too. This was something <span class=\"user-mention\" data-user-id=\"138448\">@Josh Stone</span> and I had sort of hoped to have done at the Rust All Hands, but that didn't happen, although I think one of <span class=\"user-mention\" data-user-id=\"138448\">@Josh Stone</span>'s recent PRs would help somewhat here.</p>",
        "id": 159628705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551371117
    },
    {
        "content": "<p>There's <a href=\"https://github.com/rust-lang/rust/issues/48685\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48685\">https://github.com/rust-lang/rust/issues/48685</a> which is probably rather out-of-date.</p>",
        "id": 159630399,
        "sender_full_name": "mw",
        "timestamp": 1551372332
    },
    {
        "content": "<p>I think setting a goal for what would be an acceptable overhead is a good idea.</p>",
        "id": 159630470,
        "sender_full_name": "mw",
        "timestamp": 1551372365
    },
    {
        "content": "<p>e.g. if the parallel compiler (restricted to a single thread) is within 5% of the current performance, then we can switch, or something like that</p>",
        "id": 159630526,
        "sender_full_name": "mw",
        "timestamp": 1551372428
    },
    {
        "content": "<p>one of the bigger unknowns is also testing.</p>",
        "id": 159630555,
        "sender_full_name": "mw",
        "timestamp": 1551372469
    },
    {
        "content": "<p>I think we kind of agree that the regular tests should be run on a single thread and that they don't stress parallelism enough to be worth much anyway (because it's all small crates).</p>",
        "id": 159630639,
        "sender_full_name": "mw",
        "timestamp": 1551372535
    },
    {
        "content": "<p>we will get some degree of testing out of the normal bootstrapping process</p>",
        "id": 159630700,
        "sender_full_name": "mw",
        "timestamp": 1551372589
    },
    {
        "content": "<p>one question here is what we even want to test for. if it's just crashes then it wouldn't be to hard to have bors make sure that a certain set of large crates can be compiled without crashes or unexpected results.</p>",
        "id": 159631087,
        "sender_full_name": "mw",
        "timestamp": 1551372845
    },
    {
        "content": "<p>we could also do something like we did for incremental compilation: compile crates in both modes (1 and N threads) and then compare their output.</p>",
        "id": 159631172,
        "sender_full_name": "mw",
        "timestamp": 1551372941
    },
    {
        "content": "<p>(this was the tool in question: <a href=\"https://github.com/nikomatsakis/cargo-incremental\" target=\"_blank\" title=\"https://github.com/nikomatsakis/cargo-incremental\">https://github.com/nikomatsakis/cargo-incremental</a>)</p>",
        "id": 159631259,
        "sender_full_name": "mw",
        "timestamp": 1551372999
    },
    {
        "content": "<p>I wonder if we could do some A/B testing, that is, compile every second nightly with <code>parallel-compiler=true</code> :)</p>",
        "id": 159632175,
        "sender_full_name": "mw",
        "timestamp": 1551373662
    },
    {
        "content": "<p>Comparing crates with <code>parallel-compiler=false</code> and <code>parallel-compiler=true</code> seems like a good idea. Is our output deterministic enough for that?</p>",
        "id": 159632749,
        "sender_full_name": "Zoxc",
        "timestamp": 1551374072
    },
    {
        "content": "<p>maybe sorting the JSON output alphabetically would be enough?</p>",
        "id": 159632815,
        "sender_full_name": "mw",
        "timestamp": 1551374109
    },
    {
        "content": "<p>binary output should be deterministic, I think</p>",
        "id": 159632846,
        "sender_full_name": "mw",
        "timestamp": 1551374140
    },
    {
        "content": "<blockquote>\n<p>I think one of @_<strong>Josh Stone</strong>'s recent PRs would help somewhat here.</p>\n</blockquote>\n<p>Said PR: <a href=\"https://github.com/rayon-rs/rayon/pull/636\" target=\"_blank\" title=\"https://github.com/rayon-rs/rayon/pull/636\">https://github.com/rayon-rs/rayon/pull/636</a> -- could replace rustc-rayon's main-handler and scoped threadpool</p>",
        "id": 159632870,
        "sender_full_name": "cuviper",
        "timestamp": 1551374156
    },
    {
        "content": "<p>The other big thing in rustc-rayon was the thread-local stuff, especially the one that follows stolen jobs</p>",
        "id": 159632960,
        "sender_full_name": "cuviper",
        "timestamp": 1551374192
    },
    {
        "content": "<p>I'm not sure we should get rid of <code>cfg!(parallel_compiler)</code>. That is a useful tool to measure the overhead of parallelization, and isn't overly invasive.</p>",
        "id": 159633049,
        "sender_full_name": "Zoxc",
        "timestamp": 1551374261
    },
    {
        "content": "<blockquote>\n<p>I'm not sure we should get rid of cfg!(parallel_compiler). </p>\n</blockquote>\n<p>We don't need to rush it. In general I'm not a big fan of keeping it around forever because it makes things more complicated.</p>",
        "id": 159633512,
        "sender_full_name": "mw",
        "timestamp": 1551374598
    },
    {
        "content": "<p>But yes, it's not too bad and I think defaulting to parallel-compiler is the actual goal.</p>",
        "id": 159633611,
        "sender_full_name": "mw",
        "timestamp": 1551374662
    },
    {
        "content": "<p>I'll change the wording in the PR to make this clear.</p>",
        "id": 159633694,
        "sender_full_name": "mw",
        "timestamp": 1551374721
    },
    {
        "content": "<p>(done)</p>",
        "id": 159633787,
        "sender_full_name": "mw",
        "timestamp": 1551374793
    },
    {
        "content": "<p>My mental plan was to<br>\n- Land <a href=\"https://github.com/rust-lang/rust/pull/58679\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58679\">https://github.com/rust-lang/rust/pull/58679</a> and <a href=\"https://github.com/rust-lang/rust/pull/58019\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58019\">https://github.com/rust-lang/rust/pull/58019</a><br>\n- Run crater, evaluate perf<br>\n- Enable by default on nightly</p>",
        "id": 159634346,
        "sender_full_name": "Zoxc",
        "timestamp": 1551375361
    },
    {
        "content": "<p>I also have a local branch which does parallel parsing, there's a race condition in it though</p>",
        "id": 159635146,
        "sender_full_name": "Zoxc",
        "timestamp": 1551376057
    },
    {
        "content": "<p>(thanks all, this was enlightening to read)</p>",
        "id": 159742092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551468976
    }
]