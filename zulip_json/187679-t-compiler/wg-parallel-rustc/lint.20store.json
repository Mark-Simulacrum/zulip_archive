[
    {
        "content": "<p>The lock around <code>LintStore</code> can be removed by making a query which calls the plugins and returns a plain <code>LintStore</code> which includes the plugin lints.</p>\n<p>The list of lints can be made immutable by using lists of constructor functions instead of lint objects. This is currently done for late per-module lints, but in a pretty hacky way where you can construct more lint objects from an existing one.</p>\n<p>I have been waiting on <code>TyCtxt</code> to be created earlier to clean this up and also allow lints to refer to <code>'tcx</code>.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 177584485,
        "sender_full_name": "Zoxc",
        "timestamp": 1570510907
    },
    {
        "content": "<blockquote>\n<p>The lock around <code>LintStore</code> can be removed by making a query which calls the plugins and returns a plain <code>LintStore</code> which includes the plugin lints.</p>\n</blockquote>\n<p>Ah, nice -- we were discussing adding a query, but not having it query the plugins. This doesn't seem like it's <em>blocked</em> on creating the <code>TyCtxt</code> earlier, right?</p>",
        "id": 177598629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570528444
    },
    {
        "content": "<blockquote>\n<p>The list of lints can be made immutable by using lists of constructor functions instead of lint objects. This is currently done for late per-module lints, but in a pretty hacky way where you can construct more lint objects from an existing one.</p>\n</blockquote>\n<p>yeah, we were talking about doing this</p>",
        "id": 177598661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570528489
    },
    {
        "content": "<p>The second part (constructor functions) I have done. I can try the first part (probably with a rustc_interface query) but the most that I can do is probably making the lint store a Once instead of a Lock, since we need it on session I suspect. But maybe I can thread it through to the relevant places without that.</p>",
        "id": 177602180,
        "sender_full_name": "simulacrum",
        "timestamp": 1570531934
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65193\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65193\">https://github.com/rust-lang/rust/pull/65193</a></p>",
        "id": 177606532,
        "sender_full_name": "simulacrum",
        "timestamp": 1570536404
    },
    {
        "content": "<blockquote>\n<p>The second part (constructor functions) I have done. I can try the first part (probably with a rustc_interface query) but the most that I can do is probably making the lint store a Once instead of a Lock, since we need it on session I suspect. But maybe I can thread it through to the relevant places without that.</p>\n</blockquote>\n<p>do we really?</p>",
        "id": 177607819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570537539
    },
    {
        "content": "<p>I'd just wait until it can be a proper TyCtxt query</p>",
        "id": 177608083,
        "sender_full_name": "Zoxc",
        "timestamp": 1570537739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we might not need it on session -- it's possible we could thread it into everything pre-tyctxt manually, and then just use it in a fully initialized state via TyCtxt</p>",
        "id": 177608763,
        "sender_full_name": "simulacrum",
        "timestamp": 1570538275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> We're going to be waiting a while for that, though, right? Like... months, I'd assume? It'd be good to make progress where we can</p>",
        "id": 177608840,
        "sender_full_name": "simulacrum",
        "timestamp": 1570538308
    },
    {
        "content": "<p>You can probably make the <code>register_plugins</code> rustc_interface query create <code>Lrc&lt;LintStore&gt;</code> and then pass it on to <code>TyCtxt</code>.</p>",
        "id": 177609697,
        "sender_full_name": "Zoxc",
        "timestamp": 1570538909
    },
    {
        "content": "<p>Moving it from <code>Session</code> to <code>GlobalCtxt</code></p>",
        "id": 177609743,
        "sender_full_name": "Zoxc",
        "timestamp": 1570538948
    },
    {
        "content": "<p>yes, that's my plan -- I was uncertain if we ran any lints before we registered plugins, if that's the case we might not be able to make such a transformation</p>",
        "id": 177609997,
        "sender_full_name": "simulacrum",
        "timestamp": 1570539135
    },
    {
        "content": "<p>but I suspect we can either not do so or do some minor restructuring to stick plugin registration in</p>",
        "id": 177610017,
        "sender_full_name": "simulacrum",
        "timestamp": 1570539153
    },
    {
        "content": "<p>remind me -- the \"early lints\" run before tcx creation?</p>",
        "id": 177610368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570539362
    },
    {
        "content": "<p>(as far as timing goes, I think it's worth trying to progressively simplify <code>Session</code> in small ways where we can)</p>",
        "id": 177610434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570539391
    },
    {
        "content": "<p>yes, they do</p>",
        "id": 177610770,
        "sender_full_name": "simulacrum",
        "timestamp": 1570539598
    },
    {
        "content": "<p>check_ast_crate is the function to grep for if you want</p>",
        "id": 177610826,
        "sender_full_name": "simulacrum",
        "timestamp": 1570539605
    },
    {
        "content": "<p>or at least I assume they do -- there's no TyCtxt around in any of those functions</p>",
        "id": 177610865,
        "sender_full_name": "simulacrum",
        "timestamp": 1570539631
    },
    {
        "content": "<p>I think that's sort of \"the difference\"</p>",
        "id": 177610871,
        "sender_full_name": "simulacrum",
        "timestamp": 1570539637
    },
    {
        "content": "<p>OTOH, I don't know _why_ we care - it seems not hugely helpful. I guess IDEs want results earlier?</p>",
        "id": 177610912,
        "sender_full_name": "simulacrum",
        "timestamp": 1570539662
    },
    {
        "content": "<p>We only run lints after registering plugins</p>",
        "id": 177611497,
        "sender_full_name": "Zoxc",
        "timestamp": 1570540065
    },
    {
        "content": "<blockquote>\n<p>OTOH, I don't know _why_ we care - it seems not hugely helpful. I guess IDEs want results earlier?</p>\n</blockquote>\n<p>I think it might be that they operate on the AST, and we want to throw that way? I dimly recall something like that</p>",
        "id": 177620213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570544706
    },
    {
        "content": "<p>hm, maybe -- I guess TyCtxt does contain the HIR so it is post lowering</p>",
        "id": 177630532,
        "sender_full_name": "simulacrum",
        "timestamp": 1570550509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I forget, did we talk about trying to document how the lint store works in the rustc-guide?</p>",
        "id": 178793555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571774574
    },
    {
        "content": "<p>(I'm reviewing your PR now fyi)</p>",
        "id": 178793565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571774584
    },
    {
        "content": "<p>Yeah I was planning to do so once we r+</p>",
        "id": 178794765,
        "sender_full_name": "simulacrum",
        "timestamp": 1571775348
    },
    {
        "content": "<p>I've been thinking about it passively though haven't actually written anything just yet</p>",
        "id": 178794817,
        "sender_full_name": "simulacrum",
        "timestamp": 1571775364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ok I left r+ -- this PR seems like a solid step forward whatever we do. It's very gratifying to see the interior mutability just go away. =)</p>",
        "id": 178795213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571775664
    },
    {
        "content": "<p>I was pondering what <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> wrote earlier -- I like the idea of (eventually?) having the <code>LintStore</code> construction be a query that executes once, which gathers up the lints at that time -- but it seems like that is dependent on a much broader refactoring, so I think we ought to land this for now.</p>",
        "id": 178795274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571775709
    },
    {
        "content": "<p>Yeah, I ... feel a bit ambiguous about that kind of query</p>",
        "id": 178795453,
        "sender_full_name": "simulacrum",
        "timestamp": 1571775822
    },
    {
        "content": "<p>I think it makes sense</p>",
        "id": 178795474,
        "sender_full_name": "simulacrum",
        "timestamp": 1571775833
    },
    {
        "content": "<p>but it feels like it doesn't _quite_ fit into current query infrastructure</p>",
        "id": 178795493,
        "sender_full_name": "simulacrum",
        "timestamp": 1571775845
    },
    {
        "content": "<p>in salsa, it would be a \"volatile\" query I think -- well, one that does a \"synthetic read\"</p>",
        "id": 178795670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571775949
    },
    {
        "content": "<p>but anyway</p>",
        "id": 178795679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571775955
    }
]