[
    {
        "content": "<p>I was wondering, is this an alright place to discuss perf impact of parallel rustc nowadays? Or is an issue a better place? I just built a parallel rustc locally and compared it with the previous nightly, and I was curious to test out <code>-Z timings</code> and see what cpu usage looked like during the build, but it was unfortunately slower in that a parallel rustc took 74s for a full release build (nothing cached) compared to 62 on nightly</p>",
        "id": 176505659,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569358768
    },
    {
        "content": "<p>This seems like a perfect place.</p>\n<p>That sounds somewhat expected, though -- I suspect we're pretty poorly tuned and overeager at grabbing jobserver tokens</p>",
        "id": 176506259,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359180
    },
    {
        "content": "<p>You might see more success with e.g. RUSTFLAGS=\"-Zthreads=2\"</p>",
        "id": 176506278,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359194
    },
    {
        "content": "<p>Ok cool, so yeah taking a look at things I'm watching cpu usage on nightly and it's \"all green\" which I think means all in userspace</p>",
        "id": 176506378,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359271
    },
    {
        "content": "<p>w/ parallel rustc it's \"mostly red\" which I think means most of the time is spent in the kernel</p>",
        "id": 176506419,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359283
    },
    {
        "content": "<p>a quick <code>perf</code> shows a huge amount of time in the kernel</p>",
        "id": 176506442,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359293
    },
    {
        "content": "<p>trying to track down what's where</p>",
        "id": 176506453,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359307
    },
    {
        "content": "<p>I think the jobserver management may also be wrong?</p>",
        "id": 176506476,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359321
    },
    {
        "content": "<p>when I ran a cargo build I got \"45 (jobs=28 ncpu=28)\"</p>",
        "id": 176506498,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359332
    },
    {
        "content": "<p>er, that means that there were at most 45 rustc instances running in parallel</p>",
        "id": 176506522,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359346
    },
    {
        "content": "<p>but the default, <code>-j28</code>, should have made it such that no more than 28 rustc instances were running</p>",
        "id": 176506538,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359360
    },
    {
        "content": "<p>nightly does indeed not exceed 28</p>",
        "id": 176506561,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359375
    },
    {
        "content": "<p>yeah a huge amount of time is spent acquiring/releaseing tokens</p>",
        "id": 176506614,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359403
    },
    {
        "content": "<p><code>- 21.09% rustc_rayon_core::sleep::Sleep::sleep</code> from perf</p>",
        "id": 176506663,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569359420
    },
    {
        "content": "<p>I am not really surprised -- I forget what our current management strategy is, but it might be something like \"let's release/reacquire tokens whenever a rayon thread goes idle, which presumably happens quite often</p>",
        "id": 176506751,
        "sender_full_name": "simulacrum",
        "timestamp": 1569359494
    },
    {
        "content": "<p>is this something I should open an issue for?</p>",
        "id": 176507750,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569360232
    },
    {
        "content": "<p>I think at this point I would say no</p>",
        "id": 176508100,
        "sender_full_name": "simulacrum",
        "timestamp": 1569360476
    },
    {
        "content": "<p>we're not really at the point where performance is a (sufficient) concern</p>",
        "id": 176508154,
        "sender_full_name": "simulacrum",
        "timestamp": 1569360489
    },
    {
        "content": "<p>the current jobserver management strategy is unknown (I just pulled one out of thin air)</p>",
        "id": 176508179,
        "sender_full_name": "simulacrum",
        "timestamp": 1569360514
    },
    {
        "content": "<p>I think Zoxc might know it but not even sure about that</p>",
        "id": 176508199,
        "sender_full_name": "simulacrum",
        "timestamp": 1569360528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> It might be good to open an issue about the jobserver management strategy though -- I don't know how we should do that, and discussing on an issue seems good</p>",
        "id": 176508237,
        "sender_full_name": "simulacrum",
        "timestamp": 1569360562
    },
    {
        "content": "<p>in particular I think we're going to need some more intelligent server than the current model allows to evenly distribute tokens between rustc instances</p>",
        "id": 176508267,
        "sender_full_name": "simulacrum",
        "timestamp": 1569360582
    },
    {
        "content": "<p>ok, I'll open an issue</p>",
        "id": 176508285,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569360599
    },
    {
        "content": "<p>e.g. if we have something like 8 cores we probably want 4 rustcs each with 2 threads (approximately) rather than 1 rustc with 8 threads, I'd imagine</p>",
        "id": 176508348,
        "sender_full_name": "simulacrum",
        "timestamp": 1569360613
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64750\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64750\">https://github.com/rust-lang/rust/issues/64750</a></p>",
        "id": 176508648,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569360851
    },
    {
        "content": "<p>so additionally after focusing the call grpah a bit more</p>",
        "id": 176508993,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361115
    },
    {
        "content": "<p>80% of rustc's time is spent in <code>__GI_clone</code></p>",
        "id": 176509002,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361122
    },
    {
        "content": "<p>which I think is spawning threads</p>",
        "id": 176509008,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361126
    },
    {
        "content": "<p>does rustc spawn threads on demand or immediately?</p>",
        "id": 176509021,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361133
    },
    {
        "content": "<p>hm, I thought it was immediately, but I think we leave it up to rayon -- maybe rayon is spinning up threads if they're idle?</p>",
        "id": 176509042,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> might know</p>",
        "id": 176509050,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361161
    },
    {
        "content": "<p>rayon creates threads for the global pool on first use</p>",
        "id": 176509252,
        "sender_full_name": "cuviper",
        "timestamp": 1569361273
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/R8TIiPYEW87HhqYF0MGjELss/Capture.PNG\" target=\"_blank\" title=\"Capture.PNG\">Capture.PNG</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/R8TIiPYEW87HhqYF0MGjELss/Capture.PNG\" target=\"_blank\" title=\"Capture.PNG\"><img src=\"/user_uploads/4715/R8TIiPYEW87HhqYF0MGjELss/Capture.PNG\"></a></div><p>this is a small snippet of the perf sorted by self-time</p>",
        "id": 176509253,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361273
    },
    {
        "content": "<p>or if you create a manual ThreadPool, it's new threads for each time you do so</p>",
        "id": 176509275,
        "sender_full_name": "cuviper",
        "timestamp": 1569361295
    },
    {
        "content": "<p>hm ok, I'll open an issue for that</p>",
        "id": 176509277,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> so to be clear we would expect num_cpus threads per ThreadPool creation, approximately, right?</p>",
        "id": 176509344,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> I wonder if this is the jobserver threads -- IIRC, there's a thread spawn in that crate?</p>",
        "id": 176509360,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361346
    },
    {
        "content": "<p>the number is tunable, but it defaults to number of cpus, yes</p>",
        "id": 176509370,
        "sender_full_name": "cuviper",
        "timestamp": 1569361353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yes there's one thread in the jobserver crate</p>",
        "id": 176509429,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361385
    },
    {
        "content": "<p>but I suspect the 28 threads spawned by each rustc is dwarfing that</p>",
        "id": 176509439,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361395
    },
    {
        "content": "<p>this is an aggregate of all rustc processes near the start of the build</p>",
        "id": 176509454,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361409
    },
    {
        "content": "<p>(that profile I linked above)</p>",
        "id": 176509457,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361413
    },
    {
        "content": "<p>the pool is created here:<br>\n<a href=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_interface/util.rs#L209-L213\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_interface/util.rs#L209-L213\">https://github.com/rust-lang/rust/blob/66bf391c3aabfc77f5f7139fc9e6944f995d574e/src/librustc_interface/util.rs#L209-L213</a></p>",
        "id": 176509465,
        "sender_full_name": "cuviper",
        "timestamp": 1569361419
    },
    {
        "content": "<p>and so if you spawn 28 rustc's that each spawn 28 threads</p>",
        "id": 176509467,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361420
    },
    {
        "content": "<p>that's a lot of threads to spawn very quickly</p>",
        "id": 176509469,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361425
    },
    {
        "content": "<p>ah -- so we're spawning like 800 threads :)</p>",
        "id": 176509473,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361430
    },
    {
        "content": "<p>the crate at the beginning of the crate graph are also very quick to compile, on the order of a hundred or so ms</p>",
        "id": 176509529,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361455
    },
    {
        "content": "<p>so we're thrashing thread creation quite a lot</p>",
        "id": 176509540,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361469
    },
    {
        "content": "<p>I wonder if we could get rayon to sort of \"slow start\" thread spawning</p>",
        "id": 176509553,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361487
    },
    {
        "content": "<p>e.g. create the pool with size 1 and then if it detects work after 1 second grow to num_cpus</p>",
        "id": 176509578,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361510
    },
    {
        "content": "<p>we've talked about dynamic threads before, but that's ... challenging</p>",
        "id": 176509608,
        "sender_full_name": "cuviper",
        "timestamp": 1569361531
    },
    {
        "content": "<p>I guess you're not talking fully dynamic though, just lazy</p>",
        "id": 176509677,
        "sender_full_name": "cuviper",
        "timestamp": 1569361565
    },
    {
        "content": "<p>right, yeah</p>",
        "id": 176509684,
        "sender_full_name": "simulacrum",
        "timestamp": 1569361568
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64752\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64752\">https://github.com/rust-lang/rust/issues/64752</a></p>",
        "id": 176509714,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569361615
    },
    {
        "content": "<p>28 threads is also probably not the ideal number to use for rustc due to contention, etc.</p>",
        "id": 176562781,
        "sender_full_name": "Zoxc",
        "timestamp": 1569417280
    },
    {
        "content": "<p>maybe rustc needs a heuristic max on its threads?</p>",
        "id": 176587147,
        "sender_full_name": "cuviper",
        "timestamp": 1569432392
    },
    {
        "content": "<p>just like codegen-units uses 16 regardless</p>",
        "id": 176587162,
        "sender_full_name": "cuviper",
        "timestamp": 1569432403
    },
    {
        "content": "<p>We also should have a minimum on job tokens that a rustc holds</p>",
        "id": 176622860,
        "sender_full_name": "nagisa",
        "timestamp": 1569464189
    },
    {
        "content": "<p>like a rustc should hold at least 1 token always.</p>",
        "id": 176622866,
        "sender_full_name": "nagisa",
        "timestamp": 1569464208
    },
    {
        "content": "<p>avoids spawning 56 rustcs on a 8 core system.</p>",
        "id": 176622874,
        "sender_full_name": "nagisa",
        "timestamp": 1569464228
    },
    {
        "content": "<p>btw I remain fairly unconvinced that rayon is a good fit for us, in general</p>",
        "id": 176679656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519975
    },
    {
        "content": "<p>much as I love rayon of course :)</p>",
        "id": 176679662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569519981
    },
    {
        "content": "<p>I think it might eventually be a good fit, but I sort of suspect we might also do better with some simpler setup for the time being</p>",
        "id": 176679677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569520005
    },
    {
        "content": "<p>I think we might get away with managing the thread pool ourselves but otherwise using rayon, though I don't know how possible/realistic that is</p>",
        "id": 176686920,
        "sender_full_name": "simulacrum",
        "timestamp": 1569524556
    }
]