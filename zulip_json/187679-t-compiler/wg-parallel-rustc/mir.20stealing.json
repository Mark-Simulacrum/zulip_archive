[
    {
        "content": "<p>Re: Mir Stealing, not sure if this makes sense, but would something like Event Sourcing be a viable alternative to stealing? I think this would really only be useful if the intermediate states of MIR transformation needed to be accessed after some optimizations had already been performed. Would be helpful in keeping space small-ish, but would take some (not sure if this would be small or large in the rustc scale) perf hits to recompute intermediate/final states</p>",
        "id": 175089354,
        "sender_full_name": "Paul Faria",
        "timestamp": 1567793643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yeah i think we're ready to open issues for tracking. i do want to think a bit about the audit/doc strategy as well, but we can develop that organically</p>",
        "id": 175089391,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1567793647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> what do you mean by \"event sourcing\"?</p>",
        "id": 175089582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567793775
    },
    {
        "content": "<p>So this is the set of queries for MIR right now</p>\n<div class=\"codehilite\"><pre><span></span>        /// Fetch the MIR for a given `DefId` right after it&#39;s built - this includes\n        /// unreachable code.\n        query mir_built(_: DefId) -&gt; &amp;&#39;tcx Steal&lt;mir::Body&lt;&#39;tcx&gt;&gt; {}\n\n        /// Fetch the MIR for a given `DefId` up till the point where it is\n        /// ready for const evaluation.\n        ///\n        /// See the README for the `mir` module for details.\n        query mir_const(_: DefId) -&gt; &amp;&#39;tcx Steal&lt;mir::Body&lt;&#39;tcx&gt;&gt; {\n            no_hash\n        }\n\n        query mir_validated(_: DefId) -&gt; &amp;&#39;tcx Steal&lt;mir::Body&lt;&#39;tcx&gt;&gt; {\n            no_hash\n        }\n\n        /// MIR after our optimization passes have run. This is MIR that is ready\n        /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n        query optimized_mir(key: DefId) -&gt; &amp;&#39;tcx mir::Body&lt;&#39;tcx&gt; {\n            cache_on_disk_if { key.is_local() }\n            load_cached(tcx, id) {\n                let mir: Option&lt;crate::mir::Body&lt;&#39;tcx&gt;&gt; = tcx.queries.on_disk_cache\n                                                            .try_load_query_result(tcx, id);\n                mir.map(|x| &amp;*tcx.arena.alloc(x))\n            }\n        }\n\n        query promoted_mir(key: DefId) -&gt; &amp;&#39;tcx IndexVec&lt;mir::Promoted, mir::Body&lt;&#39;tcx&gt;&gt; { }\n</pre></div>",
        "id": 175089659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567793862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116010\">@Aaron Turon</span> sounds good -- do you want to open issues? should we hold off on any work until we can have another meeting to maybe get a broader sense of goals and such?</p>",
        "id": 175089662,
        "sender_full_name": "simulacrum",
        "timestamp": 1567793866
    },
    {
        "content": "<p>from <a href=\"https://github.com/rust-lang/rust/blob/4894123d21ed4b153a2e5c32c0870cb2d97f9b46/src/librustc/query/mod.rs#L101-L142\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/4894123d21ed4b153a2e5c32c0870cb2d97f9b46/src/librustc/query/mod.rs#L101-L142\">librustc/query/mod.rs</a> -- well, a mildly outdated copy, apparently</p>",
        "id": 175089736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567793916
    },
    {
        "content": "<p>also this file has changed a lot since I last looked at it :)</p>",
        "id": 175089749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567793929
    },
    {
        "content": "<p>It's a pattern used in some backend web system for tracking lots of state changes over time. <a href=\"https://martinfowler.com/eaaDev/EventSourcing.html\" target=\"_blank\" title=\"https://martinfowler.com/eaaDev/EventSourcing.html\">https://martinfowler.com/eaaDev/EventSourcing.html</a> is a good reference from that perspective. Another way to think about it might be commits in a repo. You have a base state, which might be the original MIR, and you store the \"patches\" to the MIR. Then when you need the MIR at a specific point, you apply the patches in order. This becomes more complicated if you have to account for conflicts</p>",
        "id": 175089779,
        "sender_full_name": "Paul Faria",
        "timestamp": 1567793960
    },
    {
        "content": "<p>Is there a reason for having the separate queries? If we don't expect them to run in parallel with each other on a given DefId might it make sense to move all this into a single query that dispatches to calling mir_const etc in a non-query fashion, with <code>&amp;mut Mir</code>?</p>",
        "id": 175089783,
        "sender_full_name": "simulacrum",
        "timestamp": 1567793964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm happy to open issues, and set up a tracking issue for the overview. my gut feeling is that we shouldn't <em>block</em> on another meeting, but rather get a topic here going on how we want to approach audit/documentation. i think it's best for us to dive in, see how things are feeling, and coordinate as we go on developing the approach. how does that sound to you?</p>",
        "id": 175089798,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1567793975
    },
    {
        "content": "<p>I was just thinking about it</p>",
        "id": 175089805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567793979
    },
    {
        "content": "<p>there is some reason</p>",
        "id": 175089811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567793981
    },
    {
        "content": "<p>It might be overkill though for rustc's needs.</p>",
        "id": 175089835,
        "sender_full_name": "Paul Faria",
        "timestamp": 1567793996
    },
    {
        "content": "<p>e.g., in an IDE, you want be able to do the borrow check</p>",
        "id": 175089838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567793997
    },
    {
        "content": "<p>(to produce errors)</p>",
        "id": 175089889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794004
    },
    {
        "content": "<p>without necessarily doing all the optimizations</p>",
        "id": 175089905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> note: looks like there's a \"mir stealing\" topic now</p>",
        "id": 175089926,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1567794033
    },
    {
        "content": "<p>the current setup allows for that fairly gracefully</p>",
        "id": 175089938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794042
    },
    {
        "content": "<p>that said, I'm not sure how imp't that is, especially since we don't do any real optimization right now</p>",
        "id": 175089940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794043
    },
    {
        "content": "<p>sounds reasonable to me -- I'd be willing to spend some time trying to refactor the handler in librustc_errors simultaneously with an audit of sorts to try and come up with some docs on how to do it and such</p>",
        "id": 175089950,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794050
    },
    {
        "content": "<p>iow if just had one <code>optimized_mir</code> query that did all the things, it would sometimes do more work than is needed</p>",
        "id": 175089956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794056
    },
    {
        "content": "<p>presuming that's useful?</p>",
        "id": 175089963,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> i think you can <em>move</em>  your messages if you want</p>",
        "id": 175089967,
        "sender_full_name": "Aaron Turon",
        "timestamp": 1567794061
    },
    {
        "content": "<p>probably also for <code>cargo check</code></p>",
        "id": 175089989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794076
    },
    {
        "content": "<p>so we also have an abstraction -- for the non-tcx queries -- that essentially wraps a generator such that you can \"access\" a piece of state, and then move on to the next piece of the function (optionally)</p>",
        "id": 175090045,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794121
    },
    {
        "content": "<p>I might have messed up some messages in this topic. I assumed (incorrectly) that moving \"later replies\" would just be my own, and not everyone else's as well.</p>",
        "id": 175090164,
        "sender_full_name": "Paul Faria",
        "timestamp": 1567794180
    },
    {
        "content": "<p>heh, I was wondering what happened there</p>",
        "id": 175090222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794220
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_data_structures/box_region.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_data_structures/box_region.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_data_structures/box_region.rs</a> is the data structure</p>",
        "id": 175090299,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794262
    },
    {
        "content": "<p>in any case, <span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span>, I think that would be too hard to do in practice, we did think about things like this; you could also (for example) build MIR out of persistent data structures, but that'd be a big change</p>",
        "id": 175090303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794264
    },
    {
        "content": "<p>but essentially it's quite similar to async/await except without the \"not ready\" (i.e., it's synchronous)</p>",
        "id": 175090322,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794286
    },
    {
        "content": "<p>so that could allow some form of \"linearizability\" where you can ask for things but we guarantee in one place that you're always &gt;= the previous so to speak</p>",
        "id": 175090360,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> interesting. this gets into the direction of the more ambitious proposals where we extend the query system somewhat</p>",
        "id": 175090369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> no worries, I might stick with the predecessors issue then if no one else is hoping to pick it up</p>",
        "id": 175090426,
        "sender_full_name": "Paul Faria",
        "timestamp": 1567794366
    },
    {
        "content": "<p>you could certainly imagine having some process that encapaulates some state (including the mir)</p>",
        "id": 175090431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794369
    },
    {
        "content": "<p>and can be pushed along to various points</p>",
        "id": 175090436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794373
    },
    {
        "content": "<p>and caches the results of those points</p>",
        "id": 175090439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794378
    },
    {
        "content": "<p>hmm so e.g. you could have like</p>",
        "id": 175090445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794385
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">mir</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">MirBox</span><span class=\"w\"></span>\n</pre></div>",
        "id": 175090461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794399
    },
    {
        "content": "<blockquote>\n<p>iow if just had one <code>optimized_mir</code> query that did all the things, it would sometimes do more work than is needed</p>\n</blockquote>\n<p>It was also necessary add a new query so that miri (the const eval engine not the tool) could access promoted MIR while we're processing the body those promotions came from during <code>optimize_mir</code>. This is part of the ongoing work to deduplicate code between miri and <code>rustc_mir::transform::ConstProp</code>.</p>",
        "id": 175090499,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1567794430
    },
    {
        "content": "<p>and then </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">MirBox</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow_check</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">BorrowCheckResult</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">optimized_mir</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Mir</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and whatever the major outputs are</p>",
        "id": 175090501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794430
    },
    {
        "content": "<p>(the idea being that <code>MirBox</code> kind of encapsulates and hides this state that moves monotonically along, but only as far as it needs to)</p>",
        "id": 175090556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794474
    },
    {
        "content": "<p>it'd be sort of a mini query system I guess ;)</p>",
        "id": 175090624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794485
    },
    {
        "content": "<p>Yeah, that was what I was thinking</p>",
        "id": 175090673,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794508
    },
    {
        "content": "<blockquote>\n<p>It was also necessary add a new query so that miri (the const eval engine not the tool) could access promoted MIR ...</p>\n</blockquote>\n<p>yeah, we'd have to accommodate this</p>",
        "id": 175090678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794513
    },
    {
        "content": "<p>In some sense though this doesn't quite work out</p>",
        "id": 175090679,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794514
    },
    {
        "content": "<p>what sense do you mean?</p>",
        "id": 175090700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794530
    },
    {
        "content": "<p>well</p>",
        "id": 175090735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794556
    },
    {
        "content": "<p>well, you always have the potential for panic or some similar functionality -- if you make the \"subqueries\" public then it's hard to audit precisely I guess</p>",
        "id": 175090739,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794559
    },
    {
        "content": "<p>the thing that I exactly proposed is \"not great\" because it's <em>still</em> shared mutable state and is going to play poorly with incremental etc</p>",
        "id": 175090746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794570
    },
    {
        "content": "<p>in that anyone can come along and call a prior state</p>",
        "id": 175090751,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794572
    },
    {
        "content": "<p>oh, that's not an issue the way I specified it</p>",
        "id": 175090766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794583
    },
    {
        "content": "<p>the idea would be that you <em>will</em> cache the results of (say) borrow-check</p>",
        "id": 175090781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794601
    },
    {
        "content": "<p>and any outputs \"publicly vislble\"</p>",
        "id": 175090833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794610
    },
    {
        "content": "<p>right, I'm talking about the inputs -- borrow check wants unoptimized MIR</p>",
        "id": 175090860,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794625
    },
    {
        "content": "<p>that's not a problem</p>",
        "id": 175090870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794631
    },
    {
        "content": "<p>unless I'm misunderstanding you</p>",
        "id": 175090877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794637
    },
    {
        "content": "<p>I guess you're saying that we'd always run it if someone asked for optimized MIR?</p>",
        "id": 175090889,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794647
    },
    {
        "content": "<p>yes, same as today</p>",
        "id": 175090894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794652
    },
    {
        "content": "<p>basically internally there is a series of steps</p>",
        "id": 175090902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794657
    },
    {
        "content": "<p>that are ALWAYS run in a fixed order</p>",
        "id": 175090905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794660
    },
    {
        "content": "<p>and never go backwards</p>",
        "id": 175090916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794666
    },
    {
        "content": "<p>but we only run through as many as we have to</p>",
        "id": 175090921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794672
    },
    {
        "content": "<p>to satisfy the things requested thus far</p>",
        "id": 175090938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794680
    },
    {
        "content": "<p>Ah, okay -- so I misunderstood then -- I guess my thinking was that we do want the ability to say \"get me optimized MIR, don't run borrowck\"</p>",
        "id": 175090945,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794685
    },
    {
        "content": "<p>if you ask for optimized-mir first, it'll do them all (and produce all the outputs alon the way)</p>",
        "id": 175090949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794689
    },
    {
        "content": "<p>ah, no</p>",
        "id": 175090955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794693
    },
    {
        "content": "<p>I think I might like to think of it as a \"query group\"</p>",
        "id": 175090981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794719
    },
    {
        "content": "<p>but if that's not a desirable outcome, then a MirBox of sorts seems like a very reasonable thing to have</p>",
        "id": 175090982,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794719
    },
    {
        "content": "<p>i.e., you define a linear set of queries that will have some \"shared, hidden state\"</p>",
        "id": 175091042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794738
    },
    {
        "content": "<p>Right, but that state is essentially a bunch of <code>Onces</code> and a single <code>Lock&lt;Mir&gt;</code> that is acquired for the duration of the query</p>",
        "id": 175091078,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794768
    },
    {
        "content": "<p>and in their provider functions, they get ownership of this state and they return a tuple (their result for the outside world, and the state for next step)</p>",
        "id": 175091079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794768
    },
    {
        "content": "<p>(or equivalent, I guess)</p>",
        "id": 175091085,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794777
    },
    {
        "content": "<p>yeah, somehow behind the scenes the query engine can track how far along you are</p>",
        "id": 175091100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794790
    },
    {
        "content": "<p>the advantage of this would be that it is well exposed to incremental</p>",
        "id": 175091112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794800
    },
    {
        "content": "<p>so e.g. we can see that at some point we can skip over the remaining steps</p>",
        "id": 175091130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794814
    },
    {
        "content": "<p>hm, so I feel like integrating with incremental might be somewhat of a non-goal?</p>",
        "id": 175091138,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794820
    },
    {
        "content": "<p>why?</p>",
        "id": 175091150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794828
    },
    {
        "content": "<p>like, you only ever do all/nothing it feels like for some given compilation</p>",
        "id": 175091159,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794837
    },
    {
        "content": "<p>not at all</p>",
        "id": 175091192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794843
    },
    {
        "content": "<p>though I guess that might not be true for e.g. IDEs and such</p>",
        "id": 175091210,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794847
    },
    {
        "content": "<p>no, it's not true in rustc</p>",
        "id": 175091220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794855
    },
    {
        "content": "<p>like, if I only change the body of one function</p>",
        "id": 175091225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794859
    },
    {
        "content": "<p>why should I have to reoptimize all the rest?</p>",
        "id": 175091234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794865
    },
    {
        "content": "<p>ah, so I meant all/nothing (for a given DefId)</p>",
        "id": 175091259,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794881
    },
    {
        "content": "<p>so sort of less granular than today, presumably</p>",
        "id": 175091275,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794893
    },
    {
        "content": "<p>ah. yes, it might be sufficient to track the \"query series\" as a unit, but that's not obvious to me</p>",
        "id": 175091281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794896
    },
    {
        "content": "<p>it's probably true</p>",
        "id": 175091301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794906
    },
    {
        "content": "<p>I mean there's no <em>theoretical</em> reason for it, just probably true enough in practice</p>",
        "id": 175091326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794922
    },
    {
        "content": "<p>I guess internally it'd potentially serialize and deserialize to w/e state it was in, too, so maybe it just all sort of works out anyway to fine-grained tracking</p>",
        "id": 175091367,
        "sender_full_name": "simulacrum",
        "timestamp": 1567794950
    },
    {
        "content": "<p>(you could e.g. have made some change that desugars into the same MIR, or which winds up with equivalent MIR after some optimization is done)</p>",
        "id": 175091370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794953
    },
    {
        "content": "<p>I guess I think that if it makes life easier, then foregoing incremental/parallelization between members of a \"query series\" is fine</p>",
        "id": 175091448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567794990
    },
    {
        "content": "<p>the main thing is that I don't think this should live \"on the side\"</p>",
        "id": 175091461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795001
    },
    {
        "content": "<p>with some shared mutable state not exposed to the query system</p>",
        "id": 175091468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795010
    },
    {
        "content": "<p>/me ponders</p>",
        "id": 175091498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795027
    },
    {
        "content": "<p>wait</p>",
        "id": 175091500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795029
    },
    {
        "content": "<p>maybe I'm wrong</p>",
        "id": 175091501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795030
    },
    {
        "content": "<p>So you mean like that the mutable state should be inside the MirBox? That was sort of implied, I felt?</p>",
        "id": 175091513,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795044
    },
    {
        "content": "<p>I'm not sure where the \"on the side\" would be / what we'd put there</p>",
        "id": 175091519,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795053
    },
    {
        "content": "<p>in the mir box <em>is</em> \"on the side\" in my terminology :)</p>",
        "id": 175091528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795066
    },
    {
        "content": "<p>it's not stored in the query hashmaps</p>",
        "id": 175091540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795080
    },
    {
        "content": "<p>the query system doesn't know about it or manage it</p>",
        "id": 175091589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795090
    },
    {
        "content": "<p>hm, but the mirbox is? Right?</p>",
        "id": 175091590,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795090
    },
    {
        "content": "<p>Like, the <code>mir(DefId) -&gt; &amp;MirBox</code> query is a proper query</p>",
        "id": 175091614,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795115
    },
    {
        "content": "<p>yes I somewhat take back what I said</p>",
        "id": 175091616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795116
    },
    {
        "content": "<p>well, no, it's not proper in the sense we mean oday</p>",
        "id": 175091628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795129
    },
    {
        "content": "<p>in that query results are supposed to be \"pure values\"</p>",
        "id": 175091634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795135
    },
    {
        "content": "<p>it's just that it evaluates to some state that can change down the road (like Steal, today) but in some non-stealing fashion</p>",
        "id": 175091635,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795135
    },
    {
        "content": "<p>that never cahnge</p>",
        "id": 175091639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795140
    },
    {
        "content": "<p>otherwise, the whole premise of incremental falls apart</p>",
        "id": 175091648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795146
    },
    {
        "content": "<p>but I think you can <em>make</em> it work</p>",
        "id": 175091657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795154
    },
    {
        "content": "<p>hm, okay, so I was thinking that it's fine for the return to change so long as the _query_ always resolves to the \"same\" thing</p>",
        "id": 175091682,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795175
    },
    {
        "content": "<p>like, I don't see why it'd be a problem for incremental, since presumably it'd still work out</p>",
        "id": 175091707,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795194
    },
    {
        "content": "<p>it basically depends on what hash/eq mean</p>",
        "id": 175091784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795215
    },
    {
        "content": "<p>though we might need some custom code to unify an old MirBox and a possible new one</p>",
        "id": 175091788,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795218
    },
    {
        "content": "<p>I think what you could do is this</p>",
        "id": 175091826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795250
    },
    {
        "content": "<p>the \"identity\" of a MirBox is some fresh uuid</p>",
        "id": 175091833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795257
    },
    {
        "content": "<p>(and/or maybe a hash of the initial mir that you made)</p>",
        "id": 175091852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795274
    },
    {
        "content": "<p>when we serialize a mirbox, we capture whatever values we cached so far</p>",
        "id": 175091866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795289
    },
    {
        "content": "<p>now when incremental re-runs --</p>",
        "id": 175091879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795299
    },
    {
        "content": "<p>if the inputs to the <code>mir</code> query have changed (basically, the HIR of the function, or relevant types etc)</p>",
        "id": 175091899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795317
    },
    {
        "content": "<p>we'll rebuild the MIR</p>",
        "id": 175091919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795322
    },
    {
        "content": "<p>since it's identity is a fresh UUID (let's run with that for a sec)</p>",
        "id": 175091949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795329
    },
    {
        "content": "<p>it will <em>always</em> be dirty relative to the previous, cached mir</p>",
        "id": 175091958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795337
    },
    {
        "content": "<p>but that's ok</p>",
        "id": 175091962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795341
    },
    {
        "content": "<p>that means we'll just have none of the \"downstream steps\" (borrow-check, etc)</p>",
        "id": 175091969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795351
    },
    {
        "content": "<p>cached</p>",
        "id": 175091975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795352
    },
    {
        "content": "<p>and hence we will re-run them</p>",
        "id": 175091981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795356
    },
    {
        "content": "<p>but if the inputs to the mir did <em>not</em> change, we can deserialize the mir box as normal</p>",
        "id": 175091999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795367
    },
    {
        "content": "<p>I think this would also work fine if you used instead a hash of the MIR as the \"identity\" of the mir-box</p>",
        "id": 175092031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795389
    },
    {
        "content": "<p>except that maybe you'd get a hair more re-use, because sometimes your serialized value would be found to be equal</p>",
        "id": 175092044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795403
    },
    {
        "content": "<p>because MIR encodes a \"lower\" form than HIR and such?</p>",
        "id": 175092070,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795423
    },
    {
        "content": "<p>in any case the key point is that the \"identity\" is tied to the initial output from the <code>mir</code> query -- the other, derived work (optimized form, etc) are all pure functions from that</p>",
        "id": 175092073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795424
    },
    {
        "content": "<blockquote>\n<p>because MIR encodes a \"lower\" form than HIR and such?</p>\n</blockquote>\n<p>yes</p>",
        "id": 175092077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795428
    },
    {
        "content": "<p>that doesn't strike mas a very realistic proposition in most cases</p>",
        "id": 175092088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795437
    },
    {
        "content": "<p>but a hash may still be better just because uuid is a drag and non-reproducible</p>",
        "id": 175092119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795444
    },
    {
        "content": "<blockquote>\n<p>that doesn't strike mas a very realistic proposition in most cases</p>\n</blockquote>\n<p>(as you suggested)</p>",
        "id": 175092158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795458
    },
    {
        "content": "<p>I think the derive work being pure from that is -- perhaps -- not true? And can't be true?</p>",
        "id": 175092194,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795486
    },
    {
        "content": "<p>e.g. I would assume we depend on bits from HIR?</p>",
        "id": 175092229,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795510
    },
    {
        "content": "<p>yeah so the problem is that they want to invoke other queries in some cases</p>",
        "id": 175092246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795520
    },
    {
        "content": "<p>e.g., inlining</p>",
        "id": 175092256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795526
    },
    {
        "content": "<p>and so the set of inputs that go into the mir box actually grows over time</p>",
        "id": 175092278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795543
    },
    {
        "content": "<p>actually, I want something very similar to this for salsa + chalk</p>",
        "id": 175092297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795560
    },
    {
        "content": "<p>well, for chalk (but I was thining about adding it to salsa)</p>",
        "id": 175092354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795571
    },
    {
        "content": "<p>that is, some mechanism for saying \"I have a process that has advanced some of the way; it will resume later, and may grow more inputs as it goes\"</p>",
        "id": 175092388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795592
    },
    {
        "content": "<p>that's encouraging, that there is more than one use</p>",
        "id": 175092411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795606
    },
    {
        "content": "<p>anyway, I need to run -- but it does sound like getting a more general structure here for sort of \"long-term\" queries or \"stateful queries\" is useful</p>",
        "id": 175092416,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795609
    },
    {
        "content": "<p>yeah, it seems useful, though in the <em>short term</em> we could fix the <em>immediate problem</em> in the simpler way</p>",
        "id": 175092440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795631
    },
    {
        "content": "<p>I also should go</p>",
        "id": 175092442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795633
    },
    {
        "content": "<p>I can try and type up some of this in a shorter form in the doc when I get a chance, probably later tonight</p>",
        "id": 175092505,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795666
    },
    {
        "content": "<p>(unless of course someone beats me to it)</p>",
        "id": 175092515,
        "sender_full_name": "simulacrum",
        "timestamp": 1567795673
    },
    {
        "content": "<blockquote>\n<p>no worries, I might stick with the predecessors issue then if no one else is hoping to pick it up</p>\n</blockquote>\n<p>(<span class=\"user-mention\" data-user-id=\"116114\">@Paul Faria</span> seems good)</p>",
        "id": 175092911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567795908
    }
]