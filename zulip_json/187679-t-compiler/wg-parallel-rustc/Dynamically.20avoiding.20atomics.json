[
    {
        "content": "<p>So I've been doing some profiling and I recalled <a href=\"https://snf.github.io/2019/02/13/shared-ptr-optimization/\" target=\"_blank\" title=\"https://snf.github.io/2019/02/13/shared-ptr-optimization/\">reading a recent article</a> about how glibc C++ avoids using atomics in <code>std::shared_ptr</code> sometimes</p>",
        "id": 185615687,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021238
    },
    {
        "content": "<p>I was wondering, we can probably do the same for rustc itself</p>",
        "id": 185615693,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021243
    },
    {
        "content": "<p>All the utilities that we have in the sync module (which currently multiplex single/multi threaded at compile time) we could update to work in both worlds dynamically</p>",
        "id": 185615733,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021265
    },
    {
        "content": "<p>basically before anything is done a \"very fast read\" happens which indicates whether an atomic or single-threaded update should happen</p>",
        "id": 185615766,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021290
    },
    {
        "content": "<p>we would only enable atomics once a thread is spawned, or a second jobserver token is acquired</p>",
        "id": 185615783,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021300
    },
    {
        "content": "<p>this in theory might be a strategy to land everything <em>today</em> and only selectively enable rayon/extra parallelism as we become confident over time</p>",
        "id": 185615871,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021332
    },
    {
        "content": "<p>but we could immediately start getting benefits like a truly parallel codegen backend</p>",
        "id": 185615879,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021341
    },
    {
        "content": "<p>Basically what I'm wondering is whether we can land something like this, basically removing all compile-time checks in the rustc data structures for <code>parallel_compiler</code>, instead changing them to all runtime checks (cheap ones)</p>",
        "id": 185615911,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021368
    },
    {
        "content": "<p>that may have such a small impact we could land it immediately, and we could unblock a lot of work that's waiting for parallel rustc to get fully enabled</p>",
        "id": 185615937,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021387
    },
    {
        "content": "<p>(things like the default for <code>-Zthreads</code> would still be conditioned at compile time on <code>parallel_compiler</code> perhaps)</p>",
        "id": 185615955,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579021402
    },
    {
        "content": "<p>So basically we'd make the primitives etc always require Send/Sync then? That's the main \"blocker\" I see -- but one other thought is that I'm not sure it's worth the hassle</p>",
        "id": 185634059,
        "sender_full_name": "simulacrum",
        "timestamp": 1579032007
    },
    {
        "content": "<p>i.e., I feel like we're pretty close to being able to just turn it on without this</p>",
        "id": 185634083,
        "sender_full_name": "simulacrum",
        "timestamp": 1579032020
    },
    {
        "content": "<p>well not so much that they would also require Send/Sync they'd just always conditionally be Send/Sync</p>",
        "id": 185637408,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579034151
    },
    {
        "content": "<p>and also, I should clarify, this was borne out of some thinking about our current state of affairs</p>",
        "id": 185637464,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579034168
    },
    {
        "content": "<p>and I realized that if you already have a fully parallel build, as is likely the case on a small number of cpu machines, then you are basically guaranteed to regress</p>",
        "id": 185637483,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579034186
    },
    {
        "content": "<p>the only improvement we offer is if you have idle parallelism we can gobble that up with a parallel rustc, but times like the start of a full build or most of the build on a small number of cores, have no idle parallelism</p>",
        "id": 185637499,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579034215
    },
    {
        "content": "<p>so you're paying the cost of all this synchronization when none of it actually gets used</p>",
        "id": 185637517,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579034227
    },
    {
        "content": "<p>so my initial thinking was that this is what we may want long-term, not only for the immediate short term to land things</p>",
        "id": 185637531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579034243
    },
    {
        "content": "<p>becuase this would, in theory, drastically mitigate the cost of a parallel compiler</p>",
        "id": 185637544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579034253
    },
    {
        "content": "<p>That is true</p>",
        "id": 185639194,
        "sender_full_name": "simulacrum",
        "timestamp": 1579035358
    },
    {
        "content": "<p>hm, I'm not sure about conditionally Send/Sync</p>",
        "id": 185639257,
        "sender_full_name": "simulacrum",
        "timestamp": 1579035379
    },
    {
        "content": "<p>They'd need to be Send/Sync unconditionally, right? And we need to be just super careful to avoid spawning threads outside our control if we pursue this</p>",
        "id": 185639307,
        "sender_full_name": "simulacrum",
        "timestamp": 1579035413
    },
    {
        "content": "<p>(which we probably <em>can</em> do)</p>",
        "id": 185639327,
        "sender_full_name": "simulacrum",
        "timestamp": 1579035426
    },
    {
        "content": "<p>er, conditional as in <code>impl&lt;T: Send&gt; Send for Lock&lt;T&gt;</code> (or w/e it is)</p>",
        "id": 185640464,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579036173
    },
    {
        "content": "<p>not conditional as in <code>#[cfg]</code></p>",
        "id": 185640466,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579036176
    },
    {
        "content": "<p>ah sure yeah makes sense</p>",
        "id": 185641169,
        "sender_full_name": "simulacrum",
        "timestamp": 1579036584
    },
    {
        "content": "<p>We could avoid atomic ops if <code>-Z threads=1</code> is passed on the command line. Doing it on demand sounds very tricky though and we'd probably be better off just avoiding atomic ops.</p>",
        "id": 185672257,
        "sender_full_name": "Zoxc",
        "timestamp": 1579069744
    },
    {
        "content": "<p>My point though is that <code>-Zthreads=1</code> is a static assertion that no threads are used and I don't think it's what we want</p>",
        "id": 185706112,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579100872
    },
    {
        "content": "<p>we are slowing down all rustc instances at the beginning of a very parallel build because they're all doing atomic ops with only one thread now</p>",
        "id": 185706175,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579100889
    },
    {
        "content": "<p>so avoiding the cost may be worth it</p>",
        "id": 185706181,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579100895
    },
    {
        "content": "<p>I guess we can apply the transition only at well defined points where no locks are held and no other threads accessing rustc state exist, which would make it simpler.</p>",
        "id": 185792034,
        "sender_full_name": "Zoxc",
        "timestamp": 1579160105
    },
    {
        "content": "<p>I wonder if we could have some <code>DynSend</code> and <code>DynSync</code> traits since our types won't really be <code>Send</code> and <code>Sync</code>.</p>",
        "id": 185793370,
        "sender_full_name": "Zoxc",
        "timestamp": 1579162076
    },
    {
        "content": "<p>We could prevent transition to a parallel state while holding a lock by having a ref count of held locks.</p>",
        "id": 185810203,
        "sender_full_name": "Zoxc",
        "timestamp": 1579177887
    },
    {
        "content": "<p>So on this topic <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> had a really good idea during the meeting today, which is that <em>if</em> we want to do this work, we should start out with a CLI flag that's \"the switch\" rather than a dynamic detection of \"the switch\". It would involve all the same implementation work, just a slightly different condition on what to use. I think that if the cost of the single-threaded, yet parallel-capable, compiler is high enough we can pursue this, but otherwise it's just a fun idea to keep around for awhile</p>",
        "id": 185835189,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579194028
    }
]