[
    {
        "content": "<p>Hey there <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , I realized maybe i'd be better off having dialogue here rather than via <a href=\"https://github.com/rust-lang/rust/issues/55005#issuecomment-556978967\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55005#issuecomment-556978967\">github comments</a>. :)</p>",
        "id": 181289281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574329895
    },
    {
        "content": "<p>(that is, I think you and I are skimming the same LLVM PR's and/or email threads at the moment, such as <a href=\"https://reviews.llvm.org/D61652\" target=\"_blank\" title=\"https://reviews.llvm.org/D61652\">LLVM D61652 \"Introduce dereferenceable_globally\"</a>, so maybe its easiest to discuss live)</p>",
        "id": 181289385,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574329961
    },
    {
        "content": "<p>(Also, it does look like they landed <a href=\"https://reviews.llvm.org/D49165\" target=\"_blank\" title=\"https://reviews.llvm.org/D49165\">nofree in D49165</a>?)</p>",
        "id": 181289510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330069
    },
    {
        "content": "<p>One concern Ralf raised in the past is that <code>nofree</code> and <code>nosync</code> are function attributes, so if a function frees <em>any</em> memory (e.g. because it creates a temporary Vec internally) or synchronizes with anything (e.g. because it may panic, which involves at least some atomics to access the panic hook unless it's a no_std binary), no <code>dereferenceable</code> information for any pointer can be propagated across calls to it. My gut feeling is to agree that could potentially cause quite some regressions.</p>",
        "id": 181289799,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574330351
    },
    {
        "content": "<p>I <em>just</em> noticed that point in the comment history. :)</p>",
        "id": 181289830,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330399
    },
    {
        "content": "<p>Still, I don't really understand the argument being made here. That is: I can understand making the argument \"the model you are adopting is not as expressive as it could be.\"</p>",
        "id": 181290002,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330534
    },
    {
        "content": "<p>but that statement should not imply \"it will regress performance from what we have today\", as long as the future model is <em>at least</em> as expressive as today's model</p>",
        "id": 181290022,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330575
    },
    {
        "content": "<p>The only way I can see it regressing performance (and maybe this is what you all are in fact saying) is that if they <em>fix</em> bugs in the existing optimizations via relying on these additional attributes</p>",
        "id": 181290058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330607
    },
    {
        "content": "<p>i.e. that we are today relying on optimizations that are themselves unsound (or that we are generating code that is generally-incorrectly attributed, and that code is then optimized)</p>",
        "id": 181290083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330634
    },
    {
        "content": "<p>So is that the explanation for where the expected performance regressions would come from? Or am I misunderstanding?</p>",
        "id": 181290190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330726
    },
    {
        "content": "<p>okay I now think I see how it all fits together</p>",
        "id": 181290361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330883
    },
    {
        "content": "<p>It depends a bit on how the old <code>dereferenceable</code> attribute on function parameters is interpreted. If (as we generally did in the past) it means \"dereferenceable for the duration of this function\", that is something that's generally sound for e.g. Rust references passed as parameters (at least if there's no interior mutability) but can't be expressed in the future model. The new <code>dereferenceable</code> won't assert as much as it previously did due to nosync and nofree not being as precise (see above), and <code>dereferenceable_globally</code> is too strong (the referent can be deallocated after the function returns).</p>",
        "id": 181290385,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574330902
    },
    {
        "content": "<p>okay yes, thanks for spelling that out</p>",
        "id": 181290406,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574330928
    },
    {
        "content": "<p>If on the other hand \"the old <code>dereferenceable</code>\" was supposed to mean what's now <code>dereferenceable_globally</code> then our usage of <code>dereferenceable</code> was always incorrect.</p>",
        "id": 181290414,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574330935
    },
    {
        "content": "<p>Am I right in thinking that what we may want is something like the <code>derefenceable_in_scope</code> semantics (perhaps in its own dedicated attribute), described <a href=\"https://reviews.llvm.org/D61652#1502431\" target=\"_blank\" title=\"https://reviews.llvm.org/D61652#1502431\">here</a> ?</p>",
        "id": 181290712,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574331191
    },
    {
        "content": "<p>or maybe I've misunderstood how the patch developed over time</p>",
        "id": 181290797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574331256
    },
    {
        "content": "<p>in any case, I think I am now semi-convinced that <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> was not wrong to raise a concern on that thread</p>",
        "id": 181290842,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574331302
    },
    {
        "content": "<p>It seems like that is what we would want, but LLVM folks had concerns about whether those semantics can be implemented soundly (while still being useful for optimizations) so the patch changed to <code>dereferenceable_globally</code>.</p>",
        "id": 181290934,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574331373
    },
    {
        "content": "<p>Ah, but after digging out the old diff, I see it tried to be clever about defining the attribute in such a way that it can apply to a region <em>within</em> a function. That's generally always very hard to do correctly (&amp; in a way that plays nicely with other transformations). Defining that's tied to function scope and dropped when inlining/outlining/etc. is much easier and would get us at least some fraction of the potential optimizations.</p>",
        "id": 181291192,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574331664
    },
    {
        "content": "<p>So our running assumption is that the \"new\" interpretation of the <code>deferenceable</code> attribute is going to be \"this is dereferenceable on function entry alone\", and it will be up to LLVM analyses to determine how that affects the rest of the body?</p>",
        "id": 181291210,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574331690
    },
    {
        "content": "<p>Yes</p>",
        "id": 181291274,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574331726
    },
    {
        "content": "<p>And FWIW it's defined in a way that we can also translate e.g. <code>let x: &amp;T = foo();</code> to a <code>call</code> with <code>dereferenceable</code> attribute <em>on the return value</em> and that means the returned pointer is dereferenceable when it's returned (and analyses can try to figure out how long this holds from that point onward).</p>",
        "id": 181291341,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574331807
    },
    {
        "content": "<p>yeah, I now see the overall problem. I had thought on my initial reading that the <code>no-free</code> attribute was specified on a parameter to a function, not as a property of the function as a whole</p>",
        "id": 181291748,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574332034
    },
    {
        "content": "<p>(and that <code>no-free</code> would mean something like \"the data pointed at by the parameter is not freed during the function's invocation.\")</p>",
        "id": 181291846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574332091
    },
    {
        "content": "<blockquote>\n<p>yeah, I now see the overall problem. I had thought on my initial reading that the <code>no-free</code> attribute was specified on a parameter to a function, not as a property of the function as a whole</p>\n</blockquote>\n<p>hmm, LLVM dev <a href=\"https://reviews.llvm.org/D61652#1755299\" target=\"_blank\" title=\"https://reviews.llvm.org/D61652#1755299\">jdoerfert's response</a> to <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> leads me to think that my original interpretation was correct...? That is, no-free is a property on a parameter, not necessarily the function definition as a whole?</p>",
        "id": 181580346,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574367649
    },
    {
        "content": "<p>That is also my reading of that comment, but the nofree patch I'm aware of (<a href=\"https://reviews.llvm.org/D49165\" target=\"_blank\" title=\"https://reviews.llvm.org/D49165\">https://reviews.llvm.org/D49165</a>) explicitly defines it as a function attribute. Perhaps there was another patch?</p>",
        "id": 181584801,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574370702
    },
    {
        "content": "<p>Yes, seems so: <a href=\"https://github.com/llvm/llvm-project/blob/44fe1f024d542bb7d286f9dd03ef35ad474399bd/llvm/docs/LangRef.rst#L1136\" target=\"_blank\" title=\"https://github.com/llvm/llvm-project/blob/44fe1f024d542bb7d286f9dd03ef35ad474399bd/llvm/docs/LangRef.rst#L1136\">https://github.com/llvm/llvm-project/blob/44fe1f024d542bb7d286f9dd03ef35ad474399bd/llvm/docs/LangRef.rst#L1136</a></p>",
        "id": 181584900,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574370764
    },
    {
        "content": "<p><a href=\"https://reviews.llvm.org/D67886\" target=\"_blank\" title=\"https://reviews.llvm.org/D67886\">https://reviews.llvm.org/D67886</a></p>",
        "id": 181585046,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574370845
    },
    {
        "content": "<blockquote>\n<p>Yes, seems so: <a href=\"https://github.com/llvm/llvm-project/blob/44fe1f024d542bb7d286f9dd03ef35ad474399bd/llvm/docs/LangRef.rst#L1136\" target=\"_blank\" title=\"https://github.com/llvm/llvm-project/blob/44fe1f024d542bb7d286f9dd03ef35ad474399bd/llvm/docs/LangRef.rst#L1136\">https://github.com/llvm/llvm-project/blob/44fe1f024d542bb7d286f9dd03ef35ad474399bd/llvm/docs/LangRef.rst#L1136</a></p>\n</blockquote>\n<p>I'm not an expert in reading these docs. What does this imply if the argument points to aliased memory? I.e. if I take two pointer parameters <code>x</code> and <code>y</code>, and I mark <code>x</code> nofree, but then I do free <code>y</code>?</p>",
        "id": 181637136,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574429385
    },
    {
        "content": "<p>My hope/intuition is that writing such code and then passing the same pointer for <code>x</code> and <code>y</code> is a violation of the contract of <code>nofree</code></p>",
        "id": 181637198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574429406
    },
    {
        "content": "<p>Yes, that seems pretty clear-cut to me. The attribute asserts (implied: under threat of UB) that the memory pointed to by <code>x</code> is not freed by the callee, so any execution where that memory is freed is UB, no matter what pointer was used to free it.</p>",
        "id": 181638604,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574430541
    },
    {
        "content": "<p>yeah I am confused now, too... <code>nofree</code> has all the same scope issues as <code>dereferencable_in_scope</code>, one would think</p>",
        "id": 181639947,
        "sender_full_name": "RalfJ",
        "timestamp": 1574431399
    },
    {
        "content": "<p>I haven't had time to take another look at this</p>",
        "id": 181639955,
        "sender_full_name": "RalfJ",
        "timestamp": 1574431405
    },
    {
        "content": "<p>I don't think it's comparable. For reference, the proposed definition of <code>dereferenceable_in_scope</code> was:</p>\n<blockquote>\n<p>This indicates that the annotated pointer value has the <code>dereferenceable(&lt;n&gt;)</code> property <em>at any program point</em> in its scope (as defined by the SSA dominance property). Thus, unlike pointer values annotated with <code>dereferenceable(&lt;n&gt;)</code>, <code>dereferenceable_in_scope(&lt;n&gt;)</code> pointer values can never lose the <code>dereferenceable(&lt;n&gt;)</code> property as long as the annotated value is accessible as an SSA value.</p>\n</blockquote>\n<p>This is problematic because it's very easy and common to expand the dominance region of values (even if you're not even looking at that value at the moment), and it's not natural or expected that this would have any repercussions. An attribute tied specifically to function boundaries, on the other hand, only requires care when changing function boundaries, which is a concern for far fewer transformations. It's also mechanically easier to ensure you drop the attribute when it becomes invalid (e.g. when inlining, you're replacing uses of the parameter anyway, so you'd have to go out of your way to introduce a bug by putting a new attribute on the value you're replacing it with).</p>",
        "id": 181641478,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574432299
    },
    {
        "content": "<p>ah, so <code>nofree</code> only works on function parameters... but then one could do that for <code>dereferncable_in_scope</code> as well?</p>",
        "id": 181651232,
        "sender_full_name": "RalfJ",
        "timestamp": 1574438667
    },
    {
        "content": "<p>Yes, I even mused about that possibility earlier in this thread. But if <code>nofree</code> + <code>dereferenceable</code>-at-entry is sufficient (is it? I'm not sure) why introduce yet another attribute?</p>",
        "id": 181652587,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574439463
    },
    {
        "content": "<p>not sure if it is... concurrency is another concern</p>",
        "id": 181661002,
        "sender_full_name": "RalfJ",
        "timestamp": 1574444798
    },
    {
        "content": "<p>inserting spurious writes that you can prove would happen anyway later would not be allowed because they might introduce a race</p>",
        "id": 181661030,
        "sender_full_name": "RalfJ",
        "timestamp": 1574444826
    },
    {
        "content": "<p>moving reads around might turn them from non-racy to racy thus returning wrong results</p>",
        "id": 181661044,
        "sender_full_name": "RalfJ",
        "timestamp": 1574444838
    },
    {
        "content": "<p>And there's not really a good way to use <code>nosync</code> to fix that, is implied? That seems plausible. nosync is kinda \"all or nothing\" (not per-pointer) and we can't apply it to most functions.</p>",
        "id": 181662395,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574445657
    },
    {
        "content": "<p>well I thought <code>nofree</code> was global</p>",
        "id": 181665689,
        "sender_full_name": "RalfJ",
        "timestamp": 1574448054
    },
    {
        "content": "<p>IOW, <code>nosync</code> could be per-ptr, too... ah but that won't help, it could be other ptrs doing the sync</p>",
        "id": 181665709,
        "sender_full_name": "RalfJ",
        "timestamp": 1574448075
    },
    {
        "content": "<p>For <code>&amp;T</code> references without interior mutability, shouldn't the <code>noalias readonly</code> we add ensure that there are no writes (from any thread, least of all another) for the duration of the function? That won't help for <code>&amp;mut T</code>, but for those, both hoisting loads and spurious writes generally requires aliasing information (again: no intervening accesses from <em>any</em> thread, including the current one) in addition to dereferenceability.</p>",
        "id": 181715262,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574514494
    },
    {
        "content": "<p>hm, that sounds right, yes</p>",
        "id": 181820655,
        "sender_full_name": "RalfJ",
        "timestamp": 1574687555
    }
]