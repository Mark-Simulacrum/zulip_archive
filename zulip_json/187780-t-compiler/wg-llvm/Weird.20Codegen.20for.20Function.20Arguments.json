[
    {
        "content": "<p>I was thinking about a UCG, and stumbled across this example: <a href=\"https://godbolt.org/z/heEhEzM7a\">https://godbolt.org/z/heEhEzM7a</a>, LLVM IR: <a href=\"https://godbolt.org/z/dohsxMfaq\">https://godbolt.org/z/dohsxMfaq</a> . The codegen makes sense given the output of <code>opt</code>, but the result still seems questionable. I'm not sure what the fix here is though. Could/should rustc be emitting better LLVM IR? Is <code>opt</code> missing an optimization? What would the \"correct\" LLVM IR even look like?</p>",
        "id": 274335910,
        "sender_full_name": "Jake",
        "timestamp": 1646611061
    },
    {
        "content": "<p>i assume you mean the unnecessary stack-to-stack copy in <code>example::f</code>?<br>\nthere's nothing that i immediately see wrong with <code>example::check</code></p>",
        "id": 274340650,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1646617452
    },
    {
        "content": "<p>if that is what you meant:</p>\n<p>the sysv abi (used because we're calling an <code>extern \"C\"</code> function on x64 linux) requires us to pass that argument on the stack<br>\nin order to do this in the general case, the extra stack copy is required, since the argument might not be at the stack position where we need it</p>\n<p>potentially, a special case could be added to llvm's x86 backend to avoid the copy when the argument is already in the right place (and either the caller is readonly or the argument is unused after the call?)<br>\nbut this may be nontrivial</p>\n<p>this is not related to ir or middle-end optimizations (<code>opt</code>)<br>\nthe ir is ~identical for <code>extern \"C\"</code> and <code>extern \"Rust\"</code>, except for <code>byval</code> on the argument (which is added specifically for this purpose)<br>\n<a href=\"https://godbolt.org/z/T35j13dWT\">https://godbolt.org/z/T35j13dWT</a></p>",
        "id": 274340665,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1646617479
    },
    {
        "content": "<p>C-only example: <a href=\"https://godbolt.org/z/Yc7nY4Eoh\">https://godbolt.org/z/Yc7nY4Eoh</a></p>",
        "id": 274340670,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1646617488
    },
    {
        "content": "<p>relevant llvm issues:<br>\n<a href=\"https://github.com/llvm/llvm-project/issues/30982\">https://github.com/llvm/llvm-project/issues/30982</a><br>\n<a href=\"https://github.com/llvm/llvm-project/issues/14770\">https://github.com/llvm/llvm-project/issues/14770</a></p>",
        "id": 274341275,
        "sender_full_name": "erikdesjardins",
        "timestamp": 1646618363
    },
    {
        "content": "<p>Those issues are interesting, thanks</p>",
        "id": 274342158,
        "sender_full_name": "Jake",
        "timestamp": 1646619399
    }
]