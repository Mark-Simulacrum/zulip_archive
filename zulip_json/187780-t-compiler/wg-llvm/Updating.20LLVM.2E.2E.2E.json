[
    {
        "content": "<p>I'm trying to update our LLVM version to current master. Ran into this linker error:</p>\n<div class=\"codehilite\"><pre><span></span>/usr/bin/ld: /home/nikic/rust/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-5c2422e2d705ee7d.rlib(std-5c2422e2d705ee7d.std.e5hw7qqp-cgu.2.rcgu.o): TLS transition from R_X86_64_TLSLD to R_X86_64_TPOFF32 against `_ZN3std10sys_common11thread_info11THREAD_INFO7__getit5__KEY17hc720e1025694e38eE&#39; at 0x15 in section `.text._ZN3std10sys_common11thread_info3set17hbe84d5bac17e4e00E&#39; failed\n</pre></div>\n\n\n<p>I'm a bit stumped on how I would go about debugging something like this.</p>",
        "id": 169782825,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1562447792
    },
    {
        "content": "<p>I suspect this is due to <a href=\"https://reviews.llvm.org/D62106\" target=\"_blank\" title=\"https://reviews.llvm.org/D62106\">https://reviews.llvm.org/D62106</a>. It looks like __tls_get_addr now uses a GOTPCREL rather than PLT32 relocation and that somehow breaks things.</p>",
        "id": 169808467,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1562499945
    },
    {
        "content": "<p>Try another linker, possibly a linker bug with your particular version of binutil.</p>",
        "id": 169808468,
        "sender_full_name": "nagisa",
        "timestamp": 1562499950
    },
    {
        "content": "<p>At least if I understand the error correctly, then \"ELF handling for Thread-Local storage document” specifies a mechanism to transition from TLSLD to TPOFF32</p>",
        "id": 169808764,
        "sender_full_name": "nagisa",
        "timestamp": 1562500515
    },
    {
        "content": "<p>As far as debugging goes, I would also attempt to 1) minimize and 2) look at the assembly to understand what relocations llvm generates</p>",
        "id": 169808820,
        "sender_full_name": "nagisa",
        "timestamp": 1562500615
    },
    {
        "content": "<p>Yeah, I've minimized this (just a thread local linked in from a different crate is enough) and looked at the objdump differences, which turned out to just be GOT vs PLT for the __tls_get_addr symbol.</p>",
        "id": 169808983,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1562500922
    },
    {
        "content": "<p>Tried a different linker -- works with gold.</p>",
        "id": 169809000,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1562500977
    },
    {
        "content": "<p>Wait no, it seems to work with both binutils ld and gold when explicitly specified via <code>-C linker</code>. But fails without. What is our default linker?</p>",
        "id": 169809374,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1562501553
    },
    {
        "content": "<p>Looks like the default linker is <code>cc</code>.</p>",
        "id": 169809657,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1562502048
    },
    {
        "content": "<p>Okay, it doesn't work with -Clinker after all. Turns out I just get an empty executable in that case because crt0 is not linked in. After dropping libc it also happens with an explicit <code>-C linker=/usr/bin/ld</code>.</p>",
        "id": 169811646,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1562505237
    },
    {
        "content": "<p>There’s <code>linker-flavour</code> option which specifies what kind of a linker you’re using.</p>",
        "id": 169820674,
        "sender_full_name": "nagisa",
        "timestamp": 1562523042
    },
    {
        "content": "<p>My go-to alternative is usually <code>clang -fuse-ld=lld</code></p>",
        "id": 169820686,
        "sender_full_name": "nagisa",
        "timestamp": 1562523075
    }
]