[
    {
        "content": "<p>We have three issues with pathological compile-time increases with the new pass manager: <a href=\"https://github.com/rust-lang/rust/issues/89524\">https://github.com/rust-lang/rust/issues/89524</a> <a href=\"https://github.com/rust-lang/rust/issues/89647\">https://github.com/rust-lang/rust/issues/89647</a> <a href=\"https://github.com/rust-lang/rust/issues/89609\">https://github.com/rust-lang/rust/issues/89609</a> cc <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span></p>",
        "id": 257424674,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634153863
    },
    {
        "content": "<p>do you have any sense whether they are related?</p>",
        "id": 257424816,
        "sender_full_name": "cuviper",
        "timestamp": 1634153910
    },
    {
        "content": "<p>For the first one, the root cause is pathological inlining of recursive calls (drop_in_place).</p>",
        "id": 257425142,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634154060
    },
    {
        "content": "<p>I didn't look at the others, but based on your description it sounds like inlining is the problem for the s390x one as well?</p>",
        "id": 257425209,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634154087
    },
    {
        "content": "<p>the expansion in the s390x one looks loop-related, but I don't know, maybe inlining is involved too</p>",
        "id": 257425407,
        "sender_full_name": "cuviper",
        "timestamp": 1634154164
    },
    {
        "content": "<p>I want to try that new opt-pass reducer, but I think that wants an actual crash</p>",
        "id": 257425481,
        "sender_full_name": "cuviper",
        "timestamp": 1634154207
    },
    {
        "content": "<p>After InlinerPass: 929<br>\nAfter PostOrderFunctionAttrsPass: 5580<br>\n...<br>\nAfter InlinerPass: 5129<br>\nAfter InlinerPass: 150185<br>\n...</p>",
        "id": 257428422,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634155340
    },
    {
        "content": "<p>This is on the s390x test case. So yeah, I think this is an inlining issue as well. Things just tends to get stuck in loop passes once you get to functions with hundreds of thousands of instructions.</p>",
        "id": 257428540,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634155384
    },
    {
        "content": "<p>For the first issue, the patch at <a href=\"https://reviews.llvm.org/D98481\">https://reviews.llvm.org/D98481</a> fixes the issue. I just checked it with the s390x case as well, and it brings time down to 4s there as well (not quite the same as legacy pm but good enough)</p>",
        "id": 257431559,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634156572
    },
    {
        "content": "<p>I did a perf run for that one at <a href=\"https://github.com/rust-lang/rust/pull/89830\">https://github.com/rust-lang/rust/pull/89830</a>, which shows that it does have some impact on performance in practice (regressions &lt;1% on check builds)</p>",
        "id": 257431672,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634156618
    },
    {
        "content": "<p>Which is fine for us I think, but the upstream patch seems to be stalled</p>",
        "id": 257431960,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634156729
    },
    {
        "content": "<p>good find, thanks!</p>",
        "id": 257441665,
        "sender_full_name": "cuviper",
        "timestamp": 1634160685
    },
    {
        "content": "<p>I wonder why s390x in particular inlines poorly on that input</p>",
        "id": 257441808,
        "sender_full_name": "cuviper",
        "timestamp": 1634160735
    },
    {
        "content": "<p>The s390x architecture is particularly distinct and LLVM in many ways encodes an \"x86-first\" view of the world.</p>",
        "id": 257447620,
        "sender_full_name": "Jubilee",
        "timestamp": 1634163388
    },
    {
        "content": "<p>To a certain extent Rust does too, honestly.</p>",
        "id": 257447710,
        "sender_full_name": "Jubilee",
        "timestamp": 1634163431
    },
    {
        "content": "<p>yeah, sure, we even encode that as \"Tier 1\", though we've now added aarch64 there too</p>",
        "id": 257447989,
        "sender_full_name": "cuviper",
        "timestamp": 1634163581
    },
    {
        "content": "<p>but here, I'm wondering why it's different in <code>opt</code> that's sort of target-neutral, not down in <code>llc</code> codegen</p>",
        "id": 257448234,
        "sender_full_name": "cuviper",
        "timestamp": 1634163706
    },
    {
        "content": "<p>I'm guessing it's something in <code>SystemZTargetTransformInfo</code>, like unroll options</p>",
        "id": 257448338,
        "sender_full_name": "cuviper",
        "timestamp": 1634163751
    },
    {
        "content": "<p>Likely due to differences in the cost model. Something probably happens to go just below/above a threshold somewhere for the s390x target.</p>",
        "id": 257492678,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634197149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> On a tangentially related note, <a href=\"https://reviews.llvm.org/D111575\">https://reviews.llvm.org/D111575</a> may be of interest to you. Might help to cut down NewPM memory usage on 32-bit hosts at a relatively minor compile-time impact.</p>",
        "id": 258075508,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634581317
    },
    {
        "content": "<p>oh interesting! we may have to figure out heuristics for turning that on, if not <em>always</em> for 32-bit hosts</p>",
        "id": 258075941,
        "sender_full_name": "cuviper",
        "timestamp": 1634581467
    },
    {
        "content": "<p>Should at least check how much difference it makes (for instructions &amp; max-rss) on our workloads.</p>",
        "id": 258076054,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634581513
    },
    {
        "content": "<p>Anyway, I'm not sure how to move forward on the compile-time issue.</p>",
        "id": 258076537,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634581728
    },
    {
        "content": "<p>are there any <code>-Cllvm-args</code> we can offer to work around it?</p>",
        "id": 258076806,
        "sender_full_name": "cuviper",
        "timestamp": 1634581828
    },
    {
        "content": "<p>this will reach beta soon, and it would be nice to at least have something for relnotes if it goes stable</p>",
        "id": 258076857,
        "sender_full_name": "cuviper",
        "timestamp": 1634581851
    },
    {
        "content": "<p>Don't think there's anything directly relevant. Maybe reducing inlining threshold would work?</p>",
        "id": 258077177,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634581980
    },
    {
        "content": "<p>I think our best bet right now would be to cherry-pick the inliner patch until there is a solution more acceptable for upstream -- unfortunately I don't have a lot of confidence that there will be one.</p>",
        "id": 258077663,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634582175
    },
    {
        "content": "<p>Nice result on the memory usage front: <a href=\"https://perf.rust-lang.org/compare.html?start=5dab47dcd8267b8769421b46532414ec36d625e3&amp;end=cfe9eecdf01985dff182ce388fe843987d1da888\">https://perf.rust-lang.org/compare.html?start=5dab47dcd8267b8769421b46532414ec36d625e3&amp;end=cfe9eecdf01985dff182ce388fe843987d1da888</a> <a href=\"https://perf.rust-lang.org/compare.html?start=5dab47dcd8267b8769421b46532414ec36d625e3&amp;end=cfe9eecdf01985dff182ce388fe843987d1da888&amp;stat=max-rss\">https://perf.rust-lang.org/compare.html?start=5dab47dcd8267b8769421b46532414ec36d625e3&amp;end=cfe9eecdf01985dff182ce388fe843987d1da888&amp;stat=max-rss</a></p>",
        "id": 258154792,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1634629570
    },
    {
        "content": "<p>And best of all the instruction count regression is constently less than 1% and the fast majority less than 0.4%.</p>",
        "id": 258166686,
        "sender_full_name": "bjorn3",
        "timestamp": 1634636252
    },
    {
        "content": "<p>So it may be acceptable to land it for all platforms.</p>",
        "id": 258166776,
        "sender_full_name": "bjorn3",
        "timestamp": 1634636298
    },
    {
        "content": "<p>Has there been any change on this? As far as I can tell, we're just waiting on <a href=\"https://reviews.llvm.org/D98481\">https://reviews.llvm.org/D98481</a> right? The last comment there was over a month ago, just trying to make sure I understand the status.</p>",
        "id": 261972480,
        "sender_full_name": "Ben Kimock",
        "timestamp": 1637261628
    },
    {
        "content": "<p>no change that I know of</p>",
        "id": 261973681,
        "sender_full_name": "cuviper",
        "timestamp": 1637262135
    },
    {
        "content": "<p>I'm tired of arguing with these people, so I'm suggesting that we cherry-pick the current version of the patch. PR is <a href=\"https://github.com/rust-lang/llvm-project/pull/133\">https://github.com/rust-lang/llvm-project/pull/133</a>.</p>",
        "id": 274264531,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646513717
    },
    {
        "content": "<p>I am happy to see whatever you think will fix this problem appear in rustc.</p>\n<p>But just to make sure I understand where this puts us, are we going to be in a situation where programs may build fine with the rustc distributed by rustup, but if a distro or whoever links in their LLVM, programs may fail to build due to timeout/OOM?</p>",
        "id": 274270068,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1646520836
    },
    {
        "content": "<p>Yup, that's right. In practice this means that distros will have to apply the patch as well.</p>",
        "id": 274271501,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646522636
    },
    {
        "content": "<p>love it.</p>",
        "id": 274272103,
        "sender_full_name": "Jubilee",
        "timestamp": 1646523386
    },
    {
        "content": "<p>So, they're proposing to land this under a default-disabled option. I'm not sure we should accept.</p>",
        "id": 274330933,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646604478
    },
    {
        "content": "<p>For one, that is problematic where linker plugin LTO is concerned, unless we want people to become experts on LLVM internals and start passing stuff like <code>-Wl,-mllvm,-enable-unbounded-cross-scc-inlining=0</code> in their build system.</p>",
        "id": 274331015,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646604550
    },
    {
        "content": "<p>And second, it's not a rust-specific problem (I've been told that at least Apple also cherry-picked the earlier variant of the patch), so fixing this just for us doesn't sit quite right.</p>",
        "id": 274331415,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646605059
    },
    {
        "content": "<p>So I think we may be better off forcing a distro-level solution than accepting a default-disabled option.</p>",
        "id": 274331488,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646605144
    },
    {
        "content": "<p>Though possibly I'm sufficiently pissed off by these people that I'm taking a needlessly antagonistic position...</p>",
        "id": 274331939,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646605765
    },
    {
        "content": "<p>Or both: land the default-disabled option and enable it in rustc, and also patch it to default enabled in rust-llvm and our distros to cover to and other uses.</p>",
        "id": 274334194,
        "sender_full_name": "cuviper",
        "timestamp": 1646608484
    },
    {
        "content": "<p>Yeah, that makes sense. I guess a default-disabled option is strictly better than nothing :) Though if it lands default-disabled, it's probably never going to get enabled...</p>",
        "id": 274334479,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646608904
    },
    {
        "content": "<p>I'd be actually quite curious how many people complain about performance regression(s) if distros end up picking this patch, enabled by default in their repos.</p>",
        "id": 274339154,
        "sender_full_name": "nagisa",
        "timestamp": 1646615341
    },
    {
        "content": "<p>I do recall multiple instances where my patch would be rejected because it would cause unbounded code size/comptime perf increase in the past.</p>",
        "id": 274339265,
        "sender_full_name": "nagisa",
        "timestamp": 1646615483
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> there ain't a more performant program that just produces the side effects without any computation, a enabled-by-default pass that evaluates any computation and leaves the side effects in, could be on the table by the sound of it, halting problem be damned...</p>",
        "id": 274339363,
        "sender_full_name": "nagisa",
        "timestamp": 1646615631
    },
    {
        "content": "<p>Just to make sure I'm following, the perf concerns in review with the latest patch are only theoretical, right?</p>",
        "id": 274340300,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1646616888
    },
    {
        "content": "<p>It is possible to construct a test case that produces a worse codegen, so not quite.</p>",
        "id": 274340446,
        "sender_full_name": "nagisa",
        "timestamp": 1646617095
    },
    {
        "content": "<p>That makes sense. I'm just imagining a world where this gets turned on more and more places, and whenever someone complains about huge compile time the first answer is always \"did you pass this flag\" and an attempt at explaining why this isn't the default.</p>\n<p>But what do I know, I'm just here because we couldn't upgrade our toolchain due to this bug and it'll be addressed in Rust soon.</p>",
        "id": 274343286,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1646620908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120827\">Ben Kimock (Saethlin)</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/NewPM.20compile-time.20issues/near/274340300\">said</a>:</p>\n<blockquote>\n<p>Just to make sure I'm following, the perf concerns in review with the latest patch are only theoretical, right?</p>\n</blockquote>\n<p>Yes, it's purely theoretical at this point, which makes it so annoying. I could understand if they bothered to run some benchmarks, saw a regression and said \"I consider this regression a blocking issue, please find a way to preserve performance for this case\". But that would make it an actionable concern that could actually be resolved, so that's no good.</p>",
        "id": 274362035,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646642349
    },
    {
        "content": "<p>I'll poke some folks at Google about this, since if it's effectively-required to have this for Rust then it's hard to imagine we wouldn't carry the patch as well.</p>",
        "id": 274417951,
        "sender_full_name": "durin42",
        "timestamp": 1646670891
    },
    {
        "content": "<p>Yeah, it's not a non-concern so much as it's an airy concern... the form of the concern without the substance.</p>",
        "id": 274458564,
        "sender_full_name": "Jubilee",
        "timestamp": 1646687697
    },
    {
        "content": "<p>Yay, in the end <a href=\"https://reviews.llvm.org/D121084\">https://reviews.llvm.org/D121084</a> got merged upstream and is in LLVM 14.0.0.</p>",
        "id": 274677103,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646827100
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/rust-lang/rust/pull/94764\">https://github.com/rust-lang/rust/pull/94764</a></p>",
        "id": 274685988,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1646832078
    }
]