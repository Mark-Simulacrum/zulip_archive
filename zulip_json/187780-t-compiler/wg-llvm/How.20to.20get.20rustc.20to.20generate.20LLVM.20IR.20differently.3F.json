[
    {
        "content": "<p>Hello, I've gotten a fork of rust working with the Apple LLVM and an <code>arm64e</code> target. The problem is, it doesn't generate instructions such as <code>BRAA</code> and <code>BLAA</code></p>",
        "id": 204378955,
        "sender_full_name": "aspen",
        "timestamp": 1595208101
    },
    {
        "content": "<p>How would I get rustc to generate LLVM IR with these instructions?</p>",
        "id": 204379011,
        "sender_full_name": "aspen",
        "timestamp": 1595208188
    },
    {
        "content": "<p>Do you have C code that generates the appropriate thing? You can then work backwards and generate the LLVM IR for the C code and compare it to what the Rust code generates. That would probably give someone a better start on pointing you to a place to look.</p>",
        "id": 204379518,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595209101
    },
    {
        "content": "<p>I think I've figured it out - adding the <code>+v8.3a</code> feature, but I'm not sure yet.</p>",
        "id": 204379520,
        "sender_full_name": "aspen",
        "timestamp": 1595209127
    },
    {
        "content": "<p>I don't know anything, but I wouldn't expect that the <em>LLVM IR</em> would mention a specific instruction. It's more about how the codegen translates IR to the machine code.</p>",
        "id": 204379539,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595209159
    },
    {
        "content": "<p>-snip-</p>",
        "id": 204379583,
        "sender_full_name": "aspen",
        "timestamp": 1595209210
    },
    {
        "content": "<p><code>\"target-features\"=\"+crc,+crypto,+fp-armv8,+lse,+neon,+ras,+rcpc,+rdm,+v8.3a,+zcm,+zcz\"</code></p>",
        "id": 204379585,
        "sender_full_name": "aspen",
        "timestamp": 1595209232
    },
    {
        "content": "<p>that's the interesting part</p>",
        "id": 204379586,
        "sender_full_name": "aspen",
        "timestamp": 1595209236
    },
    {
        "content": "<p>I strongly doubt LLVM will use authenticated pointers for unmodified code, probably mostly because it would just break pretty much any typical program.</p>",
        "id": 204379650,
        "sender_full_name": "nagisa",
        "timestamp": 1595209345
    },
    {
        "content": "<p>Please review your code for how appropriate it is to be posted to a general chat server and avoid breaking Rust's code of conduct.</p>",
        "id": 204379654,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595209365
    },
    {
        "content": "<p>Sorry, a friend gave it to me.</p>",
        "id": 204379656,
        "sender_full_name": "aspen",
        "timestamp": 1595209372
    },
    {
        "content": "<p>didn't think anyone would care but whatever</p>",
        "id": 204379671,
        "sender_full_name": "aspen",
        "timestamp": 1595209404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204379650\">said</a>:</p>\n<blockquote>\n<p>I strongly doubt LLVM will use authenticated pointers for unmodified code, probably mostly because it would just break pretty much any typical program.</p>\n</blockquote>\n<p>that ASM had two PAC instructions - <code>PACIBSP</code> and <code>RETAB</code></p>",
        "id": 204379678,
        "sender_full_name": "aspen",
        "timestamp": 1595209437
    },
    {
        "content": "<p>ok got it.</p>",
        "id": 204379715,
        "sender_full_name": "nagisa",
        "timestamp": 1595209449
    },
    {
        "content": "<p>rn I'm compiling rust with <code>+v8.3a</code> added to the arm64e target's features</p>",
        "id": 204379719,
        "sender_full_name": "aspen",
        "timestamp": 1595209458
    },
    {
        "content": "<p>to see if that's it.</p>",
        "id": 204379721,
        "sender_full_name": "aspen",
        "timestamp": 1595209460
    },
    {
        "content": "<p>probably shouldn't have made this topic this early lol</p>",
        "id": 204379724,
        "sender_full_name": "aspen",
        "timestamp": 1595209478
    },
    {
        "content": "<p>you could've compiled an equally trivial example with the rustc build you already had to verify</p>",
        "id": 204379725,
        "sender_full_name": "nagisa",
        "timestamp": 1595209486
    },
    {
        "content": "<p>Yup. You can add target features via command line</p>",
        "id": 204379744,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595209516
    },
    {
        "content": "<p>now that you have a rustc build with apple's llvm you should probably be working with trivial examples rather than rebuilding the compiler.</p>",
        "id": 204379748,
        "sender_full_name": "nagisa",
        "timestamp": 1595209523
    },
    {
        "content": "<p>... woops, how?</p>",
        "id": 204379749,
        "sender_full_name": "aspen",
        "timestamp": 1595209525
    },
    {
        "content": "<p>-C target-feature</p>",
        "id": 204379752,
        "sender_full_name": "nagisa",
        "timestamp": 1595209532
    },
    {
        "content": "<p>thanks</p>",
        "id": 204379755,
        "sender_full_name": "aspen",
        "timestamp": 1595209542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> actuallyâ€¦ don't we have a list of allowed features? That we support.</p>",
        "id": 204379797,
        "sender_full_name": "nagisa",
        "timestamp": 1595209577
    },
    {
        "content": "<p>I think you would need to go through <code>-C/-Z llvm-args</code> instead to specify features not in this list.</p>",
        "id": 204379801,
        "sender_full_name": "nagisa",
        "timestamp": 1595209602
    },
    {
        "content": "<p>Oh, hmm.</p>",
        "id": 204379809,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595209632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>wuz % cargo rustc -- -C target-feature=&#39;xyzzy&#39;\n   Compiling wuz v0.1.0 (/private/tmp/wuz)\n&#39;xyzzy&#39; is not a recognized feature for this target (ignoring feature)\n</code></pre></div>\n\n\n<p>I <em>think</em> that's coming from LLVM, not <code>rustc</code></p>",
        "id": 204379870,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595209698
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/llvm_util.rs#L165\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/llvm_util.rs#L165</a></p>",
        "id": 204379895,
        "sender_full_name": "nagisa",
        "timestamp": 1595209778
    },
    {
        "content": "<p>but also that contains v8.3a</p>",
        "id": 204379899,
        "sender_full_name": "nagisa",
        "timestamp": 1595209784
    },
    {
        "content": "<p><code>RUSTC=$HOME/Builds/rust-arm64e/bin/rustc RUSTFLAGS=\"-Ctarget-feature=+v8.3a -Ctarget-feature=+ras -Ctarget-feature=+rcpc -Ctarget-feature=+rdm -Ctarget-feature=+lse -Ctarget-feature=+crc -Ctarget-feature=+crypto -Ctarget-feature=+fp-armv8 -Ctarget-feature=+zcm -Ctarget-feature=+zcz\" cargo rustc --target=arm64e-apple-ios --release -- --emit=asm</code></p>",
        "id": 204379952,
        "sender_full_name": "aspen",
        "timestamp": 1595209857
    },
    {
        "content": "<p>wait lemme try an executable lol</p>",
        "id": 204379961,
        "sender_full_name": "aspen",
        "timestamp": 1595209877
    },
    {
        "content": "<p>I wonder if the allow list only corresponds to conditional configuration...</p>",
        "id": 204380044,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595209980
    },
    {
        "content": "<p>could be.</p>",
        "id": 204380056,
        "sender_full_name": "nagisa",
        "timestamp": 1595210013
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">testB</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;testB!&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello, world!&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204380066,
        "sender_full_name": "aspen",
        "timestamp": 1595210018
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>src/llvm-project/llvm/lib/MC/MCSubtargetInfo.cpp\n81:    errs() &lt;&lt; &quot;&#39;&quot; &lt;&lt; Feature &lt;&lt; &quot;&#39; is not a recognized feature for this target&quot;\n266:    errs() &lt;&lt; &quot;&#39;&quot; &lt;&lt; Feature &lt;&lt; &quot;&#39; is not a recognized feature for this target&quot;\n</code></pre></div>",
        "id": 204380067,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595210018
    },
    {
        "content": "<p>no pacibsp or retab instructions in the --emit llvm-ir</p>",
        "id": 204380072,
        "sender_full_name": "aspen",
        "timestamp": 1595210035
    },
    {
        "content": "<p>wait a second</p>",
        "id": 204380113,
        "sender_full_name": "aspen",
        "timestamp": 1595210052
    },
    {
        "content": "<p>i found it</p>",
        "id": 204380114,
        "sender_full_name": "aspen",
        "timestamp": 1595210054
    },
    {
        "content": "<p>it's an attribute in the llvm IR</p>",
        "id": 204380115,
        "sender_full_name": "aspen",
        "timestamp": 1595210060
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>attributes #0 = { noinline nounwind optnone ssp uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;no-frame-pointer-elim&quot;=&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;ptrauth-calls&quot; &quot;ptrauth-returns&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;vortex&quot; &quot;target-features&quot;=&quot;+crc,+crypto,+fp-armv8,+lse,+neon,+ras,+rcpc,+rdm,+v8.3a,+zcm,+zcz&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; }\n</code></pre></div>",
        "id": 204380119,
        "sender_full_name": "aspen",
        "timestamp": 1595210071
    },
    {
        "content": "<p><code>\"ptrauth-calls\" \"ptrauth-returns\"</code></p>",
        "id": 204380121,
        "sender_full_name": "aspen",
        "timestamp": 1595210083
    },
    {
        "content": "<p>As I mentioned earlier, I wouldn't expect there to be specific instructions in the IR (unless you had an <code>asm!</code> block)</p>",
        "id": 204380137,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595210142
    },
    {
        "content": "<p>yeah</p>",
        "id": 204380139,
        "sender_full_name": "aspen",
        "timestamp": 1595210150
    },
    {
        "content": "<p>now I need to figure out how to get the target to insert those attributes</p>",
        "id": 204380142,
        "sender_full_name": "aspen",
        "timestamp": 1595210161
    },
    {
        "content": "<p>if you grep for <code>apply_llfn</code> you will find where in rust attributes to functions are applied</p>",
        "id": 204380197,
        "sender_full_name": "nagisa",
        "timestamp": 1595210249
    },
    {
        "content": "<p>(but also these attributes appear to be specific to apple's llvm (again))</p>",
        "id": 204380206,
        "sender_full_name": "nagisa",
        "timestamp": 1595210266
    },
    {
        "content": "<p><code>from_fn_attrs</code> is a relevant function here.</p>",
        "id": 204380256,
        "sender_full_name": "nagisa",
        "timestamp": 1595210328
    },
    {
        "content": "<p>I was looking at that, actually.</p>",
        "id": 204380262,
        "sender_full_name": "aspen",
        "timestamp": 1595210351
    },
    {
        "content": "<p>I was just trying to find how to pass somethign down to codegen attrs from a target.</p>",
        "id": 204380266,
        "sender_full_name": "aspen",
        "timestamp": 1595210362
    },
    {
        "content": "<p>I donâ€™t think we have any target-specific attributes fwiw.</p>",
        "id": 204380497,
        "sender_full_name": "nagisa",
        "timestamp": 1595210702
    },
    {
        "content": "<p>yeah i made it a TargetOptions thing</p>",
        "id": 204380504,
        "sender_full_name": "aspen",
        "timestamp": 1595210718
    },
    {
        "content": "<p>and what we do have is just feature stuff, controlled entirely from source code.</p>",
        "id": 204380507,
        "sender_full_name": "nagisa",
        "timestamp": 1595210724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">set_pac</span><span class=\"p\">(</span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">CodegenCx</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;ll</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llfn</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">().</span><span class=\"n\">must_use_pac</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">llvm</span>::<span class=\"n\">AddFunctionAttrStringValue</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">llvm</span>::<span class=\"n\">AttributePlace</span>::<span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">const_cstr</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth-calls&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">const_cstr</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">llvm</span>::<span class=\"n\">AddFunctionAttrStringValue</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">llvm</span>::<span class=\"n\">AttributePlace</span>::<span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">const_cstr</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth-returns&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">const_cstr</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204380574,
        "sender_full_name": "aspen",
        "timestamp": 1595210832
    },
    {
        "content": "<p>Should work?</p>",
        "id": 204380577,
        "sender_full_name": "aspen",
        "timestamp": 1595210834
    },
    {
        "content": "<p>and yes I added <code>must_use_pac</code> myself.</p>",
        "id": 204380648,
        "sender_full_name": "aspen",
        "timestamp": 1595210925
    }
]