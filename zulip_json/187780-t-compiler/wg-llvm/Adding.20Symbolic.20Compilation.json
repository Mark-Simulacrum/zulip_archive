[
    {
        "content": "<p>Hi all, new here, and I'm working on adding a custom LLVM pass for symbolizing function arguments in binaries using <a href=\"https://github.com/eurecom-s3/symcc\">SymCC</a>.</p>\n<p>I dug into the docs in the <a href=\"https://rustc-dev-guide.rust-lang.org/backend/debugging.html#compiler-options-to-know-and-love\">rustc-dev-guide</a> for running custom LLVM passes, but it isn't clear how best to load a custom pass from a module. Any advice on the best place to load/run the <code>symbolize</code> pass, and subsequently compile <code>alloc/core/std</code> with symbolic arguments?</p>\n<p>Basically, the end-goal is to end up with a wrapped <code>rustc</code> similar to the wrapper around <code>clang</code> that <code>symcc/sym++</code> uses, and then use the wrapped <code>rustc</code>to compile crates with symbolic instrumentation.</p>\n<p>Thanks in advance for any advice</p>",
        "id": 213223301,
        "sender_full_name": "nyms",
        "timestamp": 1602627048
    },
    {
        "content": "<p>follow-up: found the API for <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/back/write.rs#L454\">LLVM backend</a> opt passes. Is this a good place to add a custom pass? Are there less invasive ways to add a custom pass? Apologies if these are dumb questions. Got some success adding symbolic instrumentation using <code>opt</code> and <code>llc</code>, but was hoping for a solution that could be run with something like <code>cargo sym build/run/etc</code>.</p>",
        "id": 213241638,
        "sender_full_name": "nyms",
        "timestamp": 1602644334
    },
    {
        "content": "<p>This is absolutely a reasonable question and a reasonable place to ask it, unfortunately I don't have much to say except that I saw a similar thread recently about adding a custom LLVM pass in a non-invasive \"plug-in\" fashion and based on the conversation that resulted, it seems that no, there's not really a better way.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/llvm.20obfuscation/near/213052485\">said</a>:</p>\n<blockquote>\n<p>It would be great to figure that out though... Nick Clifton was looking at adding <code>annobin</code> support to LLVM as a plug-in pass, and we'd love to load that for rustc too</p>\n</blockquote>",
        "id": 213372977,
        "sender_full_name": "Jubilee",
        "timestamp": 1602727820
    },
    {
        "content": "<p>Thanks, will keep playing around with stuff. Looking at <code>miri</code>, <code>cargo-fuzz</code> (and now <code>annobin</code> :) for inspiration on adding passes. SymCC hooks the std library for C (libc++) with instrumentation, and wraps <code>clang</code> to add instrumentation passes to other code under test. So, trying to figure out the build.</p>\n<p>Right now I'm doing: (1) use <a href=\"http://build.rs\">build.rs</a> to run SymCC build system,  (2) compile <code>alloc/core/std</code> to LLVM IR, (3) use <code>libSymbolize.so</code> (LLVM pass artifact) as opt pass, (4) compile to assembly with <code>llc</code>, (5) compile assembly to machine code with <code>cc</code> crate.</p>\n<p>Still working on 2-5. Then, to get it working for code under test, either need a way to link the instrumented <code>alloc/core/std</code>, fully compile <code>rustc</code> with symbolic instrumentation, or something else entirely; not sure which yet.</p>\n<p>Having a \"plug-in\" functionality would be awesome, and I'm down to help anyone already working on something like that (or begin work on it if not).</p>",
        "id": 213514609,
        "sender_full_name": "nyms",
        "timestamp": 1602818649
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/sanitizers.html\">https://rustc-dev-guide.rust-lang.org/sanitizers.html</a><br>\nMaybe the sanitizer instrumentation would help you with this?</p>",
        "id": 213736340,
        "sender_full_name": "Jubilee",
        "timestamp": 1603072063
    },
    {
        "content": "<p>Ah, <a href=\"https://github.com/rust-lang/rust/issues/74705\">#74705</a> covers a new pass manager being added recently, behind an unstable flag.</p>",
        "id": 213965190,
        "sender_full_name": "Jubilee",
        "timestamp": 1603220608
    }
]