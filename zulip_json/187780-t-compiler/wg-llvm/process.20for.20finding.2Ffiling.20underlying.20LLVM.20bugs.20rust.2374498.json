[
    {
        "content": "<p>Hi all, I was going through <a href=\"https://github.com/rust-lang/rust/issues/74498\">rust#74498</a> and have independently confirmed the analysis there that indicates that this is an LLVM <code>-loop-optimize</code> bug</p>",
        "id": 205655809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596242865
    },
    {
        "content": "<p>but I couldn't tell if any of the participants on the rust issue (<a href=\"https://github.com/rust-lang/rust/issues/74498\">rust#74498</a>) had actually filed such a bug, or tracked one down?</p>",
        "id": 205655859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596242894
    },
    {
        "content": "<p>I did a couple naive searches on <a href=\"https://bugs.llvm.org/\">https://bugs.llvm.org/</a>, but couldn't find anything obvious (namely, new bugs that either mention <a href=\"https://github.com/rust-lang/rust/issues/74498\">#74498</a>, or that mention <code>add nuw</code> under the <code>Loop Optimizer</code> component...)</p>",
        "id": 205655889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596242952
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"198590\">@comex</span> <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> <span class=\"user-mention\" data-user-id=\"132778\">@Luqman Aden</span></p>",
        "id": 205655953,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596243003
    },
    {
        "content": "<p>basically, I am asking 1. if any of you can point me at an already filed bug for this, and more generally 2. what process would <em>you use</em> to find such a bug, or find an already filed record of the same bug?</p>",
        "id": 205655978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596243056
    },
    {
        "content": "<p>(while I await responses here, I will start drafting a bug to file on <a href=\"http://bugs.llvm.org\">bugs.llvm.org</a>. But I figure an already filed bug is likely to have more useful stuff in it than what I would file. Or at least, it would represent less labor <em>for me</em>. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 205656044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596243124
    },
    {
        "content": "<p>people will very rarely file bugs against llvm itself with llvm-ir reproducers.</p>",
        "id": 205656702,
        "sender_full_name": "nagisa",
        "timestamp": 1596244197
    },
    {
        "content": "<p>because they'd prefer C source to feed to clang?</p>",
        "id": 205656748,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244220
    },
    {
        "content": "<p>more commonly you're going to find stuff like \"<code>clang</code> doesn't terminate\"</p>",
        "id": 205656749,
        "sender_full_name": "nagisa",
        "timestamp": 1596244220
    },
    {
        "content": "<p>I'd say its because that's how people are most likely to hit said bugs. And reporting bugs against clang is an easy way to not do must investigation.</p>",
        "id": 205656776,
        "sender_full_name": "nagisa",
        "timestamp": 1596244265
    },
    {
        "content": "<p>well, okay: I can believe that it may be foolish to expect to find a useful bug already filed</p>",
        "id": 205656777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244266
    },
    {
        "content": "<p>but I am also curious about what the LLVM dev's themselves would <em>prefer</em></p>",
        "id": 205656795,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244294
    },
    {
        "content": "<p>i.e. if I take the .ll file that demonstrates the issue, and package it up nicely with some C code that you can link it to in order to observe the problem directly ...</p>",
        "id": 205656849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244342
    },
    {
        "content": "<p>... are they more likely to be able to work with such a bug report?</p>",
        "id": 205656852,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244361
    },
    {
        "content": "<p>I guess this does diverge from my original question, which was about searching for already filed bugs, rather than hypothesizing what kind of bugs the LLVM devs <em>want</em> to see...</p>",
        "id": 205656865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244397
    },
    {
        "content": "<p>Its fine to report with llvm-ir</p>",
        "id": 205656868,
        "sender_full_name": "nagisa",
        "timestamp": 1596244403
    },
    {
        "content": "<p>here's another way of looking at my question</p>",
        "id": 205656878,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244428
    },
    {
        "content": "<p>reading the comment thread on <a href=\"https://github.com/rust-lang/rust/issues/74498\">#74498</a> ...</p>",
        "id": 205656880,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244436
    },
    {
        "content": "<p>... I see references to <em>already known</em> bugs</p>",
        "id": 205656887,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244442
    },
    {
        "content": "<p>Presuming there was due diligence done to actually minimize the IR itself.</p>",
        "id": 205656923,
        "sender_full_name": "nagisa",
        "timestamp": 1596244445
    },
    {
        "content": "<p>using acronyms like LFTR and LSR</p>",
        "id": 205656934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244467
    },
    {
        "content": "<p>(The IR is pretty mnimal, see <a href=\"https://github.com/rust-lang/rust/issues/74498#issuecomment-661950983\">https://github.com/rust-lang/rust/issues/74498#issuecomment-661950983</a> )</p>",
        "id": 205656942,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244486
    },
    {
        "content": "<p>(its hard to imagine something more minimal ; the problem I have with an example like that is that I am not good at reading such text and being able to tell if it is already hitting UB)</p>",
        "id": 205656955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244521
    },
    {
        "content": "<p>(but that's mostly because I am out-of-practice w.r.t. reading LLVM IR)</p>",
        "id": 205656959,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/process.20for.20finding.2Ffiling.20underlying.20LLVM.20bugs.20rust.2374498/near/205656887\">said</a>:</p>\n<blockquote>\n<p>... I see references to <em>already known</em> bugs</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/process.20for.20finding.2Ffiling.20underlying.20LLVM.20bugs.20rust.2374498/near/205656934\">said</a>:</p>\n<blockquote>\n<p>using acronyms like LFTR and LSR</p>\n</blockquote>\n<p>but I don't know how to find the referenced bugs; no URLs were provided</p>",
        "id": 205657004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244580
    },
    {
        "content": "<p>and I assume that if I had a way to find those bugs, I might be able to quickly see if there's already a bug filed about this.</p>",
        "id": 205657012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/process.20for.20finding.2Ffiling.20underlying.20LLVM.20bugs.20rust.2374498/near/205657004\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/process.20for.20finding.2Ffiling.20underlying.20LLVM.20bugs.20rust.2374498/near/205656887\">said</a>:</p>\n<blockquote>\n<p>... I see references to <em>already known</em> bugs</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/process.20for.20finding.2Ffiling.20underlying.20LLVM.20bugs.20rust.2374498/near/205656934\">said</a>:</p>\n<blockquote>\n<p>using acronyms like LFTR and LSR</p>\n</blockquote>\n<p>but I don't know how to find the referenced bugs; no URLs were provided</p>\n</blockquote>\n<p>Might be because <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> actually fixed said bug(s): <a href=\"https://reviews.llvm.org/D60935\">https://reviews.llvm.org/D60935</a></p>",
        "id": 205657016,
        "sender_full_name": "nagisa",
        "timestamp": 1596244638
    },
    {
        "content": "<p>okay that helps</p>",
        "id": 205657024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244657
    },
    {
        "content": "<p>since I might be able to go from that to the issue it fixed</p>",
        "id": 205657027,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244667
    },
    {
        "content": "<p>and see if people noted this other instance</p>",
        "id": 205657028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244674
    },
    {
        "content": "<p>(or a bunch of similar hits for lftr-related fixes on phab)</p>",
        "id": 205657081,
        "sender_full_name": "nagisa",
        "timestamp": 1596244727
    },
    {
        "content": "<p>if nothing else, reading <a href=\"https://bugs.llvm.org/show_bug.cgi?id=31181\">https://bugs.llvm.org/show_bug.cgi?id=31181</a> shows me how other people structure similar bugs</p>",
        "id": 205657089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244746
    },
    {
        "content": "<p>and i see, I was probably wrong to assume that such bugs would be filed against the Loop Optimizer component; 31181 was filed against Scalar Optimizations, at least...</p>",
        "id": 205657153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244832
    },
    {
        "content": "<p>Yeah, I wouldn’t say that categorization in LLVM bugzilla is maintained very well.</p>",
        "id": 205657172,
        "sender_full_name": "nagisa",
        "timestamp": 1596244886
    },
    {
        "content": "<p>although the reproducer in our case is literally using just <code>opt -loop-reduce</code> ...</p>",
        "id": 205657176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596244891
    },
    {
        "content": "<p>It isn't always easy to root cause the problem at the time of filling and their categories very much want that.</p>",
        "id": 205657233,
        "sender_full_name": "nagisa",
        "timestamp": 1596244949
    },
    {
        "content": "<p>can you explain to me what the <code>nuw</code>  in <code>add nuw</code> is supposed to mean when you are adding signed values?</p>",
        "id": 205657355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245175
    },
    {
        "content": "<p>(I'm still sitting here trying to understand whether this is UB)</p>",
        "id": 205657362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245193
    },
    {
        "content": "<p>I guess an unsigned overflow is going from -1 to 0, but it is <em>not</em> going from MAX to MIN?</p>",
        "id": 205657386,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245255
    },
    {
        "content": "<p>(for signed values, that is)</p>",
        "id": 205657390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245264
    },
    {
        "content": "<p>is that right?</p>",
        "id": 205657392,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245266
    },
    {
        "content": "<p>or wait, what I just said doesn't make sense, does it</p>",
        "id": 205657436,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245304
    },
    {
        "content": "<p>no-unsigned-wrap</p>",
        "id": 205657462,
        "sender_full_name": "nagisa",
        "timestamp": 1596245399
    },
    {
        "content": "<p>but the inputs are <em>signed</em>. Isn't an unsigned wrap when you do <code>1 + (unsigned)-1</code> ?</p>",
        "id": 205657523,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245456
    },
    {
        "content": "<p>so basically operation result doesn’t go below 0 or above MAX.</p>",
        "id": 205657524,
        "sender_full_name": "nagisa",
        "timestamp": 1596245458
    },
    {
        "content": "<p>I'm probably making this more confusing</p>",
        "id": 205657537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> what do you mean signed? Is that conceptual (i.e. language source level) property? At LLVM IR there’s no distinction between signed and unsigned in types anymore</p>",
        "id": 205657548,
        "sender_full_name": "nagisa",
        "timestamp": 1596245505
    },
    {
        "content": "<p>is the <code>nuw</code> flag indicating that you will never attempt to overflow the maximal unsigned value?</p>",
        "id": 205657552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245511
    },
    {
        "content": "<p>i32 is just 32 bits of space and the signedness of an operation is decided at instruction level.</p>",
        "id": 205657593,
        "sender_full_name": "nagisa",
        "timestamp": 1596245528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/process.20for.20finding.2Ffiling.20underlying.20LLVM.20bugs.20rust.2374498/near/205657552\">said</a>:</p>\n<blockquote>\n<p>is the <code>nuw</code> flag indicating that you will never attempt to overflow the maximal unsigned value?</p>\n</blockquote>\n<p>yes.</p>",
        "id": 205657598,
        "sender_full_name": "nagisa",
        "timestamp": 1596245540
    },
    {
        "content": "<p>For addition that's what it would mean, since signed addition and unsigned addition are one and the same thing.</p>",
        "id": 205657607,
        "sender_full_name": "nagisa",
        "timestamp": 1596245574
    },
    {
        "content": "<p>and the maximal unsigned value, under two's complement, is <code>(unsigned)-1</code>, right?</p>",
        "id": 205657619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245596
    },
    {
        "content": "<p>Right.</p>",
        "id": 205657625,
        "sender_full_name": "nagisa",
        "timestamp": 1596245610
    },
    {
        "content": "<p>so that is what is confusing me about this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>  %3 = icmp eq i8 %2, -1\n  %4 = add nuw i8 %2, 1\n  br i1 %3, label %5, label %1\n</code></pre></div>",
        "id": 205657679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245660
    },
    {
        "content": "<p>that's in a loop</p>",
        "id": 205657688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245696
    },
    {
        "content": "<p>where the phi node has <code>%2</code> gets <code>%4</code>'s value</p>",
        "id": 205657704,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245731
    },
    {
        "content": "<p>u-huh.</p>",
        "id": 205657709,
        "sender_full_name": "nagisa",
        "timestamp": 1596245755
    },
    {
        "content": "<p>so the <code>%2</code> is <em>going</em> to hit <code>-1</code>, and then we'll do the add before we do the <code>br</code></p>",
        "id": 205657726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245762
    },
    {
        "content": "<p>right?</p>",
        "id": 205657752,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245771
    },
    {
        "content": "<p>hm.</p>",
        "id": 205657756,
        "sender_full_name": "nagisa",
        "timestamp": 1596245781
    },
    {
        "content": "<p>Isn't that UB?</p>",
        "id": 205657758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245786
    },
    {
        "content": "<blockquote>\n<p>If the nuw and/or nsw keywords are present, the result value of the add is a poison value if unsigned and/or signed overflow, respectively, occurs.</p>\n</blockquote>\n<p>As per <a href=\"https://llvm.org/docs/LangRef.html#id86\">https://llvm.org/docs/LangRef.html#id86</a></p>",
        "id": 205657761,
        "sender_full_name": "nagisa",
        "timestamp": 1596245815
    },
    {
        "content": "<p>ah</p>",
        "id": 205657767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245830
    },
    {
        "content": "<p>poison flows into <code>%4</code></p>",
        "id": 205657769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245837
    },
    {
        "content": "<p>but then we break out</p>",
        "id": 205657771,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245839
    },
    {
        "content": "<p>so the poison doesn't matter</p>",
        "id": 205657774,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245849
    },
    {
        "content": "<p>is that right?</p>",
        "id": 205657775,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245851
    },
    {
        "content": "<p>Yeah, we break out with <code>br i1 %3, label %5, label %1</code> before the poison value in <code>%4</code> is ever used.</p>",
        "id": 205657823,
        "sender_full_name": "nagisa",
        "timestamp": 1596245897
    },
    {
        "content": "<p>Okay. I guess I've managed to convince myself that comex's example should work and that I shouldn't be embarrassed to post it in a bug report.</p>",
        "id": 205657836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245924
    },
    {
        "content": "<p>(or rather, you've convinced me)</p>",
        "id": 205657839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596245935
    },
    {
        "content": "<p>There’s a bunch of stuff on poison values on that same page as well: <a href=\"https://llvm.org/docs/LangRef.html#poisonvalues\">https://llvm.org/docs/LangRef.html#poisonvalues</a></p>",
        "id": 205657858,
        "sender_full_name": "nagisa",
        "timestamp": 1596246000
    },
    {
        "content": "<p>If I’m reading that one correctly it isn’t even a problem for poison to be selected by a <code>phi</code>.</p>",
        "id": 205657921,
        "sender_full_name": "nagisa",
        "timestamp": 1596246079
    },
    {
        "content": "<p>wow I really am disliking bugzilla workflow</p>",
        "id": 205658135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596246418
    },
    {
        "content": "<p>and I used it, for like, years...</p>",
        "id": 205658140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596246429
    },
    {
        "content": "<p>Filed <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">https://bugs.llvm.org/show_bug.cgi?id=46943</a> with LLVM upstream</p>",
        "id": 205658836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596247549
    },
    {
        "content": "<p>does LLVM have an easy way to get at previous released binaries, analgous to what we use for <code>cargo-bisect-rustc</code>?</p>",
        "id": 205658885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596247611
    },
    {
        "content": "<p>IIRC LLVM doesn't guarantee master is buildable even, so probably no?</p>",
        "id": 205659024,
        "sender_full_name": "simulacrum",
        "timestamp": 1596247911
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 205659485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596248730
    },
    {
        "content": "<p>I guess the time we spend doing those bors runs <strong>does</strong> have <em>some</em> benefits, doesn't it? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 205659489,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596248749
    },
    {
        "content": "<p>I'm attempting to check locally if bisection would make any sense here, just by going back a couple LLVM releases and seeing if the bug was there too</p>",
        "id": 205659549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596248812
    },
    {
        "content": "<p>unfortunately the LLVM IR syntax was more restrictive back in LLVM 8 ...</p>",
        "id": 205659562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596248877
    },
    {
        "content": "<p>(so far, I've seen it in LLVM 9, 8, 7, and 6 ...)</p>",
        "id": 205660361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596250299
    },
    {
        "content": "<p>and I'm guessing that when I <em>do</em> hit a release that doesn't have the incorrect LSR optimization, it will be because its LSR was just less aggressive</p>",
        "id": 205660415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596250342
    },
    {
        "content": "<p>(i.e. it won't be a narrow injection that's easy to fix)</p>",
        "id": 205660422,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596250358
    },
    {
        "content": "<p>Heh. I may have just found the bug. Or at least, there's something that seems like it might tie quite strongly into the conversation that <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> and I were having up above</p>",
        "id": 205661166,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596251813
    },
    {
        "content": "<p>namely, check out this line: <a href=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp#L2112\">https://github.com/llvm/llvm-project/blob/master/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp#L2112</a></p>",
        "id": 205661223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596251898
    },
    {
        "content": "<p><code>if (!IsSigned &amp;&amp; !AR-&gt;hasNoUnsignedWrap()) continue;</code></p>",
        "id": 205661228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596251912
    },
    {
        "content": "<p>that is, I bet that should just be <code>if (!AR-&gt;hasNoUnsignedWrap()) continue;</code></p>",
        "id": 205661251,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596251971
    },
    {
        "content": "<p>(or, on the other hand, it could be a case of all the FIXME's littered in the code that mention <code>AR-&gt;getNoWrapFlags</code> ...)</p>",
        "id": 205662138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596253354
    }
]