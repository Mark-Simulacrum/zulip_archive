[
    {
        "content": "<p>Why does LLVM emit a <code>push</code>/<code>pop</code> for <a href=\"https://godbolt.org/z/qM23or\" target=\"_blank\" title=\"https://godbolt.org/z/qM23or\">this example</a>? I posted a <a href=\"https://github.com/rust-lang/rust/issues/62531#issuecomment-545568996\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62531#issuecomment-545568996\">half-baked theory</a>, but I don't have very much experience with LLVM IR. Obviously this isn't a huge deal, just curious.</p>",
        "id": 178882742,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571855691
    },
    {
        "content": "<p>I am pretty sure your theory is false. <code>-Cllvm-args=-print-after-all</code> shows that the final IR before instruction selection has no calls (though it has a bunch of loads, stores, and compares that should have been constant folded) and the MachineIR is just \"ret 1\" aside from debuginfo</p>",
        "id": 178883669,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571856383
    },
    {
        "content": "<p>Oh no, the MIR also has stack slots allocated, even though they are dead. That might have something to do with it?</p>",
        "id": 178883997,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571856674
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span># *** IR Dump After Finalize ISel and expand pseudo-instructions ***:\n# Machine code for function _RNvCsbDqzXfLQacH_7example7compare: IsSSA, TracksLiveness\nFrame Objects:\n  fi#0: size=4, align=1, at location [SP+8]\n  fi#1: size=4, align=4, at location [SP+8]\n\nbb.0 (%ir-block.0):\n  LIFETIME_START %stack.1\n  LIFETIME_START %stack.0\n  LIFETIME_END %stack.1\n  LIFETIME_END %stack.0\n  %0:gr8 = MOV8ri 1\n  $al = COPY %0:gr8\n  RET 0, $al\n</pre></div>",
        "id": 178884029,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571856708
    },
    {
        "content": "<p>(this is with <code>-Cdebuginfo=0</code>)</p>",
        "id": 178884088,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571856726
    },
    {
        "content": "<p>LLVM expands memcmp/bcmp in the ExpandMemcmp pass prior to SDAG lowering. As this happens very late, there's no opportunity for general combining passes (like InstCombine) to run anymore. The simplification happens in DAGCombine, which is not able to eliminate those ligetime.start/end pairs.</p>",
        "id": 178884848,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1571857236
    },
    {
        "content": "<p>I think there were some plans to move this expansion into the opt pipeline...</p>",
        "id": 178885022,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1571857362
    },
    {
        "content": "<p>Indeed: <a href=\"https://reviews.llvm.org/D60318\" target=\"_blank\" title=\"https://reviews.llvm.org/D60318\">https://reviews.llvm.org/D60318</a> Looks like it got applied + reverted two times.</p>",
        "id": 178885233,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1571857478
    },
    {
        "content": "<p>Cursed</p>",
        "id": 178885296,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571857521
    }
]