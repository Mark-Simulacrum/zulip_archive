[
    {
        "content": "<p>I am trying to get a sense of how much pain / time / effort is required each time Rust goes through an upgrade (not just a cherry picking a bug fix) of LLVM. Along with that, I am curious about the kinds of changes typically required to adapt to the new version of LLVM.</p>\n<p>Looking over the docs in the <a href=\"https://rust-lang.github.io/rustc-guide/codegen/updating-llvm.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/codegen/updating-llvm.html\">rustc guide</a>, it feels like quite an involved process that someone might be focused on full time for a while and seems to occur a few times per year for specific features and also to stay current with each LLVM release. Is most of the time spent adapting the Rust &lt;-&gt; LLVM interface for API changes, or is it more dominated by fighting surprise behavior changes in LLVM and finding workarounds?</p>\n<p>I have several ideas for tooling to help with these LLVM upgrade tasks, but I want to check whether my assumptions match the experience of those who've worked through an upgrade in past for Rust.</p>",
        "id": 181073103,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1574125667
    },
    {
        "content": "<p>I think we've not historically experienced much pain from LLVM upgrades, beyond breakage -- but that's generally on tier 2 or tier 3 platforms -- <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> and <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> may be able to say more, I think they've been involved with the last couple upgrades</p>",
        "id": 181075972,
        "sender_full_name": "simulacrum",
        "timestamp": 1574129587
    },
    {
        "content": "<p>From what I remember 99% of the pain of an upgrade is fixing regressions in the ci builds we see through bors</p>",
        "id": 181076344,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574130124
    },
    {
        "content": "<p>The API changes are mostly quite smooth</p>",
        "id": 181076347,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574130137
    },
    {
        "content": "<p>Sometimes it's taken forever to narrow down issues</p>",
        "id": 181076349,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574130147
    },
    {
        "content": "<p>Other times it's been super smooth</p>",
        "id": 181076350,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574130155
    },
    {
        "content": "<p>I haven't been too too involved in the last one or two upgrades though, and I think they were relatively painless</p>",
        "id": 181076357,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574130175
    },
    {
        "content": "<p>(Don't know how relevant it is, but generally speaking, having frequent LLVM submodule bumps is undesirable because all the rust-lang/rust devs have to rebuild LLVM, which is painful)</p>",
        "id": 181090437,
        "sender_full_name": "centril",
        "timestamp": 1574151431
    },
    {
        "content": "<p>It sounds like it's actually easier and less painful than I assumed then. <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span> (The text \"Unlike bugfixes, updating to pick up a new feature of LLVM typically requires a lot more work.\" in the rustc guide led me to assume it was usually a long / arduous adventure.)</p>\n<p>Good to know about the additional complexity of LLVM changes forcing rebuilds for rustc devs... I hadn't realised that particular impact of more frequent LLVM upgrades.</p>",
        "id": 181104499,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1574164635
    },
    {
        "content": "<p>It's not really an impact that I think is too important, or at least I barely notice it. I do have decent hardware though :)</p>\n<p>It's also something that we can (and should) fix, it's just that it requires some design work and the exact solution isn't completely clear.</p>",
        "id": 181107278,
        "sender_full_name": "simulacrum",
        "timestamp": 1574167448
    },
    {
        "content": "<blockquote>\n<p>I think we've not historically experienced much pain from LLVM upgrades, beyond breakage -- but that's generally on tier 2 or tier 3 platforms</p>\n</blockquote>\n<p>FYI LLVM 9 upgrade broke tier1 targets when using <em>non</em> default options: <a href=\"https://github.com/rust-lang/rust/issues/64609\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64609\">#64609</a> <a href=\"https://github.com/rust-lang/rust/issues/65618\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65618\">#65618</a></p>",
        "id": 181108998,
        "sender_full_name": "mati865",
        "timestamp": 1574168930
    },
    {
        "content": "<p>For hunting down LLVM-related regressions, does that typically mean compiling many random revisions of LLVM locally to try to bisect the issue? (If so, it sounds slow since I imagine it takes a while to build at each bisection step.)</p>",
        "id": 181111301,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1574170743
    },
    {
        "content": "<p>For me I typically extract ir first to get a standalone test I can reproduce with just llvm tools, then I reduce (sometimes also with llvm tools)</p>",
        "id": 181114111,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574172871
    },
    {
        "content": "<p>And then yeah bisection is typically next</p>",
        "id": 181114128,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1574172884
    },
    {
        "content": "<p>Ah right, makes sense to reproduce in LLVM standalone where possible to simplify. LLVM has also added their own <a href=\"https://github.com/llvm/llvm-project/tree/master/llvm/tools/llvm-reduce\" target=\"_blank\" title=\"https://github.com/llvm/llvm-project/tree/master/llvm/tools/llvm-reduce\"><code>llvm-reduce</code> tool for IR reduction</a> recently, maybe that will be of some help here.</p>",
        "id": 181115003,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1574173434
    },
    {
        "content": "<p>For LLVM standalone, there's also <a href=\"https://github.com/llvm-mirror/zorg/blob/master/llvmbisect/docs/llvmlab_bisect.rst\" target=\"_blank\" title=\"https://github.com/llvm-mirror/zorg/blob/master/llvmbisect/docs/llvmlab_bisect.rst\"><code>llvmlab bisect</code></a> for accelerated bisection via a shared cache.</p>",
        "id": 181115713,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1574173827
    },
    {
        "content": "<blockquote>\n<p>It's not really an impact that I think is too important, or at least I barely notice it. I do have decent hardware though :)</p>\n<p>It's also something that we can (and should) fix, it's just that it requires some design work and the exact solution isn't completely clear.</p>\n</blockquote>\n<p>LLVM builds take 30-60min on my hardware, which is not totally shabby either. Multiply this by 3 for 3 rustc checkouts (so that I can work on more than one PR at a time). It's a big pain.</p>",
        "id": 181116757,
        "sender_full_name": "RalfJ",
        "timestamp": 1574174445
    },
    {
        "content": "<p>in comparison, building one stage (so that I can run stage 1 tests) <em>without</em> having to build LLVM usually takes &lt;20min.</p>",
        "id": 181116854,
        "sender_full_name": "RalfJ",
        "timestamp": 1574174510
    },
    {
        "content": "<p>in theory e.g. ccache (<em>not</em> sccache) would solve the multiply by 3</p>",
        "id": 181134776,
        "sender_full_name": "simulacrum",
        "timestamp": 1574184639
    }
]