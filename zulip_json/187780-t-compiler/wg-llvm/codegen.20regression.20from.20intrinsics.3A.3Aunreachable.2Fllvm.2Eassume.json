[
    {
        "content": "<p>For fun, I've been sprinkling some <code>if !(precondition) { intrinsics::unreachable() }</code> around the standard library. I just did <code>slice::from_raw_parts</code>/<code>slice::from_raw_parts_mut</code> and broke the two codegen tests, <code>vec-optimizes-away</code> and <code>slice-as-chunks</code>. The IR with my changes is a bit surprising. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>_RNvNtCs3auNwKs0KWq_5alloc5alloc15exchange_malloc.exit: ; preds = %start\n  %_17.i.i.i.i.i.i.i.i.i.i.i = ptrtoint i8* %0 to i64\n  %pmoda.i.i.i.i.i.i.i.i.i.i.i = and i64 %_17.i.i.i.i.i.i.i.i.i.i.i, 3\n  %.not.i.i.i.i.i.i = icmp eq i64 %pmoda.i.i.i.i.i.i.i.i.i.i.i, 0\n  tail call void @llvm.assume(i1 %.not.i.i.i.i.i.i) #5\n  tail call void @__rust_dealloc(i8* nonnull %0, i64 12, i64 4) #5, !noalias !2\n  ret i32 6\n}\n</code></pre></div>\n<p>I'm pretty sure that's the codegen for <code>intrinsics::is_aligned_and_not_null</code>. It is surprising to me that I was able to put do a similar procedure to nearly every other <code>unsafe fn</code> with preconditions that are possible to detect at runtime in <code>core</code> and I didn't see a codegen regression.</p>\n<p>I see that the LangRef says this</p>\n<blockquote>\n<p>Note that the optimizer might limit the transformations performed on values used by the llvm.assume intrinsic in order to preserve the instructions only used to form the intrinsicâ€™s input argument.<br>\nIs that what's going on here? Does <code>llvm.assume</code> have to be used very sparingly to not produce a regression? Or would the extra IR in these tests I broke be removed in codegen?</p>\n</blockquote>",
        "id": 267674717,
        "sender_full_name": "(Saethlin) Ben Kimock",
        "timestamp": 1641953791
    },
    {
        "content": "<p>Yes, llvm.assume needs to be used sparingly. It's a tradeoff, not a universal win. Using it for alignment assumptions is a particularly bad idea.</p>",
        "id": 267691775,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1641974479
    },
    {
        "content": "<p>That's unfortunate, but at least the tests are doing their job :)</p>",
        "id": 267806982,
        "sender_full_name": "(Saethlin) Ben Kimock",
        "timestamp": 1642032785
    }
]