[
    {
        "content": "<p>I'm writing a test to check that some output ir contains</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@a</span><span class=\"p\">()</span>\n</code></pre></div>\n\n\n<p>When I run my local <code>rustc</code> build with <code>--emit=llvm-ir</code> and inspect the output the <code>define</code> is present, but when I run <code>./x.py test</code> the check test fails... Am I missing something obvious?</p>",
        "id": 199885616,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591367892
    },
    {
        "content": "<p>The simplest explanation would be a simple typo e.g. in the CHECK line. Can you post the test and what <code>x.py test</code> prints when the test fails?</p>",
        "id": 199886204,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1591368204
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// compile-flags: -C no-prepopulate-passes</span>\n\n<span class=\"cp\">#![crate_type = </span><span class=\"s\">&quot;cdylib&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n\n<span class=\"c1\">// CHECK: define void @a()</span>\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// side effect to keep `a` around</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">read_volatile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>with output</p>\n<div class=\"codehilite\"><pre><span></span><code>error: verification with &#39;FileCheck&#39; failed\nstatus: exit code: 1\ncommand: &quot;/home/nathan/git/rust/build/x86_64-unknown-linux-gnu/llvm/build/bin/FileCheck&quot; &quot;--input-file&quot; &quot;/home/nathan/git/rust/build/x86_64-unknown-linux-gnu/test/codegen/staticlib-external-no-mangle-fns/staticlib-external-no-mangle-fns.ll&quot; &quot;/home/nathan/git/rust/src/test/codegen/staticlib-external-no-mangle-fns.rs&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n/home/nathan/git/rust/src/test/codegen/staticlib-external-no-mangle-fns.rs:5:11: error: CHECK: expected string not found in input\n// CHECK: define void @a()\n          ^\n/home/nathan/git/rust/build/x86_64-unknown-linux-gnu/test/codegen/staticlib-external-no-mangle-fns/staticlib-external-no-mangle-fns.ll:1:1: note: scanning from here\n; ModuleID = &#39;staticlib_external_no_mangle_fns.3a1fbbbh-cgu.0&#39;\n^\n/home/nathan/git/rust/build/x86_64-unknown-linux-gnu/test/codegen/staticlib-external-no-mangle-fns/staticlib-external-no-mangle-fns.ll:2:5: note: possible intended match here\nsource_filename = &quot;staticlib_external_no_mangle_fns.3a1fbbbh-cgu.0&quot;\n    ^\n\n------------------------------------------\n</code></pre></div>",
        "id": 199886452,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591368314
    },
    {
        "content": "<p>But the output llvm contains</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">; Function Attrs: inlinehint nounwind nonlazybind uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@a</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#1</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%_4</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i32</span><span class=\"p\">*,</span> <span class=\"k\">i32</span><span class=\"p\">**</span> <span class=\"k\">bitcast</span> <span class=\"p\">(&lt;{</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@anon.0cc175b9c0f1b6a831c399e269772661.0</span> <span class=\"k\">to</span> <span class=\"k\">i32</span><span class=\"p\">**),</span> <span class=\"k\">align</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nv\">!nonnull</span> <span class=\"nv nv-Anonymous\">!2</span>\n<span class=\"c\">; call core::ptr::read_volatile</span>\n  <span class=\"nv\">%_1</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">i32</span> <span class=\"vg\">@_ZN4core3ptr13read_volatile17habdbcd7722f5eae5E</span><span class=\"p\">(</span><span class=\"k\">i32</span><span class=\"p\">*</span> <span class=\"nv\">%_4</span><span class=\"p\">)</span>\n  <span class=\"k\">br</span> <span class=\"k\">label</span> <span class=\"nv\">%bb1</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 199886739,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591368416
    },
    {
        "content": "<p>To be clear, is the last snippet the file that x.py output refers to or generated manually by invoking rustc? Not sure if that would make a difference, but just to be sure.</p>",
        "id": 199886982,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1591368499
    },
    {
        "content": "<p>That's the  one from manually invoking rustc - should there be a difference between these?</p>",
        "id": 199887042,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591368531
    },
    {
        "content": "<p>I have a feeling it might actually be an interaction between incremental compilation and the check tests - let me do a clean run (this might take a while)</p>",
        "id": 199887802,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591368862
    },
    {
        "content": "<p>Try generating the IR with -O, maybe LLVM is adding some attributes to the definition.</p>",
        "id": 199892285,
        "sender_full_name": "Amanieu",
        "timestamp": 1591370611
    },
    {
        "content": "<p>Thanks both of you! Turned out it was to do with MIR optimisations but I've fixed it now</p>",
        "id": 199895344,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591371885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> would either of you mind taking a looking at <a href=\"https://github.com/rust-lang/rust/issues/73034\">#73034</a>?</p>",
        "id": 199896692,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1591372444
    }
]