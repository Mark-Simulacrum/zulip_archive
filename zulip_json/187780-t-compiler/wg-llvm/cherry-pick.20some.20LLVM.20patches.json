[
    {
        "content": "<p>as we are discussing on <a class=\"stream-topic\" data-stream-id=\"238009\" href=\"/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-10-08.20.2354818\">#t-compiler/meetings &gt; [weekly meeting] 2020-10-08 #54818</a> I was wondering how is the process we follow to cherry-pick LLVM patches</p>",
        "id": 212697788,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167325
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 212697795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167328
    },
    {
        "content": "<p>That's a <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> or <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> question, I think</p>",
        "id": 212697877,
        "sender_full_name": "simulacrum",
        "timestamp": 1602167370
    },
    {
        "content": "<p>for instance <a href=\"https://github.com/rust-lang/rust/issues/76387\">#76387</a> is opened waiting for the LLVM to get into LLVM code base and then we can cherry-pick it</p>",
        "id": 212697896,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167375
    },
    {
        "content": "<p>but I wonder how do we track that so we can close the issue at some point</p>",
        "id": 212697927,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602167390
    },
    {
        "content": "<p>The process is basically to open a PR with the cherry-pick on <a href=\"https://github.com/rust-lang/llvm-project\">https://github.com/rust-lang/llvm-project</a> and then update the submodule. As long as the commit is already in upstream LLVM and fixes a miscompile (and is not just a new optimization) it should always get accepted.</p>",
        "id": 212698808,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1602167744
    }
]