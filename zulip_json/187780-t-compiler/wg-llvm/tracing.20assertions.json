[
    {
        "content": "<p>Now that AVR support has landed in nightly, I'm trying to pick up some of my previous work. I'm running into this at the moment:</p>\n<div class=\"codehilite\"><pre><span></span><code>Assertion failed: (castIsValid(op, S, Ty) &amp;&amp; &quot;Invalid cast!&quot;), function Create, file /Users/shep/Projects/rust/src/llvm-project/llvm/lib/IR/Instructions.cpp, line 2741.\n</code></pre></div>\n\n\n<p>I can see it in the debugger, but don't have much ability to see what's what â€”</p>\n<div class=\"codehilite\"><pre><span></span><code>(lldb)\nlibrustc_driver-ed290098f911a9dd.dylib was compiled with optimization - stepping may behave oddly; variables may not be available.\nframe #5: 0x000000010cadfa29 librustc_driver-ed290098f911a9dd.dylib`llvm::CastInst::Create(op=&lt;unavailable&gt;, S=0x00007fb2719e7bb8, Ty=0x00007fb2d26528d0, Name=0x000070000da2f390, InsertBefore=0x0000000000000000) at Instructions.cpp:2741:3 [opt]\n   2738\n   2739 CastInst *CastInst::Create(Instruction::CastOps op, Value *S, Type *Ty,\n   2740   const Twine &amp;Name, Instruction *InsertBefore) {\n-&gt; 2741   assert(castIsValid(op, S, Ty) &amp;&amp; &quot;Invalid cast!&quot;);\n   2742   // Construct and return the appropriate CastInst subclass\n   2743   switch (op) {\n   2744   case Trunc:         return new TruncInst         (S, Ty, Name, InsertBefore);\n\n(lldb) frame variable op\n(llvm::Instruction::CastOps) op = &lt;variable not available&gt;\n\n(lldb) p S-&gt;dump()\n %value.1 = load i8*, i8** %29, align 1, !dbg !558, !nonnull !52\n\n(lldb) p Ty-&gt;dump()\ni1 (%&quot;fmt::::Opaque&quot;*, %&quot;fmt::Formatter&quot;*) addrspace(1)*\n</code></pre></div>\n\n\n<p>I did <a href=\"https://github.com/avr-rust/rust/issues/143#issuecomment-643652619\">make some changes</a>, which are possible to cause this.</p>",
        "id": 200781301,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592076407
    },
    {
        "content": "<p>As a bit of background, AVR has separate address spaces for data and code, and you can't cast between them</p>",
        "id": 200781469,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592076612
    },
    {
        "content": "<p>so my bigger goal is to figure out how to preserve the appropriate metadata</p>",
        "id": 200781487,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592076649
    },
    {
        "content": "<p>We <a href=\"https://github.com/rust-lang/rust/commit/91bff8ccdfddd119a2239e625bfb52703844f227\">added some hacks in</a>, but those are very targeted (and ugly!)</p>",
        "id": 200782194,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592077151
    },
    {
        "content": "<p>Commenting out <code>core::fmt::run</code> and replacing it with <code>Ok(())</code> gets past that error, so I'm guessing it has something to do with the function pointer cast(?) there.</p>",
        "id": 200782528,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592077555
    }
]