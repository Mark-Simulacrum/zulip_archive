[
    {
        "content": "<p>Before I go shout at people, does rust suffer from the C++ \"references are not necessarily dereferenceable until the end of the function\" problem in its current uses of dereferenceable?</p>",
        "id": 255855978,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1633166207
    },
    {
        "content": "<p>I'm aware of <a href=\"https://github.com/rust-lang/rust/issues/63787\">https://github.com/rust-lang/rust/issues/63787</a>, but from reading that issue this seems like a clear case of incorrect reference use, not of references arguments not being dereferenceable for the whole function.</p>",
        "id": 255856007,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1633166258
    },
    {
        "content": "<p>There is a also <a href=\"https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler/rustc_middle/src/ty/layout.rs#L3049-L3055\">https://github.com/rust-lang/rust/blob/b6057bf7b7ee7c58e6a39ead02eaa13b75f908c2/compiler/rustc_middle/src/ty/layout.rs#L3049-L3055</a>, which is an example where we currently don't use dereferenceable, but could if it had \"dereferenceable on entry\" semantics.</p>",
        "id": 255856138,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1633166397
    },
    {
        "content": "<p>There are two instances where this can be true, I believe. References that materialize in a middle of a function (and their scope is therefore less than the entire function; I'm not sure if its at all possible to apply <code>dereferenceable</code> to these at all in that case) and the currently fictional <code>&amp;own</code> I think.</p>",
        "id": 255857111,
        "sender_full_name": "nagisa",
        "timestamp": 1633167377
    },
    {
        "content": "<p>The first case matters if we started applying <code>dereferenceable</code> to instructions rather than function attributes, but I don't think we do?</p>",
        "id": 255857143,
        "sender_full_name": "nagisa",
        "timestamp": 1633167419
    },
    {
        "content": "<p>I could imagine that NLL lifetimes have potential for causing problems in the motivating example from the RFC too:</p>\n<div class=\"codehilite\"><pre><span></span><code>o = deref(N) alloc();\nif (c) free(o)\nwhile(true) {\n  if (c) break;\n  // With the current semantics, we will hoist o.f above the loop\n  v = o.f;\n}\n</code></pre></div>",
        "id": 255857521,
        "sender_full_name": "nagisa",
        "timestamp": 1633167779
    },
    {
        "content": "<p>What I had in mind here is mainly dereferenceable use for function attributes. But the case of return values is interesting -- do we currently place dereferenceable on returns?</p>",
        "id": 255857618,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1633167881
    },
    {
        "content": "<p>Similar for <code>!dereferenceable</code> metadata on loads, but I'm pretty sure we don't use that.</p>",
        "id": 255857668,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1633167955
    },
    {
        "content": "<p>I'm not sureâ€¦ I can't say I've seen any dereferenceables on returns or instructions. only on arguments.</p>",
        "id": 255857715,
        "sender_full_name": "nagisa",
        "timestamp": 1633167972
    },
    {
        "content": "<p>Looks like we do: <a href=\"https://rust.godbolt.org/z/Ej5W6Kseb\">https://rust.godbolt.org/z/Ej5W6Kseb</a></p>",
        "id": 255858128,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1633168438
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/55005\">#55005</a> is a similar question</p>",
        "id": 255876910,
        "sender_full_name": "cuviper",
        "timestamp": 1633186823
    },
    {
        "content": "<p>Thanks! Skimming through that, it seems like the main open question there is whether <code>!Freeze</code> references should be considered dereferenceable for the whole function or not.</p>",
        "id": 255877549,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1633187518
    }
]