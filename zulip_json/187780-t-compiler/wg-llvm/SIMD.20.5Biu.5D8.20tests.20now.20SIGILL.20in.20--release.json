[
    {
        "content": "<p>Issue is: <a href=\"https://github.com/rust-lang/rust/issues/88769\">https://github.com/rust-lang/rust/issues/88769</a><br>\nOnly happens with optimizations on.</p>",
        "id": 252553079,
        "sender_full_name": "Jubilee",
        "timestamp": 1631146603
    },
    {
        "content": "<p>Specifically, <code>-Copt-level=2</code> or <code>3</code>, not 1.</p>",
        "id": 252553491,
        "sender_full_name": "Jubilee",
        "timestamp": 1631146979
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">horizontal_product</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">test_helpers</span>::<span class=\"n\">test_1</span><span class=\"p\">(</span><span class=\"o\">&amp;|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">test_helpers</span>::<span class=\"n\">prop_assert_biteq</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"cp\">$vector</span>::<span class=\"o\">&lt;</span><span class=\"n\">LANES</span><span class=\"o\">&gt;</span>::<span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">horizontal_product</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">copied</span><span class=\"p\">().</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$scalar</span>::<span class=\"n\">wrapping_mul</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Looks like it is something about this test that causes it to implode.</p>",
        "id": 252582799,
        "sender_full_name": "Jubilee",
        "timestamp": 1631172638
    },
    {
        "content": "<p>do we have a stack trace? when I hear SIGILL/SIGTRAP/SIGSEGV my intuition is that the code generally makes its way into some branch that has a trap or unreachable in it.</p>",
        "id": 252619997,
        "sender_full_name": "nagisa",
        "timestamp": 1631192112
    },
    {
        "content": "<p>ah, in the case LLVM crashes, its generally an assertion triggering of some sort.</p>",
        "id": 252620217,
        "sender_full_name": "nagisa",
        "timestamp": 1631192201
    },
    {
        "content": "<p>Does it still happen when simply calling <code>horizontal_product</code>, or is it related to the test as a whole?</p>",
        "id": 252623584,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631193495
    },
    {
        "content": "<p>Well calling the underlying <code>simd_reduce_mul_ordered</code> doesn't seem to do it.</p>",
        "id": 252643944,
        "sender_full_name": "Jubilee",
        "timestamp": 1631200744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312331\">Caleb Zulawski</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/SIMD.20.5Biu.5D8.20tests.20now.20SIGILL.20in.20--release/near/252623584\">said</a>:</p>\n<blockquote>\n<p>Does it still happen when simply calling <code>horizontal_product</code>, or is it related to the test as a whole?</p>\n</blockquote>\n<p>hellow posted a minimization that reproduces the assertion, I believe it is correct. It involves almost the entire test.<br>\n<a href=\"https://github.com/rust-lang/rust/issues/88769#issuecomment-916017553\">https://github.com/rust-lang/rust/issues/88769#issuecomment-916017553</a></p>",
        "id": 252645387,
        "sender_full_name": "Jubilee",
        "timestamp": 1631201285
    },
    {
        "content": "<p>No rustc backtrace, just vibes.</p>",
        "id": 252645950,
        "sender_full_name": "Jubilee",
        "timestamp": 1631201532
    },
    {
        "content": "<p>I genuinely am baffled.</p>",
        "id": 252650915,
        "sender_full_name": "Jubilee",
        "timestamp": 1631203295
    },
    {
        "content": "<p>This remains an issue, seemingly after the submodule merge. Do our nightlies use our in-tree LLVM or do they pull from CI or something?</p>",
        "id": 253180167,
        "sender_full_name": "Jubilee",
        "timestamp": 1631578518
    },
    {
        "content": "<p>nightlies use the current in-tree LLVM submodule hash.</p>",
        "id": 253180899,
        "sender_full_name": "nagisa",
        "timestamp": 1631579107
    },
    {
        "content": "<p>That is very weird then because the exact hash is after the submodule merge.</p>",
        "id": 253181319,
        "sender_full_name": "Jubilee",
        "timestamp": 1631579453
    },
    {
        "content": "<p>plausible that there were potentially multiple different issues.</p>",
        "id": 253181436,
        "sender_full_name": "nagisa",
        "timestamp": 1631579571
    },
    {
        "content": "<p>love it, falling out of the optimization tree and hitting every single opt error branch on the way down.</p>",
        "id": 253181773,
        "sender_full_name": "Jubilee",
        "timestamp": 1631579865
    },
    {
        "content": "<p>It's still failing on the same test, so I'm guessing it's a closely related bug, though the original minimal reproduction seems fixed</p>",
        "id": 253182363,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1631580396
    }
]