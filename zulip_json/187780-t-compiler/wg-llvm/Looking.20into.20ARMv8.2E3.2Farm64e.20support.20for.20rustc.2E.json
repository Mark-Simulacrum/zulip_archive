[
    {
        "content": "<p>Hello, I was told that this was the right stream to ask questions about how I would accomplish this.</p>\n<p>I'm looking to allow rustc to target ARMv8.3+ targets with support for Pointer Authentication. A quick and dirty glance shows that the latest branch of rust's LLVM supports these options, and I was wondering how I could teach the Rust compiler to use these LLVM options properly.</p>",
        "id": 201648604,
        "sender_full_name": "aspen",
        "timestamp": 1592853341
    },
    {
        "content": "<p>A good first step would be to look at how Clang does it. Is it just a matter of enabling a target feature? Or does the front-end need to do some additional work?</p>",
        "id": 201673106,
        "sender_full_name": "Amanieu",
        "timestamp": 1592868268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Looking.20into.20ARMv8.2E3.2Farm64e.20support.20for.20rustc.2E/near/201673106\">said</a>:</p>\n<blockquote>\n<p>A good first step would be to look at how Clang does it. Is it just a matter of enabling a target feature? Or does the front-end need to do some additional work?</p>\n</blockquote>\n<p>I believe it's <code>-march=armv8.3-a</code></p>",
        "id": 201673305,
        "sender_full_name": "aspen",
        "timestamp": 1592868441
    },
    {
        "content": "<p>Or <code>-march=armv8.5-a</code> and so on</p>",
        "id": 201673315,
        "sender_full_name": "aspen",
        "timestamp": 1592868453
    },
    {
        "content": "<p>I think you can just enable the relevant feature with <code>-C target-feature=+&lt;feature&gt;</code></p>",
        "id": 201712770,
        "sender_full_name": "Amanieu",
        "timestamp": 1592911098
    },
    {
        "content": "<p>You can get the list of target feature supported by LLVM with <code>llc -march=aarch64 -mattr=help</code></p>",
        "id": 201712805,
        "sender_full_name": "Amanieu",
        "timestamp": 1592911131
    },
    {
        "content": "<p>actually does upstream LLVM even support Pointer Authentication yet?</p>",
        "id": 202002049,
        "sender_full_name": "aspen",
        "timestamp": 1593107498
    },
    {
        "content": "<p>At a glance, it doesn't look like it. There was an RFC about upstreaming it last October (<a href=\"http://lists.llvm.org/pipermail/llvm-dev/2019-October/136091.html\">http://lists.llvm.org/pipermail/llvm-dev/2019-October/136091.html</a>) but nothing since when as far as I can tell.</p>",
        "id": 202002537,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1593107698
    },
    {
        "content": "<p>Hm, how will Rust support Apple Silicon-based macs then? Chances are they'll be ARMv8.3 or ARMv8.5.</p>",
        "id": 202740829,
        "sender_full_name": "aspen",
        "timestamp": 1593721501
    },
    {
        "content": "<p>Would it be possible to merge Apple's LLVM changes into the Rust LLVM fork?</p>",
        "id": 202854024,
        "sender_full_name": "aspen",
        "timestamp": 1593833556
    },
    {
        "content": "<p>The patches need to be approved upstream first.</p>",
        "id": 202863649,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1593851258
    },
    {
        "content": "<p>Apple want to upstream the changes in their fork and the legalities are currently being resolved, but from what I understood the actual upstreaming will require community contribution. I.e. someone has to take the relevant changes from their fork, break them down into reasonable parts and push them through code review.</p>",
        "id": 202863697,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1593851330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Looking.20into.20ARMv8.2E3.2Farm64e.20support.20for.20rustc.2E/near/202740829\">said</a>:</p>\n<blockquote>\n<p>Hm, how will Rust support Apple Silicon-based macs then? Chances are they'll be ARMv8.3 or ARMv8.5.</p>\n</blockquote>\n<p>Its not like those chips won’t be able to execute ARMv8.2 machine code… right? What makes you so insistent on v8.3/8.5 insns being required?</p>",
        "id": 203104255,
        "sender_full_name": "nagisa",
        "timestamp": 1594129648
    },
    {
        "content": "<p>Note that a lot of discussion has occurred in <a class=\"stream\" data-stream-id=\"242906\" href=\"/#narrow/stream/242906-t-compiler.2Farm\">#t-compiler/arm</a>. This is probably most relevant:</p>\n<p><a href=\"https://twitter.com/jckarter/status/1280211570182615040\">https://twitter.com/jckarter/status/1280211570182615040</a></p>\n<p><a href=\"https://twitter.com/jckarter/status/1280209930885017600\">https://twitter.com/jckarter/status/1280209930885017600</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/jckarter/status/1280211570182615040\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1251258044106723328/O5MSYSy-_normal.jpg\"></a><p><a href=\"https://twitter.com/JakeGoulding\">@JakeGoulding</a> <a href=\"https://twitter.com/luxx4x\">@luxx4x</a> <a href=\"https://twitter.com/indirect\">@indirect</a> Yeah, non-system binaries should still only be arm64 for the time being</p><span>- Joe Groff (@jckarter)</span></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/jckarter/status/1280209930885017600\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1251258044106723328/O5MSYSy-_normal.jpg\"></a><p><a href=\"https://twitter.com/JakeGoulding\">@JakeGoulding</a> <a href=\"https://twitter.com/luxx4x\">@luxx4x</a> <a href=\"https://twitter.com/indirect\">@indirect</a> I think it'd still be more frustrating than rewarding right now to try to chase arm64e support to interop with Apple C/Swift ABIs right now, since they're still in flux. It could be interesting to mess with to starting working out a good ptrauth ABI for rust though</p><span>- Joe Groff (@jckarter)</span></div></div>",
        "id": 203106930,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594130883
    }
]