[
    {
        "content": "<p>New hurdle today, in the wake of the <code>uwtable</code> attribute changes in LLVM: with my patch applied <a href=\"https://buildkite.com/llvm-project/rust-llvm-integrate-prototype/builds/8366#61fdb221-c8c7-49b6-8193-29f252ea2dfa\">we get a test failure</a> in <code>[run-make] run-make-fulldeps/static-nobundle</code> because <code>gold</code> is using some too-old LLVM bits. Anyone have a pointer to the dance I need to do to convince Rust to use the right linker?</p>",
        "id": 271907801,
        "sender_full_name": "durin42",
        "timestamp": 1644883483
    },
    {
        "content": "<p>I don't get why that tries to read bitcode at all. I don't see any LTO flags.</p>",
        "id": 271974419,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1644932411
    },
    {
        "content": "<p>We compile tests with -O by default I think, which likely turns on thinlto iirc?</p>",
        "id": 271975176,
        "sender_full_name": "simulacrum",
        "timestamp": 1644932768
    },
    {
        "content": "<p>-Clto=false might work, or if you have a better linker I think target.$target has a linker opt in config.toml</p>",
        "id": 271975470,
        "sender_full_name": "simulacrum",
        "timestamp": 1644932907
    },
    {
        "content": "<p>LTO isn't used by that test: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/static-nobundle/Makefile\">https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/static-nobundle/Makefile</a> Even if it would be, it doesn't use linker plugin LTO, so the linker should never see any bitcode.</p>",
        "id": 271975841,
        "sender_full_name": "bjorn3",
        "timestamp": 1644933067
    },
    {
        "content": "<p>Wait, it doesn't use <code>-Cembed-bitcode=no</code>, so bitcode is included in the rust object filed. The linket should ignore it though as rustc doesn't enable LTO for the linker.</p>",
        "id": 271976019,
        "sender_full_name": "bjorn3",
        "timestamp": 1644933159
    },
    {
        "content": "<p>Is it possible that gold unconditionally reads LLVM bitcode?</p>",
        "id": 271976148,
        "sender_full_name": "bjorn3",
        "timestamp": 1644933232
    },
    {
        "content": "<p>Not sure about that. <span class=\"user-mention\" data-user-id=\"478017\">@Krasimir Georgiev</span> was looking into this and came up with <a href=\"https://github.com/rust-lang/rust/pull/94023/files\">https://github.com/rust-lang/rust/pull/94023/files</a>, which seems a little hacky?</p>",
        "id": 271984782,
        "sender_full_name": "durin42",
        "timestamp": 1644936665
    },
    {
        "content": "<p>Hey! It's the system(?) <code>nm</code> that appears to unconditionally try to read LLVM bitcode via an LTO plugin, I guess, and in this case it's not recent enough to pick up the head LLVM changes:<br>\n<a href=\"https://buildkite.com/llvm-project/rust-llvm-integrate-prototype/builds/8380#ef6f41b5-8595-49a6-be37-0eff80e0ccb5/253-740\">https://buildkite.com/llvm-project/rust-llvm-integrate-prototype/builds/8380#ef6f41b5-8595-49a6-be37-0eff80e0ccb5/253-740</a><br>\nIn my PR I try adapting the test the other way around, to use the llvm-nm from the llvm installation that rust itself is based on, which should be able to understand this rustc llvm bitcode. I saw this <code>LLVM_BIN_DIR</code> pattern in a few other run-make-fulldeps tests, e.g., <a href=\"https://github.com/rust-lang/rust/blob/55697574915ca58c3fcd7b1c854c1c93e002dc85/src/test/run-make-fulldeps/issue-64153/Makefile#L20\">https://github.com/rust-lang/rust/blob/55697574915ca58c3fcd7b1c854c1c93e002dc85/src/test/run-make-fulldeps/issue-64153/Makefile#L20</a></p>",
        "id": 271985706,
        "sender_full_name": "Krasimir Georgiev",
        "timestamp": 1644937052
    },
    {
        "content": "<p>Either approach sounds fine to me.</p>",
        "id": 272034999,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1644957780
    },
    {
        "content": "<p>Though that does sound like another argument for why we shouldn't be using the <code>.llvmbc</code> section name.</p>",
        "id": 272035039,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1644957811
    }
]