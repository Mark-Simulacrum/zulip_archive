[
    {
        "content": "<p>hi everyone,<br>\ni've been  testing rayon's slice par_sort algorithm a bit. (by the way, this is my first post here, so i hope i am doing it right)</p>\n<p>there is a huge difference of performances when turning on 'panic=\"abort\"' in cargo.<br>\nI'm sorting a slice of random integers.<br>\nif i unwind i get a lot of extra branches and a huge jump in mispredicted branches. (10%)<br>\nif i abort less branches and not many mispredictions (2.7%)</p>\n<p>testing code is here.<br>\n<a href=\"https://is.gd/DkkBy8\">https://is.gd/DkkBy8</a> (needs rayon and rand)</p>\n<p>we can see the effects instantly with perf (under linux).<br>\nit as a noticeable performance effect on my desktop machine and very strong impact (almost x2 acceleration) on a server machine.</p>\n<p>perf tells me the branch misses events come from this code inside rayon (src/slice/mergesort.rs):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">left_start</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">left_end</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">right_start</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">right_end</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Consume the lesser side.</span>\n<span class=\"w\">            </span><span class=\"c1\">// If equal, prefer the left run to maintain stability.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_copy</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_less</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">right_start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">left_start</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">get_and_increment</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">right_start</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">get_and_increment</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">left_start</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span>::<span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"n\">to_copy</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">get_and_increment</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">dest</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>i'm not extra fluent in assembly but it seems to me the fast version uses conditional moves while the slow version does not.</p>\n<p>I'm not sure what you can do with that but since the sort is an important algorithm it might be worth to try something.</p>\n<p>if anything i'd be happy to know what is going on.</p>",
        "id": 204919066,
        "sender_full_name": "frederic wagner",
        "timestamp": 1595599507
    },
    {
        "content": "<p>I was thinking, <span class=\"user-mention\" data-user-id=\"324777\">@frederic wagner</span>, if we wanted to try and eliminate the integer comparison question, maybe you can test a version that is specialized to integer types, and not written generically?</p>",
        "id": 204920063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595599977
    },
    {
        "content": "<p>I'm working from the hypothesis of course that is something to do with the compiler assuming unwinding can occur and inhibiting an optimization.</p>",
        "id": 204920140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595600006
    },
    {
        "content": "<p>The other thing to do would be to dump some of the intermediate LLVM IR but I don't know as much about that, i.e., I'm not sure which would be the best IR to examine.</p>",
        "id": 204920265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595600046
    },
    {
        "content": "<p>oh it's a good idea to have an integer version. it can be done quite fast. i'll take a look.</p>",
        "id": 204920343,
        "sender_full_name": "frederic wagner",
        "timestamp": 1595600095
    },
    {
        "content": "<p>If the issue really is branches vs <code>cmov</code>, then this is a very unfortunate situation because there's no good way to force (or even reliably persuade) LLVM to use <code>cmov</code>s -- for good reasons, but still. Thus, even if panic=abort helps today, any change to the surrounding code or LLVM passes or rustc's codegen could potentially turn it back to branchy code. I've seen talk of this (convincing the compiler to emit cmovs when beneficial) being a problem in the C/C++ world too.</p>",
        "id": 204934266,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1595606767
    },
    {
        "content": "<p>ok, so i switched the whole code to integers and it does not change anything.<br>\ni also removed the call to copy_non_overlapping</p>",
        "id": 204990302,
        "sender_full_name": "frederic wagner",
        "timestamp": 1595657023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"324777\">@frederic wagner</span> very curious, did you ever figure anything else out here?</p>",
        "id": 207509260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920211
    },
    {
        "content": "<p>hi, i did a few more simplifications to the code but with no change in behavior. i'm actually not too sure to understand how exceptions are handled by the compiler. i thought panic-able functions calls would get an added check on return and functions which cannot panic would not. but in this case i don't see what could panic. time was running short so we put it aside. i'm not sure i can reach this deep in the compiler without  a heavy time investment.</p>",
        "id": 207517812,
        "sender_full_name": "frederic wagner",
        "timestamp": 1597927600
    },
    {
        "content": "<p>Unwinding is handled by having a side table that defines how to restore registers and to what place to jump to when the instruction pointer is at a certain place during unwinding. There is no cost when not unwinding except for inhibiting optimizations that would prevent restoring values necessary to run the cleanup code.</p>",
        "id": 207518160,
        "sender_full_name": "bjorn3",
        "timestamp": 1597927828
    },
    {
        "content": "<p>It's the exact same mechanism as C++ exceptions, although that equivalence is not ABI-guaranteed</p>",
        "id": 207542350,
        "sender_full_name": "cuviper",
        "timestamp": 1597940495
    }
]