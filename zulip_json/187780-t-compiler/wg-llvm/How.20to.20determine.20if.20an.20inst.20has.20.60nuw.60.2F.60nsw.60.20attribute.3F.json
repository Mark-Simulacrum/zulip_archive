[
    {
        "content": "<p>Hi LLVM experts. I've been trying on my own to see if I can resolve <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">https://bugs.llvm.org/show_bug.cgi?id=46943</a></p>",
        "id": 205829499,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479162
    },
    {
        "content": "<p>At this point I'm playing with this patch: <a href=\"https://gist.github.com/pnkfelix/6e8c3c4b990133864173e4ef0ad6bea8\">https://gist.github.com/pnkfelix/6e8c3c4b990133864173e4ef0ad6bea8</a></p>",
        "id": 205829568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479185
    },
    {
        "content": "<p>but its not working; I get this output during <code>opt -loop-reduce -debug</code>: </p>\n<div class=\"codehilite\"><pre><span></span><code>...\nUse:   %5 = add nuw i8 %1, 0 is a non-overflowing binop\nUse:   %1 = phi i8 [ 0, %0 ], [ %3, %while.cond ] is a non-overflowing binop\nUse:   %1 = phi i8 [ 0, %0 ], [ %3, %while.cond ] is a non-overflowing binop\n...\n</code></pre></div>",
        "id": 205829663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479242
    },
    {
        "content": "<p>so, what am I doing wrong in the code? At this point I'm assuming that there's something wrong with my understanding of how <code>dyn_cast</code> is supposed to work</p>",
        "id": 205829708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479269
    },
    {
        "content": "<p>(okay, obviously I tweaked the debug output slightly since I did the run I pasted above; let me make a fresh run and edit the transcript)</p>",
        "id": 205829851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479323
    },
    {
        "content": "<p>corrected output (based on updated run that reflects patch that was posted):</p>\n<div class=\"codehilite\"><pre><span></span><code>...\nUse:   %5 = add nuw i8 %1, 0 is not an overflowing binop\nUse:   %1 = phi i8 [ 0, %0 ], [ %3, %while.cond ] is not an overflowing binop\nUse:   %1 = phi i8 [ 0, %0 ], [ %3, %while.cond ] is not an overflowing binop\n...\n</code></pre></div>",
        "id": 205830364,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479617
    },
    {
        "content": "<p>so my point is: <code>%5 = add nuw i8 %1, 0</code>, is what I <em>want</em> to detect as a (potentially) overflowing binop, so that I can invoke the methods <code>hasNoUnsignedWrap</code> and <code>hasNoSignedWrap</code> methods on it.</p>",
        "id": 205830520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479693
    },
    {
        "content": "<p>(I already found out the hard way that you cannot just invoke those methods on any old instruction)</p>",
        "id": 205830562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596479717
    },
    {
        "content": "<p>(trying <code>OverflowingBinaryOperator::classof(UserInst)</code> now as an alternative to <code>isa</code>/<code>dyn_cast</code>, since the latter two haven't worked)</p>",
        "id": 205834668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596481695
    },
    {
        "content": "<p>(though from what I've read, in LLVM, <code>isa</code> is just implemented atop <code>classof</code>, so I'm not holding out much hope here.)</p>",
        "id": 205834907,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596481807
    },
    {
        "content": "<p>or, oh, maybe I misunderstand the relationship of <del><code>U</code></del> <code>UseI</code> and <code>UserInst</code> (i.e. the meaning of <code>U.getUser()</code>); investigating...</p>",
        "id": 205835359,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596482046
    },
    {
        "content": "<p>Okay yes that was the problem; I was inspecting the flags (and type/operator kind) of the wrong instruction each time</p>",
        "id": 205837275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596483071
    }
]