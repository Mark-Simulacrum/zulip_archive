[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1176\">@WG-llvm</span> -- so I want to create this concept of ICE-breakers, and I wanted to start with LLVM bugs. The idea is to pick a topic area (in this case, LLVM) and to prepare:</p>\n<ul>\n<li>a github alias -- ideally one that people can easily add themselves to!</li>\n<li>a guide that gives instructions on how to proceed with these sorts of bugs in general</li>\n<li>a label in our issues database (IB-LLVM or something like that)</li>\n</ul>\n<p>I was hoping to get two bits of feedback here:</p>\n<ul>\n<li>Some names of folks who'd be interested</li>\n<li>Some help preparing or improving a high-level guide</li>\n</ul>\n<p>I think an LLVM guide would basically include </p>\n<p>(a) some tips on bisecting -- at least just pointing to cargo-bisect rustc and mentioning nightlies etc. This should be generally useful.<br>\n(b) some tips on how to do dump LLVM IR  -- at least listing out the command line options<br>\n(c) maybe some tips on minimization tools?<br>\n(d) pointers to the LLVM bug database and a few tips on how to search?</p>\n<p>I don't know how people normally go about reducing a bug to an LLVM bug, so any suggestions very welcome. :)</p>",
        "id": 175345074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568127486
    },
    {
        "content": "<p>I'd also like to maybe reach out to LLVM people to see if any of them are interested in being added to the alias...</p>",
        "id": 175345122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568127522
    },
    {
        "content": "<p>I think the target audience is probably people who are somewhat familiar with LLVM already, most realistically.</p>",
        "id": 175345132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568127536
    },
    {
        "content": "<p>Thoughts?</p>",
        "id": 175345138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568127540
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1176\">@WG-llvm</span> -- can somebody at least point me to some tips on how to see the llvm output when running with rustc? Is <code>-Zsave-temps</code> still a thing? <code>--emit LLVM</code>? I want to write up some docs that basically say:</p>\n<p>- here is how you dump IR<br>\n- then you can debug from there</p>",
        "id": 176224240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008373
    },
    {
        "content": "<p>I guess <code>--emit llvm-bc</code> maybe?</p>",
        "id": 176224322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008410
    },
    {
        "content": "<p>--emit=llvm-ir is what is usually used, sometimes with -Zno-prepopulate-passes.</p>",
        "id": 176224326,
        "sender_full_name": "nagisa",
        "timestamp": 1569008413
    },
    {
        "content": "<p>llvm-bc is also useful, but pretty much equivalent to llvm-ir for all intents and purposes, except you need an additional steps to make it readable.</p>",
        "id": 176224365,
        "sender_full_name": "nagisa",
        "timestamp": 1569008455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> where does the IR appear in that case?</p>",
        "id": 176224414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008513
    },
    {
        "content": "<p>other useful flags are <code>-Cllvm-arg=*</code> where <code>*</code> allows pretty much everything that tools like <code>llc</code> and <code>opt</code> would accept e.g. -Cllvm-arg=-print-before-all` to print IR before every LLVM pass.</p>",
        "id": 176224416,
        "sender_full_name": "nagisa",
        "timestamp": 1569008514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it is output as <code>&lt;filename&gt;.ll</code> in your output directory.</p>",
        "id": 176224464,
        "sender_full_name": "nagisa",
        "timestamp": 1569008528
    },
    {
        "content": "<p>e.g. <code>--emit=link,asm,llvm-ir</code> would output <code>mycrate</code> (the binary), <code>mycrate.s</code> and <code>mycrate.ll</code>.</p>",
        "id": 176224524,
        "sender_full_name": "nagisa",
        "timestamp": 1569008584
    },
    {
        "content": "<p>I can't find the option <code>-Zno-prepopulate-passes</code></p>",
        "id": 176224629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008668
    },
    {
        "content": "<p>It's a -C option IIRC</p>",
        "id": 176224643,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569008686
    },
    {
        "content": "<p>not -Z</p>",
        "id": 176224647,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569008689
    },
    {
        "content": "<p>Got it</p>",
        "id": 176224751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008776
    },
    {
        "content": "<p>Why do you run that?</p>",
        "id": 176224756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008780
    },
    {
        "content": "<p>Like, why would you want to avoid prepopulating the passes list :)</p>",
        "id": 176224764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008790
    },
    {
        "content": "<p>To get the LLVM IR that rustc generates, not what's left after LLVM is done with it</p>",
        "id": 176224780,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569008814
    },
    {
        "content": "<p>ok, that's what I figured</p>",
        "id": 176224787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008821
    },
    {
        "content": "<p>We have a fork of LLVM, right? With patches?</p>",
        "id": 176224933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008955
    },
    {
        "content": "<p>Where is that located?</p>",
        "id": 176224936,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569008958
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/llvm-project/\" target=\"_blank\" title=\"https://github.com/rust-lang/llvm-project/\">https://github.com/rust-lang/llvm-project/</a> though figuring out which branch/commit we're actually using is more easily achieved by looking at the submodule in the rust-lang/rust.git tree</p>",
        "id": 176225016,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569009011
    },
    {
        "content": "<p>oh hey, I just found <a href=\"https://rust-lang.github.io/rustc-guide/codegen/debugging.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/codegen/debugging.html\">this chapter in the rustc-guide</a></p>",
        "id": 176225076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569009067
    },
    {
        "content": "<p>nice!</p>",
        "id": 176225077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569009068
    },
    {
        "content": "<p>this contains most everything I was writing</p>",
        "id": 176225093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1569009081
    }
]