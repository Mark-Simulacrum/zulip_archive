[
    {
        "content": "<p>Hey,<br>\nDid my best about <a href=\"https://github.com/rust-lang/rust/issues/53254#issuecomment-544741814\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53254#issuecomment-544741814\">https://github.com/rust-lang/rust/issues/53254#issuecomment-544741814</a> on the Rust side.<br>\nHow can I reduce it further to report it on LLVM bugzilla?</p>",
        "id": 178707183,
        "sender_full_name": "mati865",
        "timestamp": 1571698568
    },
    {
        "content": "<p>Looks like generated IR is the same apart from the GOT flag. In the backend it seems like everything is also the same up until fpow legalization, where an additional 32-byte call stack adjustment is emitted on pc-windows-gnu.</p>",
        "id": 178732515,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1571731989
    },
    {
        "content": "<p>When I replace <code>transmute(0_i64)</code> with <code>__m64(0_i64)</code> all platforms I tested give correct result.<br>\nI don't know enough about it but could it be alignment issue?</p>",
        "id": 178736527,
        "sender_full_name": "mati865",
        "timestamp": 1571735427
    },
    {
        "content": "<p>Do you have a godbolt link ready for the verson with <code>__m64(0)</code>?</p>",
        "id": 178747487,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571745131
    },
    {
        "content": "<p>Sure, <a href=\"https://godbolt.org/z/Hmshca\" target=\"_blank\" title=\"https://godbolt.org/z/Hmshca\">https://godbolt.org/z/Hmshca</a></p>",
        "id": 178747552,
        "sender_full_name": "mati865",
        "timestamp": 1571745224
    },
    {
        "content": "<p>So that doesn't use any MMX instructions. It just does a 64b scalar store to the stack (<code>x86_mmx</code>-typed) stack slot</p>",
        "id": 178747663,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571745283
    },
    {
        "content": "<p>More evidence that the MMX instructions are to blame</p>",
        "id": 178747669,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571745291
    },
    {
        "content": "<p>Ah, it's <code>mm0</code></p>",
        "id": 178747702,
        "sender_full_name": "mati865",
        "timestamp": 1571745328
    },
    {
        "content": "<p>Could be another weird msvcrt issue, I'll see if I can try with ucrt.</p>",
        "id": 178747814,
        "sender_full_name": "mati865",
        "timestamp": 1571745419
    },
    {
        "content": "<blockquote>\n<p>Honestly, I think the best fix would be to not use MMX intrinsics ever.</p>\n</blockquote>\n<p>IIUC, the test programs are not using MMX, but the math library is, right ?</p>",
        "id": 178750570,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747557
    },
    {
        "content": "<p>Replacing msvcrt with ucrt doesn't help so it must be something else different between msvc and mingw.</p>",
        "id": 178750583,
        "sender_full_name": "mati865",
        "timestamp": 1571747563
    },
    {
        "content": "<p>Ah no, <span class=\"user-mention\" data-user-id=\"119581\">@Mateusz Miku≈Ça</span> example uses <code>pmovmskb</code></p>",
        "id": 178750603,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747589
    },
    {
        "content": "<p>Mingw <code>powf</code> just calls msvcrt pow, have fun guessing what it does internally.<br>\n<code>pmovmskb</code> comes from \"unwrapped\" <code>_mm_movemask_pi8</code></p>",
        "id": 178750712,
        "sender_full_name": "mati865",
        "timestamp": 1571747670
    },
    {
        "content": "<p>The thing is, the problem I reported happens even if you don't use MMX in Rust</p>",
        "id": 178750748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747703
    },
    {
        "content": "<p>Your example uses MMX without calling <code>emms</code></p>",
        "id": 178750763,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747711
    },
    {
        "content": "<p>We know such code doesn't work: <a href=\"https://github.com/rust-lang/rust/issues/57831\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57831\">https://github.com/rust-lang/rust/issues/57831</a></p>",
        "id": 178750785,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747741
    },
    {
        "content": "<p>It has UB of the form \"calling a function with an incompatible ABI\"</p>",
        "id": 178750857,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747775
    },
    {
        "content": "<p>All my code is extraction from corearch and packed_simd.</p>",
        "id": 178750868,
        "sender_full_name": "mati865",
        "timestamp": 1571747789
    },
    {
        "content": "<p>The <code>pmovmskb</code> ? Then that's a bug in <code>packed_simd</code> (<code>packed_simd</code> should call <code>emms</code> when it uses it, or not use MMX at all like <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> suggests)</p>",
        "id": 178750893,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747812
    },
    {
        "content": "<p>Notice that my original example does not use MMX though</p>",
        "id": 178750914,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747826
    },
    {
        "content": "<p>So it might be a different issue</p>",
        "id": 178750950,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747846
    },
    {
        "content": "<p>Original example has been fixed long time ago, I said it in one of the comments.<br>\n<code>pmovmskb</code> came from <a href=\"https://docs.rs/core_arch/0.1.3/x86_64-unknown-linux-gnu/src/core_arch/x86/sse.rs.html#2396-2398\" target=\"_blank\" title=\"https://docs.rs/core_arch/0.1.3/x86_64-unknown-linux-gnu/src/core_arch/x86/sse.rs.html#2396-2398\">https://docs.rs/core_arch/0.1.3/x86_64-unknown-linux-gnu/src/core_arch/x86/sse.rs.html#2396-2398</a></p>",
        "id": 178751055,
        "sender_full_name": "mati865",
        "timestamp": 1571747911
    },
    {
        "content": "<p>Now where <code>_mm_movemask_pi8</code> did came from...</p>",
        "id": 178751070,
        "sender_full_name": "mati865",
        "timestamp": 1571747925
    },
    {
        "content": "<p>Ah, I did not got that. I thought that some fix landed on LLVM that did not fix the original example, hence why the issue is still open.</p>",
        "id": 178751097,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747955
    },
    {
        "content": "<p>So yeah, that's a different bug.</p>",
        "id": 178751118,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747977
    },
    {
        "content": "<p>That code has undefined behavior, and the fix is either not to use MMX or to call emms</p>",
        "id": 178751136,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571747997
    },
    {
        "content": "<p>calling emms is not a fix tbh</p>",
        "id": 178751256,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748078
    },
    {
        "content": "<p>I honestly think stdarch should just kill all the MMX intrinsics</p>",
        "id": 178751270,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748093
    },
    {
        "content": "<p>Their usefulness was always controversial and they are actually impossible to use correctly</p>",
        "id": 178751281,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748114
    },
    {
        "content": "<p>They are not stable I think, so we could just do that.</p>",
        "id": 178751414,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748205
    },
    {
        "content": "<p>The problem is that there is no way for LLVM to generate reasonable codegen for when they are used in packed_simd, but at that point using inline assembly might be a better solution.</p>",
        "id": 178751497,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748243
    },
    {
        "content": "<p>Why would they be used in packed_simd anyway?</p>",
        "id": 178751537,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748270
    },
    {
        "content": "<p>It supports 64-bit wide vectors</p>",
        "id": 178751542,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748281
    },
    {
        "content": "<p>e.g. f32x2</p>",
        "id": 178751545,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748285
    },
    {
        "content": "<p>But why</p>",
        "id": 178751549,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748288
    },
    {
        "content": "<p>Who uses those</p>",
        "id": 178751553,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748290
    },
    {
        "content": "<p>2D code using (x, y)</p>",
        "id": 178751597,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748329
    },
    {
        "content": "<p>where x and y are f32s</p>",
        "id": 178751612,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748347
    },
    {
        "content": "<p>Does such code actually <em>want</em> to use MMX? Does it benefit from it vs scalar code or padding to f32x4?</p>",
        "id": 178751664,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748370
    },
    {
        "content": "<p>That code wants to efficiently test whether <code>(x, y) &lt; (z, w)</code> returns <code>(0, 0)</code> or <code>(0xff, 0xff)</code></p>",
        "id": 178751693,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748405
    },
    {
        "content": "<p>That doesn't answer my question</p>",
        "id": 178751713,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748429
    },
    {
        "content": "<p>the scalar thing was much slower than the <code>pmovmaskb</code> operation, which does it at once</p>",
        "id": 178751714,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748433
    },
    {
        "content": "<p>Ok, and what about the SSE equivalent?</p>",
        "id": 178751725,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748452
    },
    {
        "content": "<p>because that's what you'd get with <a href=\"https://github.com/rust-lang/rust/issues/58168\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58168\">https://github.com/rust-lang/rust/issues/58168</a> anyway</p>",
        "id": 178751782,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748483
    },
    {
        "content": "<p>what would be the SSE equivalent ?</p>",
        "id": 178751798,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748509
    },
    {
        "content": "<p>I don't know <code>pmovmaskb</code> or my SSE intrinsics well enough to tell you that, but I would be extremely surprised if there wasn't a reasonably short instruction sequence for it</p>",
        "id": 178751827,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748570
    },
    {
        "content": "<p>the three operations where this is used is the boolean <code>m32x2::{all, any, none}</code> operations where you can just get a mask, and test it - one can build that on top of <code>m32x4</code>, e.g., by using a shuffle to mix in the <code>m32x2</code> with two other elements, and then do the SSE equivlaent</p>",
        "id": 178751851,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748590
    },
    {
        "content": "<p>e.g. for <code>all</code> you do a <code>shuffle!(m32x2, {true, true});</code>, for none you do a <code>shuffle!(m32x2, {false, false})</code>, etc. and then you follow both by a <code>__mm_movmask_epi8</code> or similar</p>",
        "id": 178751988,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> wait.. _mm_movemask_pi8</p>",
        "id": 178752149,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748797
    },
    {
        "content": "<p>that's an SSE intrinsic..</p>",
        "id": 178752158,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748805
    },
    {
        "content": "<p>but it takes an MMX register as its argument..</p>",
        "id": 178752242,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748850
    },
    {
        "content": "<p>lol</p>",
        "id": 178752306,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571748892
    },
    {
        "content": "<p>I guess one can use <code>__mm_movemask_ps</code> instead there by doing the widening</p>",
        "id": 178752307,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571748892
    },
    {
        "content": "<p>To be clear, you are talking about a future where <code>m32x2</code> is no longer mapped to the <code>x86_mmx</code> type, right? Because if that type is still involves, LLVM will still sometimes use <code>mmN</code> registers, which besides corrupting the x87 stack will cause unnecessary moves between register banks</p>",
        "id": 178752526,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749073
    },
    {
        "content": "<p>Although I'm curious whether mapping it to e.g. i64 would be any better for performance.</p>",
        "id": 178752678,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749145
    },
    {
        "content": "<p>Let's check what GCC can do</p>",
        "id": 178752694,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> <code>m32x2</code> is not mapped to <code>x86_mmx</code> right now</p>",
        "id": 178752727,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749191
    },
    {
        "content": "<p>It's not?</p>",
        "id": 178752737,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749199
    },
    {
        "content": "<p>no</p>",
        "id": 178752739,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749201
    },
    {
        "content": "<p>only <code>i64x1</code> is... for some reason..</p>",
        "id": 178752803,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749214
    },
    {
        "content": "<p>but <code>packed_simd</code> does not support that type</p>",
        "id": 178752811,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749221
    },
    {
        "content": "<p>But f32x2 is, right?</p>",
        "id": 178752818,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749225
    },
    {
        "content": "<p>no</p>",
        "id": 178752822,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749233
    },
    {
        "content": "<p>only <code>__m64</code> is mapped to <code>x86_mmx</code></p>",
        "id": 178752836,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749244
    },
    {
        "content": "<p>but that intrinsic happens to use it, so when the <code>transmute</code> happens, the <code>x86_mmx</code> type is used</p>",
        "id": 178752856,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749259
    },
    {
        "content": "<p>Oh, does packed_simd only cast to __m64 internally and temporarily</p>",
        "id": 178752885,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749270
    },
    {
        "content": "<p>yes</p>",
        "id": 178752899,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749276
    },
    {
        "content": "<p>because that SSE intrinsic takes an <code>__m64</code></p>",
        "id": 178752906,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749281
    },
    {
        "content": "<p>Even better</p>",
        "id": 178752908,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749284
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/CTv-VG\" target=\"_blank\" title=\"https://godbolt.org/z/CTv-VG\">https://godbolt.org/z/CTv-VG</a></p>",
        "id": 178752916,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749290
    },
    {
        "content": "<p>so there I use <code>_mm_movemask_ps</code> instead and everything just works nicely</p>",
        "id": 178752933,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749309
    },
    {
        "content": "<p>at least for that intrinsic</p>",
        "id": 178752936,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749315
    },
    {
        "content": "<p>Great</p>",
        "id": 178752998,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749333
    },
    {
        "content": "<p>For the <code>m32x2::all</code> operation things are a bit different</p>",
        "id": 178753570,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749760
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/X35ZR2\" target=\"_blank\" title=\"https://godbolt.org/z/X35ZR2\">https://godbolt.org/z/X35ZR2</a></p>",
        "id": 178753574,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749763
    },
    {
        "content": "<p>The none and any operation can make use of the fact that, in the calling convention, the 32x2 vector will contain another two zeroed 32x2 elements behind it</p>",
        "id": 178753609,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749796
    },
    {
        "content": "<p>for the all mask there are a couple of things one can do to map the m32x2 into a m32x4, but all of them appear to generate unnecessary instructions, although arguably the MMX code has UB</p>",
        "id": 178753749,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749874
    },
    {
        "content": "<p>so it is not a fair comparison either</p>",
        "id": 178753764,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749886
    },
    {
        "content": "<p>Now that you mention it, looking at this in isolation might actually be a bit misleading. The calling convention for <code>&lt;float x 2&gt;</code> on x86+SSE targets is pretty funky and in reality you'd probably always have those operations inlined</p>",
        "id": 178753787,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749920
    },
    {
        "content": "<p>Since you apparently have a concrete use case, a larger snippet that uses the any/all/none operations in a representative way might be more instructive</p>",
        "id": 178753885,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571749970
    },
    {
        "content": "<p>Yeah, you have a point</p>",
        "id": 178753890,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749975
    },
    {
        "content": "<p>In isolation, this is the best: <a href=\"https://godbolt.org/z/iysHeL\" target=\"_blank\" title=\"https://godbolt.org/z/iysHeL\">https://godbolt.org/z/iysHeL</a></p>",
        "id": 178753896,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749980
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">m32x2_allSSE</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">m32x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">u64</span>::<span class=\"n\">max_value</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178753915,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571749992
    },
    {
        "content": "<p>lol that's fair</p>",
        "id": 178753940,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750014
    },
    {
        "content": "<p>I think <code>packed_simd</code> does that in many cases</p>",
        "id": 178753961,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750028
    },
    {
        "content": "<p>but also particularly misleading in isolation since it doesn't look so great when the mask is produced from SSE instructions</p>",
        "id": 178754004,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750043
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/reductions/mask/fallback_impl.rs#L66\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/reductions/mask/fallback_impl.rs#L66\">https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/reductions/mask/fallback_impl.rs#L66</a></p>",
        "id": 178754037,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750070
    },
    {
        "content": "<p>IIRC in some targets and for some vectors LLVM was able to generate quite good code for that, when used in larger examples.</p>",
        "id": 178754080,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750108
    },
    {
        "content": "<p>But there were also cases where it wasn't due to a variety of llvm bugs, and then workarounds were introduced</p>",
        "id": 178754105,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750129
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/reductions/mask/x86/sse.rs#L51\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/reductions/mask/x86/sse.rs#L51\">https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/reductions/mask/x86/sse.rs#L51</a></p>",
        "id": 178754132,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750152
    },
    {
        "content": "<p>Anyway, I suspect that for the actual application/benchmark, some higher level algorithmic changes could allow doing everything in SSE registers directly (loads, compares, and reductions).</p>",
        "id": 178754140,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750158
    },
    {
        "content": "<p>I think that not dealing with EMMS is worth a performance hit</p>",
        "id": 178754275,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750208
    },
    {
        "content": "<p>That too, but best if there's no performance hit to begin with</p>",
        "id": 178754288,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750221
    },
    {
        "content": "<p>and if that is not acceptable, then we'd just use inline assembly instead</p>",
        "id": 178754291,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750222
    },
    {
        "content": "<p>but <code>packed_simd</code> should not use MMX registers anywhere</p>",
        "id": 178754317,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750238
    },
    {
        "content": "<p>You mean inline asm for the any/all/none intrinsics?</p>",
        "id": 178754323,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750239
    },
    {
        "content": "<p>not in the general case, but as a workaround over an LLVM bug</p>",
        "id": 178754334,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750251
    },
    {
        "content": "<p>all that parent module is workarounds over llvm bugs</p>",
        "id": 178754360,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750266
    },
    {
        "content": "<p>Sure but still, such small inline asm seems like it would likely cause more performance problems (blocking combines, blinding regalloc and scheduling) than it's worth</p>",
        "id": 178754438,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750299
    },
    {
        "content": "<p>But <em>shrug</em> try it if you have to</p>",
        "id": 178754445,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750304
    },
    {
        "content": "<p>I would love to be able to kill <code>__m64</code></p>",
        "id": 178754452,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750308
    },
    {
        "content": "<p>I think there is an open issue to at least restrict that, but yeah, should be killed</p>",
        "id": 178754888,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571750591
    },
    {
        "content": "<p>Restrict how?</p>",
        "id": 178755093,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750747
    },
    {
        "content": "<p>For that matter, restrict what?</p>",
        "id": 178755149,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571750769
    },
    {
        "content": "<p>To restrict <code>__m64</code> to be the only SIMD type that lowers to <code>x86_mmx</code></p>",
        "id": 178755761,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751232
    },
    {
        "content": "<p>right now, any <code>#[repr(simd)]</code> ADT containing a single field, with type <code>i64</code>, is lowered to <code>x86_mmx</code></p>",
        "id": 178755849,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751285
    },
    {
        "content": "<p>Ah</p>",
        "id": 178755942,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571751347
    },
    {
        "content": "<p>I'd be happier if that were restricted further, e.g., to types with a <code>#[repr(simd(x86_mmx))]</code> attribute or similar. </p>\n<p>I wouldn't oppose just completely removing all support for <code>x86_mmx</code>, and either removing the MMX intrinsics, or implementing them on top of SSE2.</p>",
        "id": 178756014,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751378
    },
    {
        "content": "<p>But I'd rather just remove them</p>",
        "id": 178756022,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751387
    },
    {
        "content": "<p>They are not in the path towards stabilization anyways</p>",
        "id": 178756042,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751400
    },
    {
        "content": "<p>yes pls</p>",
        "id": 178756051,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571751410
    },
    {
        "content": "<p>And MMX causes more trouble than it solves, those who need it can use inline assembly instead if they so desire</p>",
        "id": 178756063,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751419
    },
    {
        "content": "<p>and that's just as unstable as the MMX intrinsics</p>",
        "id": 178756073,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751429
    },
    {
        "content": "<p>or just leave the cursed algorithm in C land and call it through FFI</p>",
        "id": 178756091,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571751441
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stdarch/issues/823\" target=\"_blank\" title=\"https://github.com/rust-lang/stdarch/issues/823\">https://github.com/rust-lang/stdarch/issues/823</a></p>",
        "id": 178756376,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571751558
    },
    {
        "content": "<p>So in the end we should close <a href=\"https://github.com/rust-lang/rust/issues/53254\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53254\">https://github.com/rust-lang/rust/issues/53254</a>, fix packed_simd and nuke mmx from orbit?</p>",
        "id": 178757328,
        "sender_full_name": "mati865",
        "timestamp": 1571752086
    },
    {
        "content": "<p>Different order (fix packed_simd, then close issue) but yes that would be my preferred approach</p>",
        "id": 178757408,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571752135
    },
    {
        "content": "<p>I think the issue can be closed, the packed_simd bug is a different bug, only tangentially related to the issue</p>",
        "id": 178764240,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571756523
    },
    {
        "content": "<p>Thank you everyone for the investigation and sorry for cluttering this wg.</p>",
        "id": 178773541,
        "sender_full_name": "mati865",
        "timestamp": 1571762871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@Mateusz Miku≈Ça</span> thank you for all your work reducing the examples and tracking this down too!</p>",
        "id": 178933326,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571907956
    },
    {
        "content": "<p>That <code>packed_simd</code> bug has been opened for a long time, and now we can finally close it!</p>",
        "id": 178933377,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571907971
    }
]