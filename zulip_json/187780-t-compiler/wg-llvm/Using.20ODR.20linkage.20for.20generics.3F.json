[
    {
        "content": "<p>When I recently looked at the v0 name mangling scheme, I was confused why generics had a suffix that is not based on the crate that defined the generic, but the one that instantiated it, because that makes using ODR linkage to avoid duplicate function definitions in the final binary impossible due to different symbol names.  I then looked through the code and noticed that ODR linkage is gone. We used to use ODR linkage for generics when codegen units were introduced, but it seems to have been removed when incremental compilation has been introduced. Is that because there were problems that completely prohibit ODR linkage in the context of incremental compilation, or was it just the easier approach at the time? After all, the old name mangling scheme made ODR across crates impossible as well, but I had hoped that the new one would allow for it.</p>",
        "id": 185580208,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1578996147
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> ^</p>",
        "id": 185615386,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579021109
    },
    {
        "content": "<p>I don't think there are conceptual reasons for not using ODR linkage. If I remember correctly the reasons we removed it were:</p>\n<ul>\n<li>The MingW toolchain had problems with it </li>\n<li>LLVM was less aggressive about optimizing some things</li>\n<li>It's simpler to only have two kinds of linkage instead of three</li>\n</ul>\n<p>However, that was a long time ago (2016?) and those reasons might not be valid anymore. In fact, I hoped that I or someone else would look into reenabling ODR linkage in the first half of this year. It would make some things easier to implement and it might reduce code size (maybe even compile times?)</p>\n<p>Questions that would need clarification:</p>\n<ul>\n<li>Does ODR linkage adversely affect runtime performance?</li>\n<li>Would we use \"available_externally\" linkage too?</li>\n<li>Is ODR linkage well enough supported on all relevant platforms? (I'd hate having to keep around the current logic for having copies of the same code)</li>\n</ul>\n<p>The new mangling scheme supports those \"instantiating crate\" suffixes because the compiler currently needs them. But the suffixes could just be omitted.</p>",
        "id": 185684613,
        "sender_full_name": "mw",
        "timestamp": 1579083400
    },
    {
        "content": "<p>Looking back at some old issues, the MingW issue seems to be related specifically to the use of weak symbols. I'm wondering why weak_odr rather than linkonce_odr was used at the time.</p>",
        "id": 198527937,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1590227619
    },
    {
        "content": "<blockquote>\n<ul>\n<li>Does ODR linkage adversely affect runtime performance?</li>\n</ul>\n</blockquote>\n<p>All of {LinkOnce,Weak}{Any,ODR} block some interprocedural analyses and optimizations for reasons described here <a href=\"https://www.playingwithpointers.com/blog/ipo-and-derefinement.html\">https://www.playingwithpointers.com/blog/ipo-and-derefinement.html</a><br>\nIf you want to know what it affects exactly in LLVM, <code>GlobalValue</code> has helper methods <code>hasExactDefinition</code> / <code>isDefinitionExact</code> which return false for those cases and ought to be used whenever this is relevant.</p>",
        "id": 198528982,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1590229504
    },
    {
        "content": "<p>Thanks for the reference, that's pretty unfortunate.</p>",
        "id": 198529491,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1590230360
    },
    {
        "content": "<p>Binutils (AS and LD BFD) are very buggy when it comes to weak symbols on MinGW. Clang doesn't yet allow weak symbols for MinGW (turns them into global symbols) but if you force it things seem to work just fine when using LLD.<br>\nEven more, LLD can propely link objects with weak symbols created by GCC + Binutils AS.</p>",
        "id": 198531550,
        "sender_full_name": "mati865",
        "timestamp": 1590234220
    },
    {
        "content": "<p>Over 11 years old open issue: <a href=\"https://sourceware.org/bugzilla/show_bug.cgi?id=9687\">https://sourceware.org/bugzilla/show_bug.cgi?id=9687</a></p>",
        "id": 198532092,
        "sender_full_name": "mati865",
        "timestamp": 1590235310
    },
    {
        "content": "<p>Weak symbols really only work on ELF.</p>",
        "id": 198580319,
        "sender_full_name": "Amanieu",
        "timestamp": 1590322075
    },
    {
        "content": "<p>weak_odr was used because back then (not sure if that would still be the case), the symbol might otherwise be optimized away, while other compilation units still depend on it, because the optimizer doesn't know about the other compilation units</p>",
        "id": 198661567,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1590408947
    }
]