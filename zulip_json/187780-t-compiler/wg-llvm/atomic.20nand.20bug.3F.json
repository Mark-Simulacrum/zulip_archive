[
    {
        "content": "<p>I was looking at how LLVM implements atomic nand to copy it to cg_clif. I noticed the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">AtomicUsize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">fetch_nand</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">SeqCst</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">playground:</span><span class=\"err\">:</span><span class=\"nl\">foo:</span>\n    <span class=\"nf\">movq</span>    <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span> <span class=\"nv\">%rax</span>\n\n<span class=\"nl\">.LBB0_1:</span>\n    <span class=\"nf\">movl</span>    <span class=\"nv\">%eax</span><span class=\"p\">,</span> <span class=\"nv\">%ecx</span>\n    <span class=\"nf\">notl</span>    <span class=\"nv\">%ecx</span>\n    <span class=\"nf\">orq</span> <span class=\"no\">$-43</span><span class=\"p\">,</span> <span class=\"nv\">%rcx</span>\n    <span class=\"na\">lock</span>        <span class=\"nf\">cmpxchgq</span>    <span class=\"nv\">%rcx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">)</span>\n    <span class=\"nf\">jne</span> <span class=\"no\">.LBB0_1</span>\n    <span class=\"nf\">retq</span>\n</code></pre></div>\n<p>It first loads an 8 byte value and then uses two 4 byte operations which would set the most significant four bytes to zero. I don't think this is correct.</p>",
        "id": 225977859,
        "sender_full_name": "bjorn3",
        "timestamp": 1613043318
    },
    {
        "content": "<p><code>orq $-43, %rcx</code> sets bits in upper part to 1</p>",
        "id": 225984349,
        "sender_full_name": "tm",
        "timestamp": 1613047530
    },
    {
        "content": "<p>But these bits shouldn't always be 1.</p>",
        "id": 225984455,
        "sender_full_name": "bjorn3",
        "timestamp": 1613047592
    },
    {
        "content": "<p>For NAND and constant 42?</p>",
        "id": 225984501,
        "sender_full_name": "tm",
        "timestamp": 1613047626
    },
    {
        "content": "<p>Ah, I get it now.</p>",
        "id": 225984548,
        "sender_full_name": "bjorn3",
        "timestamp": 1613047669
    }
]