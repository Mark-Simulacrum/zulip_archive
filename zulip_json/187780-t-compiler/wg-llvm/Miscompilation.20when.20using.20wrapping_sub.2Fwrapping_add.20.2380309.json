[
    {
        "content": "<p>Hmm, is it valid to gepi from a pointer that is outside of its objects bounds? Like for instance:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nv\">%x</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i32</span>\n<span class=\"nv\">%outside</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i32</span><span class=\"p\">*</span> <span class=\"nv\">%x</span><span class=\"p\">,</span> <span class=\"m\">-1</span> <span class=\"c\">; out of bounds now</span>\n<span class=\"nv\">%backinside</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i32</span><span class=\"p\">*</span> <span class=\"nv\">%outside</span><span class=\"p\">,</span> <span class=\"m\">1</span> <span class=\"c\">; back inside the object</span>\n</code></pre></div>",
        "id": 220923084,
        "sender_full_name": "nagisa",
        "timestamp": 1608905432
    },
    {
        "content": "<p>Looks like not.</p>",
        "id": 220923417,
        "sender_full_name": "nagisa",
        "timestamp": 1608906065
    },
    {
        "content": "<p>Its literally the first rule:</p>\n<blockquote>\n<p>If the inbounds keyword is present, the result value of the getelementptr is a poison value if one of the following rules is violated:</p>\n<ul>\n<li>The base pointer has an in bounds address of an allocated object, which means that it points into an allocated object, or to its end.</li>\n</ul>\n</blockquote>",
        "id": 220923432,
        "sender_full_name": "nagisa",
        "timestamp": 1608906101
    },
    {
        "content": "<p>yeah, <code>gepi</code> means both the old and new ptr (before and after the offset) need to be in-bounds of the same allocation</p>",
        "id": 221211924,
        "sender_full_name": "RalfJ",
        "timestamp": 1609334559
    },
    {
        "content": "<p>or, equivalently (and this formulation took me a while to define): the memory region <code>[min(old, new), offset)</code> needs to be dereferencable</p>",
        "id": 221211947,
        "sender_full_name": "RalfJ",
        "timestamp": 1609334595
    },
    {
        "content": "<p>FWIW I also submitted <a href=\"https://reviews.llvm.org/D93820\">https://reviews.llvm.org/D93820</a> to fix the problematic fold.</p>",
        "id": 221296788,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1609428732
    },
    {
        "content": "<p>Not going to fight that fight though. Nuno doesn't seem to understand that inbounds and provenance have absolutely no relation to each other. Not the first time I've been talking to a wall when it comes to bugs in Alive2.</p>",
        "id": 221297064,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1609429049
    },
    {
        "content": "<p>So, it seems to me that there two orthogonal issues to be solved here.</p>",
        "id": 221304465,
        "sender_full_name": "nagisa",
        "timestamp": 1609435721
    },
    {
        "content": "<p>one is that GEPi is potentially producing nulls which alive claims is fine</p>",
        "id": 221304481,
        "sender_full_name": "nagisa",
        "timestamp": 1609435734
    },
    {
        "content": "<p>and then there's <a href=\"https://alive2.llvm.org/ce/z/mbs9Ue\">https://alive2.llvm.org/ce/z/mbs9Ue</a> which is our bug and even alive claims is incorrect.</p>",
        "id": 221304576,
        "sender_full_name": "nagisa",
        "timestamp": 1609435817
    },
    {
        "content": "<p>Sorry, <a href=\"https://alive2.llvm.org/ce/z/sw3FZk\">https://alive2.llvm.org/ce/z/sw3FZk</a></p>",
        "id": 221304674,
        "sender_full_name": "nagisa",
        "timestamp": 1609435940
    },
    {
        "content": "<p>I think those two issues could be fixed independently</p>",
        "id": 221304686,
        "sender_full_name": "nagisa",
        "timestamp": 1609435962
    },
    {
        "content": "<p>fixing gep case seems like a slam dunk</p>",
        "id": 221304699,
        "sender_full_name": "nagisa",
        "timestamp": 1609435978
    },
    {
        "content": "<p>gepi seems less clear-cut</p>",
        "id": 221304705,
        "sender_full_name": "nagisa",
        "timestamp": 1609435987
    },
    {
        "content": "<p>I also wonder if the diff you made shouldn't be adding the <code>gep (gep p, 0-p), p</code> test case as a regression test.</p>",
        "id": 221304929,
        "sender_full_name": "nagisa",
        "timestamp": 1609436173
    },
    {
        "content": "<p>make it'd make it clearer at that point that it is fixing an actually buggy transformation and gepi cases are just potentially negatively affected.</p>",
        "id": 221304967,
        "sender_full_name": "nagisa",
        "timestamp": 1609436226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133224\">Nikita Popov</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Miscompilation.20when.20using.20wrapping_sub.2Fwrapping_add.20.2380309/near/221297064\">said</a>:</p>\n<blockquote>\n<p>Not going to fight that fight though. Nuno doesn't seem to understand that inbounds and provenance have absolutely no relation to each other. Not the first time I've been talking to a wall when it comes to bugs in Alive2.</p>\n</blockquote>\n<p>Nuno is a coauthor on the twinsem paper I keep citing, so I am surprised by this... I'll have to look into the review</p>",
        "id": 221359756,
        "sender_full_name": "RalfJ",
        "timestamp": 1609521037
    },
    {
        "content": "<p>also, GEPi and inbounds are indeed related IMO -- inbounds means that the old and new ptr are in the same allocation; provenance indicates (in some cases at least) which allocation that should be</p>",
        "id": 221359772,
        "sender_full_name": "RalfJ",
        "timestamp": 1609521111
    },
    {
        "content": "<p>is the disagreement about these two examples?</p>\n<blockquote>\n<p>Alive claims that this code has UB due to use of gep inbounds: <a href=\"https://alive2.llvm.org/ce/z/zTctIR\">https://alive2.llvm.org/ce/z/zTctIR</a> At the same time, the gep inbounds itself is not poison: <a href=\"https://alive2.llvm.org/ce/z/wxGGyu\">https://alive2.llvm.org/ce/z/wxGGyu</a> That makes it looks like Alive also constrains provenance based on gep inbounds, not just the value of the pointer.</p>\n</blockquote>\n<p>Note that <a href=\"https://people.mpi-sws.org/~jung/twinsem/twinsem.pdf\">in our paper</a> GEPi that violates the bounds is <em>not always</em> <code>poison</code>. this is necessary to keep GEPi a pure instruction that can be moved around malloc/free. we cannot check \"what is the size of this memory allocation\", so instead the pointer keeps track  (in its provenance) of the offsets that were claimed to be \"inbounds\" through GEPi. only when the actual load/store happens, are all these offsets checked to be inbounds.</p>",
        "id": 221360121,
        "sender_full_name": "RalfJ",
        "timestamp": 1609521756
    },
    {
        "content": "<p>that would explain why the GEPi does not return poison, but the load is still UB</p>",
        "id": 221360124,
        "sender_full_name": "RalfJ",
        "timestamp": 1609521770
    },
    {
        "content": "<p>that said, I have no idea which exact notion of provenance, and which exact model for GEPi, Alive2 is using</p>",
        "id": 221360131,
        "sender_full_name": "RalfJ",
        "timestamp": 1609521791
    },
    {
        "content": "<p>sadly, the LLVM LangRef (\"GEPi returns poison on out-of-bounds input or output\") is fundamentally incompatible with optimizations LLVM is performing (moving GEPi across malloc/free), hence the actual, precise semantics are more complicated.</p>",
        "id": 221360137,
        "sender_full_name": "RalfJ",
        "timestamp": 1609521823
    }
]