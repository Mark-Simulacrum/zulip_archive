[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> mentioned <a href=\"https://bugs.llvm.org/show_bug.cgi?id=38146\" target=\"_blank\" title=\"https://bugs.llvm.org/show_bug.cgi?id=38146\">https://bugs.llvm.org/show_bug.cgi?id=38146</a> to me a while ago as an upstream LLVM bug that could improve <code>Range::step_by</code> performance</p>",
        "id": 159761206,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551484947
    },
    {
        "content": "<p>So would it fall within the goals of this working group?</p>",
        "id": 159761350,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551485051
    },
    {
        "content": "<p>yes.</p>",
        "id": 159767964,
        "sender_full_name": "nagisa",
        "timestamp": 1551489294
    },
    {
        "content": "<p>I believe that one is already resolved by the switch to the usub.add intrinsics, as far as <code>Range::step_by</code> is concerned.</p>",
        "id": 159794862,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1551531761
    },
    {
        "content": "<p>Though looking at the code it's not clear to me where it would be relevant. In any case, it would be good to have that fold.</p>",
        "id": 159795172,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1551532297
    },
    {
        "content": "<p>If you're interested in doing this, the place to implement it would be around <a href=\"https://github.com/llvm-mirror/llvm/blob/master/lib/Transforms/InstCombine/InstCombineCalls.cpp#L2019\" target=\"_blank\" title=\"https://github.com/llvm-mirror/llvm/blob/master/lib/Transforms/InstCombine/InstCombineCalls.cpp#L2019\">https://github.com/llvm-mirror/llvm/blob/master/lib/Transforms/InstCombine/InstCombineCalls.cpp#L2019</a>.</p>",
        "id": 159795311,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1551532447
    },
    {
        "content": "<p><del>This may have actually already been fixed.</del><br>\nEDIT: nvm it was a poorly written test</p>",
        "id": 159807665,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551548962
    },
    {
        "content": "<p>I've got the following to pass <code>llvm-lit</code>, but I've got some serious cleanup to do.</p>\n<div class=\"codehilite\"><pre><span></span>; RUN: opt &lt; %s -instcombine -S | FileCheck %s\n\ndeclare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32)\n\ndefine { i32, i1 } @fold_uadd_with_overflow(i32) {\n  ; CHECK-Label: @fold_add_with_overflow\n  ; CHECK:       %2 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %0, i32 20)\n  ; CHECK-NEXT:  ret { i32, i1 } %2\n  %2 = add nuw i32 %0, 7\n  %3 = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %2, i32 13)\n  ret { i32, i1 } %3\n}\n</pre></div>",
        "id": 159811249,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551554927
    },
    {
        "content": "<p>In theory I think we could tackle <code>(s|u)mul</code> and <code>(s|u)sub</code>, but I'm super new to LLVM, so I'd like to keep the scope as small as possible</p>",
        "id": 159811277,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551554997
    },
    {
        "content": "<p>So I'll just stick to <code>(s|u)add</code></p>",
        "id": 159811331,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551555013
    },
    {
        "content": "<blockquote>\n<p>I'd like to keep the scope as small as possible</p>\n</blockquote>\n<p>thats what LLVM people prefer either way</p>",
        "id": 159811434,
        "sender_full_name": "nagisa",
        "timestamp": 1551555189
    },
    {
        "content": "<p><a href=\"https://reviews.llvm.org/D58881\" target=\"_blank\" title=\"https://reviews.llvm.org/D58881\">https://reviews.llvm.org/D58881</a></p>",
        "id": 159826172,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551579858
    },
    {
        "content": "<p>Decided to just stick to <code>sadd.with.overflow</code>. I'll submit a follow-up for <code>uadd.with.overflow</code></p>",
        "id": 159826181,
        "sender_full_name": "dlrobertson",
        "timestamp": 1551579901
    },
    {
        "content": "<p>I think there's a whole series of potential work related to the overflow intrinsics.  For example, it seems like LLVM doesn't know that a non-overflowing multiplication is a multiple of its operands: <a href=\"https://rust.godbolt.org/z/dNB2xK\" target=\"_blank\" title=\"https://rust.godbolt.org/z/dNB2xK\">https://rust.godbolt.org/z/dNB2xK</a></p>",
        "id": 159887591,
        "sender_full_name": "scottmcm",
        "timestamp": 1551676130
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> These kind of optimizations are pretty hard to do, because they only apply in code conditioned on the overflow check. That's not a check that can be performed in InstCombine. There's really no good place where such an optimization can go right now.</p>",
        "id": 159897700,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1551691197
    },
    {
        "content": "<p>I think InstCombine does these kinds of optimizations (not for overflow but for comparisons) in some really primitive fashion, like only if the condition is directly on the only predecessor block. Anything else would be too expensive.</p>",
        "id": 159897815,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1551691299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> Ah, so basically anything behind control flow (as opposed to direct SSA use/defs) is impractical, basically?  Makes sense; thanks.</p>",
        "id": 160079885,
        "sender_full_name": "scottmcm",
        "timestamp": 1551864359
    },
    {
        "content": "<p>Status update on sadd.with.overflow: <a href=\"https://reviews.llvm.org/D58881\" target=\"_blank\" title=\"https://reviews.llvm.org/D58881\">https://reviews.llvm.org/D58881</a> has landed and <span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> has submitted a followup in <a href=\"https://reviews.llvm.org/D59071\" target=\"_blank\" title=\"https://reviews.llvm.org/D59071\">https://reviews.llvm.org/D59071</a>. I'm trying to lay some groundwork to turn this into a more general overflow check optimization.</p>",
        "id": 160435574,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1552256865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> awesome work!</p>",
        "id": 160442592,
        "sender_full_name": "dlrobertson",
        "timestamp": 1552266614
    },
    {
        "content": "<p>Still trying to wrap my head around it a bit, but I think I see where you're going with it.</p>",
        "id": 160443420,
        "sender_full_name": "dlrobertson",
        "timestamp": 1552267440
    },
    {
        "content": "<p>Are there good docs on how the internals of LLVM work? E.g. the rustc guide or even just a few good descriptions of ValueTracking, instcombine, instsimplify, etc?</p>",
        "id": 160443654,
        "sender_full_name": "dlrobertson",
        "timestamp": 1552267638
    },
    {
        "content": "<p>As so often, I don't think there's any good docs apart from the language reference and (somewhat less useful) the programmer manual.</p>",
        "id": 160949943,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1552739672
    },
    {
        "content": "<p>Mostly a matter of looking at what the code around you is doing and trying to copy it :) As to the ones you mentioned, the important distinction is that ConstantFolding deals with folding instructions that have only constant or undef operands, InstSimplify deals with simplifications that don't create new instructions and are relatively cheap (no recursive analysis) and InstCombine does anything else, with the restriction that it should never increase instruction count, to avoid looping. ValueTracking are helper utilities to determine various properties of instructions (known bits, known sign bits, etc), often in a recursive fashion.</p>",
        "id": 160950071,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1552739923
    },
    {
        "content": "<p>ValueTracking is a bit of a wart (imho) because the proper way to do this would be to sparsely propagate the information with a fixed point algorithm, but the recursive computations are much easier to throw into random places in the compiler. The end effect is that this information is computed again and again and a sizable chunk of compile time may be spent just in known bits calculations.</p>",
        "id": 160950144,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1552740096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> In any case, I ended up hijacking the saddo mixed signed patch for the general overflow optimization... In the meantime, would you like to extend the add nsw + saddo changes to the other cases? The add nuw + uaddo case should be fairly simple and integrate well into your existing code.</p>",
        "id": 160950339,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1552740441
    },
    {
        "content": "<p>The sub case is tricky, because LLVM canonicalizes \"sub %x, C\" to \"add %x, -C\" and looses the nuw flag while doing so. For the ssubo case, I think a good way to handle it is to also canonicalize ssubo(X, C) to saddo(X, -C), which means that the existing saddo code will already handle it. (It also has the additional advantage that things like CSE and GVN will know that ssubo(X, C) and saddo(X, -C) are the same.)</p>",
        "id": 160950399,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1552740540
    },
    {
        "content": "<p>I don't think there's anything that can be done in the usubo case, the necessary nuw information is lost during canonicalization, so no way to get that back...</p>",
        "id": 160950481,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1552740691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> Thanks for the info! I read through the lang ref a few years ago, but it might be worthwhile to skim through it again.</p>\n<blockquote>\n<p>I ended up hijacking the saddo mixed signed patch for the general overflow optimization</p>\n</blockquote>\n<p>Np. I'll move on to uaddo.</p>\n<blockquote>\n<p>I think a good way to handle it is to also canonicalize ssubo(X, C) to saddo(X, -C)</p>\n</blockquote>\n<p>Interesting. I'll try it out</p>",
        "id": 160951987,
        "sender_full_name": "dlrobertson",
        "timestamp": 1552743329
    },
    {
        "content": "<blockquote>\n<p>The sub case is tricky, because LLVM canonicalizes \"sub %x, C\" to \"add %x, -C\" and looses the nuw flag while doing so. For the ssubo case,</p>\n</blockquote>\n<p>Ah! This makes sense now. I was wondering why <code>saddo (X -nsw C0), C1 -&gt; saddo X, C0 - C1</code> \"just works\"</p>",
        "id": 161244751,
        "sender_full_name": "dlrobertson",
        "timestamp": 1553087174
    },
    {
        "content": "<p>Is it worth writing a test case for folding <code>sub nsw</code> + <code>saddo</code>? Or is this sufficiently covered by the tests for <code>sub %x, C -&gt; add %x, -C</code> and the current <code>saddo</code> tests?</p>",
        "id": 161244927,
        "sender_full_name": "dlrobertson",
        "timestamp": 1553087301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> Well, adding it certainly won't hurt ;) Might also test something fancy like sub nsw %x, SignedMin, which will likely not work (at a guess this is canonicalized to add %x, SignedMin without the nsw flag).</p>",
        "id": 161255094,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1553093947
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I'll bundle it in with the NFC commit with the baseline tests for <code>ssubo X, C -&gt; saddo X, -C</code></p>",
        "id": 161255482,
        "sender_full_name": "dlrobertson",
        "timestamp": 1553094176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> sorry for being absent recently... I just started a new job... Should be around a bit more again. I'm updating the ssubo diff now</p>",
        "id": 162909301,
        "sender_full_name": "dlrobertson",
        "timestamp": 1554816139
    },
    {
        "content": "<p>Okay, the ssubo canonicalization has landed, the ConstantRange based overflow checks have landed and I've just added some missing AlwaysOverflows support. With that, I think we have all the missing InstCombine bits for with.overflow intrinsics.</p>",
        "id": 163020913,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554914039
    },
    {
        "content": "<p>I think Rust should consider moving away from uadd.with.overflow and usub.with.overflow though. These have simple IR replacements, which I suspect to optimize better than the intrinsics.</p>",
        "id": 163021032,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554914128
    },
    {
        "content": "<p>LLVM can form these intrinsics during CodeGenPrepare if profitable, but I think there's relatively little benefit to using them in IR and a lot of drawbacks.</p>",
        "id": 163021189,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554914230
    },
    {
        "content": "<p>what are the \"simple IR replacements\"?</p>",
        "id": 163038086,
        "sender_full_name": "nagisa",
        "timestamp": 1554924909
    },
    {
        "content": "<p>doing stuff on a larger <code>iX</code>?</p>",
        "id": 163038104,
        "sender_full_name": "nagisa",
        "timestamp": 1554924930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> The canonical patterns are <code>%add = add iN %x, %y; %ov = icmp ult iN %add, %x</code> and <code>%sub = sub iN %x, %y; %ov = icmp ult %x, %y</code>.</p>",
        "id": 163050324,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554933709
    },
    {
        "content": "<p>seems fine to me?</p>",
        "id": 163091157,
        "sender_full_name": "nagisa",
        "timestamp": 1554982249
    },
    {
        "content": "<p>feels like an easy change to make and test</p>",
        "id": 163091168,
        "sender_full_name": "nagisa",
        "timestamp": 1554982261
    },
    {
        "content": "<p>But this does not generalise to multiplication, say.</p>",
        "id": 163091295,
        "sender_full_name": "nagisa",
        "timestamp": 1554982397
    },
    {
        "content": "<p>Is LLVM really able to figure out that it should just look at the overflow flag of the operation instead of doing the comparison on all the relevant architectures?</p>",
        "id": 163091344,
        "sender_full_name": "nagisa",
        "timestamp": 1554982443
    },
    {
        "content": "<p>yes, this is only for uadd and usub, everything else has more complicated expansions and it makes sense to use the overflow intrinsics for that.</p>",
        "id": 163114512,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554999472
    },
    {
        "content": "<p>uadd.with.overflow and usub.with.overflow are formed during CGP in a target-independent way, though there are TLI hooks to opt out</p>",
        "id": 163114643,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554999555
    },
    {
        "content": "<p>Though having checked just now, it looks like the usubo formation is disabled by default and only x86 opts in.</p>",
        "id": 163114824,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554999687
    },
    {
        "content": "<p>what about i128/u128 on, say 32-bit targets?</p>",
        "id": 163114936,
        "sender_full_name": "nagisa",
        "timestamp": 1554999754
    },
    {
        "content": "<p>I recall changing expansion for uaddo i128 to be better in LLVM… I think.</p>",
        "id": 163115023,
        "sender_full_name": "nagisa",
        "timestamp": 1554999817
    },
    {
        "content": "<p>ah no that was umulo</p>",
        "id": 163115040,
        "sender_full_name": "nagisa",
        "timestamp": 1554999834
    },
    {
        "content": "<p>I guess it works then.</p>",
        "id": 163115089,
        "sender_full_name": "nagisa",
        "timestamp": 1554999846
    },
    {
        "content": "<p>It's only going to be done if uaddo/usubo are actually non-expand. If they aren't, it will be expanded back to add/sub + setcc anyway.</p>",
        "id": 163115109,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554999872
    },
    {
        "content": "<p>if anybody is interested in making change to rust, I could tell where to look, it is a fairly easy change that can be done entirely in the library to test the waters.</p>",
        "id": 163115113,
        "sender_full_name": "nagisa",
        "timestamp": 1554999876
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libcore/num/mod.rs#L1331\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libcore/num/mod.rs#L1331\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libcore/num/mod.rs#L1331</a> and friends</p>",
        "id": 163115251,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1554999970
    },
    {
        "content": "<p>Might be hard to get actual perf data though</p>",
        "id": 163115297,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1555000018
    },
    {
        "content": "<blockquote>\n<p>With that, I think we have all the missing InstCombine bits for with.overflow intrinsics.</p>\n</blockquote>\n<p>Nice!</p>",
        "id": 163139599,
        "sender_full_name": "dlrobertson",
        "timestamp": 1555018867
    },
    {
        "content": "<p>For the record, <a href=\"https://reviews.llvm.org/D60650\" target=\"_blank\" title=\"https://reviews.llvm.org/D60650\">https://reviews.llvm.org/D60650</a> and <a href=\"https://reviews.llvm.org/D60656\" target=\"_blank\" title=\"https://reviews.llvm.org/D60656\">https://reviews.llvm.org/D60656</a> improve with.overflow handling in LVI/CVP, which is where LLVM performs non-local range based optimizations.</p>",
        "id": 163666742,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1555604877
    }
]