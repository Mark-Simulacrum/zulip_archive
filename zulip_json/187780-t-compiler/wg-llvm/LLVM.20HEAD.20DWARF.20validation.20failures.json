[
    {
        "content": "<p>\"Fun\" Rust integration failure at HEAD: <a href=\"https://github.com/llvm/llvm-project/commit/7c3fa5278544d3830838148ac912cc4b927d1b5b\">https://github.com/llvm/llvm-project/commit/7c3fa5278544d3830838148ac912cc4b927d1b5b</a> broke a handful of tests (<a href=\"https://buildkite.com/llvm-project/rust-llvm-integrate-prototype/builds/5854#e1a004b6-7437-4d10-8ea9-410fa054fe35\">https://buildkite.com/llvm-project/rust-llvm-integrate-prototype/builds/5854#e1a004b6-7437-4d10-8ea9-410fa054fe35</a>) for Rust code, mercifully covered by some codegen tests. Anyone have any idea if this requires rust codegen changes to make LLVM happy, or is the validator encoding too many C++ assumptions?</p>",
        "id": 260059722,
        "sender_full_name": "durin42",
        "timestamp": 1635888159
    },
    {
        "content": "<p>what is an \"ODR\" type?</p>",
        "id": 260060558,
        "sender_full_name": "Jubilee",
        "timestamp": 1635888654
    },
    {
        "content": "<p>I think it's a one-definition-rule thing? That's the only ODR I know in C++</p>",
        "id": 260060836,
        "sender_full_name": "durin42",
        "timestamp": 1635888824
    },
    {
        "content": "<p>ah yeah.</p>\n<blockquote>\n<p>linkonce_odr, weak_odr<br>\n   Some languages allow differing globals to be merged, such as two functions with different semantics. Other languages, such as C++, ensure that only equivalent globals are ever merged (the “one definition rule” — “ODR”). Such languages can use the linkonce_odr and weak_odr linkage types to indicate that the global will only be merged with equivalent globals. These linkage types are otherwise the same as their non-odr versions.</p>\n</blockquote>",
        "id": 260060946,
        "sender_full_name": "Jubilee",
        "timestamp": 1635888885
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>First Error</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<blockquote>\n<hr>\n<p>enum type is not a scope; check enum type ODR violation<br>\n!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: \"Result\", scope: !46, file: !2, baseType: !48, size: 8, align: 8, flags: DIFlagEnumClass, elements: !49)<br>\n!9112 = distinct !DISubprogram(name: \"expect&lt;(), core::fmt::Error&gt;\", linkageName: \"_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26f9fa8a8ad40e5E\", scope: !45, file: !1564, line: 1252, type: !9113, scopeLine: 1252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, templateParams: !9122, retainedNodes: !9115)<br>\nenum type is not a scope; check enum type ODR violation<br>\n!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: \"Result\", scope: !46, file: !2, baseType: !48, size: 8, align: 8, flags: DIFlagEnumClass, elements: !49)<br>\n!9112 = distinct !DISubprogram(name: \"expect&lt;(), core::fmt::Error&gt;\", linkageName: \"_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26f9fa8a8ad40e5E\", scope: !45, file: !1564, line: 1252, type: !9113, scopeLine: 1252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, templateParams: !9122, retainedNodes: !9115)<br>\nLLVM ERROR: Broken module found, compilation aborted!</p>\n</blockquote>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Heavily Edited Head and Tail of Second Error</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<blockquote>\n<p>failed to decode compiler output as json:</p>\n<p>line:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"message\"</span><span class=\"p\">:</span><span class=\"s2\">\"`m` is ambiguous\"</span><span class=\"p\">,</span><span class=\"nt\">\"code\"</span><span class=\"p\">:{</span><span class=\"nt\">\"code\"</span><span class=\"p\">:</span><span class=\"s2\">\"E0659\"</span><span class=\"p\">,</span><span class=\"nt\">\"explanation\"</span><span class=\"p\">:</span><span class=\"s2\">\"An item usage is ambiguous.\\n\\nErroneous code example:\\n\\n```compile_fail,edition2018,E0659\\npub mod moon {\\n    pub fn foo() {}\\n}\\n\\npub mod earth {\\n    pub fn foo() {}\\n}\\n\\nmod collider {\\n    pub use crate::moon::*;\\n    pub use crate::earth::*;\\n}\\n\\nfn main() {\\n    crate::collider::foo(); // ERROR: `foo` is ambiguous\\n}\\n```\\n\\nThis error generally appears when two items with the same name are imported into\\na module. Here, the `foo` functions are imported and reexported from the\\n`collider` module and therefore, when we're using `collider::foo()`, both\\nfunctions collide.\\n\\nTo solve this error, the best solution is generally to keep the path before the\\nitem when using it. Example:\\n\\n```edition2018\\npub mod moon {\\n    pub fn foo() {}\\n}\\n\\npub mod earth {\\n    pub fn foo() {}\\n}\\n\\nmod collider {\\n    pub use crate::moon;\\n    pub use crate::earth;\\n}\\n\\nfn main() {\\n    crate::collider::moon::foo(); // ok!\\n    crate::collider::earth::foo(); // ok!\\n}\\n```\\n\"</span><span class=\"p\">},</span><span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"error\"</span>\n</code></pre></div>\n<p>output:</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"message\"</span><span class=\"p\">:</span><span class=\"s2\">\"`m` is ambiguous\"</span><span class=\"p\">,</span><span class=\"nt\">\"code\"</span><span class=\"p\">:{</span><span class=\"nt\">\"code\"</span><span class=\"p\">:</span><span class=\"s2\">\"E0659\"</span><span class=\"p\">,</span><span class=\"nt\">\"explanation\"</span><span class=\"p\">:</span><span class=\"s2\">\"An item usage is ambiguous.\\n\\nErroneous code example:\\n\\n```compile_fail,edition2018,E0659\\npub mod moon {\\n    pub fn foo() {}\\n}\\n\\npub mod earth {\\n    pub fn foo() {}\\n}\\n\\nmod collider {\\n    pub use crate::moon::*;\\n    pub use crate::earth::*;\\n}\\n\\nfn main() {\\n    crate::collider::foo(); // ERROR: `foo` is ambiguous\\n}\\n```\\n\\nThis error generally appears when two items with the same name are imported into\\na module. Here, the `foo` functions are imported and reexported from the\\n`collider` module and therefore, when we're using `collider::foo()`, both\\nfunctions collide.\\n\\nTo solve this error, the best solution is generally to keep the path before the\\nitem when using it. Example:\\n\\n```edition2018\\npub mod moon {\\n    pub fn foo() {}\\n}\\n\\npub mod earth {\\n    pub fn foo() {}\\n}\\n\\nmod collider {\\n    pub use crate::moon;\\n    pub use crate::earth;\\n}\\n\\nfn main() {\\n    crate::collider::moon::foo(); // ok!\\n    crate::collider::earth::foo(); // ok!\\n}\\n```\\n\"</span><span class=\"p\">},</span><span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span>\n<span class=\"p\">{</span><span class=\"nt\">\"message\"</span><span class=\"p\">:</span><span class=\"s2\">\"`m` is ambiguous\"</span><span class=\"p\">,</span><span class=\"nt\">\"code\"</span><span class=\"p\">:{</span><span class=\"nt\">\"code\"</span><span class=\"p\">:</span><span class=\"s2\">\"E0659\"</span><span class=\"p\">,</span><span class=\"nt\">\"explanation\"</span><span class=\"p\">:</span><span class=\"s2\">\"An item usage is ambiguous.\\n\\nErroneous code example:\\n\\n```compile_fail,edition2018,E0659\\npub mod moon {\\n    pub fn foo() {}\\n}\\n\\npub mod earth {\\n    pub fn foo() {}\\n}\\n\\nmod collider {\\n    pub use crate::moon::*;\\n    pub use crate::earth::*;\\n}\\n\\nfn main() {\\n    crate::collider::foo(); // ERROR: `foo` is ambiguous\\n}\\n```\\n\\nThis error generally appears when two items with the same name are imported into\\na module. Here, the `foo` functions are imported and reexported from the\\n`collider` module and therefore, when we're using `collider::foo()`, both\\nfunctions collide.\\n\\nTo solve this error, the best solution is generally to keep the path before the\\nitem when using it. Example:\\n\\n```edition2018\\npub mod moon {\\n    pub fn foo() {}\\n}\\n\\npub mod earth {\\n    pub fn foo() {}\\n}\\n\\nmod collider {\\n    pub use crate::moon;\\n    pub use crate::earth;\\n}\\n\\nfn main() {\\n    crate::collider::moon::foo(); // ok!\\n    crate::collider::earth::foo(); // ok!\\n}\\n```\\n\"</span><span class=\"p\">},</span><span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>( ...this is repeated SEVERAL times, with a lot of extra data midway. )</p>\n<div class=\"codehilite\" data-code-language=\"JSON\"><pre><span></span><code><span class=\"p\">{</span><span class=\"nt\">\"message\"</span><span class=\"p\">:</span><span class=\"s2\">\"aborting due to 8 previous errors\"</span><span class=\"p\">,</span><span class=\"nt\">\"code\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span><span class=\"nt\">\"spans\"</span><span class=\"p\">:[],</span><span class=\"nt\">\"children\"</span><span class=\"p\">:[],</span><span class=\"nt\">\"rendered\"</span><span class=\"p\">:</span><span class=\"s2\">\"error: aborting due to 8 previous errors\\n\\n\"</span><span class=\"p\">}</span>\n<span class=\"p\">{</span><span class=\"nt\">\"message\"</span><span class=\"p\">:</span><span class=\"s2\">\"For more information about this error, try `rustc --explain E0659`.\"</span><span class=\"p\">,</span><span class=\"nt\">\"code\"</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"failure-note\"</span><span class=\"p\">,</span><span class=\"nt\">\"spans\"</span><span class=\"p\">:[],</span><span class=\"nt\">\"children\"</span><span class=\"p\">:[],</span><span class=\"nt\">\"rendered\"</span><span class=\"p\">:</span><span class=\"err\">\"For more information about this error, try `rustc --explain E0659`.json</span>\n</code></pre></div>\n<p>thread '[ui] ui/macros/restricted-shadowing-legacy.rs' panicked at 'explicit panic', src/tools/compiletest/src/json.rs:121:21<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>\n<p>failures:<br>\n    [ui] ui/backtrace-debuginfo.rs<br>\n    [ui] ui/macros/restricted-shadowing-legacy.rs</p>\n<p>test result: FAILED. 12274 passed; 2 failed; 96 ignored; 0 measured; 0 filtered out; finished in 178.12s</p>\n<p>Some tests failed in compiletest suite=ui mode=ui host=x86_64-unknown-linux-gnu target=x86_64-unknown-linux-gnu</p>\n</blockquote>\n</div></div>",
        "id": 260062784,
        "sender_full_name": "Jubilee",
        "timestamp": 1635889958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316805\">@durin42</span> So my limited understanding of C++ says that this is going off the idea that an <code>enum</code> is not valid for scoping in C++, and this is applying a very C++ specific semantics to the relevant type. So, yes.</p>",
        "id": 260063087,
        "sender_full_name": "Jubilee",
        "timestamp": 1635890120
    },
    {
        "content": "<p>this diff conflates two different changes into one <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 260063845,
        "sender_full_name": "nagisa",
        "timestamp": 1635890483
    },
    {
        "content": "<p>Or rather, there are scoped enums in C++, but in Rust we don't have such a distinctly separate notion of scoped and unscoped, as far as I can discern. My references include<br>\n<a href=\"https://releases.llvm.org/13.0.0/docs/LangRef.html#linkage-types\">https://releases.llvm.org/13.0.0/docs/LangRef.html#linkage-types</a><br>\n<a href=\"https://en.cppreference.com/w/cpp/language/enum\">https://en.cppreference.com/w/cpp/language/enum</a></p>",
        "id": 260063881,
        "sender_full_name": "Jubilee",
        "timestamp": 1635890502
    },
    {
        "content": "<p>I don't see how the tag change could possibly affect rust at all, so its gonna be the verifier one.</p>",
        "id": 260063896,
        "sender_full_name": "nagisa",
        "timestamp": 1635890507
    },
    {
        "content": "<p>Yeah, that matches my limited understanding of C++ as well. Should we be bouncing into the phabricator revision and asking for a revert? or changing our IR somehow?</p>",
        "id": 260063926,
        "sender_full_name": "durin42",
        "timestamp": 1635890519
    },
    {
        "content": "<p>yeah, this looks like the notional \"culprit\":</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">Verifier::verifyODRTypeAsScopeOperand</span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MDNode</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">MD</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isa</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">MD</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dyn_cast_or_null</span><span class=\"o\">&lt;</span><span class=\"n\">DICompositeType</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">MD</span><span class=\"p\">).</span><span class=\"n\">getScope</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"c1\">// Of all the supported tags for DICompositeType(see visitDICompositeType)</span>\n<span class=\"w\">      </span><span class=\"c1\">// we know that enum type cannot be a scope.</span>\n<span class=\"w\">      </span><span class=\"n\">AssertDI</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">-&gt;</span><span class=\"n\">getTag</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">dwarf</span><span class=\"o\">::</span><span class=\"n\">DW_TAG_enumeration_type</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"s\">\"enum type is not a scope; check enum type ODR \"</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"s\">\"violation\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">N</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">MD</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 260064062,
        "sender_full_name": "Jubilee",
        "timestamp": 1635890587
    },
    {
        "content": "<p>Mmmmaayyybe we should be representing our enums as enum classes?<br>\nglancing at this: <a href=\"http://wiki.dwarfstd.org/index.php?title=C%2B%2B0x:_Strongly_typed_enumerations\">http://wiki.dwarfstd.org/index.php?title=C%2B%2B0x:_Strongly_typed_enumerations</a></p>",
        "id": 260064343,
        "sender_full_name": "Jubilee",
        "timestamp": 1635890723
    },
    {
        "content": "<p>(I'd have caught this sometime last week but stresses in real life came up, sorry about that)</p>",
        "id": 260064385,
        "sender_full_name": "durin42",
        "timestamp": 1635890744
    },
    {
        "content": "<p>We can certainly try. I wonder if that emits compatible code, that sounds a little spooky.</p>",
        "id": 260064484,
        "sender_full_name": "durin42",
        "timestamp": 1635890784
    },
    {
        "content": "<p>With that musing I am at the limit of my knowledge, intuition, scholarship, and diplomacy, so I can't actually speak to a course of action.</p>",
        "id": 260064851,
        "sender_full_name": "Jubilee",
        "timestamp": 1635890956
    },
    {
        "content": "<p>I'm trying to raise one of the notional subject matter experts at work, hopefully I have something to try tomorrow...</p>",
        "id": 260064909,
        "sender_full_name": "durin42",
        "timestamp": 1635891001
    },
    {
        "content": "<p>clang represents an enum class as a <code>DW_TAG_enumeration_type</code> as well.</p>",
        "id": 260064956,
        "sender_full_name": "nagisa",
        "timestamp": 1635891007
    },
    {
        "content": "<p>Thanks though, that was helpful.</p>",
        "id": 260064962,
        "sender_full_name": "durin42",
        "timestamp": 1635891011
    },
    {
        "content": "<p>and if its put into a namespace, it gets a <code>scope</code> too.</p>",
        "id": 260065058,
        "sender_full_name": "nagisa",
        "timestamp": 1635891071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it sounds like you don't think the enum class trick would help? is that correct?</p>",
        "id": 260065214,
        "sender_full_name": "durin42",
        "timestamp": 1635891148
    },
    {
        "content": "<p>I'm not sure there is a trick to be had, since enum class is already a enumeration_type DW_TAG.</p>",
        "id": 260065493,
        "sender_full_name": "nagisa",
        "timestamp": 1635891329
    },
    {
        "content": "<p>So wait, is this just an invalid change?</p>",
        "id": 260065627,
        "sender_full_name": "Jubilee",
        "timestamp": 1635891395
    },
    {
        "content": "<p>hm, can enum class have methods? first stack overflow hit says no.</p>",
        "id": 260066288,
        "sender_full_name": "nagisa",
        "timestamp": 1635891816
    },
    {
        "content": "<p>the way we use scopes here is that a method on a <code>enum</code> (<code>expect</code>) is scoped to the enum type itself (which it is).</p>",
        "id": 260066359,
        "sender_full_name": "nagisa",
        "timestamp": 1635891844
    },
    {
        "content": "<p><a href=\"https://reviews.llvm.org/D111770#3081290\">https://reviews.llvm.org/D111770#3081290</a> seems to raise a fairly related concern here.</p>",
        "id": 260066434,
        "sender_full_name": "nagisa",
        "timestamp": 1635891892
    },
    {
        "content": "<p>and using <code>scope</code>s like this is fairly well established, so I don't see why there would be a need for LLVM to go out of their way to prevent this specifically for enumeration types. I would say that this warrants a revert and a llvm-dev thread if such a check wants to be reintroduced.</p>",
        "id": 260066605,
        "sender_full_name": "nagisa",
        "timestamp": 1635891993
    },
    {
        "content": "<p>Oh, lol. Yes, I incorrectly assumed they can have methods. Guess not.</p>",
        "id": 260066838,
        "sender_full_name": "Jubilee",
        "timestamp": 1635892146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/LLVM.20HEAD.20DWARF.20validation.20failures/near/260066605\">said</a>:</p>\n<blockquote>\n<p>I would say that this warrants a revert and a llvm-dev thread if such a check wants to be reintroduced.</p>\n</blockquote>\n<p>do you want to bring it up or should I? you probably have a better handle on it, but I'm happy to try and negotiate it if you'd prefer</p>",
        "id": 260077800,
        "sender_full_name": "durin42",
        "timestamp": 1635900636
    },
    {
        "content": "<p>Just heard back from Blaikie, and he says it's clearly invalid, and we should send a patch to revert the validator part of the change and include a test case that explains why it's valid (maybe with some Rust sample code in a comment). So I'll tackle that tomorrow. Thanks!</p>",
        "id": 260078957,
        "sender_full_name": "durin42",
        "timestamp": 1635901691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316805\">@durin42</span> I'm currently trying to recover from a minor burnout and get some rest between jobs so I'm trying to avoid actively involving myself with software for a little while. I'll appreciate if you can handle it and if not please ping e.g. Nikita for help.</p>",
        "id": 260102579,
        "sender_full_name": "nagisa",
        "timestamp": 1635928784
    },
    {
        "content": "<p>I'm finally working on a fix for this (it's been a week for personal reasons), and I'm down to wanting to try and produce a useful LLVM IR testcase from Rust code, and I'm a little fuzzy on how I can anger this particular LLVM edge case. Anyone around that might have a sense of the magic dance to tick it off?</p>",
        "id": 260712502,
        "sender_full_name": "durin42",
        "timestamp": 1636402478
    },
    {
        "content": "<p>(Specifically: I'm having trouble coaxing rustc to emit something with a <code>DW_TAG_enumeration_type</code> in the IR, so I'm missing something.)</p>",
        "id": 260716883,
        "sender_full_name": "durin42",
        "timestamp": 1636404574
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">E</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"p\">...</span>\n<span class=\"nv nv-Anonymous\">!6</span> <span class=\"p\">=</span> <span class=\"nv\">!DICompositeType</span><span class=\"p\">(</span><span class=\"nl\">tag:</span> <span class=\"err\">DW_TAG_enumeration_</span><span class=\"k\">type</span><span class=\"p\">,</span> <span class=\"nl\">name:</span> <span class=\"s\">\"E\"</span><span class=\"p\">,</span> <span class=\"nl\">scope:</span> <span class=\"nv nv-Anonymous\">!8</span><span class=\"p\">,</span> <span class=\"nl\">file:</span> <span class=\"nv nv-Anonymous\">!7</span><span class=\"p\">,</span> <span class=\"nl\">baseType:</span> <span class=\"nv nv-Anonymous\">!9</span><span class=\"p\">,</span> <span class=\"nl\">size:</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nl\">align:</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nl\">flags:</span> <span class=\"err\">DIFlagEnumClass</span><span class=\"p\">,</span> <span class=\"nl\">elements:</span> <span class=\"nv nv-Anonymous\">!10</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n</code></pre></div>",
        "id": 260719016,
        "sender_full_name": "tm",
        "timestamp": 1636405579
    },
    {
        "content": "<p>How'd you generate that? I was trying to use compiler explorer and it's not giving me the goods, even with <code>--emit=llvm-ir -g -C no-prepopulate-passes</code> which seemed like it should work based on the one testcase in-tree</p>",
        "id": 260719351,
        "sender_full_name": "durin42",
        "timestamp": 1636405760
    },
    {
        "content": "<p>I generated that with <code>rustc --crate-type=lib a.rs --emit llvm-ir -g</code>.</p>",
        "id": 260719499,
        "sender_full_name": "tm",
        "timestamp": 1636405826
    },
    {
        "content": "<p>Huh, thanks. I wonder why compiler explorer hates me today.</p>",
        "id": 260720043,
        "sender_full_name": "durin42",
        "timestamp": 1636406161
    },
    {
        "content": "<p>You have to uncheck Filters -&gt; Directives</p>",
        "id": 260720621,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1636406487
    },
    {
        "content": "<p>Also do beware that compiler explorer cuts the output at 5000 lines or something and the metadata appears at the end of the file.</p>",
        "id": 260725341,
        "sender_full_name": "nagisa",
        "timestamp": 1636408956
    },
    {
        "content": "<p>traps everywhere, it seems! But I've got a <a href=\"https://github.com/durin42/llvm-project/commit/24fbc4ee225374e9cdde72fd0385b5f952e049f4\">patch drafted</a> and am running it by some LLVM folks that talked me through this at work. Hopefully have them on phabricator tomorrow.</p>",
        "id": 260725561,
        "sender_full_name": "durin42",
        "timestamp": 1636409056
    }
]