[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   Compiling panic_abort v0.0.0 (/Users/aleister/Code/rust/src/libpanic_abort)\nLLVM ERROR: arm64e LR authentication requires ptrauth\nerror: could not compile `panic_abort`.\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nLLVM ERROR: arm64e LR authentication requires ptrauth\nLLVM ERROR: arm64e LR authentication requires ptrauth\nerror: build failed\n</code></pre></div>",
        "id": 204420766,
        "sender_full_name": "aspen",
        "timestamp": 1595251138
    },
    {
        "content": "<p>wait crap wrong target lmao i'm dumb</p>",
        "id": 204421203,
        "sender_full_name": "aspen",
        "timestamp": 1595251389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204380137\">said</a>:</p>\n<blockquote>\n<p>As I mentioned earlier, I wouldn't expect there to be specific instructions in the IR (unless you had an <code>asm!</code> block)</p>\n</blockquote>\n<p>well,</p>",
        "id": 204433112,
        "sender_full_name": "aspen",
        "timestamp": 1595257201
    },
    {
        "content": "<h3>Operand Bundle</h3>\n<p>As a way to enforce CFI, function pointers used as indirect call targets are<br>\nsigned when materialized, and authenticated before calls.</p>\n<p>To prevent the intermediate, unauthenticated pointer from being exposed to<br>\nattackers (similar to <a href=\"#llvm-ptrauth-resign\"><code>llvm.ptrauth.resign</code></a>), the<br>\nrepresentation guarantees that the intermediate call target is never attackable<br>\n(e.g., by being spilled to memory), using the <code>ptrauth</code> operand bundle.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@f</span><span class=\"p\">(</span><span class=\"k\">void</span> <span class=\"p\">()*</span> <span class=\"nv\">%fp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"nv\">%fp</span><span class=\"p\">()</span> <span class=\"p\">[</span> <span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">(</span><span class=\"k\">i32</span> <span class=\"p\">&lt;</span><span class=\"err\">key</span><span class=\"p\">&gt;,</span> <span class=\"k\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">data</span><span class=\"p\">&gt;)</span> <span class=\"p\">]</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>is functionally equivalent to:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@f</span><span class=\"p\">(</span><span class=\"k\">void</span> <span class=\"p\">()*</span> <span class=\"nv\">%fp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nv\">%fp_i</span> <span class=\"p\">=</span> <span class=\"k\">ptrtoint</span> <span class=\"k\">void</span> <span class=\"p\">()*</span> <span class=\"nv\">%fp</span> <span class=\"k\">to</span> <span class=\"k\">i64</span>\n  <span class=\"nv\">%fp_auth</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">i64</span> <span class=\"vg\">@llvm.ptrauth.auth.i64</span><span class=\"p\">(</span><span class=\"k\">i64</span> <span class=\"nv\">%fp_i</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"p\">&lt;</span><span class=\"err\">key</span><span class=\"p\">&gt;,</span> <span class=\"k\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">data</span><span class=\"p\">&gt;)</span>\n  <span class=\"nv\">%fp_auth_p</span> <span class=\"p\">=</span> <span class=\"k\">inttoptr</span> <span class=\"k\">i64</span> <span class=\"nv\">%fp_auth</span> <span class=\"k\">to</span> <span class=\"k\">void</span> <span class=\"p\">()*</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"nv\">%fp_auth_p</span><span class=\"p\">()</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 204433163,
        "sender_full_name": "aspen",
        "timestamp": 1595257205
    },
    {
        "content": "<p>that's from PointerAuth.md</p>",
        "id": 204433183,
        "sender_full_name": "aspen",
        "timestamp": 1595257214
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>",
        "id": 204433210,
        "sender_full_name": "aspen",
        "timestamp": 1595257226
    },
    {
        "content": "<p>I don't think I'm following your point. There's a call to a function that has <code>ptrauth</code> in the name, sure, and there are <code>ptrauth</code> attributes on the <code>call</code> instruction. None of those are _instructions_ (like your mentioned <code>pacibsp</code> or <code>retab</code>). The LLVM IR instructions here are <code>ptrtoint</code>, <code>call</code>, <code>inttoptr</code>, <code>ret</code>.</p>",
        "id": 204436465,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595258697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> that's not a call to a function with ptrauth in it's name, that's a call to <code>%fp</code> using ptrauth. Sorry if my brain's a bit fried rn, just woke up.</p>",
        "id": 204461798,
        "sender_full_name": "aspen",
        "timestamp": 1595271657
    },
    {
        "content": "<p><a href=\"https://github.com/apple/llvm-project/blob/apple/stable/20200108/llvm/docs/PointerAuth.md\">https://github.com/apple/llvm-project/blob/apple/stable/20200108/llvm/docs/PointerAuth.md</a></p>",
        "id": 204461865,
        "sender_full_name": "aspen",
        "timestamp": 1595271689
    },
    {
        "content": "<p>ptrauth-calls</p>\n<p>ptrauth-calls specifies that calls emitted in this function should be authenticated according to the platform ABI.</p>\n<p><strong>Calls represented by call/invoke instructions in IR are not affected by this attribute, as they should already be annotated with the <code>ptrauth</code> operand bundle.</strong></p>\n<p>The ptrauth-calls attribute only describes calls emitted by the backend, as part of target-specific lowering (e.g., runtime calls for TLS accesses).</p>",
        "id": 204461885,
        "sender_full_name": "aspen",
        "timestamp": 1595271699
    },
    {
        "content": "<p><code>call i64 @llvm.ptrauth.auth.i64</code> is a call to a function with <code>ptrauth</code> in its name.</p>",
        "id": 204462393,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595271906
    },
    {
        "content": "<p><code>call void %fp() [ \"ptrauth\"(i32 &lt;key&gt;, i64 &lt;data&gt;) ]</code></p>",
        "id": 204462436,
        "sender_full_name": "aspen",
        "timestamp": 1595271917
    },
    {
        "content": "<p>also, <code>%fp_auth = call i64 @llvm.ptrauth.auth.i64(i64 %fp_i, i32 &lt;key&gt;, i64 &lt;data&gt;)</code><br>\nThe original function <code>%fp_i</code> is still in thre.</p>",
        "id": 204462600,
        "sender_full_name": "aspen",
        "timestamp": 1595271970
    },
    {
        "content": "<p>It's an LLVM intrinsic, I think.</p>",
        "id": 204462621,
        "sender_full_name": "aspen",
        "timestamp": 1595271981
    },
    {
        "content": "<p>'<code>llvm.ptrauth.auth</code>'<br>\nSyntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>declare i64 @llvm.ptrauth.auth.i64(i64 &lt;value&gt;, i32 &lt;key&gt;, i64 &lt;extra data&gt;)\n</code></pre></div>\n\n\n<p>Overview:</p>\n<p>The '<code>llvm.ptrauth.auth</code>' intrinsic authenticates a signed pointer.<br>\nArguments:</p>\n<p>The <code>value</code> argument is the signed pointer value to be authenticated. The <code>key</code> argument is the identifier of the key that was used to generate the signed value. The <code>extra data</code> argument is the additional diversity data to be used as a discriminator.<br>\nSemantics:</p>\n<p>The 'llvm<code>.ptrauth.auth</code>' intrinsic implements the <code>auth</code>_ operation. It returns a raw, unauthenticated value. If <code>value</code> does not have a correct signature for <code>key</code> and <code>extra data</code>, the returned value is an invalid, poison pointer.</p>",
        "id": 204462678,
        "sender_full_name": "aspen",
        "timestamp": 1595272017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> so you're half right, it's a call to an llvm intristic.</p>",
        "id": 204463106,
        "sender_full_name": "aspen",
        "timestamp": 1595272221
    },
    {
        "content": "<p>intrinsics are functions from the POV of the LLVM IR. All I mean is that <em>instructions</em> won't appear in the IR.</p>\n<p>However, it doesn't appear that my points are helping you, so I'll stop responding about that to avoid creating more work.</p>",
        "id": 204463324,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595272334
    },
    {
        "content": "<p>I'm sorry.</p>",
        "id": 204463349,
        "sender_full_name": "aspen",
        "timestamp": 1595272347
    },
    {
        "content": "<p>I'm just trying to figure out how to figure out to get the rustc codegen to emit these intristics/functions.</p>",
        "id": 204463390,
        "sender_full_name": "aspen",
        "timestamp": 1595272376
    },
    {
        "content": "<p>And i'm not sure how to do that.</p>",
        "id": 204463497,
        "sender_full_name": "aspen",
        "timestamp": 1595272438
    },
    {
        "content": "<p>Certainly. You \"just\" have to figure out what <code>[ \"ptrauth\"(i32 &lt;key&gt;, i64 &lt;data&gt;) ]</code> maps to in the LLVM API, then where that part of the API is used in rustc, then how to add it.</p>",
        "id": 204463604,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595272479
    },
    {
        "content": "<p>Sure. I'm guessing looking in Apple's Clang would be a good place to start?</p>",
        "id": 204463671,
        "sender_full_name": "aspen",
        "timestamp": 1595272516
    },
    {
        "content": "<p>Doesn't seem like a bad idea! I'd also do some wild grepping for <code>ptrauth</code> in the LLVM source code to try and find things.</p>",
        "id": 204464198,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595272769
    },
    {
        "content": "<p>I guess you also have the hard work of figuring out where to get the key and data from. Based on my 30 seconds of reading, the key might even be provided by the kernel itself.</p>",
        "id": 204464297,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595272817
    },
    {
        "content": "<p>the key is a constant, 1/2/3/4 just refer to different keys</p>",
        "id": 204464323,
        "sender_full_name": "aspen",
        "timestamp": 1595272837
    },
    {
        "content": "<p>altho yeah i think it's kernel provided</p>",
        "id": 204464349,
        "sender_full_name": "aspen",
        "timestamp": 1595272850
    },
    {
        "content": "<p>Ah, and the 5th unused key would be <code>5</code> presumably?</p>",
        "id": 204464365,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595272860
    },
    {
        "content": "<p>ye</p>",
        "id": 204464401,
        "sender_full_name": "aspen",
        "timestamp": 1595272879
    },
    {
        "content": "<p>Potentially relevant clang code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">EmitPointerAuthOperandBundle</span><span class=\"p\">(</span><span class=\"n\">ConcreteCallee</span><span class=\"p\">.</span><span class=\"n\">getPointerAuthInfo</span><span class=\"p\">(),</span> <span class=\"n\">BundleList</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<p>in <code>src/llvm-project/clang/lib/CodeGen/CGCall.cpp</code></p>",
        "id": 204465540,
        "sender_full_name": "aspen",
        "timestamp": 1595273446
    },
    {
        "content": "<p>Relevant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">void</span> <span class=\"n\">CodeGenFunction</span><span class=\"o\">::</span><span class=\"n\">EmitPointerAuthOperandBundle</span><span class=\"p\">(</span>\n                          <span class=\"k\">const</span> <span class=\"n\">CGPointerAuthInfo</span> <span class=\"o\">&amp;</span><span class=\"n\">pointerAuth</span><span class=\"p\">,</span>\n                          <span class=\"n\">SmallVectorImpl</span><span class=\"o\">&lt;</span><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">OperandBundleDef</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span><span class=\"n\">bundles</span><span class=\"p\">);</span>\n\n<span class=\"c1\">/// Information necessary for pointer authentication.</span>\n<span class=\"k\">class</span> <span class=\"nc\">CGPointerAuthInfo</span> <span class=\"p\">{</span>\n  <span class=\"kt\">unsigned</span> <span class=\"nl\">Signed</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"kt\">unsigned</span> <span class=\"nl\">Key</span> <span class=\"p\">:</span> <span class=\"mi\">31</span><span class=\"p\">;</span>\n  <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">Discriminator</span><span class=\"p\">;</span>\n\n<span class=\"k\">public</span><span class=\"o\">:</span>\n  <span class=\"n\">CGPointerAuthInfo</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">Signed</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"n\">CGPointerAuthInfo</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">discriminator</span><span class=\"p\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">Discriminator</span><span class=\"p\">(</span><span class=\"n\">discriminator</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">discriminator</span> <span class=\"o\">||</span> <span class=\"n\">discriminator</span><span class=\"o\">-&gt;</span><span class=\"n\">getType</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">isIntegerTy</span><span class=\"p\">()</span> <span class=\"o\">||</span>\n           <span class=\"n\">discriminator</span><span class=\"o\">-&gt;</span><span class=\"n\">getType</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">isPointerTy</span><span class=\"p\">());</span>\n    <span class=\"n\">Signed</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"n\">Key</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">explicit</span> <span class=\"k\">operator</span> <span class=\"kt\">bool</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">isSigned</span><span class=\"p\">();</span> <span class=\"p\">}</span>\n\n  <span class=\"kt\">bool</span> <span class=\"n\">isSigned</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">Signed</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n  <span class=\"kt\">unsigned</span> <span class=\"n\">getKey</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">isSigned</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"n\">Key</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">getDiscriminator</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">isSigned</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"n\">Discriminator</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 204465650,
        "sender_full_name": "aspen",
        "timestamp": 1595273503
    },
    {
        "content": "<p>i'mm to tired due much about htis rn</p>",
        "id": 204466166,
        "sender_full_name": "aspen",
        "timestamp": 1595273763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> is this helpful? from Swift's code: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">irgen</span><span class=\"o\">::</span><span class=\"n\">emitPointerAuthAuth</span><span class=\"p\">(</span><span class=\"n\">IRGenFunction</span> <span class=\"o\">&amp;</span><span class=\"n\">IGF</span><span class=\"p\">,</span> <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">fnPtr</span><span class=\"p\">,</span>\n                                        <span class=\"k\">const</span> <span class=\"n\">PointerAuthInfo</span> <span class=\"o\">&amp;</span><span class=\"n\">oldAuthInfo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">auto</span> <span class=\"n\">origTy</span> <span class=\"o\">=</span> <span class=\"n\">fnPtr</span><span class=\"o\">-&gt;</span><span class=\"n\">getType</span><span class=\"p\">();</span>\n  <span class=\"n\">fnPtr</span> <span class=\"o\">=</span> <span class=\"n\">IGF</span><span class=\"p\">.</span><span class=\"n\">Builder</span><span class=\"p\">.</span><span class=\"n\">CreatePtrToInt</span><span class=\"p\">(</span><span class=\"n\">fnPtr</span><span class=\"p\">,</span> <span class=\"n\">IGF</span><span class=\"p\">.</span><span class=\"n\">IGM</span><span class=\"p\">.</span><span class=\"n\">IntPtrTy</span><span class=\"p\">);</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">oldPair</span> <span class=\"o\">=</span> <span class=\"n\">getPointerAuthPair</span><span class=\"p\">(</span><span class=\"n\">IGF</span><span class=\"p\">,</span> <span class=\"n\">oldAuthInfo</span><span class=\"p\">);</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">intrinsic</span> <span class=\"o\">=</span>\n    <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Intrinsic</span><span class=\"o\">::</span><span class=\"n\">getDeclaration</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">IGF</span><span class=\"p\">.</span><span class=\"n\">IGM</span><span class=\"p\">.</span><span class=\"n\">Module</span><span class=\"p\">,</span>\n                                    <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Intrinsic</span><span class=\"o\">::</span><span class=\"n\">ptrauth_auth</span><span class=\"p\">,</span>\n                                    <span class=\"p\">{</span> <span class=\"n\">IGF</span><span class=\"p\">.</span><span class=\"n\">IGM</span><span class=\"p\">.</span><span class=\"n\">IntPtrTy</span> <span class=\"p\">});</span>\n  <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">fnPtr</span><span class=\"p\">,</span> <span class=\"n\">oldPair</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">oldPair</span><span class=\"p\">.</span><span class=\"n\">second</span>\n  <span class=\"p\">};</span>\n  <span class=\"n\">fnPtr</span> <span class=\"o\">=</span> <span class=\"n\">IGF</span><span class=\"p\">.</span><span class=\"n\">Builder</span><span class=\"p\">.</span><span class=\"n\">CreateCall</span><span class=\"p\">(</span><span class=\"n\">intrinsic</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">IGF</span><span class=\"p\">.</span><span class=\"n\">Builder</span><span class=\"p\">.</span><span class=\"n\">CreateIntToPtr</span><span class=\"p\">(</span><span class=\"n\">fnPtr</span><span class=\"p\">,</span> <span class=\"n\">origTy</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 204474615,
        "sender_full_name": "aspen",
        "timestamp": 1595278372
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">CallInst</span> <span class=\"o\">*</span><span class=\"n\">IRBuilder</span><span class=\"o\">::</span><span class=\"n\">CreateCall</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">FunctionPointer</span> <span class=\"o\">&amp;</span><span class=\"n\">fn</span><span class=\"p\">,</span>\n                                      <span class=\"n\">ArrayRef</span><span class=\"o\">&lt;</span><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span><span class=\"o\">*&gt;</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">SmallVector</span><span class=\"o\">&lt;</span><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">OperandBundleDef</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"n\">bundles</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// Add a pointer-auth bundle if necessary.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span> <span class=\"o\">&amp;</span><span class=\"n\">authInfo</span> <span class=\"o\">=</span> <span class=\"n\">fn</span><span class=\"p\">.</span><span class=\"n\">getAuthInfo</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">getInt32</span><span class=\"p\">(</span><span class=\"n\">authInfo</span><span class=\"p\">.</span><span class=\"n\">getKey</span><span class=\"p\">());</span>\n    <span class=\"k\">auto</span> <span class=\"n\">discriminator</span> <span class=\"o\">=</span> <span class=\"n\">authInfo</span><span class=\"p\">.</span><span class=\"n\">getDiscriminator</span><span class=\"p\">();</span>\n    <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">bundleArgs</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">discriminator</span> <span class=\"p\">};</span>\n    <span class=\"n\">bundles</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">,</span> <span class=\"n\">bundleArgs</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">isTrapIntrinsic</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">.</span><span class=\"n\">getPointer</span><span class=\"p\">())</span> <span class=\"o\">&amp;&amp;</span> <span class=\"s\">&quot;Use CreateNonMergeableTrap&quot;</span><span class=\"p\">);</span>\n  <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">CallInst</span> <span class=\"o\">*</span><span class=\"n\">call</span> <span class=\"o\">=</span> <span class=\"n\">IRBuilderBase</span><span class=\"o\">::</span><span class=\"n\">CreateCall</span><span class=\"p\">(</span>\n      <span class=\"n\">cast</span><span class=\"o\">&lt;</span><span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">FunctionType</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n          <span class=\"n\">fn</span><span class=\"p\">.</span><span class=\"n\">getPointer</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">getType</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">getPointerElementType</span><span class=\"p\">()),</span>\n      <span class=\"n\">fn</span><span class=\"p\">.</span><span class=\"n\">getPointer</span><span class=\"p\">(),</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">bundles</span><span class=\"p\">);</span>\n  <span class=\"n\">call</span><span class=\"o\">-&gt;</span><span class=\"n\">setAttributes</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">.</span><span class=\"n\">getAttributes</span><span class=\"p\">());</span>\n  <span class=\"n\">call</span><span class=\"o\">-&gt;</span><span class=\"n\">setCallingConv</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">.</span><span class=\"n\">getCallingConv</span><span class=\"p\">());</span>\n  <span class=\"k\">return</span> <span class=\"n\">call</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 204474667,
        "sender_full_name": "aspen",
        "timestamp": 1595278413
    },
    {
        "content": "<p>I don't actually know. looks like you need to add a \"bundle\" with the ptrauth stuff, then attach it with <code>CreateCall</code>. You could look for similar code in rustc that calls something like <code>CreateCall</code> and try to pass in similar arguments.</p>",
        "id": 204475006,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595278625
    },
    {
        "content": "<p>yeah, i've found it</p>",
        "id": 204475054,
        "sender_full_name": "aspen",
        "timestamp": 1595278679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"n\">LLVMValueRef</span> <span class=\"n\">LLVMRustBuildCall</span><span class=\"p\">(</span><span class=\"n\">LLVMBuilderRef</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">LLVMValueRef</span> <span class=\"n\">Fn</span><span class=\"p\">,</span>\n                                          <span class=\"n\">LLVMValueRef</span> <span class=\"o\">*</span><span class=\"n\">Args</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"n\">NumArgs</span><span class=\"p\">,</span>\n                                          <span class=\"n\">OperandBundleDef</span> <span class=\"o\">*</span><span class=\"n\">Bundle</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">ptrauth</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">Callee</span> <span class=\"o\">=</span> <span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">Fn</span><span class=\"p\">);</span>\n  <span class=\"n\">FunctionType</span> <span class=\"o\">*</span><span class=\"n\">FTy</span> <span class=\"o\">=</span> <span class=\"n\">cast</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionType</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">Callee</span><span class=\"o\">-&gt;</span><span class=\"n\">getType</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">getPointerElementType</span><span class=\"p\">());</span>\n  <span class=\"kt\">unsigned</span> <span class=\"n\">Len</span> <span class=\"o\">=</span> <span class=\"n\">Bundle</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">ArrayRef</span><span class=\"o\">&lt;</span><span class=\"n\">OperandBundleDef</span><span class=\"o\">&gt;</span> <span class=\"n\">Bundles</span> <span class=\"o\">=</span> <span class=\"n\">makeArrayRef</span><span class=\"p\">(</span><span class=\"n\">Bundle</span><span class=\"p\">,</span> <span class=\"n\">Len</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ptrauth</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">bundleArgs</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n    <span class=\"n\">bundles</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">,</span> <span class=\"n\">bundleArgs</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">CreateCall</span><span class=\"p\">(</span>\n      <span class=\"n\">FTy</span><span class=\"p\">,</span> <span class=\"n\">Callee</span><span class=\"p\">,</span> <span class=\"n\">makeArrayRef</span><span class=\"p\">(</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">Args</span><span class=\"p\">),</span> <span class=\"n\">NumArgs</span><span class=\"p\">),</span> <span class=\"n\">Bundles</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 204477581,
        "sender_full_name": "aspen",
        "timestamp": 1595279944
    },
    {
        "content": "<p>this might work?</p>",
        "id": 204477587,
        "sender_full_name": "aspen",
        "timestamp": 1595279949
    },
    {
        "content": "<p>well that didn't work, this compiled tho: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"n\">LLVMValueRef</span> <span class=\"n\">LLVMRustBuildCall</span><span class=\"p\">(</span><span class=\"n\">LLVMBuilderRef</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">LLVMValueRef</span> <span class=\"n\">Fn</span><span class=\"p\">,</span>\n                                          <span class=\"n\">LLVMValueRef</span> <span class=\"o\">*</span><span class=\"n\">Args</span><span class=\"p\">,</span> <span class=\"kt\">unsigned</span> <span class=\"n\">NumArgs</span><span class=\"p\">,</span>\n                                          <span class=\"n\">OperandBundleDef</span> <span class=\"o\">*</span><span class=\"n\">Bundle</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">ptrauth</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">Callee</span> <span class=\"o\">=</span> <span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">Fn</span><span class=\"p\">);</span>\n  <span class=\"n\">FunctionType</span> <span class=\"o\">*</span><span class=\"n\">FTy</span> <span class=\"o\">=</span> <span class=\"n\">cast</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionType</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">Callee</span><span class=\"o\">-&gt;</span><span class=\"n\">getType</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">getPointerElementType</span><span class=\"p\">());</span>\n  <span class=\"kt\">unsigned</span> <span class=\"n\">Len</span> <span class=\"o\">=</span> <span class=\"n\">Bundle</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">ArrayRef</span><span class=\"o\">&lt;</span><span class=\"n\">OperandBundleDef</span><span class=\"o\">&gt;</span> <span class=\"n\">Bundles</span> <span class=\"o\">=</span> <span class=\"n\">makeArrayRef</span><span class=\"p\">(</span><span class=\"n\">Bundle</span><span class=\"p\">,</span> <span class=\"n\">Len</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ptrauth</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">llvm</span><span class=\"o\">::</span><span class=\"n\">Value</span> <span class=\"o\">*</span><span class=\"n\">bundleArgs</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n    <span class=\"n\">OperandBundleDef</span> <span class=\"n\">PtrauthPlusBundles</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"o\">*</span><span class=\"n\">Bundle</span><span class=\"p\">,</span> <span class=\"n\">OperandBundleDef</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">,</span> <span class=\"n\">bundleArgs</span><span class=\"p\">)</span> <span class=\"p\">};</span>\n    <span class=\"k\">return</span> <span class=\"nf\">wrap</span><span class=\"p\">(</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">CreateCall</span><span class=\"p\">(</span>\n      <span class=\"n\">FTy</span><span class=\"p\">,</span> <span class=\"n\">Callee</span><span class=\"p\">,</span> <span class=\"n\">makeArrayRef</span><span class=\"p\">(</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">Args</span><span class=\"p\">),</span> <span class=\"n\">NumArgs</span><span class=\"p\">),</span> <span class=\"n\">PtrauthPlusBundles</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"n\">CreateCall</span><span class=\"p\">(</span>\n        <span class=\"n\">FTy</span><span class=\"p\">,</span> <span class=\"n\">Callee</span><span class=\"p\">,</span> <span class=\"n\">makeArrayRef</span><span class=\"p\">(</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">Args</span><span class=\"p\">),</span> <span class=\"n\">NumArgs</span><span class=\"p\">),</span> <span class=\"n\">Bundles</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 204479168,
        "sender_full_name": "aspen",
        "timestamp": 1595280877
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Building stage2 std artifacts (x86_64-apple-darwin -&gt; arm64e-apple-ios)\n   Compiling core v0.0.0 (/Users/aleister/Code/rust/src/libcore)\n   Compiling libc v0.2.72\n   Compiling compiler_builtins v0.1.32\n   Compiling unwind v0.0.0 (/Users/aleister/Code/rust/src/libunwind)\n   Compiling backtrace-sys v0.1.37\n   Compiling hashbrown v0.6.3\n   Compiling std v0.0.0 (/Users/aleister/Code/rust/src/libstd)\n   Compiling rustc-std-workspace-core v1.99.0 (/Users/aleister/Code/rust/src/tools/rustc-std-workspace-core)\nerror: could not compile `core`.\n\nCaused by:\n  process didn&#39;t exit successfully: `/Users/aleister/Code/rust/build/bootstrap/debug/rustc --crate-name core --edition=2018 src/libcore/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -Cembed-bitcode=no -C debuginfo=0 -C metadata=7addea7693d625b6 -C extra-filename=-7addea7693d625b6 --out-dir /Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/arm64e-apple-ios/release/deps --target arm64e-apple-ios -C linker=cc -C incremental=/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/arm64e-apple-ios/release/incremental -L dependency=/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/arm64e-apple-ios/release/deps -L dependency=/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage2-std/release/deps -Zmacro-backtrace -Zosx-rpath-install-name &#39;-Clink-args=-Wl,-rpath,@loader_path/../lib&#39; -Cprefer-dynamic -Cllvm-args=-import-instr-limit=10 -Cembed-bitcode=yes -Zbinary-dep-depinfo` (signal: 11, SIGSEGV: invalid memory reference)\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\ncommand did not execute successfully: &quot;/Users/aleister/Code/rust/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;arm64e-apple-ios&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;6&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace compiler-builtins-c&quot; &quot;--manifest-path&quot; &quot;/Users/aleister/Code/rust/src/libtest/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nexpected success, got: exit code: 101\nfailed to run: /Users/aleister/Code/rust/build/bootstrap/debug/bootstrap build\nBuild completed unsuccessfully in 0:09:54\n</code></pre></div>",
        "id": 204479944,
        "sender_full_name": "aspen",
        "timestamp": 1595281393
    },
    {
        "content": "<p>my brain is too fried to continue</p>",
        "id": 204498575,
        "sender_full_name": "aspen",
        "timestamp": 1595289337
    },
    {
        "content": "<p>help from anyone who has knowledge in librust_codegen_llvm would be appreciated</p>",
        "id": 204498597,
        "sender_full_name": "aspen",
        "timestamp": 1595289353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> would you be able to help? you seem to know a bit about the internals of this.<br>\nI'm trying to figure out stuff regarding applying ptrauth bundles to calls/invokes.<br>\nLike tracking Key/Discriminator for functions / calls?<br>\n<a href=\"/user_uploads/4715/38bhlPK5gqaMEzr0LUxORZNj/chrome_Vc0K1FgBNZ.png\">chrome_Vc0K1FgBNZ.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/38bhlPK5gqaMEzr0LUxORZNj/chrome_Vc0K1FgBNZ.png\" title=\"chrome_Vc0K1FgBNZ.png\"><img src=\"/user_uploads/4715/38bhlPK5gqaMEzr0LUxORZNj/chrome_Vc0K1FgBNZ.png\"></a></div>",
        "id": 204504913,
        "sender_full_name": "aspen",
        "timestamp": 1595295746
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/cNNKe3ECVUDmA2vZ7_DgBtQS/IMG_1201.PNG\">IMG_1201.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/cNNKe3ECVUDmA2vZ7_DgBtQS/IMG_1201.PNG\" title=\"IMG_1201.PNG\"><img src=\"/user_uploads/4715/cNNKe3ECVUDmA2vZ7_DgBtQS/IMG_1201.PNG\"></a></div>",
        "id": 204505571,
        "sender_full_name": "aspen",
        "timestamp": 1595296579
    },
    {
        "content": "<p>relevant PR to look at is the one that introduces addrspace handling for AVR</p>",
        "id": 204506265,
        "sender_full_name": "nagisa",
        "timestamp": 1595297434
    },
    {
        "content": "<p>it should be open somewhere, probably assigned to me</p>",
        "id": 204506266,
        "sender_full_name": "nagisa",
        "timestamp": 1595297439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> wait, which part of it?</p>",
        "id": 204506770,
        "sender_full_name": "aspen",
        "timestamp": 1595298119
    },
    {
        "content": "<p>the part that remembers the function pointers use a different address space than data.</p>",
        "id": 204506826,
        "sender_full_name": "nagisa",
        "timestamp": 1595298145
    },
    {
        "content": "<p>ooh yeah</p>",
        "id": 204506841,
        "sender_full_name": "aspen",
        "timestamp": 1595298169
    },
    {
        "content": "<p>and i'd implement something for the origin of a function pointer?</p>",
        "id": 204506845,
        "sender_full_name": "aspen",
        "timestamp": 1595298179
    },
    {
        "content": "<p>wait</p>",
        "id": 204506854,
        "sender_full_name": "aspen",
        "timestamp": 1595298194
    },
    {
        "content": "<p>how does that help with determining if a call/invoke is direct or indirect</p>",
        "id": 204506858,
        "sender_full_name": "aspen",
        "timestamp": 1595298204
    },
    {
        "content": "<p>so you would ptrsign when the pointers are created or something and use the signed way to call said pointers</p>",
        "id": 204506860,
        "sender_full_name": "nagisa",
        "timestamp": 1595298209
    },
    {
        "content": "<p>sorry if i'm being dumb here</p>",
        "id": 204506861,
        "sender_full_name": "aspen",
        "timestamp": 1595298209
    },
    {
        "content": "<p>it all can be done based on types.</p>",
        "id": 204506864,
        "sender_full_name": "nagisa",
        "timestamp": 1595298214
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 204506868,
        "sender_full_name": "aspen",
        "timestamp": 1595298225
    },
    {
        "content": "<p>in particular function pointers don’t come from vacuum, you will always begin with some sort of a symbol (declaration or definition)</p>",
        "id": 204506914,
        "sender_full_name": "nagisa",
        "timestamp": 1595298257
    },
    {
        "content": "<p>I guess the exception would be JIT stuff.</p>",
        "id": 204506929,
        "sender_full_name": "nagisa",
        "timestamp": 1595298281
    },
    {
        "content": "<p>so hm, here's where I'd stick a key/discriminator on a function ptr?</p>",
        "id": 204506947,
        "sender_full_name": "aspen",
        "timestamp": 1595298314
    },
    {
        "content": "<p>and maybe, just maybe dlopen stuff.</p>",
        "id": 204506951,
        "sender_full_name": "nagisa",
        "timestamp": 1595298317
    },
    {
        "content": "<p>in librustc_middle</p>",
        "id": 204506953,
        "sender_full_name": "aspen",
        "timestamp": 1595298319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> is the user expected to carry this about by themselves?</p>",
        "id": 204506967,
        "sender_full_name": "nagisa",
        "timestamp": 1595298356
    },
    {
        "content": "<p>no</p>",
        "id": 204506989,
        "sender_full_name": "aspen",
        "timestamp": 1595298363
    },
    {
        "content": "<p>if its supposed to be all automatic, the whole thing probably needs to be dealt with in the backend</p>",
        "id": 204507012,
        "sender_full_name": "nagisa",
        "timestamp": 1595298386
    },
    {
        "content": "<p>what i meant was generatign the key/discriminator for a fn in librustc_middle</p>",
        "id": 204507013,
        "sender_full_name": "aspen",
        "timestamp": 1595298386
    },
    {
        "content": "<p>oh, not sure why you’d need it to be in <code>librustc_middle</code> at all.</p>",
        "id": 204507036,
        "sender_full_name": "nagisa",
        "timestamp": 1595298407
    },
    {
        "content": "<p>can the key/discriminator be a hash of some sort?</p>",
        "id": 204507039,
        "sender_full_name": "nagisa",
        "timestamp": 1595298421
    },
    {
        "content": "<p>yes</p>",
        "id": 204507042,
        "sender_full_name": "aspen",
        "timestamp": 1595298424
    },
    {
        "content": "<p>key is u32, discriminator is u64</p>",
        "id": 204507046,
        "sender_full_name": "aspen",
        "timestamp": 1595298436
    },
    {
        "content": "<p>actually the key is just 0/1/2/3</p>",
        "id": 204507052,
        "sender_full_name": "aspen",
        "timestamp": 1595298446
    },
    {
        "content": "<p>discriminator can be 0 or it can be a hash. in swift, it's a hash of the function signature and stuff.</p>",
        "id": 204507058,
        "sender_full_name": "aspen",
        "timestamp": 1595298461
    },
    {
        "content": "<p>yeah, that’s what I’d do then, just StableHash the function pointer type or something</p>",
        "id": 204507099,
        "sender_full_name": "nagisa",
        "timestamp": 1595298498
    },
    {
        "content": "<p>how useful this scheme is ultimately will depend on what goes in to the hash</p>",
        "id": 204507110,
        "sender_full_name": "nagisa",
        "timestamp": 1595298528
    },
    {
        "content": "<p>does rustc track whether calls are indirect or direct calls?</p>",
        "id": 204507112,
        "sender_full_name": "aspen",
        "timestamp": 1595298533
    },
    {
        "content": "<p>yeah, it depends on the type.</p>",
        "id": 204507120,
        "sender_full_name": "nagisa",
        "timestamp": 1595298546
    },
    {
        "content": "<p>because \"Direct calls to statically known functions\" don't need any sort of auth</p>",
        "id": 204507124,
        "sender_full_name": "aspen",
        "timestamp": 1595298555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204507120\">said</a>:</p>\n<blockquote>\n<p>yeah, it depends on the type.</p>\n</blockquote>\n<p>what file would this be in?</p>",
        "id": 204507133,
        "sender_full_name": "aspen",
        "timestamp": 1595298575
    },
    {
        "content": "<p>Since this is an LLVM thing and I'm just sitting in librustc_codegen_llvm</p>",
        "id": 204507136,
        "sender_full_name": "aspen",
        "timestamp": 1595298588
    },
    {
        "content": "<p>Look for <code>ty::FnPtr</code> and <code>ty::FnDef</code>. The rust types will be available in <code>librustc_codegen_llvm</code> for pretty much everything.</p>",
        "id": 204507193,
        "sender_full_name": "nagisa",
        "timestamp": 1595298623
    },
    {
        "content": "<p>FnDef would be a direct, FnPtr would not be?</p>",
        "id": 204507222,
        "sender_full_name": "aspen",
        "timestamp": 1595298672
    },
    {
        "content": "<p>src/librustc_middle/ty/sty.rs has the variant definitions.</p>",
        "id": 204507225,
        "sender_full_name": "nagisa",
        "timestamp": 1595298676
    },
    {
        "content": "<p>with the relevant documentation</p>",
        "id": 204507228,
        "sender_full_name": "nagisa",
        "timestamp": 1595298684
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html</a> may be useful</p>",
        "id": 204507304,
        "sender_full_name": "nagisa",
        "timestamp": 1595298754
    },
    {
        "content": "<p>no, the FnDef is the type, FnPtr is the actual pointer</p>",
        "id": 204507308,
        "sender_full_name": "aspen",
        "timestamp": 1595298765
    },
    {
        "content": "<p>hm</p>",
        "id": 204507309,
        "sender_full_name": "aspen",
        "timestamp": 1595298769
    },
    {
        "content": "<p>calling a value of <code>FnDef</code> type is going to become a direct static call in LLVM IR</p>",
        "id": 204507344,
        "sender_full_name": "nagisa",
        "timestamp": 1595298842
    },
    {
        "content": "<p>OOH, I see</p>",
        "id": 204507374,
        "sender_full_name": "aspen",
        "timestamp": 1595298848
    },
    {
        "content": "<p>calling a value of <code>FnPtr</code> type is going to become a function pointer call.</p>",
        "id": 204507384,
        "sender_full_name": "nagisa",
        "timestamp": 1595298864
    },
    {
        "content": "<p>but hm, how do the ty::FnDef/FnPtr boil down to what's used in a LLVM IR call/invoke builder?</p>",
        "id": 204507395,
        "sender_full_name": "aspen",
        "timestamp": 1595298890
    },
    {
        "content": "<p>Sorry if I'm rather confused.</p>",
        "id": 204507412,
        "sender_full_name": "aspen",
        "timestamp": 1595298920
    },
    {
        "content": "<p>this is how a ptrauth bundle is made btw:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptrauth_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">llvm</span>::<span class=\"n\">ConstInt32</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">llcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">ConstInt64</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">llcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptrauth_bundle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OperandBundleDef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptrauth_args</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204507495,
        "sender_full_name": "aspen",
        "timestamp": 1595299008
    },
    {
        "content": "<p>because all the call()/invoke() seem to be in the agonistic backend</p>",
        "id": 204507588,
        "sender_full_name": "aspen",
        "timestamp": 1595299114
    },
    {
        "content": "<p>which ofc is unaware of ptrauth</p>",
        "id": 204507592,
        "sender_full_name": "aspen",
        "timestamp": 1595299118
    },
    {
        "content": "<p>You might want to look around <code>librustc_codegen_ssa</code>. Its closely related to the <code>_llvm</code> crate (and they work together)</p>",
        "id": 204507626,
        "sender_full_name": "nagisa",
        "timestamp": 1595299178
    },
    {
        "content": "<p>ye, but ssa is _unaware_ of LLVM types last I checked?</p>",
        "id": 204507669,
        "sender_full_name": "aspen",
        "timestamp": 1595299203
    },
    {
        "content": "<p><code>librustc_codegen_ssa/mir/rvalue.rs</code> for instance has code that does the reification (i.e. conversion from fndef to fnptr)</p>",
        "id": 204507684,
        "sender_full_name": "nagisa",
        "timestamp": 1595299237
    },
    {
        "content": "<p>so wait, what would I do with that?</p>",
        "id": 204507711,
        "sender_full_name": "aspen",
        "timestamp": 1595299307
    },
    {
        "content": "<p>yeah it is intended to be more generic than just llvm, so you might need to introduce some sort of a more generic infrastructure for ptrauth than exactly mapping directly to LLVM constructs.</p>",
        "id": 204507737,
        "sender_full_name": "nagisa",
        "timestamp": 1595299322
    },
    {
        "content": "<p>that said… this whole split was halfway done and left there, so you will always see some intersection between the two crates.</p>",
        "id": 204507761,
        "sender_full_name": "nagisa",
        "timestamp": 1595299341
    },
    {
        "content": "<p>tbh rn all I care about is passing down \"is this a direct or indirect call\" to LLVM</p>",
        "id": 204507766,
        "sender_full_name": "aspen",
        "timestamp": 1595299353
    },
    {
        "content": "<p>and I haven’t worked on backend since the time the split occurred.</p>",
        "id": 204507767,
        "sender_full_name": "nagisa",
        "timestamp": 1595299353
    },
    {
        "content": "<p>you can just hack it in for the initial pass.</p>",
        "id": 204507770,
        "sender_full_name": "nagisa",
        "timestamp": 1595299372
    },
    {
        "content": "<p>ye I can't just slap the ptrauth bundle on everything tho</p>",
        "id": 204507778,
        "sender_full_name": "aspen",
        "timestamp": 1595299385
    },
    {
        "content": "<p>this isn't being PR'd due to the fact it's using an entirely different LLVM</p>",
        "id": 204507782,
        "sender_full_name": "aspen",
        "timestamp": 1595299397
    },
    {
        "content": "<p>i just can't find where I'd manage to pass down \"is this indirect or direct\" to call()/invoke()</p>",
        "id": 204507788,
        "sender_full_name": "aspen",
        "timestamp": 1595299419
    },
    {
        "content": "<p>the highest I can find is <code>do_call</code></p>",
        "id": 204507858,
        "sender_full_name": "aspen",
        "timestamp": 1595299512
    },
    {
        "content": "<p>and I don't think that's aware of ty::FnDef/ty::FnPtr</p>",
        "id": 204507863,
        "sender_full_name": "aspen",
        "timestamp": 1595299524
    },
    {
        "content": "<p>... hm, is FnAbi aware of it?</p>",
        "id": 204507915,
        "sender_full_name": "aspen",
        "timestamp": 1595299601
    },
    {
        "content": "<p>... don't think so. ugh.</p>",
        "id": 204507938,
        "sender_full_name": "aspen",
        "timestamp": 1595299652
    },
    {
        "content": "<p>codegen_call_terminator is what’s up the stack.</p>",
        "id": 204507939,
        "sender_full_name": "nagisa",
        "timestamp": 1595299653
    },
    {
        "content": "<p>oh, the name put me off.</p>",
        "id": 204507942,
        "sender_full_name": "aspen",
        "timestamp": 1595299664
    },
    {
        "content": "<p>ultimately it'll be up to you to figure out how to thread through the necessary information.</p>",
        "id": 204507996,
        "sender_full_name": "nagisa",
        "timestamp": 1595299757
    },
    {
        "content": "<p>at the very least I haven’t even looked at the backend code for many months now.</p>",
        "id": 204508001,
        "sender_full_name": "nagisa",
        "timestamp": 1595299782
    },
    {
        "content": "<p>... this is a big hack, sooo</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">needs_ptrauth</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">FnDef</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">FnPtr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204508005,
        "sender_full_name": "aspen",
        "timestamp": 1595299799
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0521]: borrowed data escapes outside of associated function\n   --&gt; src/librustc_codegen_llvm/builder.rs:211:20\n    |\n194 |         &amp;mut self,\n    |         --------- `self` declared here, outside of the associated function body\n...\n199 |         funclet: Option&lt;&amp;Funclet&lt;&#39;ll&gt;&gt;,\n    |         ------- `funclet` is a reference that is only valid in the associated function body\n...\n211 |         let args = self.check_call(&quot;invoke&quot;, llfn, args);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `funclet` escapes the associated function body here\n\nerror[E0515]: cannot return value referencing local variable `ptrauth_bundle`\n   --&gt; src/librustc_codegen_llvm/builder.rs:222:13\n    |\n208 |               bundles.push(&amp;ptrauth_bundle);\n    |                            --------------- `ptrauth_bundle` is borrowed here\n...\n222 | /             llvm::LLVMRustBuildInvoke(\n223 | |                 self.llbuilder,\n224 | |                 llfn,\n225 | |                 args.as_ptr(),\n...   |\n231 | |                 UNNAMED,\n232 | |             )\n    | |_____________^ returns a value referencing data owned by the current function\n</code></pre></div>",
        "id": 204508779,
        "sender_full_name": "aspen",
        "timestamp": 1595301238
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">invoke</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">llfn</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">then</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">BasicBlock</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">catch</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">BasicBlock</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">funclet</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Funclet</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;ll</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ptrauth</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;invoke {:?} with args ({:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bundles</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">OperandBundleDef</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptrauth_crap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">llvm</span>::<span class=\"n\">ConstInt32</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">llcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">ConstInt64</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">llcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptrauth_bundle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OperandBundleDef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptrauth_crap</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ptrauth</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">bundles</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ptrauth_bundle</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s\">&quot;invoke&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">funclet_bundle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">funclet</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">funclet</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">funclet</span><span class=\"p\">.</span><span class=\"n\">bundle</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">funclet_bundle</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">funclet_bundle</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">bundles</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">funclet_bundle</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bundles</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bundles</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMRustBuildInvoke</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">llbuilder</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">c_uint</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">then</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">catch</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">bundles</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">bundles</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">c_uint</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">UNNAMED</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204508817,
        "sender_full_name": "aspen",
        "timestamp": 1595301246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> i apologize if it's obvious but what am I doing wrong here?</p>",
        "id": 204508823,
        "sender_full_name": "aspen",
        "timestamp": 1595301259
    },
    {
        "content": "<p>going to sleep so not going to respond before at least 8 hours later.</p>",
        "id": 204508961,
        "sender_full_name": "nagisa",
        "timestamp": 1595301487
    },
    {
        "content": "<p>alright, g'night</p>",
        "id": 204508968,
        "sender_full_name": "aspen",
        "timestamp": 1595301515
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0521]: borrowed data escapes outside of associated function\n   --&gt; src/librustc_codegen_llvm/builder.rs:207:20\n    |\n194 |         &amp;mut self,\n    |         --------- `self` declared here, outside of the associated function body\n...\n199 |         funclet: Option&lt;&amp;Funclet&lt;&#39;ll&gt;&gt;,\n    |         ------- `funclet` is a reference that is only valid in the associated function body\n...\n207 |         let args = self.check_call(&quot;call&quot;, llfn, args);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `funclet` escapes the associated function body here\n\nerror[E0515]: cannot return value referencing local variable `ptrauth_bundle`\n   --&gt; src/librustc_codegen_llvm/builder.rs:216:13\n    |\n211 |               Some(&amp;ptrauth_bundle).as_ref().map(|b| &amp;*b.raw)\n    |                    --------------- `ptrauth_bundle` is borrowed here\n...\n216 | /             llvm::LLVMRustBuildInvoke(\n217 | |                 self.llbuilder,\n218 | |                 llfn,\n219 | |                 args.as_ptr(),\n...   |\n225 | |                 UNNAMED,\n226 | |             )\n    | |_____________^ returns a value referencing data owned by the current function\n</code></pre></div>",
        "id": 204563653,
        "sender_full_name": "aspen",
        "timestamp": 1595345820
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">invoke</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">llfn</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">args</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">then</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">BasicBlock</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">catch</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">BasicBlock</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">funclet</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Funclet</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;ll</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ptrauth</span>: <span class=\"kt\">bool</span>\n    <span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;ll</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;invoke {:?} with args ({:?})&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptrauth_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">llvm</span>::<span class=\"n\">ConstInt32</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">llcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">ConstInt64</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">llcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptrauth_bundle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OperandBundleDef</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptrauth_args</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s\">&quot;call&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bundle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">funclet</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">funclet</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">funclet</span><span class=\"p\">.</span><span class=\"n\">bundle</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bundle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bundle</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pac_bundle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ptrauth</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ptrauth_bundle</span><span class=\"p\">).</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMRustBuildInvoke</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">llbuilder</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">llfn</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">c_uint</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">then</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">catch</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">bundle</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">pac_bundle</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">UNNAMED</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204563675,
        "sender_full_name": "aspen",
        "timestamp": 1595345829
    },
    {
        "content": "<p>I am confused about how I got this to work earlier.</p>",
        "id": 204563700,
        "sender_full_name": "aspen",
        "timestamp": 1595345838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> idk what I'm doing wrong</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling backtrace v0.3.50\nLLVM ERROR: Cannot lower direct authenticated call to unauthenticated target\nerror: could not compile `backtrace`.\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">use_pac</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">use_pac</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">FnDef</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">FnPtr</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204570609,
        "sender_full_name": "aspen",
        "timestamp": 1595349155
    },
    {
        "content": "<p><a href=\"user_uploads/4715/Ll1OLHcIjS1-CN3g8LC3JBbS/chrome_rUyHQJGQDf.png\">chrome_rUyHQJGQDf.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/4715/Ll1OLHcIjS1-CN3g8LC3JBbS/chrome_rUyHQJGQDf.png\" title=\"chrome_rUyHQJGQDf.png\"><img src=\"user_uploads/4715/Ll1OLHcIjS1-CN3g8LC3JBbS/chrome_rUyHQJGQDf.png\"></a></div>",
        "id": 204570867,
        "sender_full_name": "aspen",
        "timestamp": 1595349286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> did you actually authenticate the function pointers where they are reified (i.e. converted from FnDef to FnPtr)?</p>",
        "id": 204577962,
        "sender_full_name": "nagisa",
        "timestamp": 1595352847
    },
    {
        "content": "<p>I'm just using a 0 key/discriminator for now</p>",
        "id": 204578019,
        "sender_full_name": "aspen",
        "timestamp": 1595352875
    },
    {
        "content": "<p>and I just pass the \"use_pac\" bool down to call/invoke</p>",
        "id": 204578040,
        "sender_full_name": "aspen",
        "timestamp": 1595352886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204577962\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> did you actually authenticate the function pointers where they are reified (i.e. converted from FnDef to FnPtr)?</p>\n</blockquote>\n<p>wait I think I misunderstood this, do you mean signing or authing the pointers?</p>",
        "id": 204578344,
        "sender_full_name": "aspen",
        "timestamp": 1595353054
    },
    {
        "content": "<p>my use of terminology here might be fairly lax</p>",
        "id": 204580003,
        "sender_full_name": "nagisa",
        "timestamp": 1595353884
    },
    {
        "content": "<p>i'm only adding the ptrauth bundle if it's a FnPtr</p>",
        "id": 204580025,
        "sender_full_name": "aspen",
        "timestamp": 1595353903
    },
    {
        "content": "<p>I meant whatever makes the sense for when you produce function pointers.</p>",
        "id": 204580027,
        "sender_full_name": "nagisa",
        "timestamp": 1595353903
    },
    {
        "content": "<p>is it possible for a FnPtr to be a direct call?</p>",
        "id": 204580101,
        "sender_full_name": "aspen",
        "timestamp": 1595353925
    },
    {
        "content": "<p>yeah, but that portion of code that you linked is only affecting the calls.</p>",
        "id": 204580121,
        "sender_full_name": "nagisa",
        "timestamp": 1595353935
    },
    {
        "content": "<p>pointers still need to come from somewhere.</p>",
        "id": 204580130,
        "sender_full_name": "nagisa",
        "timestamp": 1595353942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204580101\">said</a>:</p>\n<blockquote>\n<p>is it possible for a FnPtr to be a direct call?</p>\n</blockquote>\n<p>not that I know of.</p>",
        "id": 204580141,
        "sender_full_name": "nagisa",
        "timestamp": 1595353953
    },
    {
        "content": "<p>hm, since only FnPtrs are having the use_ptrauth bool passed down</p>",
        "id": 204580165,
        "sender_full_name": "aspen",
        "timestamp": 1595353972
    },
    {
        "content": "<p>i have this on both call and invoke</p>",
        "id": 204580187,
        "sender_full_name": "aspen",
        "timestamp": 1595353984
    },
    {
        "content": "<p>at this point I would probably look at what the LLVM code is doing in the area of code that emits this error you're getting</p>",
        "id": 204580254,
        "sender_full_name": "nagisa",
        "timestamp": 1595354018
    },
    {
        "content": "<p>this happens during ./x.py build</p>",
        "id": 204580381,
        "sender_full_name": "aspen",
        "timestamp": 1595354043
    },
    {
        "content": "<p>i'm not sure how to inspect the IR during that.</p>",
        "id": 204580394,
        "sender_full_name": "aspen",
        "timestamp": 1595354057
    },
    {
        "content": "<p>Would committing and pushing my code to a github branch help?</p>",
        "id": 204580469,
        "sender_full_name": "aspen",
        "timestamp": 1595354110
    },
    {
        "content": "<p>I’m not suggesting to inspect the IR. I’m suggesting to look at the actual LLVM implementation around the place where this error is produced.</p>",
        "id": 204585765,
        "sender_full_name": "nagisa",
        "timestamp": 1595356751
    },
    {
        "content": "<p>This might tell you what exactly you're triggering and should inform how to deal with it.</p>",
        "id": 204585812,
        "sender_full_name": "nagisa",
        "timestamp": 1595356777
    },
    {
        "content": "<p>oh. Also I've been suggested to only really produce ptrauth bundles for rust programs, rather than rustc itself, if that's possible.</p>",
        "id": 204585995,
        "sender_full_name": "aspen",
        "timestamp": 1595356858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"c1\">// Functions should never be ptrauth-called directly.</span>\n  <span class=\"c1\">// We could lower these to direct unauthenticated calls, but for that to</span>\n  <span class=\"c1\">// occur, there must have been a semantic mismatch somewhere leading to this</span>\n  <span class=\"c1\">// arguably incorrect IR.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isa</span><span class=\"o\">&lt;</span><span class=\"n\">Function</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">CalleeV</span><span class=\"p\">))</span>\n    <span class=\"n\">report_fatal_error</span><span class=\"p\">(</span><span class=\"s\">&quot;Cannot lower direct authenticated call to&quot;</span>\n                       <span class=\"s\">&quot; unauthenticated target&quot;</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 204586516,
        "sender_full_name": "aspen",
        "timestamp": 1595357100
    },
    {
        "content": "<p><a href=\"https://github.com/apple/llvm-project/blob/apple/stable/20200108/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp#L7718-L7756\">https://github.com/apple/llvm-project/blob/apple/stable/20200108/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp#L7718-L7756</a></p>",
        "id": 204586995,
        "sender_full_name": "aspen",
        "timestamp": 1595357331
    },
    {
        "content": "<p>You’ll need to add some sort of a CLI argument for rustc vs regular programs.</p>",
        "id": 204587198,
        "sender_full_name": "nagisa",
        "timestamp": 1595357426
    },
    {
        "content": "<p>but i'd much rather fix the problem at it's source</p>",
        "id": 204587265,
        "sender_full_name": "aspen",
        "timestamp": 1595357474
    },
    {
        "content": "<p>That was in response for \"only really produce ptrauth bundles...\"</p>",
        "id": 204587296,
        "sender_full_name": "nagisa",
        "timestamp": 1595357501
    },
    {
        "content": "<p>ye</p>",
        "id": 204587337,
        "sender_full_name": "aspen",
        "timestamp": 1595357521
    },
    {
        "content": "<p>having a CLI argument that can be toggled is the proper way to go about it, rustc is not //that// hacky that it would need to know its building itself. And so it doesn’t.</p>",
        "id": 204587398,
        "sender_full_name": "nagisa",
        "timestamp": 1595357540
    },
    {
        "content": "<p>i need to figure out why a FnPtr results in <code>isa&lt;Function&gt;(CalleeV)</code> being true, though.</p>",
        "id": 204587427,
        "sender_full_name": "aspen",
        "timestamp": 1595357562
    },
    {
        "content": "<p>I can imagine multiple causes, one of them being that LLVM's devirtualization optimization kicks in.</p>",
        "id": 204587463,
        "sender_full_name": "nagisa",
        "timestamp": 1595357580
    },
    {
        "content": "<p>there's no way to see the IR it's producing, I don't think.</p>",
        "id": 204587515,
        "sender_full_name": "aspen",
        "timestamp": 1595357602
    },
    {
        "content": "<p>there are ways but they aren’t pleasant.</p>",
        "id": 204587545,
        "sender_full_name": "nagisa",
        "timestamp": 1595357619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <a href=\"/user_uploads/4715/7KHwy9h8MHO_kQFPvP13gL-i/chrome_BdDVgD3PC1.png\">chrome_BdDVgD3PC1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/7KHwy9h8MHO_kQFPvP13gL-i/chrome_BdDVgD3PC1.png\" title=\"chrome_BdDVgD3PC1.png\"><img src=\"/user_uploads/4715/7KHwy9h8MHO_kQFPvP13gL-i/chrome_BdDVgD3PC1.png\"></a></div>",
        "id": 204587750,
        "sender_full_name": "aspen",
        "timestamp": 1595357711
    },
    {
        "content": "<p>SelectionDAG happens after optimisation, pretty sure.</p>",
        "id": 204587824,
        "sender_full_name": "nagisa",
        "timestamp": 1595357755
    },
    {
        "content": "<p>i'm going to try using println debugging in call/invoke</p>",
        "id": 204587979,
        "sender_full_name": "aspen",
        "timestamp": 1595357836
    },
    {
        "content": "<p>probably will be useless but won't hurt</p>",
        "id": 204587998,
        "sender_full_name": "aspen",
        "timestamp": 1595357849
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/hUn24WSiU1NhQoRZ3xA1eOFB/chrome_g2JQ0tXxks.png\">chrome_g2JQ0tXxks.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/hUn24WSiU1NhQoRZ3xA1eOFB/chrome_g2JQ0tXxks.png\" title=\"chrome_g2JQ0tXxks.png\"><img src=\"/user_uploads/4715/hUn24WSiU1NhQoRZ3xA1eOFB/chrome_g2JQ0tXxks.png\"></a></div>",
        "id": 204588723,
        "sender_full_name": "aspen",
        "timestamp": 1595358231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it might be because I haven't implemented the signing yet</p>",
        "id": 204588873,
        "sender_full_name": "aspen",
        "timestamp": 1595358278
    },
    {
        "content": "<p>so here's what i think I need to do:<br>\ninitializing FnPtr VALUES when they're made using the <code>@llvm.ptrauth.sign</code> intrinisc</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">declare</span> <span class=\"k\">i64</span> <span class=\"vg\">@llvm.ptrauth.sign.i64</span><span class=\"p\">(</span><span class=\"k\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">value</span><span class=\"p\">&gt;,</span> <span class=\"k\">i32</span> <span class=\"p\">&lt;</span><span class=\"err\">key</span><span class=\"p\">&gt;,</span> <span class=\"k\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">extra</span> <span class=\"err\">data</span><span class=\"p\">&gt;)</span>\n</code></pre></div>",
        "id": 204589373,
        "sender_full_name": "aspen",
        "timestamp": 1595358540
    },
    {
        "content": "<p>so i'll add these:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"s\">&quot;pacsigni64&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm.ptrauth.sign.i64&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;pacauthi64&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm.ptrauth.auth.i64&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;pacstripi64&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm.ptrauth.strip.i64&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;pacresigni64&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm.ptrauth.resign.i64&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;pacsigngenerici64&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm.ptrauth.sign_generic.i64&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;pacblendi64&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm.ptrauth.blend.i64&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204589940,
        "sender_full_name": "aspen",
        "timestamp": 1595358777
    },
    {
        "content": "<p>... i don't know what else to do.</p>",
        "id": 204590025,
        "sender_full_name": "aspen",
        "timestamp": 1595358825
    },
    {
        "content": "<p>I linked you to where reification (fndef -&gt; fnptr) happens yesterday.</p>",
        "id": 204590186,
        "sender_full_name": "nagisa",
        "timestamp": 1595358873
    },
    {
        "content": "<p>sorry</p>",
        "id": 204590309,
        "sender_full_name": "aspen",
        "timestamp": 1595358941
    },
    {
        "content": "<p>What do you mean by \"reification\" btw?</p>",
        "id": 204590324,
        "sender_full_name": "aspen",
        "timestamp": 1595358950
    },
    {
        "content": "<p>and that's in the psuedo-agonistic backend</p>",
        "id": 204590716,
        "sender_full_name": "aspen",
        "timestamp": 1595359116
    },
    {
        "content": "<p>reification is turning something abstract (in this case a function definition) into something concrete (in this case a pointer to a function)</p>",
        "id": 204590720,
        "sender_full_name": "bjorn3",
        "timestamp": 1595359118
    },
    {
        "content": "<p>meanwhile what I need to do is very much llvm-specific (emitting an intristic)</p>",
        "id": 204590795,
        "sender_full_name": "aspen",
        "timestamp": 1595359134
    },
    {
        "content": "<p>I'm just very confused at the moment, sorry.</p>",
        "id": 204591023,
        "sender_full_name": "aspen",
        "timestamp": 1595359257
    },
    {
        "content": "<p>Alright so here's what I think I need to do:</p>\n<ul>\n<li>Emit <code>llvm.ptrauth.sign.i64</code> intristics whenever a FnPtr is initialized in the IR</li>\n<li>Emit a <code>ptrauth</code> bundle whenever a FnPtr is CALLED in the IR.</li>\n</ul>\n<p>I dunno how to do the first part.</p>",
        "id": 204614666,
        "sender_full_name": "aspen",
        "timestamp": 1595373859
    },
    {
        "content": "<p>bare with me if i'm just being dumb and it's obvious</p>",
        "id": 204614816,
        "sender_full_name": "aspen",
        "timestamp": 1595374006
    },
    {
        "content": "<p>An example of how LLVM intrinsic is called: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/intrinsic.rs#L868\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/intrinsic.rs#L868</a> which is then called in <code>_ssa</code> e.g. here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/mir/block.rs#L252\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/mir/block.rs#L252</a>.</p>\n<p>You’ll want at least one such intrinsic call around this area: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/mir/rvalue.rs#L186\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/mir/rvalue.rs#L186</a></p>",
        "id": 204616022,
        "sender_full_name": "nagisa",
        "timestamp": 1595375136
    },
    {
        "content": "<blockquote>\n<p>produce ptrauth bundles for rust programs, rather than rustc itself</p>\n</blockquote>\n<p>I’d expect that you’d build rustc for target-without-auth and then build whatever program to target-with-auth. No need for a command line option that way.</p>",
        "id": 204616288,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595375317
    },
    {
        "content": "<p>Effectively “cross-compiling”</p>",
        "id": 204616311,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595375337
    },
    {
        "content": "<p>Will probably want a <code>-Z</code> or <code>-C</code> flag to control ptrauth one way or another.</p>",
        "id": 204616349,
        "sender_full_name": "nagisa",
        "timestamp": 1595375382
    },
    {
        "content": "<p>but yeah, \"cross\" build is another sensible option.</p>",
        "id": 204616417,
        "sender_full_name": "nagisa",
        "timestamp": 1595375409
    },
    {
        "content": "<p>It might just be <code>-C target-feature ptrauth</code></p>",
        "id": 204616585,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595375532
    },
    {
        "content": "<p>Yeah, makes sense, but I should still be able to compile rustc itself as \"proof\" that it works.</p>",
        "id": 204617423,
        "sender_full_name": "aspen",
        "timestamp": 1595376267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> but wait, around that area in rvalue, i don't think the pointer has been turned into a Value yet?</p>",
        "id": 204617655,
        "sender_full_name": "aspen",
        "timestamp": 1595376513
    },
    {
        "content": "<p>or a u64 or whatever</p>",
        "id": 204617707,
        "sender_full_name": "aspen",
        "timestamp": 1595376581
    },
    {
        "content": "<p>it calls <code>bx.get_fn_addr</code> which generates the instruction to produce a pointer to the function.</p>",
        "id": 204617761,
        "sender_full_name": "nagisa",
        "timestamp": 1595376604
    },
    {
        "content": "<p>OOH, yeah. Thanks</p>",
        "id": 204617770,
        "sender_full_name": "aspen",
        "timestamp": 1595376613
    },
    {
        "content": "<p>you could technically add the call to the intrinsic somewhere deeper in the callstack here</p>",
        "id": 204617784,
        "sender_full_name": "nagisa",
        "timestamp": 1595376633
    },
    {
        "content": "<p>like in the <code>get_fn_addr</code> itself or whatever it ends up calling.</p>",
        "id": 204617794,
        "sender_full_name": "nagisa",
        "timestamp": 1595376646
    },
    {
        "content": "<p>So,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">pac_sign</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"nc\">Self</span>::<span class=\"n\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">discrim</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fnname</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_intrinsic</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"s\">&quot;llvm.ptrauth.sign.i64&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">fnname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u32</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u64</span><span class=\"p\">(</span><span class=\"n\">discrim</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204617886,
        "sender_full_name": "aspen",
        "timestamp": 1595376733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: failed to parse bitcode for LTO module: Invalid cast (Producer: &#39;LLVM10.0.0-rust-dev&#39; Reader: &#39;LLVM 10.0.0-rust-dev&#39;)\n\nerror: aborting due to previous error\n\nerror: could not compile `backtrace`.\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nerror: failed to parse bitcode for LTO module: Invalid cast (Producer: &#39;LLVM10.0.0-rust-dev&#39; Reader: &#39;LLVM 10.0.0-rust-dev&#39;)\n\nerror: aborting due to previous error\n\nerror: failed to parse bitcode for LTO module: Invalid cast (Producer: &#39;LLVM10.0.0-rust-dev&#39; Reader: &#39;LLVM 10.0.0-rust-dev&#39;)\n</code></pre></div>",
        "id": 204619525,
        "sender_full_name": "aspen",
        "timestamp": 1595378531
    },
    {
        "content": "<p>looks like its getting further along at least.</p>",
        "id": 204620465,
        "sender_full_name": "nagisa",
        "timestamp": 1595379410
    },
    {
        "content": "<p>The \"LLVM10.0.0-rust-dev\" looks somewhat suspect, but that's pretty much all I have in terms of guesses.</p>",
        "id": 204620553,
        "sender_full_name": "nagisa",
        "timestamp": 1595379487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/How.20to.20get.20rustc.20to.20generate.20LLVM.20IR.20differently.3F/near/204620553\">said</a>:</p>\n<blockquote>\n<p>The \"LLVM10.0.0-rust-dev\" looks somewhat suspect, but that's pretty much all I have in terms of guesses.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code># When building llvm, this configures what is being appended to the version.\n# The default is &quot;-rust-$version-$channel&quot;, except for dev channel where rustc\n# version number is omitted. To use LLVM version as is, provide an empty string.\n#version-suffix = &quot;-rust-dev&quot;\n</code></pre></div>",
        "id": 204622908,
        "sender_full_name": "aspen",
        "timestamp": 1595382305
    },
    {
        "content": "<p>still, is there any way to see the LLVM IR that's being generated?</p>",
        "id": 204622983,
        "sender_full_name": "aspen",
        "timestamp": 1595382438
    },
    {
        "content": "<p>or did i forget it</p>",
        "id": 204622984,
        "sender_full_name": "aspen",
        "timestamp": 1595382442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span><br>\n<a href=\"/user_uploads/4715/dtlOYrrdQM3dAuyQaJhgr1ZS/chrome_UWFBecIgyT.png\">chrome_UWFBecIgyT.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dtlOYrrdQM3dAuyQaJhgr1ZS/chrome_UWFBecIgyT.png\" title=\"chrome_UWFBecIgyT.png\"><img src=\"/user_uploads/4715/dtlOYrrdQM3dAuyQaJhgr1ZS/chrome_UWFBecIgyT.png\"></a></div>",
        "id": 204626524,
        "sender_full_name": "aspen",
        "timestamp": 1595387551
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/YG4_FR2sVfie3aQoVl5oOZv2/Code_9wt9WpSh55.png\">Code_9wt9WpSh55.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/YG4_FR2sVfie3aQoVl5oOZv2/Code_9wt9WpSh55.png\" title=\"Code_9wt9WpSh55.png\"><img src=\"/user_uploads/4715/YG4_FR2sVfie3aQoVl5oOZv2/Code_9wt9WpSh55.png\"></a></div>",
        "id": 204627691,
        "sender_full_name": "aspen",
        "timestamp": 1595389313
    },
    {
        "content": "<p>well um, it's progress?</p>",
        "id": 204627695,
        "sender_full_name": "aspen",
        "timestamp": 1595389317
    },
    {
        "content": "<p>it's std instead of backtrace failing now. that's further along.</p>",
        "id": 204627786,
        "sender_full_name": "aspen",
        "timestamp": 1595389439
    },
    {
        "content": "<p><a href=\"https://github.com/Crabapple-iOS/rust/commit/8c214d7b21e1627f3a2abea68ddab42d4aa29625\">https://github.com/Crabapple-iOS/rust/commit/8c214d7b21e1627f3a2abea68ddab42d4aa29625</a></p>",
        "id": 204628148,
        "sender_full_name": "aspen",
        "timestamp": 1595389981
    },
    {
        "content": "<p>there's my code ^^^</p>",
        "id": 204628161,
        "sender_full_name": "aspen",
        "timestamp": 1595390010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> are you sure that the reification is the only way FnPtrs are created?</p>",
        "id": 204679448,
        "sender_full_name": "aspen",
        "timestamp": 1595430920
    },
    {
        "content": "<p>That ought to be the case for user code at least, but at least std could be obtaining pointers to functions from external sources and codegen could also be generating its own function pointers that do not necessarily relate to user code.</p>",
        "id": 204679952,
        "sender_full_name": "nagisa",
        "timestamp": 1595431061
    },
    {
        "content": "<p>Yeah, I'd guess std is doing something weird. Where could these be generated at in codegen?</p>",
        "id": 204680761,
        "sender_full_name": "aspen",
        "timestamp": 1595431442
    },
    {
        "content": "<p>No idea, sorry.</p>",
        "id": 204681131,
        "sender_full_name": "nagisa",
        "timestamp": 1595431591
    },
    {
        "content": "<p>Any way to look at the IR being generated for std?</p>",
        "id": 204681179,
        "sender_full_name": "aspen",
        "timestamp": 1595431613
    },
    {
        "content": "<p>I guess it's probably better to just make PAC not be generated in rustc.</p>",
        "id": 204681277,
        "sender_full_name": "aspen",
        "timestamp": 1595431677
    },
    {
        "content": "<p>i'll make it a target feature ig</p>",
        "id": 204682443,
        "sender_full_name": "aspen",
        "timestamp": 1595432144
    },
    {
        "content": "<p>ha</p>",
        "id": 204685865,
        "sender_full_name": "aspen",
        "timestamp": 1595433657
    },
    {
        "content": "<p>it worked i guess?</p>",
        "id": 204685877,
        "sender_full_name": "aspen",
        "timestamp": 1595433660
    },
    {
        "content": "<p><code>%22 = call i64 @llvm.ptrauth.sign.i64(i64 ptrtoint (i1 (%\"objc::runtime::Sel\"*, %\"core::fmt::Formatter\"*)* @\"_ZN55_$LT$objc..runtime..Sel$u20$as$u20$core..fmt..Debug$GT$3fmt17h6bea5d1d34e30595E\" to i64), i32 0, i64 0)</code></p>",
        "id": 204685883,
        "sender_full_name": "aspen",
        "timestamp": 1595433662
    },
    {
        "content": "<p>good news: it compiles</p>",
        "id": 204686650,
        "sender_full_name": "aspen",
        "timestamp": 1595433967
    },
    {
        "content": "<p>bad news: it crashes on my iPhone</p>",
        "id": 204686659,
        "sender_full_name": "aspen",
        "timestamp": 1595433973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> is there any way to inspect the LLVM IR of libstd/etc?</p>",
        "id": 204701594,
        "sender_full_name": "aspen",
        "timestamp": 1595441315
    },
    {
        "content": "<p>actually</p>",
        "id": 204702096,
        "sender_full_name": "aspen",
        "timestamp": 1595441546
    },
    {
        "content": "<p>libstd is somehow still getting PACced</p>",
        "id": 204702117,
        "sender_full_name": "aspen",
        "timestamp": 1595441559
    },
    {
        "content": "<p>or well the call to it is</p>",
        "id": 204702126,
        "sender_full_name": "aspen",
        "timestamp": 1595441565
    },
    {
        "content": "<p>oh.</p>",
        "id": 204703586,
        "sender_full_name": "aspen",
        "timestamp": 1595442249
    },
    {
        "content": "<p>\"everything has to be PAC or nothing\"</p>",
        "id": 204703603,
        "sender_full_name": "aspen",
        "timestamp": 1595442256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Would you know if libstd is obtaining external pointers (aka not going through reify-ing and being signed)?</p>",
        "id": 204704645,
        "sender_full_name": "aspen",
        "timestamp": 1595442739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204701594\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> is there any way to inspect the LLVM IR of libstd/etc?</p>\n</blockquote>\n<p>You can use <code>--emit llvm-ir</code> as rustc argument while compiling libstd</p>",
        "id": 204706808,
        "sender_full_name": "bjorn3",
        "timestamp": 1595443773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204704645\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> Would you know if libstd is obtaining external pointers (aka not going through reify-ing and being signed)?</p>\n</blockquote>\n<p>Take a look at the <code>core::fmt</code> module. It does crazy stuff with pointers to implement dynamic dispatch without actually using trait objects. Maybe the problem is somewhere there?</p>",
        "id": 204707054,
        "sender_full_name": "bjorn3",
        "timestamp": 1595443877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204686659\">said</a>:</p>\n<blockquote>\n<p>bad news: it crashes on my iPhone</p>\n</blockquote>\n<p>Can you attach a debugger using XCode to get a backtrace?</p>",
        "id": 204707403,
        "sender_full_name": "bjorn3",
        "timestamp": 1595444007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204707054\">said</a>:</p>\n<blockquote>\n<p>Take a look at the <code>core::fmt</code> module. It does crazy stuff with pointers to implement dynamic dispatch without actually using trait objects.</p>\n</blockquote>\n<p>Ugh. This also bit us in AVR land.</p>",
        "id": 204707624,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595444104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204707624\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204707054\">said</a>:</p>\n<blockquote>\n<p>Take a look at the <code>core::fmt</code> module. It does crazy stuff with pointers to implement dynamic dispatch without actually using trait objects.</p>\n</blockquote>\n<p>Ugh. This also bit us in AVR land.</p>\n</blockquote>\n<p>funnily enough, core::fmt is what crashed on my iPhone</p>",
        "id": 204707805,
        "sender_full_name": "aspen",
        "timestamp": 1595444176
    },
    {
        "content": "<p>also i have a backtrace</p>",
        "id": 204707870,
        "sender_full_name": "aspen",
        "timestamp": 1595444211
    },
    {
        "content": "<p>it's a pain to get it off my phone so gimme a second</p>",
        "id": 204707924,
        "sender_full_name": "aspen",
        "timestamp": 1595444237
    },
    {
        "content": "<p>Ok, the other thing I would have suggested would be <code>libstd/sys/unix/weak.rs</code>, which does <code>transmute_copy(dlsym() as usize)</code> where the target type is often a funciton pointer.</p>",
        "id": 204708069,
        "sender_full_name": "bjorn3",
        "timestamp": 1595444295
    },
    {
        "content": "<p>here, <a href=\"https://ghostbin.co/paste/ds27r\">https://ghostbin.co/paste/ds27r</a></p>",
        "id": 204708116,
        "sender_full_name": "aspen",
        "timestamp": 1595444313
    },
    {
        "content": "<p>altho that's likely because \"PAC-less libstd, PAC binary\"</p>",
        "id": 204708287,
        "sender_full_name": "aspen",
        "timestamp": 1595444387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> how would I ptrauth sign the function pointers in <a href=\"http://weak.rs\">weak.rs</a> / core fmt stuff?</p>",
        "id": 204708689,
        "sender_full_name": "aspen",
        "timestamp": 1595444561
    },
    {
        "content": "<p>For fmt: does transmuting from one signature to the other affect signing?</p>",
        "id": 204709407,
        "sender_full_name": "bjorn3",
        "timestamp": 1595444923
    },
    {
        "content": "<p>For weak: does dlsym return a signed pointer or not?</p>",
        "id": 204709426,
        "sender_full_name": "bjorn3",
        "timestamp": 1595444942
    },
    {
        "content": "<p>i'm just using 0 as the key for everything rn</p>",
        "id": 204709434,
        "sender_full_name": "aspen",
        "timestamp": 1595444946
    },
    {
        "content": "<p>and yeah dlsym does return a signed pointer</p>",
        "id": 204709463,
        "sender_full_name": "aspen",
        "timestamp": 1595444970
    },
    {
        "content": "<p>wait does it, lemme ask</p>",
        "id": 204709481,
        "sender_full_name": "aspen",
        "timestamp": 1595444985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204709407\">said</a>:</p>\n<blockquote>\n<p>For fmt: does transmuting from one signature to the other affect signing?</p>\n</blockquote>\n<p>wait what do you mean by this</p>",
        "id": 204709585,
        "sender_full_name": "aspen",
        "timestamp": 1595445034
    },
    {
        "content": "<p>If so then both should technically work.</p>",
        "id": 204709600,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445043
    },
    {
        "content": "<p>Does <code>transmute::&lt;fn(), fn(usize)&gt;(fun)(1)</code> work assuming that the abi allows it? Or does it require the function pointer to be signed differently?</p>",
        "id": 204709686,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445114
    },
    {
        "content": "<p>the main issue is that \"Cannot lower direct authenticated call to unauthenticated target\" in libstd</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"c1\">// Functions should never be ptrauth-called directly.</span>\n  <span class=\"c1\">// We could lower these to direct unauthenticated calls, but for that to</span>\n  <span class=\"c1\">// occur, there must have been a semantic mismatch somewhere leading to this</span>\n  <span class=\"c1\">// arguably incorrect IR.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isa</span><span class=\"o\">&lt;</span><span class=\"n\">Function</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">CalleeV</span><span class=\"p\">))</span>\n    <span class=\"n\">report_fatal_error</span><span class=\"p\">(</span><span class=\"s\">&quot;Cannot lower direct authenticated call to&quot;</span>\n                       <span class=\"s\">&quot; unauthenticated target&quot;</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 204709753,
        "sender_full_name": "aspen",
        "timestamp": 1595445143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> also dlsym doesn't return a signed pointer, the sig would be added when it's casted to a function</p>",
        "id": 204709786,
        "sender_full_name": "aspen",
        "timestamp": 1595445166
    },
    {
        "content": "<p><code>weak.rs</code> doesn't cast, it transmutes, which is the only way to go from <code>usize</code> to <code>fn()</code>.</p>",
        "id": 204709845,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445205
    },
    {
        "content": "<p>well, to have an <code>usize</code> of a function you will need to obtain the function pointer at some point anyway</p>",
        "id": 204709968,
        "sender_full_name": "nagisa",
        "timestamp": 1595445266
    },
    {
        "content": "<p>Can you recompile libstd without optimizations and preferably with <code>-Z symbol-mangling-version=v0</code>? That would give a much more helpful backtrace.</p>",
        "id": 204709975,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445270
    },
    {
        "content": "<p>i'd prefer to get libstd to compile with PAC, which would hopefully not cause that crash</p>",
        "id": 204710006,
        "sender_full_name": "aspen",
        "timestamp": 1595445294
    },
    {
        "content": "<p>the cast from <code>usize</code>s to <code>fn()</code> doesn’t matter in that respect. The casts from <code>fn() {concrete}</code> to <code>fn()</code> or <code>usize</code> do.</p>",
        "id": 204710028,
        "sender_full_name": "nagisa",
        "timestamp": 1595445303
    },
    {
        "content": "<p>as i'm 99% sure that crash is caused by mixing PAC user code with non-PAC core/std code</p>",
        "id": 204710054,
        "sender_full_name": "aspen",
        "timestamp": 1595445307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204709968\">said</a>:</p>\n<blockquote>\n<p>well, to have an <code>usize</code> of a function you will need to obtain the function pointer at some point anyway</p>\n</blockquote>\n<p>That <code>usize</code> is returned by <code>dlsym</code>, which returns unsigned pointers.</p>",
        "id": 204710062,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445312
    },
    {
        "content": "<p>there's no way to logically do anything with that then</p>",
        "id": 204710116,
        "sender_full_name": "nagisa",
        "timestamp": 1595445347
    },
    {
        "content": "<p>how does dlsym work in clang</p>",
        "id": 204710130,
        "sender_full_name": "nagisa",
        "timestamp": 1595445359
    },
    {
        "content": "<p>let me get the IR output of an example I was given of dlsym?</p>",
        "id": 204710203,
        "sender_full_name": "aspen",
        "timestamp": 1595445381
    },
    {
        "content": "<p>if it doesn’t there, it won’t here.</p>",
        "id": 204710205,
        "sender_full_name": "nagisa",
        "timestamp": 1595445383
    },
    {
        "content": "<p>not so much interested in the IR as to whether it works at all.</p>",
        "id": 204710239,
        "sender_full_name": "nagisa",
        "timestamp": 1595445404
    },
    {
        "content": "<p>yeah but the IR will show if it's being signed or not</p>",
        "id": 204710272,
        "sender_full_name": "aspen",
        "timestamp": 1595445424
    },
    {
        "content": "<p>signing would need to happen _inside_ of dlsym though.</p>",
        "id": 204710291,
        "sender_full_name": "nagisa",
        "timestamp": 1595445436
    },
    {
        "content": "<p><a href=\"https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-3.html\">https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-3.html</a></p>\n<blockquote>\n<p>With PAC enabled, dlsym will sign returned function pointers with context zero (as no sensible context value is available to the caller) before returning them</p>\n</blockquote>",
        "id": 204710309,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445454
    },
    {
        "content": "<p>possibly somewhere inside of the actual loader-linker, not even in the dlsym itself.</p>",
        "id": 204710378,
        "sender_full_name": "nagisa",
        "timestamp": 1595445483
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">; Function Attrs: noinline nounwind optnone ssp uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@main</span><span class=\"p\">()</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"k\">i32</span> <span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*)*,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"vg\">@dlsym</span><span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">inttoptr</span> <span class=\"p\">(</span><span class=\"k\">i64</span> <span class=\"m\">-2</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*),</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">([</span><span class=\"m\">5</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"m\">5</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*</span> <span class=\"vg\">@.str</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">))</span>\n  <span class=\"k\">store</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">**</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"k\">i8</span><span class=\"p\">**</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%4</span> <span class=\"k\">to</span> <span class=\"k\">i32</span> <span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*)*</span>\n  <span class=\"k\">store</span> <span class=\"k\">i32</span> <span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*)*</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*)**</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%6</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i32</span> <span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*)*,</span> <span class=\"k\">i32</span> <span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*)**</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%7</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">i32</span> <span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">([</span><span class=\"m\">3</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"m\">3</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*</span> <span class=\"vg\">@.str.1</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">))</span> <span class=\"p\">[</span> <span class=\"s\">&quot;ptrauth&quot;</span><span class=\"p\">(</span><span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">0</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"m\">0</span>\n</code></pre></div>",
        "id": 204710431,
        "sender_full_name": "aspen",
        "timestamp": 1595445524
    },
    {
        "content": "<p>what does \"PAC enabled\" mean in terms of the loader and the C standard library?</p>",
        "id": 204710516,
        "sender_full_name": "nagisa",
        "timestamp": 1595445587
    },
    {
        "content": "<p>does it mean a different loader needs to be used? Different <code>libc</code>?</p>",
        "id": 204710583,
        "sender_full_name": "nagisa",
        "timestamp": 1595445603
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/FcpV8zDlkTWyXQ66RV59DsUi/chrome_66yeTObajR.png\">chrome_66yeTObajR.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/FcpV8zDlkTWyXQ66RV59DsUi/chrome_66yeTObajR.png\" title=\"chrome_66yeTObajR.png\"><img src=\"/user_uploads/4715/FcpV8zDlkTWyXQ66RV59DsUi/chrome_66yeTObajR.png\"></a></div>",
        "id": 204710601,
        "sender_full_name": "aspen",
        "timestamp": 1595445613
    },
    {
        "content": "<p>some flag on the binary?</p>",
        "id": 204710605,
        "sender_full_name": "nagisa",
        "timestamp": 1595445615
    },
    {
        "content": "<p>Can you compile <code>libstd</code> with <code>--emit llvm-ir</code> and then <code>grep call | grep ptrauth</code> on the ir to narrow down the possible sources of the signed direct call?</p>",
        "id": 204710637,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445638
    },
    {
        "content": "<p>with Mach-O binaries, cpu subtype 0x2 (ARM64E) usually means PAC-enabled</p>",
        "id": 204710646,
        "sender_full_name": "aspen",
        "timestamp": 1595445646
    },
    {
        "content": "<p>in that case do as <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> suggested – compile libstd directly with rustc, <code>--emit llvm-ir</code> and spelunk from there. I don't actually have you a step-by-step for this though as x.py is not exactly the most pleasant thing to pass things through or for figuring out what rustc or flags are actually used to run the failing invocation.</p>",
        "id": 204710834,
        "sender_full_name": "nagisa",
        "timestamp": 1595445767
    },
    {
        "content": "<p>/me remembers the short life of <code>--on-fail</code>...</p>",
        "id": 204710963,
        "sender_full_name": "nagisa",
        "timestamp": 1595445835
    },
    {
        "content": "<p>You can pass <code>-vv</code> to x.py to get the exact rustc invocation for libstd and then run that command again with <code>--emit llvm-ir</code> instead of the existing <code>--emit</code> flag.</p>",
        "id": 204711035,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> is there no longer a wrapper rustc that will just fail because there's no variables it requires in environment?</p>",
        "id": 204711086,
        "sender_full_name": "nagisa",
        "timestamp": 1595445897
    },
    {
        "content": "<p>If you pass <code>-vv</code> that wrapper will print the actual rustc invocation.</p>",
        "id": 204711123,
        "sender_full_name": "bjorn3",
        "timestamp": 1595445922
    },
    {
        "content": "<p>got it.</p>",
        "id": 204711137,
        "sender_full_name": "nagisa",
        "timestamp": 1595445928
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/a0Sf876wulrGEDb3DNyPIXDa/chrome_w2cDEl9c9t.png\">chrome_w2cDEl9c9t.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/a0Sf876wulrGEDb3DNyPIXDa/chrome_w2cDEl9c9t.png\" title=\"chrome_w2cDEl9c9t.png\"><img src=\"/user_uploads/4715/a0Sf876wulrGEDb3DNyPIXDa/chrome_w2cDEl9c9t.png\"></a></div>",
        "id": 204711798,
        "sender_full_name": "aspen",
        "timestamp": 1595446300
    },
    {
        "content": "<p>transmuting to a fnptr should probably just always strip and sign</p>",
        "id": 204712444,
        "sender_full_name": "aspen",
        "timestamp": 1595446565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <code>thread 'main' panicked at 'RUSTC_STAGE was not set: NotPresent', src/bootstrap/bin/rustc.rs:48:17</code></p>",
        "id": 204713457,
        "sender_full_name": "aspen",
        "timestamp": 1595447148
    },
    {
        "content": "<p>can't just copy-paste the -vv command</p>",
        "id": 204713466,
        "sender_full_name": "aspen",
        "timestamp": 1595447156
    },
    {
        "content": "<p>ok there</p>",
        "id": 204713820,
        "sender_full_name": "aspen",
        "timestamp": 1595447364
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/nt0b3d8b6Bol_3hQgncEazp-/std-41925f8d57880a33.ll\">std-41925f8d57880a33.ll</a>  <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 204713976,
        "sender_full_name": "aspen",
        "timestamp": 1595447446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312033\">aspen</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204712444\">said</a>:</p>\n<blockquote>\n<p>transmuting to a fnptr should probably just always strip and sign</p>\n</blockquote>\n<p>I disagree, mostly because the whole point of signing function pointers in the first place gets lost.</p>",
        "id": 204714170,
        "sender_full_name": "nagisa",
        "timestamp": 1595447553
    },
    {
        "content": "<p>is that IR file I posted helpful?</p>",
        "id": 204714812,
        "sender_full_name": "aspen",
        "timestamp": 1595447884
    },
    {
        "content": "<p>there are signed calls to non-function-pointer things in there, mostly related to thread locals.</p>",
        "id": 204714974,
        "sender_full_name": "nagisa",
        "timestamp": 1595447973
    },
    {
        "content": "<p>oh, hm</p>",
        "id": 204715073,
        "sender_full_name": "aspen",
        "timestamp": 1595448012
    },
    {
        "content": "<p>the ptrauth bundle should only be added to things that are a FnPtr</p>",
        "id": 204715112,
        "sender_full_name": "aspen",
        "timestamp": 1595448030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> can you remove the <code>-Copt-level</code> / <code>-O</code> flags and make another llvm-ir dump (please compress it with at least gzip too)</p>",
        "id": 204715153,
        "sender_full_name": "nagisa",
        "timestamp": 1595448050
    },
    {
        "content": "<p>sure</p>",
        "id": 204715183,
        "sender_full_name": "aspen",
        "timestamp": 1595448060
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/X1h7kGFgf1YIi6bg5ZRhbfuU/std-41925f8d57880a33.ll.gz\">std-41925f8d57880a33.ll.gz</a> with opt level 0</p>",
        "id": 204715593,
        "sender_full_name": "aspen",
        "timestamp": 1595448257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it might be trait related?</p>",
        "id": 204716002,
        "sender_full_name": "aspen",
        "timestamp": 1595448477
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/kbcQYQ1ESoRbyYARUESeNjAl/chrome_X2nOLXs6hR.png\">chrome_X2nOLXs6hR.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kbcQYQ1ESoRbyYARUESeNjAl/chrome_X2nOLXs6hR.png\" title=\"chrome_X2nOLXs6hR.png\"><img src=\"/user_uploads/4715/kbcQYQ1ESoRbyYARUESeNjAl/chrome_X2nOLXs6hR.png\"></a></div>",
        "id": 204716118,
        "sender_full_name": "aspen",
        "timestamp": 1595448517
    },
    {
        "content": "<p>could be</p>",
        "id": 204716324,
        "sender_full_name": "nagisa",
        "timestamp": 1595448610
    },
    {
        "content": "<p>looking at unopt llvm ir will tell</p>",
        "id": 204716369,
        "sender_full_name": "nagisa",
        "timestamp": 1595448629
    },
    {
        "content": "<p>yeah that's what i just posted / where he got that from</p>",
        "id": 204716395,
        "sender_full_name": "aspen",
        "timestamp": 1595448646
    },
    {
        "content": "<p><code>__getit</code> is part of the tls implementation in libstd</p>",
        "id": 204716415,
        "sender_full_name": "bjorn3",
        "timestamp": 1595448657
    },
    {
        "content": "<p>thread locals seem to be a common factor here.</p>",
        "id": 204716462,
        "sender_full_name": "aspen",
        "timestamp": 1595448678
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/xHyR6iNlojOdgzx_GKfhnH5x/chrome_Eo00ks3yQQ.png\">chrome_Eo00ks3yQQ.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/xHyR6iNlojOdgzx_GKfhnH5x/chrome_Eo00ks3yQQ.png\" title=\"chrome_Eo00ks3yQQ.png\"><img src=\"/user_uploads/4715/xHyR6iNlojOdgzx_GKfhnH5x/chrome_Eo00ks3yQQ.png\"></a></div>",
        "id": 204716599,
        "sender_full_name": "aspen",
        "timestamp": 1595448737
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src/libstd/thread/local.rs#L262\">https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src/libstd/thread/local.rs#L262</a></p>",
        "id": 204716615,
        "sender_full_name": "bjorn3",
        "timestamp": 1595448744
    },
    {
        "content": "<p>this is originally an indirect call, but it gets optimized to a direct call</p>",
        "id": 204716672,
        "sender_full_name": "bjorn3",
        "timestamp": 1595448766
    },
    {
        "content": "<p>hm, so that needs to get signed.</p>",
        "id": 204716719,
        "sender_full_name": "aspen",
        "timestamp": 1595448786
    },
    {
        "content": "<p>huh, not exactly a trait vtable</p>",
        "id": 204716724,
        "sender_full_name": "nagisa",
        "timestamp": 1595448790
    },
    {
        "content": "<p>rather its <code>unsafe fn</code></p>",
        "id": 204716807,
        "sender_full_name": "nagisa",
        "timestamp": 1595448836
    },
    {
        "content": "<p>\"where rustc builds constants that contain function pointers, like these @allocNNN symbols with __getit implementations in them, you might need another compiler modification to create signed constant values\"</p>",
        "id": 204716865,
        "sender_full_name": "aspen",
        "timestamp": 1595448848
    },
    {
        "content": "<p><code>LocalKey::new</code> is called at runtime: <a href=\"https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src/libstd/thread/local.rs#L179\">https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src/libstd/thread/local.rs#L179</a></p>",
        "id": 204716982,
        "sender_full_name": "bjorn3",
        "timestamp": 1595448907
    },
    {
        "content": "<p><a href=\"https://github.com/apple/llvm-project/blob/apple/master/llvm/docs/PointerAuth.md#authenticated-global-relocation\">https://github.com/apple/llvm-project/blob/apple/master/llvm/docs/PointerAuth.md#authenticated-global-relocation</a></p>",
        "id": 204717063,
        "sender_full_name": "aspen",
        "timestamp": 1595448953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> this could be the <code>mir::CastKind::Pointer(PointerCast::UnsafeFnPointer)</code> cast in <code>src/librustc_codegen_ssa/mir/rvalue.rs</code></p>",
        "id": 204717081,
        "sender_full_name": "nagisa",
        "timestamp": 1595448961
    },
    {
        "content": "<p>but can’t really check right now</p>",
        "id": 204717130,
        "sender_full_name": "nagisa",
        "timestamp": 1595448966
    },
    {
        "content": "<p>It is LLVM that then specializes the <code>try_with</code> method to call the given function pointer as a direct call.</p>",
        "id": 204717131,
        "sender_full_name": "bjorn3",
        "timestamp": 1595448967
    },
    {
        "content": "<p>either way there's a reification going on here as well, its just not from <code>fn() {concrete}</code> to <code>fn()</code> but from <code>unsafe fn() {concrete}</code> to <code>unsafe fn()</code>.</p>",
        "id": 204717179,
        "sender_full_name": "nagisa",
        "timestamp": 1595448994
    },
    {
        "content": "<p>should be trivial to make a self-contained reproducer too.</p>",
        "id": 204717195,
        "sender_full_name": "nagisa",
        "timestamp": 1595449007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah this is exactly the same thing they hit when they originally tried to build without signing any function pointers and just calling with ptrauth</p>",
        "id": 204717292,
        "sender_full_name": "nagisa",
        "timestamp": 1595449051
    },
    {
        "content": "<p>The problem here is that a indirect call gets turned into a direct call by LLVM without removing the \"ptrauth\" metadata from the call.</p>",
        "id": 204717324,
        "sender_full_name": "bjorn3",
        "timestamp": 1595449071
    },
    {
        "content": "<p>it actually happened earlier (in backtrace) when not signing anything</p>",
        "id": 204717418,
        "sender_full_name": "aspen",
        "timestamp": 1595449098
    },
    {
        "content": "<p>there's a global for authenticated relocations / signed pointers</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"vg\">@fp.ptrauth</span> <span class=\"p\">=</span> <span class=\"k\">constant</span> <span class=\"p\">{</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i64</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"p\">}</span>\n                       <span class=\"p\">{</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"p\">&lt;</span><span class=\"err\">value</span><span class=\"p\">&gt;,</span>\n                         <span class=\"k\">i32</span> <span class=\"p\">&lt;</span><span class=\"err\">key</span><span class=\"p\">&gt;,</span>\n                         <span class=\"k\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">address</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;,</span>\n                         <span class=\"k\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">integer</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;</span>\n                       <span class=\"p\">},</span> <span class=\"k\">section</span> <span class=\"s\">&quot;llvm.ptrauth&quot;</span>\n</code></pre></div>",
        "id": 204717551,
        "sender_full_name": "aspen",
        "timestamp": 1595449175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204716982\">said</a>:</p>\n<blockquote>\n<p><code>LocalKey::new</code> is called at runtime: <a href=\"https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src/libstd/thread/local.rs#L179\">https://github.com/rust-lang/rust/blob/23744c84d9c0f8e4e870edb983f1ad6d33449c34/src/libstd/thread/local.rs#L179</a></p>\n</blockquote>\n<p>my bad, it is called in a static initializer</p>",
        "id": 204718236,
        "sender_full_name": "bjorn3",
        "timestamp": 1595449514
    },
    {
        "content": "<p>oh. That could mean changes in miri or whatever part of it we have in rustc for consteval might be necessary.</p>",
        "id": 204718526,
        "sender_full_name": "nagisa",
        "timestamp": 1595449655
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 204718564,
        "sender_full_name": "nagisa",
        "timestamp": 1595449672
    },
    {
        "content": "<p>signing immediates in <code>mir::CastKind::Pointer(PointerCast::UnsafeFnPointer)</code> didn't help seemingly.</p>",
        "id": 204718605,
        "sender_full_name": "aspen",
        "timestamp": 1595449683
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/eKspjXejCZF6x-TGRykm30x3/chrome_Dq6SduiRy5.png\">chrome_Dq6SduiRy5.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/eKspjXejCZF6x-TGRykm30x3/chrome_Dq6SduiRy5.png\" title=\"chrome_Dq6SduiRy5.png\"><img src=\"/user_uploads/4715/eKspjXejCZF6x-TGRykm30x3/chrome_Dq6SduiRy5.png\"></a></div>",
        "id": 204718749,
        "sender_full_name": "aspen",
        "timestamp": 1595449778
    },
    {
        "content": "<p>You will need to change <a href=\"https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_codegen_llvm/common.rs#L259\">https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_codegen_llvm/common.rs#L259</a> for signed pointers in consts and statics.</p>",
        "id": 204719151,
        "sender_full_name": "bjorn3",
        "timestamp": 1595449986
    },
    {
        "content": "<p>I guess more broadly speaking anywhere where <code>get_fn_addr</code> is invoked you might want to do it</p>",
        "id": 204719391,
        "sender_full_name": "nagisa",
        "timestamp": 1595450147
    },
    {
        "content": "<p>or perhaps move signing to <code>get_fn_addr</code> instead?</p>",
        "id": 204719406,
        "sender_full_name": "nagisa",
        "timestamp": 1595450154
    },
    {
        "content": "<p>That screenshot says that runtime and static pointer signing happens differently, but <code>get_fn_addr</code> is used for both.</p>",
        "id": 204719560,
        "sender_full_name": "bjorn3",
        "timestamp": 1595450239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204719406\">said</a>:</p>\n<blockquote>\n<p>or perhaps move signing to <code>get_fn_addr</code> instead?</p>\n</blockquote>\n<p>can you access the <code>Bx</code> from CodegenCx?</p>",
        "id": 204720103,
        "sender_full_name": "aspen",
        "timestamp": 1595450508
    },
    {
        "content": "<p><code>cx.bx</code> I think.</p>",
        "id": 204720211,
        "sender_full_name": "nagisa",
        "timestamp": 1595450552
    },
    {
        "content": "<p>No, only the opposite way. A builder has access to a CodegenCx, but a CodegenCx can be used by multiple builders.</p>",
        "id": 204720297,
        "sender_full_name": "bjorn3",
        "timestamp": 1595450598
    },
    {
        "content": "<p>since well, signing uses ptrtoint/inttoptr</p>",
        "id": 204720349,
        "sender_full_name": "aspen",
        "timestamp": 1595450627
    },
    {
        "content": "<p>What is the link in the screenshot?</p>",
        "id": 204720436,
        "sender_full_name": "bjorn3",
        "timestamp": 1595450657
    },
    {
        "content": "<p><a href=\"https://github.com/apple/llvm-project/blob/apple/master/llvm/docs/PointerAuth.md#authenticated-global-relocation\">https://github.com/apple/llvm-project/blob/apple/master/llvm/docs/PointerAuth.md#authenticated-global-relocation</a></p>",
        "id": 204720447,
        "sender_full_name": "aspen",
        "timestamp": 1595450666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> src/librustc_codegen_llvm/callee.rs in get_fn you can just use raw LLVM API at this point.</p>",
        "id": 204720494,
        "sender_full_name": "nagisa",
        "timestamp": 1595450696
    },
    {
        "content": "<p>(<code>get_fn</code> is called directly by <code>get_fn_addr</code>)</p>",
        "id": 204720538,
        "sender_full_name": "nagisa",
        "timestamp": 1595450720
    },
    {
        "content": "<p>though idk if you'll have the basic block to codegen into?</p>",
        "id": 204720658,
        "sender_full_name": "nagisa",
        "timestamp": 1595450764
    },
    {
        "content": "<p>hm</p>",
        "id": 204720674,
        "sender_full_name": "nagisa",
        "timestamp": 1595450770
    },
    {
        "content": "<p>for constants you wouldn’t have anything like that anyway</p>",
        "id": 204720692,
        "sender_full_name": "nagisa",
        "timestamp": 1595450784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Pointer.20authentication.20support.20in.20Rust's.20LLVM.20codegen/near/204720658\">said</a>:</p>\n<blockquote>\n<p>though idk if you'll have the basic block to codegen into?</p>\n</blockquote>\n<p>that is called the builder.</p>",
        "id": 204720784,
        "sender_full_name": "bjorn3",
        "timestamp": 1595450818
    },
    {
        "content": "<p>for constants the pointer signing works by having a special type and putting it in a certain section.</p>",
        "id": 204720848,
        "sender_full_name": "bjorn3",
        "timestamp": 1595450852
    },
    {
        "content": "<p>ye and how would i do that</p>",
        "id": 204721769,
        "sender_full_name": "aspen",
        "timestamp": 1595451314
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/2C2KHUy8Gvi_6xmu52ExzBCq/chrome_DKKkWhvRu5.png\">chrome_DKKkWhvRu5.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/2C2KHUy8Gvi_6xmu52ExzBCq/chrome_DKKkWhvRu5.png\" title=\"chrome_DKKkWhvRu5.png\"><img src=\"/user_uploads/4715/2C2KHUy8Gvi_6xmu52ExzBCq/chrome_DKKkWhvRu5.png\"></a></div>",
        "id": 204722710,
        "sender_full_name": "aspen",
        "timestamp": 1595451766
    },
    {
        "content": "<p>i need to figure out how to create global constants in that format</p>",
        "id": 204722920,
        "sender_full_name": "aspen",
        "timestamp": 1595451890
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8926bb497d9b127eb318aea5aed0e745d8381591/src/librustc_codegen_llvm/debuginfo/gdb.rs#L50\">https://github.com/rust-lang/rust/blob/8926bb497d9b127eb318aea5aed0e745d8381591/src/librustc_codegen_llvm/debuginfo/gdb.rs#L50</a></p>",
        "id": 204722969,
        "sender_full_name": "bjorn3",
        "timestamp": 1595451915
    },
    {
        "content": "<p>So search for calls to <code>define_global</code>?</p>",
        "id": 204723018,
        "sender_full_name": "aspen",
        "timestamp": 1595451943
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src/librustc_codegen_llvm/consts.rs#L81\">https://github.com/rust-lang/rust/blob/9e92106d457abd14f82adc29e7f2496861e07916/src/librustc_codegen_llvm/consts.rs#L81</a></p>",
        "id": 204723147,
        "sender_full_name": "bjorn3",
        "timestamp": 1595451995
    },
    {
        "content": "<p>the other link was for setting the section name. this one for creating a const struct.</p>",
        "id": 204723188,
        "sender_full_name": "bjorn3",
        "timestamp": 1595452023
    },
    {
        "content": "<p>ah</p>",
        "id": 204723197,
        "sender_full_name": "aspen",
        "timestamp": 1595452027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> am i starting this right?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_struct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">const_struct</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">llvals</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">use_pac</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">b&quot;llvm.ptrauth</span><span class=\"se\">\\0</span><span class=\"s\">&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMSetSection</span><span class=\"p\">(</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const_struct</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204723538,
        "sender_full_name": "aspen",
        "timestamp": 1595452284
    },
    {
        "content": "<p>wait</p>",
        "id": 204723733,
        "sender_full_name": "aspen",
        "timestamp": 1595452391
    },
    {
        "content": "<p>The if should be around everything.</p>",
        "id": 204723738,
        "sender_full_name": "bjorn3",
        "timestamp": 1595452393
    },
    {
        "content": "<p>Is <code>const_alloc_to_llvm</code> the right place to do this, even?</p>",
        "id": 204723753,
        "sender_full_name": "aspen",
        "timestamp": 1595452407
    },
    {
        "content": "<p>I'm confused.</p>",
        "id": 204723834,
        "sender_full_name": "aspen",
        "timestamp": 1595452456
    },
    {
        "content": "<p>No, <a href=\"https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_codegen_llvm/common.rs#L259\">https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_codegen_llvm/common.rs#L259</a> is</p>",
        "id": 204723836,
        "sender_full_name": "bjorn3",
        "timestamp": 1595452457
    },
    {
        "content": "<p>oh, my bad</p>",
        "id": 204723857,
        "sender_full_name": "aspen",
        "timestamp": 1595452475
    },
    {
        "content": "<p>If I understand the document correctly for PAC you need to make a const struct with the right format and section, then load the pointer field from that struct and return it.</p>",
        "id": 204724062,
        "sender_full_name": "bjorn3",
        "timestamp": 1595452641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> this is prolly wrong but a start?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"n\">GlobalAlloc</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">fn_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_fn_addr</span><span class=\"p\">(</span><span class=\"n\">fn_instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">use_pac</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">b&quot;llvm.ptrauth</span><span class=\"se\">\\0</span><span class=\"s\">&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llvals</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">fn_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_i8p_ext</span><span class=\"p\">(</span><span class=\"n\">base_addr_space</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_struct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_struct</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">llvals</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMSetSection</span><span class=\"p\">(</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">const_struct</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">fn_addr</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"n\">fn_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_layout</span><span class=\"p\">().</span><span class=\"n\">instruction_address_space</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204732595,
        "sender_full_name": "aspen",
        "timestamp": 1595458759
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Invalid bitcast\ni64* bitcast (&lt;{ i8*, i32, i64, i64 }&gt; &lt;{ i8* bitcast (i1 (i64*, %&quot;fmt::Formatter&quot;*)* @_ZN4core3ops8function6FnOnce9call_once17h308963fb3a4be439E.llvm.770221769397704865 to i8*), i32 0, i64 0, i64 0 }&gt; to i64*)\nin function _ZN4core3fmt10ArgumentV110from_usize17h7c95b3070fdad98eE\nLLVM ERROR: Broken function found, compilation aborted!\n</code></pre></div>",
        "id": 204739130,
        "sender_full_name": "aspen",
        "timestamp": 1595464434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> i messed up the constant signing thing but idk how?</p>",
        "id": 204751325,
        "sender_full_name": "aspen",
        "timestamp": 1595466184
    },
    {
        "content": "<p>You need to extract the pointer field from the struct.</p>",
        "id": 204763914,
        "sender_full_name": "bjorn3",
        "timestamp": 1595485100
    },
    {
        "content": "<p>huh?</p>",
        "id": 204828069,
        "sender_full_name": "aspen",
        "timestamp": 1595525659
    },
    {
        "content": "<p><code>const_struct</code> is has type <code>{i8*, i32, i64, i64}</code>, not a function pointer. You need to get the first field of <code>const_struct</code> and cast it cack to a function pointer.</p>",
        "id": 204828257,
        "sender_full_name": "bjorn3",
        "timestamp": 1595525764
    },
    {
        "content": "<p>Ohhh. Uh, how do I do that?</p>",
        "id": 204828368,
        "sender_full_name": "aspen",
        "timestamp": 1595525839
    },
    {
        "content": "<p><a href=\"https://llvm.org/docs/LangRef.html#constant-expressions\">https://llvm.org/docs/LangRef.html#constant-expressions</a></p>",
        "id": 204828503,
        "sender_full_name": "bjorn3",
        "timestamp": 1595525904
    },
    {
        "content": "<p><code>extractvalue</code> + <code>bitcast</code></p>",
        "id": 204828607,
        "sender_full_name": "bjorn3",
        "timestamp": 1595525959
    },
    {
        "content": "<p>thanks</p>",
        "id": 204828622,
        "sender_full_name": "aspen",
        "timestamp": 1595525967
    },
    {
        "content": "<p><code>llvm::LLVMConstExtractValue</code> and <code>cx.const_bitcast</code> it seems</p>",
        "id": 204828989,
        "sender_full_name": "bjorn3",
        "timestamp": 1595526137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> LLVMConstExtractValue takes 2 indexes?</p>",
        "id": 204830439,
        "sender_full_name": "aspen",
        "timestamp": 1595526747
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMConstExtractValue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204830581,
        "sender_full_name": "aspen",
        "timestamp": 1595526820
    },
    {
        "content": "<p>it might be </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMConstExtractValue</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">llvals</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204830953,
        "sender_full_name": "aspen",
        "timestamp": 1595526971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> i got no clue what to pass as IdxList in LLVMConstExtractValue</p>",
        "id": 204833690,
        "sender_full_name": "aspen",
        "timestamp": 1595528229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312033\">@aspen</span> Seems that there is already a wrapper called <code>const_get_elt</code>: <a href=\"https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_codegen_llvm/common.rs#L134\">https://github.com/rust-lang/rust/blob/e22b61bff0bdd08be7665607cb7be3748c8a35d2/src/librustc_codegen_llvm/common.rs#L134</a></p>",
        "id": 204833738,
        "sender_full_name": "bjorn3",
        "timestamp": 1595528253
    },
    {
        "content": "<p>ah</p>",
        "id": 204833814,
        "sender_full_name": "aspen",
        "timestamp": 1595528280
    },
    {
        "content": "<p>i didn't know what that did</p>",
        "id": 204833859,
        "sender_full_name": "aspen",
        "timestamp": 1595528285
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"n\">GlobalAlloc</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">fn_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_fn_addr</span><span class=\"p\">(</span><span class=\"n\">fn_instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">use_pac</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">b&quot;llvm.ptrauth</span><span class=\"se\">\\0</span><span class=\"s\">&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llvals</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">fn_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_i8p</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_struct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_struct</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">llvals</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMSetSection</span><span class=\"p\">(</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_get_elt</span><span class=\"p\">(</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">fn_addr</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"n\">fn_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_layout</span><span class=\"p\">().</span><span class=\"n\">instruction_address_space</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204837236,
        "sender_full_name": "aspen",
        "timestamp": 1595529699
    },
    {
        "content": "<p><code>(signal: 11, SIGSEGV: invalid memory reference)</code></p>",
        "id": 204837254,
        "sender_full_name": "aspen",
        "timestamp": 1595529709
    },
    {
        "content": "<p>backtrace? to see which call is wrong.</p>",
        "id": 204837452,
        "sender_full_name": "bjorn3",
        "timestamp": 1595529781
    },
    {
        "content": "<p>there is no backtrace</p>",
        "id": 204837520,
        "sender_full_name": "aspen",
        "timestamp": 1595529816
    },
    {
        "content": "<p>rustc straight-up segfaults.</p>",
        "id": 204837529,
        "sender_full_name": "aspen",
        "timestamp": 1595529821
    },
    {
        "content": "<p>It's the <code>const_get_elt</code> causing a segfault.</p>",
        "id": 204839772,
        "sender_full_name": "aspen",
        "timestamp": 1595530820
    },
    {
        "content": "<p>Can you try a debugger? Or maybe enabling LLVM assertions helps?</p>",
        "id": 204844162,
        "sender_full_name": "bjorn3",
        "timestamp": 1595532999
    },
    {
        "content": "<p>how to enable LLVM assertions?</p>",
        "id": 204844647,
        "sender_full_name": "aspen",
        "timestamp": 1595533297
    },
    {
        "content": "<p>In the <code>[llvm]</code> section of <code>config.toml</code> set <code>assertions</code> to <code>true</code>. This will require rebuilding LLVM though, so using a debugger to get a backtrace may be much quicker.</p>",
        "id": 204844810,
        "sender_full_name": "bjorn3",
        "timestamp": 1595533362
    },
    {
        "content": "<p>well just running rustc by itself hangs</p>",
        "id": 204844847,
        "sender_full_name": "aspen",
        "timestamp": 1595533390
    },
    {
        "content": "<p>You can try getting a core dump: <a href=\"https://stackoverflow.com/questions/9412156/how-to-generate-core-dumps-in-mac-os-x\">https://stackoverflow.com/questions/9412156/how-to-generate-core-dumps-in-mac-os-x</a></p>",
        "id": 204844928,
        "sender_full_name": "bjorn3",
        "timestamp": 1595533440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>(lldb) bt\n* thread #1, stop reason = signal SIGSTOP\n  * frame #0: 0x00007fff66aa09de libsystem_kernel.dylib`__ulock_wait + 10\n    frame #1: 0x00007fff66b5b6de libsystem_pthread.dylib`_pthread_join + 358\n    frame #2: 0x000000010f045c20 libstd-0df675e1e2e78542.dylib`std::sys::unix::thread::Thread::join::h8bbc2457eb2c1f1b + 16\n    frame #3: 0x0000000109471903 librustc_driver-3d9795c7c19d0d03.dylib`std::thread::JoinHandle$LT$T$GT$::join::h3042544f480aa241 + 35\n    frame #4: 0x0000000109454b5d librustc_driver-3d9795c7c19d0d03.dylib`rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::h262735b5b5e37072 + 461\n    frame #5: 0x00000001094677b0 librustc_driver-3d9795c7c19d0d03.dylib`rustc_interface::interface::run_compiler::h0e2fd9601134eb12 + 112\n    frame #6: 0x00000001094783a0 librustc_driver-3d9795c7c19d0d03.dylib`rustc_driver::run_compiler::h6f7f421a8a344173 + 5616\n    frame #7: 0x000000010947296c librustc_driver-3d9795c7c19d0d03.dylib`_$LT$std..panic..AssertUnwindSafe$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$$LP$$RP$$GT$$GT$::call_once::hd292fb43f1b65c9d + 108\n    frame #8: 0x0000000109468801 librustc_driver-3d9795c7c19d0d03.dylib`std::panicking::try::h014b44a8bd0fd60c + 17\n    frame #9: 0x00000001093b40b5 librustc_driver-3d9795c7c19d0d03.dylib`rustc_driver::catch_with_exit_code::h8abe84d4c4935835 + 21\n    frame #10: 0x000000010947df7b librustc_driver-3d9795c7c19d0d03.dylib`rustc_driver::main::h4cd388b66fc85381 + 43\n    frame #11: 0x0000000109346f3e rustc`rustc_binary::main::h5e083a268a490654 + 14\n    frame #12: 0x0000000109346f06 rustc`std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::ha6a5aaa37343f0ab + 6\n    frame #13: 0x000000010f075785 libstd-0df675e1e2e78542.dylib`std::panicking::try::hb9c5d0feb4ab7b8d + 21\n    frame #14: 0x000000010f069719 libstd-0df675e1e2e78542.dylib`std::rt::lang_start_internal::he8c3ba1f11e99b99 + 137\n    frame #15: 0x0000000109346f69 rustc`main + 41\n    frame #16: 0x00007fff669693d5 libdyld.dylib`start + 1\n    frame #17: 0x00007fff669693d5 libdyld.dylib`start + 1\n</code></pre></div>",
        "id": 204846529,
        "sender_full_name": "aspen",
        "timestamp": 1595534309
    },
    {
        "content": "<p>Please use <code>bt all</code> to get a backtrace for all threads. That backtrace was just for the main thread, which almost immediately spawns a new thread for the compilation to happen in. (to prevent tls variables to conflict with potential other rustc compilations started from the same thread)</p>",
        "id": 204849374,
        "sender_full_name": "bjorn3",
        "timestamp": 1595535899
    },
    {
        "content": "<p>whoops, thanks. I was just following the stackoverflow thread that you linked!</p>",
        "id": 204849547,
        "sender_full_name": "aspen",
        "timestamp": 1595536006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <a href=\"https://ghostbin.co/paste/mzbx5\">https://ghostbin.co/paste/mzbx5</a></p>",
        "id": 204849955,
        "sender_full_name": "aspen",
        "timestamp": 1595536222
    },
    {
        "content": "<p>I can't quite figure out which thread is the crashing one. Can you try again with <code>-Ccodegen-units=1</code> to ensure that only one thread runs LLVM at a time?</p>",
        "id": 204850598,
        "sender_full_name": "bjorn3",
        "timestamp": 1595536571
    },
    {
        "content": "<p>sure</p>",
        "id": 204852096,
        "sender_full_name": "aspen",
        "timestamp": 1595537475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <a href=\"https://ghostbin.co/paste/5ydne\">https://ghostbin.co/paste/5ydne</a></p>",
        "id": 204854878,
        "sender_full_name": "aspen",
        "timestamp": 1595539253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    frame #0: 0x000000011217c41e librustc_driver-3d9795c7c19d0d03.dylib`llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const + 14\n    frame #1: 0x00000001131b8788 librustc_driver-3d9795c7c19d0d03.dylib`llvm::ConstantFoldLoadThroughBitcast(llvm::Constant*, llvm::Type*, llvm::DataLayout const&amp;) + 56\n</code></pre></div>",
        "id": 204855552,
        "sender_full_name": "bjorn3",
        "timestamp": 1595539701
    },
    {
        "content": "<p>hm?</p>",
        "id": 204855582,
        "sender_full_name": "aspen",
        "timestamp": 1595539732
    },
    {
        "content": "<p>I don't know why it wouldn't be allowed.</p>",
        "id": 204855992,
        "sender_full_name": "bjorn3",
        "timestamp": 1595539992
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/yDLSBhzpUS70H-Xvb91OWOop/chrome_Ikeg8MbXkw.png\">chrome_Ikeg8MbXkw.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/yDLSBhzpUS70H-Xvb91OWOop/chrome_Ikeg8MbXkw.png\" title=\"chrome_Ikeg8MbXkw.png\"><img src=\"/user_uploads/4715/yDLSBhzpUS70H-Xvb91OWOop/chrome_Ikeg8MbXkw.png\"></a></div>",
        "id": 204856055,
        "sender_full_name": "aspen",
        "timestamp": 1595540040
    },
    {
        "content": "<p>You sent the old code before the <code>const_get_elt</code> and <code>const_bitcast</code> addition.</p>",
        "id": 204856526,
        "sender_full_name": "bjorn3",
        "timestamp": 1595540332
    },
    {
        "content": "<p>oops</p>",
        "id": 204856539,
        "sender_full_name": "aspen",
        "timestamp": 1595540344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> i did send the newer code later, I was more trying to point to what he said about initializers</p>",
        "id": 204856813,
        "sender_full_name": "aspen",
        "timestamp": 1595540522
    },
    {
        "content": "<p>I think he was saying that you missed <code>const_get_elt</code> in the code you sent.</p>",
        "id": 204856952,
        "sender_full_name": "bjorn3",
        "timestamp": 1595540597
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/XdZMR_73t5FZ1R-AzPzGaA1t/chrome_0sI8216nq8.png\">chrome_0sI8216nq8.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/XdZMR_73t5FZ1R-AzPzGaA1t/chrome_0sI8216nq8.png\" title=\"chrome_0sI8216nq8.png\"><img src=\"/user_uploads/4715/XdZMR_73t5FZ1R-AzPzGaA1t/chrome_0sI8216nq8.png\"></a></div>",
        "id": 204856977,
        "sender_full_name": "aspen",
        "timestamp": 1595540614
    },
    {
        "content": "<p>this is my current code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"n\">GlobalAlloc</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">fn_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_fn_addr</span><span class=\"p\">(</span><span class=\"n\">fn_instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">use_pac</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">b&quot;llvm.ptrauth</span><span class=\"se\">\\0</span><span class=\"s\">&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llvals</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">fn_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_i8p</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_u64</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_struct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_struct</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">llvals</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMSetSection</span><span class=\"p\">(</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">section_name</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">().</span><span class=\"n\">cast</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_get_elt</span><span class=\"p\">(</span><span class=\"n\">const_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">fn_addr</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">(</span><span class=\"n\">fn_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_layout</span><span class=\"p\">().</span><span class=\"n\">instruction_address_space</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204856992,
        "sender_full_name": "aspen",
        "timestamp": 1595540625
    },
    {
        "content": "<p>this is what causes a segfault in rustc.</p>",
        "id": 204857003,
        "sender_full_name": "aspen",
        "timestamp": 1595540633
    },
    {
        "content": "<p>The segfault happens later during an optimiztion pass.</p>",
        "id": 204857199,
        "sender_full_name": "bjorn3",
        "timestamp": 1595540756
    },
    {
        "content": "<p>oh, hm.</p>",
        "id": 204857254,
        "sender_full_name": "aspen",
        "timestamp": 1595540769
    },
    {
        "content": "<p>so what might be the cause?</p>",
        "id": 204857263,
        "sender_full_name": "aspen",
        "timestamp": 1595540774
    },
    {
        "content": "<p>am i just doing this wrong?</p>",
        "id": 204857276,
        "sender_full_name": "aspen",
        "timestamp": 1595540786
    },
    {
        "content": "<p>The failing function is <a href=\"https://github.com/llvm/llvm-project/blob/f0634100cdc832605bff355330d2ccdb7f43842f/llvm/include/llvm/IR/DataLayout.h#L635\">https://github.com/llvm/llvm-project/blob/f0634100cdc832605bff355330d2ccdb7f43842f/llvm/include/llvm/IR/DataLayout.h#L635</a></p>",
        "id": 204857281,
        "sender_full_name": "bjorn3",
        "timestamp": 1595540791
    },
    {
        "content": "<p>am I casting the struct wrong?</p>",
        "id": 204857328,
        "sender_full_name": "aspen",
        "timestamp": 1595540831
    },
    {
        "content": "<p>Is <code>bitcast</code> allowed for pointer -&gt; function pointer as opposed to the other way around?</p>",
        "id": 204857329,
        "sender_full_name": "bjorn3",
        "timestamp": 1595540831
    },
    {
        "content": "<p>I'm not sure, actually.</p>",
        "id": 204857418,
        "sender_full_name": "aspen",
        "timestamp": 1595540884
    },
    {
        "content": "<p>yes.</p>",
        "id": 204857438,
        "sender_full_name": "nagisa",
        "timestamp": 1595540907
    },
    {
        "content": "<p>hm, weird then.</p>",
        "id": 204857443,
        "sender_full_name": "aspen",
        "timestamp": 1595540915
    },
    {
        "content": "<p>wait, what is <code>llty</code> in <code>scalar_to_backend</code>?</p>",
        "id": 204857500,
        "sender_full_name": "aspen",
        "timestamp": 1595540967
    },
    {
        "content": "<p>ok it's <code>cx.type_i8p_ext(address_space)</code></p>",
        "id": 204857512,
        "sender_full_name": "aspen",
        "timestamp": 1595540979
    },
    {
        "content": "<p>so the pointer is getting casted back to an i8p</p>",
        "id": 204857610,
        "sender_full_name": "aspen",
        "timestamp": 1595541030
    },
    {
        "content": "<p>i'm not sure if that's right?<br>\nshould I be using <code>const_ptrcast</code>?</p>",
        "id": 204857752,
        "sender_full_name": "aspen",
        "timestamp": 1595541122
    },
    {
        "content": "<p>Isn't the type a function type and not a pointer for functions?</p>",
        "id": 204857987,
        "sender_full_name": "bjorn3",
        "timestamp": 1595541248
    },
    {
        "content": "<p>Honestly I've lost track of what's what.</p>",
        "id": 204858010,
        "sender_full_name": "aspen",
        "timestamp": 1595541264
    },
    {
        "content": "<p>this was the original goal:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">@</span><span class=\"n\">fp</span><span class=\"p\">.</span><span class=\"n\">ptrauth</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                       </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">value</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">key</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"n\">discriminator</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                         </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">integer</span><span class=\"w\"> </span><span class=\"n\">discriminator</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                       </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm.ptrauth&quot;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204858044,
        "sender_full_name": "aspen",
        "timestamp": 1595541294
    },
    {
        "content": "<p>source: <a href=\"https://github.com/apple/llvm-project/blob/apple/master/llvm/docs/PointerAuth.md#authenticated-global-relocation\">https://github.com/apple/llvm-project/blob/apple/master/llvm/docs/PointerAuth.md#authenticated-global-relocation</a></p>",
        "id": 204858062,
        "sender_full_name": "aspen",
        "timestamp": 1595541305
    },
    {
        "content": "<p>I think you got that part right, but to do something useful you need to get the pointer back out of the struct. That is where the problem probably lies.</p>",
        "id": 204858333,
        "sender_full_name": "bjorn3",
        "timestamp": 1595541536
    },
    {
        "content": "<p>Ok, so <code>let ptr = self.const_get_elt(const_struct, 0);</code></p>",
        "id": 204858372,
        "sender_full_name": "aspen",
        "timestamp": 1595541570
    },
    {
        "content": "<p>This gets us a pointer to a Value which is an <code>i8*</code></p>",
        "id": 204858376,
        "sender_full_name": "aspen",
        "timestamp": 1595541579
    },
    {
        "content": "<p>Or should, at least.</p>",
        "id": 204858394,
        "sender_full_name": "aspen",
        "timestamp": 1595541601
    },
    {
        "content": "<p>idk I can't use println from librustc_codegen_llvm to check</p>",
        "id": 204858496,
        "sender_full_name": "aspen",
        "timestamp": 1595541659
    },
    {
        "content": "<p>Yes, and that needs to be casted back to a function.</p>",
        "id": 204858514,
        "sender_full_name": "bjorn3",
        "timestamp": 1595541672
    },
    {
        "content": "<p>why can't you use println?</p>",
        "id": 204858536,
        "sender_full_name": "bjorn3",
        "timestamp": 1595541694
    },
    {
        "content": "<p>symbol errors?</p>",
        "id": 204858543,
        "sender_full_name": "aspen",
        "timestamp": 1595541702
    },
    {
        "content": "<p>something related to fmt, lemme check</p>",
        "id": 204858554,
        "sender_full_name": "aspen",
        "timestamp": 1595541713
    },
    {
        "content": "<p>Maybe I'm bitcasting to the wrong type?</p>",
        "id": 204858613,
        "sender_full_name": "aspen",
        "timestamp": 1595541740
    },
    {
        "content": "<p>As llty is <code>cx.type_i8p_ext(address_space)</code></p>",
        "id": 204858616,
        "sender_full_name": "aspen",
        "timestamp": 1595541742
    },
    {
        "content": "<p>And struct[0] is already an i8*</p>",
        "id": 204858635,
        "sender_full_name": "aspen",
        "timestamp": 1595541763
    },
    {
        "content": "<p>where do you get that type from?</p>",
        "id": 204858879,
        "sender_full_name": "bjorn3",
        "timestamp": 1595541916
    },
    {
        "content": "<p>This is where <code>scalar_to_backend</code> is called:</p>",
        "id": 204858911,
        "sender_full_name": "aspen",
        "timestamp": 1595541938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">llvals</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">scalar_to_backend</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Pointer</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">alloc_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Size</span>::<span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">ptr_offset</span><span class=\"p\">)).</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Primitive</span>::<span class=\"n\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid_range</span>: <span class=\"mi\">0</span><span class=\"o\">..=!</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">type_i8p_ext</span><span class=\"p\">(</span><span class=\"n\">address_space</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204858917,
        "sender_full_name": "aspen",
        "timestamp": 1595541943
    },
    {
        "content": "<p>... nevermind it's also called from ssa</p>",
        "id": 204858927,
        "sender_full_name": "aspen",
        "timestamp": 1595541957
    },
    {
        "content": "<p>woops</p>",
        "id": 204858928,
        "sender_full_name": "aspen",
        "timestamp": 1595541958
    },
    {
        "content": "<p><code>bx.immediate_backend_type(layout)</code><br>\n<code>bx.scalar_pair_element_backend_type(layout, 0, true)</code></p>",
        "id": 204858980,
        "sender_full_name": "aspen",
        "timestamp": 1595541977
    },
    {
        "content": "<p>is llty really the right thing to be casting to?</p>",
        "id": 204920576,
        "sender_full_name": "aspen",
        "timestamp": 1595600180
    },
    {
        "content": "<p>I think it is</p>",
        "id": 204925682,
        "sender_full_name": "bjorn3",
        "timestamp": 1595602478
    },
    {
        "content": "<p>weird, I don't understand this problem then</p>",
        "id": 204925743,
        "sender_full_name": "aspen",
        "timestamp": 1595602508
    },
    {
        "content": "<p>Neither do I</p>",
        "id": 204926281,
        "sender_full_name": "bjorn3",
        "timestamp": 1595602744
    },
    {
        "content": "<p>could we just attach lldb to rustc instead?</p>",
        "id": 204965299,
        "sender_full_name": "aspen",
        "timestamp": 1595623873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<blockquote>\n<p>what you want is ultimately for the IR to look like: <code>@allocNNN = global void()* (bitcast @foo\n.ptrauth to void()*)</code></p>\n</blockquote>",
        "id": 204970390,
        "sender_full_name": "aspen",
        "timestamp": 1595627333
    },
    {
        "content": "<p>Sorry, out of ideas</p>",
        "id": 204992876,
        "sender_full_name": "bjorn3",
        "timestamp": 1595662602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<blockquote>\n<p>when a global initializer includes an unauthenticated function pointer, that's represented using the llvm::Function<em>, which is a subclass of llvm::Constant</em> that represents the pointer to the function. to make it an authenticated pointer instead, use the llvm::GlobalVariable* you created with the ptrauth info, but bitcast it to the function pointer type of the original llvm::Function*</p>\n</blockquote>",
        "id": 205064232,
        "sender_full_name": "aspen",
        "timestamp": 1595791821
    },
    {
        "content": "<p>If I understand that correctly the <code>const_get_elt</code> should be removed but the <code>const_bitcast</code> should be kept.</p>",
        "id": 205064295,
        "sender_full_name": "bjorn3",
        "timestamp": 1595791942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling rustc-std-workspace-core v1.99.0 (/Users/aleister/Code/rust/src/tools/rustc-std-workspace-core)\nInvalid bitcast\ni64 addrspace(7)* bitcast (&lt;{ i8*, i32, i64, i64 }&gt; &lt;{ i8* bitcast (i1 (i64*, %&quot;fmt::Formatter&quot;*)* @_ZN4core3ops8function6FnOnce9call_once17h308963fb3a4be439E.llvm.4526489033524205078 to i8*), i32 0, i64 0, i64 0 }&gt; to i64 addrspace(7)*)\nin function _ZN4core3fmt10ArgumentV110from_usize17h7c95b3070fdad98eE\nLLVM ERROR: Broken function found, compilation aborted!\nerror: could not compile `core`.\n</code></pre></div>",
        "id": 205066428,
        "sender_full_name": "aspen",
        "timestamp": 1595795877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> OH, I need to bitcast in <code>declare_global</code>!</p>",
        "id": 205066927,
        "sender_full_name": "aspen",
        "timestamp": 1595796681
    },
    {
        "content": "<p>i have forgotten what i have even needed to do</p>\n<p>maybe LLVM 11 will make this easier because apple master is 11</p>",
        "id": 208451613,
        "sender_full_name": "aspen",
        "timestamp": 1598731799
    }
]