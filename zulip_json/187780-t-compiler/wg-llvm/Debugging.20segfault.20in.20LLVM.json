[
    {
        "content": "<p>Does anybody have advice for debugging a segfault inside LLVM? Over in project-portable-simd, we have one that only happens in release builds on aarch64. It looks to me like a null pointer deref. Unfortunately, I cant find a way to get full debuginfo in LLVM and rustc:</p>\n<p>I did a build with these settings <a href=\"https://gist.github.com/thomcc/46c13e4e14ae8843a175208a2833c8ba\">https://gist.github.com/thomcc/46c13e4e14ae8843a175208a2833c8ba</a>, but it wasn't quite enough. I have function names and the like, obviously, but I don't have much more, e.g. everything else is assembly. This is on an aarch64-apple-darwin machine, but I gather it happens on any aarch64 (which makes sense given the backtrace)</p>\n<p>Link to the thread, containing the backtrace that we do have: <a href=\"#narrow/stream/257879-project-portable-simd/topic/2021-03-29.20Meeting/near/232369790\">https://rust-lang.zulipchat.com/#narrow/stream/257879-project-portable-simd/topic/2021-03-29.20Meeting/near/232369790</a></p>",
        "id": 232377572,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617083780
    },
    {
        "content": "<p>Use <code>--emit llvm-ir</code> to get a .ll file. Then pass that to <code>llc -march=aarch64 -O3 foo.ll</code> to see if you can reproduce the crash.</p>",
        "id": 232378901,
        "sender_full_name": "Amanieu",
        "timestamp": 1617085033
    },
    {
        "content": "<p>Use the <code>llc</code> binary from the rustc build so you get the same LLVM as rustc.</p>",
        "id": 232378968,
        "sender_full_name": "Amanieu",
        "timestamp": 1617085089
    },
    {
        "content": "<p>Once that's confirmed then use <code>bugpoint</code> to reduce the LLVM IR. I've never used it before, but you can find some docs on the LLVM website about it.</p>",
        "id": 232379327,
        "sender_full_name": "Amanieu",
        "timestamp": 1617085389
    },
    {
        "content": "<p>hmm, i see, i'd do --emit llvm-ir on the debug build?</p>",
        "id": 232379626,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617085631
    },
    {
        "content": "<p>nm i think i have it</p>",
        "id": 232380592,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617086346
    },
    {
        "content": "<p>Use --emit llvm-ir on the build that causes the crash.</p>",
        "id": 232380612,
        "sender_full_name": "Amanieu",
        "timestamp": 1617086368
    },
    {
        "content": "<p>yeah</p>",
        "id": 232380629,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617086374
    },
    {
        "content": "<p>that segfaults, but if i remove the -C opt-level=3 from the rustc invocation i get a .ll file. unfortunately, <code>llc -march=aarch64 -O3 &lt;that file&gt;.ll</code> does not segfault</p>",
        "id": 232380720,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617086427
    },
    {
        "content": "<p>I don't know, I'll defer to someone who's more familiar with LLVM :/</p>",
        "id": 232381542,
        "sender_full_name": "Amanieu",
        "timestamp": 1617087042
    },
    {
        "content": "<p>no worries, thanks for the pointers either way</p>",
        "id": 232381772,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617087247
    },
    {
        "content": "<p>Can you pass <code>-Cno-prepopulate-passes</code> to rustc? That will ensure that the LLVM ir is completely unoptimized. And can you try to reproduce the crash with <code>-Ccodegen-units=1</code>? (this is implicit when using <code>--emit llvm-ir</code>)</p>",
        "id": 232385070,
        "sender_full_name": "bjorn3",
        "timestamp": 1617089381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span></p>",
        "id": 232385079,
        "sender_full_name": "bjorn3",
        "timestamp": 1617089389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Debugging.20segfault.20in.20LLVM/near/232385070\">said</a>:</p>\n<blockquote>\n<p>Can you pass <code>-Cno-prepopulate-passes</code> to rustc? That will ensure that the LLVM ir is completely unoptimized. And can you try to reproduce the crash with <code>-Ccodegen-units=1</code>? (this is implicit when using <code>--emit llvm-ir</code>)</p>\n</blockquote>\n<p>hmm:</p>\n<ul>\n<li>I can still repro the crash with -Ccodegen-units=1.</li>\n<li>-Cno-prepopulate-passes doesnt seem to repro the crash</li>\n<li>passing the result of it to llc doesn't seem to repro the crash either</li>\n</ul>",
        "id": 232385997,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617089963
    },
    {
        "content": "<p>Note: the crash only happens for optimized builds</p>",
        "id": 232386017,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617089977
    },
    {
        "content": "<p>debug builds do not repro it, and so far, passing the result of the IR from a debug build to <code>llc -O3</code> doesn't repro either</p>",
        "id": 232386089,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617090010
    },
    {
        "content": "<p>(sorry for the delay, will be in and out for the next hour or so, then probably will be headed to bed if i know whats good for me, but will be investigating more tomorrow)</p>",
        "id": 232386136,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617090043
    },
    {
        "content": "<p>(FWIW I checked and every -Copt-level other than 1 causes the error, including s and z)</p>",
        "id": 232392880,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617094139
    },
    {
        "content": "<p>Try <code>llc -O3 -march=aarch64 -fast-isel=0 -global-isel=false</code></p>",
        "id": 232413794,
        "sender_full_name": "Amanieu",
        "timestamp": 1617106059
    },
    {
        "content": "<p>Also make sure you're using <code>build/x86_64-unknown-linux-gnu/llvm/bin/llc</code> from your rustc build, not the system llc.</p>",
        "id": 232413938,
        "sender_full_name": "Amanieu",
        "timestamp": 1617106121
    },
    {
        "content": "<p>you can get LLVM to print out a ton of info with <code>-print-before-all</code> or <code>-print-after-all</code> or <code>-debug</code>.</p>",
        "id": 232422852,
        "sender_full_name": "nagisa",
        "timestamp": 1617110115
    },
    {
        "content": "<p>the last one requires assertions-enabled build to be useful.</p>",
        "id": 232422892,
        "sender_full_name": "nagisa",
        "timestamp": 1617110134
    },
    {
        "content": "<p>(from rustc you can pass these in via <code>-Cllvm-args</code>)</p>",
        "id": 232423008,
        "sender_full_name": "nagisa",
        "timestamp": 1617110164
    },
    {
        "content": "<p>Also, note that the assert might be occurring in the optimizer and not the backend, in which case you'd use <code>opt</code> to reproduce, not <code>llc</code>. This information is also something you would be able to derive from <code>-print-before-all</code> and/or <code>-debug</code> output.</p>",
        "id": 232425676,
        "sender_full_name": "nagisa",
        "timestamp": 1617111202
    },
    {
        "content": "<p>Ah, I didn't see the backtrace, its in the backend. But then you also see an assert when you just <code>--emit=llvm-ir</code>â€¦ shrug.</p>",
        "id": 232425930,
        "sender_full_name": "nagisa",
        "timestamp": 1617111298
    },
    {
        "content": "<p>I would also recommend trying <code>-Csave-temps</code> and then using preserved <code>*.bc</code> files, rather than using <code>--emit llvm-ir</code>.</p>",
        "id": 232429111,
        "sender_full_name": "tm",
        "timestamp": 1617112564
    },
    {
        "content": "<p>maybe your crash is in the passes of <code>opt</code> instead? (or in <code>llc</code> but dependent on <code>opt</code> running first)</p>",
        "id": 232449487,
        "sender_full_name": "cuviper",
        "timestamp": 1617119640
    },
    {
        "content": "<p>The linked backtrace is in shows the issue is in <code>llvm::AArch64TargetLowering</code>.</p>",
        "id": 232450499,
        "sender_full_name": "nagisa",
        "timestamp": 1617119990
    },
    {
        "content": "<p>ah ok -- but it still may need <code>opt</code> passes first</p>",
        "id": 232450629,
        "sender_full_name": "cuviper",
        "timestamp": 1617120029
    },
    {
        "content": "<p>(Oops, nevermind, I got confused by zulip and didn't see the rest of the conversation.)</p>",
        "id": 232457385,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1617122505
    },
    {
        "content": "<p>(it seems like this repros on non-aarch64, and given that this wasn't my patch in the first place, I think <span class=\"user-mention\" data-user-id=\"312331\">@Caleb Zulawski</span> might be the one following up here)</p>",
        "id": 232519641,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1617151558
    },
    {
        "content": "<p>I've reduced the crashing source code to a pretty minimal example: <a href=\"https://github.com/calebzulawski/llvm-aarch64-codegen-crash\">https://github.com/calebzulawski/llvm-aarch64-codegen-crash</a><br>\nInterestingly, my minimal example doesn't crash with <code>-Ccodegen-units=1</code>.<br>\nAnyway, I can tell which CGU is failing since it's missing the final object file from <code>-Csave-temps</code>.  I have the following files:</p>\n<div class=\"codehilite\"><pre><span></span><code>bug-1974b6bb1d213572.bug.dco7g2um-cgu.6.rcgu.no-opt.bc\nbug-1974b6bb1d213572.bug.dco7g2um-cgu.6.rcgu.thin-lto-after-import.bc\nbug-1974b6bb1d213572.bug.dco7g2um-cgu.6.rcgu.thin-lto-after-internalize.bc\nbug-1974b6bb1d213572.bug.dco7g2um-cgu.6.rcgu.thin-lto-after-patch.bc\nbug-1974b6bb1d213572.bug.dco7g2um-cgu.6.rcgu.thin-lto-after-rename.bc\nbug-1974b6bb1d213572.bug.dco7g2um-cgu.6.rcgu.thin-lto-after-resolve.bc\nbug-1974b6bb1d213572.bug.dco7g2um-cgu.6.rcgu.thin-lto-input.bc\n</code></pre></div>\n<p>Does anyone know in what order they're produced/which is the final version that's finally compiled?</p>",
        "id": 232830166,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617313905
    },
    {
        "content": "<p>the phases are all listed here -- <a href=\"https://github.com/rust-lang/rust/blob/d474075a8f28ae9a410e95d849d009006db4b176/compiler/rustc_codegen_llvm/src/back/lto.rs#L780-L877\">https://github.com/rust-lang/rust/blob/d474075a8f28ae9a410e95d849d009006db4b176/compiler/rustc_codegen_llvm/src/back/lto.rs#L780-L877</a></p>",
        "id": 232830353,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1617314009
    },
    {
        "content": "<p>*-after-patch was the last thing llvm didn't segfault on, and presumably it segfaulted while running optimization passes over that input</p>",
        "id": 232830402,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1617314042
    },
    {
        "content": "<p>Thanks, that explains why each of these bc files compile fine with llc</p>",
        "id": 232830755,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617314220
    },
    {
        "content": "<p><code>opt</code> doesn't seem to have any trouble with it (though I'm not sure I'm using the right incantation of flags to match what rustc is doing, or if that's even possible from the cli)</p>",
        "id": 232832432,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617315156
    },
    {
        "content": "<p>Unfortunately I'm not sure that it's possible from the CLI to run the exact set of passes since it's pretty specific to ThinLTO. I have had some success in the past though running specific sets of passes one after another to get it to segfault. Sometimes it can be really tricky though</p>",
        "id": 232832675,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1617315319
    },
    {
        "content": "<p>In case anyone was curious, I was successfully able to reproduce it with just <code>opt --aarch64-simdinstr-opt</code>.  I tried reducing it with <code>bugpoint</code> but it spit out the same bytecode (perhaps I did something wrong?).  Once my LLVM bugzilla account is approved I'll submit the crash.  Thanks everyone for all the help!</p>",
        "id": 232969090,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617411710
    },
    {
        "content": "<p>Happy to attempt a reduction if you share the bc</p>",
        "id": 232969310,
        "sender_full_name": "nagisa",
        "timestamp": 1617411938
    },
    {
        "content": "<p>Thanks, here's the bc <a href=\"/user_uploads/4715/kazzgi9Iv6dG0q-VQgiZpvCL/bug.bc\">bug.bc</a></p>",
        "id": 232970682,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617413521
    },
    {
        "content": "<p>Sorry it took me a while to get back to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>; RUN: opt --aarch64-simdinstr-opt -mtriple=aarch64 &lt; %s\n\ndefine void @banana() {\n  ret void\n}\n</code></pre></div>\n<p>still reproduces.</p>",
        "id": 233303412,
        "sender_full_name": "nagisa",
        "timestamp": 1617709013
    },
    {
        "content": "<p>do you want me to report this upstream, or would you rather do that yourself?</p>",
        "id": 233303420,
        "sender_full_name": "nagisa",
        "timestamp": 1617709020
    },
    {
        "content": "<p>Huh, much simpler, thanks!  Feel free to report it yourself if you want, doesn't matter much to me.  I'll file the rust/stdsimd issue</p>",
        "id": 233304114,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617709446
    },
    {
        "content": "<p><a href=\"https://bugs.llvm.org/show_bug.cgi?id=49867\">https://bugs.llvm.org/show_bug.cgi?id=49867</a></p>",
        "id": 233380407,
        "sender_full_name": "nagisa",
        "timestamp": 1617739611
    },
    {
        "content": "<p>Thanks! Looking at that backtrace, I wonder if this is possibly a different bug.  I could only reproduce it from rustc with 64-element vectors and it was crashing in vector code, so we may have to revisit eventually</p>",
        "id": 233408147,
        "sender_full_name": "Caleb Zulawski",
        "timestamp": 1617752617
    },
    {
        "content": "<p>The reason reduction results are different because I think the initial reproduction information is already giving a different crash.</p>",
        "id": 233994369,
        "sender_full_name": "nagisa",
        "timestamp": 1618093742
    },
    {
        "content": "<p>so yeah its 2 distinct issues.</p>",
        "id": 233994377,
        "sender_full_name": "nagisa",
        "timestamp": 1618093748
    },
    {
        "content": "<p>I'm not able to reproduce the one reported in <a href=\"https://github.com/rust-lang/rust/issues/84020\">https://github.com/rust-lang/rust/issues/84020</a> this needs significantly more self contained reproduction instructions.</p>",
        "id": 233994395,
        "sender_full_name": "nagisa",
        "timestamp": 1618093779
    },
    {
        "content": "<p>FWIW what I do in this case is to run with -C save-temps and then do something like <code>for f in out/*.bc; do echo $f; build/.../llc -O3 &lt; $f &gt;/dev/null; done</code> in the hope that it crashes on one of the files.</p>",
        "id": 234028392,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1618130864
    }
]