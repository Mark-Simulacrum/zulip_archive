[
    {
        "content": "<p>I've started looking into the LLVM 13 upgrade. First two issues are <a href=\"https://bugs.llvm.org/show_bug.cgi?id=51207\">https://bugs.llvm.org/show_bug.cgi?id=51207</a> and <a href=\"https://bugs.llvm.org/show_bug.cgi?id=51210\">https://bugs.llvm.org/show_bug.cgi?id=51210</a>.</p>",
        "id": 247141068,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627241533
    },
    {
        "content": "<p>And <a href=\"https://bugs.llvm.org/show_bug.cgi?id=51211\">https://bugs.llvm.org/show_bug.cgi?id=51211</a>.</p>",
        "id": 247143174,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627244763
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/rust-lang/rust/pull/87570\">https://github.com/rust-lang/rust/pull/87570</a></p>",
        "id": 247520852,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627508380
    },
    {
        "content": "<p>Off to a good start: <a href=\"https://reviews.llvm.org/D107216\">https://reviews.llvm.org/D107216</a></p>",
        "id": 247794822,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627722471
    },
    {
        "content": "<p>Not sure what to do with that. Guess we could stop using LLVM to embed bitcode and instead do that via the object crate, same as we do with metadata in rlibs. Would lose LTO on architectures not supported by the object crate, but it seems to have good coverage.</p>",
        "id": 247795059,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627722864
    },
    {
        "content": "<p>Looking at it's API, it doesn't look like the object crate is particularly great at modifying existing object files. Need to explicitly copy everything over correctly.</p>",
        "id": 247795364,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627723479
    },
    {
        "content": "<p>Don't object files contain either compiled code <strong>or</strong> bitcode?</p>",
        "id": 247795538,
        "sender_full_name": "bjorn3",
        "timestamp": 1627723809
    },
    {
        "content": "<p>Never mind.</p>",
        "id": 247795563,
        "sender_full_name": "bjorn3",
        "timestamp": 1627723910
    },
    {
        "content": "<p>rustc can include both. The bitcode is used for LTO, the compiled code is used otherwise.</p>",
        "id": 247795614,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627723948
    },
    {
        "content": "<p>I think it's a reasonable way forward. In my memory we recently moved to object crate for archive reading and parsing too.</p>",
        "id": 247813010,
        "sender_full_name": "nagisa",
        "timestamp": 1627748999
    },
    {
        "content": "<p>Correct. There is also a PR to use it for creating metadata object files.</p>",
        "id": 247818785,
        "sender_full_name": "bjorn3",
        "timestamp": 1627757107
    },
    {
        "content": "<p>Can you point me to that PR? I couldn't find it.</p>",
        "id": 247820081,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1627758911
    },
    {
        "content": "<p>I forgot it was already merged: <a href=\"https://github.com/rust-lang/rust/pull/84449\">https://github.com/rust-lang/rust/pull/84449</a></p>",
        "id": 247820980,
        "sender_full_name": "bjorn3",
        "timestamp": 1627760393
    },
    {
        "content": "<p>Anyone have an idea on what could cause <a href=\"https://github.com/rust-lang/rust/pull/87570#issuecomment-890152637\">https://github.com/rust-lang/rust/pull/87570#issuecomment-890152637</a> ?</p>",
        "id": 248667251,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1628283299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> do you know if <code>rustc test.rs</code> is using BFD or LLD?</p>",
        "id": 248679683,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628292216
    },
    {
        "content": "<p>My guess is that it's related to the weird section name we use: <a href=\"https://github.com/rust-lang/rust/blob/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/std/src/sys/unix/args.rs#L109\">https://github.com/rust-lang/rust/blob/5ad7389bdd1abe7d2c6f73a233af1a7a69e96285/library/std/src/sys/unix/args.rs#L109</a></p>",
        "id": 248679958,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628292441
    },
    {
        "content": "<p>the standard section name is <code>.init_array</code></p>",
        "id": 248679981,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628292447
    },
    {
        "content": "<p>Ah, I think I've found it</p>",
        "id": 248680289,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628292670
    },
    {
        "content": "<p>The default LD BFD linker script will match any section starting with <code>.init_array</code>: <a href=\"https://github.com/alisw/gcc-toolchain/blob/61a1fb6ff726551e5176ff72f903b996cbbf5d22/binutils-2.25.1/ld/scripttempl/elf.sc#L241-L242\">https://github.com/alisw/gcc-toolchain/blob/61a1fb6ff726551e5176ff72f903b996cbbf5d22/binutils-2.25.1/ld/scripttempl/elf.sc#L241-L242</a></p>",
        "id": 248680360,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628292725
    },
    {
        "content": "<p>However, LD gold does not use a linker script to place <code>__init_array_start</code> and <code>__init_array_end</code> - it appears to explicitly lookup the section <code>.init_array</code>: <a href=\"https://github.com/alisw/gcc-toolchain/blob/61a1fb6ff726551e5176ff72f903b996cbbf5d22/binutils-2.25.1/gold/defstd.cc#L63-L86\">https://github.com/alisw/gcc-toolchain/blob/61a1fb6ff726551e5176ff72f903b996cbbf5d22/binutils-2.25.1/gold/defstd.cc#L63-L86</a></p>",
        "id": 248680383,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628292782
    },
    {
        "content": "<p>I have no idea how that ever worked under Gold</p>",
        "id": 248680489,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628292911
    },
    {
        "content": "<p>I may be mistaken about what gold is doing - on the latest nightly, passing <code>-Zpre-link-args=\"-fuse-ld=gold\"</code> results in <code>_ZN3std3sys4unix4args3imp15ARGV_INIT_ARRAY</code> ending up between <code>__init_array_start</code> and <code>__init_array_end</code></p>",
        "id": 248680805,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628293233
    },
    {
        "content": "<p>I was in fact incorrect - gold does have special handling for '.init_array.'sections: <a href=\"https://github.com/bminor/binutils-gdb/blob/8179e388b60acc6ac35b40cd154f8d56234d1c3b/gold/layout.cc#L1253\">https://github.com/bminor/binutils-gdb/blob/8179e388b60acc6ac35b40cd154f8d56234d1c3b/gold/layout.cc#L1253</a></p>",
        "id": 248681132,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628293626
    },
    {
        "content": "<p>Just to be sure, I changed the section name to just <code>.init_array</code>, but the result is the same.</p>",
        "id": 248705375,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1628325953
    },
    {
        "content": "<p>I'll do the rebase on the final llvmorg-13.0.0 this afternoon, if nobody else is working on it</p>",
        "id": 255798415,
        "sender_full_name": "cuviper",
        "timestamp": 1633117922
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/89456\">https://github.com/rust-lang/rust/pull/89456</a></p>",
        "id": 255839722,
        "sender_full_name": "cuviper",
        "timestamp": 1633148405
    }
]