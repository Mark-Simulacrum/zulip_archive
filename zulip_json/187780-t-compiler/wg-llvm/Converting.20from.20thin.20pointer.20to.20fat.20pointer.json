[
    {
        "content": "<p>I'm trying to generate (inside llvm codegen) a fat pointer to a stack-allocated object.</p>",
        "id": 228490541,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1614721055
    },
    {
        "content": "<p>the object implements a particular trait.</p>",
        "id": 228490578,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1614721075
    },
    {
        "content": "<p>I found unsize_thin_ptr. Is that on the right track?</p>",
        "id": 228490674,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1614721101
    },
    {
        "content": "<p>Or <code>coerce_unsized_into</code> for a more general option. But yeah, I believe that's the right option for producing pointer pairs out of a single pointer/reference.</p>",
        "id": 228491866,
        "sender_full_name": "nagisa",
        "timestamp": 1614721604
    },
    {
        "content": "<p>ok, thanks! I'll give it a go.</p>",
        "id": 228492726,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1614721928
    },
    {
        "content": "<p>Huh. It's surprisingly not obvious how to get a Ty for a dyn Foo, where I know \"Foo\" in advance.</p>",
        "id": 228494696,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1614722692
    }
]