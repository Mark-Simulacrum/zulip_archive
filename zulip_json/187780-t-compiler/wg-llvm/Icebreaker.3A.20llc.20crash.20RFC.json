[
    {
        "content": "<p>Hi all, I'm new to contributing to <code>rustc</code> and I've found some time here and there over the past couple of weeks to understand one of the LLVM icebreakers in the issue backlog. The issue is the following <a href=\"https://github.com/rust-lang/rust/issues/80268\">https://github.com/rust-lang/rust/issues/80268</a> . I've been able to reduce it down to the exact cause in the LLVM backend and it's related to <code>globalisel</code> <a href=\"https://github.com/llvm/llvm-project/issues/54339\">https://github.com/llvm/llvm-project/issues/54339</a> . I've been thinking about how to approach a solution to this problem but I wanted to ask for thoughts on best approaches (if that's ok for the chat?).</p>",
        "id": 275640094,
        "sender_full_name": "Nashe Mncube",
        "timestamp": 1647517743
    },
    {
        "content": "<p>I don't think your reduction is correct. <code>-global-isel=1</code>, maybe somewhat confusingly, enables GlobalISel in abort mode, which means that it errors if GlobalISel would otherwise fall back to SelectionDAG. However, the actual AArch64 backend enables GlobalISel at <code>-O0</code> with abort mode disabled, which means that it will silently fall back to SelectionDAG.</p>",
        "id": 275726510,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1647550953
    },
    {
        "content": "<p>You want to do the reduction with <code>llc -O0</code>, not with <code>llc -global-isel=1</code>.</p>",
        "id": 275726615,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1647551004
    },
    {
        "content": "<p>Thanks Nikita! That is a bit confusing. Iâ€™ll close my reduction and poke around again</p>",
        "id": 276036315,
        "sender_full_name": "Nashe Mncube",
        "timestamp": 1647861906
    }
]