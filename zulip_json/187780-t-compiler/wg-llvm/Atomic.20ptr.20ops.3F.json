[
    {
        "content": "<p>In LLVM, is it possible to do atomic operations (whatever we are using to lower the <code>atomic_store</code> et al intrinsics) on pointer type, or does it have to be an integer type?</p>",
        "id": 192945376,
        "sender_full_name": "RalfJ",
        "timestamp": 1586069816
    },
    {
        "content": "<p>I don't see any indication in the LLVM lang ref that says it can't be a pointer. In fact it seems that arbitrary types are allowed, with atomic ops for too big types lowered to <code>__atomic_*</code> calls, but I am not sure about this.</p>",
        "id": 192949710,
        "sender_full_name": "bjorn3",
        "timestamp": 1586077740
    },
    {
        "content": "<p>the docs indicate the types as <code>iN</code> though, dont they?</p>",
        "id": 192950923,
        "sender_full_name": "RalfJ",
        "timestamp": 1586079733
    },
    {
        "content": "<p>(currently, rustc complains when such an intrinsic is used with a non-integer type)</p>",
        "id": 192950926,
        "sender_full_name": "RalfJ",
        "timestamp": 1586079748
    },
    {
        "content": "<p>Take for example <a href=\"https://llvm.org/docs/LangRef.html#cmpxchg-instruction\" title=\"https://llvm.org/docs/LangRef.html#cmpxchg-instruction\">https://llvm.org/docs/LangRef.html#cmpxchg-instruction</a>. The type  is <code>&lt;ty&gt;</code>. It never says <code>iN</code>.</p>",
        "id": 192952038,
        "sender_full_name": "bjorn3",
        "timestamp": 1586081466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Only <code>atomicrmw</code> has restrictions on the type: <a href=\"https://llvm.org/docs/LangRef.html#atomicrmw-instruction\" title=\"https://llvm.org/docs/LangRef.html#atomicrmw-instruction\">https://llvm.org/docs/LangRef.html#atomicrmw-instruction</a></p>",
        "id": 192957237,
        "sender_full_name": "Amanieu",
        "timestamp": 1586089823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> hm, so we should be able to make <code>AtomicPtr</code> lower to ptr-typed LLVM ops?</p>",
        "id": 192982903,
        "sender_full_name": "RalfJ",
        "timestamp": 1586128399
    },
    {
        "content": "<p>ah no we probably use <code>atomicrmw</code> for some of those</p>",
        "id": 192982906,
        "sender_full_name": "RalfJ",
        "timestamp": 1586128435
    },
    {
        "content": "<p>Let me check what clang does, we should probably just do whatever they do.</p>",
        "id": 192982907,
        "sender_full_name": "Amanieu",
        "timestamp": 1586128438
    },
    {
        "content": "<p>well the context here is <a href=\"https://github.com/rust-lang/rust/pull/70765\" title=\"https://github.com/rust-lang/rust/pull/70765\">https://github.com/rust-lang/rust/pull/70765</a> which clang probably is not much concerned with</p>",
        "id": 192983005,
        "sender_full_name": "RalfJ",
        "timestamp": 1586128587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> clang just bitcasts pointers to integers.</p>",
        "id": 192983073,
        "sender_full_name": "Amanieu",
        "timestamp": 1586128764
    },
    {
        "content": "<p>so thats more a transmute than an <code>as usize</code>?</p>",
        "id": 192983076,
        "sender_full_name": "RalfJ",
        "timestamp": 1586128785
    },
    {
        "content": "<p>Can't miri just track provenance through casts just like transmute?</p>",
        "id": 192983123,
        "sender_full_name": "Amanieu",
        "timestamp": 1586128843
    },
    {
        "content": "<p>Honestly I agree with Aaron here, casts and transmutes should be treated identically because the difference is too subtle otherwise.</p>",
        "id": 192983203,
        "sender_full_name": "Amanieu",
        "timestamp": 1586128999
    },
    {
        "content": "<p>I dont think that would be correct. Rust's ptr provenance rules are unclear but if they are anything like C's or LLVM's, casting to an int is spec'd to lose provenance.<br>\nAlso, in general no it cannot -- integers have way too many operations to track provenance on them.</p>",
        "id": 192983209,
        "sender_full_name": "RalfJ",
        "timestamp": 1586129030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Atomic.20ptr.20ops.3F/near/192983203\" title=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Atomic.20ptr.20ops.3F/near/192983203\">said</a>:</p>\n<blockquote>\n<p>Honestly I agree with Aaron here, casts and transmutes should be treated identically because the difference is too subtle otherwise.</p>\n</blockquote>\n<p>I'm afraid that's <a href=\"https://people.mpi-sws.org/~jung/twinsem/twinsem.pdf\" title=\"https://people.mpi-sws.org/~jung/twinsem/twinsem.pdf\">not possible</a>. This is not a Miri thing, this is about how to define a semantics that actually makes all our optimizations legal.</p>",
        "id": 192983251,
        "sender_full_name": "RalfJ",
        "timestamp": 1586129077
    },
    {
        "content": "<p>LLVM devs seem to think casts and transmutes are the same and <a href=\"https://bugs.llvm.org/show_bug.cgi?id=34548\" title=\"https://bugs.llvm.org/show_bug.cgi?id=34548\">it leads to miscompilations</a>.</p>",
        "id": 192983259,
        "sender_full_name": "RalfJ",
        "timestamp": 1586129109
    },
    {
        "content": "<p>and <a href=\"https://bugs.llvm.org/show_bug.cgi?id=35229\" title=\"https://bugs.llvm.org/show_bug.cgi?id=35229\">more miscompilations</a></p>",
        "id": 192983263,
        "sender_full_name": "RalfJ",
        "timestamp": 1586129134
    },
    {
        "content": "<p>GCC <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82282\" title=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82282\">has the same bugs</a></p>",
        "id": 192983267,
        "sender_full_name": "RalfJ",
        "timestamp": 1586129147
    }
]