[
    {
        "content": "<p>I'm closing in on having a green build against upstream LLVM HEAD (which I need for $EMPLOYER), and I'm now down to two mysterious failures. Here's one:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [codegen] codegen/sanitizer-recover.rs#MSAN-RECOVER-LTO stdout ----\n\nerror in revision `MSAN-RECOVER-LTO`: compilation failed!\nstatus: exit status: 1\ncommand: &quot;/usr/local/google/home/augie/Programming/big/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/usr/local/google/home/augie/Programming/big/rust/src/test/codegen/sanitizer-recover.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--cfg&quot; &quot;msan_recover_lto&quot; &quot;--out-dir&quot; &quot;/usr/local/google/home/augie/Programming/big/rust/build/x86_64-unknown-linux-gnu/test/codegen/sanitizer-recover.MSAN-RECOVER-LTO&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Cdebuginfo=0&quot; &quot;-Lnative=/usr/local/google/home/augie/Programming/big/rust/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-Zsanitizer=memory&quot; &quot;-Zsanitizer-recover=memory&quot; &quot;-C&quot; &quot;lto=fat&quot; &quot;-L&quot; &quot;/usr/local/google/home/augie/Programming/big/rust/build/x86_64-unknown-linux-gnu/test/codegen/sanitizer-recover.MSAN-RECOVER-LTO/auxiliary&quot; &quot;--emit=llvm-ir&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nerror: failed to get bitcode from object file for LTO (Bitcode section not found in object file)\n\nerror: aborting due to previous error\n\n\n------------------------------------------\n</code></pre></div>\n<p>I see this even when I'm using the <code>rustc/13.0-2021-08-08</code> branch of LLVM, so could this be environmental somehow? I'm puzzled.</p>",
        "id": 250488961,
        "sender_full_name": "durin42",
        "timestamp": 1629813630
    },
    {
        "content": "<p>You need to cherry-pick <a href=\"https://reviews.llvm.org/D107216\">https://reviews.llvm.org/D107216</a>.</p>",
        "id": 250542484,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1629836240
    },
    {
        "content": "<p>Ah, if you're using the branch that shouldn't happen, it already includes that change ... but that was how this issue manifested.</p>",
        "id": 250543298,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1629836676
    },
    {
        "content": "<p>Okay, I'll double-check tomorrow. Maybe I didn't do a clean-enough build and it didn't rebuild the relevant bits. I've been burned by that before.</p>",
        "id": 250551910,
        "sender_full_name": "durin42",
        "timestamp": 1629840601
    },
    {
        "content": "<p>Oh, and isn't that patch on LLVM main now?</p>",
        "id": 250551980,
        "sender_full_name": "durin42",
        "timestamp": 1629840623
    },
    {
        "content": "<p>Nope, as MaskRay did not agree with the revert :)</p>",
        "id": 250554686,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1629842075
    },
    {
        "content": "<p>I'll pester tstellar about it, otherwise he'll hear from me when this hits our distros... :)</p>",
        "id": 250555148,
        "sender_full_name": "cuviper",
        "timestamp": 1629842377
    },
    {
        "content": "<p>MaskRay agreed to revert it on 13.x, but we'll still have to figure something out going forward</p>",
        "id": 252551522,
        "sender_full_name": "cuviper",
        "timestamp": 1631145342
    },
    {
        "content": "<p>That's disappointing but not exactly unexpected. This LLVM release has been almost exclusively about mitigating MaskRay, so that just adds one more thing.</p>",
        "id": 252587151,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1631175009
    },
    {
        "content": "<p>I think for llvmbc we'll have to follow the suggestion of embedding the bitcode in inline assembly (ugh). For the <code>.rustc</code> section we should switch to the object crate, which would at least allow making that part codegen backend independent. Might require additional support in the object crate, as I think that would make it required for all targets.</p>",
        "id": 252587509,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1631175187
    },
    {
        "content": "<p>I think only wasm writing is not yet supported by object. Wasm doesn't support dynamic libraries yet.</p>",
        "id": 252590067,
        "sender_full_name": "bjorn3",
        "timestamp": 1631176471
    },
    {
        "content": "<p>did someone run over MaskRay's dog or</p>",
        "id": 252653150,
        "sender_full_name": "Jubilee",
        "timestamp": 1631204193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316805\">@durin42</span> Out of curiosity, what are you doing with Rust on LLVM HEAD? I'm always interested in people's usage of compiler toolchains.</p>",
        "id": 252668135,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631210376
    },
    {
        "content": "<p>We use LLVM HEAD for our C/C++ toolchain, so if we want ThinLTO and sanitizers to work in mixed-language binaries (and that's basically a hard requirement) we need to use LLVM HEAD for Rust as well.</p>",
        "id": 252669023,
        "sender_full_name": "durin42",
        "timestamp": 1631210700
    },
    {
        "content": "<p>So in general I expect to be chasing build breaks or codegen regressions within a day or two of the regression.</p>",
        "id": 252669228,
        "sender_full_name": "durin42",
        "timestamp": 1631210773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316805\">durin42</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Mystery.20LTO.20codegen.20test.20failures.3F/near/252669023\">said</a>:</p>\n<blockquote>\n<p>We use LLVM HEAD for our C/C++ toolchain, so if we want ThinLTO and sanitizers to work in mixed-language binaries (and that's basically a hard requirement) we need to use LLVM HEAD for Rust as well.</p>\n</blockquote>\n<p>Ah, that makes sense.</p>",
        "id": 252704107,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631225544
    },
    {
        "content": "<p>On this front: is there any interest in some sort of CI for this as part of the Rust project? I talked to LLVM folks and they don't want to privilege anything that's out of tree, but it seems like a thing that might make sense for Rust to host?</p>",
        "id": 252852472,
        "sender_full_name": "durin42",
        "timestamp": 1631308907
    },
    {
        "content": "<p>Since Rust's CI is always green, it would mean we'd commit to always supporting some HEAD of LLVM.</p>",
        "id": 252868581,
        "sender_full_name": "nagisa",
        "timestamp": 1631320082
    },
    {
        "content": "<p>AFAIK there is an effort by somebody to run Rust + LLVM HEAD CI on the LLVM side (probably not super official?), but I don't recall who was it who's driving this.</p>",
        "id": 252868638,
        "sender_full_name": "nagisa",
        "timestamp": 1631320126
    },
    {
        "content": "<p>\"some sort of CI\" doesn't have to mean gating CI</p>",
        "id": 252869274,
        "sender_full_name": "cuviper",
        "timestamp": 1631320799
    },
    {
        "content": "<p>it could be a scheduled GitHub Action, nightly or so</p>",
        "id": 252869354,
        "sender_full_name": "cuviper",
        "timestamp": 1631320841
    },
    {
        "content": "<p>I'd rather more often than nightly, so that in theory it can be something I can put a rotation of teammates on to get things fixed promptly enough we don't slow down our C++ compiler releases (which will jeopardize my Rust work if it happens, sadly)</p>",
        "id": 253108103,
        "sender_full_name": "durin42",
        "timestamp": 1631546610
    },
    {
        "content": "<p>I'm pretty sure it was Christian that works with me that was trying to do some Rust+LLVM CI on the LLVM side, and that got very harshly vetoed so I didn't feel like trying to fight the battle over there again.</p>",
        "id": 253108236,
        "sender_full_name": "durin42",
        "timestamp": 1631546653
    },
    {
        "content": "<p>Is there anyplace I can follow the D107216 saga? Is any work ongoing with that?</p>",
        "id": 255409301,
        "sender_full_name": "durin42",
        "timestamp": 1632925930
    }
]