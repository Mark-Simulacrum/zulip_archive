[
    {
        "content": "<p>I'm working on an experimental codegen change, and of course, I'm generating bad LLVM IR. I'd like to look at the generated IR, but the compiler (cargo rustc -- -C llvm-args=-print-after-all -C codegen-units=1) exits with an LLVM assertion failure before dumping the IR. Any hints for how I can see the bad IR I'm generating?</p>",
        "id": 229674288,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615388250
    },
    {
        "content": "<p>Does -C no-prepopulate-passes work?</p>",
        "id": 229679627,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615389813
    },
    {
        "content": "<p>I'll try it on my next debug cycle. Part of what's going on is I can't tell if the assertion occurs while generating the IR or while lowering it; there's no backtrace available and I don't know how to attach with a debugger to rustc invoked via cargo.</p>",
        "id": 229698571,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615394433
    },
    {
        "content": "<p>separately, probably a basic Rust question: I have a function that takes <code>rust_type: Ty&lt;'_&gt;</code>. In that function's body, I pass <code>rust_type</code> as a parameter to another function, but I get this error: <code>`rust_type</code> escapes the associated function body here`</p>",
        "id": 229699479,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615394728
    },
    {
        "content": "<p>it seems like passing it should be okay — it shouldn't outlive the function call</p>",
        "id": 229699567,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615394755
    },
    {
        "content": "<p>so it's not clear to me what I'm doing wrong</p>",
        "id": 229699653,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615394769
    },
    {
        "content": "<p>aha, needed to specify lifetime 'tcx rather than the anonymous lifetime. I wonder why the compiler couldn't figure it out.</p>",
        "id": 229700312,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615394982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380247\">Michael Coblenz</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Debugging.20codegen/near/229700312\">said</a>:</p>\n<blockquote>\n<p>aha, needed to specify lifetime 'tcx rather than the anonymous lifetime. I wonder why the compiler couldn't figure it out.</p>\n</blockquote>\n<p>Because rustc doesn't look at the function body. Only at the function signature.</p>",
        "id": 229705044,
        "sender_full_name": "bjorn3",
        "timestamp": 1615396494
    },
    {
        "content": "<p>There are a couple of things that could help:</p>\n<ol>\n<li>Build rustc with llvm with assertions enabled.</li>\n</ol>",
        "id": 229705893,
        "sender_full_name": "nagisa",
        "timestamp": 1615396781
    },
    {
        "content": "<p>This should at least tell you what the assert was.</p>",
        "id": 229705907,
        "sender_full_name": "nagisa",
        "timestamp": 1615396791
    },
    {
        "content": "<p>You may have success inspecting a core dump rather than attaching to a live instance of rustc.</p>",
        "id": 229706040,
        "sender_full_name": "nagisa",
        "timestamp": 1615396823
    },
    {
        "content": "<p>You can pass -v to cargo to get the rustc invocation.</p>",
        "id": 229710046,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615398190
    },
    {
        "content": "<p>yeah, but need to be careful to not accidentally attach to rustup's <code>rustc</code> wrapper if you go that way</p>",
        "id": 229710780,
        "sender_full_name": "nagisa",
        "timestamp": 1615398457
    },
    {
        "content": "<p>I do have llvm assertions enabled, so I do know what the assertion is. I just don't know what IR it's asserting on.</p>",
        "id": 229712737,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615399166
    },
    {
        "content": "<p>And I have the rustc invocation, but it depends on setting some environment variables that cargo appears to set.</p>",
        "id": 229712969,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615399238
    },
    {
        "content": "<p>How do I get a core dump for an assertion failure?</p>",
        "id": 229713298,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1615399365
    },
    {
        "content": "<p>Run <code>ulimit -c unlimited</code>. The core dump will be written to the location pointed to by <code>/proc/sys/kernel/core_pattern</code>. If the location starts with a <code>|</code>, the kernel actually pipes it to a program it starts as root.</p>",
        "id": 229715871,
        "sender_full_name": "bjorn3",
        "timestamp": 1615400365
    },
    {
        "content": "<p>For example on my system <code>core_pattern</code> is <code>core</code>, so it will write to a file called <code>core</code> in the current directory. You can use something like <code>core%p</code> to write to a core file like <code>core100</code> when the pid of the process is 100. See <code>man 5 core</code> for more info.</p>",
        "id": 229716175,
        "sender_full_name": "bjorn3",
        "timestamp": 1615400481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380247\">@Michael Coblenz</span></p>",
        "id": 229716183,
        "sender_full_name": "bjorn3",
        "timestamp": 1615400487
    },
    {
        "content": "<p>On many modern linux systems it might be written to systemd journal files, accessible via coredumpctl</p>",
        "id": 229717367,
        "sender_full_name": "nagisa",
        "timestamp": 1615400940
    }
]