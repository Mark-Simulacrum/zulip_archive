[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> Reading <a href=\"https://reviews.llvm.org/D98145\">https://reviews.llvm.org/D98145</a>, I'm not quite sure why the <code>I-&gt;hasOneUse()</code> is returning <code>true</code> in the test case. Depending on how I count, I see either 0 or 2. Let me explain, so the relevant excerpt of the dag is:</p>\n<div class=\"codehilite\"><pre><span></span><code>  %8:gr64 = COPY $rdx\n  MOV64mr %1:gr64, 1, $noreg, 0, $noreg, killed %8:gr64 :: (store 8 into %ir.p)\n  %2:gr64 = IMPLICIT_DEF\n  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp\n  $rdi = COPY %2:gr64\n  $rsi = COPY %8:gr64\n  CALL64pcrel32 target-flags(x86-plt) @use, &lt;regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...&gt;, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi\n</code></pre></div>\n<p>If the <code>hasTrivialKill</code>/<code>hasOneUse</code> is invoked during construction of <code>MOV64mr</code> instruction and the overall DAG is unknown, then isn't the number of uses of the <code>%8</code> register 0? Otherwise if the <code>hasTrivialKill</code>/<code>hasOneUSe</code> is invoked when the DAG has the shape, then <code>%8</code> will have 2 uses, right?</p>",
        "id": 229215949,
        "sender_full_name": "nagisa",
        "timestamp": 1615149322
    },
    {
        "content": "<p>The hasOneUse() refers to an IR instruction, not an MachineInstr</p>",
        "id": 229216049,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615149404
    },
    {
        "content": "<p>In this case the extractvalue, which has only one use</p>",
        "id": 229216084,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615149480
    },
    {
        "content": "<p>Oh!</p>",
        "id": 229216155,
        "sender_full_name": "nagisa",
        "timestamp": 1615149540
    },
    {
        "content": "<p>So it'd have been fine if we didn't extractvalue exactly the same thing from <code>%struct</code> twice.</p>",
        "id": 229216181,
        "sender_full_name": "nagisa",
        "timestamp": 1615149578
    },
    {
        "content": "<p>In that case, it seems like this is prone to same kind of problem with many different instructions, intuitively thinking.</p>",
        "id": 229216243,
        "sender_full_name": "nagisa",
        "timestamp": 1615149612
    },
    {
        "content": "<p>Yeah, that code is definitely fragile. It needs to be careful to exclude anything that might be recognized as a no-op.</p>",
        "id": 229217171,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615150561
    },
    {
        "content": "<p>I'm wondering whether we should have a CI job with EXPENSIVE_CHECKS, might have caught this. Most likely it would be too slow though.</p>",
        "id": 229217313,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615150698
    },
    {
        "content": "<p>Hm, is there a way to turn on all of the <code>-verify</code> flags with a single flag?</p>",
        "id": 229218626,
        "sender_full_name": "nagisa",
        "timestamp": 1615151887
    },
    {
        "content": "<p>Trying to do an expensive_checks build... First failure is that it doesn't build at all, which is fixed by <a href=\"https://reviews.llvm.org/D98167\">https://reviews.llvm.org/D98167</a>. Then std build fails with \"Pass modifies its input and doesn't report it: MemCpy Optimization\"</p>",
        "id": 229295618,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615209287
    },
    {
        "content": "<p>I've submitted a followup patch <a href=\"https://reviews.llvm.org/D98294\">https://reviews.llvm.org/D98294</a> to <em>ehem</em> kill kills with fire.</p>",
        "id": 229570818,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1615330315
    }
]