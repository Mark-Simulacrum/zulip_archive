[
    {
        "content": "<p>Hello! In <a href=\"https://github.com/rust-lang/rust/pull/85646\">https://github.com/rust-lang/rust/pull/85646</a>, I made a MIR optimization to enhance the quality of the generated assembly, but the LLVM SimplifyCFG removes valuable information for the optimization to be completed by LLVM. I opened an issue on the LLVM bug tracker (<a href=\"https://bugs.llvm.org/show_bug.cgi?id=50455\">https://bugs.llvm.org/show_bug.cgi?id=50455</a>), but I figured my best chances for it to be solved would be to fix it myself. However, I'm not super knowledgeable in LLVM standards: would somebody here know by any chance what would be a good way to solve this specific issue so I can give a shot at implementing it? I figured adding metadata in some places could help, but I have no intuition of what is legal and what would be picked up by later opt passes.</p>",
        "id": 240236251,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621970199
    },
    {
        "content": "<p>This sounds potentially a pass ordering issue. But I also think that the right way to fix this in Rust would most likely be to add more range metadata more directly to more of the instructions.</p>",
        "id": 240242309,
        "sender_full_name": "nagisa",
        "timestamp": 1621972916
    },
    {
        "content": "<p>SimplifyCFG can't and doesn't want to care about this particular situation.</p>",
        "id": 240242387,
        "sender_full_name": "nagisa",
        "timestamp": 1621972932
    },
    {
        "content": "<p>From a phase ordering perspective, the solution would probably be to disable branch to select conversion in the first SimplifyCFG run which runs prior to IPSCCP.</p>",
        "id": 240245511,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1621974398
    },
    {
        "content": "<p>From a pure SimplifyCFG perspective, it would be possible to add assumes when folding away a switch with unreachable default, at least if the assume condition can be expressed simply. We actually already do that when folding simple conditional branches to unreachable.</p>",
        "id": 240245603,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1621974453
    },
    {
        "content": "<p>I think I might have made a mistake here: apparently the range metadata on the load instruction rustc emits does not get removed. So the missed opportunity might actually be later down the line.</p>",
        "id": 240248983,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976227
    },
    {
        "content": "<p>Here is the code in question:</p>\n<div class=\"codehilite\"><pre><span></span><code>start:\n  %_12 = alloca i32, align 4\n  %residual = alloca i32, align 4\n  %self = alloca %&quot;std::result::Result&lt;i32, u32&gt;&quot;, align 4\n  %_3 = alloca %&quot;std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, u32&gt;, i32&gt;&quot;, align 4\n  %1 = alloca %&quot;std::result::Result&lt;i32, u32&gt;&quot;, align 4\n  %2 = alloca i64, align 8\n  %x = alloca %&quot;std::result::Result&lt;i32, u32&gt;&quot;, align 4\n  %3 = bitcast i64* %2 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3)\n  store i64 %0, i64* %2, align 8\n  %4 = bitcast %&quot;std::result::Result&lt;i32, u32&gt;&quot;* %x to i8*\n  %5 = bitcast i64* %2 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 8 %5, i64 8, i1 false)\n  %6 = bitcast i64* %2 to i8*\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* %6)\n  %7 = bitcast %&quot;std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, u32&gt;, i32&gt;&quot;* %_3 to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7)\n  %8 = bitcast %&quot;std::result::Result&lt;i32, u32&gt;&quot;* %self to i8*\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8)\n  %9 = bitcast %&quot;std::result::Result&lt;i32, u32&gt;&quot;* %self to i8*\n  %10 = bitcast %&quot;std::result::Result&lt;i32, u32&gt;&quot;* %x to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 8, i1 false)\n  %11 = bitcast %&quot;std::result::Result&lt;i32, u32&gt;&quot;* %self to i32*\n  %12 = load i32, i32* %11, align 4, !range !5\n  %_8 = zext i32 %12 to i64\n  switch i64 %_8, label %bb2 [\n    i64 0, label %bb3\n    i64 1, label %bb1\n  ]\n</code></pre></div>",
        "id": 240249247,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976355
    },
    {
        "content": "<p>I think it might actually just remove the load that has the range information, which removes the range information entirely</p>",
        "id": 240249302,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976382
    },
    {
        "content": "<p>Would there be a way to emit the range information sooner when dealing with enum variants?</p>",
        "id": 240249389,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976404
    },
    {
        "content": "<p>for example maybe when allocating \"places\" in which we will store variants</p>",
        "id": 240249495,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976461
    },
    {
        "content": "<p>I don't know if LLVM supports that</p>",
        "id": 240249532,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621976474
    },
    {
        "content": "<p>Do you know of a place that lists where LLVM IR metadata can be appended? The LangRef is quite sparse on this sort of data</p>",
        "id": 240250544,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621977000
    },
    {
        "content": "<p>the metadata is attached to the SSA value, not the instruction, i.e. <code>%12</code> is known to have that particular range (the result of the load) AFAIK.</p>\n<p>(EDIT: on a further reflection: they are the same actually, and it turns out that the instruction used does matter, I was thinking of a different piece of metadata and then internally generalized it to everything else)</p>",
        "id": 240255546,
        "sender_full_name": "nagisa",
        "timestamp": 1621979968
    },
    {
        "content": "<p>Whether its a load insn or something else is irrelevant in this case.</p>",
        "id": 240255566,
        "sender_full_name": "nagisa",
        "timestamp": 1621979988
    },
    {
        "content": "<p>okay! that's actually good news, then?</p>",
        "id": 240255664,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980017
    },
    {
        "content": "<p>i have not gotten to look at the IR gen in rustc, but I suspect we should know when generating an SSA value whether it will be assigned to an enum variant, right?</p>",
        "id": 240255757,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980073
    },
    {
        "content": "<p>do you have a godbolt link with your test case?</p>",
        "id": 240255800,
        "sender_full_name": "nagisa",
        "timestamp": 1621980101
    },
    {
        "content": "<p>unfortunately this is in an unmerged PR</p>",
        "id": 240255882,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980129
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/85646\">https://github.com/rust-lang/rust/pull/85646</a></p>",
        "id": 240255896,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980140
    },
    {
        "content": "<p>...that I think I just broke</p>",
        "id": 240255925,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980165
    },
    {
        "content": "<p>I… don't think you can tell it _just_ from the place or its type.</p>",
        "id": 240255963,
        "sender_full_name": "nagisa",
        "timestamp": 1621980194
    },
    {
        "content": "<p>but you can by seeing if the place is only ever assigned a <code>discriminant(_)</code> expr.</p>",
        "id": 240255986,
        "sender_full_name": "nagisa",
        "timestamp": 1621980212
    },
    {
        "content": "<p>in an SSA context, is that not easy to determine?</p>",
        "id": 240256065,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980248
    },
    {
        "content": "<p>What is an SSA context in this case?</p>",
        "id": 240256083,
        "sender_full_name": "nagisa",
        "timestamp": 1621980265
    },
    {
        "content": "<p>like, if we're copying from either <code>discriminant(_)</code> or an SSA value that is known to be discriminant</p>",
        "id": 240256094,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980272
    },
    {
        "content": "<p>the context of LLVM IR I meant</p>",
        "id": 240256107,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980286
    },
    {
        "content": "<p>sorry if I'm not precise, I'm not used to this</p>",
        "id": 240256128,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980296
    },
    {
        "content": "<p>LLVM IR does not know about disciminants, its way more general.</p>",
        "id": 240256153,
        "sender_full_name": "nagisa",
        "timestamp": 1621980309
    },
    {
        "content": "<p>yes but we do, right?</p>",
        "id": 240256165,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980317
    },
    {
        "content": "<p>at some point we create an SSA value and we assign it something</p>",
        "id": 240256191,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980334
    },
    {
        "content": "<p>We almost never create SSA values in our codegen.</p>",
        "id": 240256208,
        "sender_full_name": "nagisa",
        "timestamp": 1621980349
    },
    {
        "content": "<p>can we not use information rustc knows on the something to figure out if it's a discriminant or not?</p>",
        "id": 240256216,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980351
    },
    {
        "content": "<p>I must be confused</p>",
        "id": 240256238,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980361
    },
    {
        "content": "<p>because MIR is not an SSA and its way easier to let LLVM's mem2reg to deal with it.</p>",
        "id": 240256275,
        "sender_full_name": "nagisa",
        "timestamp": 1621980365
    },
    {
        "content": "<p>I thought an SSA value was like %0, %1, etc</p>",
        "id": 240256287,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980368
    },
    {
        "content": "<p>Well, we create stack allocas most of the time which then are assigned to SSA values, but these values are really more like a pointer to a memory location than a memory location itself.</p>",
        "id": 240256358,
        "sender_full_name": "nagisa",
        "timestamp": 1621980421
    },
    {
        "content": "<p>mem2reg in LLVM later does remove these allocas where possible.</p>",
        "id": 240256430,
        "sender_full_name": "nagisa",
        "timestamp": 1621980475
    },
    {
        "content": "<p>ah</p>",
        "id": 240256570,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980551
    },
    {
        "content": "<p>that makes it... harder</p>",
        "id": 240256582,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980559
    },
    {
        "content": "<p>Anyway, I don't believe you can tell just by looking at a <code>_0 = disciminant(_x)</code> statement that <code>_0</code> is only ever going to be assigned a disciminant.</p>",
        "id": 240256598,
        "sender_full_name": "nagisa",
        "timestamp": 1621980572
    },
    {
        "content": "<p>because elsewhere in the function body there might be just a plain <code>_0 = const 42</code></p>",
        "id": 240256622,
        "sender_full_name": "nagisa",
        "timestamp": 1621980593
    },
    {
        "content": "<p>yes in MIR definitely</p>",
        "id": 240256628,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980598
    },
    {
        "content": "<p>I thought the LLVM IR codegen would generate SSA values directly</p>",
        "id": 240256695,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980615
    },
    {
        "content": "<p>in that case I think it would be possible still (?)</p>",
        "id": 240256701,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980621
    },
    {
        "content": "<p>but it's not the case</p>",
        "id": 240256725,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980641
    },
    {
        "content": "<p>I think it would necessitate another intermediate IR with different semantics from MIR.</p>",
        "id": 240256744,
        "sender_full_name": "nagisa",
        "timestamp": 1621980658
    },
    {
        "content": "<p>that would allow to reimplement something like mem2reg.</p>",
        "id": 240256762,
        "sender_full_name": "nagisa",
        "timestamp": 1621980668
    },
    {
        "content": "<p>would MIR being SSA help?</p>",
        "id": 240256764,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980670
    },
    {
        "content": "<p>Sure, but MIR can't be SSA.</p>",
        "id": 240256779,
        "sender_full_name": "nagisa",
        "timestamp": 1621980683
    },
    {
        "content": "<p>why?</p>",
        "id": 240256783,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980686
    },
    {
        "content": "<p>We run a number of analyses on it (e.g. borrowck) that necessitate preserving information that's closer to the source code.</p>",
        "id": 240256862,
        "sender_full_name": "nagisa",
        "timestamp": 1621980734
    },
    {
        "content": "<p>ah I see</p>",
        "id": 240256889,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980764
    },
    {
        "content": "<p>because I've also found SSA to be very useful for writing optimization</p>",
        "id": 240256900,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980778
    },
    {
        "content": "<p>(TBF I'm going to backtrack on that claim, I'm not ready to prove that it wouldn't be possible to implement borrowck on an SSA-ish IR, and I don't want to bother)</p>",
        "id": 240256906,
        "sender_full_name": "nagisa",
        "timestamp": 1621980783
    },
    {
        "content": "<p>that's ok</p>",
        "id": 240256930,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980801
    },
    {
        "content": "<p>though then I'd love to see an SSA form of MIR</p>",
        "id": 240256964,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980832
    },
    {
        "content": "<p>but that's probably a huge amount of work</p>",
        "id": 240257021,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980849
    },
    {
        "content": "<p>though if it ends up being a new format, optimizations could be ported to it progressively</p>",
        "id": 240257040,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980869
    },
    {
        "content": "<p>and then the codegen could use that to generate SSA values directly in LLVM IR</p>",
        "id": 240257058,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621980885
    },
    {
        "content": "<p>I'm not sure why LLVM-IR is not the SSA IR that you can write optimisations for in the first place, though.</p>",
        "id": 240257095,
        "sender_full_name": "nagisa",
        "timestamp": 1621980907
    },
    {
        "content": "<p>The only thing that LLVM-IR doesn't really have is ability to work with non-monomorphized code, and whether that'd be a benefit is quite debatable.</p>",
        "id": 240257206,
        "sender_full_name": "nagisa",
        "timestamp": 1621980965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"409735\">Théo Degioanni</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Fix.20an.20LLVM.20pass.20that.20eats.20an.20optimization.20attempt/near/240255882\">said</a>:</p>\n<blockquote>\n<p>unfortunately this is in an unmerged PR</p>\n</blockquote>\n<p>A godbolt link of the LLVM IR?</p>",
        "id": 240257335,
        "sender_full_name": "nagisa",
        "timestamp": 1621981046
    },
    {
        "content": "<p>i.e. not an excerpt of IR, but something that compiles?</p>",
        "id": 240257351,
        "sender_full_name": "nagisa",
        "timestamp": 1621981061
    },
    {
        "content": "<p>right</p>",
        "id": 240257374,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981080
    },
    {
        "content": "<p>I'm not experienced enough to understand what makes MIR opts worth it</p>",
        "id": 240257452,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Fix.20an.20LLVM.20pass.20that.20eats.20an.20optimization.20attempt/near/240257351\">said</a>:</p>\n<blockquote>\n<p>i.e. not an excerpt of IR, but something that compiles?</p>\n</blockquote>\n<p>I can give you that</p>",
        "id": 240257468,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981130
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/xqhjb1P36\">https://rust.godbolt.org/z/xqhjb1P36</a></p>",
        "id": 240257546,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981199
    },
    {
        "content": "<p>godbolt can do so much</p>",
        "id": 240257561,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981203
    },
    {
        "content": "<p>MIR optimisations are good where they imcrease the quality/reduce the amount of LLVM-IR we produce.</p>",
        "id": 240257608,
        "sender_full_name": "nagisa",
        "timestamp": 1621981218
    },
    {
        "content": "<p>They are good in that situation because MIR is generic.</p>",
        "id": 240257627,
        "sender_full_name": "nagisa",
        "timestamp": 1621981230
    },
    {
        "content": "<p>So for a function that is monomorphized 1000 times, the factor that we amplify by those 1000 times is much smaller when the LLVM-IR we generate is better.</p>",
        "id": 240257683,
        "sender_full_name": "nagisa",
        "timestamp": 1621981275
    },
    {
        "content": "<p>Okay that makes sense. Then I do believe those optimizations are easier to write in SSA form.</p>",
        "id": 240257734,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981317
    },
    {
        "content": "<p>(ignoring any other factor)</p>",
        "id": 240257788,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981333
    },
    {
        "content": "<p>That's why I like the idea of SSA MIR, that's all.</p>",
        "id": 240257805,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981344
    },
    {
        "content": "<p>That might be the case, but most of the low hanging fruit has been handled just fine as is (inlining, CFG simplifications). One thing that got stuck was various propagations, but that's lacking alias analysis and not SSA.</p>",
        "id": 240257872,
        "sender_full_name": "nagisa",
        "timestamp": 1621981394
    },
    {
        "content": "<p>Is there a tracking issue on things to do to increase the amount of metadata rustc outputs?</p>",
        "id": 240257873,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981396
    },
    {
        "content": "<p>I am very eager to learn and do things so I wonder whether I could help on that front.</p>",
        "id": 240257916,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981437
    },
    {
        "content": "<blockquote>\n<p>Ranges are only for loads, calls and invokes!<br>\n %_8 = zext i32 %12 to i64, !range !5</p>\n</blockquote>\n<p>welp.</p>",
        "id": 240258051,
        "sender_full_name": "nagisa",
        "timestamp": 1621981522
    },
    {
        "content": "<p>oh no</p>",
        "id": 240258064,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Fix.20an.20LLVM.20pass.20that.20eats.20an.20optimization.20attempt/near/240257095\">said</a>:</p>\n<blockquote>\n<p>I'm not sure why LLVM-IR is not the SSA IR that you can write optimisations for in the first place, though.</p>\n</blockquote>\n<p>(there's also the fact that writing opts in C++ is not very appealing <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> )</p>",
        "id": 240258170,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981600
    },
    {
        "content": "<p>That said I'm surprised LLVM would have trouble figuring out that range of %_8 is also !5 tbh.</p>",
        "id": 240258211,
        "sender_full_name": "nagisa",
        "timestamp": 1621981631
    },
    {
        "content": "<p>I think it actually just loses that whole code section</p>",
        "id": 240258247,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981668
    },
    {
        "content": "<p>because you don't have to go through memory here, so it just drops everything, including the metadata</p>",
        "id": 240258311,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621981689
    },
    {
        "content": "<p>In my experience the available infrastructure makes much larger difference than the language that is being used (though, of course all else being equal it would be a much more reasonable comparison). Right now alas the infrastructure for MIR opts is very lacking.</p>",
        "id": 240258469,
        "sender_full_name": "nagisa",
        "timestamp": 1621981820
    },
    {
        "content": "<p>As an example, I already said above that we lack e.g. alias analysis, which is preventing us from implementing various propagation passes. Another problem is the fact that updating the MIR data structures with optimized code is a major pain, or at least used to be back then; not sure how it is today, but I would be surprised it changed in meaningful ways.</p>",
        "id": 240258770,
        "sender_full_name": "nagisa",
        "timestamp": 1621982089
    },
    {
        "content": "<p>What does “updating the MIR data structures with optimized code” mean?</p>",
        "id": 240259459,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621982606
    },
    {
        "content": "<p>So MIR basic block is a Vec of Statements and Body is a Vec of BasicBlocks and another Vec of variables.. A lot of stuff refers to elements in these vectors by indices. As thus, if you want to change something, you must make sure that you don't invalidate the indices (which means that you must update the entire body every time you make a change) and even then due to how <code>Vec</code> works removing or adding things to a middle of a <code>Vec</code> is expensive.</p>",
        "id": 240259935,
        "sender_full_name": "nagisa",
        "timestamp": 1621982924
    },
    {
        "content": "<p>if you start adding/removing/updating things often, you quickly run into O(powers-of-n)</p>",
        "id": 240259971,
        "sender_full_name": "nagisa",
        "timestamp": 1621982958
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 240260165,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621983111
    },
    {
        "content": "<p>We have a way to update more efficiently at once, called Patch, but its pretty clunky to use too in my experience.</p>",
        "id": 240260258,
        "sender_full_name": "nagisa",
        "timestamp": 1621983166
    },
    {
        "content": "<p>Barely anything uses that mechanism.</p>",
        "id": 240260275,
        "sender_full_name": "nagisa",
        "timestamp": 1621983182
    },
    {
        "content": "<p>Thank you for the explanations. I need to head off. I’m a bit bummed out by the range issue however. Hopefully there’s something that can be done still to make the optimisation possible.</p>",
        "id": 240260646,
        "sender_full_name": "Théo Degioanni",
        "timestamp": 1621983473
    },
    {
        "content": "<p>Hmm, it looks like there's no <code>exact</code> flag available for <code>truncate</code>?  Seems like an odd omission, given <code>udiv exact</code> and <code>lshr exact</code> and such. I guess the way to encode it would be <code>shl n[ui]w</code>+<code>[la]shr exact</code>+<code>truncate</code>?</p>",
        "id": 240265474,
        "sender_full_name": "scottmcm",
        "timestamp": 1621987468
    }
]