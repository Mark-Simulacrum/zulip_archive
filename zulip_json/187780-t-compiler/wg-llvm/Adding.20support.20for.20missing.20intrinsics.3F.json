[
    {
        "content": "<p>Hi all, I was recently looking into improving some LLVM IR lowering for ARM DSP extensions and noticed that rustc doesn't support some of them, e.g. <a href=\"https://llvm.org/docs/LangRef.html#llvm-sshl-sat-intrinsics\">https://llvm.org/docs/LangRef.html#llvm-sshl-sat-intrinsics</a> . Is there interest to adding and supporting them? (Of course risking a peek into the potential rabbit hole of actually having to add support for saturated shifts to libcore as well).</p>",
        "id": 246115137,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1626364674
    },
    {
        "content": "<p>Having more intrinsics is not exactly a goal for Rust. There must be a motivating API that can utilize them (as an implementation detail)</p>",
        "id": 246116839,
        "sender_full_name": "nagisa",
        "timestamp": 1626365337
    },
    {
        "content": "<p>so yeah, the order of things is to propose adding a saturated shifting APIs to libstd/core and then implementing them in terms of intrinsics or however else, as necessary, to obtain required codegen quality.</p>",
        "id": 246116919,
        "sender_full_name": "nagisa",
        "timestamp": 1626365374
    },
    {
        "content": "<p>Is the team also here Zulip or where would I propose such new API functions?</p>",
        "id": 246118496,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1626365985
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"219381\" href=\"/#narrow/stream/219381-t-libs\">#t-libs</a> is a good entry point for that question.</p>",
        "id": 246119875,
        "sender_full_name": "nagisa",
        "timestamp": 1626366562
    },
    {
        "content": "<p>Ah, I want to add, if you must use the intrinsic no matter what you can use the LLVM intrinsic through link_name tricks.</p>",
        "id": 246238107,
        "sender_full_name": "nagisa",
        "timestamp": 1626449209
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>extern &quot;C&quot; {\n    #[link_name = &quot;@llvm.sshl.sat.i32&quot;]\n    fn my_shift(arg: u32, arg2: u32) -&gt; u32;\n}\n</code></pre></div>\n<p>or something.</p>",
        "id": 246238206,
        "sender_full_name": "nagisa",
        "timestamp": 1626449262
    },
    {
        "content": "<p>still about as unstable as using rust-intrinsicsâ€¦</p>",
        "id": 246238273,
        "sender_full_name": "nagisa",
        "timestamp": 1626449284
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"llvm.sshl.sat.i32\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">my_shift</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg2</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0658]: linking to LLVM intrinsics is experimental\n --&gt; src/lib.rs:3:5\n  |\n3 |     fn my_shift(arg: u32, arg2: u32) -&gt; u32;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: see issue #29602 &lt;https://github.com/rust-lang/rust/issues/29602&gt; for more information\n  = help: add `#![feature(link_llvm_intrinsics)]` to the crate attributes to enable\n</code></pre></div>",
        "id": 246250537,
        "sender_full_name": "bjorn3",
        "timestamp": 1626454964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263083\">@Daniel Egger</span> We're happy to accept more ARM intrinsics in stdarch. The saturating shift intrinsics are specified in the ACLE (ARM C language extension).</p>",
        "id": 246252494,
        "sender_full_name": "Amanieu",
        "timestamp": 1626455933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yes, using regular intrinsics is similarly unstable.</p>",
        "id": 246263889,
        "sender_full_name": "nagisa",
        "timestamp": 1626461512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/Adding.20support.20for.20missing.20intrinsics.3F/near/246252494\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"263083\">Daniel Egger</span> We're happy to accept more ARM intrinsics in stdarch. The saturating shift intrinsics are specified in the ACLE (ARM C language extension).</p>\n</blockquote>\n<p>Thanks. I'll have a look whether something is missing and will PR it. Ultimately my goal would be the ability to write regular Rust code which compiles on any architecture to optimal code, though.  We're not doing too shabby in that regard, Rust very nicely generates suitable IR for e.g. saturating functions which are lowered into ARM DSP instructions. LLVM needs some work though to support more than just a single value out of 2 or 4.</p>",
        "id": 246270753,
        "sender_full_name": "Daniel Egger",
        "timestamp": 1626465333
    }
]