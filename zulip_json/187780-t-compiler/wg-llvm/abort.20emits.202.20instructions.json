[
    {
        "content": "<p>Just to triple check, why is <code>core::intrinsics::abort</code> emitting 2x <code>ud2</code>s? <a href=\"https://gcc.godbolt.org/z/FoqYRc\" target=\"_blank\" title=\"https://gcc.godbolt.org/z/FoqYRc\">https://gcc.godbolt.org/z/FoqYRc</a><br>\nI can't seem to trigger the same behavior using llc, so the only reason I can imagine is that this is required for alignment purposes or similar.</p>",
        "id": 175520735,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568288749
    },
    {
        "content": "<p><code>call @llvm.trap</code> -&gt; ud2, and rustc sets a TargetMachine option to \"trap on unreachable\" so the <code>unreachable</code> also becomes an ud2. Manually feeding IR to llc will be missing the latter.</p>",
        "id": 175522688,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568290517
    },
    {
        "content": "<p>So do we have a bug in the implementation of <code>core::intrinsics::abort</code>, <code>core::arch::x86_64::ud2</code>, etc. ?</p>",
        "id": 175526011,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293248
    },
    {
        "content": "<p>IIUC, we could use <code>core::hint::unreachable_unchecked()</code> to only emit a single <code>unreachable</code>, and therefore a single <code>ud2</code> ?</p>",
        "id": 175526046,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293272
    },
    {
        "content": "<p>So that works: <a href=\"https://gcc.godbolt.org/z/jrhehx\" target=\"_blank\" title=\"https://gcc.godbolt.org/z/jrhehx\">https://gcc.godbolt.org/z/jrhehx</a></p>",
        "id": 175526183,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293348
    },
    {
        "content": "<p>No</p>",
        "id": 175526236,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568293384
    },
    {
        "content": "<p>While we're mitigating harm by asking the <em>backend</em> to emit ud2 rather than just letting control flow fall off the end of the function, the entire optimization pipeline will still exploit that <code>unreachable</code> is, well, unreachable.</p>",
        "id": 175526304,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568293437
    },
    {
        "content": "<p>Ah, makes sense</p>",
        "id": 175526399,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293463
    },
    {
        "content": "<p>Also I am not even sure if every backend does this.</p>",
        "id": 175526416,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568293479
    },
    {
        "content": "<p>Then I maybe should open an LLVM bug for an x86 backend optimization ?</p>",
        "id": 175526425,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293485
    },
    {
        "content": "<p>multiple ud2s can be coalesced</p>",
        "id": 175526432,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293491
    },
    {
        "content": "<p>but the x86 backend doesn't do that</p>",
        "id": 175526442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568293497
    },
    {
        "content": "<p>I mean, feel free, but this is literal peanuts</p>",
        "id": 175526447,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568293500
    },
    {
        "content": "<p>Not only are the ud2s a minuscle fraction of instructions emitted, they're also just two bytes each</p>",
        "id": 175526492,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568293537
    }
]