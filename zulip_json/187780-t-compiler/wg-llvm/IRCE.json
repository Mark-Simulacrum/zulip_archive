[
    {
        "content": "<p>I've talked with Philip Reames, who's working on an LLVM based Java runtime, so they have some of the same problems as Rust does wrt array bounds checks... He pointed out that they contributed an inductive range check elimination pass (<a href=\"https://github.com/llvm-mirror/llvm/blob/master/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp\" target=\"_blank\" title=\"https://github.com/llvm-mirror/llvm/blob/master/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp\">https://github.com/llvm-mirror/llvm/blob/master/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp</a>) that may be of interest to us. This pass isn't part of the default pipeline.</p>",
        "id": 167074484,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1559398979
    },
    {
        "content": "<p>The other pass he mentioned in LoopPredication, but that's not directly applicable for our purposes, as it relies on deoptimization.</p>",
        "id": 167074691,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1559399304
    }
]