[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> I was thinking of taking a stab at this: <a href=\"https://bugs.llvm.org/show_bug.cgi?id=41138\" target=\"_blank\" title=\"https://bugs.llvm.org/show_bug.cgi?id=41138\">https://bugs.llvm.org/show_bug.cgi?id=41138</a></p>",
        "id": 171840969,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564225851
    },
    {
        "content": "<p>A super common problem users using the <code>core::arch</code> intrinsics have is that, when abstracting over the intrinsics, they put them behind functions that aren't <code>#[target_feature]</code>. This prevents inlining - inlining across different target features is a bad idea -, which ends up meaning that, e.g., SIMD vectors end up spilled to the stack across each intrinsic</p>",
        "id": 171841046,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564226011
    },
    {
        "content": "<p>I think that even the most basic LLVM pass here would be incredibly valuable</p>",
        "id": 171841096,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564226091
    },
    {
        "content": "<p>If a function is called unconditionally, and that function has target features, add those target features to the caller.</p>",
        "id": 171841189,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564226225
    },
    {
        "content": "<p>recursively traversing all functions, updating their target features through the call stack</p>",
        "id": 171841239,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564226286
    },
    {
        "content": "<p>The intrinsics shouldn't have #[target_feature], and should always be inlined</p>",
        "id": 171841593,
        "sender_full_name": "Zoxc",
        "timestamp": 1564226837
    },
    {
        "content": "<p>At least if LLVM handles them correctly, which I hope it does since C/C++ does not have a <code>target_feature</code> feature.</p>",
        "id": 171841797,
        "sender_full_name": "Zoxc",
        "timestamp": 1564227234
    },
    {
        "content": "<p>If the intrinsics don't have <code>#[target_feature]</code> then they generate incorrect codegen</p>",
        "id": 171841866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564227305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> of course C and C++ have a target-feature feature __((target_feature = \"foo\"))__ or something like that</p>",
        "id": 171841873,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564227331
    },
    {
        "content": "<p>whether the intrinsics should be inlined is also up to the optimizer</p>",
        "id": 171841878,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564227352
    },
    {
        "content": "<p>some of them are quite complex and not worth inlining</p>",
        "id": 171841919,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564227366
    },
    {
        "content": "<p>Why do they generate incorrect code? That makes no sense</p>",
        "id": 171841928,
        "sender_full_name": "Zoxc",
        "timestamp": 1564227399
    },
    {
        "content": "<p>The pass you likely want to change is the <a href=\"https://llvm.org/docs/Passes.html#functionattrs-deduce-function-attributes\" target=\"_blank\" title=\"https://llvm.org/docs/Passes.html#functionattrs-deduce-function-attributes\">functionattrs pass</a>.</p>",
        "id": 171843026,
        "sender_full_name": "nagisa",
        "timestamp": 1564229584
    },
    {
        "content": "<p>Actually no, you want traversion in a reversed order than what functionattrs does.</p>",
        "id": 171843030,
        "sender_full_name": "nagisa",
        "timestamp": 1564229632
    },
    {
        "content": "<p>Wait, no, from your description it appears that functionattrs is exactly what you want</p>",
        "id": 171843071,
        "sender_full_name": "nagisa",
        "timestamp": 1564229669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> the pass needs to track whether it has already been applied to a function, and when it sees an unconditonal function call,  if it hasn't been applied to it, then recurse down first</p>",
        "id": 171843441,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564230442
    },
    {
        "content": "<blockquote>\n<p>If a function is called unconditionally, and that function has target features, add those target features to the caller.</p>\n</blockquote>\n<p>Is what functionattrs will allow you to implement</p>",
        "id": 171843450,
        "sender_full_name": "nagisa",
        "timestamp": 1564230472
    },
    {
        "content": "<p>this is the same thing it does for readnone/readonly/etc attributes.</p>",
        "id": 171843474,
        "sender_full_name": "nagisa",
        "timestamp": 1564230482
    },
    {
        "content": "<blockquote>\n<p>Why do they generate incorrect code? That makes no sense</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>  Because if they don't have target-features, the llvm intrinsics they call cannot be inlined across them, and everything gets spilled to the stack</p>",
        "id": 171843501,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564230501
    },
    {
        "content": "<p>i.e. this pass goes from leaves of the trees up to the root (<code>main</code>).</p>",
        "id": 171843502,
        "sender_full_name": "nagisa",
        "timestamp": 1564230509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> perfect, that's exactly what i need here</p>",
        "id": 171843507,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564230530
    },
    {
        "content": "<p>i'm not sure if I should duplicate the pass, or modify it</p>",
        "id": 171843516,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564230565
    },
    {
        "content": "<p>I can add options to it, I think i will do that first</p>",
        "id": 171843566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564230622
    },
    {
        "content": "<p>It depends on whether it makes sense to have this pass separately enabled from the rest of the stuff functionattrs do.</p>",
        "id": 171843641,
        "sender_full_name": "nagisa",
        "timestamp": 1564230801
    },
    {
        "content": "<p>(likely not)</p>",
        "id": 171843644,
        "sender_full_name": "nagisa",
        "timestamp": 1564230814
    },
    {
        "content": "<p>i think that this pass is always sound</p>",
        "id": 171843650,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564230832
    },
    {
        "content": "<p>I'm just afraid that C code is not, and that this pass will break it hard</p>",
        "id": 171843891,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564231205
    },
    {
        "content": "<p>LLVM does not concern itself with code thatâ€™s UB.</p>",
        "id": 171844373,
        "sender_full_name": "nagisa",
        "timestamp": 1564232189
    },
    {
        "content": "<p>LLVM is moving to the Attributor framework (<a href=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/Transforms/IPO/Attributor.cpp\" target=\"_blank\" title=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/Transforms/IPO/Attributor.cpp\">https://github.com/llvm/llvm-project/blob/master/llvm/lib/Transforms/IPO/Attributor.cpp</a>) for attribute inference. I'm not totally sure what the current state there is and whether new additions to FunctionAttrs are accepted at this point.</p>",
        "id": 171844881,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564233146
    },
    {
        "content": "<p>To propagate target features you need that every path from the entry is guaranteed to hit a target feature call -- which is usually approximated as it being in the entry block and having only guaranteed-transfer instructions before it.</p>",
        "id": 171845208,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564233839
    },
    {
        "content": "<p>I was looking at the attributor framework, and at the Attribute class, but it is not clear to me how target-specific attributes are handled there</p>",
        "id": 171845506,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564234363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> is it possible to iterate over all calls that are guaranteed to be hit from the entry ?</p>",
        "id": 171845682,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564234750
    },
    {
        "content": "<p>i'm not sure whether attributor or FunctionAttrs is a better place for the pass</p>",
        "id": 171845824,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564235000
    },
    {
        "content": "<p>AFAICT attributor would try to recompute the target-feature attribute of a function until a fix-point is reached</p>",
        "id": 171845837,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564235031
    },
    {
        "content": "<p>i'm not sure from reading into the framework whether the attribute of the functions being called are computed before  those of the callee or not</p>",
        "id": 171845883,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564235070
    },
    {
        "content": "<p>and indeed the functionality of the FunctionAttributes appears to be replicated in Attributor already</p>",
        "id": 171846057,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564235364
    },
    {
        "content": "<p>I don't think there's anything for the guaranteed-execution case yet -- a good starting point would be to loop over the instructions in the entry block until <code>isGuaranteedToTransferExecutionToSuccessor()</code> returns false. May be enhanced by checking in-flight attributes (like willreturn), which is where the fixpoint iteration comes in, as you will now depend on the overall attributor state.</p>",
        "id": 171847740,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564238226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> It looks like the necessary tooling for this is being worked on right now (see for example <a href=\"https://reviews.llvm.org/D65186\" target=\"_blank\" title=\"https://reviews.llvm.org/D65186\">https://reviews.llvm.org/D65186</a> and <a href=\"https://reviews.llvm.org/D65402\" target=\"_blank\" title=\"https://reviews.llvm.org/D65402\">https://reviews.llvm.org/D65402</a>), so it probably makes sense to wait a bit until it is in place.</p>",
        "id": 171979230,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564431039
    },
    {
        "content": "<p>Thanks, it appears that jdoerfert is the person to ping about this.</p>",
        "id": 172023422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564481390
    },
    {
        "content": "<p>It's also unclear to me how to access target-specific attributes from the Attributor framework</p>",
        "id": 172023475,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564481406
    }
]