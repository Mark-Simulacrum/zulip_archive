[
    {
        "content": "<p>It looks like I misunderstood the direction in which forward-progress guarantees in LLVM are headed. Apparently the current stance is that forward-progress is required and llvm.sideeffect is the final solution to this issue, not just a temporary workaround.</p>",
        "id": 172440445,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564907204
    },
    {
        "content": "<p>Wow :(</p>",
        "id": 172441784,
        "sender_full_name": "RalfJ",
        "timestamp": 1564910002
    },
    {
        "content": "<p>do they plan to fix clang? (currently LLVM, to my knowledge, violates the C standard by requiring forward progress even for loops where the conditional is a constant)</p>",
        "id": 172441789,
        "sender_full_name": "RalfJ",
        "timestamp": 1564910028
    },
    {
        "content": "<p>Any context? I did not get any pings on relevant bugs.</p>",
        "id": 172450968,
        "sender_full_name": "nagisa",
        "timestamp": 1564927649
    },
    {
        "content": "<p>Direct context is <a href=\"https://reviews.llvm.org/D59978\" target=\"_blank\" title=\"https://reviews.llvm.org/D59978\">https://reviews.llvm.org/D59978</a>, though more relevant is <a href=\"http://lists.llvm.org/pipermail/llvm-dev/2015-July/088095.html\" target=\"_blank\" title=\"http://lists.llvm.org/pipermail/llvm-dev/2015-July/088095.html\">http://lists.llvm.org/pipermail/llvm-dev/2015-July/088095.html</a>.</p>",
        "id": 172451132,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564927962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> seems worth asking how they plan to implement the \"unless loop conditional is a constant\" part of the C spec. Also I dont think C makes a forward progress assumption for recursive functions; the quoted part of the standard is specifically about loops.</p>",
        "id": 172461474,
        "sender_full_name": "RalfJ",
        "timestamp": 1564948061
    },
    {
        "content": "<p>or maybe I can read what they say in there as them saying that stack overflow is UB, which would be... really, really bad news for guard pages as they become useless. well not practically useless but from a principled perspective.</p>",
        "id": 172461525,
        "sender_full_name": "RalfJ",
        "timestamp": 1564948166
    },
    {
        "content": "<p>I've opened <a href=\"https://reviews.llvm.org/D65718\" target=\"_blank\" title=\"https://reviews.llvm.org/D65718\">https://reviews.llvm.org/D65718</a> to document this ... but based on the initial comments maybe the comments on that thread do not actually represent the current consensus.</p>",
        "id": 172461686,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564948451
    },
    {
        "content": "<p>Someone recently started a thread on llvm-dev to clarify stack overflow behavior, no responses yet though.</p>",
        "id": 172461693,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564948483
    },
    {
        "content": "<p>Tangentially related, I've been baited into finally implementing the -Z flag I proposed here <a href=\"https://github.com/rust-lang/rust/issues/28728#issuecomment-426247247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/28728#issuecomment-426247247\">https://github.com/rust-lang/rust/issues/28728#issuecomment-426247247</a> to see how bad the impact really is</p>",
        "id": 172461706,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564948527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> thanks for pointing us to the llvm-dev thread(s), I hope to chime in there as well (after catching up)</p>",
        "id": 172461750,
        "sender_full_name": "RalfJ",
        "timestamp": 1564948572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> Did you see <a href=\"https://github.com/rust-lang/rust/pull/59546\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59546\">https://github.com/rust-lang/rust/pull/59546</a>?</p>",
        "id": 172461816,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564948737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> do you know if there is any basis in C for removing infinite recursion with no side-effects?</p>",
        "id": 172461823,
        "sender_full_name": "RalfJ",
        "timestamp": 1564948756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span>  Oh dear. I did not.</p>",
        "id": 172461825,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564948760
    },
    {
        "content": "<p>That has some indication about just how bad it is. Though I think that it's somewhat overly pessimistic, because it places sideeffect intrinsics on every call instead of on every function entry.</p>",
        "id": 172461834,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564948795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> is \"current\" discussion happening on the list or that review you linked? What would likely be the better place to respond?</p>",
        "id": 172461896,
        "sender_full_name": "RalfJ",
        "timestamp": 1564948880
    },
    {
        "content": "<p>(asking because I am not very familiar with the ways of LLVM. still takes me several minutes, once I wrote a patch, to submit it for review there. I had no idea that non-PR-based workflows are <em>so bad</em> until I was subject to this one. I mean I worked on KDE which also used/uses a reviewboard, but there at least I could just <code>git push</code> \"into the reviewboard\", so things were much easier. manually picking reviewers as a dont-know-anything new contributor still sucked though.)</p>",
        "id": 172461899,
        "sender_full_name": "RalfJ",
        "timestamp": 1564948915
    },
    {
        "content": "<blockquote>\n<p>That has some indication about just how bad it is. Though I think that it's somewhat overly pessimistic, because it places sideeffect intrinsics on every call instead of on every function entry.</p>\n</blockquote>\n<p>I only see perf results, which measure compile time as much as optimization impact. It seems nobody has provided lolbench results (or other measurements) so far. Is that correct?</p>",
        "id": 172461958,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564949009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> For stack overflows I'd respond to <a href=\"http://lists.llvm.org/pipermail/llvm-dev/2019-August/134317.html\" target=\"_blank\" title=\"http://lists.llvm.org/pipermail/llvm-dev/2019-August/134317.html\">http://lists.llvm.org/pipermail/llvm-dev/2019-August/134317.html</a>. For forward-progress in general probably best on <a href=\"https://reviews.llvm.org/D65718\" target=\"_blank\" title=\"https://reviews.llvm.org/D65718\">https://reviews.llvm.org/D65718</a>, I don't think there has been a recent mailing list discussion on this.</p>",
        "id": 172462005,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564949089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> thanks</p>",
        "id": 172462014,
        "sender_full_name": "RalfJ",
        "timestamp": 1564949107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> Yeah, those are only compile time results (though check build regressions should be pure run-time regressions). Compile-time is a big concern as well though, because llvm.sideeffect really blows up the IR without some kind of coalescing.</p>",
        "id": 172462070,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564949188
    },
    {
        "content": "<p>Sure, the compile time regression sucks, but it's much less important than missed optimizations IMO (and apparently also in the eyes of the compiler team)</p>",
        "id": 172462140,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564949354
    },
    {
        "content": "<p>I think for that PR we ideally want to do codegen analysis pass (we have some for e.g. SSA-ization of our MIR values. something similar to that)</p>",
        "id": 172462289,
        "sender_full_name": "nagisa",
        "timestamp": 1564949611
    },
    {
        "content": "<p>and then just stick a <code>sideeffect</code> in the entry point of that function which should not be optimised out.</p>",
        "id": 172462293,
        "sender_full_name": "nagisa",
        "timestamp": 1564949632
    },
    {
        "content": "<p>at least currently LLVM is not smart enough to remove the loops themselves, rather it is only removing calls to functions that contain such infinite loops.</p>",
        "id": 172462342,
        "sender_full_name": "nagisa",
        "timestamp": 1564949653
    },
    {
        "content": "<p>but for perf evaluation I think whatever approach works.</p>",
        "id": 172462358,
        "sender_full_name": "nagisa",
        "timestamp": 1564949702
    },
    {
        "content": "<p>What sort of analysis are you thinking of? Finding loops?</p>",
        "id": 172462365,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564949718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> It's not so much that LLVM isn't smart enough, but that it currently has explicit checks to not remove potentially infinite loops.</p>",
        "id": 172462424,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1564949833
    },
    {
        "content": "<blockquote>\n<p>What sort of analysis are you thinking of? Finding loops?</p>\n</blockquote>\n<p>Analysis which figures out whether we need to smack a <code>sideeffect</code> into the function. It can be as simple as \"if there is a loop\" or as complicated \"this particular pattern makes semantics currently not match\".</p>",
        "id": 172462475,
        "sender_full_name": "nagisa",
        "timestamp": 1564949908
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> It's not so much that LLVM isn't smart enough, but that it currently has explicit checks to not remove potentially infinite loops.</p>\n</blockquote>\n<p>Okay, \"smart enough to not remove\".</p>",
        "id": 172462482,
        "sender_full_name": "nagisa",
        "timestamp": 1564949937
    },
    {
        "content": "<p>Because of recursion, \"there's a loop\" is not enough.</p>",
        "id": 172462496,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564949967
    },
    {
        "content": "<p>lol... searching for \"C is stack overflow undefined behavior\" is not as helpful as one might think because a certain site decided to pick a particular name...</p>",
        "id": 172462550,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950030
    },
    {
        "content": "<p>Stack overflow is a buffer overrun, so they are equivalent.</p>",
        "id": 172462553,
        "sender_full_name": "nagisa",
        "timestamp": 1564950060
    },
    {
        "content": "<p>I dont think the C standard specifies the stack as a buffer</p>",
        "id": 172462562,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950075
    },
    {
        "content": "<p>C standard will not specify anything much about stack at all, because that’s a concern for an ABI document.</p>",
        "id": 172462566,
        "sender_full_name": "nagisa",
        "timestamp": 1564950107
    },
    {
        "content": "<p>At least that’s my intuition, I haven’t C standard in my head.</p>",
        "id": 172462610,
        "sender_full_name": "nagisa",
        "timestamp": 1564950138
    },
    {
        "content": "<p>I hope nobody does, they could go right to the asylum...</p>",
        "id": 172462612,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950153
    },
    {
        "content": "<p>but I do know that ABI documents usually take the responsibility of specifying stack.</p>",
        "id": 172462613,
        "sender_full_name": "nagisa",
        "timestamp": 1564950155
    },
    {
        "content": "<p>the other tricky bit is that the compiler is certainly allowed to turn stack overflows into working code, e.g. by removing unused local variables</p>",
        "id": 172462618,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950179
    },
    {
        "content": "<p>ABI documents aren't (shouldn't) be in the business of settling whether something is UB or not, though</p>",
        "id": 172462619,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564950181
    },
    {
        "content": "<p>that could be specified very precisely by saying \"on the Abstract Machine, any time a function is called, execution <em>might</em> halt due a stack overflow\"</p>",
        "id": 172462624,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950200
    },
    {
        "content": "<p>but of course such precision is not achieved by the C spec</p>",
        "id": 172462628,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> ABI document does not set what UB is or isn’t, but it does (and should) specify what stack is.</p>",
        "id": 172462670,
        "sender_full_name": "nagisa",
        "timestamp": 1564950256
    },
    {
        "content": "<p>Which usually is a buffer that \"grows downwards\".</p>",
        "id": 172462672,
        "sender_full_name": "nagisa",
        "timestamp": 1564950271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> but in no way does that make it a buffer in any C sense</p>",
        "id": 172462689,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950294
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 172462697,
        "sender_full_name": "nagisa",
        "timestamp": 1564950307
    },
    {
        "content": "<p>like, ABIs also define frame pointers and return pointers and stuff</p>",
        "id": 172462699,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950314
    },
    {
        "content": "<p>and still it is UB to observe those from C</p>",
        "id": 172462701,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950319
    },
    {
        "content": "<p>ABIs are basically mostly hardware-level documents. they don't really say anything about what the C Abstract Machine does, AFAIK.</p>",
        "id": 172462746,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950365
    },
    {
        "content": "<p>some aspects of ABI feed back, such as sizes of types</p>",
        "id": 172462747,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950384
    },
    {
        "content": "<p>but those are explicitly accounted for in a precise Abstract Machine spec: \"each type has an implementation-defined size, ...\"</p>",
        "id": 172462753,
        "sender_full_name": "RalfJ",
        "timestamp": 1564950409
    },
    {
        "content": "<p>I guess there is one example (SPARC) where stack is not a buffer at all.</p>",
        "id": 172462818,
        "sender_full_name": "nagisa",
        "timestamp": 1564950564
    },
    {
        "content": "<p>(well, it is in a sense that it is still a few pages of memory), but the actual hardware requires it to be used in a very specific manner which disallows to treat it that way</p>",
        "id": 172462865,
        "sender_full_name": "nagisa",
        "timestamp": 1564950621
    }
]