[
    {
        "content": "<p><a href=\"https://lists.llvm.org/pipermail/llvm-dev/2019-October/135786.html\" target=\"_blank\" title=\"https://lists.llvm.org/pipermail/llvm-dev/2019-October/135786.html\">https://lists.llvm.org/pipermail/llvm-dev/2019-October/135786.html</a><br>\nIsn't this something Rust already does? Why do they need to touch codegen to make this happen in clang?</p>",
        "id": 178180995,
        "sender_full_name": "RalfJ",
        "timestamp": 1571136896
    },
    {
        "content": "<p>Looking at the description of the linked patch, it seems to use the same mechanism we use (probe-stack), just extended to use an inlined code sequence instead of a function call. I don't know why this is necessary, perhaps they can't assume that such a function is available? (e.g. if using clang with libgcc)</p>",
        "id": 178181222,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571137083
    },
    {
        "content": "<p>Reading the patch the author wants to avoid probing where unnecessary (i.e. where the otherwise generated code would probe by itself?)</p>",
        "id": 178185484,
        "sender_full_name": "nagisa",
        "timestamp": 1571140843
    },
    {
        "content": "<p>I think Rust also only does this for arm and x86, but Serge eventually wants to reach at least all arches that Fedora uses</p>",
        "id": 178434092,
        "sender_full_name": "cuviper",
        "timestamp": 1571358708
    },
    {
        "content": "<p>if they do, can Rust benefit from that as well? would be good to have more arches covered :D</p>",
        "id": 178537495,
        "sender_full_name": "RalfJ",
        "timestamp": 1571476682
    },
    {
        "content": "<p>Presumably, since AFAIK the limiting factor for rustc's stack probing is porting the assembly code that does the probing and backend support for inserting the probing in functions, both of which they would also have to solve for Clang.</p>",
        "id": 178537732,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571477075
    }
]