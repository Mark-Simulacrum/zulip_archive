[
    {
        "content": "<p>following up on discussion from T-compiler triage meeting here.</p>",
        "id": 272278633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112782
    },
    {
        "content": "<p>(meeting discussion started here: <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272275991\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-17.20.2354818/near/272275991</a> )</p>",
        "id": 272278811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645112878
    },
    {
        "content": "<p>Per cuviper's remark, <a href=\"https://github.com/rust-lang/rust/issues/94032#issuecomment-1043162202\">https://github.com/rust-lang/rust/issues/94032#issuecomment-1043162202</a> It looks like this is fixed by removing the <code>#[inline]</code> attribute, so that pretty much confirms it is based on a combination of inlining and pass ordering.</p>",
        "id": 272296140,
        "sender_full_name": "Jubilee",
        "timestamp": 1645119825
    },
    {
        "content": "<p>Since it's confirmed to only be for x86 and not x86-64 and not other 32-bit targets, is disabling NewPM for that target only on the table?</p>",
        "id": 272296526,
        "sender_full_name": "Jubilee",
        "timestamp": 1645119968
    },
    {
        "content": "<p>That seems like a pretty big hammer with various side effects...</p>",
        "id": 272297178,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645120245
    },
    {
        "content": "<p>We did that for s390x, but that's only tier-2. Plus that one was directly about inlining trouble with exponential growth, and might be better since we disabled deferred inlining anyway.</p>",
        "id": 272298259,
        "sender_full_name": "cuviper",
        "timestamp": 1645120688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/optimized.20i686.20fails.20primal-sieve.20tests.20.2394032/near/272297178\">said</a>:</p>\n<blockquote>\n<p>That seems like a pretty big hammer with various side effects...</p>\n</blockquote>\n<p>It is, but doing it for only one target seems worth considering since \"disable it entirely\" was on the table before, unless that was implicitly the subject of the discussion of the meeting.</p>",
        "id": 272300202,
        "sender_full_name": "Jubilee",
        "timestamp": 1645121441
    },
    {
        "content": "<p>I also think it's reasonable to suggest that even if an s390x target is tier 2 and some i686 targets are tier 1, that the balance tilts more heavily in the direction of \"keep code working\" for i686 than \"make sure it runs well\".</p>\n<p>A more surgical solution does seem ideal, but it seems thin on time and it might be target-specific.</p>",
        "id": 272300756,
        "sender_full_name": "Jubilee",
        "timestamp": 1645121668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Complete agreement with i686 being more \"keep it working\".</p>",
        "id": 272301799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645122149
    },
    {
        "content": "<p>That's the only thing I had in mind there: disabling NewPM seemed like a substantially different code path, which might make it harder to maintain and debug.</p>",
        "id": 272301848,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645122172
    },
    {
        "content": "<p>Performance wasn't my primary concern there. :)</p>",
        "id": 272301877,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645122185
    },
    {
        "content": "<p>Ah, well, it's definitely kicking the can down the road a bit rather than allowing us to drop the old PM entirely, but it's also the devil we know better.</p>\n<p><code>-Cllvm-args</code> effectively passes to <code>llc</code>, right? Or is it opt...?</p>",
        "id": 272302083,
        "sender_full_name": "Jubilee",
        "timestamp": 1645122265
    },
    {
        "content": "<p>I think it affects both for library usage</p>",
        "id": 272302481,
        "sender_full_name": "cuviper",
        "timestamp": 1645122443
    },
    {
        "content": "<p><code>-inline-deferral</code> in particular matters for <code>opt</code> though</p>",
        "id": 272302535,
        "sender_full_name": "cuviper",
        "timestamp": 1645122468
    },
    {
        "content": "<p>There isn't a convenient page or print option summarizing all the CLI arguments applicable thereby, is there?</p>",
        "id": 272303002,
        "sender_full_name": "Jubilee",
        "timestamp": 1645122658
    },
    {
        "content": "<p>I just use <code>-help</code> and/or <code>-help-hidden</code></p>",
        "id": 272303268,
        "sender_full_name": "cuviper",
        "timestamp": 1645122775
    },
    {
        "content": "<p>or <code>--help-list</code> or <code>--help-list-hidden</code> -- I dunno, just mash them all</p>",
        "id": 272303310,
        "sender_full_name": "cuviper",
        "timestamp": 1645122795
    },
    {
        "content": "<p>laughing at the absolute state</p>",
        "id": 272303356,
        "sender_full_name": "Jubilee",
        "timestamp": 1645122818
    },
    {
        "content": "<p>Thank you. <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 272303395,
        "sender_full_name": "Jubilee",
        "timestamp": 1645122841
    },
    {
        "content": "<p>looks like the actual difference in \"list\" is just that it doesn't group options into any categories, but that grouping is pretty minimal anyway. almost everything is under \"General options\".</p>",
        "id": 272304685,
        "sender_full_name": "cuviper",
        "timestamp": 1645123430
    },
    {
        "content": "<p>I'm starting to try to look into this more now</p>",
        "id": 272304839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645123491
    },
    {
        "content": "<p>silly question over here: the <code>[llvm] targets</code> in <code>config.toml</code>, am I correct in inferring that <code>X86</code> there represents support for <em>both</em> i686 and x86_64 ?</p>",
        "id": 272304923,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645123527
    },
    {
        "content": "<p>yes</p>",
        "id": 272304946,
        "sender_full_name": "cuviper",
        "timestamp": 1645123534
    },
    {
        "content": "<p>(i've reproduced it and I'm working on reducing it, FYI)</p>",
        "id": 272308299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645125073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/optimized.20i686.20fails.20primal-sieve.20tests.20.2394032/near/272300202\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/187780-t-compiler.2Fwg-llvm/topic/optimized.20i686.20fails.20primal-sieve.20tests.20.2394032/near/272297178\">said</a>:</p>\n<blockquote>\n<p>That seems like a pretty big hammer with various side effects...</p>\n</blockquote>\n<p>It is, but doing it for only one target seems worth considering since \"disable it entirely\" was on the table before, unless that was implicitly the subject of the discussion of the meeting.</p>\n</blockquote>\n<p>Indeed, we didn't clarify this explicitly, but what was in my head during the earlier conversation was indeed \"disable New PM across the board\"</p>",
        "id": 272308735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645125274
    },
    {
        "content": "<p>I might be able to be talked into a more narrow \"disable New PM by-default for <em>just</em> i686.\" But I really want to get a bit further in trying to isolate the root cause before applying that (somewhat more restricted) hammer.</p>",
        "id": 272308814,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645125320
    },
    {
        "content": "<p>if it helps, for <code>test --lib</code> you can remove the <code>primal-sieve</code> dev-dependencies on <code>primal</code> and <code>criterion</code>, just keeping <code>primal-slowsieve</code></p>",
        "id": 272310245,
        "sender_full_name": "cuviper",
        "timestamp": 1645125990
    },
    {
        "content": "<p>yeah, I already just moved the single test into its own main function and stopped using the dev-dependencies at all (I think)</p>",
        "id": 272310290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126020
    },
    {
        "content": "<p>its just depending on the <code>primal-sieve</code> crate itself.  I haven't yet delved into its depths</p>",
        "id": 272310338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126047
    },
    {
        "content": "<p>hmm, I thought I tried that and it didn't reproduce anymore</p>",
        "id": 272310365,
        "sender_full_name": "cuviper",
        "timestamp": 1645126059
    },
    {
        "content": "<p>but if that's working for you, all the better</p>",
        "id": 272310537,
        "sender_full_name": "cuviper",
        "timestamp": 1645126125
    },
    {
        "content": "<p>current main looks like this: <a href=\"https://gist.github.com/pnkfelix/a2755c48ae1476c02f7b9f8a7d76ec62\">https://gist.github.com/pnkfelix/a2755c48ae1476c02f7b9f8a7d76ec62</a></p>",
        "id": 272310654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126181
    },
    {
        "content": "<p>so its not like I've gotten it down to nothing</p>",
        "id": 272310674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126192
    },
    {
        "content": "<p>but I'm exploring removing as much as I can from the mod's now</p>",
        "id": 272310687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126201
    },
    {
        "content": "<p>ah, I had tried it as something under <code>tests/</code>, but that would be quite different in codegen units</p>",
        "id": 272310856,
        "sender_full_name": "cuviper",
        "timestamp": 1645126264
    },
    {
        "content": "<p>you can cut out <code>folded_sum</code> and just <code>assert_eq!(manual_sum, 142913828922);</code></p>",
        "id": 272311387,
        "sender_full_name": "cuviper",
        "timestamp": 1645126515
    },
    {
        "content": "<p>heh, i hadn't paid attention to which one was in error. :)</p>",
        "id": 272311449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126542
    },
    {
        "content": "<p>oh damn, that fails on x86_64 too!</p>",
        "id": 272311457,
        "sender_full_name": "cuviper",
        "timestamp": 1645126549
    },
    {
        "content": "<p>hmm, I'm not seeing that, not yet at least</p>",
        "id": 272311578,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126593
    },
    {
        "content": "<p>oh wait, there it is!</p>",
        "id": 272311663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126640
    },
    {
        "content": "<p>you're right, literally adding that change makes it fail. That's freaking wacky!</p>",
        "id": 272311681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645126650
    },
    {
        "content": "<p>stable too, so this is no longer a \"new\" regression</p>",
        "id": 272311831,
        "sender_full_name": "cuviper",
        "timestamp": 1645126699
    },
    {
        "content": "<p>1.54.0 passes, 1.55.0 fails</p>",
        "id": 272312111,
        "sender_full_name": "cuviper",
        "timestamp": 1645126833
    },
    {
        "content": "<p>since there's a heap of unsafe pointers in the wheel code, I'll note that miri is happy with the current <code>primal</code> master branch</p>",
        "id": 272313974,
        "sender_full_name": "cuviper",
        "timestamp": 1645127834
    },
    {
        "content": "<p>(I recently pushed a fix for an issue there)</p>",
        "id": 272314009,
        "sender_full_name": "cuviper",
        "timestamp": 1645127850
    },
    {
        "content": "<p>Oh, well.<br>\nI think that makes disabling NewPM functionally pointless.</p>",
        "id": 272314251,
        "sender_full_name": "Jubilee",
        "timestamp": 1645127966
    },
    {
        "content": "<p>yeah i don't think we'll be doing that for this bug</p>",
        "id": 272314349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645127987
    },
    {
        "content": "<p>which to me means there's ... not as much rush? I mean, of course it'd be great to fix this</p>",
        "id": 272314483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645128006
    },
    {
        "content": "<p>Yeah.<br>\nIf the regression is on stable, it's \"too late\" and there's nothing to be saved by reverting, really.</p>",
        "id": 272314640,
        "sender_full_name": "Jubilee",
        "timestamp": 1645128028
    },
    {
        "content": "<p>but I think the impact we're talking about , its really hard to predict impact, but the crucial point is that this is something already latent</p>",
        "id": 272314651,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645128030
    },
    {
        "content": "<p>And we might as well continue to let regression reports roll in.</p>",
        "id": 272314860,
        "sender_full_name": "Jubilee",
        "timestamp": 1645128071
    },
    {
        "content": "<p>yes, accumulating extra examples is a good thing</p>",
        "id": 272315021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645128101
    },
    {
        "content": "<p><code>cargo bisect-rustc</code> gives me a pass on <code>nightly-2021-07-05</code> and a fail on <code>nightly-2021-07-06</code></p>",
        "id": 272315287,
        "sender_full_name": "cuviper",
        "timestamp": 1645128158
    },
    {
        "content": "<p>but it seems we don't have CI builds cached anymore to drill further</p>",
        "id": 272315330,
        "sender_full_name": "cuviper",
        "timestamp": 1645128177
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  commit[0] 2021-07-04UTC: Auto merge of #86598 - yoshuawuyts:poll-method-docs, r=JohnTitor\n  commit[1] 2021-07-04UTC: Auto merge of #86875 - JohnTitor:rollup-fuefamw, r=JohnTitor\n  commit[2] 2021-07-05UTC: Auto merge of #86867 - JohnTitor:convert-to-actual-assert, r=jackh726\n  commit[3] 2021-07-05UTC: Auto merge of #86282 - camelid:macro_rules-matchers, r=jyn514\n  commit[4] 2021-07-05UTC: Auto merge of #86663 - fee1-dead:use-rustdoc-css, r=GuillaumeGomez\n  commit[5] 2021-07-05UTC: Auto merge of #86861 - RalfJung:miri, r=RalfJung\n  commit[6] 2021-07-05UTC: Auto merge of #84560 - cjgillot:inline-iter, r=m-ou-se\n  commit[7] 2021-07-05UTC: Auto merge of #86674 - Aaron1011:new-querify-limits, r=michaelwoerister\n  commit[8] 2021-07-05UTC: Auto merge of #86891 - JohnTitor:rollup-gy2gan9, r=JohnTitor\n</code></pre></div>",
        "id": 272315369,
        "sender_full_name": "cuviper",
        "timestamp": 1645128193
    },
    {
        "content": "<p>I'll try a local git-bisect</p>",
        "id": 272315730,
        "sender_full_name": "cuviper",
        "timestamp": 1645128360
    },
    {
        "content": "<p>well that blames <a href=\"https://github.com/rust-lang/rust/issues/84560\">#84560</a>, which is a single <code>#[inline]</code> addition</p>",
        "id": 272322199,
        "sender_full_name": "cuviper",
        "timestamp": 1645131802
    },
    {
        "content": "<p>I can see how that might perturb things here, but it's not a root cause</p>",
        "id": 272322253,
        "sender_full_name": "cuviper",
        "timestamp": 1645131831
    },
    {
        "content": "<p>stepping through this on x86_64, I found that in <code>SievePrimes::advance_ones</code>, <code>self.limit</code> is getting clobbered by <code>self.ones = bits.ones_from(0);</code></p>",
        "id": 272338245,
        "sender_full_name": "cuviper",
        "timestamp": 1645139846
    },
    {
        "content": "<p><code>ones_from</code> is not inlined, but it's getting a pointer for the return location, and that overlaps the stack where <code>limit</code> is stored</p>",
        "id": 272338326,
        "sender_full_name": "cuviper",
        "timestamp": 1645139896
    },
    {
        "content": "<p>e.g. 0x7fffffffd7b8 where it should store 4 words, and <code>limit</code> is at 0x7fffffffd7c8</p>",
        "id": 272338367,
        "sender_full_name": "cuviper",
        "timestamp": 1645139934
    },
    {
        "content": "<p>I added <code>dbg!(self.limit)</code> and the problem still reproduced, but <code>dbg!(&amp;self.limit)</code> makes the problem go away. So observation of the address matters, which is maybe SROA-related?</p>",
        "id": 272338743,
        "sender_full_name": "cuviper",
        "timestamp": 1645140184
    },
    {
        "content": "<p>hmm, it works without stack coloring</p>",
        "id": 272347927,
        "sender_full_name": "cuviper",
        "timestamp": 1645147148
    },
    {
        "content": "<p><code>-Cllvm-args=--no-stack-coloring</code></p>",
        "id": 272347938,
        "sender_full_name": "cuviper",
        "timestamp": 1645147170
    },
    {
        "content": "<p>I don't know if that means the llvm.lifetimes are wrong, or what</p>",
        "id": 272349757,
        "sender_full_name": "cuviper",
        "timestamp": 1645148830
    },
    {
        "content": "<p>that's an interesting theory</p>",
        "id": 272354684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645153485
    },
    {
        "content": "<p>So I'm seeing two large frame allocation for the return values of <code>Sieve::primes_from</code> and <code>SievePrimes::advance_ones</code>, which then both copy into registers after the call, so that's the bounded lifetime of those allocs. This is what stack-coloring merges. The <code>limit</code> I mentioned comes from the first one.</p>",
        "id": 272428469,
        "sender_full_name": "cuviper",
        "timestamp": 1645204126
    },
    {
        "content": "<p>later, machine-sink moves that <code>limit</code> register load into the loop. But this is not valid, because <code>SievePrimes::advance_ones</code> will clobber that memory.</p>",
        "id": 272428699,
        "sender_full_name": "cuviper",
        "timestamp": 1645204221
    },
    {
        "content": "<p>sorry, actually <code>advance_ones</code> is inlined, but its call to <code>BitVec::ones_from</code> is what shares that alloc and clobbers the memory</p>",
        "id": 272428951,
        "sender_full_name": "cuviper",
        "timestamp": 1645204343
    },
    {
        "content": "<p>here's the LLVM IR I'm looking at: <a href=\"https://gist.github.com/cuviper/9271caacea861347a42d7d6384902779\">https://gist.github.com/cuviper/9271caacea861347a42d7d6384902779</a></p>",
        "id": 272429222,
        "sender_full_name": "cuviper",
        "timestamp": 1645204487
    },
    {
        "content": "<p>and I'm crudely digging through <code>llc --print-after-all</code></p>",
        "id": 272429289,
        "sender_full_name": "cuviper",
        "timestamp": 1645204516
    },
    {
        "content": "<p>the <code>limit</code> field starts at IR <code>%25</code> in that</p>",
        "id": 272429460,
        "sender_full_name": "cuviper",
        "timestamp": 1645204594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> is this enough that you could form a coherent LLVM bug report?</p>",
        "id": 272430529,
        "sender_full_name": "cuviper",
        "timestamp": 1645205163
    },
    {
        "content": "<p>(it does work with <code>--disable-machine-sink</code>)</p>",
        "id": 272431148,
        "sender_full_name": "cuviper",
        "timestamp": 1645205468
    },
    {
        "content": "<p>I'll look into it.</p>",
        "id": 272694884,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645453579
    },
    {
        "content": "<p>I believe that <code>MachineSinking::hasStoreBetween()</code> is skipping blocks based on an incorrect postdom check, though I haven't quite figured out the necessary CFG structure yet.</p>",
        "id": 272709029,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1645460526
    },
    {
        "content": "<p>have you all already created a single file reproducer, or should I keep working on mine (currently <a href=\"https://gist.github.com/pnkfelix/f45098bc69482dac920dcf384049b849\">2kloc main.rs</a>, solely dep on libstd)? I couldn't tell if <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> 's link was something that one could expect to execute</p>",
        "id": 272736886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645479030
    },
    {
        "content": "<p>let's see if clang can eat that.</p>",
        "id": 272736960,
        "sender_full_name": "Jubilee",
        "timestamp": 1645479118
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>usr/bin/ld: /tmp/example-499917.o: in function `core::ptr::drop_in_place&lt;primal_sieve::sieve::Sieve&gt;&#39;:\nprimal_sieve.88lhwwez-cgu.7:(.text+0x5): undefined reference to `&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop&#39;\n/usr/bin/ld: /tmp/example-499917.o: in function `primal_sieve::main&#39;:\nprimal_sieve.88lhwwez-cgu.7:(.text+0x30): undefined reference to `primal_sieve::sieve::Sieve::new&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0x5d): undefined reference to `primal_sieve::sieve::Sieve::primes_from&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0x8ea): undefined reference to `_ZN10primal_bit4iter43_$LT$impl$u20$primal_bit..inner..BitVec$GT$9ones_from17hd77672f93f894f10E.llvm.8265524964708006179&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xb45): undefined reference to `&lt;&amp;T as core::fmt::Display&gt;::fmt&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xb58): undefined reference to `core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xb78): undefined reference to `&lt;&amp;T as core::fmt::Display&gt;::fmt&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xb8c): undefined reference to `&lt;&amp;T as core::fmt::Debug&gt;::fmt&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xbd7): undefined reference to `std::io::stdio::_eprint&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xcae): undefined reference to `&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xce7): undefined reference to `core::panicking::assert_failed&#39;\n/usr/bin/ld: /tmp/example-499917.o: in function `main&#39;:\nprimal_sieve.88lhwwez-cgu.7:(.text+0xd0a): undefined reference to `anon.680ffd87241aebf9ce6f32a91c875853.0.llvm.17403337492838527395&#39;\n/usr/bin/ld: primal_sieve.88lhwwez-cgu.7:(.text+0xd14): undefined reference to `std::rt::lang_start_internal&#39;\n/usr/bin/ld: /tmp/example-499917.o:(.eh_frame+0x57): undefined reference to `rust_eh_personality&#39;\n/usr/bin/ld: /app/output.s: hidden symbol `_ZN12primal_sieve5sieve5Sieve11primes_from17hfb976e0a3c891bbaE&#39; isn&#39;t defined\n/usr/bin/ld: final link failed: bad value\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)\nExecution build compiler returned: 1\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Yeah cuviper's example fails linking, looks like.</p>",
        "id": 272737300,
        "sender_full_name": "Jubilee",
        "timestamp": 1645479379
    },
    {
        "content": "<p>right, mine was just one CGU</p>",
        "id": 272737364,
        "sender_full_name": "cuviper",
        "timestamp": 1645479449
    },
    {
        "content": "<p>(of many)</p>",
        "id": 272737366,
        "sender_full_name": "cuviper",
        "timestamp": 1645479454
    },
    {
        "content": "<p>it's the one that has the problem, but my goal wasn't to actually execute it</p>",
        "id": 272737381,
        "sender_full_name": "cuviper",
        "timestamp": 1645479478
    },
    {
        "content": "<p>I just don't have a good mental model of what the bar is for LLVM developers to look at a reproducer on a bug</p>",
        "id": 272737446,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645479517
    },
    {
        "content": "<p>Yeah I figured that was going to be the case but I just wanted to confirm for the sake of demonstration.</p>",
        "id": 272737448,
        "sender_full_name": "Jubilee",
        "timestamp": 1645479520
    },
    {
        "content": "<p>LLVM devs largely don't know Rust and would like to see an LLIR file they can actually tinker with, it seems.</p>",
        "id": 272737479,
        "sender_full_name": "Jubilee",
        "timestamp": 1645479557
    },
    {
        "content": "<p>and then there's <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> -- seems like he's got a clue about this</p>",
        "id": 272737503,
        "sender_full_name": "cuviper",
        "timestamp": 1645479587
    },
    {
        "content": "<p>(in any case, there's a fair amount more reduction I can  still apply to my <a href=\"http://main.rs\">main.rs</a>; currently gotten local copy down to 1167 loc)</p>",
        "id": 272742496,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645484148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> D120330 does fix the problem for me, both for the x86_64 reproducer and all the way back to the original i686 test!</p>",
        "id": 272831338,
        "sender_full_name": "cuviper",
        "timestamp": 1645548507
    }
]