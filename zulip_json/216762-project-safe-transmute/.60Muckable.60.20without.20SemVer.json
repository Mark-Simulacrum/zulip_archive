[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/.60Muckable.60.20Shortcomings/near/216933201\">said</a>:</p>\n<blockquote>\n<p>Would it be any more involved that just removing the stability part from <code>Muckable</code>?</p>\n</blockquote>\n<p>The <code>Muckable</code> trait <em>could</em> only denote that a type is as if it were fully implicitly constructible. This has a few shortcomings....</p>",
        "id": 216936601,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605562965
    },
    {
        "content": "<p>First, a <code>Muckable</code> trait (even without SemVer connotations) still rules out certain classes safe transmutations.</p>\n<p>For instance, a unique reference of this type:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...is safely transmutable into <code>&amp;mut i32</code>, because that first field of <code>Foo</code> is fully implicitly constructible.</p>\n<p>If <code>Muckable</code> is used to underpin the safety analysis, <code>TransmuteFrom</code> will reject this transmutation. <code>Muckable</code>, being a trait, can only be applied to a type either as a whole, or not at all.</p>",
        "id": 216938156,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605563824
    },
    {
        "content": "<p>you're saying <code>&amp;mut Foo</code> to <code>&amp;mut i32</code> wouldn't be a safe transmute?</p>",
        "id": 216938411,
        "sender_full_name": "Lokathor",
        "timestamp": 1605563944
    },
    {
        "content": "<p>That's tragic, but probably livable</p>",
        "id": 216938428,
        "sender_full_name": "Lokathor",
        "timestamp": 1605563953
    },
    {
        "content": "<p>It's livable in our current frame of reference, but <a href=\"#narrow/stream/216762-project-safe-transmute/topic/.60Muckable.60.20Shortcomings/near/216923136\">to reiterate my earlier comment</a>: <em>I don't think we can hope to succeed at foreseeing the use-cases of safe transmutation.</em></p>\n<p>I think <code>TransmuteFrom</code> is <em>really</em> going to change the sort of layout-based abstractions people write. At present, it's impossible to define layout-based abstractions without <em>very</em> careful applications of <code>unsafe</code> code. That, in itself, has probably dissuaded people from trying. But, with <code>TransmuteFrom</code>, the only limiting factor is going to be how smart <code>TransmuteFrom</code> is.</p>\n<p>Any decision that makes <code>TransmuteFrom</code> less than just an unopinionated predicate of transmutation safety is a bet against the future ingenuity of rustaceans. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 216939203,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605564355
    },
    {
        "content": "<p>(i'm maybe dumb but i actually don't follow why Muckable wouldn't be able to see that you can do that &amp;mut transmutation to begin with)</p>",
        "id": 216939393,
        "sender_full_name": "Lokathor",
        "timestamp": 1605564450
    },
    {
        "content": "<p>Oh, nah, I just skipped over that detail. It's because the second field of <code>Foo</code> is private.</p>",
        "id": 216939681,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605564591
    },
    {
        "content": "<p>Well, that shouldn't matter because the (reduced) span of memory being covered by the new reference isn't private.</p>",
        "id": 216939824,
        "sender_full_name": "Lokathor",
        "timestamp": 1605564663
    },
    {
        "content": "<p>which i guess is me agreeing with you: that we should be as fully, wildly permissive as possible, semver be damned, and then let people stack restrictions on top later if they <em>choose</em> to limit themselves</p>",
        "id": 216940037,
        "sender_full_name": "Lokathor",
        "timestamp": 1605564722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/.60Muckable.60.20without.20SemVer/near/216939824\">said</a>:</p>\n<blockquote>\n<p>Well, that shouldn't matter because the (reduced) span of memory being covered by the new reference isn't private.</p>\n</blockquote>\n<p>It shouldn't matter. A <code>TransmuteFrom</code> that's visibility-aware can handle this case gracefully.</p>\n<p>...but a <code>TransmuteFrom</code> that uses <code>Muckable</code> as a simplified proxy for visibility can't support this use-case.</p>",
        "id": 216940102,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605564747
    },
    {
        "content": "<p>Many of my use cases for safe transmute do involve those kinds of prefixes.</p>",
        "id": 216949905,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605571100
    },
    {
        "content": "<p>Structs with headers for instance.</p>",
        "id": 216949918,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605571111
    },
    {
        "content": "<p>for a example, just look at the Vulkan API: they have lots of <code>struct</code>s with common headers and they expect you to check a field in the header to determine which <code>struct</code> type it is</p>",
        "id": 216964344,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1605585532
    },
    {
        "content": "<p>(now that I think of it, that might technically be UB in C/C++ because of TBAA)</p>",
        "id": 216964448,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1605585669
    },
    {
        "content": "<p>I think it's allowed in both C and C++ under the rules about casting between types with \"initial common sequences\"</p>",
        "id": 216965384,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1605587057
    },
    {
        "content": "<p>It's UB in C(++) unless you use a union. That said, a lot of the old Unix and Posix APIs use this really heavily, so gcc/clang won't break your code.</p>",
        "id": 216966800,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605589168
    },
    {
        "content": "<p>My mental model for Muckable was that you can transmute anything (that fits the type) out of it and into it, so this wouldn't work. </p>\n<p>Would a supertrait/formulation of <code>Muckable</code> that states that all pub-fields were free of extra invariants work? It really feels like we're just trading off something here though, but I'm not too sure what.</p>",
        "id": 216968108,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605591144
    }
]