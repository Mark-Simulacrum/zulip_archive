[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> do you have time in the next day or so for a quick call to dicuss the RFC? I have some questions and I'd also like to help write it so maybe we can split the work up</p>",
        "id": 202980503,
        "sender_full_name": "rylev",
        "timestamp": 1594037454
    },
    {
        "content": "<p>Sure, are you free anytime tomorrow?</p>",
        "id": 203014111,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594054538
    },
    {
        "content": "<p>Yep free until around 7pm CEST/1pm EST</p>",
        "id": 203014281,
        "sender_full_name": "rylev",
        "timestamp": 1594054617
    },
    {
        "content": "<p>I'm not free until well after that but if the draft can go in a hackmd file I'd like to see it as well</p>",
        "id": 203018092,
        "sender_full_name": "Lokathor",
        "timestamp": 1594056716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> how about we chat around 10EST?</p>",
        "id": 203022832,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594059283
    },
    {
        "content": "<p>Sounds good to me! Iâ€™ll send you a zoom link in DMs</p>",
        "id": 203033602,
        "sender_full_name": "rylev",
        "timestamp": 1594065541
    },
    {
        "content": "<p>I've left some comments. It's getting complete enough that I think we can move it into the repo soon for wider commenting</p>",
        "id": 203725451,
        "sender_full_name": "rylev",
        "timestamp": 1594652313
    },
    {
        "content": "<p>Thank you so much!  Can you clarify this comment:</p>\n<blockquote>\n<p>Are we missing a discussion on ABI? The reason #[repr(transparent)] exists is that some types with the same layout may have different ABIs. </p>\n</blockquote>\n<p>Going into the nitty-gritty of all the different <code>repr</code> annotations is out-of-scope of this RFC, but the following <em>Well-Defined Representation</em> sub-section attempts to capture the sentiment that the ABI needs to be well-defined.</p>",
        "id": 203726302,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594652676
    },
    {
        "content": "<p>I just mean that you go into some detail about layout without mentioning ABI but ABI is also a concern. Types must have the same ABIs to be transmutable</p>",
        "id": 203735327,
        "sender_full_name": "rylev",
        "timestamp": 1594656817
    },
    {
        "content": "<p>ABI is more about calling convention than layout. To <a href=\"https://gankra.github.io/blah/rust-layouts-and-abis/#abi\">quote Alexis Beingessner</a>:</p>\n<blockquote>\n<p>The layout of a type is enough to do anything you want to do with a type within Rust, but it's insufficient for full communication with C.  </p>\n</blockquote>\n<p>Although transmutation is often useful in FFI, it's an operation inside Rust. Only the layouts must be compatible. This includes types that aren't <code>repr(C)</code>. For instance, the layout of option-like default-repr enums is well-defined (to the extent that the inner type is well-defined, too).</p>\n<p>(A caveat to all this might be transmutations involving function pointers, but I don't know if anybody's attempted to define the validity rules there.)</p>",
        "id": 203738112,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594658298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> I'm also confused about the phase 1 proposal. You list 4 things that need to be stabilized, but I have the feeling you actually mean more needs to be stabalized.</p>",
        "id": 203739307,
        "sender_full_name": "rylev",
        "timestamp": 1594659055
    },
    {
        "content": "<p>For using/implementing <code>FromBytes</code>, <code>IntoBytes</code> and <code>FromZeros</code>, I believe that only those traits and <code>NeglectStability</code> need to be stabilized.</p>",
        "id": 203739487,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594659146
    },
    {
        "content": "<p>Do the option traits need to be stabalized as well?</p>",
        "id": 203739688,
        "sender_full_name": "rylev",
        "timestamp": 1594659247
    },
    {
        "content": "<p>I'm having a hard time following that part of the RFC</p>",
        "id": 203739764,
        "sender_full_name": "rylev",
        "timestamp": 1594659287
    },
    {
        "content": "<blockquote>\n<p>Ryan Levick: Do the option traits need to be stabalized as well?</p>\n</blockquote>\n<p>No, per the RFC:</p>\n<blockquote>\n<p>For building truly general abstractions over <code>TransmuteFrom</code> and <code>TransmuteInto</code> (such as <code>FromZeros</code>) it is necessary to stabilize <code>UnsafeTransmuteOptions</code> and <code>SafeTransmuteOptions</code>.</p>\n</blockquote>\n<p>The <code>Options</code> traits only need to be stabilized if people are going to be referring to them. That's not necessary for manual implementations of <code>FromBytes</code>, <code>IntoBytes</code> and <code>FromZeros</code>.</p>",
        "id": 203739960,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594659373
    },
    {
        "content": "<p>The mem-marker part of the RFC has definitely received a little less attention at the moment. Personally, I'm a little iffy on whether the benefits of <code>FromBytes</code>, <code>IntoBytes</code> and <code>FromZeros</code> in libcore justify the complexity of articulating multi-stage roll-out plan. I'm not totally sold that these traits couldn't live in crates, particularly since <code>#[marker]</code> is close to stabilization.</p>",
        "id": 203740969,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594659817
    },
    {
        "content": "<p>Marker traits are easier to reason about then transmute bounds IMO. I think the existence and popularity of zerocopy shows that FromBytes, IntoBytes is used enough to merit inclusion.</p>",
        "id": 203741265,
        "sender_full_name": "rylev",
        "timestamp": 1594659958
    },
    {
        "content": "<p>That's fair. I guess I'm not sure whether the described multi-stage roll-out is strictly necessary, then. If we remove the hypothetical period where you're supposed to manually implement these traits, then the design of them can get quite a bit nicer.</p>\n<p>These traits are annotated with <code>#[marker]</code> to support manual implementations (because there's already blanket impl on them in libcore). If they weren't annotated with <code>#[marker]</code>, we could add methods to them; e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Options</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Options</span>: <span class=\"nc\">UnsafeTransmuteOptions</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Annotating these traits with <code>#[marker]</code> forever closes that door, unfortunately.</p>",
        "id": 203742311,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594660455
    },
    {
        "content": "<p>The point of the multi-stage rollout was to simplify, but if that's not achievable without changing the nature of the RFC then we don't have to do it.</p>",
        "id": 203742665,
        "sender_full_name": "rylev",
        "timestamp": 1594660600
    },
    {
        "content": "<p>There is just a fair amount of mechanisms under proposal here so having a mutli-stage rollout could help fine tune the proposal as we can experience with it. But you could argue that we just leave it under a nightly flag and fine tune it that way.</p>",
        "id": 203742751,
        "sender_full_name": "rylev",
        "timestamp": 1594660668
    },
    {
        "content": "<p>Yeah, I imagine that <code>TransmuteFrom</code> will start simple, and gradually handle more cases. Same with the various transmute options: those are defined in a way where they can be introduced &amp; stabilized independently from each other. <code>FromBytes</code> and company could also be stabilized independently from <code>TransmuteFrom</code> (provided that the stability declaration traits were also stabilized, too).</p>\n<p>The multi-stage approach basically just enabled a period where <code>TransmuteFrom</code> could be <em>totally</em> useless, but where the marker traits could nonetheless be manually implemented by third-parties. If that period is short, then the complexity of navigating it probably isn't justified.</p>",
        "id": 203743497,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594661032
    },
    {
        "content": "<p>I'll give a draft of the document without strict multi-staged rollout a shot!</p>",
        "id": 203743651,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594661110
    },
    {
        "content": "<p>Although I'll be <em>very</em> sorry to have to remove this example from the RFC:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// A intelligent mammalian species of the genus Sus.</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Pig</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Things that propel themselves through the air.</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Flying</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// An initial, vacuous implementation of `TransmuteFrom`.</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Options</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Options</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Options</span>: <span class=\"nc\">UnsafeTransmuteOptions</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Pig</span>: <span class=\"nc\">Flying</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203744114,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594661307
    },
    {
        "content": "<p>hahaha</p>",
        "id": 203745573,
        "sender_full_name": "rylev",
        "timestamp": 1594662012
    },
    {
        "content": "<p>Following up on ABIs &amp; transmuting function pointers, I found this (horrifying) article about type punning function pointers in C: <a href=\"https://www.evanmiller.org/type-punning-functions-in-c.html\">https://www.evanmiller.org/type-punning-functions-in-c.html</a></p>",
        "id": 203776748,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594677468
    },
    {
        "content": "<p>I'll try to resist the urge to list that as a \"Future Possibility\" ;)</p>\n<p>(The API <em>is</em> expressive enough that it could eventually support that case, though!)</p>",
        "id": 203776844,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594677509
    },
    {
        "content": "<p>yeah, ABI might affect standard references/pointers too? I don't know enough about ABI details there really.</p>",
        "id": 203782911,
        "sender_full_name": "Lokathor",
        "timestamp": 1594682223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> I'm curious why TransmuteInto and TransmuteFrom don't have constraints on Src and Dst.</p>",
        "id": 203967777,
        "sender_full_name": "rylev",
        "timestamp": 1594825847
    },
    {
        "content": "<p>Also I'm confused why each of the methods for those traits repeat the where clause</p>",
        "id": 203967974,
        "sender_full_name": "rylev",
        "timestamp": 1594825925
    },
    {
        "content": "<p>Lastly the RFC as written (at least at the beginning) seems to indicate that users must manually implement TransmuteInto and TransmuteFrom for all type combinations they wish to be able to transmute between.</p>",
        "id": 203968201,
        "sender_full_name": "rylev",
        "timestamp": 1594826023
    },
    {
        "content": "<p>I should clarify this, then: TransmuteFrom is only implemented, in the compiler, for Src and Dst for which the transmute is valid.</p>",
        "id": 203968324,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594826057
    },
    {
        "content": "<p>Yea, I think that definitely should be mentioned at the beginning of that section. It's somewhat clear later on the in the RFC, but definitely not clear initially</p>",
        "id": 203968434,
        "sender_full_name": "rylev",
        "timestamp": 1594826112
    },
    {
        "content": "<p>I also don't believe Unsafe vs SafeTransmute Options are explained.</p>",
        "id": 203970125,
        "sender_full_name": "rylev",
        "timestamp": 1594826812
    },
    {
        "content": "<p>Noted. Btw, I'm also still working on smoothing out the details of the stability marker traits!</p>",
        "id": 203989299,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594835495
    },
    {
        "content": "<p>Well, shit... <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> <br>\n<a href=\"/user_uploads/4715/8R4fLD-gbCozgbSO7vBlJuIi/screenshot-hackmd.io-2020.07.31-16_48_50-1.png\">the-limit.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/8R4fLD-gbCozgbSO7vBlJuIi/screenshot-hackmd.io-2020.07.31-16_48_50-1.png\" title=\"the-limit.png\"><img src=\"/user_uploads/4715/8R4fLD-gbCozgbSO7vBlJuIi/screenshot-hackmd.io-2020.07.31-16_48_50-1.png\"></a></div>",
        "id": 205640318,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596228690
    },
    {
        "content": "<p>bit of a bad sign</p>",
        "id": 205642505,
        "sender_full_name": "Lokathor",
        "timestamp": 1596230214
    },
    {
        "content": "<p>It's no biggie. I had a bunch of notes in there I hadn't deleted. The RFC goes <em>way</em> overboard on <em>Motivation</em>, <em>Case Studies</em>, <em>Prior Work</em> and <em>Future Possibilities</em>, too.</p>",
        "id": 205642647,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596230305
    },
    {
        "content": "<p>Anyways, I think I just finished the first draft! If you'd like to read it, here's the link: <a href=\"https://hackmd.io/@jswrenn/BJ5L7U9A8\">https://hackmd.io/@jswrenn/BJ5L7U9A8</a></p>\n<p>(There're a few minor TODOs, but they're inconsequential.)</p>",
        "id": 205643077,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596230592
    },
    {
        "content": "<p><strong><em>From now on, the authoritative draft of the RFC will be here:</em></strong> <a href=\"https://github.com/jswrenn/rfcs/blob/safe-transmute/text/0000-safe-transmute.md\">https://github.com/jswrenn/rfcs/blob/safe-transmute/text/0000-safe-transmute.md</a></p>",
        "id": 205748708,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596411071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> can you make me and <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> collaborators on the Safe Transmute <a href=\"https://github.com/rust-lang/project-safe-transmute\">repo</a> so that we can add the RFC there.</p>",
        "id": 205773958,
        "sender_full_name": "rylev",
        "timestamp": 1596446323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> with the draft not as an issue or PR it's hard to leave comments. How do you want to handle feedback?</p>",
        "id": 205800741,
        "sender_full_name": "rylev",
        "timestamp": 1596465110
    },
    {
        "content": "<p>Hm, I'm not completely sure. I could make a PR on the safe-transmute repo and comments could be made on the PR.</p>\n<p>Or commenters could be directed to file an issue on the repo itself.</p>",
        "id": 205801115,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596465297
    },
    {
        "content": "<p>PR sounds like the most natural given commenting abilities in GitHub. We'd merge when we're ready to publish it to another platform (either internals or the RFCs repo)</p>",
        "id": 205801298,
        "sender_full_name": "rylev",
        "timestamp": 1596465395
    },
    {
        "content": "<p>Sounds good!</p>",
        "id": 205801324,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596465410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> ok</p>",
        "id": 205801514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596465507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> remind me your github id</p>",
        "id": 205802733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596466193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> jswrenn</p>",
        "id": 205802793,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596466205
    },
    {
        "content": "<p><strong><em>Authoritative draft of the RFC is now here:</em></strong> <a href=\"https://github.com/rust-lang/project-safe-transmute/pull/5\">https://github.com/rust-lang/project-safe-transmute/pull/5</a></p>",
        "id": 205809803,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596469295
    },
    {
        "content": "<p>FYI: I posted the a link to the draft on an issue which the lang team will review at their next meeting. Hopefully we get more feedback through that.</p>",
        "id": 206822717,
        "sender_full_name": "rylev",
        "timestamp": 1597329584
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/lang-team/issues/21\">https://github.com/rust-lang/lang-team/issues/21</a></p>",
        "id": 206822854,
        "sender_full_name": "rylev",
        "timestamp": 1597329616
    },
    {
        "content": "<blockquote>\n<p>In Zig the problem of alignment is solved completely;</p>\n</blockquote>\n<p>(since Zig has unsafe code, I doubt that -- with truly unsafe code you should be able to implement an unchecked cast function that you can use to cast around alignment annotations on the types. but the rest of the point quoted in the RFC remains valid.)</p>",
        "id": 206913353,
        "sender_full_name": "RalfJ",
        "timestamp": 1597398529
    },
    {
        "content": "<p>but you <em>can</em> do that in Zig, it says as much in the example</p>",
        "id": 206928621,
        "sender_full_name": "Lokathor",
        "timestamp": 1597411584
    },
    {
        "content": "<p>re: <strong>Platform Stability</strong> all integer types lack platform stability because of Endian difference</p>",
        "id": 206929186,
        "sender_full_name": "Lokathor",
        "timestamp": 1597411981
    },
    {
        "content": "<p>I'm not even sure that Platform Stability is a particularly useful notion.</p>",
        "id": 206929231,
        "sender_full_name": "Lokathor",
        "timestamp": 1597412012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/RFC.20Proposal/near/206928621\">said</a>:</p>\n<blockquote>\n<p>but you <em>can</em> do that in Zig, it says as much in the example</p>\n</blockquote>\n<p>but then the problem of alignments isnt solved, at least in the sense that you can still break alignment guarantees</p>",
        "id": 206942403,
        "sender_full_name": "RalfJ",
        "timestamp": 1597419436
    },
    {
        "content": "<p>I think it's solved in the sense that you have to explicitly opt-out of alignment safety.</p>",
        "id": 206942478,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597419478
    },
    {
        "content": "<p>sure. same in Rust. you have to say <code>unsafe</code>.</p>",
        "id": 206942538,
        "sender_full_name": "RalfJ",
        "timestamp": 1597419492
    },
    {
        "content": "<p>once you go unsafe, neither language can fully protect you.</p>\n<p>I guess I just disagree with that use of the term \"solved\". I don't think there is a binary solved/unsolved for this once you go unsafe. but zig makes it harder to make these mistakes.</p>",
        "id": 206942668,
        "sender_full_name": "RalfJ",
        "timestamp": 1597419568
    },
    {
        "content": "<p>Not quite. <code>unsafe</code> doesn't communicate why the thing you're doing is unsafe. As Kelley's article points out: your code might be unsafe in ways you're unaware of.</p>",
        "id": 206942675,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597419571
    },
    {
        "content": "<p>sure. and if zig has unchecked transmutes, or raw pointers, or unchecked unions, it has the same problem.</p>",
        "id": 206942849,
        "sender_full_name": "RalfJ",
        "timestamp": 1597419644
    },
    {
        "content": "<p>once you go unsafe, this isn't black or white. it's many shades of gray. \"problem solved\" pretends otherwise, and that is all I am disagreeing with here.</p>",
        "id": 206942964,
        "sender_full_name": "RalfJ",
        "timestamp": 1597419711
    },
    {
        "content": "<p>I agree with that. Had I written that article, I don't think I would have used such strong language.</p>",
        "id": 206943061,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597419766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/RFC.20Proposal/near/206929186\">said</a>:</p>\n<blockquote>\n<p>re: <strong>Platform Stability</strong> all integer types lack platform stability because of Endian difference</p>\n</blockquote>\n<p>Endian differences do not <em>usually</em> affect transmutability, which is why I don't go into it. Of course, an RFC that <em>did</em> propose a notion of platform stability certainly would need to.</p>",
        "id": 206947407,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597421956
    },
    {
        "content": "<p>Ah, I misunderstood what \"no notion of platform stability\" meant.</p>\n<p>I thought it was saying \"we won't transmute these things\", but I guess the intent is \"we will transmute these things and results may vary\"</p>",
        "id": 206966137,
        "sender_full_name": "Lokathor",
        "timestamp": 1597432251
    },
    {
        "content": "<p>Yeah, the original wording of the section wasn't clear. Since your first read of the Platform Stability section, I <a href=\"https://github.com/rust-lang/project-safe-transmute/pull/5/commits/f85600d03f650c419abb849ee8d3db468ad9931c\">revised</a> it to say:</p>\n<blockquote>\n<p>Our proposed stability system is oblivious to the inter-platform variations of these types.</p>\n</blockquote>\n<p>I hope that's an improvement.</p>",
        "id": 206967268,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597432863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span>, <span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span>, I made an <strong><a href=\"https://internals.rust-lang.org/t/pre-rfc-safer-transmutation/12926\">internals post</a></strong>!</p>",
        "id": 207472214,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597878628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> you might want to have some more examples, specifically on the <code>safe_transmute</code> and <code>unsafe_transmute</code> functions themselves. The \"options\" system, while a marvel, makes things less clear to someone who's first approaching the API. What options do I need? When do I need them? If I don't add any options and get an error, should I add an option or should I stop attempting what I'm trying to attempt? That sort of stuff.</p>",
        "id": 207481755,
        "sender_full_name": "Lokathor",
        "timestamp": 1597888641
    },
    {
        "content": "<p>Good idea! Will do first thing tomorrow!</p>",
        "id": 207481767,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597888682
    },
    {
        "content": "<p>My suspicion though is that I'll be able to fairly simply make <code>bytemuck-2.0.0</code> that almost immediately delegates to these methods without changing the outer API other than a few trait bounds.</p>\n<p>In that sense, you've got a success on your hands, because the absolute simplicity of <code>bytemuck</code> is why it's as popular as it is.</p>",
        "id": 207481903,
        "sender_full_name": "Lokathor",
        "timestamp": 1597888815
    },
    {
        "content": "<p>That's my hope!</p>",
        "id": 207481943,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1597888887
    },
    {
        "content": "<p>Iâ€™m excited to see what the wider community says! Letâ€™s discuss how the feedback is going next week and see when we want to post to the rfcs repo</p>",
        "id": 207495140,
        "sender_full_name": "rylev",
        "timestamp": 1597907853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> the feedback on the internals post is pretty slow. Do we have an idea of what next steps are?</p>",
        "id": 207992413,
        "sender_full_name": "rylev",
        "timestamp": 1598375942
    },
    {
        "content": "<p>Hm. I'm not sure. A reddit post might draw additional feedback, as well as a TWiR mention.</p>",
        "id": 207994896,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598377002
    },
    {
        "content": "<p>The round of feedback we did receive was helpful, since it made me confirm that vec casting is possible out-of-the-box, and slice-casting is possible without the const-generics extension I had previously thought would be required. </p>\n<p>So: I have a bit of writing to do. I need to update the slice-casting extension, and add a section on type-gadgets.</p>",
        "id": 207995370,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598377205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> I can post to reddit. Have we heard any feedback from the lang team? We may have to post the actual RFC before we get any real feedback</p>",
        "id": 208003502,
        "sender_full_name": "rylev",
        "timestamp": 1598380444
    },
    {
        "content": "<p>I don't know if we've received feedback from the lang team, yet. (<span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, did you ever get a chance to read it?)</p>",
        "id": 208004012,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598380624
    },
    {
        "content": "<p><strong>Minor Victory!</strong> Previously, a few of this crate's proposed extensions (namely slice casting and <code>FromBytes</code>/<code>IntoBytes</code>) required a speculative advancement in const-generics: namely, writing types of the form <code>[U; size_of::&lt;T&gt;()]</code> in <code>where</code> bounds.</p>\n<p>That's no longer the case!</p>\n<ul>\n<li>For <a href=\"https://github.com/jswrenn/project-safe-transmute/blob/rfc/rfcs/0000-safe-transmute.md#slice-casting\">slice casting</a>, I had erroneously believed that it was not possible to even mention types above the object-size limit. That's not the case! We can construct (as a type) a sufficiently large array as <code>[Src; usize::MAX]</code>, even if the size of <code>Src</code> is greater than 1.</li>\n<li>For <a href=\"https://github.com/jswrenn/project-safe-transmute/blob/rfc/rfcs/0000-safe-transmute.md#extension-byte-transmutation-traits\"><code>FromBytes</code>/<code>IntoBytes</code></a> I had thought I needed to construct equivalently-sized arrays of bytes (e.g., <code>[u8; size_of::&lt;Src&gt;()]</code>). Not so! We can <a href=\"https://github.com/jswrenn/project-safe-transmute/blob/rfc/rfcs/0000-safe-transmute.md#removing-the-dependency-on-const-generics\">exploit the same <code>[T; usize::MAX]</code> trick</a>.</li>\n</ul>\n<p>The RFC's extensions are now <em>truly</em> extensions of <em>just</em> the RFC's mechanisms!</p>",
        "id": 208033126,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598395179
    },
    {
        "content": "<p>I <strong>love</strong> the gadgets extension. This captures the composability and the usability of mem markers with the flexibility and correctness of typic. It's the best of both worlds. Really great work <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> !</p>",
        "id": 208082838,
        "sender_full_name": "rylev",
        "timestamp": 1598443859
    },
    {
        "content": "<p>the RFC is just... way too long at this point :/</p>",
        "id": 208091012,
        "sender_full_name": "Lokathor",
        "timestamp": 1598448895
    },
    {
        "content": "<p>I think that lot of the \"oh look what you could eventually do with this!\" stuff should probably be pulled out and put in blog posts or something like that.</p>",
        "id": 208091316,
        "sender_full_name": "Lokathor",
        "timestamp": 1598449052
    },
    {
        "content": "<p>I agree about the length. If this was an mdbook, it might not be so bad, but it's notâ€”it's a <em>long</em> linear document with no navigation support.</p>",
        "id": 208099240,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598452427
    },
    {
        "content": "<p>I still think the document overall would be stronger if the supporting use cases, extensions, and possibilities sections were in another document linked to the RFC.</p>",
        "id": 208099593,
        "sender_full_name": "rylev",
        "timestamp": 1598452580
    },
    {
        "content": "<p>This proposal does seem like... a lot</p>",
        "id": 208114501,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598459070
    },
    {
        "content": "<p>I think this could easily be the most complicated API in the whole standard library</p>",
        "id": 208114550,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1598459099
    },
    {
        "content": "<p>Without a doubt. The API surface is relatively simple, but its consequences and implementation are not.</p>\n<p>Since the bar for compiler-supported traits should be <em>very</em> high, a great deal of this RFC's length is expended on:</p>\n<ul>\n<li>demonstrating that the novel mechanisms are sound (namely its notion of safety and its formulation of stability)</li>\n<li>demonstrating that the implementation does not need to be all-or-nothing, and can gradually increase in complexity</li>\n<li>demonstrating that the burden of the proposal is justified: its API surface comprehensively covers virtually all known use-cases</li>\n</ul>",
        "id": 208115396,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598459536
    },
    {
        "content": "<p>Is there a way to stage this, to first propose some \"MVP\" style API?<br>\nI'd love to give feedback, but giving feedback on such a huge document is a daunting task.</p>",
        "id": 208185079,
        "sender_full_name": "RalfJ",
        "timestamp": 1598512990
    },
    {
        "content": "<p>/me sees things like <code>Neglect*</code> and feels like this is way beyond an MCP.^^</p>",
        "id": 208193715,
        "sender_full_name": "RalfJ",
        "timestamp": 1598519721
    },
    {
        "content": "<p>This is a staged proposal, but that ultimately makes the document longer because designing staged proposals that don't accidentally close important doors is tricky.</p>\n<p>The Neglect parameter is one such easily-closed door. Most of the various possible options are eventually very useful to have, but not actually necessary for an MVP. Just one option needs to be in the MVP: NeglectStability, and the RFC describes how a simplistic version of it can be initially used with some minor drawbacks.</p>",
        "id": 208203402,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598527113
    },
    {
        "content": "<p>Correct me if I'm wrong but the proposal does have an MVP API. I think perhaps we can more clearly label it as such? It seems that there's still confusion that everything in the document has to be agreed upon today when in fact the extensions and such are there to show that the API can grow to meet all the needs we would one day hope for it to.</p>",
        "id": 208203681,
        "sender_full_name": "rylev",
        "timestamp": 1598527327
    },
    {
        "content": "<p>Yes, that's trueâ€”I wasn't even thinking of the extensions. I'm currently working on factoring those out into separate documents.</p>",
        "id": 208203723,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598527373
    },
    {
        "content": "<p>Even still I think perhaps retitle <a href=\"https://github.com/jswrenn/project-safe-transmute/blob/rfc/rfcs/0000-safe-transmute.md#listing-for-initial-minimal-implementation\">this section</a> and making it abundantly clear what you hope to achieve with the RFC - i.e., we want to set a \"north star\" of what we hope this proposal will ultimately grow into, we hope to convince everyone that the proposal can grow into the north start, and we want to propose a minimal version that we want to implement now. People should agree that the \"north star\" in general is a good place to aim for even if the details aren't perfect, and they should agree that the minimal implementation is truly minimal and helpful to get us on a path to the north star.</p>",
        "id": 208204147,
        "sender_full_name": "rylev",
        "timestamp": 1598527634
    },
    {
        "content": "<p>I've moved the case studies and extensions to companion documents.</p>",
        "id": 208277586,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598563034
    },
    {
        "content": "<p>ah, when I said MVP I was thinking of a self-contained document describing only that MVP. that would help reviewing. :)</p>",
        "id": 208370156,
        "sender_full_name": "RalfJ",
        "timestamp": 1598634590
    },
    {
        "content": "<p>I'll try to whip something up.</p>",
        "id": 208370488,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598634786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, here's a sorta TL;DR of the RFC: <a href=\"https://hackmd.io/@jswrenn/H1ytdaI7w\">https://hackmd.io/@jswrenn/H1ytdaI7w</a></p>",
        "id": 208387809,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598644229
    },
    {
        "content": "<p>I'm having a really hard time distilling it down further than that. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 208387855,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598644275
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 208391246,
        "sender_full_name": "jknodt",
        "timestamp": 1598646322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326189\">@jknodt</span> This is a fine place for more-synchronous discussions! Let me know if I've <a href=\"https://github.com/rust-lang/project-safe-transmute/pull/5#issuecomment-683147373\">resolved</a> your question. I think the answer to it is a major missing piece from the <em>Rationale</em> section.</p>",
        "id": 208395517,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598649131
    },
    {
        "content": "<p>I've removed the 'Dissecting Stability' and 'Uncommon Use-Case: Weak Stability Guarantees' sections. If anyone has objections, please let me know.</p>\n<p>I think it's likely that these sections are answering questions that nobody is asking, or which would be better answered in a blog post.</p>",
        "id": 208402581,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598654632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> the RFC is really shapping up and has gotten some good feedback. We've still not heard from the lang and compiler teams I believe. We could try again to get their attention again (ping <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> and <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ) or we can just post the RFC. Thoughts?</p>",
        "id": 208552495,
        "sender_full_name": "rylev",
        "timestamp": 1598878572
    },
    {
        "content": "<p>I'd like some feedback from a team member before posting, to ensure we're not missing anything essential.  For instance, does the transmutaibility algorithm need to be formally described?</p>\n<p>I also have some illustration ideas for stability that might help some readers visualize how it works. :)</p>",
        "id": 208554328,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598879576
    },
    {
        "content": "<p>I'm not a project member but, well, the RFC process is just for that, and some people in the relevant teams may (wrongly) think that the RFC is not ready for comments. From what I've seen and what you expect now I humbly think that you should just post the RFC to signal the relevant team members (and other community members) that it's ready to have a look to it and comment.</p>",
        "id": 208586944,
        "sender_full_name": "pachi",
        "timestamp": 1598893341
    },
    {
        "content": "<p>Many people may inhibit from commenting if they think it's still too much a work in progress, while it looks like it's in a state that it mainly needs further feedback (IMHO).</p>",
        "id": 208587030,
        "sender_full_name": "pachi",
        "timestamp": 1598893389
    },
    {
        "content": "<p>While I think this is a good point in general, we've already explicitly asked the lang and compiler teams for feedback so they should be aware that the proposal is ready for it.</p>",
        "id": 208589067,
        "sender_full_name": "rylev",
        "timestamp": 1598894619
    },
    {
        "content": "<p>/me apologizes for not having the bandwidth to review right this second.</p>",
        "id": 208595623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> Currently in the midst of several things, one of which you already know about, that are taking priority. :)</p>",
        "id": 208595647,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897978
    },
    {
        "content": "<p>/me reads the summary.</p>",
        "id": 208595670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598897992
    },
    {
        "content": "<p>Some questions as I go...</p>",
        "id": 208595882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898096
    },
    {
        "content": "<p>TransmuteFrom requires both types be Sized. Will it be possible to safely transmute slices and other unsized things?</p>",
        "id": 208595975,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898138
    },
    {
        "content": "<p>I suspect the name <code>Neglect</code> will get bikeshedding, but I'm not going to do that here and now.</p>",
        "id": 208596115,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/RFC.20Proposal/near/208595975\">said</a>:</p>\n<blockquote>\n<p>TransmuteFrom requires both types be Sized. Will it be possible to safely transmute slices and other unsized things?</p>\n</blockquote>\n<p>Not directly. However, the API is expressive enough to be a sound and complete foundation for transmutation-like conversions of slices and vecs without further compiler support. <a href=\"https://github.com/jswrenn/project-safe-transmute/blob/rfc/rfcs/0000-ext-container-casting.md\">See here for a demonstration.</a></p>",
        "id": 208596380,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598898355
    },
    {
        "content": "<p>That makes sense; so, the element type must be Sized but the container might not need to be?</p>",
        "id": 208596504,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898396
    },
    {
        "content": "<p>That won't cover, long-term, things like variable-length structures, but it'll cover lots of cases.</p>",
        "id": 208596541,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898414
    },
    {
        "content": "<p>The initial proposal doesn't have to cover this, but long-term, do you have a plan for handling things like variable-length structures with a common header that includes length and type? Or is that just out of scope?</p>",
        "id": 208596653,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898461
    },
    {
        "content": "<p>(I'm thinking of things like ACPI here.)</p>",
        "id": 208596682,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898469
    },
    {
        "content": "<p>I'm reading the bits about UdpPacket and UdpHeader, and wondering whether it'd be possible to automate more of that and whether that automation would require compiler help.</p>",
        "id": 208596870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898536
    },
    {
        "content": "<p>The actual <code>TransmuteFrom</code> trait specifies that its parameters are <code>?Sized</code>, so the API could grow to support unsized use-cases.</p>\n<p>For now, I haven't been thinking of slice conversions as <em>transmutations</em>, per se. The layout of slices is unspecified, and actual transmutation of slices isn't a very common use case. Typically, you want to \"transmute\" the <em>contents</em> of the slice, and adjust its length accordingly. Because the length needs adjusting, it's not a simple bit-reinterpretation.</p>",
        "id": 208596895,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598898547
    },
    {
        "content": "<p>/me is slightly confused.</p>",
        "id": 208597008,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> The summary doc at <a href=\"https://hackmd.io/@jswrenn/H1ytdaI7w\">https://hackmd.io/@jswrenn/H1ytdaI7w</a> has <code>Src: Sized, Self: Sized,</code></p>",
        "id": 208597116,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898622
    },
    {
        "content": "<p>On the <em>methods</em>, not the trait itself. (Needed because methods are currently constrained in that they must consume and produce <code>Sized</code> types.)</p>",
        "id": 208597207,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598898660
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 208597239,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898670
    },
    {
        "content": "<p>So the idea would be that the trait would provide the necessary guarantees, and we could add methods in the future that don't require Sized?</p>",
        "id": 208597263,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898685
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 208597324,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898711
    },
    {
        "content": "<p>Regarding the example in the summary of the main RFC...</p>",
        "id": 208597511,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898793
    },
    {
        "content": "<p>Does it seem feasible to teach the compiler to understand <code>TransmuteInto</code> and <code>TransmuteFrom</code> enough that the error you're showing could be extended to explain <em>why</em> it can't transmute (in this case, because of the padding byte)?</p>",
        "id": 208597580,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898831
    },
    {
        "content": "<p>It'd be amazing to have the compiler tell you, as plainly as possible, \"I can't transmute <code>Foo</code> to <code>u32</code> because <code>Foo</code> has a padding byte after field 0, at this offset, because of the alignment of field 1, see $URL for why that's not safe\".</p>",
        "id": 208597680,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598898857
    },
    {
        "content": "<p>Yes, it's <em>very</em> feasible! The displayed error message is what you would get <em>right now</em> if <code>TransmuteFrom</code> lacked any special error reporting.</p>",
        "id": 208598187,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598899042
    },
    {
        "content": "<p>Better error reporting basically boils down having the implementation of <code>TransmuteFrom</code> keep track of the byte offset it's looking at as it traverses the layouts of the source and destination types.</p>",
        "id": 208598324,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598899091
    },
    {
        "content": "<p>Looking through the rest of the RFC, this looks <em>great</em>, and I think it's ready.</p>",
        "id": 208601156,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598900414
    },
    {
        "content": "<p>I think this is ready to pitch to the lang team.</p>",
        "id": 208601172,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598900421
    },
    {
        "content": "<p>This is incredibly thorough.</p>",
        "id": 208601287,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598900488
    },
    {
        "content": "<p>We just discussed project-safe-transmute briefly in the lang team meeting. Summary: please go ahead and open the RFC, and we'll review.</p>",
        "id": 208603979,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598901936
    },
    {
        "content": "<p>I said, for the record, that the RFC was almost tutorial-esque, and that it's readable without any past background on safe-transmute.</p>",
        "id": 208604085,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598901979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> let me know if/how I can help. Very excited to see this go to the next stage. Thanks for all your amazing work!</p>",
        "id": 208606520,
        "sender_full_name": "rylev",
        "timestamp": 1598903184
    },
    {
        "content": "<p><strong><em>RFC Submitted!</em></strong> <a href=\"https://github.com/rust-lang/rfcs/pull/2981\">https://github.com/rust-lang/rfcs/pull/2981</a></p>",
        "id": 208631095,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1598918727
    },
    {
        "content": "<p>Great work <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span>! This is probably the most thoroughly explored and explained RFC I read so far, and it does a great job throughout. While reading it, I found myself nodding in agreement basically all the time. I am sure there are kinks to solve, but I am confident that this this attitude and attention to detail, you will not compromise on correctness and the result will be great. :)</p>",
        "id": 209220675,
        "sender_full_name": "RalfJ",
        "timestamp": 1599390835
    }
]