[
    {
        "content": "<p>First, sorry if I overlooked something in the RFC.  Definitely point me at an existing conversation if appropriate.</p>\n<p>I don't feel like I understand the motivation for the safe transmute APIs that are <code>unsafe</code> to call, like neglecting validity.  Related:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/UnstableTransmuteFrom/near/217191665\">said</a>:</p>\n<blockquote>\n<p>The combinations we don't expose are cases where the only recourse for end-users is a <em>totally</em> unchecked transmutation.</p>\n</blockquote>\n<p>Once it has to be <code>unsafe</code>, this doesn't intuitively seem unreasonable to me.  Especially given that one would still be able to use trait bounds for the safety of whatever you're not checking.</p>\n<p>Like I might picture something like <code>fn alignment_checked_cast&lt;T, U&gt;(&amp;T) -&gt; &amp;U where T: SafeTransmuteInto&lt;U&gt;</code>.  And yes, that has to use pointer casts and other internal stuff internally, but it would have to use unsafe to do it with a Neglect anyway.</p>",
        "id": 217192816,
        "sender_full_name": "scottmcm",
        "timestamp": 1605731580
    },
    {
        "content": "<p><code>NeglectValidity</code> isn't so much a \"safe transmute API\" as it is a <em>safer</em> transmute API. Eventually, I'd like to see the <em>totally unsafe</em> transmute APIs (e.g., <code>mem::transmute</code>) deprecated altogether. <code>&amp;T::unsafe_transmute_from(&amp;u)</code> with mismatched alignments will compile-error unless you've written the <code>where</code> bound <code>T: TransmuteFrom&lt;U, NeglectAlignment&gt;</code>. In contrast, <code>mem::transmute</code> won't.</p>",
        "id": 217194848,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605732688
    },
    {
        "content": "<p>I guess that's the disconnect -- I don't see <code>mem::transmute</code> or <code>mem::transmute_copy</code> ever getting deprecated, really.  They'll always be able to be written with pointer casts or unions, so taking the name away (that already has a pretty strong social pressure against using) might just make it harder to audit against.  It reminds me of how <code>mem::zeroed()</code> was undeprecated because making people write <code>MaybeUninit::zeroed().assume_init()</code> instead didn't actually help (unlike <code>mem::uninitialized</code>, where the new way is way more likely to be sound).</p>\n<p>I'd love to see \"you could write this with safe-transmute\" lints, though, as well as wrappers in <code>core</code> for things like safe alignment-checked casts.  Safe transmute will be able to make a safe version of <code>[T]::align_to</code>, which is epic.  (And Ralf's been doing good work to make \"can't ever be correct\" transmutes abort, which helps avoid some of its worst abuses.)</p>",
        "id": 217196273,
        "sender_full_name": "scottmcm",
        "timestamp": 1605733364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> It's not that we'd delete <code>mem::transmute</code>. It's that hopefully <code>mem::transmute</code> becomes \"only use this if you're doing something that can't possibly be made safe\".</p>",
        "id": 217203236,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605737302
    },
    {
        "content": "<p>I'd take that a tiny bit further: it's \"only use this if you're doing something that can't be made <em>safer</em>\" (The <code>Neglect</code> system forces you to declare which static guarantees you're neglecting and taking upon yourself to enforce.)</p>",
        "id": 217203433,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605737410
    },
    {
        "content": "<p>\"can't be made safer\" is fair, yes. We <em>could</em> potentially introduce new <code>Neglect</code> mechanisms if there's a \"safe except for\" we could define.</p>",
        "id": 217205445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605738415
    },
    {
        "content": "<p>I was thinking of things like \"safe except you're reading padding\".</p>",
        "id": 217205463,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605738428
    },
    {
        "content": "<p>Oh, hmmm, that makes me think of an interesting issue.</p>",
        "id": 217205511,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605738468
    },
    {
        "content": "<p>The whole \"transmute then validate\" thing I was suggesting earlier doesn't work with enum/bool/etc. It only works if you have library/type invariants that aren't language-level invariants.</p>",
        "id": 217205569,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605738489
    },
    {
        "content": "<p>Yeah, you need to validate, <em>then</em> transmute. I recall <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> making this point on the RFC, I think.</p>",
        "id": 217205866,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605738669
    },
    {
        "content": "<p>That's a little painful, though. That means you kinda want an intermediate type that parses out fields for validation.</p>",
        "id": 217223240,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605753346
    },
    {
        "content": "<p>For instance, if you need to parse an enum, the intermediate type would have an appropriately sized unsigned integer there.</p>",
        "id": 217223295,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605753373
    },
    {
        "content": "<p>Yeah, that's the approach an early version of typic took (before I ripped fallible transmutations out to focus on just infallible transmutations). I look forward to experimenting in that space again.</p>",
        "id": 217223513,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605753653
    },
    {
        "content": "<p>Whereas infallible transmutation has a very clear runtime semantics (equivalent to memcpy), there's a ton of design space to explore with infallible transmutations around error reporting tradeoffs.</p>",
        "id": 217223591,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605753742
    },
    {
        "content": "<p>Transmute-then-validate would only be for library invariants, yeah.</p>\n<p>Kinda reminds of the Archetype idea.  A no-validity-invariant version of a type as a stepping stone is interesting...</p>",
        "id": 217233122,
        "sender_full_name": "scottmcm",
        "timestamp": 1605766324
    },
    {
        "content": "<p>in some sense <code>MaybeUninit&lt;T&gt;</code> provides exactly that for any <code>T</code></p>",
        "id": 217300510,
        "sender_full_name": "RalfJ",
        "timestamp": 1605805842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Not in a way that you could read to validate, though.</p>",
        "id": 217316273,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605813208
    },
    {
        "content": "<p>If you have a <code>MaybeUninit&lt;bool&gt;</code> that you transmuted into from arbitrary memory, how would you check it to see if it's 0 or 1 before turning it into a <code>bool</code>?</p>",
        "id": 217316679,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605813325
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! Safety precondition: `x` must point to initialized memory (but it does not have to be a valid bool)</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">validate_bool</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217317912,
        "sender_full_name": "RalfJ",
        "timestamp": 1605813890
    },
    {
        "content": "<p>or maybe I am misunderstanding what it is you want to achieve</p>",
        "id": 217317931,
        "sender_full_name": "RalfJ",
        "timestamp": 1605813900
    },
    {
        "content": "<p>there is no way to check, at runtime, if arbitrary memory is a valid <code>bool</code></p>",
        "id": 217317992,
        "sender_full_name": "RalfJ",
        "timestamp": 1605813926
    },
    {
        "content": "<p>since it is fundamentally impossible to check \"is this memory initialized\"</p>",
        "id": 217318012,
        "sender_full_name": "RalfJ",
        "timestamp": 1605813936
    },
    {
        "content": "<p>this is the downside of having optimizations that exploit the \"unstable\" nature of uninitialized memory</p>",
        "id": 217318189,
        "sender_full_name": "RalfJ",
        "timestamp": 1605814011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <code>x.as_ptr() as *const u8</code> is exactly the kind of thing that safe-transmute is trying to avoid.</p>",
        "id": 217318680,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605814208
    },
    {
        "content": "<p>Ideally, it'd be possible to use a safe-transmute plus a validation step to safely turn arbitrary bytes into a <code>Result&lt;SomeStruct&gt;</code> for which some fields of <code>SomeStruct</code> have enum/bool/etc types for which not all values are valid.</p>",
        "id": 217318888,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605814295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> there's <a href=\"https://github.com/rust-lang/rfcs/blob/ee1204c23320c33437107ff222e09afd9d5fef1d/text/0000-safer-transmute.md#neglectvalidity\">this example of <code>NeglectValidity</code> in the RFC</a> that demonstrates how might one do something like this.</p>",
        "id": 217319395,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605814494
    },
    {
        "content": "<p>I am very puzzled. clearly this requires some kind of code to perform the conversion and checking, invoked by appropriate traits or so. Above I gave the implementation of that trait for <code>bool</code>.</p>",
        "id": 217319407,
        "sender_full_name": "RalfJ",
        "timestamp": 1605814500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> The goal would be to avoid the <code>unsafe</code>.</p>",
        "id": 217319636,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605814598
    },
    {
        "content": "<p>I don't think that's possible with <code>MaybeUninit</code>.</p>",
        "id": 217319720,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605814644
    },
    {
        "content": "<p>I thought the goal would be to write that unsafe code once and for all or have it auto-generated?</p>",
        "id": 217325634,
        "sender_full_name": "RalfJ",
        "timestamp": 1605817474
    },
    {
        "content": "<p>the code needs to come from somewhere...</p>",
        "id": 217325645,
        "sender_full_name": "RalfJ",
        "timestamp": 1605817479
    },
    {
        "content": "<p>I think in safe-transmute context the function <code>validate_bool</code> could take a <code>&amp;u8</code> instead of a <code>&amp;MaybeUninit&lt;bool&gt;</code> to reflect that it is initialized but not necessarily valid</p>",
        "id": 217330571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605820187
    },
    {
        "content": "<p>and I guess the conversion already exists and is called <code>try_into</code></p>",
        "id": 217330634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605820205
    },
    {
        "content": "<p>actually I am surprised to find that there is no <code>impl TryFrom&lt;u8&gt; for bool</code></p>",
        "id": 217330963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605820397
    },
    {
        "content": "<p>Probably it's the usual \"don't cast it, use <code>!= 0</code>\" -- you can't <code>1_u8 as bool</code> either.</p>",
        "id": 217339749,
        "sender_full_name": "scottmcm",
        "timestamp": 1605824988
    },
    {
        "content": "<p>That said, it turns out (surprisingly to me given the <code>as</code>) that we have <code>u8: From&lt;bool&gt;</code>, so given that I'm in favour of <code>bool: TryFrom&lt;u8&gt;</code> to be the inverse.</p>",
        "id": 217339895,
        "sender_full_name": "scottmcm",
        "timestamp": 1605825051
    },
    {
        "content": "<p>well here we don't want the <code>!= 0</code> conversion, we want to compare to 0 and 1 and return none otherwise</p>",
        "id": 217340041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605825143
    },
    {
        "content": "<p>Well you could probably make a PR soon and get it in 1.51  (err, where it = that <code>bool: TryFrom&lt;u8&gt;</code>)</p>",
        "id": 217340293,
        "sender_full_name": "scottmcm",
        "timestamp": 1605825261
    },
    {
        "content": "<p>oh hey, 1.48 released today</p>",
        "id": 217340470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605825364
    },
    {
        "content": "<p>one moment while I put intra-doc links on all my projects :)</p>",
        "id": 217340532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605825416
    }
]