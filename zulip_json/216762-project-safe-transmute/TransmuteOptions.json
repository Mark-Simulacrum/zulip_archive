[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> +1 to exposing variants as different traits.</p>",
        "id": 217191076,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605730730
    },
    {
        "content": "<p>I'd much rather have (insert naming bikeshed here) <code>NeglectedValidityUnsafeTransmuteFrom&lt;Src&gt;</code> as a blanket impl than have people publicly using <code>UnstableTransmuteFrom&lt;Src, ..., NeglectValidity&gt;</code>.</p>",
        "id": 217191172,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605730789
    },
    {
        "content": "<p>This implies 2Â³ different traits...</p>",
        "id": 217191325,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605730855
    },
    {
        "content": "<p>Only if every combination is something we want to expose.</p>",
        "id": 217191377,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605730878
    },
    {
        "content": "<p>Also, another approach would be (again, naming) <code>Dst: NeglectedEverythingUnsafeTransmuteFrom&lt;Src&gt;, Dst: AlignmentCheckedUnsafeTransmuteFrom&lt;Src&gt;</code>.</p>",
        "id": 217191506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605730936
    },
    {
        "content": "<p>Traits that could be combined to specify multiple aspects.</p>",
        "id": 217191539,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605730953
    },
    {
        "content": "<p>The combinations we don't expose are cases where the only recourse for end-users is a <em>totally</em> unchecked transmutation.</p>",
        "id": 217191665,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605731016
    },
    {
        "content": "<p>Yes. And those are the combinations for which we aren't ready to expose a stable interface for safe transmutation. We don't have to solve all problems at once.</p>",
        "id": 217191741,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/UnstableTransmuteFrom/near/217191506\">said</a>:</p>\n<blockquote>\n<p>Also, another approach would be (again, naming) <code>Dst: NeglectedEverythingUnsafeTransmuteFrom&lt;Src&gt;, Dst: AlignmentCheckedUnsafeTransmuteFrom&lt;Src&gt;</code>.</p>\n</blockquote>\n<p>I'm a little concerned that doing the right thing with this API (i.e., neglecting as few options as possible) takes <em>more</em> typing.</p>",
        "id": 217191775,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605731064
    },
    {
        "content": "<p>Fair point (also, extensibility to more things you might want to neglect).</p>",
        "id": 217191813,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731090
    },
    {
        "content": "<p>That's a compelling argument for the negative direction rather than the positive.</p>",
        "id": 217191885,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731133
    },
    {
        "content": "<p>My concern at the moment is \"how do we expose much less surface area\".</p>",
        "id": 217191951,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731162
    },
    {
        "content": "<p>The encoding using tuples of void types is pretty gross to me. I really hope we can get some const generics in here</p>",
        "id": 217192035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605731185
    },
    {
        "content": "<p><code>Dst: TransmuteFrom&lt;Src&gt;</code> is very little surface area. <code>Options</code> and <code>Scope</code> feel like very large surface areas that I'd be hesitant to <em>ever</em> stabilize, especially <code>Scope</code>.</p>",
        "id": 217192085,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731204
    },
    {
        "content": "<p>it's starting to remind me of C++ template metaprogramming</p>",
        "id": 217192131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605731229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/UnstableTransmuteFrom/near/217192035\">said</a>:</p>\n<blockquote>\n<p>The encoding using tuples of void types is pretty gross to me. I really hope we can get some const generics in here</p>\n</blockquote>\n<p>I've seen some libraries do this via types with a generic parameter: <code>NeglectFoo&lt;NeglectBar&lt;SomeBase&gt;&gt;</code>.</p>",
        "id": 217192174,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731247
    },
    {
        "content": "<p>Several serde libraries do that for instance.</p>",
        "id": 217192182,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731260
    },
    {
        "content": "<p>I'm sure, there isn't really an alternative right now</p>",
        "id": 217192200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605731275
    },
    {
        "content": "<p>I'm going to roll these last few messages out into a separate topic, because they're not specific to <code>UnstableTransmuteFrom</code>.</p>",
        "id": 217192204,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605731277
    },
    {
        "content": "<p>Fair. Please feel free to ignore my previous comments on combinable \"positive\" traits, because the more I think about it, that <em>would</em> break future compatibility.</p>",
        "id": 217192361,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731345
    },
    {
        "content": "<p>I'm still concerned about Scope and Options, but I do agree now that if we have Options then <code>Neglect</code> (modulo naming) is the right \"polarity\".</p>",
        "id": 217192408,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> there are a few advantages to tuples of void types over const generics:</p>\n<ul>\n<li>transmute options are flags to a static analysis; they <em>never</em> make sense in the value domain</li>\n<li>you can default type parameters, but not const generic parameters</li>\n</ul>",
        "id": 217192440,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605731394
    },
    {
        "content": "<p>The latter seems fixable.</p>",
        "id": 217192523,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605731422
    },
    {
        "content": "<p>yeah my comment is really forward-thinking. Do what you have to to make it work on today's rust, but maybe it can be done better in the future</p>",
        "id": 217192598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605731464
    },
    {
        "content": "<p>Yeah, the syntax for tuple types and tuple values is identical, so in principle we might even be able to migrate to const generics in the future!</p>",
        "id": 217192667,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605731509
    },
    {
        "content": "<p>My two cents: I prefer generics to the exponential combination of fully laid out trait names, especially since downstream users could always define their own alias for a specific tuple combination the use a lot.</p>\n<p>Regarding the parameters themselves, something \"interesting\" since it would better convey that these are order-agnostic bags of (neglected) properties, would be to use phony trait objects with marker traits.</p>\n<p>You can have a preview of that approach in a recent crate of mine: <a href=\"https://docs.rs/stackbox/0.1.0/stackbox/dyn_traits/any/index.html\">https://docs.rs/stackbox/0.1.0/stackbox/dyn_traits/any/index.html</a></p>",
        "id": 217216863,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605746842
    },
    {
        "content": "<p>(ignore the <code>dyn Any</code> part, and focus on my having used <code>dyn Send</code> and <code>dyn Sync</code> phony types instead of <code>enum IsSend {}</code>, <code>enum IsSync</code>), which allows combining them with <code>+</code> rather than <code>(,)</code> )</p>",
        "id": 217217088,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605747021
    },
    {
        "content": "<p>Yeah, I'm holding out for anonymous union types. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> It should be <code>(NeglectAlignment | NeglectValidity)</code>, not <code>(NeglectAlignment, NeglectValidity)</code>.</p>\n<p>Since <code>Options</code> is a type parameter, we're free to change the syntax in the future. (We can't eliminate the old one, but we can deprecate it.)</p>",
        "id": 217219916,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605749718
    },
    {
        "content": "<p>I mean, ignoring what features currently exist I'd still expect <code>[Neglect::Alignment, Neglect::Validity]</code>.</p>",
        "id": 217233238,
        "sender_full_name": "scottmcm",
        "timestamp": 1605766550
    },
    {
        "content": "<p>Tbh, the only thing needed to \"hack\" such union types is being able to disable the <code>bare_trait_objects</code> for specific types. Then we'd be able to write <code>NeglectAlignment + NeglectValidity</code></p>",
        "id": 217421672,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605888724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> That's a pretty neat idea.</p>",
        "id": 217428292,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605891267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> This is <em>great</em>!<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=536c6498c1088279a03cdc9afc3c00fa\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=536c6498c1088279a03cdc9afc3c00fa</a></p>",
        "id": 217432159,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605892934
    },
    {
        "content": "<p>Oh, I had forgotten that <code>auto trait</code> requirement <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> when will the <code>#[marker_trait]</code>RFC  go forward?</p>",
        "id": 217436013,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605894730
    },
    {
        "content": "<p>What's the connection to the <code>#[marker]</code> feature?</p>",
        "id": 217439733,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605896543
    },
    {
        "content": "<p>Because those can't have overrides, and thus don't need anything (extra) in the vtable, it's possible that the check for \"extra <code>+</code>ed traits\" could move to looking for marker traits instead of auto traits.</p>",
        "id": 217454622,
        "sender_full_name": "scottmcm",
        "timestamp": 1605903944
    },
    {
        "content": "<p>(Though there are some design questions there if the marker trait has non-marker-trait subtraits [or supertraits?  I never remember which direction is which])</p>",
        "id": 217454649,
        "sender_full_name": "scottmcm",
        "timestamp": 1605903962
    },
    {
        "content": "<p>I've collated the various possibilities for representing a <code>Neglect</code> const/type parameter: <a href=\"https://hackmd.io/@jswrenn/S192QCR9D\">https://hackmd.io/@jswrenn/S192QCR9D</a></p>\n<p>Let me know if I've missed anything!</p>",
        "id": 218133942,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606516476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span>  I <em>really</em> like the <code>Option + Option + ...</code> type parameter  approach, but it doesn't obviously admit any way to express <em>adding</em> an option to a generic set of options.</p>",
        "id": 218231080,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606684686
    },
    {
        "content": "<p>For instance, <code>TransmuteFrom</code> is implemented for all <code>Src</code> and <code>Dst</code> that are <code>UnstableTransmuteFrom</code> and the appropriate <code>Muckable</code>s, <em>notwithstanding visibility</em>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Src</span>: <span class=\"nc\">MuckableInto</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">MuckableFrom</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">UnstableTransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">NeglectVisibility</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Neglect</span>: <span class=\"nc\">TransmuteOptions</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218231082,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606684693
    },
    {
        "content": "<p>But you <em>can't</em> write <code>Neglect + NeglectVisibility</code>. That's a compile error.</p>",
        "id": 218231093,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606684712
    },
    {
        "content": "<p>The alternative of a <code>const NEGLECT: Neglect</code> parameter handles this case really smoothly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">NEGLECT</span>: <span class=\"nc\">Neglect</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NEGLECT</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Src</span>: <span class=\"nc\">MuckableInto</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">MuckableFrom</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">UnstableTransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">Neglect</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">visibility</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"n\">NEGLECT</span><span class=\"p\">}}</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Neglect</span>: <span class=\"nc\">TransmuteOptions</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The syntax isn't <em>quite</em> as pretty, but we can get close with an <code>Add</code> impl on <code>Neglect</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">NEGLECT</span>: <span class=\"nc\">Neglect</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NEGLECT</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Src</span>: <span class=\"nc\">MuckableInto</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">MuckableFrom</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">UnstableTransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">NEGLECT</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Neglect</span>::<span class=\"n\">VISIBILITY</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Neglect</span>: <span class=\"nc\">TransmuteOptions</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <em>only</em> major downside of this approach is you can't default const generic parameters, but that seems to me like a plausible future extension to const generics.</p>",
        "id": 218231193,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606684889
    },
    {
        "content": "<p>Yeah, combining such types would be very cumbersome (involving helper traits): <code>&lt;Neglect as With&lt;NeglectVisibility&gt;&gt;::T</code> which hinders readability and, in practice, usually requires adding many <code>where Neglect : With&lt;NeglecVisibility&gt;</code> kind of bounds in many places, and it quickly spirals out of control / any real usability.<br>\nSo despite how \"elegant\" the autotraits \"sums\" looked, I think <code>const</code> generics are the way to go, indeed.</p>",
        "id": 218324854,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606760541
    }
]