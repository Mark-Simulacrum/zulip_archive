[
    {
        "content": "<p>If I have two public types which I don't want to be publicly-<code>Muckable</code>, how can I transmute references to them? Concretely:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How can I transmute <code>&amp;Foo</code> to <code>&amp;Bar</code> without making <code>Foo</code> and <code>Bar</code> <code>Muckable</code>?</p>",
        "id": 217210888,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1605742163
    },
    {
        "content": "<p>You would need to make private <code>FooData</code> and <code>BarData</code> types which do implement <code>Muckable</code>, and then do the transmutation in the same module (as part of a public function). To remain 100% safe, this would proobably need some new way to go back from a <code>&amp;FooData</code> to a <code>&amp;Foo</code>.</p>",
        "id": 217216706,
        "sender_full_name": "rpjohnst",
        "timestamp": 1605746670
    },
    {
        "content": "<p>You could also use the <code>MuckableInto</code> or equivalent (still bring discussed) to specify just those 2 are interconrtible, or you might be able to newtype wrapper idiom, or maybe private impls if and when they get added.</p>",
        "id": 217229667,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605761533
    }
]