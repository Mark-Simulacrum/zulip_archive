[
    {
        "content": "<p>Another aspect maybe worth bikeshedding is if it should be <code>Muckable</code> or <code>MuckableFrom&lt;T&gt;</code>... the former opts-in to all transmutes with compatible layout going forward into the future, i.e., when new layout guarantees are established, suddenly more transmutes are possible. That seems like a potential semver hazard. We'll want to design things in a way that declaring more things <code>TransmuteFrom</code> (i.e., layouts are compatible, whatever that trait ends up being called) will not break anything.</p>",
        "id": 216002318,
        "sender_full_name": "RalfJ",
        "timestamp": 1604834297
    },
    {
        "content": "<p>I can think of an example of this, but it's rather contrived: If someone defined a trait with a <code>transmute_from</code> method that was implemented for two types that core's <code>TransmuteFrom</code> <em>wasn't</em> implemented for, and <em>then</em> core's <code>TransmuteFrom</code> became implemented for those types, a compile error (ambiguous method) would result.</p>\n<p>Is that what you have in mind? If not, could you give an example?</p>",
        "id": 216112104,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604940840
    },
    {
        "content": "<p>This might be more about the problems we regularly have with <code>.as_ref()</code> -- if there's only one of them, then that works unannotated, but when the second impl is added than it's suddenly ambiguous causing inference breakage in existing code.</p>",
        "id": 216371571,
        "sender_full_name": "scottmcm",
        "timestamp": 1605114040
    },
    {
        "content": "<p>Can't that be solved with one or two hidden impls? That way the types <em>have</em> to be annotated</p>",
        "id": 216373291,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605114845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>, I'm not familiar with the issues with <code>AsRef</code>, but I'm picturing something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">transmute_from</span><span class=\"p\">(</span><span class=\"n\">src</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">transmute_from</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Bar</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// error[E0282]: type annotations needed</span>\n<span class=\"w\">    </span><span class=\"c1\">// Even though there is only one impl of `From`,</span>\n<span class=\"w\">    </span><span class=\"c1\">// the destination type is not inferred.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span>::<span class=\"n\">transmute_from</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...but that <em>does</em> result in a compile error.</p>",
        "id": 216374221,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605115345
    },
    {
        "content": "<p>Oh, I see. Does this issue only occur when it's a method call? This does <em>not</em> produce a compile error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TransmuteInto</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">transmute_into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TransmuteInto</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">transmute_into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">.</span><span class=\"n\">transmute_into</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...but if I add:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TransmuteInto</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">transmute_into</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...then it does!</p>",
        "id": 216374285,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605115385
    },
    {
        "content": "<p>So, it seems like this stability error might be neatly solved by providing <code>TransmuteFrom</code>, rather than <code>TransmuteInto</code>.</p>",
        "id": 216374544,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605115525
    },
    {
        "content": "<p>(or a free function, or not taking <code>self</code>)</p>",
        "id": 216389007,
        "sender_full_name": "scottmcm",
        "timestamp": 1605123332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/.60Muckable.60.20semver.20hazard/near/216374285\">said</a>:</p>\n<blockquote>\n<p>Oh, I see. Does this issue only occur when it's a method call?</p>\n</blockquote>\n<p>I actually have no idea.  I'm not enough of a trait resolution wizard to understand what happens...</p>",
        "id": 216389142,
        "sender_full_name": "scottmcm",
        "timestamp": 1605123389
    },
    {
        "content": "<p>I was actually not thinking of resolution failures but semantic issues</p>",
        "id": 216725762,
        "sender_full_name": "RalfJ",
        "timestamp": 1605356002
    },
    {
        "content": "<p>e.g., given a <code>#[repr(Rust)] struct Foo(i32, i32)</code>, doing <code>impl Muckable for Foo</code> would currently be a NOP -- there are no layout guarantees for <code>Foo</code>. But maybe one day we'll guarantee that homogeneous structs are compatible with arrays, so suddenly this <code>impl Muckable</code> will allow safe transmutes from <code>[i32; 2]</code>.</p>",
        "id": 216725815,
        "sender_full_name": "RalfJ",
        "timestamp": 1605356085
    },
    {
        "content": "<p>I don't see a problem though, isn't that the whole point of Muckable? The only way it wouldn't work would be if stuff got removed.</p>",
        "id": 216746906,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605383697
    },
    {
        "content": "<p>Oh, hm. I spy a potential <em>language-level</em> stability hazard.</p>\n<p>Imagine you've written:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(Rust)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">{</span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">f32</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Muckable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is <em>currently</em> a no-op, since Rust doesn't provide any layout guarantees for <code>Foo</code>. </p>\n<p>But let's say that Rust <em>does</em> guarantee that <code>Foo</code> is transmutable into <code>[i32; 2]</code>, but still doesn't specify field order. You could not implement <code>Muckable</code> for such a type because <em>you</em> don't need to change the definition for the fields to be re-ordered in memory!</p>\n<p><code>Muckable</code>'s promise is unenforcable. The type author doesn't need to reorder the field themselves for the fields to get re-ordered in memory.</p>",
        "id": 216747469,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605384394
    },
    {
        "content": "<p><code>Muckable</code> is really only fit for <code>#[repr(C)]</code> types—their layouts are completely specified, and only a change to the definition can change their layout.</p>",
        "id": 216747556,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605384594
    },
    {
        "content": "<p>Could we just not go down that road and prevent implementations for <code>repr(Rust)</code>?</p>",
        "id": 216747627,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605384719
    },
    {
        "content": "<p>Sure, if we want <code>Muckable</code> to denote \"you won't change anything about the layout\" we <strong>must</strong> restrict it to <code>#[repr(C)]</code> or <code>#[repr(transparent)]</code> types where all fields are <code>Muckable</code>.</p>",
        "id": 216747738,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605384897
    },
    {
        "content": "<p>...but the constraining layout guarantees Rust might provide in the future for <code>#[repr(Rust)]</code> and other reprs is very much outside of the hands of this working group.</p>\n<p>If Rust ever provides such guarantees in the future, they <em>won't</em> be usable with <code>TransmuteFrom</code> because they won't be usable with <code>Muckable</code>.</p>",
        "id": 216747817,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605385035
    },
    {
        "content": "<p>The root of the issue is that <code>Muckable</code> is intertwined with <em>both</em> safety and stability. There <em>is</em> a version of this RFC where safety and stability aren't intertwined. We might also try to disentangle the two in the <code>Muckable</code> version of the RFC.</p>\n<p>Here's what this might look like:</p>\n<ul>\n<li><code>Muckable</code> denotes that a type does not have internal value invariants, and</li>\n<li>the fields of a <code>Muckable</code> type are <em>also</em> <code>Muckable</code></li>\n<li><code>Muckable</code> does <em>not</em> denote anything else about layout stability</li>\n</ul>",
        "id": 216748452,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605386037
    },
    {
        "content": "<p>That might be unsatisfying for other reasons, though. Are option-like types <code>Muckable</code>? (<code>#[repr(rust)]</code> option-like types <em>do</em> have layout guarantees.) Are they only <code>Muckable</code> if their fields are <code>Muckable</code>? That rules out some really nifty conversions. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 216748670,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605386244
    },
    {
        "content": "<p>So something I was thinking in my head was a comment above that  currently<code>Muckable</code> was just <code>FixedLayout + InvariantFree</code>.</p>",
        "id": 216748793,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605386402
    },
    {
        "content": "<p>Hnmm what conversions were ruled out?</p>",
        "id": 216748836,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605386410
    },
    {
        "content": "<p>Given:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then a transmute <code>Foo&lt;&amp;Baz&gt;</code> to <code>Bar&lt;&amp;Baz&gt;</code> is already permitted, IIRC. (At any rate, it <em>could</em> be permitted in the future.)</p>",
        "id": 216748971,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605386542
    },
    {
        "content": "<p>I think we could solve that by making <code>TransmuteFrom/Into</code> an unsafe marker trait, that you could implement to say I can transmute into these given types (which is likely what the <code>Archetype</code> system was trying to do) in a more convenient way.</p>",
        "id": 216749512,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605387089
    },
    {
        "content": "<p>Yeah, this issue also disappears if you <em>manually</em> have to specify the completely set of traits your type is transmutable from/into.</p>",
        "id": 216749587,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605387144
    },
    {
        "content": "<p>However, you often <em>can't</em> list out all the types your type ought to be transmutable form. They might be in other crates, they might not even have been written yet.</p>",
        "id": 216749693,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605387260
    },
    {
        "content": "<p>This approach is great for stability (it's basically no different than <code>From</code>/<code>Into</code>), but poor for ergonomics and expressivity. <a href=\"https://github.com/jswrenn/rfcs/blob/ee1204c23320c33437107ff222e09afd9d5fef1d/text/0000-safer-transmute.md#manual\">Check out this section of the RFC.</a></p>",
        "id": 216749725,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605387302
    },
    {
        "content": "<p>I'm not sure i follow how saying that you can't implement muckable on repr(rust) makes a problem for the future.<br>\nin the future if repr(rust) becomes better specified wouldn't we just relax the restrictions on what's muckable?</p>",
        "id": 216749751,
        "sender_full_name": "Lokathor",
        "timestamp": 1605387332
    },
    {
        "content": "<p>note: repr(simd) and \"the primitive repr\" are technically not the same as repr(c) and so they might need listing in whatever documentation wherever (if muckable is added that is)</p>",
        "id": 216749822,
        "sender_full_name": "Lokathor",
        "timestamp": 1605387383
    },
    {
        "content": "<p>If <code>Muckable</code> at first denotes \"fields will not be re-ordered\" (which is a sensible promise when only <code>#[repr(C)]</code> types are concerned), then that promise <em>cannot</em> be safely lifted later on to accomodate <code>#[repr(rust)]</code> types — people will have come to rely on that promise.</p>",
        "id": 216749920,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605387534
    },
    {
        "content": "<p>It would not be lifted</p>",
        "id": 216749931,
        "sender_full_name": "Lokathor",
        "timestamp": 1605387575
    },
    {
        "content": "<p>I don't follow what you mean by \"relaxed\", then.</p>",
        "id": 216749980,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605387607
    },
    {
        "content": "<p>my point was that in some situations a repr(rust) struct might have guaranteed ordered fields via (future mechanism), and then would be muckable</p>",
        "id": 216749998,
        "sender_full_name": "Lokathor",
        "timestamp": 1605387644
    },
    {
        "content": "<p>because what we <em>really</em> care about is a fixed/defined field layout, right?</p>",
        "id": 216750019,
        "sender_full_name": "Lokathor",
        "timestamp": 1605387681
    },
    {
        "content": "<p>and repr(c) is just one way to have that</p>",
        "id": 216750025,
        "sender_full_name": "Lokathor",
        "timestamp": 1605387699
    },
    {
        "content": "<p>Oh sure. And there's also a future in which a <code>repr(rust)</code> struct might have every layout property guaranteed <em>except</em> field ordering.</p>",
        "id": 216750027,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605387704
    },
    {
        "content": "<p>i mean iirc even repr(transparent) is supposed to be just a dumb compiler hint, and any repr(rust) single-field type is supposed to act like the repr(transparent) version even if not so marked, this just isn't a hard guarantee, hence the attribute's usage</p>",
        "id": 216750103,
        "sender_full_name": "Lokathor",
        "timestamp": 1605387828
    },
    {
        "content": "<p>I mean that approach where <code>Muckable</code> doesn't need a <code>IgnoreStability</code> but <code>InvariantFree</code> does need  <code>IgnoreStability</code> would be strictly more utility (and backwards compatible), and if we specify <code>Muckable</code> right I think we can punt on these questions for later.</p>",
        "id": 216750151,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605387878
    },
    {
        "content": "<p>Either as extensions to the RFC or something the project group tackles later when this core is done.</p>",
        "id": 216750183,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1605387953
    },
    {
        "content": "<p>Hm, I think we're talking somewhat past each other <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span>. We're trying to figure out what, exactly, <code>Muckable</code> should connote. The degree to which you care about the stability of field layout order depends on use-case.</p>\n<ul>\n<li>A struct with every layout property guaranteed <em>except</em> layout field order will still have well-defined alignment and size. If you are doing pointer-bitpacking, that's enough.</li>\n<li>A struct with every layout property guaranteed, but field order is <em>only</em> guaranteed to be the same for a particular compiler version is totally fine in some serialization/deserialization contexts.</li>\n</ul>\n<p>An all-or-nothing stability system that's intertwined with safety doesn't accomodate these use cases.</p>",
        "id": 216750267,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605388083
    },
    {
        "content": "<p>ah, exactly what Muckable means is up to others, i suppose i just wanted to point out that the future hazard isn't really that large</p>",
        "id": 216750320,
        "sender_full_name": "Lokathor",
        "timestamp": 1605388200
    },
    {
        "content": "<p>It just maybe closes off some future use-cases. Like, we define <code>Muckable</code> to mean \"field layout order is fixed\", and then later the Rust Language decides that <code>repr(Rust)</code> types have every layout property specified <em>except</em> for field order, you won't be able to use our work to figure out if those transmutations are safe.</p>",
        "id": 216750381,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605388276
    },
    {
        "content": "<p>Oh, and super crucially, if we made <code>Muckable</code> denote \"field layout order is fixed\", we would have to—via the compiler—prohibit implementations of <code>Muckable</code> for <code>repr(rust)</code> types, since <code>repr(rust)</code> types <em>could</em> eventually guarantee that every layout property <em>except</em> for field order is specified. It would be awkward if people were <em>already</em> implementing <code>Muckable</code> for such types.</p>",
        "id": 216750441,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605388343
    },
    {
        "content": "<p>(This is where I suggest <em>again</em> that reflecting layout stability in the type system is <em>really</em> complicated, and so we should limit ourselves to <em>only</em> solving safe transmutation initially. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 216750518,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605388489
    },
    {
        "content": "<p>we already have to prevent Muckable for repr(rust) if there's more than one field</p>",
        "id": 216751151,
        "sender_full_name": "Lokathor",
        "timestamp": 1605389535
    },
    {
        "content": "<p>that's not a future hazard, that's the case today</p>",
        "id": 216751158,
        "sender_full_name": "Lokathor",
        "timestamp": 1605389546
    },
    {
        "content": "<p>If <code>Muckable</code> <em>only</em> denotes that the type doesn't have internal value invariants, then we do <em>not</em> have to prohibit implementations of <code>Muckable</code> for <code>repr(Rust)</code> types. Just because the source and destination types of a transmute are <code>Muckable</code> <em>doesn't</em> mean they'll be <code>TransmuteFrom</code>.</p>",
        "id": 216751321,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605389746
    },
    {
        "content": "<p>So, it'd currently be pointless to mark a <code>repr(rust)</code> type as <code>Muckable</code>, but doing so wouldn't pose any sort of hazard.</p>",
        "id": 216751400,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605389807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/.60Muckable.60.20semver.20hazard/near/216749920\">said</a>:</p>\n<blockquote>\n<p>If <code>Muckable</code> at first denotes \"fields will not be re-ordered\" (which is a sensible promise when only <code>#[repr(C)]</code> types are concerned), then that promise <em>cannot</em> be safely lifted later on to accomodate <code>#[repr(rust)]</code> types — people will have come to rely on that promise.</p>\n</blockquote>\n<p>but doesn't it denote that <em>and</em> a safe constructor given safe values of all fields -- but the latter only if some layout-compatible type actually exists? I guess for <code>repr(C)</code>, one always exists.</p>",
        "id": 216805225,
        "sender_full_name": "RalfJ",
        "timestamp": 1605463120
    },
    {
        "content": "<p>the latter is what I am concerned about -- it needs to be clear that <code>Muckable</code> entails publicly exposing a constructor that, given a value for each field, constructs a value of this type. this needs to be the case even if <code>Muckable</code> would, for one reason or another, be otherwise a NOP.</p>",
        "id": 216805278,
        "sender_full_name": "RalfJ",
        "timestamp": 1605463200
    },
    {
        "content": "<p>Yeah. I think I'm already on board with you there. The <em>primary</em> implication of <code>Muckable</code> is that you're potentially providing a safe, unchecked constructor for your type's bits.</p>",
        "id": 216805503,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605463445
    },
    {
        "content": "<p>Unrelated, but I wonder if there's a potential safe transmute stability hazard in <code>Muckable</code> if Rust <a href=\"https://github.com/rust-lang/rust/issues/70230\">changed the validity guarantees of padding bytes</a>. It couldn't practically do so for <code>#[repr(C)]</code> types (the main purpose of which are FFI and other languages <em>don't</em> necessarily have init padding bytes), but it could for other reprs.</p>",
        "id": 216805707,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1605463768
    },
    {
        "content": "<p>what hazard do you have in mind? if we ever want to provide layout guarantees for <code>repr(Rust)</code> types with padding we need to decide we never want to have guaranteed-zero padding (or account of it), is that what you mean?</p>",
        "id": 216809712,
        "sender_full_name": "RalfJ",
        "timestamp": 1605469049
    }
]