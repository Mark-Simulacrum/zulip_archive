[
    {
        "content": "<p>Another case where <code>TransmuteFrom</code>/<code>Muckable{From,Into}</code> is overly-restrictive: Expressing just that a type can be safely instantiated via <code>mem::zeroed()</code>.</p>\n<p><code>UnstableTransmuteFrom</code> provides a foundation for this, too!</p>",
        "id": 218189698,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606612741
    },
    {
        "content": "<p>First off, an <code>UnstableFromZeros</code> might be constructed like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">UnstableFromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Neglect</span>: <span class=\"nc\">TransmuteOptions</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Safely initialize `Self` from zeroed bytes.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Neglect</span>: <span class=\"nc\">SafeTransmuteOptions</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Unsafely initialize `Self` from zeroed bytes.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">unsafe_zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Zero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">UnstableFromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">UnstableTransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Neglect</span>: <span class=\"nc\">TransmuteOptions</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Neglect</span>: <span class=\"nc\">SafeTransmuteOptions</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">].</span><span class=\"n\">transmute_into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">unsafe_zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">].</span><span class=\"n\">unsafe_transmute_into</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Given that, you can <em>really</em> quickly reduce unsafety in a library by simply replacing <code>mem::zeroed()</code> with <code>zeroed!()</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Here</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">UnstableTransmuteFrom</span>::<span class=\"o\">&lt;</span><span class=\"n\">Here</span><span class=\"o\">&gt;</span>::<span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218189838,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606613026
    },
    {
        "content": "<p>Of course, that only covers safety, not semver stability. We can communicate stable zero-initializability in a few ways.</p>",
        "id": 218190001,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606613286
    },
    {
        "content": "<p>First, we can simply document our guarantee and (for our own benefit) assert:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Here</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">assert_impl_all</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">MyType</span>: <span class=\"nc\">UnstableFromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Here</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218190004,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606613293
    },
    {
        "content": "<p>Second, we can define a <code>Muckable</code>-style system; e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Zeroable</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...where:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// A marker trait signaling that transmutation from zeros is stable</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Zeroable</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AlwaysFromZeros</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Neglect</span>: <span class=\"nc\">TransmuteOptions</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Neglect</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AlwaysFromZeros</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">Zeroable</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">UnstableFromZeros</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NeglectVisibility</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218190139,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606613630
    },
    {
        "content": "<p>(Stability is hard! But, with <code>UnstableTransmuteFrom</code>, <em>we</em> don't need to solve it in libcore on our first go.)</p>",
        "id": 218190200,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606613716
    },
    {
        "content": "<p>Isn't that expressed by allowing transmute from <code>[u8; size_of::&lt;T&gt;()] </code>?</p>",
        "id": 218476089,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1606854141
    },
    {
        "content": "<p>It is. I'm referring to the <em>contract</em> of <code>Zeroable</code>. The contract of bytemuck's <code>Zeroable</code> is that you promise that your type can be instantiated with <code>mem::zeroed()</code>. You're allowed to change all other aspects of your type's layout so long as you maintain that contract.</p>\n<p>In contrast, the <code>Muckable</code> approach promises that you <em>won't</em> change <strong>any</strong> aspects of your type's layout.</p>",
        "id": 218477336,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606854726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117495\">@rpjohnst</span> <em>Maybe</em> an archetype-based approach might provide an elegant solution to this problem (assuming we can make it sound), but I'm not seeing one with <code>Muckable</code>.</p>",
        "id": 218506297,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606873539
    },
    {
        "content": "<p>Well what I was imagining with <code>Muckable</code> here was, you make the type private and <code>Muckable</code>, and then you impl some sort of <code>FromZeros</code> trait for a newtype wrapper which exploits the private <code>Muckable</code>-ness to safely convert a bunch of zeros to an instance of the newtype.</p>",
        "id": 218506633,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606873844
    },
    {
        "content": "<p>The big hammer of <code>Muckable</code> opts you into safe transmute in any form, and then the <code>FromZeroes</code> trait opts the public API into just one kind of transmute, with the private <code>Muckable</code> as a witness that it's valid.</p>",
        "id": 218506669,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606873894
    },
    {
        "content": "<p>How do you make <code>FromZeros</code> safe though?</p>",
        "id": 218506746,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606873978
    },
    {
        "content": "<p>You define it in such a way that any <code>impl</code> of it must itself exploit a relevant property of the type which is visible to the <code>impl</code>. So, to illustrate (this is probably not workable), imagine something like <code>trait FromZeroes { fn from_zeroes(zeros: [Zero; bla]) -&gt; Self; }</code>.</p>",
        "id": 218507336,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606874628
    },
    {
        "content": "<p>Inside the module impl-ing <code>FromZeroes</code> for type <code>Foo</code>, the compiler will let you do any transmute that is valid for <code>Foo</code>. Outside, that ability is not accessible, but the <code>FromZeroes</code> trait will use that ability on your behalf.</p>",
        "id": 218507446,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606874728
    }
]