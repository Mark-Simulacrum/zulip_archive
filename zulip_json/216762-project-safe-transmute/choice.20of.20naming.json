[
    {
        "content": "<p>sorry for butting in like this, but isn't the choice of the word \"transmute\" lending itself to some confusion?</p>",
        "id": 203576036,
        "sender_full_name": "eddyb",
        "timestamp": 1594434283
    },
    {
        "content": "<p>I would expect a feature like this to talk more about \"reinterpreting data\" or some such</p>",
        "id": 203576105,
        "sender_full_name": "eddyb",
        "timestamp": 1594434368
    },
    {
        "content": "<p>although going through the hackmd I could find I'm seeing a combination of unsafe and safe APIs and it's possible the scope of this is much bigger than I expected</p>",
        "id": 203576112,
        "sender_full_name": "eddyb",
        "timestamp": 1594434391
    },
    {
        "content": "<p>I'm approaching this from a very literal perspective: what trait would we put on the generic parameters of mem::transmute in order to make the intrinsic truly safe.</p>",
        "id": 203576193,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594434550
    },
    {
        "content": "<p>fair, and I was going to say that it definitely gives me that vibe</p>",
        "id": 203576196,
        "sender_full_name": "eddyb",
        "timestamp": 1594434565
    },
    {
        "content": "<p>whereas I would start from as far away as possible</p>",
        "id": 203576199,
        "sender_full_name": "eddyb",
        "timestamp": 1594434574
    },
    {
        "content": "<p>and categorize the types where it's safe at all to talk about the data in them</p>",
        "id": 203576204,
        "sender_full_name": "eddyb",
        "timestamp": 1594434592
    },
    {
        "content": "<p>similar to previous discussions about \"POD\" or the other term which I've forgotten</p>",
        "id": 203576251,
        "sender_full_name": "eddyb",
        "timestamp": 1594434608
    },
    {
        "content": "<p>IMO it's too easy to forget a certain kind of restriction, compared to starting with very limited reinterpretations</p>",
        "id": 203576264,
        "sender_full_name": "eddyb",
        "timestamp": 1594434647
    },
    {
        "content": "<p>I can see there are examples involving references, whereas I would never even consider touching memory addresses</p>",
        "id": 203576284,
        "sender_full_name": "eddyb",
        "timestamp": 1594434696
    },
    {
        "content": "<p>(but rather focus on \"this is just a typed bag of bytes\")</p>",
        "id": 203576286,
        "sender_full_name": "eddyb",
        "timestamp": 1594434716
    },
    {
        "content": "<p>alright, you can ignore me and best of luck, I'll try not to get in the way of this, if there are any fundamental issues hopefully someone else finds them :P</p>",
        "id": 203576337,
        "sender_full_name": "eddyb",
        "timestamp": 1594434807
    },
    {
        "content": "<p>Yeah, I actually started from that point too, contributing to Zerocopy. What struck me was the difficulty of creating a taxonomy of marker traits that covered every use case, and the difficulty of imagining their interactions with each other.</p>\n<p>So with Typic, I sought to answer the question: Could all this be achieved with a small set of fundamental rules? And it can!</p>",
        "id": 203576338,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594434810
    },
    {
        "content": "<p>And yeah, you're absolutely right that it's easy to overlook restrictions. I've tried to approach it from an everything-forbidden-by-default perspective. It's fine to be too restrictive.</p>\n<p>A nice property of hiding everything behind a <code>TransmuteFrom</code> trait is that you don't need to add a whole new trait everytime you identify a class of operations that should be supported. <code>TransmuteFrom</code> can start 'dumb' and support very few transmutations, then gradually get smarter.</p>\n<p>The reason that Typic and the RFC explore a very complex set of rules is to demonstrate that the API design doesn't fundamentally stifle that sort of sophistication.</p>",
        "id": 203576396,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594434874
    }
]