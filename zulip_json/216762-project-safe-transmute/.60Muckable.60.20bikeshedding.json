[
    {
        "content": "<p>I'm guessing the name <code>Muckable</code> was inspired by bytemuck?</p>",
        "id": 215343458,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604334936
    },
    {
        "content": "<p>Also, yeah, this totally makes me want private impls.</p>",
        "id": 215343601,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604334983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/summarizing.20for.20lang.20team/near/215343458\">said</a>:</p>\n<blockquote>\n<p>I'm guessing the name <code>Muckable</code> was inspired by bytemuck?</p>\n</blockquote>\n<p>Heh, yep. It's the least-wrong name I could think of. The automatically-implemented scope aware version was called <code>Constructible&lt;Scope&gt;</code>, but that name doesn't make sense if it <em>isn't</em> scope-aware or manually implemented, since it would no longer have a correspondence to implicit constructability.</p>",
        "id": 215344014,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604335149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/summarizing.20for.20lang.20team/near/215343601\">said</a>:</p>\n<blockquote>\n<p>Also, yeah, this totally makes me want private impls.</p>\n</blockquote>\n<p>IMO, the type privacy RFC <em>really</em> does suggest a path towards this. It's a shame that the safety details of type privacy haven't been examined more closely, though.</p>",
        "id": 215344419,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604335306
    },
    {
        "content": "<p>At the risk of bikeshedding: I'm tempted to just say it should be <code>Transmutable</code>, so that it's obvious it's related to transmuting.</p>",
        "id": 215344629,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604335396
    },
    {
        "content": "<p>Naming aside, the changes look good to me.</p>",
        "id": 215344702,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604335427
    },
    {
        "content": "<p>It's definitely a design point worth bikeshedding. I was disinclined from that name because it sounds like <code>Transmutable</code> implies <code>TransmuteFrom</code>, but that's not the case. (We can imaging bikeshedding <code>TransmuteFrom</code> to <code>TransmutableFrom</code>, which would make the relationship between the names even more confusing.)</p>\n<p>So, why <code>Muckable</code>? Because for <code>Dst: TransmuteFrom&lt;Src&gt;</code> to be safe, <code>Dst</code> needs to have opted into having its bytes arbitrarily mucked with by anyone. If <code>Dst</code> is a mutatable reference, <code>Src</code> <em>also</em> needs to have opted into having its bytes arbitrarily mucked with by anyone.  If you replace the world \"muckable\" with \"transmutable\", that explanation gets frustratingly almost-circular.</p>",
        "id": 215345446,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604335726
    },
    {
        "content": "<p>Transmutable doesn't imply TransmuteFrom, but it is a prerequisite.</p>",
        "id": 215347720,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604336694
    },
    {
        "content": "<p>Yeah, so it's really more like <code>MaybeTransmutable</code>?</p>",
        "id": 215347894,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604336763
    },
    {
        "content": "<p><code>ByteMuckable</code> and <code>ByteComplete</code> are two other possibilities though I can't say I like either of them particularly better.</p>",
        "id": 215350988,
        "sender_full_name": "rylev",
        "timestamp": 1604338062
    },
    {
        "content": "<p>FYI I changed the <code>Muckable</code> discussion to a different topic</p>",
        "id": 215351148,
        "sender_full_name": "rylev",
        "timestamp": 1604338118
    },
    {
        "content": "<p>Ah, hmm, yes, indeed, <code>Muckable</code> or <code>ByteMuckable</code> are quite good name we should surely use.</p>",
        "id": 215353712,
        "sender_full_name": "Lokathor",
        "timestamp": 1604339294
    },
    {
        "content": "<p><em>Almost</em> as good as just calling the trait <code>Lokathor</code>, which is the obviously correct name.</p>",
        "id": 215353932,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604339384
    },
    {
        "content": "<p>In the mem-marker repo we were using the traits <code>InvariantFree + FixedLayout + ByteComplete</code> to encapsulate what <code>Muckable</code> represents now.</p>",
        "id": 215354581,
        "sender_full_name": "rylev",
        "timestamp": 1604339672
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// You got some bytes? We'll call 'em whatever you want us to call 'em.</span>\n<span class=\"cp\">#[rustc_unstable_derive_only_trait]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Lokathor</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215354595,
        "sender_full_name": "Lokathor",
        "timestamp": 1604339678
    },
    {
        "content": "<p>bikeshed-wise, the <code>able</code> suffix is getting to me- idiomatic trait names tend to be imperative verbs describing what may be done with them (<code>Copy</code>, <code>Write</code>, <code>Hash</code>, <code>Cmp</code>, <code>Send</code>, <code>Sync</code>, <code>Unpin</code>, cf <a href=\"https://github.com/rust-lang/api-guidelines/issues/28\">https://github.com/rust-lang/api-guidelines/issues/28</a>).</p>",
        "id": 215357161,
        "sender_full_name": "rpjohnst",
        "timestamp": 1604340879
    },
    {
        "content": "<p>So, <code>Muck</code>? ;)</p>",
        "id": 215357378,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604340985
    },
    {
        "content": "<p>so maybe just <code>Construct</code> (or <code>Muck</code> lol)? or following the <code>Sized</code>/<code>UnwindSafe</code>/etc family of names, maybe <code>FixedLayout</code> like <code>mem-marker</code>, or even just <code>Layout</code> (if that didn't conflict with the <code>Layout</code> type, though it does suggest a future extension to get more info about the <code>Layout</code>...)</p>",
        "id": 215357389,
        "sender_full_name": "rpjohnst",
        "timestamp": 1604340994
    },
    {
        "content": "<p>LayoutABI would be clear, if verbose.</p>",
        "id": 215357460,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604341032
    },
    {
        "content": "<p>maybe <code>VisibleLayout</code> or something like that</p>",
        "id": 215357510,
        "sender_full_name": "rpjohnst",
        "timestamp": 1604341057
    },
    {
        "content": "<p>PubLayout?</p>",
        "id": 215357550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604341076
    },
    {
        "content": "<p><code>VisibleLayout</code> is a little weird, since again it implies a connection to the <code>Layout</code> type, or that the layout is otherwise <em>in</em>visible (which it isn't).</p>\n<p>I worry that <code>LayoutStable</code> or <code>LayoutABI</code> obscures the implications of implementing it. Like, <em>yes</em>, you're promising layout stability, but more pressingly you're also broadcasting that anyone can muck with your bytes even if your fields are private or effectively private. For a lot of use-cases, that's going to be a more pressing safety consequence than whether your type has a stable size or alignment.</p>",
        "id": 215358904,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604341760
    },
    {
        "content": "<p><code>StableRepr</code>? <code>StableBytes</code>?</p>",
        "id": 215359777,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604342207
    },
    {
        "content": "<p>\"the repr/bytes of this type are stable\".</p>",
        "id": 215359800,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604342223
    },
    {
        "content": "<p>Also, should it be one trait, or one for to and one for from?</p>",
        "id": 215359838,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604342250
    },
    {
        "content": "<p>I can imagine somebody being willing to promise transmuting from, but still wanting a validation layer before transmitting to.</p>",
        "id": 215359868,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604342268
    },
    {
        "content": "<p>It's like <code>StableRepr</code> + <code>StableBytes</code>.</p>",
        "id": 215359931,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604342287
    },
    {
        "content": "<p><code>TransmuteStable</code>?</p>",
        "id": 215361778,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604343227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I think that use-case is probably handled by <em>not</em> implementing <code>Muckable</code> and instead just implementing <code>From</code> manually for your type. <a href=\"https://github.com/rust-lang/rfcs/blob/ee1204c23320c33437107ff222e09afd9d5fef1d/text/0000-safer-transmute.md#neglectsafety\">See the example here.</a></p>\n<p>There are a <em>lot</em> of ways you can slice down stability that are important to various use-cases. If you separate safety and stability, as the previous iteration of this RFC did, you can punt on coming up with one right way to encode stability. But, because of a prevailing sense that this RFC <em>shouldn't</em> separate out safety (which involved a visibility analysis but not explicit opt-in) from stability, there <em>needs</em> to be one or more traits that people manually implement to signal that their type can be <em>safely</em> transmutable, and manually implemented traits have stability implications.</p>\n<p>So what should the stability implication of this trait be? <code>TransmuteFrom</code> provides a lens into virtually every aspect of a type's layout, so if <code>TransmuteFrom</code> is going to behave stably, the simplest thing to do is have a trait that denotes that virtually every aspect of a type's layout is stable. That covers most use-cases. However, there are some use-cases where this is just overly coarse. For instance, a <a href=\"https://github.com/rust-lang/project-safe-transmute/blob/master/rfcs/0000-ext-layout-traits.md#pointer-bit-packing\">safe abstraction for pointer bit-packing</a> need <em>only</em> care about the alignment, but not size or validity. And a <a href=\"https://github.com/rust-lang/project-safe-transmute/blob/master/rfcs/0000-ext-generic-atomic.md#reference-level-explanation\">generic <code>Atomic&lt;T&gt;</code> abstraction</a> need only care about the size (and possibly alignment) of <code>T</code>, not its validity. Or, like you suggest, maybe you only care about one direction of transmutation.</p>\n<p>Anyways: there are a <em>ton</em> of ways to slice stability. My preference would be to <em>not</em> deal with it: provide a well-defined-and-safe-but-unstable <code>TransmuteFrom</code> as a foundation, and leave layout stability traits to the community to figure out. But, because safety and stability are intertwined, we now can't have safe transmutation without also have stable transmutation. The all-or-nothing approach isn't one-size-fits-all, but it's a size that fits <em>most</em>, and that gets us quickly to safe transmutation.</p>",
        "id": 215362797,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604343700
    },
    {
        "content": "<p>So, giving it a funny name that's not immediately obvious like <code>Muckable</code> is a <em>very good thing</em> in this case because people have <em>no inherent idea</em> of what on earth that's supposed to mean, so they <em>have</em> to go read the docs, and which point they learn exactly what it's trying to promise. That's good, because things like LayoutStable and TransmuteStable <em>might seem</em> to message particular concepts to people that aren't precisely what actually happens.</p>\n<p>So in this part of the language we should keep with a weirder name that people won't have notions about.</p>",
        "id": 215369693,
        "sender_full_name": "Lokathor",
        "timestamp": 1604346736
    },
    {
        "content": "<p>Aside: A <code>GuaranteedLayout</code> trait, regardless of its name, would also work for the \"need guaranteed 1-ZST-ness for <code>repr(transparent)</code>\" conversation.</p>",
        "id": 215369981,
        "sender_full_name": "scottmcm",
        "timestamp": 1604346885
    },
    {
        "content": "<p>Is MayTransmute imprecise?</p>",
        "id": 215387013,
        "sender_full_name": "pachi",
        "timestamp": 1604355485
    },
    {
        "content": "<p><code>PlsSirMayIHaveSomeTransmute</code></p>",
        "id": 215387507,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604355821
    },
    {
        "content": "<p>Here's the sense in which it's imprecise:</p>\n<p><code>Dst: TransmutableFrom&lt;Src&gt;</code> says \"You <em>may</em> safely transmute a value of type <code>Src</code> into a value of type <code>Dst</code>\"</p>\n<p>It <em>doesn't</em> mean that you <em>will</em> actually do that transmute, and there <em>are</em> scenarios where it's useful to assert that bound but <em>not</em> transmute!</p>",
        "id": 215387684,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604355920
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 215387861,
        "sender_full_name": "pachi",
        "timestamp": 1604355996
    },
    {
        "content": "<p>(Well, not to rain on you Jack, but the same argument of \"oh i might not really call that method!\" applies to Clone, Copy, Default, etc)</p>",
        "id": 215389843,
        "sender_full_name": "Lokathor",
        "timestamp": 1604357310
    },
    {
        "content": "<p>In principle I suppose, but I don't think anybody's really using <code>Default</code> as an oracle for complex properties about their type unrelated to constructing default values.</p>",
        "id": 215389962,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604357392
    },
    {
        "content": "<p>And those traits you listed are singularly useful. <code>TransmuteFrom</code>  (now) isn't. It's got <em>another</em> trait kicking around with it.</p>",
        "id": 215390201,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604357523
    },
    {
        "content": "<p>So I think my point is that <code>TransmuteFrom</code> <em>could</em> very well be called <code>MayTransmuteFrom</code> (and, ya know what, <code>Copy</code> could be <code>MayCopy</code>). But, by convention, it isn't. Just like <code>MayTransmuteFrom</code> is a little weird, so too is <code>MayTransmutable</code> (and doubly so because its name sounds like the meaning of <code>TransmuteFrom</code>).</p>",
        "id": 215390393,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604357654
    },
    {
        "content": "<p>I personally find <code>Muckable</code> to be hard to grasp (maybe a <code>ByteMuckable</code> would make it a bit clearer). Which, is, given the discussion, actually a good thing, I think. As <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> pointed out, if the intuitive <code>StableTransmute</code> / <code>StableLayout</code> / <code>PublicLayout</code> or whatever each fail to express one important aspect of the contract, then having a name people have to look at the documentation for it is annoying but a necessary evil.</p>",
        "id": 215394033,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604360387
    },
    {
        "content": "<p>The \"imperative\" form of <code>Lokathor</code> is also <code>Lokathor</code>, just saying.</p>",
        "id": 215394262,
        "sender_full_name": "Lokathor",
        "timestamp": 1604360533
    },
    {
        "content": "<p>Well, if we're looking for a name without preconceived notions of what it means, how about <code>Alchemy</code>? It's related to transmutation...</p>",
        "id": 215404284,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604368266
    },
    {
        "content": "<p><code>Alchemical</code> is the technically correct term for a thing relating to transmutation.</p>",
        "id": 215404394,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604368347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/.60Muckable.60.20bikeshedding/near/215389962\">said</a>:</p>\n<blockquote>\n<p>In principle I suppose, but I don't think anybody's really using <code>Default</code> as an oracle for complex properties about their type unrelated to constructing default values.</p>\n</blockquote>\n<p>Ironically <a href=\"https://github.com/rust-lang/rust/pull/77688#issuecomment-707037464\">https://github.com/rust-lang/rust/pull/77688#issuecomment-707037464</a> is currently requesting <code>Default</code> as a way to know that a closure is a ZST <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 215461946,
        "sender_full_name": "scottmcm",
        "timestamp": 1604414614
    },
    {
        "content": "<p><code>Alchemical</code> is cute.</p>\n<p>I've been pondering whether this should even use the <code>transmute</code> word anywhere in the stabilized syntax.  We've done a pretty good job of saying \"you shouldn't use <code>transmute</code>\" as a community, and I'm not sure that the \"<code>transmute</code> bad; <code>transmute_into</code> good\" is a nuance we want to teach.  Makes me think maybe it should be <code>reinterpret</code> or something...</p>",
        "id": 215502722,
        "sender_full_name": "scottmcm",
        "timestamp": 1604433383
    },
    {
        "content": "<p><code>Elmut</code> as in Element(al) mutation/transmutation</p>",
        "id": 216813144,
        "sender_full_name": "oliver",
        "timestamp": 1605472933
    }
]