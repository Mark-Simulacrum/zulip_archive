[
    {
        "content": "<p>Rust <em>already</em> has a mechanism for indicating that a field can be safely fiddled with: <em>visibility</em>.</p>\n<p>Rust has a <a href=\"https://doc.rust-lang.org/reference/visibility-and-privacy.html\">really rich visibility grammar</a> for both types and fields. Leveraging this grammar effectively is essential to building safe abstractions. Introducing a trait that <em>also</em> signals field visibility for a type when implemented is at best redundant, and at worst dangerous.</p>\n<p>The visibility rules that govern a <code>Muckable</code> implemenation are counter to the visibility rules that matter for transmutation safety. An implementation of <code>Muckable</code> inherits the visibility of the implemented type. In contrast, the safety of a transmutation depends on the visibility of that type's <em>fields</em>.</p>\n<p>In the everything's-public case, this mismatch isn't important. However, when the visibility of the type doesn't match the fields, it's crucial. Type authors must audit <em>both</em> their field visibility, <em>and</em> the visibility of their implementations of <code>Muckable</code> to ensure safety. Inadvertently leaking a <code>Muckable</code> implementation breaks all encapsulation for that type.</p>",
        "id": 218330313,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606762997
    }
]