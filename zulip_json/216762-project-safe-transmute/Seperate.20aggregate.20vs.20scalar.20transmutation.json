[
    {
        "content": "<p>I'm beginning to think that we need to seperate aggregate and scalar transmutation. Consider a struct like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Foo(u64); //but has an Archetype of u8\nstruct Example { // has a derived Archetype of [u8; 2]\n    a: Foo,\n    b: Foo,\n}\n</code></pre></div>\n\n\n<p>A derive for this would use the Archetype of <code>[u8; 2]</code>, unless I'm reading <a href=\"https://github.com/rust-lang/rfcs/pull/2981#issuecomment-710045236\">this</a> wrong, which makes 0 sense.</p>",
        "id": 213676340,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1602977789
    },
    {
        "content": "<p>FYI, stability archetypes got ripped out of the RFC.</p>",
        "id": 213676731,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1602978294
    },
    {
        "content": "<p>Arghhh that's what I get for not reading closely :p. Is it just Self now?</p>",
        "id": 213676837,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1602978445
    },
    {
        "content": "<p>No, totally gone. (For this sort of reason.) There are a lot of tricky tradeoffs in designing a layout stability system, and no obviously right way.</p>",
        "id": 213676940,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1602978581
    },
    {
        "content": "<p>That's a drastic reduction in API surface area then. I guess the only point of contention is <code>Here!()</code> now...</p>",
        "id": 213679633,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1602982529
    },
    {
        "content": "<p>Yup.</p>",
        "id": 213679640,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1602982559
    }
]