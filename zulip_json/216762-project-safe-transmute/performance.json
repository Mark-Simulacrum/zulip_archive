[
    {
        "content": "<p>One of the <a href=\"https://internals.rust-lang.org/t/pre-rfc-v2-safe-transmute/11431/9?u=rylev\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-v2-safe-transmute/11431/9?u=rylev\">concerns</a> with the current proposal is that it will not be performant enough for many use cases and thus people will be forced to resort back to unsafe transmute instead. </p>\n<p>It does seem like in a large amount of cases the compiler is sufficiently smart enough to boil away the runtime checks through constant folding since most of the checks are <code>const</code>. For example, <a href=\"https://godbolt.org/z/AYjBnD\" target=\"_blank\" title=\"https://godbolt.org/z/AYjBnD\">the compiler is able to boil away all runtime checks</a> between two types that are not trivially related (i.e., transmuting works only because they happen to share the same layout). There is at least <a href=\"https://godbolt.org/z/xYrPGJ\" target=\"_blank\" title=\"https://godbolt.org/z/xYrPGJ\">one case</a> however where not all runtime checks are eliminated despite there actually being no need for them. </p>\n<p>Given this, there might be sufficient reason to reject the current proposal. Not only does the user often have to deal with unwrapping results from casting where it's obvious that the cast cannot fail, but also the compiler cannot always guarantee that unnecessary runtime checks are eliminated. Thoughts and/or questions?</p>",
        "id": 183071224,
        "sender_full_name": "rylev",
        "timestamp": 1575992454
    },
    {
        "content": "<p>This doesn't worry me very much. I'd be curious to see numbers.</p>\n<p>Reasons that it doesn't worry me:</p>\n<ul>\n<li>I think that there will be many times when there is no runtime hit</li>\n<li>I think that there are many, many applications where the runtime hit will be acceptable</li>\n<li>I imagine we could offer an \"unsafe\" extension, where you can use this API most of the time, and sometimes add a bit of unsafe code as a tweak in particular hot spots, and it still offers you more structure than a plain transmute</li>\n</ul>\n<p>However, it seems like the first two arguments are ones that are best made with experience and examples.</p>\n<p>I guess I also hope that we will be able to grow the language to address things like the UB  that can result from uninitialized memory and padding, which I imagine is responsible for a lot of the cases where this API would \"almost\" apply but doesn't quite (is that inaccurate?).</p>",
        "id": 183073175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575993680
    },
    {
        "content": "<p>The counter argument to that is that if performance is not of utmost concern to you, why not just copy? I would imagine that those who want to use this API would like for it to have the same runtime characteristics as <code>std::mem::transmute</code> with the addition of runtime checks when those checks would be necessary in the unsafe code. I think this is a perfect example of a \"zero-cost abstraction\". Ideally there would be no better way to write this by hand using <code>std::mem::transmute</code>. There is definitely a way for us to have an API that does not require runtime checks unless completely necessary. The only question is can we make it nice to use. </p>\n<p>The pre-RFC in its current form doesn't really _directly_ address uninitialized memory or padding, it just ensures that the user does not accidentally transmute to or from memory that would cause UB.</p>",
        "id": 183073853,
        "sender_full_name": "rylev",
        "timestamp": 1575994079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> I guess it depends on the scope too =)</p>\n<p>I'm assuming that there might be something like <code>Vec&lt;T&gt; =&gt; Vec&lt;U&gt;</code> conversions, which seems very powerful</p>",
        "id": 183075860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575995385
    },
    {
        "content": "<p>It's both powerful and also fairly easy. Crates already exist that can do it (though I cannot guarantee they do it with 0 overhead).</p>",
        "id": 183096777,
        "sender_full_name": "Lokathor",
        "timestamp": 1576008363
    },
    {
        "content": "<p>My crate vec-utils maps from <code>Vec&lt;T0&gt;</code>, <code>Vec&lt;T1&gt;</code>, <code>Vec&lt;T2&gt;</code>, ... to <code>Vec&lt;U&gt;</code> (when given a mapping function) which reuses the largest valid allocation and also provides the functionality to reuse the allocation of a <code>Vec</code> with 0 extra cost (sound <code>Vec</code> transmute).</p>",
        "id": 183100382,
        "sender_full_name": "Yato",
        "timestamp": 1576010703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> In the godbolt you linked, <code>example</code> and <code>beispiel</code> are identical. If you simply replace the body of <code>example2</code> and <code>beispiel2</code> with calls to <code>example</code> and <code>beispiel</code> then the \"2\" functions will also end up with identical code. You can also remove a jump from the <code>example2</code> that you posted by replacing the <code>panic!(\"This can't happen\")</code> with <code>unreachable!</code>.</p>\n<p>Basically the optimizer is (and always will be) a quirky beast, but I don't think that means that the design itself has any inherent flaws.</p>",
        "id": 183100407,
        "sender_full_name": "Lokathor",
        "timestamp": 1576010711
    },
    {
        "content": "<blockquote>\n<p>There is at least <a href=\"https://godbolt.org/z/xYrPGJ\" target=\"_blank\" title=\"https://godbolt.org/z/xYrPGJ\">one case</a> however where not all runtime checks are eliminated despite there actually being no need for them. </p>\n</blockquote>\n<p>In this case, the only runtime check that isn't eliminated is the check to see if the value is <code>&gt; 1</code>.  This happens because rustc only communicates the <code>&lt;= 1</code> assumption to LLVM when <em>loading</em> from a bool-typed reference, whereas in your example the load doesn't happen until after the conversion.</p>",
        "id": 183119792,
        "sender_full_name": "comex",
        "timestamp": 1576027579
    },
    {
        "content": "<p>But that seems like an edge case.  The only time that the <code>&gt; 1</code> check would be redundant is when converting from <code>bool</code> to <code>bool</code>, as in your example, but (a) that's useless, (b) to handle situations where it might come up in generic code, the standard library could add a specialization to skip the checks when the source and target types are the same.</p>",
        "id": 183119826,
        "sender_full_name": "comex",
        "timestamp": 1576027679
    },
    {
        "content": "<p>That said, I also think that the idea of an overridable trait method that validates the slice data (i.e. <code>from_bytes</code>) is not super useful as a whole.  What is it useful for other than <code>&amp;[bool]</code>?</p>",
        "id": 183120013,
        "sender_full_name": "comex",
        "timestamp": 1576027881
    },
    {
        "content": "<p>The case where source and target type have the same invariants <em>does</em> matter. It doesn't only happen when the types are identical (which is indeed a corner case and can be optimized transparently by specialization) but also whenever newtypes are involved. Being able to safely type-pun in those cases without performance overhead would be a great enabler for more type-safe abstractions (vs the status quo of needing to copy potentially large amounts of memory or needing <code>unsafe</code>). And libstd can't specialize those cases to skip validation as they involve downstream types and user-defined invariants.</p>\n<p>Taking this consideration to the logical extreme probably leads to a design where \"validate whether these bytes are OK for that type\" is not the central operation (maybe one that happens occasionally at system boundaries). I'm not saying such a design should be adopted (don't have to solve every use case at once) but there are use cases for such conversions.</p>",
        "id": 183139126,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576055813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> <span class=\"user-mention\" data-user-id=\"198590\">@comex</span> I don't believe this is an edge case. This also applies to other conversions (e.g., numbers to c-style enums). I will spend some more time thinking of examples to look over. In any case, given the performance oriented nature of this feature, I think it's important that we try to eliminate performance foot-guns. The code as it reads right now does not make it obvious that runtime checks will not be performed in many cases _and_ it certainly does not make it obvious where the compiler can eliminate all runtime checks and where it cannot. Ideally <code>bool_new_type.cast::&lt;bool&gt;()</code> would not return a <code>Result</code> and would be guaranteed to not perform any runtime checks.</p>",
        "id": 183142417,
        "sender_full_name": "rylev",
        "timestamp": 1576058820
    },
    {
        "content": "<p>For posterity here's a non-trivial example of Rust doing the right thing with regards to eliminating unnecessary runtime checks (only bool is checked when it has to be): <a href=\"https://godbolt.org/z/4M3dGp\" target=\"_blank\" title=\"https://godbolt.org/z/4M3dGp\">https://godbolt.org/z/4M3dGp</a></p>",
        "id": 183143711,
        "sender_full_name": "rylev",
        "timestamp": 1576060056
    },
    {
        "content": "<p>And here's an example where two structs are structurally identical to each other and should therefore be directly transmutable to and from each other but Rust is not smart enough to see that and so it inserts unnecessary runtime checks: <a href=\"https://godbolt.org/z/evPTtK\" target=\"_blank\" title=\"https://godbolt.org/z/evPTtK\">https://godbolt.org/z/evPTtK</a></p>",
        "id": 183144203,
        "sender_full_name": "rylev",
        "timestamp": 1576060497
    },
    {
        "content": "<blockquote>\n<p>For posterity here's a non-trivial example of Rust doing the right thing with regards to eliminating unnecessary runtime checks (only bool is checked when it has to be): <a href=\"https://godbolt.org/z/4M3dGp\" target=\"_blank\" title=\"https://godbolt.org/z/4M3dGp\">https://godbolt.org/z/4M3dGp</a></p>\n</blockquote>\n<p>I'm not sure what this example is supposed to illustrate. The B -&gt; A direction goes through a <em>manual</em> impl that does nothing but check the bool (so there's nothing to optimize out in those examples), while the B -&gt; A direction only has size and align checks to optimize out and it's not news that those can be optimized out very well. The more interesting case would be if (1) B also had a bool field in the same place, and (2) the impls were more mechanical, closer to how they would actually be generated by rustc/derives. In particular note that the <code>impl FromBytes for A</code> is missing size and alignment checks and hard-codes the knowledge that fields <code>a</code> and <code>c</code> are <code>FromAnyBytes</code>.</p>",
        "id": 183144651,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576060881
    },
    {
        "content": "<p>It was just meant to be the same example as we’ve seen before just in a non-trivial case to show that the compiler can easily see through aggregate types. If that’s obvious to you than there’s no need to look at it.</p>",
        "id": 183147668,
        "sender_full_name": "rylev",
        "timestamp": 1576063390
    },
    {
        "content": "<p>I’ll fix the second example. I don’t expect it to change anything.</p>",
        "id": 183147704,
        "sender_full_name": "rylev",
        "timestamp": 1576063435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> can you explain what you mean by “more mechanical “?</p>",
        "id": 183147757,
        "sender_full_name": "rylev",
        "timestamp": 1576063461
    },
    {
        "content": "<p>I would expect from the pre-RFCs that the impls for aggregates that require some validation would be auto-generated by straight-forwardly composing calls to validate each field in turn. The impl in your example, on the other hand, looks like a lot of thought was put into identifying the least amount of work to do, from only considering some fields to manually computing the offset of each field to inlining the validity check for it. Even if some compiler magic is used to ensure e.g. absence of padding for <code>ToBytes</code> types, I don't think we should work under the assumption that the generation of the trait impls happens late enough in the compiler to be able to modify its behavior based on e.g. whether field types are <code>FromAnyBytes</code> or use layout computation results.</p>",
        "id": 183148375,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576064011
    },
    {
        "content": "<p>I believe that's a limitation of the current proposal that was meant to be addressed by <a href=\"https://internals.rust-lang.org/t/pre-rfc-v2-safe-transmute/11431/2\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/pre-rfc-v2-safe-transmute/11431/2\">what Josh posted</a> (and what you, <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> helped with I believe). Without that addendum, I believe each <code>from_bytes</code> implementation would need to be generated separately. How that would be done is not specified in the proposal so far. This add more support for the need for a separate validation function IMO.</p>",
        "id": 183152115,
        "sender_full_name": "rylev",
        "timestamp": 1576067772
    },
    {
        "content": "<p>FWIW I think it would be interesting to see if just doing the conversion for each field and checking if it succeeds (like the first option in Josh's post) does optimize well. But separate validation has other advantages so maybe it's not worth the trouble.</p>",
        "id": 183156329,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576071076
    },
    {
        "content": "<p>The example I posted above is incorrect because the <code>A</code> struct has padding (a fact I didn't recognize at first and a good reminder of why this RFC is needed). It would not implement ToBytes and thus cannot be used to cast from. I'll change that</p>",
        "id": 183157198,
        "sender_full_name": "rylev",
        "timestamp": 1576071678
    },
    {
        "content": "<p>This should be a correct version: <a href=\"https://godbolt.org/z/3fZwMQ\" target=\"_blank\" title=\"https://godbolt.org/z/3fZwMQ\">https://godbolt.org/z/3fZwMQ</a> This shows that there is a runtime cost to casting between types that require validation even when the validation is the same between those types and a sufficiently smart compiler could remove those checks.</p>",
        "id": 183157711,
        "sender_full_name": "rylev",
        "timestamp": 1576072005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I will try the per field validation and see what happens.</p>",
        "id": 183157777,
        "sender_full_name": "rylev",
        "timestamp": 1576072053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> looks like doing validation per field optimizes away: <a href=\"https://godbolt.org/z/4uG-mY\" target=\"_blank\" title=\"https://godbolt.org/z/4uG-mY\">https://godbolt.org/z/4uG-mY</a></p>",
        "id": 183158766,
        "sender_full_name": "rylev",
        "timestamp": 1576072728
    },
    {
        "content": "<p>So far the only runtime cost you seem to pay above what could be written by hand is when two types require validation and they are structurally equal.</p>",
        "id": 183158950,
        "sender_full_name": "rylev",
        "timestamp": 1576072832
    },
    {
        "content": "<p>That makes sense and I would expect it to generalize. When the <code>to_bytes</code> + <code>from_bytes</code> pair is fully inlined (necessary for low overhead anyway) then for the <code>from_bytes</code> code all the sizes being compared are constants and the alignment checks are all on constant offsets from the source reference (whose ABI alignment is usually known) and thus amendable to peephole arithmetic simplifications that LLVM is good at.</p>\n<p>That just leaves the bitstring validation. I don't think it's realistic to expect that to be optimized away, so <em>if</em> the costs of redundant validation matter then some deeper redesign of the traits is probably required.</p>",
        "id": 183177754,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576083958
    },
    {
        "content": "<p>Honestly, I wouldn't have otherwise expected that types with any special bit pattern requirements would be valid<em>at all</em> for using with a safe transmute.</p>\n<p>I would also compare this to <code>get_unchecked</code> instead of <code>index</code>. Indexing isn't <em>really</em> free, but you <em>can</em> bypass the safety regulations if you want extra speed in some contexts, and then it's your fault if you do it wrong.</p>",
        "id": 183181425,
        "sender_full_name": "Lokathor",
        "timestamp": 1576086254
    },
    {
        "content": "<p>Is the right thing to do to suggest people model their types different (e.g., booleans as u8), if they don't want runtime checks at all? I think it's a valid question to ask if we should support types that have special validation requirements at all, but it feels like the right thing to do - The performance hit is not so great that it represents a potential performance cliff that people could accidentally run off it.  </p>\n<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> one thing  I'm not sure about is that in most relevant use cases if the length and alignment will be known. zerocopy has a <a href=\"https://docs.rs/zerocopy/0.2.8/zerocopy/struct.LayoutVerified.html\" target=\"_blank\" title=\"https://docs.rs/zerocopy/0.2.8/zerocopy/struct.LayoutVerified.html\">length and alginment verified slice</a> which allows them to skip those checks once they've been performed. For type to type casting, I believe inlining should always make that obvious to LLVM, but I can imagine some scenarios where it might be harder for rustc/LLVM to know. For instance, when reading from different parts of a buffer. Requiring this makes the API much more complex though...</p>",
        "id": 183183804,
        "sender_full_name": "rylev",
        "timestamp": 1576087721
    },
    {
        "content": "<p>Good point, I was only thinking about the type casting use case. In the general case I don't expect <code>from_bytes</code> with full (size+align+...) validation per field will be optimized so well, since that requires propagating information from branch conditions into the downstream code, which LLVM isn't good at.</p>",
        "id": 183184556,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576088207
    },
    {
        "content": "<p>I'll try to make a worse case scenario test case.</p>",
        "id": 183187047,
        "sender_full_name": "rylev",
        "timestamp": 1576089853
    },
    {
        "content": "<blockquote>\n<p>I don't believe this is an edge case. This also applies to other conversions (e.g., numbers to c-style enums).</p>\n</blockquote>\n<p>For numbers to C-style enums, though, you usually <em>need</em> a runtime check, just like numbers to bools.  So not optimizing it out wouldn't be a problem.</p>",
        "id": 183211918,
        "sender_full_name": "comex",
        "timestamp": 1576105743
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span>'s mention of newtypes is more convincing.</p>",
        "id": 183212061,
        "sender_full_name": "comex",
        "timestamp": 1576105849
    },
    {
        "content": "<p>I'm definitely interested in changing the API to not just be about bytes.</p>",
        "id": 183212119,
        "sender_full_name": "comex",
        "timestamp": 1576105899
    },
    {
        "content": "<p>To quote myself from the Discourse thread about a possible alternative:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CastSliceTo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cast_slice</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">TransmuteError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The name isn't the best, but basically <code>T: FromAnyBytes</code> would be equivalent to <code>u8: CastSliceTo&lt;T&gt;</code>, and <code>T: ToBytes</code> would be equivalent to <code>T: CastSliceTo&lt;u8&gt;</code>.</p>\n</blockquote>",
        "id": 183212237,
        "sender_full_name": "comex",
        "timestamp": 1576105994
    },
    {
        "content": "<p>But really there should probably be infallible and fallible variants.</p>",
        "id": 183212257,
        "sender_full_name": "comex",
        "timestamp": 1576106025
    },
    {
        "content": "<p>Then you could imagine that a <code>#[repr(transparent)]</code> struct could somehow derive the impls  to infallibly cast between it and its base type.  (Not sure what the syntax would be; it would need to produce two separate impls since the trait would be directional.  It needs to be directional since e.g. it's  safe to cast from [u8] to [Struct] but not vice versa if there's padding.)</p>",
        "id": 183212644,
        "sender_full_name": "comex",
        "timestamp": 1576106278
    },
    {
        "content": "<blockquote>\n<p>zerocopy has a <a href=\"https://docs.rs/zerocopy/0.2.8/zerocopy/struct.LayoutVerified.html\" target=\"_blank\" title=\"https://docs.rs/zerocopy/0.2.8/zerocopy/struct.LayoutVerified.html\">length and alginment verified slice</a> which allows them to skip those checks once they've been performed.</p>\n</blockquote>\n<p>Interesting.  I like this design.</p>",
        "id": 183212830,
        "sender_full_name": "comex",
        "timestamp": 1576106445
    },
    {
        "content": "<p>Regarding the C-style enums: One thing that a friend is demoing into <code>bytemuck</code> (hope to have something to show soon!) is the concept of a \"ContiguousEnum\", which you often see in both Rust and C. It's some integer values that are all named, with a <code>min..=max</code> range that's valid where all value in that range are used, and all <em>other</em> integer values are simply invalid. In this specific subcase, if you have a raw value you can get it into the enum type with a check that it's in range and then a transmute. You don't have to match on the value with 6 cases or 20 cases or however many (which LLVM will sometimes do right, but usually not handle well).</p>\n<p>I think a lot of the transmutations might be of the general form, \"how many claims can we make about this type? the most we know the faster we can make the conversion.\" This might seem obvious of course, but I think that we should keep in mind that something <em>like</em> a specialization mechanism might make a big difference here when the compiler is doing all these generations of conversions. If we can do that it's good because we can jump on a chance to make code faster, but also it can lead to those accidental performance cliffs that Ryan mentioned if it's not obvious to the user that a seemingly small change to a struct (like adding a <code>bool</code>) will silently give them a different derived impl.</p>\n<p>Incidentally, is the latest version of any proposal still the discourse thread? Perhaps we should open an issue or PR or similar in the new repo now that it's created.</p>",
        "id": 183228568,
        "sender_full_name": "Lokathor",
        "timestamp": 1576125937
    },
    {
        "content": "<blockquote>\n<p>For numbers to C-style enums, though, you usually need a runtime check, just like numbers to bools. So not optimizing it out wouldn't be a problem.</p>\n</blockquote>\n<p>A runtime check is not needed when converting between two types that require validation where both types only have values that are valid for the other type. For instance between <code>bool</code> and <code>#[repr(u8)] enum Foo { Bar, Baz }</code> . Rust is not capable of eliminating that unnecessary runtime check.</p>",
        "id": 183258463,
        "sender_full_name": "rylev",
        "timestamp": 1576157576
    },
    {
        "content": "<blockquote>\n<p>To quote myself from the Discourse thread about a possible alternative:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">CastSliceTo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">cast_slice</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">TransmuteError</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n</blockquote>\n<p>How would you represent <code>&amp;mut [Self]</code> to <code>&amp;mut [T]</code> conversions?</p>\n<p>Also, this proposal requires all pairs of convertible types to be matched together. That requires a lot impls. Would this have a negative impact on compiler performance? <br>\nAlso, what happens if you want to cast between a type not in your crate and some type in our crate? I don't believe this is possible because of orphan rules.</p>",
        "id": 183258827,
        "sender_full_name": "rylev",
        "timestamp": 1576157854
    },
    {
        "content": "<blockquote>\n<p>Incidentally, is the latest version of any proposal still the discourse thread? Perhaps we should open an issue or PR or similar in the new repo now that it's created.</p>\n</blockquote>\n<p>Yes it is, I need to work on updating it a bit with some of the things we've learned since then.</p>",
        "id": 183258973,
        "sender_full_name": "rylev",
        "timestamp": 1576157963
    },
    {
        "content": "<p>I'm going to remove safe unions from the initial proposal (though I will mention them as a likely future addition in a follow up RFC). Any objections? cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 183265456,
        "sender_full_name": "rylev",
        "timestamp": 1576162077
    },
    {
        "content": "<p>No objection.</p>",
        "id": 183270594,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576165105
    },
    {
        "content": "<p>Also, the discourse thread is not quite the latest, as we have some additional improvements.</p>",
        "id": 183270717,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1576165165
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> we do have additional improvements but those are only captured in comments, the discourse thread is the latest formal full write up. I'm working on making a new version with the additional improvements.</p>",
        "id": 183270846,
        "sender_full_name": "rylev",
        "timestamp": 1576165229
    },
    {
        "content": "<blockquote>\n<p>Also, this proposal requires all pairs of convertible types to be matched together. That requires a lot impls. Would this have a negative impact on compiler performance? </p>\n</blockquote>\n<p>Yes. I think a constraint on a solution to this problem is not having this issue.</p>",
        "id": 183353105,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576239188
    },
    {
        "content": "<p>Alternative proposals like the <code>Compatible&lt;T&gt;</code> RFC do not have this problem.</p>",
        "id": 183353125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576239225
    },
    {
        "content": "<blockquote>\n<p>Also, what happens if you want to cast between a type not in your crate and some type in our crate? I don't believe this is possible because of orphan rules.</p>\n</blockquote>\n<p>I think not having this issue should also be a constrain on the solution.</p>",
        "id": 183353201,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576239278
    },
    {
        "content": "<p>Since this is a performance-oriented feature, I think that guaranteed no-runtime overhead should also be a constraint.</p>",
        "id": 183353257,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576239340
    },
    {
        "content": "<p>If a runtime over-head is acceptable, then there are arguably many alternatives to solving this problem, some of which do not require any unsafe code or trait impls at all.</p>",
        "id": 183353354,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576239413
    },
    {
        "content": "<blockquote>\n<p>Alternative proposals like the <code>Compatible&lt;T&gt;</code> RFC do not have this problem.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> Why would <code>Compatible&lt;T&gt;</code> not have this issue as well? You also need a trait impl for every type pair that can be converted between (i.e., if type the user wants to convert between type <code>A</code> and type <code>B</code> there must be a <code>impl Compatible&lt;B&gt; for A</code>. I would also imagine this quickly gets out of hand. Also, as far as I understand it, it has the same issues with the orphan rule as the other proposal.</p>",
        "id": 183354116,
        "sender_full_name": "rylev",
        "timestamp": 1576240137
    },
    {
        "content": "<blockquote>\n<p>@gnzlbg Why would Compatible&lt;T&gt; not have this issue as well? </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span>  That's explained in the <code>Compatible&lt;T&gt;</code> RFC: <a href=\"https://gist.github.com/gnzlbg/4ee5a49cc3053d8d20fddb04bc546000\" target=\"_blank\" title=\"https://gist.github.com/gnzlbg/4ee5a49cc3053d8d20fddb04bc546000\">https://gist.github.com/gnzlbg/4ee5a49cc3053d8d20fddb04bc546000</a></p>",
        "id": 183354745,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576240652
    },
    {
        "content": "<blockquote>\n<p>A trait bound of the form T: Compatible&lt;U&gt; is \"satisfied\" iff given any T: Compatible&lt;U0&gt; there is a type sequence [U_0, U_1, ..., U_N] such that for i in range [1, N) the query U_{i}: Compatible&lt;U_{i+1}&gt; is satisfied and there is a impl of Compatible&lt;U&gt; for U_N. Notice that multiple such sequences could exist, but it suffices that one exists for the query to be satisfied.</p>\n</blockquote>",
        "id": 183354762,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576240674
    },
    {
        "content": "<p>Notice that for <code>Compatible&lt;T&gt;</code> it doesn't matter which conversion sequence is picked since they are all zero-overhead. However, for <code>TryCompatible</code>,  the RFC does not provide this guarantee and requires the user to pick a conversion sequence.</p>",
        "id": 183354951,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576240821
    },
    {
        "content": "<p>We could try to be cleverer for <code>TryCompatible</code>, and pick one of the shortest sequences, but I'm wary of doing that.</p>",
        "id": 183355041,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576240901
    }
]