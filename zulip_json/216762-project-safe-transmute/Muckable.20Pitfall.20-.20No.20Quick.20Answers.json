[
    {
        "content": "<p>The foundation API can be used to <em>very quickly</em> audit/improve the safety of unsafe code. For instance, I can ensure all of the transmutations in my module are safe by simply replacing <code>mem::transmute</code> invocations with invocations of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"cp\">$expr</span>: <span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Here</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">TransmuteFrom</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Here</span><span class=\"o\">&gt;</span>::<span class=\"n\">transmute_from</span><span class=\"p\">(</span><span class=\"cp\">$expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><em>Without</em> the foundational API—and <em>only</em> having the <code>Muckable</code> abstraction—this isn't possible. The <code>Muckable</code>-based abstraction requires carefully-considered <code>Muckable</code> trait implementations on all involved types. Realizing these implementations correctly might require refactoring these types and anything that touches their fields. (Doing so might <em>introduce</em> unsafety.) At worst, the newtype hack might be simply inapplicable (more on this in a future topic), and the problem is intractable. </p>\n<p>Again: the right thing to do should be the easy thing to do.</p>",
        "id": 218332628,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606764094
    },
    {
        "content": "<p>This matters beyond <code>mem::transmute</code>. For instance, I'd really like to experiment with safe union accesses next. With the scope-aware foundational API, I can prototype safe union accesses as an automatic, local program transformation. </p>\n<p>Without it, I'd need to automatically generate sound <code>Muckable</code> impls non-locally, which probably isn't tractable.</p>",
        "id": 218334562,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606764952
    },
    {
        "content": "<p>While thinking about <code>Scope</code>, one thing is that it allows you to easily ignore invariants.  For example:</p>\n<div class=\"codehilite\"><pre><span></span><code>//inside say mod.rs\n\n// must be negative\nstruct Foo {\na: i32\n}\n</code></pre></div>\n<p>Even though unsafe fields have been rejected because unsafety taints everything that is visible, I don't know if conflating identical structs is something we necessarily want. Casting a <code>[u8; 4]</code> to <code>Foo</code>  is very likely not what you want to do. Now under the strict <code>unsafe taints a whole module</code> rules that argued against unsafe fields - this API is sound. But I don't think its very helpful to be able for reasoning. </p>\n<p>I myself don't see a problem with this given that unsafe fields are basically dead, but I do bemoan the rule where unsafe code can be a safe <code>fn</code> if its inside a module.</p>",
        "id": 218621825,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1606944270
    },
    {
        "content": "<p>It allows you to ignore invariants to the same extent that direct field access does. This can lead to pitfalls, but it's also genuinely useful. Whether you want to cast a <code>[u8;4]</code> to <code>Foo</code> depends hugely on why you're doing it! Are you writing deserialization code for your trait? Initializing a temporary invalid value that you'll soon overwrite? (If you're diligent about checking invariants, your temporary default value perhaps <em>should</em> be invalid so your <code>debug_assert</code>s catch if you don't overwrite it!)</p>",
        "id": 218622322,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606944523
    },
    {
        "content": "<p>Ultimately, I'd like to provide an API that can quickly be integrated into existing, real-world code that follows the standard-albeit-coarse rules of safety.</p>",
        "id": 218622514,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606944627
    }
]