[
    {
        "content": "<p>With a recent PR implementing lazy normalization, const-generics can now be used to conditionally implement traits based on a type's layout — no type level programming necessary! Here's an <code>Unaligned</code> trait implemented in like 14 lines of code (excluding whitespace):</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;edition=2018&amp;gist=1998e7fcbaf996e644f41f1d6ed5e462\">https://play.rust-lang.org/?version=nightly&amp;edition=2018&amp;gist=1998e7fcbaf996e644f41f1d6ed5e462</a></p>",
        "id": 198793972,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1590513713
    },
    {
        "content": "<p>Oh wow! That's awesome! Let me know if you want help experimenting with implementing Typic using this. I imagine we'll still run into many issues...</p>",
        "id": 198794181,
        "sender_full_name": "rylev",
        "timestamp": 1590513820
    },
    {
        "content": "<p>Yeah, I have no idea whether this level of expressivity is even intended...</p>",
        "id": 198794518,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1590513976
    },
    {
        "content": "<p>this is on the same level of readability as C++ template programming... :/</p>",
        "id": 199172512,
        "sender_full_name": "RalfJ",
        "timestamp": 1590767196
    },
    {
        "content": "<p>I hope we can avoid Rust becoming as unreadable as the C++ STL types</p>",
        "id": 199172556,
        "sender_full_name": "RalfJ",
        "timestamp": 1590767213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> It's nowhere near as bad as <a href=\"https://github.com/jswrenn/typic/blob/6c77444b8732d6a6bd7f8f85538085add98c02ba/typic/src/private/layout/into_bytelevel/field.rs#L16-L43\">*actual* type-level programming</a>, IMO, which has viral awfulness.</p>\n<p>That trick of implementing a trait on things matching a <code>const fn</code> predicate has a constant seven line cost—regardless of how complicated the predicate is. The only public facing aspect of it, the <code>Unaligned</code> trait, doesn't require any knowledge of advanced type system stuff to use, too.</p>\n<p>From a notational perspective, it'd be great to _not_ have to create that intermediate <code>IsUnaligned</code> trait to check for equality. The 'distilled' version of that example might look something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Unaligned</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Unaligned</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"p\">{</span><span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199183700,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1590772357
    },
    {
        "content": "<blockquote>\n<p>That trick of implementing a trait on things matching a const fn predicate has a constant seven line cost—regardless of how complicated the predicate is. </p>\n</blockquote>\n<p>Hm, could this be abstracted somehow (worst-case with a macro)?</p>",
        "id": 199186211,
        "sender_full_name": "RalfJ",
        "timestamp": 1590773715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> This feels like an improvement: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=70f5106f33879e945b010a08e0be9606\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=70f5106f33879e945b010a08e0be9606</a></p>",
        "id": 199200787,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1590780556
    },
    {
        "content": "<p>A sketch of what implementing <code>TransmuteFrom</code> might look like with const generics: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=436731b0cb6bb6d52febe2c1cd6b78cf\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=436731b0cb6bb6d52febe2c1cd6b78cf</a></p>\n<p>Unfortunately, the layout computation would still need to be written with trait logic, since <code>const fn</code>s can't allocate.</p>",
        "id": 199209490,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1590784951
    },
    {
        "content": "<p>small point of order: Unaligned should be an unsafe trait</p>",
        "id": 199211418,
        "sender_full_name": "Lokathor",
        "timestamp": 1590786027
    },
    {
        "content": "<p>(Also TransmuteFrom and so on)</p>",
        "id": 199211740,
        "sender_full_name": "Lokathor",
        "timestamp": 1590786215
    },
    {
        "content": "<p>In general this seems like a shockingly clean way to do things, but as always with generics I'm worried about clean build time and incrimental build time</p>",
        "id": 199211871,
        "sender_full_name": "Lokathor",
        "timestamp": 1590786280
    },
    {
        "content": "<p>From the perspective of deduplicating computation, it would be a big improvement over typic! In order to produce <code>align_of::&lt;T&gt;()</code> in a const context, <code>rustc</code> has already (I presume) computed the layout of <code>T</code>. If rust exposed a little more of that machinery (e.g., a <code>const fn layout_of&lt;T&gt;()</code> intrinsic), then typic wouldn't need to maintain and run its own parallel implementation of the layout algorithm.</p>",
        "id": 199219509,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1590790808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/const-generics/near/199200787\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> This feels like an improvement: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=70f5106f33879e945b010a08e0be9606\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=70f5106f33879e945b010a08e0be9606</a></p>\n</blockquote>\n<p><code>Predicate: Satisfied</code> has a nice ring to it, yeah :D</p>",
        "id": 199244190,
        "sender_full_name": "RalfJ",
        "timestamp": 1590824556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/const-generics/near/199209490\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, the layout computation would still need to be written with trait logic, since <code>const fn</code>s can't allocate.</p>\n</blockquote>\n<p>This doesn't seem _necessary_ to me. In the case of sized struct the representation of it's <code>Validity</code> slice has a statically known length and independent of the content, as given by its size and the validity representation of its fields. Similar the representation of an enum aggregates the representations of its variants. So wouldn't mutation in const-fn suffice to implement this in an algorithm, by using two levels of const-evaluation as has been a common practice in C++ already (for example to parse json at compile time into an _array_ <a href=\"https://github.com/CppCon/CppCon2017/raw/master/Presentations/constexpr%20ALL%20the%20things/constexpr%20ALL%20the%20things%20-%20Jason%20Turner%20and%20Ben%20Deane%20-%20CppCon%202017.pdf\">slides</a>)?</p>",
        "id": 199259832,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1590849812
    },
    {
        "content": "<p>I suppose you're right! But Typic uses an optimized representation for repeating sequences of byte validities (namely, for arrays). So, it's not quite as simple as <code>[Validity; size_of::&lt;T&gt;()]</code>.</p>",
        "id": 199262844,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1590853734
    }
]