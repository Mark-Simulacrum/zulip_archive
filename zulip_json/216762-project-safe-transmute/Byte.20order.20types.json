[
    {
        "content": "<p>I would like to use transmute to vivify a file data structure, but even after setting repr(C) and avoiding padding, one issue that prevents the approach from working portably is byte order. I currently use the <code>byteorder</code> crate to make deserialization easy, but a more declarative way to do the same thing would be to have a type like <code>BigEndian&lt;u32&gt;</code> which prevents the possibility of misinterpreting the data as native endian and provides explicit conversion routines to the usual types.</p>\n<p>In related work I can only find the <a href=\"https://docs.rs/endian-types/0.0.0/endian_types/\"><code>endian_types</code></a> crate which seems to have very little traction in the community. Are there any thoughts on such an interface?</p>",
        "id": 211425496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227060
    },
    {
        "content": "<p>I would love to have endian wrappers for types, and aliases like <code>be32</code> and <code>le16</code> for the common types.</p>",
        "id": 211425732,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227374
    },
    {
        "content": "<p>And, ideally, Into/From impls.</p>",
        "id": 211425748,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227404
    },
    {
        "content": "<p>Part of the issue would be how to handle such types within a larger data structure.</p>",
        "id": 211425803,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227464
    },
    {
        "content": "<p>Should it be <code>BE&lt;SomeStruct&gt;</code> or <code>SomeStruct&lt;BE&gt;</code>?</p>",
        "id": 211425838,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227517
    },
    {
        "content": "<p>In the former case, how do you make sure the fields get swapped properly?</p>",
        "id": 211425853,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227540
    },
    {
        "content": "<p>I think parameterizing all types on BE sounds like a bad idea</p>",
        "id": 211425854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227546
    },
    {
        "content": "<p>In the latter case, you have to do manual work on every type. Yes, exactly.</p>",
        "id": 211425860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227561
    },
    {
        "content": "<p>and also it might not make sense to have \"the same\" type over different endiannesses</p>",
        "id": 211425899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227568
    },
    {
        "content": "<p>i think <code>BigEndian&lt;u32&gt;</code> is the better answer here, and you can get \"read\" and \"write\" methods like it's a weird cell, and they'll convert as necessary automatically.</p>",
        "id": 211425916,
        "sender_full_name": "Lokathor",
        "timestamp": 1601227603
    },
    {
        "content": "<p>the endian_types crate actually uses <code>Endian&lt;u32, BE&gt;</code>, so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 211425918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Then how do you handle <code>BE&lt;SomeStruct&gt;</code>?</p>",
        "id": 211425936,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227641
    },
    {
        "content": "<p>Personally I would rather impose the BE condition at the leaves</p>",
        "id": 211425965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227684
    },
    {
        "content": "<p>The endianness needs to get propagated to the fields.</p>",
        "id": 211425989,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601227688
    },
    {
        "content": "<p>i.e. your struct consists of <code>be32</code> and <code>be64</code> fields</p>",
        "id": 211426000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227706
    },
    {
        "content": "<p>I've never had a use case where that's come up so I don't quite understand the motivation. When working with, say, a PNG header, it's quite sufficient to say that a given field in the header is <code>BE&lt;u32&gt;</code> and not that the entire struct is. I think that BE/LE should <em>only</em> be used around primitive number values.</p>",
        "id": 211426003,
        "sender_full_name": "Lokathor",
        "timestamp": 1601227722
    },
    {
        "content": "<p>I can imagine it might be convenient to just say it once at the top level but it also sounds a little magic and could be a footgun</p>",
        "id": 211426088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227823
    },
    {
        "content": "<p>so probably you should do that with a macro</p>",
        "id": 211426092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601227833
    },
    {
        "content": "<p>something like <code>Endian&lt;u32, BE&gt;</code> sounds almost like what i'd want to use anyway, just that i'd be willing to accept twice as many types if it means half as many generics i write down.</p>",
        "id": 211426183,
        "sender_full_name": "Lokathor",
        "timestamp": 1601227958
    },
    {
        "content": "<p>I think it's mostly just an easy way to fill out the matrix though; I don't see a reason to have any more than <code>[le/be][16/32/64]</code></p>",
        "id": 211426213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601228042
    },
    {
        "content": "<p>possibly floats too but I don't know the rules around that</p>",
        "id": 211426254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601228063
    },
    {
        "content": "<p>i think the story there is \"big-endian floats exist, but most big-endian systems are only big-endian for integers, not for floats, and you've got something extra weird when there's big-endian floats too\"</p>",
        "id": 211426267,
        "sender_full_name": "Lokathor",
        "timestamp": 1601228111
    },
    {
        "content": "<p>wait, so the 25 or so bits of mantissa are laid out in adjacent bytes in a little endian way even on big endian machines?</p>",
        "id": 211426317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601228167
    },
    {
        "content": "<p>that's so weird</p>",
        "id": 211426322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601228176
    },
    {
        "content": "<p>that's what i was told, but i could have heard wrong</p>",
        "id": 211426336,
        "sender_full_name": "Lokathor",
        "timestamp": 1601228217
    },
    {
        "content": "<p>wikipedia claims the reverse (also?) exists: little endian integers, big endian floats</p>",
        "id": 211426350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601228266
    },
    {
        "content": "<p>and ARM apparently does 64 bit floats in big endian 32 bit chunks but the chunks are little endian</p>",
        "id": 211426402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601228321
    },
    {
        "content": "<p>anyway, so 3 widths, times 2 signednesses, times 2 endiannesses, not bad, could throw it together easily</p>",
        "id": 211426421,
        "sender_full_name": "Lokathor",
        "timestamp": 1601228389
    },
    {
        "content": "<p>I guess ideally that could get into <code>core</code> some day.</p>",
        "id": 211426472,
        "sender_full_name": "Lokathor",
        "timestamp": 1601228464
    },
    {
        "content": "<p>The main reason I'd be interested in having <code>BE&lt;MyStruct&gt;</code> is that there are some structures which commonly appear in both some-specific-endian and host-endian form, and it'd be helpful to be able to translate the whole structure once (ideally in-place) and then use it. And rather than having a special <code>MyStructBE</code>, I'd like to have a common name for it, and common methods for it.</p>",
        "id": 211430759,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601235155
    },
    {
        "content": "<p>Ah, I've only had to worry about non-native-endian values with file formats</p>",
        "id": 211430841,
        "sender_full_name": "Lokathor",
        "timestamp": 1601235260
    },
    {
        "content": "<p>File formats, network formats, and hardware formats are the most common cases where I run into them.</p>",
        "id": 211432119,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601236954
    },
    {
        "content": "<p>In many cases, I'd like to translate them to native-endian as soon as I get them.</p>",
        "id": 211432128,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601236980
    },
    {
        "content": "<p>If the underlying type is <code>Endian&lt;integer, LE/BE&gt;</code> then you could parameterize your struct on the <code>LE/BE</code> marker if you need to for this kind of thing</p>",
        "id": 211432913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601238180
    },
    {
        "content": "<p>although it would be slightly inconvenient that <code>Endian&lt;u32, NE&gt; != u32</code> assuming another marker for native endianness</p>",
        "id": 211432969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601238251
    },
    {
        "content": "<p>I guess you could use an associated type to make that work?</p>",
        "id": 211432972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601238266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span>, check out the <a href=\"https://docs.rs/zerocopy/0.3.0/zerocopy/byteorder/index.html\">byteorder module of zerocopy</a>! It's the bedrock of Fuchsia's rust-based networking stack.</p>",
        "id": 211496576,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1601301951
    },
    {
        "content": "<p>IMO, that module is such an obvious addition to the <code>byteorder</code> crate that it should up be upstreamed there.</p>",
        "id": 211496851,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1601302068
    },
    {
        "content": "<p>I suspect <span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span> might have something to say about all this, though!</p>",
        "id": 211496934,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1601302101
    }
]