[
    {
        "content": "<p>I've been able to start implementation work in earnest, but could use some mentoring. How do you add a lang item? I've made what I (think) are the necessary modifications to:</p>\n<ul>\n<li><code>compiler/rustc_hir/src/lang_items.rs</code></li>\n<li><code>compiler/rustc_span/src/symbol.rs</code></li>\n</ul>\n<p>...and then added <code>BikeshedTransmutableFrom</code> to <code>library/core/src/mem/mod.rs</code> and annotated it with <code>#[lang = \"transmute_trait\"]</code>.</p>\n<p>Does this sound generally correct?  <code>./x.py check</code> yields:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0522]: definition of an unknown language item: `transmute_trait`\n --&gt; library/core/src/mem/transmutability.rs:3:1\n  |\n3 | #[lang = &quot;transmute_trait&quot;]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ definition of unknown language item `transmute_trait`\n</code></pre></div>\n<p>I'm wondering if there's anything else I need to do, like re-bootstrap the compiler since this change touches both the compiler and libcore?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 244265623,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1624966082
    },
    {
        "content": "<p>Yeah, as you alluded to, the issue is that for the stage0 compiler, the <code>Transmute</code> trait isn't a lang item. What you'll need to do is conditionally apply the lang item attribute if it isn't the stage0 compiler like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg_attr(not(bootstrap), lang = </span><span class=\"s\">\"transmute_trait\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think that is all you'll need to do. Whoever updates the beta compiler next will then remove the condition since it will be required in that version.</p>",
        "id": 244286224,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1624975605
    },
    {
        "content": "<p>If you'd like an example  <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span>, my <code>?</code> PR changed some <a href=\"https://github.com/rust-lang/rust/pull/84767/files#diff-f82976cf19f74035c16523680a66b66ddb6f25220a531a5485b58dada8fb7ccc\">https://github.com/rust-lang/rust/pull/84767/files#diff-f82976cf19f74035c16523680a66b66ddb6f25220a531a5485b58dada8fb7ccc</a> and then the bootstrap update PR later updates the <code>cfg(bootstrap)</code>s <a href=\"https://github.com/rust-lang/rust/pull/86603/files#diff-49412431a58f2ca62539b01666601bb34bcc133f35049a6c6d32c0c1ae891084\">https://github.com/rust-lang/rust/pull/86603/files#diff-49412431a58f2ca62539b01666601bb34bcc133f35049a6c6d32c0c1ae891084</a></p>",
        "id": 244316213,
        "sender_full_name": "scottmcm",
        "timestamp": 1624987202
    },
    {
        "content": "<p>Hi all, I've recently started reading up on the safe transmute project and it sounds like an interesting and useful feature. From what I can gather on the status, it seems like most of the design questions are resolved and mostly what's left is implementation. Is that right? Are there areas in the project that could use help?</p>",
        "id": 245357698,
        "sender_full_name": "eholk",
        "timestamp": 1625771398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> is working on the implementation and I think he expressed that some help would be very welcome!</p>",
        "id": 245376355,
        "sender_full_name": "pachi",
        "timestamp": 1625780674
    },
    {
        "content": "<p>Yep! I <em>think</em> I have a decent idea of what an algorithm for checking transmutability might look like, and I'm at the very early stages of implementation. I'm currently in the midst of a stressful move and job search, but will be increasingly working on this again after August 1.</p>",
        "id": 245384127,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1625786671
    },
    {
        "content": "<p>Sounds good. Good luck on the move and the job search!</p>",
        "id": 245384656,
        "sender_full_name": "eholk",
        "timestamp": 1625787109
    },
    {
        "content": "<p>Do you have any notes anywhere, or is any of your implementation available to look at?</p>",
        "id": 245384769,
        "sender_full_name": "eholk",
        "timestamp": 1625787174
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"421986\">@eholk</span>, sorry for the slow reply; I've been having a painfully hectic summer. I threw some notes together here: <a href=\"https://hackmd.io/@jswrenn/SyqSHb2zu\">https://hackmd.io/@jswrenn/SyqSHb2zu</a></p>\n<p>And have a <em>very</em> nascent development branch here: <a href=\"https://github.com/jswrenn/rust/tree/transmute\">https://github.com/jswrenn/rust/tree/transmute</a></p>",
        "id": 249766865,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629228596
    },
    {
        "content": "<p>In the very near term, I'd like to get to the point where <code>BikeshedIntrinsicFrom</code> is <em>actually</em> hooked into the trait system; e.g., just as a stub that unconditionally returns <code>true</code> and debug prints the involved types. I poked around a bit, but it wasn't immediately apparent to me how to add such a \"is this trait implemented for these types\" hook. (cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>)</p>\n<p>At that point, we can pretty easily start noodling with different algorithmic approaches for transmutability.</p>",
        "id": 249767846,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629228896
    },
    {
        "content": "<p>The algorithms <a href=\"https://hackmd.io/@jswrenn/SyqSHb2zu\">here</a> have a significant limitation: they require the layouts of types to be <em>completely</em> specified. I discuss this limitation at the bottom of the document. It'd be cool to lift it, but probably not a deal breaker. I'd absolutely love to hear ideas for different approaches.</p>",
        "id": 249768254,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629229104
    },
    {
        "content": "<p>Awesome, thanks for the reply! I have some other things I need to look at first, but I'll try to read over your notes soon.</p>",
        "id": 249779249,
        "sender_full_name": "eholk",
        "timestamp": 1629234611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> I <em>think</em> you probably want to look at the <a href=\"https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\">candidate assembly</a> code. Specifically the code around here seems relevant <a href=\"https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L257\">https://github.com/rust-lang/rust/blob/d83da1d05dc75ff3452c068299f40e5d99589d71/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs#L257</a></p>",
        "id": 249783089,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629236733
    },
    {
        "content": "<p>Yeah, that's correct. Those (along with confirmation) basically \"define\" the behavior of builtin trait impls</p>",
        "id": 249793449,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629244577
    },
    {
        "content": "<blockquote>\n<p>It is not well-defined that instances of <code>&amp;'static Foo</code> are bit-valid instances of <code>&amp;'static Bar</code>, where:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C)] struct Foo(i8, [Rust; 0]);\n#[repr(C)] struct Bar(i8);\n</code></pre></div>\n<p>âž¥ The alignment of Foo is not well-specified because the alignment of Rust is not well-specified.</p>\n</blockquote>\n<p>Aren't <code>Foo</code> and <code>Bar</code> swapped here? Whatever the alignment of <code>Rust</code> is, <code>Foo</code>'s alignment will always be a multiple of <code>i8</code>'s alignment, which is the same as <code>Bar</code>'s alignment, so any <code>&amp;'static Foo</code> should be a valid <code>&amp;'static Bar</code> but the opposite may not be true.</p>",
        "id": 249838161,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629287916
    },
    {
        "content": "<p>(from the hackmd)</p>",
        "id": 249838184,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1629287936
    },
    {
        "content": "<p>I do not know if Step 0 is trying to be exhaustive with \"well defined\", if so then it should mention arrays and repr transparent and honestly the non-mask simd types</p>",
        "id": 249878637,
        "sender_full_name": "Lokathor",
        "timestamp": 1629305549
    },
    {
        "content": "<p>also don't forget that Repr(C) actually has varying layout depending on target, <a href=\"https://github.com/rust-lang/rust/issues/81996\">https://github.com/rust-lang/rust/issues/81996</a> so a zero sized type field actually can't be assumed to always contribute zero to the struct size.</p>",
        "id": 249879833,
        "sender_full_name": "Lokathor",
        "timestamp": 1629306055
    },
    {
        "content": "<p>Can't <em>always</em> be assumed.  :-)</p>",
        "id": 249880047,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629306133
    },
    {
        "content": "<p>honestly that particular part of repr(C) is gonna be suuuuuuper hard for T-lang to somehow fix without maybe breaking people's unsafe code. good thing I'm not them</p>",
        "id": 249880372,
        "sender_full_name": "Lokathor",
        "timestamp": 1629306270
    },
    {
        "content": "<p>I imagine the compiler could compute both layouts, and warn or error anytime they differed. But yeah, it's a tricky issue.</p>",
        "id": 249881218,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629306613
    },
    {
        "content": "<p>I honestly don't think breakage will be the primary issue there; cases where the layout differs are likely to be cases where the current layout is unusably incompatible and we can fix it without breaking any code that worked before.</p>",
        "id": 249896751,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629313204
    },
    {
        "content": "<p>It's more that someone needs to step up and champion that issue. I'd love to see someone make a proposal to solve that (e.g. an MCP).</p>",
        "id": 249896870,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629313237
    },
    {
        "content": "<p>That presumes that people only use reprC to be C compatible, which is very definitely not the case.</p>",
        "id": 249897005,
        "sender_full_name": "Lokathor",
        "timestamp": 1629313299
    },
    {
        "content": "<p>No argument there. But the question is, will it result in breakage <em>in practice</em>?</p>",
        "id": 249906309,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629317994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> Regarding the hackmd document: I'd remove the greek lettering from the explanation. I don't know what it means, I don't know how to read it out loud, and I don't know how to type it on my desktop or phone. It ends up inaccessible, a thought flow barrier.</p>",
        "id": 250260016,
        "sender_full_name": "Lokathor",
        "timestamp": 1629616454
    },
    {
        "content": "<p><strong>Update:</strong> Thanks for pointing me to candidate assembly, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> &amp; <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>! </p>\n<p>I <a href=\"https://github.com/jswrenn/rust/blob/8946fd357632caf38fcb673732522a606f53997d/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1559-L1619\">defined a <code>transmute_conditions</code> helper</a> (a la <code>sized_conditions</code>) that punts with <code>Ambiguous</code> until all of the type parameters for the transmutability trait are fully resolved/evaluated, at which point it calls out to a stub predicate <code>is_transmutable</code> and either:</p>\n<ol>\n<li>produces <code>Where(ty::Binder::dummy(Vec::new()))</code> if that predicate is satisfied, or</li>\n<li>produces <code>None</code> if it is not</li>\n</ol>\n<p>At a glance, this seems to work, but please lmk if I'm missing the mark with any of this.</p>\n<p><strong>Question:</strong> Is there a nice way to grab fields out of an evaluated <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_middle/ty/consts/struct.Const.html\"><code>Const</code></a>? The transmutability trait <a href=\"https://github.com/jswrenn/rust/blob/8946fd357632caf38fcb673732522a606f53997d/library/core/src/mem/transmutability.rs#L4-L24\">has a const generic <code>Assume</code> parameter</a>.</p>",
        "id": 250527444,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629829852
    },
    {
        "content": "<p>Quickly looking at <code>transmute_conditions</code>...</p>",
        "id": 250527791,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629830020
    },
    {
        "content": "<p>Just by giving it a quick glance over, looks like a decent start</p>",
        "id": 250528489,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629830309
    },
    {
        "content": "<p>Can't answer much regarding the consts</p>",
        "id": 250528513,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629830319
    },
    {
        "content": "<p>The only comment I have is I'm not sure if it's safe to <code>skip_binder</code> on the obligation</p>",
        "id": 250528593,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629830363
    },
    {
        "content": "<p>Yeah, I wasn't sure about that either. Honestly, I was just copying what <code>sized_conditions</code> does to get the <code>Self</code> type, and doing it to get at the other type parameters, too.</p>",
        "id": 250529254,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629830620
    },
    {
        "content": "<p>For <code>sized_conditions</code>, see the \"// NOTE: binder moved to (*)\"</p>",
        "id": 250529868,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629830843
    },
    {
        "content": "<p>heh, yeah... I'll swap these out for <code>no_bound_vars().unwrap()</code> and figure out what binders are by way of seeing when it panics. :)</p>\n<p>ah, okay, so this panics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">is_transmutable_hrtb</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span>: <span class=\"nc\">Assume</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">dst</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">dst</span><span class=\"w\"> </span><span class=\"n\">Dst</span>: <span class=\"nc\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">src</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">BikeshedIntrinsicFrom</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">dst</span><span class=\"w\"> </span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">is_transmutable_hrtb</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">Assume</span>::<span class=\"n\">NOTHING</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// ICE</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250530382,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629831058
    },
    {
        "content": "<p>about what I would expect</p>",
        "id": 250531849,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629831569
    },
    {
        "content": "<p>Yeah, so it's <em>definitely</em> not safe to pretend that some lifetimes just don't exist... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 250532453,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1629831790
    },
    {
        "content": "<p>Well, I'm not sure (haven't thought much about it) if you could e.g. erase regions here</p>",
        "id": 250534310,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629832604
    },
    {
        "content": "<blockquote>\n<p>Question: Is there a nice way to grab fields out of an evaluated Const? The transmutability trait has a const generic Assume parameter.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> I don't think there's a particularly <em>nice</em> way to do that. The only thing I can think of off hand is to go through the normal const eval machinery. At a really high level, you'd do something like:</p>\n<ol>\n<li>Create a new <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html\"><code>InterpCx</code></a>, you can probably use the regular <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_mir/const_eval/machine/struct.CompileTimeInterpreter.html\"><code>CompileTimeInterpreter</code></a> for the <code>Machine</code>. </li>\n<li>Load the const value into the context <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html#method.const_val_to_op\"><code>InterpCx::const_val_to_op</code></a></li>\n<li>Get the field you want to read the value of <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html#method.operand_field\"><code>InterpCx::operand_field</code></a></li>\n<li>Read the resulting value <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_mir/interpret/struct.InterpCx.html#method.read_scalar\"><code>InterpCx::read_scalar</code></a>. You should get back a <code>ScalarMaybeUninit::Scalar(Scalar::Int(ScalarInt::TRUE | ScalarInt::FALSE))</code></li>\n</ol>\n<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> if they know a nicer way.</p>",
        "id": 250535980,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629833365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> [Disclaimer: I'm very new to this and might have some underlying misconceptions...]</p>\n<p>I <em>think</em> late bound regions can be erased (iiuc what late regions are and what erasing them means), because the exact relationship of late bound lifetimes often doesn't matter---just their relationship to <code>'static</code>.</p>\n<p>E.g., a bound like this is always unsatisfiable, because there exist <code>'a</code> that don't outlive <code>'b</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">always_unsatisfiable</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span>: <span class=\"nc\">TransmuteFrom</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And a bound mixing regular and hrtb can only be satisfied if the regular lifetime is ultimately instantiated as <code>'static</code>; e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">sat_if_static</span><span class=\"o\">&lt;'</span><span class=\"na\">t</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span>: <span class=\"nc\">TransmuteFrom</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is this the right line of thinking to assess whether or not late bound regions can be erased?</p>",
        "id": 252094463,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1630867893
    },
    {
        "content": "<p>uh, I don't have time right now to dig into this, but maybe ping me later tonight or tomorrow</p>",
        "id": 252094661,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630868100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ping at your leisure <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 252197148,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1630945401
    },
    {
        "content": "<p>So, my instinct is that all lifetimes, late or otherwise can be erased</p>",
        "id": 252197678,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630945761
    },
    {
        "content": "<p>Niko mentioned at one point in regards to something else (I think it was generators) that we might actually theoretically be able to generate different layouts when a type has late bound regions or not</p>",
        "id": 252197802,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630945835
    },
    {
        "content": "<p>That would be <em>surprising</em> to me</p>",
        "id": 252197826,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630945846
    },
    {
        "content": "<p>But, rereading your message above, I'm wondering if we can erase lifetimes at all</p>",
        "id": 252198032,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630945982
    },
    {
        "content": "<p>We obviously don't want to transmute a shorter lifetime into a longer one</p>",
        "id": 252198100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630946034
    },
    {
        "content": "<p>Yeah, I'm not sure erasing lifetimes is the right thing to do</p>",
        "id": 252198527,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630946300
    },
    {
        "content": "<p>I've submitted a PR for an initial, incomplete implementation of the MCP: <a href=\"https://github.com/rust-lang/rust/pull/92268\">https://github.com/rust-lang/rust/pull/92268</a></p>",
        "id": 266035361,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640396492
    },
    {
        "content": "<p>the PR post doesn't mention <code>repr(transparent)</code>, is it also on the short list?</p>",
        "id": 266046237,
        "sender_full_name": "Lokathor",
        "timestamp": 1640416035
    },
    {
        "content": "<p>Yep! Though I wouldn't call the list of things that remain to be implemented \"short\". <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 266065205,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640448563
    },
    {
        "content": "<p>It'll be really easy to implement support for that, though.</p>",
        "id": 266065207,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640448580
    },
    {
        "content": "<p>Just implemented <code>Assume::VALIDITY</code> support!</p>",
        "id": 266084464,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640481862
    },
    {
        "content": "<p>Next up: visibility checking. I fear it's going to be <em>really</em> tricky, esp. with ZSTs.</p>",
        "id": 266084471,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640481898
    },
    {
        "content": "<p>So <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/enum.Visibility.html#method.is_accessible_from\"><code>Visibility:is_accessible_from</code></a> <em>sounds</em> pretty nifty, but I'm not totally sure I understand how to use it.</p>\n<p>It consumes:</p>\n<ul>\n<li><code>Self</code> is the visibility modifier</li>\n<li>a <code>module</code> parameter (is this the module the visibility modifier appears in?)</li>\n<li>a <code>tree</code> parameter (is this the tree that we're assessing visibility form?)</li>\n</ul>",
        "id": 266126356,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640550550
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 266126361,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640550574
    },
    {
        "content": "<p>concretely, what I'm trying to accomplish is, given code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">TransmutableFrom</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_transmutable</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Dst</span>: <span class=\"nc\">TransmutableFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">src</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Src</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">dst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Zst</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Dst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">field</span>: <span class=\"nc\">Zst</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_static_assertion</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span>::<span class=\"n\">assert</span>::<span class=\"n\">is_transmutable</span>::<span class=\"o\">&lt;</span><span class=\"n\">src</span>::<span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span>::<span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">};};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...answer:</p>\n<ul>\n<li>is <code>Zst</code> accessible from the defining scope of <code>Context</code>?</li>\n<li>is <code>Dst.field</code> accessible from the defining scope of <code>Context</code>?</li>\n<li>is <code>Dst</code> accessible from the defining scope of <code>Context</code>?</li>\n</ul>\n<p>(the answer to all of these questions should be 'yes'!)</p>",
        "id": 266126976,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640551660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Implementation/near/266126356\">said</a>:</p>\n<blockquote>\n<p>So <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/enum.Visibility.html#method.is_accessible_from\"><code>Visibility:is_accessible_from</code></a> <em>sounds</em> pretty nifty, but I'm not totally sure I understand how to use it.</p>\n<p>It consumes:</p>\n<ul>\n<li><code>Self</code> is the visibility modifier</li>\n<li>a <code>module</code> parameter (is this the module the visibility modifier appears in?)</li>\n<li>a <code>tree</code> parameter (is this the tree that we're assessing visibility form?)</li>\n</ul>\n</blockquote>\n<p>I believe</p>\n<ul>\n<li><code>module</code> is the place we're accessing visibility from (the defining scope of <code>Context</code> in your examples or perhaps the <code>mod</code> that contains <code>_static_assertion</code>)</li>\n<li><code>tree</code> is the way to determine what the relationship between the module specified in <code>Visibility::Restricted(module_def_id)</code> and <code>module</code> is. For the part of the compiler you're working in, you probably just want to pass <code>tcx</code> as this parameter.</li>\n</ul>",
        "id": 266180165,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1640618597
    },
    {
        "content": "<p>Huh, so there's nothing here that represents <em>where</em> the visibility modifier occurs. Will <code>Visibility:is_accessible_from</code> produce false positives when the pub-in-priv trick is used to create types that are effectively private?</p>",
        "id": 266181537,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640619832
    },
    {
        "content": "<blockquote>\n<p>there's nothing here that represents where the visibility modifier occurs</p>\n</blockquote>\n<p>I'm not quite sure what you mean. Isn't that tracked by <code>Visibility</code> itself? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\">           </span><span class=\"c1\">// Visibility::Public</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"c1\">// Visibility::Restricted({def id of crate})</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Baz</span><span class=\"p\">;</span><span class=\"w\">     </span><span class=\"c1\">// Visibility::Restricted({def id of local module})</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Baa</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"c1\">// Visibility::Restricted({def id of parent module})</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span>::<span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bab</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Visibility::Restricted({def id of a::b})</span>\n<span class=\"n\">stuct</span><span class=\"w\"> </span><span class=\"n\">Bac</span><span class=\"p\">;</span><span class=\"w\">                </span><span class=\"c1\">// Visibility::Restricted({def id of local module})</span>\n</code></pre></div>",
        "id": 266182607,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1640620751
    },
    {
        "content": "<p>Oh, d'oh, yep.</p>",
        "id": 266182957,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640621006
    },
    {
        "content": "<p>Wait, wait, I'm less convinced.</p>",
        "id": 266183066,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640621088
    },
    {
        "content": "<p>If I modify the <code>dst</code> module so the example looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">TransmutableFrom</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_transmutable</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Dst</span>: <span class=\"nc\">TransmutableFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">src</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Src</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">dst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">trick</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Zst</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Dst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">field</span>: <span class=\"nc\">trick</span>::<span class=\"n\">Zst</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_static_assertion</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">crate</span>::<span class=\"n\">assert</span>::<span class=\"n\">is_transmutable</span>::<span class=\"o\">&lt;</span><span class=\"n\">src</span>::<span class=\"n\">Src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span>::<span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">};};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then <code>Zst</code> <em>isn't</em> accessible from the defining scope of <code>Context</code>. It's declared <code>pub</code>, but it's effectively private.</p>",
        "id": 266183111,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640621120
    },
    {
        "content": "<p>Yeah, I'm unsure about the pub-in-priv bit. </p>\n<p>We convert from a <code>hir::VisibilityKind</code> to <code>Visibility</code> here <a href=\"https://github.com/rust-lang/rust/blob/8ad3c1dd1d47f9ce7dfdf4a14c70c67e1790b0f5/compiler/rustc_middle/src/ty/mod.rs#L301\">https://github.com/rust-lang/rust/blob/8ad3c1dd1d47f9ce7dfdf4a14c70c67e1790b0f5/compiler/rustc_middle/src/ty/mod.rs#L301</a> but that just converts <code>VisbilityKind::Public</code> to <code>Visbility::Public</code>.</p>",
        "id": 266183337,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1640621300
    },
    {
        "content": "<p><code>VisibilityKind::Public</code> gets assigned here if we just parse <code>pub</code> (no visibility specifiers). <a href=\"https://github.com/rust-lang/rust/blob/3d57c61a9e04dcd3df633f41142009d6dcad4399/compiler/rustc_parse/src/parser/mod.rs#L1346\">https://github.com/rust-lang/rust/blob/3d57c61a9e04dcd3df633f41142009d6dcad4399/compiler/rustc_parse/src/parser/mod.rs#L1346</a></p>",
        "id": 266183460,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1640621405
    },
    {
        "content": "<p>(fyi, those links are broken to people not in the code search beta <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span>)</p>",
        "id": 266184004,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640621858
    },
    {
        "content": "<p>Oh no</p>",
        "id": 266184014,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1640621869
    },
    {
        "content": "<p>luckily it's clear what you're linking to, tho <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 266184074,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640621893
    },
    {
        "content": "<p>Forgot that wasn't completely available yet. Fixed.</p>",
        "id": 266184113,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1640621941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> pub-in-priv are hacks which are quite brittle w.r.t. genuine compiler checks; I wouldn't worry too much about those: to make <code>Zst</code>'s construction clearly private then the author would need to define a genuinely private field</p>",
        "id": 266302338,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640735147
    },
    {
        "content": "<p>In other words, I would expect that transmutation to pass, since technically everything is public as far as the compiler is concerned. In this very specific scenario, the public constructor of zst just happens to be unnameable, but other things could change that</p>",
        "id": 266302402,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640735222
    },
    {
        "content": "<p><em>e.g.</em>, a <code>macro</code> could expose the <code>Zst</code> path</p>",
        "id": 266302419,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640735242
    },
    {
        "content": "<p>(I'm on the phone, but basically try to define <code>pub macro leak() { trick::Zst }</code> inside <code>dst</code> to see what I mean)</p>",
        "id": 266302478,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640735312
    },
    {
        "content": "<p>I get that it's brittle, but the fact remains that unless the author of <code>dst</code> does something to leak <code>Zst</code>, it's externally inaccessible. Before ignoring the priv-in-pub trick, I'd like to see an RFC acknowledging that  \"it's sound to unsafely instantiate public-but-inaccessible types to work around not having access to their constructor\".</p>\n<p>I think such an RFC would either be completely untenable (since existing code might be relying on that sort of privacy for safety), or edition-gated (so as to not retroactively change the meaning of existing code).</p>",
        "id": 266303187,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1640736132
    },
    {
        "content": "<p>I don't remember where, but I think rusqlite relies on that sort of privacy for safety somewhere (this might have changed, it was a while since i looked at the part of the code I'm thinking of).</p>\n<p>That said, I consider it a bit fragile and like something I should change when I find the time.</p>",
        "id": 266308466,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1640742485
    },
    {
        "content": "<p>While <code>pub-in-priv</code> currently makes sense when <em>sealing traits</em> (if anything, <strong>by lack of a better tool</strong>), there is no genuine reason to have a <code>pub-in-priv</code> type <strong>with all of its fields being <code>pub</code> as well</strong>. That's lazy programming, because there is always the option to mark one of the fields as private (or <code>pub (in crate)</code> depending on the needs). While such lazy programming patterns could be supported if doing so were easy, it turns out that having to perform a full-code reachability analysis seems to be way beyond the scope of Rust tools (FWIW, <code>rustdoc</code> already implements such a heuristic): if <code>Zst</code> were <code>Default</code>, for instance, then surely that transmute couldn't be unsound; ditto for a macro and so on.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">lib</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">private</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[derive(Default)]</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- this could be a complex trait system \"leaking\" the type</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">private</span>::<span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lib</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=08080a7e7dc87222b99365442ba13e74\">Playground</a></li>\n</ul>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>With a macro</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(decl_macro)]</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">lib</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">private</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// leaks the type</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">private</span>::<span class=\"n\">Foo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">private</span>::<span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// from a type to a path (macros can't be called in path position)</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Path</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lib</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Path</span>::<span class=\"o\">&lt;</span><span class=\"n\">lib</span>::<span class=\"n\">ty</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=2ece4d20d9c49c2a4bab7584730533c6\">Playground</a></li>\n</ul>\n</div></div>\n<p>There could be a conservative approach of potentially-leaked-but-never-through-a-<code>use</code>-reexport <em>paths</em> / <em>names</em> to be considered somehow a new form a <em>type</em> privacy, and thus start being given new behavior within the compiler (<em>i.e.</em>, making that <code>rustdoc</code> heuristic become an official part of the compiler). But <em>name</em> privacy affecting <em>type</em> privacy would definitely be a novel thing in Rust. That is, the \"burden of RFC\" would actually lie in the other direction: the ones having to provide an RFC would be the people having relied on \"a pub type with <em>all of its fields being pub as well</em>, but with a <code>in-priv</code> path that isn't <em>nameable</em>, yields a type which cannot be constructed <em>at all</em> since it can't be constructed by path\" (similarly to people transmuting wide pointers (<code>&amp;[T]</code> to <code>&amp;[U]</code>) or <code>Vec</code>s, and so on: neither of these things have ever been officially allowed).</p>\n<ul>\n<li>\n<p>I personally find that <code>lang</code> design / policy to be similar to the trait / coherence system on its own: <em>lack of</em> implementations are not usable in the coherence system, since it would be allowed for the crate author to add a trait impl (<em>unless they opted out with a <code>impl !Trait</code></em>, or more generally through a <code>fundamental</code> marker). So, lack of language capabilities should not be relied on unless the language explicitly provides an explicit future-proof guarantee of it.</p>\n</li>\n<li>\n<p>Back to \"all the fields are pub\", the only exception â€”but an important one!â€” would be <code>#[non_exhaustive]</code> types, since it has been designed precisely as the tool to express <code>pub(in crate) âˆ…</code> trailing lack of extra fields.</p>\n</li>\n</ul>\n<hr>\n<p>That's why, <em>in practice</em>, wouldn't bother with that in your implementation for the moment, at least. Keep it as a needs-to-be-clarified question if you want, to see if <code>t-lang</code> wants to chime in and add this new rule / behavior to Rust.</p>",
        "id": 266341499,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640781200
    },
    {
        "content": "<p>Btw, I forgot to mention it, but this whole project, and the fact we already have such an implementation, is simply awesome and outstanding, <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span>! <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span> <br>\nIf you'd rather go with a \"conservatively handle <code>pub</code>-in-<code>priv</code> as <code>priv</code>\" approach, then, for all means do so. I just suspect it will be quite hard to implement, and thus, <em>imho</em>, not worth the effort, given that it will pioneer such compiler logic (if we dismiss <code>rustdoc</code>). But that being said, it's true that this generic safe transmutation is quite novel as a whole, so \"pioneering stuff\" shouldn't be that surprising.</p>\n<p>It does look like, whatever T-lang decides to go for, <strong>an RFC clarifying this will be necessary before any form of stabilization</strong>.</p>",
        "id": 266514992,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640971738
    },
    {
        "content": "<p>Thank you so much for the kind words! <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 266631971,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1641156037
    },
    {
        "content": "<p>Yeahhhh, I don't think my <em>initial</em> support for visibility checking will handle the pub-in-priv situation. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 266632793,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1641157281
    },
    {
        "content": "<p>Does anyone know how to get the <code>Visibility</code> of an Adt from an <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/struct.AdtDef.html\"><code>AdtDef</code></a>?</p>",
        "id": 266884601,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1641343682
    },
    {
        "content": "<p>Maybe TyCtx::visibility with the DefId? <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.visibility\">https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.visibility</a><br>\n(I have no idea, I just got that from <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/index.html?search=-%3E%20Visibility\">https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/index.html?search=-%3E%20Visibility</a> )</p>",
        "id": 266888503,
        "sender_full_name": "Nick12",
        "timestamp": 1641347542
    },
    {
        "content": "<p>Visibility checking is now implemented! (The implementation unfortunately does not yet cover the pub-in-priv trick.) Some relevant tests: <a href=\"https://github.com/jswrenn/rust/blob/transmute/src/test/ui/transmutability/visibility/dst.rs\">https://github.com/jswrenn/rust/blob/transmute/src/test/ui/transmutability/visibility/dst.rs</a></p>",
        "id": 267940387,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1642112870
    },
    {
        "content": "<p>It's kind of mind bending seeing some of the error messages right now (<code>the trait bound `dst_field_private::dst::Dst: BikeshedIntrinsicFrom&lt;dst_field_private::src::Src, dst_field_private::_::{closure#0}::Context, false, false, false, false&gt;` is not satisfied</code> <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>) but it seems like we have all the info we need already to make them actually pretty nice down the road!</p>",
        "id": 267940980,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1642113192
    },
    {
        "content": "<p>Better error messages are definitely on the horizon! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 267941190,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1642113305
    },
    {
        "content": "<p>Not trying to complain! It's really great seeing the progress here.</p>",
        "id": 267941270,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1642113358
    },
    {
        "content": "<p>it's so cool that it already works, awesome job Jack!</p>",
        "id": 267941394,
        "sender_full_name": "lqd",
        "timestamp": 1642113410
    },
    {
        "content": "<p>I think my next task is going to be making transmutations involving references work. They're gonna be pretty tricky tho. <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 267942490,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1642113976
    },
    {
        "content": "<p>Just popped in here to see how things were coming along and it's looking very encouraging, thank you to everyone involved, I'm excited to play around with this. :)</p>",
        "id": 269684559,
        "sender_full_name": "Colin Rofls",
        "timestamp": 1643343363
    },
    {
        "content": "<p>Hello everyone! Bit of a dumb question but without a tracking issue as far as I can see, how can we check on the progress of this feature?</p>",
        "id": 277347075,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1648764810
    },
    {
        "content": "<p>Not a dumb question at all! I can think of two places you could keep an eye on:</p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/lang-team/issues/21\">**the lang-team has a tracking issue for project-safe-transmute.**</a> I try (and often forget, until I'm poked) to provide updates there.</li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/92268\">**the initial implementation has a PR.**</a> this is where all the near-term action is going to happen.</li>\n</ol>\n<p>And, of course, y'all can feel free to ping me here.</p>",
        "id": 277347730,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1648765257
    },
    {
        "content": "<p>Unfortunately, I had to temporarily pause my work on the initial implementation of safe-transmute so I can finish up my PhD. My thesis defense is April 6 (less than a week away!), and I plan on picking work up again on it soon thereafter!</p>",
        "id": 277347929,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1648765372
    },
    {
        "content": "<p>Good luck with your thesis haha! Mine is 3 years away and I'm already stressed...<br>\nAny way that I could help?</p>",
        "id": 277423761,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1648822205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Implementation/near/277347929\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, I had to temporarily pause my work on the initial implementation of safe-transmute so I can finish up my PhD. My thesis defense is April 6 (less than a week away!), and I plan on picking work up again on it soon thereafter!</p>\n</blockquote>\n<p>Congratulations! Good luck! What's your dissertation topic?</p>",
        "id": 277427921,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648823977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  You'll have to promise to not tell the IRB, but my dissertation centers on a longitudinal study of ego depletion in a postgraduate computing education researcher. The ecological validity of the experiment is unsurpassed, though I worry my committee might have gripes with the sample size. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 277540182,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1648918885
    },
    {
        "content": "<p>(In actuality, it's about motivating CS students to engage in example-writing <em>before</em> they dive into implementing programming assignments.)</p>",
        "id": 277540277,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1648919013
    }
]