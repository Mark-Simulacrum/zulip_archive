[
    {
        "content": "<p>I was curious whether <code>Here!()</code> could be defined in-language. The answer is <em>almost</em>: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6edb30c4f98eb942fc3c82669a93b0a6\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6edb30c4f98eb942fc3c82669a93b0a6</a></p>\n<p>That's usable as a type annotation on expressions, but not on type signatures; e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Here</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\">// ERROR; it doesn't work in this position :-(</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">here</span>: <span class=\"nc\">Here</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"> </span><span class=\"c1\">// it does work in this position!</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'll be fascinated to see if any of y'all can come up with something that works in signatures.</p>",
        "id": 218141172,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606527722
    },
    {
        "content": "<p>The heart of the problem is that I <em>can't</em> write this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"nc\">Local</span><span class=\"w\"> </span><span class=\"p\">{})</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218141376,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606527978
    },
    {
        "content": "<p>Not a real solution, since it requires a private helper trait in scope (and that point, there could be a private type in scope already (except that with the trait design, if it is misused, one gets a compilation error, whereas a private type requires trusting that it is truly private; so there is some point in this): <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=092382d7cdb1b524b3ae3f14c8b5440c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=092382d7cdb1b524b3ae3f14c8b5440c</a></p>",
        "id": 218176847,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606590864
    },
    {
        "content": "<p>That's a neat trick I hadn't seen before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![cfg_attr(all(),</span>\n<span class=\"cp\">    feature(const_type_id, const_generics),</span>\n<span class=\"cp\">    allow(incomplete_features),</span>\n<span class=\"cp\">)]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218177984,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606592298
    },
    {
        "content": "<p>The line between <em>neat</em> and <em>hacky</em> is very blurry, sometimes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218208016,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1606648130
    }
]