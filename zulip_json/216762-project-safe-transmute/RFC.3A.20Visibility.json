[
    {
        "content": "<p>Hi, all. The RFC uses field visibility as an indicator of whether a field has library-imposed validity invariants on its value. This requirement is recursive: the fields of a field must <em>also</em> be <code>pub</code>, and so on. If a public type consists, recursively, of public fields with public types, a value of that type can be constructed naturally using Rust's initialization syntax. When this is the case, a type cannot meaningfully impose any restrictions on its fields' values using its constructors or methods.</p>",
        "id": 205405174,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596052346
    },
    {
        "content": "<p>Unfortunately, it's possible to evade this using the public-in-private trick; e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(PromiseTransmutableInto, PromiseTransmutableFrom)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Constrained</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">private</span>::<span class=\"n\">ConstrainedInner</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Constrained</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// the sum of `wizz` and `bang` must be greater than or equal to zero.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">wizz</span>: <span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bang</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"n\">wizz</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bang</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Constrained</span><span class=\"p\">(</span><span class=\"n\">private</span>::<span class=\"n\">ConstrainedInner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">wizz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bang</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">something_dangerous</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// do something that&#39;s only safe if `self.0.wizz + self.0.bang &gt;= 0`</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// introduce a private module to avoid `private_in_public` error (E0446):</span>\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">private</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// the sum of `wizz` and `bang` MUST be greater than or equal to zero.</span>\n<span class=\"w\">    </span><span class=\"sd\">/// this invariant is maintained by convention within this crate.</span>\n<span class=\"w\">    </span><span class=\"cp\">#[derive(PromiseTransmutableInto, PromiseTransmutableFrom)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ConstrainedInner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">wizz</span>: <span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">bang</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Given these definitions, the compiler will accept <code>u16: TransmuteInto&lt;Constrained&gt;</code>, even though using the resulting <code>Constrained</code> value may lead to unsafety if the <code>something_dangerous</code> method is called.</p>",
        "id": 205405260,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596052394
    },
    {
        "content": "<p>Now, the above example requires the type author to do something a little odd: they derived <code>PromiseTransmutableFrom</code> for <code>Constrained</code>, thereby declaring that <code>Constrained</code> is stably instantiatiable via transmutation. If they didn't do this, the compiler would not accept <code>u16: TransmuteInto&lt;Constrained&gt;</code>.</p>",
        "id": 205405549,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596052552
    },
    {
        "content": "<p>...but the compiler <em>would</em> still accept <code>u16: TransmuteInto&lt;Constrained, NeglectStability&gt;</code>. The <code>NeglectStability</code> option is currently the only option usable with safe transmutations. So, using this option, an end-user can <em>safely</em> construct an instance of <code>Constrained</code> for which calling <code>something_dangerous</code> would lead to memory unsafety.</p>",
        "id": 205405716,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596052644
    },
    {
        "content": "<p><code>NeglectStability</code> exists so that end-users using types with documentation-only layout stability properties  (as opposed to implementations of this RFC's proposed stability declaration traits) can take advantage of this RFC's safety-checking mechanisms <em>without</em> resorting to unsafe transmutation.</p>",
        "id": 205406545,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596052972
    },
    {
        "content": "<p>The maximally-safe thing for me to do  in light of this safety hole would be to demote <code>NeglectStability</code> to use with only <em>unsafe</em> transmutations. Unfortunately, doing so negates a lot of the current niceness of <code>NeglectStability</code>.</p>\n<p>Concretely, this change would transform end-user code from this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">safe_transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NeglectStability</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>...into this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// Safe because I double-checked that `Dst` isn&#39;t using the pub-in-priv trick</span>\n<span class=\"c1\">// to mask library-imposed validity invariants</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsafe_transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">NeglectStability</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>...and that seems slightly ridiculous?</p>",
        "id": 205407311,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596053344
    },
    {
        "content": "<p>We could add a lang item for \"fully visible\" which is only implemented for things that are fully exposed</p>",
        "id": 205407603,
        "sender_full_name": "simulacrum",
        "timestamp": 1596053492
    },
    {
        "content": "<p>(I also seem to recall folks talking about making the pub-in-private stuff not allowed in future editions, but I'm not sure)</p>",
        "id": 205407701,
        "sender_full_name": "simulacrum",
        "timestamp": 1596053537
    },
    {
        "content": "<p>Some priv-in-pub vectors are going to be eliminated, but that private module trick is here to stay.</p>\n<p>I think the lang item suggestion is a good one. It doesn't actually need to be a language item per se, since the definition of \"fully visible\" that's relevant for transmutation is actually <em>already</em> a <em>little</em> more subtle than everything-is-public. I think I can tweak the RFC's wording a tiny bit to account for this without much issue!. :)</p>",
        "id": 205408093,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596053741
    },
    {
        "content": "<blockquote>\n<p>I think I can tweak the RFC's wording a tiny bit to account for this without much issue!. :)</p>\n</blockquote>\n<p>Silly me. This is actually pretty tricky.</p>",
        "id": 205607301,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596210659
    },
    {
        "content": "<p>First: the \"fully visible\" approach. I think a reasonable definition of \"fully visible\" for a type is that:</p>\n<p>- the type is marked marked <code>pub</code><br>\n  - its fields are all marked <code>pub</code><br>\n  - every module in its path is marked <code>pub</code><br>\n  - the above requirements apply recursively to its fields.</p>\n<p>This definition would preclude transmutations involving any types that aren't part of a crate's public API, which is a very harsh limitation.</p>",
        "id": 205607321,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596210667
    },
    {
        "content": "<p>What if it was just that the fields had to be visible \"to you\" and also all the same visibility. Could that work?</p>\n<p>Eg: within a crate you can see pub(crate) fields and can thus transmute that value only within the crate.</p>",
        "id": 205607764,
        "sender_full_name": "Lokathor",
        "timestamp": 1596210909
    },
    {
        "content": "<p>Yeah, so the property that matters is <em>constructibility</em>. A type is constructible if its implicit constructor is in scope,  and its fields are constructible.</p>",
        "id": 205607882,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596210963
    },
    {
        "content": "<p>But I'm struggling to weave constructability elegantly into trait resolution. Constructability depends on <em>where</em> you're trying to construct something. But where you write <code>Src: TransmuteInto&lt;Dst&gt;</code> might be very different from where you actually perform a transmutation (if you perform one at all).</p>",
        "id": 205608113,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596211094
    },
    {
        "content": "<p>For instance, the proposed <code>IntoBytes</code> trait is defined for all <code>Src</code> and <code>Dst</code> such that <code>Src: TransmuteInto&lt;[u8; size_of::&lt;Src&gt;()]&gt;</code>. This blanket impl is defined in the standard library.</p>\n<p>So an end-user using <code>IntoBytes</code> to transmute their type <code>Foo</code> won't actually be writing <code>TransmuteInto</code> at all. And, at the place where <code>TransmuteInto</code> does occur (i.e., the <code>where</code> clause of a blanket impl defined in the standard library), <code>Foo</code> is <em>definitely</em> not constructible.</p>",
        "id": 205609287,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596211717
    },
    {
        "content": "<p>If <code>Foo</code> has generics, the rabbit hole only deepens.</p>",
        "id": 205609684,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596211889
    },
    {
        "content": "<p>In the short term, I think the prudent thing to do is to simply demote <code>NeglectStability</code> to being an <em>unsafe</em> transmute option. I think this RFC exhausts its novelty budget justifying its stability declaration system; Introducing location-dependent trait resolution is too much to ask (and could be retrofitted onto safe transmute later on, anyways!).</p>\n<p>Had we designed this RFC six years ago, I think I would have preferred making the pub-in-priv trick unsafe instead, but alas, here we are.</p>",
        "id": 205610270,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596212196
    },
    {
        "content": "<p>I am <em>very</em> bummed, however, that this whole fiasco makes the distinction between safety and stability <em>really</em> subtle, and I'll probably need to revise the guide level explanation to reflect that subtlety.</p>",
        "id": 205611026,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596212633
    }
]