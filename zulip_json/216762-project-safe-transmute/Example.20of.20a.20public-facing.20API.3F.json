[
    {
        "content": "<p>I've been reading the discussion of safe transmute, and I'm interested in the subject of stability. I get the impression that it's a bit of a sore subject that <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> kind of wants to leave aside for now, but I think there are some aspects of the debate that haven't been well-explored.</p>\n<p>Just to summarize my understanding: Jack's position is that API stability relative to transmute isn't an immediate concern, because it can be addressed as a pure library implementation, once a non-API-stable intrinsic has been added. Since safety is the part that needs an intrinsic, debates about stability should be deferred until safety is figured out.</p>\n<p>I don't completely agree with the above view, but it's hard to make my argument without being sure what everyone's position is.</p>\n<p>My question is: imagine that <code>BikeshedIntrinsicFrom</code> is stabilized (and miraculously keeps its name); what might an example of a public-facing, SemVer-aware API using the intrinsic look like? Obviously what I said earlier applies and it's hard to guess what the public-facing APIs should be before the foundations are laid out, but even a vague example would be helpful.</p>\n<p>To be more specific, given the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// In our case, zeroed is a freestanding function, not a trait method</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">my_zerocopy</span>::<span class=\"n\">zeroed</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyCustomType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_value</span><span class=\"w\"> </span>: <span class=\"nc\">MyCustomType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>what should the <code>zeroed()</code> function look like so that the above code compiles? (assuming MyCustomType is indeed safe to transmute from zeroes)</p>",
        "id": 234719428,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618507749
    },
    {
        "content": "<p>There's an example of one SemVer-aware abstraction here: <a href=\"https://jswrenn.github.io/transmutation-foundation/use-case-abstraction.html\">https://jswrenn.github.io/transmutation-foundation/use-case-abstraction.html</a></p>",
        "id": 234720119,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618507993
    },
    {
        "content": "<p>Sure</p>",
        "id": 234720194,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508024
    },
    {
        "content": "<p>Check out the other sections of that write-up too, if you haven't yet.</p>",
        "id": 234720227,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618508042
    },
    {
        "content": "<p>I have</p>",
        "id": 234720324,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508059
    },
    {
        "content": "<p>That abstraction doesn't use Context, though.</p>",
        "id": 234720331,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508061
    },
    {
        "content": "<p>I'm not sure how deliberate that is.</p>",
        "id": 234720367,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508078
    },
    {
        "content": "<p>(especially given that the <code>FromZeros</code> implementation in the MCP does use Context)</p>",
        "id": 234720445,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508109
    },
    {
        "content": "<p>It's deliberate for /that/ example. <code>Context</code> need not appear in all abstractions over BikeshedTransmutableFrom.</p>",
        "id": 234720635,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618508172
    },
    {
        "content": "<p>I think it makes sense for some abstractions, but not all.</p>",
        "id": 234720668,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618508186
    },
    {
        "content": "<p>The foundational api will support both kinds of abstractions.</p>",
        "id": 234720709,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618508211
    },
    {
        "content": "<p>I see. So there won't be a \"canonical\" SemVer-aware API?</p>",
        "id": 234720835,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508261
    },
    {
        "content": "<p>Hopefully eventually!!</p>",
        "id": 234720856,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618508276
    },
    {
        "content": "<p>It'll be easier to figure out what that might look like after landing the std::mem intrinsic.</p>",
        "id": 234720975,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618508316
    },
    {
        "content": "<p>Possibly, it could be a situation where the community coalescence around a solution published as a crate, and that solution finds its way into the standard library</p>",
        "id": 234721057,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618508363
    },
    {
        "content": "<p>Okay. Just to be clear, I have problems with a Muckable API, and I'm trying to explain them progressively, Socrates-style, because I don't want to jump to conclusions</p>",
        "id": 234721083,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508378
    },
    {
        "content": "<p>Basically, Muckable is all-or-nothing.</p>",
        "id": 234721202,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508413
    },
    {
        "content": "<p>Like, there's no way to say \"the module <code>nuclear_plant</code> is allowed to transmute the type <code>nuclear_plant::Uranium</code>, but outside code isn't\" using that trait.</p>",
        "id": 234721350,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508483
    },
    {
        "content": "<p>You can always do that with <code>BikeshedTransmutableFrom</code>; but if a serialization crate uses <code>Muckable</code>; there's no way to say \"I want <code>nuclear_plant</code> to be able to pass <code>Uranium</code> to <code>my_serde</code>, but I don't want outside code to be able to do that\". (because my_serde uses Muckable, not BikeshedTransmutableFrom)</p>",
        "id": 234721888,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508685
    },
    {
        "content": "<p>Does that seem relevant so far?</p>",
        "id": 234722007,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618508724
    },
    {
        "content": "<p>Yep! To me, that's the biggest shortcoming of that API, but it doesn't bother some people, because you can mostly sneak your way out that bind by wrapping your fields in a private type, and implementing Muckable on that instead.</p>",
        "id": 234723568,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618509364
    },
    {
        "content": "<p>The thing is, the BikeshedTransmutableFrom has similar problems; and so does the FromZeroes implementation in the MCP.</p>",
        "id": 234724010,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618509545
    },
    {
        "content": "<p>Like. Simplest example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foobar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foobar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bar</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234724516,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618509732
    },
    {
        "content": "<p>Given the definition of <code>FromZeros</code> in the MCP, there's no checked way to declare that Foobar implements FromZeros</p>",
        "id": 234724907,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618509877
    },
    {
        "content": "<p>Though I guess you can use <code>Assume::VISIBILITY</code></p>",
        "id": 234725136,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618509968
    },
    {
        "content": "<p>Yep. The example in the MCP has FromZeros as a blanket impl, so to \"declare\" that a type implements FromZeros, you'd simply write a test case demonstrating that it did. The static_assertions crate is great for this.</p>",
        "id": 234725405,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510081
    },
    {
        "content": "<p>I feel like you're missing my point a bit</p>",
        "id": 234725557,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510116
    },
    {
        "content": "<p>Er, sorry. I'm just now getting back to my laptop so perhaps I can read what you're saying a bit more closely.</p>",
        "id": 234725646,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510153
    },
    {
        "content": "<p>Np, it's abstract stuff</p>",
        "id": 234725682,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510170
    },
    {
        "content": "<p>Okay, take the FromZeros example; in an actual public API, you wouldn't use blanket impls, right?</p>",
        "id": 234725755,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510198
    },
    {
        "content": "<p>Like</p>",
        "id": 234725809,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510207
    },
    {
        "content": "<p>Say you have a safe <code>my_zerocopy::zeroed()</code> freestanding function</p>",
        "id": 234725890,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510234
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span>: <span class=\"nc\">Assume</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">BikeshedIntrinsicFrom</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">([</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"o\">&gt;</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234726271,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510395
    },
    {
        "content": "<p>The above function is definitely unsound. Because you can pass it an arbitrary Assume, and tell it \"don't worry, just transmute this stuff, I'm 100% sure it's safe\" even if it isn't, in safe code.</p>",
        "id": 234726436,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510460
    },
    {
        "content": "<p>I'm not quite sure what you mean by \"actual public API\". A crate like <code>zerocopy</code> <em>would</em> probably define a public API like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span>: <span class=\"nc\">Assume</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Safely initialize `Self` from zeroed bytes.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Zero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span>: <span class=\"nc\">Assume</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">BikeshedIntrinsicFrom</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">([</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">FromZeros</span>::<span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Assume</span>::<span class=\"n\">NOTHING</span><span class=\"o\">&gt;</span>::<span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234726756,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510612
    },
    {
        "content": "<p>Right, okay, that answers my initial question (what would the api be like)</p>",
        "id": 234726826,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510645
    },
    {
        "content": "<p>But then the bit earlier still applies</p>",
        "id": 234726872,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510671
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foobar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foobar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bar</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234726944,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510689
    },
    {
        "content": "<p>You can't do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foobar</span><span class=\"w\"> </span>: <span class=\"nc\">Foobar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234727046,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510743
    },
    {
        "content": "<p>Why's that?</p>",
        "id": 234727145,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510800
    },
    {
        "content": "<p>ah</p>",
        "id": 234727230,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510822
    },
    {
        "content": "<p>the private fields.</p>",
        "id": 234727248,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510826
    },
    {
        "content": "<p>well, it depends on /where/ you wrote <code>let foobar : Foobar = zeroed!();</code> then</p>",
        "id": 234727288,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510841
    },
    {
        "content": "<p>Cause the fields in <code>Foobar</code>are private, and your macro uses <code>Assume::NOTHING</code></p>",
        "id": 234727292,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510842
    },
    {
        "content": "<p>Yup</p>",
        "id": 234727309,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510851
    },
    {
        "content": "<p>But in principle, I think Foobar should be able to say \"I export the fact that my fields can be transmuted from zeroes, but not the actual fields themselves\"</p>",
        "id": 234727467,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Example.20of.20a.20public-facing.20API.3F/near/234727309\">said</a>:</p>\n<blockquote>\n<p>Yup</p>\n</blockquote>\n<p>That seems fine. That transmutation wouldn't be sound in a context where the fields of <code>Foobar</code> aren't visible, so it's appropriate that the blanket <code>FromZeros</code> impl wouldn't hold here.</p>",
        "id": 234727587,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Example.20of.20a.20public-facing.20API.3F/near/234727467\">said</a>:</p>\n<blockquote>\n<p>But in principle, I think Foobar should be able to say \"I export the fact that my fields can be transmuted from zeroes, but not the actual fields themselves\"</p>\n</blockquote>\n<p>this is achievable with a touch of indirection <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 234727611,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618510973
    },
    {
        "content": "<p>You mean newtypes?</p>",
        "id": 234727634,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618510982
    },
    {
        "content": "<p>nope! i mean if we take the associated function out of <code>FromZeros</code>, we can add the <code>#[marker]</code> attribute to it, which would let <code>FooBar</code>'s author add their own implementation of <code>FromZeros</code> /just/ for <code>Foobar</code>.</p>",
        "id": 234727837,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618511056
    },
    {
        "content": "<p>(there's actually a proposal to allow <code>#[marker]</code> on traits with all items defaulted, so removing the associated function might not even be necessary compromise in the future)</p>",
        "id": 234727918,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618511091
    },
    {
        "content": "<p>It's still all-or-nothing though, if I'm following you correctly</p>",
        "id": 234728042,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511148
    },
    {
        "content": "<p>Quoting my earlier post:</p>\n<blockquote>\n<p>Like, there's no way to say \"the module <code>nuclear_plant</code> is allowed to transmute the type <code>nuclear_plant::Uranium</code>, but outside code isn't\" using that trait. You can always do that with <code>BikeshedTransmutableFrom</code>; but if a serialization crate uses <code>Muckable</code>; there's no way to say \"I want <code>nuclear_plant</code> to be able to pass <code>Uranium</code> to <code>my_serde</code>, but I don't want outside code to be able to do that\". (because my_serde uses Muckable, not BikeshedTransmutableFrom)</p>\n</blockquote>",
        "id": 234728173,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511190
    },
    {
        "content": "<p>Because if you add the <code>FromZeros</code> marker trait to <code>Uranium</code>, then any API that can access Uranium can deserialize it from zeroes, even if you want to reserve that for a single SemVer context.</p>",
        "id": 234728437,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511290
    },
    {
        "content": "<p>what's the \"all\" and what's the \"nothing\"? </p>\n<p>If <code>FromZeros</code> has <code>#[marker]</code> you get the best of both worlds:</p>\n<ul>\n<li>a <code>FromZeros</code> impl is automatically available in all contexts where the fields of <code>Foobar</code> are visible</li>\n<li>and you can also <em>manually</em> implement <code>FromZeros</code> for <code>Foobar</code> so that it has a <code>FromZeros</code> impl even in contexts where tis fields aren't visible</li>\n</ul>",
        "id": 234728459,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618511295
    },
    {
        "content": "<p>Mh</p>",
        "id": 234728601,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511362
    },
    {
        "content": "<p>Going back to the stability argument, there are cases where you want to export a type's fields, but not the fact that it can be deserialized from zeroes.</p>",
        "id": 234728841,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511458
    },
    {
        "content": "<p>What you're describing is a tricky situation to be sure, but I don't <em>think</em> it's intractable.</p>\n<p>If you wanted <code>FromZeros</code> on <code>Foobar</code> in a <em>particular</em> context (but not all contexts) that does not have visibility in its fields, then you<br>\n 1) add <code>enum Context {}</code> to the semver context in question<br>\n 2) impl <code>FromZeros</code> on <code>FooBar</code> using that aforementioned context</p>",
        "id": 234728846,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618511460
    },
    {
        "content": "<p>(though I admit that's a weaker argument)</p>",
        "id": 234728856,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511466
    },
    {
        "content": "<p>In the case of <code>FromZeroes</code> as described here, these issues are one-in-the-same.  Remember that the visibility requirement is recursive. If you have <em>that</em> much visibility into a public type, whether it can be instantiated from zeros is <em>already</em> a semver guarantee.</p>",
        "id": 234729097,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618511574
    },
    {
        "content": "<blockquote>\n<p>If you have that much visibility into a public type, whether it can be instantiated from zeros is already a semver guarantee.</p>\n</blockquote>\n<p>Not necessarily. It could be non_exhaustive, and add a non-zeroable field later. Doesn't normally break semver.</p>",
        "id": 234729349,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511652
    },
    {
        "content": "<p>Sorry, I used \"visibility\" as a shorthand.  The actual property is that the type is fully implicitly constructible. The RFC was clear on that point, but I don't recall if the MCP was.  You're totally right that <code>non_exhaustive</code> needs to be factored into that evaluation!</p>",
        "id": 234729597,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618511738
    },
    {
        "content": "<p>Oh, right, non_exhaustive stops you from building a struct</p>",
        "id": 234729796,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511804
    },
    {
        "content": "<p>I always forget that</p>",
        "id": 234729853,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618511828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Example.20of.20a.20public-facing.20API.3F/near/234728846\">said</a>:</p>\n<blockquote>\n<p>If you wanted <code>FromZeros</code> on <code>Foobar</code> in a <em>particular</em> context (but not all contexts) that does not have visibility in its fields, then you<br>\n 1) add <code>enum Context {}</code> to the semver context in question<br>\n 2) impl <code>FromZeros</code> on <code>FooBar</code> using that aforementioned context</p>\n</blockquote>\n<p>So just to be clear: to \"export\" a FromZeros implementation,  you create a marker type <code>enum Context {}</code> ; you implement the marker trait <code>FromZeroes</code> conditional on access to Context; because it's an <code>unsafe impl</code>, you can get away with breaking visibility; because you \"control\" the underlying type, you can't make sure the unsafe isn't unsound.</p>\n<p>So if a safe API (eg <code>zeroed!()</code>) wants to create our custom type, it needs to \"prove\" it can access the Context marker; as long as it can, the transmutation is guaranteed to be safe.</p>",
        "id": 234731390,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618512468
    },
    {
        "content": "<p>(it's funny, every time I glaze over your user icon my brain think it's looking at a portrait of Cave Johnson; not sure why)</p>",
        "id": 234731554,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618512530
    },
    {
        "content": "<p>This feels like it would violate trait coherence rules; but there's probably a way to make it work. I agree that it's not intractable.</p>",
        "id": 234731721,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618512603
    },
    {
        "content": "<p>What's interesting to me in your example is the <code>enum Context {};</code> bit. I think it's a misnomer, so I'm gonna call it <code>enum FromZeroesMarker {}</code>.</p>",
        "id": 234732083,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618512730
    },
    {
        "content": "<p>In the MCP, the stated rule is:</p>\n<ul>\n<li>Given a locally declared <code>Context</code>, you can transmute <code>T</code> iff <code>Context</code> can reach <code>T</code>'s fields.</li>\n</ul>\n<p>But here, you're implying a new rule, which is:</p>\n<ul>\n<li>Given a locally declared <code>Context</code>, you can transmute <code>T</code> if <code>Context</code> can reach <code>T</code>'s fields <strong>or a specially declared marker</strong> (eg FromZeroesMarker)</li>\n</ul>",
        "id": 234732410,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618512897
    },
    {
        "content": "<p>And the way you prove it has access to the <code>Context</code> marker is by supplying it! <a href=\"https://jack.wrenn.fyi/blog/private-trait-impls/\">This pattern to scope trait implementations falls neatly out of type privacy.</a></p>\n<p>The orphan rule does impose some limitations. E.g., if you're <em>manually</em> impl'ing <code>FromZeros</code> on a particular type only in a particular context, the type you're implementing that trait for <em>and</em> the private type representing that context <em>both</em> need to be in the same crate, <em>and</em> both visible from at least one scope in that crate (where so you can write out the <code>impl</code> there.)</p>",
        "id": 234732533,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618512946
    },
    {
        "content": "<p>I don't think that's a different rule? <code>Context</code> just needs to be a private type. IMO, the most idiomatic thing to do is to slap down a one-off <code>enum Context {}</code> type in the place you want to check transmutability in, but you could also use an existing private type if one's available.</p>",
        "id": 234732905,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618513088
    },
    {
        "content": "<blockquote>\n<p>When visibility is enforced, <code>Context</code> must be instantiated with any private (i.e., <code>pub(self)</code> type. The compiler pretends that it is at the defining scope of that type, and checks that the necessary fields of <code>Src</code> and <code>Dst</code> are visible.</p>\n</blockquote>",
        "id": 234732974,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618513112
    },
    {
        "content": "<p>I think you've lost me</p>",
        "id": 234733011,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618513133
    },
    {
        "content": "<p>Hold on</p>",
        "id": 234733018,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618513135
    },
    {
        "content": "<p>Ok, say we have this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">nuclear_plant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bar</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span>: <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234733573,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618513329
    },
    {
        "content": "<p>How do you use your ContextMarker to implement FromZeros, in such a way that the last line is valid?</p>",
        "id": 234733653,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618513360
    },
    {
        "content": "<p>Oh</p>",
        "id": 234734369,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618513628
    },
    {
        "content": "<p>Wait, I get that you meant. You were saying that by declaring <code>enum Context</code> inside <code>nuclear_plant</code>, you can have it implement <code>FromZeros</code> only within that module.</p>",
        "id": 234734579,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618513701
    },
    {
        "content": "<p>yep!</p>",
        "id": 234734779,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618513783
    },
    {
        "content": "<p>let me just paste in the longer answer I just typed up, too, for posterity...</p>",
        "id": 234734877,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618513809
    },
    {
        "content": "<p>This starting point:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">nuclear_plant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bar</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span>: <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...expands to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">nuclear_plant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bar</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span>: <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">ExampleContext</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FromZeros</span>::<span class=\"o\">&lt;</span><span class=\"n\">ExampleContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Assume</span>::<span class=\"n\">NOTHING</span><span class=\"o\">&gt;</span>::<span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The compiler now needs to assess whether <code>Uranium: FromZeros::&lt;Context, Assume::NOTHING&gt;</code>.</p>\n<p>It find this blanket impl:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span>: <span class=\"nc\">Assume</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dst</span>: <span class=\"nc\">BikeshedIntrinsicFrom</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ASSUME</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">([</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...and <em>then</em>, substituting in concrete types, must check whether the <code>where</code> bound holds:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Uranium</span>: <span class=\"nc\">BikeshedIntrinsicFrom</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">ExampleContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Assume</span>::<span class=\"n\">NOTHING</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>To answer whether this <code>where</code> bound holds, the compiler checks both that:</p>\n<ol>\n<li>is a sufficient supply of zeroed bytes a bit-valid instance of <code>Uranium</code> (yes!)</li>\n<li>from the defining scope of <code>Context</code>, is <code>Uranium</code> fully-implicitly constructible (no!)</li>\n</ol>\n<p>You can prove that the visibility requirement is <em>not</em> met by replacing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span>: <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...with the implicit constructor expression:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nuclear_plant</span>::<span class=\"n\">Uranium</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"nb\">None</span> <span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Compile Error!</span>\n</code></pre></div>\n<p>...which produces a compile error because <code>foo</code> and <code>bar</code> aren't visible.</p>",
        "id": 234735330,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618513994
    },
    {
        "content": "<p>(also, yeah, in that case, there's no trait coherence problem)</p>",
        "id": 234735379,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618514013
    },
    {
        "content": "<p>But we come back to what I was saying originally. There's no way to export a type's fields and its \"transmutability\" independently of one another</p>",
        "id": 234735752,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618514144
    },
    {
        "content": "<p>To put it concisely, there's no way to express</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This is fine</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span>: <span class=\"nc\">Uranium</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"c1\">// ERROR!</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nuclear_plant</span>::<span class=\"n\">Uranium</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"nb\">None</span> <span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234736002,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618514234
    },
    {
        "content": "<p>I think there might be a way to express that by annotating <code>FromZeros</code> with <code>#[marker]</code> so third parties can add their own impls, but i'll need a few minutes to bang my head against it...</p>",
        "id": 234737535,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618514774
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">zerocopy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[marker]</span><span class=\"w\"> </span><span class=\"c1\">// &lt;------ Important addition!</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Zero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dst</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Dst</span>: <span class=\"nc\">BikeshedIntrinsicFrom</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Assume</span>::<span class=\"n\">NOTHING</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">zeroed</span><span class=\"o\">&lt;</span><span class=\"n\">Dst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Dst</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Dst</span>: <span class=\"nc\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">([</span><span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">struct</span> <span class=\"nc\">Context</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">zerocopy</span>::<span class=\"n\">zeroed</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">FooBar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// private field!</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bar</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// private field!</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// with this impl, others can use `zeroed!()` to instantiate `FooBar`, even</span>\n<span class=\"w\">    </span><span class=\"c1\">// though they can't see its fields</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">zerocopy</span>::<span class=\"n\">FromZeros</span><span class=\"o\">&lt;</span><span class=\"n\">Context</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FooBar</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">FooBar</span>: <span class=\"nc\">BikeshedIntrinsicFrom</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">zerocopy</span>::<span class=\"n\">Zero</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Assume</span>::<span class=\"n\">VISIBILITY</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234738397,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618515086
    },
    {
        "content": "<p>(whoops, i copy-pasted a bit too much in that last impl, but I think I fixed the example)</p>",
        "id": 234738756,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618515196
    },
    {
        "content": "<p>I think now you <em>do</em> bump  into coherence problems</p>",
        "id": 234739090,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618515310
    },
    {
        "content": "<p><code>#[marker]</code> allows overlapping impls</p>",
        "id": 234739185,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618515346
    },
    {
        "content": "<p>Ok, nvm then</p>",
        "id": 234739213,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618515360
    },
    {
        "content": "<p>(btw, i'm <em>really</em> enjoying putting this design through the gauntlet; thanks for all the excellent challenges!)</p>",
        "id": 234739683,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618515540
    },
    {
        "content": "<p>No problem</p>",
        "id": 234739867,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618515611
    },
    {
        "content": "<p>I still have a lot of small issues with the intrinsic; but it does cover most realistic use cases. Hm.</p>",
        "id": 234741038,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1618516057
    },
    {
        "content": "<p>(I think <code>#[marker]</code> will be amazing for this kind of thing.  One <code>impl</code> for each case that's legal, then use that trait as a bound in other methods to ensure correctness.)</p>",
        "id": 234896513,
        "sender_full_name": "scottmcm",
        "timestamp": 1618596038
    },
    {
        "content": "<p>I agree! And it'll be particularly nice if the proposed extension allowing <code>#[marker]</code> on traits with defaulted items is implemented! but baby steps...</p>",
        "id": 234906298,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1618600403
    }
]