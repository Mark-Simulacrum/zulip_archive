[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/transmute.20options/near/203724257\">previously</a> wondered about transmutation's interactions with <code>Send</code> and <code>Sync</code>, which I suspect are closely related to the interactions with <code>UnsafeCell</code> and pointer uniqueness.</p>\n<p>I don't have a complete sense of these interactions, and I'd like to.</p>",
        "id": 204131471,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594927758
    },
    {
        "content": "<p>Within reference transmutations, <code>UnsafeCell</code> has clear soundness issues: </p>\n<ul>\n<li><code>&amp;mut bool ⇏ &amp;mut u8</code>: validity violated</li>\n<li><code>&amp;AtomicBool ⇏ &amp;AtomicU8</code>: validity violated</li>\n<li><code>&amp;AtomicU8 ⇏ &amp;u8</code>: potential for unsynchronized loads of <code>&amp;u8</code></li>\n</ul>\n<p>(the <code>Atomic*</code> types are just wrappers around <code>UnsafeCell</code>s)</p>",
        "id": 204131940,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594928006
    },
    {
        "content": "<p>!Send is surely a hazard to turn into and from a Send type</p>",
        "id": 204138422,
        "sender_full_name": "Lokathor",
        "timestamp": 1594931318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> , the question is whether we can guarantee - either using the existing rules, or by making slight modifications to the rules - that <code>!Send</code> types will never be turned into <code>Send</code> types (and the same for <code>Sync</code>) without making explicit reference to <code>Send</code>/<code>Sync</code>.</p>",
        "id": 204166839,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1594955555
    },
    {
        "content": "<p>The hypothesis is that the way that the transmutation traits treat <code>UnsafeCell</code> may give us this for free.</p>",
        "id": 204166843,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1594955580
    },
    {
        "content": "<p>unlikely, you can be !Send without an UnsafeCell</p>",
        "id": 204166925,
        "sender_full_name": "Lokathor",
        "timestamp": 1594955761
    },
    {
        "content": "<p>Yeah, that's what we figured, so the question is then whether there's a <em>small</em> modification we could make to make it sound. We'll see <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204173602,
        "sender_full_name": "Joshua Liebow-Feeser",
        "timestamp": 1594966178
    },
    {
        "content": "<p>My gut tells me that, overall, anything <code>!Send</code> is sufficiently \"weird\" that you probably just can't be blindly safe transmuting it. Even if the data validity is there, the fact that the thing cares about what thread it's in, for any reason, means that something is up.</p>",
        "id": 204175128,
        "sender_full_name": "Lokathor",
        "timestamp": 1594968389
    },
    {
        "content": "<p>If a type makes use of non-local state (e.g., global state, thread local state) for soundness and/or correctness, we probably can't allow transmuting to that type. I have a feeling this goes beyond Send/Sync and is relevant to any arbitrary type.</p>",
        "id": 204179524,
        "sender_full_name": "rylev",
        "timestamp": 1594972456
    },
    {
        "content": "<p>Yeah, <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> but that's where the field visibility requirement comes in.</p>",
        "id": 204199828,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1594989046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> ah yes. If all fields are pub you can trivially initialize the value so nothing can be hidden... Got ya</p>",
        "id": 204199894,
        "sender_full_name": "rylev",
        "timestamp": 1594989107
    },
    {
        "content": "<p>Some considerations for framing this discussion:</p>\n<p>Some constraints apply to bytes, others apply to variants, and others apply to entire types. E.g.:</p>\n<ul>\n<li>Stability is a property of types. A type has either the stability declaration traits, or it hasn't.</li>\n<li>Constructibility is a property of variants. If a variant's fields are all marked <code>pub</code>, that variant can be freely constructed.</li>\n<li>Validity is a property of sequences of bytes.</li>\n</ul>\n<p>Some constraints only apply behind references; E.g.:</p>\n<ul>\n<li><code>bool ⇒ u8</code></li>\n<li><code>&amp;mut bool ↛ &amp;mut u8</code> (rejected because writes to the <code>&amp;mut u8</code> could invalidate the underlying bool)</li>\n</ul>",
        "id": 204246343,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1595012853
    },
    {
        "content": "<p>I think <code>UnsafeCell</code> is probably a property affecting bytes. Given:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Pair</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UnsafeCell</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Consider:</p>\n<ul>\n<li><code>Pair ⇒ [u8; 2]</code></li>\n<li><code>&amp;Pair ↛  &amp;[u8; 2]</code>, second byte isn't actually immutable!</li>\n<li><code>&amp;Pair ⇒  &amp;[u8; 1]</code></li>\n</ul>",
        "id": 204246689,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1595013017
    },
    {
        "content": "<p>Another set of examples:</p>\n<ul>\n<li><code>&amp;u8 ⇒ &amp;UnsafeCell&lt;u8&gt;</code> fine, since subsequent operations on <code>UnsafeCell</code> are <code>unsafe</code></li>\n<li><code>&amp;u8 ↛ &amp;AtomicU8</code> not fine, since there might be other <code>&amp;u8</code> kicking around doing unsynchronized loads</li>\n</ul>\n<p>In these examples, the big difference is that <code>UnsafeCell</code> is <code>!Send</code>, but <code>AtomicU8</code> (which contains an <code>UnsafeCell</code>) is <code>Send</code>.</p>",
        "id": 204248952,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1595014381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> what speaks against putting the RFC draft into the safe-transmute working group repo so that it's a tiny bit more visibile? We don't have to advertise its existence, but it's in a complete enough form that I think encouraging some feedback and using GitHub's commenting features would be useful.</p>",
        "id": 204786729,
        "sender_full_name": "rylev",
        "timestamp": 1595505380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> I'm using HackMD's <code>:::danger</code> and <code>:::warning</code> blocks to highlight TODOs. Github Markdown doesn't support these, so I'd like to at least resolve the last few urgent todos (<code>:::danger</code>) before moving to Github.</p>",
        "id": 204811558,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1595517571
    },
    {
        "content": "<p>Nailing down the rules around aliasing/send/sync are the last major TODO.</p>",
        "id": 204815074,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1595519318
    },
    {
        "content": "<p>Resolution: <span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span>  and I think we can punt on figuring out Send/Sync/UnsafeCell stuff merely by forcing the requirement of field visibility. Accordingly, I've removed the recommendation for a <code>NeglectVisibility</code> option, and will add some text about why permitting visibility to be neglected has unexpected consequences beyond library-imposed validity invariants.</p>",
        "id": 205611398,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1596212836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/RFC.3A.20Send.2FSync.2FUnsafeCell.2FUniqueness/near/204248952\">said</a>:</p>\n<blockquote>\n<p>Another set of examples:</p>\n<ul>\n<li><code>&amp;u8 ⇒ &amp;UnsafeCell&lt;u8&gt;</code> fine, since subsequent operations on <code>UnsafeCell</code> are <code>unsafe</code></li>\n<li><code>&amp;u8 ↛ &amp;AtomicU8</code> not fine, since there might be other <code>&amp;u8</code> kicking around doing unsynchronized loads</li>\n</ul>\n<p>In these examples, the big difference is that <code>UnsafeCell</code> is <code>!Send</code>, but <code>AtomicU8</code> (which contains an <code>UnsafeCell</code>) is <code>Send</code>.</p>\n</blockquote>\n<p>Nit: <a href=\"https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#impl-Send\"><code>UnsafeCell</code> is <code>Send</code></a> (which is normal, since <code>UnsafeCell</code> does not do anything with exclusive access), it's actually <code>!Sync</code></p>\n<p>An interesting op , too, is that <code>&amp;mut u8 ⇒ &amp;UnsafeCell&lt;u8&gt;</code> is fine too</p>",
        "id": 210725684,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1600685414
    }
]