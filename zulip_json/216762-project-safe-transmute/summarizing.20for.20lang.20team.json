[
    {
        "content": "<p>Hey do you think somebody from this group could post a quick update to <a href=\"https://github.com/rust-lang/lang-team/issues/21\">https://github.com/rust-lang/lang-team/issues/21</a> to give a status update on the discussions around the rfc? (cc <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> or <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ). Sometime before monday triage would be awesome</p>",
        "id": 215124970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604078432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> when do you expect your latest revision to be available for others to view? I think the RFC is reaching a great place after the back-and-forth with Boats and Ralf. I'm happy to write the summary if it helps you focus on the RFC proper.</p>",
        "id": 215125249,
        "sender_full_name": "rylev",
        "timestamp": 1604078556
    },
    {
        "content": "<p>I'll have the latest revision done within the next hour!</p>",
        "id": 215125521,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604078676
    },
    {
        "content": "<p>Would you like to write the summary for the issue or do you want me to?</p>",
        "id": 215125755,
        "sender_full_name": "rylev",
        "timestamp": 1604078780
    },
    {
        "content": "<p>Could you take a stab at it?</p>",
        "id": 215126111,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604078940
    },
    {
        "content": "<p>(I can definitely pitch in when free moments arise, and confirm that it's accurate.)</p>",
        "id": 215126134,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604078954
    },
    {
        "content": "<p>I’ll get it to you very first thing Monday morning</p>",
        "id": 215155841,
        "sender_full_name": "rylev",
        "timestamp": 1604095317
    },
    {
        "content": "<p>I've added an update: <a href=\"https://github.com/rust-lang/lang-team/issues/21#issuecomment-720384232\">https://github.com/rust-lang/lang-team/issues/21#issuecomment-720384232</a>. Let me know if you something should be added, removed, corrected, etc.</p>",
        "id": 215301383,
        "sender_full_name": "rylev",
        "timestamp": 1604313047
    },
    {
        "content": "<p>Thanks for the update!  A question I had: does losing <code>Here!</code> also imply that the <code>transmute!</code> macro interface is going away?  (I'd had a bunch of interface comments queued up about trait layout given the macro...)</p>",
        "id": 215371767,
        "sender_full_name": "scottmcm",
        "timestamp": 1604347848
    },
    {
        "content": "<p><code>transmute!</code> is still there! We <em>could</em> ditch it though, since it mostly existed to improve the ergonomics of <code>Here!()</code>.</p>",
        "id": 215372021,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604347987
    },
    {
        "content": "<p>Writing <code>transmute!()</code> is certainly a lot shorter than <code>TransmuteFrom::&lt;_, _,&gt;::transmute_from</code>, but the issue <em>has</em> been raised a few times (first with <code>TransmuteInto</code>) that perhaps transmutation <em>shouldn't</em> be ergonomic.</p>",
        "id": 215372470,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604348224
    },
    {
        "content": "<p>I think we do want the <em>safe</em> one to be more ergonomic than <code>unsafe { mem::transmute(foo) }</code>.</p>\n<p>(I don't know what that ends up meaning in the end, though.)</p>",
        "id": 215372647,
        "sender_full_name": "scottmcm",
        "timestamp": 1604348318
    },
    {
        "content": "<p>We say that right now you <em>shouldn't</em> do that, saying it should always be <code>unsafe { mem::transmute::&lt;Foo, Bar&gt;(foo) }</code>, but we don't force that in any way AFAIK.  (Maybe clippy does?)</p>",
        "id": 215372895,
        "sender_full_name": "scottmcm",
        "timestamp": 1604348450
    },
    {
        "content": "<p>I don't use clippy much since RA doesn't support it well, but when I did use clippy I don't remember it ever telling me to make transmute more explicit in the types.</p>",
        "id": 215373138,
        "sender_full_name": "Lokathor",
        "timestamp": 1604348554
    },
    {
        "content": "<p>(I just <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html\">checked</a>; it looks like you're right.  There are some specific cases, but nothing about turbofishing.)</p>",
        "id": 215374190,
        "sender_full_name": "scottmcm",
        "timestamp": 1604349019
    },
    {
        "content": "<p>When this RFC had <code>transmute_into</code>, <em>that</em> was maybe even more ergonomic:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">transmute_into</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215376876,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604350272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/summarizing.20for.20lang.20team/near/215372470\">said</a>:</p>\n<blockquote>\n<p>Writing <code>transmute!()</code> is certainly a lot shorter than <code>TransmuteFrom::&lt;_, _,&gt;::transmute_from</code></p>\n</blockquote>\n<p>Wouldn't you often write <code>ConcreteType::transmute_from</code>?</p>",
        "id": 215379627,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604351624
    },
    {
        "content": "<p>(Also, yes, I'd love to have <code>transmute_into</code>, and I expect that if it isn't available in the RFC people will invent it. What was the rationale for removing it, again?)</p>",
        "id": 215379743,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604351686
    },
    {
        "content": "<p>Yep, that's a fair point. <code>transmute!()</code> maybe isn't a huge win over <code>ConcreteType::transmute_from</code>.</p>",
        "id": 215379781,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604351711
    },
    {
        "content": "<p>Also, in cases where you have enough information for type inference, you <em>could</em> just write <code>TransmuteFrom::transmute_from</code>, and we've talked about being able to write things like <code>use Default::default</code> which would cover this case as well.</p>",
        "id": 215379943,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604351788
    },
    {
        "content": "<p>Or, in the interim, we could provide a free function <code>fn transmute_from</code> that calls <code>TransmuteFrom::transmute_from</code>.</p>",
        "id": 215380041,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604351836
    },
    {
        "content": "<p>Though I <em>do</em> think it's still really handy to be able to append <code>.transmute_into()</code>.</p>",
        "id": 215380077,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604351854
    },
    {
        "content": "<p>Given all of the above, I <em>do</em> think we should drop the <code>transmute!</code> macro in favor of functions.</p>",
        "id": 215380110,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604351874
    },
    {
        "content": "<p>Chiefly, because the RFC was getting long, it was <em>solely</em> an ergonomic nicety, and keeping <code>TransmuteInto</code> updated with changes to the RFC was just adding labor; it'd be easy to add back on once the dust settles.</p>\n<p>That said, I've also had a niggling worry about what people write on <code>where</code> bounds. If a function has a where bound with <code>TransmuteFrom</code>, you need to repeat <em>that</em> <code>where</code> bound in any generic context that invokes that function—<em>not</em> <code>TransmuteInto</code>.</p>\n<p>If people are writing both <code>TransmuteFrom</code> and <code>TransmuteInto</code> in various places, I'm concerned about creating a situation where someone has to write something truly silly like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>: <span class=\"nc\">TransmuteFrom</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span>: <span class=\"nc\">TransmuteInto</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215380600,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604352108
    },
    {
        "content": "<p>We could have a sealed <code>TransmuteInto</code> trait with a single blanket impl.</p>",
        "id": 215381723,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604352654
    },
    {
        "content": "<p>Is the compiler always smart enough to understand that <code>TransmuteFrom</code> and <code>TransmuteInto</code> imply each other? I wasn't sure of this.</p>",
        "id": 215381917,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604352732
    },
    {
        "content": "<p>I'm not sure either.</p>",
        "id": 215381995,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604352779
    },
    {
        "content": "<p>This is why I'm definitely going to keep running <code>bytemuck</code> after this all lands. Hard to beat the elegance of <code>cast(val)</code></p>",
        "id": 215382019,
        "sender_full_name": "Lokathor",
        "timestamp": 1604352789
    },
    {
        "content": "<p>It <em>should</em> be smart enough to do that in one direction, always.</p>",
        "id": 215382022,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604352790
    },
    {
        "content": "<p>I don't know if it's smart enough to go backwards.</p>",
        "id": 215382054,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604352803
    },
    {
        "content": "<p>In any case, adding <code>TransmuteInto</code> seems like it can happen after we finalize the RFC.</p>",
        "id": 215382082,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604352821
    },
    {
        "content": "<p><code>TransmuteFrom::transmute_from</code> isn't bad.</p>",
        "id": 215382094,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604352828
    },
    {
        "content": "<p>And a free function <code>transmute_from</code> would be even better.</p>",
        "id": 215382107,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604352838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/summarizing.20for.20lang.20team/near/215381917\">said</a>:</p>\n<blockquote>\n<p>Is the compiler always smart enough to understand that <code>TransmuteFrom</code> and <code>TransmuteInto</code> imply each other? I wasn't sure of this.</p>\n</blockquote>\n<p>I'd been meaning to comment about this, actually.</p>\n<p>I was wondering whether all these traits should be empty so that they could in the future be made <code>#[marker]</code> traits.</p>\n<p>Which would imply we'd want a free function or macro or extension trait or something to be the ergonomic option.</p>",
        "id": 215382168,
        "sender_full_name": "scottmcm",
        "timestamp": 1604352865
    },
    {
        "content": "<p>Alternatively, it could be a reason to revisit the \"marker traits can have associated items, just not override them\".</p>\n<p>There's another side to that of \"would it ever be sane for someone to override one of these methods\"?  It feels like no...</p>",
        "id": 215382274,
        "sender_full_name": "scottmcm",
        "timestamp": 1604352928
    },
    {
        "content": "<p>Hard to imagine any scenario where you'd override <code>transmute_from</code>, yeah.</p>",
        "id": 215383383,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604353489
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for making them marker traits.</p>",
        "id": 215383692,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604353643
    },
    {
        "content": "<p>\"Out there\" idea: the free function is just <code>mem::transmute</code>, which is unsafe if the trait bound isn't met.</p>\n<p>(It's already special, as an intrinsic export, so it's not completely implausible.  That said, it can't be turned into a function pointer today because it's magic, and <code>.map(safe_transmute_thing)</code> would be a reasonable thing to do with the safe version, so maybe that's enough of a reason to consider it a bad idea -- atop the \"conditional unsafety is too magic\" ones.)</p>",
        "id": 215385813,
        "sender_full_name": "scottmcm",
        "timestamp": 1604354752
    },
    {
        "content": "<p>I would rather <em>not</em> have <code>transmute</code> be safe/unsafe depending on a marker trait.</p>",
        "id": 215385905,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604354814
    },
    {
        "content": "<p>Because even in an unsafe block, I'd like to know if I'm invoking a safe or unsafe transmute.</p>",
        "id": 215385923,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604354825
    },
    {
        "content": "<p>A perk of <code>TransmuteFrom</code> having a <code>transmute_from</code> method is that, as <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> points out, you often just write <code>ConcreteType:transmute_from</code>, which makes the destination type explicit. This is in contrast to <code>mem::transmute</code>, where the most natural thing to do is to elide the turbofish.</p>",
        "id": 215386113,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604354945
    },
    {
        "content": "<p>With a free function you end up writing it<br>\n<code>let bar: BarType = transmute(foo);</code><br>\nAnd as an associated function you end up writing<br>\n<code>let bar = BarType::transmute_from(foo);</code><br>\nSo it's basically all the same anyway.</p>",
        "id": 215386516,
        "sender_full_name": "Lokathor",
        "timestamp": 1604355126
    },
    {
        "content": "<p>You could also just have an extension trait with a blanket impl and love the current one a marker.</p>",
        "id": 215386648,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1604355231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>  What's the advantage of a free function, as opposed to a method?</p>",
        "id": 215386725,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1604355278
    },
    {
        "content": "<p>FWIW, there is also the option of non-elidable turbofish: <code>&lt;expr&gt;.transmute_into::&lt;ConcreteType&gt;()</code>. It's worse than <code>ConcreteType::transmute_from(&lt;expr&gt;)</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  but has the advantage of playing better with method chains.<br>\nTo get non-elidable turbofish, you add a new param, say <code>U</code> with the bound <code>U : Is&lt;EqTo = T&gt;</code>, where:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">EqTo</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">EqTo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1185614d08f4dbc6adac0e0406cc960c\">Demo</a></li>\n</ul>",
        "id": 215393504,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1604359989
    }
]