[
    {
        "content": "<p>Just because you <em>can</em> newtype your way out of some holes <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Incremental.20Approach/near/218253083\">doesn't mean that's a satisfactory solution</a>, as <span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> observes. The places where safe transmutation will have the biggest impact is on modules that are currently rife with unsafe code. Asking end-users to totally refactor the innards of their unsafe types is <em>asking</em> for user-error.</p>\n<p>The right thing to do should be the easy thing to do.</p>",
        "id": 218320527,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606758395
    },
    {
        "content": "<p>What makes the newtype pattern a total refactor? It should only really affect the edges of the module. Do you have some specific scenarios in mind where you can't see a way to avoid more invasive changes? And are those scenarios really worth the costs of having <code>Scope</code> in the API forever?</p>",
        "id": 218325401,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606760797
    },
    {
        "content": "<p>You'll need to adjust all of your field accesses. How complex of a refactor this is depends on how much you manipulate fields directly, and the visibility of those fields.</p>",
        "id": 218328391,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606762165
    },
    {
        "content": "<p>The existence of a scope-aware foundational API doesn't preclude the existence of a scope-unaware <code>Muckable</code> abstraction. If you think the cognitive cost of <code>Scope</code> is higher than <code>Muckable</code>, you simply don't have to pay it â€” you can just use <code>Muckable</code> instead.</p>",
        "id": 218328576,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606762246
    },
    {
        "content": "<p>That's not how costs work at this level. If <code>Scope</code> exists in the API, people will use it, and thus people will encounter it. We've long established that <code>Scope</code> is a totally new idiom for a situation that the existing ecosystem handles differently, so its mere existence expands the set of idioms people will need to deal with.</p>",
        "id": 218329971,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606762834
    },
    {
        "content": "<p>Field access through newtypes, on the other hand, has been around for a long time. You can mitigate the amount of change by some additional boilerplate (e.g. delegation from newtype methods to existing, now-internal methods) or by judiciously inserting <code>.0</code> or <code>Newtype(inner)</code> syntax in various places.</p>",
        "id": 218330215,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606762948
    },
    {
        "content": "<p>So again: do you have any more specific scenarios in mind? I'm well aware that \"use the existing boilerplate-y idioms\" is not perfect, but I'm weighing that against the cost of an entirely new idiom that everyone involved keeps saying might/should go away in the future!</p>",
        "id": 218330484,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606763059
    },
    {
        "content": "<p>I totally expect people will use the foundational API. I also totally expect people (especially library authors) will also use the stability-unaware API that connotes SemVer stability.</p>",
        "id": 218330598,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606763136
    },
    {
        "content": "<p>And yes, I do have other scenarios in mind. I'm going to continue to create topics for each scenario that I recall having been raised up till now.</p>",
        "id": 218330789,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606763220
    },
    {
        "content": "<p>The topics you've created so far are not addressing my question...</p>",
        "id": 218330847,
        "sender_full_name": "rpjohnst",
        "timestamp": 1606763251
    },
    {
        "content": "<p>Well, I hope I manage to address it with one of these topics by the time I finish. Failing that, I hope to convince at least a subset of \"everyone involved\" that <code>Scope</code> isn't a boogeyman. (And no, not \"everyone involved\" thinks <code>Scope</code> shouldn't exist...)</p>",
        "id": 218331105,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606763357
    },
    {
        "content": "<p>Safe transmutation based on compiler-supported layout reflection is, itself, a new idiom. I hope to demonstrate that <code>Scope</code> parameter is a good complement to it.</p>",
        "id": 218331270,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606763421
    },
    {
        "content": "<p>Anyways, yes: the newtype pattern is well-established. However, using field visibility to achieve encapsulation is <em>also</em> an established idiom. And field visibility is <em>precisely</em> what separates a safe transmutation from one that's merely well-defined.</p>",
        "id": 218331653,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606763603
    }
]