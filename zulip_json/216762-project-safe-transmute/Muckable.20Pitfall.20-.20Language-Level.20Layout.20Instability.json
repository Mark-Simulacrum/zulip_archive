[
    {
        "content": "<p>In our zulip-current design, implementing the <code>Muckable</code> traits denotes that the subject type has a SemVer stable layout. Crucially, the ordering of fields must be totally fixed.</p>\n<p>This is a tractable guarantee for <code>#[repr(C)]</code> types (whose layout is wholly specified), but not necessarily for <code>#[repr(Rust)]</code> types (whose layout will probably never be wholly specified).</p>\n<p>For instance, consider a future <code>#[repr(Rust)]</code> type for which all layout qualities <em>except</em> field order is specified. Such a type cannot possibly be <code>Muckable</code> â€” that connotes a SemVer layout promise that the type's author simply cannot make.</p>\n<p>Field order instability is just <em>one</em> potential way this issue might play out. There are others. For instance, the layout guarantees of <code>#[repr(C)]</code> types dictates that padding bytes are uninitialized. This isn't promised for <code>#[repr(Rust)]</code> types, and there are compelling reasons for zeroed-initialized padding. We can imagine a <code>#[repr(Rust)]</code> type for which all layout qualities <em>except</em> padding (un)initialization is specified.</p>",
        "id": 218336402,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606765847
    },
    {
        "content": "<p>TL;DR: <code>Muckable</code> is tuned <em>really</em> well for <code>#[repr(C)]</code> types, but not for reprs with some language-level layout instability.</p>",
        "id": 218336463,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1606765883
    }
]