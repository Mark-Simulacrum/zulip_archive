[
    {
        "content": "<p>I've created a repo for defining base marker traits that can be shared among all implementations of safe transmute. Again, the idea is that this repo would be the launching pad for any traits that would wind up in the std lib. Here is the first issue for discussing FromBytes/AsBytes <a href=\"https://github.com/rylev/mem-markers/issues/1\" target=\"_blank\" title=\"https://github.com/rylev/mem-markers/issues/1\">https://github.com/rylev/mem-markers/issues/1</a> (note: this is on my personal GitHub until we can transfer to the rust-secure-code organization)</p>",
        "id": 190373635,
        "sender_full_name": "rylev",
        "timestamp": 1584008094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> <span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span> one thing I would love to talk more about is how useful these marker traits are or are not to Typic</p>",
        "id": 190412189,
        "sender_full_name": "rylev",
        "timestamp": 1584031020
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> the repo has been moved: <a href=\"https://github.com/rust-secure-code/mem-markers\" target=\"_blank\" title=\"https://github.com/rust-secure-code/mem-markers\">https://github.com/rust-secure-code/mem-markers</a></p>",
        "id": 190416583,
        "sender_full_name": "rylev",
        "timestamp": 1584033011
    },
    {
        "content": "<p>I've invited some people as admins to this repo but I'm sure I'm forgetting someone. If you want write access and did not receive an invite, ping me</p>",
        "id": 190417018,
        "sender_full_name": "Shnatsel",
        "timestamp": 1584033249
    },
    {
        "content": "<p>I'd like to start implementing some of the traits. Does anyone have any objections to this: <a href=\"https://github.com/rust-secure-code/mem-markers/issues/1\" target=\"_blank\" title=\"https://github.com/rust-secure-code/mem-markers/issues/1\">https://github.com/rust-secure-code/mem-markers/issues/1</a>. I assume this crate also will support custom derives for each of them. Any objections to that?</p>",
        "id": 191230223,
        "sender_full_name": "rylev",
        "timestamp": 1584704152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> <span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span> I'd also love to hear from you two since it's the least clear how well this plays into a typic style solution</p>",
        "id": 191230330,
        "sender_full_name": "rylev",
        "timestamp": 1584704201
    },
    {
        "content": "<p>I've left comments addressing your question on the github issue: <a href=\"https://github.com/rust-secure-code/mem-markers/issues/1#issuecomment-601810244\" target=\"_blank\" title=\"https://github.com/rust-secure-code/mem-markers/issues/1#issuecomment-601810244\">https://github.com/rust-secure-code/mem-markers/issues/1#issuecomment-601810244</a></p>",
        "id": 191273586,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1584724511
    },
    {
        "content": "<p>I think that ToBytes and FromBytes are perhaps too broad and could be broken up into sub-markers and then you have ToBytes any time you have NoUninit and also FixedLayout</p>",
        "id": 191302891,
        "sender_full_name": "Lokathor",
        "timestamp": 1584738598
    },
    {
        "content": "<p>But they should exist somewhere, so feel free to go ahead.</p>",
        "id": 191303082,
        "sender_full_name": "Lokathor",
        "timestamp": 1584738688
    },
    {
        "content": "<p>Finally got to implementing some of the marker traits stuff. Here's a PR that implements FixedLayout (on any type that has a fixed layout): <a href=\"https://github.com/rust-secure-code/mem-markers/pull/7\" title=\"https://github.com/rust-secure-code/mem-markers/pull/7\">https://github.com/rust-secure-code/mem-markers/pull/7</a> It's not complete but puts the beginnings in place. I want to work on a NoUninit trait but I'm not sure how I'll do it. It's to tell if fields are NoUninit, but we'd need to have some idea of size of types to calculate if there is padding. Any ideas on this are welcome :-)</p>",
        "id": 194050327,
        "sender_full_name": "rylev",
        "timestamp": 1586965346
    },
    {
        "content": "<p>It might be easier to do a <code>ByteComplete</code> trait which says that a type is valid no matter what bytes compromise it. I believe <code>FromBytes: FixedLayout + ByteComplete</code></p>",
        "id": 194051273,
        "sender_full_name": "rylev",
        "timestamp": 1586965741
    },
    {
        "content": "<p>I unfortunately can't come up with a way to calculate type sizes at compile time and make compile decisions based on them. So I'm not sure how ToBytes can be done.</p>",
        "id": 194310698,
        "sender_full_name": "rylev",
        "timestamp": 1587046627
    },
    {
        "content": "<p>I guess I will go with how zerocopy does it where they divide by zero in a const expression</p>",
        "id": 194313389,
        "sender_full_name": "rylev",
        "timestamp": 1587047721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> NoUninit means 99% of the time no padding. But are there any cases where it's interesting to know a type is NoUninit but is ?HasPadding?</p>",
        "id": 194323161,
        "sender_full_name": "rylev",
        "timestamp": 1587051250
    },
    {
        "content": "<p>I don't think a type can even have padding bytes that are not uninit</p>",
        "id": 194323983,
        "sender_full_name": "Lokathor",
        "timestamp": 1587051562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I mean a type can have uninit bytes that are not padding</p>",
        "id": 194325383,
        "sender_full_name": "rylev",
        "timestamp": 1587052096
    },
    {
        "content": "<p>So there is a subtle distinction between a type with no padding and a type with no uninit bytes.</p>",
        "id": 194325511,
        "sender_full_name": "rylev",
        "timestamp": 1587052148
    },
    {
        "content": "<p>oh, right</p>",
        "id": 194325688,
        "sender_full_name": "Lokathor",
        "timestamp": 1587052216
    },
    {
        "content": "<p>yeah NoUninit is the stronger claim</p>",
        "id": 194325712,
        "sender_full_name": "Lokathor",
        "timestamp": 1587052226
    },
    {
        "content": "<p>So the question is, should we make a distinction?</p>",
        "id": 194325952,
        "sender_full_name": "rylev",
        "timestamp": 1587052320
    },
    {
        "content": "<p>Should there be a <code>NoPadding</code> trait and a <code>NoUninit: NoPadding</code> trait?</p>",
        "id": 194326099,
        "sender_full_name": "rylev",
        "timestamp": 1587052362
    },
    {
        "content": "<p>MaybeUninit&lt;u8&gt; is NoPadding but it's not NoUninit</p>",
        "id": 194326244,
        "sender_full_name": "rylev",
        "timestamp": 1587052416
    },
    {
        "content": "<p>I don't see the value in NoPadding on it own</p>",
        "id": 194329229,
        "sender_full_name": "Lokathor",
        "timestamp": 1587053574
    },
    {
        "content": "<p>it doesn't let you do anything different</p>",
        "id": 194329295,
        "sender_full_name": "Lokathor",
        "timestamp": 1587053610
    },
    {
        "content": "<p>The only thing I can see there is that you can be guranteed that it's packed. But I guess if you cared you would do <code>repr(packed)</code></p>",
        "id": 194329351,
        "sender_full_name": "rylev",
        "timestamp": 1587053637
    },
    {
        "content": "<p>I'm trying to think of these as more than just traits for safe transmute. There will be other uses for such traits outside of straight transmute</p>",
        "id": 194329508,
        "sender_full_name": "rylev",
        "timestamp": 1587053701
    },
    {
        "content": "<p>Sure, even outside of a transmuting context, I can't think of a single way to be able to do anything with a type once you know that it has no padding bytes, compared to what you could do before you knew that.</p>\n<p>In other words, if you have <code>T: Foo + Bar</code> and then make it <code>T: Foo + Bar + NoPadding</code>, I can't imagine a single new thing that you'd be able to do just because of adding that extra bound of <code>NoPadding</code>.</p>",
        "id": 194357819,
        "sender_full_name": "Lokathor",
        "timestamp": 1587066482
    },
    {
        "content": "<p>The only things I can think of are effectively tantamount to transmuting, yeah.</p>",
        "id": 194373588,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587074830
    },
    {
        "content": "<p>I can't think of something you can do with a type if you know that it has no padding but has undefined values for some of its fields, or vice versa.</p>",
        "id": 194373635,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587074861
    },
    {
        "content": "<p>Only things you can do if you know both that it has no padding <em>and</em> has no undefined values.</p>",
        "id": 194373648,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587074875
    },
    {
        "content": "<p>Or things you can do if you know specifics of the types of its fields.</p>",
        "id": 194373694,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1587074884
    },
    {
        "content": "<p>It'd be great for people to check out the latest on master. We now have the beginnings of FixedLayout, NoUninit, ByteComplete, FromBytes and ToBytes. In particular do we think that these traits capture their invariants properly? Are there other invariants that are subtly being captured that would better be moved into another trait. Obviously invariants about size and alignment are not captured, but I believe everything else for a safe transmute is there (though of course a transmute that relies on these traits plus size and alignment invariants is naturally conservative).</p>",
        "id": 194407296,
        "sender_full_name": "rylev",
        "timestamp": 1587111046
    },
    {
        "content": "<p>I'm not sure we're ready to answer this: but I'm constantly wondering if these traits would be useful in std. <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span> and <span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span> are going down the route of capturing layout in the type system so we can make adhoc judgement of whether two types are safely transmutable. This a great and super powerful/flexible way to address transmute. The mem markers in the mem-markers repo are a bit less fine grained and thus a bit less powerful in what they can do then Typic, but perhaps they provide guarantees around invariants that are also interesting outside of transmute and would thus be useful. Anyway, I'd like to start capturing usecases outside of transmute that these traits would be useful for.</p>",
        "id": 194407735,
        "sender_full_name": "rylev",
        "timestamp": 1587111325
    },
    {
        "content": "<p>For example, while it's not complete knowing a type is FixedLayout is useful for ensuring safe FFI. A type must be fixed layout for it to be safe to marshal across FFI boundaries.</p>",
        "id": 194408082,
        "sender_full_name": "rylev",
        "timestamp": 1587111523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Can I get your (or anyone else's) thoughts on the question of the usefulness of <code>ByteComplete</code> as distinguished from <code>FromBytes</code>: <a href=\"https://github.com/rust-secure-code/mem-markers/issues/14\" title=\"https://github.com/rust-secure-code/mem-markers/issues/14\">https://github.com/rust-secure-code/mem-markers/issues/14</a></p>",
        "id": 194411942,
        "sender_full_name": "rylev",
        "timestamp": 1587113869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> trying my hardest to think of cases where it's useful to know that a type is NoPadding . I have one though it's a bit of a stretch. Say you need to allocate a buffer of memory to fit a type and you happen to know the sum of the sizes of the fields of that type, you can know that allocating size_of_fields bytes is enough space for the parent type as a whole because it has no padding. So there's no reason for an extra call to size_of. But seeing as how size of is a const function, I guess this doesn't matter.</p>",
        "id": 194414915,
        "sender_full_name": "rylev",
        "timestamp": 1587115587
    }
]