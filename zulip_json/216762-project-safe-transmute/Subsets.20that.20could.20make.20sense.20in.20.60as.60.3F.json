[
    {
        "content": "<p>One thing that the <code>Scope</code> conversations made me think is that <code>as</code> could be a place where it might seem logical for the language to let you do more with your own types.</p>\n<p>I'm imagining things like allowing <code>&amp;T</code>&lt;-&gt;<code>&amp;Wrapper&lt;T&gt;</code> with just <code>#[repr(transparent)]</code> inside the crate in places where you have access to the fields.</p>\n<p>I don't know if that's a good idea, or even extends usefully to other transmute checks...</p>",
        "id": 218780470,
        "sender_full_name": "scottmcm",
        "timestamp": 1607047980
    },
    {
        "content": "<p>i saw the other discussion where some people made the claim that <code>as</code> isn't explicit enough.</p>\n<p>While I mostly don't agree with them, I do at least think that we should avoid making <em>new</em> uses for <code>as</code> if there's any way to not expand this already-overloaded keyword even more.</p>",
        "id": 218852033,
        "sender_full_name": "Lokathor",
        "timestamp": 1607097670
    },
    {
        "content": "<p>That's a really neat idea. On a whole, though, <code>as</code> makes me nervous. On some types, it's a bit-reinterpreting conversion (pointer casts, <code>bool -&gt; u8</code>, (un)signed numeric casts), and on others its a logical conversion (numeric casts involving floats), and in at least one case (enum casts) it depends on the layout details of the enum. I've never been able to totally square <code>as</code> in my head with <code>From</code>, either.</p>",
        "id": 218858030,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1607100195
    },
    {
        "content": "<p>A quirk of your idea, <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span>, is that it <em>might</em> conflict with some enhancements to <code>as</code> <em>other</em> groups are calling for, namely making it a <code>core::op</code> trait. If <code>as</code> permits <code>&amp;T&lt;-&gt;&amp;Wrapper&lt;T&gt;</code> <em>inside</em> the defining crate, <em>and</em> permits overriding with <code>core::op::As</code>, then uses of <code>as</code> <em>inside the defining crate of <code>Wrapper</code></em> potentially become ambiguous.</p>",
        "id": 218858485,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1607100383
    },
    {
        "content": "<p>Well I didn't get into rust until 1.16 but <code>as</code> really reads to me like \"we (ergonomically) have to be able to convert numbers easily like C does, but we don't know what the traits for it are supposed to be, so we'll just allow this crazy ad-hoc thing\".</p>",
        "id": 218878447,
        "sender_full_name": "Lokathor",
        "timestamp": 1607109148
    },
    {
        "content": "<p>AFAIK, the last bastion of <code>as</code>'s necessity is extracting certain enum discriminants. It's the <em>only</em> mechanism for doing this. Unfortunately, it's also a very <em>lossy</em> and <em>incomplete</em> mechanism for doing this. :(</p>",
        "id": 218878657,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1607109255
    },
    {
        "content": "<p>You can use a macro to define the discriminant extracting function, although it feels like the sort of \"zero cost abstraction\" that might impact the optimizer in an unforeseen way</p>",
        "id": 218880782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607110375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219211\">Jack Wrenn</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Subsets.20that.20could.20make.20sense.20in.20.60as.60.3F/near/218878657\">said</a>:</p>\n<blockquote>\n<p>AFAIK, the last bastion of <code>as</code>'s necessity is extracting certain enum discriminants. It's the <em>only</em> mechanism for doing this. Unfortunately, it's also a very <em>lossy</em> and <em>incomplete</em> mechanism for doing this. :(</p>\n</blockquote>\n<p>The library is getting closer to being able to do this -- internally it's now <code>pub struct Discriminant&lt;T&gt;(&lt;T as DiscriminantKind&gt;::Discriminant);</code>, which would be able to provide that value; one just needs to figure out a sane way to do so.</p>\n<p>Assuming we got <code>num::WrappingFrom</code>, I could imagine <code>u32::wrapping_from(mem::discriminant(&amp;Ordering::Less))</code>, for example.  I think that would be a perfect match for what <code>as</code> does semantically today.  (Though it's certainly way longer.)</p>\n<p>I don't think that's the last one, thought.  A saturating conversion from <code>u128</code> to <code>f32</code> is also only available via <code>as</code>, for example.</p>",
        "id": 218883843,
        "sender_full_name": "scottmcm",
        "timestamp": 1607112000
    },
    {
        "content": "<p>I've always been a little surprised there isn't an intrinsic trait in <code>mem</code> like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Enum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Discriminant</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">discriminant</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Discriminant</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...that's automatically implemented for all enums where the discriminant<br>\nis well-defined.</p>",
        "id": 218884292,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1607112183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Subsets.20that.20could.20make.20sense.20in.20.60as.60.3F/near/218852033\">said</a>:</p>\n<blockquote>\n<p>i saw the other discussion where some people made the claim that <code>as</code> isn't explicit enough.</p>\n<p>While I mostly don't agree with them, I do at least think that we should avoid making <em>new</em> uses for <code>as</code> if there's any way to not expand this already-overloaded keyword even more.</p>\n</blockquote>\n<p>I'm one of those people who agree that <code>as</code> isn't a good choice for the <em>lossy</em> things it can do, and would like to move those to methods with names describing the intent.</p>\n<p>But if those were warned against, I think I'd be ok with more uses of <code>as</code> -- it's the weird kinds of <code>as</code> that make me want to use <code>from</code> instead.</p>",
        "id": 218884372,
        "sender_full_name": "scottmcm",
        "timestamp": 1607112213
    },
    {
        "content": "<p>but i only use <code>as</code> in the lossy way</p>",
        "id": 218892721,
        "sender_full_name": "Lokathor",
        "timestamp": 1607116901
    },
    {
        "content": "<p>My general thought here has been that it's weird that <code>as</code> allows <code>i32 -&gt; u32</code>, but not <code>&amp;i32 -&gt; &amp;u32</code>.  It would be arguably more consistent for it to allow both or neither.  (There's a reasonable discussion about which of those two would be better, but I really can't see anything that makes the reference conversion bad if the value conversion is good.)</p>",
        "id": 218892974,
        "sender_full_name": "scottmcm",
        "timestamp": 1607117054
    }
]