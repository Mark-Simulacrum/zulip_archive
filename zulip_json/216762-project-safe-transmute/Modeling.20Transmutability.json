[
    {
        "content": "<p>I'd like to model out the transmutability rules of the RFC. I've already done this with Typic, but type-level programming isn't exactly a great way to communicate a spec.</p>",
        "id": 209203744,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599356301
    },
    {
        "content": "<p>I'm currently poking around with <a href=\"https://docs.racket-lang.org/redex/\">Redex</a>. It makes trivial things which are useful for modeling, like flattening products-of-sums into sums-of-products:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n\n<span class=\"p\">(</span><span class=\"k\">require</span> <span class=\"n\">redex</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">define-language</span>\n  <span class=\"n\">Type</span>\n\n  <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"n\">::=</span>\n     <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">t</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"c1\">; enums</span>\n     <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">t</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"c1\">; structs</span>\n     <span class=\"n\">variable</span><span class=\"p\">)</span> <span class=\"c1\">; primitives</span>\n\n  <span class=\"p\">(</span><span class=\"n\">C</span> <span class=\"n\">::=</span>\n     <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">t</span> <span class=\"k\">...</span> <span class=\"n\">C</span> <span class=\"n\">t</span> <span class=\"k\">...</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">t</span> <span class=\"k\">...</span> <span class=\"n\">C</span> <span class=\"n\">t</span> <span class=\"k\">...</span><span class=\"p\">)</span>\n     <span class=\"n\">hole</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">distribute</span>\n  <span class=\"p\">(</span><span class=\"n\">reduction-relation</span>\n   <span class=\"n\">Type</span>\n   <span class=\"p\">(</span><span class=\"n\">--&gt;</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">t_a</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"n\">t_m</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">t_a</span> <span class=\"n\">t_m</span><span class=\"p\">)</span> <span class=\"k\">...</span><span class=\"p\">)))</span>\n\n   <span class=\"p\">(</span><span class=\"n\">--&gt;</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">t_m</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">t_a</span> <span class=\"k\">...</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">t_a</span> <span class=\"n\">t_m</span><span class=\"p\">)</span> <span class=\"k\">...</span><span class=\"p\">)))</span>\n  <span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nb\">flatten</span> <span class=\"n\">term</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">apply-reduction-relation*</span> <span class=\"n\">distribute</span> <span class=\"n\">term</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">test-equal</span>\n <span class=\"p\">(</span><span class=\"nb\">flatten</span> <span class=\"p\">(</span><span class=\"n\">term</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">c</span><span class=\"p\">)))</span>\n <span class=\"o\">&#39;</span><span class=\"p\">((</span><span class=\"ss\">+</span> <span class=\"p\">(</span><span class=\"ss\">×</span> <span class=\"ss\">a</span> <span class=\"ss\">c</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">×</span> <span class=\"ss\">b</span> <span class=\"ss\">c</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">test-results</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 209204053,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599356885
    },
    {
        "content": "<p>It's been a few years since I've poked at Redex, so if any of y'all have a knack for programming language theory or Racket, I'd love to collab.</p>",
        "id": 209204224,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599357291
    },
    {
        "content": "<p>If you're interested in modeling transmutability in some other medium, I'm also happy to collaborate! I have a really crisp idea of how everything interacts from working with typic.</p>",
        "id": 209204355,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599357574
    },
    {
        "content": "<p>Here's a <em>very</em> basic model of transmutability, without references or options:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n\n<span class=\"p\">(</span><span class=\"k\">require</span> <span class=\"n\">redex</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">define-language</span>\n  <span class=\"n\">layouts</span>\n\n  <span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"n\">::=</span>\n     <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"c1\">; enums</span>\n     <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"c1\">; structs</span>\n     <span class=\"n\">number</span>    <span class=\"c1\">; exact value</span>\n     <span class=\"n\">uninit</span>    <span class=\"c1\">; uninit</span>\n     <span class=\"p\">]</span>\n\n  <span class=\"p\">[</span><span class=\"n\">C</span> <span class=\"n\">::=</span>\n     <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">l</span> <span class=\"k\">...</span> <span class=\"n\">C</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l</span> <span class=\"k\">...</span> <span class=\"n\">C</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">)</span>\n     <span class=\"n\">hole</span><span class=\"p\">]</span>\n  <span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"n\">distribute</span>\n  <span class=\"p\">(</span><span class=\"n\">reduction-relation</span>\n   <span class=\"n\">layouts</span>\n   <span class=\"p\">[</span><span class=\"n\">--&gt;</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">l_a</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"n\">l_m</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l_a</span> <span class=\"n\">l_m</span><span class=\"p\">)</span> <span class=\"k\">...</span><span class=\"p\">))]</span>\n\n   <span class=\"p\">[</span><span class=\"n\">--&gt;</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l_m</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">l_a</span> <span class=\"k\">...</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"n\">in-hole</span> <span class=\"n\">C</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l_a</span> <span class=\"n\">l_m</span><span class=\"p\">)</span> <span class=\"k\">...</span><span class=\"p\">))]</span>\n  <span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nb\">flatten</span> <span class=\"n\">term</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">car</span> <span class=\"p\">(</span><span class=\"n\">apply-reduction-relation*</span> <span class=\"n\">distribute</span> <span class=\"n\">term</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"n\">test-equal</span>\n <span class=\"p\">(</span><span class=\"nb\">flatten</span>\n  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"ss\">×</span> <span class=\"p\">(</span><span class=\"ss\">+</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n  <span class=\"o\">&#39;</span><span class=\"p\">(</span><span class=\"ss\">+</span> <span class=\"p\">(</span><span class=\"ss\">×</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"ss\">×</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">; ---------------------------------------------</span>\n<span class=\"c1\">; byte to byte</span>\n<span class=\"p\">(</span><span class=\"n\">define-relation</span> <span class=\"n\">layouts</span>\n  <span class=\"n\">⥴</span> <span class=\"n\">⊆</span> <span class=\"n\">l</span> <span class=\"n\">×</span> <span class=\"n\">l</span>\n  <span class=\"p\">[(</span><span class=\"n\">⥴</span> <span class=\"n\">number</span> <span class=\"n\">number</span><span class=\"p\">)]</span>\n  <span class=\"p\">[(</span><span class=\"n\">⥴</span> <span class=\"n\">number</span> <span class=\"n\">uninit</span><span class=\"p\">)]</span>\n  <span class=\"p\">[(</span><span class=\"n\">⥴</span> <span class=\"n\">uninit</span> <span class=\"n\">uninit</span><span class=\"p\">)])</span>\n\n<span class=\"c1\">; product to product</span>\n<span class=\"p\">(</span><span class=\"n\">define-judgment-form</span> <span class=\"n\">layouts</span>\n  <span class=\"kd\">#:mode</span> <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"n\">I</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n  <span class=\"kd\">#:contract</span> <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">))</span>\n\n  <span class=\"p\">[(</span><span class=\"n\">⥴</span> <span class=\"n\">l_src</span> <span class=\"n\">l_dst</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l_src_n</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l_dst_n</span> <span class=\"k\">...</span><span class=\"p\">))</span>\n   <span class=\"n\">----------------------------------------------------</span> <span class=\"s2\">&quot;nom&quot;</span>\n     <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l_src</span> <span class=\"n\">l_src_n</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l_dst</span> <span class=\"n\">l_dst_n</span> <span class=\"k\">...</span><span class=\"p\">))</span>  <span class=\"p\">]</span>\n\n\n  <span class=\"c1\">; bytes may be truncated from the `dst`; e.g.:</span>\n  <span class=\"c1\">; union Transmute { src: u8, dst: () }</span>\n\n  <span class=\"p\">[</span><span class=\"n\">-------------------</span> <span class=\"s2\">&quot;truncate&quot;</span>\n   <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span><span class=\"p\">))</span> <span class=\"p\">]</span>\n\n\n  <span class=\"c1\">; uninit bytes may be conjured from the `src`; e.g.:</span>\n  <span class=\"c1\">; union Transmute { src: (), dst: MaybeUninit&lt;u8&gt; }</span>\n\n  <span class=\"p\">[</span><span class=\"n\">------------------------</span> <span class=\"s2\">&quot;barf&quot;</span>\n   <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"n\">uninit</span> <span class=\"k\">...</span><span class=\"p\">))</span> <span class=\"p\">]</span>\n\n  <span class=\"p\">)</span>\n\n<span class=\"c1\">; nom</span>\n<span class=\"p\">(</span><span class=\"n\">test-judgment-holds</span>\n <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span> <span class=\"n\">uninit</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">; truncate</span>\n<span class=\"p\">(</span><span class=\"n\">test-judgment-holds</span>\n <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">; barf uninits</span>\n<span class=\"p\">(</span><span class=\"n\">test-judgment-holds</span>\n <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span> <span class=\"n\">uninit</span> <span class=\"n\">uninit</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n\n<span class=\"c1\">; sum to sum</span>\n<span class=\"p\">(</span><span class=\"n\">define-judgment-form</span> <span class=\"n\">layouts</span>\n  <span class=\"kd\">#:mode</span> <span class=\"p\">(</span><span class=\"n\">⥅</span> <span class=\"n\">I</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n  <span class=\"kd\">#:contract</span> <span class=\"p\">(</span><span class=\"n\">⥅</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">l</span> <span class=\"k\">...</span><span class=\"p\">))</span>\n\n  <span class=\"c1\">; there must exist some variant of the dst such that</span>\n  <span class=\"c1\">; every variant of the src ⥇ that variant of the dst</span>\n  <span class=\"p\">[</span>              <span class=\"p\">(</span><span class=\"n\">⥇</span> <span class=\"n\">l_src</span> <span class=\"n\">l_dst</span><span class=\"p\">)</span> <span class=\"k\">...</span>\n   <span class=\"n\">-----------------------------------------</span> <span class=\"s2\">&quot;∀src.∃dst.src⥇dst&quot;</span>\n   <span class=\"p\">(</span><span class=\"n\">⥅</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"n\">l_src</span> <span class=\"k\">...</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"k\">_</span> <span class=\"k\">...</span> <span class=\"n\">l_dst</span> <span class=\"k\">_</span> <span class=\"k\">...</span><span class=\"p\">))</span> <span class=\"p\">]</span>\n  <span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">test-judgment-holds</span>\n <span class=\"p\">(</span><span class=\"n\">⥅</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">test-judgment-holds</span>\n <span class=\"p\">(</span><span class=\"n\">⥅</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n\n\n<span class=\"p\">(</span><span class=\"n\">test-judgment-holds</span>\n <span class=\"p\">(</span><span class=\"n\">⥅</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">×</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"n\">test-results</span><span class=\"p\">)</span>\n\n<span class=\"c1\">; is transmutable</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"n\">transmutable</span> <span class=\"n\">src</span> <span class=\"n\">dst</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">term-let</span> <span class=\"p\">([</span><span class=\"n\">src</span> <span class=\"p\">(</span><span class=\"nb\">flatten</span> <span class=\"n\">src</span><span class=\"p\">)]</span>\n             <span class=\"p\">[</span><span class=\"n\">dst</span> <span class=\"p\">(</span><span class=\"nb\">flatten</span> <span class=\"n\">dst</span><span class=\"p\">)])</span>\n    <span class=\"p\">(</span><span class=\"n\">traces</span> <span class=\"n\">⥅</span> <span class=\"p\">(</span><span class=\"n\">⥅</span> <span class=\"n\">src</span> <span class=\"n\">dst</span><span class=\"p\">))))</span>\n</code></pre></div>",
        "id": 209538071,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599670616
    },
    {
        "content": "<p>I don't yet have a great sense for when to reach for a <code>reduction-relation</code>, <code>define-metafunction</code>, <code>define-relation</code> or <code>define-judgment-form</code>.  In some contexts, they're interchangeable. The syntax of <code>define-judgment-form</code> felt the most natural, but all of Redex's cool GUI stuff is focused on reduction-relations.</p>",
        "id": 209538438,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599670802
    },
    {
        "content": "<p>This model is a little unrealistic as an implementation guide since it encodes <code>u8</code> as an enum of 256 variants. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 209538836,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599670963
    },
    {
        "content": "<p>I've made a <a href=\"https://github.com/jswrenn/safer-transmutation-redex\">Github repo</a> for the Redex model.</p>",
        "id": 210327288,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600294777
    },
    {
        "content": "<p>It's still <em>very</em> incomplete, and I would love some help to flesh it out.</p>",
        "id": 210327422,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600294866
    },
    {
        "content": "<p>There are three challenges:</p>\n<ul>\n<li>the layout grammar is too primitive to efficiently cover some useful cases</li>\n<li>the <code>~</code> judgment form doesn't include all necessary algebraic transformations of types</li>\n<li>the <code>→</code> judgment form doesn't model all combinations of types</li>\n</ul>",
        "id": 210328706,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600295863
    },
    {
        "content": "<p><span aria-label=\"scissors\" class=\"emoji emoji-2702\" role=\"img\" title=\"scissors\">:scissors:</span><br>\n<a href=\"/user_uploads/4715/8l2kcticI1OzrGmbwCL8XmIs/screenshot-github.com-2020.09.17-21_31_18.png\">screenshot-github.com-2020.09.17-21_31_18.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/8l2kcticI1OzrGmbwCL8XmIs/screenshot-github.com-2020.09.17-21_31_18.png\" title=\"screenshot-github.com-2020.09.17-21_31_18.png\"><img src=\"/user_uploads/4715/8l2kcticI1OzrGmbwCL8XmIs/screenshot-github.com-2020.09.17-21_31_18.png\"></a></div>",
        "id": 210471353,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600393414
    },
    {
        "content": "<p>In Redex, it's really easy to mix up non-terminal names in the language grammar with the names of metafunctions/judgments/etc. So, <em>clearly</em>, the appropriate response is to adopt a naming convention that clearly distinguishes between the two: alphanumerics for terms, and mathematical operators for metafunctions.</p>\n<p>I have a metafunction which snips bytes.</p>\n<p><code>✂</code> is <em>definitely</em> a mathematical operator. ;-)</p>",
        "id": 210471540,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600393679
    },
    {
        "content": "<p>I've translated the redex model to Rust: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a65d762ff317feda046a107c542ce44c\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a65d762ff317feda046a107c542ce44c</a></p>",
        "id": 211160546,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600966968
    },
    {
        "content": "<p>With Redex, I was struggling to do the manual bookkeeping of making sure I had exhaustively accounted for every combination of layout types. With Rust, it's easy: <code>match</code> requires exhaustivity! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 211160721,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600967058
    },
    {
        "content": "<p>It's not a complete model, and it's not even a complete minimal model. It's <em>mostly</em> complete. There are two <code>todo!()</code>s relating to basically the same task...</p>\n<p>A \"bytes\" is a tuple indicating its non-zero length and validity. The validity is either <code>Uninitialized</code> or <code>Initialized { min, max }</code>, where <code>min..max</code> encodes the valid instantiations of its bits.</p>\n<p>The <code>split_bytes_at</code> function takes a <code>Bytes</code> of some length <code>l</code> and an index <code>n</code>, and produces a new layout sequence consisting of bytes of length <code>n</code> and bytes of length <code>l - n</code> — adjusting their validity as necessary.</p>\n<p>For <code>Bytes</code> whose validity is <code>Uninitialized</code>, this is easy: you end up with a sequence of two <code>Uninitialized</code> bytes.</p>\n<p>For <code>Bytes</code> whose validity is <code>Initialized</code>, this isn't easy, and the result depends on endian. Figuring this out is the <code>todo</code>.</p>",
        "id": 211161430,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600967412
    },
    {
        "content": "<p>For instance, a <code>NonZeroU16</code> is represented as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Bytes</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Initialized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"kt\">u16</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Calling <code>.split_bytes_at(1)</code> should produce (abbreviated slightly to elide newtypes and boxes):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cm\">/* sum encodes a choice between two layouts */</span><span class=\"w\"></span>\n<span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* prod encodes a sequence of two layouts */</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* either the first byte may be zero */</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Prod</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bytes</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Initialized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"kt\">u8</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bytes</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Initialized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"kt\">u8</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">})),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cm\">/* or the second byte may be zero */</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Prod</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bytes</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Initialized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"kt\">u8</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bytes</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Initialized</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">min</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max</span>: <span class=\"kt\">u8</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">})))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211162897,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600968154
    },
    {
        "content": "<p><strong>What's the general algorithm that describes this?</strong></p>",
        "id": 211165538,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1600969330
    },
    {
        "content": "<p><a href=\"https://github.com/jswrenn/safer-transmutation-redex/commit/561b664e029ea046d6033e21a19630ca9a18f24b#diff-851df0bc02a9b59fb1b178a14ae4e52d\">I think we worked out an algorithm for this in the little-endian case</a>, but I decided to simplify the model by nixing the <code>Bytes</code> layout variant for a <code>Byte</code> layout variant (which always encodes <em>one</em> byte).</p>",
        "id": 211827424,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1601500099
    },
    {
        "content": "<p>The obstacle I'm facing now is handling transmutations into sums (aka unions).</p>\n<p>Concretely, this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Atom</span><span class=\"p\">(</span><span class=\"n\">Byte</span><span class=\"p\">(</span><span class=\"n\">Init</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">127</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p><em>should</em> be transmutable into this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"p\">(</span><span class=\"n\">Byte</span><span class=\"p\">(</span><span class=\"n\">Init</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">126</span><span class=\"p\">))),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">Atom</span><span class=\"p\">(</span><span class=\"n\">Byte</span><span class=\"p\">(</span><span class=\"n\">Init</span><span class=\"p\">(</span><span class=\"mi\">127</span><span class=\"o\">..=</span><span class=\"mi\">255</span><span class=\"p\">)))),</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>It's an easy-enough requirement to state as prose: the src layout must be covered by one or more of the alternatives in the dst layout.</p>\n<p>Mechanically, though, I don't really know how to implement this, and would love some help!</p>",
        "id": 211827860,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1601500329
    }
]