[
    {
        "content": "<p>Hello everyone, is there a simple way to get the <code>module_def_id: LocalDefId</code> that a <code>span</code> resides in?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Background:</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>I'm trying to implement the <code>expect</code> attribute (RFC 2383). This requires the tracking of all emitted <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.Diagnostic.html\"><code>Diagnostics</code></a> which provide limited information about which module they are from. The best place to start is probably the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/span_encoding/struct.Span.html\"><code>Span</code></a> which it contains. It would be good if I could from this get the <code>LocalDefId</code> of the module as this could be used to divide the check into several smaller task than checking the entire crate at once.</p>\n</div></div>",
        "id": 240764690,
        "sender_full_name": "xFrednet",
        "timestamp": 1622393893
    },
    {
        "content": "<p>I don't think so. The same span may be used within multiple modules. For example if you <code>include!()</code>, use <code>#[path = \"...\"] mod ...;</code> or use macros.</p>",
        "id": 240764772,
        "sender_full_name": "bjorn3",
        "timestamp": 1622394011
    },
    {
        "content": "<p>Okay, thank you for the response! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 240767843,
        "sender_full_name": "xFrednet",
        "timestamp": 1622398952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"369415\">@xFrednet</span> To elaborate on what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> said - there's very little meaningful information that you can extract from a <code>Span</code></p>",
        "id": 240771827,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622405468
    },
    {
        "content": "<p>and the information that you <em>can</em> extract (the code snippet it points to,  the macro expansion it points to, etc) is usually only useful for diagnostics</p>",
        "id": 240771837,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622405503
    },
    {
        "content": "<p>proc-macros have the ability to shuffle spans and <code>SyntaxContext</code>s around as they please, so you can't rely on them to tell you anything meaningful about where a piece of code originated</p>",
        "id": 240771886,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622405545
    },
    {
        "content": "<p>The method for emitting lints doesn't directly take a span I believe. I think it is either a NodeId or DefId. You should take a look at the code handling lint levels. (<code>#[allow]</code>, <code>#[warn]</code>, ...)</p>",
        "id": 240772430,
        "sender_full_name": "bjorn3",
        "timestamp": 1622406391
    },
    {
        "content": "<p>It is a HirId, I think to let you allow or deny the lint</p>",
        "id": 240776435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1622412381
    }
]