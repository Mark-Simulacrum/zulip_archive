[
    {
        "content": "<p>I'm experimenting with build pipelining in the fuchsia build</p>",
        "id": 186940911,
        "sender_full_name": "tmandry",
        "timestamp": 1580341531
    },
    {
        "content": "<p>is <code>--emit=metadata</code> output sufficient for this, or is there another magic flag that makes the rmeta \"more complete\"?</p>",
        "id": 186940984,
        "sender_full_name": "tmandry",
        "timestamp": 1580341569
    },
    {
        "content": "<p>I'm getting unexpected errors now that I produce rmeta files</p>",
        "id": 186941010,
        "sender_full_name": "tmandry",
        "timestamp": 1580341600
    },
    {
        "content": "<p>I believe it should be, but I'm not sure that the compiler expects that exactly</p>",
        "id": 186941181,
        "sender_full_name": "simulacrum",
        "timestamp": 1580341768
    },
    {
        "content": "<p>it might help to tell the compiler to emit the \"okay metadata is done now\" message</p>",
        "id": 186941200,
        "sender_full_name": "simulacrum",
        "timestamp": 1580341786
    },
    {
        "content": "<p>(I forget how to do that, but either grepping Cargo source for pipelining or trying a cargo build should work). IIRC, it's something like <code>--json artifact-notifications</code>, but I could be wrong.</p>",
        "id": 186941278,
        "sender_full_name": "simulacrum",
        "timestamp": 1580341829
    },
    {
        "content": "<p>so, the main thing I'm doing differently is I'm not emitting the rlib in the same invocation</p>",
        "id": 186941288,
        "sender_full_name": "tmandry",
        "timestamp": 1580341846
    },
    {
        "content": "<p>I suspect this is causing the rmeta file to be incomplete somehow</p>",
        "id": 186941295,
        "sender_full_name": "tmandry",
        "timestamp": 1580341858
    },
    {
        "content": "<p>hm, perhaps, but I would expect no</p>",
        "id": 186942106,
        "sender_full_name": "simulacrum",
        "timestamp": 1580342455
    },
    {
        "content": "<p>(in theory you can check)</p>",
        "id": 186942114,
        "sender_full_name": "simulacrum",
        "timestamp": 1580342463
    },
    {
        "content": "<p>i.e., an rlib is I believe an <code>ar</code> archive so you can pull out the rmeta and diff them</p>",
        "id": 186942218,
        "sender_full_name": "simulacrum",
        "timestamp": 1580342527
    },
    {
        "content": "<p>What errors are you getting?</p>",
        "id": 186942235,
        "sender_full_name": "simulacrum",
        "timestamp": 1580342543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> sorry, got sidetracked</p>",
        "id": 186947616,
        "sender_full_name": "tmandry",
        "timestamp": 1580348097
    },
    {
        "content": "<p>there are multiple issues, and one of them that is preventing me from making progress</p>",
        "id": 186947646,
        "sender_full_name": "tmandry",
        "timestamp": 1580348136
    },
    {
        "content": "<p>is that <code>--emit=metadata=&lt;path&gt;</code> is not respected</p>",
        "id": 186947650,
        "sender_full_name": "tmandry",
        "timestamp": 1580348147
    },
    {
        "content": "<p>(the other issues I know of are my fault, but they muddy the waters on the original question)</p>",
        "id": 186947703,
        "sender_full_name": "tmandry",
        "timestamp": 1580348192
    },
    {
        "content": "<p>anyway, <code>--emit=metadata</code> seems hardcoded to emit <code>./&lt;crate_name&gt;.rmeta</code></p>",
        "id": 186947717,
        "sender_full_name": "tmandry",
        "timestamp": 1580348219
    },
    {
        "content": "<p>there might be ways of working around this on my end, but it's probably not worth it for an experiment</p>",
        "id": 186947744,
        "sender_full_name": "tmandry",
        "timestamp": 1580348266
    },
    {
        "content": "<p>oh, I don't think that works for anything?</p>",
        "id": 186948209,
        "sender_full_name": "simulacrum",
        "timestamp": 1580348823
    },
    {
        "content": "<p>i.e., <code>--emit=metdata=path</code> is not a supported syntax?</p>",
        "id": 186948218,
        "sender_full_name": "simulacrum",
        "timestamp": 1580348835
    },
    {
        "content": "<p>maybe <code>-o</code> does, but I don't think</p>",
        "id": 186948222,
        "sender_full_name": "simulacrum",
        "timestamp": 1580348842
    },
    {
        "content": "<p>but if the hardcoding is a concern, then yeah, that might not be avoidable, not sure</p>",
        "id": 186948530,
        "sender_full_name": "simulacrum",
        "timestamp": 1580349221
    },
    {
        "content": "<blockquote>\n<p>i.e., <code>--emit=metdata=path</code> is not a supported syntax?</p>\n</blockquote>\n<p>Yeah, I donâ€™t believe this is a syntax we support, although maybe something has changed? Definitely looks unusual.</p>",
        "id": 186983937,
        "sender_full_name": "nagisa",
        "timestamp": 1580389896
    },
    {
        "content": "<p>For pipelining I believe you also need to consume the json output as that has signals that indicate when something gets done</p>",
        "id": 186984013,
        "sender_full_name": "nagisa",
        "timestamp": 1580389923
    },
    {
        "content": "<p>(I think <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> is trying \"precompiled\" pipelining, i.e., that the rmetas are already available way ahead of time)</p>",
        "id": 186985234,
        "sender_full_name": "simulacrum",
        "timestamp": 1580390657
    },
    {
        "content": "<p>I have wondered if we could make <code>cargo build</code> kick off all dependencies at the same time if you already had a <code>cargo check</code> previously completed (common case, realistically)</p>",
        "id": 186985269,
        "sender_full_name": "simulacrum",
        "timestamp": 1580390698
    },
    {
        "content": "<p>we support it for dep-info: <code>--emit=def-info=&lt;path&gt;</code></p>",
        "id": 187025801,
        "sender_full_name": "tmandry",
        "timestamp": 1580415073
    },
    {
        "content": "<p>and when I have that, plus <code>--emit=link</code>, plus <code>-o</code>, I get a warning</p>",
        "id": 187025822,
        "sender_full_name": "tmandry",
        "timestamp": 1580415090
    },
    {
        "content": "<p>okay I got it running, I think it had to do with the order of args</p>",
        "id": 187030642,
        "sender_full_name": "tmandry",
        "timestamp": 1580418466
    },
    {
        "content": "<p>hitting an ICE now <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 187030700,
        "sender_full_name": "tmandry",
        "timestamp": 1580418489
    },
    {
        "content": "<blockquote>\n<p>(I think <span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> is trying \"precompiled\" pipelining, i.e., that the rmetas are already available way ahead of time)</p>\n</blockquote>\n<p>I'm actually experimenting with doing the work twice, in a large build, in an environment with high parallelism</p>",
        "id": 187030753,
        "sender_full_name": "tmandry",
        "timestamp": 1580418543
    },
    {
        "content": "<p>i.e. spawning off <code>--emit=metadata</code> and <code>--emit=link</code> jobs simultaneously</p>",
        "id": 187030789,
        "sender_full_name": "tmandry",
        "timestamp": 1580418574
    },
    {
        "content": "<p>no idea if it will be better, though</p>",
        "id": 187030807,
        "sender_full_name": "tmandry",
        "timestamp": 1580418586
    },
    {
        "content": "<p>I would expect that to be strictly worse, but who knows :)</p>",
        "id": 187032836,
        "sender_full_name": "simulacrum",
        "timestamp": 1580419661
    },
    {
        "content": "<p>--emit THING=PATH is definitely a syntax that is supported. It looks like <code>metadata</code> is the only one that doesn't respect it, and I would say that is a bug (or at least it should be a warning/error if you specify it).</p>\n<p>As for the original question, I'm pretty sure you need to include <code>link</code> to get a compatible <code>rmeta</code> file. Maybe nnethercote knows why?</p>",
        "id": 187276584,
        "sender_full_name": "Eric Huss",
        "timestamp": 1580746461
    },
    {
        "content": "<p>From the ICE I'm seeing, it seems like the rmeta does not include MIR for generic functions</p>",
        "id": 187683780,
        "sender_full_name": "tmandry",
        "timestamp": 1581112362
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120989\">@Nicholas Nethercote</span></p>",
        "id": 187683786,
        "sender_full_name": "tmandry",
        "timestamp": 1581112372
    },
    {
        "content": "<blockquote>\n<p>From the ICE I'm seeing, it seems like the rmeta does not include MIR for generic functions</p>\n</blockquote>\n<p>if you're not passing <code>--emit=link</code> it's possible the <code>rmeta</code> is for <code>cargo check</code> purposes only</p>\n<p>(sorry, came across this almost two months later)</p>",
        "id": 191531203,
        "sender_full_name": "eddyb",
        "timestamp": 1584995002
    }
]