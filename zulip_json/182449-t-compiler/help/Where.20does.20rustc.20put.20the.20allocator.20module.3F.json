[
    {
        "content": "<p>Running into a small issue trying to get my codegen to build crates with an allocator, the final ptx ends up having an unresolved extern function <code>__rust_alloc</code> and <code>__rust_realloc</code>, and more. These are supposed to be created by codegen_allocator, which ive verified does in fact run, but for some odd reason, i cannot find the definitions for those functions anywhere during linking. Emitting llvm ir, the definitions are not found anywhere in the IR emitted. </p>\n<p>The way rustc seems to do allocator stuff is odd, because it forms a very irregular dependency graph, where a dependency is able to depend on a function defined in a dependent, which didn't really work with my method of lazily loading functions from dependencies. So i have resorted to using llvm.used to tell llvm/libnvvm to keep around things like rust_begin_panic and __rg methods. However, i can't seem to sort out the allocator functions, they seem to just be kind of gone, and trying to trace where the module is put through cg_ssa is a bit hard because cg_ssa sends it through random channels <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 253457704,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631727966
    },
    {
        "content": "<p>You can have a look at <a href=\"https://github.com/rust-lang/rust/issues/86844\">#86844</a></p>",
        "id": 253458711,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631728362
    },
    {
        "content": "<p>These are currently automagically generated by the backend, but <a href=\"https://github.com/rust-lang/rust/issues/86844\">#86844</a> tries to change that so that #[global_allocator] generates these instead</p>",
        "id": 253458821,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631728401
    },
    {
        "content": "<p>yeah that would be much better than the current system of making a random cgu module for allocator</p>",
        "id": 253459015,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631728459
    },
    {
        "content": "<p>But i find it odd that the allocator module is just straight gone, either cg_ssa is doing some very odd things and bypassing the expected pipeline for modules, or... im not quite sure</p>",
        "id": 253459270,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631728547
    },
    {
        "content": "<p>I presume maybe cg_ssa implicitly wants you to find it somewhere? because i am currently only loading rlibs and the object files (which are in reality llvm bitcode files) when linking</p>",
        "id": 253460112,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631728811
    },
    {
        "content": "<p>The allocator shim is only created for bin, cdylib and dylib's.</p>",
        "id": 253476071,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735191
    },
    {
        "content": "<p>Rlibs don't need the allocator shim as they are not directly linked.</p>",
        "id": 253476084,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735201
    },
    {
        "content": "<p>Note that <code>--emit obj</code> never gives the allocator shim. It can only output a single object file, but the allocator shim has to be in a different object file from the main crate code for multiple crate types at the same time to work.</p>",
        "id": 253476304,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span></p>",
        "id": 253476385,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735327
    },
    {
        "content": "<p>hmmm, i currently compile the gpu crates as cdylib</p>",
        "id": 253476451,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735360
    },
    {
        "content": "<p>So where is the shim? Like where does rustc get it? Or should i make my own shim and link it in?</p>",
        "id": 253476516,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735396
    },
    {
        "content": "<p>Then <code>CodegenResults</code> should contain the path to the allocator shim in one of it's fields.</p>",
        "id": 253476518,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735399
    },
    {
        "content": "<p>Oh ok, im not at my desk rn but ill check that out later</p>",
        "id": 253476600,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735432
    },
    {
        "content": "<p>The shim is produced by the codegen backend and passed to the linking code using said field in <code>CodegenResults</code>.</p>",
        "id": 253476609,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735437
    },
    {
        "content": "<p>What format should it be, just llvm ir like everything else?</p>",
        "id": 253476643,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735451
    },
    {
        "content": "<p>Presumably it would call codegen crate or something and treat it like a normal module, although the type will prob give hints, but i cant see it rn</p>",
        "id": 253476781,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735519
    },
    {
        "content": "<p>Yes, whatever format the linker requires.</p>",
        "id": 253476783,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735521
    },
    {
        "content": "<p>Alright that sounds good</p>",
        "id": 253476857,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735542
    },
    {
        "content": "<p>Whats like, the point of it though? If __rg already exists</p>",
        "id": 253476887,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735558
    },
    {
        "content": "<p>Is it just so you dont have to distinguish between __rg and __rgl?</p>",
        "id": 253476926,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735577
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/allocator.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/allocator.rs</a></p>",
        "id": 253476945,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735585
    },
    {
        "content": "<p>Right thats mostly what i use in my codegen too, but i still dont see why rustc couldnt do this for you</p>",
        "id": 253477016,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735615
    },
    {
        "content": "<p>The thing is that the global allocator may either be defined by libstd or by a <code>#[global_allocator]</code>. We don't know in advance until we are producing the bin, cdylib or dylib. So we need a generic __rust_alloc to reference before we know if it should dispatch to __rg_alloc or __rdl_alloc.</p>",
        "id": 253477161,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735673
    },
    {
        "content": "<p>And other than rust_begin_panic, rust_oom, and the __rust/__rg functions, are there any others i should be aware about that i should put in llvm.used?</p>",
        "id": 253477187,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735687
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 253477203,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735697
    },
    {
        "content": "<p>Or actually, i might just mark anything that isnt mangled as used, that should work much better</p>",
        "id": 253477267,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735734
    },
    {
        "content": "<p>You don't have to put them in llvm.used. You just need to export them.</p>",
        "id": 253477276,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735738
    },
    {
        "content": "<p>That doesnt quite work here though, because i lazy load the modules using the dep graph :/</p>",
        "id": 253477314,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735758
    },
    {
        "content": "<p>So a module being loaded only loads the functions used by previous loaded modules</p>",
        "id": 253477379,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735773
    },
    {
        "content": "<p>So if the main crate doesnt use __rust_alloc, then it wont be loaded, but a downstream dep might use it</p>",
        "id": 253477444,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735804
    },
    {
        "content": "<p>Same problem with rust_begin_panic</p>",
        "id": 253477467,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735819
    },
    {
        "content": "<p>Because core uses it, but nvvm doesnt know this when i am loading the crate with the panic handler</p>",
        "id": 253477515,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735843
    },
    {
        "content": "<p>Right, in that case you need to load all <code>#[no_mangle]</code> and lang items I think.</p>",
        "id": 253477532,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735849
    },
    {
        "content": "<p>How do i know something is a lang item?</p>",
        "id": 253477583,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735874
    },
    {
        "content": "<p>s/lang items/weak lang items</p>",
        "id": 253477591,
        "sender_full_name": "bjorn3",
        "timestamp": 1631735879
    },
    {
        "content": "<p>wym?</p>",
        "id": 253477715,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631735927
    },
    {
        "content": "<p>A weak lang item is one which can be used before it is defined by another crate. For example the panic handler. Normal lang items must be defined by a dependency before they can be used.</p>",
        "id": 253477962,
        "sender_full_name": "bjorn3",
        "timestamp": 1631736016
    },
    {
        "content": "<p>You can iterate over all lang items like in <a href=\"https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler/rustc_codegen_ssa/src/base.rs#L862\">https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler/rustc_codegen_ssa/src/base.rs#L862</a></p>",
        "id": 253478056,
        "sender_full_name": "bjorn3",
        "timestamp": 1631736047
    },
    {
        "content": "<p>Ah ok, do u mean i should put things with weak linkage in used?</p>",
        "id": 253478072,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631736054
    },
    {
        "content": "<p>Oh awesome</p>",
        "id": 253478099,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631736065
    },
    {
        "content": "<p>Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 253478159,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631736090
    },
    {
        "content": "<p>No, weak lang items don't have weak linkage.</p>",
        "id": 253478232,
        "sender_full_name": "bjorn3",
        "timestamp": 1631736118
    },
    {
        "content": "<p>They still need to be defined. The only difference is that they can be defined by any crate, not just dependencies of the crate that needs them.</p>",
        "id": 253478336,
        "sender_full_name": "bjorn3",
        "timestamp": 1631736150
    },
    {
        "content": "<p>also, to know if i am compiling the “main” crate, does LOCAL_CRATE have a “correct” value when compiling in the backend?</p>",
        "id": 253478397,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631736177
    },
    {
        "content": "<p>Yes, <code>LOCAL_CRATE</code> refers to the \"main\" crate in that case.</p>",
        "id": 253478493,
        "sender_full_name": "bjorn3",
        "timestamp": 1631736214
    },
    {
        "content": "<p>sounds good</p>",
        "id": 253478506,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631736221
    },
    {
        "content": "<p>Thanks for ur help again <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 253478522,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631736227
    },
    {
        "content": "<p>no problem</p>",
        "id": 253478538,
        "sender_full_name": "bjorn3",
        "timestamp": 1631736238
    },
    {
        "content": "<p>Ill see if i can finally get gpu panics to work… thankfully cuda’s printing function is atomic 😅</p>",
        "id": 253478596,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631736249
    }
]