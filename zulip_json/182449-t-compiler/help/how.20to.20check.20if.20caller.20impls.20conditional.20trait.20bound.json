[
    {
        "content": "<p>Hi, I have a type <code>T&lt;U&gt;</code> which has the following conditional trait impl:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">U</span>: <span class=\"nc\">SomeTrait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've created a little intrinsic that should return <code>true</code> (a bit like how <code>needs_drop</code> works) if a certain instance of <code>T</code> implements <code>SomeTrait</code>.  Unfortunately, it doesn't seem to work when I have these conditional trait implementations. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"n\">core</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">has_some_trait</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\">// returns false :(</span>\n</code></pre></div>\n<p>I think what's happening here is when the <code>has_some_trait</code> method eventually calls the <code>type_known_to_meet_bounds_modulo_regions</code>, it doesn't know about the concrete <code>T&lt;usize&gt;</code>, and instead is generic over <code>T</code>.</p>\n<p>I _think_ I need to monomorphise this? So inside my intrinsic I call <code>Instance::mono(tcx, def_id)</code> but this ICE's with <code>Instance::mono has type parameters</code>. Is this because monomorphisation can only happen at codegen or something? </p>\n<p>This stuff is pretty new to me, so I'd appreciate any help. Thanks!</p>",
        "id": 240935344,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1622551469
    }
]