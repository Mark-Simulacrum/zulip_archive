[
    {
        "content": "<p>I have built llvm from source, but I cannot find the path at which Filecheck is located. Is this supposed to be in the same folder in which llvm-config is?</p>",
        "id": 214369749,
        "sender_full_name": "BN",
        "timestamp": 1603489626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> on my machine it's in <code>/usr/lib/llvm-10/bin/FileCheck</code>, next to llvm-config-10</p>",
        "id": 214369874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603489721
    },
    {
        "content": "<p>try <code>realpath $(which llvm-config)</code></p>",
        "id": 214369882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603489733
    },
    {
        "content": "<p>(or maybe readlink on mac?)</p>",
        "id": 214369889,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603489742
    },
    {
        "content": "<p>when you say built llvm from source, do you mean a custom fork? or like <code>src/llvm-project</code>?</p>",
        "id": 214369930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603489772
    },
    {
        "content": "<p>I have found the path to llvm-config, but there isn't a FileCheck file</p>",
        "id": 214369938,
        "sender_full_name": "BN",
        "timestamp": 1603489780
    },
    {
        "content": "<p>for the in-tree repo you don't need to set filecheck at all</p>",
        "id": 214369940,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603489783
    },
    {
        "content": "<p>yes src/llvm-project</p>",
        "id": 214369959,
        "sender_full_name": "BN",
        "timestamp": 1603489794
    },
    {
        "content": "<p>I'm getting the following error message when only supplying llvm-config:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Finished dev [unoptimized + debuginfo] target(s) in 2m 07s\nwarning: x.py has made several changes recently you may want to look at\nhelp: consider looking at the changes in `src/bootstrap/CHANGELOG.md`\nnote: to silence this warning, add `changelog-seen = 2` at the top of `config.toml`\nthread &#39;main&#39; panicked at &#39;FileCheck executable &quot;/usr/local/bin/FileCheck&quot; does not exist&#39;, src/bootstrap/sanity.rs:153:9\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/4708ac76ee6ec7e278a00f49a40b5bfbcdfd6168/library/std/src/panicking.rs:483\n   1: std::panicking::begin_panic_fmt\n             at /rustc/4708ac76ee6ec7e278a00f49a40b5bfbcdfd6168/library/std/src/panicking.rs:437\n   2: bootstrap::sanity::check\n             at ./src/bootstrap/sanity.rs:153\n   3: bootstrap::Build::new\n             at ./src/bootstrap/lib.rs:438\n   4: bootstrap::main\n             at ./src/bootstrap/bin/main.rs:30\n   5: core::ops::function::FnOnce::call_once\n             at /rustc/4708ac76ee6ec7e278a00f49a40b5bfbcdfd6168/library/core/src/ops/function.rs:227\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nfailed to run: /Users/bn/Documents/RustCompilerNightly/rust/build/bootstrap/debug/bootstrap build -i library/std\nBuild completed unsuccessfully in 0:02:56\n</code></pre></div>\n\n\n<p>I haven't found any information on this, but is Filecheck included by default in llvm-11?</p>",
        "id": 214371702,
        "sender_full_name": "BN",
        "timestamp": 1603491297
    },
    {
        "content": "<p>what's in your config.toml?</p>",
        "id": 214371727,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491320
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># Sample TOML configuration file for building Rust.\n#\n# To configure rustbuild, copy this file to the directory from which you will be\n# running the build, and name it config.toml.\n#\n# All options are commented out by default in this file, and they&#39;re commented\n# out with their default values. The build system by default looks for\n# `config.toml` in the current directory of a build for build configuration, but\n# a custom configuration file can also be specified with `--config` to the build\n# system.\n\n# =============================================================================\n# Tweaking how LLVM is compiled\n# =============================================================================\n[llvm]\n#download-ci-llvm = true\n\n# Indicates whether LLVM rebuild should be skipped when running bootstrap. If\n# this is `false` then the compiler&#39;s LLVM will be rebuilt whenever the built\n# version doesn&#39;t have the correct hash. If it is `true` then LLVM will never\n# be rebuilt. The default value is `false`.\n#skip-rebuild = false\n\n# Indicates whether the LLVM build is a Release or Debug build\n#optimize = true\n\n# Indicates whether LLVM should be built with ThinLTO. Note that this will\n# only succeed if you use clang, lld, llvm-ar, and llvm-ranlib in your C/C++\n# toolchain (see the `cc`, `cxx`, `linker`, `ar`, and `ranlib` options below).\n# More info at: https://clang.llvm.org/docs/ThinLTO.html#clang-bootstrap\n#thin-lto = false\n\n# Indicates whether an LLVM Release build should include debug info\n#release-debuginfo = false\n\n# Indicates whether the LLVM assertions are enabled or not\nassertions = true\n\n# Indicates whether ccache is used when building LLVM\n#ccache = false\n# or alternatively ...\n#ccache = &quot;/path/to/ccache&quot;\n\n# If an external LLVM root is specified, we automatically check the version by\n# default to make sure it&#39;s within the range that we&#39;re expecting, but setting\n# this flag will indicate that this version check should not be done.\n#version-check = true\n\n# Link libstdc++ statically into the librustc_llvm instead of relying on a\n# dynamic version to be available.\n#static-libstdcpp = false\n\n# Tell the LLVM build system to use Ninja instead of the platform default for\n# the generated build system. This can sometimes be faster than make, for\n# example.\nninja = false\n\n# LLVM targets to build support for.\n# Note: this is NOT related to Rust compilation targets. However, as Rust is\n# dependent on LLVM for code generation, turning targets off here WILL lead to\n# the resulting rustc being unable to compile for the disabled architectures.\n# Also worth pointing out is that, in case support for new targets are added to\n# LLVM, enabling them here doesn&#39;t mean Rust is automatically gaining said\n# support. You&#39;ll need to write a target specification at least, and most\n# likely, teach rustc about the C ABI of the target. Get in touch with the\n# Rust team and file an issue if you need assistance in porting!\n#targets = &quot;AArch64;ARM;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86&quot;\n\n# LLVM experimental targets to build support for. These targets are specified in\n# the same format as above, but since these targets are experimental, they are\n# not built by default and the experimental Rust compilation targets that depend\n# on them will not work unless the user opts in to building them.\n#experimental-targets = &quot;AVR&quot;\n\n# Cap the number of parallel linker invocations when compiling LLVM.\n# This can be useful when building LLVM with debug info, which significantly\n# increases the size of binaries and consequently the memory required by\n# each linker process.\n# If absent or 0, linker invocations are treated like any other job and\n# controlled by rustbuild&#39;s -j parameter.\n#link-jobs = 0\n\n# When invoking `llvm-config` this configures whether the `--shared` argument is\n# passed to prefer linking to shared libraries.\n#link-shared = false\n\n# When building llvm, this configures what is being appended to the version.\n# The default is &quot;-rust-$version-$channel&quot;, except for dev channel where rustc\n# version number is omitted. To use LLVM version as is, provide an empty string.\n#version-suffix = &quot;-rust-dev&quot;\n\n# On MSVC you can compile LLVM with clang-cl, but the test suite doesn&#39;t pass\n# with clang-cl, so this is special in that it only compiles LLVM with clang-cl\n#clang-cl = &#39;/path/to/clang-cl.exe&#39;\n\n# Pass extra compiler and linker flags to the LLVM CMake build.\n#cflags = &quot;-fextra-flag&quot;\n#cxxflags = &quot;-fextra-flag&quot;\n#ldflags = &quot;-Wl,extra-flag&quot;\n\n# Use libc++ when building LLVM instead of libstdc++. This is the default on\n# platforms already use libc++ as the default C++ library, but this option\n# allows you to use libc++ even on platforms when it&#39;s not. You need to ensure\n# that your host compiler ships with libc++.\n#use-libcxx = true\n\n# The value specified here will be passed as `-DLLVM_USE_LINKER` to CMake.\n#use-linker = &quot;lld&quot;\n\n# Whether or not to specify `-DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=YES`\n#allow-old-toolchain = false\n\n# =============================================================================\n# General build configuration options\n# =============================================================================\n[build]\n\n# Build triple for the original snapshot compiler. This must be a compiler that\n# nightlies are already produced for. The current platform must be able to run\n# binaries of this build triple and the nightly will be used to bootstrap the\n# first compiler.\n#\n# Defaults to host platform\n#build = &quot;x86_64-unknown-linux-gnu&quot;\n\n# In addition to the build triple, other triples to produce full compiler\n# toolchains for. Each of these triples will be bootstrapped from the build\n# triple and then will continue to bootstrap themselves. This platform must\n# currently be able to run all of the triples provided here.\n#\n# Defaults to just the build triple\n#host = [&quot;x86_64-unknown-linux-gnu&quot;]\n\n# In addition to all host triples, other triples to produce the standard library\n# for. Each host triple will be used to produce a copy of the standard library\n# for each target triple.\n#\n# Defaults to just the build triple\n#target = [&quot;x86_64-unknown-linux-gnu&quot;]\n\n# Use this directory to store build artifacts.\n# You can use &quot;$ROOT&quot; to indicate the root of the git repository.\n#build-dir = &quot;build&quot;\n\n# Instead of downloading the src/stage0.txt version of Cargo specified, use\n# this Cargo binary instead to build all Rust code\n#cargo = &quot;/path/to/bin/cargo&quot;\n\n# Instead of downloading the src/stage0.txt version of the compiler\n# specified, use this rustc binary instead as the stage0 snapshot compiler.\n#rustc = &quot;/path/to/bin/rustc&quot;\n\n# Instead of download the src/stage0.txt version of rustfmt specified,\n# use this rustfmt binary instead as the stage0 snapshot rustfmt.\n#rustfmt = &quot;/path/to/bin/rustfmt&quot;\n\n# Flag to specify whether any documentation is built. If false, rustdoc and\n# friends will still be compiled but they will not be used to generate any\n# documentation.\n#docs = true\n\n# Indicate whether the compiler should be documented in addition to the standard\n# library and facade crates.\n#compiler-docs = false\n\n# Indicate whether git submodules are managed and updated automatically.\n#submodules = true\n\n# Update git submodules only when the checked out commit in the submodules differs\n# from what is committed in the main rustc repo.\n#fast-submodules = true\n\n# The path to (or name of) the GDB executable to use. This is only used for\n# executing the debuginfo test suite.\n#gdb = &quot;gdb&quot;\n\n# The node.js executable to use. Note that this is only used for the emscripten\n# target when running tests, otherwise this can be omitted.\n#nodejs = &quot;node&quot;\n\n# Python interpreter to use for various tasks throughout the build, notably\n# rustdoc tests, the lldb python interpreter, and some dist bits and pieces.\n#\n# Defaults to the Python interpreter used to execute x.py\n#python = &quot;python&quot;\n\n# Force Cargo to check that Cargo.lock describes the precise dependency\n# set that all the Cargo.toml files create, instead of updating it.\n#locked-deps = false\n\n# Indicate whether the vendored sources are used for Rust dependencies or not\n#vendor = false\n\n# Typically the build system will build the Rust compiler twice. The second\n# compiler, however, will simply use its own libraries to link against. If you\n# would rather to perform a full bootstrap, compiling the compiler three times,\n# then you can set this option to true. You shouldn&#39;t ever need to set this\n# option to true.\n#full-bootstrap = false\n\n# Enable a build of the extended Rust tool set which is not only the compiler\n# but also tools such as Cargo. This will also produce &quot;combined installers&quot;\n# which are used to install Rust and Cargo together. This is disabled by\n# default. The `tools` option (immediately below) specifies which tools should\n# be built if `extended = true`.\n#extended = false\n\n# Installs chosen set of extended tools if `extended = true`. By default builds all.\n# If chosen tool failed to build the installation fails. If `extended = false`, this\n# option is ignored.\n#tools = [&quot;cargo&quot;, &quot;rls&quot;, &quot;clippy&quot;, &quot;rustfmt&quot;, &quot;analysis&quot;, &quot;src&quot;]\n\n# Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n#verbose = 0\n\n# Build the sanitizer runtimes\n#sanitizers = false\n\n# Build the profiler runtime (required when compiling with options that depend\n# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n#profiler = false\n\n# Indicates whether the native libraries linked into Cargo will be statically\n# linked or not.\n#cargo-native-static = false\n\n# Run the build with low priority, by setting the process group&#39;s &quot;nice&quot; value\n# to +10 on Unix platforms, and by using a &quot;low priority&quot; job object on Windows.\n#low-priority = false\n\n# Arguments passed to the `./configure` script, used during distcheck. You\n# probably won&#39;t fill this in but rather it&#39;s filled in by the `./configure`\n# script.\n#configure-args = []\n\n# Indicates that a local rebuild is occurring instead of a full bootstrap,\n</code></pre></div>",
        "id": 214385664,
        "sender_full_name": "BN",
        "timestamp": 1603491432
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># essentially skipping stage0 as the local compiler is recompiling itself again.\n#local-rebuild = false\n\n# Print out how long each rustbuild step took (mostly intended for CI and\n# tracking over time)\n#print-step-timings = false\n\n# =============================================================================\n# General install configuration options\n# =============================================================================\n[install]\n\n# Instead of installing to /usr/local, install to this path instead.\n#prefix = &quot;/usr/local&quot;\n\n# Where to install system configuration files\n# If this is a relative path, it will get installed in `prefix` above\n#sysconfdir = &quot;/etc&quot;\n\n# Where to install documentation in `prefix` above\n#docdir = &quot;share/doc/rust&quot;\n\n# Where to install binaries in `prefix` above\n#bindir = &quot;bin&quot;\n\n# Where to install libraries in `prefix` above\n#libdir = &quot;lib&quot;\n\n# Where to install man pages in `prefix` above\n#mandir = &quot;share/man&quot;\n\n# Where to install data in `prefix` above (currently unused)\n#datadir = &quot;share&quot;\n\n# Where to install additional info in `prefix` above (currently unused)\n#infodir = &quot;share/info&quot;\n\n# Where to install local state (currently unused)\n# If this is a relative path, it will get installed in `prefix` above\n#localstatedir = &quot;/var/lib&quot;\n\n# =============================================================================\n# Options for compiling Rust code itself\n# =============================================================================\n[rust]\n\n# Whether or not to optimize the compiler and standard library.\n# WARNING: Building with optimize = false is NOT SUPPORTED. Due to bootstrapping,\n# building without optimizations takes much longer than optimizing. Further, some platforms\n# fail to build without this optimization (c.f. #65352).\n#optimize = true\n\n# Indicates that the build should be configured for debugging Rust. A\n# `debug`-enabled compiler and standard library will be somewhat\n# slower (due to e.g. checking of debug assertions) but should remain\n# usable.\n#\n# Note: If this value is set to `true`, it will affect a number of\n#       configuration options below as well, if they have been left\n#       unconfigured in this file.\n#\n# Note: changes to the `debug` setting do *not* affect `optimize`\n#       above. In theory, a &quot;maximally debuggable&quot; environment would\n#       set `optimize` to `false` above to assist the introspection\n#       facilities of debuggers like lldb and gdb. To recreate such an\n#       environment, explicitly set `optimize` to `false` and `debug`\n#       to `true`. In practice, everyone leaves `optimize` set to\n#       `true`, because an unoptimized rustc with debugging\n#       enabled becomes *unusably slow* (e.g. rust-lang/rust#24840\n#       reported a 25x slowdown) and bootstrapping the supposed\n#       &quot;maximally debuggable&quot; environment (notably libstd) takes\n#       hours to build.\n#\ndebug = true\n\n# Number of codegen units to use for each compiler invocation. A value of 0\n# means &quot;the number of cores on this machine&quot;, and 1+ is passed through to the\n# compiler.\ncodegen-units = 0\n\n# Sets the number of codegen units to build the standard library with,\n# regardless of what the codegen-unit setting for the rest of the compiler is.\n#codegen-units-std = 1\n\n# Whether or not debug assertions are enabled for the compiler and standard\n# library. Debug assertions control the maximum log level used by rustc. When\n# enabled calls to `trace!` and `debug!` macros are preserved in the compiled\n# binary, otherwise they are omitted.\n#\n# Defaults to rust.debug value\n#debug-assertions = false\n\n# Whether or not debug assertions are enabled for the standard library.\n# Overrides the `debug-assertions` option, if defined.\n#\n# Defaults to rust.debug-assertions value\n#debug-assertions-std = false\n\n# Debuginfo level for most of Rust code, corresponds to the `-C debuginfo=N` option of `rustc`.\n# `0` - no debug info\n# `1` - line tables only - sufficient to generate backtraces that include line\n#       information and inlined functions, set breakpoints at source code\n#       locations, and step through execution in a debugger.\n# `2` - full debug info with variable and type information\n# Can be overridden for specific subsets of Rust code (rustc, std or tools).\n# Debuginfo for tests run with compiletest is not controlled by this option\n# and needs to be enabled separately with `debuginfo-level-tests`.\n#\n# Note that debuginfo-level = 2 generates several gigabytes of debuginfo\n# and will slow down the linking process significantly.\n#\n# Defaults to 1 if debug is true\n#debuginfo-level = 0\n\n# Debuginfo level for the compiler.\n#\n# Defaults to rust.debuginfo-level value\n#debuginfo-level-rustc = 0\n\n# Debuginfo level for the standard library.\n#\n# Defaults to rust.debuginfo-level value\n#debuginfo-level-std = 0\n\n# Debuginfo level for the tools.\n#\n# Defaults to rust.debuginfo-level value\n#debuginfo-level-tools = 0\n\n# Debuginfo level for the test suites run with compiletest.\n# FIXME(#61117): Some tests fail when this option is enabled.\n#debuginfo-level-tests = 0\n\n# Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n#backtrace = true\n\n# Whether to always use incremental compilation when building rustc\nincremental = true\n\n# Build a multi-threaded rustc\n#parallel-compiler = false\n\n# The default linker that will be hard-coded into the generated compiler for\n# targets that don&#39;t specify linker explicitly in their target specifications.\n# Note that this is not the linker used to link said compiler.\n#default-linker = &quot;cc&quot;\n\n# The &quot;channel&quot; for the Rust build to produce. The stable/beta channels only\n# allow using stable features, whereas the nightly and dev channels allow using\n# nightly features\n#channel = &quot;dev&quot;\n\n# The root location of the musl installation directory.\n#musl-root = &quot;...&quot;\n\n# By default the `rustc` executable is built with `-Wl,-rpath` flags on Unix\n# platforms to ensure that the compiler is usable by default from the build\n# directory (as it links to a number of dynamic libraries). This may not be\n# desired in distributions, for example.\n#rpath = true\n\n# Emits extra output from tests so test failures are debuggable just from logfiles.\nverbose-tests = true\n\n# Flag indicating whether tests are compiled with optimizations (the -O flag).\n#optimize-tests = true\n\n# Flag indicating whether codegen tests will be run or not. If you get an error\n# saying that the FileCheck executable is missing, you may want to disable this.\n# Also see the target&#39;s llvm-filecheck option.\n#codegen-tests = true\n\n# Flag indicating whether git info will be retrieved from .git automatically.\n# Having the git information can cause a lot of rebuilds during development.\n# Note: If this attribute is not explicitly set (e.g. if left commented out) it\n# will default to true if channel = &quot;dev&quot;, but will default to false otherwise.\n#ignore-git = true\n\n# When creating source tarballs whether or not to create a source tarball.\n#dist-src = false\n\n# After building or testing extended tools (e.g. clippy and rustfmt), append the\n# result (broken, compiling, testing) into this JSON file.\n#save-toolstates = &quot;/path/to/toolstates.json&quot;\n\n# This is an array of the codegen backends that will be compiled for the rustc\n# that&#39;s being compiled. The default is to only build the LLVM codegen backend,\n# and currently the only standard option supported is `&quot;llvm&quot;`\n#codegen-backends = [&quot;llvm&quot;]\n\n# Indicates whether LLD will be compiled and made available in the sysroot for\n# rustc to execute.\n#lld = false\n\n# Indicates whether LLD will be used to link Rust crates during bootstrap on\n# supported platforms. The LLD from the bootstrap distribution will be used\n# and not the LLD compiled during the bootstrap.\n#\n# LLD will not be used if we&#39;re cross linking or running tests.\n#\n# Explicitly setting the linker for a target will override this option when targeting MSVC.\n#use-lld = false\n\n# Indicates whether some LLVM tools, like llvm-objdump, will be made available in the\n# sysroot.\n#llvm-tools = false\n\n# Whether to deny warnings in crates\n#deny-warnings = true\n\n# Print backtrace on internal compiler errors during bootstrap\n#backtrace-on-ice = false\n\n# Whether to verify generated LLVM IR\n#verify-llvm-ir = false\n\n# Compile the compiler with a non-default ThinLTO import limit. This import\n# limit controls the maximum size of functions imported by ThinLTO. Decreasing\n# will make code compile faster at the expense of lower runtime performance.\n# If `incremental` is set to true above, the import limit will default to 10\n# instead of LLVM&#39;s default of 100.\n#thin-lto-import-instr-limit = 100\n\n# Map debuginfo paths to `/rust/$sha/...`, generally only set for releases\n#remap-debuginfo = false\n\n# Link the compiler against `jemalloc`, where on Linux and OSX it should\n# override the default allocator for rustc and LLVM.\n#jemalloc = false\n\n# Run tests in various test suites with the &quot;nll compare mode&quot; in addition to\n# running the tests in normal mode. Largely only used on CI and during local\n# development of NLL\n#test-compare-mode = false\n\n# Use LLVM libunwind as the implementation for Rust&#39;s unwinder.\n#llvm-libunwind = false\n\n# Enable Windows Control Flow Guard checks in the standard library.\n# This only applies from stage 1 onwards, and only for Windows targets.\n#control-flow-guard = false\n\n# Enable symbol-mangling-version v0. This can be helpful when profiling rustc,\n# as generics will be preserved in symbols (rather than erased into opaque T).\n#new-symbol-mangling = false\n\n# =============================================================================\n# Options for specific targets\n#\n# Each of the following options is scoped to the specific target triple in\n# question and is used for determining how to compile each target.\n# =============================================================================\n#[target.x86_64-unknown-linux-gnu]\n[target.x86_64-apple-darwin]\n\n# C compiler to be used to compiler C code. Note that the\n</code></pre></div>",
        "id": 214385687,
        "sender_full_name": "BN",
        "timestamp": 1603491464
    },
    {
        "content": "<p>sorry - can you just print whether you have <code>llvm-config</code> set?</p>",
        "id": 214385738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491485
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># default value is platform specific, and if not specified it may also depend on\n# what platform is crossing to what platform.\n#cc = &quot;cc&quot;\n\n# C++ compiler to be used to compiler C++ code (e.g. LLVM and our LLVM shims).\n# This is only used for host targets.\n#cxx = &quot;c++&quot;\n\n# Archiver to be used to assemble static libraries compiled from C/C++ code.\n# Note: an absolute path should be used, otherwise LLVM build will break.\n#ar = &quot;ar&quot;\n\n# Ranlib to be used to assemble static libraries compiled from C/C++ code.\n# Note: an absolute path should be used, otherwise LLVM build will break.\n#ranlib = &quot;ranlib&quot;\n\n# Linker to be used to link Rust code. Note that the\n# default value is platform specific, and if not specified it may also depend on\n# what platform is crossing to what platform.\n# Setting this will override the `use-lld` option for Rust code when targeting MSVC.\n#linker = &quot;cc&quot;\n\n# Path to the `llvm-config` binary of the installation of a custom LLVM to link\n# against. Note that if this is specified we don&#39;t compile LLVM at all for this\n# target.\nllvm-config = &quot;/usr/local/bin/llvm-config&quot;\n\n# Normally the build system can find LLVM&#39;s FileCheck utility, but if\n# not, you can specify an explicit file name for it.\n#llvm-filecheck = &quot;/usr/local/include/llvm/FileCheck&quot;\n\n# If this target is for Android, this option will be required to specify where\n# the NDK for the target lives. This is used to find the C compiler to link and\n# build native code.\n#android-ndk = &quot;/path/to/ndk&quot;\n\n# Force static or dynamic linkage of the standard library for this target. If\n# this target is a host for rustc, this will also affect the linkage of the\n# compiler itself. This is useful for building rustc on targets that normally\n# only use static libraries. If unset, the target&#39;s default linkage is used.\n#crt-static = false\n\n# The root location of the musl installation directory. The library directory\n# will also need to contain libunwind.a for an unwinding implementation. Note\n# that this option only makes sense for musl targets that produce statically\n# linked binaries\n#musl-root = &quot;...&quot;\n\n# The full path to the musl libdir.\n#musl-libdir = musl-root/lib\n\n# The root location of the `wasm32-wasi` sysroot.\n#wasi-root = &quot;...&quot;\n\n# Used in testing for configuring where the QEMU images are located, you\n# probably don&#39;t want to use this.\n#qemu-rootfs = &quot;...&quot;\n\n# =============================================================================\n# Distribution options\n#\n# These options are related to distribution, mostly for the Rust project itself.\n# You probably won&#39;t need to concern yourself with any of these options\n# =============================================================================\n[dist]\n\n# This is the folder of artifacts that the build system will sign. All files in\n# this directory will be signed with the default gpg key using the system `gpg`\n# binary. The `asc` and `sha256` files will all be output into the standard dist\n# output folder (currently `build/dist`)\n#\n# This folder should be populated ahead of time before the build system is\n# invoked.\n#sign-folder = &quot;path/to/folder/to/sign&quot;\n\n# This is a file which contains the password of the default gpg key. This will\n# be passed to `gpg` down the road when signing all files in `sign-folder`\n# above. This should be stored in plaintext.\n#gpg-password-file = &quot;path/to/gpg/password&quot;\n\n# The remote address that all artifacts will eventually be uploaded to. The\n# build system generates manifests which will point to these urls, and for the\n# manifests to be correct they&#39;ll have to have the right URLs encoded.\n#\n# Note that this address should not contain a trailing slash as file names will\n# be appended to it.\n#upload-addr = &quot;https://example.com/folder&quot;\n\n# Whether to build a plain source tarball to upload\n# We disable that on Windows not to override the one already uploaded on S3\n# as the one built on Windows will contain backslashes in paths causing problems\n# on linux\n#src-tarball = true\n#\n\n# Whether to allow failures when building tools\n#missing-tools = false\n</code></pre></div>",
        "id": 214385740,
        "sender_full_name": "BN",
        "timestamp": 1603491488
    },
    {
        "content": "<p>if so, you should be able to just unset it and have things work</p>",
        "id": 214385748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491495
    },
    {
        "content": "<p>yeah your issue is it points to /usr/local/bin, not the actual path</p>",
        "id": 214385762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491511
    },
    {
        "content": "<p>x.py doesn't follow the symlink unfortunately</p>",
        "id": 214385769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491521
    },
    {
        "content": "<p>(maybe it should?)</p>",
        "id": 214385774,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491525
    },
    {
        "content": "<p>I dont understand what you mean. The  /usr/local/bin/llvm-config file is not a symbol link</p>",
        "id": 214386137,
        "sender_full_name": "BN",
        "timestamp": 1603491816
    },
    {
        "content": "<p>how did you install llvm?</p>",
        "id": 214386155,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491838
    },
    {
        "content": "<p>(but also the short-term fix is to comment out the <code>llvm-config</code> line)</p>",
        "id": 214386215,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603491871
    },
    {
        "content": "<p>I followed the instructions in the readme of the github repo</p>",
        "id": 214386238,
        "sender_full_name": "BN",
        "timestamp": 1603491892
    },
    {
        "content": "<p><a href=\"https://github.com/llvm/llvm-project\">https://github.com/llvm/llvm-project</a></p>",
        "id": 214386257,
        "sender_full_name": "BN",
        "timestamp": 1603491911
    },
    {
        "content": "<p>Yes, it does work with the default llvm installation of the compiler, but whenever I create a new worktree I have to install llvm again, which is a little annoying</p>",
        "id": 214393273,
        "sender_full_name": "BN",
        "timestamp": 1603492006
    },
    {
        "content": "<p>you need to find the directory that llvm installed itself to, then</p>",
        "id": 214393298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603492026
    },
    {
        "content": "<p>I'd look in <code>/usr/local/lib/llvm-*/bin</code></p>",
        "id": 214393311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603492055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"328097\">@BN</span> also, on linux you can use <code>download-ci-llvm = true</code> and it will make things nice without having to mess with this</p>",
        "id": 214393763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603492446
    },
    {
        "content": "<p>I've tried that, but I'm on Mac OS unfortunately and it didn't work</p>",
        "id": 214393892,
        "sender_full_name": "BN",
        "timestamp": 1603492602
    },
    {
        "content": "<p>ah yeah on mac it's broken :/</p>",
        "id": 214393921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603492662
    },
    {
        "content": "<p>What files is the directory that llvm installed itself to supposed to contain?</p>",
        "id": 214394252,
        "sender_full_name": "BN",
        "timestamp": 1603492963
    },
    {
        "content": "<p><code>FileCheck</code></p>",
        "id": 214394261,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603492972
    },
    {
        "content": "<p>I only have Filecheck in an include directory</p>",
        "id": 214394376,
        "sender_full_name": "BN",
        "timestamp": 1603493080
    },
    {
        "content": "<p>hmm, that's weird ... maybe it's not  in the default build when you install with CMake?</p>",
        "id": 214394385,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603493099
    },
    {
        "content": "<p>can you install llvm with brew? that might be easier than compiling from source</p>",
        "id": 214394396,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603493110
    },
    {
        "content": "<p>I've also tried that, unfortunately the homebrew version doesn't come with the utils which include Filecheck</p>",
        "id": 214394415,
        "sender_full_name": "BN",
        "timestamp": 1603493139
    },
    {
        "content": "<p>I will try to tackle this tommorrow. Thanks for your help Joshua</p>",
        "id": 214394476,
        "sender_full_name": "BN",
        "timestamp": 1603493166
    },
    {
        "content": "<p>sorry this is such a pain :/</p>",
        "id": 214394488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603493188
    },
    {
        "content": "<p>Filecheck is \"internal\" development tool, so I'd be surprised if any distributed version of LLVM actually included it.</p>",
        "id": 214448256,
        "sender_full_name": "nagisa",
        "timestamp": 1603571937
    },
    {
        "content": "<p>Fedora does include it in the normal <code>llvm</code> package.</p>",
        "id": 214461866,
        "sender_full_name": "cuviper",
        "timestamp": 1603591040
    }
]