[
    {
        "content": "<p>Hi all,</p>\n<p>I got another question about procedure_macro_attribute.</p>\n<p>Suppose I have this attribute:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[attribute(module_path!())]</span><span class=\"w\"></span>\n<span class=\"c1\">// a rust item</span>\n</code></pre></div>\n<p>What I am trying to do here is that I want to get the module path of the code at call site and use that in my attribute:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// the path should be the module path of the src which calls the attribute</span>\n<span class=\"cp\">#[attribute(crate::mod::name)]</span><span class=\"w\"></span>\n<span class=\"c1\">// rust item</span>\n</code></pre></div>\n<p>However, I don't know if there's anyway to force an eager expansion of <code>module_path!()</code>, currently my attribute cannot handle <code>module_path!()</code> as input, it can only handle a valid rust path.</p>\n<p>How should I do that? Or is there any workaround to get the module path of the call site of proc_macro?</p>",
        "id": 247654937,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1627601762
    },
    {
        "content": "<p>I don't think it is possible to do this with proc macros. Where do you need the module path for? If it is as string, you can use emit a <code>module_path!()</code> invocation with the call site span inside your macro output. If you need it as path, maybe <code>self::</code> or <code>super::</code> or something like that works?</p>",
        "id": 247697091,
        "sender_full_name": "bjorn3",
        "timestamp": 1627645533
    },
    {
        "content": "<blockquote>\n<p>If you need it as path, maybe <code>self::</code> or <code>super::</code> or something like that works?</p>\n</blockquote>\n<p>Yes I need it as path so that they can be processed in my attribute, the problem is that I need the result of expansion instead of the macro call itself. Can you explain more about how you do that with <code>self</code>?</p>",
        "id": 247732777,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1627663357
    },
    {
        "content": "<p>I thought if you needed to refer to an item within the current module, you can use those.</p>",
        "id": 247736644,
        "sender_full_name": "bjorn3",
        "timestamp": 1627665252
    },
    {
        "content": "<p>What do you exactly need the full module path for?</p>",
        "id": 247736658,
        "sender_full_name": "bjorn3",
        "timestamp": 1627665264
    },
    {
        "content": "<p>Full path is for a exporting feature I am developing, I would like to export the syntax defined in <code>prusti</code> and reuse it in different crate. I think it would be better if I have the full module path because the prusti features are tagged with the source code user write</p>",
        "id": 248254937,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628012937
    },
    {
        "content": "<p>So if there's no way to eager expand a macro, then a full module path at the callsite of proc_macro will be very useful, do anyone know how I can get that?</p>",
        "id": 248255173,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628013043
    }
]