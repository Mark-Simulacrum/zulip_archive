[
    {
        "content": "<p>Hello ! Sorry if this is not a good question, but I was wondering : what does it mean exactly to generalize a type for another ?<br>\nI'm looking at these two functions : <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_infer/infer/combine.rs.html#395-400\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_infer/infer/combine.rs.html#395-400</a><br>\nand <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_infer/infer/combine.rs.html#596-674\">https://doc.rust-lang.org/beta/nightly-rustc/src/rustc_infer/infer/combine.rs.html#596-674</a> <br>\nI saw that those are called to create a type for \"giving it\" to a type var after that type var was related to a known type. I saw something about it checking for cycles but</p>\n<ul>\n<li>what kind of cycles does it check for ?</li>\n<li>why ?</li>\n<li>is that the only thing it does ?</li>\n</ul>\n<p>I would really appreciate if someone explained all that to me.<br>\nThanks in advance !</p>",
        "id": 271755846,
        "sender_full_name": "Teln0",
        "timestamp": 1644772635
    },
    {
        "content": "<p>Okay, so</p>",
        "id": 271756905,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644774333
    },
    {
        "content": "<p>If we have an inference variable <code>?0</code>, which indicates \"some unknown type\"</p>",
        "id": 271756909,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644774352
    },
    {
        "content": "<p>And we want to sub it to some other type <code>Vec&lt;?1&gt;</code>, where in this case <code>?1</code> is another unknown type</p>",
        "id": 271756968,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644774444
    },
    {
        "content": "<p>We can actually say that <code>?0 = Vec&lt;?2&gt;</code> (where <code>?2</code> is yet another unknown type)</p>",
        "id": 271757035,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644774562
    },
    {
        "content": "<p>And then say that <code>?2 &lt;: ?1</code></p>",
        "id": 271757045,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644774575
    },
    {
        "content": "<p>So, instead of <code>?0 &lt;: Vec&lt;?1&gt;</code>, we generate <code>?0 = Vec&lt;?2&gt;; ?2 &lt;: ?1</code></p>",
        "id": 271757093,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644774608
    },
    {
        "content": "<p>The cycle check there essentially checks if the type contains itself</p>",
        "id": 271757100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644774632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20it.20mean.20to.20.22generalize.22.20a.20type.20.3F/near/271757100\">said</a>:</p>\n<blockquote>\n<p>The cycle check there essentially checks if the type contains itself</p>\n</blockquote>\n<p>So that would be something like ?0 = Vec&lt;?1&gt; and ?1 = Vec&lt;?0&gt; ? How would that happen and why is that bad ?</p>",
        "id": 271757128,
        "sender_full_name": "Teln0",
        "timestamp": 1644774717
    },
    {
        "content": "<p>Yes, that would be one way a type would contain itself</p>",
        "id": 271757332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644775000
    },
    {
        "content": "<p>It literally just means we can't solve the type - it's infinitely large</p>",
        "id": 271757344,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644775040
    },
    {
        "content": "<p>But why would it be infinitely large ? Isn't a Vec always a few bytes no matter what you put into it ?</p>",
        "id": 271757556,
        "sender_full_name": "Teln0",
        "timestamp": 1644775292
    },
    {
        "content": "<p>As far as I know, recursive types are allowed in Rust with a layer of indirection</p>",
        "id": 271757577,
        "sender_full_name": "Teln0",
        "timestamp": 1644775318
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312985\">Teln0</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20it.20mean.20to.20.22generalize.22.20a.20type.20.3F/near/271757577\">said</a>:</p>\n<blockquote>\n<p>with a layer of indirection</p>\n</blockquote>\n<p>this is precisely it</p>",
        "id": 271757765,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644775592
    },
    {
        "content": "<p>Your example would be a type of <code>Vec&lt;Vec&lt;Vec&lt;Vec&lt;Vec&lt;Vec&lt;Vec&lt;.....&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code></p>",
        "id": 271757772,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644775619
    },
    {
        "content": "<p>Is it possible to accidentally create a <code>Vec&lt;Vec&lt;Vec&lt;...&gt;&gt;&gt;</code> in real code?</p>",
        "id": 271757799,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644775661
    },
    {
        "content": "<p>When I say large, I don't mean large as in memory, I mean literally the type itself</p>",
        "id": 271757810,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644775678
    },
    {
        "content": "<p>Oh ok ok</p>",
        "id": 271757855,
        "sender_full_name": "Teln0",
        "timestamp": 1644775694
    },
    {
        "content": "<p>You almost certainly create an infinitely large type</p>",
        "id": 271757862,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644775705
    },
    {
        "content": "<blockquote>\n<p>Is it possible to accidentally create a <code>Vec&lt;Vec&lt;Vec&lt;...&gt;&gt;&gt;</code> in real code?</p>\n</blockquote>\n<p>I don't even know how one would create that intentionally</p>",
        "id": 271758069,
        "sender_full_name": "Teln0",
        "timestamp": 1644776034
    },
    {
        "content": "<p>I can't experiment much though I'm on my phone rn</p>",
        "id": 271758110,
        "sender_full_name": "Teln0",
        "timestamp": 1644776051
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=da987cf8c438b5ba2bd64ae91715fcad\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=da987cf8c438b5ba2bd64ae91715fcad</a></p>",
        "id": 271758786,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1644777147
    },
    {
        "content": "<p>All types must be finite. The cycle check is sometimes referred as \"occurs check\" in literature.</p>",
        "id": 271758804,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644777215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20it.20mean.20to.20.22generalize.22.20a.20type.20.3F/near/271758786\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=da987cf8c438b5ba2bd64ae91715fcad\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=da987cf8c438b5ba2bd64ae91715fcad</a></p>\n</blockquote>\n<p>Thank you for this example, it's perfect</p>",
        "id": 271758868,
        "sender_full_name": "Teln0",
        "timestamp": 1644777354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20it.20mean.20to.20.22generalize.22.20a.20type.20.3F/near/271757093\">said</a>:</p>\n<blockquote>\n<p>So, instead of <code>?0 &lt;: Vec&lt;?1&gt;</code>, we generate <code>?0 = Vec&lt;?2&gt;; ?2 &lt;: ?1</code></p>\n</blockquote>\n<p>Last question : does that matter when we only eq two types (and not sub or anything like that) ?</p>",
        "id": 271758913,
        "sender_full_name": "Teln0",
        "timestamp": 1644777391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20it.20mean.20to.20.22generalize.22.20a.20type.20.3F/near/271758786\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=da987cf8c438b5ba2bd64ae91715fcad\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=da987cf8c438b5ba2bd64ae91715fcad</a></p>\n</blockquote>\n<p>that's actually the exact example I was thinking of in my head <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 271759467,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644778171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312985\">Teln0</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20it.20mean.20to.20.22generalize.22.20a.20type.20.3F/near/271758913\">said</a>:</p>\n<blockquote>\n<p>Last question : does that matter when we only eq two types (and not sub or anything like that) ?</p>\n</blockquote>\n<p>Not really. Then it's just a normal instantiation</p>",
        "id": 271759536,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644778232
    }
]