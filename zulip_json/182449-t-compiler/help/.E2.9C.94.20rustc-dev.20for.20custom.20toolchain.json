[
    {
        "content": "<p>How do i get rustc-dev to work with custom toolchains? im trying to build a rustc_private crate with a custom rustc version but im not quite sure how, since i cant just component add on the custom toolchain</p>",
        "id": 245381811,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625784766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/rustc-dev.20for.20custom.20toolchain/near/245381811\">said</a>:</p>\n<blockquote>\n<p>How do i get rustc-dev to work with custom toolchains? im trying to build a rustc_private crate with a custom rustc version but im not quite sure how, since i cant just component add on the custom toolchain</p>\n</blockquote>\n<p>You can but it's a little more complicated, since <code>./x.py install</code> seems to be broken. The steps I used were:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Build the stage 1 compiler: it's much faster than stage 2 but you need at least stage 1 to test changes to the compiler.</span>\n./x.py build --stage <span class=\"m\">1</span>\n\n<span class=\"c1\"># Add any other options you want to add, such as:</span>\n./x.py build src/tools/miri --stage <span class=\"m\">1</span>\n./x.py build src/tools/miri/cargo-miri --stage <span class=\"m\">1</span>\n\n<span class=\"c1\"># Copy it over to mimic a real toolchain.</span>\nmkdir -p ~/cargo/custom\ncp -a build/x86_64-unknown-linux-gnu/stage2/* ~/cargo/custom\ncp -a build/x86_64-unknown-linux-gnu/stage2-tools-bin/*~/cargo/custom/bin/\n\n<span class=\"c1\"># Then, add the toolchain to rustup.</span>\nrustup toolchain link custom ~/cargo/custom\n</code></pre></div>\n<p>Hope that helps. If you need to distribute the toolchain or binaries in any sense, I believe you will have to build a stage 2 compiler.</p>",
        "id": 245383309,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625785992
    },
    {
        "content": "<p>i see, ill try that, thanks!</p>",
        "id": 245387364,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625789851
    },
    {
        "content": "<p>hmm building <code>compiler/rustc</code> for stage 1 seemed to work for building the the codegen crate i have, however rustc now does not want to load the codegen dll when i try cargo building with a custom codegen. I presume this is something to do with not being able to load the rustc-driver or std dlls, but im not sure what the issue is</p>",
        "id": 245473876,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625852400
    },
    {
        "content": "<p>the strange thing is that the rustc-driver dll is the same no matter the toolchain i build for, but that dll is not present anywhere on my system, however it works if i build for nightly then try to build with a custom codegen for nightly</p>",
        "id": 245474064,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625852504
    },
    {
        "content": "<p>The rustc_driver a custom codegen backend links to should be the one in <code>lib/</code>. That is the one rustc links to.</p>",
        "id": 245485187,
        "sender_full_name": "bjorn3",
        "timestamp": 1625858076
    },
    {
        "content": "<p>rustc-dev is only necessary for compilation, not running.</p>",
        "id": 245485219,
        "sender_full_name": "bjorn3",
        "timestamp": 1625858099
    },
    {
        "content": "<p>what is the error message and how did you try to load it. (what is the exact used <code>-Zcodegen-backend</code> arg?)</p>",
        "id": 245485288,
        "sender_full_name": "bjorn3",
        "timestamp": 1625858151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> i built my codegen using <code>cargo build</code> (custom is the default toolchain), then i ran</p>\n<div class=\"codehilite\"><pre><span></span><code>$env:RUST_BACKTRACE = &quot;full&quot;; $env:RUSTFLAGS=&quot;-Z codegen-backend=C:\\Users\\caval\\Documents\\Github\\rustc_codegen_nvvm\\target\\debug\\rustc_codegen_nvvm.dll -Z symbol-mangling-version=legacy&quot;; cargo build --lib -Z build-std=core -Zbuild-std-features=compiler-builtins-mem --target nvptx64-nvidia-cuda\n</code></pre></div>\n<p>inside of my test crate (which is no_std)<br>\nThis works fine if i build my codegen for nightly then try to build with nightly, but it does not work if i use a custom codegen</p>",
        "id": 245489084,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625860194
    },
    {
        "content": "<p>this yields a dll open error that it cant open the codegen dll, the path is fine and all, and theres no unresolved dll deps, only rustc-driver and std, so i presume it cannot load one of those</p>",
        "id": 245489210,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625860252
    },
    {
        "content": "<p>there is one mismatch between nightly and the custom toolchain, <code>set_frame_pointer_elimination</code> is called <code>set_frame_pointer_type</code> in latest rustc</p>",
        "id": 245489666,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625860463
    },
    {
        "content": "<p>Weird. Not sure what the problem is.</p>",
        "id": 245494580,
        "sender_full_name": "bjorn3",
        "timestamp": 1625863006
    },
    {
        "content": "<p>how does rustc get the rustc-driver and std dlls anyways? they arent in PATH and i dont see any custom logic in rustc that does it</p>",
        "id": 245520064,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625876821
    },
    {
        "content": "<p>On windows they are next to rustc.exe. The kernel looks in the same dir as the executable before it looks at other places by default. On other OSes, they are in the <code>lib</code> dir and <code>rustc</code> has the rpath set to this dir. We would do the same thing on windows if it actually supported rpaths.</p>",
        "id": 245542271,
        "sender_full_name": "bjorn3",
        "timestamp": 1625912606
    },
    {
        "content": "<p>To be precise, if the application doesn't have a manifest (which rustc doesn't) the win32 subsystem will first look for a <code>rustc.exe.local</code> sub directory within the application directory. This could be a juncture point to another location. Traditionally the program folder was a kind of application bundle with the binaries in the root and resources in sub directories so this was the old way to override dll loading.</p>\n<p>Nowadays it's all done with side-by-side assemblies but rust doesn't really support that.</p>",
        "id": 245551741,
        "sender_full_name": "Chris Denton",
        "timestamp": 1625925256
    },
    {
        "content": "<p>Oh i see, makes sense, thanks! I got stuff to work by just cleaning everything, repulling from github and rebuilding, essentially turning it on and off <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 245564395,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1625941328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> has marked this topic as resolved.</p>",
        "id": 245580161,
        "sender_full_name": "Notification Bot",
        "timestamp": 1625965021
    }
]