[
    {
        "content": "<p>Hello <span aria-label=\"hello\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"hello\">:hello:</span> !</p>\n<p>When making an abstraction crate over a C API, it is often useful to transform a C integer to a Rust enum when the API says that the value must be one of the possibilities described.<br>\nUsually I would create a new enum and conversions to/from the C equivalent type. However in some cases it is useful to have the Rust type share the same memory representation than the C one so it can be used directly on the API.</p>\n<p>The <code>repr(u*)</code> attribute is very useful for that to set the size of fieldless enums to match the size of the C type. It's fine when the size of the C types are <em>fixed</em> in the API but it is not useful if the C type is one of the <code>int</code>, <code>long</code>, etc which size depend on the compilation target.</p>\n<p>For example if in my C API I have:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"n\">fruit_t</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>and the API says that <code>fruit_t</code> can either be <code>1</code> (orange), <code>2</code> (apple) or <code>3</code> (kiwi).</p>\n<p><code>bindgen</code> will generate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">fruit_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// depends on the platform</span>\n</code></pre></div>\n<p>I would like to do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Fruit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Orange</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Apple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Kiwi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and fix the size of that <code>Fruit</code> type to be <code>fruit_t</code> so that it would be correct on every target!</p>\n<p>For example, could <code>#[repr(fruit_t)]</code> be a thing?</p>",
        "id": 217410734,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1605884203
    },
    {
        "content": "<p>This seems very brittle, because this means that your ABI depends not only from the plateform (Linux arm, Windows amd64, …), but also from the compiler that you are using for compiling your C sources. AFAIK gcc and msvc don't have the same size for <code>long</code> on the same plateform.</p>\n<p>I think that I would create a <a href=\"http://build.rs\">build.rs</a> script that would detect the size of the various kind of integer you need (<code>int</code>, <code>long</code>, …), and set a feature for each possible value (like <code>unsigned_long_is_64bits</code> or <code>unsigned_long_is_32_bits</code>), then use something like (not tested)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg_attr(unsigned_long_is_64bits, repr(u64)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(unsigned_long_is_32bits, repr(u32)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Fruit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Orange</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Apple</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Kiwi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217419081,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605887766
    },
    {
        "content": "<p>Ah that is a good idea indeed! Thanks for the answer, I will definitely be able to do that.</p>",
        "id": 217420883,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1605888470
    },
    {
        "content": "<p>I am not familiar at all with features and <code>cfg()</code>, but it seems that we can also assign a value (instead of just using them as flag), so maybe you could have a feature <code>sizeof_unsigned_long</code> set to <code>32</code> or <code>64</code> depending on the platform, then <code>#[cfg_attr(sizeof_unsign_long == 32, repr(u32)] #[cfg_attr(sizeof_unsign_long == 64, repr(u64)]</code>.</p>",
        "id": 217422109,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605888912
    },
    {
        "content": "<p>In case you don't know, it's really easy to compile programs directly from heredoc in shell:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">SIZE</span><span class=\"o\">=</span><span class=\"k\">$(</span>gcc <span class=\"s\">&lt;&lt;EOF -x c - -o binary &amp;&amp; ./binary</span>\n<span class=\"s\">#include&lt;stdio.h&gt;</span>\n<span class=\"s\">int main() {</span>\n<span class=\"s\">    printf(\"%d\", sizeof(unsigned long) * 8);</span>\n<span class=\"s\">}</span>\n<span class=\"s\">EOF</span>\n<span class=\"k\">)</span>\n</code></pre></div>\n<p>This will compile the file, run it, the assign the value to the variable <code>SIZE</code>.</p>\n<p>Another option is:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">SIZE</span><span class=\"o\">=</span><span class=\"k\">$(</span>gcc <span class=\"s\">&lt;&lt;EOF -x c - -o binary &amp;&amp; ./binary; echo $?</span>\n<span class=\"s\">int main() {</span>\n<span class=\"s\">    return sizeof(unsigned long) * 8;</span>\n<span class=\"s\">}</span>\n<span class=\"s\">EOF</span>\n<span class=\"k\">)</span>\n</code></pre></div>",
        "id": 217423819,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605889624
    },
    {
        "content": "<p>Why isn't <code>std::mem::size_of::&lt;c_long&gt;()</code> enough?</p>",
        "id": 217423941,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605889679
    },
    {
        "content": "<p>I need to double check, but I don't think that <code>mingw</code>, <code>clang</code> (for Windows) and <code>msvc</code> have the same value for it on Windows. So <code>std::mem::size_of::&lt;c_long&gt;()</code> can't give the right answer since there is no right answer.</p>",
        "id": 217424428,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605889849
    },
    {
        "content": "<p>those target different ABIs though</p>",
        "id": 217424509,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605889881
    },
    {
        "content": "<p>you can't target multiple C ABIs with the same Rust target</p>",
        "id": 217424564,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605889907
    },
    {
        "content": "<p>in that case <code>std::mem::size_of::&lt;c_long&gt;()</code> is perfectly good. I didn't realized that this was included in the target ABI.</p>",
        "id": 217424675,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605889943
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> target <strong>triple</strong>…</p>",
        "id": 217424780,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605889986
    },
    {
        "content": "<p>At least I learned!</p>",
        "id": 217424812,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605889999
    },
    {
        "content": "<p>Side note: Not a big deal, but these discussions are more suited to <a class=\"stream\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general\">#general</a> or <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a>. This stream is for help with <em>developing</em> the compiler.</p>",
        "id": 217528664,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606009215
    },
    {
        "content": "<p>someone privileged could make this channel <code>t-compiler/dev-qa</code></p>",
        "id": 217530541,
        "sender_full_name": "oliver",
        "timestamp": 1606013026
    },
    {
        "content": "<p>Oops sorry for the wrong channel. Will think about it next time.</p>\n<p>Thanks for the messages! Setting the features with <code>size_of</code> seems to be the most convenient. I guess being able to do <code>#[repr()]</code> with typedefs would be nice to have but the problem can be overcome with that.<br>\nCurrently we are defining transparent newtype wrappers with public <code>const</code> defined:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Fruit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">val</span>: <span class=\"nc\">fruit_t</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fruit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ORANGE</span>: <span class=\"nc\">Fruit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Fruit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217639301,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1606144365
    }
]