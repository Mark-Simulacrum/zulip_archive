[
    {
        "content": "<p>I've run into a situation where I'm trying to prove something along the lines of this: for some type <code>T</code>, <code>&lt;T as Future&gt;::Output == U where U: Try</code>. I know how to prove both <code>&lt;T as Future&gt;::Output</code> and <code>where U: Try</code> separately using <code>InferCtxt::predicate_may_hold</code>, but I don't know how to construct an obligation for both.</p>",
        "id": 169353897,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561928060
    },
    {
        "content": "<p>Does anyone have any ideas about how I could go about doing this?</p>",
        "id": 169353956,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1561928164
    },
    {
        "content": "<p>I've also ran into situations where this would be useful, anyone have any ideas?</p>",
        "id": 170432808,
        "sender_full_name": "davidtwco",
        "timestamp": 1562660197
    },
    {
        "content": "<p>Iâ€™ve made some attempts at this by including the <code>TraitPredicate</code> in the <code>param_env</code> of the <code>Obligation</code> with both the <code>TraitPredicate</code> and <code>ProjectionPredicate</code> referencing the same type variable but none of them have worked</p>",
        "id": 170486772,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1562703241
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"692\">@WG-traits</span></p>",
        "id": 170486856,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1562703295
    }
]