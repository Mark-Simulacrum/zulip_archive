[
    {
        "content": "<p>I'm not sure if this is the right place to ask this question, but I'm wondering if the Rust compiler+optimizer is smart enough to elide away a no-op function call.</p>\n<p>For example, if I want to have a generic that <strong>could</strong> do some kind of tracking/debugging depending on its implementation, but I want it to be completely ignored if its implementation is a no-op (like <code>NoDebug</code> below):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tracker</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">NoDebug</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tracker</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">NoDebug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Do nothing</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">DataAnalyzer</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TrackerType</span>: <span class=\"nc\">Tracker</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nc\">Data</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tracker</span>: <span class=\"nc\">TrackerType</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TrackerType</span>: <span class=\"nc\">Tracker</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">DataAnalyzer</span><span class=\"o\">&lt;</span><span class=\"n\">Data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TrackerType</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Do something with data</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tracker</span><span class=\"p\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If <code>Analyzer</code> is given a <code>NoDebug</code> implementation of <code>Tracker</code>, then would the Rust compiler be able to optimize away the <code>self.tracker.check(&amp;self.data)</code> call completely? I tried testing this in godbolt, but I see that it's still generating some assembly jumps to run the <code>NoDebug</code> implementation of <code>Tracker::check</code> which just returns immediately. But I'm not sure if the assembly that godbolt is providing is the fully optimized version of the code or not.</p>",
        "id": 276294042,
        "sender_full_name": "Grey",
        "timestamp": 1648017991
    },
    {
        "content": "<p>This is a link to my godbolt test, in case it's helpful: <a href=\"https://godbolt.org/z/3KWxKKsnE\">https://godbolt.org/z/3KWxKKsnE</a></p>",
        "id": 276294114,
        "sender_full_name": "Grey",
        "timestamp": 1648018062
    },
    {
        "content": "<p>Add <code>-O</code> as compiler arg in godbolt to enable optimizations, you'll see everything gets optimized away.</p>",
        "id": 276309164,
        "sender_full_name": "The 8472",
        "timestamp": 1648029406
    },
    {
        "content": "<p>Oh excellent! I didn't notice the compiler option box until you mentioned it. This is exactly what I was hoping for <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 276314750,
        "sender_full_name": "Grey",
        "timestamp": 1648032443
    },
    {
        "content": "<p>Hi, i'm trying to use cargo sysroot, but run into this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0412</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">c_char</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core</span>::<span class=\"n\">ffi</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">yoru</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">ecc6299db9ec823</span><span class=\"o\">/</span><span class=\"n\">compiler_builtins</span><span class=\"o\">-</span><span class=\"mf\">0.1.71</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mem</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">74</span>:<span class=\"mi\">58</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">strlen</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ffi</span>::<span class=\"n\">c_char</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                                          </span><span class=\"o\">^^^^^^</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core</span>::<span class=\"n\">ffi</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276355503,
        "sender_full_name": "yoru",
        "timestamp": 1648051166
    }
]