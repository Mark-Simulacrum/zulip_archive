[
    {
        "content": "<p>howdy y'all -- I currently have rustc linked to the stage1 toolchain following the <a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#creating-a-rustup-toolchain\">instructions in the dev guide</a>, but when stage1 is built, it doesn't include cargo, so I can't do <code>cargo +stage1 build</code> on a project (it falls back to the default rustc toolchain).</p>",
        "id": 277054583,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648582409
    },
    {
        "content": "<p>That's fine, and makes sense, but then when I do something like <code>x build --stage=1 cargo</code>, I _still_ can't build with <code>cargo +stage1 build</code> because the cargo binary is located somewhere different than the rustc compiler artifacts.</p>",
        "id": 277054591,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648582416
    },
    {
        "content": "<p>Is there something simple that I'm missing to get a stage1 flavor of cargo built and setup -- preferrably not including copying build artifacts around in the various subdirectories of <code>build/</code>?</p>",
        "id": 277054681,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648582448
    },
    {
        "content": "<p>I had the same issue/question, and even after adding the tools keys to config.toml wasn't able to make it magically work with rustup (so there may be a different rustup link command to actually add it there) but after your cargo stage 1 build, the cargo binary will be available in <code>build/x86_64-unknown-linux-gnu/stage1-tools-bin/cargo</code> and I just used that (though I don't remember if using it requires setting the <code>RUSTC</code> env var to the stage1 rustc path, I <em>think</em> you don't need to set it yourself)</p>",
        "id": 277055501,
        "sender_full_name": "lqd",
        "timestamp": 1648582919
    },
    {
        "content": "<p>AIUI you you need <code>./x.py build --stage 1</code>, not <code>./x.py build --stage 1 cargo</code>. The former builds the stage1 toolchain, the latter builds cargo <em>with</em> the stage1 toolchain. I could be wrong though, the stage stuff is confusing.</p>",
        "id": 277061114,
        "sender_full_name": "The 8472",
        "timestamp": 1648585893
    },
    {
        "content": "<blockquote>\n<p>when stage1 is built, it doesn't include cargo, so I can't do cargo +stage1 build on a project (it falls back to the default rustc toolchain).</p>\n</blockquote>\n<p>this doesn't sound right. it falls back to the <em>cargo</em> from the default toolchain, but it will still use your newly built rustc.</p>",
        "id": 277061956,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648586383
    },
    {
        "content": "<p>and yes, <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> is right that <code>build --stage 1</code> means \"build using stage1\"</p>",
        "id": 277062020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648586407
    },
    {
        "content": "<p>are you modifying both cargo and rustc in-tree? modifying cargo in-tree is not super supported ...</p>",
        "id": 277062061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648586439
    },
    {
        "content": "<p>anyway, I think it would be reasonable to teach x.py to copy stage1-tools-bin/cargo into stage2/bin/cargo, see <a href=\"https://github.com/rust-lang/rust/issues/81431\">https://github.com/rust-lang/rust/issues/81431</a></p>",
        "id": 277062274,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648586578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Getting.20cargo.20set.20up.20for.20stage1.20toolchain/near/277062061\">said</a>:</p>\n<blockquote>\n<p>are you modifying both cargo and rustc in-tree? modifying cargo in-tree is not super supported ...</p>\n</blockquote>\n<p>No, just modifying rustc. And yeah, I'm building rustc first with <code>x build --stage=1</code>. I was under the impression that it wasn't using the built rustc, but maybe I was misled by checking <code>cargo +stage1 -V</code> and it actually is using the newly built rustc.</p>",
        "id": 277065907,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1648588685
    },
    {
        "content": "<p>ah yeah the proper check is either <code>rustc +stage1 -V</code> or <code>cargo rustc -- -V</code></p>",
        "id": 277065966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648588734
    },
    {
        "content": "<p>Oh, you may have to set <code>build.extended = true</code> in your <code>config.toml</code><br>\nAnd you can also check where it's looking with<br>\n<code>rustup +stage1 which rustc</code><br>\n<code>rustup +stage1 which cargo</code></p>",
        "id": 277066772,
        "sender_full_name": "The 8472",
        "timestamp": 1648589194
    }
]