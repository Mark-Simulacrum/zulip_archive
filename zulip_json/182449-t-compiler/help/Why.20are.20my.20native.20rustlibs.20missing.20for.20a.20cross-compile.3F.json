[
    {
        "content": "<p>When cross-compiling from x86_64 to aarch64, the native <code>rustlib</code> directory is empty in the target compiler. However, my x86_64 compiler has the rustlibs for the _target_:</p>\n<div class=\"codehilite\"><pre><span></span><code>% ls build/aarch64-apple-darwin/stage1/lib/rustlib/aarch64-apple-darwin/lib | cat\nlibLLVM.dylib\n\n% ls build/x86_64-apple-darwin/stage1/lib/rustlib/aarch64-apple-darwin/lib | cat\nliballoc-bc1bed71af59030d.rlib\nlibbacktrace-908ce5b600cbb5e4.rlib\nlibbacktrace_sys-73640f972bd0168e.rlib\nlibcfg_if-ed32d5eef52668e4.rlib\nlibcompiler_builtins-48b6ebeb945f7f23.rlib\nlibcore-eae2616245cf1435.rlib\nlibgetopts-4868046cc68f6a07.rlib\nlibhashbrown-4019ac1df1726b61.rlib\nliblibc-147e2bbc2c8920b5.rlib\nlibpanic_abort-2d6d15cfb868ff37.rlib\nlibpanic_unwind-5fba9238dd90a238.rlib\nlibproc_macro-7b75bc3478afb07d.rlib\nlibrustc_demangle-022c7d6aca3d2ccc.rlib\nlibrustc_std_workspace_alloc-322b374d69dcba49.rlib\nlibrustc_std_workspace_core-3322a8e8a27ca844.rlib\nlibrustc_std_workspace_std-12218c207bcf61af.rlib\nlibstd-6247a4aa0eaf3fee.dylib\nlibstd-6247a4aa0eaf3fee.rlib\nlibterm-fe16d30007d35333.rlib\nlibtest-23728a41e0e6f04a.dylib\nlibtest-23728a41e0e6f04a.rlib\nlibunicode_width-e2337f69b5becf1b.rlib\nlibunwind-65eb1f72892d4a26.rlib\nself-contained\n</code></pre></div>",
        "id": 202896868,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593907426
    },
    {
        "content": "<p>Is this \"normal\" for a cross-compile? Did I do something wrong?</p>",
        "id": 202896910,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593907453
    },
    {
        "content": "<p>probably. there are 3 triples: \"target\", \"host\" and \"build\"</p>",
        "id": 202904924,
        "sender_full_name": "eddyb",
        "timestamp": 1593923864
    },
    {
        "content": "<p>I can never remember what the \"host\" vs \"build\" distinction is</p>",
        "id": 202904925,
        "sender_full_name": "eddyb",
        "timestamp": 1593923874
    },
    {
        "content": "<p>but AFAIK you use <code>--target</code> to get cross-compilation stdlib</p>",
        "id": 202904966,
        "sender_full_name": "eddyb",
        "timestamp": 1593923902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> actually, wait, I misread, why would <code>build/aarch64-apple-darwin</code> exist/work?</p>",
        "id": 202904973,
        "sender_full_name": "eddyb",
        "timestamp": 1593923948
    },
    {
        "content": "<p>it was in the host array, I think</p>",
        "id": 202904976,
        "sender_full_name": "André Arko",
        "timestamp": 1593923978
    },
    {
        "content": "<p>unless you can execute <code>aarch64-apple-darwin</code> binaries, that directory shouldn't make sense I don't think?</p>",
        "id": 202904978,
        "sender_full_name": "eddyb",
        "timestamp": 1593923990
    },
    {
        "content": "<p>we can</p>",
        "id": 202904979,
        "sender_full_name": "André Arko",
        "timestamp": 1593923997
    },
    {
        "content": "<p>is this using the OS-level emulation layer thing?</p>",
        "id": 202905026,
        "sender_full_name": "eddyb",
        "timestamp": 1593924019
    },
    {
        "content": "<p>no, I have physical arm64 macOS hardware</p>",
        "id": 202905033,
        "sender_full_name": "André Arko",
        "timestamp": 1593924037
    },
    {
        "content": "<p>and that build above produces a <code>rustc</code> that works, but complains about a missing libstd</p>",
        "id": 202905035,
        "sender_full_name": "André Arko",
        "timestamp": 1593924052
    },
    {
        "content": "<p>I am talking about a system that can execute both <code>aarch64-apple-darwin</code> and <code>x86_64-apple-darwin</code></p>",
        "id": 202905037,
        "sender_full_name": "eddyb",
        "timestamp": 1593924061
    },
    {
        "content": "<p>oh I see, yes, the physical hardware can execute both</p>",
        "id": 202905041,
        "sender_full_name": "André Arko",
        "timestamp": 1593924076
    },
    {
        "content": "<p>AFAIK that's the only reason to have both under <code>./build/</code></p>",
        "id": 202905043,
        "sender_full_name": "eddyb",
        "timestamp": 1593924090
    },
    {
        "content": "<p>so what's the right way to cross-compile from x86_64 to aarch64 then?</p>",
        "id": 202905050,
        "sender_full_name": "André Arko",
        "timestamp": 1593924110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> the hardware you're building Rust on?</p>",
        "id": 202905051,
        "sender_full_name": "eddyb",
        "timestamp": 1593924114
    },
    {
        "content": "<p>which one is the native and which one is it emulating?</p>",
        "id": 202905094,
        "sender_full_name": "eddyb",
        "timestamp": 1593924133
    },
    {
        "content": "<p>okay let me back up :)</p>",
        "id": 202905097,
        "sender_full_name": "André Arko",
        "timestamp": 1593924156
    },
    {
        "content": "<p>I have 1 intel x86_64 macOS machine, and 1 apple arm64 macOS machine</p>",
        "id": 202905099,
        "sender_full_name": "André Arko",
        "timestamp": 1593924174
    },
    {
        "content": "<p>to be clear: I'm asking about the machine that has both directories under <code>./build/</code></p>",
        "id": 202905102,
        "sender_full_name": "eddyb",
        "timestamp": 1593924182
    },
    {
        "content": "<p>no other machine</p>",
        "id": 202905104,
        "sender_full_name": "eddyb",
        "timestamp": 1593924184
    },
    {
        "content": "<p>that directory was produced by <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>'s x86_64 machine, where he was trying to cross-compile a rustc that would work an arm64</p>",
        "id": 202905110,
        "sender_full_name": "André Arko",
        "timestamp": 1593924214
    },
    {
        "content": "<p>he succeeded, the output rustc works when copied to the arm64 hardware</p>",
        "id": 202905112,
        "sender_full_name": "André Arko",
        "timestamp": 1593924235
    },
    {
        "content": "<p>can the x86_64 machine <em>run</em> aarch64 executables?</p>",
        "id": 202905113,
        "sender_full_name": "eddyb",
        "timestamp": 1593924236
    },
    {
        "content": "<p>no</p>",
        "id": 202905115,
        "sender_full_name": "André Arko",
        "timestamp": 1593924239
    },
    {
        "content": "<p>okay then AFAIK <code>build/aarch64-apple-darwin</code> shouldn't exist on that machine</p>",
        "id": 202905159,
        "sender_full_name": "eddyb",
        "timestamp": 1593924256
    },
    {
        "content": "<p>the one inside stage1, or the one containing stage1?</p>",
        "id": 202905163,
        "sender_full_name": "André Arko",
        "timestamp": 1593924280
    },
    {
        "content": "<p>oh you mean the top level one?</p>",
        "id": 202905166,
        "sender_full_name": "André Arko",
        "timestamp": 1593924289
    },
    {
        "content": "<p>yes, that's the one that depends on the hardware you're running on. or at least I haven't seen it any other way</p>",
        "id": 202905169,
        "sender_full_name": "eddyb",
        "timestamp": 1593924304
    },
    {
        "content": "<p>...your message is very confusing because the entire point of running the build was to create that directory</p>",
        "id": 202905172,
        "sender_full_name": "André Arko",
        "timestamp": 1593924306
    },
    {
        "content": "<p>like, cross compiling an arm64 rustc from x86_64</p>",
        "id": 202905177,
        "sender_full_name": "André Arko",
        "timestamp": 1593924335
    },
    {
        "content": "<p>hmmmmmm</p>",
        "id": 202905178,
        "sender_full_name": "eddyb",
        "timestamp": 1593924344
    },
    {
        "content": "<p>and it worked, <code>build/aarch64-apple-darwin</code> contained a working rustc at the end</p>",
        "id": 202905179,
        "sender_full_name": "André Arko",
        "timestamp": 1593924346
    },
    {
        "content": "<p>oh I see, our buildsystem is even more confusing than I expected</p>",
        "id": 202905182,
        "sender_full_name": "eddyb",
        "timestamp": 1593924359
    },
    {
        "content": "<p>but, confusingly, it was missing libstd</p>",
        "id": 202905183,
        "sender_full_name": "André Arko",
        "timestamp": 1593924361
    },
    {
        "content": "<p>unlike the x86_64 directory, which was not missing libstd</p>",
        "id": 202905225,
        "sender_full_name": "André Arko",
        "timestamp": 1593924373
    },
    {
        "content": "<p>(it can build anything cross-compiled into <code>build/x86_64-apple-darwin</code>, it's just the sysroot that wouldn't make sense)</p>",
        "id": 202905233,
        "sender_full_name": "eddyb",
        "timestamp": 1593924407
    },
    {
        "content": "<p>(literally copying the libs from x86_64 to aarch64 made it a full, working rustc, which I have then used to cargo install ripgrep and some other things successfully)</p>",
        "id": 202905236,
        "sender_full_name": "André Arko",
        "timestamp": 1593924413
    },
    {
        "content": "<p>huh okay</p>",
        "id": 202905237,
        "sender_full_name": "André Arko",
        "timestamp": 1593924420
    },
    {
        "content": "<p>in that case, what would be the \"right\" way to do that?</p>",
        "id": 202905247,
        "sender_full_name": "André Arko",
        "timestamp": 1593924437
    },
    {
        "content": "<p>not sure. to expand a bit, we have <code>build/$tripleX/stage0-rustc/release/</code> and <code>build/$tripleX/stage0-rustc/$tripleY/release/</code></p>",
        "id": 202905297,
        "sender_full_name": "eddyb",
        "timestamp": 1593924496
    },
    {
        "content": "<p>the former will contain things like build scripts and proc macros, that have to <em>run</em> on the same hardware that's doing the build</p>",
        "id": 202905301,
        "sender_full_name": "eddyb",
        "timestamp": 1593924530
    },
    {
        "content": "<p>while the latter will contain cross-compilation artifacts</p>",
        "id": 202905304,
        "sender_full_name": "eddyb",
        "timestamp": 1593924541
    },
    {
        "content": "<p>and I'm not even sure <code>$tripleX</code> <em>matters</em> for those</p>",
        "id": 202905308,
        "sender_full_name": "eddyb",
        "timestamp": 1593924557
    },
    {
        "content": "<p>ah ok, interesting</p>",
        "id": 202905310,
        "sender_full_name": "André Arko",
        "timestamp": 1593924561
    },
    {
        "content": "<p>(meaning we might be able to simplify our directory structure. not sure though)</p>",
        "id": 202905312,
        "sender_full_name": "eddyb",
        "timestamp": 1593924571
    },
    {
        "content": "<p>so (iirc) the configuration was <code>build=\"x86_64-apple-darwin\"</code> and <code>host=[\"aarch64-apple-darwin\"]</code></p>",
        "id": 202905316,
        "sender_full_name": "André Arko",
        "timestamp": 1593924593
    },
    {
        "content": "<p><em>however</em>, what you are talking about is the sysroots, e.g. <code>build/$tripleX/stage1</code> (which has <code>bin/rustc</code> and <code>lib/rustlib/$tripleZ</code> etc.)</p>",
        "id": 202905359,
        "sender_full_name": "eddyb",
        "timestamp": 1593924617
    },
    {
        "content": "<p>that's what I was missing at first, those don't have more than <code>$tripleX</code> for the binaries</p>",
        "id": 202905368,
        "sender_full_name": "eddyb",
        "timestamp": 1593924651
    },
    {
        "content": "<p>ahh, yes that seems right</p>",
        "id": 202905374,
        "sender_full_name": "André Arko",
        "timestamp": 1593924680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> okay now that I'm not (as) confused... did you copy directories from <code>build/</code> or try to use installing into a temporary directory?</p>",
        "id": 202905380,
        "sender_full_name": "eddyb",
        "timestamp": 1593924705
    },
    {
        "content": "<p>the former is not really supported</p>",
        "id": 202905424,
        "sender_full_name": "eddyb",
        "timestamp": 1593924726
    },
    {
        "content": "<p>except for <code>rustup toolchain link</code> and that's for non-cross-compiled <code>rustc</code> anyway</p>",
        "id": 202905432,
        "sender_full_name": "eddyb",
        "timestamp": 1593924743
    },
    {
        "content": "<p>I think you need something like <code>DESTDIR=some/empty/dir ./x.py install</code></p>",
        "id": 202905444,
        "sender_full_name": "eddyb",
        "timestamp": 1593924791
    },
    {
        "content": "<p>and then <em>that</em> directory should contain <code>bin</code>, <code>lib</code>, <code>etc</code>, etc.</p>",
        "id": 202905452,
        "sender_full_name": "eddyb",
        "timestamp": 1593924812
    },
    {
        "content": "<p>ahh, okay. I didn't see anything in the rustc book that explained that, but maybe I missed it</p>",
        "id": 202905458,
        "sender_full_name": "André Arko",
        "timestamp": 1593924819
    },
    {
        "content": "<p>I was confused about why everything seemed so scattered in <code>build/</code> :)</p>",
        "id": 202905459,
        "sender_full_name": "André Arko",
        "timestamp": 1593924831
    },
    {
        "content": "<p>yeah you're not supposed to poke around in there</p>",
        "id": 202905462,
        "sender_full_name": "eddyb",
        "timestamp": 1593924841
    },
    {
        "content": "<p>I guess this is just <code>./configure &amp;&amp; make install</code> tbh</p>",
        "id": 202905501,
        "sender_full_name": "eddyb",
        "timestamp": 1593924852
    },
    {
        "content": "<p>that's where the <code>DESTDIR</code> env var convention comes from</p>",
        "id": 202905508,
        "sender_full_name": "eddyb",
        "timestamp": 1593924866
    },
    {
        "content": "<p>this is how distros (are supposed to) build rustc</p>",
        "id": 202905511,
        "sender_full_name": "eddyb",
        "timestamp": 1593924875
    },
    {
        "content": "<p>got it, I'm not familiar with DESTDIR (only ./configure --prefix) so that didn't occur to me</p>",
        "id": 202905524,
        "sender_full_name": "André Arko",
        "timestamp": 1593924907
    },
    {
        "content": "<p>we also had the small intermediate problem of needing to edit rustc, build a new one, and use that one to run the cross-compile build</p>",
        "id": 202905530,
        "sender_full_name": "André Arko",
        "timestamp": 1593924939
    },
    {
        "content": "<p><code>--prefix</code> is where you'll install stuff (so <code>/usr</code> typically), <code>DESTDIR</code> is whatever dir to dump the actual files in</p>",
        "id": 202905534,
        "sender_full_name": "eddyb",
        "timestamp": 1593924960
    },
    {
        "content": "<p>that the packager will put into a <code>rpm</code>, <code>deb</code>, etc.</p>",
        "id": 202905573,
        "sender_full_name": "eddyb",
        "timestamp": 1593924969
    },
    {
        "content": "<p>got it</p>",
        "id": 202905576,
        "sender_full_name": "André Arko",
        "timestamp": 1593924990
    },
    {
        "content": "<p>thanks, this is helpful</p>",
        "id": 202905578,
        "sender_full_name": "André Arko",
        "timestamp": 1593924992
    },
    {
        "content": "<p>I only learned about it a few months ago, from someone trying to package Rust without using Python (that was... a lot of fun :P)</p>",
        "id": 202905580,
        "sender_full_name": "eddyb",
        "timestamp": 1593925001
    },
    {
        "content": "<p>you should also be able to create whatever <code>rustup</code> downloads and install, using... <code>./x.py dist</code> I think?, but presumably that's harder to use than installing into a directory that you then copy over</p>",
        "id": 202905595,
        "sender_full_name": "eddyb",
        "timestamp": 1593925068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> this seems useful <a href=\"https://www.gnu.org/prep/standards/html_node/DESTDIR.html\">https://www.gnu.org/prep/standards/html_node/DESTDIR.html</a></p>",
        "id": 202905634,
        "sender_full_name": "eddyb",
        "timestamp": 1593925093
    },
    {
        "content": "<p>this also mentions <code>DESTDIR</code> <a href=\"https://www.debian.org/doc/manuals/maint-guide/modify.en.html#destdir\">https://www.debian.org/doc/manuals/maint-guide/modify.en.html#destdir</a></p>",
        "id": 202905652,
        "sender_full_name": "eddyb",
        "timestamp": 1593925155
    },
    {
        "content": "<p>so yeah it's a common convention</p>",
        "id": 202905653,
        "sender_full_name": "eddyb",
        "timestamp": 1593925164
    },
    {
        "content": "<p>yeah, makes sense! I clearly have never built linux distro packages before :)</p>",
        "id": 202905660,
        "sender_full_name": "André Arko",
        "timestamp": 1593925196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what do you think about replacing <code>build/$triple/stage$n-$foo</code> with just <code>build/stage$n-$foo</code>? given that inside each of those, there's <code>$triple/release</code> already for the target, as per Cargo. although maybe this is a half-baked idea</p>",
        "id": 202905762,
        "sender_full_name": "eddyb",
        "timestamp": 1593925330
    },
    {
        "content": "<p>maybe <code>build/$triple</code> is for the \"build\" triple which if you changed, a different beta would be downloaded, right? so it'd make sense to keep the current stratification</p>",
        "id": 202905775,
        "sender_full_name": "eddyb",
        "timestamp": 1593925407
    },
    {
        "content": "<p>but then why would this:</p>\n<blockquote>\n<p>so (iirc) the configuration was <code>build=\"x86_64-apple-darwin\"</code> and <code>host=[\"aarch64-apple-darwin\"]</code></p>\n</blockquote>\n<p>result in <code>build/aarch64-apple-darwin</code> existing?</p>",
        "id": 202905819,
        "sender_full_name": "eddyb",
        "timestamp": 1593925448
    },
    {
        "content": "<p>Otherwise you'd clobber the stage2/bin/rustc (and everything else in there)</p>",
        "id": 202918102,
        "sender_full_name": "simulacrum",
        "timestamp": 1593949033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> maybe the question i should be asking is \"what is the right invocation of <code>x.py</code>?\"</p>",
        "id": 202919967,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593952448
    },
    {
        "content": "<p>You're trying to produce a full toolchain, cross-compiling?</p>",
        "id": 202919979,
        "sender_full_name": "simulacrum",
        "timestamp": 1593952487
    },
    {
        "content": "<p>Yeah. I have one, but I'm doing copy-pasting of files myself.</p>",
        "id": 202919990,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593952517
    },
    {
        "content": "<p><a href=\"https://github.com/shepmaster/rust/blob/silicon-bootstrap/silicon/README.md#copy-the-cross-compiler-to-the-dtk\">https://github.com/shepmaster/rust/blob/silicon-bootstrap/silicon/README.md#copy-the-cross-compiler-to-the-dtk</a></p>",
        "id": 202920041,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593952570
    },
    {
        "content": "<p>I would look at one of the dist builders, say for ppc - IIRC, those cross compile currently so you can likely make use of the same invocation</p>",
        "id": 202920050,
        "sender_full_name": "simulacrum",
        "timestamp": 1593952611
    },
    {
        "content": "<p>(swapping dist for build perhaps)</p>",
        "id": 202920060,
        "sender_full_name": "simulacrum",
        "timestamp": 1593952626
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>HOSTS=powerpc-unknown-linux-gnu\npython3 ../x.py dist --host $HOSTS --target $HOSTS\n</code></pre></div>",
        "id": 202920132,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593952769
    },
    {
        "content": "<p>That seems overly simple</p>",
        "id": 202920196,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593952869
    },
    {
        "content": "<p>Hm that looks about right. I'd try it</p>",
        "id": 202920243,
        "sender_full_name": "simulacrum",
        "timestamp": 1593952945
    },
    {
        "content": "<p>Target for std, host for rustc</p>",
        "id": 202920248,
        "sender_full_name": "simulacrum",
        "timestamp": 1593952964
    },
    {
        "content": "<p>So <code>x.py dist --host aarch64-apple-darwin --target aarch64-apple-darwin</code> and that will produce a single directory I could copy around?</p>",
        "id": 202920256,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593953009
    },
    {
        "content": "<p>Can I mix in a <code>stage 1</code> in there too?</p>",
        "id": 202920258,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593953030
    },
    {
        "content": "<p>Should, I think, yeah</p>",
        "id": 202920259,
        "sender_full_name": "simulacrum",
        "timestamp": 1593953030
    },
    {
        "content": "<p>I think so</p>",
        "id": 202920263,
        "sender_full_name": "simulacrum",
        "timestamp": 1593953037
    },
    {
        "content": "<p><code>s/dist/build/</code></p>",
        "id": 202920297,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593953043
    },
    {
        "content": "<p>Though it won't speed things up I imagine</p>",
        "id": 202920301,
        "sender_full_name": "simulacrum",
        "timestamp": 1593953047
    },
    {
        "content": "<p>Since you're building the compiler again anyway</p>",
        "id": 202920306,
        "sender_full_name": "simulacrum",
        "timestamp": 1593953058
    },
    {
        "content": "<p>I could be wrong though</p>",
        "id": 202920308,
        "sender_full_name": "simulacrum",
        "timestamp": 1593953064
    },
    {
        "content": "<p>It is the nature of the beast</p>",
        "id": 202920376,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593953183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> in case you didn't see it,  I suggested using <code>DESTDIR=some/empty/dir x.py install</code> instead of copying things from the <code>build</code> directory</p>",
        "id": 202923239,
        "sender_full_name": "eddyb",
        "timestamp": 1593958218
    },
    {
        "content": "<p>wasn't sure what <code>dist</code> does but it sounds similar</p>",
        "id": 202923242,
        "sender_full_name": "eddyb",
        "timestamp": 1593958234
    },
    {
        "content": "<p>Dist produces the .gz and .xz files. Install is probably more want I want for “copy things around”</p>",
        "id": 202923308,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593958343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Why.20are.20my.20native.20rustlibs.20missing.20for.20a.20cross-compile.3F/near/202918102\">said</a>:</p>\n<blockquote>\n<p>Otherwise you'd clobber the stage2/bin/rustc (and everything else in there)</p>\n</blockquote>\n<p>if you're not going to <em>execute</em> it, why should it be in <code>stageN/bin/rustc</code>?</p>",
        "id": 202923312,
        "sender_full_name": "eddyb",
        "timestamp": 1593958355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> note that the intended \"automated distro build\" workflow is <code>./configure ... &amp;&amp; make &amp;&amp; make DESTDIR=... install</code></p>",
        "id": 202923319,
        "sender_full_name": "eddyb",
        "timestamp": 1593958387
    },
    {
        "content": "<p>so you don't even need to touch <code>x.py</code> or <code>config.toml</code> if you want to automate this</p>",
        "id": 202923325,
        "sender_full_name": "eddyb",
        "timestamp": 1593958410
    },
    {
        "content": "<p>\"automate\" is not <em>quite</em> a goal, beyond allowing <code>rustup install</code>. Mostly just documenting what we need to do as we get to there.</p>",
        "id": 202923384,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593958500
    },
    {
        "content": "<p>fair enough. I wonder if you can make <code>x.py dist</code> work with <code>rustup install</code> without having the components published on the official server, I sadly doubt it because I've seen a separate tool being needed even just to install PR artifacts (which are similar to nightlies but on a different S3 bucket or something)</p>",
        "id": 202923451,
        "sender_full_name": "eddyb",
        "timestamp": 1593958584
    },
    {
        "content": "<p>Yeah. I think I asked about something similar before — would have loved to publish AVR-enabled <code>rustc</code> builds that were usable by rustup somehow.</p>",
        "id": 202923460,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593958648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> basically I'm suggesting that the triple in <code>build/$triple</code> always be the <em>build</em> triple (and all of the sysroots would be of that triple), and <em>host</em> triples would only exist under e.g. <code>stageN-rustc/$triple/release</code></p>",
        "id": 202923463,
        "sender_full_name": "eddyb",
        "timestamp": 1593958655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> and only <code>x.py install</code> / <code>x.py dist</code> would know how to create a sysroot for a <em>host</em> triple different than the <em>build</em> triple</p>",
        "id": 202923507,
        "sender_full_name": "eddyb",
        "timestamp": 1593958693
    },
    {
        "content": "<p>is that too convoluted? idk</p>",
        "id": 202923511,
        "sender_full_name": "eddyb",
        "timestamp": 1593958705
    },
    {
        "content": "<p>oh it's probably possible, just not what we do today and may break some expectations</p>",
        "id": 202923512,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958717
    },
    {
        "content": "<p>seems like a \"good\" change though generally speaking</p>",
        "id": 202923515,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958731
    },
    {
        "content": "<p>also if this works the next question is  \"do we need the stratification of <code>build/$triple</code> or can we just expect the build triple to just never change on a given system\"</p>",
        "id": 202923517,
        "sender_full_name": "eddyb",
        "timestamp": 1593958744
    },
    {
        "content": "<p>IIRC someone complained when I said it probably never changes, iirc talking about running i686 and x86_64 compilers on the same platform or something</p>",
        "id": 202923530,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958773
    },
    {
        "content": "<p>(i.e., build compilers)</p>",
        "id": 202923533,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958778
    },
    {
        "content": "<p>Ditto x86_64 and aarch64 in my case :-)</p>",
        "id": 202923537,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593958792
    },
    {
        "content": "<p>no, <em>build</em> triples you have to be able to run on the machine you're building on</p>",
        "id": 202923578,
        "sender_full_name": "eddyb",
        "timestamp": 1593958810
    },
    {
        "content": "<p>Yes, and the new apple machines can run both :-)</p>",
        "id": 202923584,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593958827
    },
    {
        "content": "<p>you have a <code>x86_64</code> <em>build</em> triple and a <code>aarch64</code> <em>host</em> triple</p>",
        "id": 202923585,
        "sender_full_name": "eddyb",
        "timestamp": 1593958830
    },
    {
        "content": "<p>wrt to making rustup work, you can do it if you don't mind being \"nightly\" or \"beta\" or \"stable\"</p>",
        "id": 202923586,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> sure, that's why I kept asking confusing questions last night :P</p>",
        "id": 202923590,
        "sender_full_name": "eddyb",
        "timestamp": 1593958849
    },
    {
        "content": "<p>(we do so for say dev-static)</p>",
        "id": 202923592,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958852
    },
    {
        "content": "<p><code>RUSTUP_DIST_SERVER=https://dev-static.rust-lang.org rustup -v update stable</code> with a URL that's to, say, <a href=\"http://jakes-apple-builds.com\">jakes-apple-builds.com</a> would in theory work, you'd just need the same directory structure and manifests</p>",
        "id": 202923602,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958906
    },
    {
        "content": "<p>(because it wasn't clear what machine these dirs were on. IMO the only reasons to have more than one dir under <code>build/</code> is 32-bit vs 64-bit or musl vs glibc, that sort of t hing)</p>",
        "id": 202923603,
        "sender_full_name": "eddyb",
        "timestamp": 1593958908
    },
    {
        "content": "<p>even then we can probably say \"edge case\" and tell people to use different build/ directories</p>",
        "id": 202923649,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> huuuuh do PR builds not work like that because <code>rustup</code> doesn't understand their versioning?</p>",
        "id": 202923652,
        "sender_full_name": "eddyb",
        "timestamp": 1593958949
    },
    {
        "content": "<p>well rustup has 3 channels</p>",
        "id": 202923655,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958966
    },
    {
        "content": "<blockquote>\n<p>it wasn't clear what machine these dirs were on</p>\n</blockquote>\n<p>Yep, we've been bouncing around a bit — as you do when getting a new platform going :-)</p>",
        "id": 202923658,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593958982
    },
    {
        "content": "<p>maybe you could finagle the PR builds as \"future nightlies\" but there's not really support in rustup for hashes I think</p>",
        "id": 202923661,
        "sender_full_name": "simulacrum",
        "timestamp": 1593958986
    },
    {
        "content": "<p>it's long been on my todo list to try and get that support integrated</p>",
        "id": 202923663,
        "sender_full_name": "simulacrum",
        "timestamp": 1593959001
    },
    {
        "content": "<p>NixOS patches <code>rustup</code> to auto-patch toolchains to work directly, so anything that uses <code>rustup</code> as a dependency, as opposed to executing the one on the system, will be missing the requisite <code>patchelf</code> invocations :(</p>",
        "id": 202923666,
        "sender_full_name": "eddyb",
        "timestamp": 1593959010
    },
    {
        "content": "<p>I have a bunch of <code>patchelf</code> commands in my <code>fish</code> history so this isn't too bad but I don't like it very much</p>",
        "id": 202923677,
        "sender_full_name": "eddyb",
        "timestamp": 1593959038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway, thanks for the explanation! I was mostly trying to clean up my own understanding. and hoping we can make this less confusing in the future</p>",
        "id": 202923717,
        "sender_full_name": "eddyb",
        "timestamp": 1593959067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> sure, but based on having both dirs under <code>build/</code> I thought this was a machine that could run <em>both</em>, but <em>that was wrong</em> (as made clear by <span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span>)</p>",
        "id": 202923731,
        "sender_full_name": "eddyb",
        "timestamp": 1593959103
    },
    {
        "content": "<p>Well, it depends who and when you ask <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. I currently am building the rustc compiler on the aarch64 machine. that machine can run <strong>both</strong> aarch64 and x86-64 binaries natively.</p>",
        "id": 202923785,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959179
    },
    {
        "content": "<p>uhhhhhhh <span class=\"user-mention\" data-user-id=\"317220\">@André Arko</span> claimed the situation you were in was on a x64 machine</p>",
        "id": 202923792,
        "sender_full_name": "eddyb",
        "timestamp": 1593959213
    },
    {
        "content": "<p>\"natively\" as in  <code>./some-x86-binary</code> and <code>./some-aarch64-binary</code>; there's still some emulation happening somewhere</p>",
        "id": 202923799,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959237
    },
    {
        "content": "<p>That's what I mean by \"when\". At one point we only were able to cross-compile. Now we are able to natively compile.</p>",
        "id": 202923810,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959273
    },
    {
        "content": "<p>But I'm still doing steps on both machines, in order to be able to reproduce this elsewhere.</p>",
        "id": 202923853,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> the thing that is fascinating to me and which wasn't really there ages ago in this form, is the existence of <code>stageN-X/$triple/release</code>, which comes from how Cargo target dir works I guess, and which can service both <em>host</em> and <em>target</em> triples equally, leaving <code>stageN-X/release</code> to be the <em>build</em> triple, implicitly</p>",
        "id": 202923857,
        "sender_full_name": "eddyb",
        "timestamp": 1593959318
    },
    {
        "content": "<p>hm yeah that's been a thing in cargo for as long as I remember but maybe we weren't always passing --target to cargo? not sure</p>",
        "id": 202923862,
        "sender_full_name": "simulacrum",
        "timestamp": 1593959356
    },
    {
        "content": "<p>we weren't using Cargo pre-\"rustbuild\" :P</p>",
        "id": 202923867,
        "sender_full_name": "eddyb",
        "timestamp": 1593959380
    },
    {
        "content": "<p>oh right</p>",
        "id": 202923911,
        "sender_full_name": "simulacrum",
        "timestamp": 1593959417
    },
    {
        "content": "<p>and I'm not sure we've fully looked into the consequences of that - another example is the effort being put into making \"rustbuild\" less necessary for doing builds, and relying on Cargo more</p>",
        "id": 202923915,
        "sender_full_name": "eddyb",
        "timestamp": 1593959428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> oh btw, speaking of this whole thing, are you aware of the person trying to get aarch64 builds going, on Discord?</p>",
        "id": 202923918,
        "sender_full_name": "eddyb",
        "timestamp": 1593959444
    },
    {
        "content": "<p>they had a lot of trouble and I wasn't sure who to point them to</p>",
        "id": 202923924,
        "sender_full_name": "eddyb",
        "timestamp": 1593959454
    },
    {
        "content": "<p>which channel?</p>",
        "id": 202923929,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959466
    },
    {
        "content": "<p>#compiler, scroll up and you'll find a bunch of stuff</p>",
        "id": 202923932,
        "sender_full_name": "eddyb",
        "timestamp": 1593959477
    },
    {
        "content": "<p>I expected other people would also try to do this sort of thing, and that <em>someone</em> would know more about LLVM and buildsystems, enough to deal with everything quicker, I just didn't know who to point them to</p>",
        "id": 202923938,
        "sender_full_name": "eddyb",
        "timestamp": 1593959519
    },
    {
        "content": "<p>they eventually got rustc running on iOS</p>",
        "id": 202923977,
        "sender_full_name": "eddyb",
        "timestamp": 1593959532
    },
    {
        "content": "<p>yeah, the ios person</p>",
        "id": 202923979,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959573
    },
    {
        "content": "<p>I think this is them <a href=\"https://github.com/rust-lang/rust/issues/73628\">https://github.com/rust-lang/rust/issues/73628</a></p>",
        "id": 202923984,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959591
    },
    {
        "content": "<p>I just feel bad if they wasted their time</p>",
        "id": 202923985,
        "sender_full_name": "eddyb",
        "timestamp": 1593959592
    },
    {
        "content": "<p>due to lack of coordination</p>",
        "id": 202923986,
        "sender_full_name": "eddyb",
        "timestamp": 1593959604
    },
    {
        "content": "<p>jokes on you, I know nothing, other than to ask smarter people <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 202923990,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959622
    },
    {
        "content": "<p>I mean idk who the macOS ppl are</p>",
        "id": 202923993,
        "sender_full_name": "eddyb",
        "timestamp": 1593959639
    },
    {
        "content": "<p>other than acrichto who is probably too busy</p>",
        "id": 202924034,
        "sender_full_name": "eddyb",
        "timestamp": 1593959649
    },
    {
        "content": "<p>that issue sounds relevant but I wonder if there's two people</p>",
        "id": 202924036,
        "sender_full_name": "eddyb",
        "timestamp": 1593959663
    },
    {
        "content": "<p>oh, <span class=\"user-mention\" data-user-id=\"312033\">@aspen</span>, they're on here as well</p>",
        "id": 202924097,
        "sender_full_name": "eddyb",
        "timestamp": 1593959775
    },
    {
        "content": "<p>The main place for ARM stuff is <a class=\"stream\" data-stream-id=\"242906\" href=\"/#narrow/stream/242906-t-compiler.2Farm\">#t-compiler/arm</a>. I've just been popping out into other streams for help from a broader perspective</p>",
        "id": 202924168,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  DESTDIR=/tmp/crossed \\\n  ../../x.py install --stage 1 --host aarch64-apple-darwin --target aarch64-apple-darwin,x86_64-apple-darwin --warnings warn\n</code></pre></div>\n\n\n<p>Does seem to do what I'd want though!</p>",
        "id": 202924193,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593959993
    },
    {
        "content": "<p>nice :D</p>",
        "id": 202924245,
        "sender_full_name": "eddyb",
        "timestamp": 1593960029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% cargo new hello-world\n% cd hello-world\n\n% cargo +installed-cross run\nHello, world!\n\n% file target/debug/hello-world\ntarget/debug/hello-world: Mach-O 64-bit executable arm64\n\n% cargo +installed-cross run --target=x86_64-apple-darwin\nHello, world!\n\n% file target/x86_64-apple-darwin/debug/hello-world\ntarget/x86_64-apple-darwin/debug/hello-world: Mach-O 64-bit executable x86_64\n</code></pre></div>",
        "id": 202924273,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593960114
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% lipo -output hello-world -create target/{,x86_64-apple-darwin}/debug/hello-world\n% file hello-world\nhello-world: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit executable x86_64] [arm64:Mach-O 64-bit executable arm64]\nhello-world (for architecture x86_64):  Mach-O 64-bit executable x86_64\nhello-world (for architecture arm64):   Mach-O 64-bit executable arm64\n</code></pre></div>",
        "id": 202924347,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593960233
    },
    {
        "content": "<p>isn't there a <code>cargo-lipo</code> as well :P?</p>",
        "id": 202924615,
        "sender_full_name": "eddyb",
        "timestamp": 1593960607
    },
    {
        "content": "<p>I know of it, but I've never used it. Figured I'd do the simpler thing for now. I'm sure that project will be picking up steam soon.</p>",
        "id": 202924768,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593960871
    }
]