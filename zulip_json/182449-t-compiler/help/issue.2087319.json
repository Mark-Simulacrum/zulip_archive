[
    {
        "content": "<p>Hi all! I'm hoping to give <a href=\"https://github.com/rust-lang/rust/issues/87319\">https://github.com/rust-lang/rust/issues/87319</a> a try. I've contributed rustc API docs before, but never any real code. This one seems doable for a beginner (but maybe I'm wrong?). Any tips on where to start? Is this \"Declaring a Lint\" section in the dev guide relevant? <a href=\"https://rustc-dev-guide.rust-lang.org/diagnostics.html#declaring-a-lint\">https://rustc-dev-guide.rust-lang.org/diagnostics.html#declaring-a-lint</a> Any help would be greatly appreciated.</p>",
        "id": 246867048,
        "sender_full_name": "pierwill",
        "timestamp": 1626969517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> yes, that's instructions for declaring. For implementing, take a look at <code>rustc_lint/builtin.rs</code>.</p>",
        "id": 246868393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626970138
    },
    {
        "content": "<p>oh it actually has an example in the docs and everything</p>",
        "id": 246868434,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626970167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> you've been busy <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 246868442,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626970173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I don't think I wrote those docs, did I? :)</p>",
        "id": 246868568,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626970217
    },
    {
        "content": "<p>you wrote the suggestion to use rustc_lint instead of lint_defs I think - maybe I got confused about the example</p>",
        "id": 246868597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626970238
    },
    {
        "content": "<p>I think somebody else commit that at my suggestion, maybe?</p>",
        "id": 246868692,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626970297
    },
    {
        "content": "<p>ah, that's probably it</p>",
        "id": 246868709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626970304
    },
    {
        "content": "<p>anyway, back to implementing this particular lint</p>",
        "id": 246868825,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626970351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> The escape sequence handling for string literals is handled here: <a href=\"https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler/rustc_lexer/src/unescape.rs#L267\">https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler/rustc_lexer/src/unescape.rs#L267</a></p>",
        "id": 246869883,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626970844
    },
    {
        "content": "<p>It looks like the issue lies in <a href=\"https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler/rustc_lexer/src/unescape.rs#L300\">https://github.com/rust-lang/rust/blob/1158367a6d60d3e2a8c68d6212a8007992b1dbf0/compiler/rustc_lexer/src/unescape.rs#L300</a> - we consider <code>\\n</code> to be 'ascii whitespace'</p>",
        "id": 246870153,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626970960
    },
    {
        "content": "<p>and will therefore skip over it after we encounter an escaped newline</p>",
        "id": 246870190,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626970981
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ! I'll take a little time to wrap my head around this code, then probably (definitely) pop back in for more advice :)</p>",
        "id": 246872252,
        "sender_full_name": "pierwill",
        "timestamp": 1626971950
    },
    {
        "content": "<p>How is this looking so far? Is an in impl block in this file the right place to implement the logic for the lint? <a href=\"https://github.com/rust-lang/rust/compare/master...pierwill:fix-87197-multiple-newline-lint?expand=1\">https://github.com/rust-lang/rust/compare/master...pierwill:fix-87197-multiple-newline-lint?expand=1</a></p>",
        "id": 247003833,
        "sender_full_name": "pierwill",
        "timestamp": 1627059549
    },
    {
        "content": "<p>seems fine</p>",
        "id": 247004480,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627059849
    },
    {
        "content": "<p>Won't the escaped newlines be absent from the generated symbols?</p>",
        "id": 247005436,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627060290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> I'm unclear what you're asking. In</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"\\</span>\n\n<span class=\"s\">b\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>a has the value <code>\"\\nb\"</code> - only the first newline is removed</p>",
        "id": 247005624,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627060369
    },
    {
        "content": "<p>oh err</p>",
        "id": 247005673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627060399
    },
    {
        "content": "<p>apparently it's the opposite and it has the value <code>\"b\"</code></p>",
        "id": 247005686,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627060409
    },
    {
        "content": "<p>wow that almost seems more confusing to me</p>",
        "id": 247005697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627060416
    },
    {
        "content": "<p>Yes, but if you implement this as a lint pass you won't be able to know there was an escaped newline there?</p>",
        "id": 247005704,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627060420
    },
    {
        "content": "<p>oh you mean this has to be an earlier pass in the lexer</p>",
        "id": 247005750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627060440
    },
    {
        "content": "<p>yes I think you're right</p>",
        "id": 247005765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627060442
    },
    {
        "content": "<p>Yes, sorry I meant that as an answer to the question</p>\n<blockquote>\n<p>Is an in impl block in this file the right place to implement the logic for the lint?</p>\n</blockquote>",
        "id": 247005829,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627060465
    },
    {
        "content": "<p><code>rustc_lexer</code> only splits the code input into tokens. Each token consists of the kind and the length. It doesn't actually interpret the token to form the final string.</p>",
        "id": 247005954,
        "sender_full_name": "bjorn3",
        "timestamp": 1627060527
    },
    {
        "content": "<p>Ah! Oh no, back to square one. :(  <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 247009400,
        "sender_full_name": "pierwill",
        "timestamp": 1627062147
    },
    {
        "content": "<p>so <code>rustc_span::symbol::Symbol</code> won't give us the data we need at this point in compilation in rustc_lexer?</p>",
        "id": 247009479,
        "sender_full_name": "pierwill",
        "timestamp": 1627062200
    },
    {
        "content": "<p>refering to the <code>symbol</code> field here: <br>\n<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/token/struct.Lit.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/token/struct.Lit.html</a></p>",
        "id": 247009605,
        "sender_full_name": "pierwill",
        "timestamp": 1627062253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> I believe the needed information gets thrown away by the lexer currently</p>",
        "id": 247016122,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627065662
    },
    {
        "content": "<p>In the files that I linked earlier</p>",
        "id": 247016142,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627065669
    },
    {
        "content": "<p>ah! so maybe we do need to change that unescape logic before we can implement the lint?</p>",
        "id": 247016192,
        "sender_full_name": "pierwill",
        "timestamp": 1627065708
    },
    {
        "content": "<p>or will I have to _go deeper_ <span aria-label=\"imp\" class=\"emoji emoji-1f47f\" role=\"img\" title=\"imp\">:imp:</span></p>",
        "id": 247016730,
        "sender_full_name": "pierwill",
        "timestamp": 1627066032
    },
    {
        "content": "<p>Is parsing/lexing too early in the compilation process to emit lints?</p>",
        "id": 247025978,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627071188
    },
    {
        "content": "<p>(Nevermind, it has to be, we don't know the lint levels yet)</p>",
        "id": 247026060,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627071235
    },
    {
        "content": "<p>yeah lints are a tcx thing</p>",
        "id": 247027528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627071965
    },
    {
        "content": "<p>We do have 'buffered lints' during expansion</p>",
        "id": 247033166,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627074664
    },
    {
        "content": "<p>To avoid a large amount of refactoring, I think it might be reasonable to add some thread-local state in <code>rustc_lexer</code> to store information about any lints we want to emit</p>",
        "id": 247041148,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627080286
    },
    {
        "content": "<p>and then emit them in <code>rustc_expand</code> or <code>rustc_middle</code></p>",
        "id": 247041165,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627080307
    },
    {
        "content": "<p>Otherwise, you're going to need to pass down / return up something through lots of different APIs and crates</p>",
        "id": 247041245,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627080369
    },
    {
        "content": "<p>e.g. <code>LitKind::from_lit_token</code> is not really set up to track or emit a lint</p>",
        "id": 247041255,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627080384
    },
    {
        "content": "<p>Do we have crater data on just a hard error (panic! or whatever seems fine) yet? If it's tiny breakage might be ok without a lint....</p>",
        "id": 247042280,
        "sender_full_name": "simulacrum",
        "timestamp": 1627081372
    },
    {
        "content": "<p>I wrote a scanner using proc_macro2 to tokenize all the source code on <a href=\"http://crates.io\">crates.io</a>. It found about 41 packages that use this form of continuation. (Assuming I wrote it correctly.)  Skimming over some of them, I would say most are mistakes, though it is hard to say.</p>",
        "id": 247047994,
        "sender_full_name": "Eric Huss",
        "timestamp": 1627088238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I think it would be a better idea to put the lint code at the place where rustc_lexer is called than to use TLS.</p>",
        "id": 247059596,
        "sender_full_name": "bjorn3",
        "timestamp": 1627108909
    },
    {
        "content": "<p>Looking at this in connection to <a href=\"https://github.com/rust-lang/rust/issues/87318\">issue 87318</a>: it appears that unescape_literal is called from two places:</p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/lexer/mod.rs#L553-L582\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_parse/src/lexer/mod.rs#L553-L582</a> which does only validation and doesn't care about the result</li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast/src/util/literal.rs#L60-L69\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast/src/util/literal.rs#L60-L69</a> which builds the unescaped string itself.</li>\n</ol>\n<p>Currently, the callback takes a pair of <code>Range&lt;usize&gt;</code> and <code>Result&lt;char, EscapeError&gt;</code>.  Only the <code>EscapeError</code> is used in 1, and only the char is used in 2.<br>\nAs such, it looks like it would not be too much of a change to replace the <code>char</code> with a <code>Result&lt;char, EscapeLint&gt;</code> (or a named enum) and get the warnings out that way.  Alternatively, the whole thing could be split into two or even three callbacks; this would also make some sense since the <code>Range&lt;usize&gt;</code>  is only used for the error-reporting case.</p>",
        "id": 247461253,
        "sender_full_name": "Anton Golov",
        "timestamp": 1627480231
    },
    {
        "content": "<p>So to summarize, the following signatures for <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_lexer/src/unescape.rs#L64\"><code>unescape_literal</code></a> look like the best possibilities</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// 1</span>\n<span class=\"k\">fn</span> <span class=\"nf\">unescape_literal</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">literal_text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mode</span>: <span class=\"nc\">Mode</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callback</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EscapeLint</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EscapeError</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c1\">// 2</span>\n<span class=\"k\">enum</span> <span class=\"nc\">EscapeResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">EscapedStringChar</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">EscapeLint</span><span class=\"p\">(</span><span class=\"n\">EscapeLint</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">unescape_literal</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">literal_text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mode</span>: <span class=\"nc\">Mode</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callback</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">EscapeResult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EscapeError</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c1\">// 3</span>\n<span class=\"k\">fn</span> <span class=\"nf\">unescape_literal</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">literal_text</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mode</span>: <span class=\"nc\">Mode</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">emit_char</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">emit_msg</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">G</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">EscapeLint</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">EscapeError</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think (3) looks best but I'm not very experienced with Rust, so I'm not sure what the trade-offs are.</p>\n<p>I'd be happy to implement this if it looks good ^^</p>\n<p>Update: I've implemented version 1 here: <a href=\"https://github.com/rust-lang/rust/pull/87596\">https://github.com/rust-lang/rust/pull/87596</a></p>",
        "id": 247462130,
        "sender_full_name": "Anton Golov",
        "timestamp": 1627480677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"428669\">@Anton Golov</span>: You're welcome to work on this! I'm currently assigned, but I am thinking it's gotten out of my league. I can unassign myself if you like, and/or I help keep the convo going here :)</p>",
        "id": 247814623,
        "sender_full_name": "pierwill",
        "timestamp": 1627751248
    },
    {
        "content": "<p>Thanks for the update!  Sounds good, let me send a PR :)</p>",
        "id": 247815785,
        "sender_full_name": "Anton Golov",
        "timestamp": 1627752911
    }
]