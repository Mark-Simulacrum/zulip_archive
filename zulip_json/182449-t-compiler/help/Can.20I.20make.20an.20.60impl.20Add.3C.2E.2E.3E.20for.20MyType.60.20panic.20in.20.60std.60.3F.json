[
    {
        "content": "<p>@t-lib Hey there, I'm thinking about <code>impl Add&lt;u*&gt; for NonZeroU*</code> in <code>std</code>. This could be safe in debug mode because <code>Add</code> panics on overflow, but it would be unsafe in release mode because the nonzero invariant could be broken on overflow. Is it okay that to make <code>impl Add&lt;u*&gt; for NonZeroU*</code> panic <em>also</em> in release mode instead? Or is it something an <code>impl Add</code> should explicitely never do?</p>",
        "id": 228428133,
        "sender_full_name": "Iago-lito",
        "timestamp": 1614698779
    },
    {
        "content": "<p>Wops, and I'm not even sure this is the right way to \"ping the T-lib team\" as I have been suggested to, how do I \"ping the T-lib team\"? :(</p>",
        "id": 228429004,
        "sender_full_name": "Iago-lito",
        "timestamp": 1614699075
    },
    {
        "content": "<p>Okay sorry, attempting to move that to the right channel X)</p>",
        "id": 228429697,
        "sender_full_name": "Iago-lito",
        "timestamp": 1614699297
    },
    {
        "content": "<p>it wouldn't even quite be safe in debug mode, because the arithmetic overflow is actually a flag of its own, and it can always be on or off.</p>",
        "id": 228437942,
        "sender_full_name": "Lokathor",
        "timestamp": 1614701958
    },
    {
        "content": "<p>i am not on amy team, but personally i advise you to not write this code.</p>",
        "id": 228438120,
        "sender_full_name": "Lokathor",
        "timestamp": 1614702001
    },
    {
        "content": "<p>Mh, interesting, does this also hold for <code>checked_add</code> <em>etc.</em>? If not, <code>impl Add&lt;u*&gt; for NonZeroU*</code> would simply defer to <code>u*::checked_add</code> and explicitly panic if the return value is <code>None</code>.. unless the flag you're referring to also affects <code>checked_add</code> :\\</p>",
        "id": 228438655,
        "sender_full_name": "Iago-lito",
        "timestamp": 1614702178
    },
    {
        "content": "<p>Well, in other terms, I'd force the <code>Add</code> implementation to be checked even though users do not expect it. Then they'd better directly use <code>checked_add</code>instead and be more explicit. Alright, let's forget about it. Thank you :)</p>",
        "id": 228440876,
        "sender_full_name": "Iago-lito",
        "timestamp": 1614702981
    },
    {
        "content": "<p>checked_add is always checked</p>",
        "id": 228455679,
        "sender_full_name": "Lokathor",
        "timestamp": 1614707925
    },
    {
        "content": "<p>Given the existing ones are cases where it's always fine <code>impl BitOr&lt;u32&gt; for NonZeroU32</code>, I think people would expect that for all the ops.  My intuition here is that if it's not always safe, it just should be done on <code>.get()</code> instead to be clear about that.</p>",
        "id": 228475493,
        "sender_full_name": "scottmcm",
        "timestamp": 1614715271
    },
    {
        "content": "<p>Although, come to think of it, <span class=\"user-mention silent\" data-user-id=\"335110\">Iago-lito</span>, that does imply that <code>NonZeroU32::saturating_(add|mul)</code> might be fine.  I don't know what the RHS argument type should be, though, since there's no a trait for it like there is for <code>BitOr</code> and friends, and <code>impl Into&lt;u32&gt;</code> is too broad...</p>",
        "id": 228502599,
        "sender_full_name": "scottmcm",
        "timestamp": 1614726002
    },
    {
        "content": "<p>but why is it too broad</p>",
        "id": 228504597,
        "sender_full_name": "Lokathor",
        "timestamp": 1614726935
    },
    {
        "content": "<p>Because it includes things like <code>NonZeroU64 + u8</code>, which is inconsistent with the \"same width\" restrictions on all the other <code>saturating_add</code>s.  And also it'd make <code>NonZeroU32 + 4</code> give an error because it'd pick <code>i32</code> for the <code>4</code>.</p>",
        "id": 228512186,
        "sender_full_name": "scottmcm",
        "timestamp": 1614730950
    },
    {
        "content": "<p>plz fix the default type rules in e2024</p>",
        "id": 228516967,
        "sender_full_name": "Lokathor",
        "timestamp": 1614733855
    }
]