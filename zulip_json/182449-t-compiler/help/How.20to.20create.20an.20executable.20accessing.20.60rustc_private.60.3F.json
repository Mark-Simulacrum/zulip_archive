[
    {
        "content": "<p>I am trying to build a new tool that will re-use the internal machinery of rustc. As such I need to be able to use <code>extern crate rustc_*</code>. At first I thought that <code>#![feature(rustc_private)]</code> was enough (it seems it is for lib), but it isn't enough for binaries).</p>",
        "id": 216185691,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604999042
    },
    {
        "content": "<p>You need to install both the <code>rustc-dev</code> and <code>llvm-tools-preview</code> rustup components. The former depends on the later, but rustup doesn't have a way to state such dependency.</p>",
        "id": 216187308,
        "sender_full_name": "bjorn3",
        "timestamp": 1605000070
    },
    {
        "content": "<p>If that doesn't fix it, can you show the error?</p>",
        "id": 216187322,
        "sender_full_name": "bjorn3",
        "timestamp": 1605000085
    },
    {
        "content": "<p>here as well another possibly interesting example in <a href=\"https://github.com/rust-lang/miri/blob/master/rustup-toolchain\">miri</a> using CI artifacts (and the rustup components bjorn3 mentioned) to build their driver</p>",
        "id": 216190081,
        "sender_full_name": "lqd",
        "timestamp": 1605001920
    },
    {
        "content": "<p>Great, it worked! EDIT: to add <code>rustc-dev</code> + <code>llvm-tools-preview</code></p>",
        "id": 216190529,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605002229
    },
    {
        "content": "<p>I didn't realized that my builds, but don't run. I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -- test/test1/src/main.rs\n    Finished dev [unoptimized + debuginfo] target(s) in 0.05s\n     Running `target/debug/cargo-callgraph test/test1/src/main.rs`\nerror[E0463]: can&#39;t find crate for `std`\nerror: aborting due to previous error\nFor more information about this error, try `rustc --explain E0463`.\n</code></pre></div>\n<p>What I don' t understand is if I do <code>cargo install --path .</code> (given that the name of the crate and binary have been renamed to <code>cargo-callgraph</code>,  I don't get the same error with the installed version:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo callgraph test/test1/src/main.rs\nerror: too many file operands\n</code></pre></div>\n<p>Note: In both case, the <code>--help</code> option works, and is effectively the <code>help</code> of my modified <code>rustdoc</code>.</p>",
        "id": 216235047,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605025250
    },
    {
        "content": "<p>It sounds like the sysroot is wrong</p>",
        "id": 216236198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605025695
    },
    {
        "content": "<p>Try seeing if <code>cargo run -v</code> passes a --sysroot flag</p>",
        "id": 216236230,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605025712
    },
    {
        "content": "<p>I saw this word multiple times, but I don't know what it refers to: \"sysroot\"</p>",
        "id": 216236287,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605025736
    },
    {
        "content": "<p>It doesn't seems so:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run -v -- test/test1/src/main.rs\n       Fresh cfg-if v0.1.10\n       Fresh autocfg v1.0.1\n       Fresh lazy_static v1.4.0\n       Fresh unicode-xid v0.2.1\n       Fresh scopeguard v1.1.0\n       Fresh version_check v0.9.2\n       Fresh ppv-lite86 v0.2.10\n       Fresh either v1.6.1\n       Fresh macro-utils v0.1.3\n       Fresh itoa v0.4.6\n       Fresh regex-syntax v0.6.21\n       Fresh pin-project-lite v0.1.11\n       Fresh remove_dir_all v0.5.3\n       Fresh smallvec v1.4.2\n       Fresh crossbeam-utils v0.6.6\n       Fresh tracing-core v0.1.17\n       Fresh thread_local v1.0.1\n       Fresh itertools v0.9.0\n       Fresh minifier v0.0.33\n       Fresh crossbeam-queue v0.1.2\n       Fresh libc v0.2.80\n       Fresh proc-macro2 v1.0.24\n       Fresh maybe-uninit v2.0.0\n       Fresh memchr v2.3.4\n       Fresh bitflags v1.2.1\n       Fresh ryu v1.0.5\n       Fresh crossbeam-utils v0.7.2\n       Fresh memoffset v0.5.6\n       Fresh getrandom v0.1.15\n       Fresh num_cpus v1.13.0\n       Fresh quote v1.0.7\n       Fresh unicase v2.6.0\n       Fresh aho-corasick v0.7.15\n       Fresh crossbeam-epoch v0.8.2\n       Fresh rand_core v0.5.1\n       Fresh syn v1.0.48\n       Fresh pulldown-cmark v0.8.0\n       Fresh crossbeam-deque v0.7.3\n       Fresh regex v1.4.2\n       Fresh serde_derive v1.0.117\n       Fresh rand_chacha v0.2.2\n       Fresh tracing-attributes v0.1.11\n       Fresh serde v1.0.117\n       Fresh rand v0.7.3\n       Fresh tracing v0.1.21\n       Fresh serde_json v1.0.59\n       Fresh tempfile v3.1.0\n       Fresh rustc-rayon-core v0.3.0\n       Fresh rustc-rayon v0.3.0\n       Fresh cargo-callgraph v0.0.0 (/home/robin/dev/cargo-callgraph)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.04s\n     Running `target/debug/cargo-callgraph test/test1/src/main.rs`\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n</code></pre></div>",
        "id": 216236367,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605025781
    },
    {
        "content": "<p>Add <code>--sysroot $(rustc --print sysroot)</code> as argument.</p>",
        "id": 216237662,
        "sender_full_name": "bjorn3",
        "timestamp": 1605026288
    },
    {
        "content": "<p>Rustc normally finds the sysroot relative to it's own location. Your custom driver isn't part of the sysroot, so rustc_driver doesn't know where to look for the sysroot.</p>",
        "id": 216237812,
        "sender_full_name": "bjorn3",
        "timestamp": 1605026365
    },
    {
        "content": "<p>YES! it works perfectly <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 216237816,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605026367
    },
    {
        "content": "<p>What should I do to register it? use the one returned by rustc? Should I invoque <code>rustc --print sysroot</code> at runtime?</p>",
        "id": 216237966,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605026424
    },
    {
        "content": "<p>If you don't want to pass the sysroot every time, you can for example copy <a href=\"https://github.com/rust-lang/miri/blob/master/src/bin/miri.rs#L115-L152\">https://github.com/rust-lang/miri/blob/master/src/bin/miri.rs#L115-L152</a></p>",
        "id": 216237990,
        "sender_full_name": "bjorn3",
        "timestamp": 1605026441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> The sysroot contains the compiler, the standard libraries (for each target), and other tools and things.  You can view the directory with <code>rustc --print=sysroot</code>.</p>\n<p>I'm not sure what your executable is doing, but I suspect the issue is configuring the LD_LIBRARY_PATH.  When run from <code>cargo run</code>, cargo sets up a very specific LD_LIBRARY_PATH that points into the <code>target</code> directory.  When run via <code>cargo callgraph</code> (with the space), this is running rustup's <code>cargo</code> proxy which sets up LD_LIBRARY_PATH to include the sysroot.  That's why the two differ.  I'm not sure what your program is doing, so I can't really help beyond that.</p>",
        "id": 216238474,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605026671
    },
    {
        "content": "<p>Oops, just saw bjorn3 responded. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 216238570,
        "sender_full_name": "Eric Huss",
        "timestamp": 1605026712
    },
    {
        "content": "<p>my program is just a modified <code>rustdoc</code> with some extra <code>println!()</code>! Nothing fancy. I'm really surprised at how hard it is to build, link and run <code>rustdoc</code> using only cargo</p>",
        "id": 216238786,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605026797
    },
    {
        "content": "<p><del>I'm suprised you got it to work at all</del></p>",
        "id": 216239174,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605026951
    },
    {
        "content": "<p><span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 216239434,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027058
    },
    {
        "content": "<p>although actually if you have a copy of the current state that would be really helpful, I've been discussing with <span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> how to build rustdoc out of tree</p>",
        "id": 216239521,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027091
    },
    {
        "content": "<p>I only modified the <code>Cargo.toml</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/Cargo.toml b/src/librustdoc/Cargo.toml</span>\n<span class=\"gh\">index b0f5bac6abd..9724c10e1ae 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/Cargo.toml</span>\n<span class=\"gi\">+++ b/src/librustdoc/Cargo.toml</span>\n<span class=\"gu\">@@ -4,8 +4,9 @@ name = \"rustdoc\"</span>\n version = \"0.0.0\"\n edition = \"2018\"\n\n<span class=\"gd\">-[lib]</span>\n<span class=\"gi\">+[[bin]]</span>\n path = \"lib.rs\"\n<span class=\"gi\">+name = \"rustdoc\"</span>\n\n [dependencies]\n pulldown-cmark = { version = \"0.8\", default-features = false }\n<span class=\"gu\">@@ -17,6 +18,8 @@ smallvec = \"1.0\"</span>\n tempfile = \"3\"\n itertools = \"0.9\"\n regex = \"1\"\n<span class=\"gi\">+lazy_static = \"1.4.0\"</span>\n<span class=\"gi\">+tracing = \"0.1.21\"</span>\n\n [dev-dependencies]\n expect-test = \"1.0\"\n</code></pre></div>\n<p>\\\\+ added the above modification to have a working sysroot</p>",
        "id": 216239829,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027215
    },
    {
        "content": "<p>nice, that's not bad at all</p>",
        "id": 216239921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027247
    },
    {
        "content": "<p>It's just ultra long to do, given that I have no idea of what to do, or what error message means</p>",
        "id": 216239973,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027279
    },
    {
        "content": "<p>and I had to install the rustup component <code>rustc-dev</code> and <code>llvm-tools-preview</code></p>",
        "id": 216240067,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027315
    },
    {
        "content": "<p>yeah the build system could be better :/</p>",
        "id": 216240160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027362
    },
    {
        "content": "<p>You mean \"the build system could be <code>Cargo</code>, like 100% of Rust project, and not some homemade half-broken never-seen-anywhere-else build system like 100% of C++ project\".</p>",
        "id": 216240410,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027458
    },
    {
        "content": "<p>well no, it can't be cargo</p>",
        "id": 216240430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027470
    },
    {
        "content": "<p>cargo can't do multi-stage builds</p>",
        "id": 216240435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027474
    },
    {
        "content": "<p>one sec</p>",
        "id": 216240556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027525
    },
    {
        "content": "<p>Can't it be a script (let's name it <code>x.py</code>) that invoke <code>Cargo</code> multiple times (to be able to boostrap it), but if you have a very-very up-to-date cargo, you could just use cargo?</p>",
        "id": 216240631,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027557
    },
    {
        "content": "<p>you need to bootstrap rustc itself, not just cargo</p>",
        "id": 216240668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027578
    },
    {
        "content": "<p>but otherwise yes, that's basically what x.py does</p>",
        "id": 216240690,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027590
    },
    {
        "content": "<p>I don't mind <code>x.py</code>, I just don't like at all that I can't use <code>Cargo</code> to build the version N+1 of the compiler + tools, assuming that my current toolchain is the version N.</p>",
        "id": 216240799,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027620
    },
    {
        "content": "<p>I think <span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> means \"add a Cargo feature\"?</p>",
        "id": 216240837,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605027634
    },
    {
        "content": "<p>There are a lot of platform specific things done by rustbuild that most people don't need. It also handles LLVM compilation in such a way that it only has to be compiled once instead of once for each stage.</p>",
        "id": 216240879,
        "sender_full_name": "bjorn3",
        "timestamp": 1605027650
    },
    {
        "content": "<p>here we go: <a href=\"https://www.reddit.com/r/rust/comments/irhj4o/blog_post_rust_in_2021/g4yvujq/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3\">https://www.reddit.com/r/rust/comments/irhj4o/blog_post_rust_in_2021/g4yvujq/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3</a></p>",
        "id": 216241008,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027709
    },
    {
        "content": "<p>oh I see you commented there:</p>\n<blockquote>\n<p>Having a python or shell script that download rustup, then cargo nightly, then run cargo test is also totally fine as long as you don't need it at all if you already have access to cargo nightly.</p>\n</blockquote>\n<p>this doesn't work naively because you have two different versions of the standard library in play <a href=\"https://github.com/rust-lang/rust/pull/68692#discussion_r390567689\">https://github.com/rust-lang/rust/pull/68692#discussion_r390567689</a></p>",
        "id": 216241269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027834
    },
    {
        "content": "<p>yes, I read it</p>",
        "id": 216241274,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605027838
    },
    {
        "content": "<p>rustbuild also needs to use the bootstrap compiler to compile build scripts in all cases as the main compiler may not yet have a sysroot compiled. (would be nice if the sysroot didn't require build scripts by the way)</p>",
        "id": 216241506,
        "sender_full_name": "bjorn3",
        "timestamp": 1605027927
    },
    {
        "content": "<p>anyway, I 100% think x.py could be better and easier to use, but it's really frustrating when people say 'just use cargo' without understanding the problems x.py tries to solve</p>",
        "id": 216241571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605027950
    },
    {
        "content": "<p>cargo doesn't know anything about submodules for instance <a href=\"https://github.com/rust-lang/rust/issues/76653\">https://github.com/rust-lang/rust/issues/76653</a></p>",
        "id": 216241758,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028025
    },
    {
        "content": "<p>and despite that gets very confused when they're not present</p>",
        "id": 216241788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028039
    },
    {
        "content": "<p>I agree 100% that building <code>rustc</code> (the binary) and the standard library requires a special procedure. However, if I didn't modified the API/ABI of either, I should be able to use, at least, the current nightly toolchain to build any part of the rustc repo.</p>",
        "id": 216241819,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605028054
    },
    {
        "content": "<p>you can, and you just did</p>",
        "id": 216241863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028069
    },
    {
        "content": "<p>and if you <code>cd compiler/rustc &amp;&amp; cargo build</code> that also works (with some caveats)</p>",
        "id": 216241935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028090
    },
    {
        "content": "<p>No, I didn't, I spend 5+ hours to be able to do a 5 lines modification in a Cargo.toml in a directory that have the sources at the root, and not inside a <code>src</code> or <code>lib</code> subdirectory, I had to not use clippy, because I got way to many warning, and I had to understand the concept of sysroot. I really don't think that I <em>just</em> did it.</p>",
        "id": 216242208,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605028218
    },
    {
        "content": "<p>right, yes - but these are problems cargo can't help with</p>",
        "id": 216242249,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028240
    },
    {
        "content": "<p>at <em>some</em> point you have to deal with the fact that there are two different sysroots</p>",
        "id": 216242271,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028251
    },
    {
        "content": "<p>note that x.py was <em>nowhere</em> in this build process</p>",
        "id": 216242323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028271
    },
    {
        "content": "<p>But to be honest, it's probably that the rust project start to get old, and get such kind of defect that only age can explain ;)</p>",
        "id": 216242327,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605028274
    },
    {
        "content": "<p>this is inherent complexity, not accidental</p>",
        "id": 216242337,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028280
    },
    {
        "content": "<p>at least, inherent to using rustc_private</p>",
        "id": 216242563,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028369
    },
    {
        "content": "<p>using rust-analyzer would probably be a lot easier</p>",
        "id": 216242588,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028382
    },
    {
        "content": "<p>Why should it be [inherent complexity], I don't need to boostrap anything. I modified neither rustc, nor the standard library</p>",
        "id": 216242653,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605028414
    },
    {
        "content": "<p>because you're linking to rustc itself</p>",
        "id": 216242738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028444
    },
    {
        "content": "<p>it no longer knows where artifacts go</p>",
        "id": 216242776,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028459
    },
    {
        "content": "<p>But I don't need to boostrap anything, I'm using a nightly compiler, so my toolchain is already up-to-date (my clone of the rustc repo is older than the build of my toolchain).</p>",
        "id": 216242846,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605028503
    },
    {
        "content": "<p>let me put it differently</p>",
        "id": 216242867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028512
    },
    {
        "content": "<p>you effectively ran <code>rustc -lrustc lib.rs</code></p>",
        "id": 216242899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028533
    },
    {
        "content": "<p>rustc is <em>both</em> building <em>and</em> being linked to your project</p>",
        "id": 216242921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028546
    },
    {
        "content": "<p>I just noticed you were trying to build the rustdoc library found at <code>src/librustdoc</code> as if it was an executable, not the rustdoc executable found at <code>src/tools/rustdoc</code>.</p>",
        "id": 216242957,
        "sender_full_name": "bjorn3",
        "timestamp": 1605028561
    },
    {
        "content": "<p>so there's two places with artifacts: the outputs from rustc, and the rustc shared object file</p>",
        "id": 216242967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20create.20an.20executable.20accessing.20.60rustc_private.60.3F/near/216242957\">said</a>:</p>\n<blockquote>\n<p>I just noticed you were trying to build the rustdoc library found at <code>src/librustdoc</code> as if it was an executable, not the rustdoc executable found at <code>src/tools/rustdoc</code>.</p>\n</blockquote>\n<p>I mean, the one in src/tools/rustdoc doesn't actually do anything lol</p>",
        "id": 216243112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20create.20an.20executable.20accessing.20.60rustc_private.60.3F/near/216242957\">said</a>:</p>\n<blockquote>\n<p>I just noticed you were trying to build the rustdoc library found at <code>src/librustdoc</code> as if it was an executable, not the rustdoc executable found at <code>src/tools/rustdoc</code>.</p>\n</blockquote>\n<p>Yes, I had no idea where it would be. And given that there is a main, I thought it would be easier to start from there. Maybe I was wrong.</p>",
        "id": 216243122,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605028635
    },
    {
        "content": "<p>like, this is the whole file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">rustdoc</span>::<span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216243162,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605028658
    },
    {
        "content": "<p>That is the same as <code>compiler/rustc</code> almost only calling <code>rustc_driver::main();</code>.</p>",
        "id": 216243331,
        "sender_full_name": "bjorn3",
        "timestamp": 1605028722
    },
    {
        "content": "<p>That's weird. If I build from librustdoc, I need to add <code>lazy_static</code> and <code>tracing</code> in the dependencies in the <code>Cargo.toml</code>, but not when compiling from <code>tools/rustdoc</code>.</p>",
        "id": 216244599,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605029293
    },
    {
        "content": "<p>Also, should I create a PR to add the sysroot detection, like what is done in miri? This would allow to run a version of <code>rustdoc</code> build without <code>x.py</code>.</p>",
        "id": 216244664,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605029329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20create.20an.20executable.20accessing.20.60rustc_private.60.3F/near/216244599\">said</a>:</p>\n<blockquote>\n<p>That's weird. If I build from librustdoc, I need to add <code>lazy_static</code> and <code>tracing</code> in the dependencies in the <code>Cargo.toml</code>, but not when compiling from <code>tools/rustdoc</code>.</p>\n</blockquote>\n<p>tools/rustdoc already has them in the sysroot I think</p>",
        "id": 216244869,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029422
    },
    {
        "content": "<p>since rustc depends on them too</p>",
        "id": 216244893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029433
    },
    {
        "content": "<p>ah</p>",
        "id": 216244914,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605029440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20create.20an.20executable.20accessing.20.60rustc_private.60.3F/near/216244664\">said</a>:</p>\n<blockquote>\n<p>Also, should I create a PR to add the sysroot detection, like what is done in miri? This would allow to run a version of <code>rustdoc</code> build without <code>x.py</code>.</p>\n</blockquote>\n<p>hmm I'm not <em>opposed</em> to it but I'd want to be sure it doesn't break x.py</p>",
        "id": 216244941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029452
    },
    {
        "content": "<p>of course!</p>",
        "id": 216244958,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605029461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> probably has stronger opinions though</p>",
        "id": 216244970,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029467
    },
    {
        "content": "<p>but yeah I think we'd need this anyway to build rustdoc out of tree</p>",
        "id": 216245060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20create.20an.20executable.20accessing.20.60rustc_private.60.3F/near/216244599\">said</a>:</p>\n<blockquote>\n<p>That's weird. If I build from librustdoc, I need to add <code>lazy_static</code> and <code>tracing</code> in the dependencies in the <code>Cargo.toml</code>, but not when compiling from <code>tools/rustdoc</code>.</p>\n</blockquote>\n<p>see also <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/lib.rs#L24-L30\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/lib.rs#L24-L30</a></p>",
        "id": 216245381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029653
    },
    {
        "content": "<p>and what version of <code>lazy_static</code> + <code>tracing</code>. This doesn't seem to be unified in the repository</p>",
        "id": 216245385,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605029655
    },
    {
        "content": "<p>I don't follow - those should still be loaded from sysroot</p>",
        "id": 216245421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029677
    },
    {
        "content": "<p>otherwise x.py will build them twice</p>",
        "id": 216245478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029701
    },
    {
        "content": "<p>I've never looked in detail at the code miri uses, so can't really comment</p>",
        "id": 216245506,
        "sender_full_name": "simulacrum",
        "timestamp": 1605029712
    },
    {
        "content": "<p>rustdoc deps shared with rustc are indeed ideally not declared in cargo.toml and just loaded from sysroot</p>",
        "id": 216245601,
        "sender_full_name": "simulacrum",
        "timestamp": 1605029755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20create.20an.20executable.20accessing.20.60rustc_private.60.3F/near/216245421\">said</a>:</p>\n<blockquote>\n<p>I don't follow - those should still be loaded from sysroot</p>\n</blockquote>\n<p>Effectively, my memory was bad. I though I had to add them to be able to build, but if fact no.</p>",
        "id": 216245781,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605029818
    },
    {
        "content": "<p>And if I add that sysroot detection, should I copy-paste the code from miri, or is there some common library where I could copy the code of <code>compile_time_sysroot()</code>?</p>",
        "id": 216245970,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605029903
    },
    {
        "content": "<p>any common library wouldn't be present out-of-tree, so I don't think that would help</p>",
        "id": 216246127,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029982
    },
    {
        "content": "<p>e.g. if you put it in <code>src/build_helper</code> miri wouldn't be able to use it</p>",
        "id": 216246149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605029993
    },
    {
        "content": "<p>I guess we could make it a git dependency but that seems like overkill</p>",
        "id": 216246257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605030028
    },
    {
        "content": "<p>ok, so dupplication + comment in both place</p>",
        "id": 216246263,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605030029
    },
    {
        "content": "<p>I would like to review that bit, btw, so please ping me on the eventual PR</p>",
        "id": 216247420,
        "sender_full_name": "simulacrum",
        "timestamp": 1605030605
    },
    {
        "content": "<p>sure</p>",
        "id": 216250046,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605031610
    },
    {
        "content": "<p>Given that miri isn't on the same repo, should I add create commit just to add a comment to say that the code of the sysroot detection was copied in rustdoc? I assume I shouldn't.</p>",
        "id": 216252245,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605032580
    },
    {
        "content": "<p>Hmm, does miri use submodules or subtrees?</p>",
        "id": 216252716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605032781
    },
    {
        "content": "<p>If it uses submodules I'd make the change upstream in rust-lang/miri, after the rustdoc pr gets merged</p>",
        "id": 216252755,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605032804
    },
    {
        "content": "<p>I think submodule. I'm not sure, and don't know how to check. Ok, I will do.</p>",
        "id": 216252783,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605032820
    },
    {
        "content": "<p><code>git submodule</code> will list all submodules in the repo</p>",
        "id": 216252911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605032881
    },
    {
        "content": "<p>Looks like it is a submodule, yeah</p>",
        "id": 216252979,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605032898
    },
    {
        "content": "<p>It is.</p>",
        "id": 216252989,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605032904
    },
    {
        "content": "<p>What is the syntax in the PR to ping someone?</p>",
        "id": 216253222,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605033005
    },
    {
        "content": "<p><code>r? @simulacrum</code></p>",
        "id": 216253806,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605033263
    },
    {
        "content": "<p>Thx</p>",
        "id": 216253856,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605033283
    },
    {
        "content": "<p>(but also cc me please, I'm @jyn514)</p>",
        "id": 216253887,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605033301
    },
    {
        "content": "<p>should I put both name on the same line?</p>",
        "id": 216253982,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605033339
    },
    {
        "content": "<p>separate lines - the first <code>r?</code> is parsed by @bors, anything after is just a normal ping</p>",
        "id": 216254136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605033395
    },
    {
        "content": "<p>ok</p>",
        "id": 216254156,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605033405
    },
    {
        "content": "<p>done</p>",
        "id": 216254624,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605033611
    }
]