[
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_attr/src/builtin.rs#L795-L800\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_attr/src/builtin.rs#L795-L800</a> , I see that the first error state has actually registered a distinct new type of error, whereas the second error state appears to be more ad-hoc and just uses <code>struct_span_error</code>. Which approach is preferred, considering that the error I want to add is internal to the compiler itself?</p>",
        "id": 227337233,
        "sender_full_name": "bstrie",
        "timestamp": 1614027967
    },
    {
        "content": "<p>Is this an internal lint? I would use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.struct_lint_node\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.struct_lint_node</a> where possible, since you don't have an error code but presumably you want to let people <code>allow</code> or <code>deny</code> it.</p>",
        "id": 227337788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614028213
    },
    {
        "content": "<p>not for a brand-new lint, I want to add an error when somebody writes a <code>#[rustc_deprecated]</code> attribute with an invalid value for the <code>since</code> field. Currently rustc requires the field's presence (the first line in my prior link) but elsewhere it silently ignores if the field isn't a valid version string. I would like to use an error to enforce that the string is a valid value.</p>",
        "id": 227338858,
        "sender_full_name": "bstrie",
        "timestamp": 1614028673
    },
    {
        "content": "<p>actually, I think I'll just expand that MissingSince error there to encompass both a missing and an invalid \"since\" field</p>",
        "id": 227340647,
        "sender_full_name": "bstrie",
        "timestamp": 1614029475
    }
]