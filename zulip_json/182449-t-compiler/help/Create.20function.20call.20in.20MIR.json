[
    {
        "content": "<p>Im trying to write a MIR optimisation pass that combines individual comparisons of array elements into a single call to <code>PartialEq::eq</code>. eg:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bb1</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">switchInt</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"mi\">97_</span><span class=\"k\">u8</span>: <span class=\"nc\">bb2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">otherwise</span>: <span class=\"nc\">bb5</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb2</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">switchInt</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"mi\">98_</span><span class=\"k\">u8</span>: <span class=\"nc\">bb3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">otherwise</span>: <span class=\"nc\">bb5</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">bb3</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">switchInt</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"mi\">99_</span><span class=\"k\">u8</span>: <span class=\"nc\">bb4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">otherwise</span>: <span class=\"nc\">bb5</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>into:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bb1</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span>::<span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">97</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">98</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">switchInt</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kc\">false</span>: <span class=\"nc\">bb5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">otherwise</span>: <span class=\"nc\">bb4</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>How do i get a handle to <code>PartialEq::eq</code>?</p>",
        "id": 278322949,
        "sender_full_name": "Karl Meakin",
        "timestamp": 1649432821
    },
    {
        "content": "<p><code>PartialEq</code> is a lang item, so you can use that to get the trait, and then find the associated method by symbol.</p>",
        "id": 278326857,
        "sender_full_name": "scottmcm",
        "timestamp": 1649434436
    },
    {
        "content": "<p>I can get the <code>PartialEq</code> trait with <code>tcx.lang_items().require(LangItem::PartialEq)</code>, but how do I lookup the method in the trait?</p>",
        "id": 278361796,
        "sender_full_name": "Karl Meakin",
        "timestamp": 1649451697
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.associated_items\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.associated_items</a> then <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/assoc/struct.AssocItems.html#method.filter_by_name_unhygienic\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/assoc/struct.AssocItems.html#method.filter_by_name_unhygienic</a> maybe?</p>",
        "id": 278364501,
        "sender_full_name": "scottmcm",
        "timestamp": 1649453254
    },
    {
        "content": "<p>that seems to do the trick, thanks!</p>",
        "id": 278580610,
        "sender_full_name": "Karl Meakin",
        "timestamp": 1649694850
    }
]