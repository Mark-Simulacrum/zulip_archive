[
    {
        "content": "<p>Is there a way to get the <code>ty::Ty</code> of, e.g., a <code>DefId</code> without expanding type aliases? (Actually, I would probably need to have selective expansion of aliases...)</p>\n<p>My use case is for rustdoc; see <a href=\"#narrow/stream/266220-rustdoc/topic/reducing.20duplication\">https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/reducing.20duplication</a>.</p>",
        "id": 264110878,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638937886
    },
    {
        "content": "<p><code>TyKind</code> doesn't have a variant for type aliases, so how should type aliases be represented by such method?</p>",
        "id": 264118170,
        "sender_full_name": "bjorn3",
        "timestamp": 1638946364
    },
    {
        "content": "<p>I didn't expect it to be possible, but I thought it was worth asking. Having some way to recover type alias information from a type might be useful for diagnostics too.</p>",
        "id": 264212490,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638993906
    },
    {
        "content": "<p>I'm not sure if there's really a good way to do it though...</p>",
        "id": 264212514,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638993916
    },
    {
        "content": "<p>I'm open to other ideas about how to solve my rustdoc conundrum too ;)</p>",
        "id": 264212731,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638994015
    },
    {
        "content": "<p>Rust-analyzer has the same problem. There is an open issue for ra about this.</p>",
        "id": 264215325,
        "sender_full_name": "bjorn3",
        "timestamp": 1638995254
    },
    {
        "content": "<p>Looks like there's <a href=\"https://github.com/rust-lang/r-a/issues/1666\">r-a#1666</a>, and potentially several duplicates.</p>",
        "id": 264218305,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638996637
    },
    {
        "content": "<p>So do you think it'd be reasonable to add an <code>Alias</code> (or similar) variant to <code>ty::TyKind</code>, and add a way to normalize type aliases lazily, or only normalize some?</p>",
        "id": 264218412,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638996704
    },
    {
        "content": "<p>I'm not very familiar with the existing way that type alias normalization is handled. I think I'll try to look through the type-checker sources a bit.</p>",
        "id": 264218539,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638996754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> I don't see how lazy normalization would help here - this is in metadata, so it has to be normalized at some point anyway</p>",
        "id": 264222231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638998554
    },
    {
        "content": "<p>(also, people have been trying to do lazy normalization for years and I don't think we should block on that)</p>",
        "id": 264222248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638998568
    },
    {
        "content": "<p>I'm open to suggestions of how to accomplish the rustdoc cleanup without lazy normalization :P</p>",
        "id": 264222431,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638998652
    },
    {
        "content": "<p>Actually, I'm pretty sure lazy normalization of type aliases â‰  <a href=\"https://github.com/rust-lang/rust/issues/60471\">\"lazy normalization\"</a>.</p>",
        "id": 264223945,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638999273
    },
    {
        "content": "<p>So maybe it wouldn't be as hard?</p>",
        "id": 264224348,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638999445
    },
    {
        "content": "<blockquote>\n<p>this is in metadata, so it has to be normalized at some point anyway</p>\n</blockquote>\n<p>My idea is that <code>tcx.type_of(a_type_alias)</code> would return <code>TyKind::TyAlias(def_id, ty_value)</code>, which would then be normalized on-demand. I.e., it wouldn't be normalized in metadata.</p>",
        "id": 264224483,
        "sender_full_name": "Noah Lev",
        "timestamp": 1638999491
    }
]