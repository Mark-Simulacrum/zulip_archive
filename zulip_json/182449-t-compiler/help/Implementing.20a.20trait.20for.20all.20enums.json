[
    {
        "content": "<p>In response to feedback on <a href=\"https://github.com/rust-lang/rust/pull/81642\">https://github.com/rust-lang/rust/pull/81642</a> - I'm trying to work out how to go about automatically implementing a trait for all enums (which meet certain trivially detectable properties) automatically...</p>\n<p>From grepping around <code>rustc_interface</code>, it looks like the simplest way to go may be to teach the macro expander (in <code>rustc_expand</code>) that it should run a derive macro which only exists for the purposes of <code>rustc</code> and isn't exposed anywhere outside the compiler, even though no derive macro is written on the type... Does that sounds about right?</p>\n<p>I also thought about having <code>rustc_ast_lowering</code> just pop out a second Item as a side-effect of lowering enums, but it looks like that code strongly assumes that one <code>Item</code> is lowered to exactly one <code>Item</code> (which is very reasonable!)</p>\n<p>Is there an obviously better approach? Or any other prior art anyone can think of? I can only think of traits which are blanket impl'd (e.g. <code>Any</code>) but enums AFAIK don't have properties which would allow a blanket impl to target them, or traits which are impl'd on a finite known set of types (e.g. <code>ops::Add</code> for <code>u*</code> types), and not traits which are auto-impl'd for a subset of user-defined types...</p>",
        "id": 243309940,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1624206210
    },
    {
        "content": "<p>Even <a href=\"https://doc.rust-lang.org/nightly/core/marker/trait.DiscriminantKind.html\">https://doc.rust-lang.org/nightly/core/marker/trait.DiscriminantKind.html</a> isn't impl'd only for enums, so...</p>",
        "id": 243312170,
        "sender_full_name": "scottmcm",
        "timestamp": 1624209531
    }
]