[
    {
        "content": "<p>Hi! Maybe I missed something obvious, but is there an easy way to build just the stdlib (with stage0 compiler), and then use the resulting stage0 rustc + modified stage0 stdlib to create a <code>rustup</code> toolchain?</p>\n<p>When working on the compiler, when stage1 is built, it creates a directory with <code>bin</code> and <code>lib</code> directories that can be easily turned into a toolchain using <code>rustup toolchain link</code>. This makes it very convenient to e.g. run <code>rustc-perf</code> benchmarks using the linked toolchain or just use it to compile arbitrary crates using <code>cargo +my-toolchain build</code>.</p>\n<p>Now let's say that I want to try some hacking on the stdlib, without changing the compiler at all. I can build stage1 rustc + stage1 libstd, but that takes several minutes to compile on my PC after each change. I can compile just the stdlib with the stage0 compiler using e.g. <code>x.py build library/std --stage 0</code>, which is fast. But this will only create the <code>stage0-std</code> directory, and I can't easily create a <code>rustup</code> toolchain out of that. Is there an easy way of achieving this? Basically I want to create a directory that has <code>bin</code> and <code>lib</code> directories with stage0 rustc linked to the modified stage0 libdstd.</p>",
        "id": 252973971,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1631439752
    },
    {
        "content": "<p><code>./x.py build --stage 0</code></p>",
        "id": 252974395,
        "sender_full_name": "The 8472",
        "timestamp": 1631440279
    },
    {
        "content": "<p>This indeed builds stage0 libstd, but does it generate a directory with rustc + libstd which could be linked by <code>rustup</code>? When I look into build/&lt;target&gt;/stage0 directory, it still uses the original (beta) libstd. I tried creating a toolchain out of it and it does not contain my modifications to std.</p>",
        "id": 252974607,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1631440539
    },
    {
        "content": "<p>The built rustc is located in stage0-rustc, the built libstd is located in stage0-std, but I didn't find a directory that would contain these two things in a form that could be easily used and linked by <code>rustup</code>.</p>",
        "id": 252974759,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1631440709
    },
    {
        "content": "<p>I think that the .so used to run rustc, not the std rlib used to build projects with that rustc</p>",
        "id": 252974786,
        "sender_full_name": "The 8472",
        "timestamp": 1631440768
    },
    {
        "content": "<p>Yes, the correct .so has to be used I suppose. I was wondering if the current infrastructure prepares such directory with stage0 rustc and <a href=\"http://libstd.so\">libstd.so</a> (to enable rustup linking), but it seems that it doesn't.</p>",
        "id": 252981550,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1631448070
    },
    {
        "content": "<p>No, there's no sysroot with stage0 std and the bootstrap compiler. There's <code>stage0-sysroot</code>, but it doesn't have the beta compiler. (Maybe you could copy it by hand and have it work?)</p>",
        "id": 252992582,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631459066
    },
    {
        "content": "<p>That sounds like a plan, I'll try it :) Maybe I'm doing this in a wrong way, what's your way of hacking on the stdlib? Recompiling stage1 every time?</p>",
        "id": 253043599,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1631514662
    },
    {
        "content": "<p>I would run x.py test --stage 0 library/std. It's the standard library, so writing a test for it is exactly the same as using it in a standalone project.</p>",
        "id": 253085233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1631538142
    },
    {
        "content": "<p>Thanks, that sounds like a reasonable solution :)</p>",
        "id": 253366741,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1631685758
    }
]