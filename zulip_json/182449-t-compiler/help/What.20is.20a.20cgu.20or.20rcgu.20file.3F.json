[
    {
        "content": "<p>When I unpack a .a file generated for a staticlib I get lots of rcgu files with the same name, things like <code>blah-cgu.15.rcgu.o</code>. What do \"cgu\" and \"rcgu\" here mean? I'm guessing cgu stands for \"code gen unit\" but I'm not sure.</p>",
        "id": 205765415,
        "sender_full_name": "osa1",
        "timestamp": 1596439018
    },
    {
        "content": "<p>Yes, cgu is \"code gen unit\". rcgu is \"rust code gen unit\".</p>",
        "id": 205768421,
        "sender_full_name": "bjorn3",
        "timestamp": 1596441802
    },
    {
        "content": "<p>Thanks. I thought a crate is a single compilation for rustc, is this not correct anymore? Why and how does rustc split a crate into multiple compilation units?</p>",
        "id": 205770785,
        "sender_full_name": "osa1",
        "timestamp": 1596443583
    },
    {
        "content": "<p>A crate is split into multiple codegen units just before codegen so multiple codegen units can be optimized in parallel. You can the control amount using <code>-Ccodegen-units</code>.</p>",
        "id": 205772521,
        "sender_full_name": "bjorn3",
        "timestamp": 1596445047
    },
    {
        "content": "<p>Thanks! By \"codegen\" do you mean when generating LLVM modules of even before that? (maybe when generating MIR?) I just started passing <code>-Ccodege-units</code> to core, std, compiler_builtins and the main crate and it's much easier to find symbols I'm looking for now.</p>",
        "id": 205773149,
        "sender_full_name": "osa1",
        "timestamp": 1596445677
    },
    {
        "content": "<p>\"codegen\" is generating and optimizing LLVM modules.</p>",
        "id": 205773780,
        "sender_full_name": "bjorn3",
        "timestamp": 1596446209
    },
    {
        "content": "<p>So MIR optimizations applied to the whole crate, right?</p>",
        "id": 205774514,
        "sender_full_name": "osa1",
        "timestamp": 1596446819
    },
    {
        "content": "<p>MIR optimizations normally look at a single MIR body at a time. Only MIR inlining looks at multiple MIR bodies at a time, but even in that case it can only change a single MIR body at a time and it needs a hackish scheme to prevent cycle errors, as it looks at the already optimized MIR of callees.</p>",
        "id": 205774817,
        "sender_full_name": "bjorn3",
        "timestamp": 1596447043
    },
    {
        "content": "<p>MIR optimizations are per-function, but this can require pulling info from the rest of the crate or even other crates</p>",
        "id": 205774830,
        "sender_full_name": "oli",
        "timestamp": 1596447050
    },
    {
        "content": "<p>since MIR opts can trigger e.g. const eval, which itself can require the MIR for some const fns, there is a dependency tree here, but as bjorn3 said, only in inlining do you get cycle errors that are problematic. All other cycle errors that you get are legitly cycles in your code</p>",
        "id": 205774964,
        "sender_full_name": "oli",
        "timestamp": 1596447153
    },
    {
        "content": "<p>oh so there are no full-program mir opts?</p>",
        "id": 205798854,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1596464166
    },
    {
        "content": "<p>nope</p>",
        "id": 205803731,
        "sender_full_name": "oli",
        "timestamp": 1596466622
    },
    {
        "content": "<p>full-program mir opts don't go very well with the query system.</p>",
        "id": 205803790,
        "sender_full_name": "oli",
        "timestamp": 1596466655
    }
]