[
    {
        "content": "<p>Would it be reasonable in the future for rust to be able to create const fn closures? Would they close over any variables if they have static lifetimes?</p>",
        "id": 202521892,
        "sender_full_name": "Jarod",
        "timestamp": 1593567135
    },
    {
        "content": "<p><code>'static</code> bounds are orthogonal from <code>const fn</code>-ness</p>",
        "id": 202527789,
        "sender_full_name": "eddyb",
        "timestamp": 1593574560
    },
    {
        "content": "<p>the missing thing is either a syntax, or an inference step, to determine whether the closure should be considered <code>const fn</code></p>",
        "id": 202527835,
        "sender_full_name": "eddyb",
        "timestamp": 1593574600
    },
    {
        "content": "<p>the closed over variables are just like fields in a <code>struct</code> that is passed to the closure</p>",
        "id": 202527854,
        "sender_full_name": "eddyb",
        "timestamp": 1593574637
    },
    {
        "content": "<p>I'll add them to the skill tree</p>",
        "id": 202532903,
        "sender_full_name": "oli",
        "timestamp": 1593582040
    },
    {
        "content": "<p>done. Basically we'll need the ability to invoke trait methods, too. We already have an impl for that if the closure isn't a generic parameter but defined in the method where it is called</p>",
        "id": 202533237,
        "sender_full_name": "oli",
        "timestamp": 1593582530
    },
    {
        "content": "<p>so yea, I guess all that is left is to auto-force the <code>Fn*</code> impls for closures in <code>const fn</code> to be <code>const impl</code>s</p>",
        "id": 202533251,
        "sender_full_name": "oli",
        "timestamp": 1593582558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> are you sure though? I thought I've used closures in constant contexts before, by casting them to a <code>fn()</code> pointer or <code>&amp;dyn Fn()</code></p>",
        "id": 202620963,
        "sender_full_name": "eddyb",
        "timestamp": 1593635772
    },
    {
        "content": "<p>yea, but you can't do it in const fn, so we can do this inside const fn</p>",
        "id": 202654912,
        "sender_full_name": "oli",
        "timestamp": 1593672188
    },
    {
        "content": "<p>I'm not too happy about the idea tbh, it feels kind of arbitrary. unless you can put runtime code in the closure and it just wouldn't be considered <code>const Fn()</code> but idk which parts of the compiler check that aspect of <code>const Trait</code>-ness</p>",
        "id": 202824444,
        "sender_full_name": "eddyb",
        "timestamp": 1593797298
    },
    {
        "content": "<p>interesting idea. I think it could be a reasonable scheme to have closures infer their constness</p>",
        "id": 202880412,
        "sender_full_name": "oli",
        "timestamp": 1593879226
    }
]