[
    {
        "content": "<p>Hi! I'm having a <em>very</em> strange issue, my custom rustc driver is producing invalid metadata for a crate but <em>only</em> in CI. It seems like the type of a function gets changed! I don't do anything that should affect how rustc generates its metadata, nor can I repoduce it locally, but it occurs <em>systematically</em> in CI.</p>",
        "id": 272773898,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645519498
    },
    {
        "content": "<p>The problem manifests as follows, I have a trait like this in a crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait OrdLogic: EqLogic {\n    #[logic]\n    fn cmp_log(self, _: Self) -&gt; Ordering;\n\n    #[predicate]\n    fn le_log(self, o: Self) -&gt; bool {\n        pearlite! { !(self.cmp_log(o) === Ordering::Greater) }\n    }\n}\n</code></pre></div>\n<p>When my driver compiles the crate it sees the type of <code>cmp_log</code> successfully as <code>fn(Self, Self) -&gt; Ordering</code></p>",
        "id": 272774071,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645519602
    },
    {
        "content": "<p>but when I load that crate in a dependent crate, the type of <code>cmp_log</code> becomes <code>fn(Self, Self) -&gt; fn(Self, Self) -&gt; bool { le_log }</code></p>",
        "id": 272774127,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645519631
    },
    {
        "content": "<p>which, what???</p>",
        "id": 272774146,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645519644
    },
    {
        "content": "<p>I'm aware that given that this is in a custom driver there's probably not a ton external people could do for me, but the fact that this bug is triggered by a seemingly harmless change and can't be reproduced locally is driving me insane</p>",
        "id": 272774312,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645519727
    },
    {
        "content": "<p>Is your CI caching something maybe?</p>",
        "id": 272784500,
        "sender_full_name": "oli",
        "timestamp": 1645525812
    },
    {
        "content": "<p>I tried clearing the cache, even going so far as to <code>rm</code> everything to no avail</p>",
        "id": 272799177,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645535046
    },
    {
        "content": "<p>and re-ordering the execution of some queries solved the issue...</p>",
        "id": 272799196,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645535062
    },
    {
        "content": "<p>that sounds like you have global state somewhere <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 272799732,
        "sender_full_name": "oli",
        "timestamp": 1645535391
    },
    {
        "content": "<p>(or rustc has, which it does, but it should be mostly fine)</p>",
        "id": 272799782,
        "sender_full_name": "oli",
        "timestamp": 1645535403
    },
    {
        "content": "<p>could that global state be sccache by any chance?</p>",
        "id": 272799858,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1645535452
    },
    {
        "content": "<p>I had a similar problem recently where stage 1 libstd ICE rustc during build which was solved by wiping sccache and building from scratch <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 272799901,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1645535489
    },
    {
        "content": "<p>I don't use sccache, to me it sounds like an issue with how metadata is being (de)-serialized</p>",
        "id": 272815497,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645542513
    },
    {
        "content": "<p>it's particularily weird that the malformed type uses the type of the <em>following</em> item in the trait as the return type</p>",
        "id": 272815537,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645542534
    },
    {
        "content": "<p>but what's doubly weird is that this is just normal <code>rustc</code> metadata, ie the result of <code>tcx.type_of(def_id)</code></p>",
        "id": 272815555,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645542541
    },
    {
        "content": "<p>So I wonder if i'm not somehow breaking an invariant of rustc..</p>",
        "id": 272815649,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1645542588
    }
]