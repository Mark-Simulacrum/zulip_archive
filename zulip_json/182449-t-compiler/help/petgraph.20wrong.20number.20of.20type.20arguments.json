[
    {
        "content": "<p>I updated to <a href=\"https://github.com/rust-lang/rust/commit/441fd2255763c2aeea616aeac61b2c795a4c5330\">441fd2255763c2aeea616aeac61b2c795a4c5330</a> in my aarch64-darwin fork, and now I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0107]: wrong number of type arguments: expected 3, found 2\n   --&gt; /Users/shepmaster/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.5.1/src/graphmap.rs:580:16\n    |\n580 |     edges: &amp;&#39;a IndexMap&lt;(N, N), E&gt;,\n    |                ^^^^^^^^^^^^^^^^^^^ expected 3 type arguments\n\nerror[E0107]: wrong number of type arguments: expected 2, found 1\n   --&gt; /Users/shepmaster/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.5.1/src/matrix_graph.rs:925:22\n    |\n925 |     removed_ids: &amp;&#39;a IndexSet&lt;usize&gt;,\n    |                      ^^^^^^^^^^^^^^^ expected 2 type arguments\n\nerror[E0107]: wrong number of type arguments: expected 3, found 2\n  --&gt; /Users/shepmaster/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.5.1/src/graphmap.rs:61:12\n   |\n61 |     nodes: IndexMap&lt;N, Vec&lt;(N, CompactDirection)&gt;&gt;,\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 3 type arguments\n\nerror[E0107]: wrong number of type arguments: expected 3, found 2\n  --&gt; /Users/shepmaster/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.5.1/src/graphmap.rs:62:12\n   |\n62 |     edges: IndexMap&lt;(N, N), E&gt;,\n   |            ^^^^^^^^^^^^^^^^^^^ expected 3 type arguments\n\nerror[E0107]: wrong number of type arguments: expected 2, found 1\n   --&gt; /Users/shepmaster/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.5.1/src/matrix_graph.rs:851:18\n    |\n851 |     removed_ids: IndexSet&lt;usize&gt;,\n    |                  ^^^^^^^^^^^^^^^ expected 2 type arguments\n</code></pre></div>\n\n\n<p>Ring a bell for anyone?</p>",
        "id": 206582547,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597156478
    },
    {
        "content": "<p>I wasn't super clear, but this is while compiling rustc:</p>\n<div class=\"codehilite\"><pre><span></span><code>    SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path) \\\n    MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version) \\\n    DESTDIR=~/crossed \\\n    ../../x.py install -i --stage 1 --host ../aarch64-apple-darwin.json --target aarch64-apple-darwin,x86_64-apple-darwin \\\n    src/librustc library/std\n</code></pre></div>",
        "id": 206598672,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1597164253
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/75309#issuecomment-672261875\">https://github.com/rust-lang/rust/pull/75309#issuecomment-672261875</a> seems similar</p>",
        "id": 206627185,
        "sender_full_name": "simulacrum",
        "timestamp": 1597177884
    },
    {
        "content": "<p>This is still happening :-(</p>",
        "id": 207842892,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598275864
    },
    {
        "content": "<blockquote>\n<p>Hm so indexmap is using autocfg to probe for std's presence, I think via this <a href=\"https://docs.rs/autocfg/1.0.0/src/autocfg/lib.rs.html#268-271\">bit of code</a>. My guess is that's not using the right rustc or not passing it the right parameters, but I'm not sure without seeing the actual build log from autocfg we'd be able to say much.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so if I could get that, maybe we could get unstuck?</p>",
        "id": 207843438,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598276172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> How may I get debugging output from autocfg?</p>",
        "id": 207843682,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598276327
    },
    {
        "content": "<p>Realistically I'm pretty unhappy about crates doing this in the first place, seems a bit hacky. I guess there's not too many better solutions...</p>",
        "id": 207844023,
        "sender_full_name": "simulacrum",
        "timestamp": 1598276505
    },
    {
        "content": "<p>(well, cargo features are the norm, and something I'd prefer)</p>",
        "id": 207844044,
        "sender_full_name": "simulacrum",
        "timestamp": 1598276515
    },
    {
        "content": "<p>Heh, it's something I have a light fight with for SNAFU as well. Having the \"auto\" is really nice, _but_. My soft plan there is to keep having <code>v1_30</code> flags and a <code>auto_detect</code> flag, both of which are off-by-default.</p>",
        "id": 207844621,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598276831
    },
    {
        "content": "<p>Ah, here we go...</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc command: &quot;DYLD_LIBRARY_PATH&quot;=&quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/lib&quot; &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/bin/rustc&quot; &quot;--crate-name&quot; &quot;probe0&quot; &quot;--crate-type=lib&quot; &quot;--out-dir&quot; &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0-rustc/aarch64-apple-darwin/release/build/indexmap-2845cc4b8ddf50e9/out&quot; &quot;--emit=llvm-ir&quot; &quot;--cfg=bootstrap&quot; &quot;-Zdual-proc-macros&quot; &quot;-Zmacro-backtrace&quot; &quot;-Zosx-rpath-install-name&quot; &quot;-Clink-args=-Wl,-rpath,@loader_path/../lib&quot; &quot;-Zunstable-options&quot; &quot;-Wrustc::internal&quot; &quot;-Cprefer-dynamic&quot; &quot;-Cllvm-args=-import-instr-limit=10&quot; &quot;--target&quot; &quot;aarch64-apple-darwin&quot; &quot;-&quot; &quot;-Wrust_2018_idioms&quot; &quot;-Wunused_lifetimes&quot; &quot;-Dwarnings&quot; &quot;--sysroot&quot; &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0-sysroot&quot; &quot;-Z&quot; &quot;force-unstable-if-unmarked&quot;\nsysroot: &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0-sysroot&quot;\nlibdir: &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/lib&quot;\n&lt;jemalloc&gt;: Unsupported system page size\nerror: Error loading target specification: Could not find specification for target &quot;aarch64-apple-darwin&quot;. Use `--print target-list` for a list of built-in targets\n``\n</code></pre></div>",
        "id": 207845527,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277264
    },
    {
        "content": "<p>So it looks like there's a mismatch between which rustc is being used and the target</p>",
        "id": 207845815,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277403
    },
    {
        "content": "<p>Because the bootstrap compiler doesn't know about aarch64-macos yet</p>",
        "id": 207845900,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277440
    },
    {
        "content": "<p>you could try <code>RUSTFLAGS_NOT_BOOTSTRAP</code> maybe?</p>",
        "id": 207846188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598277576
    },
    {
        "content": "<p>Perhaps! But I can't reason through if this <strong>is</strong> bootstrap or not</p>",
        "id": 207846541,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277737
    },
    {
        "content": "<p>yeah, build compiler for build scripts is always(?) set to the bootstrap compiler</p>",
        "id": 207846545,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277738
    },
    {
        "content": "<p>well, I mean, it has to be in this case, you don't have another compiler</p>",
        "id": 207846574,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277763
    },
    {
        "content": "<p>looking at that command it looks like it's failing in stage0 compiler artifacts compilation</p>",
        "id": 207846615,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277793
    },
    {
        "content": "<p>One thing I don't understand is why this previously worked and recently changed.</p>",
        "id": 207846620,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277799
    },
    {
        "content": "<p>indexmap I think only recently started doing this perhaps?</p>",
        "id": 207846638,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277809
    },
    {
        "content": "<p>maybe not, not sure :)</p>",
        "id": 207846686,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277838
    },
    {
        "content": "<p>It'd be fine to use the bootstrap compiler, so long as the <code>--target</code> path was passed</p>",
        "id": 207846759,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277854
    },
    {
        "content": "<p>right, I guess someone is synthesizing a wrong rustc invocation, probably autocfg</p>",
        "id": 207846786,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277871
    },
    {
        "content": "<p>Relevant part of my command line:</p>\n<div class=\"codehilite\"><pre><span></span><code>../../x.py install -i --stage 1 --host ../aarch64-apple-darwin.json --target aarch64-apple-darwin,x86_64-apple-darwin\n</code></pre></div>",
        "id": 207846814,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277890
    },
    {
        "content": "<p>oh</p>",
        "id": 207846858,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277912
    },
    {
        "content": "<p>wait, that seems weird, why do you have .json for host but not target?</p>",
        "id": 207846890,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277927
    },
    {
        "content": "<p>you can see that the bootstrap compiler is being run with \"--target\" \"aarch64-apple-darwin\"</p>",
        "id": 207846946,
        "sender_full_name": "simulacrum",
        "timestamp": 1598277959
    },
    {
        "content": "<p>I agree it's weird, but I'll fall back on the old chestnuts of \"this used to work\" and \"I don't fully understand the build process\"</p>",
        "id": 207846997,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598277968
    },
    {
        "content": "<p>I'm guessing that the most expedient fix would be for me to bump the bootstrap compiler so that I can abandon the json file</p>",
        "id": 207847119,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598278049
    },
    {
        "content": "<p>But I was thinking I might as well try to fix weird thing while I'm here, if it seems useful</p>",
        "id": 207847163,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598278074
    },
    {
        "content": "<p><code>--host</code> is what you build a compiler for. <code>--target</code> is what you build libstd for.</p>",
        "id": 207847169,
        "sender_full_name": "bjorn3",
        "timestamp": 1598278079
    },
    {
        "content": "<p>Sure. And the libstd is seemingly built with the compiler built from <code>--host</code>, which is why I could get away with using the built-in target then.</p>",
        "id": 207847487,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598278261
    },
    {
        "content": "<p>I <em>think</em> the problem is that cargo sets $TARGET for build scripts to the json-less path</p>",
        "id": 207847862,
        "sender_full_name": "simulacrum",
        "timestamp": 1598278451
    },
    {
        "content": "<p>but without knowing whether cargo is passed the json-less path, I'm not sure if that's cargo's fault or not</p>",
        "id": 207847905,
        "sender_full_name": "simulacrum",
        "timestamp": 1598278470
    },
    {
        "content": "<p>(json-less path =&gt; not a path at all)</p>",
        "id": 207847939,
        "sender_full_name": "simulacrum",
        "timestamp": 1598278486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> do you have the cargo invocation?</p>",
        "id": 207848986,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279003
    },
    {
        "content": "<p>I do not right now, but after this test with upgrading bootstrap I can get it again.</p>",
        "id": 207849400,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> If I rebased with your PR for 1.46, would I also get a bootstrap bump?</p>",
        "id": 207849547,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279258
    },
    {
        "content": "<p>hm which PR?</p>",
        "id": 207849575,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279274
    },
    {
        "content": "<p>Oh, I guess you just reviewed it, not authored it (<a href=\"https://github.com/rust-lang/rust/pull/75878\">https://github.com/rust-lang/rust/pull/75878</a>)</p>",
        "id": 207849661,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279298
    },
    {
        "content": "<p>oh no you shouldn't rebase with that PR as your tip</p>",
        "id": 207849711,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279323
    },
    {
        "content": "<p>Ok, good.</p>",
        "id": 207849721,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279330
    },
    {
        "content": "<p>Oh, it's even going to the stable branch. yes.</p>",
        "id": 207849766,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279350
    },
    {
        "content": "<p>if you want to bump bootstrap, edit src/stage0.txt to set date: to 2020-08-22</p>",
        "id": 207849774,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279355
    },
    {
        "content": "<p>(or maybe 21, not sure)</p>",
        "id": 207849788,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279362
    },
    {
        "content": "<p>Yeah, that's what I did, but then was looking for any other PRs that might have been updating it.</p>",
        "id": 207849814,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279379
    },
    {
        "content": "<p>I think we talked about bumping but never actually did. We rarely do.</p>",
        "id": 207849842,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279397
    },
    {
        "content": "<p>I suppose there will be a normal bump in the next week or so to get the next <code>beta.0</code>?</p>",
        "id": 207849894,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279405
    },
    {
        "content": "<p>yeah, to 1.47-beta</p>",
        "id": 207849913,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> to be clear, I suspect that there's either a cargo or bootstrap bug (though maybe hard to fix) wrt to treatment of $TARGET when <code>--target</code> is a file path, not a compiler-known triple</p>",
        "id": 207850256,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279580
    },
    {
        "content": "<p>I suspect a cargo bug</p>",
        "id": 207850276,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279591
    },
    {
        "content": "<p>sure. I certainly changed a lot of places in bootstrap to try and pass the file around, so I'd lean towards believing there's something I missed, TBH.</p>",
        "id": 207850642,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598279777
    },
    {
        "content": "<p>well I'd expect things to fail much earlier if we're not passing it to cargo correctly</p>",
        "id": 207851018,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279968
    },
    {
        "content": "<p>and cargo is in charge of $TARGET</p>",
        "id": 207851031,
        "sender_full_name": "simulacrum",
        "timestamp": 1598279976
    },
    {
        "content": "<p>Just doing the bootstrap bump was sufficient, so that's good.</p>",
        "id": 207852881,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598280810
    },
    {
        "content": "<p>Now to restart and get that cargo error.</p>",
        "id": 207852947,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598280836
    },
    {
        "content": "<p>It's almost like it <em>doesn't</em> run Cargo again, which is nonsensical</p>",
        "id": 207856081,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598282232
    },
    {
        "content": "<p>Starting at the end of the log, I search backward for <code>indexmap-1.5.1/build.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc command: &quot;DYLD_LIBRARY_PATH&quot;=&quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/lib&quot; &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/bin/rustc&quot; &quot;--crate-name&quot; &quot;build_script_build&quot; &quot;--edition=2018&quot; &quot;/Use\nrs/shepmaster/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.5.1/build.rs&quot; &quot;--error-format=json&quot; &quot;--json=diagnostic-rendered-ansi&quot; &quot;--crate-type&quot; &quot;bin&quot; &quot;--emit=dep-info,link&quot; &quot;-C&quot; &quot;opt-level=3&quot; &quot;-Cembed-bitcode=no&quot; &quot;-C&quot; &quot;debuginfo=0&quot; &quot;-C&quot; &quot;metadata=8c660252\nda0efa04&quot; &quot;-C&quot; &quot;extra-filename=-8c660252da0efa04&quot; &quot;--out-dir&quot; &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0-rustc/release/build/indexmap-8c660252da0efa04&quot; &quot;-L&quot; &quot;dependency=/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-appl\ne-darwin/stage0-rustc/release/deps&quot; &quot;--extern&quot; &quot;autocfg=/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0-rustc/release/deps/libautocfg-29bfb26e4fe2686c.rlib&quot; &quot;--cap-lints&quot; &quot;warn&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-Wrust_2018_idioms&quot; &quot;-Wunused_lifeti\nmes&quot; &quot;-Dwarnings&quot;\n</code></pre></div>\n\n\n<p>Then, the next preceding line that mentions indexmap is</p>\n<div class=\"codehilite\"><pre><span></span><code>Copy &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0-rustc/x86_64-apple-darwin/release/deps/libindexmap-6714a9f0e483ccbd.rlib&quot; to &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0-sysroot/lib/rustlib/x86_64-\napple-darwin/lib/libindexmap-6714a9f0e483ccbd.rlib&quot;\n</code></pre></div>",
        "id": 207856296,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598282353
    },
    {
        "content": "<p>can you paste the full log? Cargo won't be run to build just indexmap</p>",
        "id": 207857362,
        "sender_full_name": "simulacrum",
        "timestamp": 1598282828
    },
    {
        "content": "<p>sure — you have a suggested location for ~4MB of text?</p>",
        "id": 207857458,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598282868
    },
    {
        "content": "<p>I'm only interested in running: \"/home/mark/Build/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"build\" \"--target\" \"x86_64-unknown-linux-gnu\" \"-Zbinary-dep-depinfo\" \"-j\" \"32\" \"-v\" \"--release\" \"--manifest-path\" \"/home/mark/Build/rust/src/tools/rustdoc/Cargo.toml\"<br>\nand similar</p>",
        "id": 207857540,
        "sender_full_name": "simulacrum",
        "timestamp": 1598282887
    },
    {
        "content": "<p>Well that will never work... <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> My name's not <code>mark</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 207857627,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598282933
    },
    {
        "content": "<p><code>./build/x86_64-apple-darwin/stage0/bin/cargo \"build\" \"--target\" \"x86_64-apple-darwin\" \"-Zbinary-dep-depinfo\" \"-j\" \"32\" \"-v\" \"--release\" \"--manifest-path\" \"../../src/tools/rustdoc/Cargo.toml\"</code> — what's the magic \"let me use <code>-Z</code> on beta env var?</p>",
        "id": 207857886,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598283046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> no, I mean that running is part of the 4MB log hopefully</p>",
        "id": 207858099,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283126
    },
    {
        "content": "<p>and the other running cargo lines</p>",
        "id": 207858136,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283143
    },
    {
        "content": "<p>ah.</p>\n<div class=\"codehilite\"><pre><span></span><code>% grep -F &#39;&quot;build&quot;&#39; /tmp/build.log\nrunning: &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-apple-darwin&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;4&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace compiler-builtins-c&quot; &quot;--manifest-path&quot; &quot;/Users/shepmaster/Projects/rust/library/test/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nrunning: &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-apple-darwin&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;4&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;--release&quot; &quot;--features&quot; &quot; llvm&quot; &quot;--manifest-path&quot; &quot;/Users/shepmaster/Projects/rust/src/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nrunning: &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;../aarch64-apple-darwin.json&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;4&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace compiler-builtins-c&quot; &quot;--manifest-path&quot; &quot;/Users/shepmaster/Projects/rust/library/test/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nrunning: &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;../aarch64-apple-darwin.json&quot; &quot;-Zdual-proc-macros&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;4&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;--release&quot; &quot;--features&quot; &quot; llvm&quot; &quot;--manifest-path&quot; &quot;/Users/shepmaster/Projects/rust/src/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\ncommand did not execute successfully: &quot;/Users/shepmaster/Projects/rust/silicon/cross/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;../aarch64-apple-darwin.json&quot; &quot;-Zdual-proc-macros&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;4&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;-v&quot; &quot;--release&quot; &quot;--features&quot; &quot; llvm&quot; &quot;--manifest-path&quot; &quot;/Users/shepmaster/Projects/rust/src/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\n</code></pre></div>",
        "id": 207858269,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598283194
    },
    {
        "content": "<p>My guess is that we'll see --target aarch64....json  being passe to Cargo, but cargo is passing it without .json to build scripts in $TARGET, which means autocfg will not (in general) work</p>",
        "id": 207858270,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283195
    },
    {
        "content": "<p>yeah that seems to be the case</p>",
        "id": 207858297,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283208
    },
    {
        "content": "<p>so, in general, this is a cargo \"bug\" or autocfg is buggy, depending on how you think about what $TARGET means</p>",
        "id": 207858339,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283227
    },
    {
        "content": "<p>Very strange, as doing this kind of thing is super common for embedded</p>",
        "id": 207858371,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598283240
    },
    {
        "content": "<p>well, I imagine that it's relatively rare for build scripts to do this</p>",
        "id": 207858515,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283301
    },
    {
        "content": "<p>afaik most build scripts don't invoke rustc, or if they do, they don't invoke it in a target-specific setting</p>",
        "id": 207858553,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283320
    },
    {
        "content": "<p>If you could file a cargo issue and cc me on it that'd be great</p>",
        "id": 207859296,
        "sender_full_name": "simulacrum",
        "timestamp": 1598283675
    },
    {
        "content": "<p>Sure. Any thoughts on how to make a repro? I was thinking something like</p>\n<div class=\"codehilite\"><pre><span></span><code># Same target as default, but in a file\nrustc +nightly -Z unstable-options --print target-spec-json &gt; my-target.json\n# Try to use it\ncargo +nightly build --target $PWD/my-target.json -Z build-std\n</code></pre></div>\n\n\n<p>but that seems to have issues compiling std.</p>",
        "id": 207860389,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598284320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span>  does this ring any bells?</p>\n<div class=\"codehilite\"><pre><span></span><code>% cargo +nightly build --target $PWD/my-target.json -Z build-std --verbose\n\n...\n\nerror[E0432]: unresolved imports `crate::sys_common::net::getsockopt`, `crate::sys_common::net::setsockopt`, `crate::sys_common::net::sockaddr_to_addr`\n --&gt; /Users/shep/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/std/src/sys/unix/net.rs:8:30\n  |\n8 | use crate::sys_common::net::{getsockopt, setsockopt, sockaddr_to_addr};\n  |                              ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^ no `sockaddr_to_addr` in `sys::unix::net`\n  |                              |           |\n  |                              |           no `setsockopt` in `sys::unix::net`\n  |                              no `getsockopt` in `sys::unix::net`\n\nerror[E0432]: unresolved import `crate::sys_common::net::LookupHost`\n  --&gt; /Users/shep/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/library/std/src/net/addr.rs:12:5\n   |\n12 | use crate::sys_common::net::LookupHost;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `LookupHost` in `sys::unix::net`\n\nerror[E0433]: failed to resolve: could not find `TcpStream` in `net_imp`\n</code></pre></div>",
        "id": 207861273,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598284789
    },
    {
        "content": "<p>Does <a href=\"https://github.com/rust-lang/rust/blob/80fb3f3139c7dee7f211964c6a0b3ccb04b83d5e/library/std/build.rs#L41\">https://github.com/rust-lang/rust/blob/80fb3f3139c7dee7f211964c6a0b3ccb04b83d5e/library/std/build.rs#L41</a> get run or the fallback <a href=\"https://github.com/rust-lang/rust/blob/80fb3f3139c7dee7f211964c6a0b3ccb04b83d5e/library/std/build.rs#L91\">https://github.com/rust-lang/rust/blob/80fb3f3139c7dee7f211964c6a0b3ccb04b83d5e/library/std/build.rs#L91</a>? What is the name of the target spec json file?</p>",
        "id": 207862237,
        "sender_full_name": "bjorn3",
        "timestamp": 1598285341
    },
    {
        "content": "<p>You mean in the (attempted) repro? <code>--target $PWD/my-target.json</code></p>",
        "id": 207862377,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598285408
    },
    {
        "content": "<p>Yes. Does it work if you name the file <code>$PWD/aarch64-apple-darwin.json</code> or something like that with the substring <code>apple-darwin</code>?</p>",
        "id": 207862470,
        "sender_full_name": "bjorn3",
        "timestamp": 1598285472
    },
    {
        "content": "<p>yeah, renaming it now. I guess I got stupidly lucky with respect to that when I started this whole thing</p>",
        "id": 207862505,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598285502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/petgraph.20wrong.20number.20of.20type.20arguments/near/207843682\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> How may I get debugging output from autocfg?</p>\n</blockquote>\n<p>The only real option at the moment is to find the <code>stderr</code> file that cargo captures from the build script, but that will only have error output from its compiler invocations. It would probably be a good idea to add an environment <code>DEBUG_AUTOCFG</code> that dumps more from <code>autocfg</code> itself...</p>",
        "id": 207862822,
        "sender_full_name": "cuviper",
        "timestamp": 1598285684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Yea, there are a bunch of places that look at the target name (that shouldn't).  I think in this case the JSON filename needs a substring like \"apple-darwin\" in it.</p>",
        "id": 207862823,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598285686
    },
    {
        "content": "<p>target-json issues are new to me, but there are similar issues with <code>RUSTFLAGS</code>: <a href=\"https://github.com/cuviper/autocfg/issues/15\">https://github.com/cuviper/autocfg/issues/15</a></p>",
        "id": 207862927,
        "sender_full_name": "cuviper",
        "timestamp": 1598285758
    },
    {
        "content": "<p>Yeah, I'm seeing something like this now in my smaller repro:</p>\n<div class=\"codehilite\"><pre><span></span><code>[repro 0.1.0] error[E0463]: can&#39;t find crate for `std`\n[repro 0.1.0]   |\n[repro 0.1.0]   = note: the `apple-darwin-x86_64-fork` target may not be installed\n[repro 0.1.0]\n[repro 0.1.0] error: aborting due to previous error\n</code></pre></div>\n\n\n<p>Trying to see if it's a Cargo or autocfg issue before I file something</p>",
        "id": 207863031,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598285812
    },
    {
        "content": "<p>If you want to make progress on fixing things, one place to start is <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/build.rs\">https://github.com/rust-lang/rust/blob/master/library/std/build.rs</a>, where it should be looking at CARGO_CFG_TARGET_* values instead of <code>TARGET</code>.</p>",
        "id": 207863048,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598285822
    },
    {
        "content": "<p>I posted <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/6#issuecomment-679237914\">https://github.com/rust-lang/wg-cargo-std-aware/issues/6#issuecomment-679237914</a> with a list of other places that are sensitive to the JSON filename.</p>",
        "id": 207865543,
        "sender_full_name": "Eric Huss",
        "timestamp": 1598287137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/cargo/issues/8646\">https://github.com/rust-lang/cargo/issues/8646</a></p>",
        "id": 207877443,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1598293098
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 207881619,
        "sender_full_name": "simulacrum",
        "timestamp": 1598295063
    }
]