[
    {
        "content": "<p>Anyone know how I can turn off  local thin LTO during a stage0 rustc build, as in <code>./x.py build --stage 0 compiler/rustc</code>?  I've tried adding this to the root <code>Cargo.toml</code>, but to no avail:</p>\n<div class=\"codehilite\"><pre><span></span><code>[profile.release]\nlto = &quot;off&quot;\n</code></pre></div>\n<p>Just wanting to do this for profiling purposes and my own edification.</p>",
        "id": 226269033,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613252298
    },
    {
        "content": "<p>probably bootstrap is setting it:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rg lto src/bootstrap/\nsrc/bootstrap/dist.rs\n165:    let target_tools = [compiler, &quot;ld.exe&quot;, &quot;dlltool.exe&quot;, &quot;libwinpthread-1.dll&quot;];\n\nsrc/bootstrap/builder.rs\n1485:            let limit = match self.config.rust_thin_lto_import_instr_limit {\n\nsrc/bootstrap/native.rs\n201:        if builder.config.llvm_thin_lto {\n\nsrc/bootstrap/config.rs\n92:    pub llvm_thin_lto: bool,\n135:    pub rust_thin_lto_import_instr_limit: Option&lt;u32&gt;,\n413:    thin_lto: Option&lt;bool&gt;,\n498:    thin_lto_import_instr_limit: Option&lt;u32&gt;,\n769:            set(&amp;mut config.llvm_thin_lto, llvm.thin_lto);\n804:                check_ci_llvm!(llvm.thin_lto);\n828:            if config.llvm_thin_lto {\n877:            config.rust_thin_lto_import_instr_limit = rust.thin_lto_import_instr_limit;\n</code></pre></div>",
        "id": 226269225,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613252545
    },
    {
        "content": "<p>Doesn't appear to be set in there. I'm probably misunderstanding how the Cargo.toml setting influences things between workspaces, dependencies, and so on.</p>",
        "id": 226269982,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613253489
    },
    {
        "content": "<p>maybe try the Cargo.toml for the rustc binary. I'm not sure if it works, it might complain due to workspaces but then should tell you where else to look</p>",
        "id": 226271673,
        "sender_full_name": "The 8472",
        "timestamp": 1613254228
    },
    {
        "content": "<p>Yeah, I was misunderstanding. <code>lto = \"off\"</code> applies to the workspace members, but not to the dependencies. Trying to disable it for dependencies in a <code>[profile.release.package.\"*\"]</code> section yields:</p>\n<div class=\"codehilite\"><pre><span></span><code>`lto` may not be specified in a `package` profile\n</code></pre></div>",
        "id": 226271791,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613254298
    },
    {
        "content": "<p>So I had disabled local thin lto, just not to the degree I expected.</p>",
        "id": 226271847,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613254348
    },
    {
        "content": "<p>But that's fine, disabling it for workspace members is good enough for my purposes. Thanks all.</p>",
        "id": 226271875,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613254410
    },
    {
        "content": "<p>I don't quite understand yet why the lto setting in <code>[profile.release]</code> doesn't apply to dependencies while things like opt-level do though.</p>",
        "id": 226272119,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613254727
    },
    {
        "content": "<p>I guess it makes sense for regular fat and thin LTO. Those would only be applied to the final binary, so it doesn't make sense to apply them to dependency crates.</p>\n<p>But for local thin LTO, it does make sense to be able to apply it to dependency crates. So it may be considered a bug that <code>lto = \"off\"</code> doesn't disable it in dependencies. Or there's a hole in the configurability in not being able to set it to \"off\" in a package profile. Or both.</p>",
        "id": 226272971,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613256021
    },
    {
        "content": "<p>Hm, I may have misunderstood something about how thin-local LTO works. I wasn't thinking it matters much for an rlib, but looking a little closer, it seems that it might.  Currently <code>lto=\"off\"</code> is only passed to the final linking stage for a binary.  I'll need to investigate more, but thanks for bringing it up!</p>",
        "id": 226277159,
        "sender_full_name": "Eric Huss",
        "timestamp": 1613262569
    },
    {
        "content": "<p>Sure. I could also be totally misunderstanding the situation. :)</p>\n<p>By the way, just created <a href=\"https://github.com/rust-lang/cargo/issues/9171\">https://github.com/rust-lang/cargo/issues/9171</a></p>",
        "id": 226277534,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1613263270
    }
]