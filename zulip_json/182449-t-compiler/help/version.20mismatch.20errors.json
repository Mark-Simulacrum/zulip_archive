[
    {
        "content": "<p>Why are version mismatch conflicts in rust sometimes so confusing?</p>\n<p>I just had the case where a friend used the most recent versions of both <code>actix-web</code> and <code>sqlx</code>. They have a common dependency on <code>actix-rt</code> (an async runtime) and the program compiled, but panicked on the first <code>.await</code>, with \"no active reactor is running\". The Problem was that <code>sqlx</code> depends on a more recent version of <code>actix-rt</code>, so we either need to downgrade <code>sqlx</code> or upgrade <code>actix-web</code> to the beta version., in order to get it working.<br>\nFiguring this out took us quite some time staring at the screen and reading non-helpful error messages.</p>\n<p>Is there a way to catch version mismatch errors more easily? Especially in the case that you don't know that it is a version mismatch which is causing the problem. Is it possible to teach the compiler to report better on that?</p>",
        "id": 259090700,
        "sender_full_name": "Johann Hemmann [he, him, his]",
        "timestamp": 1635252611
    },
    {
        "content": "<p>Most of the time it is completely valid to have multiple versions of the same crate inside a program. When a crate has global state, like actix-rt does,  it may become a problem, but the compiler can't know if it will actually become a problem or not.</p>",
        "id": 259109372,
        "sender_full_name": "bjorn3",
        "timestamp": 1635260334
    },
    {
        "content": "<p>You can use <code>cargo tree --duplicates</code> to list all crates that exist in multiple versions.</p>",
        "id": 259109694,
        "sender_full_name": "bjorn3",
        "timestamp": 1635260428
    },
    {
        "content": "<p>Thank you for your input :)</p>",
        "id": 259891921,
        "sender_full_name": "Johann Hemmann [he, him, his]",
        "timestamp": 1635786691
    }
]