[
    {
        "content": "<p>Hello ! Sorry if this is not the right place to ask this kind of question (or if my question is just stupid). I was wondering how does the compiler detect what type the a variable is / how does it choose which function to call.<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=8ab2e916373437612dc5c2e4f3e38e7f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=8ab2e916373437612dc5c2e4f3e38e7f</a><br>\nDoes it :</p>\n<ul>\n<li>register some kind of constraint when it infers the type for the function call expression such that if the type is known to be u8, the type of the parameter is also immediately constrained to be u16 ?</li>\n<li>does it start by assuming the type of the parameter is u8, check if there are any type errors later, and if there is, roll back to the call and assume the parameter is u16 ?</li>\n<li>do something else entirely ?</li>\n</ul>\n<p>I couldn't find in the source code where this is done.</p>\n<p>Thanks in advance !</p>",
        "id": 271542147,
        "sender_full_name": "Teln0",
        "timestamp": 1644566706
    },
    {
        "content": "<p>It does this by generating and solving (unifying) constraints</p>",
        "id": 271544263,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644568230
    }
]