[
    {
        "content": "<p>I must be missing something, but I can't call this public function on <code>ConstKind</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/consts/kind/enum.ConstKind.html#method.eval\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/consts/kind/enum.ConstKind.html#method.eval</a> I don't understand though, the function <em>is</em> <code>pub</code>, and has been for over a year...</p>",
        "id": 259377294,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422600
    },
    {
        "content": "<p>Any idea what I'm doing wrong?</p>",
        "id": 259377335,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422623
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 259377549,
        "sender_full_name": "bjorn3",
        "timestamp": 1635422716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0599]: no method named `eval` found for enum `ConstantKind` in the current scope\n  --&gt; creusot/src/translation/constant.rs:46:25\n   |\n46 |             let ck = ck.eval(ctx.tcx, ctx.tcx.param_env(id));\n   |                         ^^^^ method not found in `ConstantKind&lt;&#39;tcx&gt;`\n</code></pre></div>",
        "id": 259377776,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422838
    },
    {
        "content": "<p><code>ConstKind</code> != <code>ConstantKind</code></p>",
        "id": 259377805,
        "sender_full_name": "bjorn3",
        "timestamp": 1635422858
    },
    {
        "content": "<p>omfg I just realized that as I posted the error</p>",
        "id": 259377822,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422870
    },
    {
        "content": "<p>the whole constant types are so confusing</p>",
        "id": 259377831,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422880
    },
    {
        "content": "<p><code>Const</code>, <code>Constant</code>, <code>ConstKind</code> <code>ConstantKind</code> etc...</p>",
        "id": 259377889,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422893
    },
    {
        "content": "<p>Yeah, it is.</p>",
        "id": 259377890,
        "sender_full_name": "bjorn3",
        "timestamp": 1635422893
    },
    {
        "content": "<p>I just want to know what's inside a constant :(</p>",
        "id": 259377911,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422903
    },
    {
        "content": "<p>I had to puzzle a lot for cg_clif with this too...</p>",
        "id": 259377937,
        "sender_full_name": "bjorn3",
        "timestamp": 1635422920
    },
    {
        "content": "<p>the worst part is that I need to <em>undo</em> the whole <code>Const</code> thing...</p>",
        "id": 259378075,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635422997
    },
    {
        "content": "<p>I want to recover whatever expression is in there</p>",
        "id": 259378134,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423013
    },
    {
        "content": "<p>For <code>ConstantKind::Ty</code> you can handle the <code>ConstKind::Value</code> the same as <code>ConstantKind::Val</code>. For <code>ConstKind::Unevaluated</code> you need <code>tcx.const_eval_resolve</code>. The rest of the <code>ConstKind</code> variants should be unreachable inside a codegen backend after monomorphization.</p>",
        "id": 259378372,
        "sender_full_name": "bjorn3",
        "timestamp": 1635423138
    },
    {
        "content": "<p>I'm not after monomorphization</p>",
        "id": 259378454,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423192
    },
    {
        "content": "<p>I'm working at MIR level</p>",
        "id": 259378463,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423196
    },
    {
        "content": "<p>MIR can be monomorphized.</p>",
        "id": 259378485,
        "sender_full_name": "bjorn3",
        "timestamp": 1635423209
    },
    {
        "content": "<p>yea but I'm not there nor do I want to be</p>",
        "id": 259378496,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423219
    },
    {
        "content": "<p>I'm translating from polymorphic mir for verification</p>",
        "id": 259378535,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423239
    },
    {
        "content": "<p>My challenge is to take a <code>Constant</code> representing something like <code>Some(true)</code> and turn it <em>back</em> into <code>Some(true)</code> from whatever 'bits' it evaluates to</p>",
        "id": 259378630,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423275
    },
    {
        "content": "<p>Polymorphic MIR also has <code>ConstKind::Param</code> to handle.</p>",
        "id": 259378638,
        "sender_full_name": "bjorn3",
        "timestamp": 1635423277
    },
    {
        "content": "<p>Constants may not be evaluatable until after monomorphization.</p>",
        "id": 259378883,
        "sender_full_name": "bjorn3",
        "timestamp": 1635423402
    },
    {
        "content": "<p>yea, I'm ruling that out for now, but eventually I'll need to supprot it</p>",
        "id": 259378886,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Inaccessible.20public.20API.3F/near/259378883\">said</a>:</p>\n<blockquote>\n<p>Constants may not be evaluatable until after monomorphization.</p>\n</blockquote>\n<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 259378898,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423416
    },
    {
        "content": "<p>i guess that means eventually I'll have to write a partial evaluator for MIRI</p>",
        "id": 259378984,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423467
    },
    {
        "content": "<p>whatever that means</p>",
        "id": 259378991,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423470
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>has a const representing the result of <code>std::mem::size_of::&lt;T&gt;()</code>.</p>",
        "id": 259379095,
        "sender_full_name": "bjorn3",
        "timestamp": 1635423507
    },
    {
        "content": "<p>oh wait awesome... I <strong>don't</strong> want to evaluate the constant at <em>all</em></p>",
        "id": 259379133,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423525
    },
    {
        "content": "<p>I actually just want to translate the <code>DefId</code> of the constant and use that in my translation</p>",
        "id": 259379165,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Inaccessible.20public.20API.3F/near/259379095\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>has a const representing the result of <code>std::mem::size_of::&lt;T&gt;()</code>.</p>\n</blockquote>\n<p>yea, granted something like <code>std::mem::size_of</code> needs to be built-in to my tool</p>",
        "id": 259379199,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423567
    },
    {
        "content": "<p>but I understand your general point</p>",
        "id": 259379216,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423574
    },
    {
        "content": "<p>that's not really a problem for me apart from 'intrinsics'</p>",
        "id": 259379268,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423600
    },
    {
        "content": "<p>anways, thanks for pointing out my mistake!</p>",
        "id": 259379481,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635423721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> has marked this topic as resolved.</p>",
        "id": 259379520,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635423725
    }
]