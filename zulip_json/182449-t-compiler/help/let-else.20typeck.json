[
    {
        "content": "<p>I am working on implementing let-else. Should I expand with <code>let ! =</code> or add a special case to <code>check_match</code> in typeck? This is <em>very</em> similar to <a href=\"https://github.com/rust-lang/rust/issues/60707\">#60707</a>. I know <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has said \"Do not use desugaring information to affect the semantics, only adjust diagnostics.\", and I can see the appeal of that, but at the same time I wonder - adding a restriction to typeck does not change semantics of the HIR for correct code. Isn't it better to use a HIR structure that is minimal and correct and allow typeck to be responsible for desugaring-specific type restrictions? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span></p>",
        "id": 247153100,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1627259568
    },
    {
        "content": "<p>I think <code>if</code>s are no longer lowered to <code>match</code> now?</p>",
        "id": 247262797,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627333578
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html#variant.If\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html#variant.If</a></p>",
        "id": 247263595,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627333804
    },
    {
        "content": "<p>You're right. I think the same approach is used for <code>while let</code> and that's why I found this <a href=\"https://github.com/rust-lang/rust/blob/fc24bcead1d401ae061538d011e4a319c4195b56/compiler/rustc_typeck/src/check/_match.rs#L78\">FIXME</a>.</p>",
        "id": 247264036,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1627333947
    },
    {
        "content": "<p>(You probably meant <code>while</code>)</p>",
        "id": 247273760,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627339695
    },
    {
        "content": "<p>I think that ideally the desugar would be enough that HIR/typeck wouldn't need to know anything new, the same way they don't know about things like <code>?</code>.</p>\n<p>Whether that's practical, though, I don't know.  My naïve guess would be that either it's a pure desugar, or it's a new thing in HIR (and thus typeck too) and not a desugar at all.</p>",
        "id": 247273936,
        "sender_full_name": "scottmcm",
        "timestamp": 1627339849
    },
    {
        "content": "<p>Another idea is to use a type ascription instead of a <code>let</code> statement, though I'm not sure it would work, I don't know the exact semantics of type ascriptions</p>",
        "id": 247274757,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627340564
    },
    {
        "content": "<p>FWIW type ascriptions in HIR are <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html#variant.Type\"><code>ExprKind::Type</code></a></p>",
        "id": 247274831,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1627340627
    }
]