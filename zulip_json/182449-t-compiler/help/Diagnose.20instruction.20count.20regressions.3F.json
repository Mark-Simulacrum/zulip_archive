[
    {
        "content": "<p>I have two PRs with instruction count regressions. Can anyone offer tips for diagnosing these? Is there a way to narrow down where in the code more instructions are generated?</p>",
        "id": 252527895,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631133114
    },
    {
        "content": "<p>if they're big then the timing breakdown when you click on the results can be informative</p>",
        "id": 252529795,
        "sender_full_name": "The 8472",
        "timestamp": 1631133914
    },
    {
        "content": "<p>If they're small then running the benchmarks under perf locally and diff the results can work, but that's very fickle due to inlining changes, PGO etc. I have had success with that but also \"i don't know, inlining probably changed\" non-results.</p>",
        "id": 252530171,
        "sender_full_name": "The 8472",
        "timestamp": 1631134078
    },
    {
        "content": "<p>they are pretty small<br>\n<a href=\"https://perf.rust-lang.org/compare.html?start=a3956106d12cebec91be0637759e29ab6908b4cd&amp;end=c2a408840ad18f74280805535f0b7193528ff3df&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=a3956106d12cebec91be0637759e29ab6908b4cd&amp;end=c2a408840ad18f74280805535f0b7193528ff3df&amp;stat=instructions:u</a><br>\n<a href=\"https://perf.rust-lang.org/compare.html?start=a49e38e672c60da788360e088f00ad12353e3913&amp;end=de42550d0ac525f44ec79300a1cb349ade181c1a&amp;stat=instructions:u\">https://perf.rust-lang.org/compare.html?start=a49e38e672c60da788360e088f00ad12353e3913&amp;end=de42550d0ac525f44ec79300a1cb349ade181c1a&amp;stat=instructions:u</a></p>",
        "id": 252530239,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631134095
    },
    {
        "content": "<p>What about a MIR dump of a whole crate?</p>",
        "id": 252530434,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631134175
    },
    {
        "content": "<p>3% for incr-patched isn't small. style-servo-debug details seem to be clear enough, it's spending more time in llvm. comparing IR or llvm-lines can help</p>",
        "id": 252530482,
        "sender_full_name": "The 8472",
        "timestamp": 1631134188
    },
    {
        "content": "<p>Sometimes that can be fine because llvm just sees more that it can optimize. do you have runtime benchmarks that might justify the compile time regression?</p>",
        "id": 252530795,
        "sender_full_name": "The 8472",
        "timestamp": 1631134316
    },
    {
        "content": "<p>I posted a local benchmark in the pr <a href=\"https://github.com/rust-lang/rust/pull/83302\">https://github.com/rust-lang/rust/pull/83302</a></p>",
        "id": 252531327,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631134560
    },
    {
        "content": "<p>I always wonder about the helpfulness of the perf run.</p>",
        "id": 252531391,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631134572
    },
    {
        "content": "<p>On one hand we do want fast compilation, but on the other hand most of time we care more about runtime of the compiled binary.</p>",
        "id": 252531429,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631134597
    },
    {
        "content": "<p>I've seen quite a few cases where only LLVM time regresses.</p>",
        "id": 252531619,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631134691
    },
    {
        "content": "<p>Those benches don't seem informative. Anything smaller than 1.5x improvement is suspicious imo because they measure wall-time so turbo-clocks or even minor changes in compilation can change the results.</p>",
        "id": 252531630,
        "sender_full_name": "The 8472",
        "timestamp": 1631134697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> compile time regressions can be acceptable if you get something significant for them in exchange, e.g. new features, critical bug fixes or runtime performance.</p>",
        "id": 252531814,
        "sender_full_name": "The 8472",
        "timestamp": 1631134786
    },
    {
        "content": "<p>but especially the last point needs to be demonstrated</p>",
        "id": 252531890,
        "sender_full_name": "The 8472",
        "timestamp": 1631134804
    },
    {
        "content": "<p>Do we have a tool to measure that though?</p>",
        "id": 252531974,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631134827
    },
    {
        "content": "<p>well, sometimes library improvements that improve runtime also improve compiler runtime if it's heavily used in the compiler. if that's not the case you need benchmarks and we only have <code>#[bench]</code> for that out of the box. you could write external benchmarks with a crate that does instruction/cycle counts.</p>",
        "id": 252532350,
        "sender_full_name": "The 8472",
        "timestamp": 1631134937
    },
    {
        "content": "<p>There has been talk about adding runtime benchmarks in <a class=\"stream\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance\">#t-compiler/performance</a> but idk how concrete the plans are.</p>",
        "id": 252532455,
        "sender_full_name": "The 8472",
        "timestamp": 1631134980
    },
    {
        "content": "<p>oh so there actually are two changes in that PR? one that changes the write! impl and one that changes the macro expansion? if the expansion makes things worse without a benefit then is there any reason to not limit the PR to the former?</p>",
        "id": 252534012,
        "sender_full_name": "The 8472",
        "timestamp": 1631135663
    },
    {
        "content": "<p>Maybe. Changing the write impl made <code>Arguments</code> more unsafe, so <code>Arguments::new_v1</code> was made unsafe, and then <code>format_args!</code> was changed to add an unsafe block.</p>",
        "id": 252534431,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631135759
    },
    {
        "content": "<p>So maybe we can get away without <code>unsafe</code> since it's already an unstable feature.</p>",
        "id": 252534758,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631135899
    },
    {
        "content": "<p>you could at least do a perf run in isolation to see what the impact is on its own</p>",
        "id": 252534816,
        "sender_full_name": "The 8472",
        "timestamp": 1631135930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360405\">Cameron Steffen</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Diagnose.20instruction.20count.20regressions.3F/near/252534758\">said</a>:</p>\n<blockquote>\n<p>So maybe we can get away without <code>unsafe</code> since it's already an unstable feature.</p>\n</blockquote>\n<p>Ideally we shouldn't rely on feature gating for safety</p>",
        "id": 252534847,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631135952
    },
    {
        "content": "<p>I did that here <a href=\"https://github.com/rust-lang/rust/pull/88571\">https://github.com/rust-lang/rust/pull/88571</a></p>",
        "id": 252534877,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631135962
    },
    {
        "content": "<p>I meant the <code>write!</code> changes</p>",
        "id": 252535125,
        "sender_full_name": "The 8472",
        "timestamp": 1631136079
    },
    {
        "content": "<p>well that is a test of reverting the macro change. I didn't do a run testing just the write impl change.</p>",
        "id": 252535129,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631136079
    },
    {
        "content": "<p>ya...</p>",
        "id": 252535142,
        "sender_full_name": "Cameron Steffen",
        "timestamp": 1631136086
    }
]