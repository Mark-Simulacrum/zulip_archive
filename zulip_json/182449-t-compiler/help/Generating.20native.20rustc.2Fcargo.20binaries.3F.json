[
    {
        "content": "<p><code>mips64-unknown-linux-muslabi64</code> is a Tier 2 tuple (w/std), and I am creating a custom tuple based off of it.  i generate the stage0/stage1/stage2 <code>dist</code> packages, but a MIPS64 rustc/cargo host tools never get generated, just the x86_64 binaries able to cross-compile. </p>\n<p>I'm missing a build flag somewhere on the compile (I'm not using <code>rustup</code>) and I'm not having any luck in the Target section (<a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support.html\">https://doc.rust-lang.org/nightly/rustc/platform-support.html</a>).  Any help would be appreciated!</p>",
        "id": 264926365,
        "sender_full_name": "Grommish",
        "timestamp": 1639516442
    },
    {
        "content": "<p>Is it just a matter of changing the <code>--host</code>from x86_64 to the Mips64 target?  I set --target, --host, --build.</p>",
        "id": 264927106,
        "sender_full_name": "Grommish",
        "timestamp": 1639516853
    },
    {
        "content": "<p>You don't need to set --build (it needs to be a triple compatible with the system you are currently building rustc on and will default to such a triple) You should set --host and --target to mips64-unknown-linux-muslabi64. --host indicates for which triple rustc is built and --target for which triple the standard library is built.</p>",
        "id": 264931387,
        "sender_full_name": "bjorn3",
        "timestamp": 1639518716
    },
    {
        "content": "<p>and --build is the architecture of the build machine, correct?</p>",
        "id": 264952734,
        "sender_full_name": "Grommish",
        "timestamp": 1639530752
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Building stage1 compiler artifacts (x86_64-unknown-linux-gnu -&gt; mips64-openwrt-linux-musl)\n   Compiling unicode-xid v0.2.2\n   Compiling cfg-if v0.1.10\n   Compiling lazy_static v1.4.0\n...\n   Compiling chalk-derive v0.55.0\n   Compiling chalk-ir v0.55.0\n   Compiling tracing v0.1.25\n   Compiling rustc_index v0.0.0 (/home/grommish/openwrt/build_dir/target-mips64_octeonplus_64_musl/rust-1.56.1/compiler/rustc_index)\n   Compiling rustc_data_structures v0.0.0 (/home/grommish/openwrt/build_dir/target-mips64_octeonplus_64_musl/rust-1.56.1/compiler/rustc_data_structures)\nerror[E0531]: cannot find unit struct, unit variant or constant `ENOTSUP` in crate `libc`\n  --&gt; compiler/rustc_data_structures/src/flock.rs:59:57\n   |\n59 |                 matches!(err.raw_os_error(), Some(libc::ENOTSUP) | Some(libc::ENOSYS))\n   |                                                         ^^^^^^^ not found in `libc`\n\nFor more information about this error, try `rustc --explain E0531`.\nerror: could not compile `rustc_data_structures` due to previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\nBuild completed unsuccessfully in 3:20:47\n</code></pre></div>\n<p><code>compiler/rustc_data_structures/src/flock.rs:59:57</code></p>\n<div class=\"codehilite\"><pre><span></span><code>            pub fn error_unsupported(err: &amp;io::Error) -&gt; bool {\n                matches!(err.raw_os_error(), Some(libc::ENOTSUP) | Some(libc::ENOSYS))\n            }\n</code></pre></div>\n<p>Any ideas?</p>",
        "id": 265055593,
        "sender_full_name": "Grommish",
        "timestamp": 1639593749
    },
    {
        "content": "<p>The libc crate will probably need to be changed to add the <code>ENOTSUP</code> constant for mips64 musl linux.</p>",
        "id": 265056372,
        "sender_full_name": "bjorn3",
        "timestamp": 1639594109
    },
    {
        "content": "<p>Ok, I'll post an issue on it.  Thanks!</p>\n<p>Edit: <a href=\"https://github.com/rust-lang/rust/issues/91976\">https://github.com/rust-lang/rust/issues/91976</a></p>",
        "id": 265057243,
        "sender_full_name": "Grommish",
        "timestamp": 1639594478
    },
    {
        "content": "<p>Ok, MIPS64 will be checked, in the mean time, I moved to <code>aarch64</code>..    Is this a rust or a llvm issue?</p>\n<div class=\"codehilite\"><pre><span></span><code>(/home/grommish/openwrt/build_dir/target-aarch64_cortex-a53_musl/rust-1.56.1/compiler/rustc_driver)\nerror: linking with `aarch64-openwrt-linux-musl-gcc` failed: exit status: 1\n...\n  = note: /home/grommish/openwrt/staging_dir/toolchain-aarch64_cortex-a53_gcc-10.3.0_musl/lib/gcc/aarch64-openwrt-linux-musl/10.3.0/../../../../aarch64-openwrt-linux-musl/bin/ld: cannot find -lLLVM-13-rust-1.56.1-nightly\n          collect2: error: ld returned 1 exit status\n\n\nerror: could not compile `rustc_driver` due to previous error\n</code></pre></div>\n<p>(full fail string <a href=\"/user_uploads/4715/SLZuvh3BjBfRm-r6FddZNsMS/aarch64.txt\">aarch64.txt</a> )</p>\n<p><code>LLVM-13-rust-1.56.1-nightly</code> - What generates this?</p>",
        "id": 265142514,
        "sender_full_name": "Grommish",
        "timestamp": 1639654299
    },
    {
        "content": "<p>That is llvm itself. The rust build system should have built it for you.</p>",
        "id": 265142777,
        "sender_full_name": "bjorn3",
        "timestamp": 1639654469
    },
    {
        "content": "<p>Well, the <code>build/aarch64-openwrt-linux-musl/llvm</code> directory seems to have built (<code>llvm-finished-building</code> is present), but that file isn't in there.</p>",
        "id": 265143197,
        "sender_full_name": "Grommish",
        "timestamp": 1639654748
    },
    {
        "content": "<p>Silly question.  rust-lang/libc was updated, but that is pulled internally it seems.  So, how/when does this get updated?   I'm using <code>--enable-locked-deps --enable-vendor</code> to see if that will force the update, but it doesn't seem to.  Suggestions on how to force the update, or is it just a matter of waiting for the next tagged release?</p>",
        "id": 265331513,
        "sender_full_name": "Grommish",
        "timestamp": 1639762427
    },
    {
        "content": "<p>You can do <code>cargo update -p libc</code> once a version with the fix gets released.</p>",
        "id": 265332755,
        "sender_full_name": "bjorn3",
        "timestamp": 1639762951
    },
    {
        "content": "<p>Before that you can add an entry to the <code>[patch.crates-io]</code> section in the root <code>Cargo.toml</code> referencing a local checkout of libc.</p>",
        "id": 265332928,
        "sender_full_name": "bjorn3",
        "timestamp": 1639763037
    },
    {
        "content": "<p>So, like this?</p>\n<div class=\"codehilite\"><pre><span></span><code>[patch.&quot;https://github.com/rust-lang/libc&quot;]\nlibc = { path = &quot;~/libc&quot; }\n</code></pre></div>",
        "id": 265397236,
        "sender_full_name": "Grommish",
        "timestamp": 1639809963
    },
    {
        "content": "<p>More like</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[patch.crates-io]</span>\n<span class=\"n\">libc</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">\"/path/to/libc\"</span> <span class=\"p\">}</span>\n</code></pre></div>\n<p>I don't think <code>~</code> works in these paths. Also I think toml doesn't allow multiple sections, so you will have to place libc line just below the existing <code>[patch.crates-io]</code>.</p>",
        "id": 265408396,
        "sender_full_name": "bjorn3",
        "timestamp": 1639819907
    },
    {
        "content": "<p>Ok, I'm stuck.. I'm getting </p>\n<div class=\"codehilite\"><pre><span></span><code>warning: Patch `libc v0.2.112 (/home/grommish/libc)` was not used in the crate graph.\nCheck that the patched package version and available features are compatible\nwith the dependency requirements. If the patch has a different version from\nwhat is locked in the Cargo.lock file, run `cargo update` to use the new\nversion. This may also occur with an optional dependency that is not enabled.\n</code></pre></div>\n<p>Except, I can't run <code>cargo update</code> because <code>cargo</code> hasn't been built yet.</p>\n<p>I can temporarily patch <code>Cargo.lock</code> for the revised version in my local repo for testing until it's updated, but I don't know how to generate the checksum hash (or what to generate it against).</p>\n<div class=\"codehilite\"><pre><span></span><code>[[package]]\nname = &quot;libc&quot;\nversion = &quot;0.2.108&quot;\nsource = &quot;registry+https://github.com/rust-lang/crates.io-index&quot;\nchecksum = &quot;8521a1b57e76b1ec69af7599e75e38e7b7fad6610f037db8c79b127201b5d119&quot;\ndependencies = [\n &quot;rustc-std-workspace-core&quot;,\n]\n</code></pre></div>",
        "id": 265415316,
        "sender_full_name": "Grommish",
        "timestamp": 1639829789
    },
    {
        "content": "<p>Oh, these are just tag tarballs?</p>\n<div class=\"codehilite\"><pre><span></span><code>--- a/Cargo.lock\n+++ b/Cargo.lock\n@@ -1905,9 +1905,9 @@\n\n [[package]]\n name = &quot;libc&quot;\n-version = &quot;0.2.108&quot;\n+version = &quot;0.2.112&quot;\n source = &quot;registry+https://github.com/rust-lang/crates.io-index&quot;\n-checksum = &quot;8521a1b57e76b1ec69af7599e75e38e7b7fad6610f037db8c79b127201b5d119&quot;\n+checksum = &quot;465130257246408cf32675383c82ecc40f2065ce987e4242b6c8b27e9c703c69&quot;\n dependencies = [\n  &quot;rustc-std-workspace-core&quot;,\n ]\n</code></pre></div>\n<p>So, this should be correct?</p>\n<p>Sorry for all the questions.  At this point in the development, it's taking anywhere between 2.5-5 hours per build, so I'm really trying to cut down on test building when possible :D</p>",
        "id": 265415750,
        "sender_full_name": "Grommish",
        "timestamp": 1639830419
    },
    {
        "content": "<blockquote>\n<p>warning: Patch <code>libc v0.2.112 (/home/grommish/libc)</code> was not used in the crate graph.</p>\n</blockquote>\n<p>This is normal for <em>some</em> commands because it patches for all crates but not all crates use libc. Hence a warning but not an error. It shouldn't occur while building the std crate since that depends on libc.</p>",
        "id": 265416005,
        "sender_full_name": "The 8472",
        "timestamp": 1639830838
    },
    {
        "content": "<p>And you can use the host cargo to update it, no need to build one first since the crate resolution isn't platform-dependent.</p>",
        "id": 265416132,
        "sender_full_name": "The 8472",
        "timestamp": 1639830998
    },
    {
        "content": "<p>I'm incorporating <code>rust-lang</code> into the OpenWrt build system, so I can't use host <code>rust-lang</code>, or <code>rustup</code>.  I'm building from source stage0-2 for the host (to cross compile within the fakeroot) and now working on native rustc/cargo for on-device.  It also means I've got to do everything thru <code>./configure</code> and a few other guidelines.  It's why it's being so stubborn in places;</p>",
        "id": 265416245,
        "sender_full_name": "Grommish",
        "timestamp": 1639831150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Generating.20native.20rustc.2Fcargo.20binaries.3F/near/265416005\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>warning: Patch <code>libc v0.2.112 (/home/grommish/libc)</code> was not used in the crate graph.</p>\n</blockquote>\n<p>This is normal for <em>some</em> commands because it patches for all crates but not all crates use libc. Hence a warning but not an error. It shouldn't occur while building the std crate since that depends on libc.</p>\n</blockquote>\n<p><code>[patch.crates-io]</code> patches it for the crate graph. It doesn't matter that some crates don't use it. For as long as any crate in the workspace uses it, this warning won't be given.</p>",
        "id": 265416259,
        "sender_full_name": "bjorn3",
        "timestamp": 1639831190
    },
    {
        "content": "<p>But the warning can be ignored?</p>",
        "id": 265416319,
        "sender_full_name": "Grommish",
        "timestamp": 1639831222
    },
    {
        "content": "<p>It indicates that the patch wasn't applied.</p>",
        "id": 265416325,
        "sender_full_name": "bjorn3",
        "timestamp": 1639831233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> hrrm, sure? I'm pretty sure I have seen that warning when overriding smallvec locally in an experiment and then built std which didn't use smallvec or something like that.</p>",
        "id": 265416363,
        "sender_full_name": "The 8472",
        "timestamp": 1639831311
    },
    {
        "content": "<p>I'm building all packages via <code>x.py dist</code> call, if that makes a difference</p>",
        "id": 265416408,
        "sender_full_name": "Grommish",
        "timestamp": 1639831351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Generating.20native.20rustc.2Fcargo.20binaries.3F/near/265416363\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> hrrm, sure? I'm pretty sure I have seen that warning when overriding smallvec locally in an experiment and then built std which didn't use smallvec or something like that.</p>\n</blockquote>\n<p>The version of the smallvec you patched it with probably didn't match the one in <code>Cargo.lock</code>.</p>",
        "id": 265416409,
        "sender_full_name": "bjorn3",
        "timestamp": 1639831362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> the patch in <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Generating.20native.20rustc.2Fcargo.20binaries.3F/near/265415750\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Generating.20native.20rustc.2Fcargo.20binaries.3F/near/265415750</a> looks like it should be fine I think.</p>",
        "id": 265416433,
        "sender_full_name": "bjorn3",
        "timestamp": 1639831411
    },
    {
        "content": "<p>Appreciate it.. it's only temp so I can continue testing until the next Cargo.lock update in <code>rust-lang/rust</code> gets rolled out that includes it.</p>",
        "id": 265416485,
        "sender_full_name": "Grommish",
        "timestamp": 1639831489
    },
    {
        "content": "<p>Fooled again by <code>build.extended</code>!  <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Instead of overriding the <code>Cargo.toml</code> or the <code>Cargo.lock</code>, I did enable <code>build.vendor</code> to force it to get the crates upstream.  Granted, in the future I'm sure I'll need to know how to locate a local repo crate, but since the PR was accepted so quickly, I should be able to just ride the system.</p>\n<p>I am completely unfamiliar with rust/rust-lang/cargo/etc, but I'm not trying to use it, just set it up setup for the far more knowledgeable folks to use.  The fact I can't use the exceptional rust-lang tools to make it easier just is par for the course :)</p>",
        "id": 265479842,
        "sender_full_name": "Grommish",
        "timestamp": 1639919818
    },
    {
        "content": "<p>Ok.. On the CMake portion of the source build.  Is there a way to not have it use <code>$(nproc)</code> to build the LLVM?  Currently, it defaults to:<br>\n<code>running: \"cmake\" \"--build\" \".\" \"--target\" \"install\" \"--config\" \"Release\" \"--\" \"-j\" \"8\"</code></p>\n<p>I build with <code>-j4</code> or <code>-j5</code> on the OpenWrt build so I can continue to use the system while it builds. (it's a i7-3xxxm 4 core/8 thread that WSL2 sees as Logical Processors).</p>\n<p>Since everything is done via <code>x.py</code>, is there a way to pass the argument to LLVM's CMake?</p>\n<p>Aside from:</p>\n<div class=\"codehilite\"><pre><span></span><code>        --llvm-cflags=VAL              build LLVM with these extra compiler flags\n        --llvm-cxxflags=VAL            build LLVM with these extra compiler flags\n        --llvm-ldflags=VAL             build LLVM with these extra linker flags\n</code></pre></div>\n<p>Since I am going to guess that adding multiple <code>-j</code> defines would be.. bad?</p>",
        "id": 265480121,
        "sender_full_name": "Grommish",
        "timestamp": 1639920170
    },
    {
        "content": "<p>You can pass <code>-j</code> to <code>./x.py</code>. I would expect it to be forwarded to <code>cmake</code>.</p>",
        "id": 265480713,
        "sender_full_name": "bjorn3",
        "timestamp": 1639921180
    },
    {
        "content": "<p>I thought I had tried that, but I will test again because I can't be sure.  It could be that I'm just passing it to the build system in the beginning and not further down the line.  I just wonder why it defaults to max processors.  Thanks again!</p>",
        "id": 265480789,
        "sender_full_name": "Grommish",
        "timestamp": 1639921306
    },
    {
        "content": "<p>Do you have any suggestions on how to get LLVM to build libLLVM-13-rust-1.59.0-nightly in MIPS rather than x86_64?  When I build with <code>--host</code> and <code>--target</code> set to mips64 and <code>--build</code> set to x86_64 it builds:</p>\n<div class=\"codehilite\"><pre><span></span><code>./target-mips64_octeonplus_64_musl/rust-1.57.0/build/x86_64-unknown-linux-gnu/llvm/build/lib/libLLVM-13-rust-1.59.0-nightly.so\n./target-mips64_octeonplus_64_musl/rust-1.57.0/build/x86_64-unknown-linux-gnu/llvm/lib/libLLVM-13-rust-1.59.0-nightly.so\n./target-mips64_octeonplus_64_musl/rust-1.57.0/build/x86_64-unknown-linux-gnu/stage1/lib/libLLVM-13-rust-1.59.0-nightly.so\n./target-mips64_octeonplus_64_musl/rust-1.57.0/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libLLVM-13-rust-1.59.0-nightly.so\n./target-mips64_octeonplus_64_musl/rust-1.57.0/build/x86_64-unknown-linux-gnu/stage2/lib/libLLVM-13-rust-1.59.0-nightly.so\n./target-mips64_octeonplus_64_musl/rust-1.57.0/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/x86_64-unknown-linux-gnu/lib/libLLVM-13-rust-1.59.0-nightly.so\n</code></pre></div>\n<p>But never builds out for <code>mips64-openwrt-linux-musl</code> like it's supposed to, but expects it to to link the mips64 native binaries against.  Any suggestions?</p>\n<div class=\"codehilite\"><pre><span></span><code>grommish@DESKTOP-AW:~/openwrt/staging_dir$ find ./* -name libLLVM-13-rust-1.59.0-nightly*\n./hostpkg/lib/libLLVM-13-rust-1.59.0-nightly.so\n./hostpkg/lib/libLLVM-13-rust-1.59.0-nightly.so.old\n./hostpkg/lib/rustlib/x86_64-unknown-linux-gnu/lib/libLLVM-13-rust-1.59.0-nightly.so\ngrommish@DESKTOP-AW:~/openwrt/staging_dir$ file ./hostpkg/lib/libLLVM-13-rust-1.59.0-nightly.so\n./hostpkg/lib/libLLVM-13-rust-1.59.0-nightly.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=c951f77d4c08d32a48affcea090cd9d409e17994, not stripped\n</code></pre></div>",
        "id": 266036414,
        "sender_full_name": "Grommish",
        "timestamp": 1640398340
    },
    {
        "content": "<p>I have a installed rustc/cargo for x86_64-unknown-linux-gnu that <code>rustc --print target-list</code> shows me the <code>mips64-openwrt-linux-musl</code></p>\n<p>In essence, I've got Stage 2 artifacts installed to the Mips64 MUSL tookchain for the host (these files are <code>x86_64</code> formatted able to cross-compile to <code>mips64</code>.</p>\n<p>Is there a way to run <code>./configure</code> / <code>x.py</code> that I can tell it where rustc/cargo is installed and use that to keep from having to build Stage 0/1 in order to build for native mips64 binaries?</p>",
        "id": 266206427,
        "sender_full_name": "Grommish",
        "timestamp": 1640640611
    },
    {
        "content": "<p>Also! I may have figured out the LLVM issue.  I think it wasn't building a MIPS LLVM Library because I didn't have <code>--experimental-targets=\"AArch64;ARM;Mips;PowerPC;X86\"</code> set.   I'm testing to see if that makes a difference or not.</p>",
        "id": 266218223,
        "sender_full_name": "Grommish",
        "timestamp": 1640650655
    },
    {
        "content": "<p>Ok, so rust-lang uses a forked LLVM, correct?  Does it take all of the same <code>-D</code> args standard <code>LLVM-project</code> uses and does anyone know where in the build system any defaults it uses might be?  I know I can pass <code> --set=llvm.cxxflags=</code> to the system, I just need to know which, if any, are provided by default.</p>\n<p>I am passing the following to a stand-along LLVM, for example:</p>\n<div class=\"codehilite\"><pre><span></span><code>CMAKE_HOST_OPTIONS += \\\n                 -DLLVM_ENABLE_BINDINGS=OFF \\\n                 -DLLVM_INCLUDE_DOCS=OFF \\\n                 -DLLVM_INCLUDE_EXAMPLES=OFF \\\n                 -DLLVM_INCLUDE_TESTS=OFF \\\n                 -DLLVM_ENABLE_PROJECTS=&quot;clang;lld&quot; \\\n                 -DCLANG_BUILD_EXAMPLES=OFF \\\n                 -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \\\n                 -DLLVM_LINK_LLVM_DYLIB=ON \\\n                 -DLLVM_TOOLCHAIN_TOOLS=&quot;llvm-objcopy;llvm-objdump;llvm-readelf;llvm-strip;llvm-ar;llvm-as;llvm-dis;llvm-link;llvm-nm;llvm-ranlib;llc;op&gt;                 -DCMAKE_SKIP_RPATH=OFF\n\nCMAKE_OPTIONS += \\\n                 -I$(STAGING_DIR_HOSTPKG)/include/ncurses \\\n                 -DCMAKE_CROSSCOMPILING=True \\\n                 -DLLVM_TABLEGEN=$(STAGING_DIR_HOSTPKG)/bin/llvm-tblgen \\\n                 -DCLANG_TABLEGEN=$(STAGING_DIR_HOSTPKG)/bin/clang-tblgen \\\n                 -DLLVM_DEFAULT_TARGET_TRIPLE=mips64-linux-musl \\\n                 -DLLVM_TARGET_ARCH=Mips \\\n                 -DLLVM_TARGETS_TO_BUILD=&#39;AArch64;ARM;Mips;PowerPC;X86&#39; \\\n                 -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=&#39;AArch64;ARM;Mips;PowerPC;X86&#39; \\\n                 -DLLVM_ENABLE_BINDINGS=OFF \\\n                 -DLLVM_INCLUDE_DOCS=OFF \\\n                 -DLLVM_INCLUDE_EXAMPLES=OFF \\\n                 -DLLVM_INCLUDE_TESTS=OFF \\\n                 -DLLVM_ENABLE_PROJECTS=&quot;clang;lld&quot; \\\n                 -DCLANG_BUILD_EXAMPLES=OFF \\\n                 -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \\\n                 -DLLVM_LINK_LLVM_DYLIB=ON \\\n                 -DLLVM_TOOLCHAIN_TOOLS=&quot;llvm-objcopy;llvm-objdump;llvm-readelf;llvm-strip;llvm-ar;llvm-as;llvm-dis;llvm-link;llvm-nm;llvm-ranlib;llc;op&gt;\n                 -DCMAKE_SKIP_RPATH=OFF\n</code></pre></div>",
        "id": 266470052,
        "sender_full_name": "Grommish",
        "timestamp": 1640911185
    },
    {
        "content": "<p>src/bootstrap/native.rs:177</p>\n<p>And you can tell it to use a prebuilt llvm instead. It'll lose some fixes and optimization that way but should be good enough to build itself and most rust programs.</p>",
        "id": 266471405,
        "sender_full_name": "The 8472",
        "timestamp": 1640912580
    },
    {
        "content": "<p>but there is at least one MIPS-specific fix on the patch stack: <a href=\"https://github.com/rust-lang/llvm-project/commits/rustc/13.0-2021-09-30\">https://github.com/rust-lang/llvm-project/commits/rustc/13.0-2021-09-30</a></p>",
        "id": 266471634,
        "sender_full_name": "The 8472",
        "timestamp": 1640912800
    },
    {
        "content": "<p>There is a MIPS64 related <code>libc</code> fix I sent in, as well, so I'd rather use the intrinsic LLVM (plus, unless there is a need to generate OpenWrt specific LLVM triples, I don't see a huge advantage for it).  My issues are complicated by everything else.  Thanks for pointing me to <code>src/bootstrap/native.rs:177</code>, I'll take a look!</p>",
        "id": 266472854,
        "sender_full_name": "Grommish",
        "timestamp": 1640914223
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Grommish/bc255be620d822506dd53a554f66e318\">https://gist.github.com/Grommish/bc255be620d822506dd53a554f66e318</a></p>\n<p>Is there a way to tell it to use someplace other than <code>~/.cargo</code>?  I call <code>x.py --config ./config.toml install</code>  and set a <code>--prefix=</code> in the configure call. It shouldn't be in <code>~/.cargo</code> (I don't have rust installed locally on the host) and I'm guessing that's why I'm getting crate errors.  I'm guessing I'm missing setting it somewhere along the line.  Any suggestions on where to look?</p>\n<p>Everything else gets installed to the <code>--prefix=</code> directory.. <code>lib/rustlibs</code>, all the <code>bin/</code> etc..  Just not the <code>.cargo</code></p>\n<p>Ok, That's just a Fail on me :D  Disregard</p>",
        "id": 266541437,
        "sender_full_name": "Grommish",
        "timestamp": 1641014494
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/O2VLr3neETK0qiEaBzpjPXra/new-2.txt\">new-2.txt</a> </p>\n<p>Still failing..  I thought maybe <code>CARGO_HOME</code> not being explicitly set was causing issues, but that doesn't seem to be the case.</p>\n<p>Anyone know what these errors actually are?  The system is fine building <code>x86_64-linux-gnu</code>/<code>mips64-openwrt-linux-musl</code>, but these errors happen on the <code>mips64-openwrt-linux-musl</code>/<code>mips64-openwrt-linux-musl</code></p>",
        "id": 266579786,
        "sender_full_name": "Grommish",
        "timestamp": 1641076636
    }
]