[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71154\" title=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a></p>",
        "id": 194857984,
        "sender_full_name": "lcnr",
        "timestamp": 1587501348
    },
    {
        "content": "<p>Both incremental tests and cross crate builds don't fully work yet.</p>",
        "id": 194858109,
        "sender_full_name": "lcnr",
        "timestamp": 1587501401
    },
    {
        "content": "<p>When calling <code>typeck_tables_of(const_arg)</code> where <code>const_arg</code> is from an external crate, we must have already computed and stored this.<br>\nAs my PR calls <code>typeck_tables_of_const_arg(const_arg, param_def_id)</code> instead, this is not always the case.</p>\n<p>I circumvent this inside the local crate, as I call <code>const_param_of</code> at the start of <code>typeck_tables_of</code>. <a href=\"https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/check/mod.rs#L981-L986\" title=\"https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/check/mod.rs#L981-L986\">https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/check/mod.rs#L981-L986</a><br>\n<code>const_param_of</code> also requires the HIR though, meaning that this approach doesn't work for external <code>DefId</code>s.</p>\n<p>I think that the easiest way to solve this is by storing <code>const_param_of</code> on disk for all const arguments and add a wrapper for <code>typeck_tables_of(def_id)</code> which calls <code>const_param_of</code> for all const arguments \"inside\" of <code>def_id</code>after executing the query.<br>\n<code>const_param_of</code> can now safely call <code>typeck_tables_of(body_owner)</code> without cycles, as we just computed this.</p>\n<p>We can now safely return <code>None</code> in <code>const_param_of</code> if <code>tcx.hir().as_local_hir_id(def_id)</code> fails. <a href=\"https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/collect/type_of.rs#L24\" title=\"https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/collect/type_of.rs#L24\">https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/collect/type_of.rs#L24</a></p>\n<p>Does this sound like a fairly clean approach? <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 194859482,
        "sender_full_name": "lcnr",
        "timestamp": 1587502168
    },
    {
        "content": "<p>Why is <code>ensure</code> used in <code>typeck_item_bodies</code>? <a href=\"https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src/librustc_typeck/check/mod.rs#L751-L754\" title=\"https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src/librustc_typeck/check/mod.rs#L751-L754\">https://github.com/rust-lang/rust/blob/00f677d8974b393ff32ca25bf916b6b9650c75b0/src/librustc_typeck/check/mod.rs#L751-L754</a></p>",
        "id": 194957278,
        "sender_full_name": "lcnr",
        "timestamp": 1587573168
    },
    {
        "content": "<p>Are all const arguments body owners?</p>",
        "id": 194967514,
        "sender_full_name": "lcnr",
        "timestamp": 1587577757
    },
    {
        "content": "<p>Incremental tests now pass on local, so I hope that most of my work is finally done here <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>Thiis PR introduces a <em>small</em> amount of complexity and requires a lot of effort by <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> to review it.<br>\nAre there some smallish + unrelated refactorings I can do in the near future?</p>\n<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> if I remember correctly you had things you could use some help for</p>",
        "id": 194989275,
        "sender_full_name": "lcnr",
        "timestamp": 1587588425
    },
    {
        "content": "<p>hi Bastian. Yeah i need to dig up some issues so i'll try today or tomorrow and ping you accordingly <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 194989331,
        "sender_full_name": "DPC",
        "timestamp": 1587588459
    },
    {
        "content": "<p>Sorry, I saw the notification, and then forgot to respond.</p>",
        "id": 194989876,
        "sender_full_name": "varkor",
        "timestamp": 1587588741
    },
    {
        "content": "<p>I'm not sure about <code>ensure</code>.</p>",
        "id": 194989883,
        "sender_full_name": "varkor",
        "timestamp": 1587588748
    },
    {
        "content": "<p>I'll try to review the PR reasonably soon.</p>",
        "id": 194990088,
        "sender_full_name": "varkor",
        "timestamp": 1587588873
    },
    {
        "content": "<p>But I have some deadlines this week, so I may not get to it right away.</p>",
        "id": 194990110,
        "sender_full_name": "varkor",
        "timestamp": 1587588885
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71154\" title=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a> now passes CI, can someone run perf for this?</p>",
        "id": 195046063,
        "sender_full_name": "lcnr",
        "timestamp": 1587640613
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 195061658,
        "sender_full_name": "lcnr",
        "timestamp": 1587649099
    },
    {
        "content": "<p>once github is working normally, sure :P</p>",
        "id": 195063314,
        "sender_full_name": "DPC",
        "timestamp": 1587649869
    },
    {
        "content": "<p>rdone</p>",
        "id": 195063577,
        "sender_full_name": "DPC",
        "timestamp": 1587649989
    },
    {
        "content": "<p>I changed <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/sealed/trait.IntoQueryParam.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/sealed/trait.IntoQueryParam.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/sealed/trait.IntoQueryParam.html</a> to <code>pub(crate)</code> as I need to wrap some often used queries and want the wrapper to also accept both <code>DefId</code> and<code>LocalDefId</code></p>",
        "id": 195223830,
        "sender_full_name": "lcnr",
        "timestamp": 1587751090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> can you retry the perf run <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> the last one failed for a reason I don't quite understand</p>",
        "id": 195230286,
        "sender_full_name": "lcnr",
        "timestamp": 1587754576
    },
    {
        "content": "<p>sure</p>",
        "id": 195231374,
        "sender_full_name": "DPC",
        "timestamp": 1587755160
    },
    {
        "content": "<p>I thought that a rebase after <code>@bors try</code> does not stop perf <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 195272962,
        "sender_full_name": "lcnr",
        "timestamp": 1587800362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I just realised how to simplify the PR <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> The longer it takes until you to have enough time, the easier it will be in the end.<br>\nWill take a few days to implement <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 195273033,
        "sender_full_name": "lcnr",
        "timestamp": 1587800491
    },
    {
        "content": "<p>Seems like it only took 1 day <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <a href=\"https://github.com/rust-lang/rust/pull/71154#issuecomment-619437246\" title=\"https://github.com/rust-lang/rust/pull/71154#issuecomment-619437246\">https://github.com/rust-lang/rust/pull/71154#issuecomment-619437246</a></p>",
        "id": 195301804,
        "sender_full_name": "lcnr",
        "timestamp": 1587846945
    },
    {
        "content": "<p>I still won't get to it for a while, but maybe next weekend</p>",
        "id": 195377879,
        "sender_full_name": "eddyb",
        "timestamp": 1587969718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> That's far sooner than I expected <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> So don't worry</p>",
        "id": 195378087,
        "sender_full_name": "lcnr",
        "timestamp": 1587969908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120823\">@DPC</span>  can you retry the perf run <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> the last one didn't run for a reason I don't quite understand</p>",
        "id": 195393360,
        "sender_full_name": "lcnr",
        "timestamp": 1587980212
    },
    {
        "content": "<p>I won't touch this in the next few days, so we should be safe this time <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 195393389,
        "sender_full_name": "lcnr",
        "timestamp": 1587980231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>please look at <a href=\"https://github.com/rust-lang/rust/pull/71477\" title=\"https://github.com/rust-lang/rust/pull/71477\">https://github.com/rust-lang/rust/pull/71477</a> beforehand. It's a tiny fix needed for  <a href=\"https://github.com/rust-lang/rust/pull/71154\" title=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a></p>",
        "id": 195686651,
        "sender_full_name": "lcnr",
        "timestamp": 1588154844
    },
    {
        "content": "<p>Once again thought of an improvement <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> pls no review rn</p>",
        "id": 196096512,
        "sender_full_name": "lcnr",
        "timestamp": 1588502500
    },
    {
        "content": "<p>seems like this refactoring ended up being a dead end <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span> <code>124 files changed, 750 insertions(+), 800 deletions(-)</code></p>",
        "id": 196102966,
        "sender_full_name": "lcnr",
        "timestamp": 1588511685
    },
    {
        "content": "<p>I am somewhat finished but am still not completely satisfied <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> There are &gt;40 calls to <code>typeck_tables_of</code> which I did not yet reach during typeck. As all I don't want to recompute <code>typeck_tables_of</code> twice for const arguments I added a thin wrapper which gets the correct <code>DefId</code> of the generic parameter and then calls the actual query(which is now renamed to <code>_typeck_tables_of</code>).</p>",
        "id": 196123354,
        "sender_full_name": "lcnr",
        "timestamp": 1588540057
    },
    {
        "content": "<p>I would have to add the same wrapper to <code>TyCtxtEnsure</code> as there are multiple <code>tcx.ensure().typeck_tables_of</code> calls which I currently had to manually edit to <code>tcx.ensure()._typeck_tables_of</code> which is not great</p>",
        "id": 196123438,
        "sender_full_name": "lcnr",
        "timestamp": 1588540136
    },
    {
        "content": "<p>I can currently think of 3 ways I could go:</p>",
        "id": 196123467,
        "sender_full_name": "lcnr",
        "timestamp": 1588540171
    },
    {
        "content": "<p>remove the wrapper for <code>typeck_tables_of</code> and get the correct generic param at the start of this query and then call the same query with the correct arguments. This still requires me to modify all 40+ callsites of this function and causes cycle errors to be longer.</p>",
        "id": 196123585,
        "sender_full_name": "lcnr",
        "timestamp": 1588540299
    },
    {
        "content": "<p>Change all occurences of <code>typeck_tables_of(input)</code> to <code>typeck_tables_of(tcx.with_opt_param(input))</code>. While this changes even more locations,<br>\nit doe s not require any wrappers and is probably the cleanest solution.</p>",
        "id": 196123719,
        "sender_full_name": "lcnr",
        "timestamp": 1588540444
    },
    {
        "content": "<p>Also add a wrapper to <code>TyCtxtEnsure</code> for <code>typeck_tables_of</code>, this duplicates the wrapper and would be the first ever methods added to this struct, so I don't feel comfortable doing this. Also leaves us with <code>_query_name</code>, which I kind of dislike.</p>",
        "id": 196123819,
        "sender_full_name": "lcnr",
        "timestamp": 1588540572
    },
    {
        "content": "<p>I am personally in favor of option 2 but dislike all of them <span aria-label=\"distraught\" class=\"emoji emoji-1f629\" role=\"img\" title=\"distraught\">:distraught:</span></p>",
        "id": 196123846,
        "sender_full_name": "lcnr",
        "timestamp": 1588540636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> The refactoring has been finished. Reduced the size to <code>101 files changed, 1069 insertions(+), 467 deletions(-)</code> <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 196159258,
        "sender_full_name": "lcnr",
        "timestamp": 1588585111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> are you able to spend some time on <a href=\"https://github.com/rust-lang/rust/issues/71154\">#71154</a> this week? I think I am now fairly close to the optimal solution and considering its impact, I do want to get this done soon.</p>",
        "id": 198603390,
        "sender_full_name": "lcnr",
        "timestamp": 1590359711
    },
    {
        "content": "<p>I will try to take a look soon, but I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> still wants to review as well before it is merged.</p>",
        "id": 198604216,
        "sender_full_name": "varkor",
        "timestamp": 1590361267
    },
    {
        "content": "<p>Considering that MCPs are a thing now, this PR probably needs one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I have an initial draft at <a href=\"https://gist.github.com/lcnr/f977d902d3f509d20d69d0110dba2f3f\">https://gist.github.com/lcnr/f977d902d3f509d20d69d0110dba2f3f</a><br>\nI am not sure on what I relevant here and what may need a more detailed explanation, so please ask for clarification or improvements where needed.</p>",
        "id": 199942039,
        "sender_full_name": "lcnr",
        "timestamp": 1591397052
    },
    {
        "content": "<p>I also talked a bit with <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> about the current implementation and may still end up changing how exactly parameters are passed into queries, which hopefully isn't too relevant for this MCP.</p>",
        "id": 199942315,
        "sender_full_name": "lcnr",
        "timestamp": 1591397293
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/compiler-team/issues/304\">https://github.com/rust-lang/compiler-team/issues/304</a></p>",
        "id": 200088977,
        "sender_full_name": "lcnr",
        "timestamp": 1591618722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> this PR still causes an ~1.5 % perf regression in some <a href=\"https://perf.rust-lang.org/compare.html?start=e4124750c33631042d5f078b78ce16286b8027c0&amp;end=384f9134ec3c49bfb8b7d20d1eaa9552358fc42b\">benchmarks</a></p>",
        "id": 200089225,
        "sender_full_name": "lcnr",
        "timestamp": 1591618897
    },
    {
        "content": "<p>This is most probably caused by calling <code>tcx.with_opt_param(def_id)</code> before calling an already executed query, meaning that we now have 2 hashtable lookups instead of one.</p>",
        "id": 200089365,
        "sender_full_name": "lcnr",
        "timestamp": 1591618992
    },
    {
        "content": "<p>A solutation suggested by <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> and a previous approach was to instead allow queries to be called without the relevant param def id.<br>\nAnd only call <code>tcx.const_param_of</code> inside of the query:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">unsafety_check_result</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">def</span>: <span class=\"nc\">ty</span>::<span class=\"n\">WithOptParam</span><span class=\"o\">&lt;</span><span class=\"n\">LocalDefId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">UnsafetyCheckResult</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">param_did</span><span class=\"p\">.</span><span class=\"n\">is_none</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">param_did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">const_param_of</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">unsafety_check_result</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">WithOptParam</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">did</span>: <span class=\"nc\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">param_did</span>: <span class=\"nc\">Some</span><span class=\"p\">(</span><span class=\"n\">param_did</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200089622,
        "sender_full_name": "lcnr",
        "timestamp": 1591619140
    },
    {
        "content": "<p>Just found a solution to my problem <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Trying to explain exactly what's wrong works magic</p>",
        "id": 200090060,
        "sender_full_name": "lcnr",
        "timestamp": 1591619361
    },
    {
        "content": "<p>The problem was that we have to be able to reconstruct <code>WithOptParam</code> from a <code>DepNode</code></p>",
        "id": 200090250,
        "sender_full_name": "lcnr",
        "timestamp": 1591619466
    },
    {
        "content": "<p>I previously did this by using <code>dep_node.extract_def_id(tcx).map(|def_id| tcx.with_opt_param(def_id))</code></p>",
        "id": 200090331,
        "sender_full_name": "lcnr",
        "timestamp": 1591619520
    },
    {
        "content": "<p>This is wrong for <code>WithOptParam</code>s where <code>param_did != tcx.with_opt_param(def_id)</code>, resulting in ICE.</p>",
        "id": 200090469,
        "sender_full_name": "lcnr",
        "timestamp": 1591619591
    },
    {
        "content": "<p>Can be solved by splitting relevant queries into <code>query_name(def_id)</code> and <code>query_name_for_const_arg(with_opt_param)</code> and keeping the previous invariant of <code>WithOptParam</code>.</p>",
        "id": 200090616,
        "sender_full_name": "lcnr",
        "timestamp": 1591619663
    },
    {
        "content": "<p>Is there a quick way to profile how often a given query is called, even if it is already cached?</p>",
        "id": 200096482,
        "sender_full_name": "lcnr",
        "timestamp": 1591622666
    },
    {
        "content": "<p>Changed <code>resolve_instance</code> for now, which seems like it is the most frequently used query... Can someone start a perf run for <a href=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a>? (done)</p>",
        "id": 200112738,
        "sender_full_name": "lcnr",
        "timestamp": 1591629549
    },
    {
        "content": "<p>Well, I don't really know how what else I can try to fix perf here <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span> (without causing unsoundness)</p>\n<p>The relevant perf results are <a href=\"https://perf.rust-lang.org/compare.html?start=e4124750c33631042d5f078b78ce16286b8027c0&amp;end=384f9134ec3c49bfb8b7d20d1eaa9552358fc42b\">https://perf.rust-lang.org/compare.html?start=e4124750c33631042d5f078b78ce16286b8027c0&amp;end=384f9134ec3c49bfb8b7d20d1eaa9552358fc42b</a></p>",
        "id": 200511715,
        "sender_full_name": "lcnr",
        "timestamp": 1591859621
    },
    {
        "content": "<p>IMO this change is required to stabilize const generics and I am kind of unsure on how else we might implement this, so I think if noone else has an idea we should merge this even if it worsens perf by ~1.5% in some benchmarks</p>",
        "id": 200512271,
        "sender_full_name": "lcnr",
        "timestamp": 1591860010
    },
    {
        "content": "<p>I am very much biased towards getting const generics forward and don't care as much about perf, so there are probably other people who do want to see this merged, considering that const generics are still fairly far from stable.</p>",
        "id": 200512596,
        "sender_full_name": "lcnr",
        "timestamp": 1591860369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> What's your stance here?</p>",
        "id": 200512640,
        "sender_full_name": "lcnr",
        "timestamp": 1591860434
    },
    {
        "content": "<p>An easy fix would be to close <a href=\"https://github.com/rust-lang/rust/issues/72962\">#72962</a>, merge its commits on top of <a href=\"https://github.com/rust-lang/rust/issues/71154\">#71154</a> and pretend like that PR is now perf neutral <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 200513066,
        "sender_full_name": "lcnr",
        "timestamp": 1591860789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/const.20args.20in.20type.20dependent.20paths/near/200512596\">said</a>:</p>\n<blockquote>\n<p>I am very much biased towards getting const generics forward and don't care as much about perf, so there are probably other people who do want to see this merged, considering that const generics are still fairly far from stable.</p>\n</blockquote>\n<p>other people who do <strong>not</strong> want to see this merged</p>",
        "id": 200520378,
        "sender_full_name": "lcnr",
        "timestamp": 1591866450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>: sorry, I've been much busier than I expected these last couple of weeks, so I haven't managed to get to this PR, or really think about anything.</p>",
        "id": 200878468,
        "sender_full_name": "varkor",
        "timestamp": 1592221709
    },
    {
        "content": "<p>I'm personally in favour of accepting a regression like that, considering that it is necessary to move CG forward. But I may be slightly biased :)</p>",
        "id": 200880835,
        "sender_full_name": "varkor",
        "timestamp": 1592223369
    },
    {
        "content": "<p>I've had a read through the changes, and I don't see anything I think should be changed with the approach: my only real comments are about adding a few extra comments.</p>",
        "id": 200880887,
        "sender_full_name": "varkor",
        "timestamp": 1592223418
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> wanted to review this before any decision was made, so it's in their hands now.</p>",
        "id": 200880944,
        "sender_full_name": "varkor",
        "timestamp": 1592223453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> can I gently nudge you towards <a href=\"https://github.com/rust-lang/compiler-team/issues/304\">https://github.com/rust-lang/compiler-team/issues/304</a> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> </p>\n<p>One weird quirk I am not completely sure about is <a href=\"https://github.com/rust-lang/rust/pull/71154/commits/03f17ccf7f9a77deac74a3abc17984e2710de8ea\">https://github.com/rust-lang/rust/pull/71154/commits/03f17ccf7f9a77deac74a3abc17984e2710de8ea</a> . This commit always uses <code>None</code> as <code>param_did</code> if the <code>def_id</code> is not local. Which should be fine as comparisons and hashing all  don't care about that field and we don't have to worry about cycles in these cases, but I want to explain this more clearly in a comment on <code>WithOptParam</code> itself, as it might be quite surprising</p>",
        "id": 200888544,
        "sender_full_name": "lcnr",
        "timestamp": 1592227676
    },
    {
        "content": "<p>Have an exam tomorrow so I will try to do it later this week</p>",
        "id": 200888639,
        "sender_full_name": "lcnr",
        "timestamp": 1592227712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>: oh, what effect does this have on calling methods defined in other crates?</p>",
        "id": 200904820,
        "sender_full_name": "varkor",
        "timestamp": 1592234844
    },
    {
        "content": "<p>We should add a test for cross-crate calling, even if we don't expect it to be problematic, as we've overlooked issues there before.</p>",
        "id": 200904881,
        "sender_full_name": "varkor",
        "timestamp": 1592234873
    },
    {
        "content": "<p>The benefit of this is that we don't have to do two seperate query lookups when calling methods from extern crates.<br>\nFor the query cache <code>WithOptParam { did, param_did: Some(param) }</code> looks the same as <code>WithOptParam { did, param_did: None }</code>, so we still only cache it once. If something is reused computed both as local and extern, we may call <code>type_of(arg) -&gt; type_of(const_param_of(arg))</code> instead of <code>type_of(const_param)</code>.</p>",
        "id": 200905742,
        "sender_full_name": "lcnr",
        "timestamp": 1592235200
    },
    {
        "content": "<p>for the local crate, each call of <code>typeck_tables_of(def_id)</code> first requires a call to <code>const_param_of(def_id)</code></p>",
        "id": 200905905,
        "sender_full_name": "lcnr",
        "timestamp": 1592235259
    },
    {
        "content": "<p>I am not completely sold on this yete though, as the perf impact is fairly small afaict and its not very easy to reason about imo</p>",
        "id": 200906305,
        "sender_full_name": "lcnr",
        "timestamp": 1592235347
    },
    {
        "content": "<p>Is there a perf run recording the difference?</p>",
        "id": 200906744,
        "sender_full_name": "varkor",
        "timestamp": 1592235499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/const.20args.20in.20type.20dependent.20paths/near/200888544\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> can I gently nudge you towards <a href=\"https://github.com/rust-lang/compiler-team/issues/304\">https://github.com/rust-lang/compiler-team/issues/304</a> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>\n</blockquote>\n<p>Ah, sorry, I've been completely behind. I've just seconded it.</p>",
        "id": 200906833,
        "sender_full_name": "varkor",
        "timestamp": 1592235525
    },
    {
        "content": "<p>With <code>param_did: None</code>: <a href=\"https://perf.rust-lang.org/compare.html?start=bb8674837a9cc5225020e07fc3f164762bb4c11c&amp;end=0a204d6a1aef863bca037ca6e88ba49ce3e734ed\">https://perf.rust-lang.org/compare.html?start=bb8674837a9cc5225020e07fc3f164762bb4c11c&amp;end=0a204d6a1aef863bca037ca6e88ba49ce3e734ed</a></p>\n<p>With <code>param_did: tcx.const_param_of(def_id)</code>: <a href=\"https://perf.rust-lang.org/compare.html?start=e4124750c33631042d5f078b78ce16286b8027c0&amp;end=384f9134ec3c49bfb8b7d20d1eaa9552358fc42b\">https://perf.rust-lang.org/compare.html?start=e4124750c33631042d5f078b78ce16286b8027c0&amp;end=384f9134ec3c49bfb8b7d20d1eaa9552358fc42b</a></p>",
        "id": 200917919,
        "sender_full_name": "lcnr",
        "timestamp": 1592240840
    },
    {
        "content": "<p>I tried to formulate why this is sound,  but wasn't able to even remove my own doubts <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n<p>Will revert that change, meh</p>",
        "id": 201059785,
        "sender_full_name": "lcnr",
        "timestamp": 1592334115
    },
    {
        "content": "<p>Can someone perf <a href=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a>? Let's see where we are now</p>",
        "id": 201068243,
        "sender_full_name": "lcnr",
        "timestamp": 1592338539
    },
    {
        "content": "<p>(it seems the run has been queued already -- however, for faster iteration times, you can also run the benchmarks locally <a href=\"https://github.com/rust-lang/rustc-perf/tree/master/collector#how-to-benchmark-a-change-on-your-own-machine\">https://github.com/rust-lang/rustc-perf/tree/master/collector#how-to-benchmark-a-change-on-your-own-machine</a>)</p>",
        "id": 201069504,
        "sender_full_name": "lqd",
        "timestamp": 1592339166
    },
    {
        "content": "<p>prrrrrrrrrrrf <a href=\"https://perf.rust-lang.org/compare.html?start=a647c0cd68bdd0f15081019f0b21bc31ae23f072&amp;end=2e0ee43e993a0a97edc6a0af1116bfbccdf1dd36\">https://perf.rust-lang.org/compare.html?start=a647c0cd68bdd0f15081019f0b21bc31ae23f072&amp;end=2e0ee43e993a0a97edc6a0af1116bfbccdf1dd36</a></p>\n<p>I guess this is what we end up with</p>",
        "id": 201111085,
        "sender_full_name": "lcnr",
        "timestamp": 1592380906
    },
    {
        "content": "<p>hmm, in <a href=\"https://github.com/rust-lang/rust/pull/74113\">https://github.com/rust-lang/rust/pull/74113</a> it seems like <code>@bors try</code> finished but nothing happened afterwards <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>\n<p>Does someone know what happend there?</p>",
        "id": 203101181,
        "sender_full_name": "lcnr",
        "timestamp": 1594128309
    },
    {
        "content": "<p>If you push after <code>@bors try</code> then bors won't post a completed message. You can use <code>@rustc-perf build &lt;commit-hash&gt;</code> to run perf.</p>",
        "id": 203102173,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594128732
    }
]