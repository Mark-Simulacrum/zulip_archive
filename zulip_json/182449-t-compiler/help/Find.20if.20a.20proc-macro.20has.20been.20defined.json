[
    {
        "content": "<p>Hi all. I'm current working with the project-error-handling group on Tracking issue for RFC 2011: nicer assert messages <a href=\"https://github.com/rust-lang/rust/issues/44838\">#44838</a>  <a href=\"https://github.com/rust-lang/rust/issues/44838\">https://github.com/rust-lang/rust/issues/44838</a>   I need to determine if a procedural macro has been defined in the compiler.  Can someone point me in the direction to determine this?  Thanks in advance.</p>",
        "id": 213237484,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602638647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344328\">@Charles Ellis O'Riley Jr.</span> maybe <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.Resolver.html#structfield.all_macros\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.Resolver.html#structfield.all_macros</a> ?</p>",
        "id": 213237510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602638701
    },
    {
        "content": "<p>or actually <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.Resolver.html#structfield.builtin_macros\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.Resolver.html#structfield.builtin_macros</a> would be better I think</p>",
        "id": 213237521,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602638714
    },
    {
        "content": "<p>Thanks Joshua.  I'll take a look.</p>",
        "id": 213237604,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602638780
    },
    {
        "content": "<p>you'll need to get a <code>Resolver</code> from somewhere though</p>",
        "id": 213237612,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602638798
    },
    {
        "content": "<p>what part of the compiler is this?</p>",
        "id": 213237616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602638802
    },
    {
        "content": "<p>Joshua, I'm new to this so I'm just going by the tracking issue.  What's a Resolver first off and is there a way I can look at the compiler to see if it currently offers what I need?</p>",
        "id": 213237747,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602638991
    },
    {
        "content": "<p>Oops, I just now read the issue. It looks like you don't actually need to see if <code>assert!</code> has already been defined, you just need to define it yourself. The place for that is somewhere in <a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_builtin_macros\">https://github.com/rust-lang/rust/tree/master/compiler/rustc_builtin_macros</a>.</p>",
        "id": 213237906,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602639165
    },
    {
        "content": "<p>(and then remove <code>assert!</code> from the standard library)</p>",
        "id": 213237913,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602639178
    },
    {
        "content": "<p>That part I kind of assumed but thanks for letting me feel comfortable in my assumption :)</p>",
        "id": 213238010,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602639281
    },
    {
        "content": "<p>Qucik question, there are different kinds of assert.  Based on your reading of the issue, would I need to just add the basic assert or the different variations of assert?  I believe what's required is the different variations based on my research.</p>",
        "id": 213238090,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602639388
    },
    {
        "content": "<p>from <a href=\"https://github.com/ishitatsuyuki/rfcs/blob/generic-assert/text/0000-generic-assert.md#how-we-teach-this\">https://github.com/ishitatsuyuki/rfcs/blob/generic-assert/text/0000-generic-assert.md#how-we-teach-this</a> it seems like this new builtin macro is meant to replace all the existing ones except <code>assert!</code></p>",
        "id": 213238102,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602639448
    },
    {
        "content": "<p>except assert!  Can you explain?</p>",
        "id": 213238152,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602639504
    },
    {
        "content": "<p>so if you look at the RFC, it says</p>\n<blockquote>\n<p>While clippy warns about assert! usage that should be replaced by assert_eq!, it's quite annoying to migrate around.</p>\n</blockquote>\n<p>So a primary motivation it looks like is to reduce the number of different assert macros you need to know</p>",
        "id": 213238176,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602639568
    },
    {
        "content": "<p>and make <code>assert!</code> behave just as well as if you'd used <code>assert_eq</code> or <code>assert_ne</code> or any of the others</p>",
        "id": 213238185,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602639583
    },
    {
        "content": "<p>Aaaah.  I understand.  Again, thank you very much.</p>",
        "id": 213238250,
        "sender_full_name": "Charles Ellis O'Riley Jr.",
        "timestamp": 1602639636
    },
    {
        "content": "<p>You're very welcome!</p>",
        "id": 213238258,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602639654
    }
]