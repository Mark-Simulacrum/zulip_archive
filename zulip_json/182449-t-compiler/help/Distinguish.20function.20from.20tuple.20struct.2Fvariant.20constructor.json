[
    {
        "content": "<p>How can I distinguish a function (<code>fn Foo() {}</code>) from an auto-generated constructor for a tuple struct/variant (<code>struct Foo()</code> or <code>enum x { Foo }</code>)?  My understanding is the auto-generated constructor is a function in its own right, but what I'm doing necessitates treating them differently.</p>",
        "id": 270672915,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1643955786
    },
    {
        "content": "<p>What I have is a <code>rustc_middle::TyCtxt</code> and a <code>rustc_span::def_id::DefId</code>, for reference.</p>",
        "id": 270673736,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1643956722
    },
    {
        "content": "<p>Figured it out after extensive digging through the documentation (<code>self</code> is the <code>TyCtxt</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">local_def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">def_kind</span><span class=\"p\">(</span><span class=\"n\">local_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DefKind</span>::<span class=\"n\">Ctor</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">CtorKind</span>::<span class=\"nb\">Fn</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The code I have still isn't working, but I can at least classify this specific bit, as I know it's required.</p>",
        "id": 270681818,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1643963023
    }
]