[
    {
        "content": "<p>I'm working on match checking to fix some diagnostics in the presence of or-patterns. My running example is this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"c1\">// FIXME: should be unreachable</span>\n<span class=\"w\">                               </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When analyzing the last branch, what the algorithm does is try in turn <code>true</code> and <code>false</code> for the left half of the pair, and in each case it gets the info of which subpatterns were unreachable. Here for <code>true</code> the second <code>true|false</code> pattern is unreachable, and for <code>false</code> the second <code>true</code> is unreachable.</p>",
        "id": 220152270,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608142591
    },
    {
        "content": "<p>I want to find the intersection of those two things in order to report that the second <code>true</code> of the last branch is indeed unreachable</p>",
        "id": 220152333,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608142626
    },
    {
        "content": "<p>So far I identify those things using <code>Span</code>s, so my first question is if there's any way to find if a span is a parent of another. EDIT: I found <code>Span::contains</code></p>",
        "id": 220152533,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608142721
    },
    {
        "content": "<p>But then what if the second <code>true | false</code> comes from a macro? Then do I have a way to track inclusion the same way?</p>",
        "id": 220152632,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608142783
    },
    {
        "content": "<p>I guess that's the really interesting case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">t_or_f</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">t_or_f</span><span class=\"o\">!</span><span class=\"p\">()))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220152792,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608142847
    },
    {
        "content": "<p>I'd like to be able to know that the invocation <code>t_or_f!()</code> contains the <code>true</code> in the macro definition. So spans aren't the right thing probably?</p>",
        "id": 220152909,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608142909
    },
    {
        "content": "<p>You're using the <code>Span</code>s purely for diagnostics, right?</p>",
        "id": 220175913,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608154409
    },
    {
        "content": "<p>Yes, this is all purely diagnostics</p>",
        "id": 220176444,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608154683
    },
    {
        "content": "<p>So if handling macros is too complicated I can skip it</p>",
        "id": 220176470,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608154706
    },
    {
        "content": "<p>I'm not sure if this is at all helpful to solve your problem, but I wanted to mention that <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.from_expansion\"><code>Span</code> has a function to see if it came from a macro expansion</a>.</p>",
        "id": 220178959,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608155958
    },
    {
        "content": "<p>oh, that sounds helpful! looks like with <code>Span::ctxt</code> I might be able to go up the chain of macro invocations</p>",
        "id": 220181603,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608157210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.source_callsite\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.source_callsite</a> what you're looking for?</p>",
        "id": 220181910,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608157397
    },
    {
        "content": "<p>Ohh very potentially yes. Would that return the span of  <code>t_or_f!()</code> above if called on the <code>true</code> defined in the macro but obtained from walking down the pattern?</p>",
        "id": 220184312,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608158711
    },
    {
        "content": "<p>yes, I think so</p>",
        "id": 220185098,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608159174
    },
    {
        "content": "<p>Perfect, thanks a lot!</p>",
        "id": 220186344,
        "sender_full_name": "Nadrieril",
        "timestamp": 1608159928
    }
]