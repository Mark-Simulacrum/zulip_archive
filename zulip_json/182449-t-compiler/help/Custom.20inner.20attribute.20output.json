[
    {
        "content": "<p>Hi guys, I have been developing a custom inner attribute as procedural-macro. The problem I found is that the input tokens seem to be wrapped into a <code>pub mod</code> without identifier and will throw an error if I parse it with <code>syn</code>. Is there any workaround on this or an easy way to obtain the tokens of entire crate instead of inner attribute?</p>",
        "id": 246280550,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1626469941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410549\">@Jerry Liu</span> I can take a look at how much work it would be to fix that. What's your use-case for obtaining the tokens of the whole crate?</p>",
        "id": 246281943,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626470549
    },
    {
        "content": "<p>Thanks! I am developing an attribute to generate a macro that expands to some part of my source code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![attribute_name]</span><span class=\"w\"></span>\n<span class=\"c1\">//src code for crate</span>\n</code></pre></div>\n<p>It should generate a macro:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[macro_export]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">//some source code that I extract by visiting}</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The src that needs to be in the macro are labeled with other attributes</p>",
        "id": 246282351,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1626470779
    },
    {
        "content": "<p>Maybe this can makes it more clear:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![allow(unused_variables)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(dead_code)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(unused_must_use)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#![prusti_contracts::export_all]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">prusti_contracts</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">prusti_contracts</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[extern_spec]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">std</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">mem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">prusti_contracts</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[ensures(*a == old(*b) &amp;&amp; *b == old(*a))]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">swap</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// pub fn swap&lt;T: std::cmp::PartialEq + Copy&gt;(a: &amp;mut T, b: &amp;mut T);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The <code>export_all</code> is the attribute I am working on. I am hoping to generate a macro to expands to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[extern_spec]</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">std</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">mem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">prusti_contracts</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[ensures(*a == old(*b) &amp;&amp; *b == old(*a))]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">swap</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// pub fn swap&lt;T: std::cmp::PartialEq + Copy&gt;(a: &amp;mut T, b: &amp;mut T);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So that I can reuse these codes in another crate</p>",
        "id": 246282943,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1626471134
    },
    {
        "content": "<p>One unresolved question is the behavior of crate-level inner attributes with regard to out-of-line modules (e.g. <code>mod foo;</code>)</p>",
        "id": 246283683,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626471553
    },
    {
        "content": "<p>proc-macro attributes on out-of-line modules (e.g. <code>#[my_attr mod foo;</code>) are unstable, because it's undecided whether or not they should see the literal <code>mod foo;</code> tokens, or the contents of the module loaded from disk</p>",
        "id": 246283803,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626471610
    },
    {
        "content": "<p>crate-level attributes have the same problem, since <code>mod foo;</code> statements are part of the crate</p>",
        "id": 246283820,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626471628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410549\">@Jerry Liu</span> That kind of literal code reuse (copying the whole <code>#[extern_mod]</code> mod std) seems kind of unusual. You could run into problems if you're using any other macros within that nested module</p>",
        "id": 246283913,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626471709
    },
    {
        "content": "<p>since they might not be imported in the other crate</p>",
        "id": 246283927,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626471722
    },
    {
        "content": "<p>Do you have full control over all of the crates involved?</p>",
        "id": 246283978,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626471731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Custom.20inner.20attribute.20output/near/246283978\">said</a>:</p>\n<blockquote>\n<p>Do you have full control over all of the crates involved?</p>\n</blockquote>\n<p>Yes I do have full control here since <code>#[extern_spec]</code> simply just another attribute in the project.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Custom.20inner.20attribute.20output/near/246283913\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"410549\">Jerry Liu</span> That kind of literal code reuse (copying the whole <code>#[extern_mod]</code> mod std) seems kind of unusual. You could run into problems if you're using any other macros within that nested module</p>\n</blockquote>\n<p>I don't think we will be using any macros inside the nested module (if you don't count <code>#[extern_spec]</code>). The literal code reuse is the strategy now because the project is basically a plugin for <code>rustc</code> and we are trying to preserve some code to reuse across crate</p>",
        "id": 246284908,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1626472267
    },
    {
        "content": "<p>We should perhaps emit an immediate error on attempt to use a macro attribute at crate level.<br>\nThey are not supported, was never supported, and I'm not sure it's a good idea to support them in the future.</p>",
        "id": 246286359,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1626473232
    },
    {
        "content": "<p>So what would be a good way to obtain tokenstream of the entire crate and process with <code>syn</code>?</p>",
        "id": 246286949,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1626473695
    },
    {
        "content": "<p>Do anyone know what will actually be the valid output for an <code>inner_attribute</code>? Since it's wrapped in a mod without identifier clearly it won't be a valid output. What should I return in the attribute?</p>",
        "id": 246293293,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1626480130
    }
]