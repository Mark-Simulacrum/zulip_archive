[
    {
        "content": "<p>Is it possible to 'freeze' stage0? it seems crazy that if I change a single line in a mir transformation i have to recompile stage0 and then all of stage1, why can't I just recompile <code>librustc_mir</code>?</p>",
        "id": 203751048,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594664529
    },
    {
        "content": "<p><code>./x.py build --keep-stage 0</code> I think</p>",
        "id": 203751180,
        "sender_full_name": "bjorn3",
        "timestamp": 1594664605
    },
    {
        "content": "<p>I think if you use <code>--keep-stage 1</code>, stage 1 stdlib won't be compiled again</p>",
        "id": 203751185,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594664607
    },
    {
        "content": "<p>can i set those options in <code>config.toml</code>?</p>",
        "id": 203751204,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594664624
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 203751425,
        "sender_full_name": "bjorn3",
        "timestamp": 1594664735
    },
    {
        "content": "<p>weeeeee using <code>keep-stage 0</code> dropped a 1 line change rebuild from 5m42 to 1m30</p>",
        "id": 203751907,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594664951
    },
    {
        "content": "<p>still long but muuuch more manageable</p>",
        "id": 203751925,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594664959
    },
    {
        "content": "<p>if lld worked on mac i'd switch to it since that seems to speed things up as well</p>",
        "id": 203751983,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594664988
    },
    {
        "content": "<blockquote>\n<p>can i set those options in <code>config.toml</code>?</p>\n</blockquote>\n<p>You don't want to, --keep-stage will lead to weird errors if the compiler changes too much, you need to recompile the standard library once in a while</p>",
        "id": 203752999,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594665428
    },
    {
        "content": "<blockquote>\n<p>I have to recompile stage0 then all of stage1</p>\n</blockquote>\n<p>Do you need stage1 specifically? Can you use <code>build --stage 1 src/libstd</code> instead? That will only build the stage0 compiler</p>",
        "id": 203753208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594665527
    },
    {
        "content": "<p>ugh... using <code>keep-stage 0</code> doesn't work, it doesn't seem to compile my changes in</p>",
        "id": 203753604,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594665721
    },
    {
        "content": "<p>I need  to build <code>librustc_mir</code></p>",
        "id": 203753667,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594665742
    },
    {
        "content": "<p>What command were you using?</p>",
        "id": 203753687,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594665759
    },
    {
        "content": "<p><code>./x.py build -i --stage 1 --keep-stage 0</code></p>",
        "id": 203753718,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594665774
    },
    {
        "content": "<p>it seems really weird cuz all i did was include logging</p>",
        "id": 203753760,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594665802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/freeze.20stage0/near/203753208\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I have to recompile stage0 then all of stage1</p>\n</blockquote>\n<p>Do you need stage1 specifically? Can you use <code>build --stage 1 src/libstd</code> instead? That will only build the stage0 compiler</p>\n</blockquote>\n<p>I think this is what you need <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 203753780,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594665815
    },
    {
        "content": "<p>weird that staging would be the problem..</p>",
        "id": 203753782,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594665816
    },
    {
        "content": "<p>The <a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\">rustc dev guide</a> has a few tips btw</p>",
        "id": 203753817,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594665838
    },
    {
        "content": "<p>ah i should have read the recommended workflows page :P</p>",
        "id": 203754064,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594665922
    },
    {
        "content": "<p>IIRC what's happening here is that:</p>\n<ul>\n<li><code>./x.py build -i --stage 1</code> means \"build the stage 1 compiler from stage 0 artifacts\", where \"stage 0 artifacts\" include the compiler, so effectively you're building the compiler twice</li>\n<li><code>./x.py build -i --stage 1 src/libstd</code> means \"build the stage 1 libstd from stage 0 artifacts\", so it will build a stage 0 compiler, then stage 1 libstd and stop there, so you only build the compiler once</li>\n</ul>",
        "id": 203754209,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594665981
    },
    {
        "content": "<p>Yes, that's correct</p>",
        "id": 203754283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666017
    },
    {
        "content": "<p>I'm trying to make bullet point two the default for <code>--stage 1</code> since a compiler without libstd is pretty useless and you normally only want to build rustc once</p>",
        "id": 203754339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666050
    },
    {
        "content": "<p>what's weird though is that the command generates a new stage1 binary?</p>",
        "id": 203754372,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594666061
    },
    {
        "content": "<p>if it's not building the stage1 compiler how is that possible?</p>",
        "id": 203754412,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594666079
    },
    {
        "content": "<p>/shrug it works for me now</p>",
        "id": 203754504,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594666111
    },
    {
        "content": "<p>I guess it depends on what you are calling stage 1? x)</p>",
        "id": 203754570,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594666145
    },
    {
        "content": "<p>The stage1 binary is not the same as the stage1 artifacts</p>",
        "id": 203754601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666162
    },
    {
        "content": "<p>The stage1 artifacts are the things <em>built with</em> stage1/rustc</p>",
        "id": 203754623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666182
    },
    {
        "content": "<p>It's confusing because the build directory refers to the compiler that's running but the <code>x.py</code> args refer to the compiler being built</p>",
        "id": 203754760,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> and I have argued about this :P</p>",
        "id": 203754784,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666257
    },
    {
        "content": "<p>Yeah it's confusing, but at least only infra and release people have to worry about it <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 203754837,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594666285
    },
    {
        "content": "<p>ohhhh ok so <code>--stage 1</code> is referring to the artifacts built from stage1?</p>",
        "id": 203754845,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594666288
    },
    {
        "content": "<p>Yes exactly</p>",
        "id": 203754860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666296
    },
    {
        "content": "<p>ok it all makes sense now</p>",
        "id": 203754870,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594666301
    },
    {
        "content": "<blockquote>\n<p>Yeah it's confusing, but at least only infra and release people have to worry about it :P</p>\n</blockquote>\n<p>I disagree, see e.g. this thread</p>",
        "id": 203754898,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666314
    },
    {
        "content": "<p>I thought it meant _build_ the stage1 binary</p>",
        "id": 203754900,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1594666315
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> this is what my idea to change x.py was</p>",
        "id": 203755061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666381
    },
    {
        "content": "<p>That you said was confusing for other reasons</p>",
        "id": 203755086,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/freeze.20stage0/near/203754898\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Yeah it's confusing, but at least only infra and release people have to worry about it <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>\n</blockquote>\n<p>I disagree, see e.g. this thread</p>\n</blockquote>\n<p>I meant, once you have learnt that you should use <code>./x.py build --stage 1 src/libstd</code>, you don't have to remember the details of the bootstrapping process</p>",
        "id": 203755318,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594666503
    },
    {
        "content": "<p>Yeah, making that the default should help a lot</p>",
        "id": 203755373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666526
    },
    {
        "content": "<p>But I still think the other numbering makes more sense</p>",
        "id": 203755414,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666541
    },
    {
        "content": "<p>Plus we'll need to change that command once the standard library is moved to its own directory (soon)?</p>",
        "id": 203755539,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594666585
    },
    {
        "content": "<p>Well, that I don't expect to be too confusing</p>",
        "id": 203755575,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666608
    },
    {
        "content": "<p>Just a pain to update the docs</p>",
        "id": 203755590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594666615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/freeze.20stage0/near/203751983\">said</a>:</p>\n<blockquote>\n<p>if lld worked on mac i'd switch to it since that seems to speed things up as well</p>\n</blockquote>\n<p>I've been pointed at <a href=\"https://github.com/michaeleisel/zld\">https://github.com/michaeleisel/zld</a> but haven't used it myself yet.</p>",
        "id": 203771043,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594674221
    },
    {
        "content": "<p>Oh btw <span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> I missed that you were using <code>-i</code>, you can set that permanently in config.toml with incremental = true</p>",
        "id": 203772664,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594675071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> it's only confusing because \"stage1 binary\" can be seen as a thing, even though it's really not what it looks like</p>",
        "id": 203780451,
        "sender_full_name": "eddyb",
        "timestamp": 1594680195
    },
    {
        "content": "<p>like I bet if it wasn't <code>stage1/bin/rustc</code> but <code>stage0to1/bin/rustc</code> it'd make more sense?</p>",
        "id": 203780493,
        "sender_full_name": "eddyb",
        "timestamp": 1594680223
    },
    {
        "content": "<p>(and <code>x.py build --stage 1</code> would build all the way to having a <code>stage1to2/bin/rustc</code> but no further into <code>stage2-*</code>)</p>",
        "id": 203780555,
        "sender_full_name": "eddyb",
        "timestamp": 1594680252
    },
    {
        "content": "<p>the directories <em>literally</em> named <code>stageN</code> are the wrong ones currently, in that they're \"between\" stages</p>",
        "id": 203780669,
        "sender_full_name": "eddyb",
        "timestamp": 1594680296
    },
    {
        "content": "<p><code>stageN-*</code> however, match perfectly</p>",
        "id": 203780682,
        "sender_full_name": "eddyb",
        "timestamp": 1594680308
    },
    {
        "content": "<p>so currently, this is what it looks like:</p>\n<ul>\n<li><code>stage0/bin/rustc</code> is used to build <code>srage0-{std,rustc}</code></li>\n<li><code>stage0-rustc/release/rustc</code> is copied to <code>stage1/bin/rustc</code></li>\n<li><code>stage1/bin/rustc</code> is used to build <code>srage1-{std,rustc}</code></li>\n<li><code>stage1-rustc/release/rustc</code> is copied to <code>stage2/bin/rustc</code></li>\n</ul>",
        "id": 203780923,
        "sender_full_name": "eddyb",
        "timestamp": 1594680484
    },
    {
        "content": "<p>we could probably not do that last step unless you're actually building anything <em>at</em> stage2</p>",
        "id": 203780960,
        "sender_full_name": "eddyb",
        "timestamp": 1594680514
    },
    {
        "content": "<p>and frankly, the <code>stageN</code> directories... we could name them with \"sysroot\" in their names or something, or even just try to hide them, idk</p>",
        "id": 203780977,
        "sender_full_name": "eddyb",
        "timestamp": 1594680540
    },
    {
        "content": "<p>but they're basically \"output of stage N-1, input of stage N\", and used as \"sysroots\" to do the build, they're not <em>the</em> stage</p>",
        "id": 203781012,
        "sender_full_name": "eddyb",
        "timestamp": 1594680584
    },
    {
        "content": "<p>the only usecase for poking at those directories that is currently \"official\" is <code>rustup toolchain link</code>, and we could probably solve that by having a <code>x.py symstall</code> or <code>x.py rustup-link</code> or w/e functionality for hooking them up</p>",
        "id": 203781106,
        "sender_full_name": "eddyb",
        "timestamp": 1594680645
    },
    {
        "content": "<p>bonus: <code>x.py symstall</code> could work for system-wide non-rustup \"dev installation\"</p>",
        "id": 203781124,
        "sender_full_name": "eddyb",
        "timestamp": 1594680664
    },
    {
        "content": "<p>(in case you need to test that)</p>",
        "id": 203781131,
        "sender_full_name": "eddyb",
        "timestamp": 1594680672
    },
    {
        "content": "<p>There's also the usecase of using <code>rustfmt</code> in e.g. rust-analyzer</p>",
        "id": 203781223,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594680728
    },
    {
        "content": "<p>and the best part is that (I hope) e.g. the <code>rustc</code> symlink and the <code>rustlib</code> one can be separate, and the actual files live wherever the build system needs them to</p>",
        "id": 203781248,
        "sender_full_name": "eddyb",
        "timestamp": 1594680765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> what do you mean?</p>",
        "id": 203781255,
        "sender_full_name": "eddyb",
        "timestamp": 1594680770
    },
    {
        "content": "<p>the executables would be <em>somewhere</em>, RA should definitely not hardcode any paths into <code>build/</code> though</p>",
        "id": 203781269,
        "sender_full_name": "eddyb",
        "timestamp": 1594680788
    },
    {
        "content": "<p>I mean, for <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html#configuring-rust-analyzer-for-rustc\">this</a> kind of thing</p>",
        "id": 203781304,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1594680828
    },
    {
        "content": "<p>yeah we'd just change that</p>",
        "id": 203781347,
        "sender_full_name": "eddyb",
        "timestamp": 1594680843
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/rust/issues/59864\">https://github.com/rust-lang/rust/issues/59864</a> which has some helpful explanations leading to a mental model of rustc's staging</p>",
        "id": 203923701,
        "sender_full_name": "RalfJ",
        "timestamp": 1594798127
    }
]