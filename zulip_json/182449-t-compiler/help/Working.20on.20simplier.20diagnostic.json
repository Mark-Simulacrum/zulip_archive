[
    {
        "content": "<p>Hey! Decided to upload intermediate work to ask a couple questions, <a href=\"https://github.com/rust-lang/rust/pull/76362\">https://github.com/rust-lang/rust/pull/76362</a>. Can someone, take a look? :) I've decided to draft pull request for a discussion.</p>",
        "id": 209165274,
        "sender_full_name": "Nikita Krupitskas",
        "timestamp": 1599289174
    },
    {
        "content": "<blockquote>\n<p>how to understand which ty from this array should I get, i mean borrow problem can be 2nd 3rd.. any argument in array?</p>\n</blockquote>\n<p>I'd run the check for every argument</p>",
        "id": 209175212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599307925
    },
    {
        "content": "<blockquote>\n<p>As I see, Ty has TyKind and I can be asked is it Rptr, but where to get another Ty to compare it kinds?</p>\n</blockquote>\n<p>I think this is what <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> meant by</p>\n<blockquote>\n<p>at that point you don't have access to the closure expression, but you get it using self.tcx.hir().get_if_local(found_did.unwrap())</p>\n</blockquote>\n<p>You should check the actual type against the type expected for the closure.</p>",
        "id": 209175350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599308169
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209175362,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599308208
    },
    {
        "content": "<p>Okay, I've sit back and did little progress. One another question. So now I have all input variables through</p>\n<div class=\"codehilite\"><pre><span></span><code>let found_node = match found_did {\n                    Some(found_did) =&gt; self.tcx.hir().get_if_local(found_did),\n                    None =&gt; None,\n                };\n</code></pre></div>\n\n\n<p>But how to get expected type per input?<br>\nI mean I see example: <br>\nlet expected = expected_ref.skip_binder().substs.type_at(1);<br>\nBut why we reference type_at(1)?</p>",
        "id": 209422319,
        "sender_full_name": "Nikita Krupitskas",
        "timestamp": 1599588041
    },
    {
        "content": "<p>I don't know much about this part of the compiler ... <code>type_at</code> might be <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/subst/type.InternalSubsts.html#method.type_at\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/subst/type.InternalSubsts.html#method.type_at</a> ?</p>",
        "id": 209422703,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599588232
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/ty.html\">https://rustc-dev-guide.rust-lang.org/ty.html</a> might have more info too</p>",
        "id": 209422729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599588243
    },
    {
        "content": "<p>oof, pretty detailed documentation, big thanks, sounds like I actually need to read it first :D</p>",
        "id": 209423339,
        "sender_full_name": "Nikita Krupitskas",
        "timestamp": 1599588602
    },
    {
        "content": "<p>(side note: you could also check out <a class=\"stream\" data-stream-id=\"147480\" href=\"/#narrow/stream/147480-t-compiler.2Fwg-diagnostics\">#t-compiler/wg-diagnostics</a> and probably ask there as well )</p>",
        "id": 209461675,
        "sender_full_name": "DPC",
        "timestamp": 1599612839
    }
]