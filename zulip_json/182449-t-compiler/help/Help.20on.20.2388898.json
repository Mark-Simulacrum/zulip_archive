[
    {
        "content": "<p>I am lost on an an issue I am working on, and could use some help.</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/86431\">Original Issue</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/88898\">PR</a></p>\n<p>When I run <code>./x.py test debuginfo</code>, the only test that fails is <code>pretty-slices.rs</code>. The failure happens when checking the output of <code>lldb</code>. When in <code>lldb</code> and running <code>print mut_slice</code>, the output is wrong. </p>\n<p>What the output _should_ be:<br>\n<code>(&amp;mut [i32]) $1 = size=4 { [0] = 2 [1] = 3 [2] = 5 [3] = 7 }</code></p>\n<p>What it is:<br>\n<code>(&amp;mut &amp;[i32]) $1 = { data_ptr = 0x00007ffeefbff2d8 length = 4 } </code></p>\n<p><a href=\"http://pretty-slices.rs\">pretty-slices.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mut_slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">str_slice</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"string slice\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">mut_str_slice_buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">\"mutable string slice\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mut_str_slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mut_str_slice_buffer</span><span class=\"p\">.</span><span class=\"n\">as_mut_str</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// #break</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My guess is that <code>compute_debuginfo_type_name()</code> is not bothering to compute the string for the array that <code>mut_slice</code> points to, but this seems wrong because there isn't the same error for <code>slice</code>.</p>",
        "id": 254083325,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1632157482
    },
    {
        "content": "<p>It looks like it has the wrong type: <code>&amp;mut [i32]</code> is a mutable slice of <code>i32</code>s while <code>&amp;mut &amp;[i32]</code> is a mutable reference to an immutable slice of <code>i32</code>s. I'm guessing the pretty printer for slices isn't kicking in because it thinks it's a reference not a slice. But why does it think it's a reference ... ?</p>",
        "id": 254084397,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1632157941
    },
    {
        "content": "<p>My only guess on that is maybe the mapping <code>(Ty&lt;'tcx&gt;, bool)</code> -&gt; <code>String</code> is incorrect? I might try actually hashing a <code>TyKind</code> to see if that is more accurate. This is nothing more than a guess though..</p>",
        "id": 254089012,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1632159814
    },
    {
        "content": "<p>There is also this little tidbit:</p>\n<div class=\"codehilite\"><pre><span></span><code>print str_slice\n(&amp;str) $2 = &quot;string slice&quot; { data_ptr = 0x0000000100003e58 &quot;string slicemutable string slicecalled `Result::unwrap()` on an `Err` value&quot; length = 12 }\n</code></pre></div>",
        "id": 254089137,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1632159849
    }
]