[
    {
        "content": "<p>Hi I'm trying to understand how stdio::_print_to works internally,  in libstd/io/stdio.rs</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">thread_local</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Stdout used by print! and println! macros</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">LOCAL_STDOUT</span>: <span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>LOCAL_STDOUT was initialized to None, but when I run a simple  \"Hello Rust\" program with rust-gdb, I saw the value is not None.<br>\n p local_s<br>\n$1 = (struct LocalKey&lt;core::cell::RefCell&lt;core::option::Option&lt;alloc::boxed::Box&lt;Write&gt;&gt;&gt;&gt; *) 0x5555558227d8<br>\nMy question is who initialized LOCAL_STDOUT? Thanks.</p>",
        "id": 196340396,
        "sender_full_name": "yunhua",
        "timestamp": 1588700150
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L524-L542\" title=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L524-L542\">https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L524-L542</a></p>",
        "id": 196340545,
        "sender_full_name": "bjorn3",
        "timestamp": 1588700228
    },
    {
        "content": "<p>Wait, wrong code</p>",
        "id": 196340653,
        "sender_full_name": "bjorn3",
        "timestamp": 1588700286
    },
    {
        "content": "<p><code>LOCAL_STDOUT</code> should only be <code>Some</code> when during tests.</p>\n<p>Looking at the code I see that <code>_print calls </code>print_to<code> with a reference to </code>LOCAL_STDOUT`: <a href=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L890\" title=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L890\">https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L890</a></p>\n<p><code>print_to</code> then simply uses the global output when <code>LOCAL_STDOUT</code> is none: <a href=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L854-L880\" title=\"https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L854-L880\">https://github.com/rust-lang/rust/blob/f8d394e5184fe3af761ea1e5ba73f993cfb36dfe/src/libstd/io/stdio.rs#L854-L880</a></p>",
        "id": 196341255,
        "sender_full_name": "bjorn3",
        "timestamp": 1588700600
    },
    {
        "content": "<p>Thanks! <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>    seems LOCAL_STDOUT is not none in my simple \"Hello Rust\" program.  I compiled rustc by myself, so line number is little different. </p>\n<div class=\"codehilite\"><pre><span></span><code>Breakpoint 1, std::io::stdio::print_to::_$u7b$$u7b$closure$u7d$$u7d$::h42c135b27158b526 (s=0x7ffff7fa0760) at src/libstd/io/stdio.rs:781\n781             if let Ok(mut borrowed) = s.try_borrow_mut() {\n(gdb) p s\n$2 = (struct RefCell&lt;core::option::Option&lt;alloc::boxed::Box&lt;Write&gt;&gt;&gt; *) 0x7ffff7fa0760\n(gdb) n\n781             if let Ok(mut borrowed) = s.try_borrow_mut() {\n782                 if let Some(w) = borrowed.as_mut() {\n(gdb) p borrowed\n$3 = RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;Write&gt;&gt;&gt; = {value = 0x7ffff7fa0768, borrow = BorrowRefMut = {borrow = 0x7ffff7fa0760}}\n</code></pre></div>\n\n\n<p>borrowed.as_mut() returned None, so it called global_s().write_fmt(args)<br>\nI don't understand who set LOCAL_STDOUT to Some()</p>\n<p>using grep, I found  LOCAL_STDOUT in src/librustc_codegen_llvm/consts.rs, not sure if that related.</p>",
        "id": 196342869,
        "sender_full_name": "yunhua",
        "timestamp": 1588701445
    },
    {
        "content": "<p>What does <code>borrowed.value</code> dereference to? <code>borrowed.value</code> is a pointer to the <code>Option&lt;Box&lt;dyn Write&gt;&gt;</code>.</p>",
        "id": 196350178,
        "sender_full_name": "bjorn3",
        "timestamp": 1588705038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252928\">@yunhua</span> ^</p>",
        "id": 196358672,
        "sender_full_name": "bjorn3",
        "timestamp": 1588708557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>(gdb) p borrowed\n$16 = RefMut&lt;core::option::Option&lt;alloc::boxed::Box&lt;Write&gt;&gt;&gt; = {value = 0x7ffff7fa0768, borrow = BorrowRefMut = {borrow = 0x7ffff7fa0760}}\n(gdb) p *borrowed.value\n$17 = Option&lt;alloc::boxed::Box&lt;Write&gt;&gt;\n(gdb) x/2w borrowed.value\n0x7ffff7fa0768: 0       0\n</code></pre></div>\n\n\n<p>So can we confirm borrowed.value is None here?  As x/2w given 0,0.   Thanks.</p>",
        "id": 196362048,
        "sender_full_name": "yunhua",
        "timestamp": 1588710217
    }
]