[
    {
        "content": "<p>Hi everyone! I'm experimenting with automatic test generation for Rust code. As I require type information, I want to generate code based on the MIR instead of using a proc-macro. I thought about using rustc a library with the rustc_driver interface. Would it be possible to generate MIR code in the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/trait.Callbacks.html#method.after_analysis\"><code>after_analysis</code></a> callback, and then continue the normal compilation?</p>",
        "id": 219992820,
        "sender_full_name": "Dominik Stolz",
        "timestamp": 1608045418
    },
    {
        "content": "<p>Rustc uses a query based architecture which means that MIR generation for one function can be interleaved with typechecking of another. For example when using a <code>const fn</code> inside the length of an array.</p>",
        "id": 219993010,
        "sender_full_name": "bjorn3",
        "timestamp": 1608045487
    },
    {
        "content": "<p>At best you can override the provider for the <code>optimized_mir</code> query.</p>",
        "id": 219993053,
        "sender_full_name": "bjorn3",
        "timestamp": 1608045514
    },
    {
        "content": "<p>Okay thanks! But how would I go about overriding the Provider from the callback? I thought the list of providers is only populated once when the TyCtxt is created.</p>",
        "id": 220003726,
        "sender_full_name": "Dominik Stolz",
        "timestamp": 1608049523
    },
    {
        "content": "<p>You have to override it from <code>config.override_queries</code> which can be accessed in <code>Callbacks::config()</code>. There is no way to change it later on. That would cause inconsistent results anyway as changing the provider won't invalidate any already executed queries.</p>",
        "id": 220006921,
        "sender_full_name": "bjorn3",
        "timestamp": 1608050696
    },
    {
        "content": "<p>Ah thanks! But does this approach only allow to transform existing items or can I also generate new items? Would it be possible to have a custom trait that behaves similar to a auto trait? (i.e. automatically generate implementations for suitable types) Further, it appears to me that overriding the existing provider would mean that <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/transform/fn.run_optimization_passes.html\">run_optimization_passes</a> is never called.</p>",
        "id": 220024695,
        "sender_full_name": "Dominik Stolz",
        "timestamp": 1608058426
    },
    {
        "content": "<p>You can't add new items without either modifying the source or changing the AST (<code>Queries::parse</code>) from <code>Callbacks::after_parsing</code> or <code>Callbacks::after_expansion</code>. The HIR is immutable.</p>",
        "id": 220025840,
        "sender_full_name": "bjorn3",
        "timestamp": 1608058922
    }
]