[
    {
        "content": "<p>Whenever I run perf locally I get quite different results from what rust-timer outputs. Usually the difference doesn't matter much and I can still fix regressions, but today I got <a href=\"https://perf.rust-lang.org/compare.html?start=25ec8273855fde2d72ae877b397e054de5300e10&amp;end=d333b4430fb1577f7c0f0e650ac2f49a6fd04048\">this</a> from rust-perf but completely neutral results locally. I tried with <code>incremental=false</code> but same thing. Are there any other differences in the compilation options used by rust-perf?</p>",
        "id": 256777781,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633715132
    },
    {
        "content": "<p>By different I mean I sometimes see an improvement in one and a regression in the other, or a 24% regression turns into a 3% regression, etc</p>",
        "id": 256778028,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633715208
    },
    {
        "content": "<p>perf compiles with 1 CGU and also executes PGO</p>",
        "id": 256778189,
        "sender_full_name": "The 8472",
        "timestamp": 1633715284
    },
    {
        "content": "<p>another option is to download the CI artifacts and use them for testing</p>",
        "id": 256778578,
        "sender_full_name": "The 8472",
        "timestamp": 1633715470
    },
    {
        "content": "<p>oh, that would explain it. What's PGO?</p>",
        "id": 256780170,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716069
    },
    {
        "content": "<p>ah, Profile Guided Optimization. That sounds harder to set up, I'll see if cgu=1 is enough</p>",
        "id": 256780659,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716249
    },
    {
        "content": "<p>The standard library is build with 1 CGU, the rustc compiler is built with the default 16 CGUs per crate. Building rustc with single CGU will give you very different perf results <a href=\"https://github.com/rust-lang/rust/pull/87650\">https://github.com/rust-lang/rust/pull/87650</a>.</p>",
        "id": 256780977,
        "sender_full_name": "tm",
        "timestamp": 1633716384
    },
    {
        "content": "<p>If you would like to understand CI perf results, I would recommend using CI artifacts.</p>",
        "id": 256781020,
        "sender_full_name": "tm",
        "timestamp": 1633716407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Running.20perf.20locally.20gives.20very.20different.20results/near/256781020\">said</a>:</p>\n<blockquote>\n<p>If you would like to understand CI perf results, I would recommend using CI artifacts.</p>\n</blockquote>\n<p>that wouldn't work for me, my use-case is when I'm working on a PR that shows perf regressions, I want to find the commit that regressed</p>",
        "id": 256781308,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716529
    },
    {
        "content": "<p>fwiw you can build pretty much identical artifacts to CI locally, but it is a pretty slow endeavor. Locally on 3950X (16 physical cores, 32 vCPU) that takes me 1h15 min per build</p>",
        "id": 256781359,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Running.20perf.20locally.20gives.20very.20different.20results/near/256780977\">said</a>:</p>\n<blockquote>\n<p>The standard library is build with 1 CGU, the rustc compiler is built with the default 16 CGUs per crate. Building rustc with single CGU will give you very different perf results <a href=\"https://github.com/rust-lang/rust/pull/87650\">https://github.com/rust-lang/rust/pull/87650</a>.</p>\n</blockquote>\n<p>oh wait, I thought you said that rustc is compiled with 1 cgu when running perf</p>",
        "id": 256781367,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Running.20perf.20locally.20gives.20very.20different.20results/near/256781359\">said</a>:</p>\n<blockquote>\n<p>fwiw you can build pretty much identical artifacts to CI locally, but it is a pretty slow endeavor. Locally on 3950X (16 physical cores, 32 vCPU) that takes me 1h15 min per build</p>\n</blockquote>\n<p>how would I get that?</p>",
        "id": 256781409,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716582
    },
    {
        "content": "<p><code>rm -rf obj/build &amp;&amp; DEPLOY=1 ./src/ci/docker/run.sh dist-x86_64-linux</code> will get you a dist directory with the right tarballs in ./obj/build/.../dist</p>",
        "id": 256781576,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716658
    },
    {
        "content": "<p>which I \"install\" with:</p>\n<div class=\"codehilite\"><pre><span></span><code>tar xf obj/build/dist/rust-std-nightly-x86_64-unknown-linux-gnu.tar.xz\n./rust-std-nightly-x86_64-unknown-linux-gnu/install.sh --prefix=/home/mark/.rustup/toolchains/$1 --disable-ldconfig\nrm -r rust-std-nightly-x86_64-unknown-linux-gnu\ntar xf obj/build/dist/rustc-nightly-x86_64-unknown-linux-gnu.tar.xz\n./rustc-nightly-x86_64-unknown-linux-gnu/install.sh --prefix=/home/mark/.rustup/toolchains/$1 --disable-ldconfig\nrm -r rustc-nightly-x86_64-unknown-linux-gnu\ntar xf obj/build/dist/cargo-nightly-x86_64-unknown-linux-gnu.tar.xz\n./cargo-nightly-x86_64-unknown-linux-gnu/install.sh --prefix=/home/mark/.rustup/toolchains/$1 --disable-ldconfig\nrm -r cargo-nightly-x86_64-unknown-linux-gnu\n</code></pre></div>",
        "id": 256781682,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716712
    },
    {
        "content": "<p>ah I was hoping for an appropriate <code>config.toml</code> setup. That sounds like it would indeed need hours for every commit</p>",
        "id": 256781693,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716716
    },
    {
        "content": "<p>yeah, this is not incremental currently</p>",
        "id": 256781761,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716734
    },
    {
        "content": "<p>you can <em>maybe</em> try running src/ci/pgo.sh locally</p>",
        "id": 256781777,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716741
    },
    {
        "content": "<p>does pgo make a huge difference? could I maybe ignore it?</p>",
        "id": 256781811,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716759
    },
    {
        "content": "<p>and emulating CI environment by taking options from src/ci/run.sh and such</p>",
        "id": 256781815,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716761
    },
    {
        "content": "<p>are you comparing local commit vs. local commit in your current attempts?</p>",
        "id": 256781897,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716799
    },
    {
        "content": "<p>yes</p>",
        "id": 256781909,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716804
    },
    {
        "content": "<p>PGO can make a big difference</p>",
        "id": 256781948,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716822
    },
    {
        "content": "<p>and sometimes does pretty weird things</p>",
        "id": 256781982,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716836
    },
    {
        "content": "<p>ah :/</p>",
        "id": 256782062,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633716859
    },
    {
        "content": "<p>you <em>could</em> download the CI pgo collected profdata files and pass them to your local build</p>",
        "id": 256782178,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716909
    },
    {
        "content": "<p>but there's no guarantee that they are \"close enough\"</p>",
        "id": 256782199,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716916
    },
    {
        "content": "<p>but it might give you some closer approximation, at least</p>",
        "id": 256782223,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716925
    },
    {
        "content": "<p><code>curl https://ci-artifacts.rust-lang.org/rustc-builds/9d861e7379a238b570cab700aa938a014f881e94/reproducible-artifacts-nightly-x86_64-unknown-linux-gnu.tar.xz | tar xJf -</code>, for example, and then you can find rustc-pgo.profdata and llvm-pgo.profdata in there.</p>",
        "id": 256782366,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716980
    },
    {
        "content": "<p>I've not tried doing that yet though.</p>",
        "id": 256782382,
        "sender_full_name": "simulacrum",
        "timestamp": 1633716987
    },
    {
        "content": "<p>huh ok I'll have a look, thanks</p>",
        "id": 256782503,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633717040
    },
    {
        "content": "<p>In cranelift-codegen-check one clear regression is related to <code>TyCtxt::eval_stability</code> (there is also increase in related queries).</p>",
        "id": 256783289,
        "sender_full_name": "tm",
        "timestamp": 1633717368
    },
    {
        "content": "<p>well, I tried to build as usual with <code>--rust-profile-use</code> and <code>llvm-profile-use</code> but the results look the same as before. Could be that <code>x.py build</code> ignores those I dunno</p>",
        "id": 256787292,
        "sender_full_name": "Nadrieril",
        "timestamp": 1633718940
    }
]