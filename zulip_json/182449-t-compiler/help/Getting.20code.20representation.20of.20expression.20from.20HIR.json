[
    {
        "content": "<p>I'm trying to make a clippy lint that warns against the usage of e.g. <code>u16::from_str_radix(string, 10)</code> (the 10 is specific) and instead replace it with <code>string.parse()</code>.</p>\n<p>To recommend the second option though, I need to have access to how the original expression that produced <code>string</code> looks like. I'm asking this here instead of at <a class=\"stream\" data-stream-id=\"257328\" href=\"/#narrow/stream/257328-clippy\">#clippy</a> , because <code>LateLintPass</code> only gives me access to a <code>rustc_hir::Expr</code> and a <code>LateLintContext</code> when linting on expressions, which seem to come from the compiler and are not specific to clippy.</p>\n<p>Is there any way that I can do what I want?</p>",
        "id": 225927435,
        "sender_full_name": "boolean_coercion",
        "timestamp": 1612999274
    },
    {
        "content": "<p>Clippy deals with the compiler a lot so it's still not a bad idea to ask there</p>",
        "id": 225941378,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613010266
    },
    {
        "content": "<p>I'm confused what you want to do - what do you mean by \"what the expression looks like\"?</p>",
        "id": 225941396,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613010295
    },
    {
        "content": "<p>I meant, for example, getting a string from some function invocation (Call or MethodCall) instead of a variable (or QPath, if I understand that part of HIR correctly) in the first argument of the function, and then using what the user wrote to suggest an alternative.</p>\n<p>Those aren't the only two cases of course, and I'm sure there's a better way than stringifying each type of Expr manually <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 225958866,
        "sender_full_name": "boolean_coercion",
        "timestamp": 1613031066
    },
    {
        "content": "<p>I'll ask on <a class=\"stream\" data-stream-id=\"257328\" href=\"/#narrow/stream/257328-clippy\">#clippy</a> too though</p>",
        "id": 225958875,
        "sender_full_name": "boolean_coercion",
        "timestamp": 1613031082
    },
    {
        "content": "<p>I would recommend against using the original code for suggestions, it means the diagnostics are dependent on formatting which makes them more fragile</p>",
        "id": 226000958,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613054929
    },
    {
        "content": "<p>you could do something like <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/source_map/struct.SourceMap.html#method.span_to_snippet\"><code>span_to_snippet</code></a> on <code>string</code> and then show your suggestion from there</p>",
        "id": 226001198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613055018
    },
    {
        "content": "<p>Someone on <a class=\"stream\" data-stream-id=\"257328\" href=\"/#narrow/stream/257328-clippy\">#clippy</a> already helped me, but thanks :D</p>",
        "id": 226027572,
        "sender_full_name": "boolean_coercion",
        "timestamp": 1613064628
    }
]