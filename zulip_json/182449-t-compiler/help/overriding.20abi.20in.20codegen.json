[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> for overriding a certain ABI like C (like you mentioned some time ago), do i need to reimplement <code>fn_abi_new_uncached</code> from LayoutCx or is there a way to only override the pass mode for each arg?</p>",
        "id": 259808260,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635714163
    },
    {
        "content": "<p>take a look at what rust-gpu does: <a href=\"https://github.com/EmbarkStudios/rust-gpu/blob/c4eb7af88ee0baf556cc6b46389a2e71b34919bf/crates/rustc_codegen_spirv/src/abi.rs#L57\">https://github.com/EmbarkStudios/rust-gpu/blob/c4eb7af88ee0baf556cc6b46389a2e71b34919bf/crates/rustc_codegen_spirv/src/abi.rs#L57</a></p>",
        "id": 259809333,
        "sender_full_name": "bjorn3",
        "timestamp": 1635715907
    },
    {
        "content": "<p>Oh great</p>",
        "id": 259809456,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635716113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Weird, i tried overriding any aggregates to pass by value, but that makes rustc ICE:</p>\n<div class=\"codehilite\"><pre><span></span><code>internal compiler error: /rustc/1f12ac87296ac61ec002e0243e7ad5a50364da35\\compiler\\rustc_codegen_ssa\\src\\mir\\block.rs:1381:21: place local already assigned to\n</code></pre></div>\n<p>using </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">abi</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">abi</span>::<span class=\"n\">Abi</span>::<span class=\"n\">ScalarPair</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">abi</span>::<span class=\"n\">Abi</span>::<span class=\"n\">Aggregate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">mode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PassMode</span>::<span class=\"n\">Direct</span><span class=\"p\">(</span><span class=\"n\">ArgAttributes</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is this the incorrect way of doing this? i could not find anything in rustc's abi stuff that makes arguments direct, only indirect, and im writing this at like 2 am so this might be very wrong <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 261347465,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636790576
    },
    {
        "content": "<p>oh wait, it works if i check if the passmode is indirect before overriding, im guessing some scalar or aggregate is using an exotic pass mode and it doesnt like me overriding it, nevermind, sorry <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261347603,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636790807
    },
    {
        "content": "<p>also why is <code>is_aggregate()</code> private? it means i can't use it and i need to make my own scuffed version :(</p>",
        "id": 261347748,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636791013
    },
    {
        "content": "<p>If the pass mode is Pair, it probably must not be overriden. This pass mode can't exist for repr(C) types, but it is used for fat pointers. Especially in case of pointers/references to trait objects the compiler assumes that Pair is used as pass mode.</p>",
        "id": 261352232,
        "sender_full_name": "bjorn3",
        "timestamp": 1636797681
    },
    {
        "content": "<p>I would like to guarantee that slices are passed as two parameters, but im not sure if rustc always passes slices as a scalar pair</p>",
        "id": 261370168,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636823282
    },
    {
        "content": "<p>Because id like to make the gpu kernels “compatible” with how you would expect CUDA C++ to pass certain things</p>",
        "id": 261370211,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636823336
    },
    {
        "content": "<p>And cuda expects everything to be passed directly, by value, for the kernels that is, for “intermediate” functions thats no issue. Which is why i overrode the passmode for structs in there</p>",
        "id": 261370271,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636823406
    },
    {
        "content": "<blockquote>\n<p>would like to guarantee that slices are passed as two parameters</p>\n</blockquote>\n<p>That is what a pass mode of <code>Pair</code> does.</p>",
        "id": 261370928,
        "sender_full_name": "bjorn3",
        "timestamp": 1636824317
    },
    {
        "content": "<p>But is it guaranteed that rustc will always pass slices as scalar pairs?</p>",
        "id": 261371030,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636824480
    },
    {
        "content": "<p>ohh you mean override any slice Ty as a Pair passmode?</p>",
        "id": 261371095,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636824540
    },
    {
        "content": "<p>That should guarantee that it’s always passed as a pair even if rustc already tries passing it as a pair, right?</p>",
        "id": 261371119,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636824587
    },
    {
        "content": "<p>if im doing that, should i worry about ArgAttributes or do they not cause issues in this case?</p>",
        "id": 261371223,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636824722
    },
    {
        "content": "<p>Current rustc versions always use <code>Pair</code> for fat pointers, including <code>&amp;[T]</code>, <code>&amp;mut [T]</code>, <code>Box&lt;[T]&gt;</code> and <code>Rc&lt;[T]&gt;</code>.</p>",
        "id": 261371417,
        "sender_full_name": "bjorn3",
        "timestamp": 1636825080
    },
    {
        "content": "<p>For any newer rustc versions that may or may not do this, you will likely have to change the backend anyway to make it compile.</p>",
        "id": 261371465,
        "sender_full_name": "bjorn3",
        "timestamp": 1636825129
    },
    {
        "content": "<p>Well if it changed it would make kernels segfault (well, the gpu equivalent), so id rather not have that happen randomly across updates, so should manually setting the pair mode for slices and stuff be enough to guarantee this does not change?</p>",
        "id": 261371539,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636825258
    },
    {
        "content": "<p>If it changes, you will notice it quickly enough, right? I believe it has been the case for many years (I think even before rust 1.0) and I don't think it will change anytime soon.</p>",
        "id": 261371600,
        "sender_full_name": "bjorn3",
        "timestamp": 1636825368
    },
    {
        "content": "<p>Well gpu segfaults can be caused by many things, a parameter change would probably not be on my list of potential causes</p>",
        "id": 261371610,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636825437
    },
    {
        "content": "<p>although if rustc ever changed this we would probably have ptx validation done or have some form of the backend upstreamed by that point</p>",
        "id": 261371661,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636825487
    }
]