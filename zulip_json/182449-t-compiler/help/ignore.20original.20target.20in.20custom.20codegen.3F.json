[
    {
        "content": "<p>So i am writing a custom rustc backend for NVVM IR (a subset of llvm ir for cuda gpu kernels), hoping to show off a basic kernel soon. But i am kind of stuck on something im not sure how to handle. NVVM only accepts <code>nvptx64-nvidia-cuda</code> and <code>nvptx-nvidia-cuda</code> as its targets and will error if you give it anything else. It also does not accept any ABI annotations, everything is generated using the ptx ABI. So i was thinking, should i just ignore the original target for the session and generate everything for nvptx, or should i not ignore the original target and error if its not nvptx?</p>\n<p>Both approaches have pros and cons, ignoring the original target:</p>\n<ul>\n<li>means users can cfg for arches just fine without needing to do some weird feature/env trickery</li>\n<li>\n<p>makes it easier to potentially compile the kernels using \"normal\" rustc to run them on the cpu (a future goal id like to explore)</p>\n</li>\n<li>\n<p>makes it way easier for me to miss things that are target/abi specific in the codegen (i pull a lot of code from rustc_codegen_llvm) which may potentially result in unsoundness</p>\n</li>\n<li>makes it harder to cfg for the gpu backend (although users could just target nvptx as normal then cfg for that, this isnt stopping that)</li>\n</ul>\n<p>forcing nvptx:</p>\n<ul>\n<li>leaves no room for error in translating codegen code</li>\n<li>potentially might cause <span aria-label=\"bug\" class=\"emoji emoji-1f41b\" role=\"img\" title=\"bug\">:bug:</span>s for target/nvvm mismatches, for example, the target data layout and the accepted data layouts for nvvm for some reason appear different</li>\n</ul>",
        "id": 244100208,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624853448
    }
]