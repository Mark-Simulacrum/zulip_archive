[
    {
        "content": "<p><code>x.py doc -h -v</code> claims that I should be able to call <code>./x.py doc compiler/rustc_mir_build</code> to document only that crate. If I try that, I get instead \"error: unknown debugging option: <code>normalize-docs</code>\" \"error: could not document <code>rustc_error_codes</code>\"</p>",
        "id": 219677965,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607732303
    },
    {
        "content": "<p>I tried this on latest master after <code>rm -rf build</code>. Also <code>./x.py doc</code> works fine</p>",
        "id": 219677993,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607732330
    },
    {
        "content": "<p>Anyone know what could be happening?</p>",
        "id": 219677997,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607732340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> I broke this in <a href=\"https://github.com/rust-lang/rust/pull/79525\">https://github.com/rust-lang/rust/pull/79525</a></p>",
        "id": 219681458,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736160
    },
    {
        "content": "<p>someone (you or me) needs to add <code>if stage != 0</code> to that bit</p>",
        "id": 219681467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736177
    },
    {
        "content": "<p>weird that <code>doc</code> on its own works though, maybe it's cached?</p>",
        "id": 219681484,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20single.20crate/near/219681467\">said</a>:</p>\n<blockquote>\n<p>someone (you or me) needs to add <code>if stage != 0</code> to that bit</p>\n</blockquote>\n<p>let me just do this now</p>",
        "id": 219681497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if I leave a <code>// cfg(not(bootstrap))</code> comment, will that be enough for you to find it on the next beta bump?</p>",
        "id": 219681663,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736439
    },
    {
        "content": "<p>Yeah should be I expect</p>",
        "id": 219681684,
        "sender_full_name": "simulacrum",
        "timestamp": 1607736481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20single.20crate/near/219681467\">said</a>:</p>\n<blockquote>\n<p>someone (you or me) needs to add <code>if stage != 0</code> to that bit</p>\n</blockquote>\n<p>wow, that really was it <a href=\"https://github.com/rust-lang/rust/pull/79954\">https://github.com/rust-lang/rust/pull/79954</a></p>",
        "id": 219681739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607736542
    },
    {
        "content": "<p>Neat, thanks!</p>",
        "id": 219685233,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607741686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I applied the change from <a href=\"https://github.com/rust-lang/rust/pull/79954\">https://github.com/rust-lang/rust/pull/79954</a>, and I get a different error now, when running <code>./x.py doc compiler/rustc_mir_build</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;Unable to resolve external crate proc_macro2&#39;, src/librustdoc/core.rs:457:37\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nerror: internal compiler error: unexpected panic\nerror: Unrecognized option: &#39;crate-version&#39;\nerror: could not document `coverage_test_macros`\n</code></pre></div>",
        "id": 219692797,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607753293
    },
    {
        "content": "<p>That looks like a bug in rustdoc :/ I'm not sure without digging into it</p>",
        "id": 219708115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607778398
    },
    {
        "content": "<p>this is from <a href=\"https://github.com/rust-lang/rust/blob/c3ed6681ff8d446e68ce272be4bf66f4145f6e29/src/librustdoc/core.rs#L448\">https://github.com/rust-lang/rust/blob/c3ed6681ff8d446e68ce272be4bf66f4145f6e29/src/librustdoc/core.rs#L448</a></p>",
        "id": 219709841,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607781047
    },
    {
        "content": "<p>since this is in beta I'm not sure it's worth fixing - <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> does it work with<code>doc --stage 1</code>?</p>",
        "id": 219709853,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607781068
    },
    {
        "content": "<p>I guess the real question is whether this is a rustdoc bug or a bootstrap bug</p>",
        "id": 219709919,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607781211
    },
    {
        "content": "<p>in the second case it won't be fixed by promoting nightly to beta</p>",
        "id": 219709922,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607781221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20single.20crate/near/219709853\">said</a>:</p>\n<blockquote>\n<p>since this is in beta I'm not sure it's worth fixing - <span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> does it work with<code>doc --stage 1</code>?</p>\n</blockquote>\n<p>Yes!</p>",
        "id": 219718770,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607794848
    },
    {
        "content": "<p>It compiles everything when I change just docs though, that's painful. I expected <code>--stage 0</code> would avoid that, but that gives me the same <code>Unable to resolve external crate</code> panic as above</p>",
        "id": 219718866,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607795022
    },
    {
        "content": "<p>yeah, this is why stage 0 is the default, building rustc twice is painful</p>",
        "id": 219719458,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607795901
    },
    {
        "content": "<p>not sure why it's not working :/ the fact that proc macro specifically is breaking makes me think something to do with bootstrap</p>",
        "id": 219719469,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607795920
    },
    {
        "content": "<p>It's <code>proc_macro2</code> though, which is a normal crate right? If anything I'd expect <code>proc_macro</code> to have some bootstrap magic, but not <code>proc_macro2</code></p>",
        "id": 219719986,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607796672
    },
    {
        "content": "<p>hmm good point</p>",
        "id": 219721547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607798728
    },
    {
        "content": "<p>I tried documenting a bunch of different compiler crates and it always panics when documenting <code>coverage_test_macros</code>. That's a subcrate of <code>rustc_mir</code> though, so I am surprised it causes errors when trying to document say <code>rustc_ast</code> which can't depend on it</p>",
        "id": 219725284,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607803326
    },
    {
        "content": "<p>I'm not sure <code>doc compiler/x</code> actually does anything different from <code>doc compiler/rustc</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 219725303,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607803368
    },
    {
        "content": "<p>they might all be aliases for documenting the whole compiler</p>",
        "id": 219725305,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607803375
    },
    {
        "content": "<p>Oh x) But <code>x.py -h -v</code> lists all those paths as possible options</p>",
        "id": 219725326,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607803398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20single.20crate/near/219725284\">said</a>:</p>\n<blockquote>\n<p>I tried documenting a bunch of different compiler crates and it always panics when documenting <code>coverage_test_macros</code>. That's a subcrate of <code>rustc_mir</code> though, so I am surprised it causes errors when trying to document say <code>rustc_ast</code> which can't depend on it</p>\n</blockquote>\n<p>if you want to look into this, it would be helpful to know if <code>doc --stage 1</code> loads proc_macro2 from the sysroot or from target/deps</p>",
        "id": 219725327,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607803406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20single.20crate/near/219725326\">said</a>:</p>\n<blockquote>\n<p>Oh x) But <code>x.py -h -v</code> lists all those paths as possible options</p>\n</blockquote>\n<p>So someone somewhere believed that those paths behaved differently</p>",
        "id": 219725335,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607803423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20single.20crate/near/219725327\">said</a>:</p>\n<blockquote>\n<p>if you want to look into this, it would be helpful to know if <code>doc --stage 1</code> loads proc_macro2 from the sysroot or from target/deps</p>\n</blockquote>\n<p>What does this mean? How can I tell the difference?</p>",
        "id": 219725573,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607803727
    },
    {
        "content": "<p>I am not sure. You could look in <code>$(rustc --print sysroot)/lib</code> to see if it has <code>libproc_macro2.rlib</code> or something like that</p>",
        "id": 219725648,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607803816
    },
    {
        "content": "<p>'sysroot' is explained here: <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html?highlight=sysroot#what-is-a-sysroot\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html?highlight=sysroot#what-is-a-sysroot</a></p>",
        "id": 219725654,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607803843
    },
    {
        "content": "<p>for context, the thing that's going wrong is <a href=\"https://github.com/rust-lang/rust/issues/68427#issuecomment-578113028\">https://github.com/rust-lang/rust/issues/68427#issuecomment-578113028</a></p>",
        "id": 219725971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607804349
    },
    {
        "content": "<p>rustdoc is trying to load a crate eagerly and the crate isn't there</p>",
        "id": 219725974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607804360
    },
    {
        "content": "<p>Thanks for the links! Made me think of another solution: turns out coverage_test_macros doesn't use its <code>proc_macro2</code> dependency! That solves this problem, but there's another one now &gt;&lt;</p>",
        "id": 219728197,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607807445
    },
    {
        "content": "<p>I'll open an issue</p>",
        "id": 219728233,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607807515
    },
    {
        "content": "<blockquote>\n<p>doesn't use its dependency</p>\n</blockquote>\n<p>In all seriousness this is probably what caused the bug lol</p>",
        "id": 219728819,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607808294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219725971\">said</a>:</p>\n<blockquote>\n<p>for context, the thing that's going wrong is <a href=\"https://github.com/rust-lang/rust/issues/68427#issuecomment-578113028\">https://github.com/rust-lang/rust/issues/68427#issuecomment-578113028</a></p>\n</blockquote>\n<p>It seems so yeah, because that comment you linked reported the same kind of thing happening on an unused dependency</p>",
        "id": 219728898,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607808389
    },
    {
        "content": "<p>From that comment I would guess rustc ignores it because it's unused, so it's not made available to rustdoc who then tries to load it and crashes.</p>",
        "id": 219729001,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607808512
    },
    {
        "content": "<p>hmm, I wonder if I should change that panic into a no-op</p>",
        "id": 219729112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607808625
    },
    {
        "content": "<p>then we'd get people confused that they can't use <code>proc_macro2</code> in intra-doc links, but that seems strictly better than an ICE</p>",
        "id": 219729127,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607808643
    },
    {
        "content": "<p>I opened an issue that details what I did and the last error I'm now stuck on: <a href=\"https://github.com/rust-lang/rust/issues/79980\">https://github.com/rust-lang/rust/issues/79980</a></p>",
        "id": 219729984,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607809686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> your first and second error message are the same, is that intentional?</p>",
        "id": 219730014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809759
    },
    {
        "content": "<p>... those first and second <code>libstd</code> files are the same <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 219730065,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809806
    },
    {
        "content": "<p>why are they both in stage0-sysroot?</p>",
        "id": 219730070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219730065\">said</a>:</p>\n<blockquote>\n<p>... those first and second <code>libstd</code> files are the same <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n</blockquote>\n<p>oh except one is an rlib and one is an .so</p>",
        "id": 219730078,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219730014\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> your first and second error message are the same, is that intentional?</p>\n</blockquote>\n<p>no, one is <code>_</code> the other is <code>-</code></p>",
        "id": 219730084,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607809840
    },
    {
        "content": "<p>oh I think that's a typo on my part when I added the option lol</p>",
        "id": 219730096,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809866
    },
    {
        "content": "<p>oops</p>",
        "id": 219730099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809872
    },
    {
        "content": "<p>does rustc normalize that during parsing or something?</p>",
        "id": 219730108,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809888
    },
    {
        "content": "<p>and second question - is this fixed by <code>incremental = false</code>?</p>",
        "id": 219730156,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607809925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219730156\">said</a>:</p>\n<blockquote>\n<p>and second question - is this fixed by <code>incremental = false</code>?</p>\n</blockquote>\n<p>Trying that</p>",
        "id": 219730191,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607810024
    },
    {
        "content": "<p>hmm this looks like <a href=\"https://github.com/rust-lang/rust/issues/74976\">https://github.com/rust-lang/rust/issues/74976</a> actually</p>",
        "id": 219730198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607810034
    },
    {
        "content": "<p>huh indeed, and that wasn't fixed</p>",
        "id": 219730695,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607810759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219730156\">said</a>:</p>\n<blockquote>\n<p>and second question - is this fixed by <code>incremental = false</code>?</p>\n</blockquote>\n<p>Nope, same error</p>",
        "id": 219730835,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607810995
    },
    {
        "content": "<blockquote>\n<p>@jyn514 pointed me to this comment, which led me to notice that coverage_test_macros doesn't use its proc_macro2 dependency. So I removed it.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> can you make a PR with this? even if it doesn't fix the issue it's a nice cleanup</p>",
        "id": 219730920,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607811114
    },
    {
        "content": "<p>sure</p>",
        "id": 219730976,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607811205
    },
    {
        "content": "<p>oh! I might know what's going wrong: there are two standard libraries, one is master libstd (<code>library/</code>) and one is beta libstd (<code>rust-std</code>, from CI artifacts)</p>",
        "id": 219731130,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607811438
    },
    {
        "content": "<p>not sure why they'd both be in stage0-sysroot though</p>",
        "id": 219731134,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607811446
    },
    {
        "content": "<p>or only show up when documenting :/</p>",
        "id": 219731135,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607811453
    },
    {
        "content": "<p>I'm surprised that the .rlib and the .so end up in the same directory</p>",
        "id": 219731871,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607812624
    },
    {
        "content": "<p>yeah that seems odd</p>",
        "id": 219731879,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607812636
    },
    {
        "content": "<p>I'll try to see if one of the two doesn't appear if I build instead of doc. Maybe doc is building some things wrong</p>",
        "id": 219731949,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607812737
    },
    {
        "content": "<p>well they're both present on nightly even, so I doubt it's the issue</p>\n<div class=\"codehilite\"><pre><span></span><code>/home/joshua/.local/lib/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-25c6acf8063a3802.rlib\n/home/joshua/.local/lib/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-25c6acf8063a3802.so\n</code></pre></div>",
        "id": 219731971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607812788
    },
    {
        "content": "<p>oh</p>",
        "id": 219732102,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607812990
    },
    {
        "content": "<p>I wanted to diff those files with the ones from nightly or beta, but I can't find some with the same hash</p>",
        "id": 219732241,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813218
    },
    {
        "content": "<p>I would not expect to get useful results from diffing binary files <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 219732252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813240
    },
    {
        "content": "<p>instead maybe you could see if <code>doc --stage 1</code> has the same files generated?</p>",
        "id": 219732254,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813255
    },
    {
        "content": "<p>I would have expected that one of them was the same and the other different or sth</p>",
        "id": 219732297,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813285
    },
    {
        "content": "<p>oh good idea</p>",
        "id": 219732299,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219732297\">said</a>:</p>\n<blockquote>\n<p>I would have expected that one of them was the same and the other different or sth</p>\n</blockquote>\n<p>As in, if bootstrap is mixing between beta and master libstd, maybe one of those files is copied from beta and not the other</p>",
        "id": 219732378,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813453
    },
    {
        "content": "<p>you may notice I'm out of my depth ^^</p>",
        "id": 219732383,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219732378\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219732297\">said</a>:</p>\n<blockquote>\n<p>I would have expected that one of them was the same and the other different or sth</p>\n</blockquote>\n<p>As in, if bootstrap is mixing between beta and master libstd, maybe one of those files is copied from beta and not the other</p>\n</blockquote>\n<p>well, that might have been a red herring on my part haha</p>",
        "id": 219732388,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219732383\">said</a>:</p>\n<blockquote>\n<p>you may notice I'm out of my depth ^^</p>\n</blockquote>\n<p>oh me too don't worry <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219732391,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813507
    },
    {
        "content": "<p>well, <code>--stage 1</code> builds different files</p>",
        "id": 219732436,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813530
    },
    {
        "content": "<p>like a different hash, right?</p>",
        "id": 219732449,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813602
    },
    {
        "content": "<p>but does it still build a .rlib and a .so?</p>",
        "id": 219732451,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813609
    },
    {
        "content": "<p>different hash in the filename, different sizes</p>",
        "id": 219732453,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813616
    },
    {
        "content": "<p>yes</p>",
        "id": 219732454,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607813618
    },
    {
        "content": "<p>also we should get <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> on this, he might actually know what's going on lol</p>",
        "id": 219732456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813623
    },
    {
        "content": "<p>context: rustdoc crashes documenting with --stage 0: <a href=\"https://github.com/rust-lang/rust/issues/79980\">https://github.com/rust-lang/rust/issues/79980</a></p>",
        "id": 219732460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813640
    },
    {
        "content": "<p>ah</p>",
        "id": 219732461,
        "sender_full_name": "simulacrum",
        "timestamp": 1607813640
    },
    {
        "content": "<p>interesting</p>",
        "id": 219732516,
        "sender_full_name": "simulacrum",
        "timestamp": 1607813710
    },
    {
        "content": "<p>I'm pretty sure we're building compiler-docs in CI</p>",
        "id": 219732518,
        "sender_full_name": "simulacrum",
        "timestamp": 1607813717
    },
    {
        "content": "<p>with --stage 1 or --stage 2 I would expect</p>",
        "id": 219732524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813747
    },
    {
        "content": "<p>I'm not sure what's different with --stage 0 :(</p>",
        "id": 219732561,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813763
    },
    {
        "content": "<p>oh is this specifically with stage 0?</p>",
        "id": 219732568,
        "sender_full_name": "simulacrum",
        "timestamp": 1607813783
    },
    {
        "content": "<p>yes</p>",
        "id": 219732570,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813786
    },
    {
        "content": "<p>this is the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>  Documenting rustc_macros v0.1.0 (/home/joshua/rustc3/compiler/rustc_macros)\nerror[E0460]: found possibly newer version of crate `std` which `synstructure` depends on\n --&gt; compiler/rustc_macros/src/lib.rs:5:5\n  |\n5 | use synstructure::decl_derive;\n  |     ^^^^^^^^^^^^\n  |\n  = note: perhaps that crate needs to be recompiled?\n  = note: the following crate versions were found:\n          crate `std`: /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-8049277477c5d6df.rlib\n          crate `std`: /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-8049277477c5d6df.so\n          crate `synstructure`: /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage0-rustc/release/deps/libsynstructure-af825c806db8e20d.rmeta\n</code></pre></div>",
        "id": 219732648,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607813997
    },
    {
        "content": "<p>I guess I haven't looked at that PR? I assume it's assigned to me</p>",
        "id": 219732649,
        "sender_full_name": "simulacrum",
        "timestamp": 1607813998
    },
    {
        "content": "<p>there are a couple related PRs (<a href=\"https://github.com/rust-lang/rust/pull/79954\">https://github.com/rust-lang/rust/pull/79954</a>, <a href=\"https://github.com/rust-lang/rust/pull/79984\">https://github.com/rust-lang/rust/pull/79984</a>, both from today) but neither fix the latest error</p>",
        "id": 219732693,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607814027
    },
    {
        "content": "<p>they'll just be necessary once this error is fixed</p>",
        "id": 219732695,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607814036
    },
    {
        "content": "<p>I'll try to take a look I guess, want to finish my PR review backlog first</p>",
        "id": 219732719,
        "sender_full_name": "simulacrum",
        "timestamp": 1607814086
    },
    {
        "content": "<p>no problem, this isn't urgent</p>",
        "id": 219732772,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607814126
    },
    {
        "content": "<p>pretty sure it's been broken for a while</p>",
        "id": 219732774,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607814132
    },
    {
        "content": "<p>I have to go for dinner but I expect <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> and I might keep stumbling around blindly for a bit after <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219732787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607814162
    },
    {
        "content": "<p>can confirm that <code>--stage 1</code> works for me</p>",
        "id": 219733424,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607815261
    },
    {
        "content": "<p>I'll have to go to sleep at some point too ^^</p>",
        "id": 219733425,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607815263
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/74976#issuecomment-667265945\">https://github.com/rust-lang/rust/issues/74976#issuecomment-667265945</a> is still accurate</p>",
        "id": 219734443,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817201
    },
    {
        "content": "<p>and so fixing this is indeed hard</p>",
        "id": 219734445,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817208
    },
    {
        "content": "<blockquote>\n<p>I suspect that rustdoc always setting the sysroot might in fact be a bug, or at least unintentional - it seems like the two should be the same probably?</p>\n</blockquote>\n<p>would it be enough to only set sysroot if <code>--sysroot</code> isn't passed?</p>",
        "id": 219734505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817330
    },
    {
        "content": "<p>(is this a 'try it and see' question?)</p>",
        "id": 219734508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817337
    },
    {
        "content": "<p>No, that doesn't seem correct</p>",
        "id": 219734511,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817341
    },
    {
        "content": "<p>I don't know why we're doing that with rustc</p>",
        "id": 219734513,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817350
    },
    {
        "content": "<p>Ah, cargo miri test</p>",
        "id": 219734550,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817378
    },
    {
        "content": "<p>ok, so just piling hacks then :)</p>",
        "id": 219734552,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817383
    },
    {
        "content": "<p>Yeah, I don't think that will be the right fix</p>",
        "id": 219734557,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817398
    },
    {
        "content": "<p>You need the sysroots in sync during a build, otherwise you get bugs like these, but because Cargo is passing --target to rustdoc but not to rustc, that's not happening</p>",
        "id": 219734567,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817458
    },
    {
        "content": "<p>I don't really understand why rustc doesn't get --target passed, though.</p>",
        "id": 219734569,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817468
    },
    {
        "content": "<p>(Seems odd).</p>",
        "id": 219734571,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219734569\">said</a>:</p>\n<blockquote>\n<p>I don't really understand why rustc doesn't get --target passed, though.</p>\n</blockquote>\n<p>this might be because it's a proc-macro</p>",
        "id": 219734614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817518
    },
    {
        "content": "<p>I remember cargo has a <em>lot</em> of weirdness around proc-macros</p>",
        "id": 219734620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817527
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/7677\">https://github.com/rust-lang/cargo/issues/7677</a></p>",
        "id": 219734624,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817532
    },
    {
        "content": "<p>ugh</p>",
        "id": 219734625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817536
    },
    {
        "content": "<p>could we pass <code>--target host</code> if --target isn't set, maybe?</p>",
        "id": 219734634,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817564
    },
    {
        "content": "<p>(whatever the host happens to be)</p>",
        "id": 219734637,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219734557\">said</a>:</p>\n<blockquote>\n<p>Yeah, I don't think that will be the right fix</p>\n</blockquote>\n<p>you are correct, it did not work <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219734645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817596
    },
    {
        "content": "<p>I doubt that there will be a clear path towards fixing this. Generally speaking, passing --target host is likely to break other things; it's not a clear path forward.</p>",
        "id": 219734709,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817632
    },
    {
        "content": "<p>(For example, the reason we don't always want to pass --target is that currently that is used to detect proc macros and build scripts during the std build and use the beta sysroot to build them. The normal sysroot is not yet populated with std, so we cannot do otherwise).</p>",
        "id": 219734740,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817688
    },
    {
        "content": "<p>for rustdoc specifically the only thing that should change is the output directory</p>",
        "id": 219734741,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817689
    },
    {
        "content": "<p>I do not think that is true.</p>",
        "id": 219734748,
        "sender_full_name": "simulacrum",
        "timestamp": 1607817708
    },
    {
        "content": "<p>I missed your previous comment, sorry - let me read that</p>",
        "id": 219734788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817725
    },
    {
        "content": "<p>(chat platforms should really reconfirm if you want to send if someone else sent at the same time)</p>",
        "id": 219734792,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219734740\">said</a>:</p>\n<blockquote>\n<p>(For example, the reason we don't always want to pass --target is that currently that is used to detect proc macros and build scripts during the std build and use the beta sysroot to build them. The normal sysroot is not yet populated with std, so we cannot do otherwise).</p>\n</blockquote>\n<p>hmm, I guess rustdoc can certainly be called on proc-macros, in which case we need to use beta libstd, yeah</p>",
        "id": 219734823,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607817794
    },
    {
        "content": "<p>that said, this does work:</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTDOCFLAGS=&quot;--sysroot=$(rustc --print sysroot)&quot; x.py doc --stage 0 compiler/rustc\n</code></pre></div>",
        "id": 219735099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> can you try that command? ^</p>",
        "id": 219735102,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818306
    },
    {
        "content": "<p>oh wait it's still recompiling, not documenting yet :( never mind, waiting for that to run</p>",
        "id": 219735147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818344
    },
    {
        "content": "<p>I have no idea what sysroot that is using</p>",
        "id": 219735158,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818368
    },
    {
        "content": "<p>nightly I guess?</p>",
        "id": 219735161,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219735102\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> can you try that command? ^</p>\n</blockquote>\n<p>same error</p>",
        "id": 219735162,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607818378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219735158\">said</a>:</p>\n<blockquote>\n<p>I have no idea what sysroot that is using</p>\n</blockquote>\n<p>yes, sorry, that's nightly</p>",
        "id": 219735171,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818400
    },
    {
        "content": "<p>oh yeah, that's using sysroot from stable for me</p>",
        "id": 219735174,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607818416
    },
    {
        "content": "<p>that's (as we have discussed many times before :) is not guaranteed to work, because std in-tree and in nightly (or whatever sysroot you're getting) could be different</p>",
        "id": 219735178,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818424
    },
    {
        "content": "<p>and the other part of it is that RUSTDOCFLAGS and RUSTFLAGS presumably both have same behavior and don't apply to build scripts / proc macros when --target is passed.</p>",
        "id": 219735220,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818450
    },
    {
        "content": "<p>ugh yeah you're right</p>",
        "id": 219735222,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818461
    },
    {
        "content": "<p>I don't know why cargo does that :(</p>",
        "id": 219735231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818481
    },
    {
        "content": "<p>One thing that <em>would</em> be interesting to explore is why non-zero stages work</p>",
        "id": 219735252,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818521
    },
    {
        "content": "<p>Because I would have expected a similar bug there. It's possible though that we just don't detect it with ignore-git=true? I don't know.</p>",
        "id": 219735270,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818546
    },
    {
        "content": "<blockquote>\n<p>It's possible though that we just don't detect it with ignore-git=true? I don't know.</p>\n</blockquote>\n<p>oh that's frightening <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 219735313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818568
    },
    {
        "content": "<p>I guess I can recompile everything and see?</p>",
        "id": 219735319,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818581
    },
    {
        "content": "<p>I don't think you can</p>",
        "id": 219735324,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818590
    },
    {
        "content": "<p>ignore-git isn't really the thing there</p>",
        "id": 219735326,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818595
    },
    {
        "content": "<p>I'm surprised why this wasn't found before. Does no one ever run <code>x.py doc</code>?</p>",
        "id": 219735343,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607818641
    },
    {
        "content": "<p>Oh, I think I know why this isn't causing problems in non-zero stages: the sysroot there is just right by default</p>",
        "id": 219735350,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> I have it set to <code>doc-stage = 1</code> and I think others have compiler-docs turned off</p>",
        "id": 219735355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219735350\">said</a>:</p>\n<blockquote>\n<p>Oh, I think I know why this isn't causing problems in non-zero stages: the sysroot there is just right by default</p>\n</blockquote>\n<p>that sounds right - there's no beta libstd to confuse it with</p>",
        "id": 219735402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818696
    },
    {
        "content": "<p>kind of.</p>",
        "id": 219735408,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818711
    },
    {
        "content": "<p>stage0-sysroot and stage0 are both sysroots in stage 0, but in higher stages there's just the one sysroot, so we don't see this bug (sort of by accident, really)</p>",
        "id": 219735421,
        "sender_full_name": "simulacrum",
        "timestamp": 1607818748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219735421\">said</a>:</p>\n<blockquote>\n<p>stage0-sysroot and stage0 are both sysroots in stage 0, but in higher stages there's just the one sysroot, so we don't see this bug (sort of by accident, really)</p>\n</blockquote>\n<p>right - stage0/ is the beta sysroot and stage0-sysroot/ is master libstd</p>",
        "id": 219735485,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818838
    },
    {
        "content": "<p>Just to check: is the problem that rustdoc somehow mixes libstd from stage0-sysroot and stage0?</p>",
        "id": 219735488,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607818847
    },
    {
        "content": "<p>yes</p>",
        "id": 219735490,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818853
    },
    {
        "content": "<p>or rather, rustc uses stage0/ and rustdoc uses stage0-sysroot/</p>",
        "id": 219735492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607818862
    },
    {
        "content": "<p>oh ok makes more sense</p>",
        "id": 219735495,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607818872
    },
    {
        "content": "<p>by \"uses a libstd\", do you mean \"is a binary compiled with that libstd\" or \"links that libstd into what it compiles/documents\"?</p>",
        "id": 219735602,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607819055
    },
    {
        "content": "<p>\"links that libstd\", stage 0 rustdoc is already built ;)</p>",
        "id": 219735608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607819095
    },
    {
        "content": "<p>oh right, we're running stuff from beta</p>",
        "id": 219735612,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607819112
    },
    {
        "content": "<p>still trying to understand: why does rustdoc use stage0-sysroot? if rustc can compile stuff with the stage0 sysroot, surely rustdoc should be able to use the same?</p>",
        "id": 219735965,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607819753
    },
    {
        "content": "<p>As I understand it, the issue is knowing <em>when</em> to set the sysroot</p>",
        "id": 219736014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607819798
    },
    {
        "content": "<p>right now rustdoc unconditionally sets it to stage0-sysroot</p>",
        "id": 219736015,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607819809
    },
    {
        "content": "<p>but it's not clear in what circumstances it should use stage0 instead</p>",
        "id": 219736018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607819821
    },
    {
        "content": "<p>this causes <em>all</em> targets to give the error, not just proc-macros (or maybe everything but proc-macros?):</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/bin/rustdoc.rs b/src/bootstrap/bin/rustdoc.rs</span>\n<span class=\"gh\">index cba17c8e608..f1921067872 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/bin/rustdoc.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/bin/rustdoc.rs</span>\n<span class=\"gu\">@@ -25,8 +25,8 @@ fn main() {</span>\n\n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&amp;args)\n<span class=\"gd\">-        .arg(\"--sysroot\")</span>\n<span class=\"gd\">-        .arg(&amp;sysroot)</span>\n<span class=\"gi\">+        //.arg(\"--sysroot\")</span>\n<span class=\"gi\">+        //.arg(&amp;sysroot)</span>\n         .env(bootstrap::util::dylib_path_var(), env::join_paths(&amp;dylib_path).unwrap());\n\n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n</code></pre></div>",
        "id": 219736088,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607819925
    },
    {
        "content": "<p>ah, and that's where the --target business comes into play</p>",
        "id": 219736103,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607819986
    },
    {
        "content": "<p>sorry, I overloaded 'target' there</p>",
        "id": 219736111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820001
    },
    {
        "content": "<p>pretend I said 'crate' instead</p>",
        "id": 219736150,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820006
    },
    {
        "content": "<p>yeah I followed that</p>",
        "id": 219736153,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820014
    },
    {
        "content": "<p>I meant that --target is what allows rustc to choose which sysroot to use, right? But rustdoc doesn't get passed the same --target for some reason?</p>",
        "id": 219736162,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820060
    },
    {
        "content": "<p>correct</p>",
        "id": 219736177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820095
    },
    {
        "content": "<p>which I think is <a href=\"https://github.com/rust-lang/cargo/issues/7677\">https://github.com/rust-lang/cargo/issues/7677</a></p>",
        "id": 219736181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820116
    },
    {
        "content": "<p>and naively passing the same --target flags to rustdoc as the ones we pass to rustc would break things I suppose</p>",
        "id": 219736305,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820338
    },
    {
        "content": "<p>well <em>we</em> aren't passing any target flags at all</p>",
        "id": 219736310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820355
    },
    {
        "content": "<p>cargo is the one passing them</p>",
        "id": 219736311,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820359
    },
    {
        "content": "<p>inconsistently</p>",
        "id": 219736312,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219736310\">said</a>:</p>\n<blockquote>\n<p>well <em>we</em> aren't passing any target flags at all</p>\n</blockquote>\n<p>or rather, x.py calls <code>cargo build --target</code> unconditionally I think</p>",
        "id": 219736358,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820385
    },
    {
        "content": "<p>oh!! <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this worked:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/bin/rustdoc.rs b/src/bootstrap/bin/rustdoc.rs</span>\n<span class=\"gh\">index cba17c8e608..5b9ad864b5f 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/bin/rustdoc.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/bin/rustdoc.rs</span>\n<span class=\"gu\">@@ -25,10 +25,12 @@ fn main() {</span>\n\n     let mut cmd = Command::new(rustdoc);\n     cmd.args(&amp;args)\n<span class=\"gd\">-        .arg(\"--sysroot\")</span>\n<span class=\"gd\">-        .arg(&amp;sysroot)</span>\n         .env(bootstrap::util::dylib_path_var(), env::join_paths(&amp;dylib_path).unwrap());\n\n<span class=\"gi\">+    // Don't set the sysroot for proc-macros or build scripts.</span>\n<span class=\"gi\">+    if std::env::var(\"TARGET\").is_err() {</span>\n<span class=\"gi\">+        cmd.arg(\"--sysroot\").arg(&amp;sysroot);</span>\n<span class=\"gi\">+    }</span>\n     // Force all crates compiled by this compiler to (a) be unstable and (b)\n     // allow the `rustc_private` feature to link to other unstable crates\n     // also in the sysroot.\n</code></pre></div>",
        "id": 219736368,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820420
    },
    {
        "content": "<p>is there a good reason for this inconsistency, or is it a historical accident that is now relied on?</p>",
        "id": 219736371,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219736371\">said</a>:</p>\n<blockquote>\n<p>is there a good reason for this inconsistency, or is it a historical accident that is now relied on?</p>\n</blockquote>\n<p>I disagree with the cargo team on this, read the issue if you want to know more</p>",
        "id": 219736373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820440
    },
    {
        "content": "<p>yeah I read it but could quite figure out the reasoning</p>",
        "id": 219736381,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> can you try that diff with <code>--stage 0</code>?</p>",
        "id": 219736382,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820473
    },
    {
        "content": "<p>I get the exact same error</p>",
        "id": 219736446,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820576
    },
    {
        "content": "<p>still pointing to build/.../stage0-sysroot/.../libstd</p>",
        "id": 219736449,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820598
    },
    {
        "content": "<p>that's so weird, it works for me</p>",
        "id": 219736494,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820613
    },
    {
        "content": "<p>I might need to clear <code>build</code></p>",
        "id": 219736502,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820631
    },
    {
        "content": "<p>yeah, I will too</p>",
        "id": 219736526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607820700
    },
    {
        "content": "<p>now we wait ^^</p>",
        "id": 219736692,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607820906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219736373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219736371\">said</a>:</p>\n<blockquote>\n<p>is there a good reason for this inconsistency, or is it a historical accident that is now relied on?</p>\n</blockquote>\n<p>I disagree with the cargo team on this, read the issue if you want to know more</p>\n</blockquote>\n<p>The issue explains why we don't want to always pass <code>--target</code> because of no_std, and that makes sense. I imagine that in the no_std+proc_macro case, rustc doesn't get passed --target either?</p>",
        "id": 219736842,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607821103
    },
    {
        "content": "<p>the issue is talking about when no_std is the <em>host</em> toolchain</p>",
        "id": 219736872,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607821182
    },
    {
        "content": "<p>I dunno, I'm missing too many parts to understand I guess</p>",
        "id": 219736874,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607821184
    },
    {
        "content": "<p>which is never the case for rustc</p>",
        "id": 219736875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607821185
    },
    {
        "content": "<p>oh, but could be the case for rustdoc?</p>",
        "id": 219736920,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607821207
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 219736929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607821225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Can't.20document.20compiler.20crate/near/219736446\">said</a>:</p>\n<blockquote>\n<p>I get the exact same error</p>\n</blockquote>\n<p>ok yeah this broke for me after a rebuild</p>",
        "id": 219736950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607821275
    },
    {
        "content": "<p>:(</p>",
        "id": 219736954,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607821282
    },
    {
        "content": "<p>not sure what happened before, maybe it was cached or something</p>",
        "id": 219736956,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607821286
    },
    {
        "content": "<p>well, sounds like unless someone sits down and makes this mess consistent there's not much we can do</p>",
        "id": 219737005,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607821332
    },
    {
        "content": "<p>yeah :(</p>",
        "id": 219737011,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607821350
    },
    {
        "content": "<p>well, time for bed. I'll be having recursive dreams of bootstrapping messes</p>",
        "id": 219737261,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607821780
    }
]