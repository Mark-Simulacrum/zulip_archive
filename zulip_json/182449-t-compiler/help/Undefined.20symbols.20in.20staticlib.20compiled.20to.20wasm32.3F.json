[
    {
        "content": "<p>According to <a href=\"https://doc.rust-lang.org/reference/linkage.html\">the reference</a> \"staticlib\" should include dependencies of the crate and allow linking the crate with non-Rust programs. In <a href=\"https://github.com/osa1/wasm_test/tree/master/rs_nostd_core_lib_2\">https://github.com/osa1/wasm_test/tree/master/rs_nostd_core_lib_2</a> I have an example project setup where I build a \"staticlib\" crate, and link it with a C library into a shared library, targeting wasm32-unknown-emscripten. I already do this stuff using C and Rust and it works. However the problem when I target wasm32 is I get undefined Rust 'core' symbols, which are compiled to <a href=\"https://github.com/WebAssembly/tool-conventions/blob/master/DynamicLinking.md#imports\">\"GOT.func\" imports</a>, as a result the final Wasm library is not really linkable.</p>\n<p>I'm not sure that this is a bug in rustc, maybe it's a bug in LLVM (code generator parts), or in wasm-ld, or maybe I'm doing something wrong. I'm wondering how to debug this. The question basically is why do I get those \"GOT.func\" imports.</p>\n<p>To reproduce make sure you have llvm-10 and xargo installed and have nightly Rust, and run <code>./build.sh</code>. You'll see a file \"libfinal.wat\". If you open it you'll see this import:</p>\n<div class=\"codehilite\"><pre><span></span><code>(import &quot;GOT.func&quot; &quot;_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h9ba9fea9cadf7bd5E&quot; (global (;3;) (mut i32)))\n</code></pre></div>\n\n\n<p>This basically means there's a Rust function not defined in this shared library file, which seems wrong as the crate is compiled to a \"staticlib\" which should include all dependencies.</p>\n<p>Does anyone have any ideas? Thanks.</p>",
        "id": 205484844,
        "sender_full_name": "osa1",
        "timestamp": 1596119161
    },
    {
        "content": "<p>I moved this to Rust issue tracker: <a href=\"https://github.com/rust-lang/rust/issues/75089\">https://github.com/rust-lang/rust/issues/75089</a></p>",
        "id": 205770820,
        "sender_full_name": "osa1",
        "timestamp": 1596443616
    }
]