[
    {
        "content": "<p>Hi all, apologies if this is not the right place for this question. I'm working on a small fix around parsing arguments like <code>-A clippy:foo</code>, and was wondering where the best place to put tests for that is.</p>",
        "id": 243933698,
        "sender_full_name": "eholk",
        "timestamp": 1624635982
    },
    {
        "content": "<p>My first thought is to stick them in a <code>#[cfg(test)]</code> module inside the file I changed, but I saw there's the ui test suite also, which seems like it might be a better place for that.</p>",
        "id": 243933903,
        "sender_full_name": "eholk",
        "timestamp": 1624636084
    },
    {
        "content": "<p>Would you mind sharing the specific issue that you are working on?</p>",
        "id": 243934539,
        "sender_full_name": "fee1-dead",
        "timestamp": 1624636352
    },
    {
        "content": "<p>I don't think there's an issue yet, but it came up when discussing <a href=\"https://github.com/rust-lang/cargo/issues/5034#issuecomment-867838169\">https://github.com/rust-lang/cargo/issues/5034#issuecomment-867838169</a>. Basically, rustc doesn't ignore <code>clippy::</code> on the command line when clippy is not enabled like it does when lints are specified through attributes.</p>",
        "id": 243935204,
        "sender_full_name": "eholk",
        "timestamp": 1624636668
    },
    {
        "content": "<p>I should probably file an issue about this specific problem.</p>",
        "id": 243935269,
        "sender_full_name": "eholk",
        "timestamp": 1624636684
    },
    {
        "content": "<p>Okay, it has its own issue now: <a href=\"https://github.com/rust-lang/rust/issues/86628\">https://github.com/rust-lang/rust/issues/86628</a></p>",
        "id": 243937072,
        "sender_full_name": "eholk",
        "timestamp": 1624637447
    },
    {
        "content": "<p>A <code>ui</code> test is usually the way to go. That will let you control the flags passed to <code>rustc</code> and validate the expected output (either an error message or a successful build). This part of the rustc dev guide might be useful to you: <a href=\"https://rustc-dev-guide.rust-lang.org/tests/adding.html#header-commands-configuring-rustc\">https://rustc-dev-guide.rust-lang.org/tests/adding.html#header-commands-configuring-rustc</a></p>\n<p>In particular, you will probably need the <code>// compile-flags: </code> and <code>// build-pass</code> directives.</p>",
        "id": 243946134,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1624642156
    },
    {
        "content": "<p>Oh, perfect. That looks like exactly what I want.</p>",
        "id": 243946780,
        "sender_full_name": "eholk",
        "timestamp": 1624642481
    },
    {
        "content": "<p>So resurrecting this thread, I added a test that's supposed to fail and an stderr file for the expected output. However, the ui tests are still failing, but this time with the errors in JSON format. Is there something special that needs to be done for JSON output?</p>",
        "id": 245106396,
        "sender_full_name": "eholk",
        "timestamp": 1625610433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421986\">@Eric Holk</span> how did you make the stderr file? Normally, I just write the ui test file and then run the tests with <code>--bless</code> and have it generate the correct stderr file. If you've pushed your changes to a fork, I can also take a look! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245199786,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1625672174
    },
    {
        "content": "<p>it's trickier if you have an expected output that you don't yet have code to produce. the test runner uses a bunch of options to erase some line numbers, etc. to make comparisons less fragile</p>",
        "id": 245200480,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1625672409
    },
    {
        "content": "<p>I started with using <code>--bless</code>, which solved the problem for the human-readable output, but then the JSON output became an issue. This is for <a href=\"https://github.com/rust-lang/rust/pull/86639\">https://github.com/rust-lang/rust/pull/86639</a>. <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> suggested using <code>// error-pattern</code> which seems to work.</p>",
        "id": 245214374,
        "sender_full_name": "eholk",
        "timestamp": 1625678676
    },
    {
        "content": "<p>these _unexpected errors_ are IIRC when the ui test is lacking //~| error annotations (which is understandable for command line arguments like in your case, and not errors coming from source code) that are present in the blessed output, it's not just comparing the .stderrs.</p>",
        "id": 245217741,
        "sender_full_name": "lqd",
        "timestamp": 1625680305
    },
    {
        "content": "<p>btw long time no see eholk <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> we worked together on brson's mir2wasm compiler 5y ago IIRC</p>",
        "id": 245218108,
        "sender_full_name": "lqd",
        "timestamp": 1625680461
    },
    {
        "content": "<p>@lqd thanks! I can't believe that was 5 years ago already! I'm excited to be back working on Rust.</p>",
        "id": 245218204,
        "sender_full_name": "eholk",
        "timestamp": 1625680520
    }
]