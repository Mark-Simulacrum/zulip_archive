[
    {
        "content": "<p>Hi,</p>\n<p>New here and had a general question about Rust. I noticed that you can have an arbitrary amount of modules within modules and was wondering how rust handles this scoping?</p>\n<ul>\n<li>One way I can think of, to clarify my question, is to use a hashmap. However, this does not seem performant when you want to type check and you need to call the hashmap 10 times.</li>\n</ul>\n<p>If I may clarify again, I was wondering about how this was done before the query system was implemented.</p>\n<p>Hope it's clear</p>",
        "id": 218853762,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607098390
    },
    {
        "content": "<p>Are you looking for <a href=\"https://rustc-dev-guide.rust-lang.org/name-resolution.html?highlight=resolve#name-resolution\">https://rustc-dev-guide.rust-lang.org/name-resolution.html?highlight=resolve#name-resolution</a> ?</p>",
        "id": 218854072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607098474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218854072\">said</a>:</p>\n<blockquote>\n<p>Are you looking for <a href=\"https://rustc-dev-guide.rust-lang.org/name-resolution.html?highlight=resolve#name-resolution\">https://rustc-dev-guide.rust-lang.org/name-resolution.html?highlight=resolve#name-resolution</a> ?</p>\n</blockquote>\n<p>I think I was more interested in how something like the below code snippet was represtented in the compiler:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"k\">mod</span> <span class=\"nn\">another_one</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_me_maybe</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218854587,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607098666
    },
    {
        "content": "<p>Does each module have it's own symbol table as a hashmap, where calling the <code>call_me_maybe()</code> function require 3 get() calls to access the <code>call_me_maybe</code> function?</p>",
        "id": 218854786,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607098768
    },
    {
        "content": "<p>type checking just uses a visitor to traverse the whole crate iirc</p>",
        "id": 218854789,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607098768
    },
    {
        "content": "<p>rustc pretty much has a flat storage for things like this with references to the parents of items</p>",
        "id": 218855001,
        "sender_full_name": "lcnr",
        "timestamp": 1607098866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364259\">Joe Seriah</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218854786\">said</a>:</p>\n<blockquote>\n<p>Does each module have it's own symbol table as a hashmap, where calling the <code>call_me_maybe()</code> function require 3 get() calls to access the <code>call_me_maybe</code> function?</p>\n</blockquote>\n<p>this is the way modules are represented in the HIR: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Mod.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Mod.html</a>. But most of the time you already know what function you're dealing with and look it up with a DefId directly</p>",
        "id": 218855017,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607098873
    },
    {
        "content": "<p>(and yes, rustc is very much a giant hashmap stress test)</p>",
        "id": 218855061,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607098899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218855001\">said</a>:</p>\n<blockquote>\n<p>rustc pretty much has a flat storage for things like this with references to the parents of items</p>\n</blockquote>\n<p>Do you mean that the items are stored in an array and there is a hashmap which references them?</p>",
        "id": 218855157,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607098936
    },
    {
        "content": "<p>rustc's memory management is complicated</p>",
        "id": 218855194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607098955
    },
    {
        "content": "<p>it depends on which of the IRs you're asking about</p>",
        "id": 218855208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607098962
    },
    {
        "content": "<p>Modules are stored in a <code>BTreeMap&lt;HirId, Module&gt;</code>in hir iirc</p>",
        "id": 218855212,
        "sender_full_name": "lcnr",
        "timestamp": 1607098964
    },
    {
        "content": "<p>there's AST, HIR, and MIR</p>",
        "id": 218855221,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607098968
    },
    {
        "content": "<p>but yeah, what <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span>  said</p>",
        "id": 218855244,
        "sender_full_name": "lcnr",
        "timestamp": 1607098978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218855017\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"364259\">Joe Seriah</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218854786\">said</a>:</p>\n<blockquote>\n<p>Does each module have it's own symbol table as a hashmap, where calling the <code>call_me_maybe()</code> function require 3 get() calls to access the <code>call_me_maybe</code> function?</p>\n</blockquote>\n<p>this is the way modules are represented in the HIR: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Mod.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.Mod.html</a>. But most of the time you already know what function you're dealing with and look it up with a DefId directly</p>\n</blockquote>\n<p>How would you know what function you want to call if you do type checking after parsing?</p>",
        "id": 218855325,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099021
    },
    {
        "content": "<p>Since after parsing, I do not think you have linked any of the symbols together?</p>",
        "id": 218855406,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099047
    },
    {
        "content": "<p>you want to know how name resolution works?</p>",
        "id": 218855408,
        "sender_full_name": "lcnr",
        "timestamp": 1607099048
    },
    {
        "content": "<p>so how <code>test</code> knows which <code>foo</code> it should use?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">i</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">j</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218855502,
        "sender_full_name": "lcnr",
        "timestamp": 1607099098
    },
    {
        "content": "<p>I believe I would like to find out how symbol linking and resolution works if I want to type check a function call from a different module. Or maybe that's what you mean?</p>",
        "id": 218855689,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099185
    },
    {
        "content": "<p>\"type check a function call from a different module\" doesn't really makes sense, we typecheck each function by itself</p>",
        "id": 218855785,
        "sender_full_name": "lcnr",
        "timestamp": 1607099236
    },
    {
        "content": "<p>I think you mean name resolution</p>",
        "id": 218855795,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607099242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218855502\">said</a>:</p>\n<blockquote>\n<p>so how <code>test</code> knows which <code>foo</code> it should use?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">i</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">j</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>In this example, I believe it would call the foo that was one up from it since Rust uses lexical scoping?</p>",
        "id": 218855798,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218855795\">said</a>:</p>\n<blockquote>\n<p>I think you mean name resolution</p>\n</blockquote>\n<p>Sorry my terminology is bad. I believe I mean name resolution</p>",
        "id": 218855915,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099291
    },
    {
        "content": "<p>it probably helps to read <a href=\"https://rustc-dev-guide.rust-lang.org/name-resolution.html\">https://rustc-dev-guide.rust-lang.org/name-resolution.html</a> then</p>",
        "id": 218855967,
        "sender_full_name": "lcnr",
        "timestamp": 1607099314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218855967\">said</a>:</p>\n<blockquote>\n<p>it probably helps to read <a href=\"https://rustc-dev-guide.rust-lang.org/name-resolution.html\">https://rustc-dev-guide.rust-lang.org/name-resolution.html</a> then</p>\n</blockquote>\n<p>I read this, it seems to be missing the information I was looking for, unless I missed it.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">foo</span>::<span class=\"n\">bar</span>::<span class=\"n\">call</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When the resolver encounters the <code>call</code> expression, do you know how it finds the call symbol?</p>",
        "id": 218856485,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218855212\">said</a>:</p>\n<blockquote>\n<p>Modules are stored in a <code>BTreeMap&lt;HirId, Module&gt;</code>in hir iirc</p>\n</blockquote>\n<p>From this, I'm guessing that it does </p>\n<p>let foo = BTreeMap.get(foo);<br>\nlet bar = foo.get(bar);<br>\nlet call = bar.func_get(call);</p>\n<p>?</p>",
        "id": 218856829,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099688
    },
    {
        "content": "<p>But this does not seem quite right, because I interpreted previous messages as saying that there was a flat structure. So I'm a bit confused as to how you keep the scoping information. ie bar is inside of foo</p>\n<p>Sorry if it is not making much sense</p>",
        "id": 218857047,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099775
    },
    {
        "content": "<p>well, <em>only</em> name resolution cares about scoping really</p>",
        "id": 218857083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607099793
    },
    {
        "content": "<p>The \"flat structure\" is only present after name resolution, in the form of <code>DefId</code>s</p>",
        "id": 218857091,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607099800
    },
    {
        "content": "<p>What about type checking?</p>",
        "id": 218857121,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099822
    },
    {
        "content": "<p>type checking comes after name resoultion, so it uses DefIds</p>",
        "id": 218857144,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607099840
    },
    {
        "content": "<p>Or does name resolution also modify the AST so that instead of seeing <code>foo::bar::call</code> it sees something like <code>DefId</code>?</p>",
        "id": 218857290,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218857144\">said</a>:</p>\n<blockquote>\n<p>type checking comes after name resoultion, so it uses DefIds</p>\n</blockquote>\n<p>Oh it's starting to make a bit of sense, I naively thought that name resolution did not modify the AST</p>",
        "id": 218857409,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607099955
    },
    {
        "content": "<p>it does not</p>",
        "id": 218857423,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607099962
    },
    {
        "content": "<p>type checking does not work on an AST</p>",
        "id": 218857432,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607099968
    },
    {
        "content": "<p>it walks the crate with intravisit I think <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/intravisit/trait.Visitor.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/intravisit/trait.Visitor.html</a></p>",
        "id": 218857463,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607099983
    },
    {
        "content": "<p>which works on the HIR</p>",
        "id": 218857492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607099995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218857432\">said</a>:</p>\n<blockquote>\n<p>type checking does not work on an AST</p>\n</blockquote>\n<p>Oh sorry, so name resolution works on the AST and type checking works on the HIR?</p>",
        "id": 218857618,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607100038
    },
    {
        "content": "<p>I think so</p>",
        "id": 218857651,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607100048
    },
    {
        "content": "<p>yes</p>",
        "id": 218857673,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100054
    },
    {
        "content": "<p>Do you know if the AST is transformed into the HIR during name resolution or is it done as a separate pass?</p>",
        "id": 218857792,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607100095
    },
    {
        "content": "<p>separately</p>",
        "id": 218857821,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100114
    },
    {
        "content": "<p>this is done by <code>rustc_ast_lowering</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast_lowering/index.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast_lowering/index.html</a></p>",
        "id": 218857897,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218857821\">said</a>:</p>\n<blockquote>\n<p>separately</p>\n</blockquote>\n<p>Oh okay thanks. To clarify the AST is walked twice before it is thrown away then? Once during name resolution and another during ast_lowering?</p>\n<p>I'm guessing the reason it was done as a separate pass is to make the code clearer?</p>",
        "id": 218858168,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607100251
    },
    {
        "content": "<p>at least twice, yeah</p>",
        "id": 218858258,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100293
    },
    {
        "content": "<p>and once for AST validation</p>",
        "id": 218858294,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100312
    },
    {
        "content": "<p>and probably again for some other things I don't know about</p>",
        "id": 218858323,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218858258\">said</a>:</p>\n<blockquote>\n<p>at least twice, yeah</p>\n</blockquote>\n<p>Maybe I also ask how the <code>use</code> import is processed?</p>",
        "id": 218858677,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607100472
    },
    {
        "content": "<p>name resolution in Rust is a fixed-point algorithm, and is interleaved with macro expansion</p>",
        "id": 218858932,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100564
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"n\">hello</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">hello</span>::<span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Does this become:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">foo</span>::<span class=\"n\">hello</span>::<span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>?</p>",
        "id": 218858933,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607100564
    },
    {
        "content": "<p>that means that <code>use</code> items might initially not be resolved, because they refer to items produced by a macro</p>",
        "id": 218858975,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100587
    },
    {
        "content": "<p>oh, no, it doesn't do any AST rewriting</p>",
        "id": 218859002,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100601
    },
    {
        "content": "<p>it keeps a list of unresolved imports and runs a fixed-point algorithm on them until they're all resolved</p>",
        "id": 218859125,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100637
    },
    {
        "content": "<p>then the resolution is stored in the name resolution data</p>",
        "id": 218859166,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100653
    },
    {
        "content": "<p>resolution being <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.Res.html\"><code>Res</code></a>, I believe</p>",
        "id": 218859194,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607100668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218859125\">said</a>:</p>\n<blockquote>\n<p>it keeps a list of unresolved imports and runs a fixed-point algorithm on them until they're all resolved</p>\n</blockquote>\n<p>Oh, so if I have:</p>\n<div class=\"codehilite\"><pre><span></span><code>use foo::bar\n</code></pre></div>\n<p>Then this is resolved to the <code>bar</code> module inside of <code>foo</code> and then it is added to the resolution data, to be used for name resolving the rest of the file?</p>",
        "id": 218859498,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607100806
    },
    {
        "content": "<p>I think so, yeah</p>",
        "id": 218859973,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607101014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218859973\">said</a>:</p>\n<blockquote>\n<p>I think so, yeah</p>\n</blockquote>\n<p>Thank you, and I'm guessing that the contents of <code>Res</code> is a linker to the symbol in some other crate?</p>\n<div class=\"codehilite\"><pre><span></span><code>use foo::bar\nbar::hello()\n</code></pre></div>\n<p>In the above code, I'm guessing that it does not return the AST for bar module because then it would need to do it per use statement</p>",
        "id": 218860385,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607101203
    },
    {
        "content": "<p>Res contains a DefId</p>",
        "id": 218860528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607101250
    },
    {
        "content": "<p>So maybe:</p>\n<p>ResolutionData.insert(\"bar\", ModID) if it is a module and DefID if it is a function for example</p>",
        "id": 218860539,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607101256
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.Res.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.Res.html</a></p>",
        "id": 218860552,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607101261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218859002\">said</a>:</p>\n<blockquote>\n<p>oh, no, it doesn't do any AST rewriting</p>\n</blockquote>\n<p>(this isn't really true, I think macro expansion rewrites the AST in-place)</p>",
        "id": 218860637,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607101299
    },
    {
        "content": "<p>Oh sorry DefId is not only for functions</p>",
        "id": 218860662,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607101309
    },
    {
        "content": "<p>yeah it's for any definition that's cross-crate</p>",
        "id": 218860688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607101321
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.DefKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.DefKind.html</a></p>",
        "id": 218860743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607101327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218860637\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218859002\">said</a>:</p>\n<blockquote>\n<p>oh, no, it doesn't do any AST rewriting</p>\n</blockquote>\n<p>(this isn't really true, I think macro expansion rewrites the AST in-place)</p>\n</blockquote>\n<p>Oh that makes sense as to why compile times are longer with macros, thanks for correcting me</p>",
        "id": 218860874,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607101382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218860743\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.DefKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.DefKind.html</a></p>\n</blockquote>\n<p>Is DefID available in HIR and AST?</p>",
        "id": 218860920,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607101398
    },
    {
        "content": "<p><code>DefId</code> is only available for HIR. AST uses <code>NodeId</code> I think.</p>\n<p>Edit: maybe it is possible to use a <code>DefId</code> for defs in a different crate?</p>",
        "id": 218861054,
        "sender_full_name": "bjorn3",
        "timestamp": 1607101446
    },
    {
        "content": "<p><code>DefKind</code> is one of the types that forms the HIR.</p>",
        "id": 218861105,
        "sender_full_name": "bjorn3",
        "timestamp": 1607101469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218861054\">said</a>:</p>\n<blockquote>\n<p><code>DefId</code> is only available for HIR. AST uses <code>NodeId</code> I think.</p>\n</blockquote>\n<p>Oh in name resolution, both DefId and NodeId is used?</p>",
        "id": 218861471,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607101632
    },
    {
        "content": "<p>nameres doesn't use HIR</p>",
        "id": 218861556,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607101683
    },
    {
        "content": "<p>Name resolution imports <code>DefId</code> and <code>DefKind</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_resolve/lib.rs.html#39\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_resolve/lib.rs.html#39</a></p>",
        "id": 218861676,
        "sender_full_name": "bjorn3",
        "timestamp": 1607101735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218861556\">said</a>:</p>\n<blockquote>\n<p>nameres doesn't use HIR</p>\n</blockquote>\n<p>Oh sorry, I thought the <code>Res</code> structure which has <code>DefID</code> was used in nameres</p>",
        "id": 218861711,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607101753
    },
    {
        "content": "<p>ah, seems like DefIds are assigned earlier then</p>",
        "id": 218861891,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607101836
    },
    {
        "content": "<p>or at least partially</p>",
        "id": 218861909,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607101843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218861891\">said</a>:</p>\n<blockquote>\n<p>ah, seems like DefIds are assigned earlier then</p>\n</blockquote>\n<p>Ah okay, thanks for checking.</p>\n<div class=\"codehilite\"><pre><span></span><code>use foo::bar\nbar::hello()\n</code></pre></div>\n<p>To clarify my understanding using the example above.</p>\n<p>In name resolution, we resolve the use statement to be <code>Res(DefID)</code></p>\n<p>We then add it to the current resolvers resolution data, so <code>ResolutionData.insert(\"bar\", Res)</code></p>\n<p>When I see <code>bar::hello</code> the compiler will do <code>bar_module = ResolutionData.get(ctx, \"bar\")</code></p>\n<p>then it will do <code>bar_module.get_func(hello)</code></p>\n<p>Is this correct?</p>",
        "id": 218862586,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607102139
    },
    {
        "content": "<p>not sure how it works in detail, I suggest checking the code directly</p>",
        "id": 218862696,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607102182
    },
    {
        "content": "<p>Okay thanks for the help. Do you mind slightly elaborating on what you mean by a fixed-point algorithm?</p>",
        "id": 218862774,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607102226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218858932\">said</a>:</p>\n<blockquote>\n<p>name resolution in Rust is a fixed-point algorithm, and is interleaved with macro expansion</p>\n</blockquote>\n<p>mentioned here for clarification</p>",
        "id": 218862829,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607102256
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/macro-expansion.html#expansion-and-ast-integration\">https://rustc-dev-guide.rust-lang.org/macro-expansion.html#expansion-and-ast-integration</a></p>",
        "id": 218862872,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607102273
    },
    {
        "content": "<p>most of this info is in the dev-guide btw</p>",
        "id": 218862903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607102283
    },
    {
        "content": "<p>This is the crux of name resolution: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b988c6f84e06bdc5562c70f28586b9eeaae3a39c/crates/hir_def/src/nameres/collector.rs#L234-L248\">https://github.com/rust-analyzer/rust-analyzer/blob/b988c6f84e06bdc5562c70f28586b9eeaae3a39c/crates/hir_def/src/nameres/collector.rs#L234-L248</a></p>",
        "id": 218862990,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607102315
    },
    {
        "content": "<p>Ah that dev guide page explains it well</p>",
        "id": 218863049,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607102348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218862903\">said</a>:</p>\n<blockquote>\n<p>most of this info is in the dev-guide btw</p>\n</blockquote>\n<p>Thanks for the link, yeah sorry I've been reading it also, just a bit slow haha</p>",
        "id": 218863098,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607102374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Rust.20represent.20the.20symbol.20table.20in.20the.20compiler.3F/near/218862990\">said</a>:</p>\n<blockquote>\n<p>This is the crux of name resolution: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/b988c6f84e06bdc5562c70f28586b9eeaae3a39c/crates/hir_def/src/nameres/collector.rs#L234-L248\">https://github.com/rust-analyzer/rust-analyzer/blob/b988c6f84e06bdc5562c70f28586b9eeaae3a39c/crates/hir_def/src/nameres/collector.rs#L234-L248</a></p>\n</blockquote>\n<p>Oh I've never heard of the term fixed-point algorithm, I was wondering what it meant in the context of name resolution?</p>",
        "id": 218863244,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607102430
    },
    {
        "content": "<p>Oh found the definition: <a href=\"https://en.wikipedia.org/wiki/Fixed-point_iteration\">https://en.wikipedia.org/wiki/Fixed-point_iteration</a></p>\n<p>Thanks again for the help!</p>",
        "id": 218863647,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607102636
    }
]