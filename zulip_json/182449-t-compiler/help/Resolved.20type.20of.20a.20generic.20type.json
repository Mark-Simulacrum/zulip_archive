[
    {
        "content": "<p>If I have something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">something_generic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">something_generic</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and (within rustc) I have a reference to the <code>inner::&lt;T&gt;()</code> expression as a <code>rustc_hir::ExprKind::Call</code>,  is it possible to get a list of types that <code>T</code> has been <em>instantiated</em> to?</p>\n<p>I'm trying to implement <a href=\"https://github.com/rust-lang/rust/pull/83908\">this lint</a>, but I found that the lint breaks with something like that^^.</p>",
        "id": 233328938,
        "sender_full_name": "Flying-Toast",
        "timestamp": 1617719685
    },
    {
        "content": "<p>FWIW, the clippy lint that it's based off of also gives a false positive in this case (run clippy on <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4218694806cf96336d20a802d6282281\">this playground</a>).</p>",
        "id": 233329584,
        "sender_full_name": "Flying-Toast",
        "timestamp": 1617719897
    },
    {
        "content": "<p>This isn't generally possible because downstream crates could call it (if public) with arbitrary types they define</p>",
        "id": 233330109,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617720115
    },
    {
        "content": "<p>Hm, so would it just be best for the lint to ignore cases with non-concrete types? If so, how do I detect if a <code>TyS</code> is concrete or not?</p>",
        "id": 233330573,
        "sender_full_name": "Flying-Toast",
        "timestamp": 1617720324
    },
    {
        "content": "<p>Probably, yes. You can match on the type to detect this.</p>",
        "id": 233330866,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617720430
    },
    {
        "content": "<p>the rustc docs are broken so I can't figure out the details</p>",
        "id": 233330943,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617720465
    },
    {
        "content": "<p>you can use <code>needs_subst</code> to detect if a type has generic parameters</p>",
        "id": 233332417,
        "sender_full_name": "lcnr",
        "timestamp": 1617720979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Resolved.20type.20of.20a.20generic.20type/near/233330943\">said</a>:</p>\n<blockquote>\n<p>the rustc docs are broken so I can't figure out the details</p>\n</blockquote>\n<p>you can use /beta for now</p>",
        "id": 233336252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617721740
    },
    {
        "content": "<p>okay, then you need to match <code>tys.kind</code> against <code>ty::Adt</code>, since that's the only case you care about <span class=\"user-mention\" data-user-id=\"403257\">@Flying-Toast</span></p>",
        "id": 233339457,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617722564
    },
    {
        "content": "<p>Thanks. So would <a href=\"https://github.com/rust-lang/rust/blob/526fbef8fa87950b7e449b1fde70328df29e31f4/compiler/rustc_lint/src/enum_intrinsics_non_enums.rs#L40\">this</a> be correct to check if <code>t</code> not a generic type?</p>",
        "id": 233355461,
        "sender_full_name": "Flying-Toast",
        "timestamp": 1617728842
    },
    {
        "content": "<p>why isn't checking for <code>is_enum</code> enough?</p>",
        "id": 233355706,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617728937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Resolved.20type.20of.20a.20generic.20type/near/233355706\">said</a>:</p>\n<blockquote>\n<p>why isn't checking for <code>is_enum</code> enough?</p>\n</blockquote>\n<p>Because then <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=aa03ece8f5b80a45267e766bd26d14d2\">this</a> would trigger a false positive.</p>",
        "id": 233361234,
        "sender_full_name": "Flying-Toast",
        "timestamp": 1617731528
    },
    {
        "content": "<p>Does <code>is_enum</code> really return true when called on <code>T</code>?</p>",
        "id": 233361374,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617731611
    },
    {
        "content": "<p><code>is_enum</code> returns false on a <code>T</code>, but the lint thinks that means that <code>T</code> is not an enum - however, it is possible that <code>T</code> is only ever instantiated with enum types.</p>",
        "id": 233361545,
        "sender_full_name": "Flying-Toast",
        "timestamp": 1617731695
    },
    {
        "content": "<p>oh, right, sorry, you're checking for a different condition</p>",
        "id": 233362195,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617731990
    }
]