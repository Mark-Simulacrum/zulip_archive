[
    {
        "content": "<p>Hello!</p>\n<p>I just wanted to check if anyone was familiar with this LLVM error: <code>Expected forward references to be resolved</code>. According to the LLVM source, it at bitcode writing when it tries to write out some MDNodes (however, according to my logging it doesnt seem to occur when im writing out llvm bitcode for codegenned modules in cg_ssa, but it happens before the rlib is dumped so it is most likely when it tries to pack bitcode inside of the rlib). I recently tried implementing debug info for my codegen, which is a codegen for GPU code using the libnvvm library. It uses a subset of LLVM 7 IR, therefore most of the debug info creation code was taken from cg_llvm, both recent and old cg_llvm (llvm 7). I am not deeply familiar with how DWARF/LLVM debug info works, i presume this error means my codegen tried to generate a forward reference for recursive/cyclic definitions, but at bitcode writing that reference wasnt resolved. Any help would be appreciated <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> i was told you might possibly know something about this.</p>",
        "id": 256807845,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633728110
    },
    {
        "content": "<p>It can be the case that you simply have some cyclic metadata and the libnvvm does not call <code>resolveCycles</code> or whatever the function is called.</p>",
        "id": 256812986,
        "sender_full_name": "nagisa",
        "timestamp": 1633731043
    },
    {
        "content": "<p>is debug info something that makes sense for cuda kernels at all?</p>",
        "id": 256813025,
        "sender_full_name": "nagisa",
        "timestamp": 1633731074
    },
    {
        "content": "<p>But otherwise no, it would be my first time seeing this assert.</p>",
        "id": 256813054,
        "sender_full_name": "nagisa",
        "timestamp": 1633731102
    },
    {
        "content": "<p>this is before libnvvm, libnvvm is only the last step where i take all of the rlib bitcode and give it to it</p>",
        "id": 256813059,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731105
    },
    {
        "content": "<blockquote>\n<p>is debug info something that makes sense for cuda kernels at all?</p>\n</blockquote>\n<p>absolutely, tools like Nsight compute can use it to show you your source code and performance metrics or assembly side by side</p>",
        "id": 256813130,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731137
    },
    {
        "content": "<p>not to mention cuda-memcheck and cuda-gdb use it iirc</p>",
        "id": 256813144,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731147
    },
    {
        "content": "<p>Im thinking that theres perhaps some step that got lost in the translation of llvm 13/7 cg_llvm debug info code, that is supposed to resolve the cycles</p>",
        "id": 256813200,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731192
    },
    {
        "content": "<p>are these cycles supposed to be resolved manually with some function?</p>",
        "id": 256813237,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731214
    },
    {
        "content": "<p>Hm, no, I don't believe rustc needs to call this function itself.</p>",
        "id": 256813250,
        "sender_full_name": "nagisa",
        "timestamp": 1633731223
    },
    {
        "content": "<p>Do you perhaps not call <code>DIBuilder::finalize</code>?</p>",
        "id": 256813351,
        "sender_full_name": "nagisa",
        "timestamp": 1633731277
    },
    {
        "content": "<p>That's the only thing I can think of.</p>",
        "id": 256813396,
        "sender_full_name": "nagisa",
        "timestamp": 1633731307
    },
    {
        "content": "<p>hmm no i implement the function just fine in the cg_ssa trait</p>",
        "id": 256813437,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731333
    },
    {
        "content": "<p>ill see if i can perhaps print all of unresolved values to see what they are</p>",
        "id": 256813563,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731404
    },
    {
        "content": "<p>should be fairly straightforward if you're in C++ land.</p>",
        "id": 256813591,
        "sender_full_name": "nagisa",
        "timestamp": 1633731423
    },
    {
        "content": "<p>Not sure if its easy from within Rust.</p>",
        "id": 256813613,
        "sender_full_name": "nagisa",
        "timestamp": 1633731441
    },
    {
        "content": "<p>yeah but i havent written C++ in so long, just a couple things for the shim <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 256813617,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731444
    },
    {
        "content": "<p>Did you see <code>RecursiveTypeDescription</code> in from cg_llvm?</p>",
        "id": 256813640,
        "sender_full_name": "nagisa",
        "timestamp": 1633731465
    },
    {
        "content": "<p>Yeah all of the code is from cg_llvm (latest), except adapted to work with llvm 7 shim stuff</p>",
        "id": 256813706,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731488
    },
    {
        "content": "<p>got it.</p>",
        "id": 256813717,
        "sender_full_name": "nagisa",
        "timestamp": 1633731496
    },
    {
        "content": "<p>i also changed the shim a bit... its a mess, im planning on switching to llvm 13 as a whole later on, then just lowering the llvm 13 IR to llvm 7 Ir to give it to nvvm</p>",
        "id": 256813740,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731518
    },
    {
        "content": "<p>well, DIBuilder::finalize should in theory resolve all cycles and whatnot fully, and that should be called when you're done with DI buildingâ€¦</p>",
        "id": 256813761,
        "sender_full_name": "nagisa",
        "timestamp": 1633731532
    },
    {
        "content": "<p>let me insert a debug to see if finalize is actually being called</p>",
        "id": 256813772,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731547
    },
    {
        "content": "<p>RecursiveTypeDescription's finalize method seems fine too</p>",
        "id": 256813817,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731592
    },
    {
        "content": "<p>like <a href=\"https://github.com/llvm/llvm-project/blob/llvmorg-7.1.0/llvm/lib/IR/DIBuilder.cpp#L120-L128\">https://github.com/llvm/llvm-project/blob/llvmorg-7.1.0/llvm/lib/IR/DIBuilder.cpp#L120-L128</a></p>",
        "id": 256813888,
        "sender_full_name": "nagisa",
        "timestamp": 1633731613
    },
    {
        "content": "<p>yeah i dont see why its not resolving it</p>",
        "id": 256813929,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731643
    },
    {
        "content": "<p>you could sneak in some code after this loop to iterate through everything remaining and see if there are any other unresolved nodes after. Maybe <code>resolveCycles</code> failed? Maybe there's something wrong with how <code>UnresolvedNodes</code> is populated <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> .</p>",
        "id": 256813982,
        "sender_full_name": "nagisa",
        "timestamp": 1633731683
    },
    {
        "content": "<p>Or perhaps there could be other DI construction _after_ finalize has been called.</p>",
        "id": 256814017,
        "sender_full_name": "nagisa",
        "timestamp": 1633731707
    },
    {
        "content": "<p>I think ill just reimplement the finalize method and see, i really dont want to rebuild llvm or that will destroy my pc</p>",
        "id": 256814033,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731721
    },
    {
        "content": "<p>the weird thing is... its dumping cgu llvm ir in deps just fine</p>",
        "id": 256814193,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731829
    },
    {
        "content": "<p>so i dont get why llvm doesnt like dumping it to bitcode but its fine with dumping it to llvm ir</p>",
        "id": 256814234,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731843
    },
    {
        "content": "<p>huh, i dont see any trace of finalize being called</p>",
        "id": 256814375,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731946
    },
    {
        "content": "<p>maybe cg_ssa calls codegen <em>before</em> finalizing debug info?</p>",
        "id": 256814458,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633731987
    },
    {
        "content": "<p>Ok so it seems like the final \"large\" functions being called are first optimize, then codegen</p>",
        "id": 256815767,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633732829
    },
    {
        "content": "<p>so i presume that cg_ssa doesnt call finalize before codegenning (does that even make sense in a non-gpu context?)</p>",
        "id": 256815808,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633732863
    },
    {
        "content": "<p>and it fails at</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_bc_timer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cgcx</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">prof</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">generic_activity_with_arg</span><span class=\"p\">(</span><span class=\"s\">\"NVVM_module_codegen_make_bitcode\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thin</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ThinBuffer</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">llmod</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thin</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_bc_emit_timer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cgcx</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">prof</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">generic_activity_with_arg</span><span class=\"p\">(</span><span class=\"s\">\"NVVM_module_codegen_emit_bitcode\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"failed to write bytecode to {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">diag_handler</span><span class=\"p\">.</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 256816100,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633733043
    },
    {
        "content": "<p>so I think the issue is definitely the fact that cg_ssa is not finalizing before codegen</p>",
        "id": 256816122,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633733058
    },
    {
        "content": "<p><code>cg_llvm</code> calls <code>debuginfo_finalize</code> itself from <code>module_codegen</code>.</p>",
        "id": 256816130,
        "sender_full_name": "nagisa",
        "timestamp": 1633733066
    },
    {
        "content": "<p>oh man no way i missed that <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 256816148,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633733087
    },
    {
        "content": "<p>yeah that seems like it, thanks <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 256816392,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633733268
    },
    {
        "content": "<p>if i can get this to work today ill post a picture of what debug info on the gpu can do, its really cool</p>",
        "id": 256816801,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633733519
    },
    {
        "content": "<p>You're welcome ^^</p>",
        "id": 256816969,
        "sender_full_name": "nagisa",
        "timestamp": 1633733618
    },
    {
        "content": "<p>oh wow it built and made a ptx file... i didnt expect this to work so soon</p>",
        "id": 256817129,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633733736
    },
    {
        "content": "<p>especially considering nvvm says that i should technically have a metadata that i do not have</p>",
        "id": 256817375,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633733893
    }
]