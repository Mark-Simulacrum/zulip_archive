[
    {
        "content": "<p>Hi, </p>\n<p>I was thinking of PRing a HashMap::swap(&amp;mut self, a : &amp;Key, b : &amp;Key) method. </p>\n<ul>\n<li>\n<p>Is this something that could be added to the standard library? </p>\n</li>\n<li>\n<p>If so, is there maybe a reason it has not been added?</p>\n</li>\n</ul>\n<p>Description: Given two keys in the HashMap, swap their values using a ptr::swap, similar to swap for slices.</p>\n<p>Thanks</p>",
        "id": 244274815,
        "sender_full_name": "kev",
        "timestamp": 1624971098
    },
    {
        "content": "<p>What happens if a or b aren't in the map? It panics?</p>\n<blockquote>\n<p>Is there a reason it has not been added?</p>\n</blockquote>\n<p>It works the other way: if you have an idea for a new method, you should give an example where it would be useful. The default is not to add things (since otherwise the standard library would grow without bound)</p>",
        "id": 244276461,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624971781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Given.20two.20keys.2C.20swap.20their.20values/near/244276461\">said</a>:</p>\n<blockquote>\n<p>What happens if a or b aren't in the map? It panics?</p>\n<blockquote>\n<p>Is there a reason it has not been added?</p>\n</blockquote>\n<p>It works the other way: if you have an idea for a new method, you should give an example where it would be useful. The default is not to add things (since otherwise the standard library would grow without bound)</p>\n</blockquote>\n<p>Yep, it would panic if <code>a</code> or <code>b</code> are not present. My use case was that I was working on a DisJointSet data structure and I needed to swap the two values in the hashmap. Since I could not take two mutable references at once from the hashmap, this method would have been helpful to have.</p>\n<p>Also very fair on the point about standard library bloat :) Let me know if it seems like it is not needed or if the use case is niche</p>",
        "id": 244277546,
        "sender_full_name": "kev",
        "timestamp": 1624972275
    },
    {
        "content": "<p>you could start with <code>hashbrown</code> itself -- <code>get_each_mut</code> should make it easy</p>",
        "id": 244304329,
        "sender_full_name": "cuviper",
        "timestamp": 1624982211
    },
    {
        "content": "<p>or even just move to that for your own use case</p>",
        "id": 244304455,
        "sender_full_name": "cuviper",
        "timestamp": 1624982269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Given.20two.20keys.2C.20swap.20their.20values/near/244304329\">said</a>:</p>\n<blockquote>\n<p>you could start with <code>hashbrown</code> itself -- <code>get_each_mut</code> should make it easy</p>\n</blockquote>\n<p>Ah so I'm guessing that it is not something that is warranted. I'd prefer to use the regular HashMap with a pointer swap as it's just a simple std import :D</p>",
        "id": 244316668,
        "sender_full_name": "kev",
        "timestamp": 1624987364
    },
    {
        "content": "<p>hashbrown is the std hashmap implementation</p>",
        "id": 244320317,
        "sender_full_name": "The 8472",
        "timestamp": 1624988983
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Given.20two.20keys.2C.20swap.20their.20values/near/244320317\">said</a>:</p>\n<blockquote>\n<p>hashbrown is the std hashmap implementation</p>\n</blockquote>\n<p>Oh I thought I had to pull it in as a separate dep</p>",
        "id": 244321321,
        "sender_full_name": "kev",
        "timestamp": 1624989424
    },
    {
        "content": "<p>well, you do, but it's basically the same code, just exposing things that std doesn't.</p>",
        "id": 244321545,
        "sender_full_name": "The 8472",
        "timestamp": 1624989508
    }
]