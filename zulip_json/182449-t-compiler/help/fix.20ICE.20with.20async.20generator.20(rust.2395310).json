[
    {
        "content": "<p>Hi, I'm new to rustc and would like to try fixing <a href=\"https://github.com/rust-lang/rust/issues/95310\">rust#95310</a>. I think the problem is, that when the compiler is doing borrowck of <code>&lt;Blah as Service&gt;::spawn</code>, it finds the <code>defining_ty</code> is an <code>ty::Error</code>(in <a href=\"https://github.com/rust-lang/rust/blob/02ff9e0aef03d48fdecc2d114311217010ec1d81/compiler/rustc_borrowck/src/universal_regions.rs#L547\">rustc_borrowck/src/universal_regions.rs:L547</a>), which comes from the unsupported <code>yield</code> expression in the <code>async</code> block.</p>\n<p>I now have two ideas to fix this:</p>\n<ol>\n<li>Ignore the <code>yield</code> and treat it as <code>async move { &amp;1;  }</code> then do borrowck as normal. This may require to add a placeholder discriminant (like <code>Dummy</code> or <code>Error</code>) in the <code>DefiningTy</code>. I'm quite </li>\n<li>Abort the compiler before it tries to do borrowck via <code>sess.about_if_errors()</code>. I may test if the <code>def_id</code> has some type errors before this line <a href=\"https://github.com/rust-lang/rust/blob/ca5525d5643f4eb7de5c5e69d0691fc8f1cacfca/compiler/rustc_typeck/src/collect/type_of.rs#L583\">rustc_typeck/src/collect/type_of.rs:583</a>,</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Use borrowck to get the type with unerased regions.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">concrete_opaque_types</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mir_borrowck</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">concrete_opaque_types</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but I'm afraid it can cause regressions (actually it has failed some ui tests). Then I tried this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">kind</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">abort_if_errors</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And it still failed some ui tests (<code>ui/consts/const_in_pattern/issue-73431.rs</code>).</p>\n<p>Should I handle this in the <code>mir_borrowck</code> query instead? I might need some hints since I have not idea yet about how to bypass the <code>DefiningKind</code> placeholder, and I'm not sure if I am fixing it in the right way.</p>",
        "id": 277023037,
        "sender_full_name": "Frank King",
        "timestamp": 1648568114
    },
    {
        "content": "<p>BTW, here is my patch: <a href=\"https://github.com/frank-king/rust/commit/f945fd82e4b83473ecd1cc5bc38e1334f01e1853\">https://github.com/frank-king/rust/commit/f945fd82e4b83473ecd1cc5bc38e1334f01e1853</a></p>",
        "id": 277023930,
        "sender_full_name": "Frank King",
        "timestamp": 1648568450
    }
]