[
    {
        "content": "<p>Hello. I was just going to put together my first stabilization PR, but ran into a problem when following <a href=\"https://rustc-dev-guide.rust-lang.org/stabilization_guide.html#stabilization-pr\">the instructions</a>. One of the first steps is to move to feature from \"active\" to \"accepted\". Only one problem â€” the feature isn't listed. I've confirmed the feature does in fact work on nightly, so I'm not sure what's going on. The feature in question is <code>unsigned_abs</code> if it matters.</p>",
        "id": 222516842,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1610498558
    },
    {
        "content": "<p>Also, is this something that can be used directly in the compiler, or is this one of the things that has to wait one nightly?</p>",
        "id": 222517001,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1610498668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> when you say feature, do you mean a library feature, like <code>#[unstable(feature = \"unsigned_abs\")]</code>? Those don't need changes in the compiler</p>",
        "id": 222517602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610499161
    },
    {
        "content": "<p>the dev guide is a little biased towards the compiler right now but there's an outline of instructions at <a href=\"https://github.com/rust-lang/rustc-dev-guide/issues/932\">https://github.com/rust-lang/rustc-dev-guide/issues/932</a></p>",
        "id": 222517657,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610499210
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> duh. Thanks for pointing out the obvious haha</p>",
        "id": 222517675,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1610499224
    },
    {
        "content": "<p>nah you're good, the instructions are unhelpful</p>",
        "id": 222517742,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610499259
    },
    {
        "content": "<p>I'll take a look at your PR. Presumably things are a fair amount simpler for lib changes, at least.</p>",
        "id": 222517743,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1610499260
    },
    {
        "content": "<p>I was going to say the libs stabilization docs are at <a href=\"https://forge.rust-lang.org/libs/maintaining-std.html#when-a-feature-is-being-stabilized\">https://forge.rust-lang.org/libs/maintaining-std.html?#when-a-feature-is-being-stabilized</a>, but then realized those aren't super clear, either. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222517969,
        "sender_full_name": "Eric Huss",
        "timestamp": 1610499439
    },
    {
        "content": "<p>Better than nothing! I've at least seen the <code>#[stable]</code> attributes when looking at code before.</p>",
        "id": 222518009,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1610499479
    },
    {
        "content": "<p>Is <code>#[rustc_const_stable]</code> always necessary, or only when it was previously not <code>const</code>?</p>",
        "id": 222518340,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1610499709
    },
    {
        "content": "<p>AFAIK the only thing that uses that is rustdoc</p>",
        "id": 222518736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610499999
    },
    {
        "content": "<p>if they're the same it might be nice to say it explicitly, instead of making the reader guess</p>",
        "id": 222518761,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610500022
    },
    {
        "content": "<p>I was just looking through the same file, and it _looks like_ it's always required. Can't hurt to have one extra line anyways.</p>",
        "id": 222518785,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1610500036
    },
    {
        "content": "<p>My understanding is that <code>rustc_const_stable</code> is only used for functions that were stabilized <em>without</em> <code>const</code> and then <code>const</code> was added later. So I don't think you should add it.</p>",
        "id": 222528896,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610509062
    },
    {
        "content": "<p>That said, I may be wrong :)</p>",
        "id": 222528903,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610509067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Feature.20not.20listed.20in.20compiler.2Frustc_feature/near/222518736\">said</a>:</p>\n<blockquote>\n<p>AFAIK the only thing that uses that is rustdoc</p>\n</blockquote>\n<p>Actually the compiler enforces stuff based on it. It's used just like <code>#[unstable]</code> and <code>#[stable]</code>.</p>\n<p>For example, <code>std::panic::Location::caller</code> is a stable function but is not yet stable in const-context. So, this code gives an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">Location</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">Location</span>::<span class=\"n\">caller</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=208a1012df4dd238cf44e100589c52b8\">Playground</a>)</p>\n<p>Errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling playground v0.0.1 (/playground)\nerror: `Location::&lt;&#39;a&gt;::caller` is not yet stable as a const fn\n --&gt; src/main.rs:2:5\n  |\n2 |     std::panic::Location::caller()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nerror: could not compile `playground`\n\nTo learn more, run the command again with --verbose.\n</code></pre></div>",
        "id": 222529109,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610509307
    }
]