[
    {
        "content": "<p>Given a function that have 2 parameters, 3 constants, and 4 compiler-generated temporaries. Can I assume that the index of all of those locals are unique, and in the range 0 to 8? ie, can I create a <code>Vec</code> with (2 + 3 + 4) 8 booleans, and use the index of each locals to index that <code>Vec</code>?</p>",
        "id": 216719192,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605347305
    },
    {
        "content": "<p>Or do I need to use a <code>HashMap</code>?</p>",
        "id": 216719210,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605347332
    },
    {
        "content": "<p>I forgot the return value. So my <code>Vec</code> should have 9 elements. Same question. Can I use <code>locals.index() + 1</code>  to index the <code>Vec</code>?</p>",
        "id": 216719312,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605347430
    },
    {
        "content": "<p>You can use <code>IndexVec</code>. This is what is used to store all locals in <code>mir::Body</code> too.</p>",
        "id": 216722174,
        "sender_full_name": "bjorn3",
        "timestamp": 1605351232
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html#structfield.local_decls\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html#structfield.local_decls</a></p>",
        "id": 216722226,
        "sender_full_name": "bjorn3",
        "timestamp": 1605351257
    },
    {
        "content": "<p>Effectively, this makes sense.</p>",
        "id": 216722813,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605352156
    }
]