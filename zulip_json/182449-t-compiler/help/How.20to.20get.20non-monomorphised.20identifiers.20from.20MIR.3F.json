[
    {
        "content": "<p>How do I get the non-monomorphized name of a function from a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/terminator/struct.Terminator.html\"><code>rustc_middle::mir::terminator::Terminator</code></a> (whose kind is an <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/terminator/enum.TerminatorKind.html\"><code>Operand::Call</code></a>?<br>\nIf I tried to pretty print the <code>Operand::Call</code>, I get things like <code>m1::foo2::&lt;F&gt;</code>, <code>&lt;F as std::ops::Fn&lt;()&gt;&gt;::call</code> or <code>m1::foo3::&lt;fn() {m2::bar}&gt;</code> instead of respectively <code>m1::foo2</code>, <code>Fn::call</code> and <code>m1::foo3</code>.<br>\nI would like to have the same output than what I get with HIR: <code>tcx.def_path_str(my_function.to_def_id())</code></p>",
        "id": 216511233,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605207077
    },
    {
        "content": "<p>I guess the issue is that what you want is the generic param?</p>",
        "id": 216511402,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1605207144
    },
    {
        "content": "<p>from <code>m1::foo3::&lt;fn() {m2::bar}&gt;</code>, I don't need <code>m1::foo&lt;T: Fn()&gt;</code>, I just need <code>m1::foo</code></p>",
        "id": 216511982,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605207397
    },
    {
        "content": "<p>Is there a way to pretty print the real type of a hierarchy of enum (ie, not using <code>Debug</code>, but getting something like <code>typeof(my_enum).to_string()</code>)?</p>",
        "id": 216513273,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605207959
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>::<span class=\"n\">FnDef</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* no path available (e.g., a function pointer call) */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216525951,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1605213978
    },
    {
        "content": "<p>I had to modify it slightly, but it works, thank you so much!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">subfunction</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">literal</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">FnDef</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">));()},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* no path available (e.g., a function pointer call) */</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216577147,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605254207
    },
    {
        "content": "<p>Is there a better way to detect if the call was monomorphised than this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">FnDef</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">subfunction</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">literal</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unreachable</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">monomorphized_call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">subfunction</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216577874,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605254847
    }
]