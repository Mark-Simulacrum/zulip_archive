[
    {
        "content": "<p>Copying from <a href=\"https://github.com/rust-lang/rust/pull/75176#issuecomment-671001837\">https://github.com/rust-lang/rust/pull/75176#issuecomment-671001837</a> for convenience:</p>\n<p>The error comes from here: <a href=\"https://github.com/rust-lang/rust/blob/e539dd65f8ba80837f7477c0547c61514bceb3ad/src/librustc_resolve/macros.rs#L1077-L1087\">https://github.com/rust-lang/rust/blob/e539dd65f8ba80837f7477c0547c61514bceb3ad/src/librustc_resolve/macros.rs#L1077-L1087</a></p>\n<p>Note that <code>compile_macro</code> uses <code>builtin_macros.remove</code> instead of <code>.get</code>. So I think it expects to only ever be called once. I'm not sure <em>why</em> it was called more than once - I'd expect it to only be called once during <code>expand</code>.</p>\n<p>There are a bunch of other questions that pop up, like</p>\n<ul>\n<li>Why does this only happen when documenting <code>proc_macro</code>?</li>\n<li>How is this possibly affected by my change?</li>\n</ul>",
        "id": 206377153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596945101
    },
    {
        "content": "<p>I think this might be because rustdoc is generating fake DefIds - this panics when you try to print the def id:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;index out of bounds: the len is 18 but the index is 18&#39;, src/librustc_metadata/creader.rs:128:21\n</code></pre></div>\n\n\n<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> - rustc_metadata is your specialty and also <code>git blame</code> shows you as the last one to touch <code>next_def_id</code> on <code>auto_trait</code> and <code>blanket_impls</code>. Do you know how <code>rustc_resolve</code> could possibly be seeing a fake ID created by rustdoc?</p>",
        "id": 206425868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597031646
    },
    {
        "content": "<p>(more info on the PR)</p>",
        "id": 206425871,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597031653
    },
    {
        "content": "<p>and also, why does rustdoc create fake IDs in the first place instead of using <code>param_env_def_id</code> and <code>impl_def_id</code>?</p>",
        "id": 206425893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597031708
    },
    {
        "content": "<p>ugh this didn't fix it</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/clean/auto_trait.rs b/src/librustdoc/clean/auto_trait.rs</span>\n<span class=\"gh\">index 9c44d27447d..0325ea75445 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/clean/auto_trait.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/clean/auto_trait.rs</span>\n<span class=\"gu\">@@ -122,7 +122,8 @@ impl&lt;&#39;a, &#39;tcx&gt; AutoTraitFinder&lt;&#39;a, &#39;tcx&gt; {</span>\n                     name: None,\n                     attrs: Default::default(),\n                     visibility: Inherited,\n<span class=\"gd\">-                    def_id: self.cx.next_def_id(param_env_def_id.krate),</span>\n<span class=\"gi\">+                    //def_id: self.cx.next_def_id(param_env_def_id.krate),</span>\n<span class=\"gi\">+                    def_id: param_env_def_id,</span>\n                     stability: None,\n                     deprecation: None,\n                     inner: ImplItem(Impl {\n<span class=\"gh\">diff --git a/src/librustdoc/clean/blanket_impl.rs b/src/librustdoc/clean/blanket_impl</span>\n.rs\n<span class=\"gh\">index 3d2785541be..d3f87c91279 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/clean/blanket_impl.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/clean/blanket_impl.rs</span>\n<span class=\"gu\">@@ -96,7 +96,8 @@ impl&lt;&#39;a, &#39;tcx&gt; BlanketImplFinder&lt;&#39;a, &#39;tcx&gt; {</span>\n                     name: None,\n                     attrs: Default::default(),\n                     visibility: Inherited,\n<span class=\"gd\">-                    def_id: self.cx.next_def_id(impl_def_id.krate),</span>\n<span class=\"gi\">+                    //def_id: self.cx.next_def_id(impl_def_id.krate),</span>\n<span class=\"gi\">+                    def_id: impl_def_id,</span>\n                     stability: None,\n                     deprecation: None,\n                     inner: ImplItem(Impl {\n</code></pre></div>\n\n\n<p>so maybe fake IDs aren't to blame after all? I don't see <code>next_def_id</code> used anywhere else</p>",
        "id": 206426000,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1597031847
    }
]