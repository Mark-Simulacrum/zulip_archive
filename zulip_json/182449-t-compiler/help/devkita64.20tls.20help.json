[
    {
        "content": "<p>I'm working on a Rust target for DevkitA64 (the most popular toolchain for Nintendo Switch homebrew). DevkitA64, for historical reasons, uses soft TLS instead of hard TLS. Soft TLS is <em>very</em> uncommon on aarch64, and upstream LLVM doesn't support it. There's a patch adding it at <a href=\"https://github.com/Thog/llvm/commit/8657ba2a3b1c8433259e68040b5724f0b8118a09\">https://github.com/Thog/llvm/commit/8657ba2a3b1c8433259e68040b5724f0b8118a09</a>, but it seems too specific to upstream, but also doesn't make much sense to add to Rust's LLVM fork...</p>",
        "id": 204419034,
        "sender_full_name": "leo60228",
        "timestamp": 1595250225
    },
    {
        "content": "<p>Can you implement it in libstd instead? <code>#[thread_local] static</code> is nightly only, so pretty much everyone uses the <code>thread_local!</code> macro, which can expand to whatever code you want to implement TLS.</p>",
        "id": 204419667,
        "sender_full_name": "bjorn3",
        "timestamp": 1595250560
    },
    {
        "content": "<p>I'm not sure. I don't <em>think</em> so, but maybe? I've asked the author of that patch.</p>",
        "id": 204420785,
        "sender_full_name": "leo60228",
        "timestamp": 1595251150
    },
    {
        "content": "<p>Non-ELF TLS works fine because the actual TLS code is compiled by GCC. I'm going to try and get ELF TLS working anyway, just because I feel like not doing that could lead to issues with stuff like errno later on.</p>",
        "id": 204422527,
        "sender_full_name": "leo60228",
        "timestamp": 1595252168
    },
    {
        "content": "<p>Just got that patch working, for what it's worth.</p>",
        "id": 204427344,
        "sender_full_name": "leo60228",
        "timestamp": 1595254624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239001\">@leo60228</span> I think what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> is referring to uses the <code>pthread_key_create</code> / <code>pthread_{set,get}specific</code> API, so if you have something like that you should be able to integrate it</p>",
        "id": 204445241,
        "sender_full_name": "eddyb",
        "timestamp": 1595263093
    },
    {
        "content": "<p>I know, that works. I'm just worried about what happens when Rust tries to access TLS defined in C code.</p>",
        "id": 204445286,
        "sender_full_name": "leo60228",
        "timestamp": 1595263122
    },
    {
        "content": "<p>I'm not even sure we use LLVM soft TLS anywhere. maybe we should, to make <code>#[thread_local]</code> work everywhere</p>",
        "id": 204445305,
        "sender_full_name": "eddyb",
        "timestamp": 1595263136
    },
    {
        "content": "<p>ah, for like <code>errno</code>?</p>",
        "id": 204445314,
        "sender_full_name": "eddyb",
        "timestamp": 1595263143
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 204445328,
        "sender_full_name": "leo60228",
        "timestamp": 1595263152
    },
    {
        "content": "<p>you can pretty much ensure it never happens, I think?</p>",
        "id": 204445336,
        "sender_full_name": "eddyb",
        "timestamp": 1595263157
    },
    {
        "content": "<p>there's a <code>has_elf_tls</code> flag in the target spec that controls whether <code>#[thread_local]</code> even exists</p>",
        "id": 204445456,
        "sender_full_name": "eddyb",
        "timestamp": 1595263212
    }
]