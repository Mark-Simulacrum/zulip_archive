[
    {
        "content": "<p>For <code>InlineAsm</code> this makes sense, but why does eg <code>Assert</code> have a <code>cleanup: Option&lt;BasicBlock&gt;</code>? What does it being <code>None</code> indicate? I originally thought this might be for double panics, but that doesn't seem to be what codegen implements. Is it being <code>None</code> just an \"unsafe\" assertion that this won't unwind?</p>",
        "id": 275309970,
        "sender_full_name": "Jake",
        "timestamp": 1647299191
    },
    {
        "content": "<p>Looking at e.g. <a href=\"https://github.com/rust-lang/rust/blob/285fa7ecd05dcbfdaf2faaf20400f5f92b39b3c6/compiler/rustc_mir_transform/src/abort_unwinding_calls.rs#L88\"><code>AbortUnwindingCalls::run_pass</code></a>, it seems like <code>Assert</code> terminators can have a cleanup block or not depending on whether <code>panic=abort</code> or <code>panic=unwind</code> is set</p>",
        "id": 275311079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647299988
    },
    {
        "content": "<p>None means no cleanup is to be performed during unwinding. Either because it is known that terminator will never unwind, i.e., the case already mentioned, or because there is simply nothing to clean up. For the latter situation see <code>RemoveNoopLandingPads</code>.</p>",
        "id": 275355702,
        "sender_full_name": "tm",
        "timestamp": 1647340902
    }
]