[
    {
        "content": "<p>Hello to all!<br>\nI'm new in Rust community and I'm trying to solve one issue, but there is a situation I'm not sure about:<br>\nWhat the expected result of compiling this function:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn f&lt;&#39;a, I&gt;(mut i: I) -&gt; &amp;i32\nwhere\n    I: Iterator&lt;Item = &amp;&#39;a i32&gt;\n{\n    loop {\n        match i.next() {\n            Some(x) =&gt; return x,\n            None =&gt; continue\n        }\n    }\n}\n</code></pre></div>\n<p>The current compiler says that it is necessary to put explicit lifetime for return type, but maybe here should be used rules of eliding lifetimes?</p>",
        "id": 218619238,
        "sender_full_name": "Dmitry Murygin",
        "timestamp": 1606942967
    },
    {
        "content": "<p>I don't think the lifetime elision rules apply because there is no self type</p>",
        "id": 218647022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606962255
    },
    {
        "content": "<p>Given the text exactly as written, I think <code>&amp;i32</code> should be an error, because the elision rules don't apply and hence the reference doesn't refer to anything. It should be written <code>&amp;'a i32</code></p>",
        "id": 218647132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606962407
    },
    {
        "content": "<p>(compiling it now, it looks like the rust compiler agrees with me)</p>",
        "id": 218647168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606962463
    },
    {
        "content": "<p>If this were to be written with elided lifetime syntax, it should be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"nc\">I</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span>\n<span class=\"nc\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">I</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but apparently lifetimes can never be elided in trait bounds, which I guess is reasonable</p>",
        "id": 218647259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606962576
    },
    {
        "content": "<p>I haven't tried this before, but apparently it is valid to use elided lifetimes only partially, as in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"nc\">I</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span>\n    <span class=\"nc\">where</span><span class=\"w\"> </span><span class=\"n\">I</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where the <code>&amp;i32</code> gets lifetime <code>'b</code>. Personally, I would try to avoid this; if you give a lifetime a name you should use it everywhere it applies</p>",
        "id": 218647447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606962810
    }
]