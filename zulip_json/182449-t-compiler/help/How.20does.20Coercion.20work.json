[
    {
        "content": "<p>While trying to fix issue <a href=\"https://github.com/rust-lang/rust/issues/91636\">#91636</a> I found this Compiler-Coercion interaction:<br>\nWhen compiling code like this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">type_of</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"type -&gt; {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">any</span>::<span class=\"n\">type_name</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\" type of foo {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>everything works fine it compiles, I think it's because as we println! foo implicitly coerces.</p>\n<p>Meanwhile this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_a</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// println!(\" type of foo {:?}\", type_of(foo)); // if I do this it prints foo's type as error::foo</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>panics and throws ICE because there is no coercion and foo is zero sized type and stuff goes wrong. <br>\nEverything makes sense till this point.But error message is this : <code>'Unexpected types for BinOp: fn(&amp;str) bin op Eq for&lt;'r&gt; fn(&amp;'r str)', rust/compiler/rustc_const_eval/src/interpret/operator.rs:332:17</code> how does compiler know <code>foo</code> is <code>for&lt;'r&gt; fn(&amp;'r str)</code> without coercion and if it does how come assertion fails ? Aren't these two types are the same. <br>\nAnd if this is a bug what should expected behavior be ?</p>",
        "id": 264218155,
        "sender_full_name": "Oguz",
        "timestamp": 1638996575
    },
    {
        "content": "<p>Looks HRTB related</p>",
        "id": 264384385,
        "sender_full_name": "Gary Guo",
        "timestamp": 1639093938
    },
    {
        "content": "<p>the two types are certainly not the same. both are <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variant.FnPtr\">FnPtr</a> but their <code>PolyFnSig</code> will be different.</p>",
        "id": 264393372,
        "sender_full_name": "RalfJ",
        "timestamp": 1639100612
    },
    {
        "content": "<p>I have no idea how this <code>println!</code>, which does not even mention <code>x</code>, can somehow affect the code that follows -- that is very odd, and it might be worth looking at the MIR to figure out what happens</p>",
        "id": 264393433,
        "sender_full_name": "RalfJ",
        "timestamp": 1639100662
    },
    {
        "content": "<p>however, I think that is mostly orthogonal to fixing the ICE: clearly, <code> right.layout.ty == left.layout.ty || right.layout.ty.is_integral()</code> needs to be replaced by some weaker condition. I am inlined to just make it <code>right.laouy.ty.is_any_pointer() || right.layout.ty.is_integral()</code>. then the code that follows, in particular <code>binary_ptr_op</code>, needs to be checked to ensure that it can handle this.</p>",
        "id": 264393490,
        "sender_full_name": "RalfJ",
        "timestamp": 1639100756
    },
    {
        "content": "<p>and looking at the implementation of that code in Miri, I think it is fine</p>",
        "id": 264393635,
        "sender_full_name": "RalfJ",
        "timestamp": 1639100840
    },
    {
        "content": "<p>so figuring out what happens with the coercions is interesting, but not required to fix the ICE :)</p>",
        "id": 264393643,
        "sender_full_name": "RalfJ",
        "timestamp": 1639100858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Coercion.20work/near/264393490\">said</a>:</p>\n<blockquote>\n<p>however, I think that is mostly orthogonal to fixing the ICE: clearly, <code> right.layout.ty == left.layout.ty || right.layout.ty.is_integral()</code> needs to be replaced by some weaker condition. I am inlined to just make it <code>right.laouy.ty.is_any_pointer() || right.layout.ty.is_integral()</code>. then the code that follows, in particular <code>binary_ptr_op</code>, needs to be checked to ensure that it can handle this.</p>\n</blockquote>\n<p>I ran <code>./x.py test -i src/test/ui</code> with the changes you mentioned and test ran without any errors so we can assume this is the fix ?</p>",
        "id": 264451628,
        "sender_full_name": "Oguz",
        "timestamp": 1639145217
    },
    {
        "content": "<p>Now I am planning to look at what is happening with <code>println!</code> I will post here if I <em>can</em> find something</p>",
        "id": 264451988,
        "sender_full_name": "Oguz",
        "timestamp": 1639145392
    },
    {
        "content": "<p>If <code>foo</code> is not printed in the <code>main</code> function, statement enters <code>Rvalue::BinaryOp</code> then it enters <code>overflowing_binary_op</code>.<br>\nIf <code>foo</code> gets printed statement never enters <code>overflowing_binary_op</code>.  Printing <code>foo</code> totally changes how program behaves <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 264472878,
        "sender_full_name": "Oguz",
        "timestamp": 1639154260
    },
    {
        "content": "<p>I also printed <code>Miri</code> graph of these two but I don't know what I am  looking at.<br>\n<a href=\"http://tinyurl.com/3yvss453\">The one with print</a> ,  <a href=\"http://tinyurl.com/ybm9v5vj\">other one</a></p>",
        "id": 264473920,
        "sender_full_name": "Oguz",
        "timestamp": 1639154720
    },
    {
        "content": "<blockquote>\n<p>printing <code>foo</code> totally changes how program behaves</p>\n</blockquote>\n<p>Is this true even after your fix to the assertion?</p>",
        "id": 264493550,
        "sender_full_name": "Troy",
        "timestamp": 1639163098
    },
    {
        "content": "<p>it never enters to that assertion in the first place</p>",
        "id": 264502316,
        "sender_full_name": "Oguz",
        "timestamp": 1639167505
    },
    {
        "content": "<p>so <em>fixing</em> the assertion only fixes the program when there is no print</p>",
        "id": 264502419,
        "sender_full_name": "Oguz",
        "timestamp": 1639167573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460107\">Oguz</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Coercion.20work/near/264473920\">said</a>:</p>\n<blockquote>\n<p>I also printed <code>Miri</code> graph of these two but I don't know what I am  looking at.<br>\n<a href=\"http://tinyurl.com/3yvss453\">The one with print</a> ,  <a href=\"http://tinyurl.com/ybm9v5vj\">other one</a></p>\n</blockquote>\n<p>the 'other one' does not even have a comparison in it any more...?</p>",
        "id": 264538082,
        "sender_full_name": "RalfJ",
        "timestamp": 1639193080
    },
    {
        "content": "<p>Well because it panics I couldn't get it to output <code>Miri</code> graph <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  , <a href=\"https://tinyurl.com/2p8u2xc8\">here</a> is the graph with the change you mentioned . Also code only compiles when I add <code>+stage1</code> option.</p>",
        "id": 264549859,
        "sender_full_name": "Oguz",
        "timestamp": 1639211211
    },
    {
        "content": "<p>Otherwise it ICEs and dumps query stack: <br>\n<code>query stack during panic:\n#0 [optimized_mir] optimizing MIR for </code>main<code>\n#1 [collect_and_partition_mono_items] collect_and_partition_mono_items\nend of query stack</code></p>",
        "id": 264549930,
        "sender_full_name": "Oguz",
        "timestamp": 1639211317
    },
    {
        "content": "<p>The ICE was triggered by constant propagation. The interaction with line containing <code>println!</code> is  probably because it introduces a separate basic block and then definition of x will not be available in the other block, so constant propagation will bail out earlier. Adding <code>if true { .. }</code> has similar effect.</p>",
        "id": 264552156,
        "sender_full_name": "tm",
        "timestamp": 1639214661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Coercion.20work/near/264552156\">said</a>:</p>\n<blockquote>\n<p>The ICE was triggered by constant propagation. The interaction with line containing <code>println!</code> is  probably because it introduces a separate basic block and then the definition of x will not be available in the other block, so constant propagation will bail out earlier. Adding <code>if true { .. }</code> has similar effect.</p>\n</blockquote>\n<p>I think this can cause other issues in the future, any idea where should I look to properly fix this ?</p>",
        "id": 264558290,
        "sender_full_name": "Oguz",
        "timestamp": 1639223312
    },
    {
        "content": "<p>another thing <code>assert!(foo == x)</code> gives out proper error instead of ICE</p>",
        "id": 264558457,
        "sender_full_name": "Oguz",
        "timestamp": 1639223531
    },
    {
        "content": "<p>What I was trying to say, that if you are testing this through rustc, where evaluation happens for const propagation purposes, it is completely normal for evaluation to stop early without reaching <code>overflowing_binary_op</code>.<br>\nThough, if you are observing this difference in behaviour when executing program using Miri the tool, that would be surprising indeed.</p>",
        "id": 264562152,
        "sender_full_name": "tm",
        "timestamp": 1639228354
    },
    {
        "content": "<p>What I am trying to understand is why const propagation makes this a <em>normal</em> behavior, and why it causes ICE when it's ran through 'rustc error.rs`</p>",
        "id": 264562598,
        "sender_full_name": "Oguz",
        "timestamp": 1639228940
    },
    {
        "content": "<p>To clarify, the question is why the second code snippet causes ICE when compiled with rustc, while the first one compiles successfully?</p>",
        "id": 264562912,
        "sender_full_name": "tm",
        "timestamp": 1639229329
    },
    {
        "content": "<p>I literally have no idea, first one always compiles successfully , I think it must be something to do with <code>constant propagation</code>. But as I said if I do <code>foo == x</code> instead of <code>x == foo</code> it gives out proper error message not ICE</p>",
        "id": 264563078,
        "sender_full_name": "Oguz",
        "timestamp": 1639229641
    },
    {
        "content": "<p>Or this could be something to do with what RalfJ said <a href=\"https://github.com/rust-lang/rust/issues/91636#issuecomment-990064294\">here</a></p>",
        "id": 264563141,
        "sender_full_name": "Oguz",
        "timestamp": 1639229733
    },
    {
        "content": "<p>Oh, so the question is about the difference between <code>foo == x</code> and <code>x == foo</code>?</p>",
        "id": 264563400,
        "sender_full_name": "tm",
        "timestamp": 1639230065
    },
    {
        "content": "<p>Actually there are 2 questions 1- Why there is ICE when <code>x == foo</code> but not in vice versa (why compiler treats these two differently) 2- How do I fix this ICE <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 264563491,
        "sender_full_name": "Oguz",
        "timestamp": 1639230200
    },
    {
        "content": "<p>I see. I thought the question was still about significance of <code>println!</code>, which can be understood by comparing logs for both variants with <code>env RUSTC_LOG=rustc_mir_transform::const_prop,rustc_const_eval=trace</code> (assuming one has a build with debug logging).</p>",
        "id": 264564044,
        "sender_full_name": "tm",
        "timestamp": 1639230973
    },
    {
        "content": "<p>I did look at those logs to understand why <code>println!</code> caused it to not ICE in the first place but those logs are humongous I am not sure where to look to compare them</p>",
        "id": 264564595,
        "sender_full_name": "Oguz",
        "timestamp": 1639231694
    },
    {
        "content": "<p>Version that ICEs would be first starting point, since the interesting part log logs is just before the panic:</p>\n<div class=\"codehilite\"><pre><span></span><code>├─12ms TRACE rustc_mir_transform::const_prop visit_statement: _3 = Eq(move _4, move _5)\n├─12ms TRACE rustc_mir_transform::const_prop checking BinaryOp(op = Eq, left = move _4, right = move _5)\n├─12ms TRACE rustc_const_eval::interpret::operand eval_place_to_op: got Immediate(Scalar(alloc1))\n├─12ms TRACE rustc_const_eval::interpret::operand move _5: Immediate(Scalar(alloc1))\n├─12ms TRACE rustc_const_eval::interpret::operand eval_place_to_op: got Immediate(Scalar(alloc1))\n├─12ms TRACE rustc_const_eval::interpret::operand move _4: Immediate(Scalar(alloc1))\n├─12ms TRACE rustc_const_eval::interpret::operator Running binary op Eq: ImmTy { imm: Scalar(alloc1), layout: TyAndLayout { ty: fn(&amp;str), layout: Layout { fields: Primitive, variants: Single { index: 0 }, abi: Scalar(Scalar { value: Pointer, valid_range: 1..=18446744073709551615 }), largest_niche: Some(Niche { offset: Size { raw: 0 }, scalar: Scalar { value: Pointer, valid_range: 1..=18446744073709551615 } }), align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 8 } } } } (fn(&amp;str)), ImmTy { imm: Scalar(alloc1), layout: TyAndLayout { ty: for&lt;&#39;r&gt; fn(&amp;&#39;r str), layout: Layout { fields: Primitive, variants: Single { index: 0 }, abi: Scalar(Scalar { value: Pointer, valid_range: 1..=18446744073709551615 }), largest_niche: Some(Niche { offset: Size { raw: 0 }, scalar: Scalar { value: Pointer, valid_range: 1..=18446744073709551615 } }), align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 8 } } } } (for&lt;&#39;r&gt; fn(&amp;&#39;r str))\nthread &#39;rustc&#39; panicked at &#39;Unexpected types for BinOp: fn(&amp;str) Eq for&lt;&#39;r&gt; fn(&amp;&#39;r str)&#39;, /home/tm/rust/compiler/rustc_const_eval/src/interpret/operator.rs:332:17\n</code></pre></div>\n<p>Then we can run the second version and locate corresponding <code>visit_statement</code> and <code>checking BinaryOp</code>, which suggest that we never reached \"Running binary op\", because operands to <code>Eq</code> were uninitialized:</p>\n<div class=\"codehilite\"><pre><span></span><code>├─35ms TRACE rustc_mir_transform::const_prop checking BinaryOp(op = Eq, left = move _24, right = move _25)\n├─35ms TRACE rustc_const_eval::interpret::operand eval_place_to_op: got Immediate(Scalar(alloc1))\n├─35ms TRACE rustc_const_eval::interpret::operand move _25: Immediate(Scalar(alloc1))\n├─35ms TRACE rustc_mir_transform::const_prop InterpCx operation failed: InterpErrorInfo(InterpErrorInfoInner { kind: tried to access an uninitialized local, backtrace: None })\n├─35ms TRACE rustc_const_eval::interpret::place _23: is uninitialized:\n├─35ms TRACE rustc_mir_transform::const_prop InterpCx operation failed: InterpErrorInfo(InterpErrorInfoInner { kind: tried to access an uninitialized local, backtrace: None })\n├─35ms TRACE rustc_mir_transform::const_prop propagation into _23 failed.\n│                         Nuking the entire site from orbit, it&#39;s the only way to be sure\n</code></pre></div>",
        "id": 264565084,
        "sender_full_name": "tm",
        "timestamp": 1639232404
    },
    {
        "content": "<p>That's actually very helpful thanks a lot! It seems there are a lot more errors in the second version but compiler gives up and just runs the program without crashing so this is definitely unwanted behavior <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 264565455,
        "sender_full_name": "Oguz",
        "timestamp": 1639232910
    },
    {
        "content": "<p>There seems to be 3 errors/bugs(?):<br>\n1- ICE<br>\n2- <code>==</code> is behaves differently in a case where it shouldn't<br>\n3- <code>println!</code> causes behavioral change in a program where it shouldn't</p>",
        "id": 264565587,
        "sender_full_name": "Oguz",
        "timestamp": 1639233125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  I been working on this for a while and it looks like allowing <code>eq</code> between supertypes and subtypes is required to build the <code>core</code> and compiler behavior is this: if <code>lhs</code> is supertype of <code>rhs</code> coercion happens and <code>eq</code> is successful other wise it's not.<br>\nI don't know if this behavior is sound or not. Also should I open a <code>pr</code> for this your suggested change fixes the <code>ICE</code> or you would like to do it yourself.</p>",
        "id": 264639506,
        "sender_full_name": "Oguz",
        "timestamp": 1639337485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460107\">Oguz</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Coercion.20work/near/264549859\">said</a>:</p>\n<blockquote>\n<p>Well because it panics I couldn't get it to output <code>Miri</code> graph <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  , <a href=\"https://tinyurl.com/2p8u2xc8\">here</a> is the graph with the change you mentioned . Also code only compiles when I add <code>+stage1</code> option.</p>\n</blockquote>\n<p>btw I think you mean the MIR graph. MIR is the name of the intermediate representation. Miri is a tool that works on that representation. :)</p>",
        "id": 264648420,
        "sender_full_name": "RalfJ",
        "timestamp": 1639349774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460107\">Oguz</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Coercion.20work/near/264639506\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>  I been working on this for a while and it looks like allowing <code>eq</code> between supertypes and subtypes is required to build the <code>core</code> and compiler behavior is this: if <code>lhs</code> is supertype of <code>rhs</code> coercion happens and <code>eq</code> is successful other wise it's not.<br>\nI don't know if this behavior is sound or not. Also should I open a <code>pr</code> for this, your suggested change fixes the <code>ICE</code> or you would like to do it yourself.</p>\n</blockquote>\n<p>I dont know either how coercions are supposed to behave, but having a slight difference in the inferred types between <code>x == foo</code> and <code>foo == x</code> does not seem surprising to me.<br>\nfeel free to make a PR with the suggested change to fix the ICE :)</p>",
        "id": 264649030,
        "sender_full_name": "RalfJ",
        "timestamp": 1639350560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Coercion.20work/near/264648420\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"460107\">Oguz</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20does.20Coercion.20work/near/264549859\">said</a>:</p>\n<blockquote>\n<p>Well because it panics I couldn't get it to output <code>Miri</code> graph <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  , <a href=\"https://tinyurl.com/2p8u2xc8\">here</a> is the graph with the change you mentioned . Also code only compiles when I add <code>+stage1</code> option.</p>\n</blockquote>\n<p>btw I think you mean the MIR graph. MIR is the name of the intermediate representation. Miri is a tool that works on that representation. :)</p>\n</blockquote>\n<p>I am new to <code>rustc</code>and there are too many terms so yes I probably meant that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . Thanks going to make a PR tomorrow <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 264650355,
        "sender_full_name": "Oguz",
        "timestamp": 1639352483
    }
]