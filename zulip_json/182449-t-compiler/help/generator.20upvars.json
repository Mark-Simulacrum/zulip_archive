[
    {
        "content": "<p>about <a href=\"https://github.com/rust-lang/rust/issues/75992\">https://github.com/rust-lang/rust/issues/75992</a> and its friends</p>\n<p>After <a href=\"https://github.com/rust-lang/rust/issues/75443\">#75443</a> we now normalize <code>for&lt;'a&gt; impl Trait&lt;'a&gt;</code>. This change now allows us to normalize generator upvars<br>\nwhich reference other generators/futures resulting in huge types.</p>\n<p>I personally don't know enough about how to fix this, so I need some help here.</p>",
        "id": 209027982,
        "sender_full_name": "lcnr",
        "timestamp": 1599166323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> considering that <a href=\"https://github.com/rust-lang/rust/issues/75443\">#75443</a> isn't too necessary, it might be easier to just revert that PR and instead use the pr by <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 209028365,
        "sender_full_name": "lcnr",
        "timestamp": 1599166529
    },
    {
        "content": "<p>oh, that's annoying</p>",
        "id": 209028491,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599166580
    },
    {
        "content": "<p>did the PR not have any impact on perf.r-l.o?</p>",
        "id": 209028541,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599166607
    },
    {
        "content": "<p>we should just remove <code>type_length_limit</code></p>",
        "id": 209028545,
        "sender_full_name": "eddyb",
        "timestamp": 1599166608
    },
    {
        "content": "<p>IIRC isn't all of the hanging just from the code checking <code>type_length_limit</code>?</p>",
        "id": 209028558,
        "sender_full_name": "eddyb",
        "timestamp": 1599166620
    },
    {
        "content": "<p>which, ironically, is trying to prevent other parts of the compiler from doing excessive work</p>",
        "id": 209028571,
        "sender_full_name": "eddyb",
        "timestamp": 1599166633
    },
    {
        "content": "<p>I don't know, I can try disabling it and see if the hang is fixed by that</p>",
        "id": 209028587,
        "sender_full_name": "lcnr",
        "timestamp": 1599166644
    },
    {
        "content": "<p>I recall there was another issue some of this was discussed on</p>",
        "id": 209028609,
        "sender_full_name": "eddyb",
        "timestamp": 1599166667
    },
    {
        "content": "<p>also <a href=\"https://www.reddit.com/r/rust/comments/iingya/compiler_regression_on_1460/g38281x/\">https://www.reddit.com/r/rust/comments/iingya/compiler_regression_on_1460/g38281x/</a></p>",
        "id": 209028672,
        "sender_full_name": "eddyb",
        "timestamp": 1599166689
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54540#issuecomment-485240110\">https://github.com/rust-lang/rust/issues/54540#issuecomment-485240110</a></p>",
        "id": 209028724,
        "sender_full_name": "eddyb",
        "timestamp": 1599166746
    },
    {
        "content": "<p>so this was a known problem for more than a year</p>",
        "id": 209028743,
        "sender_full_name": "eddyb",
        "timestamp": 1599166758
    },
    {
        "content": "<p>do we really not need that limit anymore?</p>",
        "id": 209028845,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599166805
    },
    {
        "content": "<p>btw this assumption is incorrect, the blow-up is observable by default, the value is only compared with the attribute (or the default) only <em>after</em> computing it (and computing it has the exponential blow-up) <a href=\"https://github.com/rust-lang/rust/issues/54540#issuecomment-488630418\">https://github.com/rust-lang/rust/issues/54540#issuecomment-488630418</a></p>",
        "id": 209028881,
        "sender_full_name": "eddyb",
        "timestamp": 1599166826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I can't think why we would. if we do for something,  it's a workaround to properly handling that situation efficiently</p>",
        "id": 209029061,
        "sender_full_name": "eddyb",
        "timestamp": 1599166902
    },
    {
        "content": "<p>we should dig up why it was added, IMO it's a mistake to assume we need it (or <em>ever</em> needed it)</p>",
        "id": 209029155,
        "sender_full_name": "eddyb",
        "timestamp": 1599166937
    },
    {
        "content": "<p>as in, it likely was always an imperfect workaround</p>",
        "id": 209029179,
        "sender_full_name": "eddyb",
        "timestamp": 1599166951
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/37789\">https://github.com/rust-lang/rust/pull/37789</a></p>",
        "id": 209029215,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599166971
    },
    {
        "content": "<p>huh <a href=\"https://github.com/rust-lang/rust/issues/37311\">https://github.com/rust-lang/rust/issues/37311</a></p>",
        "id": 209029373,
        "sender_full_name": "eddyb",
        "timestamp": 1599167050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> at least we have examples to try with the limit removed</p>",
        "id": 209029395,
        "sender_full_name": "eddyb",
        "timestamp": 1599167070
    },
    {
        "content": "<blockquote>\n<p>All of these examples create an exponentially-long type, and if we do anything to it before the recursion limit is reached, we hang (in fact, my \"reduced\" example hangs while printing the overflow error message).</p>\n</blockquote>",
        "id": 209029411,
        "sender_full_name": "eddyb",
        "timestamp": 1599167086
    },
    {
        "content": "<p>haha</p>",
        "id": 209029414,
        "sender_full_name": "eddyb",
        "timestamp": 1599167088
    },
    {
        "content": "<p>so it's not even something like LLVM type names, just an UX workaround</p>",
        "id": 209029457,
        "sender_full_name": "eddyb",
        "timestamp": 1599167109
    },
    {
        "content": "<p>if it's during printing a message, we could have a message printed just before the one which includes the details that can take forever to print</p>",
        "id": 209029651,
        "sender_full_name": "eddyb",
        "timestamp": 1599167225
    },
    {
        "content": "<p>and/or a custom <code>fmt::Write</code> implementation that after a certain length, errors through panicking (i.e. fatal error)</p>",
        "id": 209029777,
        "sender_full_name": "eddyb",
        "timestamp": 1599167287
    },
    {
        "content": "<p>it doesn't look like <code>type_length_limit</code> is the cause here</p>",
        "id": 209029811,
        "sender_full_name": "lcnr",
        "timestamp": 1599167318
    },
    {
        "content": "<p>with:</p>\n<div class=\"codehilite\"><pre><span></span><code>lcnr@lcnr-pc:~/wtf$ time cargo +stage1 build\n   Compiling dummy v0.1.0 (/home/lcnr/wtf/dummy)\n   Compiling wtf v0.1.0 (/home/lcnr/wtf)\n    Finished dev [unoptimized + debuginfo] target(s) in 17.46s\n\nreal    0m17,475s\nuser    0m17,384s\nsys     0m0,136s\n</code></pre></div>",
        "id": 209029835,
        "sender_full_name": "lcnr",
        "timestamp": 1599167336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> what's the patch you tested with?</p>",
        "id": 209029838,
        "sender_full_name": "eddyb",
        "timestamp": 1599167337
    },
    {
        "content": "<p>without</p>\n<div class=\"codehilite\"><pre><span></span><code>lcnr@lcnr-pc:~/wtf$ time cargo +stage1x build\n   Compiling dummy v0.1.0 (/home/lcnr/wtf/dummy)\n   Compiling wtf v0.1.0 (/home/lcnr/wtf)\n    Finished dev [unoptimized + debuginfo] target(s) in 18.06s\n\nreal    0m18,070s\nuser    0m17,966s\nsys     0m0,133s\n</code></pre></div>",
        "id": 209029851,
        "sender_full_name": "lcnr",
        "timestamp": 1599167348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>From 7278b15f0d72a39cbebed2c702bdc4e587f7f167 Mon Sep 17 00:00:00 2001\nFrom: Bastian Kauschke &lt;bastian_kauschke@hotmail.de&gt;\nDate: Thu, 3 Sep 2020 23:09:32 +0200\nSubject: [PATCH] patch\n\n---\n .../rustc_mir/src/monomorphize/collector.rs   | 52 +------------------\n 1 file changed, 1 insertion(+), 51 deletions(-)\n\ndiff --git a/compiler/rustc_mir/src/monomorphize/collector.rs b/compiler/rustc_mir/src/monomorphize/collector.rs\nindex 43cac8e5ee6..8c2a12c4141 100644\n--- a/compiler/rustc_mir/src/monomorphize/collector.rs\n+++ b/compiler/rustc_mir/src/monomorphize/collector.rs\n@@ -191,12 +191,11 @@ use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n use rustc_middle::mir::visit::Visitor as MirVisitor;\n use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n-use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_session::config::EntryFnType;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use smallvec::SmallVec;\n-use std::iter;\n\n #[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n@@ -375,7 +374,6 @@ fn collect_items_rec&lt;&#39;tcx&gt;(\n             // Keep track of the monomorphization recursion depth\n             recursion_depth_reset =\n                 Some(check_recursion_limit(tcx, instance, starting_point.span, recursion_depths));\n-            check_type_length_limit(tcx, instance);\n\n             rustc_data_structures::stack::ensure_sufficient_stack(|| {\n                 collect_neighbours(tcx, instance, &amp;mut neighbors);\n@@ -455,55 +453,7 @@ fn check_recursion_limit&lt;&#39;tcx&gt;(\n     (def_id, recursion_depth)\n }\n\n-fn check_type_length_limit&lt;&#39;tcx&gt;(tcx: TyCtxt&lt;&#39;tcx&gt;, instance: Instance&lt;&#39;tcx&gt;) {\n-    let type_length = instance\n-        .substs\n-        .iter()\n-        .flat_map(|arg| arg.walk())\n-        .filter(|arg| match arg.unpack() {\n-            GenericArgKind::Type(_) | GenericArgKind::Const(_) =&gt; true,\n-            GenericArgKind::Lifetime(_) =&gt; false,\n-        })\n-        .count();\n-    debug!(&quot; =&gt; type length={}&quot;, type_length);\n-\n-    // Rust code can easily create exponentially-long types using only a\n-    // polynomial recursion depth. Even with the default recursion\n-    // depth, you can easily get cases that take &gt;2^60 steps to run,\n-    // which means that rustc basically hangs.\n-    //\n-    // Bail out in these cases to avoid that bad user experience.\n-    if !tcx.sess.type_length_limit().value_within_limit(type_length) {\n-        // The instance name is already known to be too long for rustc.\n-        // Show only the first and last 32 characters to avoid blasting\n-        // the user&#39;s terminal with thousands of lines of type-name.\n-        let shrink = |s: String, before: usize, after: usize| {\n-            // An iterator of all byte positions including the end of the string.\n-            let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n-\n-            let shrunk = format!(\n-                &quot;{before}...{after}&quot;,\n-                before = &amp;s[..positions().nth(before).unwrap_or(s.len())],\n-                after = &amp;s[positions().rev().nth(after).unwrap_or(0)..],\n-            );\n\n-            // Only use the shrunk version if it&#39;s really shorter.\n-            // This also avoids the case where before and after slices overlap.\n-            if shrunk.len() &lt; s.len() { shrunk } else { s }\n-        };\n-        let msg = format!(\n-            &quot;reached the type-length limit while instantiating `{}`&quot;,\n-            shrink(instance.to_string(), 32, 32)\n-        );\n-        let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &amp;msg);\n-        diag.note(&amp;format!(\n-            &quot;consider adding a `#![type_length_limit=\\&quot;{}\\&quot;]` attribute to your crate&quot;,\n-            type_length\n-        ));\n-        diag.emit();\n-        tcx.sess.abort_if_errors();\n-    }\n-}\n\n struct MirNeighborCollector&lt;&#39;a, &#39;tcx&gt; {\n     tcx: TyCtxt&lt;&#39;tcx&gt;,\n--\n2.25.1\n</code></pre></div>",
        "id": 209029903,
        "sender_full_name": "lcnr",
        "timestamp": 1599167394
    },
    {
        "content": "<p>can you use \"\\`\\`\\`patch\" or \"\\`\\`\\`diff\" to make it show right?</p>",
        "id": 209030129,
        "sender_full_name": "eddyb",
        "timestamp": 1599167547
    },
    {
        "content": "<p>my <code>stage1</code> build has some added debug message, let me try without that one (edit: didn't matter)</p>",
        "id": 209030136,
        "sender_full_name": "lcnr",
        "timestamp": 1599167554
    },
    {
        "content": "<p>wow, good job Zulip, not letting me escape backticks</p>",
        "id": 209030213,
        "sender_full_name": "eddyb",
        "timestamp": 1599167580
    },
    {
        "content": "<p>okay that change seems excessive enough to do the trick, that's worrying</p>",
        "id": 209030332,
        "sender_full_name": "eddyb",
        "timestamp": 1599167616
    },
    {
        "content": "<p>also the <code>impl Trait</code> thing... shouldn't matter? like, it already compiles just fine, only MIR had issues with it?<br>\nif it couldn't normalize at all, wouldn't <code>layout_of</code> break?</p>",
        "id": 209030458,
        "sender_full_name": "eddyb",
        "timestamp": 1599167683
    },
    {
        "content": "<p>my PR only fixed a mir assertion</p>",
        "id": 209030488,
        "sender_full_name": "lcnr",
        "timestamp": 1599167708
    },
    {
        "content": "<p>Not sure when the generator upvars were previously normalized</p>",
        "id": 209030515,
        "sender_full_name": "lcnr",
        "timestamp": 1599167729
    },
    {
        "content": "<p>potentially never</p>",
        "id": 209030525,
        "sender_full_name": "lcnr",
        "timestamp": 1599167733
    },
    {
        "content": "<p>you need them for the layout</p>",
        "id": 209030552,
        "sender_full_name": "eddyb",
        "timestamp": 1599167749
    },
    {
        "content": "<p>hmm <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/layout.rs#L1253-L1260\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/ty/layout.rs#L1253-L1260</a></p>",
        "id": 209030633,
        "sender_full_name": "eddyb",
        "timestamp": 1599167773
    },
    {
        "content": "<p>oh wait, the <code>ty::Opaque</code> doesn't contain the bounds. so it's not <code>impl for&lt;'a&gt; Trait&lt;'a&gt;</code> <em>at all</em></p>",
        "id": 209030678,
        "sender_full_name": "eddyb",
        "timestamp": 1599167803
    },
    {
        "content": "<p>no, it's <code>for&lt;'a&gt; impl Trait&lt;'a&gt;</code></p>",
        "id": 209030707,
        "sender_full_name": "lcnr",
        "timestamp": 1599167821
    },
    {
        "content": "<p>well, not <em>literally</em> that</p>",
        "id": 209030720,
        "sender_full_name": "eddyb",
        "timestamp": 1599167830
    },
    {
        "content": "<p>ye <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 209030732,
        "sender_full_name": "lcnr",
        "timestamp": 1599167837
    },
    {
        "content": "<p>it's <code>for&lt;'a&gt; .... impl Trait&lt;'a&gt;</code>. okay</p>",
        "id": 209030747,
        "sender_full_name": "eddyb",
        "timestamp": 1599167849
    },
    {
        "content": "<p>so <code>normalize_erasing_regions</code> should've worked anyway. I don't understand why the MIR assertion failed given that</p>",
        "id": 209030781,
        "sender_full_name": "eddyb",
        "timestamp": 1599167873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> what does <code>-Z self-profile</code> + <code>summarize</code> says? like, where's the 17 seconds actually spent?</p>",
        "id": 209030871,
        "sender_full_name": "eddyb",
        "timestamp": 1599167916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>+-------------------------------------------------+-----------+-----------------+----------+------------+\n| Item                                            | Self time | % of total time | Time     | Item count |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| normalize_generic_arg_after_erasing_regions     | 8.84s     | 52.185          | 8.85s    | 340        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| type_op_prove_predicate                         | 2.70s     | 15.909          | 2.70s    | 369        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| implied_outlives_bounds                         | 1.17s     | 6.927           | 1.17s    | 82         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| typeck                                          | 971.00ms  | 5.731           | 1.45s    | 58         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| monomorphization_collector_graph_walk           | 968.64ms  | 5.717           | 6.84s    | 1          |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| mir_borrowck                                    | 827.65ms  | 4.885           | 11.87s   | 58         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| check_mod_privacy                               | 541.76ms  | 3.198           | 541.79ms | 1          |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| evaluate_obligation                             | 184.43ms  | 1.089           | 185.40ms | 582        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| lint_mod                                        | 152.97ms  | 0.903           | 153.00ms | 1          |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| run_linker                                      | 100.17ms  | 0.591           | 100.17ms | 1          |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| type_op_normalize_predicate                     | 94.09ms   | 0.555           | 113.69ms | 245        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| type_op_normalize_fn_sig                        | 75.54ms   | 0.446           | 75.54ms  | 127        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| type_op_normalize_ty                            | 56.59ms   | 0.334           | 56.59ms  | 162        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| privacy_access_levels                           | 46.79ms   | 0.276           | 46.79ms  | 1          |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_codegen_emit_obj                    | 43.02ms   | 0.254           | 43.02ms  | 17         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| dropck_outlives                                 | 28.70ms   | 0.169           | 30.44ms  | 135        |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| check_mod_item_types                            | 27.02ms   | 0.159           | 6.22s    | 1          |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| normalize_projection_ty                         | 19.68ms   | 0.116           | 19.70ms  | 40         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_passes                                     | 13.59ms   | 0.080           | 13.59ms  | 1          |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n| optimized_mir                                   | 6.49ms    | 0.038           | 7.32s    | 91         |\n+-------------------------------------------------+-----------+-----------------+----------+------------+\n</code></pre></div>",
        "id": 209031410,
        "sender_full_name": "lcnr",
        "timestamp": 1599168263
    },
    {
        "content": "<p>looking a bit more into this, there are some nearly 1 second delays here which seem wierd to me</p>\n<div class=\"codehilite\"><pre><span></span><code>Sep 19 14:49:41.316 DEBUG rustc_trait_selection::traits::project: normalize_with_depth(depth=0, value=[])\nSep 19 14:49:41.316 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations\nSep 19 14:49:41.316 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 obligations=[]\nSep 19 14:49:41.316 DEBUG rustc_trait_selection::traits::project: normalize_with_depth(depth=0, value=[])\nSep 19 14:49:41.316 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations\nSep 19 14:49:41.316 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 obligations=[]\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth(depth=0, value=[])\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 result=[] with 0 obligations\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 obligations=[]\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth(depth=0, value=[TraitPredicate(&lt;() as std::marker::Sized&gt;), OutlivesPredicate((), ReStatic), TraitPredicate(&lt;() as std::process::Termination&gt;)])\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 result=[TraitPredicate(&lt;() as std::marker::Sized&gt;), OutlivesPredicate((), ReStatic), TraitPredicate(&lt;() as std::process::Termination&gt;)] with 0 obligations\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=0 obligations=[]\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth(depth=1, value=&lt;() as std::process::Termination&gt;)\nSep 19 14:49:42.269 DEBUG rustc_trait_selection::traits::project: normalize_with_depth: depth=1 result=&lt;() as std::process::Termination&gt; with 0 obligations\n</code></pre></div>",
        "id": 210613603,
        "sender_full_name": "lcnr",
        "timestamp": 1600519891
    },
    {
        "content": "<p>Maybe the issues are enormous <code>Equate</code>s <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> to find out if a candidate applies while normalizing <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 210616416,
        "sender_full_name": "lcnr",
        "timestamp": 1600523758
    },
    {
        "content": "<p>though I am not really sure how to optimize that</p>",
        "id": 210616462,
        "sender_full_name": "lcnr",
        "timestamp": 1600523772
    },
    {
        "content": "<p>I've spend hours looking at the wrong file</p>",
        "id": 210617662,
        "sender_full_name": "lcnr",
        "timestamp": 1600525448
    },
    {
        "content": "<p>that's life</p>",
        "id": 210617672,
        "sender_full_name": "lcnr",
        "timestamp": 1600525463
    },
    {
        "content": "<p>but maybe I finally make some progress now <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 210617679,
        "sender_full_name": "lcnr",
        "timestamp": 1600525481
    },
    {
        "content": "<p>I feel your pain, I spent like a week on <a href=\"https://github.com/rust-lang/rust/pull/75176\">https://github.com/rust-lang/rust/pull/75176</a> looking at the completely wrong problem lol</p>",
        "id": 210617717,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600525560
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/76928\">#76928</a>, the change is far too boring for me to have spend so much time on it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210620984,
        "sender_full_name": "lcnr",
        "timestamp": 1600529908
    },
    {
        "content": "<p>now that <a href=\"https://github.com/rust-lang/rust/issues/76928\">#76928</a> landed fixing <a href=\"https://github.com/rust-lang/rust/issues/75992\">#75992</a> looks a lot more annoying than before</p>",
        "id": 214617274,
        "sender_full_name": "lcnr",
        "timestamp": 1603738155
    },
    {
        "content": "<p><code>summarize</code> output for <a href=\"https://github.com/nicholasbishop/rust146hang\">https://github.com/nicholasbishop/rust146hang</a> :</p>\n<div class=\"codehilite\"><pre><span></span><code>+--------------------------------------------------+-----------+-----------------+----------+------------+\n| Item                                             | Self time | % of total time | Time     | Item count |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_fulfill_obligation                       | 88.99s    | 30.321          | 99.55s   | 935        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| normalize_generic_arg_after_erasing_regions      | 81.03s    | 27.610          | 151.97s  | 2854       |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| normalize_projection_ty                          | 70.88s    | 24.153          | 70.89s   | 346        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_passes                                      | 37.75s    | 12.864          | 37.75s   | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| evaluate_obligation                              | 10.54s    | 3.591           | 10.61s   | 2902       |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_codegen_emit_obj                     | 1.80s     | 0.614           | 1.80s    | 179        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_module                                   | 1.12s     | 0.382           | 37.80s   | 179        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_codegen                              | 176.13ms  | 0.060           | 1.98s    | 179        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| specialization_graph_of                          | 110.39ms  | 0.038           | 200.13ms | 85         |\n</code></pre></div>",
        "id": 214617440,
        "sender_full_name": "lcnr",
        "timestamp": 1603738237
    },
    {
        "content": "<p>with version 1.45 this takes 32s total</p>",
        "id": 214617716,
        "sender_full_name": "lcnr",
        "timestamp": 1603738396
    },
    {
        "content": "<p>so all of  codegen_fulfill_obligation, normalize_generic_arg_after_erasing_regions, normalize_projection_ty  and LLVM_passes are now taking longer than 1.45 took in total and would need to get fixed. Esp for <code>codegen_fulfill_obligations</code> I am not even sure how we can fix this</p>",
        "id": 214617987,
        "sender_full_name": "lcnr",
        "timestamp": 1603738523
    },
    {
        "content": "<p>i am inclined to revert <a href=\"https://github.com/rust-lang/rust/issues/75443\">#75443</a> and instead merge <a href=\"https://github.com/rust-lang/rust/issues/75419\">#75419</a>, potentially disabling the mir validator for a backport</p>",
        "id": 214618778,
        "sender_full_name": "lcnr",
        "timestamp": 1603738906
    },
    {
        "content": "<p>will quickly open a PR for that</p>",
        "id": 214618792,
        "sender_full_name": "lcnr",
        "timestamp": 1603738913
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/78410\">#78410</a> :/ i think this is the first time opening a pr was unpleasant to me.</p>",
        "id": 214625660,
        "sender_full_name": "lcnr",
        "timestamp": 1603742520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> you're doing god's work <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 214649000,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603758162
    },
    {
        "content": "<p>if it makes you feel better, I've made much larger hacks <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <a href=\"https://github.com/rust-lang/rust/pull/75127\">https://github.com/rust-lang/rust/pull/75127</a></p>",
        "id": 214649045,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603758206
    }
]