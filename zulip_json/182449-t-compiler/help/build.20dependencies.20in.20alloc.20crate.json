[
    {
        "content": "<p>I have a rust fork where I add an external crate to <code>library/alloc</code>. I'm doing this with the <code>rustc-std-workspace-core</code> hack to get around the dependency chicken-egg problem with the core library. Unfortunately, when I specify <code>[build-dependencies]</code> for my external crate, I get a bunch of scary looking errors when compiling rustc. They look like errors I've seen when you forget to mark things as <code>not(bootstrap)</code>. There are also a bunch of these warnings too:</p>\n<p><code>\nerror[E0658]: auto traits are experimental and possibly buggy\n  --&gt; library/core/src/marker.rs:38:1\n   |\n38 | / pub unsafe auto trait Send {\n39 | |     // empty.\n40 | | }\n   | |_^\n   |\n   = note: see issue #13231 &lt;https://github.com/rust-lang/rust/issues/13231&gt; for more information\n   = help: add </code>#![feature(optin_builtin_traits)]<code> to the crate attributes to enable\n</code></p>\n<p>I won't list them all because the backtrace is very long, and I have a feeling these are spurious anyway. Is there a magic trick that you use allow  build-dependencies in crates which are extern crates in the compiler?</p>",
        "id": 220317990,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1608247758
    }
]