[
    {
        "content": "<p>I'm working on <a href=\"https://github.com/rust-lang/rust/issues/85526\">https://github.com/rust-lang/rust/issues/85526</a>.</p>\n<p>In this commit <a href=\"https://github.com/pierwill/rust/commit/75023d19d3247d7619f138ff9780bcf5dc152a3a\">https://github.com/pierwill/rust/commit/75023d19d3247d7619f138ff9780bcf5dc152a3a</a>, I've successfully hidden the docs for all associated functions <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>. Now I need to narrow to only the case where the \"parent\" type has <code>#[docs(hidden)]</code>. Is there any way to get from any of <a href=\"https://github.com/rust-lang/rust/blob/75023d19d3247d7619f138ff9780bcf5dc152a3a/compiler/rustc_lint/src/builtin.rs#L654\">this data</a> to the attributes of the \"parent\" item?</p>",
        "id": 257845721,
        "sender_full_name": "pierwill",
        "timestamp": 1634403746
    },
    {
        "content": "<p>Seems like this might require information from the AST?</p>",
        "id": 257846142,
        "sender_full_name": "pierwill",
        "timestamp": 1634404159
    },
    {
        "content": "<p>Maybe I can use <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html\">https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html</a> ?</p>",
        "id": 257847033,
        "sender_full_name": "pierwill",
        "timestamp": 1634405031
    },
    {
        "content": "<p>This is what I wish could happen:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// If the method is an impl for an item with docs_hidden, don't doc.</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">method_context</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">impl_item</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">MethodLateContext</span>::<span class=\"n\">PlainImpl</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">typeinfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">maybe_typeck_results</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parentdef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">typeinfo</span><span class=\"p\">.</span><span class=\"n\">type_dependent_def</span><span class=\"p\">(</span><span class=\"n\">impl_item</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parentdef</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">.</span><span class=\"n\">attr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"n\">docs_hidden</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257847830,
        "sender_full_name": "pierwill",
        "timestamp": 1634405810
    },
    {
        "content": "<p>Ah.. I'm at the point in learning that I actually see how  <code>-Z unpretty=hir-tree</code> is helpful!</p>",
        "id": 257853707,
        "sender_full_name": "pierwill",
        "timestamp": 1634411266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span>: I don't think you need to use typeck results.<br>\nStarting from the wrongly-flagged impl-item, you could:</p>\n<ul>\n<li>fetch the enclosing impl block using <code>tcx.hir().parent</code>;</li>\n<li>deconstruct it to see which type it implements using <code>self_ty</code>;</li>\n<li>destructure <code>self_ty</code> to find the outermost definition's <code>DefId</code>;</li>\n<li>check its attributes using <code>tcx.get_attrs</code>.</li>\n</ul>\n<p>Does that seem reasonable?</p>",
        "id": 257856999,
        "sender_full_name": "cjgillot",
        "timestamp": 1634414441
    },
    {
        "content": "<p>Thanks! I was just stumbling into something like that!</p>",
        "id": 257857036,
        "sender_full_name": "pierwill",
        "timestamp": 1634414472
    },
    {
        "content": "<p><code>self_ty</code> was was I couldn't figure out :)</p>",
        "id": 257857066,
        "sender_full_name": "pierwill",
        "timestamp": 1634414505
    },
    {
        "content": "<p>Hm. Where's <code>self_ty</code>? Is that a meth on HirId?</p>",
        "id": 257857169,
        "sender_full_name": "pierwill",
        "timestamp": 1634414578
    },
    {
        "content": "<p>ah, need a <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.def_kind\">https://doc.rust-lang.org/beta/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.def_kind</a></p>",
        "id": 257857415,
        "sender_full_name": "pierwill",
        "timestamp": 1634414800
    },
    {
        "content": "<p><code>self_ty</code> is on <code>hir::Impl</code>, which is a variant of <code>hir::ItemKind</code>.</p>",
        "id": 257857462,
        "sender_full_name": "cjgillot",
        "timestamp": 1634414849
    },
    {
        "content": "<p>still trying to connect the dots, but with your outline I think i'll get there. Thanks <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> !</p>",
        "id": 257857632,
        "sender_full_name": "pierwill",
        "timestamp": 1634414982
    },
    {
        "content": "<p>Can't figure out how to get the <code>parent</code>'s ItemKind...</p>",
        "id": 257857920,
        "sender_full_name": "pierwill",
        "timestamp": 1634415228
    },
    {
        "content": "<p>Ah! <code>hir::map</code> <code>expect_item()</code></p>",
        "id": 257858510,
        "sender_full_name": "pierwill",
        "timestamp": 1634415682
    },
    {
        "content": "<p>I thought this might work, but sadly no. <a href=\"https://github.com/rust-lang/rust/blob/d6c8cb6b6d442fe8f25820307475961b199a8bde/compiler/rustc_lint/src/builtin.rs#L660-L682\">https://github.com/rust-lang/rust/blob/d6c8cb6b6d442fe8f25820307475961b199a8bde/compiler/rustc_lint/src/builtin.rs#L660-L682</a></p>\n<p>I think I'm not targeting the right <code>DefId</code>... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 257884792,
        "sender_full_name": "pierwill",
        "timestamp": 1634442668
    },
    {
        "content": "<p><code>sty.hir_id.owner</code> is not the type definition's DefId, it's equal to <code>parent.owner</code>. You need to match on <code>sty.kind</code> to access the referred type.</p>",
        "id": 257906807,
        "sender_full_name": "cjgillot",
        "timestamp": 1634465515
    },
    {
        "content": "<p>How would I get from a <code>rustc_hir::TyKind</code> (and which variant?) back to a <code>DefId</code>?</p>",
        "id": 257936984,
        "sender_full_name": "pierwill",
        "timestamp": 1634493752
    },
    {
        "content": "<p>Latest attempt: <a href=\"https://github.com/rust-lang/rust/blob/1dcb4744f54e1ea55cf540bd9142e3909cb01e15/compiler/rustc_lint/src/builtin.rs#L660-L685\">https://github.com/rust-lang/rust/blob/1dcb4744f54e1ea55cf540bd9142e3909cb01e15/compiler/rustc_lint/src/builtin.rs#L660-L685</a></p>",
        "id": 257937505,
        "sender_full_name": "pierwill",
        "timestamp": 1634494315
    },
    {
        "content": "<p>The case of the issue, <code>sty.kind</code> would look like <code>TyKind::Path(QPath::Resolved(None, path)</code>, and you need to path.res`.</p>",
        "id": 257938229,
        "sender_full_name": "cjgillot",
        "timestamp": 1634495032
    },
    {
        "content": "<p>Thank you! I'll try that</p>",
        "id": 257938286,
        "sender_full_name": "pierwill",
        "timestamp": 1634495070
    },
    {
        "content": "<p>I think you want</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item_def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">opt_hir_id_to_local_def_id</span><span class=\"p\">(</span><span class=\"n\">impl_item</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">item_def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">impl_ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* skip */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257938384,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634495166
    },
    {
        "content": "<p>Is that a totally different and better way to solve the problem? That's so crazy. This must happen a lot in rustc world...</p>",
        "id": 257938647,
        "sender_full_name": "pierwill",
        "timestamp": 1634495451
    },
    {
        "content": "<p>It should be. Knowing if/when/how you can make use of queries that already do most of what you need is definitely quite a learning curve, especially when they have generic names like <code>type_of</code>.</p>",
        "id": 257938772,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634495591
    },
    {
        "content": "<p>I'm getting \"method not found in <code>rustc_middle::hir::map::Map&lt;'_&gt;</code>\"</p>",
        "id": 257938794,
        "sender_full_name": "pierwill",
        "timestamp": 1634495623
    },
    {
        "content": "<p>for map.opt_hir_id_to_local_def_id</p>",
        "id": 257938803,
        "sender_full_name": "pierwill",
        "timestamp": 1634495635
    },
    {
        "content": "<p>Sorry, it's <code>opt_local_def_id</code></p>",
        "id": 257938854,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634495664
    },
    {
        "content": "<p>this has been easily the craziest coding adventure i've done</p>",
        "id": 257938992,
        "sender_full_name": "pierwill",
        "timestamp": 1634495822
    },
    {
        "content": "<p>and it's not over yet</p>",
        "id": 257939002,
        "sender_full_name": "pierwill",
        "timestamp": 1634495832
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">outerdef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">impl_ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"unexpected type\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This match isn't working. (I put in a panic...)</p>",
        "id": 257939127,
        "sender_full_name": "pierwill",
        "timestamp": 1634495956
    },
    {
        "content": "<p>yes, impls can also be on built in types (in core/alloc/std) and trait objects.</p>",
        "id": 257939209,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634496013
    },
    {
        "content": "<p>Ah so we need to actually handle <code>_</code></p>",
        "id": 257939240,
        "sender_full_name": "pierwill",
        "timestamp": 1634496048
    },
    {
        "content": "<p>What's the best way to do that?</p>",
        "id": 257939247,
        "sender_full_name": "pierwill",
        "timestamp": 1634496057
    },
    {
        "content": "<p>Maybe just <code>return</code> here? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 257939361,
        "sender_full_name": "pierwill",
        "timestamp": 1634496179
    },
    {
        "content": "<p>I guess it depends on what you want to do in those cases.</p>",
        "id": 257939491,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634496323
    },
    {
        "content": "<p>Hm. Maybe we don't need to worry about this docs attr in core/alloc/std? And I think the trait object case might be covered just before this....</p>",
        "id": 257939580,
        "sender_full_name": "pierwill",
        "timestamp": 1634496396
    },
    {
        "content": "<p>Or we could just... get those types and their defids as well?</p>",
        "id": 257939601,
        "sender_full_name": "pierwill",
        "timestamp": 1634496425
    },
    {
        "content": "<p>Hm... might have to let reviewers help decide</p>",
        "id": 257939721,
        "sender_full_name": "pierwill",
        "timestamp": 1634496544
    },
    {
        "content": "<p>I think that you should probably treat all of the built-in types as if they don't have a <code>doc(hidden)</code> attribute.</p>",
        "id": 257939801,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634496604
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 257939818,
        "sender_full_name": "pierwill",
        "timestamp": 1634496629
    },
    {
        "content": "<p>You can add an arm for <code>ty::Foreign(def_id) =&gt; /* check def_id */</code></p>",
        "id": 257939832,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634496649
    },
    {
        "content": "<p>and the others? is there such thing as returning a dummy defid?</p>",
        "id": 257939889,
        "sender_full_name": "pierwill",
        "timestamp": 1634496720
    },
    {
        "content": "<p>Because all the arms need to return a defid, right?</p>",
        "id": 257939936,
        "sender_full_name": "pierwill",
        "timestamp": 1634496731
    },
    {
        "content": "<p>Hmm, not really. You could make the match arms all return an <code>Option</code> and then use <code>map_or</code> (or match again)</p>",
        "id": 257939999,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634496832
    },
    {
        "content": "<p>ahh</p>",
        "id": 257940043,
        "sender_full_name": "pierwill",
        "timestamp": 1634496847
    },
    {
        "content": "<p>But then what do we do on the <code>None</code> branch <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> ?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">outerdef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">impl_ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">Foreign</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">attrs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">get_attrs</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">outerdef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257940445,
        "sender_full_name": "pierwill",
        "timestamp": 1634497239
    },
    {
        "content": "<p>i think i might be losing track of the high-level here...</p>",
        "id": 257940492,
        "sender_full_name": "pierwill",
        "timestamp": 1634497289
    },
    {
        "content": "<p>maybe I need to call <code>self.check_missing_docs_attrs</code> somewhere, but need to avoid a recursive loop...</p>",
        "id": 257940745,
        "sender_full_name": "pierwill",
        "timestamp": 1634497529
    },
    {
        "content": "<p>I was thinking of something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">is_hidden</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">opt_def_id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">is_doc_hidden</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257940834,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634497615
    },
    {
        "content": "<p>ooooh beautiful</p>",
        "id": 257940846,
        "sender_full_name": "pierwill",
        "timestamp": 1634497637
    },
    {
        "content": "<p>i'll try it out</p>",
        "id": 257940867,
        "sender_full_name": "pierwill",
        "timestamp": 1634497659
    },
    {
        "content": "<p>latest attempt: <a href=\"https://github.com/rust-lang/rust/blob/043ad243332fc4d4f9f597ae1e58e125f4defb3e/compiler/rustc_lint/src/builtin.rs#L643-L678\">https://github.com/rust-lang/rust/blob/043ad243332fc4d4f9f597ae1e58e125f4defb3e/compiler/rustc_lint/src/builtin.rs#L643-L678</a></p>\n<p>Compiler built, but didn't give desired behavior on the test case in the issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustc +stage1 ~/test.rs\nwarning: missing documentation for an associated function\n --&gt; /Users/wpierce/test.rs:9:5\n  |\n9 |     pub fn bar() {}\n  |     ^^^^^^^^^^^^\n  |\nnote: the lint level is defined here\n --&gt; /Users/wpierce/test.rs:1:9\n  |\n1 | #![warn(missing_docs)]\n  |         ^^^^^^^^^^^^\n\nwarning: 1 warning emitted\n</code></pre></div>",
        "id": 257941441,
        "sender_full_name": "pierwill",
        "timestamp": 1634498193
    },
    {
        "content": "<p>maybe i wasn't getting the \"parent\" after all?</p>",
        "id": 257941682,
        "sender_full_name": "pierwill",
        "timestamp": 1634498419
    },
    {
        "content": "<p>the parent of <code>impl_item</code>...</p>",
        "id": 257941692,
        "sender_full_name": "pierwill",
        "timestamp": 1634498430
    },
    {
        "content": "<p>oh, I see <code>ImplItem</code> is the associated item in the impl.</p>",
        "id": 257941874,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634498637
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// If the method is an impl for an item with docs_hidden,</span>\n<span class=\"w\">        </span><span class=\"c1\">// check the parent instead.</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">method_context</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">impl_item</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">MethodLateContext</span>::<span class=\"n\">PlainImpl</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">get_parent_did</span><span class=\"p\">(</span><span class=\"n\">impl_item</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">impl_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">outerdef</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">impl_ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ty</span>::<span class=\"n\">Foreign</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">is_hidden</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">outerdef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">is_doc_hidden</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_hidden</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257941920,
        "sender_full_name": "pierwill",
        "timestamp": 1634498649
    },
    {
        "content": "<p>(By the way, thank you so much for your help!)</p>",
        "id": 257941951,
        "sender_full_name": "pierwill",
        "timestamp": 1634498690
    },
    {
        "content": "<p>Yes, that looks better</p>",
        "id": 257941957,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634498700
    },
    {
        "content": "<p>it works!!!!!!!!!!!!!!</p>",
        "id": 257942071,
        "sender_full_name": "pierwill",
        "timestamp": 1634498793
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/89987\">https://github.com/rust-lang/rust/pull/89987</a></p>",
        "id": 257942261,
        "sender_full_name": "pierwill",
        "timestamp": 1634498990
    },
    {
        "content": "<p>Think this will want a test case?</p>",
        "id": 257942272,
        "sender_full_name": "pierwill",
        "timestamp": 1634499002
    },
    {
        "content": "<p>yes</p>",
        "id": 257942373,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634499074
    },
    {
        "content": "<p>This would be a <code>ui</code> test, yes?</p>",
        "id": 257942521,
        "sender_full_name": "pierwill",
        "timestamp": 1634499240
    },
    {
        "content": "<p>yes</p>",
        "id": 257942564,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634499248
    },
    {
        "content": "<p>Does this look like a correct test? <a href=\"https://github.com/rust-lang/rust/pull/89987/files#diff-f299c24548c480fc203c74376a342ad898ce85a286edc89a7c8214c932f8b5a5\">https://github.com/rust-lang/rust/pull/89987/files#diff-f299c24548c480fc203c74376a342ad898ce85a286edc89a7c8214c932f8b5a5</a></p>",
        "id": 257944012,
        "sender_full_name": "pierwill",
        "timestamp": 1634500627
    },
    {
        "content": "<p>Using <code>deny(hidden_docs)</code> instead might be better. Also the test can be <code>check-pass</code></p>",
        "id": 257944096,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634500688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> has marked this topic as resolved.</p>",
        "id": 257998397,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634548307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> has marked this topic as unresolved.</p>",
        "id": 257998413,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634548316
    },
    {
        "content": "<p>sorry about that, I meant to mark the thread as read :P</p>",
        "id": 257998468,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1634548327
    },
    {
        "content": "<p>The fix just merged! :)</p>",
        "id": 258028944,
        "sender_full_name": "pierwill",
        "timestamp": 1634563847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> has marked this topic as resolved.</p>",
        "id": 258028986,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634563864
    }
]