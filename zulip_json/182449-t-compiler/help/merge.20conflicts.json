[
    {
        "content": "<p>How does Rust avoid constant merge conflicts? E.g., I know there's an ongoing effort to split up <code>astconv.rs</code> (<a href=\"https://github.com/rust-lang/rust/issues/67418\">#67418</a>), yet people are still contributing to the file. On my own projects, I have multiple branches for different features and I relatively often get merge conflicts, or even worse, Git auto-merges and messes something up.</p>\n<p>Are there special tricks that are used to ensure that changes merge smoothly?</p>",
        "id": 199415085,
        "sender_full_name": "Noah Lev",
        "timestamp": 1591041382
    },
    {
        "content": "<p>Relative to its size, the code base changes relatively slowly, so conflicts aren't usually that much of a problem</p>",
        "id": 199416954,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591042440
    },
    {
        "content": "<p>Hmm. So you're saying that there aren't too many conflicting changes that are about to be merged at any one time? I guess rebasing is just the solution</p>",
        "id": 199417327,
        "sender_full_name": "Noah Lev",
        "timestamp": 1591042668
    },
    {
        "content": "<p>Yeah, for PRs for splitting up astconv I'd expect some amount of conflicts. We don't have any special solution for that.</p>",
        "id": 199418074,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591043069
    },
    {
        "content": "<p>I will say that if you are doing a large refactor (e.g. touching a whole <code>rustc_*</code> crate or multiple crates, you should expect to rebase a few times...</p>",
        "id": 199419095,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591043521
    }
]