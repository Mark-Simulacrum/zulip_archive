[
    {
        "content": "<p>How are nested functions laid out in hir? Example</p>\n<div class=\"codehilite\"><pre><span></span><code>fn foo() {\n  fn bar() {\n  }\n}\n</code></pre></div>",
        "id": 228307401,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614633355
    },
    {
        "content": "<p>Is <code>bar</code> it's own <code>Item</code>?</p>",
        "id": 228307471,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614633371
    },
    {
        "content": "<p>Would <code>foo</code> be <code>bar</code>s <code>owner</code>?</p>",
        "id": 228307494,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614633382
    },
    {
        "content": "<p>bar is its own Item, and its own owner.</p>",
        "id": 228308280,
        "sender_full_name": "cjgillot",
        "timestamp": 1614633676
    },
    {
        "content": "<p>foo is bar's parent.</p>",
        "id": 228308292,
        "sender_full_name": "cjgillot",
        "timestamp": 1614633684
    },
    {
        "content": "<p>More generally, owners are: Item, TraitItem, ImplItem, ForeignItem, MacroDef, and the GenericParam from impl-trait desugaring.</p>",
        "id": 228308500,
        "sender_full_name": "cjgillot",
        "timestamp": 1614633775
    },
    {
        "content": "<p>I think <code>get_parent_item</code> doesn't do what I think it does</p>",
        "id": 228308565,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614633803
    },
    {
        "content": "<p>I was thinking parent == owner</p>",
        "id": 228308602,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614633827
    },
    {
        "content": "<p>parent allows to walk the HIR tree one node at a time. owner groups all the nodes inside the same Item.</p>",
        "id": 228308784,
        "sender_full_name": "cjgillot",
        "timestamp": 1614633901
    },
    {
        "content": "<p>All nodes have parents, except for the crate root.</p>",
        "id": 228308848,
        "sender_full_name": "cjgillot",
        "timestamp": 1614633924
    },
    {
        "content": "<p>wait, so what is an owner?</p>",
        "id": 228308884,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614633937
    },
    {
        "content": "<p>So, what's the recommended way to get the enclosing <code>Item</code> for a given <code>HirId</code></p>",
        "id": 228308897,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614633945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> it depends on what the HirId refers to. If it refers to a non-owner, get_parent_item and hir_id.owner should return pretty much the same information.</p>",
        "id": 228309082,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Nested.20functions.20representation/near/228308784\">said</a>:</p>\n<blockquote>\n<p>parent allows to walk the HIR tree one node at a time. owner groups all the nodes inside the same Item.</p>\n</blockquote>\n<p>Wait, so, would the <code>owner</code> of lifetimes across two different functions in an impl be the functions, or the impl?</p>",
        "id": 228309115,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634033
    },
    {
        "content": "<p>Let me take a step back and explain what I'm trying to do, because that might be more helpful.</p>",
        "id": 228309322,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634113
    },
    {
        "content": "<p>So, in <code>rustc_resolve::late::lifetimes</code>, the current <code>resolve_lifetimes</code> visits all the items in a crate. I'm trying to make it so that it does this <em>per Item</em></p>",
        "id": 228309483,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Nested.20functions.20representation/near/228308884\">said</a>:</p>\n<blockquote>\n<p>wait, so what is an owner?</p>\n</blockquote>\n<p>IIUC, owners correspond to HIR sub-trees must be typechecked and borrowchecked all at once. Typically, the list I gave you above. This does not always correspond to definitions (= stuff that has a DefId): closures are definitions, but must be typechecked with the enclosing scope, so are not owners.</p>",
        "id": 228309741,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Nested.20functions.20representation/near/228309483\">said</a>:</p>\n<blockquote>\n<p>So, in <code>rustc_resolve::late::lifetimes</code>, the current <code>resolve_lifetimes</code> visits all the items in a crate. I'm trying to make it so that it does this <em>per Item</em></p>\n</blockquote>\n<p>What do you mean /per item/?</p>",
        "id": 228309891,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Nested.20functions.20representation/near/228309891\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Nested.20functions.20representation/near/228309483\">said</a>:</p>\n<blockquote>\n<p>So, in <code>rustc_resolve::late::lifetimes</code>, the current <code>resolve_lifetimes</code> visits all the items in a crate. I'm trying to make it so that it does this <em>per Item</em></p>\n</blockquote>\n<p>What do you mean /per item/?</p>\n</blockquote>\n<p>So, rather than <code>resolve_lifetimes</code> taking a <code>CrateNum</code>, it would take a <code>LocalDefId</code> of an Item</p>",
        "id": 228309988,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634375
    },
    {
        "content": "<p>Currently, for example, <code>named_region_map</code> takes a <code>LocalDefId</code> of an owner (of a lifetime), asks for the <code>ResolveLifetimes</code> of the entire crate, then returns a map for all the lifetimes of the owner</p>",
        "id": 228310232,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634459
    },
    {
        "content": "<p>I'm trying to change that to instead take a <code>LocalDefId</code> of an owner (of a lifetime), ask for the <code>ResolveLifetimes</code> the outermost <code>Item</code> containing that owner, and the return a map for all the lifetimes of the owner</p>",
        "id": 228310412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634525
    },
    {
        "content": "<p>I see.</p>",
        "id": 228310872,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634738
    },
    {
        "content": "<p>What happens when you simply turn the loop on items in <code>rustc_resolve::late::lifetimes::krate</code> into just visiting the item whose LocalDefId you query?</p>",
        "id": 228310976,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634799
    },
    {
        "content": "<p>Well, I think the LocalDefId isn't always an Item. It could e.g. be a function on an impl</p>",
        "id": 228311111,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634851
    },
    {
        "content": "<p><code>for item in krate.items.values()</code> =&gt; <code>if let Some(item) = krate.items.get(&amp;hir::ItemId { def_id: my_owner }</code>.</p>",
        "id": 228311116,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634857
    },
    {
        "content": "<p>Yes, it's not always an Item, but <code>krate.items</code> is a BTreeMap you can query for.</p>",
        "id": 228311200,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634900
    },
    {
        "content": "<p>Better: have your query take a hir::ItemId, so you know this is an Item.</p>",
        "id": 228311219,
        "sender_full_name": "cjgillot",
        "timestamp": 1614634918
    },
    {
        "content": "<p>Hmm, but I still have to get the enclosing Item for a given lifetime</p>",
        "id": 228311341,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614634976
    },
    {
        "content": "<p>You mean for the query's caller?</p>",
        "id": 228311408,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635014
    },
    {
        "content": "<p>Yeah</p>",
        "id": 228311420,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635021
    },
    {
        "content": "<p><code>get_parent_item</code> should do the trick.</p>",
        "id": 228311437,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635034
    },
    {
        "content": "<p>You may need to verify is actually points to an Item, and not to Crate, ImplItem, TraitItem or ForeignItem.</p>",
        "id": 228311605,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635105
    },
    {
        "content": "<p>Maybe I need to rearrange things. I was sort of expecting the named_region_map  query to still return a map. But then I have to check if the passed is an item or not</p>",
        "id": 228311824,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635176
    },
    {
        "content": "<p>I think you can do it without changing named_region_map's interface.</p>",
        "id": 228312006,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635270
    },
    {
        "content": "<p>So, here's what I have currently:</p>",
        "id": 228312218,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635361
    },
    {
        "content": "<p><code>named_region_map: |tcx, id| tcx.resolve_lifetime_for_hir_id(item_for(tcx, id)).defs.get(&amp;id),</code></p>",
        "id": 228312230,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635367
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fn item_for(tcx: TyCtxt&lt;&#39;_&gt;, local_def_id: LocalDefId) -&gt; LocalDefId {\n    let hir_id = tcx.hir().local_def_id_to_hir_id(local_def_id);\n    match tcx.hir().find(hir_id) {\n        Some(Node::Item(item)) =&gt; {\n            return item.def_id;\n        },\n        _ =&gt; {},\n    }\n    let item = {\n        let hir = tcx.hir();\n        let mut parent_iter = hir.parent_iter(hir_id);\n        loop {\n            let node = parent_iter.next().map(|n| n.1);\n            match node {\n                Some(hir::Node::Item(item)) =&gt; {\n                    break item.def_id\n                },\n                Some(hir::Node::Crate(_)) | None =&gt; bug!(&quot;Called `item_for` on an Item.&quot;),\n                _ =&gt; {}\n            }\n        }\n    };\n    item\n}\n</code></pre></div>",
        "id": 228312252,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635376
    },
    {
        "content": "<p>And the <code>resolve_lifetime_for_hir_id</code> basically just returns something like <code>FxHashMap&lt;LocalDefId, FxHashMap&lt;ItemLocalId, Region&gt;&gt;</code></p>",
        "id": 228312485,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635484
    },
    {
        "content": "<p>You should be able to replace <code>item_for(tcx, id)</code> by just <code>id</code>.</p>",
        "id": 228312494,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635492
    },
    {
        "content": "<p>But we won't always get an <code>Item</code>?</p>",
        "id": 228312632,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635542
    },
    {
        "content": "<p>Sometimes it would be e.g. an <code>ImplItem</code></p>",
        "id": 228312662,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635556
    },
    {
        "content": "<p>Then you can return an empty map?</p>",
        "id": 228312720,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635587
    },
    {
        "content": "<p>No, I still need to return the map for the owner passed in</p>",
        "id": 228312832,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635636
    },
    {
        "content": "<p>But I have to run <code>resolve_lifetime_for_hir_id</code> on a whole <code>Item</code></p>",
        "id": 228312934,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635663
    },
    {
        "content": "<p>For more reference, this exists on <code>ty/context</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>    pub fn named_region(self, id: HirId) -&gt; Option&lt;resolve_lifetime::Region&gt; {\n        self.named_region_map(id.owner).and_then(|map| map.get(&amp;id.local_id).cloned())\n    }\n</code></pre></div>",
        "id": 228313041,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635712
    },
    {
        "content": "<p>Reading the code with more attention, I am starting to understand you need.</p>",
        "id": 228313186,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635772
    },
    {
        "content": "<p>(Btw thank you for your help)</p>",
        "id": 228313234,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635789
    },
    {
        "content": "<p>Your <code>item_for</code> should work. Do you have a test failure?</p>",
        "id": 228313289,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635826
    },
    {
        "content": "<p>Well, it can't compile <code>core</code></p>",
        "id": 228313384,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635874
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: lifetime may not live long enough\n    --&gt; library/core/src/iter/traits/iterator.rs:3334:13\n     |\n3330 |           fn check&lt;&#39;a, T&gt;(\n     |                    -- lifetime `&#39;a` defined here\n...\n3334 | /             move |curr| {\n3335 | |                 if let Some(Ordering::Greater) | None = compare(&amp;last, &amp;curr) {\n3336 | |                     return false;\n3337 | |                 }\n3338 | |                 *last = curr;\n3339 | |                 true\n3340 | |             }\n     | |_____________^ returning this value requires that `&#39;a` must outlive `&#39;static`\n     |\n     = help: consider replacing `&#39;a` with `&#39;static`\n     = help: consider replacing `&#39;a` with `&#39;static`\n</code></pre></div>",
        "id": 228313392,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635877
    },
    {
        "content": "<p>It's possible it's unrelated</p>",
        "id": 228313412,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635884
    },
    {
        "content": "<p>(there's a lot more errors like that)</p>",
        "id": 228313505,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635916
    },
    {
        "content": "<p>Definitely related :)</p>",
        "id": 228313563,
        "sender_full_name": "cjgillot",
        "timestamp": 1614635947
    },
    {
        "content": "<p>But essentially, I <em>think</em> what's happening is somewhere is asking for the <code>Region</code> of a <code>HirId</code>, it can't find it in a map, and it's falling back to <code>Static</code></p>",
        "id": 228313621,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614635969
    },
    {
        "content": "<p>The tricky part is probably the presence of a return-position impl-trait.</p>",
        "id": 228313944,
        "sender_full_name": "cjgillot",
        "timestamp": 1614636064
    },
    {
        "content": "<p>Resolve works on parameters, so it understands that last has lifetime 'a.</p>",
        "id": 228314010,
        "sender_full_name": "cjgillot",
        "timestamp": 1614636092
    },
    {
        "content": "<p>But impl-traits are a subtle pile of hacks. It may fail to find the 'a in the return type, and interpret it as a brand-new lifetime.</p>",
        "id": 228314164,
        "sender_full_name": "cjgillot",
        "timestamp": 1614636147
    },
    {
        "content": "<p>(Speculating wildly here).</p>",
        "id": 228314198,
        "sender_full_name": "cjgillot",
        "timestamp": 1614636161
    },
    {
        "content": "<p>That sounds reasonable</p>",
        "id": 228314233,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614636174
    },
    {
        "content": "<p>Hmm. Yeah, I wonder if the impl trait desugaring interferes with this</p>",
        "id": 228314479,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614636276
    },
    {
        "content": "<p>Do you have failures that are not impl-traits?</p>",
        "id": 228315541,
        "sender_full_name": "cjgillot",
        "timestamp": 1614636705
    },
    {
        "content": "<p>let me look</p>",
        "id": 228315567,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614636720
    },
    {
        "content": "<p>I just overwrote the log so have to rebuild</p>",
        "id": 228315871,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614636843
    },
    {
        "content": "<p>Typical rustc dev workflow <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228315983,
        "sender_full_name": "cjgillot",
        "timestamp": 1614636874
    },
    {
        "content": "<p>from what I remember, I think many were impl-traits</p>",
        "id": 228316237,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614636928
    },
    {
        "content": "<p>and honestly, that does make sense to me, at least I could see why that might be what's wrong</p>",
        "id": 228316340,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614636956
    },
    {
        "content": "<p>I was just assuming I messed something up in terms of getting the proper <code>Item</code> and such</p>",
        "id": 228316462,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637006
    },
    {
        "content": "<p><code>let def = self.map.defs.get(&amp;lifetime.hir_id).cloned();</code> I bet that's the problem line though</p>",
        "id": 228316812,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637197
    },
    {
        "content": "<p>That needs to be a query probably</p>",
        "id": 228316915,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637227
    },
    {
        "content": "<p>err, no</p>",
        "id": 228317242,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637356
    },
    {
        "content": "<p>Okay, so, of the 10 or so that I've looked at</p>",
        "id": 228318090,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637721
    },
    {
        "content": "<p>All are impl trait</p>",
        "id": 228318100,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637725
    },
    {
        "content": "<p>Which is good information</p>",
        "id": 228318166,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637753
    },
    {
        "content": "<p>All return impl-trait, or also parameter impl-trait?</p>",
        "id": 228318372,
        "sender_full_name": "cjgillot",
        "timestamp": 1614637834
    },
    {
        "content": "<p>I think only return impl trait</p>",
        "id": 228318413,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637855
    },
    {
        "content": "<p>But I'm not sure how many examples of parameter impl-trait there <em>are</em></p>",
        "id": 228318488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614637893
    },
    {
        "content": "<p>Ah yeah, the error for <code>filter_try_fold</code> tells me this has nothing to do with the nested functions, because it doesn't have one <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 228319390,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614638288
    },
    {
        "content": "<p>return impl-trait are desugared inside rustc_ast_lowering::lower_opaque_impl_trait. This function synthetises a new item as an OpaqueTy. The lifetime declarations are duplicated to define this item. It is then used with the lifetime arguments substituted.<br>\n<code>fn foo&lt;'a&gt;() -&gt; impl Clone + 'a {}</code> becomes <code>fn foo&lt;'a&gt;() -&gt; Blah&lt;'a&gt; {}; type Blah&lt;'a&gt;: Clone;</code></p>",
        "id": 228319496,
        "sender_full_name": "cjgillot",
        "timestamp": 1614638345
    },
    {
        "content": "<p>With both <code>&lt;'a&gt;</code> coming from the same AST fragments.</p>",
        "id": 228319554,
        "sender_full_name": "cjgillot",
        "timestamp": 1614638374
    },
    {
        "content": "<p>Yeah, I bet in one case or the other, it just can't find <code>'a</code> anymore</p>",
        "id": 228319752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614638455
    },
    {
        "content": "<p>But looks like we only visit both when we see <code>impl Clone + 'a</code></p>",
        "id": 228319854,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614638507
    },
    {
        "content": "<p>There is a special impl-trait block in LifetimeContext::visit_ty. Instrumenting it may be your best option here.</p>",
        "id": 228321063,
        "sender_full_name": "cjgillot",
        "timestamp": 1614639084
    },
    {
        "content": "<p>Yes, I'm combing through <code>debug</code> output</p>",
        "id": 228321299,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614639217
    },
    {
        "content": "<p>Gosh I love <code>#![no_core]</code> minimizations, so I don't have to compile <code>core</code>: <a href=\"https://gist.github.com/jackh726/732c62bbdbe529bef675341cab1b4746\">https://gist.github.com/jackh726/732c62bbdbe529bef675341cab1b4746</a></p>",
        "id": 228322667,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614639885
    },
    {
        "content": "<p>compiles fine with nightly, <code>unelided lifetime in signature</code> locally</p>",
        "id": 228322685,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614639901
    },
    {
        "content": "<p>And that falls back to <code>'static</code></p>",
        "id": 228322726,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614639919
    },
    {
        "content": "<p>So, that's where static is coming from</p>",
        "id": 228322742,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614639927
    },
    {
        "content": "<p>Yeah, okay, so we're asking for <code>lifetime(HirId { owner: DefId(0:4 ~ min[317d]::foo::{opaque#0}), local_id: 6 }: 'a)</code>, but we resolve that under the <code>DefId(0:2 ~ min[317d]::foo)</code> Item</p>",
        "id": 228327361,
        "sender_full_name": "Jack Huey",
        "timestamp": 1614642191
    }
]