[
    {
        "content": "<p>I get the following panic when trying to run <code>ui/treat-err-as-bug/delay_span_bug</code> on the latest nightly:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\n  --&gt; src/test/ui/treat-err-as-bug/delay_span_bug.rs:11:1\n   |\n11 | fn main() {}\n   | ^^^^^^^^^\n   |\n   = note: delayed at compiler/rustc_middle/src/util/bug.rs:45:14\n\nthread &#39;rustc&#39; panicked at &#39;no errors encountered even though `delay_span_bug` issued&#39;, compiler/rustc_errors/src/lib.rs:1011:13\n</code></pre></div>\n<p>This causes the test to fail. How can this be? Does anybody else have this problem?</p>",
        "id": 226499791,
        "sender_full_name": "BN",
        "timestamp": 1613473478
    },
    {
        "content": "<p>nvm, I think this has something to do with my local llvm version.</p>",
        "id": 226500901,
        "sender_full_name": "BN",
        "timestamp": 1613474212
    },
    {
        "content": "<p>I doesn't have anything to do with my llvm version. Even after rebuilding the llvm version supplied with rustc I still get the panic. Does anybody have a clue what might cause this?</p>",
        "id": 226514349,
        "sender_full_name": "BN",
        "timestamp": 1613483216
    },
    {
        "content": "<p>This also panics in the <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=84eeacbde2955e233af0d2c5de41fcf9\">playground</a>. The test fails if this panics, how can this be in the nightly version if the test doesn't pass?</p>",
        "id": 226515232,
        "sender_full_name": "BN",
        "timestamp": 1613483800
    },
    {
        "content": "<p>I'm not familiar with that test at all -- but isn't the compiler supposed to panic in that test?</p>\n<div class=\"codehilite\"><pre><span></span><code>// compile-flags: -Ztreat-err-as-bug\n// failure-status: 101\n// error-pattern: aborting due to `-Z treat-err-as-bug=1`\n// error-pattern: [trigger_delay_span_bug] trigger a delay span bug\n// normalize-stderr-test &quot;note: .*\\n\\n&quot; -&gt; &quot;&quot;\n// normalize-stderr-test &quot;thread &#39;rustc&#39; panicked.*\\n&quot; -&gt; &quot;&quot;\n</code></pre></div>\n<p>I guess it is supposed to panic with this output (different from the output you provided):</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: delayed span bug triggered by #[rustc_error(delay_span_bug_from_inside_query)]\n  --&gt; &lt;anon&gt;:11:1\n   |\n11 | fn main() {}\n   | ^^^^^^^^^\n\nthread &#39;rustc&#39; panicked at &#39;aborting due to `-Z treat-err-as-bug=1`&#39;, compiler/rustc_errors/src/lib.rs:990:27\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.51.0-nightly (a2f8f6281 2021-01-27) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z treat-err-as-bug\n\nquery stack during panic:\n#0 [trigger_delay_span_bug] trigger a delay span bug\nend of query stack\n</code></pre></div>",
        "id": 226516863,
        "sender_full_name": "hyd-dev",
        "timestamp": 1613484643
    },
    {
        "content": "<p>Could be, but I don't understand why the test fails then:</p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n\n---- [ui] ui/treat-err-as-bug/delay_span_bug.rs stdout ----\ndiff of stderr:\n\n4   LL | fn main() {}\n5      | ^^^^^^^^^\n6\n+   stack backtrace:\n+      0: std::panicking::begin_panic\n+      1: rustc_errors::HandlerInner::emit_diagnostic\n+      2: rustc_errors::HandlerInner::emit_diag_at_span\n+      3: rustc_errors::HandlerInner::span_bug\n+      4: rustc_errors::Handler::delay_span_bug\n+      5: rustc_middle::util::bug::trigger_delay_span_bug\n+      6: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::trigger_delay_span_bug&gt;::compute\n+      7: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n+      8: rustc_data_structures::stack::ensure_sufficient_stack\n+      9: rustc_query_system::query::plumbing::force_query_with_job\n+     10: rustc_query_system::query::plumbing::get_query_impl\n+     11: rustc_query_system::query::plumbing::get_query\n+     12: rustc_interface::queries::Queries::check_for_rustc_errors_attr\n+     13: rustc_interface::passes::QueryContext::enter\n+     14: rustc_interface::queries::Query&lt;T&gt;::compute\n+     15: rustc_interface::queries::Queries::ongoing_codegen\n+     16: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n+     17: rustc_span::with_source_map\n+     18: rustc_interface::interface::create_compiler_and_run\n+     19: scoped_tls::ScopedKey&lt;T&gt;::set\n+     20: rustc_span::with_session_globals\n7   error: internal compiler error: unexpected panic\n</code></pre></div>",
        "id": 226517489,
        "sender_full_name": "BN",
        "timestamp": 1613484954
    },
    {
        "content": "<p>You have RUST_BACKTRACE=1 set, which changes the output.</p>",
        "id": 226517613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613484995
    },
    {
        "content": "<p>oh yes^^. sorry</p>",
        "id": 226517982,
        "sender_full_name": "BN",
        "timestamp": 1613485191
    },
    {
        "content": "<p>thanks for the help</p>",
        "id": 226518043,
        "sender_full_name": "BN",
        "timestamp": 1613485206
    },
    {
        "content": "<p>wouldn't it make set to unset this automatically before the tests are run?</p>",
        "id": 226518199,
        "sender_full_name": "BN",
        "timestamp": 1613485299
    },
    {
        "content": "<p>I use it a lot for new tests actually, it lets me find bugs in a new feature</p>",
        "id": 226519121,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613485742
    },
    {
        "content": "<p>It probably makes sense to unset the variable for this specific test though</p>",
        "id": 226519152,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613485759
    }
]