[
    {
        "content": "<p>Hello!  I'm trying to cross-compile rust for i686-unknown-linux-gnu as an experiment (will move to other targets such as aarch64-linux-gnu after), but so far it seems the x.py build script wants/needs to build for x86_64-unknown-linux-gnu even though I've specified  --target i686-unknown-linux-gnu.  Is this expected/normal?</p>",
        "id": 263057456,
        "sender_full_name": "apteryx",
        "timestamp": 1638214589
    },
    {
        "content": "<p>Yes, the build system needs to build the compiler for the host system to be able to cross-compile a standard library suitable for the cross-compiled rustc. It doesn't knoe that an x86_64-unknown-linux host is able to run an i686-unknown-linux-gnu rustc and in fact this may not be true if the required libraries aren't installed as 32bit version.</p>",
        "id": 263058267,
        "sender_full_name": "bjorn3",
        "timestamp": 1638214931
    },
    {
        "content": "<p>But my bootstrap compiler is necessarily a x86_64-unknown-linux rustc compiler, no?  Why does it insist on rebuilding it?</p>",
        "id": 263058563,
        "sender_full_name": "apteryx",
        "timestamp": 1638215077
    },
    {
        "content": "<p>Re-reading your reply, OK, I think I understand; it builds stdlib differently, tuned to work with the cross-compiled rustc.</p>",
        "id": 263058889,
        "sender_full_name": "apteryx",
        "timestamp": 1638215235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437426\">@apteryx</span> rustc's build process assumes that it needs to build a fresh host compiler that isn't the bootstrap compiler, and then build a <em>matching</em> std with the host compiler.</p>",
        "id": 263058903,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215248
    },
    {
        "content": "<p>Is there a way to force it to <em>not</em> though this? Reading ./x.py --help I thought about --stage 0, but it wasn't enough it seems.</p>",
        "id": 263059022,
        "sender_full_name": "apteryx",
        "timestamp": 1638215297
    },
    {
        "content": "<p>In theory, you could build host tools <em>directly</em> for <code>i686-unknown-linux-gnu</code> first and then use those host tools, but that's not true of everything we could cross-compile host tools for. For instance, you could also cross-compile <code>x86_64-unknown-windows-gnu</code> host tools from your system, but you probably don't want to use those tools under wine to build the stdlib. ;)</p>",
        "id": 263059042,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215312
    },
    {
        "content": "<p>with <code>--keep-stage</code>, but idk if that works for cross-compiling</p>",
        "id": 263059045,
        "sender_full_name": "The 8472",
        "timestamp": 1638215316
    },
    {
        "content": "<p>--keep-stage assumes things are already in the build tree; but I'm in a clean environment so it doesn't exist (and fails attempting to copy missing files).</p>",
        "id": 263059084,
        "sender_full_name": "apteryx",
        "timestamp": 1638215344
    },
    {
        "content": "<p>the option is only meant for development, not to create proper builds</p>",
        "id": 263059089,
        "sender_full_name": "The 8472",
        "timestamp": 1638215346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263059022\">said</a>:</p>\n<blockquote>\n<p>Is there a way to force it to <em>not</em> though this? Reading ./x.py --help I thought about --stage 0, but it wasn't enough it seems.</p>\n</blockquote>\n<p>Do you have all the necessary libraries and headers installed to build things for <code>i686-unknown-linux-gnu</code>?</p>",
        "id": 263059117,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215363
    },
    {
        "content": "<p>And to run those things?</p>",
        "id": 263059134,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215371
    },
    {
        "content": "<p>good, question, I simply assumed having a stage 2 rustc/stdlib/cargo installed was enough</p>",
        "id": 263059188,
        "sender_full_name": "apteryx",
        "timestamp": 1638215400
    },
    {
        "content": "<p>(installed for the host -- x86_64-unknown-linux-gnu)</p>",
        "id": 263059258,
        "sender_full_name": "apteryx",
        "timestamp": 1638215417
    },
    {
        "content": "<p>You're trying to build host tools for i686, not just std for i686, right?</p>",
        "id": 263059294,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215444
    },
    {
        "content": "<p>You want a <code>rustc</code> that's a 32-bit binary?</p>",
        "id": 263059313,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215452
    },
    {
        "content": "<p>I'm basically trying to use my cleanly bootstrapped rust 1.54 (from rustc -&gt; 1.40 -&gt; ... -&gt; 1.54) on x86_64 to cross-build rust (including stdlib and cargo) for another architecture</p>",
        "id": 263059402,
        "sender_full_name": "apteryx",
        "timestamp": 1638215498
    },
    {
        "content": "<p>since mrustc doesn't yet support non-x86_64 architectures</p>",
        "id": 263059439,
        "sender_full_name": "apteryx",
        "timestamp": 1638215518
    },
    {
        "content": "<p>Then in that case, one approach would be to use <code>linux32 ./x.py</code>.</p>",
        "id": 263059500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215531
    },
    {
        "content": "<p>That'll make your host look like i686 to the Rust build process, which will then build host tools for i686.</p>",
        "id": 263059532,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215549
    },
    {
        "content": "<p>That won't scale to </p>\n<blockquote>\n<p>(will move to other targets such as aarch64-linux-gnu after)</p>\n</blockquote>",
        "id": 263059601,
        "sender_full_name": "The 8472",
        "timestamp": 1638215587
    },
    {
        "content": "<p><em>nod</em>, I understand.</p>",
        "id": 263059612,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215593
    },
    {
        "content": "<p>yeah, I'd like the same recipe to scale to other arches</p>",
        "id": 263059639,
        "sender_full_name": "apteryx",
        "timestamp": 1638215605
    },
    {
        "content": "<p>Ideally you do want the ability to cross-compile host tools for a variety of targets without building <em>on</em> those targets.</p>",
        "id": 263059646,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215608
    },
    {
        "content": "<p>I think that ought to be possible, but I'm not sure if it's fully possible with x.py and config.toml today.</p>",
        "id": 263059674,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638215620
    },
    {
        "content": "<p>The local 're' build is necessary, but it should get shared across any of the N targets you're compiling for. It's not clear to me why you need to avoid it</p>",
        "id": 263059717,
        "sender_full_name": "simulacrum",
        "timestamp": 1638215636
    },
    {
        "content": "<p>isn't that what the CI dockers do?</p>",
        "id": 263059744,
        "sender_full_name": "The 8472",
        "timestamp": 1638215643
    },
    {
        "content": "<p>It's not generally desirable to cross-compile for the first compiler, because the produced compiler is not ABI-compatible with itself (this is why we need stage 2 builds)</p>",
        "id": 263059827,
        "sender_full_name": "simulacrum",
        "timestamp": 1638215676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263059717\">said</a>:</p>\n<blockquote>\n<p>The local 're' build is necessary, but it should get shared across any of the N targets you're compiling for. It's not clear to me why you need to avoid it</p>\n</blockquote>\n<p>One reason is because of (perceived?) config.toml limitations: I'm setting things that are global to any targets, so in a cross-compiling environment that doesn't work if I don't control explicitly what architecture artifacts get built when.  E.g., I've set default-linker to my i686 cross-gcc; that'll fail it the build system attempts to link on x86_64. Same for the JEMALLOC_OVERRIDE environment variable.</p>",
        "id": 263060100,
        "sender_full_name": "apteryx",
        "timestamp": 1638215819
    },
    {
        "content": "<p>If there's anything in config.toml that needs to get moved/get override into the target-specific section, I'm happy to review patches for it</p>",
        "id": 263060193,
        "sender_full_name": "simulacrum",
        "timestamp": 1638215876
    },
    {
        "content": "<p>I wouldn't try to workaround those limitations with avoiding the rebuild though, because it's going to cause you other problems down the line</p>",
        "id": 263060343,
        "sender_full_name": "simulacrum",
        "timestamp": 1638215947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263059639\">said</a>:</p>\n<blockquote>\n<p>yeah, I'd like the same recipe to scale to other arches</p>\n</blockquote>\n<p>You can specify multiple targets to cross-compile for at once. It will only build rustc for the host once and once for each target.</p>",
        "id": 263060350,
        "sender_full_name": "bjorn3",
        "timestamp": 1638215952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263060100\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263059717\">said</a>:</p>\n<blockquote>\n<p>The local 're' build is necessary, but it should get shared across any of the N targets you're compiling for. It's not clear to me why you need to avoid it</p>\n</blockquote>\n<p>One reason is because of (perceived?) config.toml limitations: I'm setting things that are global to any targets, so in a cross-compiling environment that doesn't work if I don't control explicitly what architecture artifacts get built when.  E.g., I've set default-linker to my i686 cross-gcc; that'll fail it the build system attempts to link on x86_64. Same for the JEMALLOC_OVERRIDE environment variable.</p>\n</blockquote>\n<p>You can set the linker to use in the build system of rustc for each target individually using the <code>[target.\"&lt;target_name&gt;\"]</code> section. That won't change the default linker of the different produced rustc executables though.</p>",
        "id": 263060813,
        "sender_full_name": "bjorn3",
        "timestamp": 1638216129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263060350\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263059639\">said</a>:</p>\n<blockquote>\n<p>yeah, I'd like the same recipe to scale to other arches</p>\n</blockquote>\n<p>You can specify multiple targets to cross-compile for at once. It will only build rustc for the host once and once for each target.</p>\n</blockquote>\n<p>that'd greatly increase tho amount of things required to carry in the environment though (a cross GCC for each architecture to build for,  and also the target libs used from the system (openssl, libssh2, libcurl, llvm).  It's nice that it's possible though.</p>",
        "id": 263060957,
        "sender_full_name": "apteryx",
        "timestamp": 1638216221
    },
    {
        "content": "<p>Also, even if I <code>./x.py build src/libstd src/tools/cargo src/tools/rustfmt</code> without --target (i.e., for the host), then adjust default-linker in <code>config.toml</code> as well as <code>JEMALLOC_OVERRIDE</code> and cross build with --target, it still tries to build things for the host: <a href=\"https://paste.debian.net/1221258/\">https://paste.debian.net/1221258/</a></p>",
        "id": 263061598,
        "sender_full_name": "apteryx",
        "timestamp": 1638216571
    },
    {
        "content": "<p>default-linker likely applies to the host rustc as well.</p>",
        "id": 263061830,
        "sender_full_name": "bjorn3",
        "timestamp": 1638216700
    },
    {
        "content": "<p>in that output, the <code>build</code>phase ran a native build (without --target) for x86_64-unknown-linux-gnu (where default-linker was set to the native gcc), while the <code>cross-build</code> phase ran a cross build for i686-unknown-linux-gnu, with the default-linker option adjusted for the cross gcc.</p>",
        "id": 263061967,
        "sender_full_name": "apteryx",
        "timestamp": 1638216778
    },
    {
        "content": "<p>it failed because it proceeded to build for x86_64-unknown-linux-gnu during the cross-build phase (where the default-linker is set to the cross gcc!).</p>",
        "id": 263062126,
        "sender_full_name": "apteryx",
        "timestamp": 1638216865
    },
    {
        "content": "<p>It tried to compile it again during the cross-build phase as the config changed. The build system always runs all stages of the build even if some are already finished previously and lets cargo figure out if something needs to be recompiled. Cargo notices that one of the env vars read by rustc (the one containing the default linker) changed and as such considers the old compiled rustc dirty and recompiles it.</p>",
        "id": 263062720,
        "sender_full_name": "bjorn3",
        "timestamp": 1638217208
    },
    {
        "content": "<p>would sccache help there since it only affects the linker?</p>",
        "id": 263062810,
        "sender_full_name": "The 8472",
        "timestamp": 1638217274
    },
    {
        "content": "<p>hmm.  Would --keep-stage help?</p>",
        "id": 263062814,
        "sender_full_name": "apteryx",
        "timestamp": 1638217278
    },
    {
        "content": "<p>/me is not sure how --keep-stage behaves in cross-compilation.  It would try to keep the stage for the host, or for the target, or for both?</p>",
        "id": 263062957,
        "sender_full_name": "apteryx",
        "timestamp": 1638217357
    },
    {
        "content": "<p>keep-stage is unlikely to be helpful, or at least, I would not rely on it.</p>",
        "id": 263063344,
        "sender_full_name": "simulacrum",
        "timestamp": 1638217564
    },
    {
        "content": "<p>OK.  Is there a cross-compiled rust somewhere (I've heard the CI?) What do people do to select the default-linker?  Or they don't specify it and it uses /usr/bin/ld or something?</p>",
        "id": 263063653,
        "sender_full_name": "apteryx",
        "timestamp": 1638217725
    },
    {
        "content": "<p>The default linker is optional, I'm not sure what the fallback (i.e., actual default) is, but afaik CI doesn't set it</p>",
        "id": 263063727,
        "sender_full_name": "simulacrum",
        "timestamp": 1638217772
    },
    {
        "content": "<p>It'd be required on my system (Guix) since it doesn't rely on file hiearchy (FHS) such as /usr/bin.  I guess if only the rustc commands needs to be told where it is, I could add the correct <code>ld</code> to PATH in a wrapper script.</p>",
        "id": 263063984,
        "sender_full_name": "apteryx",
        "timestamp": 1638217911
    },
    {
        "content": "<p>Well, I mean, it sounds like default-linker is a good thing to add a target-specific override for</p>",
        "id": 263064267,
        "sender_full_name": "simulacrum",
        "timestamp": 1638218044
    },
    {
        "content": "<p>I would recommend doing that work over trying to hack around it</p>",
        "id": 263064333,
        "sender_full_name": "simulacrum",
        "timestamp": 1638218083
    },
    {
        "content": "<p>Any idea where this change would need to be made in the sources?  I could try my hand at a simple patch.</p>",
        "id": 263064334,
        "sender_full_name": "apteryx",
        "timestamp": 1638218084
    },
    {
        "content": "<p>somewhere in <code>src/bootstrap</code></p>",
        "id": 263064371,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638218105
    },
    {
        "content": "<p>not sure exactly where, but look for the string \"target\" in <code>config.rs</code></p>",
        "id": 263064404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638218122
    },
    {
        "content": "<p>Add default_linker to <a href=\"https://github.com/rust-lang/rust/blob/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src/bootstrap/config.rs#L297\">https://github.com/rust-lang/rust/blob/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45/src/bootstrap/config.rs#L297</a>, then <a href=\"https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/src/bootstrap/compile.rs#L675\">https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/src/bootstrap/compile.rs#L675</a> will want to make use of that with logic somewhat like <a href=\"https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/src/bootstrap/lib.rs#L1008\">https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/src/bootstrap/lib.rs#L1008</a></p>",
        "id": 263064521,
        "sender_full_name": "simulacrum",
        "timestamp": 1638218177
    },
    {
        "content": "<p>You'll also want to adjust config.toml.example to document the option.</p>",
        "id": 263064555,
        "sender_full_name": "simulacrum",
        "timestamp": 1638218193
    },
    {
        "content": "<p>Hmm, I got to the config.toml.example, and now I'm confused whether this change is necessary; it seems <code>default-linker</code> is a fallback in case <code>linker</code> is not set per target?</p>",
        "id": 263072032,
        "sender_full_name": "apteryx",
        "timestamp": 1638222428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code># Linker to be used to bootstrap Rust code. Note that the\n# default value is platform specific, and if not specified it may also depend on\n# what platform is crossing to what platform.\n# Setting this will override the `use-lld` option for Rust code when targeting MSVC.\n#linker = &quot;cc&quot; (path)\n</code></pre></div>\n<p>So this is the linker to use to <em>build</em> rustc?</p>",
        "id": 263072159,
        "sender_full_name": "apteryx",
        "timestamp": 1638222504
    },
    {
        "content": "<p>and then</p>\n<div class=\"codehilite\"><pre><span></span><code># The default linker that will be hard-coded into the generated compiler for\n# targets that don&#39;t specify linker explicitly in their target specifications.\n# Note that this is not the linker used to link said compiler.\n#\n# See https://doc.rust-lang.org/rustc/codegen-options/index.html#linker for more information.\n#default-linker = &lt;none&gt; (path)\n</code></pre></div>\n<p>Also affects the linker used to <em>build</em> rustc, but on top of it, gets baked in rustc as the linker <em>used</em> by it?</p>",
        "id": 263072234,
        "sender_full_name": "apteryx",
        "timestamp": 1638222562
    },
    {
        "content": "<p>Just the later, if the comment is accurate</p>",
        "id": 263072544,
        "sender_full_name": "apteryx",
        "timestamp": 1638222759
    },
    {
        "content": "<p>So in my cross-compilation example, it seems I should set both per-target <code>linker</code> and <code>default-linker</code> options.</p>",
        "id": 263072577,
        "sender_full_name": "apteryx",
        "timestamp": 1638222782
    },
    {
        "content": "<p>Probably, yes.</p>",
        "id": 263072689,
        "sender_full_name": "simulacrum",
        "timestamp": 1638222847
    },
    {
        "content": "<p>what do you think of:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>3 files changed, 15 insertions(+), 5 deletions(-)\nconfig.toml.example      |  8 +++++---\nsrc/bootstrap/compile.rs | 11 +++++++++--\nsrc/bootstrap/config.rs  |  1 +\n\nmodified   config.toml.example\n<span class=\"gu\">@@ -488,9 +488,11 @@ changelog-seen = 2</span>\n # FIXME(#75760): Some UI tests fail when this option is enabled.\n #parallel-compiler = false\n\n<span class=\"gd\">-# The default linker that will be hard-coded into the generated compiler for</span>\n<span class=\"gd\">-# targets that don't specify linker explicitly in their target specifications.</span>\n<span class=\"gd\">-# Note that this is not the linker used to link said compiler.</span>\n<span class=\"gi\">+# The default linker that will be hard-coded into the generated</span>\n<span class=\"gi\">+# compiler for targets that don't specify linker explicitly in their</span>\n<span class=\"gi\">+# target specifications.  Note that this is not the linker used to</span>\n<span class=\"gi\">+# link said compiler.  It can also be set per-target, which may be</span>\n<span class=\"gi\">+# useful for example in a cross-compilation setting.</span>\n #\n # See https://doc.rust-lang.org/rustc/codegen-options/index.html#linker for more information.\n #default-linker = &lt;none&gt; (path)\nmodified   src/bootstrap/compile.rs\n<span class=\"gu\">@@ -661,6 +661,8 @@ pub fn rustc_cargo_env(builder: &amp;Builder&lt;'_&gt;, cargo: &amp;mut Cargo, target: TargetS</span>\n         .env(\"CFG_VERSION\", builder.rust_version());\n\n     let libdir_relative = builder.config.libdir_relative().unwrap_or_else(|| Path::new(\"lib\"));\n<span class=\"gi\">+    let target_config = builder.config.target_config.get(&amp;target);</span>\n<span class=\"gi\">+</span>\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n\n     if let Some(ref ver_date) = builder.rust_info.commit_date() {\n<span class=\"gu\">@@ -672,9 +674,15 @@ pub fn rustc_cargo_env(builder: &amp;Builder&lt;'_&gt;, cargo: &amp;mut Cargo, target: TargetS</span>\n     if !builder.unstable_features() {\n         cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n     }\n<span class=\"gd\">-    if let Some(ref s) = builder.config.rustc_default_linker {</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    // Prefer the current target's own default_linker, else a globally</span>\n<span class=\"gi\">+    // specified one.</span>\n<span class=\"gi\">+    if let Some(s) = target_config.and_then(|c| c.default_linker.as_ref()) {</span>\n<span class=\"gi\">+        cargo.env(\"CFG_DEFAULT_LINKER\", s);</span>\n<span class=\"gi\">+    } else if let Some(ref s) = builder.config.rustc_default_linker {</span>\n         cargo.env(\"CFG_DEFAULT_LINKER\", s);\n     }\n<span class=\"gi\">+</span>\n     if builder.config.rustc_parallel {\n         cargo.rustflag(\"--cfg=parallel_compiler\");\n         cargo.rustdocflag(\"--cfg=parallel_compiler\");\n<span class=\"gu\">@@ -699,7 +707,6 @@ pub fn rustc_cargo_env(builder: &amp;Builder&lt;'_&gt;, cargo: &amp;mut Cargo, target: TargetS</span>\n         }\n         let llvm_config = builder.ensure(native::Llvm { target });\n         cargo.env(\"LLVM_CONFIG\", &amp;llvm_config);\n<span class=\"gd\">-        let target_config = builder.config.target_config.get(&amp;target);</span>\n         if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n             cargo.env(\"CFG_LLVM_ROOT\", s);\n         }\nmodified   src/bootstrap/config.rs\n<span class=\"gu\">@@ -294,6 +294,7 @@ pub struct Target {</span>\n     pub cxx: Option&lt;PathBuf&gt;,\n     pub ar: Option&lt;PathBuf&gt;,\n     pub ranlib: Option&lt;PathBuf&gt;,\n<span class=\"gi\">+    pub default_linker: Option&lt;PathBuf&gt;,</span>\n     pub linker: Option&lt;PathBuf&gt;,\n     pub ndk: Option&lt;PathBuf&gt;,\n     pub sanitizers: Option&lt;bool&gt;,\n</code></pre></div>\n<p>(untested)</p>",
        "id": 263072723,
        "sender_full_name": "apteryx",
        "timestamp": 1638222876
    },
    {
        "content": "<p>And yes, you're correct on how it's used (though given we self bootstrap there's probably some overlap if you don't set both on the second compilation)</p>",
        "id": 263072726,
        "sender_full_name": "simulacrum",
        "timestamp": 1638222878
    },
    {
        "content": "<p>oops: failed to parse TOML configuration 'config.toml': unknown field <code>default-linker</code>, expected one of <code>cc</code>, <code>cxx</code>, <code>ar</code>, <code>ranlib</code>, <code>linker</code>, <code>llvm-config</code>, <code>llvm-filecheck</code>, <code>android-ndk</code>, <code>sanitizers</code>, <code>profiler</code>, <code>crt-static</code>, <code>musl-root</code>, <code>musl-libdir</code>, <code>wasi-root</code>, <code>qemu-rootfs</code>, <code>no-std</code> for key <code>target.x86_64-unknown-linux-gnu</code> at line 29 column 1`  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263074365,
        "sender_full_name": "apteryx",
        "timestamp": 1638223772
    },
    {
        "content": "<p>seems I need to register it elsewhere</p>",
        "id": 263074495,
        "sender_full_name": "apteryx",
        "timestamp": 1638223843
    },
    {
        "content": "<p>looks like it's just validating the fields of the Target struct.</p>",
        "id": 263075224,
        "sender_full_name": "apteryx",
        "timestamp": 1638224164
    },
    {
        "content": "<p>I think I need to register it in TomlTarget as well</p>",
        "id": 263076170,
        "sender_full_name": "apteryx",
        "timestamp": 1638224690
    },
    {
        "content": "<p>Ah yeah</p>",
        "id": 263076875,
        "sender_full_name": "simulacrum",
        "timestamp": 1638225101
    },
    {
        "content": "<p>seems to work better now</p>",
        "id": 263077025,
        "sender_full_name": "apteryx",
        "timestamp": 1638225191
    },
    {
        "content": "<p>but I'll need the same thing for jemalloc I think</p>",
        "id": 263077035,
        "sender_full_name": "apteryx",
        "timestamp": 1638225205
    },
    {
        "content": "<p>that one seems handled by a crate or something... hmm</p>",
        "id": 263077222,
        "sender_full_name": "apteryx",
        "timestamp": 1638225337
    },
    {
        "content": "<p>I'll try disabling jemalloc first</p>",
        "id": 263078005,
        "sender_full_name": "apteryx",
        "timestamp": 1638225808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/pull/91375\">https://github.com/rust-lang/rust/pull/91375</a></p>",
        "id": 263080091,
        "sender_full_name": "apteryx",
        "timestamp": 1638227077
    },
    {
        "content": "<p>oh! Looking at the binary outputs (rustc/cargo) produced by the cross-compilation; I see rustc and cargo are under build/x86_64-unknown-linux-gnu.  IIUC, what I just built is a compiler capable to run on x86_64 to produce i686 executables.  Is this correct?</p>",
        "id": 263092889,
        "sender_full_name": "apteryx",
        "timestamp": 1638236908
    },
    {
        "content": "<p>how would I go about not only targetting i686 for the binaries built by the compiler, but for the platform on which the compiler runs?  I'd need to use --host instead of --target, right? Does x.py support --host?</p>",
        "id": 263094229,
        "sender_full_name": "apteryx",
        "timestamp": 1638238338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263060957\">said</a>:</p>\n<blockquote>\n<p>that'd greatly increase tho amount of things required to carry in the environment though (a cross GCC for each architecture to build for,  and also the target libs used from the system (openssl, libssh2, libcurl, llvm).  It's nice that it's possible though.</p>\n</blockquote>\n<p>If you're going to build host tools for a given target, you need a build of LLVM for that target, which does mean you need a compiler for that target.</p>",
        "id": 263094253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638238369
    },
    {
        "content": "<p>Though if you want to minimize your bootstrap set, clang only needs to get built <em>once</em> to give you a cross-compiler for all of its targets.</p>",
        "id": 263094276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638238392
    },
    {
        "content": "<p>OK.  I'm on Guix, so I'd expect GCC to be well supported (already built) for each of the 6 platforms currently supported (armhf-linux, aarch64-linux, powerpc64le, i686-linux, x86_64-linux and i586-gnu), but I'll keep this in mind in case I encounter problems.</p>",
        "id": 263094473,
        "sender_full_name": "apteryx",
        "timestamp": 1638238590
    },
    {
        "content": "<p>/me substitutes --target for --host</p>",
        "id": 263094528,
        "sender_full_name": "apteryx",
        "timestamp": 1638238663
    },
    {
        "content": "<p>interesting: <code>run pkg_config fail: \"Cross compilation detected. Use PKG_CONFIG_ALLOW_CROSS=1 to override\"</code> while building with --host=i686-unknown-linux-gnu on the same x86_64 build machine</p>",
        "id": 263095291,
        "sender_full_name": "apteryx",
        "timestamp": 1638239558
    },
    {
        "content": "<p>Is it safe to set that environment variable?</p>",
        "id": 263095311,
        "sender_full_name": "apteryx",
        "timestamp": 1638239588
    },
    {
        "content": "<p>strange, I have <code>docs = false</code> in config.toml, but doc was generated anyway</p>",
        "id": 263102051,
        "sender_full_name": "apteryx",
        "timestamp": 1638248351
    },
    {
        "content": "<p>Also, why is there no ELF32 produced <code>rustc</code> build artifact when running <code>./x.py build --stage=2 --host=i686-unknown-linux-gnu compiler/rustc src/tools/cargo src/tools/rustfmt</code> ?</p>",
        "id": 263103553,
        "sender_full_name": "apteryx",
        "timestamp": 1638250262
    },
    {
        "content": "<p>Hmm.  Seems rustc is not build for --host=i686-linux... but for x86_64: <a href=\"https://paste.debian.net/1221307/\">https://paste.debian.net/1221307/</a></p>",
        "id": 263106292,
        "sender_full_name": "apteryx",
        "timestamp": 1638253882
    },
    {
        "content": "<p>cargo and the other tools appear to be built correctly though</p>",
        "id": 263106300,
        "sender_full_name": "apteryx",
        "timestamp": 1638253894
    },
    {
        "content": "<p>the command ran was something like <code>./x.py build --stage=2 --host=i686-unknown-linux-gnu --target=i686-unknown-linux-gnu \\\n   library/std src/tools/cargo src/tools/rustfmt</code></p>",
        "id": 263106369,
        "sender_full_name": "apteryx",
        "timestamp": 1638253958
    },
    {
        "content": "<p>You need to add compiler/rustc to that command I think.</p>",
        "id": 263108111,
        "sender_full_name": "bjorn3",
        "timestamp": 1638256223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263108111\">said</a>:</p>\n<blockquote>\n<p>You need to add compiler/rustc to that command I think.</p>\n</blockquote>\n<p>Thank you!  Now I have:</p>\n<div class=\"codehilite\"><pre><span></span><code>file ./build/i686-unknown-linux-gnu/stage2/bin/rustc\n./build/i686-unknown-linux-gnu/stage2/bin/rustc: ELF 32-bit LSB pie executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/ld-linux.so.2, for GNU/Linux 2.6.32, with debug_info, not stripped\n</code></pre></div>\n<p>:-)</p>",
        "id": 263140090,
        "sender_full_name": "apteryx",
        "timestamp": 1638277235
    },
    {
        "content": "<p>ah, no sorry, my previous rustc must have been built by my experiments (./x.py dist)</p>",
        "id": 263143908,
        "sender_full_name": "apteryx",
        "timestamp": 1638279056
    },
    {
        "content": "<p>seems <code>x.py build</code> doesn't generate the cross-built build results but x.py install or dist do, IIUC.</p>",
        "id": 263144220,
        "sender_full_name": "apteryx",
        "timestamp": 1638279201
    },
    {
        "content": "<p>it'd be neat if <code>x.py install</code> had a --prefix, or alternatively -C prefix=/my/prefix</p>",
        "id": 263145718,
        "sender_full_name": "apteryx",
        "timestamp": 1638279890
    },
    {
        "content": "<p>You can specify a prefix in config.toml - it doesn't seem like the kind of thing you're constantly expecting to change?</p>",
        "id": 263145926,
        "sender_full_name": "simulacrum",
        "timestamp": 1638279966
    },
    {
        "content": "<p>in guix we are so far installing the compilers and tools to different package \"outputs\", which have different prefixes</p>",
        "id": 263147180,
        "sender_full_name": "apteryx",
        "timestamp": 1638280497
    },
    {
        "content": "<p>so currently we hack the config.toml file; call install, hack it again, call install on another target, etc.</p>",
        "id": 263147215,
        "sender_full_name": "apteryx",
        "timestamp": 1638280514
    },
    {
        "content": "<p>we may drop these prefixes or reduce them in the future to just an extra \"tools\" output, but we'd still have a need for 2 prefixes</p>",
        "id": 263147281,
        "sender_full_name": "apteryx",
        "timestamp": 1638280541
    },
    {
        "content": "<p>alternatively if <code>x.py build</code> could 'assemble' the cross-compiler, that'd be nice (it doesn't produce the target compiler; only 'dist' or 'install' do)</p>",
        "id": 263147885,
        "sender_full_name": "apteryx",
        "timestamp": 1638280783
    },
    {
        "content": "<p>that way I could do the installation of the few files manually</p>",
        "id": 263147984,
        "sender_full_name": "apteryx",
        "timestamp": 1638280813
    },
    {
        "content": "<p>x.py build should be assembling the compiler as of fairly recently, I think</p>",
        "id": 263148549,
        "sender_full_name": "simulacrum",
        "timestamp": 1638281002
    },
    {
        "content": "<p>OK; I'm on 1.54 for now</p>",
        "id": 263149112,
        "sender_full_name": "apteryx",
        "timestamp": 1638281239
    },
    {
        "content": "<p>Yeah, I think this patch landed, like, 1.58?</p>",
        "id": 263152079,
        "sender_full_name": "simulacrum",
        "timestamp": 1638282390
    },
    {
        "content": "<p>just recently yeah, maybe 3 weeks ago</p>",
        "id": 263152117,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638282412
    },
    {
        "content": "<p>so, the cross-built rustc seems to be OK (tested on a Debian 10 32-bit VM); but cargo seems linked incorrectly to a ELF64 libz</p>",
        "id": 263162601,
        "sender_full_name": "apteryx",
        "timestamp": 1638286790
    },
    {
        "content": "<p>this is what I see: </p>\n<div class=\"codehilite\"><pre><span></span><code>$ /gnu/store/vhfdxbxla54n56qggv975c39vyaa0z91-rust-i686-linux-1.54.0-cargo/bin/cargo --help\n/gnu/store/vhfdxbxla54n56qggv975c39vyaa0z91-rust-i686-linux-1.54.0-cargo/bin/cargo: error while loading shared libraries: libz.so: wrong ELF class: ELFCLASS64\nuser@debian:~/Desktop$ /gnu/store/vhfdxbxla54n56qggv975c39vyaa0z91-rust-i686-linux-1.54.0-cargo/bin/cargo --version\n/gnu/store/vhfdxbxla54n56qggv975c39vyaa0z91-rust-i686-linux-1.54.0-cargo/bin/cargo: error while loading shared libraries: libz.so: wrong ELF class: ELFCLASS64\nuser@debian:~/Desktop$ ldd /gnu/store/vhfdxbxla54n56qggv975c39vyaa0z91-rust-i686-linux-1.54.0-cargo/bin/cargo\n    linux-gate.so.1 (0xb7f22000)\n    libz.so =&gt; not found\n    libcurl.so.4 =&gt; not found\n    libssl.so.1.1 =&gt; /lib/i386-linux-gnu/libssl.so.1.1 (0xb71ae000)\n    libcrypto.so.1.1 =&gt; /lib/i386-linux-gnu/libcrypto.so.1.1 (0xb6eeb000)\n    libgcc_s.so.1 =&gt; /gnu/store/x5y2ngh1asiv3dkcbzaga9ml56xcm3ps-gcc-cross-i686-linux-gnu-10.3.0-lib/lib/gcc/i686-linux-gnu/10.3.0/../../../../i686-linux-gnu/lib/libgcc_s.so.1 (0xb6ecb000)\n    libpthread.so.0 =&gt; /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libpthread.so.0 (0xb6eaa000)\n    libm.so.6 =&gt; /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libm.so.6 (0xb6da8000)\n    libdl.so.2 =&gt; /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libdl.so.2 (0xb6da0000)\n    libc.so.6 =&gt; /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libc.so.6 (0xb6bb0000)\n    /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0xb7f24000)\n</code></pre></div>",
        "id": 263162819,
        "sender_full_name": "apteryx",
        "timestamp": 1638286863
    },
    {
        "content": "<p>perhaps pkg-config stumbled; there should be both x86_64 and cross-i686 versions of these libs in the build environment</p>",
        "id": 263163107,
        "sender_full_name": "apteryx",
        "timestamp": 1638287006
    },
    {
        "content": "<p>can default-linker be made to point to ld instead of gcc?</p>",
        "id": 263164387,
        "sender_full_name": "apteryx",
        "timestamp": 1638287614
    },
    {
        "content": "<p>/me tries</p>",
        "id": 263164547,
        "sender_full_name": "apteryx",
        "timestamp": 1638287679
    },
    {
        "content": "<p>No, rustc doesn't know about all the flags it need to pass to ld to produce a working linux executable. It doesn't pass the crt objects, and doesn't pass any of the other required flags.</p>",
        "id": 263168806,
        "sender_full_name": "bjorn3",
        "timestamp": 1638289260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263168806\">said</a>:</p>\n<blockquote>\n<p>No, rustc doesn't know about all the flags it need to pass to ld to produce a working linux executable. It doesn't pass the crt objects, and doesn't pass any of the other required flags.</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/11937\">https://github.com/rust-lang/rust/issues/11937</a></p>",
        "id": 263169032,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638289351
    },
    {
        "content": "<p>would using lld instead of ld change any of this?</p>",
        "id": 263170265,
        "sender_full_name": "apteryx",
        "timestamp": 1638289889
    },
    {
        "content": "<p>otherwise my next option is statically link things</p>",
        "id": 263170326,
        "sender_full_name": "apteryx",
        "timestamp": 1638289916
    },
    {
        "content": "<p>using LLD would not help, no, it still needs to have the CRT objects</p>",
        "id": 263170421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638289954
    },
    {
        "content": "<p>Hmm, the rpath entries are wrong in the cargo binary:</p>\n<div class=\"codehilite\"><pre><span></span><code> 0x0000001d (RUNPATH)                    Library runpath: [$ORIGIN/../lib:/gnu/store/2i0zpa5w320y8m4zbqk1va8vs6dbawv0-zlib-1.2.11/lib:/gnu/store/6r82375s1fx3363k6wk5f16z8xvwzmj0-curl-7.79.1/lib:/gnu/store/cs1kihs34ccqhc69yx0c4kaf3rkiwyyy-openssl-1.1.1l/lib:/gnu/store/x5y2ngh1asiv3dkcbzaga9ml56xcm3ps-gcc-cross-i686-linux-gnu-10.3.0-lib/lib/gcc/i686-linux-gnu/10.3.0/../../../../i686-linux-gnu/lib:/gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib]\n</code></pre></div>\n<p>The zlib, curl and openssl paths are the native ones (build machine -- x86_64)</p>",
        "id": 263184590,
        "sender_full_name": "apteryx",
        "timestamp": 1638295566
    },
    {
        "content": "<p>Is there a guix linker wrapper that adds the rpath?</p>",
        "id": 263186405,
        "sender_full_name": "bjorn3",
        "timestamp": 1638296420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263186405\">said</a>:</p>\n<blockquote>\n<p>Is there a guix linker wrapper that adds the rpath?</p>\n</blockquote>\n<p>yes, ld-wrapper; but I have it only as a native input (x86_64) for now.  rpath = true is also set in config.toml</p>",
        "id": 263189671,
        "sender_full_name": "apteryx",
        "timestamp": 1638297848
    },
    {
        "content": "<p>gcc picks ld from PATH, I believe.  So it may well be that this wrong-arch ld gets used for the i686 cross build</p>",
        "id": 263189805,
        "sender_full_name": "apteryx",
        "timestamp": 1638297920
    },
    {
        "content": "<p>since I can only specify <code>gcc</code> as the linker, not <code>ld</code> directly, I'm not sure how to get around this.  I guess I'll have to make a wrapper script for <code>gcc</code> that adds the correct ld to PATH.</p>",
        "id": 263189959,
        "sender_full_name": "apteryx",
        "timestamp": 1638297983
    },
    {
        "content": "<p>you can tell gcc to use <code>ld-wrapper</code> instead of <code>ld</code> I think</p>",
        "id": 263190097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638298060
    },
    {
        "content": "<p>there's some flag, <code>-fuse-linker</code> maybe</p>",
        "id": 263190109,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638298068
    },
    {
        "content": "<p>and you should be able to tell bootstrap to pass along custom link flags, you don't need a shell script for it</p>",
        "id": 263190193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638298094
    },
    {
        "content": "<p><code>-fuse-ld</code>. There are some restrictions around what it accepts though. There is also an arg to specify in which dir to look for external tools like the linker. <code>-B</code> I think?</p>",
        "id": 263190331,
        "sender_full_name": "bjorn3",
        "timestamp": 1638298174
    },
    {
        "content": "<p>Neat! thanks for the ideas</p>",
        "id": 263190867,
        "sender_full_name": "apteryx",
        "timestamp": 1638298401
    },
    {
        "content": "<p>-fuse-ld takes a file name to be found on PATH I guess (rather than an absolute path?)</p>",
        "id": 263193027,
        "sender_full_name": "apteryx",
        "timestamp": 1638299218
    },
    {
        "content": "<p>oh yeah gcc's version of this is very strange</p>",
        "id": 263193953,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638299626
    },
    {
        "content": "<p>clang just takes an absolute file path the way god intended</p>",
        "id": 263193974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638299636
    },
    {
        "content": "<p>eh</p>",
        "id": 263196224,
        "sender_full_name": "apteryx",
        "timestamp": 1638300647
    },
    {
        "content": "<p>I got a educated a bit about how GCC looks up linkers in #gcc on <a href=\"http://libera.chat\">libera.chat</a>.  Copying here:</p>\n<div class=\"codehilite\"><pre><span></span><code>it doesn&#39;t just look it up in PATH. -fuse-ld=gold makes it use ld.gold for a start, not &quot;gold&quot;\nand it almost certainly looks for it in locations specified with -B and/or $GCC_EXEC_PREFIX as described in the manual\nthere&#39;s more logic behind those options than just finding an executable in PATH, because different options might need to be passed to the linker depending on which one you use\n</code></pre></div>",
        "id": 263207837,
        "sender_full_name": "apteryx",
        "timestamp": 1638306007
    },
    {
        "content": "<p>so indeed -B looks like a good candidate for my use case!</p>",
        "id": 263208001,
        "sender_full_name": "apteryx",
        "timestamp": 1638306055
    },
    {
        "content": "<p>I don't see link options in config.toml.example though</p>",
        "id": 263208498,
        "sender_full_name": "apteryx",
        "timestamp": 1638306265
    },
    {
        "content": "<p>only llvm has support for ldflags it seems</p>",
        "id": 263208995,
        "sender_full_name": "apteryx",
        "timestamp": 1638306521
    },
    {
        "content": "<p>/me tries an ugly hack: gold for the build mathine, cross-compiled ld for the target</p>",
        "id": 263209100,
        "sender_full_name": "apteryx",
        "timestamp": 1638306567
    },
    {
        "content": "<p>Is there some environment variable I can set to get rustc/cargo to print all the low level GCC commands it invokes?</p>",
        "id": 263231802,
        "sender_full_name": "apteryx",
        "timestamp": 1638320523
    },
    {
        "content": "<p>Otherwise I'm trying to find in the source what/where is responsible for linking the cargo binary with libssh2, libcurl and openssl</p>",
        "id": 263233262,
        "sender_full_name": "apteryx",
        "timestamp": 1638321745
    },
    {
        "content": "<p>Ah!  Pretty sure my error is caused by my usage of PKG_CONFIG_ALLOW_CROSS:</p>\n<blockquote>\n<p>PKG_CONFIG_ALLOW_CROSS - The pkg-config command usually doesn't support cross-compilation, and this crate prevents it from selecting incompatible versions of libraries. Setting PKG_CONFIG_ALLOW_CROSS=1 disables this protection, which is likely to cause linking errors, unless pkg-config has been configured to use appropriate sysroot and search paths for the target platform.</p>\n</blockquote>",
        "id": 263235110,
        "sender_full_name": "apteryx",
        "timestamp": 1638323512
    },
    {
        "content": "<p>At least for openssl-sys I can set <code>I686_UNKNOWN_LINUX_GNU_OPENSSL_DIR</code></p>",
        "id": 263237202,
        "sender_full_name": "apteryx",
        "timestamp": 1638325660
    },
    {
        "content": "<p>That allowed cargo to be linked correctly to openssl, and the build passed</p>",
        "id": 263241743,
        "sender_full_name": "apteryx",
        "timestamp": 1638331109
    },
    {
        "content": "<p>I built <a href=\"http://hello.rs\">hello.rs</a> with the cross compiled rustc; running it works but it took 47 s.  Eh?</p>",
        "id": 263241783,
        "sender_full_name": "apteryx",
        "timestamp": 1638331188
    },
    {
        "content": "<p>Can you get a profile to see where it takes so much time?</p>",
        "id": 263257210,
        "sender_full_name": "bjorn3",
        "timestamp": 1638347005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> how can I gather such profile?</p>",
        "id": 263284916,
        "sender_full_name": "apteryx",
        "timestamp": 1638363379
    },
    {
        "content": "<p>You can try <code>perf record --call-graph dwarf</code> and then <code>perf report --no-inline</code> to get a tui or <code>perf script --no-inline &gt; profile.perf</code> and then open the profile using eg &lt;<a href=\"https://speedscope.app\">https://speedscope.app</a>&gt;. (the <code>--no-inline</code> significantly improves time to process a profile)</p>",
        "id": 263297746,
        "sender_full_name": "bjorn3",
        "timestamp": 1638368745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437426\">@apteryx</span> It took 47s to compile <a href=\"http://hello.rs\">hello.rs</a>, or to run it?</p>",
        "id": 263324597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638379091
    },
    {
        "content": "<p>to run it; compiling it was quick</p>",
        "id": 263324654,
        "sender_full_name": "apteryx",
        "timestamp": 1638379121
    },
    {
        "content": "<p>hmm, that debian VM doesn't seem to have the required tooling/configuration: Kernel address maps (/proc/{kallsyms,modules}) were restricted.</p>",
        "id": 263338325,
        "sender_full_name": "apteryx",
        "timestamp": 1638384627
    },
    {
        "content": "<p>upon invoking <code>sudo perf report --no-inline</code></p>",
        "id": 263338383,
        "sender_full_name": "apteryx",
        "timestamp": 1638384652
    },
    {
        "content": "<p>(with <code>sudo perf record --call-graph dwarf &amp;</code> running in the background)</p>",
        "id": 263338431,
        "sender_full_name": "apteryx",
        "timestamp": 1638384681
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ time rustc hello.rs\n\nreal    0m2.375s\nuser    0m1.144s\nsys 0m1.283s\n\n$ file hello\nhello: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=5458fb195357d02ff6de3d429201d69c16f03e1b, for GNU/Linux 2.6.32, with debug_info, not stripped\n\nuser@debian:~/Desktop$ time ./hello\nHello World!\n\nreal    0m50.931s\nuser    0m50.916s\nsys 0m0.012s\n</code></pre></div>",
        "id": 263338619,
        "sender_full_name": "apteryx",
        "timestamp": 1638384747
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ strace -f -s300 ./hello\n\n[...]\nopenat(AT_FDCWD, &quot;/gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libpthread.so.0&quot;, O_RDONLY|O_LARGEFILE|O_CLOEXEC) = 3\nread(3, &quot;\\177ELF\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0\\0\\\\\\0\\0004\\0\\0\\0\\24\\271\\22\\0\\0\\0\\0\\0004\\0 \\0\\f\\0(\\0+\\0*\\0\\6\\0\\0\\0004\\0\\0\\0004\\0\\0\\0004\\0\\0\\0\\200\\1\\0\\0\\200\\1\\0\\0\\4\\0\\0\\0\\4\\0\\0\\0\\3\\0\\0\\0\\300b\\1\\0\\300b\\1\\0\\300b\\1\\0^\\0\\0\\0^\\0\\0\\0\\4\\0\\0\\0 \\0\\0\\0\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\310C\\0\\0\\310C\\0\\0\\4\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\0P\\0\\0\\0P\\0\\0\\0P\\0\\0\\r\\364\\0\\0\\r\\364\\0\\0\\5\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\0P\\1\\0\\0P\\1\\0\\0P\\1\\0\\360x\\0\\0\\360x\\0\\0\\4\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0,\\316\\1\\0,\\336\\1\\0,\\336\\1\\0L\\3\\0\\0\\10$\\0\\0\\6\\0\\0\\0\\0\\20\\0\\0\\2\\0\\0\\0\\270\\316\\1\\0\\270\\336\\1\\0\\270\\336\\1\\0\\10\\1\\0\\0\\10\\1\\0\\0\\6\\0\\0\\0\\4\\0\\0\\0\\4\\0\\0\\0\\264\\1\\0\\0\\264\\1\\0\\0\\264\\1\\0\\0T\\0\\0\\0T\\0\\0\\0&quot;..., 512) = 512\n_llseek(3, 436, [436], SEEK_SET)        = 0\nread(3, &quot;\\4\\0\\0\\0\\20\\0\\0\\0\\1\\0\\0\\0GNU\\0\\0\\0\\0\\0\\2\\0\\0\\0\\6\\0\\0\\0 \\0\\0\\0\\4\\0\\0\\0$\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\200\\0\\300\\4\\0\\0\\0\\1\\0\\0\\0\\1\\0\\1\\300\\4\\0\\0\\0\\1\\0\\0\\0\\2\\0\\1\\300\\4\\0\\0\\0\\1\\0\\0\\0&quot;, 84) = 84\nfstat64(3, {st_mode=S_IFREG|0555, st_size=1228748, ...}) = 0\nmmap2(NULL, 131636, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7f3f000\nmmap2(0xb7f44000, 65536, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x5000) = 0xb7f44000\nmmap2(0xb7f54000, 32768, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x15000) = 0xb7f54000\nmmap2(0xb7f5c000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c000) = 0xb7f5c000\nmmap2(0xb7f5e000, 4660, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7f5e000\nclose(3)                                = 0\nopenat(AT_FDCWD, &quot;/gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libdl.so.2&quot;, O_RDONLY|O_LARGEFILE|O_CLOEXEC) = 3\nread(3, &quot;\\177ELF\\1\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0000\\21\\0\\0004\\0\\0\\0\\2744\\2\\0\\0\\0\\0\\0004\\0 \\0\\n\\0(\\0(\\0&#39;\\0\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\4\\n\\0\\0\\4\\n\\0\\0\\4\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\0\\20\\0\\0\\0\\20\\0\\0\\0\\20\\0\\0-\\22\\0\\0-\\22\\0\\0\\5\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\0000\\0\\0\\0000\\0\\0\\0000\\0\\0\\340\\v\\0\\0\\340\\v\\0\\0\\4\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\260&gt;\\0\\0\\260N\\0\\0\\260N\\0\\0\\220\\1\\0\\0\\304\\1\\0\\0\\6\\0\\0\\0\\0\\20\\0\\0\\2\\0\\0\\0\\310&gt;\\0\\0\\310N\\0\\0\\310N\\0\\0\\10\\1\\0\\0\\10\\1\\0\\0\\6\\0\\0\\0\\4\\0\\0\\0\\4\\0\\0\\0t\\1\\0\\0t\\1\\0\\0t\\1\\0\\0T\\0\\0\\0T\\0\\0\\0\\4\\0\\0\\0\\4\\0\\0\\0S\\345td\\224\\1\\0\\0\\224\\1\\0\\0\\224\\1\\0\\0004\\0\\0\\0004\\0\\0\\0\\4\\0\\0\\0\\4\\0\\0\\0P\\345td\\2440\\0\\0\\2440\\0\\0\\2440\\0\\0\\354\\0\\0\\0\\354\\0\\0\\0&quot;..., 512) = 512\nfstat64(3, {st_mode=S_IFREG|0555, st_size=146172, ...}) = 0\nmmap2(NULL, 20596, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7f39000\nmmap2(0xb7f3a000, 8192, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1000) = 0xb7f3a000\nmmap2(0xb7f3c000, 4096, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0xb7f3c000\nmmap2(0xb7f3d000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0xb7f3d000\nclose(3)                                = 0\nopenat(AT_FDCWD, &quot;/gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libc.so.6&quot;, O_RDONLY|O_LARGEFILE|O_CLOEXEC) = 3\nread(3, &quot;\\177ELF\\1\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0\\3\\0\\1\\0\\0\\0\\240\\272\\1\\0004\\0\\0\\0\\334L\\277\\0\\0\\0\\0\\0004\\0 \\0\\r\\0(\\0D\\0C\\0\\6\\0\\0\\0004\\0\\0\\0004\\0\\0\\0004\\0\\0\\0\\240\\1\\0\\0\\240\\1\\0\\0\\4\\0\\0\\0\\4\\0\\0\\0\\3\\0\\0\\0`\\371\\30\\0`\\371\\30\\0`\\371\\30\\0^\\0\\0\\0^\\0\\0\\0\\4\\0\\0\\0 \\0\\0\\0\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0H\\221\\1\\0H\\221\\1\\0\\4\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\0\\240\\1\\0\\0\\240\\1\\0\\0\\240\\1\\0B\\0\\25\\0B\\0\\25\\0\\5\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\0\\260\\26\\0\\0\\260\\26\\0\\0\\260\\26\\0\\244\\214\\7\\0\\244\\214\\7\\0\\4\\0\\0\\0\\0\\20\\0\\0\\1\\0\\0\\0\\234B\\36\\0\\234R\\36\\0\\234R\\36\\0\\370+\\0\\0\\360\\245\\0\\0\\6\\0\\0\\0\\0\\20\\0\\0\\2\\0\\0\\0l]\\36\\0lm\\36\\0lm\\36\\0\\350\\0\\0\\0\\350\\0\\0\\0\\6\\0\\0\\0\\4\\0\\0\\0\\4\\0\\0\\0\\324\\1\\0\\0\\324\\1\\0\\0\\324\\1\\0\\0T\\0\\0\\0T\\0\\0\\0&quot;..., 512) = 512\n_llseek(3, 468, [468], SEEK_SET)        = 0\nread(3, &quot;\\4\\0\\0\\0\\20\\0\\0\\0\\1\\0\\0\\0GNU\\0\\0\\0\\0\\0\\2\\0\\0\\0\\6\\0\\0\\0 \\0\\0\\0\\4\\0\\0\\0$\\0\\0\\0\\5\\0\\0\\0GNU\\0\\2\\200\\0\\300\\4\\0\\0\\0\\1\\0\\0\\0\\1\\0\\1\\300\\4\\0\\0\\0\\v\\0\\0\\0\\2\\0\\1\\300\\4\\0\\0\\0\\3\\0\\0\\0&quot;, 84) = 84\nfstat64(3, {st_mode=S_IFREG|0555, st_size=12539772, ...}) = 0\nmmap2(NULL, 2029708, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb7d49000\nmprotect(0xb7d63000, 1880064, PROT_NONE) = 0\nmmap2(0xb7d63000, 1380352, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1a000) = 0xb7d63000\nmmap2(0xb7eb4000, 495616, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16b000) = 0xb7eb4000\nmmap2(0xb7f2e000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e4000) = 0xb7f2e000\nmmap2(0xb7f31000, 30860, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7f31000\nclose(3)                                = 0\nmmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d47000\nset_thread_area({entry_number=-1, base_addr=0xb7d47740, limit=0x0fffff, seg_32bit=1, contents=0, read_exec_only=0, limit_in_pages=1, seg_not_present=0, useable=1}) = 0 (entry_number=6)\nmprotect(0xb7f2e000, 8192, PROT_READ)   = 0\nmprotect(0xb7f3d000, 4096, PROT_READ)   = 0\nmprotect(0xb7f5c000, 4096, PROT_READ)   = 0\nmprotect(0xb7f7c000, 4096, PROT_READ)   = 0\nmprotect(0x492000, 8192, PROT_READ)     = 0\nmprotect(0xb7fc0000, 4096, PROT_READ)   = 0\nmunmap(0xb7f7e000, 76948)               = 0\nset_tid_address(0xb7d477a8)             = 3908\nset_robust_list(0xb7d477b0, 12)         = 0\nrt_sigaction(SIGRTMIN, {sa_handler=0xb7f446e0, sa_mask=[], sa_flags=SA_RESTORER|SA_SIGINFO, sa_restorer=0xb7f50f60}, NULL, 8) = 0\nrt_sigaction(SIGRT_1, {sa_handler=0xb7f44780, sa_mask=[], sa_flags=SA_RESTORER|SA_RESTART|SA_SIGINFO, sa_restorer=0xb7f50f60}, NULL, 8) = 0\nrt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0\nugetrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM_INFINITY}) = 0\n\nHANGS\n\npoll([{fd=0, events=0}, {fd=1, events=0}, {fd=2, events=0}], 3, 0) = 0 (Timeout)\nrt_sigaction(SIGPIPE, {sa_handler=SIG_IGN, sa_mask=[PIPE], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0xb7d7a208}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\nrt_sigaction(SIGSEGV, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\nrt_sigaction(SIGSEGV, {sa_handler=0x468f90, sa_mask=[], sa_flags=SA_RESTORER|SA_ONSTACK|SA_SIGINFO, sa_restorer=0xb7f50f60}, NULL, 8) = 0\nrt_sigaction(SIGBUS, NULL, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0\nrt_sigaction(SIGBUS, {sa_handler=0x468f90, sa_mask=[], sa_flags=SA_RESTORER|SA_ONSTACK|SA_SIGINFO, sa_restorer=0xb7f50f60}, NULL, 8) = 0\nsigaltstack(NULL, {ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=0}) = 0\nmmap2(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f8e000\nmprotect(0xb7f8e000, 4096, PROT_NONE)   = 0\nsigaltstack({ss_sp=0xb7f8f000, ss_flags=0, ss_size=8192}, NULL) = 0\nmmap2(NULL, 1048576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7c47000\nopenat(AT_FDCWD, &quot;/proc/self/maps&quot;, O_RDONLY|O_CLOEXEC) = 3\nugetrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM_INFINITY}) = 0\nstatx(3, &quot;&quot;, AT_STATX_SYNC_AS_STAT|AT_NO_AUTOMOUNT|AT_EMPTY_PATH, STATX_BASIC_STATS, {stx_mask=STATX_BASIC_STATS, stx_attributes=0, stx_mode=S_IFREG|0444, stx_size=0, ...}) = 0\nread(3, &quot;00444000-00446000 r--p 00000000 fe:01 403784     /home/user/Desktop/hello\\n00446000-0047b000 r-xp 00002000 fe:01 403784     /home/user/Desktop/hello\\n0047b000-00491000 r--p 00037000 fe:01 403784     /home/user/Desktop/hello\\n00492000-00494000 r--p 0004d000 fe:01 403784     /home/user/Desktop/hello\\n0049&quot;..., 1024) = 1024\nread(3, &quot;    /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libc-2.33.so\\nb7f30000-b7f31000 rw-p 001e6000 fe:01 17949      /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libc-2.33.so\\nb7f31000-b7f39000 rw-p 00000000 00:00 0 \\nb7f39000-b7f3a000 r-&quot;..., 1024) = 1024\nread(3, &quot;00 fe:01 17981      /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libpthread-2.33.so\\nb7f44000-b7f54000 r-xp 00005000 fe:01 17981      /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libpthread-2.33.so\\nb7f54000-b7f5c000 r--p 00015000 f&quot;..., 1024) = 1024\nread(3, &quot;f7d000 r--p 0001b000 fe:01 913933     /usr/lib/i386-linux-gnu/libgcc_s.so.1\\nb7f7d000-b7f7e000 rw-p 0001c000 fe:01 913933     /usr/lib/i386-linux-gnu/libgcc_s.so.1\\nb7f8e000-b7f8f000 ---p 00000000 00:00 0 \\nb7f8f000-b7f93000 rw-p 00000000 00:00 0 \\nb7f93000-b7f96000 r--p 00000000 00:00 0          [vvar]&quot;..., 1024) = 834\nclose(3)                                = 0\nsched_getaffinity(3908, 32, [0, 1, 2, 3]) = 4\nwrite(1, &quot;Hello World!\\n&quot;, 13Hello World!\n)          = 13\nsigaltstack({ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=8192}, NULL) = 0\nmunmap(0xb7f8e000, 12288)               = 0\nexit_group(0)                           = ?\n+++ exited with 0 +++\n</code></pre></div>",
        "id": 263339342,
        "sender_full_name": "apteryx",
        "timestamp": 1638385014
    },
    {
        "content": "<p>Could you ctrl+z after a couple of seconds and then attach a debugger to get a backtrace? Or start it inside a debugger and then ctrl+c after a couple of seconds?</p>",
        "id": 263339918,
        "sender_full_name": "bjorn3",
        "timestamp": 1638385208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263338431\">said</a>:</p>\n<blockquote>\n<p>(with <code>sudo perf record --call-graph dwarf &amp;</code> running in the background)</p>\n</blockquote>\n<p>I actually meant <code>sudo perf record --call-graph dwarf /path/to/hello_world</code>.</p>",
        "id": 263340123,
        "sender_full_name": "bjorn3",
        "timestamp": 1638385275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263340123\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263338431\">said</a>:</p>\n<blockquote>\n<p>(with <code>sudo perf record --call-graph dwarf &amp;</code> running in the background)</p>\n</blockquote>\n<p>I actually meant <code>sudo perf record --call-graph dwarf /path/to/hello_world</code>.</p>\n</blockquote>\n<p>Ah, better: </p>\n<div class=\"codehilite\"><pre><span></span><code>Samples: 12K of event &#39;cycles&#39;, Event count (approx.): 85948101927\n  Children      Self  Command  Shared Object       Symbol\n+   88.62%     0.00%  hello    libpthread-2.33.so  [.] _init\n+   88.62%    11.37%  hello    libpthread-2.33.so  [.] __pthread_initialize_minimal_internal\n+   41.84%    34.58%  hello    libpthread-2.33.so  [.] __pthread_mutex_lock_full\n+   35.37%    35.18%  hello    libpthread-2.33.so  [.] __pthread_mutex_lock\n+   11.19%    11.16%  hello    libpthread-2.33.so  [.] __x86.get_pc_thunk.di\n+    7.10%     7.02%  hello    libpthread-2.33.so  [.] __x86.get_pc_thunk.si\n     0.59%     0.14%  hello    [kernel.kallsyms]   [k] apic_timer_interrupt\n     0.45%     0.00%  hello    [kernel.kallsyms]   [k] smp_apic_timer_interrupt\n     0.35%     0.00%  hello    [kernel.kallsyms]   [k] hrtimer_interrupt\n     0.28%     0.02%  hello    [kernel.kallsyms]   [k] __hrtimer_run_queues\n     0.25%     0.00%  hello    [kernel.kallsyms]   [k] tick_sched_timer\n     0.19%     0.00%  hello    [kernel.kallsyms]   [k] tick_sched_handle\n     0.19%     0.01%  hello    [kernel.kallsyms]   [k] update_process_times\n     0.16%     0.00%  hello    [unknown]           [k] 0xf4a15ff8\n     0.13%     0.01%  hello    [kernel.kallsyms]   [k] scheduler_tick\n     0.05%     0.01%  hello    [kernel.kallsyms]   [k] irq_exit\n     0.05%     0.00%  hello    [kernel.kallsyms]   [k] tick_sched_do_timer\n     0.05%     0.00%  hello    [kernel.kallsyms]   [k] tick_do_update_jiffies64.part.12\n     0.05%     0.05%  hello    [kernel.kallsyms]   [k] native_write_msr\n     0.04%     0.00%  hello    [kernel.kallsyms]   [k] try_to_wake_up\n     0.04%     0.04%  hello    [kernel.kallsyms]   [k] restore_all\n     0.04%     0.00%  hello    [kernel.kallsyms]   [k] call_on_stack\n     0.04%     0.00%  hello    [kernel.kallsyms]   [k] do_softirq_own_stack\n     0.04%     0.01%  hello    [kernel.kallsyms]   [k] ktime_get_update_offsets_now\n     0.04%     0.01%  hello    [kernel.kallsyms]   [k] perf_event_task_tick\n     0.04%     0.01%  hello    [kernel.kallsyms]   [k] perf_pmu_disable.part.92\n     0.04%     0.00%  hello    [kernel.kallsyms]   [k] irq_work_interrupt\n     0.04%     0.00%  hello    [kernel.kallsyms]   [k] smp_irq_work_interrupt\n</code></pre></div>",
        "id": 263340884,
        "sender_full_name": "apteryx",
        "timestamp": 1638385541
    },
    {
        "content": "<p><code>88.62% __pthread_initialize_minimal_internal</code> that is a lot of time spent inside mutex initialization. Same with mutex locking.</p>",
        "id": 263341336,
        "sender_full_name": "bjorn3",
        "timestamp": 1638385724
    },
    {
        "content": "<p>From gdb:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ gdb ./hello\nGNU gdb (Debian 8.2.1-2+b3) 8.2.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType &quot;show copying&quot; and &quot;show warranty&quot; for details.\nThis GDB was configured as &quot;i686-linux-gnu&quot;.\nType &quot;show configuration&quot; for configuration details.\nFor bug reporting instructions, please see:\n&lt;http://www.gnu.org/software/gdb/bugs/&gt;.\nFind the GDB manual and other documentation resources online at:\n    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.\n\nFor help, type &quot;help&quot;.\nType &quot;apropos word&quot; to search for commands related to &quot;word&quot;...\nBFD: warning: /home/user/Desktop/hello: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0008002\nReading symbols from ./hello...done.\n(gdb) run\nStarting program: /home/user/Desktop/hello\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libpthread.so.0: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0008002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libpthread.so.0: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010001\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libpthread.so.0: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libdl.so.2: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0008002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libdl.so.2: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010001\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libdl.so.2: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libc.so.6: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0008002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libc.so.6: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010001\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libc.so.6: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010002\nwarning: File &quot;/gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libthread_db-1.0.so&quot; auto-loading has been declined by your `auto-load safe-path&#39; set to &quot;$debugdir:$datadir/auto-load&quot;.\nTo enable execution of this file add\n    add-auto-load-safe-path /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/libthread_db-1.0.so\nline to your configuration file &quot;/home/user/.gdbinit&quot;.\nTo completely disable this security protection add\n    set auto-load safe-path /\nline to your configuration file &quot;/home/user/.gdbinit&quot;.\nFor more information about this security protection see the\n&quot;Auto-loading safe path&quot; section in the GDB manual.  E.g., run from the shell:\n    info &quot;(gdb)Auto-loading safe path&quot;\nwarning: Unable to find libthread_db matching inferior&#39;s thread library, thread debugging will not be available.\n\n\n\n\n^C\nProgram received signal SIGINT, Interrupt.\n0xb7f859f0 in __pthread_mutex_lock_full (mutex=mutex@entry=0xb7fff584 &lt;_rtld_global+1348&gt;)\n    at ../nptl/pthread_mutex_lock.c:599\n599 ../nptl/pthread_mutex_lock.c: No such file or directory.\n(gdb)\n</code></pre></div>",
        "id": 263341407,
        "sender_full_name": "apteryx",
        "timestamp": 1638385753
    },
    {
        "content": "<p>hmm, I'll add /gnu/store to trusted paths and reprint the above</p>",
        "id": 263341508,
        "sender_full_name": "apteryx",
        "timestamp": 1638385801
    },
    {
        "content": "<p>The result is similar:</p>\n<div class=\"codehilite\"><pre><span></span><code>(gdb) set auto-load safe-path /\n(gdb) run\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/user/Desktop/hello\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libpthread.so.0: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0008002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libpthread.so.0: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010001\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libpthread.so.0: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libdl.so.2: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0008002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libdl.so.2: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010001\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libdl.so.2: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libc.so.6: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0008002\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libc.so.6: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010001\nBFD: warning: /gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libc.so.6: unsupported GNU_PROPERTY_TYPE (5) type: 0xc0010002\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library &quot;/gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib/../lib/libthread_db.so.1&quot;.\n^C\nProgram received signal SIGINT, Interrupt.\n0xb7f86003 in __GI___pthread_mutex_lock (mutex=0xb7fff584 &lt;_rtld_global+1348&gt;)\n    at ../nptl/pthread_mutex_lock.c:71\n71  ../nptl/pthread_mutex_lock.c: No such file or directory.\n(gdb)\n</code></pre></div>",
        "id": 263341720,
        "sender_full_name": "apteryx",
        "timestamp": 1638385883
    },
    {
        "content": "<p>Assuming that the master branch of glibc didn't move it around, in the first case you interrupted it at <a href=\"https://github.com/bminor/glibc/blob/d120fb9941be1fb1934f0b50c6ad64e4c5e404fb/nptl/pthread_mutex_lock.c#L599\">https://github.com/bminor/glibc/blob/d120fb9941be1fb1934f0b50c6ad64e4c5e404fb/nptl/pthread_mutex_lock.c#L599</a> which is where the lock has been acquired.</p>",
        "id": 263341849,
        "sender_full_name": "bjorn3",
        "timestamp": 1638385928
    },
    {
        "content": "<p>Seems ld.bfd is unhappy about something?</p>",
        "id": 263341857,
        "sender_full_name": "apteryx",
        "timestamp": 1638385933
    },
    {
        "content": "<p>That is not ld.bfd. Bfd is a library for handling many kinds of object files. ld.bfd is a linker based on bfd.</p>",
        "id": 263341957,
        "sender_full_name": "bjorn3",
        "timestamp": 1638385971
    },
    {
        "content": "<p>Oh, I didn't know.  Thanks for the info.</p>",
        "id": 263342008,
        "sender_full_name": "apteryx",
        "timestamp": 1638385995
    },
    {
        "content": "<p>Something weird is definitively going on though. Initializing libpthreads and acquiring mutexes shouldn't take that much time.</p>",
        "id": 263342103,
        "sender_full_name": "bjorn3",
        "timestamp": 1638386045
    },
    {
        "content": "<p>the linker is only used to link the binaries anyway, right?  it plays no part in the program execution?</p>",
        "id": 263342136,
        "sender_full_name": "apteryx",
        "timestamp": 1638386048
    },
    {
        "content": "<p>correct. there is a dynamic linker for loading dynamic libraries at runtime, but this is the <a href=\"http://ld-linux.so\">ld-linux.so</a> that is part of your libc and not the linker you used to link the executable.</p>",
        "id": 263342281,
        "sender_full_name": "bjorn3",
        "timestamp": 1638386113
    },
    {
        "content": "<p>neither glibc's nor musl's dynamic linker uses bfd. in this case the warning results from gdb's usage of bfd I think.</p>",
        "id": 263342356,
        "sender_full_name": "bjorn3",
        "timestamp": 1638386153
    },
    {
        "content": "<p>OK; I was suggested by someone in Guix that in order to cut the dependency graph, the binary cross-built product would be uplodaded to <a href=\"http://ftp.gnu.org\">ftp.gnu.org</a>, then it would be arranged for the <code>rust</code> package for i686-linux to correspond to that unpacked tarball.  But for this it would need to be linked statically.  Perhaps that will help to resolve this issue at the same time.  Is statically building rustc and its tools easy?</p>",
        "id": 263344092,
        "sender_full_name": "apteryx",
        "timestamp": 1638386781
    },
    {
        "content": "<p>I've heard glibc doesn't get linked statically though, at least not completely; is this true?</p>",
        "id": 263345382,
        "sender_full_name": "apteryx",
        "timestamp": 1638387235
    },
    {
        "content": "<p>You can link it statically with <code>+crt_static</code>, but if you have any uses of NSS (Name Service Switch) such as DNS resolution or user lookup, glibc will still dlopen NSS modules and break horribly if the ones on the system aren't compatible.</p>",
        "id": 263349004,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1638388622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263349004\">said</a>:</p>\n<blockquote>\n<p>You can link it statically with <code>+crt_static</code>, but if you have any uses of NSS (Name Service Switch) such as DNS resolution or user lookup, glibc will still dlopen NSS modules and break horribly if the ones on the system aren't compatible.</p>\n</blockquote>\n<p>I see.  Thanks for explaining!</p>",
        "id": 263350924,
        "sender_full_name": "apteryx",
        "timestamp": 1638389418
    },
    {
        "content": "<p>If you statically link rustc it won't be able to load proc macros as proc macros are currently implemented as dynamic libraries.</p>",
        "id": 263354281,
        "sender_full_name": "bjorn3",
        "timestamp": 1638391118
    },
    {
        "content": "<p>Are proc macros a heavily relied-on feature or something that we can do without for the most part?</p>",
        "id": 263384660,
        "sender_full_name": "apteryx",
        "timestamp": 1638410513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> is is still the case? I'm not so sure after reading <a href=\"https://github.com/rust-lang/rust/issues/45601\">https://github.com/rust-lang/rust/issues/45601</a></p>",
        "id": 263384991,
        "sender_full_name": "apteryx",
        "timestamp": 1638410824
    },
    {
        "content": "<p>You will need proc-macros for almost any large rust codebase</p>",
        "id": 263386211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638412200
    },
    {
        "content": "<p>Also small ones, actually.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263384660\">said</a>:</p>\n<blockquote>\n<p>Are proc macros a heavily relied-on feature or something that we can do without for the most part?</p>\n</blockquote>\n<p>The main serialization/deserialization ecosystem for Rust is built around a proc macro.</p>",
        "id": 263386409,
        "sender_full_name": "Jubilee",
        "timestamp": 1638412395
    },
    {
        "content": "<p>No proc macros means no serde, broadly, because it breaks <code>#[derive(Serialize, Deserialize)]</code>.</p>",
        "id": 263386487,
        "sender_full_name": "Jubilee",
        "timestamp": 1638412458
    },
    {
        "content": "<p>would I be able to use a proc macro-less rustc as a bootstrap?</p>",
        "id": 263387077,
        "sender_full_name": "apteryx",
        "timestamp": 1638413181
    },
    {
        "content": "<p>Core is not allowed to use dependencies, but the compiler is, and as far as I know proc macros aren't off limits, so I believe we can only answer that based on whether or not proc macros are incidentally in the compiler's build graph, and the answer may change.</p>",
        "id": 263387195,
        "sender_full_name": "Jubilee",
        "timestamp": 1638413330
    },
    {
        "content": "<p>The answer is no, rustc_macros has several proc macros</p>",
        "id": 263387426,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638413575
    },
    {
        "content": "<p>Oh very no then. :D</p>",
        "id": 263387468,
        "sender_full_name": "Jubilee",
        "timestamp": 1638413641
    },
    {
        "content": "<p>that's unfortunate :-/</p>",
        "id": 263388667,
        "sender_full_name": "apteryx",
        "timestamp": 1638415227
    },
    {
        "content": "<p>apparently we can't just take the cross-built rustc and inject it as a dependency for a i686-linux package in Guix (still clarifying why exactly); so the usual thing done when such a thing is needed is to build the cross package statically (self contained), pack it as a tarball, and offer this tarball as a bootstrap seed for the targeted architecture.</p>",
        "id": 263388745,
        "sender_full_name": "apteryx",
        "timestamp": 1638415344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263387077\">said</a>:</p>\n<blockquote>\n<p>would I be able to use a proc macro-less rustc as a bootstrap?</p>\n</blockquote>\n<p>Well, in theory you can replace all uses of proc macros in the compiler with the results of something like <code>cargo expand</code> and maybe some manual tweaking.<br>\nIt will be tedious, but may take less time than implementing proc macro support, and can produce some version of the compiler that can be temporarily used for bootstrapping.</p>",
        "id": 263389183,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1638415920
    },
    {
        "content": "<p>interesting ideas.  How are proc macros identified?  Are they easy to scan for?</p>",
        "id": 263390074,
        "sender_full_name": "apteryx",
        "timestamp": 1638417029
    },
    {
        "content": "<p>so this is the expected error after turning <code>crt-static = true</code> in the config.toml, correct (in this case, set both for the build and host targets).</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cannot produce proc-macro for `merge_derive v0.1.0` as the target `x86_64-unknown-linux-gnu` does not support these crate types\n</code></pre></div>",
        "id": 263390349,
        "sender_full_name": "apteryx",
        "timestamp": 1638417438
    },
    {
        "content": "<p>/me reads about proc-macros</p>",
        "id": 263390965,
        "sender_full_name": "apteryx",
        "timestamp": 1638418120
    },
    {
        "content": "<p>does <code>cargo expand</code> work at the level of a single file?</p>",
        "id": 263391047,
        "sender_full_name": "apteryx",
        "timestamp": 1638418220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> that sounds a bit scary: <a href=\"https://github.com/dtolnay/cargo-expand#disclaimer\">https://github.com/dtolnay/cargo-expand#disclaimer</a></p>",
        "id": 263391396,
        "sender_full_name": "apteryx",
        "timestamp": 1638418790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263391047\">said</a>:</p>\n<blockquote>\n<p>does <code>cargo expand</code> work at the level of a single file?</p>\n</blockquote>\n<p>No, at whole crate level only.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross-compiling.20rustc.2Fstdlib.2Fcargo/near/263391396\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> that sounds a bit scary: <a href=\"https://github.com/dtolnay/cargo-expand#disclaimer\">https://github.com/dtolnay/cargo-expand#disclaimer</a></p>\n</blockquote>\n<p>That's why I said \"and maybe some manual tweaking\".<br>\n(Again, I didn't say this is necessarily a good idea, just a possibility.)</p>",
        "id": 263393499,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1638421548
    },
    {
        "content": "<p><code>cargo expand</code> actually does work on  both module and item level. You just need to pass the path.</p>",
        "id": 263401986,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1638430914
    },
    {
        "content": "<p>So the users of <code>proc-macro = true</code> crates would need to have their sources <code>cargo expanded</code>, right?</p>",
        "id": 263437137,
        "sender_full_name": "apteryx",
        "timestamp": 1638452008
    },
    {
        "content": "<p>and then after doing so I'd also need to set <code>proc-macro = false</code> in any proc-macro crate ?  Or would removing them work better?</p>",
        "id": 263437279,
        "sender_full_name": "apteryx",
        "timestamp": 1638452090
    },
    {
        "content": "<p>You will need to remove all proc-macro crate dependencies. Setting <code>proc-macro = false</code> will likely cause them to fail to compile.</p>",
        "id": 263438729,
        "sender_full_name": "bjorn3",
        "timestamp": 1638452786
    },
    {
        "content": "<p>OK.  Apparently to use 'cargo expand' I need a \"nightly\" compiler.  What bulid option is needed to get such flavor built?  Currently I have a \"release\" flavor,  Ithink.</p>",
        "id": 263439076,
        "sender_full_name": "apteryx",
        "timestamp": 1638452957
    },
    {
        "content": "<p>If you use rustup you can use <code>cargo +nightly expand</code>. Otherwise you need to install a nightly version of the compiler.</p>",
        "id": 263439479,
        "sender_full_name": "bjorn3",
        "timestamp": 1638453158
    },
    {
        "content": "<p>how can I build nightly from sources?</p>",
        "id": 263441744,
        "sender_full_name": "apteryx",
        "timestamp": 1638454127
    },
    {
        "content": "<p>this is the list of crates providing proc macros in the rust source tree:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ag -l &#39;proc-macro = true&#39; | grep .toml\ncompiler/rustc_macros/Cargo.toml\ncompiler/rustc_mir/src/transform/coverage/test_macros/Cargo.toml\nlibrary/stdarch/crates/assert-instr-macro/Cargo.toml\nlibrary/stdarch/crates/simd-test-macro/Cargo.toml\nlibrary/stdarch/crates/stdarch-verify/Cargo.toml\nsrc/doc/book/listings/ch19-advanced-features/listing-19-31/hello_macro/hello_macro_derive/Cargo.toml\nsrc/doc/book/listings/ch19-advanced-features/listing-19-33/hello_macro/hello_macro_derive/Cargo.toml\nsrc/doc/book/listings/ch19-advanced-features/no-listing-21-pancakes/hello_macro/hello_macro_derive/Cargo.toml\nsrc/tools/cargo/crates/cargo-test-macro/Cargo.toml\nsrc/tools/cargo/src/cargo/util/toml/targets.rs\nsrc/tools/miri/test-cargo-miri/issue-1760/Cargo.toml\nsrc/tools/miri/test-cargo-miri/subcrate/Cargo.toml\nsrc/tools/rust-analyzer/crates/proc_macro_test/Cargo.toml\nsrc/tools/rustfmt/config_proc_macro/Cargo.toml\nvendor/chalk-derive/Cargo.toml\nvendor/chalk-derive-0.55.0/Cargo.toml\nvendor/cstr/Cargo.toml\nvendor/ctor/Cargo.toml\nvendor/derive-new/Cargo.toml\nvendor/derive_more/Cargo.toml\nvendor/enum-iterator-derive/Cargo.toml\nvendor/futures-macro/Cargo.toml\nvendor/getset/Cargo.toml\nvendor/jsonrpc-derive/Cargo.toml\nvendor/merge_derive/Cargo.toml\nvendor/paste-impl/Cargo.toml\nvendor/pest_derive/Cargo.toml\nvendor/proc-macro-error-attr/Cargo.toml\nvendor/proc-macro-hack/Cargo.toml\nvendor/rustc-ap-rustc_macros/Cargo.toml\nvendor/rustversion/Cargo.toml\nvendor/salsa-macros/Cargo.toml\nvendor/serde_derive/Cargo.toml\nvendor/serde_derive-1.0.125/Cargo.toml\nvendor/serde_repr/Cargo.toml\nvendor/serde_repr-0.1.6/Cargo.toml\nvendor/structopt-derive/Cargo.toml\nvendor/strum_macros/Cargo.toml\nvendor/thiserror-impl/Cargo.toml\nvendor/tokio-macros/Cargo.toml\nvendor/tracing-attributes/Cargo.toml\nvendor/tracing-attributes-0.1.13/Cargo.toml\nvendor/xflags-macros/Cargo.toml\nvendor/xshell-macros/Cargo.toml\n</code></pre></div>",
        "id": 263442049,
        "sender_full_name": "apteryx",
        "timestamp": 1638454248
    },
    {
        "content": "<p>44 crates</p>",
        "id": 263442127,
        "sender_full_name": "apteryx",
        "timestamp": 1638454283
    },
    {
        "content": "<p>Maybe use the bootstrap compiler together with <code>RUSTC_BOOTSTRAP=1</code>?</p>",
        "id": 263442536,
        "sender_full_name": "bjorn3",
        "timestamp": 1638454463
    },
    {
        "content": "<p>you mean the nightly flavor of the official bootstrap compiler binary?</p>",
        "id": 263443691,
        "sender_full_name": "apteryx",
        "timestamp": 1638454971
    },
    {
        "content": "<p>If you pass <code>RUSTC_BOOTSTRAP=1</code> the rustc used for bootstrapping will behave as if it is a nightly compiler, despite actually being a stable or beta compiler.</p>",
        "id": 263443931,
        "sender_full_name": "bjorn3",
        "timestamp": 1638455063
    },
    {
        "content": "<p>interesting.  Is this documented?</p>",
        "id": 263446015,
        "sender_full_name": "apteryx",
        "timestamp": 1638455886
    },
    {
        "content": "<p>At <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#complications-of-bootstrapping\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#complications-of-bootstrapping</a> It isn't guaranteed to work forever, but if you target a specific rustc version that isn't really a problem.</p>",
        "id": 263452004,
        "sender_full_name": "bjorn3",
        "timestamp": 1638458206
    },
    {
        "content": "<p>I'm experimenting a bit more with this cross-compiled rustc on the 32-bit VM, and I've stumbled on this:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo install cargo-expand\n    Updating crates.io index\nerror: could not execute process `rustc -vV` (never executed)\n\nCaused by:\n  Exec format error (os error 8)\n</code></pre></div>",
        "id": 263531742,
        "sender_full_name": "apteryx",
        "timestamp": 1638502035
    },
    {
        "content": "<p>but:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ rustc -vV\nrustc 1.54.0\nbinary: rustc\ncommit-hash: unknown\ncommit-date: unknown\nhost: i686-unknown-linux-gnu\nrelease: 1.54.0\nLLVM version: 12.0.1\n</code></pre></div>",
        "id": 263531749,
        "sender_full_name": "apteryx",
        "timestamp": 1638502057
    },
    {
        "content": "<p>strace shows this: <code>[pid  5614] execve(\"/gnu/store/rf5w7x769l7xdc2n7g153wnd00pvlm0s-rust-i686-linux-1.54.0/bin/rustc\", [\"rustc\", \"-vV\"], 0xbfcfa444 /* 46 vars */) = -1 ENOEXEC (Exec format error)</code></p>",
        "id": 263531824,
        "sender_full_name": "apteryx",
        "timestamp": 1638502159
    },
    {
        "content": "<p>Invoking <code>rustc</code> from that absolute path works at the terminal</p>",
        "id": 263531895,
        "sender_full_name": "apteryx",
        "timestamp": 1638502231
    },
    {
        "content": "<p>ah nevermind, that's probably because rustc is wrapped in a shell script in Guix: </p>\n<div class=\"codehilite\"><pre><span></span><code>$ cat /gnu/store/rf5w7x769l7xdc2n7g153wnd00pvlm0s-rust-i686-linux-1.54.0/bin/rustc\n#!/gnu/store/vx6vfbmmazvfi7vp8xyjn2mcyylvw9gn-bash-minimal-5.1.8/bin/bash\nexport PATH=&quot;/gnu/store/g58zxpycy64m790vwjlzpadmbn065fia-ld-wrapper-0/bin${PATH:+:}$PATH&quot;\nexport LIBRARY_PATH=&quot;$LIBRARY_PATH${LIBRARY_PATH+:}/gnu/store/miwzifnpn3lgzd6kvkcmz1i0hx7vvdfm-glibc-cross-i686-linux-gnu-2.33/lib&quot;\nexec -a &quot;$0&quot; &quot;/gnu/store/rf5w7x769l7xdc2n7g153wnd00pvlm0s-rust-i686-linux-1.54.0/bin/.rustc-real&quot; &quot;$@&quot;\n</code></pre></div>\n<p>That's made so that the Guix-provided linker script is used when rustc links with shared libraries (so that runpaths get baked in the produced binary), and alsofor finding the libc startup files</p>",
        "id": 263533486,
        "sender_full_name": "apteryx",
        "timestamp": 1638504201
    },
    {
        "content": "<p>Oh: </p>\n<div class=\"codehilite\"><pre><span></span><code>$ file /gnu/store/vx6vfbmmazvfi7vp8xyjn2mcyylvw9gn-bash-minimal-5.1.8/bin/bash\n/gnu/store/vx6vfbmmazvfi7vp8xyjn2mcyylvw9gn-bash-minimal-5.1.8/bin/bash: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /gnu/store/2fk1gz2s7ppdicynscra9b19byrrr866-glibc-2.33/lib/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, stripped\n</code></pre></div>\n<p>Well, that's one problem to fix.  I'll get rid of that wrapper for now.  It wouldn't cross-compile so I used some hack I thought would be OK, but apparently it isn't!</p>",
        "id": 263533602,
        "sender_full_name": "apteryx",
        "timestamp": 1638504326
    },
    {
        "content": "<p>Without the wrap script which had the erroneous shebang, and was also causing the built binary to use the guix-provided libc (but not its libgcc_s), it performs normally!</p>\n<div class=\"codehilite\"><pre><span></span><code>$ time ./hello\nHello World!\n\nreal    0m0.027s\nuser    0m0.011s\nsys 0m0.019s\n</code></pre></div>",
        "id": 263585056,
        "sender_full_name": "apteryx",
        "timestamp": 1638540791
    },
    {
        "content": "<p>I'm guessing the issue was the mixture of the Guix libc with the host <a href=\"http://libgcc_s.so\">libgcc_s.so</a></p>",
        "id": 263585113,
        "sender_full_name": "apteryx",
        "timestamp": 1638540822
    },
    {
        "content": "<p>later I might try to have it use the <a href=\"http://libgcc_s.so\">libgcc_s.so</a> from Guix as well as its libc (to not rely on the host), but for now it works!</p>",
        "id": 263585208,
        "sender_full_name": "apteryx",
        "timestamp": 1638540851
    },
    {
        "content": "<p>carefully looking at the strace output I had posted earlier is what allowed me to see this discrepancy in the origin of the used libc vs libgcc</p>",
        "id": 263585343,
        "sender_full_name": "apteryx",
        "timestamp": 1638540920
    },
    {
        "content": "<p>oh, and my gnome-boxes is running with <code>qemu-system-x86_64</code> although the Debian image is i686 32 bit... which probably explains why the x86_64 bash shebang didn't fail earlier when running <code>rustc</code> directly</p>",
        "id": 263588728,
        "sender_full_name": "apteryx",
        "timestamp": 1638542518
    },
    {
        "content": "<p>I'll try having it use qemu-system-i386 instead</p>",
        "id": 263588854,
        "sender_full_name": "apteryx",
        "timestamp": 1638542550
    },
    {
        "content": "<p>In GNOME Boxes XML editor, edited the &lt;emulator ...&gt; block to use qemu-system-i386; switched the os arch type to i686, and deleted the &lt;cpu ...&gt; block.  Still runs fine :-).</p>",
        "id": 263597154,
        "sender_full_name": "apteryx",
        "timestamp": 1638546198
    },
    {
        "content": "<p>I'll now try to tackle the static compilation challenge</p>",
        "id": 263597292,
        "sender_full_name": "apteryx",
        "timestamp": 1638546253
    }
]