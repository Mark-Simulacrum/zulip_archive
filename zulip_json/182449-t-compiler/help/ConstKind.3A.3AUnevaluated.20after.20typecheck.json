[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  should any ConstKind::Unevaluated be allowed to exist after type check?</p>\n<p>This is the cause of <a href=\"https://github.com/rust-lang/rust/issues/70125\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70125\">https://github.com/rust-lang/rust/issues/70125</a></p>",
        "id": 191362182,
        "sender_full_name": "lcnr",
        "timestamp": 1584819060
    },
    {
        "content": "<p>I think what happened is: there is a const param, it is monomorphized <a href=\"https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src/librustc_codegen_ssa/mir/constant.rs#L61\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src/librustc_codegen_ssa/mir/constant.rs#L61\">here</a>. The result is a <code>ConstKind::Unevaluated</code>. This is normally handled fine when there was no previous monomorphization, but in this case there is a match case missing for unevaluated. I think you can fix this by recursively calling the current function <a href=\"https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src/librustc_codegen_ssa/mir/constant.rs#L62\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src/librustc_codegen_ssa/mir/constant.rs#L62\">here</a> instead of the if expression.</p>",
        "id": 191363645,
        "sender_full_name": "bjorn3",
        "timestamp": 1584821452
    },
    {
        "content": "<p>And just in case replace the <code>_</code> wildcard of the match arm with <code>ConstKind::Param</code> and move the <code>bug!</code> to a new wildcard arm.</p>",
        "id": 191363718,
        "sender_full_name": "bjorn3",
        "timestamp": 1584821577
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> will try this out</p>",
        "id": 191364825,
        "sender_full_name": "lcnr",
        "timestamp": 1584823370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> ftr, <code>monomorphize</code> shouldn't leave anything unevaluated, it's pretty much its job, but there's a bug. also, repeatedly applying <code>monomorphize</code> is wrong, as it will keep substituting, but substitutions can only be meaningfully applied once</p>",
        "id": 191415355,
        "sender_full_name": "eddyb",
        "timestamp": 1584910198
    },
    {
        "content": "<p>Where did I say that repeatedly applying <code>monomorphize</code> was a good idea?</p>",
        "id": 191415446,
        "sender_full_name": "bjorn3",
        "timestamp": 1584910313
    },
    {
        "content": "<p>you suggested recursively calling <code>eval_mir_constant</code></p>",
        "id": 191415489,
        "sender_full_name": "eddyb",
        "timestamp": 1584910348
    },
    {
        "content": "<p>after this <code>monomorphize</code> call <a href=\"https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src/librustc_codegen_ssa/mir/constant.rs#L61\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src/librustc_codegen_ssa/mir/constant.rs#L61\">https://github.com/rust-lang/rust/blob/46f5aa93d47e9077775ad9038970fd4c77abaad7/src/librustc_codegen_ssa/mir/constant.rs#L61</a></p>",
        "id": 191415494,
        "sender_full_name": "eddyb",
        "timestamp": 1584910361
    },
    {
        "content": "<p>which would result in <code>monomorphize</code> being applied multiple times, potentially</p>",
        "id": 191415501,
        "sender_full_name": "eddyb",
        "timestamp": 1584910388
    },
    {
        "content": "<p>In that case the <code>monomorphize</code> should not return <code>ConstKind::Param</code>. I suggested to only apply <code>monomorphize</code> on <code>ConstKind::Param</code>.</p>",
        "id": 191415556,
        "sender_full_name": "bjorn3",
        "timestamp": 1584910453
    },
    {
        "content": "<p>anyway special-cases like that should be avoided as much as possible</p>",
        "id": 191415583,
        "sender_full_name": "eddyb",
        "timestamp": 1584910503
    },
    {
        "content": "<p>hence my suggestion to call <code>monomorphize</code> once (irrespective of variant), and then handle <code>Unevaluated</code>, in case <code>monomorphize</code> failed to normalize for whatever reason</p>",
        "id": 191415600,
        "sender_full_name": "eddyb",
        "timestamp": 1584910539
    },
    {
        "content": "<p>That is indeed a much better way. cg_clif also does it that way it seems: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/9d014d77813fd28b29d4c3fd166d429274fc94a2/src/constant.rs#L74\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/9d014d77813fd28b29d4c3fd166d429274fc94a2/src/constant.rs#L74\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/9d014d77813fd28b29d4c3fd166d429274fc94a2/src/constant.rs#L74</a></p>",
        "id": 191415708,
        "sender_full_name": "bjorn3",
        "timestamp": 1584910679
    },
    {
        "content": "<p>monomorphize should be calling eval, it's just that nobody added a <code>fold_const</code> in the right place :(</p>",
        "id": 191415885,
        "sender_full_name": "eddyb",
        "timestamp": 1584910850
    },
    {
        "content": "<p>I wonder if there's a good way we can force <code>fold_const</code> to be implemented if <code>fold_ty</code> has been</p>",
        "id": 191496429,
        "sender_full_name": "varkor",
        "timestamp": 1584979844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> eh we could make them both required or something. idk</p>",
        "id": 191500343,
        "sender_full_name": "eddyb",
        "timestamp": 1584981334
    }
]