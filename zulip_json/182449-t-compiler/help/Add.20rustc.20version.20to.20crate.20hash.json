[
    {
        "content": "<p>Looks like there are tests failing for <a href=\"https://github.com/rust-lang/rust/pull/89836\">https://github.com/rust-lang/rust/pull/89836</a>. I'm not sure where to look for this. Any help would be appreciated!</p>",
        "id": 257385936,
        "sender_full_name": "pierwill",
        "timestamp": 1634139138
    },
    {
        "content": "<p>This part of the process is new to me. Is this something I should catch with <code>x.py test</code>?</p>",
        "id": 257386650,
        "sender_full_name": "pierwill",
        "timestamp": 1634139397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> Those tests are failing because the stdout changed, due to the hash being different with your change. You can use <code>x.py test --bless</code> to automatically update the files</p>",
        "id": 257386782,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1634139458
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 257386828,
        "sender_full_name": "pierwill",
        "timestamp": 1634139479
    },
    {
        "content": "<p>I got the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>test result: FAILED. 12150 passed; 7 failed; 117 ignored; 0 measured; 0 filtered out; finished in 420.95s\n\nSome tests failed in compiletest suite=ui mode=ui host=x86_64-apple-darwin target=x86_64-apple-darwin\n</code></pre></div>\n<p>And these git changes:</p>\n<div class=\"codehilite\"><pre><span></span><code>On branch fix-85142-crate-hash\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)\n  (commit or discard the untracked or modified content in submodules)\n    modified:   library/backtrace (untracked content)\n    modified:   src/test/ui/consts/miri_unleashed/tls.stderr\n    modified:   src/test/ui/generator/print/generator-print-verbose-1.stderr\n    modified:   src/test/ui/lto-duplicate-symbols.stderr\n    modified:   src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr\n    modified:   src/test/ui/specialization/min_specialization/repeated_projection_type.stderr\n    modified:   src/test/ui/symbol-names/basic.legacy.stderr\n    modified:   src/test/ui/symbol-names/basic.v0.stderr\n    modified:   src/test/ui/symbol-names/const-generics-demangling.stderr\n    modified:   src/test/ui/symbol-names/const-generics-str-demangling.stderr\n    modified:   src/test/ui/symbol-names/const-generics-structural-demangling.stderr\n    modified:   src/test/ui/symbol-names/impl1.v0.stderr\n    modified:   src/test/ui/symbol-names/issue-60925.legacy.stderr\n    modified:   src/test/ui/symbol-names/issue-60925.v0.stderr\n    modified:   src/test/ui/symbol-names/issue-75326.v0.stderr\n    modified:   src/test/ui/symbol-names/trait-objects.v0.stderr\n    modified:   src/test/ui/thir-tree.stdout\n</code></pre></div>",
        "id": 257390503,
        "sender_full_name": "pierwill",
        "timestamp": 1634140705
    },
    {
        "content": "<p>Running <code>x test src/test/ui</code>, the tests still fail. Is this expected?</p>",
        "id": 257390593,
        "sender_full_name": "pierwill",
        "timestamp": 1634140739
    },
    {
        "content": "<p>Do I need to recompile everything?</p>",
        "id": 257390642,
        "sender_full_name": "pierwill",
        "timestamp": 1634140755
    },
    {
        "content": "<p>I'm trying <code>x clean &amp;&amp; x test src/test/ui</code> now :)</p>",
        "id": 257391979,
        "sender_full_name": "pierwill",
        "timestamp": 1634141202
    },
    {
        "content": "<p>no, fixing ui test stderr files doesn't require a recompile</p>",
        "id": 257392130,
        "sender_full_name": "The 8472",
        "timestamp": 1634141263
    },
    {
        "content": "<p>16 failed before, now only 7 fail. you'll have to examine the errors again</p>",
        "id": 257392273,
        "sender_full_name": "The 8472",
        "timestamp": 1634141302
    },
    {
        "content": "<p>I can't say what you need to do to work around this, but I think it is going to take a bit more than just blessing the tests to get that to work.  If the symbol names change with changes in the release version, it is likely going to be problematic for the release process.</p>",
        "id": 257392329,
        "sender_full_name": "Eric Huss",
        "timestamp": 1634141325
    },
    {
        "content": "<p>Ah. I knew this was seeming too easy ;)</p>",
        "id": 257392450,
        "sender_full_name": "pierwill",
        "timestamp": 1634141374
    },
    {
        "content": "<p>There's got to be something that is consuming the new hashes and getting unexpected data. Maybe there is \"demangling\" code that needs to match the new format of the stable crate hash? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 257394646,
        "sender_full_name": "pierwill",
        "timestamp": 1634142200
    },
    {
        "content": "<p>Trying to make sense of how these tests work:</p>\n<div class=\"codehilite\"><pre><span></span><code>failures:\n    [ui] ui/symbol-names/basic.rs#v0\n    [ui] ui/symbol-names/const-generics-demangling.rs\n    [ui] ui/symbol-names/const-generics-str-demangling.rs\n    [ui] ui/symbol-names/const-generics-structural-demangling.rs\n    [ui] ui/symbol-names/impl1.rs#v0\n    [ui] ui/symbol-names/issue-60925.rs#v0\n    [ui] ui/symbol-names/issue-75326.rs#v0\n</code></pre></div>",
        "id": 257394865,
        "sender_full_name": "pierwill",
        "timestamp": 1634142282
    },
    {
        "content": "<p>Ah! These symbol names are different lengths! That can't be good:</p>\n<p><a href=\"https://github.com/pierwill/rust/commit/ea39fbcd55b1be81f437fd01e4abce57db6e7785#diff-842a53185dd31b0cbfcf27607efd3958e5109f814639e48c5f81f4e31365c9adL7-R7\">https://github.com/pierwill/rust/commit/ea39fbcd55b1be81f437fd01e4abce57db6e7785#diff-842a53185dd31b0cbfcf27607efd3958e5109f814639e48c5f81f4e31365c9adL7-R7</a></p>",
        "id": 257396461,
        "sender_full_name": "pierwill",
        "timestamp": 1634142901
    },
    {
        "content": "<p>Another possible clue: <a href=\"https://github.com/pierwill/rust/blob/ea39fbcd55b1be81f437fd01e4abce57db6e7785/src/tools/rust-demangler/src/lib.rs#L7-L11\">https://github.com/pierwill/rust/blob/ea39fbcd55b1be81f437fd01e4abce57db6e7785/src/tools/rust-demangler/src/lib.rs#L7-L11</a></p>",
        "id": 257400521,
        "sender_full_name": "pierwill",
        "timestamp": 1634144354
    },
    {
        "content": "<p>Maybe the rustc version has to be an argument to this function instead of dynamically gotten from environment? <a href=\"https://github.com/pierwill/rust/blob/ea39fbcd55b1be81f437fd01e4abce57db6e7785/compiler/rustc_span/src/def_id.rs#L148\">https://github.com/pierwill/rust/blob/ea39fbcd55b1be81f437fd01e4abce57db6e7785/compiler/rustc_span/src/def_id.rs#L148</a></p>",
        "id": 257401788,
        "sender_full_name": "pierwill",
        "timestamp": 1634144803
    },
    {
        "content": "<p>My latest theory is that something is wrong with handling generics either in this test or the code it uses: <a href=\"https://github.com/pierwill/rust/blob/ea39fbcd55b1be81f437fd01e4abce57db6e7785/compiler/rustc_symbol_mangling/src/test.rs#L34-L60\">https://github.com/pierwill/rust/blob/ea39fbcd55b1be81f437fd01e4abce57db6e7785/compiler/rustc_symbol_mangling/src/test.rs#L34-L60</a></p>",
        "id": 257404763,
        "sender_full_name": "pierwill",
        "timestamp": 1634146016
    },
    {
        "content": "<blockquote>\n<p>If the symbol names change with changes in the release version, it is likely going to be problematic for the release process.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> I'm starting to understand the implications of this... <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 257408858,
        "sender_full_name": "pierwill",
        "timestamp": 1634147621
    },
    {
        "content": "<p>I've been thinking out loud here, <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 257412180,
        "sender_full_name": "pierwill",
        "timestamp": 1634148886
    },
    {
        "content": "<p>Wow. This PR got big. This is the first time I've taken on an issue with any real tentacles at all.</p>",
        "id": 257452124,
        "sender_full_name": "pierwill",
        "timestamp": 1634165991
    },
    {
        "content": "<p>HUUUUGE shout out to <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> for his help and patience with this is the DMs <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 257713243,
        "sender_full_name": "pierwill",
        "timestamp": 1634310560
    },
    {
        "content": "<p>Huh. With <code>--bless</code>, my changes are affecting the <code>.stderr</code> for <code>basic.legacy.stderr</code>... Shouldn't this only affect v0?</p>",
        "id": 257718227,
        "sender_full_name": "pierwill",
        "timestamp": 1634312380
    },
    {
        "content": "<p>And not just the line numbers.</p>",
        "id": 257718260,
        "sender_full_name": "pierwill",
        "timestamp": 1634312398
    },
    {
        "content": "<p>The <code>StableCrateId</code> likely ends up in the hash for legacy symbol names too.</p>",
        "id": 257724623,
        "sender_full_name": "bjorn3",
        "timestamp": 1634314825
    },
    {
        "content": "<p>I figured as much.</p>",
        "id": 257725321,
        "sender_full_name": "pierwill",
        "timestamp": 1634315100
    },
    {
        "content": "<p>I cannot seem to get the regex normalization to actually work! I keep getting things like </p>\n<div class=\"codehilite\"><pre><span></span><code>unexpected errors (from JSON output): [\n    Error {\n        line_num: 10,\n        kind: Some(\n            Error,\n        ),\n        msg: &quot;10:1: 10:21: symbol-name(_RNvCshNHOqfMlC59_5basic4main)&quot;,\n    },\n    Error {\n        line_num: 10,\n        kind: Some(\n            Error,\n        ),\n        msg: &quot;10:1: 10:21: demangling(basic[cf58ff788efc81d1]::main)&quot;,\n    },\n]\n\nnot found errors (from test file): [\n    Error {\n        line_num: 10,\n        kind: Some(\n            Error,\n        ),\n        msg: &quot;symbol-name(_RNv$CRATE_HASH5basic4main)&quot;,\n    },\n    Error {\n        line_num: 10,\n        kind: Some(\n            Error,\n        ),\n        msg: &quot;demangling(basic[$HASH]::main)&quot;,\n    },\n]\n</code></pre></div>",
        "id": 257725424,
        "sender_full_name": "pierwill",
        "timestamp": 1634315143
    },
    {
        "content": "<p>Looking to see how other tests do it...</p>",
        "id": 257725440,
        "sender_full_name": "pierwill",
        "timestamp": 1634315150
    },
    {
        "content": "<p>Interesting... this test seems to truncate the error in the <code>.rs</code> file <a href=\"https://github.com/rust-lang/rust/blob/9c53bd24f8724529de6dd92459340706957a07cc/src/test/ui/layout/debug.rs#L6\">https://github.com/rust-lang/rust/blob/9c53bd24f8724529de6dd92459340706957a07cc/src/test/ui/layout/debug.rs#L6</a></p>",
        "id": 257725879,
        "sender_full_name": "pierwill",
        "timestamp": 1634315314
    },
    {
        "content": "<p>Yeah, that is used relatively common.</p>",
        "id": 257726165,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315437
    },
    {
        "content": "<p>Ah! I think I finally got one of the tests to work <em>correctly</em>: <a href=\"https://github.com/rust-lang/rust/pull/89836/commits/a9601c82234dc7b2b3cfa84be780bd229c7cf408\">https://github.com/rust-lang/rust/pull/89836/commits/a9601c82234dc7b2b3cfa84be780bd229c7cf408</a></p>",
        "id": 257735908,
        "sender_full_name": "pierwill",
        "timestamp": 1634319418
    },
    {
        "content": "<p>These symbols are changing in <code>mir-opt</code>: <a href=\"https://github.com/rust-lang/rust/runs/3911501632#step:26:1684\">https://github.com/rust-lang/rust/runs/3911501632#step:26:1684</a></p>\n<p>Is there normalization for the <code>mir-opt</code> tests? If not, should/could we have that?</p>",
        "id": 257801054,
        "sender_full_name": "pierwill",
        "timestamp": 1634359466
    },
    {
        "content": "<p>Or is that unnecessary?</p>",
        "id": 257801286,
        "sender_full_name": "pierwill",
        "timestamp": 1634359685
    },
    {
        "content": "<p>From @nagisa <a href=\"https://github.com/rust-lang/rust/pull/89836#discussion_r730403951\">here</a>:</p>\n<blockquote>\n<p>Yeah you may need to implement something in the test runner for this, or alternatively change the MIR output code to print def_ids in a different way that does not expose the hash.</p>\n</blockquote>",
        "id": 257951964,
        "sender_full_name": "pierwill",
        "timestamp": 1634507931
    },
    {
        "content": "<p>Which would people prefer? Which is easier to implement? Not sure where to start on the test runner code. Looks like maybe some regex logic in here might work? <a href=\"https://github.com/rust-lang/rust/blob/8db8f48ea8c2443e969050fe4b6c829585048d5c/src/tools/compiletest/src/runtest.rs#L3243\">https://github.com/rust-lang/rust/blob/8db8f48ea8c2443e969050fe4b6c829585048d5c/src/tools/compiletest/src/runtest.rs#L3243</a></p>",
        "id": 257952155,
        "sender_full_name": "pierwill",
        "timestamp": 1634508093
    },
    {
        "content": "<p>It can't be this easy, can it?  <a href=\"https://github.com/rust-lang/rust/commit/02f042261d3e98d4df865fb343bcee2e96ce40b7\">https://github.com/rust-lang/rust/commit/02f042261d3e98d4df865fb343bcee2e96ce40b7</a></p>",
        "id": 257953546,
        "sender_full_name": "pierwill",
        "timestamp": 1634509411
    },
    {
        "content": "<p>I would suggest enabling the necessary normalization by default for mir-opt tests, rather than repeating the rule in each file.</p>",
        "id": 257953751,
        "sender_full_name": "tm",
        "timestamp": 1634509592
    },
    {
        "content": "<p>Ah that could work. As long as we can find the right regex...</p>\n<p>Would have to match foo[bar] in <code>// + def_id: DefId(0:14 ~ foo[bar]::main::{closure#0})</code></p>",
        "id": 257953921,
        "sender_full_name": "pierwill",
        "timestamp": 1634509801
    },
    {
        "content": "<p>and lots of that is liable to change... Also not sure it's only def ids to consider <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 257953978,
        "sender_full_name": "pierwill",
        "timestamp": 1634509831
    },
    {
        "content": "<p>This didn't work anyway <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  <a href=\"https://github.com/rust-lang/rust/commit/02f042261d3e98d4df865fb343bcee2e96ce40b7\">https://github.com/rust-lang/rust/commit/02f042261d3e98d4df865fb343bcee2e96ce40b7</a></p>",
        "id": 257954020,
        "sender_full_name": "pierwill",
        "timestamp": 1634509900
    },
    {
        "content": "<p>ah wait, need to normalize the output, not the expected output <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 257954146,
        "sender_full_name": "pierwill",
        "timestamp": 1634510035
    },
    {
        "content": "<p>Huh. This is in the existing code. Wonder what it does?</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src/tools/compiletest/src/runtest.rs#L3344\">https://github.com/rust-lang/rust/blob/1f12ac87296ac61ec002e0243e7ad5a50364da35/src/tools/compiletest/src/runtest.rs#L3344</a></p>",
        "id": 257954813,
        "sender_full_name": "pierwill",
        "timestamp": 1634510717
    },
    {
        "content": "<p>Looks like it's something that can be reused with the custom normalization rules...</p>",
        "id": 257954847,
        "sender_full_name": "pierwill",
        "timestamp": 1634510758
    },
    {
        "content": "<p>This might just do it! <a href=\"https://github.com/rust-lang/rust/pull/89836/commits/399a6fcc389be39c272675058b6b8e17d3a7bdb0\">https://github.com/rust-lang/rust/pull/89836/commits/399a6fcc389be39c272675058b6b8e17d3a7bdb0</a></p>",
        "id": 258111621,
        "sender_full_name": "pierwill",
        "timestamp": 1634596646
    },
    {
        "content": "<p>Almost...</p>",
        "id": 258115932,
        "sender_full_name": "pierwill",
        "timestamp": 1634598473
    },
    {
        "content": "<p>We made it much further this time: <a href=\"https://github.com/rust-lang/rust/pull/89836/checks?check_run_id=3933757100#step:25:3664\">https://github.com/rust-lang/rust/pull/89836/checks?check_run_id=3933757100#step:25:3664</a></p>",
        "id": 258129593,
        "sender_full_name": "pierwill",
        "timestamp": 1634608733
    },
    {
        "content": "<p>Made it all the way through stage1</p>",
        "id": 258129768,
        "sender_full_name": "pierwill",
        "timestamp": 1634608836
    },
    {
        "content": "<p>The failures are all in <code>mir-opt</code> tests that have 32 and 64 bit versions...</p>",
        "id": 258129992,
        "sender_full_name": "pierwill",
        "timestamp": 1634608993
    },
    {
        "content": "<p>I can't figure out what's up with this error! <a href=\"https://github.com/rust-lang/rust/pull/89836/checks?check_run_id=3940911038#step:25:1685\">https://github.com/rust-lang/rust/pull/89836/checks?check_run_id=3940911038#step:25:1685</a></p>\n<p>This file was updated when I did a <code>--bless</code>. But upstream doesn't like it :( And it doesn't have an obvious relation to the work I'm doing in this branch...</p>",
        "id": 258213551,
        "sender_full_name": "pierwill",
        "timestamp": 1634656764
    },
    {
        "content": "<p>Reverting <code>src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr</code> to master, it keeps wanting to change with <code>--bless</code>, but then fails CI. Guess I'll just ignore the <code>--bless</code></p>",
        "id": 258214347,
        "sender_full_name": "pierwill",
        "timestamp": 1634657005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> Have you rebased against the later master?</p>",
        "id": 258227713,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1634661310
    },
    {
        "content": "<p>I do believe so :)</p>",
        "id": 258236271,
        "sender_full_name": "pierwill",
        "timestamp": 1634663947
    },
    {
        "content": "<p>Always worth another shot</p>",
        "id": 258236315,
        "sender_full_name": "pierwill",
        "timestamp": 1634663960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> Yep, the branch is up-to-date</p>",
        "id": 258237967,
        "sender_full_name": "pierwill",
        "timestamp": 1634664498
    },
    {
        "content": "<p>In GH (sorry to bounce back and forth <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> )</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> I think the test incorrectly depends on the sort order of DefId. It may need a .sort_by_key() somewhere.</p>\n</blockquote>\n<p><del>Maybe defids need to be sorted in <a href=\"https://github.com/rust-lang/rust/blob/6bc80bd8c2b37900e78061f4bf64f525e4dfd3ac/compiler/rustc_resolve/src/late/lifetimes.rs#L1905\">https://github.com/rust-lang/rust/blob/6bc80bd8c2b37900e78061f4bf64f525e4dfd3ac/compiler/rustc_resolve/src/late/lifetimes.rs#L1905</a>? </del></p>",
        "id": 258240349,
        "sender_full_name": "pierwill",
        "timestamp": 1634665291
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 258240566,
        "sender_full_name": "pierwill",
        "timestamp": 1634665366
    },
    {
        "content": "<p>There is sorting of defids going on here <a href=\"https://github.com/rust-lang/rust/blob/6bc80bd8c2b37900e78061f4bf64f525e4dfd3ac/compiler/rustc_resolve/src/late/lifetimes.rs#L2028\">https://github.com/rust-lang/rust/blob/6bc80bd8c2b37900e78061f4bf64f525e4dfd3ac/compiler/rustc_resolve/src/late/lifetimes.rs#L2028</a> before the call to <code>suggest_eliding_single_use_lifetime</code>...</p>",
        "id": 258243472,
        "sender_full_name": "pierwill",
        "timestamp": 1634666342
    },
    {
        "content": "<p>Maybe the <code>sort_by_cached_key</code> is not deterministic enough?</p>",
        "id": 258245159,
        "sender_full_name": "pierwill",
        "timestamp": 1634666908
    },
    {
        "content": "<p>(I'm just thinking out loud)</p>",
        "id": 258245191,
        "sender_full_name": "pierwill",
        "timestamp": 1634666924
    },
    {
        "content": "<p>Okay wow this worked:</p>\n<div class=\"codehilite\"><pre><span></span><code>modified   compiler/rustc_resolve/src/late/lifetimes.rs\n@@ -2025,7 +2025,7 @@ fn check_uses_for_lifetimes_defined_by_scope(&amp;mut self) {\n             .collect();\n\n         // ensure that we issue lints in a repeatable order\n-        def_ids.sort_by_cached_key(|&amp;def_id| self.tcx.def_path_hash(def_id));\n+        def_ids.sort();\n</code></pre></div>\n<p>Wonder if this'll affect performance, though, or cause other problems...</p>",
        "id": 258245518,
        "sender_full_name": "pierwill",
        "timestamp": 1634667055
    },
    {
        "content": "<p>You need to sort decide using the hash - otherwise, you'll cause problems with incremental compilation</p>",
        "id": 258250508,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1634668917
    },
    {
        "content": "<p>In that case, I wonder how else to work around this issue... Why is the original sorting causing problems for the elided lifetime test?</p>",
        "id": 258251000,
        "sender_full_name": "pierwill",
        "timestamp": 1634669110
    },
    {
        "content": "<p>Ah. Maybe <code>sort_by_key</code> will work after all...</p>",
        "id": 258252075,
        "sender_full_name": "pierwill",
        "timestamp": 1634669530
    },
    {
        "content": "<p>Nope :(</p>",
        "id": 258252275,
        "sender_full_name": "pierwill",
        "timestamp": 1634669627
    },
    {
        "content": "<p>Reverted back to original code of sorting DefIds. It passes CI this time when it was failing before. But I'm suspicious...</p>",
        "id": 258271514,
        "sender_full_name": "pierwill",
        "timestamp": 1634677359
    },
    {
        "content": "<p>Still fails locally.</p>",
        "id": 258271624,
        "sender_full_name": "pierwill",
        "timestamp": 1634677407
    },
    {
        "content": "<p>What error are you getting locally?</p>",
        "id": 258272432,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1634677738
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>failures:\n\n---- [ui] ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs stdout ----\ndiff of stderr:\n\n-   error: lifetime parameter `&#39;a` only used once\n-     --&gt; $DIR/one-use-in-fn-argument-in-band.rs:11:10\n+   error: lifetime parameter `&#39;b` only used once\n+     --&gt; $DIR/one-use-in-fn-argument-in-band.rs:11:22\n3      |\n4   LL | fn a(x: &amp;&#39;a u32, y: &amp;&#39;b u32) {\n-      |          ^^-\n-      |          |\n-      |          this lifetime is only used here\n-      |          help: elide the single-use lifetime\n+      |                      ^^-\n+      |                      |\n+      |                      this lifetime is only used here\n+      |                      help: elide the single-use lifetime\n9      |\n10  note: the lint level is defined here\n11    --&gt; $DIR/one-use-in-fn-argument-in-band.rs:4:9\n\n13  LL | #![deny(single_use_lifetimes)]\n14     |         ^^^^^^^^^^^^^^^^^^^^\n15\n-   error: lifetime parameter `&#39;b` only used once\n-     --&gt; $DIR/one-use-in-fn-argument-in-band.rs:11:22\n+   error: lifetime parameter `&#39;a` only used once\n+     --&gt; $DIR/one-use-in-fn-argument-in-band.rs:11:10\n18     |\n19  LL | fn a(x: &amp;&#39;a u32, y: &amp;&#39;b u32) {\n-      |                      ^^-\n-      |                      |\n-      |                      this lifetime is only used here\n-      |                      help: elide the single-use lifetime\n+      |          ^^-\n+      |          |\n+      |          this lifetime is only used here\n+      |          help: elide the single-use lifetime\n24\n25  error: aborting due to 2 previous errors\n26\n\n\nThe actual stderr differed from the expected stderr.\nActual stderr saved to /Users/wpierce/repos/rust/build/x86_64-apple-darwin/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band/one-use-in-fn-argument-in-band.stderr\nTo update references, rerun the tests and pass the `--bless` flag\nTo only update this specific test, also pass `--test-args single-use-lifetime/one-use-in-fn-argument-in-band.rs`\n\nerror: 1 errors occurred comparing output.\nstatus: exit status: 1\ncommand: &quot;/Users/wpierce/repos/rust/build/x86_64-apple-darwin/stage1/bin/rustc&quot; &quot;/Users/wpierce/repos/rust/src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-apple-darwin&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Ccodegen-units=1&quot; &quot;-Zui-testing&quot; &quot;-Zdeduplicate-diagnostics=no&quot; &quot;-Zemit-future-incompat-report&quot; &quot;--emit&quot; &quot;metadata&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;--out-dir&quot; &quot;/Users/wpierce/repos/rust/build/x86_64-apple-darwin/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band&quot; &quot;-A&quot; &quot;unused&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Cdebuginfo=0&quot; &quot;-Lnative=/Users/wpierce/repos/rust/build/x86_64-apple-darwin/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/Users/wpierce/repos/rust/build/x86_64-apple-darwin/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band/auxiliary&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nerror: lifetime parameter `&#39;b` only used once\n  --&gt; /Users/wpierce/repos/rust/src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs:11:22\n   |\nLL | fn a(x: &amp;&#39;a u32, y: &amp;&#39;b u32) {\n   |                      ^^-\n   |                      |\n   |                      this lifetime is only used here\n   |                      help: elide the single-use lifetime\n   |\nnote: the lint level is defined here\n  --&gt; /Users/wpierce/repos/rust/src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs:4:9\n   |\nLL | #![deny(single_use_lifetimes)]\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nerror: lifetime parameter `&#39;a` only used once\n  --&gt; /Users/wpierce/repos/rust/src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs:11:10\n   |\nLL | fn a(x: &amp;&#39;a u32, y: &amp;&#39;b u32) {\n   |          ^^-\n   |          |\n   |          this lifetime is only used here\n   |          help: elide the single-use lifetime\n\nerror: aborting due to 2 previous errors\n\n\n------------------------------------------\n\n\n\nfailures:\n    [ui] ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs\n\ntest result: FAILED. 12191 passed; 1 failed; 117 ignored; 0 measured; 0 filtered out; finished in 459.74s\n\nSome tests failed in compiletest suite=ui mode=ui host=x86_64-apple-darwin target=x86_64-apple-darwin\n</code></pre></div>",
        "id": 258278386,
        "sender_full_name": "pierwill",
        "timestamp": 1634680310
    },
    {
        "content": "<p>The lints are in the wrong order</p>",
        "id": 258279393,
        "sender_full_name": "pierwill",
        "timestamp": 1634680776
    },
    {
        "content": "<p>Summary: I <em>think</em> <a href=\"https://github.com/rust-lang/rust/blob/d6d824f7890922185bd3a0a5dc120b1f4e8bb426/compiler/rustc_resolve/src/late/lifetimes.rs#L2028\">this line</a> is not doing its job when it comes <a href=\"https://github.com/rust-lang/rust/blob/d6d824f7890922185bd3a0a5dc120b1f4e8bb426/compiler/rustc_resolve/src/late/lifetimes.rs#L2097-L2120\">to this lint code</a>.</p>",
        "id": 258410866,
        "sender_full_name": "pierwill",
        "timestamp": 1634751534
    },
    {
        "content": "<p>Does <code>CFG_VERSION</code> contain anything platform-specific?</p>",
        "id": 258418133,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1634754195
    },
    {
        "content": "<p>Last time I added a println for this somewhere during this test, mine said only <code>rustc-1.58-dev</code> or something similar.</p>",
        "id": 258418986,
        "sender_full_name": "pierwill",
        "timestamp": 1634754521
    },
    {
        "content": "<p>It can contain also arbitrary metadata set at compile-time (config.toml description, e.g., \"debian\")</p>",
        "id": 258419052,
        "sender_full_name": "simulacrum",
        "timestamp": 1634754555
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3d71e749a244890cd370d49963e747cf92f4a037/src/bootstrap/lib.rs#L1214-L1222\">https://github.com/rust-lang/rust/blob/3d71e749a244890cd370d49963e747cf92f4a037/src/bootstrap/lib.rs#L1214-L1222</a></p>",
        "id": 258419102,
        "sender_full_name": "simulacrum",
        "timestamp": 1634754579
    },
    {
        "content": "<p>Ah okay. Does that account for this lifetime lint order problem, though?</p>",
        "id": 258419117,
        "sender_full_name": "pierwill",
        "timestamp": 1634754585
    },
    {
        "content": "<p>Maybe if it's being updated between bootstrapping and test exec?</p>",
        "id": 258419242,
        "sender_full_name": "pierwill",
        "timestamp": 1634754619
    },
    {
        "content": "<p>It feels like including this string into the crate hash <em>shouldn't</em> be good enough: at the very least, that implies bad behavior when building locally with ignore-git=true, which we want to avoid</p>",
        "id": 258419306,
        "sender_full_name": "simulacrum",
        "timestamp": 1634754651
    },
    {
        "content": "<p>I guess this is just aiming for a maybe-we-catch-a-bug fix?</p>",
        "id": 258419448,
        "sender_full_name": "simulacrum",
        "timestamp": 1634754706
    },
    {
        "content": "<p>TBH, I understood <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> 's original issue for this as a <em>security</em> issue</p>",
        "id": 258419571,
        "sender_full_name": "pierwill",
        "timestamp": 1634754747
    },
    {
        "content": "<p>but the main thing this contains is e.g. the -beta or -stable string, not to mention the version number, all of which can change as we produce different rustc binaries</p>",
        "id": 258419577,
        "sender_full_name": "simulacrum",
        "timestamp": 1634754749
    },
    {
        "content": "<p>and so if our test suite relies on that string it's generally painful, we shouldn't</p>",
        "id": 258419626,
        "sender_full_name": "simulacrum",
        "timestamp": 1634754770
    },
    {
        "content": "<p>It is not entirely a security issue. More of a mitigation to prevent potential security issues if someone tries to incorrectly interpose rust dylibs.</p>",
        "id": 258419717,
        "sender_full_name": "bjorn3",
        "timestamp": 1634754805
    },
    {
        "content": "<p>Right, right</p>",
        "id": 258419736,
        "sender_full_name": "pierwill",
        "timestamp": 1634754813
    },
    {
        "content": "<p>I feel like this reduces our reproducibility across different compiler versions, which generally makes e.g. perf work harder and requires normalization in the test suite -- I'm not convinced it's worth the possible benefits</p>",
        "id": 258419953,
        "sender_full_name": "simulacrum",
        "timestamp": 1634754900
    },
    {
        "content": "<p>FWIW I was able to implement some fairly robust normalization of these symbol hashes for mir-opt. Should be able to do the same for ui tests</p>",
        "id": 258420223,
        "sender_full_name": "pierwill",
        "timestamp": 1634754998
    },
    {
        "content": "<p>(Instead of ad hoc approach to ui tests in the PR currently)</p>",
        "id": 258420337,
        "sender_full_name": "pierwill",
        "timestamp": 1634755050
    },
    {
        "content": "<p>This just sounds spooky to me: \"This makes it possible to replace a rust dylib compiled with one version of rustc with one compiled by another version of rustc even if the ABI doesn't match.\" (<a href=\"https://github.com/rust-lang/rust/issues/85142\">https://github.com/rust-lang/rust/issues/85142</a>) <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> <span aria-label=\"ghost\" class=\"emoji emoji-1f47b\" role=\"img\" title=\"ghost\">:ghost:</span></p>",
        "id": 258420926,
        "sender_full_name": "pierwill",
        "timestamp": 1634755274
    },
    {
        "content": "<p>Sure, I don't disagree that it's not <em>great</em>, but it's also only the case if you're manually linking -- rustc itself will look at metadata when loading the dylib and err out</p>",
        "id": 258421571,
        "sender_full_name": "simulacrum",
        "timestamp": 1634755520
    },
    {
        "content": "<p>I don't think it's something we generally try to protect you against, though, beyond pushing people to use extern \"C\" and repr(C) structs for any FFI (even rust&lt;&gt;rust)</p>",
        "id": 258421757,
        "sender_full_name": "simulacrum",
        "timestamp": 1634755588
    },
    {
        "content": "<p>Ah okay, interesting.</p>",
        "id": 258422036,
        "sender_full_name": "pierwill",
        "timestamp": 1634755704
    },
    {
        "content": "<p>in some sense this is no different to linking against C code which changed a function signature and you didn't update your headers</p>",
        "id": 258422169,
        "sender_full_name": "simulacrum",
        "timestamp": 1634755751
    },
    {
        "content": "<p>anyway, if you can fix CI with sufficient normalization, it seems \"OK\". It probably hurts efforts to reuse e.g. PGO data across builds, but most people won't be doing that with different compiler versions anyway.</p>",
        "id": 258422353,
        "sender_full_name": "simulacrum",
        "timestamp": 1634755813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258421571\">said</a>:</p>\n<blockquote>\n<p>Sure, I don't disagree that it's not <em>great</em>, but it's also only the case if you're manually linking -- rustc itself will look at metadata when loading the dylib and err out</p>\n</blockquote>\n<p>Rustc can't look at it when changing the dylib at runtime. That is the case I am worried about.</p>",
        "id": 258422502,
        "sender_full_name": "bjorn3",
        "timestamp": 1634755875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258422353\">said</a>:</p>\n<blockquote>\n<p>anyway, if you can fix CI with sufficient normalization, it seems \"OK\". It probably hurts efforts to reuse e.g. PGO data across builds, but most people won't be doing that with different compiler versions anyway.</p>\n</blockquote>\n<p>Is that even safe in the first place when using different compiler versions? The LLVM version may be different.</p>",
        "id": 258422603,
        "sender_full_name": "bjorn3",
        "timestamp": 1634755913
    },
    {
        "content": "<p>PGO data embeds the version number and isn't LLVM IR, I'm pretty sure it's intended to work well if the version number doesn't bump</p>",
        "id": 258422712,
        "sender_full_name": "simulacrum",
        "timestamp": 1634755945
    },
    {
        "content": "<p>Perhaps there should be a team discussion before I continue to fix the CI issues here?</p>",
        "id": 258422820,
        "sender_full_name": "pierwill",
        "timestamp": 1634755981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258422169\">said</a>:</p>\n<blockquote>\n<p>in some sense this is no different to linking against C code which changed a function signature and you didn't update your headers</p>\n</blockquote>\n<p>That is where my other issue about including a hash of the function signature is about. This issue is about changing the rustc version. People from the C/C++ world may expect this to work as it is allowed just fine with GCC and Clang.</p>",
        "id": 258422877,
        "sender_full_name": "bjorn3",
        "timestamp": 1634755998
    },
    {
        "content": "<blockquote>\n<p>That is where my other issue about including a hash of the function signature is about.</p>\n</blockquote>\n<p>Note that in this case the legacy symbol mangling scheme already does this for the exact reason of being a safety net.</p>",
        "id": 258423066,
        "sender_full_name": "bjorn3",
        "timestamp": 1634756045
    },
    {
        "content": "<p>Right, yeah, hashing function signature seems like a not-terrible idea</p>",
        "id": 258423114,
        "sender_full_name": "simulacrum",
        "timestamp": 1634756061
    },
    {
        "content": "<p>I'd also like to work on that one. I'm assigned at the moment :)</p>",
        "id": 258423183,
        "sender_full_name": "pierwill",
        "timestamp": 1634756088
    },
    {
        "content": "<p>Anyway, I have no real objection, just mild reservations.</p>",
        "id": 258423249,
        "sender_full_name": "simulacrum",
        "timestamp": 1634756110
    },
    {
        "content": "<blockquote>\n<p>I'd also like to work on that one. I'm assigned at the moment :)</p>\n</blockquote>\n<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/issues/87223\">#87223</a> will require a change to the v0 mangling scheme to include the function signature hash. Or maybe it can be included as \"crate disambiguator\" for the function name or something like that?</p>",
        "id": 258424017,
        "sender_full_name": "bjorn3",
        "timestamp": 1634756342
    },
    {
        "content": "<p>wait why do we want that?</p>",
        "id": 258424321,
        "sender_full_name": "eddyb",
        "timestamp": 1634756428
    },
    {
        "content": "<p>is that really useful when most of the details hide behind type names?</p>",
        "id": 258424544,
        "sender_full_name": "eddyb",
        "timestamp": 1634756508
    },
    {
        "content": "<p>To ensure that if someone (eg distro packager) decides to replace a rust dylib with one compiled from a different source there will be less of a risk that the abi doesn't match, but it still seems to work.</p>",
        "id": 258424715,
        "sender_full_name": "bjorn3",
        "timestamp": 1634756562
    },
    {
        "content": "<p>But possibly introduce a crash or worse security vulnerability.</p>",
        "id": 258424814,
        "sender_full_name": "bjorn3",
        "timestamp": 1634756608
    },
    {
        "content": "<p>we decided against this during the RFC...</p>",
        "id": 258424877,
        "sender_full_name": "eddyb",
        "timestamp": 1634756632
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>)</p>",
        "id": 258424888,
        "sender_full_name": "eddyb",
        "timestamp": 1634756636
    },
    {
        "content": "<p>there are so many wrong things here and I don't really have the spare time to dive into it</p>",
        "id": 258425036,
        "sender_full_name": "eddyb",
        "timestamp": 1634756681
    },
    {
        "content": "<p>I can't think of a solution that's not just aesthetic, which isn't \"don't let distros abuse dylibs\"</p>",
        "id": 258425133,
        "sender_full_name": "eddyb",
        "timestamp": 1634756718
    },
    {
        "content": "<p>if the crate disambiguator hash matches, but the source doesn't, then symbol names containing a bit more information won't save you</p>",
        "id": 258425319,
        "sender_full_name": "eddyb",
        "timestamp": 1634756777
    },
    {
        "content": "<blockquote>\n<p>we decided against this during the RFC...</p>\n</blockquote>\n<p>I skimmed the rfc discussion and I saw a reference to including the full signature, but not a signature hash.</p>",
        "id": 258425460,
        "sender_full_name": "bjorn3",
        "timestamp": 1634756831
    },
    {
        "content": "<p>we assume in so many situations that it's an impossible outcode. Cargo and distros have to prevent it, <code>rustc</code> doesn't have enough power (although we could try using SVHs in symbol names, that's the closest thing I think?)</p>",
        "id": 258425463,
        "sender_full_name": "eddyb",
        "timestamp": 1634756833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258425460\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>we decided against this during the RFC...</p>\n</blockquote>\n<p>I skimmed the rfc discussion and I saw a reference to including the full signature, but not a signature hash.</p>\n</blockquote>\n<p>ignoring the cost, my issue with it is the <em>futility</em></p>",
        "id": 258425507,
        "sender_full_name": "eddyb",
        "timestamp": 1634756854
    },
    {
        "content": "<p>you can keep all function signatures unchanged but change type definitions</p>",
        "id": 258425564,
        "sender_full_name": "eddyb",
        "timestamp": 1634756879
    },
    {
        "content": "<p>or some other subtleties</p>",
        "id": 258425826,
        "sender_full_name": "eddyb",
        "timestamp": 1634756983
    },
    {
        "content": "<p>Then the function signature hash needs to include the hash of all referenced type definitions. I understand that can quickly get very expensive though.</p>",
        "id": 258425842,
        "sender_full_name": "bjorn3",
        "timestamp": 1634756990
    },
    {
        "content": "<p>frankly linking against a <code>dylib</code> crate type should somehow embed an SVH at this point</p>",
        "id": 258425948,
        "sender_full_name": "eddyb",
        "timestamp": 1634757021
    },
    {
        "content": "<p>can we (ab)use SOVERSION for this?</p>",
        "id": 258426003,
        "sender_full_name": "eddyb",
        "timestamp": 1634757044
    },
    {
        "content": "<p>it should be rare enough that making it stricter/slightly more expensive is fine as long as it doesn't impact our use of e.g. <code>librustc_driver.so</code></p>",
        "id": 258426086,
        "sender_full_name": "eddyb",
        "timestamp": 1634757081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258425948\">said</a>:</p>\n<blockquote>\n<p>frankly linking against a <code>dylib</code> crate type should somehow embed an SVH at this point</p>\n</blockquote>\n<p>(i.e. my point is that trying to split the information that goes into an SVH, into \"can cause unsoundness\" and \"can't cause unsoundness\" is futile and we should make it illegal to dynamically load the wrong <code>.so</code>)</p>",
        "id": 258426303,
        "sender_full_name": "eddyb",
        "timestamp": 1634757163
    },
    {
        "content": "<p>I guess we should postpone including the function signature hash  until it becomes more important. (eg the mentioned dylib replacements actually happening in practice or if we start to allow replacing dylibs provided that the abi stays the same where the abi includes all the mir of all inline and generic functions)</p>",
        "id": 258426333,
        "sender_full_name": "bjorn3",
        "timestamp": 1634757178
    },
    {
        "content": "<p>I guess we could generate a global constructor that calls a function from the <code>.so</code> with the SVH in its symbol name</p>",
        "id": 258426407,
        "sender_full_name": "eddyb",
        "timestamp": 1634757220
    },
    {
        "content": "<p>the call itself should be cheaper than the dynamic linker's lookup</p>",
        "id": 258426487,
        "sender_full_name": "eddyb",
        "timestamp": 1634757244
    },
    {
        "content": "<p>anything else is a compromise that provides a false sense of security while making unnecessary extra work for legitimate usecases, IMO</p>",
        "id": 258426661,
        "sender_full_name": "eddyb",
        "timestamp": 1634757317
    },
    {
        "content": "<p>That would be an option. Another would be to have each dylib provide a function with the SVH that calls the functions of their dependent dylibs and have the main shim for the executable call the one functions from all dependent dylibs. That won't work if the main function isn't from rust though.</p>",
        "id": 258426864,
        "sender_full_name": "bjorn3",
        "timestamp": 1634757393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258426661\">said</a>:</p>\n<blockquote>\n<p>anything else is a compromise that provides a false sense of security while making unnecessary extra work for legitimate usecases, IMO</p>\n</blockquote>\n<p>yeah, this is basically my worry</p>",
        "id": 258426881,
        "sender_full_name": "simulacrum",
        "timestamp": 1634757398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Have you had a chance to look at <a href=\"https://github.com/rust-lang/rust/pull/89836\">https://github.com/rust-lang/rust/pull/89836</a>?</p>",
        "id": 258426907,
        "sender_full_name": "pierwill",
        "timestamp": 1634757408
    },
    {
        "content": "<p>haven't seen it until now, but the idea at a glance seems solid</p>",
        "id": 258427022,
        "sender_full_name": "eddyb",
        "timestamp": 1634757453
    },
    {
        "content": "<p>I was sad to find that e.g. <code>TypeId</code>s don't always change with compiler version, that would be another thing to look at (unless you've already done so :P)</p>",
        "id": 258427141,
        "sender_full_name": "eddyb",
        "timestamp": 1634757485
    },
    {
        "content": "<p>I would probably go further and make <code>StableHasher</code> itself get seeded by a value computed from e.g. <code>CFG_VERSION</code>, but I'm less familiar with its entire set of usecases</p>",
        "id": 258427347,
        "sender_full_name": "eddyb",
        "timestamp": 1634757553
    },
    {
        "content": "<p><code>TypeId</code> should already change with that PR for user defined types. For primitive types I think it will still be constant.</p>",
        "id": 258427448,
        "sender_full_name": "bjorn3",
        "timestamp": 1634757587
    },
    {
        "content": "<p>yeah I was thinking of primitive types</p>",
        "id": 258427489,
        "sender_full_name": "eddyb",
        "timestamp": 1634757601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258418133\">said</a>:</p>\n<blockquote>\n<p>Does <code>CFG_VERSION</code> contain anything platform-specific?</p>\n</blockquote>\n<p>To return to the mystery ui error, did you have follow-up thoughts here, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> or others?</p>",
        "id": 258433495,
        "sender_full_name": "pierwill",
        "timestamp": 1634759791
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/runs/3941173894#step:25:1695\">https://github.com/rust-lang/rust/runs/3941173894#step:25:1695</a></p>",
        "id": 258433584,
        "sender_full_name": "pierwill",
        "timestamp": 1634759829
    },
    {
        "content": "<p>This single-use-lifetime test is now failing in an unpredictable (to me) way:</p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rust/runs/3959909169#step:25:1658\">https://github.com/rust-lang/rust/runs/3959909169#step:25:1658</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/runs/3965045272#step:25:1628\">https://github.com/rust-lang/rust/runs/3965045272#step:25:1628</a></li>\n</ol>\n<p>Between these two runs I made a tiny change to a test output and rebased to current master. The first past, the second failed.</p>",
        "id": 258556845,
        "sender_full_name": "pierwill",
        "timestamp": 1634827000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  Ah! Maybe we need to somehow use the <code>StableCrateId</code> in this sorting operation? <a href=\"https://github.com/pierwill/rust/blob/c291ec4d0bb6daf52281a0c2304dac0e2d4dc6f8/compiler/rustc_resolve/src/late/lifetimes.rs#L2026\">https://github.com/pierwill/rust/blob/c291ec4d0bb6daf52281a0c2304dac0e2d4dc6f8/compiler/rustc_resolve/src/late/lifetimes.rs#L2026</a></p>",
        "id": 258590112,
        "sender_full_name": "pierwill",
        "timestamp": 1634839076
    },
    {
        "content": "<p>is something like this crazy? </p>\n<div class=\"codehilite\"><pre><span></span><code>        // ensure that we issue lints in a repeatable order\n        def_ids.sort_by_key(|&amp;def_id| {\n            // append stablecrateid to def_path_hash before sorting\n            let fingerprint = self.tcx.def_path_hash(def_id);\n            let c = self.tcx.stable_crate_id(def_id.krate).to_u64;\n            let (a, b) = fingerprint.0.as_value();\n            let sorter = a + b + c;\n            sorter\n        });\n</code></pre></div>",
        "id": 258592540,
        "sender_full_name": "pierwill",
        "timestamp": 1634839960
    },
    {
        "content": "<p>The DefPathHash already includes the StableCrateId. I think that is the actual issue. I think two defid's from different crates are compared and because the StableCrateId changes, their relative order changes.</p>",
        "id": 258593123,
        "sender_full_name": "bjorn3",
        "timestamp": 1634840229
    },
    {
        "content": "<p>Ah. Hm <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 258593342,
        "sender_full_name": "pierwill",
        "timestamp": 1634840325
    },
    {
        "content": "<p>maybe we can use DefPathHash::new with a dummy stable crateid? Is that too much of a hack?</p>",
        "id": 258593725,
        "sender_full_name": "pierwill",
        "timestamp": 1634840481
    },
    {
        "content": "<p><a href=\"https://github.com/pierwill/rust/blob/c291ec4d0bb6daf52281a0c2304dac0e2d4dc6f8/compiler/rustc_span/src/def_id.rs#L117\">https://github.com/pierwill/rust/blob/c291ec4d0bb6daf52281a0c2304dac0e2d4dc6f8/compiler/rustc_span/src/def_id.rs#L117</a></p>",
        "id": 258593763,
        "sender_full_name": "pierwill",
        "timestamp": 1634840493
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\"><pre><span></span><code>        // ensure that we issue lints in a repeatable order\n        def_ids.sort_by_cached_key(|&amp;def_id| {\n            self.tcx.def_path_hash(def_id.as_local().unwrap().to_def_id())\n        });\n</code></pre></div>\n<p>would \"forget\" the stablecrateid?</p>",
        "id": 258595191,
        "sender_full_name": "pierwill",
        "timestamp": 1634841027
    },
    {
        "content": "<blockquote>\n<p>\"forget\" the stablecrateid?</p>\n</blockquote>\n<p>Giving this a try in CI now <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> <a href=\"https://github.com/rust-lang/rust/runs/3967697881?check_suite_focus=true\">https://github.com/rust-lang/rust/runs/3967697881?check_suite_focus=true</a></p>",
        "id": 258596186,
        "sender_full_name": "pierwill",
        "timestamp": 1634841406
    },
    {
        "content": "<p>Looks like the only other <code>sort_by_cached_key</code> of defpathhashes are for traits:</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc_metadata/src/rmeta/encoder.rs\n1791:        all_impls.sort_by_cached_key(|&amp;(trait_def_id, _)| tcx.def_path_hash(trait_def_id));\nrustc_trait_selection/src/traits/object_safety.rs\n571:    associated_types.sort_by_cached_key(|(_, item)| tcx.def_path_hash(item.def_id));\n</code></pre></div>\n<p>Will these be affected by the changing crate hashes?</p>",
        "id": 258597760,
        "sender_full_name": "pierwill",
        "timestamp": 1634842095
    },
    {
        "content": "<p>it worked! <span aria-label=\"champagne\" class=\"emoji emoji-1f37e\" role=\"img\" title=\"champagne\">:champagne:</span>  <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://github.com/rust-lang/rust/runs/3967697881\">https://github.com/rust-lang/rust/runs/3967697881</a></p>",
        "id": 258600961,
        "sender_full_name": "pierwill",
        "timestamp": 1634843465
    },
    {
        "content": "<p>This will cause issues for incr comp if two crates have a definition with the same local part of the defpathhash.</p>",
        "id": 258602186,
        "sender_full_name": "bjorn3",
        "timestamp": 1634844036
    },
    {
        "content": "<p>Oh no!</p>",
        "id": 258602221,
        "sender_full_name": "pierwill",
        "timestamp": 1634844054
    },
    {
        "content": "<p>\"This\" meaning the sorting I did in the lifetime lint?</p>",
        "id": 258602286,
        "sender_full_name": "pierwill",
        "timestamp": 1634844087
    },
    {
        "content": "<p>yes</p>",
        "id": 258602342,
        "sender_full_name": "bjorn3",
        "timestamp": 1634844115
    },
    {
        "content": "<p>Darn. Have any thoughts on other ways to handle this?</p>",
        "id": 258602430,
        "sender_full_name": "pierwill",
        "timestamp": 1634844139
    },
    {
        "content": "<p>There's got to be some sorting logic that will work for this, right?</p>",
        "id": 258602487,
        "sender_full_name": "pierwill",
        "timestamp": 1634844167
    },
    {
        "content": "<p>a bit of a hack, but maybe you could reverse the order in which the fields are compared. that is first compare the local part and if it is equal compare the stablecrateid.</p>",
        "id": 258602506,
        "sender_full_name": "bjorn3",
        "timestamp": 1634844174
    },
    {
        "content": "<p>Ah that doesn't sound too bad, really</p>",
        "id": 258602557,
        "sender_full_name": "pierwill",
        "timestamp": 1634844193
    },
    {
        "content": "<p>Thank you. Will try that</p>",
        "id": 258602641,
        "sender_full_name": "pierwill",
        "timestamp": 1634844230
    },
    {
        "content": "<p>Will this require iterating over the def_ids? Seems like the need to compare means it can't be done just in the closure...</p>",
        "id": 258604606,
        "sender_full_name": "pierwill",
        "timestamp": 1634845051
    },
    {
        "content": "<p>You could use <code>(local_part, stable_crate_id)</code> as return value of the closure.</p>",
        "id": 258605278,
        "sender_full_name": "bjorn3",
        "timestamp": 1634845334
    },
    {
        "content": "<p>Huh, so you can pass tuples to the sort method and it'll do the right thing?</p>",
        "id": 258605657,
        "sender_full_name": "pierwill",
        "timestamp": 1634845526
    },
    {
        "content": "<p>I'm still lost on the logic inside the closure. I'll need two def_ids to compare, right?</p>",
        "id": 258605793,
        "sender_full_name": "pierwill",
        "timestamp": 1634845577
    },
    {
        "content": "<p><code>sort_by_cached_key</code> requires the closure to return the key to sort by. It will then do the key comparisons for you.</p>",
        "id": 258606060,
        "sender_full_name": "bjorn3",
        "timestamp": 1634845703
    },
    {
        "content": "<p>ah i think i see</p>",
        "id": 258606126,
        "sender_full_name": "pierwill",
        "timestamp": 1634845737
    },
    {
        "content": "<p>It's not really that hard. basically:</p>\n<div class=\"codehilite\"><pre><span></span><code>        // ensure that we issue lints in a repeatable order\n        def_ids.sort_by_cached_key(|&amp;def_id| -&gt; (u64 /*local_part*/, StableCrateId) {\n            (self.tcx.def_path_hash(def_id).local_hash(), stablecrateid)\n\n        });\n</code></pre></div>",
        "id": 258606208,
        "sender_full_name": "pierwill",
        "timestamp": 1634845781
    },
    {
        "content": "<p>Pretty much. The stablecrateid is part of the def_path_hash though.</p>",
        "id": 258606380,
        "sender_full_name": "bjorn3",
        "timestamp": 1634845856
    },
    {
        "content": "<p>oh right... there's some other field or method for what i want...</p>",
        "id": 258606437,
        "sender_full_name": "pierwill",
        "timestamp": 1634845884
    },
    {
        "content": "<p><code>def_path_hash.0.as_value()</code> will give you a tuple. The first item is the stabledefid, the second the local part. Swapping both items should do the trick.</p>",
        "id": 258606594,
        "sender_full_name": "bjorn3",
        "timestamp": 1634845952
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    // To ensure that we issue lints in a repeatable order,\n    // we sort the def_ids first by local part, then by crate hash.\n    def_ids.sort_by_cached_key(|&amp;def_id| -&gt; (/*crate_hash*/ u64, /*local_part*/ u64) {\n        let (crate_hash, local_part) = self.tcx.def_path_hash(def_id).0.as_value();\n        (local_part, crate_hash)\n    });\n</code></pre></div>",
        "id": 258606919,
        "sender_full_name": "pierwill",
        "timestamp": 1634846080
    },
    {
        "content": "<p>This doesn't look like it worked :( <a href=\"https://github.com/rust-lang/rust/runs/3968545149\">https://github.com/rust-lang/rust/runs/3968545149</a></p>\n<p>At least, the order of these lifetime lints has changed in my branch vs master. Maybe there's a chance it won't change again? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 258633211,
        "sender_full_name": "pierwill",
        "timestamp": 1634858647
    },
    {
        "content": "<p>Could the defids also be ordered by span????</p>",
        "id": 258637884,
        "sender_full_name": "pierwill",
        "timestamp": 1634861750
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        def_ids.sort_by_cached_key(|&amp;def_id| {\n            let hirid = self.tcx.hir().local_def_id_to_hir_id(def_id.as_local().unwrap());\n            let s = self.tcx.hir().span(hirid);\n            let (crate_hash, local_part) = self.tcx.def_path_hash(def_id).0.as_value();\n            (local_part, crate_hash, s)\n        });\n</code></pre></div>",
        "id": 258638571,
        "sender_full_name": "pierwill",
        "timestamp": 1634862207
    },
    {
        "content": "<p>My next wild guess:</p>\n<div class=\"codehilite\"><pre><span></span><code>        def_ids.sort_by_key(|&amp;def_id| {\n            let hirid = self.tcx.hir().local_def_id_to_hir_id(def_id.as_local().unwrap());\n            let pos = self.tcx.hir().span(hirid).data().lo;\n            let (crate_hash, local_part) = self.tcx.def_path_hash(def_id).0.as_value();\n            (local_part, crate_hash, pos)\n        });\n</code></pre></div>",
        "id": 258640089,
        "sender_full_name": "pierwill",
        "timestamp": 1634863304
    },
    {
        "content": "<p>This is going to break incremental comp, isn't it <span aria-label=\"distraught\" class=\"emoji emoji-1f629\" role=\"img\" title=\"distraught\">:distraught:</span></p>",
        "id": 258640954,
        "sender_full_name": "pierwill",
        "timestamp": 1634863965
    },
    {
        "content": "<p>Update: maybe it'll work after all?</p>",
        "id": 258645316,
        "sender_full_name": "pierwill",
        "timestamp": 1634867058
    },
    {
        "content": "<p><span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 258663775,
        "sender_full_name": "bjorn3",
        "timestamp": 1634879467
    },
    {
        "content": "<p>My idea here <a href=\"https://github.com/rust-lang/rust/pull/89836/commits/291c50db9adb552d8efeba49dfce4b4b64aecd63\">https://github.com/rust-lang/rust/pull/89836/commits/291c50db9adb552d8efeba49dfce4b4b64aecd63</a> was to see if we could simply fall back on the order in which the defsid appear in the source</p>",
        "id": 258708267,
        "sender_full_name": "pierwill",
        "timestamp": 1634907808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20rustc.20version.20to.20crate.20hash/near/258708267\">said</a>:</p>\n<blockquote>\n<p>My idea here <a href=\"https://github.com/rust-lang/rust/pull/89836/commits/291c50db9adb552d8efeba49dfce4b4b64aecd63\">https://github.com/rust-lang/rust/pull/89836/commits/291c50db9adb552d8efeba49dfce4b4b64aecd63</a> was to see if we could simply fall back on the order in which the defids appear in the source</p>\n</blockquote>\n<p>I was thinking that this would make cases <a href=\"https://github.com/pierwill/rust/blob/291c50db9adb552d8efeba49dfce4b4b64aecd63/src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr\">like the one that's been failing</a> be deterministic in the order of lints. I'm naively thinking \"okay, if there are multiple lifetime lints that cannot be sorted by hashes, then let's always print them in the order they appear in the source.\"</p>\n<p>Two questions:</p>\n<ol>\n<li>Am I wrong in thinking that this produces the desired behavior, at least in terms of UI output?</li>\n<li>Are there side-effects that disqualify this approach? (perf, incr comp, etc.)</li>\n</ol>",
        "id": 258736966,
        "sender_full_name": "pierwill",
        "timestamp": 1634920382
    },
    {
        "content": "<p>^ I posted this in the PR as well <a href=\"https://github.com/rust-lang/rust/pull/89836#issuecomment-949815804\">https://github.com/rust-lang/rust/pull/89836#issuecomment-949815804</a></p>",
        "id": 258747315,
        "sender_full_name": "pierwill",
        "timestamp": 1634924838
    }
]