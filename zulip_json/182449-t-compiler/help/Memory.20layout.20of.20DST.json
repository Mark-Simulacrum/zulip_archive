[
    {
        "content": "<p>I'm trying to figure out how to emit DST for a rust verification backend I'm working on.  In particular, what is the memory layout of the a <code>[u8]</code> without the reference (i.e. the <code>Inner.inner</code> field? What is the layout of the <code>Inner</code> class here, what is the layout of <code>&amp;Inner</code> (I assume a fat pointer)? </p>\n<div class=\"codehilite\"><pre><span></span><code>// From rust/library/std/src/sys_common/os_str_bytes.rs\n//      rust/library/std/src/ffi/os_str.rs\n\nuse std::mem;\n\nstruct Inner {\n    pub inner: [u8],\n}\n\nimpl Inner {\n    fn from_u8_slice(s: &amp;[u8]) -&gt; &amp;Inner {\n        unsafe { mem::transmute(s) }\n    }\n}\n\n fn test2() {\n     let inner = Inner::from_u8_slice(b&quot;hi&quot;);\n     assert!(inner.inner[0] == &#39;h&#39; as u8);\n     assert!(inner.inner[1] == &#39;i&#39; as u8);\n }\n\nfn main() {\n    test1();\n    test2();\n}\n\nfn test1() {\n    let inner = Inner::from_u8_slice(b&quot;hi&quot;);\n    let b = &amp;inner.inner;\n    assert!(b[0] == &#39;h&#39; as u8);\n    assert!(b[1] == &#39;h&#39; as u8);\n}\n</code></pre></div>",
        "id": 230362689,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615821605
    },
    {
        "content": "<p>[u8] would be just a list of bytes where the value is placed.</p>",
        "id": 230362961,
        "sender_full_name": "nagisa",
        "timestamp": 1615821709
    },
    {
        "content": "<p>&amp;Inner is a fat pointer, yes.</p>",
        "id": 230363091,
        "sender_full_name": "nagisa",
        "timestamp": 1615821738
    },
    {
        "content": "<p>So in C terms, </p>\n<div class=\"codehilite\"><pre><span></span><code>struct Inner {\n  uint8_t* inner;\n};\n</code></pre></div>",
        "id": 230363241,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615821789
    },
    {
        "content": "<p>And to abuse C syntax:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct &amp;Inner {\n    struct Inner inner,\n   size_t size\n};\n</code></pre></div>",
        "id": 230363333,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615821831
    },
    {
        "content": "<p>Is that correct?</p>",
        "id": 230363346,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615821839
    },
    {
        "content": "<p>not really, its a </p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Inner</span> <span class=\"p\">{</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">inner</span><span class=\"p\">[</span><span class=\"n\">UNKNOWN</span><span class=\"p\">];</span> <span class=\"c1\">// if I remember my C right</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and <code>&amp;Inner</code> is a </p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"o\">&amp;</span><span class=\"n\">Inner</span> <span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"nc\">Inner</span><span class=\"o\">*</span> <span class=\"n\">buffer</span><span class=\"p\">;</span>\n    <span class=\"kt\">size_t</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 230363627,
        "sender_full_name": "nagisa",
        "timestamp": 1615821941
    },
    {
        "content": "<p>Ahh ...</p>",
        "id": 230363766,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615821985
    },
    {
        "content": "<p>And if I had more than one field? </p>\n<div class=\"codehilite\"><pre><span></span><code>struct Inner {\n    pub foo: i16,\n    pub inner: [u8],\n}\n</code></pre></div>",
        "id": 230363980,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615822082
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Inner</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int64_t</span> <span class=\"n\">foo</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">inner</span><span class=\"p\">[</span><span class=\"n\">UNKNOWN</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 230364220,
        "sender_full_name": "bjorn3",
        "timestamp": 1615822168
    },
    {
        "content": "<p>And the size field in the fat pointer would be the size of the known fields of <code>Inner</code> + the size of the slice at the end?</p>",
        "id": 230364347,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615822207
    },
    {
        "content": "<p>No, the size field in the fat pointer only counts the amount of elements in <code>[u8]</code>.</p>",
        "id": 230364407,
        "sender_full_name": "bjorn3",
        "timestamp": 1615822230
    },
    {
        "content": "<p>Then the allocator does the addition when doing an allocation?</p>",
        "id": 230364521,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615822271
    },
    {
        "content": "<p>No, <code>std::mem::size_of_val</code> does this addition.</p>",
        "id": 230364733,
        "sender_full_name": "bjorn3",
        "timestamp": 1615822349
    },
    {
        "content": "<p>ahh, ok</p>",
        "id": 230364791,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615822377
    },
    {
        "content": "<p>I'm going to go implement this, I may have further questions this afternoon. Thanks for the help!</p>",
        "id": 230364877,
        "sender_full_name": "Daniel Schwartz-Narbonne",
        "timestamp": 1615822398
    },
    {
        "content": "<p>actually C can have arrays without explicit size inside structs</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Inner</span> <span class=\"p\">{</span>\n  <span class=\"kt\">uint8_t</span> <span class=\"n\">inner</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and it is actually safer to do that, because these arrays must reside at the end of struct</p>",
        "id": 230417251,
        "sender_full_name": "Soveu",
        "timestamp": 1615841926
    },
    {
        "content": "<p>yeah, I wasn't sure if C represents that as a pointer or as a value, so went for the safe option to demonstrate my point.</p>",
        "id": 230420626,
        "sender_full_name": "nagisa",
        "timestamp": 1615843269
    },
    {
        "content": "<p>Its been ages since I last wrote any serious C ^^</p>",
        "id": 230420659,
        "sender_full_name": "nagisa",
        "timestamp": 1615843286
    },
    {
        "content": "<p>Yeah, C likes to cast arrays to pointers</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">void</span> <span class=\"nf\">takes_pointer_in_reality</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">takes_pointer_in_reality2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 230534820,
        "sender_full_name": "Soveu",
        "timestamp": 1615909108
    },
    {
        "content": "<p>but</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Array</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">takes_array</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">Array</span> <span class=\"n\">arr</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n</code></pre></div>",
        "id": 230535150,
        "sender_full_name": "Soveu",
        "timestamp": 1615909221
    }
]