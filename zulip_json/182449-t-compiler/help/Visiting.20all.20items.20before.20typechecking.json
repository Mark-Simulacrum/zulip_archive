[
    {
        "content": "<p>I am trying to write a visitor that will output the spans of all items in a crate. For efficiency, I'm trying to do this before reaching typechecking. My first attempt was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">after_parsing</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">compiler</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">rustc_interface</span>::<span class=\"n\">interface</span>::<span class=\"n\">Compiler</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">queries</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">rustc_interface</span>::<span class=\"n\">Queries</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">rustc_driver</span>::<span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">queries</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">take</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">finder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FindBodies</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">finder</span><span class=\"p\">.</span><span class=\"n\">visit_crate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">krate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">rustc_driver</span>::<span class=\"n\">Compilation</span>::<span class=\"n\">Stop</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Where <code>FindBodies</code> is an <code>ast::Visit</code> visitor. However, the issue is (I believe) that until <code>rustc_resolve</code> is run, this crate only includes <code>src/lib.rs</code> and not the other modules in the crate.</p>\n<p>Is there a way to visit <code>Crate</code> after all modules have been resolved? I couldn't figure out if this is possible just from the <code>Resolver</code> documentation.</p>",
        "id": 272439269,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645209078
    },
    {
        "content": "<p>You can use a HIR ItemLikeVisitor, and use <code>tcx.hir().visit_all_item_likes</code>.  You can see how it's used in <code>rustc_passes</code>.</p>",
        "id": 272441816,
        "sender_full_name": "cjgillot",
        "timestamp": 1645210362
    },
    {
        "content": "<p>I can't do that since I'm trying to accomplish this task before the <code>TyCtxt</code> is constructed. In some of my benchmarking, it can take ~3s on crates just to access <code>tcx</code>, while parsing is much faster.</p>",
        "id": 272443756,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645211299
    },
    {
        "content": "<p>As an addendum: I've determined that I can at least get the spans for all items like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resolver</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">queries</span><span class=\"p\">.</span><span class=\"n\">expansion</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">take</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ResolverOutputs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">BoxedResolver</span>::<span class=\"n\">to_resolver_outputs</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">spans</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">iter_local_def_id</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">def_id</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">definitions</span><span class=\"p\">.</span><span class=\"n\">def_span</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But I'm not sure how to filter the <code>LocalDefId</code> by its AST kind.</p>",
        "id": 272445827,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645212366
    }
]