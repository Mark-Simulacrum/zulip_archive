[
    {
        "content": "<p>Currently object safety precludes generic methods, the check in the code in <a href=\"http://object_safety.rs\">object_safety.rs</a> is commented with:<br>\n    // We can't monomorphize things like <code>fn foo&lt;A&gt;(...)</code>.</p>\n<p>Why is that?</p>\n<p>While it's clear why referring to erased concrete types like Self precludes a method from being called through a vtable implementation, it's not quite clear why the compiler can't monomorphize generic trait methods based on all the calls found in the compiled code like monomorphizing simple generic functions, and populating all the vtables of the types implementing the trait with all the monomorphized implementations.</p>\n<p>What am I missing here?</p>",
        "id": 226129728,
        "sender_full_name": "Ze'ev Maor",
        "timestamp": 1613132441
    },
    {
        "content": "<p>\"all the calls\" mixed poorly with separate compilation, and doesn't work at all for anything that can do runtime code loading.</p>",
        "id": 226171213,
        "sender_full_name": "scottmcm",
        "timestamp": 1613151937
    },
    {
        "content": "<p>It could perhaps be done for all the calls in a crate, but at that point one can also just manually put a method for each type on the trait.</p>",
        "id": 226171674,
        "sender_full_name": "scottmcm",
        "timestamp": 1613152063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Both of these arguments would apply to simple (non-trait) generic functions as well wouldn't they?</p>",
        "id": 226193918,
        "sender_full_name": "Ze'ev Maor",
        "timestamp": 1613162842
    }
]