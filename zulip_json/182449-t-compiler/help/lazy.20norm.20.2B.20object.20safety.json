[
    {
        "content": "<p>Working on <a href=\"https://github.com/rust-lang/rust/issues/72219\">#72219</a> part 1: Object safety interactions with constants</p>\n<p>I managed to find a way to use the currently missing object safety check to achieve greatness (aka segfaults) <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_type_id, core_intrinsics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">type_id</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">type_id</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Const</span><span class=\"p\">([</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">type_id</span>::<span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">7</span><span class=\"k\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// A is not object safe, as the return type of `foo` depends on `Self`.</span>\n<span class=\"w\">    </span><span class=\"c1\">// This is unsound.</span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198260641,
        "sender_full_name": "lcnr",
        "timestamp": 1590010807
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> on how to actually check unevaluated consts for object safety violations.</p>",
        "id": 198260676,
        "sender_full_name": "lcnr",
        "timestamp": 1590010843
    },
    {
        "content": "<p>Do we want to walk the MIR of the const argument to check if it uses self?</p>",
        "id": 198260795,
        "sender_full_name": "lcnr",
        "timestamp": 1590010922
    },
    {
        "content": "<p>Thinking about this a bit more, I am not completely sure if this is well formed <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span><br>\nSo this test may stop relying on object safety checking once <a href=\"https://github.com/rust-lang/rust/pull/70107\">https://github.com/rust-lang/rust/pull/70107</a> is merged.</p>",
        "id": 198262569,
        "sender_full_name": "lcnr",
        "timestamp": 1590012066
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 198302394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590053902
    },
    {
        "content": "<p>So my <em>assumption</em>, which I realize now was flawed or at least non-obvious, is that we would want to limit references to <code>Self</code> by constants apart from something like <code>&lt;Self as Trait&lt;..&gt;&gt;::Constant</code></p>",
        "id": 198302429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590053944
    },
    {
        "content": "<p>But I realize that -- at least with our current setup -- we don't have visibility into that, or at least we'd have to inspect the MIR or something</p>",
        "id": 198302446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590053963
    },
    {
        "content": "<p>Which I guess is your point</p>",
        "id": 198302457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590053972
    },
    {
        "content": "<p>Welp <em>that's</em> going to be annoying</p>",
        "id": 198302464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590053983
    },
    {
        "content": "<p>Would it be possible to only mention needed subst of <code>ConstKind::Unevaluated</code> during construction,<br>\nso instead of identity substs in <a href=\"https://github.com/rust-lang/rust/blob/06c9fef822b890054fcefa9a567b57eb6edfe638/src/librustc_middle/ty/sty.rs#L2273\">https://github.com/rust-lang/rust/blob/06c9fef822b890054fcefa9a567b57eb6edfe638/src/librustc_middle/ty/sty.rs#L2273</a> we try to only add actually used params?</p>",
        "id": 198345963,
        "sender_full_name": "lcnr",
        "timestamp": 1590079892
    },
    {
        "content": "<p>This would also allow me to fix <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/substs.20of.20Unevaluated.20consts/near/198163517\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/substs.20of.20Unevaluated.20consts/near/198163517</a> by simply checking for cycles in generalize/equate.</p>",
        "id": 198346058,
        "sender_full_name": "lcnr",
        "timestamp": 1590079925
    },
    {
        "content": "<p>This would mean that the object safety check is slightly conservative, but tbh I feel fine with that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 198346172,
        "sender_full_name": "lcnr",
        "timestamp": 1590079996
    },
    {
        "content": "<p>that would certainly solve various problems</p>",
        "id": 198355754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590084540
    },
    {
        "content": "<p>it seems like it should be possible</p>",
        "id": 198355758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590084544
    },
    {
        "content": "<p>at minimum we could special case \"simple\" constants like <code>22</code></p>",
        "id": 198355778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590084554
    },
    {
        "content": "<p>and/or path-based constants like <code>X</code> or <code>T::Foo</code></p>",
        "id": 198355799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590084570
    },
    {
        "content": "<p>(Do those require <code>{...}</code> syntax?)</p>",
        "id": 198355809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590084576
    },
    {
        "content": "<p>Paths do require braces unless they are only 1 segment and not in the type namespace.</p>",
        "id": 198356850,
        "sender_full_name": "lcnr",
        "timestamp": 1590085094
    },
    {
        "content": "<blockquote>\n<p>at minimum we could special case \"simple\" constants like 22</p>\n</blockquote>\n<p>We already do <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>, which is why <code>7</code> sometimes works where <code>{ 7 }</code> doesn't.</p>",
        "id": 198356913,
        "sender_full_name": "lcnr",
        "timestamp": 1590085130
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/06c9fef822b890054fcefa9a567b57eb6edfe638/src/librustc_middle/ty/sty.rs#L2241\">https://github.com/rust-lang/rust/blob/06c9fef822b890054fcefa9a567b57eb6edfe638/src/librustc_middle/ty/sty.rs#L2241</a></p>",
        "id": 198356965,
        "sender_full_name": "lcnr",
        "timestamp": 1590085158
    },
    {
        "content": "<p>I don't think braces are problematic, as we can just unwrap them in <code>Const::from_anon_const</code>.</p>",
        "id": 198357134,
        "sender_full_name": "lcnr",
        "timestamp": 1590085225
    },
    {
        "content": "<p>Afaict we have to minimize substs using <code>Hir</code>, as <code>optimized_mir</code> probably causes cycle errors here</p>",
        "id": 198357405,
        "sender_full_name": "lcnr",
        "timestamp": 1590085370
    },
    {
        "content": "<p>A good thing is that afaik consts can only depend on generic params if they explicitly mention them, so this may be implementable using a rather simple hir Visitor</p>",
        "id": 198357567,
        "sender_full_name": "lcnr",
        "timestamp": 1590085444
    },
    {
        "content": "<p>^ I would like some confirmation for the last point so I don't miss some strange edge case which breaks this approach after it's already in use</p>",
        "id": 198358119,
        "sender_full_name": "lcnr",
        "timestamp": 1590085790
    },
    {
        "content": "<p>Simply discarding irrelevant substs does not work, as we currently use indexing in a bunch of places, not sure how much we rely on this though,<br>\nas ICE tend to stop any further execution <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 198474804,
        "sender_full_name": "lcnr",
        "timestamp": 1590170752
    },
    {
        "content": "<p>Two possible ways I can think of are to either update the <code>generics_of</code> query for AnonConst.</p>",
        "id": 198475087,
        "sender_full_name": "lcnr",
        "timestamp": 1590170915
    },
    {
        "content": "<p>I am not sure how well this would work,. We rely on <code>Generics.parent</code> for relevant parameters which we have to stop doing as consts may only depend on some of the defined params.</p>",
        "id": 198475425,
        "sender_full_name": "lcnr",
        "timestamp": 1590171127
    },
    {
        "content": "<p>The other option would be to use a bunch of duct tape everywhere substs are used. This seems like a horrible idea though<br>\n(edit: this is slightly too negative, I don't yet know how complicated this would be)</p>",
        "id": 198475623,
        "sender_full_name": "lcnr",
        "timestamp": 1590171247
    },
    {
        "content": "<p>Note that while object safety can be fixed without touching substs, I don't think there is a different solution which allows us to fix  <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/substs.20of.20Unevaluated.20consts/near/198163517\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/substs.20of.20Unevaluated.20consts/near/198163517</a></p>",
        "id": 198476119,
        "sender_full_name": "lcnr",
        "timestamp": 1590171506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'll try to schedule some time to get back to you on this, I feel like I need to sit down and think a bit about it</p>",
        "id": 198493507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590180684
    },
    {
        "content": "<p>might be useful to find some time to talk about it together</p>",
        "id": 198493527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590180698
    },
    {
        "content": "<p>I only have a few weekly lectures and can spend the rest of my time fairly liberally atm. It should be fairly<br>\neasy to find a date which works for me.</p>",
        "id": 198500725,
        "sender_full_name": "lcnr",
        "timestamp": 1590185529
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>. Is this still on your radar?</p>",
        "id": 199086328,
        "sender_full_name": "lcnr",
        "timestamp": 1590699786
    },
    {
        "content": "<p>/me checks Niko's radar <a href=\"/user_uploads/4715/U6bHNrsRgbbwyq-eU4VPLfhB/radar.jpeg\">radar.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/U6bHNrsRgbbwyq-eU4VPLfhB/radar.jpeg\" title=\"radar.jpeg\"><img src=\"/user_uploads/4715/U6bHNrsRgbbwyq-eU4VPLfhB/radar.jpeg\"></a></div>",
        "id": 199093291,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704388
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 199093374,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704423
    }
]