[
    {
        "content": "<p>I have a <code>rustc_hir::Expr</code> and would like to obtain the generics of a function (I'm matching on <code>hir::ExprKind::Call</code>). How can I do this? I am able to obtain the path of the function, but there's no method to get the generics from that.</p>",
        "id": 245758664,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626129202
    },
    {
        "content": "<p>^ ideally this would include inferred generics, but I'm pretty sure that's the case</p>",
        "id": 245758777,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626129295
    },
    {
        "content": "<p>i think you need to resolve the path to a <code>DefId</code></p>",
        "id": 245759578,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626129896
    },
    {
        "content": "<p>I have a <code>DefId</code> already, but don't see a way to get the generics from it.</p>",
        "id": 245759636,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626129962
    },
    {
        "content": "<p>possibly <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.get_generics\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.get_generics</a> but that's going to be <code>hir::Generics</code>, which might not contain everything you need</p>",
        "id": 245759735,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626130023
    },
    {
        "content": "<p>Not sure how I'd get the <code>Map</code> to begin with.</p>",
        "id": 245760033,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626130297
    },
    {
        "content": "<p>Although I guess I can manually construct it</p>",
        "id": 245760188,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626130402
    },
    {
        "content": "<p>maybe try the <code>generics_of</code> query</p>",
        "id": 245760207,
        "sender_full_name": "lqd",
        "timestamp": 1626130430
    },
    {
        "content": "<p>the <code>Map</code> typically comes from <code>tcx.hir()</code>, and i'm not remembering off the top of my head how to get a <code>tcx</code> if you're not already in a part of the compiler where you have one around</p>",
        "id": 245760483,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626130673
    },
    {
        "content": "<p>The <code>tcx.hir()</code> is what I was looking for I think. <code>generics_of</code> doesn't look like it gives me a way to get the concrete type, whereas the map lets me get a <code>GenericParam</code>.</p>",
        "id": 245760740,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626130852
    },
    {
        "content": "<p><code>generics_of</code> gets you a <code>ty::Generics</code>; <code>get_generics</code> gets you a <code>hir::Generics</code>; they're useful for different things. like a <code>hir::Generics</code> will have the parsed trait bounds and <code>where</code> clauses</p>",
        "id": 245761134,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626131105
    },
    {
        "content": "<p>Ultimately what I'm trying to do is check if a generic in <code>transmute</code> is a pointer, integer, or neither. This is in a method call, so <code>where</code> clauses aren't needed.</p>",
        "id": 245761262,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626131199
    },
    {
        "content": "<p>oh, so you want the substituted generics?</p>",
        "id": 245761318,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626131246
    },
    {
        "content": "<p>Whatever the final type resolves to. Whether it's inferred or not shouldn't matter â€” that is my end goal.</p>",
        "id": 245761359,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626131282
    },
    {
        "content": "<p>Best to be clear to avoid an XY problem.</p>",
        "id": 245761403,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626131290
    },
    {
        "content": "<p>So for <code>transmute::&lt;*const T, U&gt;(foo)</code>, I would like to get the <code>*const T</code> and <code>U</code> out, even if inferred.</p>",
        "id": 245761443,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626131330
    },
    {
        "content": "<p>it sounds like you might be asking for concrete types, which you might not get until after type checking?</p>",
        "id": 245762637,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626132269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/213817-t-lang/topic/Stabilize.20const_fn_transmute.2C.20const_fn_union/near/245723465\">said</a>:</p>\n<blockquote>\n<p>yes, it works on HIR which is fully typed</p>\n</blockquote>\n<p>I'm adding a lint in the <code>rustc_lints</code> crate if that makes a difference, which works on HIR. Ralf says that is typed, and that appears to be the case from my extremely limited purview into it.</p>",
        "id": 245762949,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626132522
    },
    {
        "content": "<p>so in a function call to a generic function where the call site includes generic type arguments, that's going to be part of the <code>hir::Path</code>, which you probably already have? like there's a <code>hir::PathSegment::args()</code></p>",
        "id": 245763208,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626132739
    },
    {
        "content": "<p>Would that include inferred generics?</p>",
        "id": 245763481,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626133005
    },
    {
        "content": "<p>i think it wouldn't; HIR tends to be pretty close to the program text. some type information might get resolved, but only by mapping paths to <code>DefId</code>s, i think?</p>",
        "id": 245763606,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626133096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^^ if you have further knowledge? You also know exactly what I'm trying to do</p>",
        "id": 245763632,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626133144
    },
    {
        "content": "<p>i've mostly dealt with the HIR when working on error reporting stuff. it looks like THIR might have fully resolved type information after type checking? i haven't worked with it yet though</p>",
        "id": 245763668,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626133186
    },
    {
        "content": "<p>Nor have I, hence my confusion.</p>",
        "id": 245763726,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626133212
    },
    {
        "content": "<p>oh, it looks like there's a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html#method.maybe_typeck_results\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html#method.maybe_typeck_results</a> that might give you access to type checking results, which i assume would include resolved types at a function call site</p>",
        "id": 245765197,
        "sender_full_name": "Taylor Yu [they/she]",
        "timestamp": 1626134775
    },
    {
        "content": "<p>I'll check that out once I'm back on my laptop</p>",
        "id": 245765378,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626134990
    },
    {
        "content": "<p>Not sure how I missed that given it's <em>literally</em> a parameter to the method I'm implementing. That's what I was looking for, though. Specifically the <code>.node_type()</code> method. Thank you!</p>",
        "id": 245779570,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626152212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> has marked this topic as resolved.</p>",
        "id": 245779572,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626152216
    },
    {
        "content": "<p>Well...<em>that</em> will likely work, but getting the generic parameters is now my issue. I tried</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">generic_params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">get_generics</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"`transmute` has generic parameters\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to no avail, as the map returned only considers the literal syntax used.</p>",
        "id": 245787456,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626161251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> has marked this topic as unresolved.</p>",
        "id": 245787458,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626161253
    },
    {
        "content": "<p>so now I just need assistance getting the <em>inferred</em> type during a lint in <code>rustc_lints</code></p>",
        "id": 245787519,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626161289
    },
    {
        "content": "<p>Turns out this whole time the solution was sitting in the same file <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> ah well lol</p>",
        "id": 245791461,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626164157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> this all sounds way too complicated</p>",
        "id": 245792420,
        "sender_full_name": "RalfJ",
        "timestamp": 1626164772
    },
    {
        "content": "<p>there are various <code>ty</code> methods you can call to get a <code>Ty</code>, and that should be all</p>",
        "id": 245792450,
        "sender_full_name": "RalfJ",
        "timestamp": 1626164790
    },
    {
        "content": "<p>Oh it was. I was looking through some other code and found another lint that already handles transmute</p>",
        "id": 245792454,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626164793
    },
    {
        "content": "<p>if you interact explicitly with generics I think that's the wrong way</p>",
        "id": 245792471,
        "sender_full_name": "RalfJ",
        "timestamp": 1626164807
    },
    {
        "content": "<p>It's the <code>get_transmute_from_to</code> method. Once I have that it's stupidly simple</p>",
        "id": 245792477,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626164812
    },
    {
        "content": "<p>Needless to say I've never done this before</p>",
        "id": 245792505,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626164830
    },
    {
        "content": "<p>ah I see -- yes <code>get_transmute_from_to</code> is also a way. I would have reached for the types of various terms (argument, whole call) but either way is fine. :)</p>",
        "id": 245792618,
        "sender_full_name": "RalfJ",
        "timestamp": 1626164895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/obtain.20generics.20of.20function.20in.20rustc_hir.3A.3AExpr/near/245792505\">said</a>:</p>\n<blockquote>\n<p>Needless to say I've never done this before</p>\n</blockquote>\n<p>yeah, I also rarely work on the HIR so each time I do I need to go find some other code and copy-paste what it does^^</p>",
        "id": 245792650,
        "sender_full_name": "RalfJ",
        "timestamp": 1626164918
    },
    {
        "content": "<p>the rustc API docs are also extremely helpful, e.g. <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Expr.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/struct.Expr.html</a></p>",
        "id": 245792686,
        "sender_full_name": "RalfJ",
        "timestamp": 1626164940
    },
    {
        "content": "<p>The problem is that presumes I know what I'm doing <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 245792723,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626164965
    },
    {
        "content": "<p>When you're clueless docs only help so much</p>",
        "id": 245792739,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626164975
    },
    {
        "content": "<p>So the lint I've got implemented (successfully!) checks for <code>transmute</code> from either a pointer or reference to any int/uint/float. I should also be able to do this for <code>as</code> casts, which should be quite simple <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span> Union accesses, that's someone else's problem more than likely</p>",
        "id": 245793047,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626165142
    },
    {
        "content": "<p>One question regarding the lint, though. Are ptrâ†’int transmutes/casts only UB in const contexts or are they always UB?</p>",
        "id": 245795314,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626166525
    },
    {
        "content": "<p>It is not quite clear at the moment. They may always be UB or they may not be.</p>",
        "id": 245795783,
        "sender_full_name": "bjorn3",
        "timestamp": 1626166808
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/286\">https://github.com/rust-lang/unsafe-code-guidelines/issues/286</a></p>",
        "id": 245795859,
        "sender_full_name": "bjorn3",
        "timestamp": 1626166836
    },
    {
        "content": "<p>Yeah, I skimmed over the issue and could not come to a conclusion. I guess I'll leave the lint more stringent with a note that it's not exactly clear</p>",
        "id": 245795982,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626166913
    },
    {
        "content": "<p>such <code>as</code> casts as forbidden</p>",
        "id": 245857250,
        "sender_full_name": "RalfJ",
        "timestamp": 1626196677
    },
    {
        "content": "<p>so also linting them would be confusing I think^^</p>",
        "id": 245857311,
        "sender_full_name": "RalfJ",
        "timestamp": 1626196693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/obtain.20generics.20of.20function.20in.20rustc_hir.3A.3AExpr/near/245795314\">said</a>:</p>\n<blockquote>\n<p>One question regarding the lint, though. Are ptrâ†’int transmutes/casts only UB in const contexts or are they always UB?</p>\n</blockquote>\n<p>only in consts, for now</p>",
        "id": 245857328,
        "sender_full_name": "RalfJ",
        "timestamp": 1626196701
    },
    {
        "content": "<p>let's not stress out people about the non-const case until we are sure we have to^^</p>",
        "id": 245857348,
        "sender_full_name": "RalfJ",
        "timestamp": 1626196712
    }
]