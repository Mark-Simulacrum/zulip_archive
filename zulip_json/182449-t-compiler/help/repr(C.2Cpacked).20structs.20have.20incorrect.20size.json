[
    {
        "content": "<p><code>size_of::&lt;Foo&gt;()</code> for the struct below returns 12:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C,packed(4))]\nstruct Foo {\n    a: u16,\n    b: u32,\n    c: u16,\n}\n</code></pre></div>\n<p>But gcc's sizeof for the c version of the struct returns 8 (<a href=\"https://godbolt.org/z/zrjqYe\">https://godbolt.org/z/zrjqYe</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code>struct foo {\n    uint16_t a;\n    uint32_t b;\n    uint16_t c;\n} __attribute__((packed));\n\nint32_t blub(struct foo *bar) {\n    return sizeof(struct foo);\n}\n</code></pre></div>\n<p>Did I misunderstand the semantics of Rust's C and packed reprs, or is this a rustc bug? After investigating writes of the struct it seems that rustc pads the first u16 to 32bit, I guess because it tries to align the u32 despite the packed annotation.</p>",
        "id": 228588903,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614777442
    },
    {
        "content": "<p>or is the 4 supposed to say \"every member is aligned to a 4 byte boundary\"?</p>",
        "id": 228589321,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614777634
    },
    {
        "content": "<p><code>packed</code> can only lower the alignment, if its larger than the fields' alignment, then its a no-op. (as per <a href=\"https://doc.rust-lang.org/stable/reference/type-layout.html#the-alignment-modifiers\">https://doc.rust-lang.org/stable/reference/type-layout.html#the-alignment-modifiers</a>)</p>",
        "id": 228590208,
        "sender_full_name": "nagisa",
        "timestamp": 1614778074
    },
    {
        "content": "<p>so your original type's alignment is 4, you asked to lower it to 4, so its laid out as if there was no packed attribute in the first place.</p>",
        "id": 228590306,
        "sender_full_name": "nagisa",
        "timestamp": 1614778102
    },
    {
        "content": "<p>so packed(4) says \"lower the alignment of all members to 4\"?</p>",
        "id": 228590379,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614778145
    },
    {
        "content": "<p>Lower the alignment of the type and its fields to 4, yes.</p>",
        "id": 228590440,
        "sender_full_name": "nagisa",
        "timestamp": 1614778175
    },
    {
        "content": "<p>Shouldn't this print 12 then?</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(packed(4))]\nstruct Foo {\n    a: u16,\n    b: u32,\n    c: u16,\n}\n\nfn main() {\n    println!(&quot;sizeof::&lt;Foo&gt;={}&quot;, size_of::&lt;Foo&gt;());\n}\n</code></pre></div>",
        "id": 228590516,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614778203
    },
    {
        "content": "<p>So that's using <code>repr(Rust)</code> which does not guarantee any field ordering in particular – you're seeing a field order optimization going on.</p>",
        "id": 228590663,
        "sender_full_name": "nagisa",
        "timestamp": 1614778251
    },
    {
        "content": "<p>ah so a and c are put next to each other, so reads to them will be properly aligned</p>",
        "id": 228590756,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614778291
    },
    {
        "content": "<p>So in practice you have a <code>(u32, u16, u16)</code> not <code>(u16, padding, u32, u16, padding)</code></p>",
        "id": 228590764,
        "sender_full_name": "nagisa",
        "timestamp": 1614778295
    },
    {
        "content": "<p>yeah.</p>",
        "id": 228590787,
        "sender_full_name": "nagisa",
        "timestamp": 1614778306
    },
    {
        "content": "<p>Is the \"lower the alignment of the type and its fields to 4\" behaviour documented anywhere?</p>",
        "id": 228590920,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614778343
    },
    {
        "content": "<p>If you specify <code>repr(C, packed(2))</code> that will reduce the alignment of <code>b</code> field to <code>2</code> and the structure then will fit into 8 bytes as well.</p>",
        "id": 228590922,
        "sender_full_name": "nagisa",
        "timestamp": 1614778345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394290\">Benedikt Radtke</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/repr(C.2Cpacked).20structs.20have.20incorrect.20size/near/228590920\">said</a>:</p>\n<blockquote>\n<p>Is the \"lower the alignment of the type and its fields to 4\" behaviour documented anywhere?</p>\n</blockquote>\n<p>I linked to the relevant section of the reference in an earlier message. Its documented there.</p>",
        "id": 228590982,
        "sender_full_name": "nagisa",
        "timestamp": 1614778373
    },
    {
        "content": "<p>Specifically this paragraph: </p>\n<blockquote>\n<p>For packed, if the specified alignment is greater than the type's alignment without the packed modifier, then the alignment and layout is unaffected. The alignments of each field, for the purpose of positioning fields, is the smaller of the specified alignment and the alignment of the field's type.</p>\n</blockquote>",
        "id": 228591061,
        "sender_full_name": "nagisa",
        "timestamp": 1614778395
    },
    {
        "content": "<p>Ah I have read that paragraph wrong, thanks for the heads-up!</p>",
        "id": 228591350,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614778513
    },
    {
        "content": "<p>Unfortunately, using <code>repr(C, packed(2))</code> causes rustc to emit 2byte-reads for all members in the struct, even if the member is wider and properly aligned. Is there a way around that?</p>",
        "id": 228592159,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614778842
    },
    {
        "content": "<p>Why do you say its properly aligned? Field <code>b</code> can't possibly be aligned to its natural alignment if its alignment has been lowered.</p>",
        "id": 228592624,
        "sender_full_name": "nagisa",
        "timestamp": 1614779023
    },
    {
        "content": "<p>Well, it can at runtime happen to be aligned to 4, 8 or whatever larger alignment, but it can also happen to fall on an address that happens to be aligned to only 2. the only way to check it would be to add branches, wouldn't it?</p>",
        "id": 228592938,
        "sender_full_name": "nagisa",
        "timestamp": 1614779143
    },
    {
        "content": "<p>My sample struct's u32 is not properly aligned, but there are structs that are, let's consider</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Bar {\n    a: u16,\n    b: u16,\n    c: u32,\n}\n</code></pre></div>\n<p>gcc's packed attribute would make it assume that Bar is always 4-byte aligned, and use a 4-byte read for the member c, unless I explicitly specify <code>-mno-unaligned-access</code></p>",
        "id": 228593384,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614779287
    },
    {
        "content": "<p>So it chooses to generate an unaligned load rather than assuming (or computing) that <code>c</code> is aligned to 4.</p>",
        "id": 228593787,
        "sender_full_name": "nagisa",
        "timestamp": 1614779429
    },
    {
        "content": "<p>Whether the codegen will emit an unaligned load (on architectures where this is permitted) or not depends entirely on its implementation and cost models.</p>",
        "id": 228593900,
        "sender_full_name": "nagisa",
        "timestamp": 1614779473
    },
    {
        "content": "<p>it generates a load that assumes the alignment is proper, yeah</p>",
        "id": 228593981,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614779515
    },
    {
        "content": "<p>I would suggest testing this on architectures where unaligned loads are not transparently handled.</p>",
        "id": 228594259,
        "sender_full_name": "nagisa",
        "timestamp": 1614779603
    },
    {
        "content": "<p>I don't think there's going to be an obvious way to get the backend to consistently generate unaligned loads… you could maybe achieve it by specifying a CPU model where unaligned loads are cheaper than usual, compared to regular aligned loads.</p>",
        "id": 228594477,
        "sender_full_name": "nagisa",
        "timestamp": 1614779674
    },
    {
        "content": "<p>I do, I am using armv7 and 8 - gcc's code triggers an alignment exception if I force it to use an unaligned pointer</p>",
        "id": 228594478,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614779675
    },
    {
        "content": "<p>Isn't gcc buggy then?</p>",
        "id": 228594545,
        "sender_full_name": "nagisa",
        "timestamp": 1614779705
    },
    {
        "content": "<p>I'd say \"it depends\", their packed docs say \"it removes the padding between the members\", but rules as written the alignment requirements on the container could remain, depending on how you read it</p>",
        "id": 228594793,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614779793
    },
    {
        "content": "<p>I guess it could maybe draw inspiration from surrounding environment to deduce that the field must be aligned somehow, but in a general case where the type is put into, say, an array of multiple elements, the compiler can't assume alignment of the type is larger than it really is.</p>",
        "id": 228594835,
        "sender_full_name": "nagisa",
        "timestamp": 1614779809
    },
    {
        "content": "<p>gcc's way of doing things allows you to use pointers to structs which are backed by MMIO devices, which do not approve fragmented reads or writes</p>",
        "id": 228594927,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614779840
    },
    {
        "content": "<p>If you're testing by allocating a value on the stack, it could be applying optimisations such as SROA to unpack the structure into its constituent components in the first place.</p>",
        "id": 228594976,
        "sender_full_name": "nagisa",
        "timestamp": 1614779863
    },
    {
        "content": "<p>Ah, I see now what the context is. yeah <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 228595130,
        "sender_full_name": "nagisa",
        "timestamp": 1614779912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394290\">Benedikt Radtke</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/repr(C.2Cpacked).20structs.20have.20incorrect.20size/near/228594793\">said</a>:</p>\n<blockquote>\n<p>I'd say \"it depends\", their packed docs say \"it removes the padding between the members\", but rules as written the alignment requirements on the container could remain, depending on how you read it</p>\n</blockquote>\n<p>You could verify the alignment of the container type with <code>_Alignof(...)</code></p>",
        "id": 228595450,
        "sender_full_name": "nagisa",
        "timestamp": 1614780011
    },
    {
        "content": "<p>Ah that is nice!</p>",
        "id": 228595646,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780083
    },
    {
        "content": "<p>By the way, does rust truly not guarantee any alignment requirements on repr(c, packed(1)) structs on the stack?</p>",
        "id": 228595783,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780125
    },
    {
        "content": "<p>rules as written I must not pass pointers to these to c libraries, because they might have alignment requirements</p>",
        "id": 228595894,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780165
    },
    {
        "content": "<p>The struct type's alignment gets lowered to the requested alignment. <code>packed(1)</code> causes the alignment to become 1, and thus yes, the structure can end up at any address boundary.</p>",
        "id": 228596075,
        "sender_full_name": "nagisa",
        "timestamp": 1614780228
    },
    {
        "content": "<p>that effectively means \"you cannot reliably pass pointers to packed structs to c libraries\", doesn't it?</p>",
        "id": 228596225,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780268
    },
    {
        "content": "<p>I would expect <code>repr(C, packed)</code> to be equivalent in how it affects the alignment of the container and its fields to what C does for similar attributes.</p>",
        "id": 228596241,
        "sender_full_name": "nagisa",
        "timestamp": 1614780280
    },
    {
        "content": "<p>do you think we could get that guaranteed in the documentation? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 228596318,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780316
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/1K5hG5\">https://godbolt.org/z/1K5hG5</a> fwiw gcc does lower the alignment of the struct itself too.</p>",
        "id": 228596524,
        "sender_full_name": "nagisa",
        "timestamp": 1614780385
    },
    {
        "content": "<p>godbolt builds with -mno-unaligned-access</p>",
        "id": 228596586,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780411
    },
    {
        "content": "<p>without it my arm-none-eabi-gcc 10.2.0 happily does 32bit reads on packed uint32_ts</p>",
        "id": 228596753,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780473
    },
    {
        "content": "<p>specifying <code>-munaligned-access</code> still computes the alignment as 1.</p>",
        "id": 228596842,
        "sender_full_name": "nagisa",
        "timestamp": 1614780498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"394290\">Benedikt Radtke</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/repr(C.2Cpacked).20structs.20have.20incorrect.20size/near/228596318\">said</a>:</p>\n<blockquote>\n<p>do you think we could get that guaranteed in the documentation? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n</blockquote>\n<p>This is the position of the language team cf. <a href=\"https://github.com/rust-lang/rust/issues/81996#issuecomment-780047179\">https://github.com/rust-lang/rust/issues/81996#issuecomment-780047179</a> so I would say just file an issue if its not yet documented somewhere (but also see the rest of the discussion on that thread,as its very relevant to your question)</p>",
        "id": 228597436,
        "sender_full_name": "nagisa",
        "timestamp": 1614780717
    },
    {
        "content": "<p>true that, but 10.2 still does the 32bit-read: <a href=\"https://godbolt.org/z/93a43T\">https://godbolt.org/z/93a43T</a></p>",
        "id": 228597713,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780801
    },
    {
        "content": "<p>amusingly, 10.2.1 does byte-wise reads</p>",
        "id": 228598174,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780959
    },
    {
        "content": "<p>9.3 does a 32bit read</p>",
        "id": 228598276,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614780987
    },
    {
        "content": "<p>ah no wait, the <code>none</code> and <code>linux</code> targets differ, maybe the kernel is doing some emulation magic for the unaligned reads?</p>",
        "id": 228598645,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614781123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/repr(C.2Cpacked).20structs.20have.20incorrect.20size/near/228597436\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"394290\">Benedikt Radtke</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/repr(C.2Cpacked).20structs.20have.20incorrect.20size/near/228596318\">said</a>:</p>\n<blockquote>\n<p>do you think we could get that guaranteed in the documentation? <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n</blockquote>\n<p>This is the position of the language team cf. <a href=\"https://github.com/rust-lang/rust/issues/81996#issuecomment-780047179\">https://github.com/rust-lang/rust/issues/81996#issuecomment-780047179</a> so I would say just file an issue if its not yet documented somewhere (but also see the rest of the discussion on that thread,as its very relevant to your question)</p>\n</blockquote>\n<p>Thanks, I'll give it a read!</p>",
        "id": 228598774,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614781175
    },
    {
        "content": "<p>note that, as far as I'm aware, rust does not offer an intrinsic for an unaligned volatile access, so you cannot correctly do mmio with unaligned values</p>",
        "id": 228615571,
        "sender_full_name": "Lokathor",
        "timestamp": 1614786862
    },
    {
        "content": "<p>I know, but all my structs <em>are</em>  4-byte aligned, it is just that I must specify an alignment of 2 because they have pairs of u16 as members</p>",
        "id": 228615931,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614786967
    },
    {
        "content": "<p>(except the copies on the stack, only god and you know how rustc will align them on my stack)</p>",
        "id": 228616038,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614787001
    },
    {
        "content": "<p>then you probably should model individual addresses and not try to make it a whole single struct</p>",
        "id": 228618026,
        "sender_full_name": "Lokathor",
        "timestamp": 1614787635
    },
    {
        "content": "<p>that works for MMIO registers, but not if you have to pass a pointer to a c lib that does wide reads and writes on your pointer (?)</p>",
        "id": 228623406,
        "sender_full_name": "Benedikt Radtke",
        "timestamp": 1614789395
    },
    {
        "content": "<p>I don't think its at all different from a c lib doing wide reads of its own pointers to those same types… Unless it takes care to allocate the structure in a way that would permit it, which I'm pretty confident no implementation can guarantee.</p>",
        "id": 228630536,
        "sender_full_name": "nagisa",
        "timestamp": 1614791953
    },
    {
        "content": "<p>primarily because alignment is not only a concern for the compiler, its a concern the entire toolchain has to deal with.</p>",
        "id": 228630623,
        "sender_full_name": "nagisa",
        "timestamp": 1614791996
    },
    {
        "content": "<p>without knowing more about the C code I'm not sure I can offer any advice.</p>",
        "id": 228642370,
        "sender_full_name": "Lokathor",
        "timestamp": 1614796149
    }
]