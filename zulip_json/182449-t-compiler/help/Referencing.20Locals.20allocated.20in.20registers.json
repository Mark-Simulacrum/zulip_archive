[
    {
        "content": "<p>Hi, I'm trying to figure out what Rust does when we create a reference to a <code>Local</code> that was allocated in a register. In order to test this I looked at the machine code of some simple programs, but realised that Rust seems to always store <code>Local</code>s on the stack (only moving them into registers temporarily for further computation). For example, compiling <code>let a = 1;</code> I assumed that <code>a</code> would be allocated in a register, but it;s actually allocated on the stack. Wouldn't that be very slow? Maybe I'm just not compiling the right program. I feel like I am missing something here.</p>",
        "id": 204802318,
        "sender_full_name": "Lukas Diekmann",
        "timestamp": 1595513601
    },
    {
        "content": "<p>Enable optimizations, then registers should be used whenever possible</p>",
        "id": 204802402,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595513638
    },
    {
        "content": "<p>Of course, when you take a reference, the variable has to reside on the stack regardless</p>",
        "id": 204802525,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595513685
    },
    {
        "content": "<p>I compiled with <code>--release</code> with the same result.</p>",
        "id": 204802608,
        "sender_full_name": "Lukas Diekmann",
        "timestamp": 1595513723
    },
    {
        "content": "<p>Well, if the address is actually necessary, for example something like calling PartialEq::eq which takes references on two ints is unlikely to push things onto the stack in release mode.</p>",
        "id": 204802614,
        "sender_full_name": "simulacrum",
        "timestamp": 1595513724
    },
    {
        "content": "<p>Do you have the assembly in question?</p>",
        "id": 204802640,
        "sender_full_name": "simulacrum",
        "timestamp": 1595513739
    },
    {
        "content": "<p>(and program?)</p>",
        "id": 204802658,
        "sender_full_name": "simulacrum",
        "timestamp": 1595513744
    },
    {
        "content": "<p>Yes, I assume that once I create a reference, the <code>Local</code> is moved to the stack. I assume as long as the reference is alive, I can not move the <code>Local</code> back in to a register?</p>",
        "id": 204802773,
        "sender_full_name": "Lukas Diekmann",
        "timestamp": 1595513786
    },
    {
        "content": "<p>Rust doesn't give you direct knowledge of whether something is on the stack or the register in your program, and the optimization passes are free to do whatever (depending on the types and such in question).</p>",
        "id": 204802881,
        "sender_full_name": "simulacrum",
        "timestamp": 1595513858
    },
    {
        "content": "<p>The program is (no references in this example as I was trying to get Rust to use a register first)</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    let mut a = 0;\n    a = 3;\n    println!(&quot;{}&quot;, a);\n}\n</code></pre></div>",
        "id": 204802897,
        "sender_full_name": "Lukas Diekmann",
        "timestamp": 1595513866
    },
    {
        "content": "<p><code>println</code> takes a reference</p>",
        "id": 204803004,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595513909
    },
    {
        "content": "<p>and the formatting infra is specifically tailored to not get inlined etc, optimizing for code size rather than speed for the most part</p>",
        "id": 204803067,
        "sender_full_name": "simulacrum",
        "timestamp": 1595513939
    },
    {
        "content": "<p>Ah, so because I'm printing <code>a</code> the compiler knows it needs to reference it, so it never gets allocated in a register in the first place.</p>",
        "id": 204803141,
        "sender_full_name": "Lukas Diekmann",
        "timestamp": 1595513977
    },
    {
        "content": "<p>Okay, this maybe more of a LLVM question then, but let's say <code>a</code> gets allocated in a register. I then reference <code>a</code> somewhere, which means it needs to be moved to the stack. How does the compiler know when it can move <code>a</code> back into a register. I assume once all references to <code>a</code> are dead?</p>",
        "id": 204803599,
        "sender_full_name": "Lukas Diekmann",
        "timestamp": 1595514158
    }
]