[
    {
        "content": "<p>Since <a href=\"https://github.com/rust-lang/rust/pull/73996\">https://github.com/rust-lang/rust/pull/73996</a> I can't make heads nor tails of the pretty-printing system. If I have a type from <code>tcx.type_of(def_id)</code>, how can I print its fully qualified path?</p>",
        "id": 218221143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606670583
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"244331\">@Dan Aloni (da-x)</span></p>",
        "id": 218221146,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606670592
    },
    {
        "content": "<p>currently I'm using this but it seems like a hack:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">self_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">TyKind</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">item_name</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">.</span><span class=\"n\">did</span><span class=\"p\">).</span><span class=\"n\">to_string</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// TODO: not sure if this will work</span>\n<span class=\"w\">                    </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">is_primitive</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218221243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606670763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  Did you try the <code>with_no_trimmed_paths(|| .. )</code> wrapper?</p>",
        "id": 218223327,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1606674046
    },
    {
        "content": "<p>where can I find that?</p>",
        "id": 218223330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674055
    },
    {
        "content": "<p><code>use rustc_middle::ty::print::with_no_trimmed_paths;</code></p>",
        "id": 218223337,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1606674067
    },
    {
        "content": "<p>thanks! Can you document this somewhere, maybe on <code>Ty</code> or <code>TyS</code>?</p>",
        "id": 218223341,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674086
    },
    {
        "content": "<p>just a link to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/print/index.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/print/index.html</a> would be fine I think</p>",
        "id": 218223350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674106
    },
    {
        "content": "<p>Although, it's a bit surprising that <code>.to_string()</code> doesn't work for you, <del>as the <code>Display</code> impl of pretty printing uses it internally</del>.</p>",
        "id": 218223353,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1606674112
    },
    {
        "content": "<p>well it does work, it just doesn't use the correctly scoped paths</p>",
        "id": 218223393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674129
    },
    {
        "content": "<p>I don't have the exact error on me, I'd have to rebuild rustdoc</p>",
        "id": 218223399,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674153
    },
    {
        "content": "<p>it was using the scope of the crate root instead of the current module</p>",
        "id": 218223401,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674163
    },
    {
        "content": "<p>Not sure I understand</p>",
        "id": 218223427,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1606674227
    },
    {
        "content": "<p>If you want the scope of the current module? I'm not sure it can be considered 'fully qualified'</p>",
        "id": 218223430,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1606674232
    },
    {
        "content": "<p>well right, it needs to be either fully qualified or the current scope</p>",
        "id": 218223472,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674261
    },
    {
        "content": "<p>but not a <em>different</em> scope</p>",
        "id": 218223476,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674265
    },
    {
        "content": "<p>hmm, with_no_trimmed_paths didn't work either:</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: unresolved link to `sync::condvar::Condvar::notify_all`\n   --&gt; library/std/src/sync/condvar.rs:475:25\n    |\n475 |     /// [`notify_all`]: Self::notify_all\n    |                         ^^^^^^^^^^^^^^^^ no item named `sync` in scope\n</code></pre></div>",
        "id": 218223578,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674380
    },
    {
        "content": "<p>Sorry, I forgot - <code>Debug</code> trait will give you the full path, not <code>Display</code>.</p>",
        "id": 218223581,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1606674386
    },
    {
        "content": "<p>so the issue here is that <code>sync</code> should not be showing up as the first path: it should be either <code>crate::sync::condvar::Condvar</code> (which is fine) or just <code>Condvar</code></p>",
        "id": 218223686,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674552
    },
    {
        "content": "<p>but the weird mix means the scopes are wrong</p>",
        "id": 218223688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674559
    },
    {
        "content": "<p>anyway, this is fundamentally hacky so maybe I shouldn't be surprised it doesn't work by default <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218223764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674642
    },
    {
        "content": "<p>I want to go from DefId -&gt; String and back again</p>",
        "id": 218223767,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674649
    },
    {
        "content": "<p>There's the <code>with_crate_prefix</code> wrapper, BTW</p>",
        "id": 218223781,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1606674666
    },
    {
        "content": "<p>because the alternative was this monster that sat idle for 3 months: <a href=\"https://github.com/jyn514/rust/tree/intra-link-self-big-refactor\">https://github.com/jyn514/rust/tree/intra-link-self-big-refactor</a></p>",
        "id": 218223896,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"244331\">Dan Aloni (da-x)</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20can.20I.20get.20the.20fully.20qualified.20path.20to.20a.20type.3F/near/218223781\">said</a>:</p>\n<blockquote>\n<p>There's the <code>with_crate_prefix</code> wrapper, BTW</p>\n</blockquote>\n<p>ooh, that looks great, thanks!</p>",
        "id": 218223900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606674815
    },
    {
        "content": "<p>ok yeah that fixed it :) thanks so much for the help!</p>",
        "id": 218224075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606675028
    }
]