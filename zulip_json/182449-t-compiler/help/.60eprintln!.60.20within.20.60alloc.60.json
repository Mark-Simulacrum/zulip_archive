[
    {
        "content": "<p>I'd like to insert some temporary <code>eprintln!</code> statements into <code>library/alloc/src/raw_vec.rs</code>, but <code>eprintln!</code> isn't available within <code>alloc</code>. Is there some lower-level print thing I can use in <code>alloc</code>?</p>",
        "id": 263074389,
        "sender_full_name": "nnethercote",
        "timestamp": 1638223789
    },
    {
        "content": "<p>I tried to use <code>dhat-rs</code> within <code>alloc</code> but got a circular dependency among crates</p>",
        "id": 263074794,
        "sender_full_name": "nnethercote",
        "timestamp": 1638224026
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">printf</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">log</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$s</span>:<span class=\"nc\">literal</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($arg</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"cp\">$s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"</span><span class=\"se\">\\n\\0</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($arg</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 263075119,
        "sender_full_name": "bjorn3",
        "timestamp": 1638224116
    },
    {
        "content": "<p>This is roughly what I used for debugging cg_clif when it wasn't yet capable of compiling libstd.</p>",
        "id": 263075246,
        "sender_full_name": "bjorn3",
        "timestamp": 1638224170
    },
    {
        "content": "<p>maybe call it <code>logf</code> if it uses printf syntax haha</p>",
        "id": 263075368,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638224246
    },
    {
        "content": "<p>would be confusing for <code>log!(\"100%s\")</code> to segfault <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 263075422,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638224270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Thanks! I need to print to <code>stderr</code>, and I couldn't get your code to work, but I ended up with something similar:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">dprintf</span><span class=\"p\">(</span><span class=\"n\">fd</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">my_printf</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$s</span>:<span class=\"nc\">literal</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">dprintf</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$s</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">my_printf</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">b\"hello world</span><span class=\"se\">\\n\\0</span><span class=\"s\">\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 263078934,
        "sender_full_name": "nnethercote",
        "timestamp": 1638226440
    },
    {
        "content": "<p>Lacks the varargs, because I don't need them right now and they were giving me trouble</p>",
        "id": 263079009,
        "sender_full_name": "nnethercote",
        "timestamp": 1638226472
    },
    {
        "content": "<p>And I learned that <code>dprintf</code> exists, which is fun</p>",
        "id": 263079243,
        "sender_full_name": "nnethercote",
        "timestamp": 1638226593
    },
    {
        "content": "<p>I think this hack would be useful in the rustc or libs dev guide</p>",
        "id": 264562454,
        "sender_full_name": "The 8472",
        "timestamp": 1639228754
    }
]