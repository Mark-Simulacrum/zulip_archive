[
    {
        "content": "<p>Hi,<br>\nWith the help of <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I thought to try and add warning for unreachable default implementation in private traits.</p>\n<p>I started by following the guide and compiling + checking rust with <code>x.py</code>.</p>\n<p>What should be the next step?</p>",
        "id": 221224306,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609345389
    },
    {
        "content": "<p>(previously: <a href=\"#narrow/stream/122651-general/topic/unused.20fn.20that.20is.20used.20in.20trait\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/unused.20fn.20that.20is.20used.20in.20trait</a>)</p>",
        "id": 221224396,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609345449
    },
    {
        "content": "<p>I would start by finding where the existing <code>dead_code</code> warnings are emitted</p>",
        "id": 221224425,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609345491
    },
    {
        "content": "<p>and see if traits are being special cased</p>",
        "id": 221224433,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609345496
    },
    {
        "content": "<p>if so this will be relatively easy and you just have to remove the special casing</p>",
        "id": 221224445,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609345506
    },
    {
        "content": "<p>In <code>src/tools/rust-analyzer</code>?</p>",
        "id": 221224498,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609345560
    },
    {
        "content": "<p>no, in <code>compiler/</code></p>",
        "id": 221224541,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609345570
    },
    {
        "content": "<p>rust-analyzer is a different code base, that's used for IDEs</p>",
        "id": 221224550,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609345580
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>impl Visitor&lt;&#39;tcx&gt; for DeadVisitor&lt;&#39;tcx&gt; {\n...\n    // Overwrite so that we don&#39;t warn the trait item itself.\n    fn visit_trait_item(&amp;mut self, trait_item: &amp;&#39;tcx hir::TraitItem&lt;&#39;tcx&gt;) {\n        match trait_item.kind {\n            hir::TraitItemKind::Const(_, Some(body_id))\n            | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body_id)) =&gt; {\n                self.visit_nested_body(body_id)\n            }\n            hir::TraitItemKind::Const(_, None)\n            | hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_))\n            | hir::TraitItemKind::Type(..) =&gt; {}\n        }\n    }\n}\n</code></pre></div>\n<p>This seems to imply that traits are special cased.</p>",
        "id": 221224920,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609345908
    },
    {
        "content": "<p>there you go then :) just delete that function</p>",
        "id": 221224972,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609345930
    },
    {
        "content": "<p>Just for private traits.</p>",
        "id": 221224983,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609345943
    },
    {
        "content": "<p>But I don't understand why it works, it seems we do visit the nested body of the trait</p>",
        "id": 221225002,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609345965
    },
    {
        "content": "<p>So how come the overriden function disable the warning?</p>",
        "id": 221225041,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609345999
    },
    {
        "content": "<p>ok, then you can check if it's public with <code>tcx.visibility(trait_item.def_id)</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.visibility\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html#method.visibility</a></p>",
        "id": 221225051,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609346013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374319\">Elazar Leibovich</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/unreachable.20warning.20for.20default.20impl.20in.20private.20traits/near/221225002\">said</a>:</p>\n<blockquote>\n<p>But I don't understand why it works, it seems we do visit the nested body of the trait</p>\n</blockquote>\n<p>the body is not the same as the item itself</p>",
        "id": 221225056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609346022
    },
    {
        "content": "<p>that will warn about unused variables in the function, but not about the function itself being used</p>",
        "id": 221225063,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609346034
    },
    {
        "content": "<p>How do I get <code>def_id</code> from <code>trait_item</code>?</p>",
        "id": 221275288,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609400474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0599]: no method named `def_id` found for reference `&amp;&#39;tcx rustc_hir::TraitItem&lt;&#39;tcx&gt;` in the current scope\n   --&gt; compiler/rustc_passes/src/dead.rs:685:43\n    |\n685 |         if self.tcx.visibility(trait_item.def_id()) {\n    |                                           ^^^^^^ method not found in `&amp;&#39;tcx rustc_hir::TraitItem&lt;&#39;tcx&gt;`\n</code></pre></div>",
        "id": 221281314,
        "sender_full_name": "Elazar Leibovich",
        "timestamp": 1609409995
    },
    {
        "content": "<p>Maybe use the HIR map?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">visibility</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">local_def_id</span><span class=\"p\">(</span><span class=\"n\">trait_item</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221282046,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1609410919
    }
]