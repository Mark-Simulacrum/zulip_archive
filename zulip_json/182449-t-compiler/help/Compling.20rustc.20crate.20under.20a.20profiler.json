[
    {
        "content": "<p>I'm trying to compile rustc_middle with rustc running under a profiler, and I'm not sure of the best way of doing that.</p>\n<p>To enable profiling, I added <code>llvm.release-debuginfo = true</code> and <code>rust.debuginfo-level = 1</code> to config.toml and built a stage1 rustc. I copied <code>build/.../stage1/</code> to a separate location and created a toolchain for it using rustup. I'm not sure if it matters much that I'm using a stage1 instead of a stage2, btw.</p>\n<p>Now I want compile rustc_middle using this rustc running under a profiler. To profile, I think I need to run rustc directly rather through cargo. So I'd like to know how rustc gets invoked when compiling this crate. I considered two ways of doing that.</p>\n<ol>\n<li>\n<p><code>cd compiler/rustc_middle &amp;&amp; cargo +abc build -vv &amp;&gt; build.log</code>.</p>\n</li>\n<li>\n<p>Set <code>build.rustc</code> (what to use for bootstrap compiler) in config.toml to my previously built stage1 rustc and do a <code>./x.py build -vv --stage 0 compiler/rustc &amp;&gt; build.log</code>.</p>\n</li>\n</ol>\n<p>And either way, get the rustc command that builds rustc_middle from the log.</p>\n<p>First, is one of these ways more sensible than the other? Is there a better way?</p>\n<p>Second, method 2 gives me an error: </p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./x.py build -i -j5 --stage 0 compiler/rustc\nUpdating only changed submodules\nSubmodules updated in 0.02 seconds\n   Compiling toml v0.5.7\nerror[E0460]: found possibly newer version of crate `std` which `serde` depends on\n --&gt; /home/tgnottingham/.cargo/registry/src/github.com-1ecc6299db9ec823/toml-0.5.7/src/macros.rs:1:9\n  |\n1 | pub use serde::de::{Deserialize, IntoDeserializer};\n  |         ^^^^^\n  |\n  = note: perhaps that crate needs to be recompiled?\n  = note: the following crate versions were found:\n          crate `std`: /home/tgnottingham/Projects/rust/toolchains/abc/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-a0f0aab31a0efbe4.rlib\n          crate `std`: /home/tgnottingham/Projects/rust/toolchains/abc/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-a0f0aab31a0efbe4.so\n          crate `serde`: /home/tgnottingham/Projects/rust/rust/build/bootstrap/debug/deps/libserde-294f8c7e9ce0a347.rmeta\n\nerror: aborting due to previous error\n\nerror: could not compile `toml`\n</code></pre></div>\n\n\n<p>If method 2 is the avenue I should be pursuing, how can I resolve the above error?</p>",
        "id": 214124187,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1603320123
    },
    {
        "content": "<p>I would not recommend trying to build without rustc or x.py, you need <code>--sysroot</code> and <code>RUSTC_REAL</code> and all sorts of other stuff</p>",
        "id": 214124574,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603320481
    },
    {
        "content": "<p>if you can get method 1 to work that seems reasonable</p>",
        "id": 214124620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603320492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Compling.20rustc.20crate.20under.20a.20profiler/near/214124574\">said</a>:</p>\n<blockquote>\n<p>I would not recommend trying to build without rustc or x.py, you need <code>--sysroot</code> and <code>RUSTC_REAL</code> and all sorts of other stuff</p>\n</blockquote>\n<p>Do you mean without cargo or x.py?</p>",
        "id": 214124761,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1603320604
    },
    {
        "content": "<p>yes <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> thank you</p>",
        "id": 214124829,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603320646
    },
    {
        "content": "<p>Cool, thank you! I'll give it a try.</p>",
        "id": 214124855,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1603320668
    },
    {
        "content": "<p>the other alternative is setting <code>RUSTFLAGS</code> or <code>CARGOFLAGS</code></p>",
        "id": 214124893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603320697
    },
    {
        "content": "<p>For anyone who is trying to accomplish something like this, I was able to get valgrind-based profiling working via method 1. You can take the rustc command that builds the crate of interest from the verbose output of <code>cargo +&lt;your-toolchain&gt; build -vv</code> and modify it a bit.</p>\n<p>It will look something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>CARGO=... CARGO_CRATE_NAME=&lt;crate_of_interest&gt; ...more cargo env vars... LD_LIBRARY_PATH=... rustc ...many arguments...\n</code></pre></div>\n\n\n<p>To run compilation under cachegrind, for example, replace the <code>rustc</code> above with:</p>\n<div class=\"codehilite\"><pre><span></span><code>valgrind --tool=cachegrind $(rustup +&lt;your-toolchain&gt; which rustc)\n</code></pre></div>\n\n\n<p>Not sure this is the \"right\" way, but it's something. Only trouble is that massif is segfaulting on me, but I think that's a massif issue.</p>",
        "id": 214130269,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1603325393
    },
    {
        "content": "<p>I was able to get past the massif segfault by upgrading from valgrind 3.15 to 3.16.1.</p>\n<p>But the method of running cargo in the crate directory doesn't work for all crates apparently. Some crates want env vars like <code>CFG_RELEASE_CHANNEL</code> to be defined, and they aren't. I could probably work around that, but it makes me think I should be doing this a different way.</p>",
        "id": 214133314,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1603328414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306073\">@Tyson Nottingham</span> <code>export CFG_RELEASE_CHANNEL=nightly</code></p>",
        "id": 214133340,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603328465
    },
    {
        "content": "<p>(or maybe rustc-dev? not 100% sure)</p>",
        "id": 214133364,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603328505
    },
    {
        "content": "<p>Setting that and <code>CFG_RELEASE=blah</code> gets me past it. Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214134028,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1603329211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306073\">@Tyson Nottingham</span> Cheering you on here. I'm so glad you're working on this.</p>",
        "id": 214146148,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1603345983
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, the cheering helps <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 214278568,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1603435005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Making some progress -- <a href=\"https://github.com/rust-lang/rust/pull/79589\">https://github.com/rust-lang/rust/pull/79589</a>. Only improves things for incremental builds, but that's where the lowest fruit lies.</p>",
        "id": 218613566,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1606940497
    },
    {
        "content": "<p>Very nice work! Impressive improvement.</p>",
        "id": 218614012,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606940600
    },
    {
        "content": "<p><span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 218614162,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1606940676
    }
]