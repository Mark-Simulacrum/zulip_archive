[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ...</p>",
        "id": 195867644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265212
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 195867696,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265229
    },
    {
        "content": "<p>I guess the first thing is to track out exactly <em>why</em> this is happening</p>",
        "id": 195867758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265236
    },
    {
        "content": "<p>The PR that was cited is somewhat surprising</p>",
        "id": 195867839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265242
    },
    {
        "content": "<p>but before we do even that</p>",
        "id": 195867888,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265246
    },
    {
        "content": "<p>let me check-- do you understand the bug?</p>",
        "id": 195867939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195867839\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195867839\">said</a>:</p>\n<blockquote>\n<p>The PR that was cited is somewhat surprising</p>\n</blockquote>\n<p>why do you say it's surprising?</p>",
        "id": 195867953,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265262
    },
    {
        "content": "<p>because the intent of the PR was to fix a bug like this</p>",
        "id": 195868101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265310
    },
    {
        "content": "<p>do you know what we mean by \"invariant\"?</p>",
        "id": 195868114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265318
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\" title=\"https://doc.rust-lang.org/nomicon/subtyping.html#variance\">https://doc.rust-lang.org/nomicon/subtyping.html#variance</a></p>",
        "id": 195868262,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265378
    },
    {
        "content": "<p>:)</p>",
        "id": 195868264,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195868101\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195868101\">said</a>:</p>\n<blockquote>\n<p>because the intent of the PR was to fix a bug like this</p>\n</blockquote>\n<p>ahh I see</p>",
        "id": 195868287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265389
    },
    {
        "content": "<p>trait objects shouldn't be covariant to its associated types I guess?</p>",
        "id": 195868364,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265409
    },
    {
        "content": "<p>yeah</p>",
        "id": 195868389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265419
    },
    {
        "content": "<p>so in general associated types have to be \"invariant\" with respect to the input types on the trait</p>",
        "id": 195868418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265430
    },
    {
        "content": "<p>in other words</p>",
        "id": 195868422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265431
    },
    {
        "content": "<p>I'd need to read a bit more and think about it properly</p>",
        "id": 195868424,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265432
    },
    {
        "content": "<p>normally we say that <code>&amp;'static u32 &lt;: &amp;'a u32</code> for any <code>'a</code></p>",
        "id": 195868469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265450
    },
    {
        "content": "<p>this is because <code>&amp;'b T &lt;: &amp;'a T</code> if <code>'b: 'a</code></p>",
        "id": 195868501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265468
    },
    {
        "content": "<p>and <code>'static: 'a</code> for all <code>'a</code></p>",
        "id": 195868511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265473
    },
    {
        "content": "<p>this in turn means that <code>Vec&lt;&amp;'static u32&gt; &lt;: Vec&lt;&amp;'a u32&gt;</code>,</p>",
        "id": 195868533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265486
    },
    {
        "content": "<p>because <code>Vec&lt;T&gt;</code> is covariant with respect to <code>T</code></p>",
        "id": 195868545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265492
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 195868583,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265506
    },
    {
        "content": "<p><em>but</em> if you have <code>&lt;Vec&lt;&amp;'static u32&gt; as Iterator&gt;::Item</code> and <code>&lt;Vec&lt;&amp;'a u32&gt; as Iterator&gt;::Item</code>...</p>",
        "id": 195868678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265526
    },
    {
        "content": "<p>there is no subtyping relationship</p>",
        "id": 195868688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265529
    },
    {
        "content": "<p>(even though, in that <em>particular</em> example, it would work out ok)</p>",
        "id": 195868719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265542
    },
    {
        "content": "<p>the reason is basically because we have no idea what <code>Item</code> will expand to be</p>",
        "id": 195868759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265562
    },
    {
        "content": "<p>and just because the inputs to the trait are subtypes, doesn't mean the \"output\" will be</p>",
        "id": 195868801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265579
    },
    {
        "content": "<p>so...similarly...</p>",
        "id": 195868821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265587
    },
    {
        "content": "<p>as I've said, I didn't spend time on this issue, but just by looking at it wonder if this can be reduced more?</p>",
        "id": 195868822,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265588
    },
    {
        "content": "<p>a good question</p>",
        "id": 195868871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265607
    },
    {
        "content": "<p>surely yes</p>",
        "id": 195868898,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265617
    },
    {
        "content": "<p>one sec</p>",
        "id": 195868920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265627
    },
    {
        "content": "<p>I can investigate that but yeah if there's something obvious to you would be good to know</p>",
        "id": 195869108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265688
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">gimme</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">gimme2</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">gimme</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195869189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265720
    },
    {
        "content": "<p>so that program compiles</p>",
        "id": 195869232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265740
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b4e1d158b18918744d5ecb14c149b171\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b4e1d158b18918744d5ecb14c149b171\">playground</a></p>",
        "id": 195869240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265744
    },
    {
        "content": "<p>but I don't think it should</p>",
        "id": 195869245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265746
    },
    {
        "content": "<p>I was going to say ... <code>PhantomData</code> doesn't seem to be needed</p>",
        "id": 195869260,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265752
    },
    {
        "content": "<p>actually we can make it smaller still</p>",
        "id": 195869455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265818
    },
    {
        "content": "<p>we can probably make it print a dangling reference as in the issue, right?</p>",
        "id": 195869518,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265841
    },
    {
        "content": "<p>so we have a repro that make things explode badly :)</p>",
        "id": 195869563,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265860
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">make</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">take</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">make</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 195869585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265868
    },
    {
        "content": "<p>nah</p>",
        "id": 195869607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265878
    },
    {
        "content": "<p>I mean a <em>weaponized</em> variant that explodes badly</p>",
        "id": 195869661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265886
    },
    {
        "content": "<p>is sort of by definition not minimal :)</p>",
        "id": 195869678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265891
    },
    {
        "content": "<p>for debugging we want the minimal thing</p>",
        "id": 195869686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265894
    },
    {
        "content": "<p>the key bug is that this subtyping relationship doesn't hold</p>",
        "id": 195869708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265902
    },
    {
        "content": "<p>ahh yeah, for debugging minimal but as a test to place it with the PR maybe it's good?</p>",
        "id": 195869753,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265920
    },
    {
        "content": "<p>maybe -- we can worry about it then</p>",
        "id": 195869809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265941
    },
    {
        "content": "<p>in any case I'll try the repro of the issue at least locally :)</p>",
        "id": 195869827,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265946
    },
    {
        "content": "<p>I'd sort of prefer to include the minimal one, and then maybe also a weaponized one</p>",
        "id": 195869834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265948
    },
    {
        "content": "<p>once fixed</p>",
        "id": 195869843,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265951
    },
    {
        "content": "<p>anyway the thing is to figure out why there is no invariance here</p>",
        "id": 195869904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265979
    },
    {
        "content": "<p>ok I guess I can investigate for a bit and ask questions maybe?</p>",
        "id": 195869905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265979
    },
    {
        "content": "<p>so let me give you a few tips</p>",
        "id": 195869908,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588265982
    },
    {
        "content": "<p>do you have ... tips ... exactly :)</p>",
        "id": 195869933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588265994
    },
    {
        "content": "<p>there are actually.. two bits of relevant code?</p>",
        "id": 195869956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266001
    },
    {
        "content": "<p>the first one would be <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/relate.rs\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/relate.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_middle/ty/relate.rs</a> -- the \"type relating\" code</p>",
        "id": 195870075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266027
    },
    {
        "content": "<p>this is like a visitor that walks down two pairs of types</p>",
        "id": 195870087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266033
    },
    {
        "content": "<p>note that it has this callback <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L68\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L68\"><code>relate_with_variance</code></a></p>",
        "id": 195870159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266059
    },
    {
        "content": "<p>so if we loop down here.. we see <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L382-L387\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L382-L387\">this code</a>, which is where it handles two <code>dyn</code> types</p>",
        "id": 195870228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266087
    },
    {
        "content": "<p>you can see that it is specifying <code>Contravariant</code> here as it relates the \"predicates\" of the two dyn types (<a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L384\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L384\">line</a>)</p>",
        "id": 195870287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266122
    },
    {
        "content": "<p>I...have no real idea why it would choose that, actually</p>",
        "id": 195870340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266129
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 195870378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266154
    },
    {
        "content": "<p>or sorry</p>",
        "id": 195870390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266159
    },
    {
        "content": "<p>that is <em>just</em> the region bound</p>",
        "id": 195870396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266163
    },
    {
        "content": "<p>i.e., a <code>dyn</code> type is really short for <code>dyn Bound + 'a</code></p>",
        "id": 195870416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266175
    },
    {
        "content": "<p>and it is <em>correct</em> that the <code>'a</code> region bound is contravariant</p>",
        "id": 195870433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266183
    },
    {
        "content": "<p>ahh right <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 195870456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266196
    },
    {
        "content": "<p>more interesting is the <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L386\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L386\">recursive call <code>relation.relate</code></a></p>",
        "id": 195870460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266200
    },
    {
        "content": "<p>which will I think bring you to <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L595\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L595\">the impl for <code>ExistentialPredicate</code></a></p>",
        "id": 195870492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266223
    },
    {
        "content": "<p>which will bring you ultimately <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L240\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L240\">*here*</a></p>",
        "id": 195870591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266258
    },
    {
        "content": "<p>(at least for the case of <code>Foo=Bar</code> bounds)</p>",
        "id": 195870602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266265
    },
    {
        "content": "<p>I'm sort of debating where I think the bug is here</p>",
        "id": 195870620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266283
    },
    {
        "content": "<p>but somewhere along this chain, we should have a <code>relate_with_invariance</code> sort of call</p>",
        "id": 195870677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195870460\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195870460\">said</a>:</p>\n<blockquote>\n<p>more interesting is the <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L386\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L386\">recursive call <code>relation.relate</code></a></p>\n</blockquote>\n<p>quite possibly on <em>this line</em>, but maybe <em>also</em> other lines :)</p>",
        "id": 195870699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266316
    },
    {
        "content": "<p>to explain what I mean...</p>",
        "id": 195870769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195870677\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195870677\">said</a>:</p>\n<blockquote>\n<p>but somewhere along this chain, we should have a <code>relate_with_invariance</code> sort of call</p>\n</blockquote>\n<p>you meant, instead of just a <code>relate</code> call?</p>",
        "id": 195870786,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266358
    },
    {
        "content": "<p>yeah</p>",
        "id": 195870827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266363
    },
    {
        "content": "<p>the actual fn is <code>relate_with_variance</code> and supplying an argument of invariance</p>",
        "id": 195870842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266371
    },
    {
        "content": "<p>need to investigate the code but yeah <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> maybe that's the problem or something like that ... unsure</p>",
        "id": 195870866,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266384
    },
    {
        "content": "<p>so imagine a case like <code>dyn Foo&lt;A&gt;</code></p>",
        "id": 195870890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266396
    },
    {
        "content": "<p>(no associated types)</p>",
        "id": 195870900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266400
    },
    {
        "content": "<p>the <code>Foo&lt;A&gt;</code> here is an <code>ExistentialTraitRef</code></p>",
        "id": 195870914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266411
    },
    {
        "content": "<p>that is, this is how it is represented</p>",
        "id": 195870930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266416
    },
    {
        "content": "<p>the impl for that is <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L295\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L295\">here</a></p>",
        "id": 195870955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266428
    },
    {
        "content": "<p>and you can see that it <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L305\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L305\">invokes <code>relate_substs</code> with the second argument set to <code>None</code></a></p>",
        "id": 195870997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266444
    },
    {
        "content": "<p>this will cause the substs <a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L145\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L145\">to be related with invariance</a></p>",
        "id": 195871028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266465
    },
    {
        "content": "<p>the point being---</p>",
        "id": 195871041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266472
    },
    {
        "content": "<p>whenever an \"existential trait reference\" like <code>Foo&lt;A&gt;</code> is related to another like <code>Foo&lt;B&gt;</code>, we require that <code>A = B</code></p>",
        "id": 195871108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266487
    },
    {
        "content": "<p>in other words, we want to inject invariance, but the question is <em>where does it come from</em>, in some sense</p>",
        "id": 195871149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266506
    },
    {
        "content": "<p>sorry, where does what comes from?</p>",
        "id": 195871197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266532
    },
    {
        "content": "<p>i.e., if we injected it when recursing in the <code>dyn</code> type, that would suggest that it's the keyword <code>dyn</code> that makes it invariant, but I think that's wrong. It's really most appropriate to inject it in the <code>ExistentialProjection</code> impl imo</p>",
        "id": 195871215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871197\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871197\">said</a>:</p>\n<blockquote>\n<p>sorry, where does what comes from?</p>\n</blockquote>\n<p>the invariance</p>",
        "id": 195871227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266547
    },
    {
        "content": "<p>yeah <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 195871245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266554
    },
    {
        "content": "<p>i.e., is there some context where you have an <code>ExistentialProjection</code></p>",
        "id": 195871252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266557
    },
    {
        "content": "<p>where you would <em>want</em> to relate them with covariance</p>",
        "id": 195871262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266562
    },
    {
        "content": "<p>or whatever</p>",
        "id": 195871268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266565
    },
    {
        "content": "<p>as it happens, the \"existential\" types <em>only</em> appear in <code>dyn</code> right now</p>",
        "id": 195871281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266573
    },
    {
        "content": "<p>so it's sort of a moot point</p>",
        "id": 195871284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266576
    },
    {
        "content": "<p>but regardless I think the answer is no :)</p>",
        "id": 195871293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266579
    },
    {
        "content": "<p>trait matching and associated types are inherently invariant in rust right now</p>",
        "id": 195871304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266585
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 195871332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266598
    },
    {
        "content": "<p>so if we had some other kind of type that used the same concept, it should <em>still</em> be invariant</p>",
        "id": 195871335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266599
    },
    {
        "content": "<p>tl;dr I think these two calls should use \"invariant\" (<a href=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L253-L254\" title=\"https://github.com/rust-lang/rust/blob/eece58a8e35c444afba6fa34873bc0244e32cd29/src/librustc_middle/ty/relate.rs#L253-L254\">here</a>)</p>",
        "id": 195871416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266628
    },
    {
        "content": "<p>actually I think just doing that is probably the fix</p>",
        "id": 195871449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266647
    },
    {
        "content": "<p>so I can investigate where the invariance comes from and let you know before diving into a solution I guess</p>",
        "id": 195871459,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266653
    },
    {
        "content": "<p>I said there were two bits of code but I think they both use this same core, \"type-relating\" visitor</p>",
        "id": 195871467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871449\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871449\">said</a>:</p>\n<blockquote>\n<p>actually I think just doing that is probably the fix</p>\n</blockquote>\n<p>ahh well, :)</p>",
        "id": 195871472,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266659
    },
    {
        "content": "<p>feel free to investigate, but I think that's the fix, the interesting question will be whether we start to encounter problems as a result of fixing the bug</p>",
        "id": 195871512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266680
    },
    {
        "content": "<p>hehe, yeah, you meant, more issues as part of fixing this problem?</p>",
        "id": 195871627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871512\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871512\">said</a>:</p>\n<blockquote>\n<p>feel free to investigate, but I think that's the fix, the interesting question will be whether we start to encounter problems as a result of fixing the bug</p>\n</blockquote>\n<p>going to try to spend some time on this before throwing a fix because it will serve the purposes of understanding a bit the code there :)</p>",
        "id": 195871733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588266793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871627\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/variance.20and.20assoc.20types.20.2371550/near/195871627\">said</a>:</p>\n<blockquote>\n<p>hehe, yeah, you meant, more issues as part of fixing this problem?</p>\n</blockquote>\n<p>I mean like</p>",
        "id": 195871919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266897
    },
    {
        "content": "<p>there's probably code relying on this</p>",
        "id": 195871926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266900
    },
    {
        "content": "<p>and we're going to break that code</p>",
        "id": 195871954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266913
    },
    {
        "content": "<p>and what's worse, the code is probably reasonable -- i.e., a more sophisticated type system that incorporated some notion of variance into trait matching could accept it</p>",
        "id": 195871989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266933
    },
    {
        "content": "<p>this is why I said this is P-criticial despite being old</p>",
        "id": 195872013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266943
    },
    {
        "content": "<p>because the sooner we fix, the less of code like that we have to deal with</p>",
        "id": 195872025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588266951
    },
    {
        "content": "<p>ok, going to investigate a bit</p>",
        "id": 195872177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588267025
    },
    {
        "content": "<p>but after brewing a good <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span>, first things first <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195872227,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1588267046
    }
]