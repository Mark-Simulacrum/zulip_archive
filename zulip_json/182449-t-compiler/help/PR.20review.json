[
    {
        "content": "<p>sorry about asking here, but I have a PR waiting review (<a href=\"https://github.com/rust-lang/rust/pull/92061\">https://github.com/rust-lang/rust/pull/92061</a>) since 18 december and the sole activity is: me doing a monthly ping and some rewrite due to merge conflicts (for the third time now). as the PR is correcting char signess for a third party platform I am maintaining (openbsd), risk of breaking something outside openbsd is very low. how to get review when the automatically assigned reviewer doesn't respond ?</p>",
        "id": 273789641,
        "sender_full_name": "Sebastien Marie (semarie)",
        "timestamp": 1646219290
    },
    {
        "content": "<p>ah. the reviewer just replied. so sorry for the noise :-)</p>",
        "id": 273789797,
        "sender_full_name": "Sebastien Marie (semarie)",
        "timestamp": 1646219343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"299750\">@Sebastien Marie (semarie)</span> One of the difficulties is that we don't have any official maintainers for OpenBSD (as with many tier 3 targets), so reviewers don't feel particularly confident reviewing any change. It would really help, long-term, if some folks specifically interested in OpenBSD were willing to sign up to get pinged on any OpenBSD-specific issue, and likewise for other targets. (Effectively, existing targets should eventually pass the target tier policy for their tier, which includes having maintainers on file.)</p>",
        "id": 273790765,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646219775
    },
    {
        "content": "<p>We need some better infrastructure for this, but effectively, we should have ping groups for each target.</p>",
        "id": 273790822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646219817
    },
    {
        "content": "<p>well, I am designated as maintainer for openbsd: <a href=\"https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/openbsd.md\">src/doc/rustc/src/platform-support/openbsd.md</a>.  I am fine to be pinged for any openbsd issue (it is already the case in libc repository)</p>",
        "id": 273791614,
        "sender_full_name": "Sebastien Marie (semarie)",
        "timestamp": 1646220257
    },
    {
        "content": "<p>I stand corrected! I didn't see the PR get merged that added that platform support page.</p>",
        "id": 273794055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646221404
    },
    {
        "content": "<p>In that case, I feel a lot more comfortable merging PRs like this from you.</p>",
        "id": 273794074,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646221420
    },
    {
        "content": "<p>Also, I wonder to what degree we could arrange to get this information out of clang and expose it via some ( possibly internal) cfg option. That would avoid the need to write this condition altogether.</p>",
        "id": 273794249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646221525
    },
    {
        "content": "<p>Or rather, get it out of LLVM.</p>",
        "id": 273794360,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646221603
    },
    {
        "content": "<p>I am not confident in myself regarding LLVM, but the default value for char signess seems to be in <a href=\"https://github.com/llvm/llvm-project/blob/dc48849/clang/lib/Driver/ToolChains/Clang.cpp#L1471\">isSignedCharDefault()</a>. The value could be overrided by command-line. I am unsure if it could be overriden by some target definition too</p>",
        "id": 273797092,
        "sender_full_name": "Sebastien Marie (semarie)",
        "timestamp": 1646223094
    },
    {
        "content": "<p>If we could get that information out of a combination of our target information and LLVM's target information, and expose it in some way that doesn't require a page-long cfg directive, that'd be awesome. :)</p>",
        "id": 273861825,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1646248600
    }
]