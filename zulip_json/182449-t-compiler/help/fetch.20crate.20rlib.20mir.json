[
    {
        "content": "<p>HI, I'm new to this zulip thing, hope I'm not doing this wrong. I'm currently working on a project which requires a rustc plugin (or something alike) to fetch the compiled rlib's mir. But not sure how I can do this. I know how to fetch mir for current crate and some of the \"std\", \"core\" and \"alloc\", but still many crates are missing. What am I missing?</p>",
        "id": 262427704,
        "sender_full_name": "Anciety",
        "timestamp": 1637657805
    },
    {
        "content": "<p>I found that by using <code>exported_symbols</code> I can get the symbol of dependency crates, but <code>is_mir_available</code> tells me that the mir is not available somehow</p>",
        "id": 262434056,
        "sender_full_name": "Anciety",
        "timestamp": 1637661756
    },
    {
        "content": "<p>You can compile everything with <code>-Zalways-encode-mir</code>. MIR is by default only encoded in the crate metadata when necessary. It is only necessary for generic and <code>#[inline]</code> functions.</p>",
        "id": 262438032,
        "sender_full_name": "bjorn3",
        "timestamp": 1637664070
    },
    {
        "content": "<p>Make sure to also compile the standard library with <code>-Zalways-encode-mir</code>.</p>",
        "id": 262438057,
        "sender_full_name": "bjorn3",
        "timestamp": 1637664090
    },
    {
        "content": "<p>It seems to be working! Thanks. BTW, I have one more question. When generating the rlibs, what are actually included? I mean, I've tried to write a simple snippet like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait Needed {\n    fn needed(&amp;self);\n}\n\npub struct Test&lt;T: Needed&gt; {\n    x: T\n}\n\nimpl&lt;T: Needed&gt; Test&lt;T&gt; {\n    pub fn print(&amp;self)  {\n        self.x.needed()\n    }\n\n    pub fn new(x: T) -&gt; Self {\n        Self {\n            x\n        }\n    }\n}\n</code></pre></div>",
        "id": 262438722,
        "sender_full_name": "Anciety",
        "timestamp": 1637664571
    },
    {
        "content": "<p>I was expecting that the Test::print should be generated to mir (or rlib), but it seems not</p>",
        "id": 262438749,
        "sender_full_name": "Anciety",
        "timestamp": 1637664590
    },
    {
        "content": "<p>It's mir should be encoded in the crate metadata. <code>exported_symbols</code> won't list it though as it isn't locally codegened. You need <code>tcx.mir_keys()</code> I believe.</p>",
        "id": 262438939,
        "sender_full_name": "bjorn3",
        "timestamp": 1637664689
    },
    {
        "content": "<p>This snippet is included in what I call \"testlib\", while I also write a \"testbin\" to reference this testlib.</p>",
        "id": 262439091,
        "sender_full_name": "Anciety",
        "timestamp": 1637664766
    },
    {
        "content": "<p>So, I'm a little bit confused about the difference of <code>mir_keys</code> and <code>exported_symbols</code>. I thought in this case, since it is a lib, it should be in the exported symbols?</p>",
        "id": 262439214,
        "sender_full_name": "Anciety",
        "timestamp": 1637664837
    },
    {
        "content": "<p>exported_symbols only lists the symbols exported from the codegened object files of the library. In your case <code>Test::&lt;T&gt;::print</code> is not codegened in the library as it is generic and there are no generic instantiations of it inside the library. If the binary were to use it, exported_symbols of the binary will list it as it is codegened to an object file when compiling the binary.</p>",
        "id": 262439564,
        "sender_full_name": "bjorn3",
        "timestamp": 1637665048
    },
    {
        "content": "<p>So, if I get it right, the mir of this <code>Test::&lt;T&gt;::print</code> thing is generated but not listed in the <code>exported_symbols</code>, since my <code>testbin</code> need the mir of it to generate actual code, right? My case is like, I want to extract out the <code>mir</code> included in the <code>rlib</code>(rmeta) file.. Like already presented <code>.rlib</code> of the std libs or so. Is there any hack I can do by using rustc plugin to achieve that?</p>",
        "id": 262440862,
        "sender_full_name": "Anciety",
        "timestamp": 1637665679
    },
    {
        "content": "<p>mir_keys returns all defids in the local crate with mir associated to them. to get it for other crates you will need to do something like what hacspec does (see <a href=\"https://github.com/rust-lang/rust/issues/85889\">#85889</a>) I think.</p>",
        "id": 262444962,
        "sender_full_name": "bjorn3",
        "timestamp": 1637668170
    },
    {
        "content": "<p>mir_keys returns all defids in the local crate with mir associated to them. to get it for other crates you will need to do something like what hacspec does (see <a href=\"https://github.com/rust-lang/rust/issues/85889\">#85889</a>) I think.</p>",
        "id": 262451819,
        "sender_full_name": "bjorn3",
        "timestamp": 1637672476
    }
]