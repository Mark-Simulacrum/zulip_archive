[
    {
        "content": "<p>Hi!</p>\n<p>I finally got around to making it possible to properly cross compile rust in Alpine (so it can be a first-class language there).  Unfortunately, I am having some problems finishing that work.  Namely, when crossing and building the stage1 rust, it fails to link due to missing <code>__rdl_alloc</code> and related symbols.  A terse build log is at <a href=\"https://tpaste.us/ejvV\">https://tpaste.us/ejvV</a></p>\n<p>Any help would be appreciated.  Thanks!</p>",
        "id": 215213649,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604181168
    },
    {
        "content": "<p>Hello,</p>\n<p>Ping again regarding this issue.  We are stuck getting rust everywhere in Alpine until I can solve this <code>__rdl_alloc</code> issue.  I'm available all day to help debug...</p>",
        "id": 215335905,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604331910
    },
    {
        "content": "<p><code>__rdl_alloc</code> should be defined at <a href=\"https://github.com/rust-lang/rust/blob/b218b952f800c1160b8b5e764ca651b02d678565/library/std/src/alloc.rs#L351\">https://github.com/rust-lang/rust/blob/b218b952f800c1160b8b5e764ca651b02d678565/library/std/src/alloc.rs#L351</a></p>\n<p>Can you run <code>readelf -s build/x86_64-alpine-linux-musl/stage1-std/x86_64-alpine-linux-musl/release/deps/std-*.o | grep __rdl_alloc</code>?</p>",
        "id": 215345459,
        "sender_full_name": "bjorn3",
        "timestamp": 1604335731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> ^</p>",
        "id": 215345480,
        "sender_full_name": "bjorn3",
        "timestamp": 1604335742
    },
    {
        "content": "<p>yes.  give me a moment.</p>",
        "id": 215345725,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604335844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ readelf -s build/x86_64-alpine-linux-musl/stage1-std/x86_64-alpine-linux-musl/release/deps/std-*.o | grep __rdl_alloc\n     6: 0000000000000000     0 NOTYPE  GLOBAL HIDDEN   UND __rdl_alloc\n     7: 0000000000000000     0 NOTYPE  GLOBAL HIDDEN   UND __rdl_alloc_zeroed\n</code></pre></div>",
        "id": 215345787,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604335876
    },
    {
        "content": "<p>Huh, that is only a reference and not a definition.</p>",
        "id": 215345948,
        "sender_full_name": "bjorn3",
        "timestamp": 1604335939
    },
    {
        "content": "<p>yes, which is why i'm baffled, because i agree it should be there per <a href=\"http://alloc.rs\">alloc.rs</a> defining it</p>",
        "id": 215346062,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604335989
    },
    {
        "content": "<p>I see you are defining your own triple x86_64-alpine-linux-musl. How does it differ from x86_64-unknown-linux-musl?</p>",
        "id": 215346322,
        "sender_full_name": "bjorn3",
        "timestamp": 1604336094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>use crate::spec::TargetResult;\n\npub fn target() -&gt; TargetResult {\n    let mut base = super::x86_64_unknown_linux_musl::target()?;\n\n    base.llvm_target = &quot;x86_64-alpine-linux-musl&quot;.to_string();\n    base.target_vendor = &quot;alpine&quot;.to_string();\n    base.options.crt_static_default = false;\n    base.options.static_position_independent_executables = true;\n    base.options.need_rpath = true;\n\n    Ok(base)\n}\n</code></pre></div>",
        "id": 215346448,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604336154
    },
    {
        "content": "<p>in other words, no difference other than static linking being disabled :)</p>",
        "id": 215346887,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604336340
    },
    {
        "content": "<p>I don't have a clue what could be the problem. Maybe it will work if you delete <code>build/x86_64-alpine-linux-musl/stage1-std</code>?</p>",
        "id": 215347353,
        "sender_full_name": "bjorn3",
        "timestamp": 1604336528
    },
    {
        "content": "<p>i think it would just rebuild, right?</p>",
        "id": 215348936,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604337179
    },
    {
        "content": "<p>Yes, maybe it is just a glitch.</p>",
        "id": 215349002,
        "sender_full_name": "bjorn3",
        "timestamp": 1604337205
    },
    {
        "content": "<p>the problem is that its reproducible... i'm not sure how i could hack that into the build process</p>",
        "id": 215349446,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604337371
    },
    {
        "content": "<p>however, its moot because deleting it doesn't solve it</p>",
        "id": 215350790,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604337967
    },
    {
        "content": "<p>is there a way to get more verbose output out of the rust build process?  like \"compiling <a href=\"http://alloc.rs\">alloc.rs</a>\" for example</p>",
        "id": 215355685,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604340164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> <code>x.py build -v</code></p>",
        "id": 215355753,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604340195
    },
    {
        "content": "<p>or <code>-vv</code> if that's not enough</p>",
        "id": 215355768,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604340199
    },
    {
        "content": "<p>ok let me see if i can gather a full build log with -vv, maybe it will give us some enlightenment</p>",
        "id": 215355988,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604340298
    },
    {
        "content": "<p>note that -vv is <em>really</em> verbose so I'd try -v first</p>",
        "id": 215356080,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604340339
    },
    {
        "content": "<p>-vv seems to be the level of verbosity i am used to from C world :)</p>",
        "id": 215356356,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604340475
    },
    {
        "content": "<p><code>x.py --help</code> also documents a lot of these flags</p>",
        "id": 215356665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604340610
    },
    {
        "content": "<p>and <code>config.toml.example</code></p>",
        "id": 215356683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604340617
    },
    {
        "content": "<p>full build log at <a href=\"https://distfiles.dereferenced.org/rust-cross-s390x-log.txt\">https://distfiles.dereferenced.org/rust-cross-s390x-log.txt</a></p>",
        "id": 215363179,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604343862
    },
    {
        "content": "<p>so, there is \"alloc=/home/kaniini/aports/community/rust/src/rustc-1.47.0-src/build/x86_64-alpine-linux-musl/stage1-std/x86_64-alpine-linux-musl/release/deps/liballoc-6f33e873ffca5c66.rlib\" referenced in the link phase for std</p>",
        "id": 215363584,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344048
    },
    {
        "content": "<p>running <code>nm</code> on that rlib does not show any symbols though</p>",
        "id": 215363925,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344193
    },
    {
        "content": "<p>so, <code>__default_lib_allocator</code> is guarded by <code>#[unstable(feature = \"alloc_internals\", issue = \"none\")]</code>.  i wonder if this evaluates as false.  is there some way to see?</p>",
        "id": 215364408,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344420
    },
    {
        "content": "<p>that's not a cfg, that's a stability attribute</p>",
        "id": 215364441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604344434
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/unstable-book/language-features/staged-api.html\">https://doc.rust-lang.org/unstable-book/language-features/staged-api.html</a></p>",
        "id": 215364513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604344452
    },
    {
        "content": "<p>okay.  i'm just trying to figure out why __rdl_alloc does not appear in that rlib.  it should appear somehow.</p>",
        "id": 215364565,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344482
    },
    {
        "content": "<p>so it doesn't evaluate one way or another, that function is always compiled</p>",
        "id": 215364570,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604344487
    },
    {
        "content": "<p>does anybody have any theories as to why <code>__rdl_alloc</code> would not appear in that rlib?</p>",
        "id": 215364925,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344624
    },
    {
        "content": "<p>ok, it appears in my stage0-std, <code>__rdl_alloc</code> appears in the libstd rlib not the liballoc rlib</p>",
        "id": 215365201,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344750
    },
    {
        "content": "<p>lets see about stage1</p>",
        "id": 215365206,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344756
    },
    {
        "content": "<p>yeah, __rdl_alloc nowhere to be found in stage1.</p>",
        "id": 215365376,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344832
    },
    {
        "content": "<p>to confirm, <code>#[cfg(not(test))]</code> means that expression will not be compiled, right?</p>",
        "id": 215365565,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344918
    },
    {
        "content": "<p>(unless test is false)</p>",
        "id": 215365653,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604344939
    },
    {
        "content": "<p>it means it <em>will</em> be compiled unless you run <code>x.py test</code></p>",
        "id": 215365858,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604345038
    },
    {
        "content": "<p>yes, what i am wondering is if the buildsystem is slipping in <code>test</code> as a cfg variable</p>",
        "id": 215366065,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604345122
    },
    {
        "content": "<p>it shouldn't be, but if it were it would show up as <code>--cfg test</code> somehwere in the logs</p>",
        "id": 215366310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604345235
    },
    {
        "content": "<p>--cfg test is automatically set when compiling for tests, but not otherwise.</p>",
        "id": 215366558,
        "sender_full_name": "simulacrum",
        "timestamp": 1604345354
    },
    {
        "content": "<p>this is truly mindboggling</p>",
        "id": 215366772,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1604345445
    }
]