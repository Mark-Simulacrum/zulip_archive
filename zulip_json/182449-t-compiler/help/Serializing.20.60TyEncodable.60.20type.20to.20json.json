[
    {
        "content": "<p>Is there any way to to serialize a <code>TyEncodable</code> type to something like json? In particular an <code>InternalSubsts</code>. </p>\n<p>It seems like I could write a custom instance of <code>TyEncoder</code> but that trait seems to be meant to dump the whole state of a crate at once. <br>\nI understand that given that a lot of things are interned in <code>rustc_middle</code> you would need to dump a dictionary of mapping the interned pointers to their contents, but is it feasible to do this for a small fragment of types?</p>",
        "id": 254015844,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1632127563
    },
    {
        "content": "<p>Additionally, if I read something that was encoded using a <code>TyEncoder</code>, can I load it within a _different_ crate and get meaninful results out of it?</p>",
        "id": 254015923,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1632127616
    },
    {
        "content": "<p>ie if I serialize a substitution and deserialize it within a different crate, will that substitution still be valid?</p>",
        "id": 254015981,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1632127658
    },
    {
        "content": "<blockquote>\n<p>ie if I serialize a substitution and deserialize it within a different crate, will that substitution still be valid?</p>\n</blockquote>\n<p>You will have to map all crate nums during deserialization. This is normally done by rustc_metadata when deserializing crate metadata.</p>",
        "id": 254020979,
        "sender_full_name": "bjorn3",
        "timestamp": 1632130298
    },
    {
        "content": "<p>Yea I figured as much, but thatâ€™s fine</p>",
        "id": 254022161,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1632130827
    },
    {
        "content": "<p>Writing a valid <code>TyDecoder</code> / <code>TyEncoder</code> seems very challenging though</p>",
        "id": 254035138,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1632137798
    },
    {
        "content": "<p>especially since they really seem to be made for opaque binary blobs</p>",
        "id": 254035152,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1632137811
    }
]