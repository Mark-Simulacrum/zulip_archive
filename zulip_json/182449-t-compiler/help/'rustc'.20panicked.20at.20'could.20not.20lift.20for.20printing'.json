[
    {
        "content": "<p>I don't really know where to start. I'm writing a tool that re-use rust internals.</p>\n<p>I'm trying to print a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/consts/struct.Const.html\"><code>ty::Const</code></a>. It seems that I could just do <code>write!(\"{}\", my_const)</code> but I get the following error: <a href=\"https://github.com/rust-lang/rust/blob/1c389ffef/compiler/rustc_middle/src/ty/print/pretty.rs#L1844\">\"could not lift for printing\"</a>. It seems that <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.mk_const\">TyCtxt::mk_const()</a> could help, but I get a weird borrow error if I try to use it.</p>\n<p>My code is here: <code>git clone git@github.com:robinmoussu/cargo-callgraph.git</code>. More specifically, it's the line <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/master/extract_dependencies.rs#L649\">649</a> and <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/master/extract_dependencies.rs#L675\">675</a> of <code>extract_dependencies.rs</code>.</p>\n<p>In order to run it, a simple <code>cargo run -- test/basic.rs &amp;&amp; dot example2.dot -Txlib</code> should suffice¹.</p>\n<p>The branch <code>buggy</code> uncomment the <code>writeln!</code> and expose the bug \"could not lift for printing\".</p>\n<p>¹. “Make it work, make it right, make it fast”. I'm still at step 1, some stuff is hardcoded, the code is not cleaned-up, the history is a mess, … I'm sorry. But I'm really close to be able to start step 2 and clean all of this mess <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 218999604,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607281748
    },
    {
        "content": "<p><code>AllDependencies</code> names the lifetime param <code>'tcx</code> but then the functiin that uses it uses a separate lifetime param called <code>'dependencies</code> that isn't guaranteed to live at most as long as <code>'tcx</code>, so it may contain <code>Const</code> values that aren't interned into <code>tcx</code>.</p>",
        "id": 219002216,
        "sender_full_name": "bjorn3",
        "timestamp": 1607283580
    },
    {
        "content": "<p>Before I tried to fix this. do you think that using <code>mk_const</code> is what I should do?</p>",
        "id": 219002995,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607283872
    },
    {
        "content": "<p>and what does \"interned\" means?</p>",
        "id": 219003667,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607284109
    },
    {
        "content": "<p>Yes, <code>mk_const</code> interns <code>Const</code>. Interning means that a single copy is stored in <code>TyCtxt</code> for each used value. This makes the <code>PartialEq</code> impl a matter of a pointer comparison and saves memory when the type is bigger than a pointer.</p>",
        "id": 219004207,
        "sender_full_name": "bjorn3",
        "timestamp": 1607284284
    },
    {
        "content": "<p>The way my algorithm works is more or less:</p>\n<ul>\n<li>iterate over <code>tcx.body_owner()</code></li>\n<li>create reference to the various variables I need, and store them in <code>AllDependencies</code></li>\n<li>iterate over <code>AllDependencies</code>, and generate a textual representation</li>\n</ul>\n<p>In order to do the 3rd step, I need to have the constants interned. But the borrow checker complains that<code>AllDependencies</code> doesn't live long enough if I try to interns them.</p>",
        "id": 219006029,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607284886
    },
    {
        "content": "<p>And I don't understand why it should be the case, nor why it complains (<code>AllDependencies</code> is dropped after the last text is written).</p>",
        "id": 219006210,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607284934
    },
    {
        "content": "<p>For me <code>tcx</code> should outlive <code>AllDependencies</code>, not the reverse.</p>",
        "id": 219006478,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607285022
    },
    {
        "content": "<p>I had a lifetime bug in the specification of one of my extraction function. It's fixed!</p>",
        "id": 219025859,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607292263
    }
]