[
    {
        "content": "<p>I just got this error in <a href=\"https://github.com/rust-lang/rust/pull/82208#issuecomment-830837319\">https://github.com/rust-lang/rust/pull/82208#issuecomment-830837319</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: found crates (`serde_derive` and `serde_derive`) with colliding StableCrateId values.\n   --&gt; /home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/cargo_metadata-0.8.2/src/lib.rs:162:1\n    |\n162 | extern crate serde_derive;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>What does this mean? Why would this happen?</p>",
        "id": 237065781,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619974484
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/def_id/struct.StableCrateId.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/def_id/struct.StableCrateId.html</a> says</p>\n<blockquote>\n<p>A StableCrateId is a 64 bit hash of (crate-name, crate-disambiguator). It is to CrateNum what DefPathHash is to DefId. It is stable across compilation sessions.</p>\n</blockquote>\n<blockquote>\n<p>Since the ID is a hash value there is a (very small) chance that two crates end up with the same StableCrateId. The compiler will check for such collisions when loading crates and abort compilation in order to avoid further trouble.</p>\n</blockquote>\n<p>I don't see why that would happen here? <code>serde_derive</code> is the <em>same</em> crate in both cases, <code>serde_derive v1.0.125 (proc-macro)</code></p>",
        "id": 237065871,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619974567
    },
    {
        "content": "<p>That means that the crate has been compiled multiple times with different options, but the same name and disambiguator.</p>",
        "id": 237066121,
        "sender_full_name": "bjorn3",
        "timestamp": 1619974828
    },
    {
        "content": "<p>Is there a way to see what the options were?</p>",
        "id": 237066172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619974876
    },
    {
        "content": "<p>No, but I did see that both clippy and rustfmt compile it. I don't know if they share a target dir?</p>",
        "id": 237066313,
        "sender_full_name": "bjorn3",
        "timestamp": 1619975000
    },
    {
        "content": "<p>they do I think</p>",
        "id": 237066324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975035
    },
    {
        "content": "<p>ok cool, that means I just need clippy and rustfmt to have the same options passed</p>",
        "id": 237066370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975049
    },
    {
        "content": "<p>oh interesting the bug doesn't happen when I specify src/tools/rustfmt specifically (!!) despite not clearing the target dir</p>",
        "id": 237066438,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975142
    },
    {
        "content": "<p>I wonder if <code>make_run</code> is choosing a different target</p>",
        "id": 237066516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975204
    },
    {
        "content": "<p>Maybe you need to add <code>in_tree=true</code> for rusfmt to the <code>tool_extended!</code> invocation in <code>tool.rs</code>?</p>",
        "id": 237066519,
        "sender_full_name": "bjorn3",
        "timestamp": 1619975209
    },
    {
        "content": "<p>(this error only happens when cross-compiling for somereason)</p>",
        "id": 237066521,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20.22colliding.20StableCrateId.22.20mean.3F/near/237066519\">said</a>:</p>\n<blockquote>\n<p>Maybe you need to add <code>in_tree=true</code> for rusfmt to the <code>tool_extended!</code> invocation in <code>tool.rs</code>?</p>\n</blockquote>\n<p>hmm, this is only for <code>check</code> so I wouldn't <em>expect</em> that to be related, but I should update that anyway</p>",
        "id": 237066548,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975252
    },
    {
        "content": "<p>nope, didn't help</p>",
        "id": 237066675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975343
    },
    {
        "content": "<p>No clue what caused the issue then.</p>",
        "id": 237066871,
        "sender_full_name": "bjorn3",
        "timestamp": 1619975534
    },
    {
        "content": "<p>no problem, the hint about options is already very helpful :)</p>",
        "id": 237066901,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975563
    },
    {
        "content": "<p>ooh the <code>-C metadata</code> cargo passes is a hash of the arguments, right? I wonder if this is an argument added directly by bootstrap/bin/rustc so cargo doesn't know about it</p>",
        "id": 237066914,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975594
    },
    {
        "content": "<p>Rustbuild confuses me a lot. I am personally stuck with bootstrap somehow causing either cg_clif to link to stage0-rustc <a href=\"http://librustc_driver.so\">librustc_driver.so</a> when it should link to stage1-rustc or distributing the cg_clif for the previous stage.</p>",
        "id": 237066928,
        "sender_full_name": "bjorn3",
        "timestamp": 1619975629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20.22colliding.20StableCrateId.22.20mean.3F/near/237066914\">said</a>:</p>\n<blockquote>\n<p>ooh the <code>-C metadata</code> cargo passes is a hash of the arguments, right? I wonder if this is an argument added directly by bootstrap/bin/rustc so cargo doesn't know about it</p>\n</blockquote>\n<p>No, we tell cargo to extend <code>-Cmetadata</code> with a different value for different modes to avoid this kind of problems, but normally this kind of conflict can only happen between eg the standard library dependencies and dependencies of the rustc compiled against it or between the dependencies of rustc and a tool. It shouldn't happen between tools.</p>",
        "id": 237067056,
        "sender_full_name": "bjorn3",
        "timestamp": 1619975745
    },
    {
        "content": "<p>when you say \"shouldn't\" - shouldn't happen because all the options should be the same? or because the mode is the same?</p>",
        "id": 237067174,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619975848
    },
    {
        "content": "<p>also, these are different options to <em>serde_derive</em>, right, not to cargo_metadata?</p>",
        "id": 237067487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619976133
    },
    {
        "content": "<p>I wonder if it has to do with it being a proc-macro when cross-compiling</p>",
        "id": 237067502,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619976151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20.22colliding.20StableCrateId.22.20mean.3F/near/237067174\">said</a>:</p>\n<blockquote>\n<p>when you say \"shouldn't\" - shouldn't happen because all the options should be the same? or because the mode is the same?</p>\n</blockquote>\n<p>Because either the target dir should be different, the options are all the same and thus the dep is only compiled once, or cargo would use a different hash due to the different options.</p>",
        "id": 237067753,
        "sender_full_name": "bjorn3",
        "timestamp": 1619976475
    },
    {
        "content": "<p>oh ugh I found why I was having trouble debugging, I was only removing the target-specific dependencies</p>",
        "id": 237067906,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619976616
    },
    {
        "content": "<p>these are the args the first time, when compiling rustdoc:</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-SHIM] rustc serde_derive command: &quot;LD_LIBRARY_PATH&quot;=&quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/lib:/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps:/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/lib&quot; &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/bin/rustc&quot; &quot;--crate-name&quot; &quot;serde_derive&quot; &quot;/home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.125/src/lib.rs&quot; &quot;--error-format=json&quot; &quot;--json=diagnostic-rendered-ansi&quot; &quot;--crate-type&quot; &quot;proc-macro&quot; &quot;--emit=dep-info,link&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-C&quot; &quot;embed-bitcode=no&quot; &quot;-C&quot; &quot;debuginfo=1&quot; &quot;-C&quot; &quot;overflow-checks=off&quot; &quot;--cfg&quot; &quot;feature=\\&quot;default\\&quot;&quot; &quot;-C&quot; &quot;metadata=6ce80b6b2688a993&quot; &quot;-C&quot; &quot;extra-filename=-6ce80b6b2688a993&quot; &quot;--out-dir&quot; &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps&quot; &quot;-L&quot; &quot;dependency=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps&quot; &quot;--extern&quot; &quot;proc_macro2=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libproc_macro2-826cefb92e601aa8.rlib&quot; &quot;--extern&quot; &quot;quote=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libquote-25d80bdff0ef99a7.rlib&quot; &quot;--extern&quot; &quot;syn=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libsyn-07c274bdd5965fc2.rlib&quot; &quot;--extern&quot; &quot;proc_macro&quot; &quot;--cap-lints&quot; &quot;allow&quot; &quot;-Z&quot; &quot;binary-dep-depinfo&quot; &quot;--cfg&quot; &quot;underscore_consts&quot; &quot;-Wrust_2018_idioms&quot; &quot;-Wunused_lifetimes&quot;\n</code></pre></div>\n<p>and the second time when compiling clippy:</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-SHIM] rustc serde_derive command: &quot;LD_LIBRARY_PATH&quot;=&quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/lib:/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps:/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/lib&quot; &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/bin/rustc&quot; &quot;--crate-name&quot; &quot;serde_derive&quot; &quot;/home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.125/src/lib.rs&quot; &quot;--error-format=json&quot; &quot;--json=diagnostic-rendered-ansi&quot; &quot;--crate-type&quot; &quot;proc-macro&quot; &quot;--emit=dep-info,link&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-C&quot; &quot;embed-bitcode=no&quot; &quot;-C&quot; &quot;debuginfo=1&quot; &quot;-C&quot; &quot;overflow-checks=off&quot; &quot;--cfg&quot; &quot;feature=\\&quot;default\\&quot;&quot; &quot;-C&quot; &quot;metadata=0bf4af4d60ee3d6b&quot; &quot;-C&quot; &quot;extra-filename=-0bf4af4d60ee3d6b&quot; &quot;--out-dir&quot; &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps&quot; &quot;-L&quot; &quot;dependency=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps&quot; &quot;--extern&quot; &quot;proc_macro2=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libproc_macro2-826cefb92e601aa8.rlib&quot; &quot;--extern&quot; &quot;quote=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libquote-25d80bdff0ef99a7.rlib&quot; &quot;--extern&quot; &quot;syn=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libsyn-8ed8a8551127e698.rlib&quot; &quot;--extern&quot; &quot;proc_macro&quot; &quot;--cap-lints&quot; &quot;allow&quot; &quot;-Z&quot; &quot;binary-dep-depinfo&quot; &quot;--cfg&quot; &quot;underscore_consts&quot; &quot;-Wrust_2018_idioms&quot; &quot;-Wunused_lifetimes&quot;\n</code></pre></div>\n<p>and the third time when compiling rustfmt:</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-SHIM] rustc serde_derive command: &quot;LD_LIBRARY_PATH&quot;=&quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/lib:/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps:/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/lib&quot; &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/bin/rustc&quot; &quot;--crate-name&quot; &quot;serde_derive&quot; &quot;/home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/serde_derive-1.0.125/src/lib.rs&quot; &quot;--error-format=json&quot; &quot;--json=diagnostic-rendered-ansi&quot; &quot;--crate-type&quot; &quot;proc-macro&quot; &quot;--emit=dep-info,link&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;-C&quot; &quot;embed-bitcode=no&quot; &quot;-C&quot; &quot;debuginfo=1&quot; &quot;-C&quot; &quot;overflow-checks=off&quot; &quot;--cfg&quot; &quot;feature=\\&quot;default\\&quot;&quot; &quot;-C&quot; &quot;metadata=0bf4af4d60ee3d6b&quot; &quot;-C&quot; &quot;extra-filename=-0bf4af4d60ee3d6b&quot; &quot;--out-dir&quot; &quot;/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps&quot; &quot;-L&quot; &quot;dependency=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps&quot; &quot;--extern&quot; &quot;proc_macro2=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libproc_macro2-826cefb92e601aa8.rlib&quot; &quot;--extern&quot; &quot;quote=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libquote-25d80bdff0ef99a7.rlib&quot; &quot;--extern&quot; &quot;syn=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libsyn-8ed8a8551127e698.rlib&quot; &quot;--extern&quot; &quot;proc_macro&quot; &quot;--cap-lints&quot; &quot;allow&quot; &quot;-Z&quot; &quot;binary-dep-depinfo&quot; &quot;--cfg&quot; &quot;underscore_consts&quot; &quot;-Wrust_2018_idioms&quot; &quot;-Wunused_lifetimes&quot;\n</code></pre></div>",
        "id": 237068007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619976727
    },
    {
        "content": "<p>this is the difference between rustdoc and clippy:</p>\n<blockquote>\n<p>\"-C\" [-\"metadata=6ce80b6b2688a993\"-] {+\"metadata=0bf4af4d60ee3d6b\"+} \"-C\" [-\"extra-filename=-6ce80b6b2688a993\"-] {+\"extra-filename=-0bf4af4d60ee3d6b\"+} \"--extern\" [-\"syn=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libsyn-07c274bdd5965fc2.rlib\"-] {+\"syn=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps/libsyn-8ed8a8551127e698.rlib\"+}</p>\n</blockquote>",
        "id": 237068115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619976839
    },
    {
        "content": "<p>That \"colliding StableCrateId values\" error looks similar to these:<br>\n<a href=\"https://github.com/rust-lang/rust/issues/82991#issuecomment-799400945\">https://github.com/rust-lang/rust/issues/82991#issuecomment-799400945</a><br>\n<a href=\"https://github.com/rust-lang/rust/issues/82991#issuecomment-802862822\">https://github.com/rust-lang/rust/issues/82991#issuecomment-802862822</a></p>",
        "id": 237068184,
        "sender_full_name": "hyd-dev",
        "timestamp": 1619976872
    },
    {
        "content": "<p>but there is <em>no</em> difference between clippy and rustfmt</p>",
        "id": 237068194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619976883
    },
    {
        "content": "<p>ok yes <a href=\"https://github.com/rust-lang/rust/issues/56935\">https://github.com/rust-lang/rust/issues/56935</a> looks like the problem</p>",
        "id": 237068213,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619976909
    },
    {
        "content": "<p>I'm not sure the workaround is feasible here because it happens in a dependency, we'd have to patch cargo_metadata or serde or both</p>",
        "id": 237068332,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619977022
    },
    {
        "content": "<p>Another solution is to pin different version of serde for rustfmt and clippy lol</p>",
        "id": 237068756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619977482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Do you know why <code>add_to_sysroot</code> is in <code>tool_check_step</code>?  That is, why is <code>x.py check</code> copying everything to the sysroot?</p>",
        "id": 237070665,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619979229
    },
    {
        "content": "<p>Removing that seems to fix your problem.</p>",
        "id": 237070791,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619979337
    },
    {
        "content": "<p>Oh that's a really good point</p>",
        "id": 237070805,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619979354
    },
    {
        "content": "<p>x.py does that for libstd and the compiler because they're used by the compiler and tools respectively, but nothing depends on the tools</p>",
        "id": 237070877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619979402
    },
    {
        "content": "<p>Let me know if that doesn't work or causes other problems.  I'm stepping away for a bit to eat lunch, but I'll be around.</p>",
        "id": 237071057,
        "sender_full_name": "Eric Huss",
        "timestamp": 1619979564
    }
]