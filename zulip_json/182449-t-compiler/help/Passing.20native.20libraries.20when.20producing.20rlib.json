[
    {
        "content": "<p>Hi all,<br>\nI'm looking into rules_rust for Bazel and I noticed they currently pass all transitive native libraries to rustc (for example as <code>-lstatic=c++</code>) when producing rlib artifact. Is that necessary? Is rustc going to use them? My little project builds fine without them, but I might just be lucky :)</p>\n<p>Thank you!</p>",
        "id": 224450370,
        "sender_full_name": "Marcel Hlopko",
        "timestamp": 1611914610
    },
    {
        "content": "<p>That ensures that when a rust executable is produced, those static libraries are linked in.</p>",
        "id": 224461587,
        "sender_full_name": "bjorn3",
        "timestamp": 1611921917
    },
    {
        "content": "<p>Oh so when an rlib crate depends on a native library, the crate will remember the flag that needs to be passed when linking the binary? Therefore when linking the binary I don't need to pass the flag manually?</p>",
        "id": 224462970,
        "sender_full_name": "Marcel Hlopko",
        "timestamp": 1611923001
    },
    {
        "content": "<p>That is roughly it. For dylibs this is exactly correct, but for staticlibs, they are included into the generated<code>.rlib</code> directly as far as I know unless the unstable <code>static-nobundle</code> kind is used.</p>",
        "id": 224464925,
        "sender_full_name": "bjorn3",
        "timestamp": 1611924321
    },
    {
        "content": "<p>I'll try to read up on that, thank you! But if the build system I'm using is already tracking native libraries, I could not pass them on the library compilation, but only on binary linking, and it might work. How fragile do you think this approach is?</p>",
        "id": 224478694,
        "sender_full_name": "Marcel Hlopko",
        "timestamp": 1611931083
    }
]