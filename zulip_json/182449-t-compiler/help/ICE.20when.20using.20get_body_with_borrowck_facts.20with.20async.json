[
    {
        "content": "<p>I am calling <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_borrowck/consumers/fn.get_body_with_borrowck_facts.html\"><code>get_body_with_borrowck_facts</code></a> on an async function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When I do so, I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: broken MIR in DefId(0:6 ~ tmp[b158]::test) (bb0[0]): equate_inputs_and_outputs: `impl std::future::Future==impl std::future::Future` failed with `NoSolution`\n --&gt; /tmp/.tmp3QtvUR:3:1\n  |\n3 | / async fn test() {\n4 | |   ();\n5 | | }\n  | |_^\n  |\n  = note: delayed at compiler/rustc_borrowck/src/type_check/mod.rs:310:27\n\nthread &#39;rustc&#39; panicked at &#39;no errors encountered even though `delay_span_bug` issued&#39;, compiler/rustc_errors/src/lib.rs:1165:13\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/library/std/src/panicking.rs:517:5\n   1: core::panicking::panic_fmt\n             at /rustc/308dffd25cb55bbb4a1fbee9822cf82c6a5d012d/library/core/src/panicking.rs:103:14\n   2: core::panicking::panic_display\n   3: rustc_errors::HandlerInner::flush_delayed\n   4: &lt;rustc_errors::HandlerInner as core::ops::drop::Drop&gt;::drop\n   5: core::ptr::drop_in_place&lt;rustc_session::parse::ParseSess&gt;\n   6: &lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop\n   7: core::ptr::drop_in_place&lt;rustc_interface::interface::Compiler&gt;\n   8: rustc_span::with_source_map\n   9: scoped_tls::ScopedKey&lt;T&gt;::set\n</code></pre></div>\n<p>This error does not happen if I call <code>mir_borrowck</code> instead. Any ideas why this might be occurring?</p>",
        "id": 256510258,
        "sender_full_name": "Will Crichton",
        "timestamp": 1633570440
    },
    {
        "content": "<p>The docs say this:</p>\n<blockquote>\n<p>This function should never be invoked during a typical compilation session due to performance issues with Polonius.</p>\n<p>Note:</p>\n<ul>\n<li>This function will panic if the required body was already stolen. This can, for example, happen when requesting a body of a const function because they are evaluated during typechecking. The panic can be avoided by overriding the mir_borrowck query. You can find a complete example that shows how to do this at src/test/run-make/obtain-borrowck/.</li>\n<li>Polonius is highly unstable, so expect regular changes in its signature or other details.</li>\n</ul>\n</blockquote>\n<p>Perhaps it's because Polonius is highly unstable? Of course, I don't think it should be panicking on this code, but the instability could be part of the reason.</p>",
        "id": 256510509,
        "sender_full_name": "Noah Lev",
        "timestamp": 1633570631
    },
    {
        "content": "<p>I don't think it's inherently a Polonius problem. If I take the same code and do <code>cargo +nightly rustc --profile check -- -Z polonius</code> then it checks just fine.</p>",
        "id": 256510631,
        "sender_full_name": "Will Crichton",
        "timestamp": 1633570735
    },
    {
        "content": "<p>FWIW, this is hitting a path that calls <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_borrowck/src/type_check/mod.rs#L326-L331\"><code>mirbug</code></a>, which says:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// We sometimes see MIR failures (notably predicate failures) due to</span>\n<span class=\"w\">    </span><span class=\"c1\">// the fact that we check rvalue sized predicates here. So use `delay_span_bug`</span>\n<span class=\"w\">    </span><span class=\"c1\">// to avoid reporting bugs in those cases.</span>\n</code></pre></div>\n<p>I'm not sure if this means this isn't actually a bug? <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you're the last person to touch this function, do you know what the issue might be?</p>",
        "id": 256510922,
        "sender_full_name": "Will Crichton",
        "timestamp": 1633571015
    }
]