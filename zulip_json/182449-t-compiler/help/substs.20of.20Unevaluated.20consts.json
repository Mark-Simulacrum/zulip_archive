[
    {
        "content": "<p>Currently trying to fix <a href=\"https://github.com/rust-lang/rust/issues/72129#issuecomment-627181925\">https://github.com/rust-lang/rust/issues/72129#issuecomment-627181925</a></p>\n<div class=\"codehilite\"><pre><span></span><code>// run-pass\n#![feature(const_generics)]\n#![allow(incomplete_features, unused_braces)]\n\ntrait Bar&lt;T&gt; {}\nimpl&lt;T&gt; Bar&lt;T&gt; for [u8; {7}] {}\n\nstruct Foo&lt;const N: usize&gt; {}\nimpl&lt;const N: usize&gt; Foo&lt;N&gt;\nwhere\n    [u8; N]: Bar&lt;[(); N]&gt;,\n{\n    fn foo() {}\n}\n\nfn main() {\n    Foo::foo();\n}\n</code></pre></div>",
        "id": 198068394,
        "sender_full_name": "lcnr",
        "timestamp": 1589896346
    },
    {
        "content": "<p>While type checking main, we end up equating <code>Equate.tys([(); ConstVar(_#0c)], TyVar _#1t)</code></p>",
        "id": 198068721,
        "sender_full_name": "lcnr",
        "timestamp": 1589896470
    },
    {
        "content": "<p>This means that we instantiante <code>TyVar(_#1t)</code> as <code>[(); ConstVar(_#0c)]</code></p>",
        "id": 198068807,
        "sender_full_name": "lcnr",
        "timestamp": 1589896514
    },
    {
        "content": "<p>To do so, we generalize <code>[(); ConstVar(_#0c)]</code>, which causes a problem, as <code>ConstVar(_#0c)</code> is already known as <code>Const { ty: usize, val: Unevaluated(DefId(0:7 ~ issue_69654_run_pass[317d]::{{impl}}[0]::{{constant}}[0]), [TyVar(_#1t)], None) }</code></p>",
        "id": 198068980,
        "sender_full_name": "lcnr",
        "timestamp": 1589896579
    },
    {
        "content": "<p>We therefore store <code>TyVar(_#1t) := Const { ty: usize, val: Unevaluated(DefId(0:7 ~ issue_69654_run_pass[317d]::{{impl}}[0]::{{constant}}[0]), [TyVar(_#1t)], None) }</code> in the unification table, causing a stack overflow when trying to resolve this later on.</p>",
        "id": 198069140,
        "sender_full_name": "lcnr",
        "timestamp": 1589896647
    },
    {
        "content": "<p>I realized I don't even have a clear question to ask here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Both helpful and unhelpful suggestions are always welcome though.</p>",
        "id": 198070303,
        "sender_full_name": "lcnr",
        "timestamp": 1589897112
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/72351/\">https://github.com/rust-lang/rust/pull/72351/</a> for now</p>",
        "id": 198077176,
        "sender_full_name": "lcnr",
        "timestamp": 1589899811
    },
    {
        "content": "<p>I think I now understand the problem here, <a href=\"https://github.com/rust-lang/rust/issues/72351\">#72351</a> is incorrect afaict.</p>",
        "id": 198106569,
        "sender_full_name": "lcnr",
        "timestamp": 1589912270
    },
    {
        "content": "<p>Due to lazy normalization <code>{7}</code> remains as <code>ConstKind::Unevaluated</code> and has <code>T</code> as a subst as it should be able to use <code>T</code> in the future, lets say for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198106806,
        "sender_full_name": "lcnr",
        "timestamp": 1589912372
    },
    {
        "content": "<p>During type inference, we assemble the candidates for <code>Foo::foo</code>.<br>\nInside of <code>assemble_candidates_from_impl</code> we find an impl of <code>foo</code> and have to to satisfy the where clause <code>[u8; N]: Bar&lt;[(); N]&gt;,</code>.</p>",
        "id": 198107066,
        "sender_full_name": "lcnr",
        "timestamp": 1589912518
    },
    {
        "content": "<p>We then first unify <code>[u8; N]</code> with <code>[u8; {7}]</code> =&gt; <code>N == {7}</code>.</p>",
        "id": 198107187,
        "sender_full_name": "lcnr",
        "timestamp": 1589912584
    },
    {
        "content": "<p>This means <code>N</code> now has <code>T</code> in its subst.</p>",
        "id": 198107222,
        "sender_full_name": "lcnr",
        "timestamp": 1589912606
    },
    {
        "content": "<p>When we now unify <code>Bar&lt;T&gt;</code> with <code>Bar[(); N]</code> we set <code>T == [(); N]</code>. Which means <code>T</code> now contains itself as a substitution.</p>",
        "id": 198107320,
        "sender_full_name": "lcnr",
        "timestamp": 1589912657
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you understand this explanation/does this makes sense to you?</p>",
        "id": 198107382,
        "sender_full_name": "lcnr",
        "timestamp": 1589912704
    },
    {
        "content": "<p>And if so, how could we proceed here?</p>",
        "id": 198107397,
        "sender_full_name": "lcnr",
        "timestamp": 1589912713
    },
    {
        "content": "<p>I'll try to read and reply later this evening.</p>",
        "id": 198112256,
        "sender_full_name": "varkor",
        "timestamp": 1589915123
    },
    {
        "content": "<p>Hmm I am I think too tired to give useful feedback here as well :)</p>",
        "id": 198140494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589931364
    },
    {
        "content": "<p>I managed a slightly more minimal repro which still causes a stack overflow:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">//                                  ^ ConstKind::Unevaluated with substs [N]</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"n\">M</span><span class=\"o\">&gt;</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">M</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// We must satisfy `Const&lt;M&gt;: A&lt;M&gt;` here.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// This has an impl candidate with `Const&lt;{ 6 + 1 }&gt;: A&lt;N&gt;`.</span>\n<span class=\"w\">    </span><span class=\"c1\">// We now equate the `TraitRef`s `Const&lt;M&gt;: A&lt;M&gt;` with `Const&lt;{ 6 + 1 }&gt;: A&lt;N&gt;`.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// `Const&lt;M&gt; == Const&lt;{ 6 + 1 }&gt;` results in `M == ConstKind::Unevaluated with substs [N]`.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// `A&lt;M&gt; == A&lt;N&gt;` =&gt; `M == N` =&gt; `N == ConstKind::Unevaluated with substs [N]`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198163517,
        "sender_full_name": "lcnr",
        "timestamp": 1589960159
    },
    {
        "content": "<p>Also relevant here is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">V</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// This cause an ICE.</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">V</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// More accurately this use causes an ICE.</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201618747,
        "sender_full_name": "lcnr",
        "timestamp": 1592839039
    },
    {
        "content": "<p>With lazy norm, LEN is <code>ConstKind::Unevaluated(..., substs = [T])</code> which causes an ICE</p>",
        "id": 201618854,
        "sender_full_name": "lcnr",
        "timestamp": 1592839082
    },
    {
        "content": "<p>which is the same reason this has a cycle error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LEN</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">hoge</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LEN</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201619302,
        "sender_full_name": "lcnr",
        "timestamp": 1592839278
    },
    {
        "content": "<p>so... lazy normalization isn't actually normalizing when needed?</p>",
        "id": 201620514,
        "sender_full_name": "oli",
        "timestamp": 1592839790
    },
    {
        "content": "<p>IMO the problem is generic params should not contain itself as a subst</p>",
        "id": 201620612,
        "sender_full_name": "lcnr",
        "timestamp": 1592839814
    },
    {
        "content": "<p>So I think it is fine for <code>LEN</code> to remain unnormalized</p>",
        "id": 201620667,
        "sender_full_name": "lcnr",
        "timestamp": 1592839838
    },
    {
        "content": "<p>but it shouldn't have access to its parent subst</p>",
        "id": 201620714,
        "sender_full_name": "lcnr",
        "timestamp": 1592839860
    },
    {
        "content": "<p>But I am not completely sure about that and have to look at how this is done for types</p>",
        "id": 201620790,
        "sender_full_name": "lcnr",
        "timestamp": 1592839901
    },
    {
        "content": "<p>Ok, so afaict it's just not possible to have a default type with substs <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201629867,
        "sender_full_name": "lcnr",
        "timestamp": 1592843890
    },
    {
        "content": "<p>*problematic substs</p>",
        "id": 201629945,
        "sender_full_name": "lcnr",
        "timestamp": 1592843942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> looking at the three above examples, I think the \"easiest\" solution for this mess is to stop using the parent generics in <code>AnonConst</code>s and instead use some kind of visitor to only include the relevant parameters in the substs.</p>\n<p>I am not exactly sure how well this works and there are probably a lot of complications I did not think of yet. Do you think this is feasable/useful?</p>",
        "id": 201633404,
        "sender_full_name": "lcnr",
        "timestamp": 1592845588
    },
    {
        "content": "<p>/me takes a peek and starts screaming</p>",
        "id": 201633636,
        "sender_full_name": "eddyb",
        "timestamp": 1592845711
    },
    {
        "content": "<p>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p>",
        "id": 201633652,
        "sender_full_name": "lcnr",
        "timestamp": 1592845723
    },
    {
        "content": "<p>let me join</p>",
        "id": 201633662,
        "sender_full_name": "lcnr",
        "timestamp": 1592845729
    },
    {
        "content": "<p>this basically the same thing as the hack we use to ban type parameter defaults from seeing type parameters <em>after</em> them as being in scope</p>",
        "id": 201633689,
        "sender_full_name": "eddyb",
        "timestamp": 1592845747
    },
    {
        "content": "<p>type parameters work during resolution</p>",
        "id": 201633731,
        "sender_full_name": "lcnr",
        "timestamp": 1592845774
    },
    {
        "content": "<p>for <code>const X: [u8; LEN]</code> - the fix is easy, just don't have generics in scope at all. we don't support them</p>",
        "id": 201633735,
        "sender_full_name": "eddyb",
        "timestamp": 1592845775
    },
    {
        "content": "<p>for type parameter defaults, it's worse</p>",
        "id": 201633753,
        "sender_full_name": "eddyb",
        "timestamp": 1592845788
    },
    {
        "content": "<p>basically we allow <code>struct Foo&lt;A, B = A&gt;(...);</code> but not <code>&lt;A = B, B&gt;</code></p>",
        "id": 201633838,
        "sender_full_name": "eddyb",
        "timestamp": 1592845809
    },
    {
        "content": "<p>jup</p>",
        "id": 201633849,
        "sender_full_name": "lcnr",
        "timestamp": 1592845819
    },
    {
        "content": "<p>but that's done <del>syntactically</del> (well, at name resolution time)</p>",
        "id": 201633858,
        "sender_full_name": "eddyb",
        "timestamp": 1592845821
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201633867,
        "sender_full_name": "lcnr",
        "timestamp": 1592845827
    },
    {
        "content": "<p>and there is no equivalent in the parent generics system</p>",
        "id": 201633876,
        "sender_full_name": "eddyb",
        "timestamp": 1592845830
    },
    {
        "content": "<p>just ban const expressions in type param defaults from using <em>any</em> generics in scope</p>",
        "id": 201633964,
        "sender_full_name": "eddyb",
        "timestamp": 1592845883
    },
    {
        "content": "<p>I guess?</p>",
        "id": 201633969,
        "sender_full_name": "eddyb",
        "timestamp": 1592845886
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">//                                  ^ ConstKind::Unevaluated with substs [N]</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"n\">M</span><span class=\"o\">&gt;</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">M</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// We must satisfy `Const&lt;M&gt;: A&lt;M&gt;` here.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// This has an impl candidate with `Const&lt;{ 6 + 1 }&gt;: A&lt;N&gt;`.</span>\n<span class=\"w\">    </span><span class=\"c1\">// We now equate the `TraitRef`s `Const&lt;M&gt;: A&lt;M&gt;` with `Const&lt;{ 6 + 1 }&gt;: A&lt;N&gt;`.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// `Const&lt;M&gt; == Const&lt;{ 6 + 1 }&gt;` results in `M == ConstKind::Unevaluated with substs [N]`.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// `A&lt;M&gt; == A&lt;N&gt;` =&gt; `M == N` =&gt; `N == ConstKind::Unevaluated with substs [N]`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201634028,
        "sender_full_name": "lcnr",
        "timestamp": 1592845920
    },
    {
        "content": "<p>then you can do the same treatment as in types of const params</p>",
        "id": 201634048,
        "sender_full_name": "eddyb",
        "timestamp": 1592845922
    },
    {
        "content": "<p>doesn't fix that though</p>",
        "id": 201634075,
        "sender_full_name": "lcnr",
        "timestamp": 1592845927
    },
    {
        "content": "<p>I think that one is fine</p>",
        "id": 201634102,
        "sender_full_name": "eddyb",
        "timestamp": 1592845946
    },
    {
        "content": "<p>in that it's one of the situations that requires lazy normalization to work</p>",
        "id": 201634138,
        "sender_full_name": "eddyb",
        "timestamp": 1592845965
    },
    {
        "content": "<p>we already have lazy norm</p>",
        "id": 201634162,
        "sender_full_name": "lcnr",
        "timestamp": 1592845977
    },
    {
        "content": "<p>maybe it's not lazy enough :P</p>",
        "id": 201634185,
        "sender_full_name": "eddyb",
        "timestamp": 1592845986
    },
    {
        "content": "<p>both <code>impl</code> headers and <code>where</code> clauses are the problem situations</p>",
        "id": 201634207,
        "sender_full_name": "eddyb",
        "timestamp": 1592845994
    },
    {
        "content": "<p>there were aspects skinny121 was going to address after the initial PRs, that they never got to: perhaps that's one of the situations</p>",
        "id": 201634248,
        "sender_full_name": "varkor",
        "timestamp": 1592846023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/substs.20of.20Unevaluated.20consts/near/201634185\">said</a>:</p>\n<blockquote>\n<p>maybe it's not lazy enough :P</p>\n</blockquote>\n<p>{ 6 + 1 } now remains  <code>ConstKind::Unevaluated</code></p>",
        "id": 201634339,
        "sender_full_name": "lcnr",
        "timestamp": 1592846050
    },
    {
        "content": "<p>the explanation doesn't entirely track: miri is designed to allow evaluating that with arbitrary substs since <code>N</code> isn't used in the expression</p>",
        "id": 201634341,
        "sender_full_name": "eddyb",
        "timestamp": 1592846051
    },
    {
        "content": "<p>okay maybe it's <em>too</em> lazy</p>",
        "id": 201634356,
        "sender_full_name": "eddyb",
        "timestamp": 1592846062
    },
    {
        "content": "<p>but an on-demand normalization would succeed</p>",
        "id": 201634369,
        "sender_full_name": "eddyb",
        "timestamp": 1592846073
    },
    {
        "content": "<p>no matter the substs</p>",
        "id": 201634374,
        "sender_full_name": "eddyb",
        "timestamp": 1592846077
    },
    {
        "content": "<p>maybe something checks that the substs are concrete? that would be wrong</p>",
        "id": 201634387,
        "sender_full_name": "eddyb",
        "timestamp": 1592846087
    },
    {
        "content": "<p>(again, the system is designed for polymorphic evaluation)</p>",
        "id": 201634420,
        "sender_full_name": "eddyb",
        "timestamp": 1592846103
    },
    {
        "content": "<p>The above example fails because an infer var references itself</p>",
        "id": 201634514,
        "sender_full_name": "lcnr",
        "timestamp": 1592846145
    },
    {
        "content": "<p>this is different from the situation with types inside either const param types or type param defaults, which can cause some unfortunate cycles</p>",
        "id": 201634521,
        "sender_full_name": "eddyb",
        "timestamp": 1592846149
    },
    {
        "content": "<p>ah lol</p>",
        "id": 201634542,
        "sender_full_name": "eddyb",
        "timestamp": 1592846159
    },
    {
        "content": "<p>causing a happy little stack overflow</p>",
        "id": 201634609,
        "sender_full_name": "lcnr",
        "timestamp": 1592846181
    },
    {
        "content": "<p>right, I see. <code>N = ANON_CONST::&lt;N&gt;</code></p>",
        "id": 201634629,
        "sender_full_name": "eddyb",
        "timestamp": 1592846193
    },
    {
        "content": "<p>where <code>ANON_CONST</code> doesn't use <code>N</code></p>",
        "id": 201634641,
        "sender_full_name": "eddyb",
        "timestamp": 1592846202
    },
    {
        "content": "<p>that's funny. I think that's a bug in the inference cycle detection? (which I don't even think is working if you're seeing stack overflows)</p>",
        "id": 201634685,
        "sender_full_name": "eddyb",
        "timestamp": 1592846233
    },
    {
        "content": "<p>pretty sure for types you get an error</p>",
        "id": 201634704,
        "sender_full_name": "eddyb",
        "timestamp": 1592846241
    },
    {
        "content": "<p>It is, but the example should still compile...</p>",
        "id": 201634759,
        "sender_full_name": "lcnr",
        "timestamp": 1592846274
    },
    {
        "content": "<p>you want to see this error <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=65e9f16b6945f605239d95b2bbd67140\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=65e9f16b6945f605239d95b2bbd67140</a></p>",
        "id": 201634767,
        "sender_full_name": "eddyb",
        "timestamp": 1592846278
    },
    {
        "content": "<p>{ 6 + 1 } just really shouldn't rely on <code>N</code></p>",
        "id": 201634812,
        "sender_full_name": "lcnr",
        "timestamp": 1592846289
    },
    {
        "content": "<p>only after you can reliably get an error instead of an ICE, you can change the behavior</p>",
        "id": 201634861,
        "sender_full_name": "eddyb",
        "timestamp": 1592846316
    },
    {
        "content": "<p>but the naive semantics should result in an error like that</p>",
        "id": 201634872,
        "sender_full_name": "eddyb",
        "timestamp": 1592846327
    },
    {
        "content": "<p>Then let me first implement the naive semantics <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 201634913,
        "sender_full_name": "lcnr",
        "timestamp": 1592846356
    },
    {
        "content": "<p>I still believe we have to stop using the parent generics though</p>",
        "id": 201634941,
        "sender_full_name": "lcnr",
        "timestamp": 1592846371
    },
    {
        "content": "<p>note that \"infinite size\" refers to the type being infinite in its definition, not <code>size_of</code> being infinite</p>",
        "id": 201634946,
        "sender_full_name": "eddyb",
        "timestamp": 1592846376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> that would be a tragedy IMO since that's what we've been striving to do for years</p>",
        "id": 201634968,
        "sender_full_name": "eddyb",
        "timestamp": 1592846389
    },
    {
        "content": "<p>~ <em>I write sins not tragedies</em> ~</p>",
        "id": 201635078,
        "sender_full_name": "lcnr",
        "timestamp": 1592846434
    },
    {
        "content": "<p>anyway, somewhat curious how <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> feels about breaking an inference cycle of the form <code>$N = ANON_CONST::&lt;$N&gt;</code> by trying to evaluate <code>ANON_CONST</code> and hoping it doesn't depend on <code>$N</code></p>",
        "id": 201635127,
        "sender_full_name": "eddyb",
        "timestamp": 1592846459
    },
    {
        "content": "<p>I think this stops working once an <code>ANON_CONST</code> depends on some (but not all) of its parents generic variables</p>",
        "id": 201635331,
        "sender_full_name": "lcnr",
        "timestamp": 1592846544
    },
    {
        "content": "<p>So we can't eval it eagerly, because it's still polymorphic</p>",
        "id": 201635363,
        "sender_full_name": "lcnr",
        "timestamp": 1592846561
    },
    {
        "content": "<p>but you can if what it depends on is specified</p>",
        "id": 201635407,
        "sender_full_name": "eddyb",
        "timestamp": 1592846590
    },
    {
        "content": "<p>since you don't evaluate either fully polymorphically or fully concretely</p>",
        "id": 201635437,
        "sender_full_name": "eddyb",
        "timestamp": 1592846609
    },
    {
        "content": "<p>you evaluate for some given substs</p>",
        "id": 201635455,
        "sender_full_name": "eddyb",
        "timestamp": 1592846618
    },
    {
        "content": "<p>e.g. it could be <code>$N = ANON_CONST::&lt;1, 2, $N, 3&gt;</code> instead and the substs that miri would see would be <code>exists X. [1, 2, X, 3]</code> or similar</p>",
        "id": 201635622,
        "sender_full_name": "eddyb",
        "timestamp": 1592846688
    },
    {
        "content": "<p>(via canonicalization)</p>",
        "id": 201635663,
        "sender_full_name": "eddyb",
        "timestamp": 1592846708
    },
    {
        "content": "<p>My concern is <code>$N = ANON_CONST::&lt;1, $M, $N, 3&gt;</code>, where $M is also not yet inferred</p>",
        "id": 201635812,
        "sender_full_name": "lcnr",
        "timestamp": 1592846768
    },
    {
        "content": "<p>but wouldn't that imply that there is a cycle? if M is needed and uninferrable</p>",
        "id": 201635954,
        "sender_full_name": "eddyb",
        "timestamp": 1592846840
    },
    {
        "content": "<p>not sure, I don't fully grasp how <code>$N = ANON_CONST::&lt;..., $N, ...&gt;</code> can be handled so it might be fine</p>",
        "id": 201636662,
        "sender_full_name": "lcnr",
        "timestamp": 1592847202
    },
    {
        "content": "<blockquote>\n<p>that's funny. I think that's a bug in the inference cycle detection? (which I don't even think is working if you're seeing stack overflows)</p>\n</blockquote>\n<p>I can go ahead and fix this first and then try to eagerly eval <code>ANON_CONST::&lt;N&gt;</code> and see if this fixes everything</p>",
        "id": 201636929,
        "sender_full_name": "lcnr",
        "timestamp": 1592847338
    },
    {
        "content": "<p><strong>BORN FROM THE ASHES</strong></p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/72351\">https://github.com/rust-lang/rust/pull/72351</a></p>",
        "id": 201785486,
        "sender_full_name": "lcnr",
        "timestamp": 1592947489
    },
    {
        "content": "<p>I already had a fix for the inference cycle which I closed because I wasn't sure if this is the correct solution <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201785530,
        "sender_full_name": "lcnr",
        "timestamp": 1592947520
    },
    {
        "content": "<p>not sure if you want to get pinged here <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 201785562,
        "sender_full_name": "lcnr",
        "timestamp": 1592947540
    }
]