[
    {
        "content": "<p>I'm trying to build rustc to be invoked in a WebAssembly environment. The end goal here is to be able to compile Rust code from within a web browser. Has there been any previous effort on this? How did it go? I imagine it would be harder then just running <code>./x.py build --target wasm32-unknown-unknown</code></p>",
        "id": 268193773,
        "sender_full_name": "Hamza",
        "timestamp": 1642350311
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/miri/issues/722\">https://github.com/rust-lang/miri/issues/722</a>. tl;dr: it is possible to compile for wasm32-wasi (not wasm32-unknown-unknown as that doesn't have fs support) with a couple of patches when you aren't using llvm as backend.</p>",
        "id": 268194983,
        "sender_full_name": "bjorn3",
        "timestamp": 1642351975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I wouldn't be able to run it in browser though. Is that literally impossible or just needs some work that no one has put in yet?</p>",
        "id": 268198109,
        "sender_full_name": "Hamza",
        "timestamp": 1642355577
    },
    {
        "content": "<p>I wrote a wasm32-wasi shim capable enough of running rustc: <a href=\"https://github.com/bjorn3/browser_wasi_shim\">https://github.com/bjorn3/browser_wasi_shim</a> You can set the arguments at <a href=\"https://github.com/bjorn3/browser_wasi_shim/blob/ecf3286faf4081749a40577f2b6e6505dd76ff1f/rustc.html#L20\">https://github.com/bjorn3/browser_wasi_shim/blob/ecf3286faf4081749a40577f2b6e6505dd76ff1f/rustc.html#L20</a> and you will need to change the filenames at <a href=\"https://github.com/bjorn3/browser_wasi_shim/blob/ecf3286faf4081749a40577f2b6e6505dd76ff1f/rustc.html#L40-L53\">https://github.com/bjorn3/browser_wasi_shim/blob/ecf3286faf4081749a40577f2b6e6505dd76ff1f/rustc.html#L40-L53</a> to match those in the <code>lib/rustlib/x86_64-unknown-linux-gnu/lib</code> directory of the rustc build directory.</p>",
        "id": 268198207,
        "sender_full_name": "bjorn3",
        "timestamp": 1642355705
    },
    {
        "content": "<p>Rustc needs a filesystem presented to it one way or another.</p>",
        "id": 268198273,
        "sender_full_name": "bjorn3",
        "timestamp": 1642355811
    },
    {
        "content": "<p>Great, thanks. So if I'm building rustc to work with it, <code>./x.py build --target wasm32-wasi --host wasm32-wasi</code> would work? or are there some tweaks needed</p>",
        "id": 268198280,
        "sender_full_name": "Hamza",
        "timestamp": 1642355826
    },
    {
        "content": "<p>I imagine we could emulate a file system by using the file system API and provide it to rustc</p>",
        "id": 268198336,
        "sender_full_name": "Hamza",
        "timestamp": 1642355895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455331\">Hamza</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268198336\">said</a>:</p>\n<blockquote>\n<p>I imagine we could emulate a file system by using the file system API and provide it to rustc</p>\n</blockquote>\n<p>My browser_wasi_shim could be changed to use the filesystem api of the browser, however I don't use chrome so my browser doesn't support it. For this reason I wrote my own vfs for it.</p>",
        "id": 268198370,
        "sender_full_name": "bjorn3",
        "timestamp": 1642355978
    },
    {
        "content": "<p>I also don't use chrome. I'll use your shim and see how it goes</p>",
        "id": 268198508,
        "sender_full_name": "Hamza",
        "timestamp": 1642356071
    },
    {
        "content": "<p>What about building rustc though? Can I build it using the command I mentioned above</p>",
        "id": 268198525,
        "sender_full_name": "Hamza",
        "timestamp": 1642356102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455331\">Hamza</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268198280\">said</a>:</p>\n<blockquote>\n<p>Great, thanks. So if I'm building rustc to work with it, <code>./x.py build --target wasm32-wasi --host wasm32-wasi</code> would work? or are there some tweaks needed</p>\n</blockquote>\n<p>There are a couple of patches that need to be applied. If you want to run miri in the browser you can use apply <a href=\"https://github.com/rust-lang/rust/commit/bb6d1d0a0966c04a75389348642e11ae44c86514\">https://github.com/rust-lang/rust/commit/bb6d1d0a0966c04a75389348642e11ae44c86514</a> (part of the changes in this commit are already upstreamed) If you want to compile code in the browser you will have to use cg_clif and<code>--target x86_64-unknown-linux-gnu</code> (as cg_clif can't compile for wasm currently) This would roughly entail applying part of the aforementioned commit, removing <code>crate-type = [\"dylib\"]</code> from <code>compiler/rustc_codegen_cranelift/Cargo.toml</code>, adding all necessary rustc dependencies to this file, adding <code>compiler/rustc_codegen_cranelift</code> as dependency in <code>compiler/rustc_interface/Cargo.toml</code> and replacing <code>_ =&gt; get_codegen_sysroot(backend_name),</code> in <code>rustc_interface::util::get_builtin_codegen_backend</code> with <code>_ =&gt; rustc_codegen_cranelift::__rustc_codegen_backend()</code>.</p>",
        "id": 268198687,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356327
    },
    {
        "content": "<p>And also adding <code>codegen-backends = []</code> to <code>config.toml</code> to prevent building cg_llvm.</p>",
        "id": 268198704,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356356
    },
    {
        "content": "<p>Wait, that would attempt to build rustc for wasm using cg_clif which isn't supported yet. I believe you have to roughly follow the instructions in <a href=\"https://github.com/rust-lang/miri/issues/722#issuecomment-819831196\">https://github.com/rust-lang/miri/issues/722#issuecomment-819831196</a> to actually build it. (the instructions are for miri, but can be adapted for cg_clif)</p>",
        "id": 268198841,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356486
    },
    {
        "content": "<p>What's <code>cg_clif</code>?</p>",
        "id": 268198853,
        "sender_full_name": "Hamza",
        "timestamp": 1642356516
    },
    {
        "content": "<p>rustc_codegen_cranelift (<a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">https://github.com/bjorn3/rustc_codegen_cranelift</a>)</p>",
        "id": 268198866,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356538
    },
    {
        "content": "<p>(This is my first time working with compiler)</p>",
        "id": 268198867,
        "sender_full_name": "Hamza",
        "timestamp": 1642356538
    },
    {
        "content": "<p>It is an alternative and experimental codegen backend based on Cranelift instead of LLVM.</p>",
        "id": 268198876,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356553
    },
    {
        "content": "<p>LLVM can't be used for this?</p>",
        "id": 268198878,
        "sender_full_name": "Hamza",
        "timestamp": 1642356562
    },
    {
        "content": "<p>Cranelift is written in pure rust and can easily be compiled for wasm.</p>",
        "id": 268198880,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356567
    },
    {
        "content": "<p>It is possible LLVM can be compiled for wasm too, but afaik the way rustc uses it mmap is used which wasm doesn't support.</p>",
        "id": 268198947,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356640
    },
    {
        "content": "<p>Ah, understandable. I'm waiting for <code>src/llvm-project</code> submodule to finish updating. I'll try applying these patches:</p>\n<ol>\n<li>remove <code>crate-type = [\"dylib\"]</code> from <code>compiler/rustc_codegen_cranelift/Cargo.toml</code></li>\n<li>add all necessary rustc dependencies to <code>compiler/rustc_codegen_cranelift/Cargo.toml</code> file</li>\n<li>adding <code>compiler/rustc_codegen_cranelift</code> as dependency in <code>compiler/rustc_interface/Cargo.toml</code>.</li>\n<li>replace <code>_ =&gt; get_codegen_sysroot(backend_name</code>), in <code>rustc_interface::util::get_builtin_codegen_backend</code> with <code>_ =&gt; rustc_codegen_cranelift::__rustc_codegen_backend()</code>.</li>\n</ol>\n<p>then build with <code>./x.py --target x86_64-unknown-linux-gnu --host wasm32-wasi</code></p>\n<p>For point 2, what are the necessary dependencies?</p>",
        "id": 268199087,
        "sender_full_name": "Hamza",
        "timestamp": 1642356827
    },
    {
        "content": "<p>rustc_middle, rustc_ast, rustc_codegen_ssa, rustc_data_structures, rustc_errors, rustc_fs_util, rustc_hir, rustc_incremental, rustc_index, rustc_interface, rustc_metadata, rustc_session, rustc_span, rustc_target</p>\n<p>Also I forgot that</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(unused_extern_crates)]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">rustc_driver</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>needs to be removed from <code>compiler/rustc_codegen_cranelift/lib.rs</code>.</p>",
        "id": 268199160,
        "sender_full_name": "bjorn3",
        "timestamp": 1642356920
    },
    {
        "content": "<p>rustc_codegen_cranelift can't depend on rustc_interface because in step 3, it was added as a dependency</p>",
        "id": 268199812,
        "sender_full_name": "Hamza",
        "timestamp": 1642357837
    },
    {
        "content": "<p>causes a cyclic dependency</p>",
        "id": 268199816,
        "sender_full_name": "Hamza",
        "timestamp": 1642357844
    },
    {
        "content": "<p>Right. The only use is in <code>compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs</code> (<code>rustc_interface::util::version_str().unwrap_or(\"unknown version\")</code>). Replacing it with <code>\"\"</code> is fine.</p>",
        "id": 268199846,
        "sender_full_name": "bjorn3",
        "timestamp": 1642357915
    },
    {
        "content": "<p>Great, it's compiling. This is the patch that I ended up with: <a href=\"https://github.com/hamza1311/rust/commit/702c995a6739d2771f63b60e7b4dd3b95f33c980\">https://github.com/hamza1311/rust/commit/702c995a6739d2771f63b60e7b4dd3b95f33c980</a></p>",
        "id": 268199988,
        "sender_full_name": "Hamza",
        "timestamp": 1642358075
    },
    {
        "content": "<p>I think you will also need to comment out the <code>extern crate rustc_interface;</code> in <a href=\"http://lib.rs\">lib.rs</a>.</p>",
        "id": 268200008,
        "sender_full_name": "bjorn3",
        "timestamp": 1642358120
    },
    {
        "content": "<p>In addition <code>rustc_interface::util::scoped_thread</code> needs to be replaced with a simple <code>f()</code> call. Otherwise it will panic at runtime trying to spawn a thread.</p>",
        "id": 268200080,
        "sender_full_name": "bjorn3",
        "timestamp": 1642358203
    },
    {
        "content": "<p>And <code>crate-type = [\"dylib\"]</code> needs to be removed from <code>compiler/rustc_driver/Cargo.toml</code> too.</p>",
        "id": 268200157,
        "sender_full_name": "bjorn3",
        "timestamp": 1642358289
    },
    {
        "content": "<p>Other than that I think the patch is fine.</p>",
        "id": 268200173,
        "sender_full_name": "bjorn3",
        "timestamp": 1642358332
    },
    {
        "content": "<p>Great. Just pushed those changes here at: <a href=\"https://github.com/hamza1311/rust/commit/9faaeb0de3621889bcb80da3ba665dbdf5f9c504\">https://github.com/hamza1311/rust/commit/9faaeb0de3621889bcb80da3ba665dbdf5f9c504</a></p>",
        "id": 268200217,
        "sender_full_name": "Hamza",
        "timestamp": 1642358402
    },
    {
        "content": "<p><code>x.py</code> fails because of warnings. Instead of going though and fixing the warnings, how can I remove the <code>-D warnings</code></p>",
        "id": 268200437,
        "sender_full_name": "Hamza",
        "timestamp": 1642358669
    },
    {
        "content": "<p>You can set <code>deny-warnings = false</code> in <code>config.toml</code>.</p>",
        "id": 268200631,
        "sender_full_name": "bjorn3",
        "timestamp": 1642358970
    },
    {
        "content": "<p>One of those changes is giving me an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"err\">`</span><span class=\"k\">match</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">arms</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_interface</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">261</span>:<span class=\"mi\">18</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">256</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\">         </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">backend_name</span><span class=\"p\">.</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">DEFAULT_CODEGEN_BACKEND</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">257</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">filename</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">filename</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"sc\">'.'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">load_backend_from_dylib</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                                                   </span><span class=\"o\">------------------------------------------</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">CodegenBackend</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">258</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"llvm\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"mi\">259</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"s\">\"llvm\"</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rustc_codegen_llvm</span>::<span class=\"n\">LlvmCodegenBackend</span>::<span class=\"n\">new</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">-------------------------------------------</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">CodegenBackend</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">260</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"c1\">// backend_name =&gt; get_codegen_sysroot(maybe_sysroot, backend_name),</span>\n<span class=\"mi\">261</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">rustc_codegen_cranelift</span>::<span class=\"n\">__rustc_codegen_backend</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                  </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"mi\">262</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_________</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">match</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">arms</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pointer</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">CodegenBackend</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">                   </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">CodegenBackend</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268200863,
        "sender_full_name": "Hamza",
        "timestamp": 1642359264
    },
    {
        "content": "<p>Wait, seems like i don't need to call the function</p>",
        "id": 268200901,
        "sender_full_name": "Hamza",
        "timestamp": 1642359329
    },
    {
        "content": "<p>More error...</p>\n<div class=\"codehilite\"><pre><span></span><code>CMake Error at /usr/share/cmake/Modules/CMakeTestCCompiler.cmake:69 (message):\n  The C compiler\n\n    &quot;/usr/bin/clang&quot;\n\n  is not able to compile a simple test program.\n\n  It fails with the following output:\n\n    Change Dir: /home/hamza/code/rust-lang/rust/build/wasm32-unknown-unknown/llvm/build/CMakeFiles/CMakeTmp\n\n    Run Build Command(s):/usr/bin/ninja cmTC_80bf3 &amp;&amp; [1/2] Building C object CMakeFiles/cmTC_80bf3.dir/testCCompiler.c.o\n    [2/2] Linking C executable cmTC_80bf3\n    FAILED: cmTC_80bf3\n    : &amp;&amp; /usr/bin/clang -ffunction-sections -fdata-sections -fPIC --target=wasm32-unknown-unknown  CMakeFiles/cmTC_80bf3.dir/testCCompiler.c.o -o cmTC_80bf3   &amp;&amp; :\n    clang-13: error: unable to execute command: Executable &quot;wasm-ld&quot; doesn&#39;t exist!\n    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)\n    ninja: build stopped: subcommand failed.\n\n\n\n\n\n  CMake will not be able to correctly generate this project.\nCall Stack (most recent call first):\n  CMakeLists.txt:44 (project)```\n</code></pre></div>",
        "id": 268201043,
        "sender_full_name": "Hamza",
        "timestamp": 1642359534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> how do I resolve this? seems like an issue with compiling C(or C++) to WASM</p>",
        "id": 268201249,
        "sender_full_name": "Hamza",
        "timestamp": 1642359748
    },
    {
        "content": "<p>I got no clue how to solve this issue (never worked with C/C++ before for wasm)</p>",
        "id": 268201265,
        "sender_full_name": "Hamza",
        "timestamp": 1642359794
    },
    {
        "content": "<p>This is the patch that I'm working with: <a href=\"https://github.com/rust-lang/rust/compare/master...hamza1311:wasm-build?expand=1\">https://github.com/rust-lang/rust/compare/master...hamza1311:wasm-build?expand=1</a></p>",
        "id": 268201403,
        "sender_full_name": "Hamza",
        "timestamp": 1642359992
    },
    {
        "content": "<p>Installed lld package, getting a different error now</p>",
        "id": 268201642,
        "sender_full_name": "Hamza",
        "timestamp": 1642360342
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    Run Build Command(s):/usr/bin/ninja cmTC_0da33 &amp;&amp; [1/2] Building C object CMakeFiles/cmTC_0da33.dir/testCCompiler.c.o\n    [2/2] Linking C executable cmTC_0da33\n    FAILED: cmTC_0da33\n    : &amp;&amp; /usr/bin/clang -ffunction-sections -fdata-sections -fPIC --target=wasm32-unknown-unknown  CMakeFiles/cmTC_0da33.dir/testCCompiler.c.o -o cmTC_0da33   &amp;&amp; :\n    wasm-ld: error: unknown file type: /lib/crt1.o\n    wasm-ld: error: cannot open /usr/lib/clang/13.0.0/lib/libclang_rt.builtins-wasm32.a: No such file or directory\n    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)\n    ninja: build stopped: subcommand failed.\n</code></pre></div>",
        "id": 268201645,
        "sender_full_name": "Hamza",
        "timestamp": 1642360353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> pinging here so you can take a look at the error</p>",
        "id": 268202226,
        "sender_full_name": "Hamza",
        "timestamp": 1642361317
    },
    {
        "content": "<p>sorry, I haven't actually tried to build the compiler for wasm before myself</p>",
        "id": 268202252,
        "sender_full_name": "cuviper",
        "timestamp": 1642361388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268202252\">said</a>:</p>\n<blockquote>\n<p>sorry, I haven't actually tried to build the compiler for wasm before myself</p>\n</blockquote>\n<p>ah it's alright. i was just wondering if you knew a way to solve the clang issue</p>",
        "id": 268202329,
        "sender_full_name": "Hamza",
        "timestamp": 1642361477
    },
    {
        "content": "<p>I think you have to disable whichever option in <code>config.toml</code> causes lld to be built.</p>",
        "id": 268202911,
        "sender_full_name": "bjorn3",
        "timestamp": 1642362265
    },
    {
        "content": "<p>I set both <code>lld = false</code> and <code>use-lld = false</code> in <code>config.toml</code></p>",
        "id": 268203087,
        "sender_full_name": "Hamza",
        "timestamp": 1642362508
    },
    {
        "content": "<p>same result</p>",
        "id": 268203088,
        "sender_full_name": "Hamza",
        "timestamp": 1642362510
    },
    {
        "content": "<p>I did manage to reduce one error by taking <a href=\"https://github.com/WebAssembly/wasi-sdk/releases/tag/wasi-sdk-14\">https://github.com/WebAssembly/wasi-sdk/releases/tag/wasi-sdk-14</a> and putting it where it wanted it to be</p>",
        "id": 268203193,
        "sender_full_name": "Hamza",
        "timestamp": 1642362643
    },
    {
        "content": "<p><code>cp libclang_rt.builtins-wasm32.a^Cusr/lib/clang/13.0.0/lib/</code></p>",
        "id": 268203198,
        "sender_full_name": "Hamza",
        "timestamp": 1642362653
    },
    {
        "content": "<p>gives ended up with this error</p>\n<div class=\"codehilite\"><pre><span></span><code>Copying stage0 std from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / wasm32-unknown-unknown)\nBuilding LLVM for wasm32-unknown-unknown\nrunning: &quot;cmake&quot; &quot;/home/hamza/code/rust-lang/rust/src/llvm-project/llvm&quot; &quot;-G&quot; &quot;Ninja&quot; &quot;-DLLVM_ENABLE_ASSERTIONS=OFF&quot; &quot;-DLLVM_ENABLE_PLUGINS=OFF&quot; &quot;-DLLVM_TARGETS_TO_BUILD=AArch64;ARM;BPF;Hexagon;MSP430;Mips;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86&quot; &quot;-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=AVR;M68k&quot; &quot;-DLLVM_INCLUDE_EXAMPLES=OFF&quot; &quot;-DLLVM_INCLUDE_DOCS=OFF&quot; &quot;-DLLVM_INCLUDE_BENCHMARKS=OFF&quot; &quot;-DLLVM_INCLUDE_TESTS=OFF&quot; &quot;-DLLVM_ENABLE_TERMINFO=OFF&quot; &quot;-DLLVM_ENABLE_LIBEDIT=OFF&quot; &quot;-DLLVM_ENABLE_BINDINGS=OFF&quot; &quot;-DLLVM_ENABLE_Z3_SOLVER=OFF&quot; &quot;-DLLVM_PARALLEL_COMPILE_JOBS=8&quot; &quot;-DLLVM_TARGET_ARCH=wasm32&quot; &quot;-DLLVM_DEFAULT_TARGET_TRIPLE=wasm32-unknown-unknown&quot; &quot;-DLLVM_INSTALL_UTILS=ON&quot; &quot;-DLLVM_ENABLE_ZLIB=ON&quot; &quot;-DLLVM_ENABLE_LIBXML2=OFF&quot; &quot;-DCMAKE_CROSSCOMPILING=True&quot; &quot;-DLLVM_TABLEGEN=/home/hamza/code/rust-lang/rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-tblgen&quot; &quot;-DLLVM_NM=/home/hamza/code/rust-lang/rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-nm&quot; &quot;-DLLVM_CONFIG_PATH=/home/hamza/code/rust-lang/rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-config&quot; &quot;-DLLVM_VERSION_SUFFIX=-rust-dev&quot; &quot;-DCMAKE_INSTALL_MESSAGE=LAZY&quot; &quot;-DCMAKE_C_COMPILER=clang&quot; &quot;-DCMAKE_CXX_COMPILER=clang&quot; &quot;-DCMAKE_ASM_COMPILER=clang&quot; &quot;-DCMAKE_C_FLAGS=-ffunction-sections -fdata-sections -fPIC --target=wasm32-unknown-unknown&quot; &quot;-DCMAKE_CXX_FLAGS=-ffunction-sections -fdata-sections -fPIC --target=wasm32-unknown-unknown&quot; &quot;-DCMAKE_INSTALL_PREFIX=/home/hamza/code/rust-lang/rust/build/wasm32-unknown-unknown/llvm&quot; &quot;-DCMAKE_ASM_FLAGS= -ffunction-sections -fdata-sections -fPIC --target=wasm32-unknown-unknown&quot; &quot;-DCMAKE_BUILD_TYPE=Release&quot;\n-- The C compiler identification is Clang 13.0.0\n-- The CXX compiler identification is Clang 13.0.0\n-- The ASM compiler identification is Clang with GNU-like command-line\n-- Found assembler: /usr/bin/clang\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - failed\n-- Check for working C compiler: /usr/bin/clang\n-- Check for working C compiler: /usr/bin/clang - broken\nCMake Error at /usr/share/cmake/Modules/CMakeTestCCompiler.cmake:69 (message):\n  The C compiler\n\n    &quot;/usr/bin/clang&quot;\n\n  is not able to compile a simple test program.\n\n  It fails with the following output:\n\n    Change Dir: /home/hamza/code/rust-lang/rust/build/wasm32-unknown-unknown/llvm/build/CMakeFiles/CMakeTmp\n\n    Run Build Command(s):/usr/bin/ninja cmTC_f4ebe &amp;&amp; [1/2] Building C object CMakeFiles/cmTC_f4ebe.dir/testCCompiler.c.o\n    [2/2] Linking C executable cmTC_f4ebe\n    FAILED: cmTC_f4ebe\n    : &amp;&amp; /usr/bin/clang -ffunction-sections -fdata-sections -fPIC --target=wasm32-unknown-unknown  CMakeFiles/cmTC_f4ebe.dir/testCCompiler.c.o -o cmTC_f4ebe   &amp;&amp; :\n    wasm-ld: error: unknown file type: /lib/crt1.o\n    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)\n    ninja: build stopped: subcommand failed.\n\n\n\n\n\n  CMake will not be able to correctly generate this project.\nCall Stack (most recent call first):\n  CMakeLists.txt:44 (project)\n\n\n-- Configuring incomplete, errors occurred!\n</code></pre></div>",
        "id": 268203218,
        "sender_full_name": "Hamza",
        "timestamp": 1642362687
    },
    {
        "content": "<p>This seems to do something with clang/cmake. no idea what</p>",
        "id": 268203276,
        "sender_full_name": "Hamza",
        "timestamp": 1642362740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> any idea how to solve this?</p>",
        "id": 268203334,
        "sender_full_name": "Hamza",
        "timestamp": 1642362842
    },
    {
        "content": "<p>Just to clarify, <code>./x.py build --target x86_64-unknown-linux-gnu --host wasm32-unknown-unknown</code> is what I should be running, right?</p>",
        "id": 268204035,
        "sender_full_name": "Hamza",
        "timestamp": 1642363545
    },
    {
        "content": "<p>Cmake is used to build lld.</p>",
        "id": 268204098,
        "sender_full_name": "bjorn3",
        "timestamp": 1642363621
    },
    {
        "content": "<p>yes</p>",
        "id": 268204101,
        "sender_full_name": "bjorn3",
        "timestamp": 1642363623
    },
    {
        "content": "<p>how would I solve this issue?</p>",
        "id": 268204201,
        "sender_full_name": "Hamza",
        "timestamp": 1642363769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you know why it is even building llvm? shouldn't it be using cranelift?</p>",
        "id": 268206652,
        "sender_full_name": "Hamza",
        "timestamp": 1642366928
    },
    {
        "content": "<p>did you set <code>codegen-backend = []</code> and <code>lld = false</code> in <code>config.toml</code>.</p>",
        "id": 268207060,
        "sender_full_name": "bjorn3",
        "timestamp": 1642367423
    },
    {
        "content": "<p>Not <code>codegen-backend = []</code>. Trying that right now</p>",
        "id": 268207171,
        "sender_full_name": "Hamza",
        "timestamp": 1642367597
    },
    {
        "content": "<p>got this error:</p>\n<div class=\"codehilite\" data-code-language=\"compiling\"><pre><span></span><code>    Finished release [optimized] target(s) in 53.75s\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n   Compiling cc v1.0.69\n   Compiling core v0.0.0 (/home/hamza/code/rust-lang/rust/library/core)\n   Compiling libc v0.2.108\n   Compiling memchr v2.4.1\n   Compiling std v0.0.0 (/home/hamza/code/rust-lang/rust/library/std)\n   Compiling compiler_builtins v0.1.66\n   Compiling unwind v0.0.0 (/home/hamza/code/rust-lang/rust/library/unwind)\n   Compiling rustc-std-workspace-core v1.99.0 (/home/hamza/code/rust-lang/rust/library/rustc-std-workspace-core)\n   Compiling alloc v0.0.0 (/home/hamza/code/rust-lang/rust/library/alloc)\n   Compiling cfg-if v0.1.10\n   Compiling adler v0.2.3\n   Compiling rustc-demangle v0.1.21\nerror: asm! and global_asm! support is disabled while compiling rustc_codegen_cranelift\n\nerror: could not compile `compiler_builtins` due to previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\nBuild completed unsuccessfully in 0:01:16\n</code></pre></div>",
        "id": 268207229,
        "sender_full_name": "Hamza",
        "timestamp": 1642367652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> how do i make compiler_builtins compile now?</p>",
        "id": 268207276,
        "sender_full_name": "Hamza",
        "timestamp": 1642367760
    },
    {
        "content": "<p>Right, forgot that it needs a couple of changes. First of it needs the no-asm feature enabled at it's dependency specification in <code>library/alloc/Cargo.toml</code>. And second this patch needs to be applied to the source of compiler-builtins: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch</a></p>",
        "id": 268207669,
        "sender_full_name": "bjorn3",
        "timestamp": 1642368248
    },
    {
        "content": "<p>Also it seems that rustbuild is trying to build rustc using the cg_clif patched rustc which is going to fail when it goes to compile the final wasm rustc.</p>",
        "id": 268207739,
        "sender_full_name": "bjorn3",
        "timestamp": 1642368356
    },
    {
        "content": "<p>I believe I last time avoided x.py to build rustc. I don't remember the right cargo invocation though unfortunately.</p>",
        "id": 268207829,
        "sender_full_name": "bjorn3",
        "timestamp": 1642368423
    },
    {
        "content": "<p>what's the <code>src/mem/mod.rs</code> file modified in the patch?</p>",
        "id": 268207852,
        "sender_full_name": "Hamza",
        "timestamp": 1642368478
    },
    {
        "content": "<p>i can't apply the patch because it says the file doesn't exist</p>",
        "id": 268207897,
        "sender_full_name": "Hamza",
        "timestamp": 1642368502
    },
    {
        "content": "<p><code>$ git apply 0001-compiler-builtins-Disable-128bit-atomic-operations.patch\nerror: src/mem/mod.rs: No such file or directory</code></p>",
        "id": 268207902,
        "sender_full_name": "Hamza",
        "timestamp": 1642368512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268207739\">said</a>:</p>\n<blockquote>\n<p>Also it seems that rustbuild is trying to build rustc using the cg_clif patched rustc which is going to fail when it goes to compile the final wasm rustc.</p>\n</blockquote>\n<p>I think we can modify it when we get to that step. let's first reach there</p>",
        "id": 268207923,
        "sender_full_name": "Hamza",
        "timestamp": 1642368570
    },
    {
        "content": "<p>the file is in the compiler-builtins dependency. you will need to clonebit from <a href=\"https://github.com/rust/compiler-builtins\">https://github.com/rust/compiler-builtins</a> and apply the patch to this clone. To make the build system use the patched version you can add it to the <code>[patch.crates-io]</code> section in the <code>Cargo.toml</code> file at the root of the rust checkout.</p>",
        "id": 268208369,
        "sender_full_name": "bjorn3",
        "timestamp": 1642369140
    },
    {
        "content": "<p><a href=\"https://github.com/rust/compiler-builtins\">https://github.com/rust/compiler-builtins</a> 404s?</p>",
        "id": 268208390,
        "sender_full_name": "Hamza",
        "timestamp": 1642369196
    },
    {
        "content": "<p>ah the url is <a href=\"https://github.com/rust-lang/compiler-builtins\">https://github.com/rust-lang/compiler-builtins</a></p>",
        "id": 268208440,
        "sender_full_name": "Hamza",
        "timestamp": 1642369218
    },
    {
        "content": "<p>Hang on. That specific patch is only necessary on macos. Just enabling the no-asm feature of compiler-builtins should be enough.</p>",
        "id": 268208443,
        "sender_full_name": "bjorn3",
        "timestamp": 1642369220
    },
    {
        "content": "<p>ahh so that's why it was compiling fine on arch linux</p>",
        "id": 268208579,
        "sender_full_name": "Hamza",
        "timestamp": 1642369368
    },
    {
        "content": "<p>i thought i was gonna run into issue later on</p>",
        "id": 268208584,
        "sender_full_name": "Hamza",
        "timestamp": 1642369384
    },
    {
        "content": "<p>ran into more errors</p>",
        "id": 268208671,
        "sender_full_name": "Hamza",
        "timestamp": 1642369507
    },
    {
        "content": "<p>too big to send here so <a href=\"https://pastify-app.web.app/show/4FT0ixjcM4L62mR8xN3R\">https://pastify-app.web.app/show/4FT0ixjcM4L62mR8xN3R</a></p>",
        "id": 268208678,
        "sender_full_name": "Hamza",
        "timestamp": 1642369527
    },
    {
        "content": "<p>i applied the patch anyway. lets see what happens</p>",
        "id": 268208826,
        "sender_full_name": "Hamza",
        "timestamp": 1642369729
    },
    {
        "content": "<p>That linker error is because the llvm backend doesn't like no-asm as the stack probe function isn't defined with no-asm.</p>",
        "id": 268208911,
        "sender_full_name": "bjorn3",
        "timestamp": 1642369836
    },
    {
        "content": "<p>so how to fix it?</p>",
        "id": 268208926,
        "sender_full_name": "Hamza",
        "timestamp": 1642369867
    },
    {
        "content": "<p>something along the lines of <a href=\"https://github.com/rust-lang/miri/issues/722#issuecomment-819831196\">https://github.com/rust-lang/miri/issues/722#issuecomment-819831196</a> instead of usinf x.py may work. these specific instructions are written for miri though.</p>",
        "id": 268209054,
        "sender_full_name": "bjorn3",
        "timestamp": 1642370020
    },
    {
        "content": "<p>i may take a look tomorrow if i remember to.</p>",
        "id": 268209116,
        "sender_full_name": "bjorn3",
        "timestamp": 1642370093
    },
    {
        "content": "<p>I'll also continue tomorrow (It's almost 3am here)</p>",
        "id": 268209188,
        "sender_full_name": "Hamza",
        "timestamp": 1642370170
    },
    {
        "content": "<p>If you have discord, I can text you over there. Otherwise, I guess I'll just message/ping you here</p>",
        "id": 268209197,
        "sender_full_name": "Hamza",
        "timestamp": 1642370199
    },
    {
        "content": "<p>I can't figure out the miri instructions, mostly because i've never worked with this before</p>",
        "id": 268209203,
        "sender_full_name": "Hamza",
        "timestamp": 1642370219
    },
    {
        "content": "<p>i have a discord, but i prefer zulip.</p>",
        "id": 268209220,
        "sender_full_name": "bjorn3",
        "timestamp": 1642370269
    },
    {
        "content": "<blockquote>\n<p>I can't figure out the miri instructions, mostly because i've never worked with this before</p>\n</blockquote>\n<p>I can understand that.</p>",
        "id": 268209266,
        "sender_full_name": "bjorn3",
        "timestamp": 1642370289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> did you have a look at it?</p>",
        "id": 268262993,
        "sender_full_name": "Hamza",
        "timestamp": 1642421941
    },
    {
        "content": "<p>I'm hoping to find a way to solve the linker error</p>",
        "id": 268263014,
        "sender_full_name": "Hamza",
        "timestamp": 1642421957
    },
    {
        "content": "<p>I think this will work but I will try it out myself too:</p>\n<div class=\"codehilite\"><pre><span></span><code>TOOLCHAIN=$(git cat-file -p HEAD | grep -oP -m1 &#39;(?&lt;=^parent ).+&#39;)\nrustup-toolchain-install-master -t wasm32-wasi -- &quot;$TOOLCHAIN&quot;\nrustup override set -- &quot;$TOOLCHAIN&quot;\n\nHOST=$(rustc -vV | grep -oP &#39;(?&lt;=^host: ).+&#39;)\nVERSION=$(&lt;src/version)\n\nexport RUSTC_STAGE= RUSTC_INSTALL_BINDIR= CFG_RELEASE=&quot;$VERSION-dev&quot; CFG_RELEASE_CHANNEL=dev\n\nreadonly TARGET_DIR=&quot;$PWD/target/wasi-rustc&quot;\n\nbuild() {\n    CFG_COMPILER_HOST_TRIPLE=$1 cargo build \\\n        --manifest-path src/tools/miri/Cargo.toml --target=&quot;$1&quot; --release --locked \\\n        --target-dir=&quot;$TARGET_DIR/rustc&quot;\n}\n\nbuild wasm32-wasi\nbuild &quot;$HOST&quot;\n\nreadonly TARGET=x86_64-unknown-linux-gnu\n\nRUSTC=&quot;$TARGET_DIR/rustc/$HOST/release/rustc&quot; CARGO_PROFILE_RELEASE_PANIC=abort cargo check \\\n    --manifest-path=library/std/Cargo.toml --target-dir=&quot;$TARGET_DIR/std&quot; --release \\\n    --target=&quot;$TARGET&quot; --locked --no-default-features\n\nrm -rf -- &quot;$TARGET_DIR/sysroot/&quot;\nreadonly SYSROOT_LIB=&quot;$TARGET_DIR/sysroot/lib/rustlib/$TARGET/lib/&quot;\nmkdir -p -- &quot;$SYSROOT_LIB&quot;\nln -- &quot;$TARGET_DIR/std/$TARGET/release/deps/&quot;*.{rmeta,rlib,so} &quot;$SYSROOT_LIB&quot;\nln -f -- &quot;$TARGET_DIR/rustc/wasm32-wasi/release/miri.wasm&quot; &quot;$TARGET_DIR/&quot;\n\necho &quot;Rustc has been built sucessfully: $TARGET_DIR/rustc-main.wasm\nIt need to use this sysroot: $TARGET_DIR/sysroot&quot;\n</code></pre></div>",
        "id": 268269052,
        "sender_full_name": "bjorn3",
        "timestamp": 1642425510
    },
    {
        "content": "<p>Looks like the libloading dependencies need to be patched away too. Working on a patch now.</p>",
        "id": 268270339,
        "sender_full_name": "bjorn3",
        "timestamp": 1642426189
    },
    {
        "content": "<p>This works:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Cargo.lock b/Cargo.lock</span>\n<span class=\"gh\">index c3c73099965..d9a0ae7a6ec 100644</span>\n<span class=\"gd\">--- a/Cargo.lock</span>\n<span class=\"gi\">+++ b/Cargo.lock</span>\n<span class=\"gu\">@@ -3962,7 +3962,6 @@ name = \"rustc_interface\"</span>\n version = \"0.0.0\"\n dependencies = [\n  \"libc\",\n<span class=\"gd\">- \"libloading\",</span>\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n  \"rustc_ast\",\n<span class=\"gu\">@@ -4087,7 +4086,6 @@ dependencies = [</span>\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n<span class=\"gd\">- \"libloading\",</span>\n  \"odht\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n<span class=\"gu\">@@ -4279,7 +4277,6 @@ dependencies = [</span>\n name = \"rustc_plugin_impl\"\n version = \"0.0.0\"\n dependencies = [\n<span class=\"gd\">- \"libloading\",</span>\n  \"rustc_ast\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n<span class=\"gh\">diff --git a/compiler/rustc_interface/Cargo.toml b/compiler/rustc_interface/Cargo.toml</span>\n<span class=\"gh\">index 39dd7e917a2..4bcff24f2c6 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_interface/Cargo.toml</span>\n<span class=\"gi\">+++ b/compiler/rustc_interface/Cargo.toml</span>\n<span class=\"gu\">@@ -8,7 +8,6 @@ doctest = false</span>\n\n [dependencies]\n libc = \"0.2\"\n<span class=\"gd\">-libloading = \"0.7.1\"</span>\n tracing = \"0.1\"\n rustc-rayon-core = \"0.3.2\"\n rayon = { version = \"0.3.2\", package = \"rustc-rayon\" }\n<span class=\"gh\">diff --git a/compiler/rustc_interface/src/util.rs b/compiler/rustc_interface/src/util.rs</span>\n<span class=\"gh\">index dd5bf847777..3fdf7b7840b 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_interface/src/util.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_interface/src/util.rs</span>\n<span class=\"gu\">@@ -1,4 +1,3 @@</span>\n<span class=\"gd\">-use libloading::Library;</span>\n use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode};\n<span class=\"gu\">@@ -209,26 +208,6 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals&lt;F: FnOnce() -&gt; R + Se</span>\n     })\n }\n\n<span class=\"gd\">-fn load_backend_from_dylib(path: &amp;Path) -&gt; MakeBackendFn {</span>\n<span class=\"gd\">-    let lib = unsafe { Library::new(path) }.unwrap_or_else(|err| {</span>\n<span class=\"gd\">-        let err = format!(\"couldn't load codegen backend {:?}: {}\", path, err);</span>\n<span class=\"gd\">-        early_error(ErrorOutputType::default(), &amp;err);</span>\n<span class=\"gd\">-    });</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    let backend_sym = unsafe { lib.get::&lt;MakeBackendFn&gt;(b\"__rustc_codegen_backend\") }</span>\n<span class=\"gd\">-        .unwrap_or_else(|e| {</span>\n<span class=\"gd\">-            let err = format!(\"couldn't load codegen backend: {}\", e);</span>\n<span class=\"gd\">-            early_error(ErrorOutputType::default(), &amp;err);</span>\n<span class=\"gd\">-        });</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    // Intentionally leak the dynamic library. We can't ever unload it</span>\n<span class=\"gd\">-    // since the library can make things that will live arbitrarily long.</span>\n<span class=\"gd\">-    let backend_sym = unsafe { backend_sym.into_raw() };</span>\n<span class=\"gd\">-    mem::forget(lib);</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    *backend_sym</span>\n<span class=\"gd\">-}</span>\n<span class=\"gd\">-</span>\n /// Get the codegen backend based on the name and specified sysroot.\n ///\n /// A name of `None` indicates that the default backend should be used.\n<span class=\"gu\">@@ -246,7 +225,6 @@ pub fn get_codegen_backend(</span>\n         const DEFAULT_CODEGEN_BACKEND: &amp;str = \"cranelift\";\n\n         match backend_name.unwrap_or(DEFAULT_CODEGEN_BACKEND) {\n<span class=\"gd\">-            filename if filename.contains('.') =&gt; load_backend_from_dylib(filename.as_ref()),</span>\n             #[cfg(feature = \"llvm\")]\n             \"llvm\" =&gt; rustc_codegen_llvm::LlvmCodegenBackend::new,\n             _ =&gt; rustc_codegen_cranelift::__rustc_codegen_backend,\n<span class=\"gu\">@@ -374,6 +352,7 @@ fn current_dll_path() -&gt; Option&lt;PathBuf&gt; {</span>\n     }\n }\n\n<span class=\"gi\">+/*</span>\n pub fn get_codegen_sysroot(maybe_sysroot: &amp;Option&lt;PathBuf&gt;, backend_name: &amp;str) -&gt; MakeBackendFn {\n     // For now we only allow this function to be called once as it'll dlopen a\n     // few things, which seems to work best if we only do that once. In\n<span class=\"gu\">@@ -465,6 +444,7 @@ pub fn get_codegen_sysroot(maybe_sysroot: &amp;Option&lt;PathBuf&gt;, backend_name: &amp;str)</span>\n         }\n     }\n }\n<span class=\"gi\">+*/</span>\n\n pub(crate) fn check_attr_crate_type(\n     sess: &amp;Session,\n<span class=\"gh\">diff --git a/compiler/rustc_metadata/Cargo.toml b/compiler/rustc_metadata/Cargo.toml</span>\n<span class=\"gh\">index 59796dd6529..65b8444bef9 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_metadata/Cargo.toml</span>\n<span class=\"gi\">+++ b/compiler/rustc_metadata/Cargo.toml</span>\n<span class=\"gu\">@@ -7,7 +7,6 @@ edition = \"2021\"</span>\n doctest = false\n\n [dependencies]\n<span class=\"gd\">-libloading = \"0.7.1\"</span>\n odht = { version = \"0.3.1\", features = [\"nightly\"] }\n snap = \"1\"\n tracing = \"0.1\"\n<span class=\"gh\">diff --git a/compiler/rustc_metadata/src/creader.rs b/compiler/rustc_metadata/src/creader.rs</span>\n<span class=\"gh\">index 36a1798cd6a..eed77978cad 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_metadata/src/creader.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_metadata/src/creader.rs</span>\n<span class=\"gu\">@@ -658,24 +658,10 @@ fn resolve_crate_deps(</span>\n\n     fn dlsym_proc_macros(\n         &amp;self,\n<span class=\"gd\">-        path: &amp;Path,</span>\n<span class=\"gd\">-        stable_crate_id: StableCrateId,</span>\n<span class=\"gi\">+        _path: &amp;Path,</span>\n<span class=\"gi\">+        _stable_crate_id: StableCrateId,</span>\n     ) -&gt; Result&lt;&amp;'static [ProcMacro], CrateError&gt; {\n<span class=\"gd\">-        // Make sure the path contains a / or the linker will search for it.</span>\n<span class=\"gd\">-        let path = env::current_dir().unwrap().join(path);</span>\n<span class=\"gd\">-        let lib = unsafe { libloading::Library::new(path) }</span>\n<span class=\"gd\">-            .map_err(|err| CrateError::DlOpen(err.to_string()))?;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        let sym_name = self.sess.generate_proc_macro_decls_symbol(stable_crate_id);</span>\n<span class=\"gd\">-        let sym = unsafe { lib.get::&lt;*const &amp;[ProcMacro]&gt;(sym_name.as_bytes()) }</span>\n<span class=\"gd\">-            .map_err(|err| CrateError::DlSym(err.to_string()))?;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        // Intentionally leak the dynamic library. We can't ever unload it</span>\n<span class=\"gd\">-        // since the library can make things that will live arbitrarily long.</span>\n<span class=\"gd\">-        let sym = unsafe { sym.into_raw() };</span>\n<span class=\"gd\">-        std::mem::forget(lib);</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        Ok(unsafe { **sym })</span>\n<span class=\"gi\">+        self.sess.fatal(\"proc macros aren't supported by wasi-rustc\");</span>\n     }\n\n     fn inject_panic_runtime(&amp;mut self, krate: &amp;ast::Crate) {\n<span class=\"gh\">diff --git a/compiler/rustc_plugin_impl/Cargo.toml b/compiler/rustc_plugin_impl/Cargo.toml</span>\n<span class=\"gh\">index f5071eb6e8f..4e666e7e93d 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_plugin_impl/Cargo.toml</span>\n<span class=\"gi\">+++ b/compiler/rustc_plugin_impl/Cargo.toml</span>\n<span class=\"gu\">@@ -8,7 +8,6 @@ edition = \"2021\"</span>\n doctest = false\n\n [dependencies]\n<span class=\"gd\">-libloading = \"0.7.1\"</span>\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n<span class=\"gh\">diff --git a/compiler/rustc_plugin_impl/src/load.rs b/compiler/rustc_plugin_impl/src/load.rs</span>\n<span class=\"gh\">index 618682da4e5..d3c6da542cd 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_plugin_impl/src/load.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_plugin_impl/src/load.rs</span>\n<span class=\"gu\">@@ -1,7 +1,6 @@</span>\n //! Used by `rustc` when loading a plugin.\n\n use crate::Registry;\n<span class=\"gd\">-use libloading::Library;</span>\n use rustc_ast::Crate;\n use rustc_errors::struct_span_err;\n use rustc_metadata::locator;\n<span class=\"gu\">@@ -51,34 +50,11 @@ pub fn load_plugins(</span>\n }\n\n fn load_plugin(\n<span class=\"gd\">-    plugins: &amp;mut Vec&lt;PluginRegistrarFn&gt;,</span>\n<span class=\"gi\">+    _plugins: &amp;mut Vec&lt;PluginRegistrarFn&gt;,</span>\n     sess: &amp;Session,\n<span class=\"gd\">-    metadata_loader: &amp;dyn MetadataLoader,</span>\n<span class=\"gi\">+    _metadata_loader: &amp;dyn MetadataLoader,</span>\n     ident: Ident,\n ) {\n<span class=\"gd\">-    let lib = locator::find_plugin_registrar(sess, metadata_loader, ident.span, ident.name);</span>\n<span class=\"gd\">-    let fun = dylink_registrar(lib).unwrap_or_else(|err| {</span>\n<span class=\"gd\">-        // This is fatal: there are almost certainly macros we need inside this crate, so</span>\n<span class=\"gd\">-        // continuing would spew \"macro undefined\" errors.</span>\n<span class=\"gd\">-        sess.span_fatal(ident.span, &amp;err.to_string());</span>\n<span class=\"gd\">-    });</span>\n<span class=\"gd\">-    plugins.push(fun);</span>\n<span class=\"gi\">+    sess.span_fatal(ident.span, \"rustc plugins aren't supported by wasi-rustc\");</span>\n }\n\n<span class=\"gd\">-/// Dynamically link a registrar function into the compiler process.</span>\n<span class=\"gd\">-fn dylink_registrar(lib_path: PathBuf) -&gt; Result&lt;PluginRegistrarFn, libloading::Error&gt; {</span>\n<span class=\"gd\">-    // Make sure the path contains a / or the linker will search for it.</span>\n<span class=\"gd\">-    let lib_path = env::current_dir().unwrap().join(&amp;lib_path);</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    let lib = unsafe { Library::new(&amp;lib_path) }?;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    let registrar_sym = unsafe { lib.get::&lt;PluginRegistrarFn&gt;(b\"__rustc_plugin_registrar\") }?;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    // Intentionally leak the dynamic library. We can't ever unload it</span>\n<span class=\"gd\">-    // since the library can make things that will live arbitrarily long</span>\n<span class=\"gd\">-    // (e.g., an Rc cycle or a thread).</span>\n<span class=\"gd\">-    let registrar_sym = unsafe { registrar_sym.into_raw() };</span>\n<span class=\"gd\">-    mem::forget(lib);</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    Ok(*registrar_sym)</span>\n<span class=\"gd\">-}</span>\n</code></pre></div>\n</div></div>",
        "id": 268270910,
        "sender_full_name": "bjorn3",
        "timestamp": 1642426517
    },
    {
        "content": "<p>can you send the patch as a file?</p>",
        "id": 268276827,
        "sender_full_name": "Hamza",
        "timestamp": 1642429486
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ git apply pat.patch\nerror: patch failed: compiler/rustc_interface/src/util.rs:246\nerror: compiler/rustc_interface/src/util.rs: patch does not apply\n</code></pre></div>",
        "id": 268276918,
        "sender_full_name": "Hamza",
        "timestamp": 1642429546
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/HYpJdOMLDULkEdne5cvMdvE_/wasi-rustc.patch\">wasi-rustc.patch</a> works as patch on commit <a href=\"https://github.com/rust-lang/rust/commit/a34c0797528172ede89480e3033f7a5e71ea4735\">a34c0797528172ede89480e3033f7a5e71ea4735</a> (which is the master branch as of an hour ago)</p>",
        "id": 268277574,
        "sender_full_name": "bjorn3",
        "timestamp": 1642429827
    },
    {
        "content": "<p>I am still working on the right instructions to compile it though. I got a working rustc, but there is still a version mismatch causing it to refuse to load the sysroot.</p>",
        "id": 268277684,
        "sender_full_name": "bjorn3",
        "timestamp": 1642429882
    },
    {
        "content": "<p>Trying with <code>export CFG_VERSION=\"1.60.0-nightly (128417f40 2022-01-17)\"</code> now.</p>",
        "id": 268277920,
        "sender_full_name": "bjorn3",
        "timestamp": 1642430003
    },
    {
        "content": "<p>I'm trying to run it but it says <code>toolchain '128417f40f80ce585414bf5a017540447e6be775' is not installed</code></p>",
        "id": 268279238,
        "sender_full_name": "Hamza",
        "timestamp": 1642430664
    },
    {
        "content": "<p><code>rustup-toolchain-install-master</code> isn't here for me</p>",
        "id": 268279307,
        "sender_full_name": "Hamza",
        "timestamp": 1642430706
    },
    {
        "content": "<p>You will need to install it first using <code>cargo install rustup-toolchain-install-master</code>.</p>",
        "id": 268279341,
        "sender_full_name": "bjorn3",
        "timestamp": 1642430727
    },
    {
        "content": "<p>that did it</p>",
        "id": 268279662,
        "sender_full_name": "Hamza",
        "timestamp": 1642430886
    },
    {
        "content": "<p>btw, if you got compiling, can you try building <code>yew</code> crate from here <a href=\"https://github.com/yewstack/yew/\">https://github.com/yewstack/yew/</a> ?</p>",
        "id": 268279698,
        "sender_full_name": "Hamza",
        "timestamp": 1642430901
    },
    {
        "content": "<p>Cranelift doesn't yet have a wasm backend unfortunately.</p>",
        "id": 268279762,
        "sender_full_name": "bjorn3",
        "timestamp": 1642430956
    },
    {
        "content": "<p>so that means it can't compile code to be run on wasm</p>",
        "id": 268279793,
        "sender_full_name": "Hamza",
        "timestamp": 1642430981
    },
    {
        "content": "<p>what if i were to try and build with llvm. would that work?</p>",
        "id": 268279921,
        "sender_full_name": "Hamza",
        "timestamp": 1642431041
    },
    {
        "content": "<p>Yeah, so far I have only been able to compile for x86_64 using this.</p>",
        "id": 268279930,
        "sender_full_name": "bjorn3",
        "timestamp": 1642431046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455331\">Hamza</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268279921\">said</a>:</p>\n<blockquote>\n<p>what if i were to try and build with llvm. would that work?</p>\n</blockquote>\n<p>It should if you manage to get llvm to work.</p>",
        "id": 268279956,
        "sender_full_name": "bjorn3",
        "timestamp": 1642431060
    },
    {
        "content": "<p>I was hoping to build a completely in-browser playground for yew framework</p>",
        "id": 268280029,
        "sender_full_name": "Hamza",
        "timestamp": 1642431092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268279956\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"455331\">Hamza</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268279921\">said</a>:</p>\n<blockquote>\n<p>what if i were to try and build with llvm. would that work?</p>\n</blockquote>\n<p>It should if you manage to get llvm to work.</p>\n</blockquote>\n<p>any previous effort on it?</p>",
        "id": 268280056,
        "sender_full_name": "Hamza",
        "timestamp": 1642431109
    },
    {
        "content": "<p>Llvm + rustc? Not that I know of. Llvm + clang, yes someone succeeded. I don't have any clue how it was built though. <a href=\"https://wapm.io/package/clang\">https://wapm.io/package/clang</a></p>",
        "id": 268280297,
        "sender_full_name": "bjorn3",
        "timestamp": 1642431242
    },
    {
        "content": "<p>any pointers on where to start?</p>",
        "id": 268280652,
        "sender_full_name": "Hamza",
        "timestamp": 1642431417
    },
    {
        "content": "<p><a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268203218\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268203218</a></p>",
        "id": 268280667,
        "sender_full_name": "Hamza",
        "timestamp": 1642431427
    },
    {
        "content": "<p>I was trying to build and reached this point</p>",
        "id": 268280692,
        "sender_full_name": "Hamza",
        "timestamp": 1642431443
    },
    {
        "content": "<p>*accidentally</p>",
        "id": 268280714,
        "sender_full_name": "Hamza",
        "timestamp": 1642431456
    },
    {
        "content": "<p>You could try installing <a href=\"https://github.com/WebAssembly/wasi-sdk\">https://github.com/WebAssembly/wasi-sdk</a> and using the included clang and linker for wasm32-wasi by adding a <code>[target.wasm32-wasi]</code> section to <code>config.toml</code>.</p>",
        "id": 268280851,
        "sender_full_name": "bjorn3",
        "timestamp": 1642431516
    },
    {
        "content": "<p>Is this normal</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling rustc-main v0.0.0 (/home/hamza/code/rust-lang/rust/compiler/rustc)\n    Finished release [optimized] target(s) in 12m 28s\nerror: process didn&#39;t exit successfully: `/home/hamza/code/rust-lang/rust/target/wasi-rustc/rustc.sh -vV` (exit status: 127)\n--- stderr\n/home/hamza/code/rust-lang/rust/target/wasi-rustc/rustc.sh: line 16: exec: : not found\n\nln: failed to access &#39;/home/hamza/code/rust-lang/rust/target/wasi-rustc/std/x86_64-unknown-linux-gnu/release/deps/*.rmeta&#39;: No such file or directory\nln: failed to access &#39;/home/hamza/code/rust-lang/rust/target/wasi-rustc/std/x86_64-unknown-linux-gnu/release/deps/*.rlib&#39;: No such file or directory\nln: failed to access &#39;/home/hamza/code/rust-lang/rust/target/wasi-rustc/std/x86_64-unknown-linux-gnu/release/deps/*.so&#39;: No such file or directory\nRustc has been built successfully: /home/hamza/code/rust-lang/rust/target/wasi-rustc/rustc-main.wasm\nIt need to use this sysroot: /home/hamza/code/rust-lang/rust/target/wasi-rustc/sysroot\n</code></pre></div>\n<p>from the built script you sent above</p>",
        "id": 268283112,
        "sender_full_name": "Hamza",
        "timestamp": 1642432469
    },
    {
        "content": "<p>Looks like llvm is building for wasm target</p>",
        "id": 268287141,
        "sender_full_name": "Hamza",
        "timestamp": 1642434432
    },
    {
        "content": "<p><a href=\"https://pastify-app.web.app/show/c2AoyrcSXfe9WIRean3A\">https://pastify-app.web.app/show/c2AoyrcSXfe9WIRean3A</a> looks like a good sign to me</p>",
        "id": 268287152,
        "sender_full_name": "Hamza",
        "timestamp": 1642434440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> can you send the build files you ended up with (ones needed to be used with your browser wasi shim). For some reason, they weren't build for me:</p>\n<div class=\"codehilite\"><pre><span></span><code>08:48 PM hamza wasi-rustc $ ls\nrustc/  rustc-main.wasm*  rustc.sh*  sysroot/\n08:48 PM hamza wasi-rustc $ ls sysroot/lib/rustlib/x86_64-unknown-linux-gnu/lib/\n08:49 PM hamza wasi-rustc $\n</code></pre></div>",
        "id": 268287442,
        "sender_full_name": "Hamza",
        "timestamp": 1642434606
    },
    {
        "content": "<p>I didn't manage to get rustc to accept the sysroot rlibs due to a version mismatch. I can give you a wasm file for just rustc I built quite a while ago though. This is the one I tested browser_wasi_shim with:  <a href=\"/user_uploads/4715/UO9VXwX4uUjus7iWSukCqNE5/rustc_binary.wasm.gz\">rustc_binary.wasm.gz</a></p>",
        "id": 268288097,
        "sender_full_name": "bjorn3",
        "timestamp": 1642434942
    },
    {
        "content": "<p>I'll try that later</p>",
        "id": 268288317,
        "sender_full_name": "Hamza",
        "timestamp": 1642435050
    },
    {
        "content": "<p>btw for llvm, i'm running <code> ./x.py build --target wasm32-unknown-unknown --host wasm32-unknown-unknown</code></p>",
        "id": 268288362,
        "sender_full_name": "Hamza",
        "timestamp": 1642435080
    },
    {
        "content": "<p>does it seem correct to you</p>",
        "id": 268288405,
        "sender_full_name": "Hamza",
        "timestamp": 1642435085
    },
    {
        "content": "<p>or should it be <code>./x.py build --target wasm32-wasi --host wasm32-wasi</code>?</p>",
        "id": 268288425,
        "sender_full_name": "Hamza",
        "timestamp": 1642435102
    },
    {
        "content": "<p>It will have to be wasm32-wasi.</p>",
        "id": 268291470,
        "sender_full_name": "bjorn3",
        "timestamp": 1642436846
    },
    {
        "content": "<p>oof i spent like almost an hour building for wasm32-unknown-unknown</p>",
        "id": 268292028,
        "sender_full_name": "Hamza",
        "timestamp": 1642437227
    },
    {
        "content": "<p>will recompile once this one is finished</p>",
        "id": 268292096,
        "sender_full_name": "Hamza",
        "timestamp": 1642437257
    },
    {
        "content": "<p>from where can I download prebuilt <code>wasi-root</code> build?</p>",
        "id": 268292449,
        "sender_full_name": "Hamza",
        "timestamp": 1642437488
    },
    {
        "content": "<p>it's built by CI</p>",
        "id": 268292456,
        "sender_full_name": "Hamza",
        "timestamp": 1642437495
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/ci/docker/host-x86_64/dist-various-2/build-wasi-toolchain.sh\">https://github.com/rust-lang/rust/blob/master/src/ci/docker/host-x86_64/dist-various-2/build-wasi-toolchain.sh</a></p>",
        "id": 268292458,
        "sender_full_name": "Hamza",
        "timestamp": 1642437495
    },
    {
        "content": "<p>Here I believe: <a href=\"https://github.com/WebAssembly/wasi-sdk/releases/tag/wasi-sdk-14\">https://github.com/WebAssembly/wasi-sdk/releases/tag/wasi-sdk-14</a></p>",
        "id": 268293394,
        "sender_full_name": "bjorn3",
        "timestamp": 1642438084
    },
    {
        "content": "<p>I think you need <code>wasi-sdk-14.0-linux.tar.gz</code>.</p>",
        "id": 268293421,
        "sender_full_name": "bjorn3",
        "timestamp": 1642438110
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ ./x.py build --target wasm32-wasi --host wasm32-wasi\nUpdating only changed submodules\n  Submodules updated in 0.00 seconds\nBuilding rustbuild\n    Finished dev [unoptimized] target(s) in 0.14s\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.13s\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.18s\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\nthread &#39;main&#39; panicked at &#39;src.symlink_metadata() failed with No such file or directory (os error 2)&#39;, src/bootstrap/lib.rs:1319:24\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/426b94d7df183ac00ed4492541d92855181e9c4e/library/std/src/panicking.rs:498:5\n   1: core::panicking::panic_fmt\n             at /rustc/426b94d7df183ac00ed4492541d92855181e9c4e/library/core/src/panicking.rs:107:14\n   2: bootstrap::Build::copy\n             at ./src/bootstrap/lib.rs:1319:24\n   3: bootstrap::compile::copy_and_stamp\n             at ./src/bootstrap/compile.rs:141:5\n   4: bootstrap::compile::copy_self_contained_objects\n             at ./src/bootstrap/compile.rs:240:13\n   5: &lt;bootstrap::compile::Std as bootstrap::builder::Step&gt;::run\n             at ./src/bootstrap/compile.rs:106:28\n   6: bootstrap::builder::Builder::ensure\n             at ./src/bootstrap/builder.rs:1603:23\n   7: &lt;bootstrap::compile::Std as bootstrap::builder::Step&gt;::make_run\n             at ./src/bootstrap/compile.rs:52:9\n   8: bootstrap::builder::StepDescription::maybe_run\n             at ./src/bootstrap/builder.rs:175:13\n   9: bootstrap::builder::StepDescription::run\n             at ./src/bootstrap/builder.rs:211:25\n  10: bootstrap::builder::Builder::run_step_descriptions\n             at ./src/bootstrap/builder.rs:619:9\n  11: bootstrap::builder::Builder::execute_cli\n             at ./src/bootstrap/builder.rs:599:9\n  12: bootstrap::Build::build\n             at ./src/bootstrap/lib.rs:618:13\n  13: bootstrap::main\n             at ./src/bootstrap/bin/main.rs:33:5\n  14: core::ops::function::FnOnce::call_once\n             at /rustc/426b94d7df183ac00ed4492541d92855181e9c4e/library/core/src/ops/function.rs:227:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 268294080,
        "sender_full_name": "Hamza",
        "timestamp": 1642438515
    },
    {
        "content": "<p>What file doesn't exist?</p>",
        "id": 268294102,
        "sender_full_name": "Hamza",
        "timestamp": 1642438529
    },
    {
        "content": "<p>nvm had the wrong path for wasi sysroot</p>",
        "id": 268294744,
        "sender_full_name": "Hamza",
        "timestamp": 1642438875
    },
    {
        "content": "<p>it couldn't find libc</p>",
        "id": 268294750,
        "sender_full_name": "Hamza",
        "timestamp": 1642438880
    },
    {
        "content": "<p>I'm failing at this step</p>\n<div class=\"codehilite\"><pre><span></span><code>-- Performing Test HAVE_CXX_ATOMICS_WITHOUT_LIB\n-- Performing Test HAVE_CXX_ATOMICS_WITHOUT_LIB - Failed\n-- Looking for __atomic_fetch_add_4 in atomic\n-- Looking for __atomic_fetch_add_4 in atomic - not found\nCMake Error at cmake/modules/CheckAtomic.cmake:59 (message):\n  Host compiler appears to require libatomic, but cannot find it.\nCall Stack (most recent call first):\n  cmake/config-ix.cmake:374 (include)\n  CMakeLists.txt:684 (include)\n</code></pre></div>\n<p>any idea how to solve this?</p>",
        "id": 268298012,
        "sender_full_name": "Hamza",
        "timestamp": 1642440968
    },
    {
        "content": "<p>if I run the command manually (instead of from the x.py), I face this: <a href=\"https://pastify-app.web.app/show/onYdmaNfGhkGwl3VmGpa\">https://pastify-app.web.app/show/onYdmaNfGhkGwl3VmGpa</a></p>\n<p><code>CMakeOutput.log</code> Line 1-592:  <a href=\"https://pastify-app.web.app/show/6GMIljTDxlNxIX8EhiZZ\">https://pastify-app.web.app/show/6GMIljTDxlNxIX8EhiZZ</a><br>\n<code>CMakeError.log</code> Line 593 - end: <a href=\"https://pastify-app.web.app/show/6GMIljTDxlNxIX8EhiZZ\">https://pastify-app.web.app/show/6GMIljTDxlNxIX8EhiZZ</a></p>",
        "id": 268299057,
        "sender_full_name": "Hamza",
        "timestamp": 1642441720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> can you take a look?</p>",
        "id": 268299064,
        "sender_full_name": "Hamza",
        "timestamp": 1642441727
    },
    {
        "content": "<p><a href=\"https://github.com/binji/llvm-project/compare/19a71f6bdf2dddb10764939e7f0ec2b98dba76c9...87f4133a7d61103839fb4591d539476873f1a041\">https://github.com/binji/llvm-project/compare/19a71f6bdf2dddb10764939e7f0ec2b98dba76c9...87f4133a7d61103839fb4591d539476873f1a041</a> lists all of the patches that were necessary to compile clang for wasm. It seems that a fix for this specific problem is among the changes.</p>",
        "id": 268299264,
        "sender_full_name": "bjorn3",
        "timestamp": 1642441852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Building.20the.20compiler.20for.20wasm/near/268299264\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/binji/llvm-project/compare/19a71f6bdf2dddb10764939e7f0ec2b98dba76c9...87f4133a7d61103839fb4591d539476873f1a041\">https://github.com/binji/llvm-project/compare/19a71f6bdf2dddb10764939e7f0ec2b98dba76c9...87f4133a7d61103839fb4591d539476873f1a041</a> lists all of the patches that were necessary to compile clang for wasm. It seems that a fix for this specific problem is among the changes.</p>\n</blockquote>\n<p>that fixed _this_ problem but there's more. that specific patch doesn't apply because conflicts</p>",
        "id": 268300026,
        "sender_full_name": "Hamza",
        "timestamp": 1642442387
    },
    {
        "content": "<p>it starts to compile but fails</p>",
        "id": 268300100,
        "sender_full_name": "Hamza",
        "timestamp": 1642442407
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[20/2846] Building CXX object lib/Support/CMakeFiles/LLVMSupport.dir/BuryPointer.cpp.o\nFAILED: lib/Support/CMakeFiles/LLVMSupport.dir/BuryPointer.cpp.o\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/clang++ -DGTEST_HAS_RTTI=0 -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -I/home/hamza/code/rust-lang/rust/build/wasm32-wasi/llvm/build/lib/Support -I/home/hamza/code/rust-lang/rust/src/llvm-project/llvm/lib/Support -I/home/hamza/code/rust-lang/rust/build/wasm32-wasi/llvm/build/include -I/home/hamza/code/rust-lang/rust/src/llvm-project/llvm/include -ffunction-sections -fdata-sections -fPIC --target=wasm32-wasi -fPIC -fvisibility-inlines-hidden -Werror=date-time -Werror=unguarded-availability-new -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wmissing-field-initializers -pedantic -Wno-long-long -Wc++98-compat-extra-semi -Wimplicit-fallthrough -Wcovered-switch-default -Wno-noexcept-type -Wnon-virtual-dtor -Wdelete-non-virtual-dtor -Wsuggest-override -Wstring-conversion -Wmisleading-indentation -fdiagnostics-color -ffunction-sections -fdata-sections  -O3 -DNDEBUG -std=c++14  -fno-exceptions -fno-rtti -MD -MT lib/Support/CMakeFiles/LLVMSupport.dir/BuryPointer.cpp.o -MF lib/Support/CMakeFiles/LLVMSupport.dir/BuryPointer.cpp.o.d -o lib/Support/CMakeFiles/LLVMSupport.dir/BuryPointer.cpp.o -c /home/hamza/code/rust-lang/rust/src/llvm-project/llvm/lib/Support/BuryPointer.cpp\nIn file included from /home/hamza/code/rust-lang/rust/src/llvm-project/llvm/lib/Support/BuryPointer.cpp:11:\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:594:3: error: &lt;atomic&gt; is not supported on this single threaded system\n# error &lt;atomic&gt; is not supported on this single threaded system\n  ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:597:3: error: &lt;atomic&gt; is not implemented\n# error &lt;atomic&gt; is not implemented\n  ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:1545:13: error: use of undeclared identifier &#39;__libcpp_thread_yield&#39;\n            __libcpp_thread_yield();\n            ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2522:23: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n    __cxx_atomic_impl&lt;_LIBCPP_ATOMIC_FLAG_TYPE&gt; __a_;\n                      ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2526:17: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {return _LIBCPP_ATOMIC_FLAG_TYPE(true) == __cxx_atomic_load(&amp;__a_, __m);}\n                ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2529:17: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {return _LIBCPP_ATOMIC_FLAG_TYPE(true) == __cxx_atomic_load(&amp;__a_, __m);}\n                ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2533:46: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {return __cxx_atomic_exchange(&amp;__a_, _LIBCPP_ATOMIC_FLAG_TYPE(true), __m);}\n                                             ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2536:46: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {return __cxx_atomic_exchange(&amp;__a_, _LIBCPP_ATOMIC_FLAG_TYPE(true), __m);}\n                                             ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2539:36: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {__cxx_atomic_store(&amp;__a_, _LIBCPP_ATOMIC_FLAG_TYPE(false), __m);}\n                                   ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2542:36: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {__cxx_atomic_store(&amp;__a_, _LIBCPP_ATOMIC_FLAG_TYPE(false), __m);}\n                                   ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2546:35: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {__cxx_atomic_wait(&amp;__a_, _LIBCPP_ATOMIC_FLAG_TYPE(__v), __m);}\n                                  ^\n/home/hamza/code/rust-lang/wasi-sdk-14.0/bin/../share/wasi-sysroot/include/c++/v1/atomic:2549:35: error: use of undeclared identifier &#39;_LIBCPP_ATOMIC_FLAG_TYPE&#39;\n        {__cxx_atomic_wait(&amp;__a_, _LIBCPP_ATOMIC_FLAG_TYPE(__v), __m);}\n                                  ^\n12 errors generated.\n[27/2846] Building CXX object lib/Support/CMakeFiles/LLVMSupport.dir/APInt.cpp.o\nninja: build stopped: subcommand failed.\nthread &#39;main&#39; panicked at &#39;\ncommand did not execute successfully, got: exit status: 1\n</code></pre></div>",
        "id": 268300167,
        "sender_full_name": "Hamza",
        "timestamp": 1642442430
    },
    {
        "content": "<p>I'm afraid I can't help with that.</p>",
        "id": 268300597,
        "sender_full_name": "bjorn3",
        "timestamp": 1642442696
    },
    {
        "content": "<p>Thanks for your so far, <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>. I will see how it goes since I'm totally unfamiliar with LLVM and have not worked with C/C++ before</p>",
        "id": 268304224,
        "sender_full_name": "Hamza",
        "timestamp": 1642445356
    }
]