[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<p>I'm having a bit of trouble in <a href=\"https://github.com/rust-lang/rust/pull/58281\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58281\">https://github.com/rust-lang/rust/pull/58281</a>. It seems that for some async fns, elided lifetimes produce regions that are actually called <code>'_</code> now? To the best of my understanding, this is due to the changes in <a href=\"https://github.com/rust-lang/rust/pull/63501\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63501\">https://github.com/rust-lang/rust/pull/63501</a></p>\n<p>The problem is that now, we don't properly generate a new lifetime for emitting diagnostics, so with my changes, we now have error messages like </p>\n<div class=\"codehilite\"><pre><span></span>help: consider adding the following bound: `&#39;_: &#39;_`\n</pre></div>\n\n\n<p>Based on my limited understanding, it seems like sometimes, we should be generating <code>ParamName::Fresh</code> rather than <code>ParamName::Plain</code> when we lower <code>async fn</code>s. Any thoughts?</p>",
        "id": 173822534,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566413903
    },
    {
        "content": "<p>not sure if <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> or <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> would be able to help too...</p>",
        "id": 174106198,
        "sender_full_name": "mark-i-m",
        "timestamp": 1566779224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> hmm</p>",
        "id": 174465574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567093008
    },
    {
        "content": "<p>I think I made some changes in this regard, actually</p>",
        "id": 174465584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567093016
    },
    {
        "content": "<p>In particular, using <code>ParamName::Fresh</code> to generate elided lifetimes</p>",
        "id": 174465636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567093057
    },
    {
        "content": "<p>That said: the problem of \"anonymous lifetimes\" is one of the reasons the NLL errors were introducing names for lifetimes and things, right? I guess I'd have to read a bit more into the code. But in the meantime, I'd say, try rebasing and see if things are any better? If not, ping me again and we can dig a bit more in :)</p>",
        "id": 174465707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567093092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I rebased, but am still getting the same <code>'_</code> lifetimes.</p>",
        "id": 174482222,
        "sender_full_name": "mark-i-m",
        "timestamp": 1567105061
    },
    {
        "content": "<blockquote>\n<p>the problem of \"anonymous lifetimes\" is one of the reasons the NLL errors were introducing names for lifetimes and things, right?</p>\n</blockquote>\n<p>yes, that's my understanding, which is why I think somewhere we have a bug that fails to recognize anon lifetimes...</p>",
        "id": 174482303,
        "sender_full_name": "mark-i-m",
        "timestamp": 1567105100
    },
    {
        "content": "<p>Oh, I was confusing this and <a href=\"https://github.com/rust-lang/rust/pull/63678/\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63678/\">https://github.com/rust-lang/rust/pull/63678/</a></p>",
        "id": 174915700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567626093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you have any tips on how to debug the source of the lifetime names? I would rather not read the entire <code>librustc_mir</code> looking for them :P</p>",
        "id": 175388082,
        "sender_full_name": "mark-i-m",
        "timestamp": 1568158208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> yeah, sorry, let me schedule some time to look into this. i've added an hour tomorrow, though I might bump it up to today. In the meantime I'll get a build going. I'll post you a response after that!</p>",
        "id": 175532117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568297079
    },
    {
        "content": "<p>btw, it looks like this only happens in async tests, so perhaps it is related to inferred member lifetimes?</p>",
        "id": 175556480,
        "sender_full_name": "mark-i-m",
        "timestamp": 1568312683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> what's an example test where this occurs?</p>",
        "id": 175657342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568403463
    },
    {
        "content": "<p>I guess async-await/issues/issue-63388-1.rs</p>",
        "id": 175657421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568403501
    },
    {
        "content": "<p>Sorry I'm not at my computer atm, but the nll compare mode tests on m branch do this</p>",
        "id": 175664176,
        "sender_full_name": "mark-i-m",
        "timestamp": 1568408739
    },
    {
        "content": "<p>Here is the full list of tests:</p>",
        "id": 175667944,
        "sender_full_name": "mark-i-m",
        "timestamp": 1568412289
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ git status\nOn branch synthesis\nYour branch is up to date with &#39;origin/synthesis&#39;.\n\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   src/test/ui/async-await/issues/issue-63388-1.nll.stderr\n    modified:   src/test/ui/c-variadic/variadic-ffi-4.nll.stderr\n    modified:   src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr\n    modified:   src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr\n    modified:   src/test/ui/self/elision/lt-ref-self-async.nll.stderr\n    modified:   src/test/ui/self/elision/ref-mut-self-async.nll.stderr\n    modified:   src/test/ui/self/elision/ref-mut-struct-async.nll.stderr\n    modified:   src/test/ui/self/elision/ref-self-async.nll.stderr\n    modified:   src/test/ui/self/elision/ref-struct-async.nll.stderr\n</pre></div>",
        "id": 175667950,
        "sender_full_name": "mark-i-m",
        "timestamp": 1568412299
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any suggestions on how to debug this</p>",
        "id": 177246304,
        "sender_full_name": "mark-i-m",
        "timestamp": 1570110924
    },
    {
        "content": "<p>I'm particular i want to trace the origins of a region name</p>",
        "id": 177246333,
        "sender_full_name": "mark-i-m",
        "timestamp": 1570110954
    },
    {
        "content": "<p>Some more updates here</p>",
        "id": 181328140,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574357983
    },
    {
        "content": "<p>It looks like the regions with name <code>'_</code> are considered <code>NamedFreeRegions</code> by the code in <code>region_name.rs</code>. I suspect that this is coming from <code>ty::ReFree</code> in <code>give_name_from_error_region</code>, and will keep tracing it back...</p>",
        "id": 181328385,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574358127
    },
    {
        "content": "<p>Specifically, it is coming from a  <code>ty::BoundRegion::BrNamed</code> where the name is <code>_</code></p>",
        "id": 181576691,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574365229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Any thoughts on where to go from here? It seems like there are a billion places a <code>BrNamed</code> could be coming from...</p>",
        "id": 181576882,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574365336
    },
    {
        "content": "<p>Do you know which one is mostly to be caused by an implicit lifetime on an <code>async</code> function return type?</p>",
        "id": 181576913,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574365363
    },
    {
        "content": "<p>Or alternately, perhaps a call to <code>EarlyBoundRegion::has_name</code> was missed somewhere when converting to a <code>BoundRegion</code>?</p>",
        "id": 181577144,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574365529
    },
    {
        "content": "<p>Hmm... possibly this is the culprit:</p>",
        "id": 181578798,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574366535
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[DEBUG rustc_mir::borrow_check::nll::universal_regions] defining_ty (pre-replacement): for&lt;&#39;a, &#39;_&gt; fn(&amp;&#39;a Xyz, &amp;dyn Foo) -&gt; impl std::future::Future {Xyz::do_sth}\n</pre></div>",
        "id": 181578799,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574366537
    },
    {
        "content": "<p>It seems that the <code>'_</code> is created as a <code>BrNamed</code> rather <code>BrAnon</code> at some point... Or am I misunderstanding?</p>",
        "id": 181578890,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574366593
    },
    {
        "content": "<p>You should be able to see that with <code>-Zverbose</code>. But that sounds correct.</p>",
        "id": 181579073,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574366742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> where would I see it? Would it be before MIR creation?</p>",
        "id": 181579253,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574366881
    },
    {
        "content": "<p>I meant see the variant name in the logs.</p>",
        "id": 181579327,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574366914
    },
    {
        "content": "<p>Oh yes, it is BrNamed</p>",
        "id": 181579352,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574366934
    },
    {
        "content": "<p>I guess my question is should it be BrAnon? And where would that be constructed in the first place?</p>",
        "id": 181579384,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574366960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> In particular, I see the following in the logs:</p>\n<div class=\"codehilite\"><pre><span></span>[DEBUG rustc::ty::sty] type_flags(ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(15), &#39;_))) = HAS_RE_LATE_BOUND\n</pre></div>",
        "id": 181579533,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574367063
    },
    {
        "content": "<p>How can I find out where this was created?</p>",
        "id": 181579556,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574367075
    },
    {
        "content": "<p>librustc/ty/mod.rs:853</p>",
        "id": 181579682,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574367164
    },
    {
        "content": "<p>I don't think that we can create an <code>BrAnon</code> there correctly: I don't think that the index of the <code>EarlyBoundRegion</code> is compatible with the index in <code>BrAnon</code>.</p>",
        "id": 181579893,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574367335
    },
    {
        "content": "<p>Hmm... I'm not very knowledgeable about the indexing system... what exactly is the difference?</p>",
        "id": 181580056,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574367459
    },
    {
        "content": "<p>Or really why are they different?</p>",
        "id": 181580070,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574367473
    },
    {
        "content": "<p>The early bound index is the position in <code>ty::Generics.parms</code>, the late bound index is some unique index for the corresponding <code>Binder</code>.</p>",
        "id": 181580184,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574367542
    },
    {
        "content": "<p>Also, do you know where <code>to_bound_region</code> is called from? <code>rg</code> doesn't seem to find anything for some reason...</p>",
        "id": 181580237,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574367594
    },
    {
        "content": "<p>Hmm... I see</p>",
        "id": 181580239,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574367598
    },
    {
        "content": "<p>Apparently it isn't. It's actually in <code>librustc/middle/resolve_lifetime.rs:96</code>, but the idea's the same.</p>",
        "id": 181580808,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574367967
    },
    {
        "content": "<p>The generation of the <code>'_</code>-named region, that is.</p>",
        "id": 181580842,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574367988
    },
    {
        "content": "<p>So if I understand correctly, using the BrNamed in this case is the correct thing to do?</p>",
        "id": 181596122,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574379243
    },
    {
        "content": "<p>Would the best fix then be to check the name better when finding the name to print in error messages in rustc_mir::borrow_check::nll::region_infer::error_reporting::region_name?</p>",
        "id": 181596167,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574379299
    },
    {
        "content": "<p>Checking the name seems fine.</p>",
        "id": 181596464,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574379592
    },
    {
        "content": "<p>Ok, thanks for the help... I will play around with this and maybe put up a PR at some point</p>",
        "id": 181597007,
        "sender_full_name": "mark-i-m",
        "timestamp": 1574380102
    }
]