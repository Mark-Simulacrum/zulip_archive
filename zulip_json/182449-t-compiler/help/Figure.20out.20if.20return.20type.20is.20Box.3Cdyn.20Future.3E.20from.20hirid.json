[
    {
        "content": "<p>Best way to figure out if fn's return type is Box&lt;dyn Future&gt; or impl Future in check_attrs(so from a HirId)</p>\n<p>context: <a href=\"https://github.com/rust-lang/rust/pull/89610/files\">https://github.com/rust-lang/rust/pull/89610/files</a></p>\n<p>I have this working for checking if the fn is async, and from <a href=\"https://github.com/rust-lang/rust/pull/76765/files\">https://github.com/rust-lang/rust/pull/76765/files</a> I can even unpack and check what type the async fn is returning, but I am unsure how to check if I am returning a Box&lt;dyn Future&gt; or an impl Future without doing path shenanigans in hir. As far as I can tell, check_attrs and typechecking are both Providers, is there some way I can get access to the rustc_middle::Ty of a function's return value from the hirid?</p>",
        "id": 256480897,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633552996
    },
    {
        "content": "<p>Hmm it seems that perhaps <code>clippy</code> is the best place to place this lint?</p>",
        "id": 256483067,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633553729
    },
    {
        "content": "<p>s/lint/warning</p>",
        "id": 256484163,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633554143
    },
    {
        "content": "<p>It's not incorrect for a function returning <code>Box&lt;dyn Future&gt;</code> to use<code>#[must_use]</code></p>",
        "id": 256486409,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633555044
    },
    {
        "content": "<p>It's unnecessary since <code>Future</code> is already <code>#[must_use]</code>, but we don't warn about unnecessary <code>#[must_use]</code>s on functions returning <code>Result</code> either.</p>",
        "id": 256486685,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633555191
    },
    {
        "content": "<p>Hmm, I suppose you are right, async fn's make it look like must_use works on the returned value, but <code>impl Future</code> and boxed dyn futures look less so. However, it would be nice to warn on a must use on a trait method annotated by the <code>async-trait</code> macro</p>",
        "id": 256490838,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633557278
    },
    {
        "content": "<p>I think async_trait could just recognize<code>#[must_use]</code> and add it to the async function, then your lint in <a href=\"https://github.com/rust-lang/rust/issues/89610\">#89610</a> will fire.</p>",
        "id": 256491223,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633557506
    },
    {
        "content": "<p>Oh add it to the async fn it generates?</p>",
        "id": 256492901,
        "sender_full_name": "Gus Wynn",
        "timestamp": 1633558397
    },
    {
        "content": "<p>Yep</p>",
        "id": 256493782,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633558829
    }
]