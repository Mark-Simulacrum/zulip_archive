[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Example</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">([();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have found the source of this bug (the error message wasn't very helpful)</p>\n<div class=\"codehilite\"><pre><span></span><code>error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n --&gt; src/lib.rs:4:29\n  |\n4 | struct Example&lt;const N: usize = 1usize&gt;([(); N]);\n  |                             ^\n\nerror: aborting due to previous error; 1 warning emitted\n</code></pre></div>\n<p>Basically compiler copy-pastes <code>const N: usize = 1</code> into the impl block, so compilation must error</p>\n<p>I dug into rustc source code trying to find the derive macro code, but because I have never done it before I want to ask someone if this is the correct place (before I spend rest of the day compiling and testing this change)</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gi\">+++ b/compiler/rustc_builtin_macros/src/deriving/generic/mod.rs</span>\n<span class=\"gu\">@@ -561,7 +561,13 @@ fn create_derived_impl(</span>\n\n                 cx.typaram(self.span, param.ident, vec![], bounds, None)\n             }\n<span class=\"gd\">-            GenericParamKind::Const { .. } =&gt; param.clone(),</span>\n<span class=\"gi\">+            GenericParamKind::Const { ty, kw_span, _default } =&gt; GenericParamKind::Const {</span>\n<span class=\"gi\">+                ty: ty.clone(),</span>\n<span class=\"gi\">+                kw_span: kw_span.clone(),</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+                /* We can't have default values inside impl block */</span>\n<span class=\"gi\">+                default: None,</span>\n<span class=\"gi\">+            },</span>\n         }));\n ```\n</code></pre></div>",
        "id": 234848871,
        "sender_full_name": "Soveu",
        "timestamp": 1618578219
    },
    {
        "content": "<p>fyi you'll need to compile rustc either way, so I would run that in the background while you wait</p>",
        "id": 234849072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618578301
    },
    {
        "content": "<p>I'm pretty sure that the type of that match expression is <code>GenericParam</code>, but you're trying to return a <code>GenericParamKind</code>, so this won't compile.</p>",
        "id": 234850772,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1618579013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Noob.20tries.20to.20fix.20derive.20macros/near/234849072\">said</a>:</p>\n<blockquote>\n<p>fyi you'll need to compile rustc either way, so I would run that in the background while you wait</p>\n</blockquote>\n<p>you can run <code>x.py check</code> if you just want to make sure it compiles</p>",
        "id": 234850859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618579045
    },
    {
        "content": "<p>I run <code>x.py check; x.py build</code> a lot until <a href=\"https://github.com/rust-lang/cargo/issues/3501\">https://github.com/rust-lang/cargo/issues/3501</a> is fixed</p>",
        "id": 234850930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618579075
    },
    {
        "content": "<blockquote>\n<p>I'm pretty sure that the type of that match expression is <code>GenericParam</code>, but you're trying to return a <code>GenericParamKind</code>, so this won't compile.</p>\n</blockquote>\n<p>yep</p>\n<div class=\"codehilite\"><pre><span></span><code>expected struct `rustc_ast::GenericParam`, found enum `GenericParamKind`\n</code></pre></div>",
        "id": 234853104,
        "sender_full_name": "Soveu",
        "timestamp": 1618579865
    },
    {
        "content": "<p>hey, it works! :D</p>",
        "id": 234859812,
        "sender_full_name": "Soveu",
        "timestamp": 1618582323
    },
    {
        "content": "<p>Where should i put a test case?</p>",
        "id": 234859927,
        "sender_full_name": "Soveu",
        "timestamp": 1618582366
    },
    {
        "content": "<p>somewhere in <code>src/test/ui/derives</code> seems reasonable</p>",
        "id": 234860091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618582437
    },
    {
        "content": "<p><code>error: ui test compiled successfully!</code><br>\nhmmmm</p>",
        "id": 234861489,
        "sender_full_name": "Soveu",
        "timestamp": 1618582938
    },
    {
        "content": "<p>add <code>// check-pass</code></p>",
        "id": 234861604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618582984
    },
    {
        "content": "<p>also what does this mean?<br>\n<code>skip untracked path src/test/ui/derives/derive-macro-const-default.rs during rustfmt invocations</code></p>",
        "id": 234861607,
        "sender_full_name": "Soveu",
        "timestamp": 1618582985
    },
    {
        "content": "<p>it's not formatting it because it's not added to git</p>",
        "id": 234861668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618583010
    },
    {
        "content": "<p>try <code>git add  src/test/ui/derives/derive-macro-const-default.rs</code></p>",
        "id": 234861678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618583016
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>failures:\n    [debuginfo-gdb] debuginfo/extern-c-fn.rs\n    [debuginfo-gdb] debuginfo/generator-objects.rs\n    [debuginfo-gdb] debuginfo/issue-57822.rs\n    [debuginfo-gdb] debuginfo/pretty-huge-vec.rs\n</code></pre></div>",
        "id": 234861952,
        "sender_full_name": "Soveu",
        "timestamp": 1618583110
    },
    {
        "content": "<p>I would ignore those, a full x.py test is almost never what you want</p>",
        "id": 234862046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618583139
    },
    {
        "content": "<p>i haven't run <code>./x.py test</code> before changes, so idk if this is my fault :/</p>",
        "id": 234862048,
        "sender_full_name": "Soveu",
        "timestamp": 1618583139
    },
    {
        "content": "<p>try <code>x.py test src/test/ui/derives</code></p>",
        "id": 234862062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618583144
    },
    {
        "content": "<p>yep, everything is alright</p>",
        "id": 234862235,
        "sender_full_name": "Soveu",
        "timestamp": 1618583195
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/84243\">https://github.com/rust-lang/rust/pull/84243</a></p>",
        "id": 234863675,
        "sender_full_name": "Soveu",
        "timestamp": 1618583688
    },
    {
        "content": "<p>Huh, this went smoother than I expected, CI is already all green</p>",
        "id": 234882795,
        "sender_full_name": "Soveu",
        "timestamp": 1618590136
    }
]