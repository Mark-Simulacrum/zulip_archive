[
    {
        "content": "<p>Are there any instructions for how to run rustc tests on a wasm32 target? I'm trying to replicate a bors failure</p>",
        "id": 170492222,
        "sender_full_name": "tmandry",
        "timestamp": 1562707796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> Do you have Docker?</p>",
        "id": 170492675,
        "sender_full_name": "simulacrum",
        "timestamp": 1562708234
    },
    {
        "content": "<p>yes</p>",
        "id": 170492697,
        "sender_full_name": "tmandry",
        "timestamp": 1562708270
    },
    {
        "content": "<p>If so, then it should be a <code>./src/ci/docker/run.sh test-various</code></p>",
        "id": 170492699,
        "sender_full_name": "simulacrum",
        "timestamp": 1562708275
    },
    {
        "content": "<p>It loosely looks like that's the bors test builder (amongst other things) for wasm</p>",
        "id": 170492748,
        "sender_full_name": "simulacrum",
        "timestamp": 1562708295
    },
    {
        "content": "<p>you can edit the Dockerfile in <code>src/ci/docker/test-various/Dockerfile</code> to make it more targeted for your use case</p>",
        "id": 170492759,
        "sender_full_name": "simulacrum",
        "timestamp": 1562708316
    },
    {
        "content": "<p>^ was about to ask :)</p>",
        "id": 170492767,
        "sender_full_name": "tmandry",
        "timestamp": 1562708332
    },
    {
        "content": "<p>(if another builder failed the same should apply, presuming it's a Linux builder -- the macOS and windows builders don't use container)</p>",
        "id": 170492768,
        "sender_full_name": "simulacrum",
        "timestamp": 1562708336
    },
    {
        "content": "<p>(fwiw, I can try and take a look at the failure too if you have a link handy)</p>",
        "id": 170492797,
        "sender_full_name": "simulacrum",
        "timestamp": 1562708373
    },
    {
        "content": "<p>I think it might be an actual compiler bug</p>",
        "id": 170492870,
        "sender_full_name": "tmandry",
        "timestamp": 1562708422
    },
    {
        "content": "<p>but it doesn't manifest on linux targets</p>",
        "id": 170492889,
        "sender_full_name": "tmandry",
        "timestamp": 1562708449
    },
    {
        "content": "<p>this will cache after the initial build by the way (we don't delete the obj directory, which is where it'll build)</p>",
        "id": 170492918,
        "sender_full_name": "simulacrum",
        "timestamp": 1562708487
    },
    {
        "content": "<p>great, running the docker build now</p>",
        "id": 170492980,
        "sender_full_name": "tmandry",
        "timestamp": 1562708541
    },
    {
        "content": "<p>thanks so much :D</p>",
        "id": 170492986,
        "sender_full_name": "tmandry",
        "timestamp": 1562708547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> FWIW (just got the email notification from your comment) this looks like the standard output if an assert fails in wasm</p>",
        "id": 170504768,
        "sender_full_name": "simulacrum",
        "timestamp": 1562721971
    },
    {
        "content": "<p>and I would suspect that this might simply be because of size differences, so maybe try running on e.g. i686-unknown-linux-gnu? That'll be easier to debug at least</p>",
        "id": 170504776,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722004
    },
    {
        "content": "<p>there's docker containers that'll do it if you want to avoid the hassle of installing libs yourself</p>",
        "id": 170504780,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722019
    },
    {
        "content": "<p>(not sure if this is at all useful, or how far along you are, so feel free to ignore)</p>",
        "id": 170504788,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> here's the error: <a href=\"https://github.com/rust-lang/rust/pull/62270#issuecomment-508938503\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62270#issuecomment-508938503\">https://github.com/rust-lang/rust/pull/62270#issuecomment-508938503</a></p>",
        "id": 170504937,
        "sender_full_name": "tmandry",
        "timestamp": 1562722244
    },
    {
        "content": "<p>it's hitting an unreachable block somehow..</p>",
        "id": 170504951,
        "sender_full_name": "tmandry",
        "timestamp": 1562722268
    },
    {
        "content": "<p>oh I just re-read your chat</p>",
        "id": 170504959,
        "sender_full_name": "tmandry",
        "timestamp": 1562722287
    },
    {
        "content": "<p>yeah, we essentially have -Cpanic=abort on wasm I believe because there's not really unwinding IIRC</p>",
        "id": 170505009,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722347
    },
    {
        "content": "<p>okay, that's really helpful to know, thanks <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 170505012,
        "sender_full_name": "tmandry",
        "timestamp": 1562722355
    },
    {
        "content": "<p>except it's ... less aborty somehow</p>",
        "id": 170505014,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722358
    },
    {
        "content": "<p>It might be helpful to run this in e.g. chrome</p>",
        "id": 170505023,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722385
    },
    {
        "content": "<p>or firefox, w/e</p>",
        "id": 170505027,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722392
    },
    {
        "content": "<p>and use F12 to debug</p>",
        "id": 170505029,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722397
    },
    {
        "content": "<p>you can probably google for how to load wasm files in JS into memory or (maybe) copy what the NodeJS script is doing</p>",
        "id": 170505032,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722425
    },
    {
        "content": "<p>yeah, I started doing that but didn't very far</p>",
        "id": 170505033,
        "sender_full_name": "tmandry",
        "timestamp": 1562722425
    },
    {
        "content": "<p>if you want to paste the wasm file I can try to do so? I think I've done something similar before</p>",
        "id": 170505079,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722451
    },
    {
        "content": "<p>(what I actually used was node's inspect mode)</p>",
        "id": 170505082,
        "sender_full_name": "tmandry",
        "timestamp": 1562722471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"/user_uploads/4715/3k68FPJbAw9ODeAUqFwqg36c/a.wasm\" target=\"_blank\" title=\"a.wasm\">a.wasm</a> if you want to take a look</p>",
        "id": 170505155,
        "sender_full_name": "tmandry",
        "timestamp": 1562722597
    },
    {
        "content": "<p>thanks, downloaded</p>",
        "id": 170505157,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722611
    },
    {
        "content": "<p>(FWIW, Zoom natively has a file attachments feature)</p>",
        "id": 170505159,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722620
    },
    {
        "content": "<p>although that might be it... I somehow thought that was an s3 URL</p>",
        "id": 170505165,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722637
    },
    {
        "content": "<p>so does zulip, which I used :p</p>",
        "id": 170505172,
        "sender_full_name": "tmandry",
        "timestamp": 1562722649
    },
    {
        "content": "<p>er, yes, I meant zulip ... typo</p>",
        "id": 170505174,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722662
    },
    {
        "content": "<p>otherwise, I can try i686 (are there official containers for doing this with rust?)</p>",
        "id": 170505219,
        "sender_full_name": "tmandry",
        "timestamp": 1562722694
    },
    {
        "content": "<p>yeah, you can do the same thing as you did with wasm if you'd like</p>",
        "id": 170505232,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722744
    },
    {
        "content": "<p>ah, let me track down the builder for you</p>",
        "id": 170505236,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722750
    },
    {
        "content": "<p>src/ci/docker/i686-gnu/Dockerfile and src/ci/docker/run.sh i686-gnu</p>",
        "id": 170505244,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722778
    },
    {
        "content": "<p>that's so great</p>",
        "id": 170505307,
        "sender_full_name": "tmandry",
        "timestamp": 1562722843
    },
    {
        "content": "<p>was it always this easy?</p>",
        "id": 170505310,
        "sender_full_name": "tmandry",
        "timestamp": 1562722849
    },
    {
        "content": "<p>this was done in ~2017(?) I think? Whenever we moved from buildbot to travis I believe</p>",
        "id": 170505368,
        "sender_full_name": "simulacrum",
        "timestamp": 1562722925
    },
    {
        "content": "<p>for some reason I always thought it was more complicated /shrug</p>",
        "id": 170505398,
        "sender_full_name": "tmandry",
        "timestamp": 1562723008
    },
    {
        "content": "<p>it does look like the wasm has just an unconditional panic</p>",
        "id": 170505794,
        "sender_full_name": "simulacrum",
        "timestamp": 1562723540
    },
    {
        "content": "<p>fwiw</p>",
        "id": 170505795,
        "sender_full_name": "simulacrum",
        "timestamp": 1562723542
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  (func $_ZN26async_fn_size_moved_locals4main17h2d699e92deec06acE (;4;)\n    (local $var0 i32)\n    get_global $global0\n    i32.const 64\n    i32.sub\n    tee_local $var0\n    set_global $global0\n    get_local $var0\n    i32.const 1028\n    i32.store offset=12\n    get_local $var0\n    i32.const 1048748\n    i32.store offset=56\n    get_local $var0\n    i32.const 52\n    i32.add\n    i32.const 4\n    i32.store\n    get_local $var0\n    i32.const 36\n    i32.add\n    i32.const 2\n    i32.store\n    get_local $var0\n    i32.const 4\n    i32.store offset=44\n    get_local $var0\n    i64.const 3\n    i64.store offset=20 align=4\n    get_local $var0\n    i32.const 1048660\n    i32.store offset=16\n    get_local $var0\n    get_local $var0\n    i32.const 60\n    i32.add\n    i32.store offset=48\n    get_local $var0\n    get_local $var0\n    i32.const 56\n    i32.add\n    i32.store offset=40\n    get_local $var0\n    get_local $var0\n    i32.const 12\n    i32.add\n    i32.store offset=60\n    get_local $var0\n    get_local $var0\n    i32.const 40\n    i32.add\n    i32.store offset=32\n    get_local $var0\n    i32.const 16\n    i32.add\n    i32.const 1048752\n    call $_ZN3std9panicking15begin_panic_fmt17h52d189e875ddbafaE\n    unreachable\n</pre></div>",
        "id": 170505797,
        "sender_full_name": "simulacrum",
        "timestamp": 1562723552
    },
    {
        "content": "<p>unless I'm misinterpreting of course</p>",
        "id": 170505860,
        "sender_full_name": "simulacrum",
        "timestamp": 1562723660
    },
    {
        "content": "<p>anyway, I need to run, but I suspect that the unconditional panic here (if I understood the wasm correctly) means that this would always panic, which leads me to believe that the test might just fail on i686 too</p>",
        "id": 170505883,
        "sender_full_name": "simulacrum",
        "timestamp": 1562723746
    },
    {
        "content": "<p>I used this in an html file to load the wasm for what it's worth so I could step through in firefox's debugger ```<br>\n&lt;script&gt;<br>\nvar importObject = {<br>\n        imports: {<br>\n          imported_func: function(arg) {<br>\n            console.log(arg);<br>\n          }<br>\n        }<br>\n      };<br>\nrequest = new XMLHttpRequest();<br>\nrequest.open('GET', 'a.wasm');<br>\nrequest.responseType = 'arraybuffer';<br>\nrequest.send();</p>\n<p>request.onload = function() {<br>\n  var bytes = request.response;<br>\n  WebAssembly.instantiate(bytes, importObject).then(results =&gt; {<br>\n      results.instance.exports.main();<br>\n  });<br>\n};<br>\n&lt;/script&gt;</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 170505931,
        "sender_full_name": "simulacrum",
        "timestamp": 1562723786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> </p>\n<div class=\"codehilite\"><pre><span></span>---- async_fn_size::entry_main output ----\n    error output:\n        panicked at &#39;assertion failed: `(left == right)`\n          left: `1032`,\n         right: `1028`&#39;, src/lib.rs:101:5\n\n        Stack:\n\n        Error\n            at module.exports.__wbg_new_59cb74e423758ede (/home/mark/async-fn-size/target/wasm32-unknown-unknown/wbg-tmp/wasm-bindgen-test.js:726:30)\n            at console_error_panic_hook::Error::new::h6ee3a5f0b6230b19 (wasm-function[1044]:34)\n            at console_error_panic_hook::hook_impl::hab2142e7c8799646 (wasm-function[311]:100)\n            at console_error_panic_hook::hook::h65e11320dbd63f4d (wasm-function[1985]:38)\n            at core::ops::function::Fn::call::h81e0e990fcfadc08 (wasm-function[1816]:45)\n            at std::panicking::rust_panic_with_hook::h44a386ec93168747 (wasm-function[475]:265)\n            at std::panicking::continue_panic_fmt::hf5de305382b63f0d (wasm-function[1187]:116)\n            at std::panicking::begin_panic_fmt::hd34a9b77b3de5f46 (wasm-function[1476]:95)\n            at async_fn_size::entry_main::h165c5c04e59afc05 (wasm-function[54]:1179)\n            at core::ops::function::FnOnce::call_once::hfd971c972cb74b22 (wasm-function[2140]:22)\n\n\n\n    JS exception that was thrown:\n        RuntimeError: unreachable\n            at __rust_start_panic (wasm-function[2313]:33)\n            at rust_panic (wasm-function[2243]:31)\n            at std::panicking::rust_panic_with_hook::h44a386ec93168747 (wasm-function[475]:304)\n            at std::panicking::continue_panic_fmt::hf5de305382b63f0d (wasm-function[1187]:116)\n            at std::panicking::begin_panic_fmt::hd34a9b77b3de5f46 (wasm-function[1476]:95)\n            at async_fn_size::entry_main::h165c5c04e59afc05 (wasm-function[54]:1179)\n            at core::ops::function::FnOnce::call_once::hfd971c972cb74b22 (wasm-function[2140]:22)\n            at wasm_bindgen_test::__rt::Context::execute_sync::{{closure}}::h7f716071de880aef (wasm-function[1558]:22)\n            at futures::future::lazy::Lazy&lt;F,R&gt;::get::h5a6ee61d14078cdd (wasm-function[116]:397)\n            at &lt;futures::future::lazy::Lazy&lt;F,R&gt; as futures::future::Future&gt;::poll::he5890d83765bfd36 (wasm-function[1805]:38)\n</pre></div>",
        "id": 170507999,
        "sender_full_name": "simulacrum",
        "timestamp": 1562727516
    },
    {
        "content": "<p>runs fine with:</p>\n<div class=\"codehilite\"><pre><span></span>    assert_eq!(1028, std::mem::size_of_val(&amp;single()));\n    assert_eq!(1028, std::mem::size_of_val(&amp;single_with_noop()));\n    assert_eq!(3080, std::mem::size_of_val(&amp;joined()));\n    assert_eq!(3080, std::mem::size_of_val(&amp;joined_with_noop()));\n</pre></div>",
        "id": 170508017,
        "sender_full_name": "simulacrum",
        "timestamp": 1562727582
    },
    {
        "content": "<p>though those values do fail on x86_64 linux, so maybe just ignore the test on wasm32?</p>",
        "id": 170508086,
        "sender_full_name": "simulacrum",
        "timestamp": 1562727646
    },
    {
        "content": "<p>no idea why they're different on wasm</p>",
        "id": 170508098,
        "sender_full_name": "simulacrum",
        "timestamp": 1562727672
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/62270#issuecomment-509889491\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62270#issuecomment-509889491\">https://github.com/rust-lang/rust/pull/62270#issuecomment-509889491</a></p>",
        "id": 170508379,
        "sender_full_name": "simulacrum",
        "timestamp": 1562728143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> sorry, I stepped away but thanks so much for debugging this!</p>",
        "id": 170508921,
        "sender_full_name": "tmandry",
        "timestamp": 1562728977
    },
    {
        "content": "<p>No worries! Let me know if you want me to explain process or anything</p>",
        "id": 170508933,
        "sender_full_name": "simulacrum",
        "timestamp": 1562729018
    },
    {
        "content": "<p>did you get that error message by loading a page with the script you pasted?</p>",
        "id": 170509086,
        "sender_full_name": "tmandry",
        "timestamp": 1562729205
    },
    {
        "content": "<p>it seems like it should be printed to the console when running node, but it's not</p>",
        "id": 170509121,
        "sender_full_name": "tmandry",
        "timestamp": 1562729277
    },
    {
        "content": "<p>I added a dependency</p>",
        "id": 170509428,
        "sender_full_name": "simulacrum",
        "timestamp": 1562729662
    },
    {
        "content": "<p>[lib]<br>\ncrate-type = [\"cdylib\", \"rlib\"]</p>\n<p>[dependencies]<br>\nconsole_error_panic_hook = \"0.1.6\"<br>\nwasm-bindgen-test = \"0.2\"</p>",
        "id": 170509451,
        "sender_full_name": "simulacrum",
        "timestamp": 1562729724
    },
    {
        "content": "<p>and used <code>wasm-pack test --node</code> after annotating the main function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[wasm_bindgen_test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(test, test)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">entry_main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">set_hook</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">console_error_panic_hook</span>::<span class=\"n\">hook</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1028</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">single</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1028</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">single_with_noop</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">3080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">joined</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">3080</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of_val</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">joined_with_noop</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 170509501,
        "sender_full_name": "simulacrum",
        "timestamp": 1562729792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> ^</p>",
        "id": 170509506,
        "sender_full_name": "simulacrum",
        "timestamp": 1562729806
    },
    {
        "content": "<p>:o</p>",
        "id": 170509562,
        "sender_full_name": "tmandry",
        "timestamp": 1562729886
    },
    {
        "content": "<p>very nice</p>",
        "id": 170509568,
        "sender_full_name": "tmandry",
        "timestamp": 1562729919
    },
    {
        "content": "<p>it would be nice to have that crate in our build. I'll file an issue tomorrow</p>",
        "id": 170509589,
        "sender_full_name": "tmandry",
        "timestamp": 1562729979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <a href=\"https://github.com/Mark-Simulacrum/async-fn-size\" target=\"_blank\" title=\"https://github.com/Mark-Simulacrum/async-fn-size\">https://github.com/Mark-Simulacrum/async-fn-size</a></p>",
        "id": 170509704,
        "sender_full_name": "simulacrum",
        "timestamp": 1562730124
    },
    {
        "content": "<p>(just for reference, but that's probably not the best way to do things)</p>",
        "id": 170509717,
        "sender_full_name": "simulacrum",
        "timestamp": 1562730145
    },
    {
        "content": "<p>feel free to ping me further, but I'm off to bed for now :)</p>",
        "id": 170509737,
        "sender_full_name": "simulacrum",
        "timestamp": 1562730225
    },
    {
        "content": "<p>perfect :) I opened <a href=\"https://github.com/rust-lang/rust/issues/62556\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62556\">#62556</a> and linked to that from there</p>",
        "id": 170509781,
        "sender_full_name": "tmandry",
        "timestamp": 1562730254
    },
    {
        "content": "<p>Should definitely be possible. If I'm waiting for things to compile I might take a look :)</p>",
        "id": 170509812,
        "sender_full_name": "simulacrum",
        "timestamp": 1562730358
    }
]