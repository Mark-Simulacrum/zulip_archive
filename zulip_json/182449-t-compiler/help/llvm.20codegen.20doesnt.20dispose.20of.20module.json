[
    {
        "content": "<p>Im working on a codegen that depends on the existing llvm codegen for some parts, and it seems that for some reason it does not dispose of llvm modules by calling <code>LLVMDisposeModule</code>, it does dispose of the context however. Is this intentional? i cant do it in my backend because <code>LLVMModuleCreateWithNameInContext</code> returns an immutable reference and im pretty certain turning that into a mutable ptr then giving it to llvm to nuke is violating reference rules.</p>",
        "id": 244045525,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624760627
    },
    {
        "content": "<p>although the module is just an opaque type so it would <em>probably</em> be fine? i dont want to get my hands cut off by ferris for violating stacked borrows</p>",
        "id": 244045648,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624760849
    },
    {
        "content": "<p>modifying through <code>&amp;T</code> is always UB</p>",
        "id": 244045704,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624760983
    },
    {
        "content": "<p>even if it's through a raw pointer derived from the reference</p>",
        "id": 244045705,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624760996
    },
    {
        "content": "<p>right which is why i dont think im allowed to dispose of it right now, unless i manually declare the context creation function and modify it to return a ptr</p>",
        "id": 244045752,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624761057
    },
    {
        "content": "<p>I don't know if this helps, but <code>LLVMModuleCreateWithNameInContext</code> adds the module to the context, and disposing of the context with <code>LLVMContextDispose</code> deletes the modules that were added to it. That wasn't immediately obvious to me when I was looking in this area.</p>\n<p>The design of these FFI functions with respect to reference types they accept and return seemed off to me, but I never dug into it. Check out <a href=\"https://github.com/rust-lang/rust/issues/52461\">#52461</a> if you want to look deeper into that.</p>",
        "id": 244049632,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1624769273
    },
    {
        "content": "<p>ohh i see, that makes sense</p>",
        "id": 244050166,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624770299
    },
    {
        "content": "<p>using references doesnt really make sense to me because everything expects opaque pointers anyways and there isnt anything you can do on the objects</p>",
        "id": 244050251,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624770464
    },
    {
        "content": "<p>it does make it easier to annotate what things can be written to or not though</p>",
        "id": 244050302,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1624770586
    }
]