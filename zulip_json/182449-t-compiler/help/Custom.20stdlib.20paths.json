[
    {
        "content": "<p>How do I tell the compiler to use a custom path to a <code>rust-stdlib</code> archive? Is that jsut a simple <code>-L</code> or is there more to be aware of?</p>",
        "id": 245074992,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625593962
    },
    {
        "content": "<p>That is <code>--sysroot</code>.</p>",
        "id": 245075293,
        "sender_full_name": "bjorn3",
        "timestamp": 1625594108
    },
    {
        "content": "<p>If you want to compile crates for the host (eg build scripts or proc macros) the host libstd needs to be in the sysroot as well.</p>",
        "id": 245075373,
        "sender_full_name": "bjorn3",
        "timestamp": 1625594153
    },
    {
        "content": "<p>So all libs need to be in the same sysroot?</p>",
        "id": 245075481,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625594190
    },
    {
        "content": "<p>Yes, there can only be one active sysroot at a time and when you use a proc macro, both the host and target libraries need to be available at the same time.</p>",
        "id": 245075961,
        "sender_full_name": "bjorn3",
        "timestamp": 1625594399
    },
    {
        "content": "<p>Normally you are supposed to install the <code>rust-stdlib</code> to the rustc install dir.</p>",
        "id": 245076104,
        "sender_full_name": "bjorn3",
        "timestamp": 1625594435
    },
    {
        "content": "<p>Does that mean the rustc libraries need to be in the same location as the stdlibs? That's currently the case I'm trying to work around. I have rustc and it's libraries separate from stdlib</p>",
        "id": 245077710,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625595161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343063\">@UebelAndre</span> If you're trying to build a new target, you might want to start a new conversation about the target with compiler/lang/etc sooner rather than later.</p>",
        "id": 245082940,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625597567
    },
    {
        "content": "<p>It's not for a new target. I'm working on some stuff for Google's build system, Bazel, which individually downloads the rustc artifact and rust-stdlib artifact. So I need to make sure when the compiler is invoked, that the build can find all the required information</p>",
        "id": 245084593,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625598338
    },
    {
        "content": "<p>The preferred way is still merging both directories, but <code>--sysroot</code> should be fine for this case I think. I presume no cross-compilation happens? If it does, you will have to at least merge the rust-stdlib artifacts for the host and target into a single sysroot.</p>",
        "id": 245085478,
        "sender_full_name": "bjorn3",
        "timestamp": 1625598728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343063\">UebelAndre</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Custom.20stdlib.20paths/near/245077710\">said</a>:</p>\n<blockquote>\n<p>Does that mean the rustc libraries need to be in the same location as the stdlibs? That's currently the case I'm trying to work around. I have rustc and it's libraries separate from stdlib</p>\n</blockquote>\n<p>Can you clarify why you're trying to keep those separate, rather than merging them together?</p>",
        "id": 245095475,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625603906
    },
    {
        "content": "<p>Bazel downloads rustc and rust-stdlib separately into different directories. The only way to get them to download to the same directory is to have a single “repository rule” which would download all target platforms you’re potentially interested in, which is wasteful. So the goal is to wire everything up for each call to rustc (which Bazel is good at). But the issue is I’m not clear how I can tell rustc where everything is. <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> does that answer the question?</p>",
        "id": 245097694,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625605031
    },
    {
        "content": "<p>Ah, I see. It downloads the standard library separately because you need it per-target?</p>",
        "id": 245097756,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625605063
    },
    {
        "content": "<p>Yes</p>",
        "id": 245097771,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625605072
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 245097810,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625605083
    },
    {
        "content": "<p>Where the compiler is only needed for the host/execution environment</p>",
        "id": 245097864,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625605095
    },
    {
        "content": "<p>(Right?)</p>",
        "id": 245097889,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625605112
    },
    {
        "content": "<p>That seems relatively reasonable. The idea of having a \"host root\" and a \"target root\" makes sense.</p>",
        "id": 245097894,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625605114
    },
    {
        "content": "<p>That’s exactly what I’m after. And am wondering how to wire that up</p>",
        "id": 245097939,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625605140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> is your recommendation also to set —sysroot?</p>",
        "id": 245099233,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625605807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343063\">@UebelAndre</span> I'm suggesting that that functionality doesn't exist today, and would require some amount of additional support in the compiler.</p>",
        "id": 245101165,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625606887
    },
    {
        "content": "<p>I think a compiler MCP would make sense, proposing a <code>--target-root</code> option or similar that overrides sysroot for the target but not for the host.</p>",
        "id": 245101208,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625606923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  Ah ok. Does <code>rustc</code> follow symlinks? I may be able to mock the sysroot by symlinking things when it's known they're needed for a particular call to <code>rustc</code></p>",
        "id": 245101958,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625607411
    },
    {
        "content": "<p>I'd personally prefer to avoid further complicating our strategy for discovering the sysroot and such -- I think there should be alternatives to a target-root, such as symlinks, that seem much preferable</p>",
        "id": 245102300,
        "sender_full_name": "simulacrum",
        "timestamp": 1625607628
    },
    {
        "content": "<p>(also, I don't know if it's customary to ping in Zulip but I personally find it to be the only way to keep up with a thread but perhaps my notification settings are incorrect. Either way, not trying to bug you and sorry if I am)</p>",
        "id": 245102327,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625607649
    },
    {
        "content": "<p>If you're in a system like Bazel or so, you may alternatively explicitly pass the std/core crates via --extern core=/path/to/core -- that should be pretty equivalent to the sysroot, I think</p>",
        "id": 245102370,
        "sender_full_name": "simulacrum",
        "timestamp": 1625607679
    },
    {
        "content": "<p>That's also doable</p>",
        "id": 245102407,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625607707
    },
    {
        "content": "<p>I think we may chase symlinks already today, though not 100% sure on that.</p>",
        "id": 245102430,
        "sender_full_name": "simulacrum",
        "timestamp": 1625607723
    },
    {
        "content": "<p>any thoughts on which would be more ergonomic from the perspective of <code>rustc</code>?</p>",
        "id": 245102476,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625607732
    },
    {
        "content": "<p>not sure I understand the question</p>",
        "id": 245102519,
        "sender_full_name": "simulacrum",
        "timestamp": 1625607762
    },
    {
        "content": "<p>symlinks are likely easier if we support them and they work well for you</p>",
        "id": 245102550,
        "sender_full_name": "simulacrum",
        "timestamp": 1625607783
    },
    {
        "content": "<p>I've run into sutiations with other tools where symlinks were advised against</p>",
        "id": 245102669,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625607845
    },
    {
        "content": "<p>I'm not immediately aware of any problems.</p>",
        "id": 245102760,
        "sender_full_name": "simulacrum",
        "timestamp": 1625607919
    },
    {
        "content": "<p>(Though I don't know if everything in the compiler will probably handle them. I think it should).</p>",
        "id": 245102771,
        "sender_full_name": "simulacrum",
        "timestamp": 1625607934
    },
    {
        "content": "<p>Ok, I can give that a shot or fall back to <code>--extern=/path/to/my.rlib</code></p>",
        "id": 245103156,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625608176
    },
    {
        "content": "<p>or get really sad <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 245103177,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625608195
    },
    {
        "content": "<p>We do follow symlinks. I know because I do similar thing to construct a sysroot on nix.</p>",
        "id": 245103306,
        "sender_full_name": "nagisa",
        "timestamp": 1625608256
    },
    {
        "content": "<p>Wonderful!</p>",
        "id": 245103379,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625608299
    },
    {
        "content": "<p>How did you set it up for nix?</p>",
        "id": 245103403,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625608312
    },
    {
        "content": "<p>like, at what point do you symlink?</p>",
        "id": 245103460,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625608325
    },
    {
        "content": "<p>(files and/or directories, that sort of thing)</p>",
        "id": 245103496,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625608356
    },
    {
        "content": "<p>I've a build rule like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  leanRust =\n    flip mapAttrs super.latest.rustChannels (name: value: value // {\n      rust = super.symlinkJoin {\n        name = &quot;rust&quot;;\n        paths = [\n          (value.rustc.override {})\n          (value.cargo.override {})\n          (value.rust-std.override {})\n          (value.rust-src.override {})\n        ];\n        postBuild = &#39;&#39;\n          cp -L --remove-destination &quot;$(readlink $out/bin/rustc)&quot; $out/bin/rustc\n          cp -L --remove-destination &quot;$(readlink $out/bin/rustdoc)&quot; $out/bin/rustdoc\n          cp -L --remove-destination &quot;$(readlink $out/bin/cargo)&quot; $out/bin/cargo\n        &#39;&#39;;\n      };\n    });\n</code></pre></div>\n<p>Here,  <code>value.rustc</code>, <code>value.cargo</code> and similar correspond to an extracted tarball of a component. <code>symlinkJoin</code> will construct a symlink forest where each file ends up in a build result (so if I understand your question right, the symlinking happens on a per-file basis, here's what some result may look like):</p>\n<div class=\"codehilite\"><pre><span></span><code>#ls -alh result/lib/rustlib/\ntotal 31K\ndr-xr-xr-x 2 root root   9 Jan  1  1970 etc/\ndr-xr-xr-x 3 root root   3 Jan  1  1970 src/\ndr-xr-xr-x 4 root root   4 Jan  1  1970 x86_64-unknown-linux-gnu/\nlrwxrwxrwx 1 root root  72 Jan  1  1970 components -&gt; /nix/store/q3gpyn1z1pybnim0zzz95yqfka0i4lnz-rustc/lib/rustlib/components\nlrwxrwxrwx 1 root root  73 Jan  1  1970 install.log -&gt; /nix/store/q3gpyn1z1pybnim0zzz95yqfka0i4lnz-rustc/lib/rustlib/install.log\nlrwxrwxrwx 1 root root  76 Jan  1  1970 manifest-cargo -&gt; /nix/store/j5nsky2in6mfmwr2wnxjqll28zg9lh4l-cargo/lib/rustlib/manifest-cargo\nlrwxrwxrwx 1 root root  76 Jan  1  1970 manifest-rustc -&gt; /nix/store/q3gpyn1z1pybnim0zzz95yqfka0i4lnz-rustc/lib/rustlib/manifest-rustc\nlrwxrwxrwx 1 root root  82 Jan  1  1970 manifest-rust-src -&gt; /nix/store/rrbqs17syczagmirvv74yd2r7pxqf1ln-rust-src/lib/rustlib/manifest-rust-src\nlrwxrwxrwx 1 root root 107 Jan  1  1970 manifest-rust-std-x86_64-unknown-linux-gnu -&gt; /nix/store/4sfkq12kzspq1mciagfjgjgns96p129s-rust-std/lib/rustlib/manifest-rust-std-x86_64-unknown-linux-gnu\nlrwxrwxrwx 1 root root  84 Jan  1  1970 rust-installer-version -&gt; /nix/store/q3gpyn1z1pybnim0zzz95yqfka0i4lnz-rustc/lib/rustlib/rust-installer-version\nlrwxrwxrwx 1 root root  74 Jan  1  1970 uninstall.sh -&gt; /nix/store/q3gpyn1z1pybnim0zzz95yqfka0i4lnz-rustc/lib/rustlib/uninstall.sh*\n</code></pre></div>\n<p>(note how some files come from different locations than others).</p>\n<p>Finally, it is necessary to \"un-symlink\" the <code>rustc</code>, <code>rustdoc</code> and <code>cargo</code> so that they know that their sysroot is this newly built symlink forest and not their original locations. That's what the <code>cp</code> commands in the <code>postBuild</code> do.</p>",
        "id": 245103996,
        "sender_full_name": "nagisa",
        "timestamp": 1625608722
    },
    {
        "content": "<p>though you can achieve the same by making e.g. a wrapper that sets the <code>--sysroot</code> argument instead.</p>",
        "id": 245104015,
        "sender_full_name": "nagisa",
        "timestamp": 1625608738
    },
    {
        "content": "<p>Hope that helps ^^</p>",
        "id": 245104202,
        "sender_full_name": "nagisa",
        "timestamp": 1625608831
    },
    {
        "content": "<p>I believe it does! But unfortunatetly it's quite the challenge to differentiate real files and symlinks in Bazel. I'll try always explicitly passing <code>--sysroot</code> but if that doesn't work I'll need to try <code>--extern</code>.</p>",
        "id": 245105625,
        "sender_full_name": "UebelAndre",
        "timestamp": 1625609805
    }
]