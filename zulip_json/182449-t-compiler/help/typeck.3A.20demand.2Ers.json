[
    {
        "content": "<p>This is for <a href=\"https://github.com/rust-lang/rust/issues/70851\" title=\"https://github.com/rust-lang/rust/issues/70851\">#70851</a>. How exactly would I add a condition for 16/8 bits?<br>\nSorry that it's a newbie question, but this is my first contribution and I'm not very familiar with the project yet.</p>",
        "id": 193443805,
        "sender_full_name": "Ram",
        "timestamp": 1586436014
    },
    {
        "content": "<p>I guess a match guard (<a href=\"https://doc.rust-lang.org/stable/book/ch18-03-pattern-syntax.html#extra-conditionals-with-match-guards\" title=\"https://doc.rust-lang.org/stable/book/ch18-03-pattern-syntax.html#extra-conditionals-with-match-guards\">this thing</a>) could fit well</p>",
        "id": 193448999,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586438595
    },
    {
        "content": "<p>Yes thank you, I'm using that. I should have been clearer. My question is about how do I know if found or exp is a 8 bit int? Is the condition to see if it's Some(8) for the 8 bits, or Some(1) for the 1 byte, or simply 8 or 1? And what would I be comparing it with?<br>\nIf I compare it with found.bit_width(), I will need to use Some(8) and see if they're equal for example.</p>",
        "id": 193451615,
        "sender_full_name": "Ram",
        "timestamp": 1586439781
    },
    {
        "content": "<p>See <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_ast/ast.rs.html#1675-1684\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_ast/ast.rs.html#1675-1684\">the definition of <code>bit_width</code></a></p>",
        "id": 193451906,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586439942
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bit_width</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">IntTy</span>::<span class=\"n\">Isize</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">IntTy</span>::<span class=\"n\">I8</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">IntTy</span>::<span class=\"n\">I16</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">IntTy</span>::<span class=\"n\">I32</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">IntTy</span>::<span class=\"n\">I64</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">IntTy</span>::<span class=\"n\">I128</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193451952,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586439962
    },
    {
        "content": "<p>So it is the number of bits, you'll need to use <code>Some(8)</code> rather than <code>Some(1)</code></p>",
        "id": 193452029,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586439984
    },
    {
        "content": "<blockquote>\n<p>And what would I be comparing it with?</p>\n</blockquote>\n<p>If I'm right, the issue here is that conversions from 32+ bit integer are failible but from 8 and 16 bits integer, they are infailible.</p>",
        "id": 193452365,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586440154
    },
    {
        "content": "<p>So you would simply need to compare with <code>16</code> to see if the comparison is fallible or not.</p>",
        "id": 193452553,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586440259
    },
    {
        "content": "<p>Great, thank you!<br>\nDo you think there's actual use in adding a match case of<br>\n(Some(8), None) =&gt; true, as that's going to be caught by the (_, _) anyway? Maybe it's the other way around?</p>",
        "id": 193465068,
        "sender_full_name": "Ram",
        "timestamp": 1586445663
    },
    {
        "content": "<p>I think the best way to do this is to add a match guard to the already existing arm</p>",
        "id": 193466196,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586446139
    },
    {
        "content": "<p>This one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193466306,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586446197
    },
    {
        "content": "<p>So that we only take it if the integer is greater than 16 bits</p>",
        "id": 193466625,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586446313
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"284293\">@Ram</span></p>",
        "id": 193466787,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586446379
    },
    {
        "content": "<p>Thanks! Would  something like</p>\n<div class=\"codehilite\"><pre><span></span> (None, Some(8))  | (Some(8), None)  | (None, Some(16))| (Some(16), None)   =&gt; false\n</pre></div>\n\n\n<p>be a cleaner way of expressing the same?</p>",
        "id": 193473960,
        "sender_full_name": "Ram",
        "timestamp": 1586449397
    },
    {
        "content": "<p>You can rewrite that as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">))</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193474163,
        "sender_full_name": "centril",
        "timestamp": 1586449495
    },
    {
        "content": "<p>I wish we could have written that as <code>Symmetrical(None, Some(8 | 16)) =&gt; false</code></p>",
        "id": 193474266,
        "sender_full_name": "centril",
        "timestamp": 1586449541
    },
    {
        "content": "<p><code>Option</code> has an <code>xor</code> method.</p>",
        "id": 193475221,
        "sender_full_name": "bjorn3",
        "timestamp": 1586449936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> yeah, good to use here</p>",
        "id": 193475455,
        "sender_full_name": "centril",
        "timestamp": 1586450044
    },
    {
        "content": "<p>We could also write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193476080,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586450284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> I don't think that's better; it's more imprecise, and in the general case, exhaustiveness checking does not work as you have a guard</p>",
        "id": 193476151,
        "sender_full_name": "centril",
        "timestamp": 1586450324
    },
    {
        "content": "<p>Right, in this case it's probably not better</p>",
        "id": 193476322,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586450397
    },
    {
        "content": "<p>But if we had a bigger number of possible values, encoding them in patterns is painful <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193476435,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586450431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> depends on specifics, but you have range-patterns and or-patterns at your disposal to make it not painful</p>",
        "id": 193476507,
        "sender_full_name": "centril",
        "timestamp": 1586450471
    },
    {
        "content": "<p>In general, I'd say avoid guards if it is encodable in the pattern and it's not an obvious win</p>",
        "id": 193476585,
        "sender_full_name": "centril",
        "timestamp": 1586450511
    },
    {
        "content": "<p>Alright, good to know</p>",
        "id": 193476642,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586450528
    },
    {
        "content": "<p>(ofc that's my opinion, which reasonable people may disagree with ^^)</p>",
        "id": 193476703,
        "sender_full_name": "centril",
        "timestamp": 1586450548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/typeck.3A.20demand.2Ers/near/193474266\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/typeck.3A.20demand.2Ers/near/193474266\">said</a>:</p>\n<blockquote>\n<p>(None, Some(8 | 16))  | (Some(8 | 16), None)  =&gt; false</p>\n<p>I wish we could have written that as <code>Symmetrical(None, Some(8 | 16)) =&gt; false</code></p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ! TIL<br>\nYeah, that would be a neat way to do it.</p>",
        "id": 193479856,
        "sender_full_name": "Ram",
        "timestamp": 1586451908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284293\">@Ram</span>  you'll need to add <code>#![feature(or_patterns)]</code> to the crate if it ain't already there btw (please do, we want to test the feature internally!)</p>",
        "id": 193479929,
        "sender_full_name": "centril",
        "timestamp": 1586451940
    },
    {
        "content": "<p>Is this what you meant? I guess it already exists.<br>\n<a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/lib.rs#L65\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/lib.rs#L65\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/lib.rs#L65</a></p>",
        "id": 193483400,
        "sender_full_name": "Ram",
        "timestamp": 1586453537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284293\">@Ram</span> yep; so nothing needs fixing there <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193483447,
        "sender_full_name": "centril",
        "timestamp": 1586453559
    },
    {
        "content": "<p>BTW, is there a reason why we don't want the compiler message for 32 and 64 bit ints to be fixed too?</p>",
        "id": 193483476,
        "sender_full_name": "Ram",
        "timestamp": 1586453577
    },
    {
        "content": "<p>Also do we want it this way whether the fn requires u8 but is given a u8 in the return; or the fn requires usize but is given u8 by the return.<br>\nIs it working both ways the requirement here?</p>",
        "id": 193488089,
        "sender_full_name": "Ram",
        "timestamp": 1586455800
    },
    {
        "content": "<p>I think this is a better way of phrasing those questions.</p>\n<p>Is there a reason why we suggest 8 and 16 bit ints to use .into() but not 32/64 bit ones?</p>\n<p>In the example given in the top issue comment(linked below), should it be such that the compiler suggests .into() when the fn requires a u8 but is supplied a usize instead as well? The example given is that of the fn requiring a usize but supplied a u8 instead. The difference being that u8 is likely to be &lt; usize (but is not guaranteed anyway).</p>\n<p><a href=\"https://github.com/rust-lang/rust/issues/70851#issue-595356744\" title=\"https://github.com/rust-lang/rust/issues/70851#issue-595356744\">https://github.com/rust-lang/rust/issues/70851#issue-595356744</a></p>",
        "id": 193561308,
        "sender_full_name": "Ram",
        "timestamp": 1586519534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284293\">@Ram</span> There are no <code>From</code> impls for <code>u32</code>/<code>u64</code> -&gt; <code>usize</code></p>",
        "id": 193561693,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586519955
    },
    {
        "content": "<p>Because <code>usize</code> might be 16 bits in size for small targets like MSP430 and AVR</p>",
        "id": 193561714,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586519984
    },
    {
        "content": "<p>I think Rust currently defines usize/isize to be from 16 bits to 128+ bits.</p>",
        "id": 193561838,
        "sender_full_name": "Vecr",
        "timestamp": 1586520064
    },
    {
        "content": "<p>You can see the <code>From</code> and <code>TryFrom</code> implementations for <code>usize</code>/<code>isize</code> by the way</p>",
        "id": 193561971,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586520166
    },
    {
        "content": "<p>usize depends on the target it's built for iirc so could it be 8 bits or less for some embedded systems <span class=\"user-mention\" data-user-id=\"267352\">@Vecr</span> ?<br>\nThanks <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> <a href=\"https://doc.rust-lang.org/src/core/convert/num.rs.html#48-53\" title=\"https://doc.rust-lang.org/src/core/convert/num.rs.html#48-53\">https://doc.rust-lang.org/src/core/convert/num.rs.html#48-53</a></p>",
        "id": 193562485,
        "sender_full_name": "Ram",
        "timestamp": 1586520639
    },
    {
        "content": "<p>I think usize implements <code>From&lt;u16&gt;</code>, but it might not on some platforms.</p>",
        "id": 193562587,
        "sender_full_name": "Vecr",
        "timestamp": 1586520729
    },
    {
        "content": "<p>The minimum is 16 bits, so <code>From&lt;u16&gt;</code> and <code>From&lt;u8&gt;</code> are still implemented for <code>usize</code></p>",
        "id": 193562593,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586520731
    },
    {
        "content": "<p>Systems with 256 bytes of address space are not exactly useful</p>",
        "id": 193562632,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586520755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> don't let the dozens of 8051's deeply embedded in your devices hear you say that</p>",
        "id": 193573224,
        "sender_full_name": "eddyb",
        "timestamp": 1586528173
    },
    {
        "content": "<p>Even that has a 16-bit address bus :P</p>",
        "id": 193573279,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586528210
    },
    {
        "content": "<p>8-bit RAM, 16-bit ROM, I guess</p>",
        "id": 193573350,
        "sender_full_name": "eddyb",
        "timestamp": 1586528231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> oh dear <a href=\"https://www.dcd.pl/product/dq80251/\" title=\"https://www.dcd.pl/product/dq80251/\">https://www.dcd.pl/product/dq80251/</a></p>",
        "id": 193573912,
        "sender_full_name": "eddyb",
        "timestamp": 1586528584
    },
    {
        "content": "<blockquote>\n<p>World’s Fastest 8051 IP Core</p>\n</blockquote>\n<p>oh no</p>",
        "id": 193573982,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586528628
    },
    {
        "content": "<p>With the changes I've made now, it's such that the compiler will suggest usize be .into() when the function requires a u8.<br>\nIs that fine, because usize will greater than u8 on most targets?<br>\nAnd From(usize) is not implemented for u8/u16 anyway so that would be a bad suggestion.</p>",
        "id": 193640049,
        "sender_full_name": "Ram",
        "timestamp": 1586575922
    },
    {
        "content": "<p>Yes, usize cannot be u8</p>",
        "id": 193651486,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1586597519
    },
    {
        "content": "<p>Yes, so would <br>\n<code> (None, Some(8|16)) </code> be the correct solution rather than<br>\n<code>  (None, Some(8|16)) |  (Some(8|16), None) </code><br>\nbecause this doesn't suggest .into() when a usize is the expected type at all?<br>\nSorry if I'm not being clear <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193654402,
        "sender_full_name": "Ram",
        "timestamp": 1586602662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284293\">@Ram</span> I think you're right. I left you a comment on GitHub <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193654651,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1586603012
    }
]