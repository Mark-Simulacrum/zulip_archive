[
    {
        "content": "<p>I am running into an odd problem in my custom codegen, LLVM 7, when writing bitcode (through ThinBuffer) does not seem to like unnamed consts, it throws an assertion failure (index out of bounds for string ref) for something like</p>\n<div class=\"codehilite\"><pre><span></span><code>@0 = private unnamed_addr constant &lt;{ [16 x i8] }&gt; &lt;{ [16 x i8] c&quot;8c\\ED&gt;\\DA\\0FI?^\\98{?\\DA\\0F\\C9?&quot; }&gt;, align 4\n</code></pre></div>\n<p>Renaming it to <code>@foo</code> fixes it. I was wondering, does anyone know what the issue here is?<br>\nAccording to the llvm 7 ref, this should be fine:</p>\n<blockquote>\n<p>Unnamed values are represented as an unsigned numeric value with their prefix. For example, %12, @2, %44.</p>\n</blockquote>\n<p>Should i work around it somehow, generating a unique id instead of an unnamed const? I don't see any special handling for it inside of librustc_codegen_llvm (back when it used llvm 7).</p>",
        "id": 257860621,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634417715
    },
    {
        "content": "<p>Ignoring the assertion does not do anything either, and it builds just fine. This only happens on libcore and libm because they are the only modules that actually use such consts.</p>",
        "id": 257860756,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634417854
    },
    {
        "content": "<p>not assigning names to variables has caused problems in older versions of LLVM.</p>",
        "id": 257862881,
        "sender_full_name": "nagisa",
        "timestamp": 1634419783
    },
    {
        "content": "<p>e.g.. SROA would explode.</p>",
        "id": 257862888,
        "sender_full_name": "nagisa",
        "timestamp": 1634419791
    },
    {
        "content": "<p>Hmmm thats odd</p>",
        "id": 257862949,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634419825
    },
    {
        "content": "<p>Do you mean like all variables or just constants?</p>",
        "id": 257862958,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634419837
    },
    {
        "content": "<p>various situations.</p>",
        "id": 257862993,
        "sender_full_name": "nagisa",
        "timestamp": 1634419869
    },
    {
        "content": "<p>do you happen to know how older rustc dealt with it?</p>",
        "id": 257863003,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634419881
    },
    {
        "content": "<p>in the future i will switch to using rustc's llvm version but for now im stuck with llvm 7 :/</p>",
        "id": 257863018,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634419910
    },
    {
        "content": "<p>We disabled -Zfewer-names in various situations, and still do IIRC.</p>",
        "id": 257864122,
        "sender_full_name": "nagisa",
        "timestamp": 1634420981
    },
    {
        "content": "<p>hmm im pretty sure i implemented fewer-names already, it seems to be generating unnamed constants either ways</p>",
        "id": 257864197,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634421026
    },
    {
        "content": "<p>yeah it seems to account for fewer-names just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">().</span><span class=\"n\">fewer_names</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">llvm</span>::<span class=\"n\">set_value_name</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc_id</span><span class=\"p\">).</span><span class=\"n\">as_bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, its generating a lot of alloc names too, so i dont think this is the culprit, is it?</p>",
        "id": 257865807,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634422527
    },
    {
        "content": "<p>should i just ignore fewer-names altogether?</p>",
        "id": 257865837,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634422558
    },
    {
        "content": "<p>ignoring fewer_names does not seem to help, im guessing that private globals just are not accepted at all</p>",
        "id": 257866954,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634423614
    },
    {
        "content": "<p>Yeah it seems like rustc with llvm 7 does not declare private globals at all, it generates a unique symbol for it</p>",
        "id": 257867228,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634423884
    },
    {
        "content": "<p>Although, it seems like in older rustc, <code>kind</code> is always there, while in latest its optional, should i just use something like <code>private</code> if its None then generate a unique symbol?</p>",
        "id": 257867466,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634424139
    },
    {
        "content": "<p>Yep i was correct, not using declare_private_global does in fact work flawlessly and it builds the gpu crates perfectly, so i guess ill count this as resolved, thank you for your help <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 257867689,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634424374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> has marked this topic as resolved.</p>",
        "id": 257867690,
        "sender_full_name": "Notification Bot",
        "timestamp": 1634424376
    }
]