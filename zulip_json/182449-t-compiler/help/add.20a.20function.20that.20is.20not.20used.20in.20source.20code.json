[
    {
        "content": "<p>I am doing some experimental changes on the compiler for a project. In some circmustances that generate llvm instruction <code>alloca</code>, I hope it can be turned into a heap/global allocation. Therefore, I may need a function call like <a href=\"https://stdrs.dev/nightly/x86_64-pc-windows-gnu/alloc/alloc/fn.exchange_malloc.html\">https://stdrs.dev/nightly/x86_64-pc-windows-gnu/alloc/alloc/fn.exchange_malloc.html</a> in the evetual LLVM code, while the source code and MIR don't have such a function call. How can I do that?</p>",
        "id": 220669030,
        "sender_full_name": "sfzhu",
        "timestamp": 1608626418
    },
    {
        "content": "<p>Alternatively, someone explaining how <code>Box::new()</code> is compiled internally is also helpful.</p>",
        "id": 220669191,
        "sender_full_name": "sfzhu",
        "timestamp": 1608626582
    },
    {
        "content": "<p>I know <code>Box::new</code> uses <code>box</code> keyword internally, but I didn't find how <code>box</code> keyword is implemented in the compiler...</p>",
        "id": 220695083,
        "sender_full_name": "sfzhu",
        "timestamp": 1608647888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343499\">@sfzhu</span> you could look for code modifying <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html#variant.Box\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html#variant.Box</a></p>",
        "id": 220696698,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608648836
    },
    {
        "content": "<p><code>box</code> has special support in MIR too</p>",
        "id": 220696786,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608648871
    },
    {
        "content": "<p>It is internally implemented as emitting a MIR statement that codegens to a call to the <code>exchange_malloc</code> lang item and then writing the given value to the memory pointed to by the result of <code>exchange_malloc</code>.</p>",
        "id": 220696899,
        "sender_full_name": "bjorn3",
        "timestamp": 1608648940
    },
    {
        "content": "<p>Cunningham's Law strikes again <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 220697091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608649034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/add.20a.20function.20that.20is.20not.20used.20in.20source.20code/near/220696899\">said</a>:</p>\n<blockquote>\n<p>It is internally implemented as emitting a MIR statement that codegens to a call to the <code>exchange_malloc</code> lang item and then writing the given value to the memory pointed to by the result of <code>exchange_malloc</code>.</p>\n</blockquote>\n<p>Hello, would you mind if telling me where such codegen happens? Many thanks</p>",
        "id": 220757756,
        "sender_full_name": "sfzhu",
        "timestamp": 1608693173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343499\">@sfzhu</span> Looks like it happens <a href=\"https://github.com/rust-lang/rust/blob/969b42d8c0e44c6b895ab4582b5ae0a0ce319fdf/compiler/rustc_codegen_ssa/src/mir/rvalue.rs#L519-L541\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">mir</span>::<span class=\"n\">Rvalue</span>::<span class=\"n\">NullaryOp</span><span class=\"p\">(</span><span class=\"n\">mir</span>::<span class=\"n\">NullOp</span>::<span class=\"nb\">Box</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">content_ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">content_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">monomorphize</span><span class=\"p\">(</span><span class=\"n\">content_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">content_layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">layout_of</span><span class=\"p\">(</span><span class=\"n\">content_ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llsize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">const_usize</span><span class=\"p\">(</span><span class=\"n\">content_layout</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llalign</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">const_usize</span><span class=\"p\">(</span><span class=\"n\">content_layout</span><span class=\"p\">.</span><span class=\"n\">align</span><span class=\"p\">.</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">box_layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">layout_of</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">mk_box</span><span class=\"p\">(</span><span class=\"n\">content_ty</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llty_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">backend_type</span><span class=\"p\">(</span><span class=\"n\">box_layout</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n\n<span class=\"w\">                </span><span class=\"c1\">// Allocate space:</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">lang_items</span><span class=\"p\">().</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">LangItem</span>::<span class=\"n\">ExchangeMalloc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">sess</span><span class=\"p\">().</span><span class=\"n\">fatal</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"allocation of `{}` {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">box_layout</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Instance</span>::<span class=\"n\">mono</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">get_fn_addr</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">llsize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llalign</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">pointercast</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty_ptr</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OperandRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">OperandValue</span>::<span class=\"n\">Immediate</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">layout</span>: <span class=\"nc\">box_layout</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">operand</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220758051,
        "sender_full_name": "Noah Lev",
        "timestamp": 1608693669
    }
]