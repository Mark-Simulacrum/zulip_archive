[
    {
        "content": "<p>Hi!</p>\n<p>I have been trying to come up with a type system to call a certain trait on a function pointer. I first tried what I have also done in the playground below, but then manual type coercion is necessary for multiple trait implementations. This is not really an option for me since this should be in the public API.</p>\n<p>I then tried a method using Fn traits, and this worked perfectly for the type system, however it seems to be impossible to retrieve a function pointer from a Fn trait item. (for example a method like <code>fn test&lt;F: Fn()&gt;(f: F) { f as usize };</code>.</p>\n<p>Is there any specific reason why the compiler does this type coercion automatically with a single implementation, but once more implementations arise, this has to be done manually?</p>\n<p>And then is there any way to work around this issue? I have been trying many different things but every method seems to fall just short of what I would ideally want.</p>\n<p>Jasper</p>\n<p>I have created the following playground to show my issue, this compiles just fine:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=fc8821ed4c6124eda772b8ac166137ee\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=fc8821ed4c6124eda772b8ac166137ee</a><br>\nWhile uncommenting a trait implementation gives strange errors:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4f2338d0139581af3c817a2099fa1ca7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=4f2338d0139581af3c817a2099fa1ca7</a></p>",
        "id": 270302729,
        "sender_full_name": "jasper",
        "timestamp": 1643756322
    },
    {
        "content": "<p>So it turns out that type coercion for generic method parameters fails when you have more than one impl that applies to a given caller.</p>",
        "id": 270304350,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643757018
    },
    {
        "content": "<p>I documented a similar <a href=\"https://github.com/rust-lang/rust/issues/92178\">#92178</a>, where adding a new impl <code>Add&lt;T&gt; for String</code> for a local type <code>T</code> makes it so that there are now _two_ different choices for <code>Add&lt;_&gt; for String</code>, which means <code>&amp;String</code> no longer coerces to <code>&amp;str</code>, causing <code>&amp;String + &amp;String</code> to fail.</p>",
        "id": 270304384,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643757030
    },
    {
        "content": "<p>The reason your case fails is that a function referenced by name has a distinct type from its function signature. E.g. <code>fn foo() -&gt; usize</code> has the type <code>fn() -&gt; usize {foo}</code> (corresponding to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/sty/enum.TyKind.html#variant.FnDef\"><code>TyKind::FnDef</code></a>), which _usually_ gets coerced into <code>fn() -&gt; usize</code> when needed.</p>",
        "id": 270304608,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643757130
    },
    {
        "content": "<p>Okay thanks for the explanation.<br>\nShould I open some kind of issue for this? I don't know a lot about rustc, so I can't really help with implementation</p>",
        "id": 270306714,
        "sender_full_name": "jasper",
        "timestamp": 1643758166
    },
    {
        "content": "<p>Sure. If you could minimize this code even further to just capture the issue itself, that would help too. Feel free to cc me on the issue, and I can write some explanation for what's happening on the type checker side.</p>",
        "id": 270306928,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643758267
    },
    {
        "content": "<p>Okay, I will do that tomorrow then!</p>",
        "id": 270307002,
        "sender_full_name": "jasper",
        "timestamp": 1643758313
    },
    {
        "content": "<p>I have just created a new bug report and tagged you in it: <a href=\"https://github.com/rust-lang/rust/issues/93583\">https://github.com/rust-lang/rust/issues/93583</a></p>",
        "id": 270380214,
        "sender_full_name": "jasper",
        "timestamp": 1643807241
    }
]