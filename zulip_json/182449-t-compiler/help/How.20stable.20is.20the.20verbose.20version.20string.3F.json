[
    {
        "content": "<p>I'm told that currently the only way to reliably ask <code>rustc</code> about the host target triple is to parse the verbose version string. E.g. running this:</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>rustc --version --verbose\n</code></pre></div>\n<p>On my machine the stable compiler prints this:</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>rustc 1.47.0 (18bf6b4f0 2020-10-07)\nbinary: rustc\ncommit-hash: 18bf6b4f01a6feaf7259ba7cdae58031af1b7b39\ncommit-date: 2020-10-07\nhost: x86_64-pc-windows-msvc\nrelease: 1.47.0\nLLVM version: 11.0\n</code></pre></div>\n<p>How stable is this output? Would the host line ever be removed? Is there an explicit format? Will it always be as simple as splitting on the first <code>: </code> to get key/value pairs after the first line? Is this documented anywhere?</p>",
        "id": 216017370,
        "sender_full_name": "Chris Denton",
        "timestamp": 1604857750
    },
    {
        "content": "<p>It is not considered stable but also doesn't change too often. I would expect that the overall format won't change too much.</p>\n<p>What are you using the host triple for? Perhaps there's a better way of getting at that information?</p>",
        "id": 216025580,
        "sender_full_name": "simulacrum",
        "timestamp": 1604869929
    },
    {
        "content": "<p>Cargo subcommand (edit: third party, to be clear). I need the default target, which is usually the same as the host. Cargo gives you very little information about the environment if you're outside of a build script. I can get it from rustup as well but obviously that requires that rustup is being used.</p>",
        "id": 216026009,
        "sender_full_name": "Chris Denton",
        "timestamp": 1604870597
    },
    {
        "content": "<p>Huh, if I'm understand this is seems that <a href=\"https://github.com/rust-lang/cargo/blob/f12d72e11b8643b4851a50325d77af962931fe98/src/cargo/util/rustc.rs#L51\">Cargo itself</a> uses <code>-Vv</code> for this purpose. It extracts the \"host: \" and \"release: \" fields. I'm not particularly comfortable doing this myself but I can't find another way.</p>",
        "id": 216026637,
        "sender_full_name": "Chris Denton",
        "timestamp": 1604871550
    },
    {
        "content": "<p>Hmm... perhaps <code>rustc --print</code> should have an option that exposes these fields in a way that has stronger guarantees?</p>",
        "id": 216027867,
        "sender_full_name": "Chris Denton",
        "timestamp": 1604873389
    },
    {
        "content": "<p>I would suggest making a PR against Cargo that exposes this information to cargo subcommands, probably as an environment variable</p>",
        "id": 216028008,
        "sender_full_name": "simulacrum",
        "timestamp": 1604873544
    },
    {
        "content": "<p>That said I would not object o a --print for the host triple, that seems reasonable</p>",
        "id": 216028018,
        "sender_full_name": "simulacrum",
        "timestamp": 1604873563
    },
    {
        "content": "<p>cargo does set <code>HOST</code> for build scripts, at least</p>",
        "id": 216028027,
        "sender_full_name": "cuviper",
        "timestamp": 1604873604
    },
    {
        "content": "<p>Not for anything else. All subcommands get is a <code>CARGO</code> variable that points to the cargo binary. Useful but not much to work with.</p>",
        "id": 216028155,
        "sender_full_name": "Chris Denton",
        "timestamp": 1604873776
    },
    {
        "content": "<p>But yeah, this is ultimately a Cargo issue.</p>",
        "id": 216028171,
        "sender_full_name": "Chris Denton",
        "timestamp": 1604873845
    }
]