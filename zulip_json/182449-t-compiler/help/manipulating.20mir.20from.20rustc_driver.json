[
    {
        "content": "<p>Hey all! I'm creating some prototypes interacting with the compiler's internal APIs (for example analyzing the generated HIR/MIR), and now I'd need to programmatically manipulate the MIR of a function. So far I've been using <code>rustc_driver</code> with a custom <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/trait.Callbacks.html\"><code>Callbacks</code></a> to hook into the right points of the compiler.</p>\n<p>Unless I'm overlooking something obvious I can't seem to find a way to manipulate the MIR by just linking to the driver and providing custom callbacks: the list of MIR passes is <a href=\"https://github.com/rust-lang/rust/blob/68a698baf6bfc61d85ce6e25122a092c60c7f21a/compiler/rustc_mir_transform/src/lib.rs#L484-L571\">hardcoded</a>, and <code>tcx.optimized_mir()</code> returns a read-only reference preventing mutations once MIR passes are executed.</p>\n<p>Of course I can fork the compiler each time I need to write a prototype and hardcode the additional MIR pass, but that's way less convenient than downloading a pinned <code>rustc-dev</code> and linking to <code>rustc_driver</code> with <code>#![feature(rustc_private)]</code>, as I'd need to rebuild the compiler whenever I make changes instead of just linking to the prebuilt compiler.</p>\n<p>Is there another way to manipulate the generated MIR through <code>rustc_driver</code>, or what would be the process (just a PR, MCP...) to add a way to register custom MIR passes from <code>rustc_driver</code> like it's currently possible for lints (happy to do the impl work)?</p>",
        "id": 258722363,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1634914246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> you could override the optimized_mir query with your own function</p>",
        "id": 258728901,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1634916936
    },
    {
        "content": "<p>rustdoc does that for <code>typeck</code>: <a href=\"https://github.com/rust-lang/rust/blob/68a698baf6bfc61d85ce6e25122a092c60c7f21a/src/librustdoc/core.rs#L280\">https://github.com/rust-lang/rust/blob/68a698baf6bfc61d85ce6e25122a092c60c7f21a/src/librustdoc/core.rs#L280</a></p>",
        "id": 258729051,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1634916992
    },
    {
        "content": "<p>hmm, but then I wouldn't be able to invoke the rest of the mir passes I think</p>",
        "id": 258729163,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1634917052
    },
    {
        "content": "<p>because those are all private items inside the <code>rustc_mir_transform</code> crate</p>",
        "id": 258729191,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1634917067
    },
    {
        "content": "<p>you could call the default provider first, but then you're limited to adding passes to the end of the list.</p>",
        "id": 258729325,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634917108
    },
    {
        "content": "<p>I think that adding a way to customize passes directly would be good. I guess an MCP would be how to go about this.</p>",
        "id": 258729432,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634917163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/manipulating.20mir.20from.20rustc_driver/near/258729325\">said</a>:</p>\n<blockquote>\n<p>you could call the default provider first, but then you're limited to adding passes to the end of the list.</p>\n</blockquote>\n<p>hmm, I'm not sure if that's possible? the provider for <code>optimized_mir</code> returns a <code>&amp;Body&lt;'tcx&gt;</code>, so even if I override that query the result I'll get from the previous one will be immutable</p>",
        "id": 258730179,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1634917484
    },
    {
        "content": "<p>oh, right I thought that it was a <code>Steal&lt;Body&gt;</code> like some of the earlier passes.</p>",
        "id": 258730576,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634917668
    },
    {
        "content": "<p><code>Body</code> implements <code>Clone</code>.</p>",
        "id": 258737081,
        "sender_full_name": "bjorn3",
        "timestamp": 1634920442
    },
    {
        "content": "<p>yes, but then I can't use that body for codegen, right?</p>",
        "id": 258738503,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1634921084
    },
    {
        "content": "<p>You can clone it, run the MIR pass and then use <code>tcx.arena.alloc()</code> to get a <code>&amp;'tcx Body&lt;'tcx&gt;</code>.</p>",
        "id": 258747281,
        "sender_full_name": "bjorn3",
        "timestamp": 1634924816
    }
]