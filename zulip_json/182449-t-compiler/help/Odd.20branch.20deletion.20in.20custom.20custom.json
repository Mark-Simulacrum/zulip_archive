[
    {
        "content": "<p>Hello!<br>\nI am getting some pretty weird optimization from LLVM 7 in my GPU codegen in which it seems to be deleting the completely wrong branch. I wanted to check if this was a known issue in the past, if so i may have to upgrade to llvm 13 right now. This is the rust code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Boo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Boo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_kernel</span><span class=\"p\">(</span><span class=\"n\">buf</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thread_idx_x</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">Boo</span>::<span class=\"n\">a</span><span class=\"p\">().</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the unoptimized LLVM IR looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@test_kernel</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv\">%_6</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span>\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"nv\">%_1.i</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i32</span> <span class=\"vg\">@__nvvm_thread_idx_x</span><span class=\"p\">(),</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!7</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i32</span> <span class=\"nv\">%_1.i</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb2</span>\n<span class=\"nl\">bb2:</span>                                              <span class=\"c\">; preds = %bb1</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN77_$LT$kernels$$render_kernels$$Boo$u20$as$u20$kernels$$render_kernels$$Foo$GT$1a17hcd167bac31c3390fE\"</span><span class=\"p\">()</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%3</span> <span class=\"k\">to</span> <span class=\"kt\">i8</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%_6</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n<span class=\"nl\">bb3:</span>                                              <span class=\"c\">; preds = %bb2</span>\n<span class=\"c\">; call core::option::Option&lt;T&gt;::is_some</span>\n  <span class=\"nv\">%_4</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN4core6option15Option$LT$T$GT$7is_some17h8d581fc592e36a2eE\"</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"nv\">%_6</span><span class=\"p\">)</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb4</span>\n<span class=\"nl\">bb4:</span>                                              <span class=\"c\">; preds = %bb3</span>\n  <span class=\"k\">br</span> <span class=\"kt\">i1</span> <span class=\"nv\">%_4</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb5</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb7</span>\n<span class=\"nl\">bb7:</span>                                              <span class=\"c\">; preds = %bb4</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"nv nv-Anonymous\">%2</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">**</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv\">%_3.i.i</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"kt\">i8</span><span class=\"p\">**</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb8</span>\n<span class=\"nl\">bb5:</span>                                              <span class=\"c\">; preds = %bb4</span>\n  <span class=\"nv nv-Anonymous\">%6</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"nv nv-Anonymous\">%2</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">**</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"nv\">%_3.i.i1</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"kt\">i8</span><span class=\"p\">**</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb6</span>\n<span class=\"nl\">bb6:</span>                                              <span class=\"c\">; preds = %bb5</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">32</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%_3.i.i1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb9</span>\n<span class=\"nl\">bb9:</span>                                              <span class=\"c\">; preds = %bb8, %bb6</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"nl\">bb8:</span>                                              <span class=\"c\">; preds = %bb7</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%_3.i.i</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb9</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Which looks correct, all the right branches are there. But suddenly, when llvm 7 optimizes it, it optimizes it away into the wrong branch:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@test_kernel</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nocapture</span> <span class=\"nv\">%buf</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%_1.i</span> <span class=\"p\">=</span> <span class=\"k\">tail</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i32</span> <span class=\"vg\">@__nvvm_thread_idx_x</span><span class=\"p\">(),</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!3</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i32</span> <span class=\"nv\">%_1.i</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"nv nv-Anonymous\">%0</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(it should be storing 32 instead of 7)<br>\nI presume this is an LLVM issue because current rustc has no problem with it, has this been a known issue in the past?</p>",
        "id": 258281660,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634681901
    },
    {
        "content": "<p>Are opt-level the same for both IRs?</p>",
        "id": 258289645,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634686434
    },
    {
        "content": "<p>yep both release</p>",
        "id": 258289692,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634686447
    },
    {
        "content": "<p>I tried putting the IR through llvm 7 <code>opt</code> and it optimized incorrectly too, so its not my codegen's pass manager</p>",
        "id": 258289711,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634686468
    },
    {
        "content": "<p>this is a link to the playground: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=53aad4ed9d506fd8dfd9193a268f1802\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=53aad4ed9d506fd8dfd9193a268f1802</a></p>",
        "id": 258289931,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634686622
    },
    {
        "content": "<p>looking at the llvm ir in debug, it looks the same for the most part</p>",
        "id": 258289953,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634686634
    },
    {
        "content": "<p>minus the debug stuff</p>",
        "id": 258289960,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634686637
    },
    {
        "content": "<p>I was thinking about whether MIR opt is broken</p>",
        "id": 258293839,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634689249
    },
    {
        "content": "<p>But if you compile with release and get correct LLVM IR then probably MIR opt is not the culprit</p>",
        "id": 258293878,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634689277
    },
    {
        "content": "<p>I dont think mir opt is the culprit, because cg_llvm works fine, my codegen doesnt, which uses llvm 7</p>",
        "id": 258293903,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634689298
    },
    {
        "content": "<p>oddly, if i use a bool over an option it works</p>",
        "id": 258294000,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634689352
    },
    {
        "content": "<p>actually, it doesnt seem to now</p>",
        "id": 258294073,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634689423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> could this perhaps be related to fewer-names?</p>",
        "id": 258294192,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634689500
    },
    {
        "content": "<p>there plenty of names in this IR though.</p>",
        "id": 258294567,
        "sender_full_name": "nagisa",
        "timestamp": 1634689765
    },
    {
        "content": "<p>Yeah</p>",
        "id": 258294584,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634689780
    },
    {
        "content": "<p>I dont get why it can optimize it just fine for a bool but not a struct</p>",
        "id": 258294655,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634689811
    },
    {
        "content": "<p>The only remotely close thing I can think of is <a href=\"https://github.com/rust-lang/rust/pull/90040\">https://github.com/rust-lang/rust/pull/90040</a></p>",
        "id": 258295007,
        "sender_full_name": "nagisa",
        "timestamp": 1634690051
    },
    {
        "content": "<p>but u'll need to provide IR for the <code>is_some</code> and the <code>Boo::a</code> too.</p>",
        "id": 258295030,
        "sender_full_name": "nagisa",
        "timestamp": 1634690069
    },
    {
        "content": "<p>Sure just give me a second ill get those</p>",
        "id": 258295046,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690086
    },
    {
        "content": "<p>the latter is </p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"c\">; &lt;kernels$$render_kernels$$Boo$u20$as$u20$kernels$$render_kernels$$Foo$GT$::a</span>\n<span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN77_$LT$kernels$$render_kernels$$Boo$u20$as$u20$kernels$$render_kernels$$Foo$GT$1a17hcd167bac31c3390fE\"</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!4</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">trunc</span> <span class=\"kt\">i8</span> <span class=\"nv nv-Anonymous\">%1</span> <span class=\"k\">to</span> <span class=\"kt\">i1</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%2</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 258295232,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690241
    },
    {
        "content": "<p>which looks ok to me, its representing the option as a bool (except not i1)</p>",
        "id": 258295245,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690260
    },
    {
        "content": "<p>is_some is</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN4core6option15Option$LT$T$GT$7is_some17h8d581fc592e36a2eE\"</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%self</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%self</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!4</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">trunc</span> <span class=\"kt\">i8</span> <span class=\"nv nv-Anonymous\">%1</span> <span class=\"k\">to</span> <span class=\"kt\">i1</span>\n  <span class=\"nv\">%_2</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%2</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">icmp</span> <span class=\"k\">eq</span> <span class=\"kt\">i64</span> <span class=\"nv\">%_2</span><span class=\"p\">,</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb2</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span>\n\n<span class=\"nl\">bb2:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n\n<span class=\"nl\">bb3:</span>                                              <span class=\"c\">; preds = %bb2, %bb1</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!4</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">trunc</span> <span class=\"kt\">i8</span> <span class=\"nv nv-Anonymous\">%4</span> <span class=\"k\">to</span> <span class=\"kt\">i1</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%5</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 258295263,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690280
    },
    {
        "content": "<p>other than the weird zext to i64 it looks fine to me also</p>",
        "id": 258295350,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690335
    },
    {
        "content": "<p>what's <code>!4</code>?</p>",
        "id": 258295363,
        "sender_full_name": "nagisa",
        "timestamp": 1634690346
    },
    {
        "content": "<p><code>!4 = !{i8 0, i8 1}</code></p>",
        "id": 258295382,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690361
    },
    {
        "content": "<p>yeah <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 258295424,
        "sender_full_name": "nagisa",
        "timestamp": 1634690402
    },
    {
        "content": "<p>and this is the entire llvm ir file (with a lot of other stuff because this is an \"actual\" crate<br>\n<a href=\"/user_uploads/4715/UAFtzT00CTPLGB3rUcG8A_bE/kernels.ll\">kernels.ll</a></p>",
        "id": 258295528,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690464
    },
    {
        "content": "<p>this is such basic IR that misoptimizing it seems… incredible. Like whatever is wrong its not subtly wrong.</p>",
        "id": 258295533,
        "sender_full_name": "nagisa",
        "timestamp": 1634690471
    },
    {
        "content": "<p>Exactly, im thinking that i mustve missed something glaringly obvious in the IR but i dont think thats the case</p>",
        "id": 258295559,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690508
    },
    {
        "content": "<p>This is the point where you pull out some <code>-bisect-opt-limit</code> and <code>-print-after-all</code>s.</p>",
        "id": 258295627,
        "sender_full_name": "nagisa",
        "timestamp": 1634690538
    },
    {
        "content": "<p>ill first try to get a minimal version of the IR then check if llvm 13 has the same thing</p>",
        "id": 258295679,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690585
    },
    {
        "content": "<p>do you happen to have <code>opt</code> for llvm 12/13? if so could you maybe try running it on that file? I only have llvm 7 opt :/</p>",
        "id": 258295730,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634690620
    },
    {
        "content": "<p>and this is a very minimal version of the bug <a href=\"/user_uploads/4715/3GHO5CetTU9XzgVKywvzwuOi/plsllvm.ll\">plsllvm.ll</a></p>",
        "id": 258296893,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634691485
    },
    {
        "content": "<p>Ok it seems like the incorrect transform happens after <code>Interprocedural Sparse Conditional Constant Propagation</code></p>",
        "id": 258297802,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692226
    },
    {
        "content": "<p>before that, the IR is </p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@test_kernel</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%_6</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"nv\">%_1.i</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i32</span> <span class=\"vg\">@__nvvm_thread_idx_x</span><span class=\"p\">(),</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!1</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i32</span> <span class=\"nv\">%_1.i</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN45_$LT$plsllvm$$Boo$u20$as$u20$plsllvm$$Foo$GT$1a17h8da93b67e1269092E\"</span><span class=\"p\">()</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%1</span> <span class=\"k\">to</span> <span class=\"kt\">i8</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%_6</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"nv\">%_4</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN4core6option15Option$LT$T$GT$7is_some17h70f5212344228d54E\"</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"nv\">%_6</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"nv nv-Anonymous\">%0</span>\n  <span class=\"k\">br</span> <span class=\"kt\">i1</span> <span class=\"nv\">%_4</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb5</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb7</span>\n\n<span class=\"nl\">bb7:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb9</span>\n\n<span class=\"nl\">bb5:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">32</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb9</span>\n\n<span class=\"nl\">bb9:</span>                                              <span class=\"c\">; preds = %bb7, %bb5</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 258297823,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692243
    },
    {
        "content": "<p>after it becomes</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@test_kernel</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%_6</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"nv\">%_1.i</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i32</span> <span class=\"vg\">@__nvvm_thread_idx_x</span><span class=\"p\">(),</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!1</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">zext</span> <span class=\"kt\">i32</span> <span class=\"nv\">%_1.i</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN45_$LT$plsllvm$$Boo$u20$as$u20$plsllvm$$Foo$GT$1a17h8da93b67e1269092E\"</span><span class=\"p\">()</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%_6</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"nv\">%_4</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN4core6option15Option$LT$T$GT$7is_some17h70f5212344228d54E\"</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"nv\">%_6</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"kt\">i8</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%buf</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"nv nv-Anonymous\">%0</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb7</span>\n\n<span class=\"nl\">bb7:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i8</span> <span class=\"m\">7</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb9</span>\n\n<span class=\"nl\">bb9:</span>                                              <span class=\"c\">; preds = %bb7</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 258297841,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692258
    },
    {
        "content": "<p>however at some point is_some seems to be rewritten into</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"kt\">i1</span> <span class=\"vg\">@\"_ZN4core6option15Option$LT$T$GT$7is_some17h70f5212344228d54E\"</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%self</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"k\">br</span> <span class=\"kt\">i1</span> <span class=\"k\">false</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb2</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span>\n\n<span class=\"nl\">bb2:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n\n<span class=\"nl\">bb3:</span>                                              <span class=\"c\">; preds = %bb1, %bb2</span>\n  <span class=\"nv\">%.0</span> <span class=\"p\">=</span> <span class=\"k\">phi</span> <span class=\"kt\">i8</span> <span class=\"p\">[</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">%bb2</span> <span class=\"p\">],</span> <span class=\"p\">[</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"nv\">%bb1</span> <span class=\"p\">]</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">trunc</span> <span class=\"kt\">i8</span> <span class=\"nv\">%.0</span> <span class=\"k\">to</span> <span class=\"kt\">i1</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%0</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 258297978,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692391
    },
    {
        "content": "<p>which is very odd to say the least</p>",
        "id": 258297981,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692398
    },
    {
        "content": "<p>and that seems to happen after <code>SROA</code></p>",
        "id": 258298119,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692493
    },
    {
        "content": "<p>sroa seems to just plain delete the stores ???</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nl\">bb2:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"c\">; store i8 1, i8* %0, align 1                                       deleted</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"c\">; store i8 0, i8* %0, align 1                                       deleted</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3</span>\n</code></pre></div>",
        "id": 258298272,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> IIRC you mentioned fewer-names caused issues with SROA, this isnt fewer-names but were the issues kind of like this?</p>",
        "id": 258298327,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692668
    },
    {
        "content": "<p>i hope i didnt find a major bug in LLVM for a library in which i dont control the version of llvm it uses <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258298593,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634692888
    },
    {
        "content": "<p>Ok LLVM 12 and LLVM 13 all optimize to the same exact thing</p>",
        "id": 258298997,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634693257
    },
    {
        "content": "<p>wait this looks kind of sus </p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nl\">bb1:</span>\n  <span class=\"nv\">%_1.i</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">zeroext</span> <span class=\"kt\">i32</span> <span class=\"vg\">@__nvvm_thread_idx_x</span><span class=\"p\">(),</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!2</span>\n\n<span class=\"nv nv-Anonymous\">!2</span> <span class=\"p\">=</span> <span class=\"p\">!{</span><span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">-1</span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 258299715,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634693963
    },
    {
        "content": "<p>nvm removing that range doesn't do anything</p>",
        "id": 258299794,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634694031
    },
    {
        "content": "<p>and this is what rustc gives which optimizes correctly <a href=\"/user_uploads/4715/DNPii4KDde7oOt9SlweI-OsK/rustc.ll\">rustc.ll</a></p>",
        "id": 258302289,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696155
    },
    {
        "content": "<p>strangely, rustc represents the option as an aggregate</p>",
        "id": 258302346,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696182
    },
    {
        "content": "<p>it also uses a range of <code>!2 = !{i8 0, i8 2}</code> for the option</p>",
        "id": 258302363,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696193
    },
    {
        "content": "<p>ok it is the range, substituting the 0-1 range in my code for 0-2 makes it optimize correctly</p>",
        "id": 258302610,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696411
    },
    {
        "content": "<p>guess ill go back to my codegen and see if i borked something in the range calculation</p>",
        "id": 258302632,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696427
    },
    {
        "content": "<p>oh my god i am so dumb, <code>self.cx.const_uint_big(llty, range.end)</code> should be <code>self.cx.const_uint_big(llty, range.end.wrapping_add(1))</code></p>",
        "id": 258302829,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696633
    },
    {
        "content": "<p>thank you everyone for your help <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258302869,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696645
    },
    {
        "content": "<p>sorry to bother</p>",
        "id": 258302874,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1634696648
    }
]