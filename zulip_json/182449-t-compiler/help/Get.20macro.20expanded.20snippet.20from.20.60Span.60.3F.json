[
    {
        "content": "<p>Hello <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span>, I've been using <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/source_map/struct.SourceMap.html#method.span_to_snippet\"><code>SourceMap::span_to_snippet()</code></a> to get the source code snippet corresponding to the given <code>Span</code>.</p>\n<p>When the API is used on <code>Span</code> of  items that were macro-generated, the returned snippet is from before macro expansion.<br>\n(e.g. <code>Span</code> of an <code>ImplItem</code> =&gt; <code>unsafe impl Send for $owned{}</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>// Example from : https://github.com/sfackler/rust-openssl/blob/master/openssl/src/macros.rs#L157-L160\nunsafe impl Send for $owned{}\nunsafe impl Send for $borrowed{}\n</code></pre></div>\n<p>Is there a canonical way to get the <strong>macro-expanded snippet</strong> of an HIR item?<br>\nThank you for checking out this question <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span></p>",
        "id": 219294231,
        "sender_full_name": "JOE1994",
        "timestamp": 1607484649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242132\">@JOE1994</span> I think you want <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/span_encoding/struct.Span.html#method.source_callsite\"><code>source_callsite</code></a></p>",
        "id": 219294681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607485257
    },
    {
        "content": "<p>Thank you for the pointer! After trying it out, it seems <code>source_callsite</code> may not be what I was looking for.<br>\nWhen I get a <code>Span</code> of a macro-generated <code>ImplItem</code> using <code>tcx.hir().span()</code> and call <code>SourceMap::span_to_snippet()</code> on it,<br>\nI get something like <strong><code>unsafe impl&lt;T&gt; Send for $borrowed&lt;T&gt;{}</code></strong>,<br>\nbut what I want is <strong><code>unsafe impl&lt;T&gt; Send for STRUCTNAMEHERE</code>{}</strong>.</p>\n<p>I want to replace the variable (that starts with <code>$</code>), with the actual name of the item that was inserted during macro expansion.</p>",
        "id": 219299650,
        "sender_full_name": "JOE1994",
        "timestamp": 1607491835
    },
    {
        "content": "<p>You will need to take the HIR node and pretty-print it. You can't do this based on the <code>Span</code> alone, as the <code>Span</code> only points to source locations. In case of an expanded macro it points to the macro invocation and the part of the macro from which it was expanded. A <code>Span</code> doesn't have any knowledge about the language that is used. Using them for C code is also completely valid.</p>",
        "id": 219311578,
        "sender_full_name": "bjorn3",
        "timestamp": 1607504999
    },
    {
        "content": "<p>Thank you for your response <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  I couldn't find an API that'll do what I want like magic, so I'm assuming that I need to refer to the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/print/pretty/trait.PrettyPrinter.html\"><code>PrettyPrinter</code></a> trait and their implementors to write a pretty-print code for my purpose.. :)</p>",
        "id": 219351102,
        "sender_full_name": "JOE1994",
        "timestamp": 1607527588
    },
    {
        "content": "<p>I think you can use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir_pretty/struct.State.html#method.print_impl_item\"><code>rustc_hir_pretty::State::print_impl_item</code></a>.</p>",
        "id": 219354394,
        "sender_full_name": "bjorn3",
        "timestamp": 1607528847
    },
    {
        "content": "<p>Thank you so much for your help ! <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span></p>",
        "id": 219429945,
        "sender_full_name": "JOE1994",
        "timestamp": 1607573115
    }
]