[
    {
        "content": "<p>I am trying to understand how lifetime resolution works for RPIT: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_resolve/src/late/lifetimes.rs#L754\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_resolve/src/late/lifetimes.rs#L754</a></p>\n<p>My understanding of the RPIT desugaring is:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn foo&lt;&#39;a&gt;(a: &amp;&#39;a usize) -&gt; impl Copy + &#39;a { a }\n</code></pre></div>\n<p>becomes</p>\n<div class=\"codehilite\"><pre><span></span><code>fn foo&lt;&#39;a&gt;(a: &amp;&#39;a usize) -&gt; FooRPIT&lt;&#39;a&gt; { a }\ntype FooRPIT&lt;&#39;a&gt; = impl Copy + &#39;a; // OpaqueTy\n</code></pre></div>\n<p>Current lifetime resolution code somehow intertwines the resolution of lifetimes in the <code>foo</code> and the resolution in <code>FooRPIT</code>. I attempted to separate the two: I wanted to perform resolution on the <code>type FooRPIT</code> item on its own. Doing that, I get lifetimes errors (<code>a ...is captured here... ...and is required to live as long as 'static here</code>).</p>\n<p>Is there some kind of lifetime unification that is done during resolution that I missed?<br>\ncc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> since you wrote <a href=\"https://github.com/rust-lang/rust/issues/54741\">#54741</a> (please redirect me if required).</p>",
        "id": 260526736,
        "sender_full_name": "cjgillot",
        "timestamp": 1636220515
    },
    {
        "content": "<p>There's a comment about this here: <a href=\"https://github.com/rust-lang/rust/blob/3326f19e8982ce033e04c163ddc520a76e42c737/compiler/rustc_borrowck/src/region_infer/opaque_types.rs#L14\">https://github.com/rust-lang/rust/blob/3326f19e8982ce033e04c163ddc520a76e42c737/compiler/rustc_borrowck/src/region_infer/opaque_types.rs#L14</a></p>",
        "id": 260528641,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1636223042
    },
    {
        "content": "<p>The lowering does some unexpected stuff to make the partial lifetime capturing work.</p>",
        "id": 260528700,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1636223091
    },
    {
        "content": "<p>Thanks for the reference, but I don't understand this comment.</p>",
        "id": 260528817,
        "sender_full_name": "cjgillot",
        "timestamp": 1636223234
    },
    {
        "content": "<p>What does \"<code>infer_opaque_definition_from_instantiation</code>compares lifetimes directly\" mean? Which representation of lifetimes is compared?</p>",
        "id": 260528935,
        "sender_full_name": "cjgillot",
        "timestamp": 1636223376
    },
    {
        "content": "<p>It means comparing <code>ty::Region</code>s using <code>==</code> rather than using a <code>TypeRelation</code></p>",
        "id": 260529024,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1636223493
    },
    {
        "content": "<p>Let me try to summarize:</p>\n<ol>\n<li>the algorithm renames all regions inside the concrete type to a region which appears in the substs: in our case, we compute the concrete type to be <code>&amp;'a usize</code> where <code>'a</code> is the generic parameter of <code>foo</code>;</li>\n<li>the algorithm declares <code>FooRPIT&lt;'b&gt; := concrete_type['a becomes 'b] = &amp;'b usize</code>.</li>\n</ol>\n<p>I still don't really see the link with how lifetime resolution is performed.</p>",
        "id": 260529269,
        "sender_full_name": "cjgillot",
        "timestamp": 1636223877
    },
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_infer/src/infer/opaque_types.rs#L555\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_infer/src/infer/opaque_types.rs#L555</a><br>\nThis line attempts to perform a substitution of the opaque type <code>FooRPIT</code> with the substs from <code>foo</code>, doesn't it?</p>",
        "id": 260529755,
        "sender_full_name": "cjgillot",
        "timestamp": 1636224557
    },
    {
        "content": "<p>The substs are from the <code>ty::Opaque</code></p>",
        "id": 260529854,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1636224719
    },
    {
        "content": "<p>Those would come from here: <a href=\"https://github.com/rust-lang/rust/blob/3326f19e8982ce033e04c163ddc520a76e42c737/compiler/rustc_typeck/src/astconv/mod.rs#L2410\">https://github.com/rust-lang/rust/blob/3326f19e8982ce033e04c163ddc520a76e42c737/compiler/rustc_typeck/src/astconv/mod.rs#L2410</a></p>",
        "id": 260529924,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1636224780
    },
    {
        "content": "<p>Actually, do we really need the HIR dance with lifetime generics? We don't do this with type &amp; const generics, why do it on lifetimes?</p>",
        "id": 260865045,
        "sender_full_name": "cjgillot",
        "timestamp": 1636493710
    },
    {
        "content": "<p>We only do it for lifetimes because only some lifetimes are captured by rpit, but all type and cost parameters are captured.</p>",
        "id": 260984269,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1636548725
    },
    {
        "content": "<p>Could this distinction be made during lifetime resolution: mark captured and non-captured lifetimes for a RPIT?</p>",
        "id": 261017949,
        "sender_full_name": "cjgillot",
        "timestamp": 1636562982
    },
    {
        "content": "<p>I mean:</p>\n<ul>\n<li>stop duplicating lifetime generics for RPIT;</li>\n<li>identify captured lifetimes during lifetime resolution;</li>\n<li>use that information for type inference.</li>\n</ul>",
        "id": 261018131,
        "sender_full_name": "cjgillot",
        "timestamp": 1636563048
    }
]