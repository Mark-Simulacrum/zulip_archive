[
    {
        "content": "<p>What's the difference between <code>PathKind::Dependency</code> and <code>PathKind::Crate</code> for purposes of metadata loading?<br>\n<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/search_paths/enum.PathKind.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/search_paths/enum.PathKind.html</a></p>\n<p>Context: rustdoc wants to load <em>all</em> extern crates at startup, but it's missing some because they have different kinds and it can only look them up by name, not by kind: <a href=\"https://github.com/rust-lang/rust/pull/75176#issuecomment-683216599\">https://github.com/rust-lang/rust/pull/75176#issuecomment-683216599</a>, <a href=\"https://github.com/rust-lang/rust/issues/68427\">https://github.com/rust-lang/rust/issues/68427</a>, <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L441\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L441</a></p>",
        "id": 208411070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598665780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> might have some insight</p>",
        "id": 208412034,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598667477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <code>--extern</code> vs <code>extern crate</code>? just grep for the name</p>",
        "id": 208414037,
        "sender_full_name": "eddyb",
        "timestamp": 1598670715
    },
    {
        "content": "<p>ok that tracks with why rustdoc isn't passing it</p>",
        "id": 208414083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598670738
    },
    {
        "content": "<p>apparently it <em>only</em> looks at <code>--extern</code>, not <code>extern crate</code></p>",
        "id": 208414087,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598670750
    },
    {
        "content": "<p>wait, <em>search paths</em> might be <code>-L</code></p>",
        "id": 208414089,
        "sender_full_name": "eddyb",
        "timestamp": 1598670759
    },
    {
        "content": "<p>which means that it doesn't pick up on builtin crates like <code>alloc</code> and <code>proc_macro</code></p>",
        "id": 208414091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598670768
    },
    {
        "content": "<blockquote>\n<p>thread 'rustc' panicked at 'Unable to resolve external crate core', src/librustdoc/core.rs:452:37</p>\n</blockquote>\n<p><em>great</em></p>",
        "id": 208414099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598670804
    },
    {
        "content": "<p>ugh this hack will be a mess even if it works</p>",
        "id": 208414143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598670854
    },
    {
        "content": "<p>why can't I find it</p>",
        "id": 208414144,
        "sender_full_name": "eddyb",
        "timestamp": 1598670856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <code>PathKind</code> might be a red herring now that I look closer</p>",
        "id": 208414181,
        "sender_full_name": "eddyb",
        "timestamp": 1598670957
    },
    {
        "content": "<p>but I think my original intuition was right on what <em>is</em> the problem. you're using <code>resolve_str_path_error</code> which cannot cause crates not in <code>--extern</code> to be loaded I don't think</p>",
        "id": 208414231,
        "sender_full_name": "eddyb",
        "timestamp": 1598670989
    },
    {
        "content": "<p>that's what causes the crate to be loaded when it panics though</p>",
        "id": 208414239,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671026
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/75176#issuecomment-670511952\">https://github.com/rust-lang/rust/pull/75176#issuecomment-670511952</a></p>",
        "id": 208414242,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671037
    },
    {
        "content": "<p>resolve goes through                 <code>self.crate_loader.maybe_process_path_extern(ident.name)</code></p>",
        "id": 208414247,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671058
    },
    {
        "content": "<p>wait why are you passing the crate name unprefixed?</p>",
        "id": 208414250,
        "sender_full_name": "eddyb",
        "timestamp": 1598671072
    },
    {
        "content": "<p>I would expect <code>::</code> prefixing or something</p>",
        "id": 208414289,
        "sender_full_name": "eddyb",
        "timestamp": 1598671084
    },
    {
        "content": "<p>I can add it, that's not a bad idea</p>",
        "id": 208414299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Difference.20between.20.60PathKind.3A.3ADependency.60.20and.20.60Crate.60/near/208414099\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>thread 'rustc' panicked at 'Unable to resolve external crate core', src/librustdoc/core.rs:452:37</p>\n</blockquote>\n<p><em>great</em></p>\n</blockquote>\n<p>is this what you care about, or the thing you just linked?</p>",
        "id": 208414300,
        "sender_full_name": "eddyb",
        "timestamp": 1598671119
    },
    {
        "content": "<p>I don't think it would make a diferent though</p>",
        "id": 208414302,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671122
    },
    {
        "content": "<p>they look very different</p>",
        "id": 208414304,
        "sender_full_name": "eddyb",
        "timestamp": 1598671127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> no</p>",
        "id": 208414306,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I'm surprised it ever worked without <code>::</code> lol</p>",
        "id": 208414308,
        "sender_full_name": "eddyb",
        "timestamp": 1598671137
    },
    {
        "content": "<p>the thing I care about is that rustdoc is missing some crates before it clones the resolver</p>",
        "id": 208414313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671145
    },
    {
        "content": "<p>okay but the two failure modes are very different</p>",
        "id": 208414319,
        "sender_full_name": "eddyb",
        "timestamp": 1598671170
    },
    {
        "content": "<p>the panic I just posted is not on github, it's me trying random things locally</p>",
        "id": 208414328,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671195
    },
    {
        "content": "<p>it turns out the <em>only</em> crate that was being loaded when documenting libproc_macro was <code>std</code></p>",
        "id": 208414375,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671219
    },
    {
        "content": "<p>hmm but std depends on core ... now I'm confused again</p>",
        "id": 208414380,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671238
    },
    {
        "content": "<p>yeah <code>::</code> doesn't make a difference</p>",
        "id": 208414386,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> you can't access indirect dependencies</p>",
        "id": 208414396,
        "sender_full_name": "eddyb",
        "timestamp": 1598671284
    },
    {
        "content": "<p>they have to be in your <code>Cargo.toml</code> which means they get passed as <code>--extern</code></p>",
        "id": 208414400,
        "sender_full_name": "eddyb",
        "timestamp": 1598671300
    },
    {
        "content": "<p>I see what the problem is, you're not operating with a sysroot</p>",
        "id": 208414401,
        "sender_full_name": "eddyb",
        "timestamp": 1598671310
    },
    {
        "content": "<p>the indirect dependency here is <code>core</code></p>",
        "id": 208414405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671316
    },
    {
        "content": "<p><code>libproc_macro</code> is the same as building <code>libstd</code> itself, wrt <code>libcore</code></p>",
        "id": 208414443,
        "sender_full_name": "eddyb",
        "timestamp": 1598671328
    },
    {
        "content": "<p>there's no libraries in the sysroot yet, this is the step to create them</p>",
        "id": 208414451,
        "sender_full_name": "eddyb",
        "timestamp": 1598671346
    },
    {
        "content": "<p>this is when documenting, not when building</p>",
        "id": 208414453,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671354
    },
    {
        "content": "<p>not sure if that makes a difference</p>",
        "id": 208414455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671362
    },
    {
        "content": "<p>so <code>libcore</code> exists only in a place where <code>--extern</code> could let you find it</p>",
        "id": 208414458,
        "sender_full_name": "eddyb",
        "timestamp": 1598671372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> if it's through <code>cargo doc</code> it should be the same</p>",
        "id": 208414469,
        "sender_full_name": "eddyb",
        "timestamp": 1598671390
    },
    {
        "content": "<p>anyway so I guess here we go to <code>PathKind</code>s again, although <em>I have no idea</em> where this is passed or how it interacts concretely</p>",
        "id": 208414477,
        "sender_full_name": "eddyb",
        "timestamp": 1598671417
    },
    {
        "content": "<p>there's a way to specify a search path (<code>-L dependency=target/release/deps</code>) so that you can't use <code>extern crate foo</code> or <code>::foo</code> to load the crate, but it <em>can</em> be found during the process of loading all transitive dependencies</p>",
        "id": 208414531,
        "sender_full_name": "eddyb",
        "timestamp": 1598671489
    },
    {
        "content": "<p>so e.g. it can find <code>libcore-*.rlib</code> which <code>libstd-*.rlib</code> needs but only the latter is directly visible to the currently compiled crate</p>",
        "id": 208414539,
        "sender_full_name": "eddyb",
        "timestamp": 1598671517
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 208414544,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I think the problem is with resolving a name relative to a crate that cannot be named by the current one, not with loading crates</p>",
        "id": 208414546,
        "sender_full_name": "eddyb",
        "timestamp": 1598671553
    },
    {
        "content": "<p>I have no idea how one gets from that to:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cannot find a built-in macro with name `cfg`\n</code></pre></div>",
        "id": 208414591,
        "sender_full_name": "eddyb",
        "timestamp": 1598671595
    },
    {
        "content": "<p>well I think the issue is that rustdoc can't load the crate if it can't be named</p>",
        "id": 208414592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671599
    },
    {
        "content": "<p>but if it's an indirect dependency, it's loaded anyway</p>",
        "id": 208414597,
        "sender_full_name": "eddyb",
        "timestamp": 1598671612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> the crate has to be loaded before the resolver is cloned because of rustdoc hacks</p>",
        "id": 208414600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671617
    },
    {
        "content": "<p>you can't name <code>core</code> or <code>alloc</code> but <code>std</code> depends on them</p>",
        "id": 208414601,
        "sender_full_name": "eddyb",
        "timestamp": 1598671622
    },
    {
        "content": "<p>rustdoc and resolve see two different CStores</p>",
        "id": 208414603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671624
    },
    {
        "content": "<p>it is loaded I promise you</p>",
        "id": 208414605,
        "sender_full_name": "eddyb",
        "timestamp": 1598671627
    },
    {
        "content": "<p>you just can't resolve paths into it</p>",
        "id": 208414610,
        "sender_full_name": "eddyb",
        "timestamp": 1598671641
    },
    {
        "content": "<blockquote>\n<p>error: cannot find a built-in macro with name <code>cfg</code></p>\n</blockquote>\n<p>this is because <code>core</code> is being loaded twice</p>",
        "id": 208414616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671669
    },
    {
        "content": "<p>o_O</p>",
        "id": 208414618,
        "sender_full_name": "eddyb",
        "timestamp": 1598671679
    },
    {
        "content": "<p>once as <code>Dependency</code> and once as <code>Crate</code></p>",
        "id": 208414620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671681
    },
    {
        "content": "<p>hence my original question</p>",
        "id": 208414658,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671689
    },
    {
        "content": "<p>okay you should've started with that :P</p>",
        "id": 208414660,
        "sender_full_name": "eddyb",
        "timestamp": 1598671698
    },
    {
        "content": "<p>there's zero clues that \"indirect dependency loaded twice\" is happening</p>",
        "id": 208414665,
        "sender_full_name": "eddyb",
        "timestamp": 1598671714
    },
    {
        "content": "<p>yeah sorry</p>",
        "id": 208414668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598671725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> but the second time it should just return the original <code>CrateNum</code> from the first loading, and have no side-effects</p>",
        "id": 208414670,
        "sender_full_name": "eddyb",
        "timestamp": 1598671739
    },
    {
        "content": "<blockquote>\n<p>rustdoc wants to load all extern crates at startup</p>\n</blockquote>\n<p>This is where rustdoc is wrong and why you are getting numerous problems.</p>",
        "id": 208425064,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1598692316
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68427#issuecomment-673883976\">https://github.com/rust-lang/rust/issues/68427#issuecomment-673883976</a></p>",
        "id": 208425101,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1598692330
    },
    {
        "content": "<p>Rustdoc should collect all paths it wants to resolve (intra-doc links) early when <code>Resolver</code> is still available, and resolve them.<br>\nThen it would eliminate its use of <code>Resolver::clone_outputs</code> and solve multiple problems in <code>rustc_*</code> crates as well, existing only due to rustdoc.</p>",
        "id": 208425169,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1598692514
    }
]