[
    {
        "content": "<p>I'm starting to think the answer is no but ... for <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208403962\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350/near/208403962</a> I want to find the name of the crate before calling <code>is_nightly_build()</code>. However I have no idea how to do this before the <code>Queries</code> are created. Is this possible even in theory?</p>",
        "id": 208408998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598662682
    },
    {
        "content": "<p>some places this pops up:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc_driver</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"mi\">696</span>:                        <span class=\"nc\">UnstableFeatures</span>::<span class=\"n\">from_environment</span><span class=\"p\">().</span><span class=\"n\">is_nightly_build</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"mi\">783</span>:    <span class=\"nc\">let</span><span class=\"w\"> </span><span class=\"n\">nightly_help</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">nightly_options</span>::<span class=\"n\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">793</span>:    <span class=\"nc\">let</span><span class=\"w\"> </span><span class=\"n\">at_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">verbose</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">nightly_options</span>::<span class=\"n\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc_session</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"mi\">1211</span>:    <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">edition</span><span class=\"p\">.</span><span class=\"n\">is_stable</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">nightly_options</span>::<span class=\"n\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">1508</span>:            <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">NativeLibKind</span>::<span class=\"n\">StaticNoBundle</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">nightly_options</span>::<span class=\"n\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">1925</span>:        <span class=\"nc\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">matches</span><span class=\"p\">.</span><span class=\"n\">opt_strs</span><span class=\"p\">(</span><span class=\"s\">&quot;Z&quot;</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">&quot;unstable-options&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mi\">1928</span>:    <span class=\"nc\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">1929</span>:        <span class=\"nc\">UnstableFeatures</span>::<span class=\"n\">from_environment</span><span class=\"p\">().</span><span class=\"n\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"mi\">1935</span>:            <span class=\"nc\">UnstableFeatures</span>::<span class=\"n\">from_environment</span><span class=\"p\">().</span><span class=\"n\">is_nightly_build</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">librustc_session</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"mi\">110</span>:    <span class=\"nc\">if</span><span class=\"w\"> </span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">unstable_features</span><span class=\"p\">.</span><span class=\"n\">is_nightly_build</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 208409093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598662805
    },
    {
        "content": "<p>FYI <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I haven't forgotten about <code>RUSTC_BOOTSTRAP=crate</code>, it's blocked on this</p>",
        "id": 209305044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491042
    },
    {
        "content": "<p>didn't find time to work on it last weekend</p>",
        "id": 209305079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491050
    },
    {
        "content": "<p>No problem. Thank you!</p>",
        "id": 209305115,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491072
    },
    {
        "content": "<p>Edition <em>must</em> be specified on CLI, unlike crate name which is both in CLI and attributes.</p>",
        "id": 209305181,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491109
    },
    {
        "content": "<p>ok, so in theory this should be possible</p>",
        "id": 209305269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491153
    },
    {
        "content": "<p>I would look for where Session is constructed -- at that point we've definitely parsed cli args</p>",
        "id": 209305335,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491173
    },
    {
        "content": "<p>Perhaps an easier solution -- and equally fine, IMO, is to always have UnstableFeatures return \"true\" if RUSTC_BOOTSTRAP is set at all</p>",
        "id": 209305393,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491218
    },
    {
        "content": "<p>and then have a hard error as early as possible if crate isn't in it</p>",
        "id": 209305406,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491229
    },
    {
        "content": "<p>I don't understand the proposed solution - most places that call <code>is_nightly_build()</code> never do anything with <code>UnstableFeatures</code> after</p>",
        "id": 209305439,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491262
    },
    {
        "content": "<p>so if that returns true, it's as if they set RUSTC_BOOTSTRAP to 1, there's no place to check the crate name</p>",
        "id": 209305498,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491284
    },
    {
        "content": "<p>I'm just saying you'd do that e.g. as part of session construction</p>",
        "id": 209305536,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491313
    },
    {
        "content": "<p>oh I see what you mean</p>",
        "id": 209305560,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491329
    },
    {
        "content": "<p>oh I guess that wouldn't help</p>",
        "id": 209305569,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491335
    },
    {
        "content": "<p>because we don't want to fatal error</p>",
        "id": 209305576,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491339
    },
    {
        "content": "<p>yeah part of the issue is that this doesn't always go through <code>Session</code></p>",
        "id": 209305579,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491339
    },
    {
        "content": "<p>hm</p>",
        "id": 209305581,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491341
    },
    {
        "content": "<p>you're probably going to have to try and remove the unstable_features from e.g. ParseSess</p>",
        "id": 209305732,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491423
    },
    {
        "content": "<p>crate_name being possible to set in code makes this annoying</p>",
        "id": 209305765,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491452
    },
    {
        "content": "<p>we could just ignore that case and not work with it, since it's atypical, but that seems bad</p>",
        "id": 209305805,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491472
    },
    {
        "content": "<p>Using RUSTC_BOOTSTRAP is also atypical. :)</p>",
        "id": 209305861,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491508
    },
    {
        "content": "<p>Doesn't seem too unreasonable to need to use the declared name of your crate from Cargo.toml rather than a name you declared from a .rs file.</p>",
        "id": 209305994,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491566
    },
    {
        "content": "<p>As long as we handle the dash-vs-underscore thing.</p>",
        "id": 209306055,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Find.20the.20name.20of.20a.20crate.20before.20I.20know.20the.20edition.3F/near/209305994\">said</a>:</p>\n<blockquote>\n<p>Doesn't seem too unreasonable to need to use the declared name of your crate from Cargo.toml rather than a name you declared from a .rs file.</p>\n</blockquote>\n<p>I don't like the idea of breaking stable code for this though</p>",
        "id": 209306066,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491615
    },
    {
        "content": "<p>er, well, it wouldn't?</p>",
        "id": 209306082,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491633
    },
    {
        "content": "<p>we just wouldn't enable unstable features which is <em>by definition</em> not breaking stable code</p>",
        "id": 209306141,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491645
    },
    {
        "content": "<p>I like the idea of '<code>RUSTC_BOOTSTRAP=crate</code> works only sometimes' even less :/</p>",
        "id": 209306156,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491658
    },
    {
        "content": "<p>it works <em>always</em> if you specify --crate-name on the CLI</p>",
        "id": 209306166,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491670
    },
    {
        "content": "<p>which Cargo always does</p>",
        "id": 209306181,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491677
    },
    {
        "content": "<p>hmm</p>",
        "id": 209306218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491700
    },
    {
        "content": "<p>One question -- do we know what the crate name for something like <code>rustc foo.rs</code> is? <code>foo</code>?</p>",
        "id": 209306242,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491715
    },
    {
        "content": "<p>well, I'll see how hard it is to implement and if it turns out to be a pain I can ignore <code>#![crate_name]</code> like you suggest</p>",
        "id": 209306251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Find.20the.20name.20of.20a.20crate.20before.20I.20know.20the.20edition.3F/near/209306242\">said</a>:</p>\n<blockquote>\n<p>One question -- do we know what the crate name for something like <code>rustc foo.rs</code> is? <code>foo</code>?</p>\n</blockquote>\n<p>that's what I would expect</p>",
        "id": 209306265,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599491733
    },
    {
        "content": "<p>My guess is that you want to modify UnstableFeatures::from_environment to take a crate name, and then try and push it down as needed to support that</p>",
        "id": 209306355,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491787
    },
    {
        "content": "<p>we do some early parsing of crate-level attributes already IIRC</p>",
        "id": 209306371,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Find.20the.20name.20of.20a.20crate.20before.20I.20know.20the.20edition.3F/near/209305732\">said</a>:</p>\n<blockquote>\n<p>you're probably going to have to try and remove the unstable_features from e.g. ParseSess</p>\n</blockquote>\n<p>this is actually really easy surprisingly</p>\n<div class=\"codehilite\"><pre><span></span><code>(-bash@build-server) ~/rustc ▶️ rg &#39;sess.unstable_features&#39; compiler/\ncompiler/rustc_session/src/parse.rs\n109:    if sess.unstable_features.is_nightly_build() {\n\ncompiler/rustc_parse/src/parser/diagnostics.rs\n417:            let allow_unstable = self.sess.unstable_features.is_nightly_build();\n</code></pre></div>",
        "id": 212924900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602349486
    },
    {
        "content": "<p>well, I take that back, this function wants to know about the release channel but doesn't take a crate name (and taking one would be pretty invasive):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Construct a diagnostic for a feature gate error.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">feature_err_issue</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sess</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">ParseSess</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">feature</span>: <span class=\"nc\">Symbol</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">span</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">MultiSpan</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">issue</span>: <span class=\"nc\">GateIssue</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">explain</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">DiagnosticBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212925525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602349891
    },
    {
        "content": "<p>ok so my current plan is to only support <code>--crate-name</code> and anything using <code>#![crate_name]</code> will still have to use <code>RUSTC_BOOTSTRAP=1</code></p>",
        "id": 212925726,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602350155
    },
    {
        "content": "<p>actually this works well because the use case is cargo build scripts</p>",
        "id": 212925918,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602350317
    },
    {
        "content": "<p>so --crate-name will <em>always</em> be set in the cases when <code>RUSTC_BOOTSTRAP=1</code> is disallowed</p>",
        "id": 212925922,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602350331
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/pull/77802\">https://github.com/rust-lang/rust/pull/77802</a></p>",
        "id": 212929994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602356489
    }
]