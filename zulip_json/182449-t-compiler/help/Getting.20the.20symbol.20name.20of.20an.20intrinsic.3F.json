[
    {
        "content": "<p>Hi everyone,</p>\n<p>I need to find the symbol name for a call to an intrinsic inside from inside <code>rustc_codegen_llvm</code>.</p>\n<p>For example, in a little debug build of a program I wrote, <code>wrapping_add</code> for <code>u32</code> codegens to a call to the symbol:</p>\n<div class=\"codehilite\"><pre><span></span><code>core::num::_&lt;impl u32&gt;::wrapping_add::h0d270c55aeefd2ff\n</code></pre></div>\n\n\n<p>I have the <code>Instance</code> and argument types of the intrinsic to hand.</p>\n<p>Unfortunately, <code>tcx.symbol_name</code> doesn't seem to work on intrinsics.</p>\n<p>Is there way to do this in the compiler? If not, is there an LLVM API call I could use to get it from the raw LLVM pointer for the intrinsic?</p>\n<p>Thanks!</p>",
        "id": 201375884,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592564476
    },
    {
        "content": "<p>Intrinsics don't have symbols, that's what makes them instrinsics. <code>core::num::_&lt;impl u32&gt;::wrapping_add::h0d270c55aeefd2ff</code> is the symbol for the <code>u32::wrapping_add</code> wrapper.</p>",
        "id": 201376147,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592564671
    },
    {
        "content": "<p>Intrinsics don't have symbol names. They are never codegened. Any mir calls to intrinsics are translated by the codegen backend to specific instruction sequences. For example <code>wrapping_add</code> turns into a LLVM add instruction.</p>",
        "id": 201376166,
        "sender_full_name": "bjorn3",
        "timestamp": 1592564690
    },
    {
        "content": "<p>Is it possible to get the symbol name of the wrapper?</p>",
        "id": 201376220,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592564744
    },
    {
        "content": "<p>Only if you know what the wrapper is.</p>",
        "id": 201376268,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1592564765
    },
    {
        "content": "<p>An intrinsics can be wrapped by multiple function.</p>",
        "id": 201376270,
        "sender_full_name": "bjorn3",
        "timestamp": 1592564766
    },
    {
        "content": "<p>I'm in <code>codegen_intrinsic_call()</code> in <code>librustc_codegen_llvm/intrinsic.rs</code>. I'm not sure if I have sufficient information to find the wrapper. In fact, it looks to me like it builds a call directly to the intrinsic?</p>",
        "id": 201376434,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592564907
    },
    {
        "content": "<p>That function matches on the intrinsic and then depending on the intrinsic codegens different code.</p>",
        "id": 201376493,
        "sender_full_name": "bjorn3",
        "timestamp": 1592564969
    },
    {
        "content": "<p>Yes, but I don't see any mention of wrappers. It looks to me like it just emits an LLVM intrinsic call to <code>llvm.x.y</code>.</p>",
        "id": 201376598,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592565046
    },
    {
        "content": "<p>Some rust intrinsics are lowered to LLVM intrinsics, while others are lowered to regular LLVM instructions.</p>",
        "id": 201376616,
        "sender_full_name": "bjorn3",
        "timestamp": 1592565060
    },
    {
        "content": "<p>yea, but llvm codegens that in \"arbitrary\" ways, usually just to raw asm instructions, not to function calls</p>",
        "id": 201376642,
        "sender_full_name": "oli",
        "timestamp": 1592565086
    },
    {
        "content": "<p>oh you're inside codegen_llvm</p>",
        "id": 201376665,
        "sender_full_name": "oli",
        "timestamp": 1592565110
    },
    {
        "content": "<p>nevermind me</p>",
        "id": 201376669,
        "sender_full_name": "oli",
        "timestamp": 1592565114
    },
    {
        "content": "<p>what do you need the symbol name of the wrapper for?</p>",
        "id": 201376732,
        "sender_full_name": "oli",
        "timestamp": 1592565144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223288\">Edd Barrett</span> Is working on an <a href=\"https://github.com/softdevteam/ykrustc/\">alternative codegen backend</a> that is a tracing jit. He probably wants to avoid having to implement all intrinsics by hand for now by calling functions instead.</p>",
        "id": 201376793,
        "sender_full_name": "bjorn3",
        "timestamp": 1592565215
    },
    {
        "content": "<p>To add a little context, we are writing a tracing JIT for Rust. We've JITted a call to <code>wrapping_add</code>, which gets turned into a call to a symbol in our IR.</p>\n<p>I'm starting to wonder if we need to implement our own intrinsics in the JIT.</p>\n<p>And what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> said :)</p>",
        "id": 201376809,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592565236
    },
    {
        "content": "<p>not all intrinsics even have wrappers. <code>transmute</code> is directly invoked, there's no wrapper</p>",
        "id": 201376929,
        "sender_full_name": "oli",
        "timestamp": 1592565317
    },
    {
        "content": "<p>ok, but all non-<code>transmute</code> intrinsics have wrappers</p>",
        "id": 201376954,
        "sender_full_name": "oli",
        "timestamp": 1592565337
    },
    {
        "content": "<p>you can make the wrappers lang items, but that's a lot of lang items <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 201376975,
        "sender_full_name": "oli",
        "timestamp": 1592565356
    },
    {
        "content": "<p>a hacky way would be to use paths to get the <code>DefId</code> of the wrappers and then compute the symbol name</p>",
        "id": 201377038,
        "sender_full_name": "oli",
        "timestamp": 1592565395
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/blob/742706511c9f33c6a0d4380392e513e5249057e3/clippy_lints/src/utils/mod.rs#L252\">https://github.com/rust-lang/rust-clippy/blob/742706511c9f33c6a0d4380392e513e5249057e3/clippy_lints/src/utils/mod.rs#L252</a></p>",
        "id": 201377131,
        "sender_full_name": "oli",
        "timestamp": 1592565484
    },
    {
        "content": "<p>not great, but should allow you to progress immediately without having to do much groundwork</p>",
        "id": 201377149,
        "sender_full_name": "oli",
        "timestamp": 1592565513
    },
    {
        "content": "<p>Maybe creating an <code>Instance</code> with <code>InstanceDef::ReifyShim</code> pointing to the intrinsic will work? You would need to extend the mono item collector to generate appropriate <code>InstanceDef::ReifyShim</code> for all intrinsics when used though.</p>",
        "id": 201377168,
        "sender_full_name": "bjorn3",
        "timestamp": 1592565533
    },
    {
        "content": "<p>You should then skip SIR generation for those intrinsic <code>ReifyShim</code>'s and use the <code>ReifyShim</code> symbol_name when generating SIR for intrinsic calls.</p>",
        "id": 201377208,
        "sender_full_name": "bjorn3",
        "timestamp": 1592565597
    },
    {
        "content": "<p>(For those not familiar with the tracing JIT of <span class=\"user-mention silent\" data-user-id=\"223288\">Edd Barrett</span>, SIR is the IR produced by the codegen backend and consumed by the JIT itself)</p>",
        "id": 201377297,
        "sender_full_name": "bjorn3",
        "timestamp": 1592565662
    },
    {
        "content": "<p>OK, I understood <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s suggestion.</p>\n<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Can you expand upon:</p>\n<blockquote>\n<p>You would need to extend the mono item collector to generate appropriate InstanceDef::ReifyShim for all intrinsics when used though.</p>\n</blockquote>\n<p>Thanks</p>",
        "id": 201377325,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592565695
    },
    {
        "content": "<p>yea I think the reifyshim solution (if it works) is the better one</p>",
        "id": 201377338,
        "sender_full_name": "oli",
        "timestamp": 1592565721
    },
    {
        "content": "<p>if it doesn't work, it's likely not hard to make it work</p>",
        "id": 201377389,
        "sender_full_name": "oli",
        "timestamp": 1592565740
    },
    {
        "content": "<p>In <code>rustc_mir::monomorphize::collector</code> all mono items that need to be codegened are collected. You would need to extend it to create a <code>ReifyShim</code> mono item for every intrinsic call.</p>",
        "id": 201377407,
        "sender_full_name": "bjorn3",
        "timestamp": 1592565761
    },
    {
        "content": "<p>You should add a line like <a href=\"https://github.com/rust-lang/rust/blob/a39c7787ba246353178e099373b9240be0d9e603/src/librustc_mir/monomorphize/collector.rs#L743\">https://github.com/rust-lang/rust/blob/a39c7787ba246353178e099373b9240be0d9e603/src/librustc_mir/monomorphize/collector.rs#L743</a> at <a href=\"https://github.com/rust-lang/rust/blob/a39c7787ba246353178e099373b9240be0d9e603/src/librustc_mir/monomorphize/collector.rs#L726\">https://github.com/rust-lang/rust/blob/a39c7787ba246353178e099373b9240be0d9e603/src/librustc_mir/monomorphize/collector.rs#L726</a> for <code>InstanceDef::Intrinsic</code>. Take care to change the <code>instance</code> to be a <code>ReifyShim</code> instead of an <code>Intrinsic</code> though.</p>",
        "id": 201377548,
        "sender_full_name": "bjorn3",
        "timestamp": 1592565881
    },
    {
        "content": "<p>I see.</p>\n<p>Thanks everyone. This has been very useful.</p>\n<p>I need to weigh up <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>'s solution, vs. implementing our own intrinsics. In the long run we probably want the latter, as we want as few calls in our trace as possible. But, as you say, that's a <em>lot</em> of intrinsics!</p>",
        "id": 201377558,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592565898
    },
    {
        "content": "<p>If I understand correctly, this is the modification we need is something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    match instance.def {\n        ty::InstanceDef::Intrinsic(_) =&gt; {\n            output.push(create_fn_mono_item(\n                Instance {\n                    def: InstanceDef::ReifyShim(instance.def_id()),\n                    substs: instance.substs,\n                }\n            ))\n        },\n        ty::InstanceDef::Virtual(..) =&gt; {\n            if !is_direct_call {\n                bug!(&quot;{:?} being reified&quot;, instance);\n            }\n        }\n...\n</code></pre></div>\n\n\n<p>But this will give crashes as the compiler builds itself:</p>\n<div class=\"codehilite\"><pre><span></span><code>symbol `add_with_overflow` is already defined\n</code></pre></div>\n\n\n<p>Also tried monomorphising the instance first:</p>\n<div class=\"codehilite\"><pre><span></span><code>    match instance.def {\n        ty::InstanceDef::Intrinsic(_) =&gt; {\n            let callee_ty = instance.monomorphic_ty(tcx);\n            if let ty::FnDef(def_id, substs) = callee_ty.kind {\n                output.push(create_fn_mono_item(\n                    Instance {\n                        def: InstanceDef::ReifyShim(def_id),\n                        substs,\n                    }\n                ))\n            } else {\n                bug!(&quot;xxx&quot;);\n            }\n        },\n</code></pre></div>\n\n\n<p>Same outcome.</p>\n<p>Is there any hope?</p>\n<p>EDIT: maybe only push if the item is not yet present? EDIT EDIT: Nope.</p>",
        "id": 201397386,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1592576946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Getting.20the.20symbol.20name.20of.20an.20intrinsic.3F/near/201376954\">said</a>:</p>\n<blockquote>\n<p>ok, but all non-<code>transmute</code> intrinsics have wrappers</p>\n</blockquote>\n<p>The wrapers aren't necessarily direct calls to intrinsics either, however, and the intrinsics can be called directly. So there may be cases where a call of an intrinsic cannot map to any wrapper.</p>",
        "id": 201512126,
        "sender_full_name": "nagisa",
        "timestamp": 1592707364
    },
    {
        "content": "<p>/me says before reading the rest of the thread</p>",
        "id": 201512196,
        "sender_full_name": "nagisa",
        "timestamp": 1592707422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"223288\">Edd Barrett</span> and I have talked about this in PM.</p>",
        "id": 201524362,
        "sender_full_name": "bjorn3",
        "timestamp": 1592728906
    }
]