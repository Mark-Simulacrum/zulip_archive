[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>  I want to add a compilation test for certain lint behavior on <code>#[naked]</code> functions. I've created a function in the rust playground that I want to add a test for.</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2acfa86af710553d3a6583b41ba2f0f4\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2acfa86af710553d3a6583b41ba2f0f4</a></p>\n<p>However, when I copy/paste the function into <code>src/test/ui/asm/naked-functions.rs</code>, none of the errors actually occur when I run the test. Further, one of them permits inline asm without an unsafe block; which seems... unsafe. I'm pretty sure there's something about test execution that I'm missing. But I'm struggling at this point to figure out what.</p>",
        "id": 247973567,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1627939524
    },
    {
        "content": "<p>That's strange, we have a ui test that specifically checks that <code>asm!</code> without unsafe is rejected.</p>",
        "id": 248193094,
        "sender_full_name": "Amanieu",
        "timestamp": 1627978213
    },
    {
        "content": "<p>this might be because previous errors prevent the errors you expect from emitting.</p>",
        "id": 248215746,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627994969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I presume you're talking about <code>src/test/ui/unsafe/inline_asm.rs</code></p>",
        "id": 248220868,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1627997544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"361356\">@fee1-dead</span> The previous errors would show up in the test output. I tried introducing another error manually before the function and I see the manual error clearly in the output.</p>",
        "id": 248229192,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628001234
    },
    {
        "content": "<p>Here are my changes:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git diff\ndiff --git a/src/test/ui/asm/naked-functions.rs b/src/test/ui/asm/naked-functions.rs\nindex 7075995c2cf..6ce086f4648 100644\n--- a/src/test/ui/asm/naked-functions.rs\n+++ b/src/test/ui/asm/naked-functions.rs\n@@ -210,3 +210,18 @@ pub extern &quot;C&quot; fn valid_b() {\n pub unsafe extern &quot;C&quot; fn inline_all() {\n     asm!(&quot;&quot;, options(noreturn));\n }\n+\n+#[forbid(unused_variables)]\n+pub extern &quot;sysv64&quot; fn unused_arguments(a: usize, b: usize) -&gt; usize {\n+    //~^ ERROR unused variable: `a`\n+    //~| ERROR unused variable: `b`\n+    //unsafe {\n+        asm!(\n+            &quot;mov rax, rdi&quot;,\n+            &quot;add rax, rsi&quot;,\n+            &quot;ret&quot;,\n+            options(noreturn)\n+        );\n+        //~^ ERROR use of inline assembly is unsafe and requires unsafe function or block\n+    //}\n+}\n</code></pre></div>",
        "id": 248231245,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628002126
    },
    {
        "content": "<p>Here is my output:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./x.py test src/test/ui/asm/naked-functions.rs\n...\n---- [ui] ui/asm/naked-functions.rs stdout ----\n\nerror: /home/npmccallum/rust/src/test/ui/asm/naked-functions.rs:215: expected error not found: unused variable: `a`\n\nerror: /home/npmccallum/rust/src/test/ui/asm/naked-functions.rs:215: expected error not found: unused variable: `b`\n\nerror: /home/npmccallum/rust/src/test/ui/asm/naked-functions.rs:224: expected error not found: use of inline assembly is unsafe and requires unsafe function or block\n\nerror: 0 unexpected errors found, 3 expected errors not found\nstatus: exit status: 1\ncommand: &quot;/home/npmccallum/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/npmccallum/rust/src/test/ui/asm/naked-functions.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Ccodegen-units=1&quot; &quot;-Zui-testing&quot; &quot;-Zdeduplicate-diagnostics=no&quot; &quot;-Zemit-future-incompat-report&quot; &quot;--emit&quot; &quot;metadata&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;--out-dir&quot; &quot;/home/npmccallum/rust/build/x86_64-unknown-linux-gnu/test/ui/asm/naked-functions&quot; &quot;-A&quot; &quot;unused&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Cdebuginfo=0&quot; &quot;-Lnative=/home/npmccallum/rust/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/npmccallum/rust/build/x86_64-unknown-linux-gnu/test/ui/asm/naked-functions/auxiliary&quot;\nnot found errors (from test file): [\n    Error {\n        line_num: 215,\n        kind: Some(\n            Error,\n        ),\n        msg: &quot;unused variable: `a`&quot;,\n    },\n    Error {\n        line_num: 215,\n        kind: Some(\n            Error,\n        ),\n        msg: &quot;unused variable: `b`&quot;,\n    },\n    Error {\n        line_num: 224,\n        kind: Some(\n            Error,\n        ),\n        msg: &quot;use of inline assembly is unsafe and requires unsafe function or block&quot;,\n    },\n]\n</code></pre></div>",
        "id": 248231461,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628002215
    },
    {
        "content": "<p>Now the <code>-A unused</code> in the command could be relevant. But I'm explicitly overriding that with the attribute. It also doesn't explain the missing unsafe error.</p>",
        "id": 248231601,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628002294
    },
    {
        "content": "<p>Unsafety checking happens later (MIR / THIR?). I wouldn't be surprised if other errors stop the compilation before that.</p>",
        "id": 248231615,
        "sender_full_name": "tm",
        "timestamp": 1628002308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> That could answer the unsafe question. I don't <em>need</em> a fix for the unsafe stuff. I'm only using it as a (probably bad) proxy for why the unused stuff isn't working.</p>",
        "id": 248231945,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628002420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Test.20for.20naked.20args/near/248231615\">said</a>:</p>\n<blockquote>\n<p>Unsafety checking happens later (MIR / THIR?). I wouldn't be surprised if other errors stop the compilation before that.</p>\n</blockquote>\n<p>(Still MIR by default today, THIR unsafeck is behind a <code>-Z</code> flag)</p>",
        "id": 248232284,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1628002556
    },
    {
        "content": "<p>But I need to produce the <code>unused_variables</code> error so that when I disable the error in this particular case I know that I've succeeded.</p>",
        "id": 248232285,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628002556
    },
    {
        "content": "<p>The situation with unused variables lint is similar: this high level structure of passes: <a href=\"https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler/rustc_interface/src/passes.rs#L854-L911\">https://github.com/rust-lang/rust/blob/2939249f294dd54a9ce78a8ee1f2922a44e7fb7c/compiler/rustc_interface/src/passes.rs#L854-L911</a><br>\nIn between <code>check_mod_naked_functions</code> and <code>check_mod_liveness</code> (emits warnings about unused variables) there is <code>typeck::check_crate(tcx)?;</code> which will exit if there had been any errors reported.</p>",
        "id": 248233088,
        "sender_full_name": "tm",
        "timestamp": 1628002881
    },
    {
        "content": "<p>You will need a separate UI test.</p>",
        "id": 248233162,
        "sender_full_name": "tm",
        "timestamp": 1628002908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> I don't understand what the separate UI test accomplishes.</p>",
        "id": 248233436,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628003023
    },
    {
        "content": "<p>Oh, wait. The problem is that there can't be any other errors in the file. Correct?</p>",
        "id": 248233542,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628003054
    },
    {
        "content": "<p>Yes, exactly. Any other errors from an earlier compilation stage would be problematic.</p>",
        "id": 248233966,
        "sender_full_name": "tm",
        "timestamp": 1628003264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> Now I have this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git diff HEAD\ndiff --git a/src/test/ui/asm/naked-functions-unused.rs b/src/test/ui/asm/naked-functions-unused.rs\nnew file mode 100644\nindex 00000000000..ce4ce7433d3\n--- /dev/null\n+++ b/src/test/ui/asm/naked-functions-unused.rs\n@@ -0,0 +1,19 @@\n+// only-x86_64\n+#![warn(unused)]\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+#![crate_type = &quot;lib&quot;]\n+\n+#[naked]\n+pub extern &quot;sysv64&quot; fn unused_arguments(a: usize, b: usize) -&gt; usize {\n+    //~^ WARN unused variable: `a`\n+    //~| WARN unused variable: `b`\n+    unsafe {\n+        asm!(\n+            &quot;mov rax, rdi&quot;,\n+            &quot;add rax, rsi&quot;,\n+            &quot;ret&quot;,\n+            options(noreturn)\n+        );\n+    }\n+}\n</code></pre></div>",
        "id": 248234171,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628003342
    },
    {
        "content": "<p>UI tests by default expected to fail, while this succeeds. So it will need either a <code>#[deny(expected-lint)]</code>, to turn warnings into errors, or <code>// check-pass</code> annotation.</p>",
        "id": 248234621,
        "sender_full_name": "tm",
        "timestamp": 1628003523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> I got it!</p>",
        "id": 248234860,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628003635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span> Thank you so much!</p>",
        "id": 248234893,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1628003644
    }
]