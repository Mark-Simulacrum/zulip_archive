[
    {
        "content": "<p>is there any guidance on when something should be added to the great huge table of pre-interned symbols so that it can be used as sym::foo? currently I'm comparing a symbol against a literal string, but wondering if I should create a new interned symbol for the comparison</p>",
        "id": 226716303,
        "sender_full_name": "bstrie",
        "timestamp": 1613591903
    },
    {
        "content": "<p>generally if you're comparing against a string you should add to the interned list instead, afaik</p>",
        "id": 226716357,
        "sender_full_name": "simulacrum",
        "timestamp": 1613591926
    },
    {
        "content": "<p>hmm, does that offer any speedup if you have to intern it every time?</p>",
        "id": 226716407,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613591945
    },
    {
        "content": "<p>I'm confused by that question - the interning happens once, at rustc startup, and that is largely static IIRC (and in any case several hundred hash table insertions are cheap). Comparing against a string at runtime is relatively expensive.</p>",
        "id": 226716640,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592039
    },
    {
        "content": "<p>to clarify in my case it's a string literal I'm comparing against, so it's already living in static memory</p>",
        "id": 226716685,
        "sender_full_name": "bstrie",
        "timestamp": 1613592061
    },
    {
        "content": "<p>(IIRC, getting &amp;str from a symbol requires a lock today)</p>",
        "id": 226716701,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592069
    },
    {
        "content": "<p>ah interesting</p>",
        "id": 226716725,
        "sender_full_name": "bstrie",
        "timestamp": 1613592080
    },
    {
        "content": "<p>or at least TLS. in any case, it's cheaper to compare symbols than symbol to string.</p>",
        "id": 226716755,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/when.20to.20add.20a.20new.20symbol/near/226716640\">said</a>:</p>\n<blockquote>\n<p>I'm confused by that question - the interning happens once, at rustc startup, and that is largely static IIRC (and in any case several hundred hash table insertions are cheap). Comparing against a string at runtime is relatively expensive.</p>\n</blockquote>\n<p>right - comparing <code>x == sym::rustdoc</code> is cheap. I'm asking about whether <code>Symbol::intern(x) == sym::rustdoc</code> is faster than <code>x == \"rustdoc\"</code>.</p>",
        "id": 226716860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613592143
    },
    {
        "content": "<p>oh. what is x there?</p>",
        "id": 226717213,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592321
    },
    {
        "content": "<p>if x is &amp;str it seems.. obvious that interning won't give you any wins? doing strictly more work</p>",
        "id": 226717280,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592352
    },
    {
        "content": "<p>that was my question, yeah</p>",
        "id": 226717385,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613592388
    },
    {
        "content": "<p>the point is that you generally - in the compiler anyway - don't have &amp;str, you already have an Ident or Symbol so you're not calling intern there</p>",
        "id": 226717387,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592388
    },
    {
        "content": "<p>so then <span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> my question for you is if you have a &amp;str or a <code>Symbol</code></p>",
        "id": 226717409,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613592399
    },
    {
        "content": "<p>it's been called once during parsing</p>",
        "id": 226717417,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592401
    },
    {
        "content": "<p>they already said they have a symbol: \"a symbol against a literal string\"</p>",
        "id": 226717466,
        "sender_full_name": "simulacrum",
        "timestamp": 1613592425
    },
    {
        "content": "<p>ah ok, sorry for the noise</p>",
        "id": 226717501,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613592440
    },
    {
        "content": "<p>yes the type I have is an actual Symbol, I didn't intern this myself, who knows where it's from :)</p>",
        "id": 226717577,
        "sender_full_name": "bstrie",
        "timestamp": 1613592475
    }
]