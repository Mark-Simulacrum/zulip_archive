[
    {
        "content": "<p>Hello <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span> ,<br>\nI'm trying to inspect the usage of a struct's generic parameters across multiple <code>impl</code>s or methods.</p>\n<p>It seems that both the index (<code>rustc_middle::ty::GenericParamDef.index : u32</code>) and the <code>DefId</code>of a generic parameter (<code>rustc_middle::ty::GenericParamDef.def_id</code>) are only unique within a given <code>impl</code> or method and are not globally unique.</p>\n<p><strong>Below shows an example where the index/<code>DefId</code> of <code>B</code> from <code>My&lt;A, B&gt;</code> differ across different <code>impl</code>s <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">My</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">val1</span>: <span class=\"nc\">A</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">val2</span>: <span class=\"nc\">B</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// F.index = 1</span>\n<span class=\"c1\">// F.DefId = \"DefId(0:10 ~ identify_generic_params[8787]::{{impl}}[0]::F[0])\"</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Send</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">My</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">u32</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// F.index = 0</span>\n<span class=\"c1\">// F.DefId = \"DefId(0:12 ~ identify_generic_params[8787]::{{impl}}[1]::F[0])\"</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">My</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there a canonical way to identify same generic parameters across multiple <code>impl</code>s/methods?<br>\nOr is this a feature that isn't yet readily available?</p>\n<p>Thank you for checking out this post!</p>",
        "id": 224655134,
        "sender_full_name": "JOE1994",
        "timestamp": 1612114248
    },
    {
        "content": "<p>you can look at the self type of the impl</p>",
        "id": 224655370,
        "sender_full_name": "lcnr",
        "timestamp": 1612114630
    },
    {
        "content": "<p>which should be <code>ty::Adt(def_id, substs)</code> and afaict <code>substs</code> is what you are looking for</p>",
        "id": 224655376,
        "sender_full_name": "lcnr",
        "timestamp": 1612114656
    },
    {
        "content": "<p>Using <code>substs</code> seems to be the way! Thank you very much <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 224656494,
        "sender_full_name": "JOE1994",
        "timestamp": 1612116179
    }
]