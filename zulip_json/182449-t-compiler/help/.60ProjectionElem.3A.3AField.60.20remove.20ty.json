[
    {
        "content": "<p>currently <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.ProjectionElem.html#variant.Field\"><code>ProjectionElem::Field</code></a> remembers the type of the field from hir typeck instead of recomputing it in the mir</p>",
        "id": 276016487,
        "sender_full_name": "lcnr",
        "timestamp": 1647850055
    },
    {
        "content": "<p>this is currently incorrect for field projections on the lhs of a let binding:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()),))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,)</span>: <span class=\"p\">(</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">()),)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>results in</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:3:10\n  |\n3 |     let (_y,): (fn(&amp;'b ()),) = x;\n  |          ^^ one type is more general than the other\n  |\n  = note: expected fn pointer `for&lt;'a&gt; fn(&amp;'a ())`\n             found fn pointer `fn(&amp;())`\n\nerror[E0308]: mismatched types\n --&gt; src/lib.rs:3:16\n  |\n3 |     let (_y,): (fn(&amp;'b ()),) = x;\n  |                ^^^^^^^^^^^^^ one type is more general than the other\n  |\n  = note: expected tuple `(fn(&amp;'b ()),)`\n             found tuple `(for&lt;'a&gt; fn(&amp;'a ()),)`\n\nFor more information about this error, try `rustc --explain E0308`.\n</code></pre></div>",
        "id": 276017462,
        "sender_full_name": "lcnr",
        "timestamp": 1647850832
    },
    {
        "content": "<p>looking at the mir it is clear why that's the case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">User</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Annotations</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">max_universe</span>: <span class=\"nc\">U0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variables</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Ty</span><span class=\"p\">((</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">()),))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">16</span>: <span class=\"mi\">3</span>:<span class=\"mi\">29</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">max_universe</span>: <span class=\"nc\">U0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">variables</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Ty</span><span class=\"p\">((</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">()),))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">16</span>: <span class=\"mi\">3</span>:<span class=\"mi\">29</span><span class=\"w\"></span>\n<span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_1</span>: <span class=\"p\">(</span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">()),))</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\">                       </span><span class=\"c1\">// in scope 0 at src/lib.rs:2:12: 2:13</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\">                      </span><span class=\"c1\">// return place in scope 0 at src/lib.rs:2:38: 2:38</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">UserTypeProjection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">UserType</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">projs</span>: <span class=\"p\">[</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"p\">())]</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// in scope 0 at src/lib.rs:3:10: 3:12</span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">_y</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">;</span><span class=\"w\">                  </span><span class=\"c1\">// in scope 1 at src/lib.rs:3:10: 3:12</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">AscribeUserType</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UserTypeProjection</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">UserType</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">projs</span>: <span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"> </span><span class=\"c1\">// scope 0 at src/lib.rs:3:16: 3:29</span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at src/lib.rs:3:10: 3:12</span>\n<span class=\"w\">        </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">.</span><span class=\"mi\">0</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">()));</span><span class=\"w\">            </span><span class=\"c1\">// scope 0 at src/lib.rs:3:10: 3:12</span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\">                   </span><span class=\"c1\">// scope 0 at src/lib.rs:2:38: 4:2</span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at src/lib.rs:4:1: 4:2</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at src/lib.rs:4:2: 4:2</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276017526,
        "sender_full_name": "lcnr",
        "timestamp": 1647850900
    },
    {
        "content": "<p>the field <code>_1.0</code> has type <code>for&lt;'a&gt; fn(&amp;'a ())</code>, meaning that <code>(_1.0: fn(&amp;()));</code> is incorrect</p>",
        "id": 276017612,
        "sender_full_name": "lcnr",
        "timestamp": 1647850936
    },
    {
        "content": "<p>my ideal solution to this would be to just remove the type from this variant and always recompute it using</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Adt</span><span class=\"p\">(</span><span class=\"n\">adt_def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">variant_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">variant_index</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">adt_def</span><span class=\"p\">.</span><span class=\"n\">non_enum_variant</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">variant_index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">adt_def</span><span class=\"p\">.</span><span class=\"n\">is_enum</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">&amp;</span><span class=\"n\">adt_def</span><span class=\"p\">.</span><span class=\"n\">variants</span><span class=\"p\">[</span><span class=\"n\">variant_index</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">field_def</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">variant_def</span><span class=\"p\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">field_def</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276017791,
        "sender_full_name": "lcnr",
        "timestamp": 1647851101
    },
    {
        "content": "<p>this causes an ICE however as we end up with a <code>'static</code> region during mir borrowck for <code>struct Foo { field: &amp;'static u32 }</code></p>",
        "id": 276017914,
        "sender_full_name": "lcnr",
        "timestamp": 1647851175
    },
    {
        "content": "<p>We start mir borrowck by eagerly converting all regions in the mir <code>ReVar</code>. I would assume that we need these <code>'static</code> to <code>'?x</code> conversions somewhere else during mir typeck as well but wasn't able to find anything</p>",
        "id": 276018136,
        "sender_full_name": "lcnr",
        "timestamp": 1647851324
    },
    {
        "content": "<p>i.e. what happens when proving some predicate ends up equating some region to <code>'static</code></p>",
        "id": 276018519,
        "sender_full_name": "lcnr",
        "timestamp": 1647851537
    },
    {
        "content": "<p>You probably need to convert to tyvar right when you compute the type on the fly. I believe we do something similar in mir borrowck when invoking type_of in other situations</p>",
        "id": 276025591,
        "sender_full_name": "oli",
        "timestamp": 1647855743
    },
    {
        "content": "<p>I'm trying to remember why we keep the normalized type from a field</p>",
        "id": 276047887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868286
    },
    {
        "content": "<p>I can't think of a <em>good</em> reason, apart from efficiency</p>",
        "id": 276047903,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228094\">@Ariel Ben-Yehuda</span> may remember</p>",
        "id": 276047923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868305
    },
    {
        "content": "<p>It seems like it shouldn't be <em>necessary</em> at least</p>",
        "id": 276047959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868319
    },
    {
        "content": "<p>regarding the <code>'static</code>, it is possible to map the result from normalization</p>",
        "id": 276048019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868333
    },
    {
        "content": "<p>that said, I don't quite understand your example</p>",
        "id": 276048028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.60ProjectionElem.3A.3AField.60.20remove.20ty/near/276017612\">said</a>:</p>\n<blockquote>\n<p>the field <code>_1.0</code> has type <code>for&lt;'a&gt; fn(&amp;'a ())</code>, meaning that <code>(_1.0: fn(&amp;()));</code> is incorrect</p>\n</blockquote>\n<p>that is, this doesn't look right to me</p>",
        "id": 276048136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868404
    },
    {
        "content": "<p>seems like you need <code>-Zverbose</code> to say for sure what's going on here</p>",
        "id": 276048157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 276048169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1647868426
    },
    {
        "content": "<p><code>(_1.0: fn(&amp;()));</code> is <code>fn(&amp;'erased ())</code> here</p>",
        "id": 276049495,
        "sender_full_name": "lcnr",
        "timestamp": 1647869019
    },
    {
        "content": "<p>so the type in <code>ProjectionElem::Field</code> is <code>fn(&amp;'b ())</code> - the type of <code>y</code>- while the it should be <code>for&lt;'a&gt; fn(&amp;'a ())</code> - the type of <code>x</code>.</p>",
        "id": 276049698,
        "sender_full_name": "lcnr",
        "timestamp": 1647869102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.60ProjectionElem.3A.3AField.60.20remove.20ty/near/276048019\">said</a>:</p>\n<blockquote>\n<p>regarding the <code>'static</code>, it is possible to map the result from normalization</p>\n</blockquote>\n<p>what exactly do you mean with this?</p>",
        "id": 276050363,
        "sender_full_name": "lcnr",
        "timestamp": 1647869430
    }
]