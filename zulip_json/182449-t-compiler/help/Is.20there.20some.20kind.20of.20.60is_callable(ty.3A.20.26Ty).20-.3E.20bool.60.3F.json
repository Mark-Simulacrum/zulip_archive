[
    {
        "content": "<p>I would like to know if a constant is a callable. I have access to  its <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyS.html\">type</a>. Is it enough to test <code>if ty.is_fn() || ty.is_fn_ptr() || ty.is_closure()</code> or did I forgot something?</p>",
        "id": 217498108,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605958711
    },
    {
        "content": "<p>I would go with that for now and fix the bugs later ;)</p>",
        "id": 217501576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605964706
    },
    {
        "content": "<p>I think that might miss explicit implementations of Fn and FnMut but those are also very unstable</p>",
        "id": 217501581,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605964731
    },
    {
        "content": "<p>The issue is that I really think that knowing that there is a bug is going to be extremely hard (a call graph with a missing dependency out of 10k dependency really look like a non buggy call graph!).</p>",
        "id": 217501757,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605965087
    },
    {
        "content": "<p>I hope that my test harness will be robust enough</p>",
        "id": 217501815,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605965227
    },
    {
        "content": "<p>Perhaps add an <code>is_callable</code> function (perhaps as a method on <code>Ty</code>) that encapsulates <code>ty.is_fn() || ty.is_fn_ptr() || ty.is_closure()</code> so that we can fix any bugs in one place?</p>",
        "id": 217528495,
        "sender_full_name": "Noah Lev",
        "timestamp": 1606008877
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/rust-lang/rust/pull/79290\">https://github.com/rust-lang/rust/pull/79290</a></p>",
        "id": 217540448,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606032550
    },
    {
        "content": "<p>Closures aren't callable, they go through the Fn trait methods</p>",
        "id": 217548865,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606047786
    },
    {
        "content": "<p>Though that might not matter here</p>",
        "id": 217548877,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606047819
    },
    {
        "content": "<p>In C++, anything that have an <code>operator ()</code> is a callable. Functions (obviously), function pointers, functors (the C++ phrasing for an object with at least one <code>operator ()</code> member function, the equivalent of implementing an <code>Fn</code> trait for a struct in Rust) and lambda (the C++ name for closure) are callable. I'm surprise that closure are not considered callable in Rust.</p>",
        "id": 217556938,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606060049
    },
    {
        "content": "<p>Well, they kind of are, I think?</p>",
        "id": 217557033,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606060189
    },
    {
        "content": "<p>Which is perhaps a good indication that the <code>is_callable</code> method shouldn't exist</p>",
        "id": 217557084,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606060217
    },
    {
        "content": "<p>In MIR, only <code>FnPtr</code> and <code>FnDef</code> are callable</p>",
        "id": 217557107,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606060289
    },
    {
        "content": "<p>Calling a closure calls the <code>FnDef</code> of the corresponding <code>FnX</code> trait's <code>call_X</code> method</p>",
        "id": 217557162,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606060334
    },
    {
        "content": "<p>So, <code>ty.is_fn() || ty.is_fn_ptr()</code> would be enough?</p>",
        "id": 217557742,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606061226
    },
    {
        "content": "<p>When looking at a call terminator in MIR, yes, but not when looking at the callee type of an HIR expression (which <em>can</em> indeed be a closure)</p>",
        "id": 217557884,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606061412
    }
]