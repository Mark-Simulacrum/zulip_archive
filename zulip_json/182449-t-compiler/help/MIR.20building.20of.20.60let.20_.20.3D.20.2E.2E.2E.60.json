[
    {
        "content": "<p>To fix <a href=\"https://github.com/rust-lang/rust/issues/80059\">#80059</a>, I need to figure out why the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>optimizes away the pointer dereference, even with <code>-Zmir-opt-level=0</code></p>",
        "id": 221029939,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609114773
    },
    {
        "content": "<p>ah yes, the <code>_</code> binding special casing... fun</p>",
        "id": 221030017,
        "sender_full_name": "oli",
        "timestamp": 1609114878
    },
    {
        "content": "<p>so... super quick intro into mir building. The birds eye view is that we shallowly translate <code>HIR</code> to <code>THIR</code> which then gets converted to <code>MIR</code> by recursively walking the <code>THIR</code></p>",
        "id": 221030068,
        "sender_full_name": "oli",
        "timestamp": 1609114959
    },
    {
        "content": "<p>I think I kind of understand the process</p>",
        "id": 221030078,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609114979
    },
    {
        "content": "<p><code>THIR</code> is a funky thing that doesn't fully convert a <code>HIR</code> node to a <code>THIR</code> equivalent, but only the <em>outermost</em> node</p>",
        "id": 221030083,
        "sender_full_name": "oli",
        "timestamp": 1609114988
    },
    {
        "content": "<p>But the pattern matching stuff just throws me out :(</p>",
        "id": 221030084,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609114989
    },
    {
        "content": "<p>oh yea, that's a different beast</p>",
        "id": 221030086,
        "sender_full_name": "oli",
        "timestamp": 1609114996
    },
    {
        "content": "<p>but I think you don't need to get into it too deep</p>",
        "id": 221030090,
        "sender_full_name": "oli",
        "timestamp": 1609115005
    },
    {
        "content": "<p>Hopefully</p>",
        "id": 221030094,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115015
    },
    {
        "content": "<p>And many builder functions take a <code>BasicBlockData</code> and return a <code>BlockAnd&lt;{some-other-data}&gt;</code>.</p>",
        "id": 221030097,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115024
    },
    {
        "content": "<p>the only thing you are interested in is <code>PatKind::Wild</code></p>",
        "id": 221030133,
        "sender_full_name": "oli",
        "timestamp": 1609115045
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/rust-lang/rust/blob/257becbfe4987d1f7b12af5a8dd5ed96697cd2e8/compiler/rustc_mir_build/src/build/block.rs#L104-L106\">this</a> might be the relevant code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Let</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">remainder_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">initializer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lint_level</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ignores_expr_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pattern</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PatKind</span>::<span class=\"n\">Wild</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">block_context</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">BlockFrame</span>::<span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ignores_expr_result</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221030147,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115125
    },
    {
        "content": "<p>that looks very promising</p>",
        "id": 221030151,
        "sender_full_name": "oli",
        "timestamp": 1609115142
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221030147\">said</a>:</p>\n<blockquote>\n<p>Looks like this might be the relevant code:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Let</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">remainder_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">init_scope</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pattern</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">initializer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lint_level</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ignores_expr_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pattern</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PatKind</span>::<span class=\"n\">Wild</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">block_context</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">BlockFrame</span>::<span class=\"n\">Statement</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ignores_expr_result</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is what I thought! But I don't see where that BlockFrame gets used</p>",
        "id": 221030153,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115153
    },
    {
        "content": "<p>so... has there been any discussion about how this should get resolved? I'm not sure I'm up to date on the issue, even if aware of it?</p>",
        "id": 221030196,
        "sender_full_name": "oli",
        "timestamp": 1609115185
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/80059#issuecomment-751527973\">Relevant comment</a></p>",
        "id": 221030209,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115208
    },
    {
        "content": "<p>Basically, I think this code should be compiled like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221030219,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115241
    },
    {
        "content": "<p>Which does emit the deref in the raw MIR</p>",
        "id": 221030221,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115253
    },
    {
        "content": "<p>hmm... but... that's not quite the same thing</p>",
        "id": 221030222,
        "sender_full_name": "oli",
        "timestamp": 1609115266
    },
    {
        "content": "<p>I just posted this on the issue:</p>\n<blockquote>\n<p>I think scottmcm is saying that adding curly braces makes a new value, rather than a \"projection\" on a Place. A projection is a field access, a pointer dereference, etc.</p>\n</blockquote>",
        "id": 221030266,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115290
    },
    {
        "content": "<p>Right, but it sounds fine to lower it to the same MIR, doesn't it?</p>",
        "id": 221030269,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115300
    },
    {
        "content": "<p>I find it helpful to look at the MIR output on the Playground to figure out what's going on, so I'll be right back <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221030273,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115334
    },
    {
        "content": "<p>that is far after optimizations, you'll likely want to do local mir dumps and look at the mir right after building</p>",
        "id": 221030283,
        "sender_full_name": "oli",
        "timestamp": 1609115362
    },
    {
        "content": "<p>(I used godbolt to set the <code>-Zmir-opt-level=0</code>)</p>",
        "id": 221030287,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115371
    },
    {
        "content": "<p>still, we have guaranteed optimizations like deaggregation, which can really change the MIR in nontrivial ways</p>",
        "id": 221030297,
        "sender_full_name": "oli",
        "timestamp": 1609115401
    },
    {
        "content": "<p>Ah <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 221030338,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221030283\">said</a>:</p>\n<blockquote>\n<p>that is far after optimizations, you'll likely want to do local mir dumps and look at the mir right after building</p>\n</blockquote>\n<p>What will the filename for that be like?</p>",
        "id": 221030344,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115420
    },
    {
        "content": "<p>well, any solution is probably a breaking change, and what we really need is a way to ensure that the deref happens, but not necessarily cause a move out of the value?</p>",
        "id": 221030348,
        "sender_full_name": "oli",
        "timestamp": 1609115435
    },
    {
        "content": "<p>uh... it was something weird and short... lemme check</p>",
        "id": 221030354,
        "sender_full_name": "oli",
        "timestamp": 1609115461
    },
    {
        "content": "<p><code>....mir_map.0.mir</code></p>",
        "id": 221030368,
        "sender_full_name": "oli",
        "timestamp": 1609115489
    },
    {
        "content": "<p>because... obviously...</p>",
        "id": 221030370,
        "sender_full_name": "oli",
        "timestamp": 1609115497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221030348\">said</a>:</p>\n<blockquote>\n<p>well, any solution is probably a breaking change, and what we really need is a way to ensure that the deref happens, but not necessarily cause a move out of the value?</p>\n</blockquote>\n<p>So when you say that <code>*ptr</code> and <code>{ *ptr }</code> are different, it's related to move shenanigans?</p>",
        "id": 221030423,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115526
    },
    {
        "content": "<p>I... think so.. It's 01:30 here, my brain may not be at a useful capacity... writing down my thoughts, sec</p>",
        "id": 221030439,
        "sender_full_name": "oli",
        "timestamp": 1609115572
    },
    {
        "content": "<p>We're on the same timezone :D<br>\nWould you prefer to defer this conversation to tomorrow?</p>",
        "id": 221030466,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115605
    },
    {
        "content": "<p>So... what I'm wondering is instead of treating <code>let _ = ...;</code> as <code>let _ = {...};</code> whether we should essentially make it <code>let _tmp_ = {...}; drop(_tmp);</code>, it gets a bit messy around multiple <code>_</code> patterns within the same main pattern, but I think we'll be able to figure out the drop order</p>",
        "id": 221030513,
        "sender_full_name": "oli",
        "timestamp": 1609115663
    },
    {
        "content": "<p>My main worry is that we're missing some other fancy feature of <code>_</code> patterns</p>",
        "id": 221030516,
        "sender_full_name": "oli",
        "timestamp": 1609115677
    },
    {
        "content": "<p>Never mind, that was for non-<code>_</code> <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 221030530,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115747
    },
    {
        "content": "<p>for example: <code>let (_, some_i32) = ...;</code> does not move out of <code>...</code> even if <code>_</code> refers to a <code>String</code> (see <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e233032675b7a8df2fd6555f7e7eb852\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e233032675b7a8df2fd6555f7e7eb852</a>)</p>",
        "id": 221030576,
        "sender_full_name": "oli",
        "timestamp": 1609115780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221030530\">said</a>:</p>\n<blockquote>\n<p>Never mind, that was for non-<code>_</code> <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>\n</blockquote>\n<p>Just curious, what command(s) are you using?</p>",
        "id": 221030581,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115805
    },
    {
        "content": "<p>so we actually need to treat <code>_</code> as a <code>ref</code> pattern to make sure it does not cause a move</p>",
        "id": 221030586,
        "sender_full_name": "oli",
        "timestamp": 1609115822
    },
    {
        "content": "<p>but <code>let _ = s;</code> needs to move out of <code>s</code></p>",
        "id": 221030594,
        "sender_full_name": "oli",
        "timestamp": 1609115837
    },
    {
        "content": "<p>I think? checking... sec</p>",
        "id": 221030596,
        "sender_full_name": "oli",
        "timestamp": 1609115849
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f9d9d5e870efcd97473f845a01790fe4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f9d9d5e870efcd97473f845a01790fe4</a> nope, does not move</p>",
        "id": 221030600,
        "sender_full_name": "oli",
        "timestamp": 1609115873
    },
    {
        "content": "<p>ok, so <code>_</code> is a ref pattern</p>",
        "id": 221030601,
        "sender_full_name": "oli",
        "timestamp": 1609115878
    },
    {
        "content": "<p>so you can't use the \"block trick\"</p>",
        "id": 221030639,
        "sender_full_name": "oli",
        "timestamp": 1609115885
    },
    {
        "content": "<p>Here's the <em>correct</em> MIR dump:</p>\n<h1>NO curly braces</h1>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// MIR for `foo` 0 mir_map</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_1</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\">                     </span><span class=\"c1\">// in scope 0 at no-curlies.rs:1:12: 1:15</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\">                      </span><span class=\"c1\">// return place in scope 0 at no-curlies.rs:1:30: 1:30</span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\">                   </span><span class=\"c1\">// scope 0 at no-curlies.rs:1:30: 3:2</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at no-curlies.rs:3:2: 3:2</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<h1>YES curly braces</h1>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// MIR for `foo` 0 mir_map</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_1</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\">                     </span><span class=\"c1\">// in scope 0 at yes-curlies.rs:1:12: 1:15</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\">                      </span><span class=\"c1\">// return place in scope 0 at yes-curlies.rs:1:30: 1:30</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\">                    </span><span class=\"c1\">// in scope 0 at yes-curlies.rs:2:13: 2:21</span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StorageLive</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at yes-curlies.rs:2:13: 2:21</span>\n<span class=\"w\">        </span><span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\">                      </span><span class=\"c1\">// scope 0 at yes-curlies.rs:2:15: 2:19</span>\n<span class=\"w\">        </span><span class=\"n\">StorageDead</span><span class=\"p\">(</span><span class=\"n\">_2</span><span class=\"p\">);</span><span class=\"w\">                 </span><span class=\"c1\">// scope 0 at yes-curlies.rs:2:21: 2:22</span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\">                   </span><span class=\"c1\">// scope 0 at yes-curlies.rs:1:30: 3:2</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at yes-curlies.rs:3:2: 3:2</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221030642,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115891
    },
    {
        "content": "<p>and we can't use a temporary that we drop</p>",
        "id": 221030643,
        "sender_full_name": "oli",
        "timestamp": 1609115893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221030581\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221030530\">said</a>:</p>\n<blockquote>\n<p>Never mind, that was for non-<code>_</code> <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>\n</blockquote>\n<p>Just curious, what command(s) are you using?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$</span> rustc +nightly -Z dump-mir<span class=\"o\">=</span>all no-curlies.rs --crate-type<span class=\"o\">=</span>lib\n</code></pre></div>\n<p>Output is in <code>mir_dump/no_curlies.foo.-------.mir_map.0.mir</code> in this case.</p>",
        "id": 221030655,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609115941
    },
    {
        "content": "<p>This is \"just\" for unsafety checking though</p>",
        "id": 221030663,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609115951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I got the MIR from <code>no_curlies.foo.-------.mir_map.0.mir</code>, but it still doesn't have any code from the deref. Is it not generating the deref at all? (If you're too tired, don't worry about answering :)</p>",
        "id": 221030723,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609116041
    },
    {
        "content": "<p>hmm... so... could we just emit a fake read statement for all <code>_</code> patterns?</p>",
        "id": 221030724,
        "sender_full_name": "oli",
        "timestamp": 1609116049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221030723\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> I got the MIR from <code>no_curlies.foo.-------.mir_map.0.mir</code>, but it still doesn't have any code from the deref. Is it not generating the deref at all? (If you're too tired, don't worry about answering <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>you found the <code>ignores_expr_result</code> thing earlier, I'm assuming at its use site it will just not generate code?</p>",
        "id": 221030740,
        "sender_full_name": "oli",
        "timestamp": 1609116113
    },
    {
        "content": "<p>instead of not generating code, we could keep generating a <code>FakeRead</code></p>",
        "id": 221030757,
        "sender_full_name": "oli",
        "timestamp": 1609116123
    },
    {
        "content": "<p>but yea, I'm going to bed now, I don't wanna end up hacking 'till 4am like yesterday <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 221030792,
        "sender_full_name": "oli",
        "timestamp": 1609116153
    },
    {
        "content": "<p>Thanks a lot already <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 221030797,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609116174
    },
    {
        "content": "<p>Thank you Oli! <span aria-label=\"love\" class=\"emoji emoji-2764\" role=\"img\" title=\"love\">:love:</span></p>",
        "id": 221030870,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609116264
    },
    {
        "content": "<p>This looks the same as <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/261\">https://github.com/rust-lang/unsafe-code-guidelines/issues/261</a> . Is it even clear that this is unintended behavior? Any \"fix\" here seems like it will make general desugaring more complicated esp. regarding why <code>match *x { pat =&gt; ... }</code> may or may not actually dereference <code>x</code> depending on <code>pat</code></p>",
        "id": 221031922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609118028
    },
    {
        "content": "<p>From the issue:</p>\n<blockquote>\n<p>The conversation in the 2020-12-15 lang team meeting implied that this was an unexpected regression, so opening and nomination for further discussion.</p>\n</blockquote>",
        "id": 221031994,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609118108
    },
    {
        "content": "<p>I haven't read through all of this but how we pass around things for <code>let _ = x</code> will be changing a bit</p>",
        "id": 221032362,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609118723
    },
    {
        "content": "<p>Essentially instead of passing a place around, we will be passing a PlaceBuilder around</p>",
        "id": 221032414,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609118780
    },
    {
        "content": "<p>I would like to see an RFC or something like that to explain what the overall story is here if something is to change. I don't think this is just a compiler bug because the semantics themselves haven't been hammered down. Under the current semantics, it's not that the dereference of <code>x</code> is optimized away, it never happened - a place was constructed and nothing was done with it, so no MIR is generated, it's not unsafe or cause UB, etc etc. I can definitely see why this result is counterintuitive, but it is regular, and if we deviate from that regularity to decrease surprise factor I would want to see what the actual rules are.</p>",
        "id": 221032419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609118804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281950\">Aman Arora</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221032414\">said</a>:</p>\n<blockquote>\n<p>Essentially instead of passing a place around, we will be passing a PlaceBuilder around</p>\n</blockquote>\n<p>This is to fix: <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/24\">https://github.com/rust-lang/project-rfc-2229/issues/24</a> and <a href=\"https://github.com/rust-lang/project-rfc-2229/issues/32\">https://github.com/rust-lang/project-rfc-2229/issues/32</a></p>",
        "id": 221032431,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609118827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/MIR.20building.20of.20.60let.20_.20.3D.20.2E.2E.2E.60/near/221032419\">said</a>:</p>\n<blockquote>\n<p>I would like to see an RFC or something like that to explain what the overall story is here if something is to change. I don't think this is just a compiler bug because the semantics themselves haven't been hammered down. Under the current semantics, it's not that the dereference of <code>x</code> is optimized away, it never happened - a place was constructed and nothing was done with it, so no MIR is generated, it's not unsafe or cause UB, etc etc. I can definitely see why this result is counterintuitive, but it is regular, and if we deviate from that regularity to decrease surprise factor I would want to see what the actual rules are.</p>\n</blockquote>\n<p>I think the reason I'd call it a bug is it <em>only</em> happens for the never type, not <code>std::convert::Infallible</code> or any other user type</p>",
        "id": 221032567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609119059
    },
    {
        "content": "<p>Oh I agree about the never type thing, I was referring specifically to <code>let _ = *x;</code> not performing a dereference of <code>x</code>. If <code>x: *const !</code> then under the current semantics I think we should not count this as a dereference, and constructing a place of type <code>!</code> should not cause an <code>unreachable</code> to be emitted unless it appears in an omitted match branch or something of that nature</p>",
        "id": 221032699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609119309
    },
    {
        "content": "<p>That is, <code>match *x { _ =&gt; {}}</code> should be a no op while <code>match *x {}</code> dereferences <code>x</code></p>",
        "id": 221032749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609119383
    },
    {
        "content": "<p>It just occurred to me that by treating the right side of <code>let x = foo</code> as a place (lvalue) instead of an rvalue, that's literally the origin of the lvalue/rvalue terminology. I know when I first started learning rust that I was tripped up by the fact that the scrutinee of a <code>match</code> expression is an lvalue instead of an rvalue like it is in most languages</p>",
        "id": 221033095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609120035
    },
    {
        "content": "<p>Can you explain what you mean? I'm curious <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 221033158,
        "sender_full_name": "Noah Lev",
        "timestamp": 1609120187
    },
    {
        "content": "<p>Well in C, <code>T x = foo()</code> will first evaluate <code>foo()</code> and stick it into <code>x</code>. The right side is an rvalue, the left side is an lvalue. Logical, right? So rvalues mean \"values\" and lvalues mean \"places where we can put things\", and then you add on stuff like <code>*x = foo()</code> or <code>*foo() = bar()</code> where both sides have some evaluation content to them but the left side still evaluates to what we would call a place, and the right side is still completely evaluated to a value.</p>\n<p>C doesn't have <code>match</code>, but I guess you could use <code>switch</code> as analogue, and there the thing in the switch is completely evaluated before you get into the branches. Similarly, even in Haskell (you know, the \"lazy everything\" language) <code>match</code> (or <code>case</code> as they say) is the main engine that drives the full program forward, the one thing in the language that is eager (which makes sense, because you can't continue evaluation until you know which branch to take).</p>\n<p>But Rust lets you write an expression in a <code>match</code> that is not evaluated unless the patterns say it should be. Or rather, it's an lvalue expression, which gets as much evaluation as lvalues usually do. To this day I still find it uncomfortable to write <code>match *pointer_to_big_struct { S { x, ..} =&gt; ...}</code> and prefer to match directly on the pointer because it looks like I'm putting a big rvalue on the stack before I match it.</p>",
        "id": 221033403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609120650
    },
    {
        "content": "<p>Given that <code>match</code> works this way, it's not too much of a stretch that <code>let pat = value</code> acts the same as <code>match value { pat =&gt; ... }</code>, but then that means that the canonical example of an rvalue, the right side of a variable expression, is not an rvalue any more. We've got two left feet</p>",
        "id": 221033544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609120842
    },
    {
        "content": "<p>(at least we don't have five feet like C++)</p>",
        "id": 221033617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609120965
    }
]