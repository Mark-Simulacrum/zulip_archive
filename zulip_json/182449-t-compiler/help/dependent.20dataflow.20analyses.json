[
    {
        "content": "<p>Within a dataflow analysis, what's the cleanest way to depend on the results of another dataflow pass?</p>\n<p>Right now I'm calling <code>state_for_location</code> at each step, which makes it O(N^2) in the number of statements in a block</p>",
        "id": 168172513,
        "sender_full_name": "tmandry",
        "timestamp": 1560547142
    },
    {
        "content": "<p>I also need to be able to get the results of both analyses out (right now I'm computing the first and then borrowing it while I compute the second)</p>",
        "id": 168172646,
        "sender_full_name": "tmandry",
        "timestamp": 1560547258
    },
    {
        "content": "<p>I could start calling the statement_effect callbacks myself, but that seems like it could be brittle..</p>",
        "id": 168172830,
        "sender_full_name": "tmandry",
        "timestamp": 1560547447
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 168172870,
        "sender_full_name": "tmandry",
        "timestamp": 1560547524
    },
    {
        "content": "<p>Ideally I'd also get the actual effects at each statement, not just the resulting state</p>",
        "id": 168172995,
        "sender_full_name": "tmandry",
        "timestamp": 1560547671
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...tmandry:moar-generator-optimization-1?expand=1#diff-0ec62af168b51795a97fe1a6a8a5eedf\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...tmandry:moar-generator-optimization-1?expand=1#diff-0ec62af168b51795a97fe1a6a8a5eedf\">here's the code</a> for what I'm doing now</p>",
        "id": 168174525,
        "sender_full_name": "tmandry",
        "timestamp": 1560549077
    },
    {
        "content": "<p>Right now, the most efficient way seems to be to keep track of my own BlockSets and update them during every callback in <code>BitDenotation</code> (\"unroll\" the implementation of <code>state_for_location</code> into my type, essentially)</p>",
        "id": 168174701,
        "sender_full_name": "tmandry",
        "timestamp": 1560549275
    },
    {
        "content": "<p>I'm not sure how comfortable people will be with this though</p>",
        "id": 168174757,
        "sender_full_name": "tmandry",
        "timestamp": 1560549352
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> since you're also listed as a dataflow expert :)</p>",
        "id": 168174824,
        "sender_full_name": "tmandry",
        "timestamp": 1560549383
    },
    {
        "content": "<p>Hmm</p>",
        "id": 168174844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549416
    },
    {
        "content": "<p>This reminds me that I wanted to sync up with you on the work you've been doing just to get an overview and try to get up to speed</p>",
        "id": 168174857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549432
    },
    {
        "content": "<p>Think you'd be game to schedule some time to do that?</p>",
        "id": 168174858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549436
    },
    {
        "content": "<p>Yeah, sure!</p>",
        "id": 168174859,
        "sender_full_name": "tmandry",
        "timestamp": 1560549444
    },
    {
        "content": "<p>Also that we should really start converting this code to datafrog :P</p>",
        "id": 168174862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549456
    },
    {
        "content": "<p>(re: scheduling, I'm free Mon/Tue afternoon PST, or Wed morning)</p>",
        "id": 168174952,
        "sender_full_name": "tmandry",
        "timestamp": 1560549535
    },
    {
        "content": "<blockquote>\n<p>Also that we should really start converting this code to datafrog :P</p>\n</blockquote>\n<p>I didn't realize this was the official plan :)</p>",
        "id": 168174978,
        "sender_full_name": "tmandry",
        "timestamp": 1560549571
    },
    {
        "content": "<p>I guess it'd prob be best to sched for the week after next, owing to Moz all hands</p>",
        "id": 168174981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549574
    },
    {
        "content": "<blockquote>\n<p>I didn't realize this was the official plan :)</p>\n</blockquote>\n<p>\"official\"... well, it's <em>my</em> plan</p>",
        "id": 168174989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549584
    },
    {
        "content": "<p>(in all seriousness, having dependent analyses is pretty easy in that case)</p>",
        "id": 168175043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549606
    },
    {
        "content": "<blockquote>\n<p>I guess it'd prob be best to sched for the week after next, owing to Moz all hands</p>\n</blockquote>\n<p>same schedule then</p>",
        "id": 168175044,
        "sender_full_name": "tmandry",
        "timestamp": 1560549606
    },
    {
        "content": "<p>that said, a possibly shorter term plan might be to do a \"cursor\" sort of API -- I think <code>state_for_location</code> kind of repeats <em>all</em> the work each time</p>",
        "id": 168175105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549687
    },
    {
        "content": "<p>but presumably you are walking through the MIR in a certain order</p>",
        "id": 168175108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549695
    },
    {
        "content": "<p>the idea would be to have an API that lets you reposition the cursor arbitrarily</p>",
        "id": 168175117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549707
    },
    {
        "content": "<p>but to optimize for sequentially accessing statements within the same block</p>",
        "id": 168175124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549716
    },
    {
        "content": "<p>ah, yeah, that sounds good</p>",
        "id": 168175134,
        "sender_full_name": "tmandry",
        "timestamp": 1560549722
    },
    {
        "content": "<p>but I'm not sure <em>quite</em> how difficult that would be; it's something <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested some time back and I thought it was clever</p>",
        "id": 168175177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549737
    },
    {
        "content": "<p>I don't _think_ it would be difficult</p>",
        "id": 168175193,
        "sender_full_name": "tmandry",
        "timestamp": 1560549767
    },
    {
        "content": "<p>I'm trying to page this back in -- I feel like <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> did think about the idea of dependent analyses a bit so let me go scout a bit to see if I see anything promising :)</p>",
        "id": 168175194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549769
    },
    {
        "content": "<blockquote>\n<p>I don't _think_ it would be difficult</p>\n</blockquote>\n<p>doesn't seem <em>that</em> hard indeed</p>",
        "id": 168175201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549775
    },
    {
        "content": "<p>I could probably hack it together as part of my PR</p>",
        "id": 168175223,
        "sender_full_name": "tmandry",
        "timestamp": 1560549809
    },
    {
        "content": "<p>implement it* I mean :)</p>",
        "id": 168175235,
        "sender_full_name": "tmandry",
        "timestamp": 1560549832
    },
    {
        "content": "<p>I'm basically trying to remember if there already exists any such cases</p>",
        "id": 168175237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549834
    },
    {
        "content": "<p>it could probably be done just by hacking on <code>FlowAtLocation</code>, <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 168175329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549917
    },
    {
        "content": "<p>(like it's not that far from what's there already)</p>",
        "id": 168175343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549936
    },
    {
        "content": "<p>ah yes, that seems promising</p>",
        "id": 168175450,
        "sender_full_name": "tmandry",
        "timestamp": 1560550041
    },
    {
        "content": "<p>I don't see anything doing quite what you're doing</p>",
        "id": 168175552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550119
    },
    {
        "content": "<p>so I think that's my best suggestion</p>",
        "id": 168175565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550132
    },
    {
        "content": "<p>besides porting everything to datafrog</p>",
        "id": 168175575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560550143
    },
    {
        "content": "<p>ok. I think a light wrapper around <code>FlowAtLocation</code> that remembers its last location sounds best, probably</p>",
        "id": 168175620,
        "sender_full_name": "tmandry",
        "timestamp": 1560550193
    },
    {
        "content": "<p>rather than having two ways of using the same object</p>",
        "id": 168175674,
        "sender_full_name": "tmandry",
        "timestamp": 1560550209
    },
    {
        "content": "<p>thanks for the pointer <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 168175699,
        "sender_full_name": "tmandry",
        "timestamp": 1560550240
    },
    {
        "content": "<p>conceptually this makes sense... <code>DataflowResultsConsumer</code> is the main \"driver\" for <code>FlowAtLocation</code> today, whereas if you're being driven by something else, you need a <code>DataflowResultsCursor</code> instead</p>",
        "id": 168175937,
        "sender_full_name": "tmandry",
        "timestamp": 1560550501
    },
    {
        "content": "<p>(actually, maybe <code>FlowAtLocation</code> should just do this)</p>",
        "id": 168176569,
        "sender_full_name": "tmandry",
        "timestamp": 1560551203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> the cleanest way to write dependent dataflow passes I have found so far is to interleave them</p>",
        "id": 168204043,
        "sender_full_name": "nagisa",
        "timestamp": 1560597553
    },
    {
        "content": "<p>However the traditional dataflow implementations don’t usually allow for that easily.</p>",
        "id": 168204095,
        "sender_full_name": "nagisa",
        "timestamp": 1560597664
    },
    {
        "content": "<p>if you’re interested in that despite the caveats, feel free to ping me and we can chat in more detail.</p>",
        "id": 168204098,
        "sender_full_name": "nagisa",
        "timestamp": 1560597692
    },
    {
        "content": "<blockquote>\n<p>the idea would be to have an API that lets you reposition the cursor arbitrarily, but to optimize for sequentially accessing statements within the same block</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> I've not just suggested it but also implemented it, for a different dataflow system (a bidirectional one :P)</p>",
        "id": 168253381,
        "sender_full_name": "eddyb",
        "timestamp": 1560692849
    },
    {
        "content": "<p>or I should say, \"symmetrical\"</p>",
        "id": 168253382,
        "sender_full_name": "eddyb",
        "timestamp": 1560692864
    },
    {
        "content": "<p>ah dammit I keep finding and linking to <a href=\"https://github.com/rust-lang/rust/issues/46321\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46321\">#46321</a> when I mean <a href=\"https://github.com/rust-lang/rust/issues/47954\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47954\">#47954</a></p>",
        "id": 168253442,
        "sender_full_name": "eddyb",
        "timestamp": 1560692965
    },
    {
        "content": "<p>anyway this is what I had <a href=\"https://github.com/rust-lang/rust/pull/47954/commits/ed395ca5dfffff13d4f52f8b2c831e0d8fa294a3#diff-dfa62bf4fa7aefc62a25f618c203f921R302\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/47954/commits/ed395ca5dfffff13d4f52f8b2c831e0d8fa294a3#diff-dfa62bf4fa7aefc62a25f618c203f921R302\">https://github.com/rust-lang/rust/pull/47954/commits/ed395ca5dfffff13d4f52f8b2c831e0d8fa294a3#diff-dfa62bf4fa7aefc62a25f618c203f921R302</a></p>",
        "id": 168253640,
        "sender_full_name": "eddyb",
        "timestamp": 1560693308
    },
    {
        "content": "<p>I called it an \"observer\"</p>",
        "id": 168253645,
        "sender_full_name": "eddyb",
        "timestamp": 1560693315
    },
    {
        "content": "<p>which I guess fit more with \"eventflow\" than regular dataflow</p>",
        "id": 168254234,
        "sender_full_name": "eddyb",
        "timestamp": 1560694237
    },
    {
        "content": "<p>Doesn’t that require maintaining extra data? I can imagine situations where it isn’t always possible to undo changes to factset which occurred as part of a transfer function over a statement.</p>",
        "id": 168256033,
        "sender_full_name": "nagisa",
        "timestamp": 1560697555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> while I maintained extra data, it <em>could</em> reset from the start of the block if not moved forward</p>",
        "id": 168256441,
        "sender_full_name": "eddyb",
        "timestamp": 1560698375
    },
    {
        "content": "<p>I see… so it is still O(n^2) with some caching to mitigate that</p>",
        "id": 168256498,
        "sender_full_name": "nagisa",
        "timestamp": 1560698411
    },
    {
        "content": "<p>normal usage would not be quadratic, it's more like a fallback</p>",
        "id": 168256501,
        "sender_full_name": "eddyb",
        "timestamp": 1560698431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yeah I ended up writing something similar, just not bidirectional</p>",
        "id": 168346928,
        "sender_full_name": "tmandry",
        "timestamp": 1560805162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> by interleave, do you mean computing them simultaneously?</p>",
        "id": 168353193,
        "sender_full_name": "tmandry",
        "timestamp": 1560810461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> yes. This is done by composing the transfer functions of the different analyses you’re interested in and running them all for a single statement before proceeding to the next one.</p>",
        "id": 168356252,
        "sender_full_name": "nagisa",
        "timestamp": 1560813431
    },
    {
        "content": "<p>This way any transfer function can gain access (if you want them to) to any intermediate factset that gets generated by any other analysis as well and this way you also get optimal results for any given combination of dataflow analyses.</p>",
        "id": 168356337,
        "sender_full_name": "nagisa",
        "timestamp": 1560813539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> makes sense, but as you say it's not very convenient in the current framework (if you need to get the individual passes back out)</p>",
        "id": 168356386,
        "sender_full_name": "tmandry",
        "timestamp": 1560813554
    },
    {
        "content": "<p>yeah, it makes the dataflow loop a tight knot between all the involved analyses..</p>",
        "id": 168356457,
        "sender_full_name": "nagisa",
        "timestamp": 1560813618
    },
    {
        "content": "<p>Actually, it still might not work in my case. I need to know the <em>final</em> state of a different pass at each point to compute my pass (not just the gen/kill set for individual statements)</p>",
        "id": 168356487,
        "sender_full_name": "tmandry",
        "timestamp": 1560813671
    },
    {
        "content": "<p>or at least, I think I do :)</p>",
        "id": 168356498,
        "sender_full_name": "tmandry",
        "timestamp": 1560813706
    },
    {
        "content": "<p>That is fine, the dataflow analysis keeps running until a fixed point is reached, so you will re-visit a certain statement if there is new information known about it after it gets visited a first/2nd/3rd time etc.</p>",
        "id": 168356561,
        "sender_full_name": "nagisa",
        "timestamp": 1560813763
    },
    {
        "content": "<p>the only thing you won’t know is whether any particular visitation is the last one.</p>",
        "id": 168356567,
        "sender_full_name": "nagisa",
        "timestamp": 1560813779
    },
    {
        "content": "<p>ah okay, that should work then</p>",
        "id": 168356603,
        "sender_full_name": "tmandry",
        "timestamp": 1560813828
    },
    {
        "content": "<p>I will try to find a paper which describes this technique</p>",
        "id": 168356643,
        "sender_full_name": "nagisa",
        "timestamp": 1560813845
    },
    {
        "content": "<p><a href=\"http://research.microsoft.com/en-us/um/people/simonpj/Papers/c--/hoopl-haskell10.pdf\" target=\"_blank\" title=\"http://research.microsoft.com/en-us/um/people/simonpj/Papers/c--/hoopl-haskell10.pdf\">http://research.microsoft.com/en-us/um/people/simonpj/Papers/c--/hoopl-haskell10.pdf</a> describes it.</p>",
        "id": 168356652,
        "sender_full_name": "nagisa",
        "timestamp": 1560813890
    },
    {
        "content": "<p>It also has motivating examples for this specific approach over the traditional dataflow analysis implementations.</p>",
        "id": 168356694,
        "sender_full_name": "nagisa",
        "timestamp": 1560813953
    },
    {
        "content": "<blockquote>\n<p>I'm trying to page this back in -- I feel like <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> did think about the idea of dependent analyses a bit so let me go scout a bit to see if I see anything promising :)</p>\n</blockquote>\n<p>finally getting back to this</p>",
        "id": 168638120,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067792
    },
    {
        "content": "<p>the main example of a dependent analysis that I had worked on</p>",
        "id": 168638130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067803
    },
    {
        "content": "<p>was the hacked up version of two-phase borrows</p>",
        "id": 168638137,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067810
    },
    {
        "content": "<p>that I did in PR <a href=\"https://github.com/rust-lang/rust/issues/46537\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46537\">#46537</a></p>",
        "id": 168638143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067816
    },
    {
        "content": "<p>it has since been thrown away</p>",
        "id": 168638154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067823
    },
    {
        "content": "<p>but you can see at least my comments documenting what I did <a href=\"https://github.com/rust-lang/rust/pull/46537/files#diff-74dcd7740ab2104cd2b9a3b68dd4f208R72\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/46537/files#diff-74dcd7740ab2104cd2b9a3b68dd4f208R72\">here</a></p>",
        "id": 168638200,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067866
    },
    {
        "content": "<p>however I would certainly not say that I was <em>happy</em> with this design</p>",
        "id": 168638303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067947
    },
    {
        "content": "<p>and I will probably take a look at the hoopl paper that <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> linked above</p>",
        "id": 168638319,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561067963
    },
    {
        "content": "<blockquote>\n<p>however I would certainly not say that I was <em>happy</em> with this design</p>\n</blockquote>\n<p>in fact, reviewing the PR now, I am reminded of all the terrible kludges that were in it. For example, If i recall correctly, I had a bunch of ugly stuff, like making the bitvector twice as big as you'd expect, so that it would store the intermediate values for <em>both</em> of the two analyses in a single bitvector.</p>",
        "id": 168638534,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561068135
    }
]