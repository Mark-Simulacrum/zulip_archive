[
    {
        "content": "<p>Is my understanding correct that, HIR was introduced and is being used to:</p>\n<ul>\n<li>\n<p>Be a stable internal compiler representation (Paraphrased from RFC). You can introduce many complicated node types in the AST and then just desugar them into HIR. </p>\n</li>\n<li>\n<p>Simplify the structure of the AST. A use statement and a call path can be combined into a single DefID.</p>\n</li>\n</ul>\n<p>For example in;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">bar</span>::<span class=\"n\">hello</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Since every function has a unique DefID, you can simplify the following to something like <code>CallExpr {DefID : 10, args :[x,y]}</code></p>\n<ul>\n<li>I'm guessing there is something which makes it especially suited to Type checking vs the AST, for batch compilation?</li>\n</ul>",
        "id": 219862722,
        "sender_full_name": "kev",
        "timestamp": 1607962099
    },
    {
        "content": "<p>You may be looking for <a href=\"https://rustc-dev-guide.rust-lang.org/hir.html?highlight=hir#the-hir\">https://rustc-dev-guide.rust-lang.org/hir.html?highlight=hir#the-hir</a></p>",
        "id": 219862867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607962165
    },
    {
        "content": "<p>Thanks for the link, my question was regarding batch compilation, whereas I believe the link mentions why the HIR would be good for incremental compilation</p>",
        "id": 219863205,
        "sender_full_name": "kev",
        "timestamp": 1607962285
    },
    {
        "content": "<p>It makes no difference for batch compilation</p>",
        "id": 219863273,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607962308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Why.20did.20Rust.20introduce.20HIR.20for.20type.20checking.3F/near/219863273\">said</a>:</p>\n<blockquote>\n<p>It makes no difference for batch compilation</p>\n</blockquote>\n<p>Ahh right, so it's initial introduction was mostly as a stable internal representation? I thought there was more to the RFC that I might have missed</p>",
        "id": 219863518,
        "sender_full_name": "kev",
        "timestamp": 1607962349
    },
    {
        "content": "<p>The primary motivation is simplicity, I think</p>",
        "id": 219864371,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607962668
    },
    {
        "content": "<p>It's completely typical when writing a compiler to have several internal representations that each encode a level of detail appropriate for whatever analysis you are doing. For example it's very convenient to have a representation where you have removed syntactic sugar, so that further analysis doesn't have to care about it. In a way it's just a fancy way to avoid code duplication, so in practice you put whatever's convenient in each representation</p>",
        "id": 219878210,
        "sender_full_name": "Nadrieril",
        "timestamp": 1607968741
    }
]