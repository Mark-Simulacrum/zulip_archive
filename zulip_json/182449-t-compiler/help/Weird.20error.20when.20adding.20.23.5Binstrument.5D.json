[
    {
        "content": "<p>If I add <code>#[instrument(skip(self))]</code> to <code>rustc_typeck::check::method::probe::pick_by_value_method</code> I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>Compiling rustc_typeck v0.0.0 (/home/omer/rust/rust/compiler/rustc_typeck)\nerror: an inner attribute is not permitted in this context\n  |\n  = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n</code></pre></div>\n<p>I don't understand two things about this error:</p>\n<ul>\n<li>It doesn't have a span. Finding the problematic line was difficult..</li>\n<li>I have the exact same attribute added to the method above it (<code>pick_core</code>) and it works fine.</li>\n</ul>\n<p>Any ideas why this one doesn't work?</p>",
        "id": 222687806,
        "sender_full_name": "osa1",
        "timestamp": 1610610994
    },
    {
        "content": "<p>Wow.. I figured it out. It's the <code>//!</code> style documentation in the function that doesn't work ...</p>",
        "id": 222687957,
        "sender_full_name": "osa1",
        "timestamp": 1610611150
    },
    {
        "content": "<blockquote>\n<p>It doesn't have a span. Finding the problematic line was difficult..</p>\n</blockquote>\n<p>That's weird... <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> you might want to take a look at that.</p>",
        "id": 222807222,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610672679
    },
    {
        "content": "<p><code>//!</code> doc comments are parsed as \"inner attributes\", which is why you got that error.</p>",
        "id": 222807246,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610672706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Weird.20error.20when.20adding.20.23.5Binstrument.5D/near/222807222\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>It doesn't have a span. Finding the problematic line was difficult..</p>\n</blockquote>\n<p>That's weird... <span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> you might want to take a look at that.</p>\n</blockquote>\n<p>I would expect that to be a rogue proc macro generating dummy spans</p>",
        "id": 222809406,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610674794
    },
    {
        "content": "<p>Thanks. Is it a bug (in the compiler) that this proc macro works when using <code>///</code> style documentation but not when using <code>//!</code>?</p>",
        "id": 222829263,
        "sender_full_name": "osa1",
        "timestamp": 1610698050
    },
    {
        "content": "<p>It is not a bug in the compiler. <code>#[instrument]</code> adds code before and after the input function body and thus also the <code>//!</code> you wrote. <code>//!</code> must come at the start of an item, so rustc rejects it..</p>",
        "id": 222838180,
        "sender_full_name": "bjorn3",
        "timestamp": 1610704561
    },
    {
        "content": "<p>I'm confused. I have this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>use tracing::instrument;\n\n#[instrument]\nfn main() {\n    //! blah blah\n}\n</code></pre></div>\n<p>when I build I get the error message in my original message. <code>cargo expand</code> prints this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[prelude_import]\nuse std::prelude::v1::*;\n#[macro_use]\nextern crate std;\nuse tracing::instrument;\nfn main() {\n    //! blah blah\n    ...\n</code></pre></div>\n<p>This looks fine to me. It doesn't add any code before <code>//!</code>.</p>",
        "id": 223108257,
        "sender_full_name": "osa1",
        "timestamp": 1610969099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> if you feed the output of cargo expand back to rustc, do you get the same error?</p>",
        "id": 223123797,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610979001
    },
    {
        "content": "<p>I get these errors when I try that:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0433]: failed to resolve: could not find `tracing_core` in `{{root}}`\n  --&gt; src/main.rs:24:27\n   |\n24 |                         ::tracing_core::callsite::Identifier(&amp;CALLSITE),\n   |                           ^^^^^^^^^^^^ could not find `tracing_core` in `{{root}}`\n\nerror[E0433]: failed to resolve: could not find `tracing_core` in `{{root}}`\n  --&gt; src/main.rs:15:43\n   |\n15 |                 ::tracing_core::metadata::Metadata::new(\n   |                                           ^^^^^^^^ not found in `tracing_core::metadata`\n   |\nhelp: consider importing one of these items\n   |\n3  | use std::fs::Metadata;\n   |\n3  | use tracing::Metadata;\n   |\n\nerror[E0433]: failed to resolve: could not find `tracing_core` in `{{root}}`\n  --&gt; src/main.rs:22:44\n   |\n22 |                     ::tracing_core::field::FieldSet::new(\n   |                                            ^^^^^^^^ not found in `tracing_core::field`\n   |\nhelp: consider importing this struct\n   |\n3  | use tracing::field::FieldSet;\n   |\n</code></pre></div>\n<p>Expanded code:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[prelude_import]\nuse std::prelude::v1::*;\n#[macro_use]\nextern crate std;\nuse tracing::instrument;\nfn main() {\n    //! blah blah\n    {}\n    let __tracing_attr_span = {\n        use ::tracing::__macro_support::{Callsite as _, Registration};\n        static CALLSITE: ::tracing::__macro_support::MacroCallsite = {\n            use ::tracing::__macro_support::{MacroCallsite, Registration};\n            static META: ::tracing::Metadata&lt;&#39;static&gt; = {\n                ::tracing_core::metadata::Metadata::new(\n                    &quot;main&quot;,\n                    &quot;instrument_test&quot;,\n                    tracing::Level::INFO,\n                    Some(&quot;src/main.rs&quot;),\n                    Some(3u32),\n                    Some(&quot;instrument_test&quot;),\n                    ::tracing_core::field::FieldSet::new(\n                        &amp;[],\n                        ::tracing_core::callsite::Identifier(&amp;CALLSITE),\n                    ),\n                    ::tracing::metadata::Kind::SPAN,\n                )\n            };\n            static REG: Registration = Registration::new(&amp;CALLSITE);\n            MacroCallsite::new(&amp;META, &amp;REG)\n        };\n        let mut interest = ::tracing::collect::Interest::never();\n        if tracing::Level::INFO &lt;= ::tracing::level_filters::STATIC_MAX_LEVEL\n            &amp;&amp; tracing::Level::INFO &lt;= ::tracing::level_filters::LevelFilter::current()\n            &amp;&amp; {\n                interest = CALLSITE.interest();\n                !interest.is_never()\n            }\n            &amp;&amp; CALLSITE.is_enabled(interest)\n        {\n            let meta = CALLSITE.metadata();\n            ::tracing::Span::new(meta, &amp;{ meta.fields().value_set(&amp;[]) })\n        } else {\n            let span = CALLSITE.disabled_span();\n            {};\n            span\n        }\n    };\n    let __tracing_attr_guard = __tracing_attr_span.enter();\n    {}\n}\n</code></pre></div>",
        "id": 223124225,
        "sender_full_name": "osa1",
        "timestamp": 1610979236
    },
    {
        "content": "<p>I don't get any errors when I feed the output back in.</p>",
        "id": 223158099,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610999254
    },
    {
        "content": "<p>Maybe this <em>is</em> a compiler bug. <span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> Can you open an issue?</p>",
        "id": 223158121,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610999273
    },
    {
        "content": "<p>well, I would expect --unpretty to be buggy before the compiler</p>",
        "id": 223158186,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610999317
    },
    {
        "content": "<p>but yeah that sounds like what I was expected, I bet the tracing proc-macro is getting confused</p>",
        "id": 223158203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610999334
    },
    {
        "content": "<p>I would talk to tracing on discord</p>",
        "id": 223158211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610999341
    },
    {
        "content": "<p>But the expanded output looks fine and it compiles fine...</p>",
        "id": 223158230,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610999357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Weird.20error.20when.20adding.20.23.5Binstrument.5D/near/223158230\">said</a>:</p>\n<blockquote>\n<p>But the expanded output looks fine and it compiles fine...</p>\n</blockquote>\n<p>right - which means the expanded output is not actually what the compiler sees</p>",
        "id": 223158470,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610999556
    },
    {
        "content": "<p>either the proc-macro or <code>unpretty</code> is buggy</p>",
        "id": 223158487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610999571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> yeah when I add tracing-core as a dep it compiles fine. I didn't realize before that it's using another library, I thought it's using non-public types or something (maybe those are allowed in macro-expanded code).</p>",
        "id": 223158801,
        "sender_full_name": "osa1",
        "timestamp": 1610999838
    },
    {
        "content": "<p>I'll open an issue</p>",
        "id": 223158805,
        "sender_full_name": "osa1",
        "timestamp": 1610999845
    },
    {
        "content": "<p>Agreed that it should be a bug. Code with macro doesn't compile but expanded form compiles fine.</p>",
        "id": 223158881,
        "sender_full_name": "osa1",
        "timestamp": 1610999886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119169\">osa1</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Weird.20error.20when.20adding.20.23.5Binstrument.5D/near/223158801\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> yeah when I add tracing-core as a dep it compiles fine. I didn't realize before that it's using another library, I thought it's using non-public types or something (maybe those are allowed in macro-expanded code).</p>\n</blockquote>\n<p>it's using public types that have <code>doc(hidden)</code></p>",
        "id": 223158899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610999906
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81183\">https://github.com/rust-lang/rust/issues/81183</a></p>",
        "id": 223189211,
        "sender_full_name": "osa1",
        "timestamp": 1611034856
    }
]