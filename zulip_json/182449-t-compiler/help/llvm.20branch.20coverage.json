[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> I recently stumbled upon the <code>llvm-cov</code> tool getting proper branch coverage reporting: <a href=\"https://github.com/llvm/llvm-project/commit/9f2967bcfe2f7d1fc02281f0098306c90c2c10a5\">https://github.com/llvm/llvm-project/commit/9f2967bcfe2f7d1fc02281f0098306c90c2c10a5</a></p>",
        "id": 221957585,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610034331
    },
    {
        "content": "<p>will that automatically work with the coverage mappings that rust generates?</p>",
        "id": 221957744,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610034389
    },
    {
        "content": "<p>I’m trying to better understand the terminology of llvm, also figuring out how to read the json output format</p>",
        "id": 221958009,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610034499
    },
    {
        "content": "<p>skimming through that patch, looks like it indeed introduces a new covmap version, so I guess a patch to rust will be needed to support that.</p>",
        "id": 221959737,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610035237
    },
    {
        "content": "<p>Yep, there's an issue already: <a href=\"https://github.com/rust-lang/rust/issues/79649\">https://github.com/rust-lang/rust/issues/79649</a></p>\n<p>But from what I can tell, this isn't implemented in a stable build of LLVM yet, and when it is, I assume it will be LLVM 13 or later. Rust is still on LLVM 11. So it will be a while before this can be entertained.</p>",
        "id": 222011742,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1610059007
    },
    {
        "content": "<p>awesome!</p>",
        "id": 222059612,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610103701
    },
    {
        "content": "<p>ah, forgot that I actually created this topic long ago. <span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> looking at the excellent dev guide docs for coverage instrumentation. I think I can dive a bit deeper into it to try to get branch coverage working</p>",
        "id": 258214628,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1634657103
    },
    {
        "content": "<p>maybe unrelated, but I have seen a few \"malformed instrumentation profile data\" error, reported here:<br>\n<a href=\"https://github.com/Swatinem/fucov/issues/3\">https://github.com/Swatinem/fucov/issues/3</a><br>\nand also here: <a href=\"https://github.com/getsentry/sentry-rust/runs/3927982670\">https://github.com/getsentry/sentry-rust/runs/3927982670</a><br>\ndo you have any quick hunch as to why that might happen? simpler examples are working fine, like the examples in fucov itself, or the rust compiler tests</p>",
        "id": 258214967,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1634657216
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 258224249,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634660131
    },
    {
        "content": "<p>The \"malformed instrumentation profile data\" errors are unrelated to this topic (known issue, but let's keep it to a separate thread)</p>",
        "id": 258224417,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634660180
    },
    {
        "content": "<p>The only thing I would add, about \"branch coverage\" is, is it really adding any value to Rust's implementation of LLVM coverage? In the existing implementation, I tried to capture the \"else\" (and similar) branches as well, for example, I think it appears this way:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">15</span><span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">some_condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\">    </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">coverage</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"s\">\"true\"</span><span class=\"w\"></span>\n<span class=\"mi\">15</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">^</span><span class=\"mi\">10</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258225604,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634660555
    },
    {
        "content": "<p>From this, I know <code>some_condition</code> was <code>true</code> 5 times and <code>false</code> 10 times.</p>\n<p>I haven't explored LLVM's implementation of branch coverage in much detail, so maybe there are some additional improvements that would make a difference. I'm curious to know if that's the case.</p>",
        "id": 258225883,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634660648
    },
    {
        "content": "<p>I haven’t looked in too much detail yet, my understanding would be that I can have the actual conditional being flagged with true/false counts</p>",
        "id": 258238793,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1634664801
    },
    {
        "content": "<p>not quite sure how the current implementation looks like when you have short circuiting conditions</p>",
        "id": 258238852,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1634664824
    },
    {
        "content": "<p>I think the current results give enough information to understand the coverage counts accurately, even with short circuiting. There should be test results to demonstrate this, in the rustc coverage tests, and it would be easy to construct your own tests to see if you can fool it (to demonstrate if branch coverage really does add value). I'd be very interested in seeing this, and happy if we can improve coverage results, if it turns out the existing results are not sufficient.</p>",
        "id": 258392163,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634745028
    }
]