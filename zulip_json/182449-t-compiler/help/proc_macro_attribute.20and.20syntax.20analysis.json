[
    {
        "content": "<p>We would like to use <code>proc_macro_attribute</code> to support a superset of Rust syntax (for functional specifications) inside function bodies. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[predicate]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// note ==&gt; as an implication operator</span>\n</code></pre></div>\n<p>This kind of parsing works fine inside attribute arguments. However, we just found out that rustc seems to perform syntax analysis of the item body before the macro attribute is invoked. So in the example above, if <code>predicate</code> is implemented to simply return an empty <code>TokenStream</code>, the compiler still raises an error about the invalid syntax, even before the attribute is invoked. Is this the indended functionality? Can syntax analysis be delayed until after all macro attributes have executed?</p>",
        "id": 234156458,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1618233822
    },
    {
        "content": "<p>No, all input to attribute macros needs to parse as valid Rust code</p>",
        "id": 234158728,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618234592
    },
    {
        "content": "<p>Ok, thanks. We can work around this issue (e.g. by requiring the function body to be surrounded in a dummy <code>macro!({ ... })</code>. Is there a reason the delay cannot happen? Is it too detrimental to performance?</p>",
        "id": 234160765,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1618235252
    },
    {
        "content": "<p>Macro expansion requires performing name resolution, which requires the files to be parsed first, so there's not really a way to avoid emitting parse errors first</p>",
        "id": 234161503,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618235482
    },
    {
        "content": "<p>I suppose you could rely on parse error recovery, and only emit the parse errors after expansion, but specifying how exactly that's supposed to work sounds like a nightmare</p>",
        "id": 234161717,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618235542
    }
]