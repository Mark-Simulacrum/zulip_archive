[
    {
        "content": "<p>Hello!<br>\nI am running into a weird issue in my rustc CUDA backend, rustc is making some weird globals that are not supported by the OptiX library (hardware raytracing), and i am a bit clueless as to why rustc is doing this. It is making some globals that seem to reference other globals' addresses. This is what it is in LLVM IR:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"vg\">@alloc137</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">36</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">36</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">\"crates\\5Ckernels\\5Csrc\\5Crender_kernels.rs\"</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n<span class=\"vg\">@alloc138</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">16</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">36</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;,</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">36</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@alloc137</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"m\">16</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">\"$\\00\\00\\00\\00\\00\\00\\007\\00\\00\\00\\0A\\00\\00\\00\"</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n</code></pre></div>\n<p>The only use of it seems to be when calling panic code:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code>  <span class=\"k\">tail</span> <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN4core9panicking5panic17ha994e0951cbb3712E</span><span class=\"p\">([</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"k\">noalias</span> <span class=\"k\">nonnull</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">bitcast</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">43</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@alloc128</span> <span class=\"k\">to</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*),</span> <span class=\"kt\">i64</span> <span class=\"m\">43</span><span class=\"p\">,</span> <span class=\"nv\">%\"core::panic::Location\"</span><span class=\"p\">*</span> <span class=\"k\">noalias</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">24</span><span class=\"p\">)</span> <span class=\"k\">bitcast</span> <span class=\"p\">(&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">16</span> <span class=\"k\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@alloc138</span> <span class=\"k\">to</span> <span class=\"nv\">%\"core::panic::Location\"</span><span class=\"p\">*))</span>\n</code></pre></div>\n<p>Why is it going through a second global instead of just using the first global?</p>\n<p>Then this gets turned into this PTX by libnvvm:</p>\n<div class=\"codehilite\"><pre><span></span><code>.global .align 1 .b8 alloc137[36] = {99, 114, 97, 116, 101, 115, 92, 107, 101, 114, 110, 101, 108, 115, 92, 115, 114, 99, 92, 114, 101, 110, 100, 101, 114, 95, 107, 101, 114, 110, 101, 108, 115, 46, 114, 115};\n.global .align 8 .u8 alloc138[24] = {0XFF(generic(alloc137)), 0xFF00(generic(alloc137)), 0xFF0000(generic(alloc137)), 0xFF000000(generic(alloc137)), 0xFF00000000(generic(alloc137)), 0xFF0000000000(generic(alloc137)), 0xFF000000000000(generic(alloc137)), 0xFF00000000000000(generic(alloc137)), 36, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 10, 0, 0, 0};\n</code></pre></div>\n<p>the <code>generic(X)</code> basically just makes a generic addrspace pointer to the specified global, then <code>0X...</code> acts as a bitmask for the given value (the address).</p>\n<p>Now, i have no idea why rustc would be needing to make such a global, masking off addresses just seems weird. But this makes the generated ptx code not work with the OptiX library:</p>\n<div class=\"codehilite\"><pre><span></span><code>[COMPILE FEEDBACK]: COMPILE ERROR: Invalid PTX input: ptx2llvm-module-001: error: Failed to translate PTX input to LLVM\nInvalid pointer cast in array/struct initializer for symbol &quot;alloc138&quot;\nTarget architecture invalid\n</code></pre></div>\n<p>This is because OptiX PTX code cannot use PTX symbols as values, so no dynamic dispatch or things like that.</p>\n<p>Why exactly is rustc making such a weird global and is there some way of working around it inside my codegen?</p>",
        "id": 261080893,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636593795
    },
    {
        "content": "<p>Oh if i am not mistaken this is a global with the file data as well as other location data. Which would make sense if it is needing to use a pointer. Although this kind of causes an issue.</p>",
        "id": 261081143,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636593983
    },
    {
        "content": "<p>Ok for now, using <code>panic_immediate_abort</code> seems to work, although im not sure if this can be a great permanent solution</p>",
        "id": 261083534,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1636596022
    }
]