[
    {
        "content": "<p>I'm attempting to compile from source.  I'm receiving the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling rustc_traits v0.0.0 (/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/compiler/rustc_traits)\n   Compiling rustc_passes v0.0.0 (/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/compiler/rustc_passes)\nmalloc(): invalid size (unsorted)\nrustc exited with signal: 6\nerror: could not compile `rustc_traits`.\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/bootstrap/debug/rustc --crate-name rustc_traits --edition=2018 compiler/rustc_traits/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -Cembed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C overflow-checks=off -C metadata=5869810c7d227a39 -C extra-filename=-5869810c7d227a39 --out-dir /home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -L dependency=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps -L dependency=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/release/deps --extern chalk_engine=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libchalk_engine-a8d5d9397c7719be.rmeta --extern chalk_ir=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libchalk_ir-d0a0105e29c12f02.rmeta --extern chalk_solve=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libchalk_solve-521f7cb05860b7fb.rmeta --extern rustc_ast=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_ast-9663c5f9390c1d5a.rmeta --extern rustc_data_structures=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_data_structures-44f30f5c78c04bad.rmeta --extern rustc_hir=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_hir-ea01d6dafe1c3edf.rmeta --extern rustc_index=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_index-6cef9c51b92199a4.rmeta --extern rustc_infer=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_infer-b9b262356d7f7e36.rmeta --extern rustc_middle=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_middle-b41c2d1c90aa8880.rmeta --extern rustc_span=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_span-2aad16fdfd498cfb.rmeta --extern rustc_trait_selection=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/librustc_trait_selection-fb1bd8c37b3946f2.rmeta --extern smallvec=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libsmallvec-3e4c748bf3501be8.rmeta --extern tracing=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/deps/libtracing-e66a7d368ca0f2bf.rmeta -Zmacro-backtrace &#39;-Clink-args=-Wl,-rpath,$ORIGIN/../lib&#39; -Zunstable-options &#39;-Wrustc::internal&#39; -Cprefer-dynamic -Zbinary-dep-depinfo -L native=/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-unknown-linux-gnu/release/build/psm-4f2793ec4c7532ef/out` (exit code: 254)\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\ncommand did not execute successfully: &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;8&quot; &quot;--release&quot; &quot;--features&quot; &quot; llvm&quot; &quot;--manifest-path&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/compiler/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nexpected success, got: exit code: 101\nfailed to run: /home/grommish/openwrt/build_dir/hostpkg/rust-1.22.1/build/bootstrap/debug/bootstrap build --stage 2\nBuild completed unsuccessfully in 1:37:40\nmake[3]: *** [Makefile:12: all] Error 1\n</code></pre></div>\n\n\n<p>I'm building via ./configure and passing the following args to it:</p>\n<div class=\"codehilite\"><pre><span></span><code>CONFIGURE_ARGS= \\\n     --build=x86_64-unknown-linux-gnu \\\n     --target=mips64-unknown-linux-muslabi64 \\\n     --disable-docs \\\n     --disable-compiler-docs \\\n     --prefix=$(CONFIGURE_PREFIX) \\\n     --bindir=$(CONFIGURE_PREFIX)/bin \\\n     --libdir=$(CONFIGURE_PREFIX)/lib \\\n     --sysconfdir=/etc \\\n     --datadir=$(CONFIGURE_PREFIX)/share \\\n     --localstatedir=/var \\\n     --mandir=$(CONFIGURE_PREFIX)/man \\\n     --infodir=$(CONFIGURE_PREFIX)/info \\\n     --enable-debug \\\n     --enable-full-tools \\\n     --musl-root-mips64=$(TOOLCHAIN_DIR) \\\n     --set=target.mips64-unknown-linux-muslabi64.musl-root=$(TOOLCHAIN_DIR) \\\n     --set=target.mips64-unknown-linux-muslabi64.linker=$(LD) \\\n     --release-channel=experimental\n</code></pre></div>\n\n\n<p>Suggestions?  I'm needing to get it compiled so I can create custom soft-float/dynamically linked chains, but I can't even get it to build out what <em>should</em> work :D</p>",
        "id": 212203331,
        "sender_full_name": "Grommish",
        "timestamp": 1601782087
    },
    {
        "content": "<p>are you on x32? you might have exhausted the address space</p>",
        "id": 212203352,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601782177
    },
    {
        "content": "<p>although I'd expect that to be in rustc_middle, not rustc_traits</p>",
        "id": 212203357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601782192
    },
    {
        "content": "<p>oh hold on - does <code>--enable-debug</code> turn on debuginfo=2? that might be it too, that generates a <em>ton</em> of data</p>",
        "id": 212203400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601782225
    },
    {
        "content": "<p>you could also try <code>-j1</code> to see if that uses less memory</p>",
        "id": 212203408,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601782257
    },
    {
        "content": "<p>I call via -j1, but the configure script apparently overrides it with $(nproc). (the CMake build system I guess)   The build system is an i7 4c/8t with 28gb Ram.  I'm not even stressing the build</p>\n<div class=\"codehilite\"><pre><span></span><code>              total        used        free      shared  buff/cache   available\nMem:       28705120     9176920     8605112      983180    10923088    18120920\nSwap:       2097148       37632     2059516\n</code></pre></div>\n\n\n<p>I can certainly try to remove --enable-debug and try again.  I will log out the entire build if you want, I'm not sure how large it'll be before tgz'ing though.</p>",
        "id": 212203527,
        "sender_full_name": "Grommish",
        "timestamp": 1601782459
    },
    {
        "content": "<p>hmm that seems like it should have more than enough mem</p>",
        "id": 212203668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601782762
    },
    {
        "content": "<p>I never heard - are you on x32?</p>",
        "id": 212203673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601782770
    },
    {
        "content": "<p>x64 on host and 64bit BE target (x64/mips64 build/target)</p>",
        "id": 212203781,
        "sender_full_name": "Grommish",
        "timestamp": 1601782960
    },
    {
        "content": "<blockquote>\n<p>rust-1.22.1</p>\n</blockquote>\n<p>any reason you're using such an old version?</p>",
        "id": 212203841,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601783052
    },
    {
        "content": "<p>I'm cloning from source, main branch, commit <a href=\"https://github.com/rust-lang/rust/commit/fc2daaae610b5515438b551a2f3706196a997f35\">fc2daaae610b5515438b551a2f3706196a997f35</a></p>",
        "id": 212203846,
        "sender_full_name": "Grommish",
        "timestamp": 1601783092
    },
    {
        "content": "<p>ah ok, the build directory is just named weird then</p>",
        "id": 212203854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601783109
    },
    {
        "content": "<p>not sure what's going wrong, sorry</p>",
        "id": 212203859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601783123
    },
    {
        "content": "<p>I'm working to incorporate Rust/Cargo into OpenWrt, which complicated things, but I'll try removing the debugging calls.  </p>\n<p>Thanks! :)</p>",
        "id": 212203904,
        "sender_full_name": "Grommish",
        "timestamp": 1601783167
    },
    {
        "content": "<p>all mips targets in compilers are hard-float</p>",
        "id": 212203992,
        "sender_full_name": "lzutao",
        "timestamp": 1601783386
    },
    {
        "content": "<p>Yes, the are also -static, which is not helpful.. But that's why I'm trying to build from source, so I can define my own targets.</p>\n<p>I've defined a mips64-muslabi64sf target once I actually get the system working, for now, I'm just trying to get the built-in targets to build and then worry about custom targets</p>",
        "id": 212204092,
        "sender_full_name": "Grommish",
        "timestamp": 1601783531
    },
    {
        "content": "<p>how did you get the C cross-compiler ? Is it from debian package ?</p>",
        "id": 212204954,
        "sender_full_name": "lzutao",
        "timestamp": 1601785210
    },
    {
        "content": "<p>I'm using the OpenWrt musl toolchain, though I updated it to 1.2.1 and gcc 10.2</p>",
        "id": 212205256,
        "sender_full_name": "Grommish",
        "timestamp": 1601785841
    },
    {
        "content": "<p>thanks. I'm trying building with Codescape GNU Tools, for  mips64-unknown-linux-gnuabi64</p>",
        "id": 212205491,
        "sender_full_name": "lzutao",
        "timestamp": 1601786354
    },
    {
        "content": "<p>Ah.  I'm trying muslabi64.  I ran into the static linking issue and seemed to have corrected that (I added a -DLLVM_LINK_LLVM_DYLIB:ON CMake flag).. and the soft-float I can fix with the custom .rs file, assuming I can get it to actually build out.</p>",
        "id": 212205602,
        "sender_full_name": "Grommish",
        "timestamp": 1601786557
    },
    {
        "content": "<p>I finished getting it to compile.  Now, if I'm correct, I need to use the build/x86_64-unknown-linux-gnu/bin/stage2/bin/rustc to <em>cross</em> compile my target (mips64-musl) package (Suricata) and not the stage0/stage1 rustc?  But I'll use the stage0 cargo bin?</p>\n<p>I'm using --build and --target, but not --host.  Would --host make the mips64 stage2 files?</p>\n<div class=\"codehilite\"><pre><span></span><code>grommish@norwits:~/openwrt/build_dir/hostpkg/rust-1.22.1/build/x86_64-unknown-linux-gnu$ ls\nllvm  stage0  stage0-std  stage0-sysroot  stage1  stage2\n</code></pre></div>",
        "id": 212216810,
        "sender_full_name": "Grommish",
        "timestamp": 1601807226
    },
    {
        "content": "<p>This has changed lot recently but I <em>think</em> the current situation is HOST is built by default</p>",
        "id": 212222042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601815848
    },
    {
        "content": "<p>Search <code>A-rustbuild</code> on GitHub and some stuff should pop up</p>",
        "id": 212222055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601815872
    },
    {
        "content": "<p>Ok.. thank you <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> and <span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> .   Remember, I'm not using <code>x.py</code> at all for this.  I'll continue to play around with it.</p>",
        "id": 212229819,
        "sender_full_name": "Grommish",
        "timestamp": 1601828538
    },
    {
        "content": "<p>Configure and make just call x.py internally</p>",
        "id": 212229980,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601828859
    },
    {
        "content": "<p>They're only there to make the interface more friendly</p>",
        "id": 212230026,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601828889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Copying stage2 std from stage2 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / mips64-unknown-linux-muslabi64)\nBuild completed successfully in 0:42:53\n</code></pre></div>\n\n\n<p>From what I've read, stage2 should be what I'm looking for..  :)  I think I'm finally getting somewhere.</p>",
        "id": 212233066,
        "sender_full_name": "Grommish",
        "timestamp": 1601833539
    },
    {
        "content": "<p>I'm missing some fundamental understandings here, so bear with me.</p>\n<p>The situation is, I'm building rust into OpenWrt.  I'm building rustc for the host triple to use to (usually) cross compile to a second toolchain: <code>x86_64-unknown-linux-gnu</code> for the host, <code>mips64-unknown-linux-muslabi64</code> for the eventual cross-compile target.</p>\n<p>Now, I am only needing to cross-compile for the target, not create rustc/cargo for installation on the target.  It's only being used to cross-compile on the host for target.</p>\n<p>I've gotten rustc to compile, which generates ./build/x86_64-unknown-linux-gnu directories:</p>\n<div class=\"codehilite\"><pre><span></span><code>lld  llvm  stage0  stage0-rustc  stage0-std  stage0-sysroot\nstage1  stage1-rustc  stage1-std  stage2  stage2-std\n</code></pre></div>\n\n\n<p><code>stage0</code> has all of the rustc and cargo bins, <code>stage1</code> and <code>stage2</code> only contain rustc.</p>\n<p>Can anyone tell me what I need to point the OpenWrt build system to?  Stage2?  Stage0? Neither?  <br>\nThese are my <code>configure</code> arguments, and the stage2 seems to be the one for the target, but it's only rustc.</p>\n<div class=\"codehilite\"><pre><span></span><code>     --build=x86_64-unknown-linux-gnu \\\n     --target=mips64-unknown-linux-muslabi64 \\\n     --enable-llvm-link-shared \\\n     --enable-ccache \\\n     --disable-docs \\\n     --disable-compiler-docs \\\n     --prefix=$(CONFIGURE_PREFIX) \\\n     --bindir=$(CONFIGURE_PREFIX)/bin \\\n     --libdir=$(CONFIGURE_PREFIX)/lib \\\n     --sysconfdir=/etc \\\n     --datadir=$(CONFIGURE_PREFIX)/share \\\n     --localstatedir=/var \\\n     --mandir=$(CONFIGURE_PREFIX)/man \\\n     --infodir=$(CONFIGURE_PREFIX)/info \\\n     --enable-full-tools \\\n     --musl-root-mips64=$(TOOLCHAIN_DIR) \\\n     --set=target.mips64-unknown-linux-muslabi64.musl-root=$(TOOLCHAIN_DIR) \\\n     --set=target.mips64-unknown-linux-muslabi64.linker=$(LD) \\\n     --release-channel=experimental\n</code></pre></div>",
        "id": 212382046,
        "sender_full_name": "Grommish",
        "timestamp": 1601956204
    },
    {
        "content": "<p>I think you need <code>--extended</code> to get tools</p>",
        "id": 212382259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601956525
    },
    {
        "content": "<blockquote>\n<p>Now, I am only needing to cross-compile for the target, not create rustc/cargo for installation on the target. It's only being used to cross-compile on the host for target.</p>\n</blockquote>\n<p>wait, you mean you only need rustc on the host, then want to cross compile some other program using that host rustc?</p>",
        "id": 212382324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601956574
    },
    {
        "content": "<p>then either stage1 or stage 2 would work</p>",
        "id": 212382329,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601956586
    },
    {
        "content": "<p>and the toolchain will be in <code>build/$HOST/stageN</code></p>",
        "id": 212382334,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601956598
    },
    {
        "content": "<p>I'm building out now to test.  I have such confidence I'm going to ask another question :D  I will eventually need to use a custom target to support soft-float.  I've created the .rs json file.  Do I just drop it into <code>./compiler/rustc_target/src/spec/</code> and call it as the <code>--target</code> as normal?  I'm already calling the experimental channell</p>",
        "id": 212382634,
        "sender_full_name": "Grommish",
        "timestamp": 1601956973
    },
    {
        "content": "<p>I'm not sure, maybe take a look at <a href=\"https://github.com/rust-lang/rust/pull/74541/\">https://github.com/rust-lang/rust/pull/74541/</a></p>",
        "id": 212382653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601957007
    },
    {
        "content": "<p>Thanks.. Looks like it!  I'm just using the standard <code>mips64_unknown_linux_muslabi64</code> and just adding a <code>soft-float</code> to it..  Nothing else needs to be changed.  Hoepfully I'll be able to report a success :)  Thanks again!</p>",
        "id": 212382769,
        "sender_full_name": "Grommish",
        "timestamp": 1601957156
    },
    {
        "content": "<p>Well.. I added the <code>--enable-extended</code> and <code>--enable-manage-submodules</code> and <code>stage2</code> still only contains <code>rustc</code> and the accompanying lib files. (<code>stage1</code> also only contains <code>rustc</code>)</p>\n<p>Any ideas on how to get the other things like <code>cargo</code> to build in <code>stage2</code>?</p>",
        "id": 212389017,
        "sender_full_name": "Grommish",
        "timestamp": 1601965629
    },
    {
        "content": "<p>They are built, but placed in <code>stageN-tools</code> iirc</p>",
        "id": 212389328,
        "sender_full_name": "oli",
        "timestamp": 1601965960
    },
    {
        "content": "<p>These are the only directories that are created..<br>\n<code>lld  llvm  stage0  stage0-rustc  stage0-std  stage0-sysroot  stage1  stage1-rustc  stage1-std  stage2  stage2-std</code></p>\n<p>See my above ./configure args.. Did I miss one?</p>\n<p>The <code>stage0/bin</code> directory has all the good stuff, but from what I  understand, it isn't what I need.</p>\n<p><code>cargo  cargo-fmt  rustc  rustdoc  rustfmt  rust-gdb  rust-gdbgui  rust-lldb</code></p>",
        "id": 212389542,
        "sender_full_name": "Grommish",
        "timestamp": 1601966224
    },
    {
        "content": "<p>This page <a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html</a><br>\ndocuments various build targets such as : ./x.py build -i library/std<br>\n(there's a lot of stuff out there so you may not have seen it - or like me, just skimmed it first time through :) )</p>",
        "id": 212460259,
        "sender_full_name": "David Greaves",
        "timestamp": 1602005819
    },
    {
        "content": "<p>if you're doing complicated things I highly recommend readidng through <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html</a></p>",
        "id": 212462451,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602006947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  The bootstrapping page is where I got the info about needing Stage2 for the cross-compile.  I still think I'm missing a <code>--arg</code> somewhere.</p>\n<p><span class=\"user-mention\" data-user-id=\"348444\">@David Greaves</span> One of the issues I'm facing is that I can't called <code>x.py</code> directly, I use the <code>./configure</code> wrapper.  I'm just going to have to go turn everything on and see what breaks, I suppose :)</p>",
        "id": 212475822,
        "sender_full_name": "Grommish",
        "timestamp": 1602013624
    },
    {
        "content": "<p>configure and then running x.py is expected/supported</p>",
        "id": 212476248,
        "sender_full_name": "simulacrum",
        "timestamp": 1602013864
    },
    {
        "content": "<p>fwiw</p>",
        "id": 212476252,
        "sender_full_name": "simulacrum",
        "timestamp": 1602013867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Yes, but I'm calling it via <code>./configure</code> and then <code>make</code>.  I do not invoke <code>x.py</code> at all directly because it's in a fakeroot build system besides whatever the Makefile calls.  If there is a better way, I'm all for trying, but x.py failed for me because it expects to be installed on the host directly (<code>/usr, /bin, etc</code>), which isn't what I'm trying to do.</p>",
        "id": 212477516,
        "sender_full_name": "Grommish",
        "timestamp": 1602014451
    },
    {
        "content": "<p>Make directly runs x.py, so I fail to see why you would not be able to do the same.</p>",
        "id": 212477645,
        "sender_full_name": "simulacrum",
        "timestamp": 1602014512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Right :) I just edit'ed that to include Makefile is a wrapper</p>\n<p>So, the question remains, if ./configure is acceptable, and Makefile just called x.py, why am I not seeing the full Stage1/2 artifacts?</p>",
        "id": 212477782,
        "sender_full_name": "Grommish",
        "timestamp": 1602014556
    },
    {
        "content": "<p>I still don't follow what the problem is</p>",
        "id": 212477851,
        "sender_full_name": "simulacrum",
        "timestamp": 1602014587
    },
    {
        "content": "<p>if you're pulling artifacts out of the rust build system, I strongly recommend using x.py dist (or make dist)</p>",
        "id": 212477917,
        "sender_full_name": "simulacrum",
        "timestamp": 1602014612
    },
    {
        "content": "<p>cross-compilation with x.py build is unlikely to do what you want, it is semi-broken right now, see <a href=\"https://github.com/rust-lang/rust/issues/77352\">https://github.com/rust-lang/rust/issues/77352</a></p>",
        "id": 212478082,
        "sender_full_name": "simulacrum",
        "timestamp": 1602014676
    },
    {
        "content": "<p>(and x.py install if you want to immediately use those artifacts, it will internally build what is needed)</p>",
        "id": 212478124,
        "sender_full_name": "simulacrum",
        "timestamp": 1602014702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  I'll give a go :) Thanks!</p>",
        "id": 212478448,
        "sender_full_name": "Grommish",
        "timestamp": 1602014871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I took heed of the comments in that issue you linked.  I did do the <code>x.py dist library/std src/librustc</code> and it built out <code>rust-analysis-1.48.0-dev-mips64-unknown-linux-muslabi64sf.tar.gz/xz</code> and <code>rust-std-1.48.0-dev-mips64-unknown-linux-muslabi64sf.tar.gz/xz</code> files.  These tarballs only contain the rustlib files, but no binaries.  Did I (again) miss something?</p>",
        "id": 212723277,
        "sender_full_name": "Grommish",
        "timestamp": 1602177967
    },
    {
        "content": "<p>That seems like too small a set - what is your host/target config?</p>",
        "id": 212728412,
        "sender_full_name": "simulacrum",
        "timestamp": 1602180380
    },
    {
        "content": "<p><code>x86_64-unknown-linux-gnu / mips64-unknown-linux-muslabi64sf</code> host/target.</p>\n<p>My full ./configure arg-list<br>\n<code>\nCONFIGURE_ARGS= \\\n     --build=$(RUSTC_HOST_ARCH) \\\n     --target=$(RUSTC_TARGET_ARCH) \\\n     --enable-full-tools \\\n     --enable-full-bootstrap \\\n     --enable-llvm-link-shared \\\n     --enable-extended \\\n     --enable-manage-submodules \\\n     --enable-ccache \\\n     --disable-docs \\\n     --disable-compiler-docs \\\n     --prefix=$(CONFIGURE_PREFIX) \\\n     --bindir=$(CONFIGURE_PREFIX)/bin \\\n     --libdir=$(CONFIGURE_PREFIX)/lib \\\n     --sysconfdir=$(CONFIGURE_PREFIX)/etc \\\n     --datadir=$(CONFIGURE_PREFIX)/share \\\n     --localstatedir=/var \\\n     --mandir=$(CONFIGURE_PREFIX)/man \\\n     --infodir=$(CONFIGURE_PREFIX)/info \\\n     --set=target.mips64-unknown-linux-muslabi64sf.musl-root=$(TOOLCHAIN_DIR) \\\n     --set=target.mips64-unknown-linux-muslabi64sf.linker=$(LD) \\\n     --release-channel=experimental\n</code></p>",
        "id": 212739851,
        "sender_full_name": "Grommish",
        "timestamp": 1602186095
    },
    {
        "content": "<p>I've defined the target in the correct places, i believe.  I dropped the .rs file in <code>./compiler/rustc_target/src/spec/</code> and added the entry in <code>mod.rs</code></p>\n<p>This is my .rs file.</p>\n<div class=\"codehilite\"><pre><span></span><code>use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n\npub fn target() -&gt; TargetResult {\n    let mut base = super::linux_musl_base::opts();\n    base.cpu = &quot;mips64r2&quot;.to_string();\n    base.features = &quot;+mips64r2,+soft-float&quot;.to_string();\n    base.max_atomic_width = Some(64);\n    Ok(Target {\n        // LLVM doesn&#39;t recognize &quot;muslabi64&quot; yet.\n        llvm_target: &quot;mips64-unknown-linux-musl&quot;.to_string(),\n        target_endian: &quot;big&quot;.to_string(),\n        target_pointer_width: &quot;64&quot;.to_string(),\n        target_c_int_width: &quot;32&quot;.to_string(),\n        data_layout: &quot;E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128&quot;.to_string(),\n        arch: &quot;mips64&quot;.to_string(),\n        target_os: &quot;linux&quot;.to_string(),\n        target_env: &quot;musl&quot;.to_string(),\n        target_vendor: &quot;unknown&quot;.to_string(),\n        linker_flavor: LinkerFlavor::Gcc,\n        options: TargetOptions { target_mcount: &quot;_mcount&quot;.to_string(), ..base },\n    })\n}\n</code></pre></div>",
        "id": 212740464,
        "sender_full_name": "Grommish",
        "timestamp": 1602186452
    },
    {
        "content": "<p>You want --host=$(RUSTC_TARGET_ARCH), I suspect</p>",
        "id": 212741046,
        "sender_full_name": "simulacrum",
        "timestamp": 1602186775
    },
    {
        "content": "<p>in addition</p>",
        "id": 212741054,
        "sender_full_name": "simulacrum",
        "timestamp": 1602186781
    },
    {
        "content": "<p><em>edit</em> So.. I learned to read :D  I forgot I moved --host off after reading the documentation.</p>\n<p>Should I make --host the target (mips64-muslabi64sf) or the host x86_64-gnu?  Since I only really need the ability to cross-compile.</p>",
        "id": 212741259,
        "sender_full_name": "Grommish",
        "timestamp": 1602186881
    },
    {
        "content": "<p>I don't know what you mean by \"ability to cross-compile\"</p>",
        "id": 212742956,
        "sender_full_name": "simulacrum",
        "timestamp": 1602187790
    },
    {
        "content": "<p>host should be a list of triples on which you intend to run rustc itself</p>",
        "id": 212743019,
        "sender_full_name": "simulacrum",
        "timestamp": 1602187808
    },
    {
        "content": "<p>I'm building this into OpenWrt.  The host, in this case, is the x86_64-linux-gnu.  The target in which the other packages (Suricata, in this instance) will be compiled to is the mips64_sf.  I do not need to run rustc/cargo on the mips64 device itself, although I wouldn't turn down the ability to do so.  The primary goal is to generate a toolchain that will compile for the mips64-sf target on the x86_64-gnu machine.</p>\n<p>Everything works, so far.. I generate out the stage0/stage1/stage2 directories, mostly.  but, as you pointed out earlier, it's broken that way.</p>",
        "id": 212743290,
        "sender_full_name": "Grommish",
        "timestamp": 1602187973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , I know you're just going to facepalm, and I apologize ;p  But....</p>\n<p>So I decided to take OpenWrt out of the equation, so I can see what needs to be done just to get it done, then I'll worry about incorporating.  I'm using the args, but not using the OpenWrt build environment.</p>\n<p>Using your suggestion, I build out <code>python3 x.py dist library/std src/librustc</code> and it worked fine (woot!), using</p>\n<div class=\"codehilite\"><pre><span></span><code>./configure --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=mips64-unknown-linux-muslabi64sf --enable-full-tools --enable-full-bootstrap --enable-llvm-link-shared --enable-extended --enable-manage-submodules --enable-ccache --disable-docs --disable-compiler-docs --prefix=/home/grommish/openwrt/build_dir/hostpkg/.cargo --bindir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/bin --libdir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/lib \\\n--sysconfdir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/etc --datadir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/share --localstatedir=/var --mandir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/man --infodir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/info --set=target.mips64-unknown-linux-muslabi64sf.musl-root=/home/grommish/openwrt/staging_dir/toolchain-mips64_octeon3_64_gcc-10.2.0_musl --release-channel=experimental\n</code></pre></div>\n\n\n<p>to set everything up.</p>\n<p>If I attempt to install it <code>python3 x.py install</code>, I get the below error.</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling rls-rustc v0.6.0 (/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/src/tools/rls/rls-rustc)\nerror[E0061]: this function takes 5 arguments but 4 arguments were supplied\n  --&gt; src/tools/rls/rls-rustc/src/lib.rs:78:41\n   |\n78 |     rustc_driver::catch_fatal_errors(|| run_compiler(&amp;args, &amp;mut shim_calls, file_loader, None))\n   |                                         ^^^^^^^^^^^^ -----  ---------------  -----------  ---- supplied 4 arguments\n   |                                         |\n   |                                         expected 5 arguments\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0061`.\n\nDid not run successfully: exit code: 1\n&quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&quot; &quot;--crate-name&quot; &quot;rls_rustc&quot; &quot;--edition=2018&quot; &quot;src/tools/rls/rls-rustc/src/lib.rs&quot; &quot;--error-format=json&quot; &quot;--json=diagnostic-rendered-ansi,artifacts&quot; &quot;--crate-type&quot; &quot;lib&quot; &quot;--emit=dep-info,metadata,link&quot; &quot;-C&quot; &quot;opt-level=3&quot; &quot;-Cembed-bitcode=no&quot; &quot;-C&quot; &quot;debuginfo=0&quot; &quot;--cfg&quot; &quot;feature=\\&quot;clippy\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;clippy_lints\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;default\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;futures\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;ipc\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;rls-data\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;rls-ipc\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;serde\\&quot;&quot; &quot;--cfg&quot; &quot;feature=\\&quot;tokio\\&quot;&quot; &quot;-C&quot; &quot;metadata=7f78e115ed0d77c7&quot; &quot;-C&quot; &quot;extra-filename=-7f78e115ed0d77c7&quot; &quot;--out-dir&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-L&quot; &quot;dependency=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps&quot; &quot;-L&quot; &quot;dependency=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/release/deps&quot; &quot;--extern&quot; &quot;clippy_lints=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_lints-eefac17fd52698cb.rmeta&quot; &quot;--extern&quot; &quot;env_logger=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libenv_logger-35a553754168ae5c.rmeta&quot; &quot;--extern&quot; &quot;futures=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libfutures-402185e6482d9e40.rmeta&quot; &quot;--extern&quot; &quot;log=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/liblog-a566e02018ff4668.rmeta&quot; &quot;--extern&quot; &quot;rand=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/librand-a413504ed756456c.rmeta&quot; &quot;--extern&quot; &quot;rls_data=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/librls_data-d6026e59f03e8e9e.rmeta&quot; &quot;--extern&quot; &quot;rls_ipc=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/librls_ipc-7e9f2706b64e4644.rmeta&quot; &quot;--extern&quot; &quot;serde=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libserde-fa91955d658a291d.rmeta&quot; &quot;--extern&quot; &quot;tokio=/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2-tools/x86_64-unknown-linux-gnu/release/deps/libtokio-25a6eb5c5a448ef4.rmeta&quot; &quot;-Zmacro-backtrace&quot; &quot;-Clink-args=-Wl,-rpath,$ORIGIN/../lib&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;--sysroot&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.46.0/build/x86_64-unknown-linux-gnu/stage2&quot;\n-------------\nerror: could not compile `rls-rustc`.\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\n</code></pre></div>",
        "id": 212996611,
        "sender_full_name": "Grommish",
        "timestamp": 1602476484
    },
    {
        "content": "<p>RLS is broken right now: <a href=\"https://github.com/rust-lang/rust/issues/77810\">https://github.com/rust-lang/rust/issues/77810</a></p>",
        "id": 212996619,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602476516
    },
    {
        "content": "<p>I'd skip it for now, or pin a nightly version</p>",
        "id": 212996658,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602476523
    },
    {
        "content": "<p>Silly question, how do I exclude the package :D  It's amazing I get anything done, I know, but I promise the answers will be remembered for next time!</p>",
        "id": 212996732,
        "sender_full_name": "Grommish",
        "timestamp": 1602476672
    },
    {
        "content": "<p>don't pass <code>--enable-full-tools</code> I think</p>",
        "id": 212996738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602476693
    },
    {
        "content": "<p>Oh fantastic, I will give that a try.  Thank you <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> !</p>",
        "id": 212996801,
        "sender_full_name": "Grommish",
        "timestamp": 1602476787
    },
    {
        "content": "<p>FYI <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> , You can also pass <code>--enable-missing-tools</code> to ignore bad packages.</p>\n<p>Also, it seem the <code>rls-rust</code> isn't the only one having the issue, I am getting the same error for <code>miri</code></p>\n<p>But, it builds.. It installs where I need it..  Now, all I have to do is get it to work  inside the OpenWrt build system.</p>",
        "id": 213010214,
        "sender_full_name": "Grommish",
        "timestamp": 1602491128
    },
    {
        "content": "<p>Reading <a href=\"https://github.com/rust-lang/rust/issues/77352\">https://github.com/rust-lang/rust/issues/77352</a> that <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> mentioned, I am calling<br>\n<code>$(PYTHON) x.py install --build=$(RUSTC_HOST_ARCH) --host=$(RUSTC_HOST_ARCH) --target=$(RUSTC_TARGET_ARCH)</code></p>\n<p>and it builds, installs to my CARGO_HOME directory, containing the bin/etc/lib/man/share directories..  When i attempt a <code>cargo install --force cbindgen</code> and it gives me the error mentioned. </p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0463]: can&#39;t find crate for `std`\nFor more information about this error, try `rustc --explain E0463`.\n</code></pre></div>\n\n\n<p>Do you still recommend creating a <code>dist</code> and then trying to run install on that tarball?  Or will the situation be fixed/has been fixed since the PR mentioned in the issue was merged 20 days ago?</p>",
        "id": 213061972,
        "sender_full_name": "Grommish",
        "timestamp": 1602521417
    },
    {
        "content": "<p>Hm, I forget if I fixed that. Let me check.</p>",
        "id": 213062013,
        "sender_full_name": "simulacrum",
        "timestamp": 1602521453
    },
    {
        "content": "<p>are you on latest master?</p>",
        "id": 213062152,
        "sender_full_name": "simulacrum",
        "timestamp": 1602521531
    },
    {
        "content": "<p>Building from <code>c71248b70870960af9993de4f31d3cba9bbce7e8</code> on master, yes</p>",
        "id": 213062242,
        "sender_full_name": "Grommish",
        "timestamp": 1602521596
    },
    {
        "content": "<p>hm, do you have a x.py install log handy?</p>",
        "id": 213062272,
        "sender_full_name": "simulacrum",
        "timestamp": 1602521619
    },
    {
        "content": "<p>it should have worked, so there must be a bug</p>",
        "id": 213062460,
        "sender_full_name": "simulacrum",
        "timestamp": 1602521726
    },
    {
        "content": "<p>I did fix what I was thinking about earlier</p>",
        "id": 213062467,
        "sender_full_name": "simulacrum",
        "timestamp": 1602521731
    },
    {
        "content": "<p>Give me a bit and I can create one.  I've got to step away and will be able in a few hours.  I'll let the build run while I'm away.</p>",
        "id": 213064388,
        "sender_full_name": "Grommish",
        "timestamp": 1602522906
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/qQlcIuGRIXKalAHfGVmq0aKf/rust-build.log\">rust-build.log</a> <br>\n<a href=\"user_uploads/4715/vgWsuhajNhGC9HhpH45Pc6zh/cargoerr.log\">cargoerr.log</a> <br>\nHere's the build log.   The error occurs when I go to compile Suricata for the mips64-muslabi64sf target and I call the <code>cargo install --force cbindgen</code> prior to compiling.</p>",
        "id": 213087360,
        "sender_full_name": "Grommish",
        "timestamp": 1602537378
    },
    {
        "content": "<p>I sync'ed and build from <a href=\"https://github.com/rust-lang/rust/commit/5565241f65cf402c3dbcb55dd492f172c473d4ce\">5565241f65cf402c3dbcb55dd492f172c473d4ce</a> today, and still receiving the error below.  Anything I can do to help?</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo install --force cbindgen\n    Updating crates.io index\n  Installing cbindgen v0.15.0\n   Compiling proc-macro2 v1.0.24\n   Compiling libc v0.2.79\n   Compiling syn v1.0.44\n   Compiling unicode-xid v0.2.1\n   Compiling cfg-if v0.1.10\n   Compiling getrandom v0.1.15\n   Compiling serde_derive v1.0.116\n   Compiling serde v1.0.116\n   Compiling ryu v1.0.5\n   Compiling autocfg v1.0.1\n   Compiling bitflags v1.2.1\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n   Compiling ppv-lite86 v0.2.9\nerror: could not compile `libc`\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: failed to compile `cbindgen v0.15.0`, intermediate artifacts can be found at `/home/grommish/openwrt/tmp/cargo-installrKFrAu`\n\nCaused by:\n  build failed\n</code></pre></div>",
        "id": 213377862,
        "sender_full_name": "Grommish",
        "timestamp": 1602733793
    },
    {
        "content": "<p>So I built from HEAD <a href=\"https://github.com/rust-lang/rust/commit/b2025326088b54fb3f083bebeba14e0a15bf00d3\">b2025326088b54fb3f083bebeba14e0a15bf00d3</a> , defined the custom target, and it compiles.. It errors on tools <code>rustfmt</code> and <code>rls</code>, but from what I understand, it doesn't really matter.</p>\n<p>I'm still getting the error on cbindgen.  I've defined and compiled for the host (x86_64) and target (mips64) and it installs, but..  </p>\n<p>Any suggestions?</p>\n<div class=\"codehilite\"><pre><span></span><code>grommish@norwits:~/openwrt$ which cargo\n/home/grommish/openwrt/build_dir/hostpkg/.cargo/bin/cargo\ngrommish@norwits:~/openwrt$ cargo install cbindgen\n    Updating crates.io index\n  Downloaded cbindgen v0.15.0\n  Downloaded 1 crate (181.8 KB) in 1.31s\n  Installing cbindgen v0.15.0\n  Downloaded hashbrown v0.9.1\n  Downloaded ppv-lite86 v0.2.10\n  Downloaded serde_derive v1.0.117\n  Downloaded serde v1.0.117\n  Downloaded syn v1.0.48\n  Downloaded getrandom v0.1.15\n  Downloaded proc-macro2 v1.0.24\n  Downloaded libc v0.2.80\n  Downloaded 8 crates (1025.6 KB) in 0.37s\n   Compiling proc-macro2 v1.0.24\n   Compiling libc v0.2.80\n   Compiling syn v1.0.48\n   Compiling unicode-xid v0.2.1\n   Compiling cfg-if v0.1.10\n   Compiling getrandom v0.1.15\n   Compiling serde_derive v1.0.117\n   Compiling serde v1.0.117\n   Compiling autocfg v1.0.1\n   Compiling ppv-lite86 v0.2.10\n   Compiling bitflags v1.2.1\nerror[E0463]: can&#39;t find crate for `std`\n\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\n   Compiling ryu v1.0.5\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `syn`\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nerror[E0463]: can&#39;t find crate for `core`\n\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: failed to compile `cbindgen v0.15.0`, intermediate artifacts can be found at `/tmp/cargo-installBR8NkM`\n\nCaused by:\n  build failed\n</code></pre></div>",
        "id": 215363011,
        "sender_full_name": "Grommish",
        "timestamp": 1604343790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> how did you install cargo? and how did you install rust from source?</p>",
        "id": 215363075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604343825
    },
    {
        "content": "<p>that looks like you built rustc but not the standard library</p>",
        "id": 215363097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604343835
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    cd $(HOST_BUILD_DIR) &amp;&amp; RUST_BACKTRACE=1 $(PYTHON) x.py dist library/std src/librustc\n\n    cd $(HOST_BUILD_DIR) &amp;&amp; RUST_BACKTRACE=1 $(PYTHON) x.py install \\\n     --build=$(RUSTC_HOST_ARCH) \\\n     --host=$(RUSTC_HOST_ARCH) \\\n     --target=$(RUSTC_TARGET_ARCH)\n</code></pre></div>\n<p>In this case,<code>x86_64-unknown-linux-gnu</code> is the host, <code>mips64-unknown-linux-muslabi64sf</code> is the custom target</p>",
        "id": 215363282,
        "sender_full_name": "Grommish",
        "timestamp": 1604343914
    },
    {
        "content": "<p>hmm I wouldn't expect you to need <code>library/std</code> filters</p>",
        "id": 215363418,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604343967
    },
    {
        "content": "<p>if you run <code>x.py dist</code> without arguments does it build more? Or is everything cached?</p>",
        "id": 215363443,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604343982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/building.20rust.2Fcargo.20from.20source.20for.20cross_compile.20mips64_.2E.2E.2E/near/212478082\">said</a>:</p>\n<blockquote>\n<p>cross-compilation with x.py build is unlikely to do what you want, it is semi-broken right now, see <a href=\"https://github.com/rust-lang/rust/issues/77352\">https://github.com/rust-lang/rust/issues/77352</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is the one who suggest the dist library/std src/librustc line, because of an existing issue.  I can certainly take it off and rebuild</p>\n<p>Anything I change has to be rebuilt from scratch, because of the whole OpenWrt thing (for instance, i use Ninja during the build, but I don't have it installed on my host machine.. it's only inside the build environment for openwrt)..  I'll just call <code>x.py dist</code> and see what it builds, before the <code>x.py install</code></p>",
        "id": 215363642,
        "sender_full_name": "Grommish",
        "timestamp": 1604344076
    },
    {
        "content": "<p>My build config, just as a refresher..</p>\n<div class=\"codehilite\"><pre><span></span><code>cd /home/grommish/openwrt/build_dir/hostpkg/rust-1.49.0 &amp;&amp; RUST_BACKTRACE=1 ./configure --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=mips64-unknown-linux-muslabi64sf --prefix=/home/grommish/openwrt/build_dir/hostpkg/.cargo --bindir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/bin --libdir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/lib --sysconfdir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/etc --datadir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/share --localstatedir=/var --mandir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/man --infodir=/home/grommish/openwrt/build_dir/hostpkg/.cargo/info --release-channel=experimental --enable-debug --disable-docs --disable-compiler-docs --enable-parallel-compiler --enable-ccache --enable-llvm-link-shared --enable-option-checking --enable-ninja --enable-full-tools --enable-missing-tools --enable-manage-submodules --enable-full-bootstrap --set=target.mips64-unknown-linux-muslabi64sf.musl-root=/home/grommish/openwrt/staging_dir/toolchain-mips64_octeon3_64_gcc-10.2.0_musl\nconfigure: processing command line\nconfigure:\nconfigure: build.build          := x86_64-unknown-linux-gnu\nconfigure: build.host           := [&#39;x86_64-unknown-linux-gnu&#39;]\nconfigure: build.target         := [&#39;mips64-unknown-linux-muslabi64sf&#39;]\nconfigure: install.prefix       := /home/grommish/openwrt/build_dir/hostpkg/.carg ...\nconfigure: install.bindir       := /home/grommish/openwrt/build_dir/hostpkg/.carg ...\nconfigure: install.libdir       := /home/grommish/openwrt/build_dir/hostpkg/.carg ...\nconfigure: install.sysconfdir   := /home/grommish/openwrt/build_dir/hostpkg/.carg ...\nconfigure: install.datadir      := /home/grommish/openwrt/build_dir/hostpkg/.carg ...\nconfigure: install.localstatedir := /var\nconfigure: install.mandir       := /home/grommish/openwrt/build_dir/hostpkg/.carg ...\nconfigure: install.infodir      := /home/grommish/openwrt/build_dir/hostpkg/.carg ...\nconfigure: rust.channel         := experimental\nconfigure: rust.debug           := True\nconfigure: build.docs           := False\nconfigure: build.compiler-docs  := False\nconfigure: rust.parallel-compiler := True\nconfigure: llvm.ccache          := True\nconfigure: llvm.link-shared     := True\nconfigure: llvm.ninja           := True\nconfigure: rust.codegen-backends := [&#39;llvm&#39;]\nconfigure: rust.lld             := True\nconfigure: rust.llvm-tools      := True\nconfigure: build.extended       := True\nconfigure: dist.missing-tools   := True\nconfigure: build.submodules     := True\nconfigure: build.full-bootstrap := True\nconfigure: target.mips64-unknown-linux-muslabi64sf.musl-root := /home/grommish/op ...\nconfigure: build.configure-args := [&#39;--build=x86_64-unknown-linux-gnu&#39;, &#39;--host=x ...\nconfigure:\nconfigure: writing `config.toml` in current directory\nconfigure:\nconfigure: run `python /home/grommish/openwrt/build_dir/hostpkg/rust-1.49.0/x.py --help`\nconfigure:\n</code></pre></div>",
        "id": 215368126,
        "sender_full_name": "Grommish",
        "timestamp": 1604345910
    },
    {
        "content": "<p>Update: </p>\n<p>I've tried it with both <code>x.py dist library/std src/librustc</code>, <code>x.py dist</code> and even just <code>x.py install</code>. </p>\n<p>Dist gives me:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo-1.49.0-dev-x86_64-unknown-linux-gnu.tar.gz                rust-analyzer-1.49.0-dev-x86_64-unknown-linux-gnu.tar.gz\ncargo-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz                rust-analyzer-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz\nclippy-1.49.0-dev-x86_64-unknown-linux-gnu.tar.gz               rustc-1.49.0-dev-x86_64-unknown-linux-gnu.tar.gz\nclippy-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz               rustc-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz\nmiri-1.49.0-dev-x86_64-unknown-linux-gnu.tar.gz                 rust-src-1.49.0-dev.tar.gz\nmiri-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz                 rust-src-1.49.0-dev.tar.xz\nrust-analysis-1.49.0-dev-mips64-unknown-linux-muslabi64.tar.gz  rust-std-1.49.0-dev-mips64-unknown-linux-muslabi64.tar.gz\nrust-analysis-1.49.0-dev-mips64-unknown-linux-muslabi64.tar.xz  rust-std-1.49.0-dev-mips64-unknown-linux-muslabi64.tar.xz\n</code></pre></div>\n<p>and I've run <code>./install.sh --prefix=/home/grommish/openwrt/build_dir/hostpkg/.cargo/ --verbose --disable-ldconfig</code> on the extracted contents of <code>rust-std-1.49.0-dev-mips64-unknown-linux-muslabi64.tar.gz</code></p>\n<p>I still have the issue of:</p>\n<div class=\"codehilite\"><pre><span></span><code> CARGO_HOME=/home/grommish/openwrt/build_dir/hostpkg/.cargo ac_cv_path_CARGO=&quot;/home/grommish/openwrt/build_dir/hostpkg/.cargo/bin/cargo&quot; ac_cv_path_RUSTC=&quot;/home/grommish/openwrt/build_dir/hostpkg/.cargo/bin/rustc&quot; RUSTFLAGS=&quot;-C linker=mips64-openwrt-linux-musl-gcc -C ar=mips64-openwrt-linux-musl-gcc-ar&quot; cargo install --force cbindgen --target mips64-unknown-linux-muslabi64\n    Updating crates.io index\n  Installing cbindgen v0.15.0\n   Compiling proc-macro2 v1.0.24\n   Compiling libc v0.2.80\n   Compiling syn v1.0.48\n   Compiling unicode-xid v0.2.1\n   Compiling getrandom v0.1.15\n   Compiling cfg-if v0.1.10\n   Compiling serde_derive v1.0.117\n   Compiling serde v1.0.117\n   Compiling ryu v1.0.5\n   Compiling ppv-lite86 v0.2.10\n   Compiling autocfg v1.0.1\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `libc`\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nerror[E0463]: can&#39;t find crate for `std`\n\nerror[E0463]: can&#39;t find crate for `core`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror[E0463]: can&#39;t find crate for `std`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: failed to compile `cbindgen v0.15.0`, intermediate artifacts can be found at `/tmp/cargo-install4mvm0Q`\n\nCaused by:\n  build failed\n</code></pre></div>\n<p>Any ideas?  This is the error the <code>x.py dist library/std src/librustc</code> was supposed to correct.</p>",
        "id": 215497141,
        "sender_full_name": "Grommish",
        "timestamp": 1604430169
    },
    {
        "content": "<p>Question.  I've decided to take this step by step and seeing where my issues are.</p>\n<p>I've compiled rustc/cargo for the host (<code>x86_64-unknown-linux-gnu</code>) with the following:<br>\n<code>x.py --config ./config.toml dist cargo extended library/std llvm-tools miri rust-dev rustc-dev src src/librustc src/lldb_batchmode.py src/tools/build-manifest</code></p>\n<p>I've then extracted all of the <code>build/dist</code> tarballs (<code>for file in *.xz; do tar -xvJf \"$file\"; done</code>) and then run <code>find ./* -type f -name install.sh -execdir sh {} --prefix=$(CARGO_HOME) \\;</code> to install all of the created items (see below)</p>\n<div class=\"codehilite\"><pre><span></span><code>build-manifest-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz  rust-analyzer-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz\ncargo-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz           rustc-1.49.0-dev-src.tar.xz\nclippy-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz          rustc-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz\nllvm-tools-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz      rustc-dev-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz\nmiri-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz            rust-dev-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz\nrust-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz            rust-src-1.49.0-dev.tar.xz\nrust-analysis-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz   rust-std-1.49.0-dev-x86_64-unknown-linux-gnu.tar.xz\n</code></pre></div>\n<p>So, the host has a ready to go compiled-from-source.</p>\n<p>What do I need to do so that I can run rustc/cargo with a <code>--target mips64-unknown-linux-muslabl64</code> flag?</p>",
        "id": 215987165,
        "sender_full_name": "Grommish",
        "timestamp": 1604806725
    },
    {
        "content": "<p>do you have the target installed?</p>",
        "id": 215987297,
        "sender_full_name": "oliver",
        "timestamp": 1604807024
    },
    {
        "content": "<p><code>rustup target add mips64-unknown-linux-muslabi64</code>?</p>",
        "id": 215987351,
        "sender_full_name": "oliver",
        "timestamp": 1604807107
    },
    {
        "content": "<p>I am not using <code>rustup</code>.  I cannot use rustup in this situation.  I also will need to use a custom defined triple (<code>mips64-unknown-linux-muslabi64sf</code>) which I've already patched the source for.</p>\n<p>The host is the x86_64, the target is mips64.</p>",
        "id": 215987401,
        "sender_full_name": "Grommish",
        "timestamp": 1604807174
    },
    {
        "content": "<p>oof well tbh I tl;dr'd that one <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 215987409,
        "sender_full_name": "oliver",
        "timestamp": 1604807240
    },
    {
        "content": "<p>Understandable..  If you get bored you can scope the whole thing.. You might have insight<br>\nThanks for trying :)</p>",
        "id": 215987451,
        "sender_full_name": "Grommish",
        "timestamp": 1604807287
    },
    {
        "content": "<p>Ok!  Positive Update time!</p>\n<p>I believe I've figured it out.  The issue I was having is that the default values in the config.toml were technically correct, but were not being used?  Probably because of how I was having to define everything (via ./configure flags).  I found that, by setting them, it made things like.. work..  Go figure :)</p>\n<div class=\"codehilite\"><pre><span></span><code>  --set=target.$(RUSTC_TARGET_ARCH).linker=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cc=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cxx=$(TARGET_CXX_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).ar=$(TARGET_AR) \\\n  --set=target.$(RUSTC_TARGET_ARCH).ranlib=$(TARGET_RANLIB) \\\n  --set=target.$(RUSTC_TARGET_ARCH).crt-static=false\n</code></pre></div>\n<p>I believe I'm about there.. Now.. Question.. Is there a way to compile std AND host for a given triple?  Example, <code>mips64-unknown-linux-muslabi64</code> has <code>std</code> but not <code>host</code>.  Is there a way to compile for it since I'm generating a cross-compile environment that seems to be working now?</p>",
        "id": 216173728,
        "sender_full_name": "Grommish",
        "timestamp": 1604986043
    },
    {
        "content": "<p>It works!  I got it working..  I now have a mips64 soft-float, dynamically linked std and the proper host triple.. it cross compiles my suricata6 with the proper soft-float and linking!  thank you all!  And now, rustc/cargo can be integrated into openwrt</p>",
        "id": 216294345,
        "sender_full_name": "Grommish",
        "timestamp": 1605054962
    },
    {
        "content": "<p>So, is there a way for me to create a mips64_muslabi64 suite of rustc/cargo?  Or is this something for down the line once mips64_muslabi64 is more \"supported\"?  If I have to create the toolchain environment , if I can, creating the development tools to put on the target device would be the next step I suppose?</p>",
        "id": 216301417,
        "sender_full_name": "Grommish",
        "timestamp": 1605061785
    }
]