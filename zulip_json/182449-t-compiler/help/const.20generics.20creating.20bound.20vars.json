[
    {
        "content": "<p>I have been working on a pull request (<a href=\"https://github.com/rust-lang/rust/issues/83825\">#83825</a>) to remove <code>Binder::bind</code> and only use <code>Binder::dummy</code> to try to overcome some of the performance regressions from the binder bound variable refactor. The whole testsuite passes, except for one test involving const generics, and my reviewer (<span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span>) isn't familiar enough with const generics to know whether it's expected that the code is creating bound variables.</p>\n<p>The test that's failing is the <code>full</code> revision of <code>src/test/ui/const-generics/issues/issue-64494.rs</code>. I wrote up what I could figure out about what's going on here: <a href=\"https://github.com/rust-lang/rust/pull/83825#issuecomment-815423610\">https://github.com/rust-lang/rust/pull/83825#issuecomment-815423610</a>.</p>\n<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> do you know if it's expected that the code is creating bound variables?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> in case you want to follow along</p>",
        "id": 236382178,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619546530
    },
    {
        "content": "<p>This is the content of the test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// revisions: full min</span>\n<span class=\"cp\">#![cfg_attr(full, feature(const_generics))]</span><span class=\"w\"></span>\n<span class=\"cp\">#![cfg_attr(full, allow(incomplete_features))]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VAL</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Is</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">VAL</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">True</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">//[full]~^ ERROR constant expression depends on a generic parameter</span>\n<span class=\"c1\">//[min]~^^ ERROR generic parameters may not be used in const operations</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">Is</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">T</span>::<span class=\"n\">VAL</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>: <span class=\"nc\">True</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">//[full]~^ ERROR constant expression depends on a generic parameter</span>\n<span class=\"c1\">//[min]~^^ ERROR generic parameters may not be used in const operations</span>\n<span class=\"c1\">//[min]~| ERROR conflicting implementations of trait `MyTrait`</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236382249,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619546559
    },
    {
        "content": "<p>The test ICEs after my change, but if I remove either conflicting impl, the test passes!</p>",
        "id": 236382344,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619546596
    },
    {
        "content": "<p>The place that's ICEing is <a href=\"https://github.com/rust-lang/rust/blob/61efe217f48b22ab8984eb9891955d87e029d65c/compiler/rustc_ty_utils/src/instance.rs#L118\">this line</a> that I changed from <code>Binder::bind</code> to <code>Binder::dummy</code> (the link shows what it looks like after my change).</p>",
        "id": 236382500,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619546656
    },
    {
        "content": "<p>does this ICE happen while const evaluating one of the <code>Is&lt;expr&gt;</code> expressions?</p>",
        "id": 236411012,
        "sender_full_name": "lcnr",
        "timestamp": 1619558070
    },
    {
        "content": "<p>i would assume this to not use a bound var <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 236411170,
        "sender_full_name": "lcnr",
        "timestamp": 1619558109
    },
    {
        "content": "<p><code>T</code> should probably be a placeholder instead, though i can't say more without looking into this myself</p>",
        "id": 236411312,
        "sender_full_name": "lcnr",
        "timestamp": 1619558148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/const.20generics.20creating.20bound.20vars/near/236411012\">said</a>:</p>\n<blockquote>\n<p>does this ICE happen while const evaluating one of the <code>Is&lt;expr&gt;</code> expressions?</p>\n</blockquote>\n<p>I think maybe, because the ICE happens right after <code>resolve_associated_item(Foo::VAL)</code>.</p>",
        "id": 236417316,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619560892
    },
    {
        "content": "<p>Just to clarify: the ICE happens <em>because</em> there are anonymous bound regions that we don't keep track of</p>",
        "id": 236417522,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619560996
    },
    {
        "content": "<p>I was kind of wondering, why <em>is</em> it okay to get rid of <code>Binder::bind</code> given that its job is to track the bound variables?</p>",
        "id": 236418287,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619561463
    },
    {
        "content": "<p>Well, we really should only be using <code>bind_with_vars</code> (when we know what the bound vars are) and <code>dummy</code> (when there are no bound vars). We should <em>not</em> be in situations where there are bound vars but we don't know what they are</p>",
        "id": 236446114,
        "sender_full_name": "Jack Huey",
        "timestamp": 1619581938
    },
    {
        "content": "<p>Ok, thanks! I get it now.</p>",
        "id": 236741861,
        "sender_full_name": "Noah Lev",
        "timestamp": 1619728997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> are you currently pursuing this? <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> asked me if I could help out</p>",
        "id": 238228491,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620690249
    },
    {
        "content": "<p>more than happy to try to help with things</p>",
        "id": 238228506,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620690259
    },
    {
        "content": "<p>or even try to take over if you do not want to continue</p>",
        "id": 238228520,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1620690275
    },
    {
        "content": "<p>Thanks for the offer, help is appreciated!</p>",
        "id": 238397288,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620775678
    },
    {
        "content": "<p>The issue is just that I am unfamiliar with a lot of the type-checking code, and so I feel confused about why a bound variable is showing up.</p>",
        "id": 238397412,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620775760
    },
    {
        "content": "<p>So, if you could help me figure out why that's happening and what it should do instead, that would be helpful :)</p>",
        "id": 238397577,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620775857
    },
    {
        "content": "<p>Part of why I took this change on is that I was hoping to become more familiar with rustc's type checker and trait solver :)</p>",
        "id": 238397602,
        "sender_full_name": "Noah Lev",
        "timestamp": 1620775878
    },
    {
        "content": "<p>Yeah, this perhaps isn't the best issue for that lol</p>",
        "id": 238408850,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620784162
    },
    {
        "content": "<p>Honestly, there are two possible solutions here: 1) change something so that we <em>don't</em> have bound vars where we're ICEing (it's in an <code>Instance</code>, which AFAICT is a no-no anyways) 2) Specifically track the bound vars all the from the type checking or whatever that generates this</p>",
        "id": 238409000,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620784257
    },
    {
        "content": "<p>Either way requires us to essentially to followup that \"tree\" back up and find the originating code for the bound vars. Which is where I got stuck/ran out of time</p>",
        "id": 238409023,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620784294
    }
]