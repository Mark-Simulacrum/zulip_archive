[
    {
        "content": "<p>I want to change the edition of a <code>Span</code>. How can I do that? I see I can get a Span from a SpanData, but I don't know how to make a SpanData either.</p>",
        "id": 254260847,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632251281
    },
    {
        "content": "<p>looks like rustdoc does this for doctests by changing the global default (!!) which seems like overkill: <a href=\"https://github.com/rust-lang/rust/blob/840acd378a273dab6798352d3d6a087fa09e4806/src/librustdoc/doctest.rs#L534\">https://github.com/rust-lang/rust/blob/840acd378a273dab6798352d3d6a087fa09e4806/src/librustdoc/doctest.rs#L534</a></p>",
        "id": 254261326,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632251506
    },
    {
        "content": "<p>(and at this point in compilation I think I'd need to spawn a new thread to change the default which is <em>definitely</em> overkill)</p>",
        "id": 254261596,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632251622
    },
    {
        "content": "<p>What is the goal of changing the edition of an existing span?</p>",
        "id": 254287096,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632262871
    },
    {
        "content": "<p>edition is taken from ExpnData</p>",
        "id": 254298583,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632270696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> it doesn't necessarily have to be an existing span, changing a dummy span would work too. This is for <a href=\"https://github.com/rust-lang/rust/issues/89135\">https://github.com/rust-lang/rust/issues/89135</a>; right now the lint ignores <code>edition2018</code> in the code block attributes.</p>",
        "id": 254299405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632271390
    },
    {
        "content": "<p>Specifically <a href=\"https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src/librustdoc/passes/check_code_block_syntax.rs#L44\">https://github.com/rust-lang/rust/blob/d8d1d1059a7837551c0065fc060dcb806ad729ef/src/librustdoc/passes/check_code_block_syntax.rs#L44</a> always uses the default edition, which is not correct</p>",
        "id": 254299564,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632271550
    },
    {
        "content": "<p>Yeah, I started looking into that issue yesterday but got stuck trying to figure out how to create a dummy span with the correct edition.</p>",
        "id": 254306390,
        "sender_full_name": "Noah Lev",
        "timestamp": 1632277579
    },
    {
        "content": "<blockquote>\n<p>rustdoc does this for doctests by changing the global default (!!) which seems like overkill</p>\n</blockquote>\n<p>This seems like the right way to do it.<br>\nA block with a <code> ```rust,editionNNNN</code> annotation is basically a separate crate, so it's pretty logical to process it like one and create a new parse session for it.</p>",
        "id": 254451656,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632350845
    },
    {
        "content": "<p>But it may be a problem in practice if you are in context where another <code>SessionGlobals</code> is already created, that's true.</p>",
        "id": 254452121,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632351123
    },
    {
        "content": "<p>Perhaps it's possible to save, change and then restore the <code>SessionGlobals</code> though?<br>\nIt's a <code>scoped_thread_local!</code> after all, not a true global variable.</p>",
        "id": 254452540,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632351349
    },
    {
        "content": "<p>You only need to do it at most twice (whether you create a new thread or not), for two editions that are different from the current crate's one, because all blocks with the same edition can be batched.</p>",
        "id": 254452836,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632351497
    },
    {
        "content": "<hr>\n<p>Another approach is to take a span with the current edition and \"wrap it into a macro\" with a different edition using <code>fresh_expansion</code>.</p>",
        "id": 254453642,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632351875
    },
    {
        "content": "<p>But the <code>SessionGlobals</code> approach seems cleaner, because every doctest is indeed a small separate crate, and not a part of the current crate.</p>",
        "id": 254453877,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632351965
    },
    {
        "content": "<hr>\n<p>Also, looking at the larger picture, I would personally remove the <code>invalid_rust_codeblocks</code> lint entirely, it's not a rustdoc's job.<br>\nYou either don't run doctests, then contents of those blocks don't affect the doc generation in any way, or you run doctests, then you need them to compile and the light syntactic checking done by <code>invalid_rust_codeblocks</code> is not enough.</p>",
        "id": 254456958,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1632353914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> the lint is misnamed - rustdoc needs to lex these to do syntax highlighting. The warning is if syntax highlighting fails</p>",
        "id": 254457106,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632354027
    },
    {
        "content": "<p>See also the thread in <a class=\"stream\" data-stream-id=\"266220\" href=\"/#narrow/stream/266220-rustdoc\">#rustdoc</a></p>",
        "id": 254457126,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632354039
    },
    {
        "content": "<blockquote>\n<p>You only need to do it at most twice (whether you create a new thread or not), for two editions that are different from the current crate's one, because all blocks with the same edition can be batched.</p>\n</blockquote>\n<p>that would require quite a lot of redesign - maybe it's simpler to just use a lazy_static that spawns a thread or something? but that seems kind of cursed, <code>fresh_expansion</code> seems less hacky</p>",
        "id": 254942867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632673163
    },
    {
        "content": "<p>I'll come back to this when/if I work on doctest performance</p>",
        "id": 254942896,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632673198
    }
]