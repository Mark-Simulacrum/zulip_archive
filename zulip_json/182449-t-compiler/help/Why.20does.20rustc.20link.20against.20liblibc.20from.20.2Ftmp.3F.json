[
    {
        "content": "<p>I'm doing some testing related to things discussed in <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bdesign.20meeting.5D.202021-03-26.20musl.20linking.20compiler-team.23416</a> , and it seems when I build with <code>RUSTFLAGS=-Ctarget-feature=-crt-static</code>, <code>/bin/ld</code> gets called with <code>/tmp/rustcDwt41J/liblibc-a6df7fa84d406b53.rlib</code> instead of using the one under <code>.rustup/toolchains/nightly-x86_64-unknown-linux-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/liblibc-a6df7fa84d406b53.rlib</code>, which is what it uses for the default static linking for the musl target.</p>\n<p>Why does the build system create this temporary copy of the file? Does it clean it up in some way?</p>",
        "id": 232005281,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616780284
    },
    {
        "content": "<p>I think that <code>.rlib</code> is the result of rustc removing a <code>.a</code> archive that was bundled into the <code>.rlib</code> to prevent linking against it.</p>",
        "id": 232005448,
        "sender_full_name": "bjorn3",
        "timestamp": 1616780369
    },
    {
        "content": "<p>So the only libc it links into the final binary would be the one picked by <code>-lc</code> in the command line? That makes sense.</p>",
        "id": 232005609,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616780435
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/b8719c51e0e44483cff9b6975a830f6e51812a48/compiler/rustc_codegen_ssa/src/back/link.rs#L424-L428\">https://github.com/rust-lang/rust/blob/b8719c51e0e44483cff9b6975a830f6e51812a48/compiler/rustc_codegen_ssa/src/back/link.rs#L424-L428</a></p>",
        "id": 232005996,
        "sender_full_name": "bjorn3",
        "timestamp": 1616780602
    },
    {
        "content": "<p><code>liblibc-*.rlib</code> can still bundle the libc within it, if it itself was built with <code>+crt-static</code>.</p>",
        "id": 232006492,
        "sender_full_name": "nagisa",
        "timestamp": 1616780829
    },
    {
        "content": "<p>The <code>liblibc.rlib</code> file from under <code>~/.rustup/toolchain</code> does contain a copy of <code>libc.a</code>, from what I saw with <code>ar t</code>, but I'm not sure what happens with the one that gets copied to <code>/tmp</code>, and which ends up linked into the final binary.</p>\n<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> does that piece of code mean that both <code>libc.a</code> bundled inside <code>liblibc.rlib</code> and arbitrary libraries removed with the <code>cfg</code> option are skipped?</p>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> it was probably built with that, since it's from rustup, not my native toolchain.</p>\n<p>Can I inspect the file under <code>/tmp</code> in some way?</p>",
        "id": 232007162,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616781126
    },
    {
        "content": "<p>It will remove all bundled libraries inside <code>liblibc.rlib</code> currently.</p>",
        "id": 232007452,
        "sender_full_name": "bjorn3",
        "timestamp": 1616781261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Why.20does.20rustc.20link.20against.20liblibc.20from.20.2Ftmp.3F/near/232007452\">said</a>:</p>\n<blockquote>\n<p>It will remove all bundled libraries inside <code>liblibc.rlib</code> currently.</p>\n</blockquote>\n<p>That sounds reasonable and like the correct behavior.</p>\n<p>Thanks!</p>",
        "id": 232008604,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616781765
    },
    {
        "content": "<p>As the comment indicated the correct behavior is actually to only remove the bundled archives that used something like <code>#[link(name = \"c\", kind = \"static\", cfg(target_feature = \"crt-static\")]</code> instead of all bundled archives, but because the <code>libc</code> crate only bundles a single archive, this is not a big deal.</p>",
        "id": 232009161,
        "sender_full_name": "bjorn3",
        "timestamp": 1616781984
    },
    {
        "content": "<p><code>-Csave-temps</code> I think would let you to retain all of the temporary artifacts.</p>",
        "id": 232018229,
        "sender_full_name": "nagisa",
        "timestamp": 1616786265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Why.20does.20rustc.20link.20against.20liblibc.20from.20.2Ftmp.3F/near/232018229\">said</a>:</p>\n<blockquote>\n<p><code>-Csave-temps</code> I think would let you to retain all of the temporary artifacts.</p>\n</blockquote>\n<p>indeed it does, thanks :)</p>\n<p>The only object inside the temporary <code>liblibc.rlib</code> file is <code>libc-a6df7fa84d406b53.libc.72i9sbci-cgu.0.rcgu.o</code> :D</p>",
        "id": 232027735,
        "sender_full_name": "Érico Nogueira Rolim",
        "timestamp": 1616790728
    }
]