[
    {
        "content": "<p>I have defined a closure earlier and later get an error when calling it, because I have not declared it as mutable. When compiling such code, in the function <code>report_mutability_error</code> in <code>rustc_mir::borrow_check::diagnostics::mutability_errors</code>, the error occurs when calling the closure, and not the definition of the closure, so I only have a <code>Place</code> or <code>Location</code> of the call. How do I refer to the <code>Span</code> of the definition from a <code>Place</code>or <code>Location</code>?</p>",
        "id": 223027848,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610865447
    },
    {
        "content": "<p>I've made some progress, I think. <code>self.body.local_decls</code> has the definition of locals. I'm not sure which index I should use for the definition.</p>",
        "id": 223029820,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610868950
    },
    {
        "content": "<p>I have a PR up to fix such an issue</p>",
        "id": 223030039,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610869295
    },
    {
        "content": "<p>Is the issue <a href=\"https://github.com/rust-lang/rust/issues/80313\">https://github.com/rust-lang/rust/issues/80313</a> ?</p>",
        "id": 223030097,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610869342
    },
    {
        "content": "<p>Oh I misunderstood the issue, sorry</p>",
        "id": 223030117,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610869412
    },
    {
        "content": "<p><del>So within the context of a closure the closure itself is refered to use Local::new(1)</del></p>",
        "id": 223030250,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610869583
    },
    {
        "content": "<p><del>Well, the desugared closure struct is referred to as Local::new(1)</del></p>",
        "id": 223030260,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610869630
    },
    {
        "content": "<p>Okay I think I understand</p>",
        "id": 223030377,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610869819
    },
    {
        "content": "<p>Does <code>self.body.source_info(location).span</code> do what you are looking for?</p>",
        "id": 223030500,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610870119
    },
    {
        "content": "<p>I think that is the span of the call, not the definition, unfortunately.</p>",
        "id": 223030800,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610870624
    },
    {
        "content": "<p>I think from a <code>Local</code> you can use the <code>local_decls</code> to get the <code>LocalDecl</code> and then <code>decl.source_info.span</code>?</p>",
        "id": 223046938,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1610895985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span>  Yes, but how do I obtain the <code>Local</code>of the definition, not the call?</p>",
        "id": 223047909,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610897466
    },
    {
        "content": "<p>Actually, with mutation, \"the\" definition doesn't really make sense, as there could be multiple locations a variable is set.</p>",
        "id": 223049538,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610899305
    },
    {
        "content": "<p>How would that work for closures from other crates? In that case the HIR is not available and the MIR likely isn't either.</p>",
        "id": 223049594,
        "sender_full_name": "bjorn3",
        "timestamp": 1610899342
    },
    {
        "content": "<p>I don't understand what you mean by from other crates. In my example <a href=\"https://github.com/rust-lang/rust/issues/80313\">https://github.com/rust-lang/rust/issues/80313</a> , the closure is a local variable.</p>",
        "id": 223049759,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610899522
    },
    {
        "content": "<p>Never mind, got confused.</p>",
        "id": 223049778,
        "sender_full_name": "bjorn3",
        "timestamp": 1610899549
    },
    {
        "content": "<p>I suppose if you passed the closure in as a parameter, then the parameter would have to be explicitly declared <code>FnMut</code>, which would give an appropriate error, while in my case, the closure is inferred as a <code>FnMut</code>, which can't be called when bound immutably, and that the problem only arises when calling it, not defining it, so I somehow need to recover the locations where it could be defined.</p>",
        "id": 223050336,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610900211
    },
    {
        "content": "<p>Actually, since different closures have different types, there should only be one possible location where a variable with a closure can be defined, unless you do some shenanigans with <code>Box</code>or trait objects, but I think those require type annotations with <code>FnMut</code>, so they shouldn't be a problem</p>",
        "id": 223051066,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1610901025
    },
    {
        "content": "<p>I'm not sure what your approach to this problem is, but what I'd suggest you can try to see if the type of Place <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs#L225-L244\">here</a> is a closure. </p>\n<p>And get the DefId of the closure/generator. </p>\n<p>This would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Place</span>::<span class=\"n\">ty_from</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proj_base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">).</span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">ty</span>::<span class=\"n\">Closure</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then once you have the def_id you can go through the list of captured places for the closure and see if a place is captured by a MutableBorrow, so something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">mut_borrow_iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">typeck</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">closure_min_captures_flattened</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">captured_place</span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"n\">captured_place</span><span class=\"p\">.</span><span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">capture_kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">UpvarBorrow</span>::<span class=\"n\">MutableBorrow</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>You can then access the span for this captured_place using <code>tcx.hir().span(captured_place.info.expr_id)</code></p>",
        "id": 223055660,
        "sender_full_name": "Aman Arora",
        "timestamp": 1610907285
    }
]