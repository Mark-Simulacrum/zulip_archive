[
    {
        "content": "<p>It's probably a random question: why are we using a separate <code>x.py</code> for build of rustc, instead of using cargo? I can see many disadvantages of <code>x.py</code> liking rebuilding after certain actions. I am just wondering what's the motivation behind.</p>",
        "id": 204676254,
        "sender_full_name": "Jason Hu",
        "timestamp": 1595429569
    },
    {
        "content": "<p>cargo is insufficiently powerful currently for staged builds and such</p>",
        "id": 204676464,
        "sender_full_name": "simulacrum",
        "timestamp": 1595429648
    },
    {
        "content": "<p>we're slowly moving towards more cargo and less custom tooling atop it, though</p>",
        "id": 204676499,
        "sender_full_name": "simulacrum",
        "timestamp": 1595429663
    },
    {
        "content": "<p>It is documented somewhat at <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#bootstrapping-the-compiler\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#bootstrapping-the-compiler</a></p>",
        "id": 204676551,
        "sender_full_name": "lzutao",
        "timestamp": 1595429683
    },
    {
        "content": "<blockquote>\n<p>liking rebuilding after certain actions</p>\n</blockquote>\n<p>Give rebuilding LLVM 2-3 times a shot to compare the alternative ;-)</p>",
        "id": 204677201,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595429939
    },
    {
        "content": "<blockquote>\n<p>we're slowly moving towards more cargo and less custom tooling atop it, though</p>\n</blockquote>\n<p>Isn't<code>cargo make</code> powerful enough for this already? I know it's not part of official Cargo, but it's not out of the question that someday we might integrate <code>cargo make</code> functionality into <code>cargo build</code> or something like that, to make things vastly simpler for projects with FFI or which otherwise depend on <code>cargo make</code> running to get a full functional build.</p>",
        "id": 204677773,
        "sender_full_name": "Goat",
        "timestamp": 1595430213
    },
    {
        "content": "<p>I think we could plausibly switch to cargo subcommands but it'd be a big migration and not really worth it IMO</p>",
        "id": 204678946,
        "sender_full_name": "simulacrum",
        "timestamp": 1595430718
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>alias cargo-bootstrap x.py\n</code></pre></div>",
        "id": 204679039,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595430750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cargo.20for.20rustc/near/204679039\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>alias cargo-bootstrap x.py\n</code></pre></div>\n\n\n</blockquote>\n<p>in case anyone does want to use that - <code>alias cargo-bootstrap='cd $(git rev-parse --show-toplevel) &amp;&amp; ./x.py'</code> should work even if you're not in the top-level directory</p>",
        "id": 204679370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595430886
    },
    {
        "content": "<p>it won't work with <code>cargo bootstrap</code> though because it's an alias, you'll have to put it in <code>~/bin/cargo-bootstrap</code> or something for that to work</p>",
        "id": 204679431,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595430913
    },
    {
        "content": "<p>Is the staged bootstrapping that can't be done with Cargo still complex enough that it needs Python, or could it theoretically be done with a shell script?</p>",
        "id": 204835845,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595529133
    },
    {
        "content": "<p>It would be nice to reduce the set of tools required to bootstrap Rust.</p>",
        "id": 204835866,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595529145
    },
    {
        "content": "<p>Especially since Rust will become part of more and more bootstrap cycles in other parts of a normal system.</p>",
        "id": 204835923,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595529181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> bootstrap is written in both python and rust. I'm not sure how complicated the pure python bit is, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> would know better, but here's how big it is:</p>\n<div class=\"codehilite\"><pre><span></span><code>(-bash@build-server) ~/.../src/bootstrap $ wc -l *.py\n 1026 bootstrap.py\n  107 bootstrap_test.py\n  474 configure.py\n 1607 total\n</code></pre></div>",
        "id": 204841754,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595531740
    },
    {
        "content": "<p>but it also requires a bunch of host tools as well: <a href=\"https://rustc-dev-guide.rust-lang.org/building/prerequisites.html#dependencies\">https://rustc-dev-guide.rust-lang.org/building/prerequisites.html#dependencies</a></p>",
        "id": 204841842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595531769
    },
    {
        "content": "<p>and it has a bunch of undocumented dependencies, like <code>uname</code></p>",
        "id": 204841977,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595531843
    },
    {
        "content": "<p>I think it parses config.toml, which I would hate to have to do in shell</p>",
        "id": 204842189,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595531951
    },
    {
        "content": "<p>python is basically \"I don't have rust installed and need <em>something</em> to download it for me</p>",
        "id": 204843594,
        "sender_full_name": "simulacrum",
        "timestamp": 1595532685
    },
    {
        "content": "<p>In many cases, I wouldn't want anything downloading binaries by default anyway. :)</p>",
        "id": 204860457,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595543153
    },
    {
        "content": "<p>Are there any bits of configuration that need to be parsed by something that runs before the rust bootstrap gets compiled?</p>",
        "id": 204860526,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595543191
    },
    {
        "content": "<p>Hm, so I want to say mostly no -- or at least it wouldn't be mandatory to do so</p>",
        "id": 204860722,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543373
    },
    {
        "content": "<p>you could definitely run the bootstrap manually if you had a rust compiler around to build it with</p>",
        "id": 204860737,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543388
    },
    {
        "content": "<p>there's a bunch of bits it expects the python script to extract for it and pass in, but there's no reason that python couldn't be bypassed</p>",
        "id": 204860800,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543423
    },
    {
        "content": "<p>That said, the situation in which you <em>do</em> have a Rust compiler but don't have python seems unlikely?</p>",
        "id": 204860822,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543443
    },
    {
        "content": "<p>Bootstrapping Rust without the rust build system is not possible, though</p>",
        "id": 204860851,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543471
    },
    {
        "content": "<p>To be clear, our current setup is:</p>\n<ol>\n<li>Run x.py / bootstrap.py -- this detects the current architecture, (optionally) downloads a toolchain, and builds the rust portion of the build system with that toolchain</li>\n<li>Run the rust build system, this is pretty complex today, I wouldn't want to replace it with anything else</li>\n<li>Rust build system (rustbuild) invokes cargo a bunch of times</li>\n</ol>",
        "id": 204860958,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543568
    },
    {
        "content": "<p>I guess gcc and clang either use cmake or makefiles directly instead of having something like rustbuild</p>",
        "id": 204860999,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543607
    },
    {
        "content": "<p>but given that they need a c compiler <em>anyway</em> I'm not sure that's very helpful</p>",
        "id": 204861018,
        "sender_full_name": "simulacrum",
        "timestamp": 1595543621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cargo.20for.20rustc/near/204860737\">said</a>:</p>\n<blockquote>\n<p>you could definitely run the bootstrap manually if you had a rust compiler around to build it with</p>\n</blockquote>\n<p>I mean, maybe in the abstract sense it's possible, but I don't think you could do it and still have all the options in config.toml work: <a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/bootstrap.py#L707\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/bootstrap.py#L707</a></p>",
        "id": 204861488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595544007
    },
    {
        "content": "<p>I guess that's sort of true? But seems not too interesting</p>",
        "id": 204862420,
        "sender_full_name": "simulacrum",
        "timestamp": 1595544825
    },
    {
        "content": "<p>like, if you're running <code>cargo build</code> yourself \"of course\" you'll need to specify options to it yourself</p>",
        "id": 204862488,
        "sender_full_name": "simulacrum",
        "timestamp": 1595544847
    },
    {
        "content": "<p>that said, I would love to get cargo to natively support a bunch of the options we currently need to feed to it from config.toml</p>",
        "id": 204862556,
        "sender_full_name": "simulacrum",
        "timestamp": 1595544910
    },
    {
        "content": "<p>things like switching debuginfo on/off and such for subsets of packages via configuration that's not Cargo.toml would be great</p>",
        "id": 204862576,
        "sender_full_name": "simulacrum",
        "timestamp": 1595544927
    },
    {
        "content": "<p>(Probably solveable today with \"just\" support for something like <code>include = \"./config.toml\"</code> which acts optionally)</p>",
        "id": 204862603,
        "sender_full_name": "simulacrum",
        "timestamp": 1595544948
    },
    {
        "content": "<p>I've meant to talk to Cargo team about this for a while now but haven't found the time</p>",
        "id": 204862655,
        "sender_full_name": "simulacrum",
        "timestamp": 1595544962
    },
    {
        "content": "<p>I don't think that really moves the needle in terms of whether you can build the compiler with just cargo or not, because all of those flags are optional</p>",
        "id": 204862726,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I would generally be interested in hearing more about the concrete constraints we're dealing with -- or documentation on those -- and would be happy to chat about how we can move Rust's build system closer to those.</p>",
        "id": 204862907,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> In general, distributions want to build each version of Rust packages with the previous packaged version of Rust, and not touch the network.</p>",
        "id": 204863073,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595545258
    },
    {
        "content": "<p>If that's the only requirement I think we meet support for that fully today.</p>",
        "id": 204863114,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545284
    },
    {
        "content": "<p>The Python requirement isn't a huge problem today, but as more people use Rust in more places, it might be nice to reduce the bootstrapping requirements.</p>",
        "id": 204863140,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595545303
    },
    {
        "content": "<p>And yeah, I'd be happy to see Cargo provide more of the needed functionality as well.</p>",
        "id": 204863253,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595545369
    },
    {
        "content": "<p>Hm, interesting. I think removing Python is mostly a problem of \"defaults\" so to speak -- as I mentioned, you can basically do everything it does yourself without all that much trouble</p>",
        "id": 204863284,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545398
    },
    {
        "content": "<p>in some sense <code>cargo run --manifest-path src/bootstrap/Cargo.toml --bin bootstrap -- build --stage 1 src/libstd</code> would mostly work today, with some env variables set and so forth</p>",
        "id": 204863326,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545434
    },
    {
        "content": "<p>and we could likely get that to \"just work\"</p>",
        "id": 204863378,
        "sender_full_name": "simulacrum",
        "timestamp": 1595545443
    },
    {
        "content": "<p>Run <code>strace</code> on <code>x.py</code>, capture all the command invocations and environment variables it does, then move that to whatever build environment <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204863801,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595545778
    },
    {
        "content": "<p>Python is actually a bit more of an obstacle for building than I think is being stated, lots of people have trouble when interacting with their Python configurations, even on Unix systems which usually don't give Python that much grief, and it introduces a knowledge dependency for contributors.</p>",
        "id": 209247055,
        "sender_full_name": "Jubilee",
        "timestamp": 1599436112
    }
]