[
    {
        "content": "<p>Hello everyone! I'm working on cleaning up <code>visit_projection</code> and some of its associated functions in the MIR. I've been debugging for a while but don't really know how to solve these <code>mismatched types</code> errors <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. I'm not really sure why they are happening or how to fix them. Any help would be appreciated! (The code is on <a href=\"https://github.com/rust-lang/rust/issues/82091\">#82091</a>, errors are <a href=\"https://github.com/rust-lang/rust/pull/82091#issuecomment-779183372\">here</a>)</p>",
        "id": 226381017,
        "sender_full_name": "Henry Boisdequin",
        "timestamp": 1613394168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383558\">@Henry Boisdequin</span> the error is buried in the macro expansion:</p>\n<div class=\"codehilite\"><pre><span></span><code>383  | |                             &amp;mut place.as_ref(),\n     | |                             ^^^^^^^^^^^^^^^^^^^ expected struct `mir::PlaceRef`, found `&amp;mir::Place&lt;&#39;_&gt;`\n\n390  | |                             &amp;mut place.as_ref(),\n     | |                             ^^^^^^^^^^^^^^^^^^^ expected struct `mir::PlaceRef`, found `&amp;mir::Place&lt;&#39;_&gt;`\n</code></pre></div>\n<p>I don't know this code well enough to help, but does that give you enough info to get started?</p>",
        "id": 226389094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613398575
    },
    {
        "content": "<p>I don't really know why that's happening though as I turn the <code>Place</code> into a <code>PlaceRef</code> by calling <code>.as_ref()</code></p>",
        "id": 226390649,
        "sender_full_name": "Henry Boisdequin",
        "timestamp": 1613399499
    },
    {
        "content": "<p>hmm, do you have the <code>AsRef</code> trait in scope maybe?</p>",
        "id": 226393050,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613400843
    },
    {
        "content": "<p>although I would expect the inherent method to take precedence <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 226393093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613400852
    },
    {
        "content": "<p>Errors aside, as far as I can see, it won't be possible to replace &amp;mut Place with &amp;mut PlaceRef in mutable visitor, since it takes away the ability to actually change the place (the modified PlaceRef is merely a temporary).</p>",
        "id": 226400008,
        "sender_full_name": "tm",
        "timestamp": 1613404480
    },
    {
        "content": "<p>I would probably keep <code>visit_place</code> and <code>super_place</code> as is, and change <code>visit_projection</code> which is used by non-mut visitor only.</p>",
        "id": 226402302,
        "sender_full_name": "tm",
        "timestamp": 1613405203
    },
    {
        "content": "<p>Ok thanks <span class=\"user-mention\" data-user-id=\"352985\">@tm</span></p>",
        "id": 226461129,
        "sender_full_name": "Henry Boisdequin",
        "timestamp": 1613438029
    },
    {
        "content": "<p>Yeah, changing <code>visit_place</code> and <code>super_place</code> would mean changing and refactoring a lot more enums and structs to take a <code>PlaceRef</code> instead of a <code>Place</code></p>",
        "id": 226461188,
        "sender_full_name": "Henry Boisdequin",
        "timestamp": 1613438083
    }
]