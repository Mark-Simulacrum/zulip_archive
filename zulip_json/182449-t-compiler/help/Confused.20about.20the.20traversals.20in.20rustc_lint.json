[
    {
        "content": "<p>I don't understand how these traversals work. For example, in <a href=\"https://github.com/rust-lang/rust/blob/78e22069d018e83915201c8a218a0a94227f6420/compiler/rustc_lint/src/unused.rs#L100-L102\">https://github.com/rust-lang/rust/blob/78e22069d018e83915201c8a218a0a94227f6420/compiler/rustc_lint/src/unused.rs#L100-L102</a> we don't visit the expression of a \"return\". How is the expression visited in this case? In my testing I can see that it is visited, but I can't figure out how.</p>",
        "id": 224163067,
        "sender_full_name": "osa1",
        "timestamp": 1611743572
    },
    {
        "content": "<p>By visited, you mean that <code>f()</code> call will be linted in<code>return { f(); ... }</code>?</p>",
        "id": 224164990,
        "sender_full_name": "tm",
        "timestamp": 1611744863
    },
    {
        "content": "<p>Yes. Or more generally <code>&lt;e&gt;</code> in <code>return &lt;e&gt;</code>.</p>",
        "id": 224165104,
        "sender_full_name": "osa1",
        "timestamp": 1611744942
    },
    {
        "content": "<p>There are a lot of similar tricky code in this traversal too. This is just one example. Interestingly it seems to visit all expressions somehow, even with all these early returns.</p>",
        "id": 224165182,
        "sender_full_name": "osa1",
        "timestamp": 1611744974
    },
    {
        "content": "<p>That would be because lint itself isn't responsible for traversal. see code in <code>rustc_lint/src/late.rs</code> which invokes check methods.</p>",
        "id": 224165196,
        "sender_full_name": "tm",
        "timestamp": 1611744988
    },
    {
        "content": "<p>Oh!</p>",
        "id": 224165208,
        "sender_full_name": "osa1",
        "timestamp": 1611744998
    },
    {
        "content": "<p>OK that makes sense. Thanks.</p>",
        "id": 224165618,
        "sender_full_name": "osa1",
        "timestamp": 1611745214
    },
    {
        "content": "<p>If I understand this code correctly, I can't skip some nodes in my lint implementation because I have no control over the visitor, right? For example I can't skip some nodes. Let's say I do some checks when I see nested binops like <code>e1 &lt;op&gt; (e2 &lt;op&gt; e3)</code> and in some cases I want to avoid visiting <code>e1</code> because if I do that it'll give a false positive.</p>",
        "id": 224167178,
        "sender_full_name": "osa1",
        "timestamp": 1611746182
    }
]