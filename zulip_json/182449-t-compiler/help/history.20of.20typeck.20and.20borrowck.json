[
    {
        "content": "<p>When ast-borrowck was implemented (in 2012), there was no hir. Once hir was added, did ast-borrowck move to make use of it? Where does typeck fit in... am I right in assuming typeck has to happen before borrowck, and if so, did it also move from using ast to using hir?</p>",
        "id": 192763007,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585895901
    },
    {
        "content": "<p>typeck moved to hir. i don't know how it was before, but after the move typeck stores inferred types in a side table, as hir is immutable. typeck indeed has to happen before borrowck as typeck may add implicit dereferences and references. eg <code>a.foo()</code> where <code>foo</code> takes <code>&amp;self</code> results in <code>(&amp;a).foo()</code>. borrowck has to know about this.</p>",
        "id": 192773588,
        "sender_full_name": "bjorn3",
        "timestamp": 1585903797
    },
    {
        "content": "<p>borrowck requires the inferred types, so yeah</p>",
        "id": 192777811,
        "sender_full_name": "eddyb",
        "timestamp": 1585905946
    },
    {
        "content": "<p>when the AST/HIR split was introduced, nothing moved, it's just that post-expansion AST became HIR, roughly</p>",
        "id": 192777891,
        "sender_full_name": "eddyb",
        "timestamp": 1585905974
    },
    {
        "content": "<p>so everything that worked after macros have been expanded and name resolution happened, were now using HIR</p>",
        "id": 192777956,
        "sender_full_name": "eddyb",
        "timestamp": 1585906012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> if typeck used ast, then hir gets introduced, how does it automatically get to use hir (without changing)</p>",
        "id": 192780613,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585907507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119529\">@Tshepang Lekhonkhobe</span> it's just a plain rename at first</p>",
        "id": 192780677,
        "sender_full_name": "eddyb",
        "timestamp": 1585907529
    },
    {
        "content": "<p>like, some parts kept using the <code>ast</code> name, the others used <code>hir</code> instead of <code>ast</code></p>",
        "id": 192780763,
        "sender_full_name": "eddyb",
        "timestamp": 1585907578
    },
    {
        "content": "<p>but there wasn't anything deeper than a duplication/rename</p>",
        "id": 192780926,
        "sender_full_name": "eddyb",
        "timestamp": 1585907677
    },
    {
        "content": "<p>typeck didn't change how it worked or when it ran</p>",
        "id": 192780941,
        "sender_full_name": "eddyb",
        "timestamp": 1585907686
    },
    {
        "content": "<p>so, if ast-borrowck was named hir-borrowck, my confusion would not exist</p>",
        "id": 192780963,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585907697
    },
    {
        "content": "<p>that's because HIR (the rustc IR) is an AST (the concept)</p>",
        "id": 192781041,
        "sender_full_name": "eddyb",
        "timestamp": 1585907726
    },
    {
        "content": "<p>like both <code>rustc_ast</code> and <code>rustc_hir</code> are ASTs</p>",
        "id": 192781054,
        "sender_full_name": "eddyb",
        "timestamp": 1585907735
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 192781071,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585907748
    },
    {
        "content": "<p>that's where the name <code>ast_borrowck</code> arises</p>",
        "id": 192781089,
        "sender_full_name": "eddyb",
        "timestamp": 1585907757
    },
    {
        "content": "<p>but yeah <code>hir_borrowck</code> would've been fine</p>",
        "id": 192781128,
        "sender_full_name": "eddyb",
        "timestamp": 1585907763
    },
    {
        "content": "<p>(the main reason for that name was to make it distinct from \"MIR borrowck\")</p>",
        "id": 192781179,
        "sender_full_name": "eddyb",
        "timestamp": 1585907782
    },
    {
        "content": "<p>so, in rust terms, mir is lot different to hir, than hir is different to ast</p>",
        "id": 192781273,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585907833
    },
    {
        "content": "<p>yupp</p>",
        "id": 192781287,
        "sender_full_name": "eddyb",
        "timestamp": 1585907841
    },
    {
        "content": "<p>AST -&gt; HIR is mostly a desugaring step</p>",
        "id": 192781301,
        "sender_full_name": "eddyb",
        "timestamp": 1585907856
    },
    {
        "content": "<p>mir is a (control flow) graph, while ast and hir are (abstract syntax) trees</p>",
        "id": 192781335,
        "sender_full_name": "bjorn3",
        "timestamp": 1585907876
    },
    {
        "content": "<p>HIR -&gt; MIR builds a control-flow graph, and requires type-checking results</p>",
        "id": 192781337,
        "sender_full_name": "eddyb",
        "timestamp": 1585907878
    },
    {
        "content": "<p>thanks very</p>",
        "id": 192782376,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585908391
    },
    {
        "content": "<p>Also: HAIR is another AST</p>",
        "id": 192793015,
        "sender_full_name": "centril",
        "timestamp": 1585915259
    },
    {
        "content": "<p>which is even more desugared and explicit than HIR, but also typed rather than using side-tables (eww)</p>",
        "id": 192793047,
        "sender_full_name": "centril",
        "timestamp": 1585915286
    },
    {
        "content": "<p>one of the items in my colleagues' TODO list is \"rename HAIR to THIR\" :P</p>",
        "id": 192793954,
        "sender_full_name": "eddyb",
        "timestamp": 1585915900
    },
    {
        "content": "<p>what does T mean <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 192796060,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585917142
    },
    {
        "content": "<p>typed</p>",
        "id": 192796149,
        "sender_full_name": "eddyb",
        "timestamp": 1585917188
    },
    {
        "content": "<p>the \"A\" in the current \"HAIR\" means \"abstract\", which is much less useful</p>",
        "id": 192796176,
        "sender_full_name": "eddyb",
        "timestamp": 1585917206
    },
    {
        "content": "<p>I thought the T meant <code>too</code> :)</p>",
        "id": 192796226,
        "sender_full_name": "bjorn3",
        "timestamp": 1585917237
    },
    {
        "content": "<p>As in <code>Too High-level Intermediate Representation</code>.</p>",
        "id": 192796303,
        "sender_full_name": "bjorn3",
        "timestamp": 1585917274
    },
    {
        "content": "<p><code>&gt;_&lt;</code></p>",
        "id": 192796322,
        "sender_full_name": "eddyb",
        "timestamp": 1585917289
    },
    {
        "content": "<p>is there a reason we have both hair and hir... do we need both, or can we get away with hir users be hair users</p>",
        "id": 192796350,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585917317
    },
    {
        "content": "<p>I believe hir is lazily converted to hair: <code>hair::ExprRef</code> for example refers to <code>hir::Expr</code>. Also hair is always typed, which means that you can't run typeck on it.</p>",
        "id": 192796503,
        "sender_full_name": "bjorn3",
        "timestamp": 1585917413
    },
    {
        "content": "<p>the difference is HAIR further desugars HIR based on typeck results</p>",
        "id": 192796577,
        "sender_full_name": "eddyb",
        "timestamp": 1585917463
    },
    {
        "content": "<p>it's only used to build MIR</p>",
        "id": 192796588,
        "sender_full_name": "eddyb",
        "timestamp": 1585917472
    },
    {
        "content": "<blockquote>\n<p>it's only used to build MIR</p>\n</blockquote>\n<p>And for exhaustiveness checking!</p>",
        "id": 192796695,
        "sender_full_name": "centril",
        "timestamp": 1585917521
    },
    {
        "content": "<p>right, HAIR patterns are also used in match checking</p>",
        "id": 192796771,
        "sender_full_name": "eddyb",
        "timestamp": 1585917573
    },
    {
        "content": "<p>wow, this rustc is complex</p>",
        "id": 192796776,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1585917577
    },
    {
        "content": "<p>I've always liked the name HAIR. I feel that it is a big missed pun opportunity.</p>",
        "id": 192866082,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585949268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span>  consider this renaming as a final hair cut.</p>",
        "id": 192866176,
        "sender_full_name": "centril",
        "timestamp": 1585949327
    }
]