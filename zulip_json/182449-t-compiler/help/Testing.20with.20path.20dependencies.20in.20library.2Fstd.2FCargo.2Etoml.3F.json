[
    {
        "content": "<p>I wanted to test building rustc with a local version of the libc crate. I added a <code>path = \"...\"</code> field to the dependency on <code>libc</code> in <code>library/std/Cargo.toml</code>. That resulted in this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;no entry found for key&#39;, src/bootstrap/lib.rs:1130:26\n</code></pre></div>",
        "id": 210638214,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554323
    },
    {
        "content": "<p>What's the Right Way to test rust-lang/rust with a local version of a crate?</p>",
        "id": 210638222,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554335
    },
    {
        "content": "<p>Currently testing with a patch entry in the top-level <code>Cargo.toml</code>.</p>",
        "id": 210638305,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> you want to [patch.crates-io] in Cargo.toml</p>",
        "id": 210638363,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554525
    },
    {
        "content": "<p>That does seem to have gotten a little further. Now it's failing for a different reason...</p>",
        "id": 210638374,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554548
    },
    {
        "content": "<p>If I specify a path dependency, that seems to result in warnings which become errors happening in that dep.</p>",
        "id": 210638387,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554588
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: the feature `cfg_target_vendor` has been stable since 1.33.0 and no longer requires an attribute to enable\n  --&gt; /home/josh/src/rust-libc/src/lib.rs:22:13\n   |\n22 |     feature(cfg_target_vendor, link_cfg, no_core)\n   |             ^^^^^^^^^^^^^^^^^\n   |\n   = note: `-D stable-features` implied by `-D warnings`\n</code></pre></div>",
        "id": 210638392,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554600
    },
    {
        "content": "<p>ah. for that, you can probably just deny-warnings = false in config.toml</p>",
        "id": 210638446,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554710
    },
    {
        "content": "<p>I don't think we have a good solution for avoiding that</p>",
        "id": 210638450,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554720
    },
    {
        "content": "<p>Is there a way to make <code>[patch]</code> not disable cap-lints?</p>",
        "id": 210638488,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554726
    },
    {
        "content": "<p>I don't think so; Cargo handles that entirely, though, so it's not a rustbuild problem and I'm less aware of it :)</p>",
        "id": 210638499,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554747
    },
    {
        "content": "<p>Well, I guess -- you can override to a non-local dep, e.g., a git dep I think would work too</p>",
        "id": 210638510,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554780
    },
    {
        "content": "<p>so maybe you can do <code>git:///home/josh/...</code>? I forget if that works -- I know you can ssh git like that</p>",
        "id": 210638523,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554815
    },
    {
        "content": "<p>I'll just disable deny-warnings, I guess.</p>",
        "id": 210638573,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554872
    },
    {
        "content": "<p>I also just confirmed that the <code>.cargo/config.toml</code> mechanism for path overrides didn't work either.</p>",
        "id": 210638581,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554893
    },
    {
        "content": "<p>(just didn't override the dependency at all)</p>",
        "id": 210638583,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554900
    },
    {
        "content": "<p>hm, isn't that the wrong file?</p>",
        "id": 210638597,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554925
    },
    {
        "content": "<p>I thought it was .cargo/config</p>",
        "id": 210638598,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554929
    },
    {
        "content": "<p>ah:</p>\n<blockquote>\n<p>Note: Cargo also reads config files without the .toml extension, such as .cargo/config. Support for the .toml extension was added in version 1.39 and is the preferred form. If both files exist, Cargo will use the file without the extension.</p>\n</blockquote>",
        "id": 210638607,
        "sender_full_name": "simulacrum",
        "timestamp": 1600554958
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/cargo/reference/config.html\">https://doc.rust-lang.org/cargo/reference/config.html</a></p>",
        "id": 210638608,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554960
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 210638609,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600554962
    },
    {
        "content": "<p>hm, I am surprised by the \"both files exist\" bit but I guess it's necessary for backwards-compat</p>",
        "id": 210638652,
        "sender_full_name": "simulacrum",
        "timestamp": 1600555004
    },
    {
        "content": "<p>Changing <code>deny-warnings</code> seems to have worked.</p>",
        "id": 210638659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600555018
    },
    {
        "content": "<p>IIRC we create the toml-less form during vendoring</p>",
        "id": 210638662,
        "sender_full_name": "simulacrum",
        "timestamp": 1600555020
    },
    {
        "content": "<p>If I use <code>rustup toolchain link src /home/josh/src/rust/build/x86_64-unknown-linux-gnu/stage1</code>, and then use <code>cargo +src build</code> to build a crate, that'll use that local rust build's std, too, right?</p>",
        "id": 210638960,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600555579
    },
    {
        "content": "<p>yep</p>",
        "id": 210669764,
        "sender_full_name": "simulacrum",
        "timestamp": 1600612854
    }
]