[
    {
        "content": "<p>I introduced a bug and I can't build std anymore. I think I can build core, but I'm not sure. I was thinking stage0 is built with the downloaded compiler and uses the downloaded compiler's core and std and has the bug I introduced, but it seems like I can't pass -Z flags to it, logging is disabled, and most importantly it doesn't support feature flags so I can't test the bug. Is there a way to enable these in stage0 compiler?</p>",
        "id": 226472677,
        "sender_full_name": "osa1",
        "timestamp": 1613452184
    },
    {
        "content": "<p>I checked <a href=\"https://rustc-dev-guide.rust-lang.org/compiler-debugging.html\">https://rustc-dev-guide.rust-lang.org/compiler-debugging.html</a> but it seems like this kind of scenario is not covered there.</p>",
        "id": 226472754,
        "sender_full_name": "osa1",
        "timestamp": 1613452258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> you can use <code>RUSTC_BOOTSTRAP=1</code> to test nightly features on beta</p>",
        "id": 226472786,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Awesome!! Thanks!</p>",
        "id": 226472836,
        "sender_full_name": "osa1",
        "timestamp": 1613452344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> any tips on enabling logging in stage0?</p>",
        "id": 226472848,
        "sender_full_name": "osa1",
        "timestamp": 1613452365
    },
    {
        "content": "<p>you can use RUSTC_LOG=info, but anything with more granularity is compiled out</p>",
        "id": 226472867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452381
    },
    {
        "content": "<blockquote>\n<p>I was thinking stage0 is built with the downloaded compiler and uses the downloaded compiler's core and std and has the bug I introduced, but it seems like I can't pass -Z flags to it, logging is disabled, and most importantly it doesn't support feature flags so I can't test the bug.</p>\n</blockquote>\n<p>This doesn't sound right. The stage0 compiler <em>is</em> the downloaded compiler. <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap</a></p>",
        "id": 226472902,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452422
    },
    {
        "content": "<p>Ah, OK. I think what I refer to is the \"bootstrap\" compiler, right?</p>",
        "id": 226472959,
        "sender_full_name": "osa1",
        "timestamp": 1613452464
    },
    {
        "content": "<p>Built with stage0 (downloaded compiler), uses stage0's core and std, and has the code generator bug I introduced.</p>",
        "id": 226472969,
        "sender_full_name": "osa1",
        "timestamp": 1613452484
    },
    {
        "content": "<p>Hm</p>",
        "id": 226472996,
        "sender_full_name": "osa1",
        "timestamp": 1613452530
    },
    {
        "content": "<p>I'm unsure what you mean. The bootstrap compiler (stage0 compiler) doesn't have your changes, so you can't have introduced a bug to it.</p>",
        "id": 226472999,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452533
    },
    {
        "content": "<p>I know, I understand now that stage0 is downloaded</p>",
        "id": 226473006,
        "sender_full_name": "osa1",
        "timestamp": 1613452547
    },
    {
        "content": "<p>I'm saying there should be a version of the compiler that is built with stage0 and uses stage0's libraries. What is that called and where can I find the path to it?</p>",
        "id": 226473062,
        "sender_full_name": "osa1",
        "timestamp": 1613452581
    },
    {
        "content": "<p>ah, that's the stage1 compiler. <code>build/$TARGET/stage1/bin/rustc</code></p>",
        "id": 226473072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452596
    },
    {
        "content": "<p>Because that's the earliest stage compiler with the bug I introduced</p>",
        "id": 226473074,
        "sender_full_name": "osa1",
        "timestamp": 1613452598
    },
    {
        "content": "<p>note that it does <em>not</em> use stage0's libraries, it uses the master version of libstd</p>",
        "id": 226473081,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452616
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#why-does-only-libstd-use-cfgbootstrap\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#why-does-only-libstd-use-cfgbootstrap</a></p>",
        "id": 226473090,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452646
    },
    {
        "content": "<p>Hmm.. I think I see the problem now. I can't use stage1 compiler because it needs to link the compiled programs with core and std that stage1 itself built. I need to tell it somehow to not link std and core, because I can't build them because of the bug.</p>",
        "id": 226473233,
        "sender_full_name": "osa1",
        "timestamp": 1613452808
    },
    {
        "content": "<p>you can work around it with <code>#[no_std]</code></p>",
        "id": 226473253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452828
    },
    {
        "content": "<p>if you can't build <code>core</code> you'll have trouble though</p>",
        "id": 226473258,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452835
    },
    {
        "content": "<p>Unfortunately I can't build core, yeah</p>",
        "id": 226473281,
        "sender_full_name": "osa1",
        "timestamp": 1613452870
    },
    {
        "content": "<p>Currently stage1 fails with \"error[E0463]: can't find crate for <code>core</code>\"</p>",
        "id": 226473294,
        "sender_full_name": "osa1",
        "timestamp": 1613452897
    },
    {
        "content": "<p>Can I avoid linking core somehow?</p>",
        "id": 226473300,
        "sender_full_name": "osa1",
        "timestamp": 1613452920
    },
    {
        "content": "<p><code>#![no_core]</code>, but almost nothing compiles without core</p>",
        "id": 226473344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452935
    },
    {
        "content": "<p>Yeah that didn't work.</p>",
        "id": 226473363,
        "sender_full_name": "osa1",
        "timestamp": 1613452973
    },
    {
        "content": "<p>what are you trying to do btw?</p>",
        "id": 226473369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452986
    },
    {
        "content": "<p>debug the codegen bug?</p>",
        "id": 226473376,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613452996
    },
    {
        "content": "<p>Yeah</p>",
        "id": 226473450,
        "sender_full_name": "osa1",
        "timestamp": 1613453067
    },
    {
        "content": "<p>here's a minimal no_core program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(no_core, lang_items)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n<span class=\"cp\">#![crate_type = </span><span class=\"s\">\"lib\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"sized\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226473483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613453154
    },
    {
        "content": "<p>I need 'copy', 'clone', 'receiver', ...</p>",
        "id": 226473690,
        "sender_full_name": "osa1",
        "timestamp": 1613453380
    },
    {
        "content": "<p>I fixed the bug in the meantime, but I feel like I'll need this again.</p>",
        "id": 226473701,
        "sender_full_name": "osa1",
        "timestamp": 1613453395
    },
    {
        "content": "<p>you can add those with <code>lang = \"copy\"</code> and so on</p>",
        "id": 226473702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613453395
    },
    {
        "content": "<p>Is the lang items documented somewhere? I need right types too otherwise type checker panics.</p>",
        "id": 226473761,
        "sender_full_name": "osa1",
        "timestamp": 1613453418
    },
    {
        "content": "<p><code>trait Clone {}</code> doesn't work, for example. I need <code>Sized</code> bound (and methods too?)</p>",
        "id": 226473790,
        "sender_full_name": "osa1",
        "timestamp": 1613453446
    },
    {
        "content": "<p>I don't know, sorry. You can see how it's implemented in libcore.</p>",
        "id": 226473801,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613453462
    },
    {
        "content": "<p>OK thanks.</p>",
        "id": 226473820,
        "sender_full_name": "osa1",
        "timestamp": 1613453493
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/example/mini_core.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/example/mini_core.rs</a> should help</p>",
        "id": 226479796,
        "sender_full_name": "lqd",
        "timestamp": 1613459888
    },
    {
        "content": "<p>I ended up adding a new codegen option and built std/core without the option. I can now use the option to debug my code gen changes on small examples.</p>",
        "id": 226489993,
        "sender_full_name": "osa1",
        "timestamp": 1613467654
    }
]