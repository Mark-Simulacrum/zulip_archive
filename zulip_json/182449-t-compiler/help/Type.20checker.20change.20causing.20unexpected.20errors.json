[
    {
        "content": "<p>I have this diff:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/compiler/rustc_typeck/src/check/method/probe.rs b/compiler/rustc_typeck/src/check/method/probe.rs\nindex d4631c465a3..b0febd5eccb 100644\n--- a/compiler/rustc_typeck/src/check/method/probe.rs\n+++ b/compiler/rustc_typeck/src/check/method/probe.rs\n@@ -20,7 +20,7 @@\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::GenericParamDefKind;\n+use rustc_middle::ty::{GenericParamDefKind, TypeAndMut};\n use rustc_middle::ty::{\n     self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n@@ -1111,9 +1111,16 @@ fn pick_by_value_method(\n                 pick.autoderefs = step.autoderefs;\n\n                 // Insert a `&amp;*` or `&amp;mut *` if this is a reference type:\n-                if let ty::Ref(_, _, mutbl) = *step.self_ty.value.value.kind() {\n-                    pick.autoderefs += 1;\n-                    pick.autoref = Some(mutbl);\n+                match *step.self_ty.value.value.kind() {\n+                    ty::Ref(_, _, mutbl) =&gt; {\n+                        pick.autoderefs += 1;\n+                        pick.autoref = Some(mutbl);\n+                    }\n+                    ty::RawPtr(TypeAndMut { ty: _, mutbl }) =&gt; {\n+                        pick.autoderefs += 1;\n+                        pick.autoref = Some(mutbl);\n+                    }\n+                    _ =&gt; {}\n                 }\n\n                 pick\n</code></pre></div>\n<p>The idea is that when probing for method receivers I want to try <code>&amp;*</code> and <code>&amp;mut *</code> for pointers too (in addition to references). When I apply this diff I get unexpected errors in the libraries, like:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0282]: type annotations needed\n   --&gt; library/core/src/fmt/num.rs:234:45\n    |\n209 | / macro_rules! impl_Display {\n210 | |     ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) =&gt; {\n211 | |         fn $name(mut n: $u, is_nonnegative: bool, f: &amp;mut fmt::Formatter&lt;&#39;_&gt;) -&gt; fmt::Result {\n212 | |             // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n...   |\n234 | |                     let d1 = (rem / 100) &lt;&lt; 1;\n    | |                                             ^ cannot infer type for type `{integer}`\n...   |\n290 | |     };\n291 | | }\n    | |_- in this expansion of `impl_Display!`\n...\n462 | /     impl_Display!(\n463 | |         i8, u8, i16, u16, i32, u32, i64, u64, usize, isize\n464 | |             as u64 via to_u64 named fmt_u64\n465 | |     );\n    | |______- in this macro invocation\n\nerror: aborting due to previous error\n</code></pre></div>\n<p>Most shift expressions in that file fail with the same error. I haven't tried fixing each error to see if there are other errors in other modules.</p>\n<p>Anyone know how can my change cause this error? Any tips for debugging?</p>",
        "id": 222829389,
        "sender_full_name": "osa1",
        "timestamp": 1610698188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> I have no idea what causes the error, but you could try passing -Z treat-err-as-bug to get a backtrace for where it's emitted</p>",
        "id": 222864636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610721258
    },
    {
        "content": "<p>Maybe it's related to the <code>.offset()</code> code later on?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rem</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                    </span><span class=\"c1\">// We are allowed to copy to `buf_ptr[curr..curr + 3]` here since</span>\n<span class=\"w\">                    </span><span class=\"c1\">// otherwise `curr &lt; 0`. But then `n` was originally at least `10000^10`</span>\n<span class=\"w\">                    </span><span class=\"c1\">// which is `10^40 &gt; 2^128 &gt; n`.</span>\n<span class=\"w\">                    </span><span class=\"n\">ptr</span>::<span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"n\">lut_ptr</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">buf_ptr</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ptr</span>::<span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"n\">lut_ptr</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">buf_ptr</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">curr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222932165,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610748483
    },
    {
        "content": "<p>And the change in the type-checker for raw pointer <code>self</code> receivers is causing the inference of <code>d1</code> to change, thus making it unable to infer what <code>1</code>'s type is (e.g., <code>i32</code>, <code>i64</code>, <code>u32</code>, etc.)</p>",
        "id": 222932332,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610748574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> Just in case you missed this ^</p>",
        "id": 223157572,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610998826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> thanks, I'll try that.<br>\n<span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> how do I pass <code>-Ztreat-err-as-bug</code> to stage 0 when compiling libs for stage 1?</p>",
        "id": 223189348,
        "sender_full_name": "osa1",
        "timestamp": 1611035058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> <code>RUSTFLAGS_BOOTSTRAP=-Ztreat-err-as-bug</code></p>",
        "id": 223189353,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611035072
    },
    {
        "content": "<p>err sorry RUSTFLAGS_NOT_BOOTSTRAP I think</p>",
        "id": 223189356,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611035082
    },
    {
        "content": "<p>actually I don't know what you mean by any of that staging</p>",
        "id": 223189360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611035099
    },
    {
        "content": "<p>what command are you running?</p>",
        "id": 223189361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611035103
    },
    {
        "content": "<p>I'm running <code>./x.py build --stage 1</code></p>",
        "id": 223189440,
        "sender_full_name": "osa1",
        "timestamp": 1611035213
    },
    {
        "content": "<p>ok, RUSTFLAGS_NOT_BOOSTRAP then</p>",
        "id": 223189449,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611035233
    },
    {
        "content": "<p>Trying now, thanks</p>",
        "id": 223189460,
        "sender_full_name": "osa1",
        "timestamp": 1611035247
    },
    {
        "content": "<p>note I would call that the 'stage 1 compiler', not stage0</p>",
        "id": 223189461,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611035250
    },
    {
        "content": "<p>I'm getting a backtrace now, but I also lost the original type error message, so I'm not sure if this backtrace is for the error I'm trying to understand.</p>",
        "id": 223190331,
        "sender_full_name": "osa1",
        "timestamp": 1611036279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> is there a way to see <code>rustc</code> invocation for this library file so that I can just run that command?</p>",
        "id": 223190844,
        "sender_full_name": "osa1",
        "timestamp": 1611036968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> hmm, probably not. you can try <code>x.py build -vv</code> but I don't think it includes all environment variables</p>",
        "id": 223190850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611036989
    },
    {
        "content": "<p>it would be much easier if you can reproduce outside the standard library</p>",
        "id": 223190856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611037001
    },
    {
        "content": "<p>But how do I build stage 1 compiler to test this outside of the standard library if I can't build the standard librar for the stage 1?</p>",
        "id": 223190956,
        "sender_full_name": "osa1",
        "timestamp": 1611037176
    },
    {
        "content": "<p>you'd need to compile a <code>#[no_core]</code> program</p>",
        "id": 223191043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611037294
    },
    {
        "content": "<p>the compiler is already built, it's just the standard library that's missing</p>",
        "id": 223191046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611037305
    },
    {
        "content": "<p>hmm depending on where the error is you may be able to use just <code>#[no_std]</code>, you'd have to copy the <code>core</code> artifacts to sysroot manually though</p>",
        "id": 223191099,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611037355
    }
]