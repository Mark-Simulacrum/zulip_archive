[
    {
        "content": "<p>Hello all, we are working on a compiler backend for program verification and we would like to generate <a href=\"https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html\">source-based coverage reports</a> for this backend based on our testing suite.</p>\n<p>The usage examples that I have seen rely on <code>cargo build</code> and <code>cargo test</code> to generate profiling data, but we use <code>x.py</code> for building and our own scripts for testing. Being a compiler backend, I think we cannot get rid of <code>x.py</code> for now. What do you recommend we do in our case?</p>",
        "id": 234712529,
        "sender_full_name": "Adrian Palacios",
        "timestamp": 1618505402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396031\">@Adrian Palacios</span> RUSTFLAGS still works with x.py</p>",
        "id": 234712723,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618505453
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> !</p>\n<p>I have tried to compile with <code>RUSTFLAGS=\"-Zinstrument-coverage\" ./x.py build -i --stage 1 library/std</code> but I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/local/home/adpaco/rmc/build/x86_64-unknown-linux-gnu/stage0/bin/rustc - --crate-name ___ --print=file-names -Zinstrument-coverage -Cdebuginfo=2 -Wrust_2018_idioms -Wunused_lifetimes --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit code: 1)\n  --- stderr\n  error: the option `Z` is only accepted on the nightly compiler\n\nfailed to run: /local/home/adpaco/rmc/build/x86_64-unknown-linux-gnu/stage0/bin/cargo build --manifest-path /local/home/adpaco/rmc/src/bootstrap/Cargo.toml\nBuild completed unsuccessfully in 0:00:00\n</code></pre></div>\n<p>I thought we were already building a nightly version of the compiler. I tried some options in the <code>config.toml</code> file (e.g., <code>channel = nightly</code>) but none of them have worked. What do I need for this option to be accepted?</p>",
        "id": 234819038,
        "sender_full_name": "Adrian Palacios",
        "timestamp": 1618563816
    },
    {
        "content": "<p>The bootstrap compiler is a beta compiler. It should accept nightly options through the bootstrap trick though.</p>",
        "id": 234820781,
        "sender_full_name": "bjorn3",
        "timestamp": 1618564579
    },
    {
        "content": "<p>I don't think we always pass the bootstrap trick, as we try to limit exposure of e.g. bootstrap tools. You might be able to get it working by passing RUSTC_BOOTSTRAP=1 yourself, but I would recommend switching to a nightly compiler via build.rustc and build.cargo in config.toml</p>",
        "id": 234840176,
        "sender_full_name": "simulacrum",
        "timestamp": 1618574251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396031\">@Adrian Palacios</span> you want to only set the option when  building the compiler itself - try <code>RUSTFLAGS_BOOTSTRAP</code></p>",
        "id": 234846452,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618577217
    },
    {
        "content": "<p>Thank you all for your help! Using the <code>RUSTFLAGS_BOOTSTRAP</code> and switching to nightly versions of rustc/cargo seems to have worked.</p>\n<p>That said, I have not been able to run it so that instrumented data (i.e., <code>.profraw</code> files) is generated for our tests. Running <code>./x.py test</code> generates some of these files, then fails to complete since we do not support rust tests. Nothing is generated if I use the standalone <code>rustc</code> that we build. What should we do in this case?</p>",
        "id": 236711950,
        "sender_full_name": "Adrian Palacios",
        "timestamp": 1619716829
    },
    {
        "content": "<p>I don't understand the question - what do you mean you don't support rust tests? How do you expect to get coverage without running tests?</p>",
        "id": 236712156,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619716897
    },
    {
        "content": "<p>We do not use the compiletest tests from <code>/src/test</code> - our tests are located in other folders and we have different scripts for running them.<br>\nI suppose one way is to edit the <code>src/bootstrap/test.rs</code> file to run our tests instead, but I would like to know if there are alternative ways.</p>",
        "id": 236714724,
        "sender_full_name": "Adrian Palacios",
        "timestamp": 1619717880
    },
    {
        "content": "<p>you could see how compiletest does it and then do it the same way in your own test suite</p>",
        "id": 236714855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619717925
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"396031\">@Adrian Palacios</span>, did you manage to successfully get instrumented data in the end? I'd like to test lines/% coverage of the Rust compiler from its tests - seems like you were doing the same thing</p>",
        "id": 248579601,
        "sender_full_name": "jmanchuck",
        "timestamp": 1628234764
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"424037\">@jmanchuck</span> we have been busy porting our testing suite to compiletest and this is the next item on my to-do list. I can post updates here if that helps, but next week I am on vacation so it will have to wait until then.</p>",
        "id": 248602084,
        "sender_full_name": "Adrian Palacios",
        "timestamp": 1628251510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396031\">@Adrian Palacios</span>  that would be very helpful, thanks!</p>",
        "id": 249198792,
        "sender_full_name": "jmanchuck",
        "timestamp": 1628745515
    }
]