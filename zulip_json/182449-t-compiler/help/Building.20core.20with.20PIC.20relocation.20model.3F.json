[
    {
        "content": "<p>How do I build core for a specific target (wasm32-wasi and wasm32-unknown-emscripten in my case) with PIC relocation model? xargo can do it and I think it uses RUSTFLAGS env variable, but I don't know how to set this only when building the a specific library for a specific target.</p>",
        "id": 205797133,
        "sender_full_name": "osa1",
        "timestamp": 1596463221
    },
    {
        "content": "<p>I currently do this:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/librustc_target/spec/wasm32_base.rs b/src/librustc_target/spec/wasm32_base.rs\nindex 8423573b52d..fa9499b37a8 100644\n--- a/src/librustc_target/spec/wasm32_base.rs\n+++ b/src/librustc_target/spec/wasm32_base.rs\n@@ -126,14 +126,7 @@ pub fn options() -&gt; TargetOptions {\n\n         crt_objects_fallback: Some(CrtObjectsFallback::Wasm),\n\n-        // This has no effect in LLVM 8 or prior, but in LLVM 9 and later when\n-        // PIC code is implemented this has quite a drastric effect if it stays\n-        // at the default, `pic`. In an effort to keep wasm binaries as minimal\n-        // as possible we&#39;re defaulting to `static` for now, but the hope is\n-        // that eventually we can ship a `pic`-compatible standard library which\n-        // works with `static` as well (or works with some method of generating\n-        // non-relative calls and such later on).\n-        relocation_model: RelocModel::Static,\n+        relocation_model: RelocModel::Pic,\n\n         // When the atomics feature is activated then these two keys matter,\n         // otherwise they&#39;re basically ignored by the standard library. In this\n</code></pre></div>",
        "id": 205801378,
        "sender_full_name": "osa1",
        "timestamp": 1596465449
    }
]