[
    {
        "content": "<p>I have finished most of my custom codegen, and i am now trying to compile core but running into a bit of a major issue. cargo manages to build <code>compiler_builtins</code> and <code>rustc-std-workspace-core</code> just fine:</p>\n<div class=\"codehilite\"><pre><span></span><code>Compiling compiler_builtins v0.1.46\n   Compiling rustc-std-workspace-core v1.99.0 (C:\\Users\\caval\\Documents\\Github\\rust\\build\\x86_64-pc-windows-msvc\\stage2\\lib\\rustlib\\src\\rust\\library\\rustc-std-workspace-core)\n</code></pre></div>\n<p>I have some debugs here and there and i can see that it finishes linking rustc-std-workspace just fine (<a href=\"http://link.rs\">link.rs</a> 64), then it tries to start codegenning core im guessing, because <code>lib.rs:95</code> is codegen_crate where it calls rustc_codegen_ssa:</p>\n<div class=\"codehilite\"><pre><span></span><code>[crates\\rustc_codegen_nvvm\\src\\lib.rs:95]  Codegen crate (compiler_builtins?)\n[crates\\rustc_codegen_nvvm\\src\\lib.rs:95] Codegen crate (rustc-std-workspace-core?)\n[crates\\rustc_codegen_nvvm\\src\\lib.rs:201] WriteBackendMethods::codegen\n[crates\\rustc_codegen_nvvm\\src\\lib.rs:110] join_codegen\n[crates\\rustc_codegen_nvvm\\src\\lib.rs:127] link\n[crates\\rustc_codegen_nvvm\\src\\link.rs:28] start linking\n[crates\\rustc_codegen_nvvm\\src\\link.rs:51] link rlib\n[crates\\rustc_codegen_nvvm\\src\\link.rs:106] grab files, begin making archive\n[crates\\rustc_codegen_nvvm\\src\\link.rs:113] archive created\n[crates\\rustc_codegen_nvvm\\src\\link.rs:60] finish linking\n[crates\\rustc_codegen_nvvm\\src\\link.rs:62] same as above\n[crates\\rustc_codegen_nvvm\\src\\link.rs:64] same as above\n[crates\\rustc_codegen_nvvm\\src\\lib.rs:95] Codegen crate (core)\n</code></pre></div>\n<p>However, after this it segfaults:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: could not compile `core`\n\nCaused by:\n  process didn&#39;t exit successfully: `rustc --crate-name core --edition=2018 C:\\Users\\caval\\Documents\\Github\\rust\\build\\x86_64-pc-windows-msvc\\stage2\\lib\\rustlib\\src\\rust\\library\\core\\src\\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts\n--crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=0d7c196550ba8193 -C extra-filename=-0d7c196550ba8193 --out-dir C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps --target\nnvptx64-nvidia-cuda -Z force-unstable-if-unmarked -L dependency=C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps -L dependency=C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\debug\\deps --cap-lints allow -Z\ncodegen-backend=C:\\Users\\caval\\Documents\\Github\\rustc_codegen_nvvm\\target\\release\\rustc_codegen_nvvm.dll --emit=llvm-ir` (exit code: 0xc0000005, STATUS_ACCESS_VIOLATION)\n\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n</code></pre></div>\n<p>While i do actually call libnvvm functions that are unsafe, that only happens during linking, the only things i call before that are llvm context creation and llvm builders, not even llvm codegen/opt. Therefore i am a bit lost on why rustc is dying all the sudden here. Even stranger, if i run the command on my own, it does not segfault but it does not get past codegen_crate either (debug only prints <code>lib.rs:95</code>)</p>\n<p>I have built rustc with debug info, and no backtrace happens, and rustc_log yields nothing helpful, so i am a bit lost and would appreciate any ideas on why this is dying</p>",
        "id": 245751432,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626124695
    },
    {
        "content": "<p>attaching a debugger does not yield anything helpful either, attaching it on both the cargo command and the manual rustc command</p>",
        "id": 245751568,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626124772
    },
    {
        "content": "<p>I'm not very familiar with windows debugging - is it possible to get a bscktradh from a crashed process?</p>",
        "id": 245751708,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626124842
    },
    {
        "content": "<p>I knoe that on Linux, a core dump file gets written</p>",
        "id": 245751765,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1626124871
    },
    {
        "content": "<p>well usually its possible to attach a debugger and the debugger gives you at least something to work off, but in my case absolutely nothing, it prints that the process died and thats it</p>",
        "id": 245751801,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626124896
    },
    {
        "content": "<p><code>ulimit -c unlimited</code> is often necessary to get a coredump.</p>",
        "id": 245751805,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124898
    },
    {
        "content": "<p>Does <code>bt</code> not give a backtrace?</p>",
        "id": 245751840,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124921
    },
    {
        "content": "<p>and usually if a command dies from a segfault you see it, but it says nothing if i try to run the rustc command on my own</p>",
        "id": 245751889,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626124934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/segfault.20from.20compiling.20core.20with.20custom.20codegen/near/245751840\">said</a>:</p>\n<blockquote>\n<p>Does <code>bt</code> not give a backtrace?</p>\n</blockquote>\n<p>you mean try getting a backtrace with windbg? ive never heard of <code>bt</code> on windows</p>",
        "id": 245752011,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125013
    },
    {
        "content": "<p>i havent tried enabling rustc_log then running the rustc command manually, lemme see if that gives me anything useful</p>",
        "id": 245752220,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125119
    },
    {
        "content": "<p>although rustc_log was enabled for the cargo command so it should have rustc_log already</p>",
        "id": 245752244,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125136
    },
    {
        "content": "<p>Yeah I meant the command to get a backtrace using the debugger you use. bt is a gdb or lldb command.</p>",
        "id": 245752336,
        "sender_full_name": "bjorn3",
        "timestamp": 1626125171
    },
    {
        "content": "<p>im using the C++ windows debugger in vsc, which usually works just fine, but it does not \"stop\" at the segfault oddly enough</p>",
        "id": 245752396,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125201
    },
    {
        "content": "<p>oh boy rustc just dumped a 1.7gb large log file from rustc_log, this was a mistake</p>",
        "id": 245752664,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125338
    },
    {
        "content": "<p>if rustc_log doesnt give me anything ill try running the rustc command under lldb</p>",
        "id": 245752834,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/segfault.20from.20compiling.20core.20with.20custom.20codegen/near/245752664\">said</a>:</p>\n<blockquote>\n<p>oh boy rustc just dumped a 1.7gb large log file from rustc_log, this was a mistake</p>\n</blockquote>\n<p>You can add the name of the module you're debugging for in the environment variable; <code>RUSTC_LOG=rustc_mid_whatever::some::module=debug</code></p>",
        "id": 245752880,
        "sender_full_name": "danii",
        "timestamp": 1626125432
    },
    {
        "content": "<p>yeah the issue is im not completely sure where its dying, so if i only enable it on one crate, it wont catch the others</p>",
        "id": 245752914,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125453
    },
    {
        "content": "<p>i mean i know its getting to codegen, because its calling <code>codegen_crate</code>, but its dying soon after that</p>",
        "id": 245753129,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626125554
    },
    {
        "content": "<p>haha ok yeah im definitely going to limit it to rustc_codegen_ssa because its at 6gb <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 245753982,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626126018
    },
    {
        "content": "<p>the last lines it prints are</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_codegen_ssa::mir::block codegen_block(bb5=BasicBlockData { statements: [_6 = _1], terminator: Some(Terminator { source_info: SourceInfo { span:\nC:\\Users\\caval\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\sync\\atomic.rs:2355:23: 2355:51 (#0), scope: scope[0] }, kind: _0 = intrinsics::atomic_load::&lt;T&gt;(move _6) -&gt; bb7 }), is_cleanup: false })\nDEBUG rustc_codegen_ssa::mir::statement codegen_statement(statement=_6 = _1)\nDEBUG rustc_codegen_ssa::mir::operand codegen_operand(operand=_1)\nDEBUG rustc_codegen_ssa::mir::operand codegen_consume(place_ref=PlaceRef { local: _1, projection: [] })\nDEBUG rustc_codegen_ssa::mir monomorphize: self.instance=Instance { def: Item(WithOptConstParam { did: DefId(0:8500 ~ core[caec]::sync::atomic::atomic_load), const_param_did: None }), substs: [isize] }\nDEBUG rustc_codegen_ssa::mir::operand maybe_codegen_consume_direct(place_ref=PlaceRef { local: _1, projection: [] })\nDEBUG rustc_codegen_ssa::mir::block codegen_terminator: Terminator { source_info: SourceInfo { span: C:\\Users\\caval\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\library\\core\\src\\sync\\atomic.rs:2355:23: 2355:51 (#0), scope: scope[0] },\nkind: _0 = intrinsics::atomic_load::&lt;T&gt;(move _6) -&gt; bb7 }\nDEBUG rustc_codegen_ssa::mir::operand codegen_operand(operand=intrinsics::atomic_load::&lt;T&gt;)\nDEBUG rustc_codegen_ssa::mir monomorphize: self.instance=Instance { def: Item(WithOptConstParam { did: DefId(0:8500 ~ core[caec]::sync::atomic::atomic_load), const_param_did: None }), substs: [isize] }\nDEBUG rustc_codegen_ssa::mir monomorphize: self.instance=Instance { def: Item(WithOptConstParam { did: DefId(0:8500 ~ core[caec]::sync::atomic::atomic_load), const_param_did: None }), substs: [isize] }\nDEBUG rustc_codegen_ssa::mir::operand codegen_operand(operand=move _6)\nDEBUG rustc_codegen_ssa::mir::operand codegen_consume(place_ref=PlaceRef { local: _6, projection: [] })\nDEBUG rustc_codegen_ssa::mir monomorphize: self.instance=Instance { def: Item(WithOptConstParam { did: DefId(0:8500 ~ core[caec]::sync::atomic::atomic_load), const_param_did: None }), substs: [isize] }\nDEBUG rustc_codegen_ssa::mir::operand maybe_codegen_consume_direct(place_ref=PlaceRef { local: _6, projection: [] })\n</code></pre></div>\n<p>which doesnt seem very helpful <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 245754084,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626126076
    },
    {
        "content": "<p>the only potentially dangerous things i see are the atomic loads which i handle by generating a print then an abort but other than that... im not quite sure</p>",
        "id": 245754131,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626126109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/segfault.20from.20compiling.20core.20with.20custom.20codegen/near/245752914\">said</a>:</p>\n<blockquote>\n<p>yeah the issue is im not completely sure where its dying, so if i only enable it on one crate, it wont catch the others</p>\n</blockquote>\n<p>unfortunately i don't think there's any other way to debug.<br>\nMaybe there's a way to run a debugger? Nothing on the rustc guide says anything about using a debugger though.</p>",
        "id": 245754432,
        "sender_full_name": "danii",
        "timestamp": 1626126336
    },
    {
        "content": "<p>the only thing i can think of is that maybe i give rustc_codegen_ssa an incorrect value,  then it does something with that and llvm maybe segfaults with it</p>",
        "id": 245754552,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626126388
    },
    {
        "content": "<p>because i handle loads using this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">atomic_load</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ptr</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">ll</span> <span class=\"nc\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_order</span>: <span class=\"nc\">AtomicOrdering</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_size</span>: <span class=\"nc\">Size</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">ll</span> <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_intrinsic</span><span class=\"p\">(</span><span class=\"s\">\"llvm.trap\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">trap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The reason being that core seems to think nvptx supports atomic loads, which it doesnt, so i am kind of forced to give it a garbage value</p>",
        "id": 245754597,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626126435
    },
    {
        "content": "<p>haha that was it, i am so dumb <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 245755114,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626126759
    },
    {
        "content": "<p>thanks everyone <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245755130,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626126768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> has marked this topic as resolved.</p>",
        "id": 245755133,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626126772
    },
    {
        "content": "<blockquote>\n<p>error[E0463]: can't find crate for <code>core</code><br>\nconsider building the standard library from source with <code>cargo build -Zbuild-std</code><br>\n<code>-Zbuild-std=core</code></p>\n</blockquote>\n<p>o.O did i not just ask cargo to do that? lol</p>",
        "id": 245755992,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626127310
    },
    {
        "content": "<p>TIL you can mark a conversation as resolved</p>",
        "id": 245756811,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626127812
    },
    {
        "content": "<p>yeah it seems to be added for a couple of days, and surprisingly anyone can mark convos as resolved for some reason lol</p>",
        "id": 245756919,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626127881
    },
    {
        "content": "<p>Whatever works I suppose. Good to know. It's a simple way to indicate all is done.</p>",
        "id": 245756965,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626127919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> has marked this topic as unresolved.</p>",
        "id": 245757780,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626128498
    },
    {
        "content": "<p>yeah this is pretty odd, even giving rustc a place to look for libcore doesnt seem to work</p>",
        "id": 245757801,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626128513
    },
    {
        "content": "<p>i can see the <code>libcore-xxxxxx.rlib</code> and rmeta files in deps, so it definitely built it</p>",
        "id": 245757872,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626128545
    },
    {
        "content": "<p>perhaps rustc recognizes nvptx64-nvidia-cuda and it tries to find core as it would with other targets, although build-std should take care of this automatically</p>",
        "id": 245758640,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626129168
    },
    {
        "content": "<p>oh, apparently just not giving it -Z build-std works now, lol, i presume this isnt reliable though and only works because i have core built from -Z build-std</p>",
        "id": 245758886,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626129367
    },
    {
        "content": "<p>If you use LLVM, make sure to build it with assertions enabled.</p>",
        "id": 245804363,
        "sender_full_name": "nagisa",
        "timestamp": 1626171878
    },
    {
        "content": "<p>because assertions become traps = sigsegvs otherwise for perf reasons. And invalid uses of the API trigger asserts.</p>",
        "id": 245804400,
        "sender_full_name": "nagisa",
        "timestamp": 1626171894
    },
    {
        "content": "<p>when you're trying to debug and obtain a stack trace with a debugger, make sure to attach the debugger to the rustc process, not cargo or one of the wrappers that <code>x.py</code> calls.</p>",
        "id": 245804475,
        "sender_full_name": "nagisa",
        "timestamp": 1626171926
    },
    {
        "content": "<p>actual rustcs tend to be put into <code>build/&lt;target&gt;/stage1/bin/rustc</code>.</p>",
        "id": 245804610,
        "sender_full_name": "nagisa",
        "timestamp": 1626171987
    },
    {
        "content": "<p>haha yeah i forgot to do that because i thought id be fine, since im just using the IR builder items from llvm, not using the actual codegen</p>",
        "id": 245856774,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196469
    },
    {
        "content": "<p>Now i need to fix this issue of rustc not finding libcore though, pretty odd</p>",
        "id": 245856802,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196488
    },
    {
        "content": "<p>What does <code>RUSTC_LOG=rustc_metadata</code> give when rustc can't find libcore?</p>",
        "id": 245856960,
        "sender_full_name": "bjorn3",
        "timestamp": 1626196556
    },
    {
        "content": "<p>oh why didnt i think of logging that lol</p>",
        "id": 245857142,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   Compiling cuda_test v0.1.0 (C:\\Users\\caval\\Documents\\Github\\cuda_test)\nwarning: some trace filter directives would enable traces that are disabled statically\n | `rustc_metadata=trace` would enable the TRACE level for the `rustc_metadata` target\n = note: the static max level is `info`\n = help: to enable DEBUG logging, remove the `max_level_info` feature\nINFO rustc_metadata::creader resolving crate `core`\nINFO rustc_metadata::creader falling back to a load\nINFO rustc_metadata::locator rlib reading metadata from: \\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib\nWARN rustc_metadata::locator no metadata found: failed to parse rlib &#39;\\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib&#39;: Unsupported archive identifier\nINFO rustc_metadata::locator rlib reading metadata from: \\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib\nWARN rustc_metadata::locator no metadata found: failed to parse rlib &#39;\\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib&#39;: Unsupported archive identifier\nINFO rustc_metadata::creader resolving crate `core`\nINFO rustc_metadata::creader falling back to a load\nINFO rustc_metadata::locator rlib reading metadata from: \\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib\nWARN rustc_metadata::locator no metadata found: failed to parse rlib &#39;\\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib&#39;: Unsupported archive identifier\nINFO rustc_metadata::locator rlib reading metadata from: \\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib\nWARN rustc_metadata::locator no metadata found: failed to parse rlib &#39;\\\\?\\C:\\Users\\caval\\Documents\\Github\\cuda_test\\target\\nvptx64-nvidia-cuda\\debug\\deps\\libcore-bd9e89878f1cb465.rlib&#39;: Unsupported archive identifier\nerror[E0463]: can&#39;t find crate for `core`\n  |\n  = note: the `nvptx64-nvidia-cuda` target may not be installed\n  = help: consider downloading the target with `rustup target add nvptx64-nvidia-cuda`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n</code></pre></div>",
        "id": 245857160,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196627
    },
    {
        "content": "<p>uh is it expecting a metadata rlib? i remember handling that but maybe i forgot it somewhere</p>",
        "id": 245857227,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196665
    },
    {
        "content": "<p>What format is used for rlibs by your backend? (<code>ArchiveBuilder</code>) Does the <code>object</code> crate support it?</p>",
        "id": 245857383,
        "sender_full_name": "bjorn3",
        "timestamp": 1626196732
    },
    {
        "content": "<p>im kind of confused on what rlibs in this case are, arent rlibs just mir dumps? or am i confusing them with something else</p>",
        "id": 245857478,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196781
    },
    {
        "content": "<p>Rlibs contain crate metadata and compiled object files.</p>",
        "id": 245857522,
        "sender_full_name": "bjorn3",
        "timestamp": 1626196798
    },
    {
        "content": "<p>i use tar to package the rlibs, my modules are llvm bitcode modules</p>",
        "id": 245857523,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196799
    },
    {
        "content": "<p>then yes they are metadata + llvm bitcode</p>",
        "id": 245857585,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196808
    },
    {
        "content": "<p>and i use tar to archive everything</p>",
        "id": 245857628,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196827
    },
    {
        "content": "<p>same method rust-gpu uses</p>",
        "id": 245857640,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/segfault.20from.20compiling.20core.20with.20custom.20codegen/near/245857523\">said</a>:</p>\n<blockquote>\n<p>i use tar to package the rlibs, my modules are llvm bitcode modules</p>\n</blockquote>\n<p>Then you need to use a <code>MetadataLoader</code> that supports tar archives. The default one only supports ar archives.</p>",
        "id": 245857664,
        "sender_full_name": "bjorn3",
        "timestamp": 1626196841
    },
    {
        "content": "<p>s/use/write</p>",
        "id": 245857723,
        "sender_full_name": "bjorn3",
        "timestamp": 1626196868
    },
    {
        "content": "<p>oh i remember that haha, it was one of the first things i handled in the codegen and wasnt sure what it did <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 245857727,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196870
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 245857746,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196876
    },
    {
        "content": "<p>so are rlibs that store mir and rlibs that store obj files different things or are they the same thing at different stages of compilation?</p>",
        "id": 245857959,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626196962
    },
    {
        "content": "<p>because i knew about rlibs that store mir, cause thats how rustc gets type info from dependencies, but then got kind of confused because they were later referred to in the codegen as files that store object files <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 245858175,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626197062
    },
    {
        "content": "<p>Rlibs store both. The crate metadata contains MIR for generic, <code>#[inline]</code> and <code>const</code> functions. The crate metadata also contains all other information necessary to compile against a crate. In addition to the crate metadata rlibs contain object files and or bitcode files. (both by default. only object when using <code>-Cembed-bitcode=no</code> and only bitcode when using <code>-Clto</code>)</p>",
        "id": 245859830,
        "sender_full_name": "bjorn3",
        "timestamp": 1626197752
    },
    {
        "content": "<p>Ah ok, so its only the mir thats strictly required</p>",
        "id": 245859994,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626197808
    },
    {
        "content": "<p>now it works and it can find core <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 245860098,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626197864
    },
    {
        "content": "<p>surprisingly, core and friends build completely fine</p>",
        "id": 245860132,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626197880
    },
    {
        "content": "<p>now i just need to add some special attributes for adding nvvm annotations for kernels and ill be able to compile rust code as a gpu kernel <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 245860223,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626197907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> has marked this topic as resolved.</p>",
        "id": 245860438,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626198012
    }
]