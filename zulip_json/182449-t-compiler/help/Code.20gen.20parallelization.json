[
    {
        "content": "<p>In the dev guide it says that code gen is the only stage of the compiler that is already parallel. Does this mean that code gen is parallel by default in rustc?</p>",
        "id": 251950616,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1630708481
    },
    {
        "content": "<p>Yes.  The parallelism will depend on the number of codegen units.</p>",
        "id": 251953022,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630710336
    },
    {
        "content": "<p>Is one codegen unit a crate? Or something smaller like a module?</p>",
        "id": 251955485,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630712317
    },
    {
        "content": "<p>Smaller than that, actually. The compiler splits code from modules up into codegen units.</p>",
        "id": 251955638,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630712463
    },
    {
        "content": "<p>(As far as I know.)</p>",
        "id": 251955647,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630712469
    },
    {
        "content": "<p>I think that's <a href=\"https://rustc-dev-guide.rust-lang.org/backend/monomorph.html#codegen-unit-cgu-partitioning\">https://rustc-dev-guide.rust-lang.org/backend/monomorph.html#codegen-unit-cgu-partitioning</a></p>",
        "id": 251955737,
        "sender_full_name": "cuviper",
        "timestamp": 1630712563
    },
    {
        "content": "<p>Long-term, it would be great to push parallelism all the way down into LLVM, so that CGUs aren't required, but that would be a very long-term project and much more difficult than making the rest of the rust compiler parallel.</p>",
        "id": 251955760,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630712588
    },
    {
        "content": "<p>Short-term, the parallel rustc effort doesn't need to change the CGU handling, it just needs to make the rest of the compiler parallel.</p>",
        "id": 251955780,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630712621
    },
    {
        "content": "<p>do you happen to know exactly what is being made parallel? I heard that the query system is involved somehow, but doesn't it still have to invoke each query in sequence to find what its dependencies are?</p>",
        "id": 251955857,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630712690
    },
    {
        "content": "<p>Yes but some queries do some work in a loop and you can parallelize that. Once you've started that parallelization, each thread of execution runs serially but overall the system is running different queries in parallel.</p>",
        "id": 251956437,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1630713248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I dont really see how thats possible <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> , is it really llvm's job to understand what functions should be grouped together? I think rustc deciding will always be better because it actually logically knows what is together. And cg_llvm doesnt only do llvm stuff in parallel for CGUs, so i think CGUs will always be required</p>",
        "id": 252034949,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1630799449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> That's not what I mean. It still makes sense for rustc to decide what work goes on what thread. But in theory, LLVM could share state, such as only needing one copy of inline-able functions rather than one copy per CGU, and in general not duplicating work or requiring duplication of code.</p>",
        "id": 252089155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1630861966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ah i understand, yeah that would be great, perhaps also being able to do more without strictly relying on LTO</p>",
        "id": 252095625,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1630869048
    }
]