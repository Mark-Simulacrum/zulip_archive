[
    {
        "content": "<p>In <code>src/librustc_mir/dataflow/impls/borrows.rs</code> why does Terminator::Call not need to call <code>kill_borrows_on_place()</code> for its destination place, while Statement::Assign does?</p>",
        "id": 189070750,
        "sender_full_name": "Amanieu",
        "timestamp": 1582672126
    },
    {
        "content": "<p>I'm trying to understand this code to figure out if I need to add handling for Terminator::InlineAsm, which I am adding.</p>",
        "id": 189070778,
        "sender_full_name": "Amanieu",
        "timestamp": 1582672160
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> (<span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested you might be familiar with this code)</p>",
        "id": 189070800,
        "sender_full_name": "Amanieu",
        "timestamp": 1582672182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> No idea. It seems like it should kill any borrows of the return place in <code>call_return_effect</code>. This wasn't implemented by me, as the semantics are unchanged <a href=\"https://github.com/rust-lang/rust/blob/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/librustc_mir/dataflow/impls/borrows.rs#L318\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/librustc_mir/dataflow/impls/borrows.rs#L318\">from at least 1.35</a>, which was before I worked on rust. You probably need to ask <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>.</p>",
        "id": 189071895,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582673222
    },
    {
        "content": "<p>Is the goal to eventually support unwinding out of <code>InlineAsm</code>?</p>",
        "id": 189072709,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582674001
    },
    {
        "content": "<p>Maybe in the future. The more immediate reason is to support diverging InlineAsm</p>",
        "id": 189072979,
        "sender_full_name": "Amanieu",
        "timestamp": 1582674258
    },
    {
        "content": "<p>But you want a \"success\" edge and an \"unwind\" edge like <code>Call</code>, correct?</p>",
        "id": 189073125,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582674411
    },
    {
        "content": "<p>Not really, just a success edge for now.</p>",
        "id": 189073233,
        "sender_full_name": "Amanieu",
        "timestamp": 1582674503
    },
    {
        "content": "<p>Here's the MIR part of the PR if you want to have a look: <a href=\"https://github.com/rust-lang/rust/pull/69171/commits/8d3b9ba81e2cebb0d2bc528ea523243723813ef9\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69171/commits/8d3b9ba81e2cebb0d2bc528ea523243723813ef9\">https://github.com/rust-lang/rust/pull/69171/commits/8d3b9ba81e2cebb0d2bc528ea523243723813ef9</a></p>",
        "id": 189073296,
        "sender_full_name": "Amanieu",
        "timestamp": 1582674586
    },
    {
        "content": "<p>If there's only ever one edge out of <code>InlineAsm</code>, does it need to be converted to a terminator as part of your PR? Or can it remain a statement for now?</p>",
        "id": 189073438,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582674707
    },
    {
        "content": "<p>I mean, I think it <em>should</em> ultimately be a terminator, but does it save work to make that change now as opposed to later?</p>",
        "id": 189073537,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582674775
    },
    {
        "content": "<p>Well I'm not using any of the existing InlineAsm code, it's more of a rewrite from scratch.</p>",
        "id": 189073705,
        "sender_full_name": "Amanieu",
        "timestamp": 1582674923
    },
    {
        "content": "<p>The old InlineAsm was renamed to LlvmInlineAsm (see first commit)</p>",
        "id": 189073718,
        "sender_full_name": "Amanieu",
        "timestamp": 1582674938
    },
    {
        "content": "<p>Since this is a rewrite, I figured it may as well be done properly.</p>",
        "id": 189073734,
        "sender_full_name": "Amanieu",
        "timestamp": 1582674957
    },
    {
        "content": "<p>Ah, that's fine. I suspect that there are places where <code>InlineAsm</code> is not handled correctly in the existing code. I can't help you with <code>Borrows</code> unfortunately, but feel free to ask about other dataflow places. As long as <code>InlineAsm</code> only has one outgoing edge it should be pretty much equivalent to the statement version as far as dataflow is concerned.</p>",
        "id": 189074107,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582675252
    },
    {
        "content": "<p>If <code>InlineAsm</code> were to have multiple outgoing edges and the edge that was taken determined which outputs were assigned to, you would need to make changes to the dataflow API.</p>",
        "id": 189074329,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582675543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Could you have a quick look at <code>src/librustc_mir/dataflow/impls/borrows.rs</code>? I <em>think</em> <code>call_return_effect</code> needs to call <code>self.kill_borrows_on_place</code>, like StatementKind::Assign does, but I'm not very familiar with what the code does.</p>",
        "id": 189099729,
        "sender_full_name": "Amanieu",
        "timestamp": 1582711079
    },
    {
        "content": "<p>yeah I'll try to take a look today, thanks for your investigation so far.</p>",
        "id": 189126295,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582732081
    }
]