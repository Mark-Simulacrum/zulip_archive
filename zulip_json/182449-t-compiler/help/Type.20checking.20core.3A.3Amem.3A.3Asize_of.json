[
    {
        "content": "<p><code>core::mem::size_of</code> requires the argument to have <code>Sized</code> bound, which makes sense, but I can't see that bound in the definition of the function:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[inline(always)]\n#[stable(feature = &quot;rust1&quot;, since = &quot;1.0.0&quot;)]\n#[rustc_promotable]\n#[rustc_const_stable(feature = &quot;const_size_of&quot;, since = &quot;1.32.0&quot;)]\npub const fn size_of&lt;T&gt;() -&gt; usize {\n    intrinsics::size_of::&lt;T&gt;()\n}\n</code></pre></div>\n<p>I have two questions:</p>\n<ul>\n<li>Why do we not have <code>T: Sized</code> bound here?</li>\n<li>How are uses of this function type checked currently?</li>\n</ul>\n<p>I also tried this:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn test&lt;F&gt;(f: F)\nwhere\n    F: Fn() -&gt; usize,\n{\n    println!(&quot;{}&quot;, f());\n}\n\nfn main() {\n    test(core::mem::size_of::&lt;usize&gt;);\n    test(core::mem::size_of::&lt;dyn core::fmt::Debug&gt;);\n}\n</code></pre></div>\n<p>The second <code>test</code> call fails with</p>\n<div class=\"codehilite\"><pre><span></span><code>   --&gt; test.rs:10:10\n    |\n10  |     test(core::mem::size_of::&lt;dyn core::fmt::Debug&gt;);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n    |\n</code></pre></div>\n<p>I'm a bit surprised by this because the error is not in the type argument of <code>size_of</code> but rather it's the entire <code>size_of</code> function/closure. I don't understand why it's not sized.</p>\n<p>Could anyone point me to the relevant code in the compiler on how type checking <code>size_of</code> works?</p>",
        "id": 223815931,
        "sender_full_name": "osa1",
        "timestamp": 1611497740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> <code>T: Sized</code> is on by default unless you opt-out with <code>T: ?Sized</code></p>",
        "id": 223816020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611497839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  Ahh, right.. Thanks.</p>",
        "id": 223816086,
        "sender_full_name": "osa1",
        "timestamp": 1611497917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> any ideas about the type error in the second <code>test</code> call in my example?</p>",
        "id": 223816117,
        "sender_full_name": "osa1",
        "timestamp": 1611498000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> I don't know where it's emitted, but it's for the same reason: <code>test&lt;F&gt;</code> has an implicit <code>F: Sized</code> bound</p>",
        "id": 223816160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611498036
    },
    {
        "content": "<p>and really the question doesn't make sense in the first place: You <em>can't</em> know the size of a DST, that's the reason it's 'dynamically sized'</p>",
        "id": 223816174,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611498066
    },
    {
        "content": "<p>do you want to know <code>size_of&lt;&amp;dyn Debug&gt;</code>?</p>",
        "id": 223816180,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611498080
    },
    {
        "content": "<p>No, I understand that the program should fail. I'm confused by the way it fails. I'd expect the error span to be the <code>dyn core::fmt::Debug</code> part, not the whole <code>test</code> argument.</p>",
        "id": 223816192,
        "sender_full_name": "osa1",
        "timestamp": 1611498107
    },
    {
        "content": "<p>oh that's probably just bad error reporting <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 223816241,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611498137
    },
    {
        "content": "<p>I'd expect this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    |\n10  |     test(core::mem::size_of::&lt;dyn core::fmt::Debug&gt;);\n    |                               ^^^^^^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n    |\n</code></pre></div>",
        "id": 223816243,
        "sender_full_name": "osa1",
        "timestamp": 1611498160
    },
    {
        "content": "<p>Worth reporting?</p>",
        "id": 223816269,
        "sender_full_name": "osa1",
        "timestamp": 1611498232
    },
    {
        "content": "<p>sure, seems reasonable</p>",
        "id": 223816319,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611498274
    },
    {
        "content": "<p>Hmm, nvm, I think the error message is fine, especially if you read the whole thing:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --&gt; test.rs:10:10\n    |\n10  |     test(core::mem::size_of::&lt;dyn core::fmt::Debug&gt;);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n    |\n   ::: /home/omer/rust/rust/library/core/src/mem/mod.rs:309:22\n    |\n309 | pub const fn size_of&lt;T&gt;() -&gt; usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n</code></pre></div>\n<p>The second message points at the <code>size_of</code>'s type argument.</p>",
        "id": 223816499,
        "sender_full_name": "osa1",
        "timestamp": 1611498584
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/zfrjce\">https://rust.godbolt.org/z/zfrjce</a> looks like dyn-s lose some info somewhere</p>",
        "id": 223816656,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611498786
    },
    {
        "content": "<p>On a somewhat related note, I wish <code>rustc_on_unimplemented</code> had a userspace alternative <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 223817254,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611499709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"334260\">Dániel Buga</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Type.20checking.20core.3A.3Amem.3A.3Asize_of/near/223817254\">said</a>:</p>\n<blockquote>\n<p>On a somewhat related note, I wish <code>rustc_on_unimplemented</code> had a userspace alternative :(</p>\n</blockquote>\n<p><a href=\"https://jyn514.github.io/2020/09/05/Rust-in-2021.html\">me too</a></p>",
        "id": 223817263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611499735
    },
    {
        "content": "<p>Hmm, this is one of those places where it might be interesting if <code>!Sized</code> were auto-implemented.  Would be nice to say more strongly in that <code>help</code> that not only is it \"not [currently] implemented\", but that \"it explicitly cannot be implemented\".</p>\n<p>(AKA now that the query isn't just Yes/Maybe but Yes/Maybe/No, the sized query could return No for <code>dyn Trait</code>.)</p>",
        "id": 223823362,
        "sender_full_name": "scottmcm",
        "timestamp": 1611507558
    }
]