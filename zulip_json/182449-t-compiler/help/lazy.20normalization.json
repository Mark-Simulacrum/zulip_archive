[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71973\" title=\"https://github.com/rust-lang/rust/pull/71973\">https://github.com/rust-lang/rust/pull/71973</a></p>\n<p>I am currently trying to remove <code>lazy_normalization_consts</code> by checking the <code>const_generics</code> flag instead.</p>",
        "id": 196926011,
        "sender_full_name": "lcnr",
        "timestamp": 1588959198
    },
    {
        "content": "<p>Doing this lead to a stack overflow for the following test:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">//~^ ERROR expected value, found type parameter `T`</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">]</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196926036,
        "sender_full_name": "lcnr",
        "timestamp": 1588959221
    },
    {
        "content": "<p>With the following cycle:</p>\n<div class=\"codehilite\"><pre><span></span><code>[DEBUG rustc_infer::infer::resolve] OpportunisticVarResolver::fold_const(Const { ty: usize, val: Unevaluated(DefId(0:7 ~ issue_69654[317d]::{{impl}}[0]::{{constant}}[0]), [_], None) })\n[DEBUG rustc_infer::infer::resolve] OpportunisticVarResolver::fold_ty(usize)\n[DEBUG rustc_infer::infer::resolve] OpportunisticVarResolver::fold_ty(_)\n[DEBUG rustc_infer::infer::resolve] OpportunisticVarResolver::fold_ty(())\n</code></pre></div>",
        "id": 196926122,
        "sender_full_name": "lcnr",
        "timestamp": 1588959243
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have an idea where this might come from?</p>",
        "id": 196926620,
        "sender_full_name": "lcnr",
        "timestamp": 1588959508
    },
    {
        "content": "<p>Or more generally, how to debug this further</p>",
        "id": 196926638,
        "sender_full_name": "lcnr",
        "timestamp": 1588959521
    },
    {
        "content": "<p>This somehow creates an unevaluated const which has itself as a subst afaict</p>",
        "id": 196927186,
        "sender_full_name": "lcnr",
        "timestamp": 1588959795
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_infer/infer/resolve.rs#L40\" title=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_infer/infer/resolve.rs#L40\">https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_infer/infer/resolve.rs#L40</a><br>\nShould we short circuit here due to lazy normalization?</p>",
        "id": 196927526,
        "sender_full_name": "lcnr",
        "timestamp": 1588959954
    },
    {
        "content": "<p>^ That doesn't work <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 196928025,
        "sender_full_name": "lcnr",
        "timestamp": 1588960193
    },
    {
        "content": "<p>Will look at Const::Unevaluated creation for now</p>",
        "id": 196928714,
        "sender_full_name": "lcnr",
        "timestamp": 1588960527
    },
    {
        "content": "<p>oh no, <code>type_of</code> is probably at fault here <span aria-label=\"distraught\" class=\"emoji emoji-1f629\" role=\"img\" title=\"distraught\">:distraught:</span> I was actually the one who introduced this incorrect behavior :/ fu</p>",
        "id": 196943243,
        "sender_full_name": "lcnr",
        "timestamp": 1588967863
    },
    {
        "content": "<p>type_of?</p>",
        "id": 196946268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588969476
    },
    {
        "content": "<p>that  is, the test is not using <code>type_of</code></p>",
        "id": 196946295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588969495
    },
    {
        "content": "<p>(right?)</p>",
        "id": 196946299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588969500
    },
    {
        "content": "<p>This type of <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>  <a href=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/collect/type_of.rs#L273\" title=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/collect/type_of.rs#L273\">https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/collect/type_of.rs#L273</a></p>",
        "id": 196946343,
        "sender_full_name": "lcnr",
        "timestamp": 1588969539
    },
    {
        "content": "<p>Some Node::Ty's have <code>Some(Res::Err)</code> without having an actual error, which is why I added this filter here</p>",
        "id": 196946526,
        "sender_full_name": "lcnr",
        "timestamp": 1588969652
    },
    {
        "content": "<p><code>Res::Err</code> without an actual error sounds like a bug in resolve/hir construction...</p>",
        "id": 196946769,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1588969790
    },
    {
        "content": "<p>agreed</p>",
        "id": 196946880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588969832
    },
    {
        "content": "<p>Hm, we currently create a lot of <code>Res::Err</code> without an associated <code>delay_span_bug</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> So while I agree,<br>\nI wasn't able to fix it</p>",
        "id": 196946953,
        "sender_full_name": "lcnr",
        "timestamp": 1588969867
    },
    {
        "content": "<p>Bad news, <code>Node::Ty</code> aren't the only problem.</p>",
        "id": 196948206,
        "sender_full_name": "lcnr",
        "timestamp": 1588970560
    },
    {
        "content": "<p>for example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"c1\">//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">l</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">r</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">l</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">r</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&lt;</span><span class=\"mi\">123</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">l</span>::<span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&lt;</span><span class=\"mi\">123</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">r</span>::<span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Has an incorrect <code>Res</code> as well:</p>\n<div class=\"codehilite\"><pre><span></span><code>PathSegment {\n    ident: A#0,\n    hir_id: Some(HirId {\n        owner: DefId(0:10 ~ types_mismatch_const_args[317d]::a[0]), local_id: 27\n    }),\n    res: Some(Err),\n....\n</code></pre></div>",
        "id": 196948321,
        "sender_full_name": "lcnr",
        "timestamp": 1588970629
    },
    {
        "content": "<p>Would it be a  good idea to add a token with a private constructor to all these error variants?<br>\nSimilar to what I am doing here <a href=\"https://github.com/lcnr/computer/blob/8b8681dc83ca2df24e7d5bc5e1c96c9673ebd6a8/boulder/diagnostics/src/lib.rs#L20\" title=\"https://github.com/lcnr/computer/blob/8b8681dc83ca2df24e7d5bc5e1c96c9673ebd6a8/boulder/diagnostics/src/lib.rs#L20\">https://github.com/lcnr/computer/blob/8b8681dc83ca2df24e7d5bc5e1c96c9673ebd6a8/boulder/diagnostics/src/lib.rs#L20</a></p>",
        "id": 196949552,
        "sender_full_name": "lcnr",
        "timestamp": 1588971294
    },
    {
        "content": "<p>I have to admit I'm kind of confused as to what is going on here</p>",
        "id": 196950416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588971789
    },
    {
        "content": "<p>I'd have to read more into the code to understand what I think is the right solution</p>",
        "id": 196950425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588971796
    },
    {
        "content": "<p>This is something I should be able to either fix myself, or at least get far enough to be certain where this failure comes from.</p>\n<p>If my current thinking is correct this will be both hard to fix and somewhat orthogonal to lazy normalization.<br>\nIMO it may be best to disable this test for now and solve this problem afterwards in this case</p>",
        "id": 196950992,
        "sender_full_name": "lcnr",
        "timestamp": 1588972191
    },
    {
        "content": "<p><code>Res::Err</code> is not actually the culprit here.<br>\nWhich is both good, because we can fix this bug as part of this PR, and bad, because I still haven't done so <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <br>\nI believe it's a wrong interaction here <a href=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_middle/ty/sty.rs#L2280\" title=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_middle/ty/sty.rs#L2280\">https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_middle/ty/sty.rs#L2280</a></p>\n<p>While creates a <code>ConstKind::Unevaluated</code> with a subst which indirectly references itself.<br>\nWill look into this further tomorrow</p>",
        "id": 196960097,
        "sender_full_name": "lcnr",
        "timestamp": 1588978865
    },
    {
        "content": "<blockquote>\n<p>Would it be a good idea to add a token with a private constructor to all these error variants?</p>\n</blockquote>\n<p>(aside: I'm actually doing this for <code>TyKind::Error</code> in <a href=\"https://github.com/rust-lang/rust/issues/70551\" title=\"https://github.com/rust-lang/rust/issues/70551\">#70551</a>)</p>",
        "id": 196960126,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588978901
    },
    {
        "content": "<blockquote>\n<p>I believe it's a wrong interaction here <a href=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_middle/ty/sty.rs#L2280\" title=\"https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_middle/ty/sty.rs#L2280\">https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_middle/ty/sty.rs#L2280</a></p>\n</blockquote>\n<p>tbh I don't know where this problem comes from <span aria-label=\"distraught\" class=\"emoji emoji-1f629\" role=\"img\" title=\"distraught\">:distraught:</span></p>\n<p>Somewhat minimized (this has a stack overflow):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">7</span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196984126,
        "sender_full_name": "lcnr",
        "timestamp": 1589019379
    },
    {
        "content": "<p>This does not:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// ^ removing the braces around 7</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>edit: probably because we special case literals in <code>from_anon_const</code> and this<br>\nbug requires the impl to contain a <code>ConstKind::Unevaluated</code></p>",
        "id": 196984132,
        "sender_full_name": "lcnr",
        "timestamp": 1589019404
    },
    {
        "content": "<p>And this also works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features, unused_braces)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"mi\">7</span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"mi\">7</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>::<span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ^ turbofish to the rescue</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196984234,
        "sender_full_name": "lcnr",
        "timestamp": 1589019602
    },
    {
        "content": "<p>I believe that the lowering <code>hir -&gt; Ty/Const</code> is not at fault here but don't really know how to progress further here.</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> can you help me out here or are you fine with disabling this test for now?</p>",
        "id": 196990075,
        "sender_full_name": "lcnr",
        "timestamp": 1589028320
    },
    {
        "content": "<p>might be related to <a href=\"https://github.com/rust-lang/rust/issues/68104\" title=\"https://github.com/rust-lang/rust/issues/68104\">https://github.com/rust-lang/rust/issues/68104</a></p>",
        "id": 197010558,
        "sender_full_name": "lcnr",
        "timestamp": 1589055411
    },
    {
        "content": "<p>I'm happy to disable tests involving specialisation for const parameters for now: there are unanswered questions about how exactly it should work, and we definitely haven't put any effort into deliberately making it work yet.</p>",
        "id": 197053760,
        "sender_full_name": "varkor",
        "timestamp": 1589115076
    },
    {
        "content": "<p>What's the best way to do this? Should I just remove the test in my PR and open an issue for it?</p>",
        "id": 197056713,
        "sender_full_name": "lcnr",
        "timestamp": 1589118830
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/_SP9KETJ8U9QMz_QrLADLUal/Screenshot-from-2020-05-17-10-46-37.png\">cursed</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/_SP9KETJ8U9QMz_QrLADLUal/Screenshot-from-2020-05-17-10-46-37.png\" title=\"cursed\"><img src=\"/user_uploads/4715/_SP9KETJ8U9QMz_QrLADLUal/Screenshot-from-2020-05-17-10-46-37.png\"></a></div>",
        "id": 197838209,
        "sender_full_name": "lcnr",
        "timestamp": 1589705264
    }
]