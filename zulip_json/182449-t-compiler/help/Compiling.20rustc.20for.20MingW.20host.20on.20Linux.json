[
    {
        "content": "<p>Hi,</p>\n<p>I'm compiling rustc 1.51.0 on Ubuntu 18.04 and the config.toml contains</p>\n<div class=\"codehilite\"><pre><span></span><code>target = [&quot;aarch64-unknown-linux-gnu&quot;, &quot;x86_64-pc-windows-gnu&quot;]\nhost = [&quot;x86_64-pc-windows-gnu&quot;]\nbuild = &quot;x86_64-unknown-linux-gnu&quot;\n</code></pre></div>\n<p>With this, my goal is to  produce a cross compiler that could be executed on Windows natively, use GNU toolchain and produce ARM64 binaries.</p>\n<p>At some point, it wants to rebuild LLVM and dies with</p>\n<div class=\"codehilite\"><pre><span></span><code>/usr/bin/x86_64-w64-mingw32-g++  -DGTEST_HAS_RTTI=0 -D_FILE_OFFSET_BITS=64 -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Ilib/Support -I/repo/rust/src/llvm-project/llvm/lib/Support -Iinclude\n-I/repo/rust/src/llvm-project/llvm/include -ffunction-sections -fdata-sections -m64 -Wa,-mbig-obj -Werror=date-time -Wall -Wextra -Wno-unused-parameter -Wwrite-strings -Wcast-qual -Wno-missing-field-initializers -pedantic -Wno-long-long -Wimplicit-fallthrough -Wno-maybe-uninitialized -Wno-noexcept-type -Wdelete-non-virtual-dtor -Wno-comment  -O2 -DNDEBUG   -std=c++14  -fno-exceptions -fno-rtti -MD -MT lib/Support/CMakeFiles/LLVMSupport.dir/CodeGenCoverage.cpp.obj -MF lib/Support/CMakeFiles/LLVMSupport.dir/CodeGenCoverage.cpp.obj.d -o lib/Support/CMakeFiles/LLVMSupport.dir/CodeGenCoverage.cpp.obj -c /repo/rust/src/llvm-project/llvm/lib/Support/CodeGenCoverage.cpp\nIn file included from /repo/rust/src/llvm-project/llvm/lib/Support/CodeGenCoverage.cpp:17:0:\n/repo/rust/src/llvm-project/llvm/include/llvm/Support/Mutex.h:29:12: error: ‘recursive_mutex’ in namespace ‘std’ does not name a type\n       std::recursive_mutex impl;\n            ^~~~~~~~~~~~~~~\n/repo/rust/src/llvm-project/llvm/include/llvm/Support/Mutex.h: In member function ‘bool llvm::sys::SmartMutex&lt;mt_only&gt;::lock()’:\n/repo/rust/src/llvm-project/llvm/include/llvm/Support/Mutex.h:35:11: error: ‘impl’ was not declared in this scope\n           impl.lock();\n</code></pre></div>\n<p>I'd appreciate any help understanding and fixing this. I've also seen there's rust-mingw, but  i don't seem to find any documentation on how to build or use it, maybe that would be the correct way.</p>\n<p>Thanks!</p>",
        "id": 235373633,
        "sender_full_name": "weltling",
        "timestamp": 1618936111
    },
    {
        "content": "<p>What does <code>/usr/bin/x86_64-w64-mingw32-g++ -v</code> give as version?</p>",
        "id": 235374071,
        "sender_full_name": "bjorn3",
        "timestamp": 1618936261
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ /usr/bin/x86_64-w64-mingw32-g++ --version\nx86_64-w64-mingw32-g++ (GCC) 7.3-win32 20180312\n</code></pre></div>",
        "id": 235374425,
        "sender_full_name": "weltling",
        "timestamp": 1618936390
    },
    {
        "content": "<p>The regular one is </p>\n<div class=\"codehilite\"><pre><span></span><code>gcc --version\ngcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\n</code></pre></div>",
        "id": 235374793,
        "sender_full_name": "weltling",
        "timestamp": 1618936517
    },
    {
        "content": "<p>It seems to be new enough.</p>",
        "id": 235375859,
        "sender_full_name": "bjorn3",
        "timestamp": 1618936957
    },
    {
        "content": "<p>The point is also - the regular <code>gcc</code> builds that fine, but MingW fails. Maybe that is what happens.</p>\n<p>Thanks</p>",
        "id": 235377630,
        "sender_full_name": "weltling",
        "timestamp": 1618937650
    },
    {
        "content": "<p>I now also tried to use the system LLVM by adding for all targets things like:</p>\n<div class=\"codehilite\"><pre><span></span><code>[target.x86_64-unknown-linux-gnu]\nllvm-config = &quot;/usr/bin/llvm-config-10&quot;\n</code></pre></div>\n<p>And attaching <code>--llvm-skip-rebuild</code> to the command:</p>\n<p><code>python3 src/bootstrap/bootstrap.py build --stage 2 -j24 --verbose --llvm-skip-rebuild TRUE</code></p>\n<p>There is another error,  but apparently it still tries to rebuild LLVM for host:</p>\n<div class=\"codehilite\"><pre><span></span><code>running: &quot;x86_64-w64-mingw32-g++&quot; &quot;-O3&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-m64&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-m64&quot; &quot;-I/usr/lib/llvm-10/include&quot; &quot;-std=c++14&quot; &quot;-fno-exceptions&quot; &quot;-D_GNU_SOURCE&quot; &quot;-D__STDC_CONSTANT_MACROS&quot; &quot;-D__STDC_FORMAT_MACROS&quot; &quot;-D__STDC_LIMIT_MACROS&quot; &quot;-DLLVM_COMPONENT_AARCH64&quot; &quot;-DLLVM_COMPONENT_AMDGPU&quot; &quot;-DLLVM_COMPONENT_ARM&quot; &quot;-DLLVM_COMPONENT_ASMPARSER&quot; &quot;-DLLVM_COMPONENT_AVR&quot; &quot;-DLLVM_COMPONENT_BITREADER&quot; &quot;-DLLVM_COMPONENT_BITWRITER&quot; &quot;-DLLVM_COMPONENT_COVERAGE&quot; &quot;-DLLVM_COMPONENT_HEXAGON&quot; &quot;-DLLVM_COMPONENT_INSTRUMENTATION&quot; &quot;-DLLVM_COMPONENT_IPO&quot; &quot;-DLLVM_COMPONENT_LINKER&quot; &quot;-DLLVM_COMPONENT_LTO&quot; &quot;-DLLVM_COMPONENT_MIPS&quot; &quot;-DLLVM_COMPONENT_MSP430&quot; &quot;-DLLVM_COMPONENT_NVPTX&quot; &quot;-DLLVM_COMPONENT_POWERPC&quot; &quot;-DLLVM_COMPONENT_RISCV&quot; &quot;-DLLVM_COMPONENT_SPARC&quot; &quot;-DLLVM_COMPONENT_SYSTEMZ&quot; &quot;-DLLVM_COMPONENT_WEBASSEMBLY&quot; &quot;-DLLVM_COMPONENT_X86&quot; &quot;-DNDEBUG&quot; &quot;-o&quot; &quot;/repo/rust/build/x86_64-unknown-linux-gnu/stage1-rustc/x86_64-pc-windows-gnu/release/build/rustc_llvm-09ac7aac62567d42/out/llvm-wrapper/PassWrapper.o&quot; &quot;-c&quot; &quot;llvm-wrapper/PassWrapper.cpp&quot;\n  cargo:warning=In file included from /usr/lib/llvm-10/include/llvm/Support/VirtualFileSystem.h:25:0,\n  cargo:warning=                 from /usr/lib/llvm-10/include/llvm/Support/CommandLine.h:34,\n  cargo:warning=                 from llvm-wrapper/LLVMWrapper.h:14,\n  cargo:warning=                 from llvm-wrapper/PassWrapper.cpp:6:\n  cargo:warning=/usr/lib/llvm-10/include/llvm/Support/FileSystem.h:164:3: error: ‘uid_t’ does not name a type; did you mean ‘pid_t’?\n  cargo:warning=   uid_t fs_st_uid = 0;\n  cargo:warning=   ^~~~~\n</code></pre></div>\n<p>At this point - perhaps someone could also point to the build scripts used for the official build? That might help to learn and replicate that setup.</p>\n<p>Thanks!</p>",
        "id": 235382486,
        "sender_full_name": "weltling",
        "timestamp": 1618939646
    },
    {
        "content": "<p>You need to use <code>[target.x86_64-pc-windows-gnu]</code> here instead of <code>[target.x86_64-unknown-linux-gnu]</code>.</p>",
        "id": 235383570,
        "sender_full_name": "bjorn3",
        "timestamp": 1618940065
    },
    {
        "content": "<p>Yeah, i actually used it for all of them. My current <code>config.toml</code>, should have posted it in the initial post:</p>\n<div class=\"codehilite\"><pre><span></span><code>changelog-seen = 2\n\n[target.aarch64-unknown-linux-gnu]\nllvm-config = &quot;/usr/bin/llvm-config-10&quot;\n\n[target.x86_64-pc-windows-gnu]\nllvm-config = &quot;/usr/bin/llvm-config-10&quot;\n\n[target.x86_64-unknown-linux-gnu]\nllvm-config = &quot;/usr/bin/llvm-config-10&quot;\n\n[rust]\nrpath = true\nchannel = &quot;stable&quot;\noptimize = true\n\n[build]\nsubmodules = false\ndocs = false\nvendor = true\ntarget = [&quot;aarch64-unknown-linux-gnu&quot;, &quot;x86_64-pc-windows-gnu&quot;]\nhost = [&quot;x86_64-pc-windows-gnu&quot;]\nbuild = &quot;x86_64-unknown-linux-gnu&quot;\n</code></pre></div>\n<p>Thanks</p>",
        "id": 235384230,
        "sender_full_name": "weltling",
        "timestamp": 1618940295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395246\">@weltling</span> I've been working on something rather similar recently (also cross compiling linux -&gt; windows for producing a compiler that can target aarch64, what are the odds :P), the fix is actually rather simple! The problem is that by default mingw uses <code>x86_64-w64-mingw32-g++-win32</code>, which does not have pthreads support (and afaik MinGW without pthreads doesn't have std::mutex implemented currently). In order to fix this on debian systems you can use the following commands:</p>\n<div class=\"codehilite\"><pre><span></span><code>sudo update-alternatives --config x86_64-w64-mingw32-g++\nsudo update-alternatives --config x86_64-w64-mingw32-gcc\nsudo update-alternatives --config i686-w64-mingw32-g++\nsudo update-alternatives --config i686-w64-mingw32-gcc\n</code></pre></div>\n<p>and for each one select the option that ends in <code>-posix</code>. For example <code>x86_64-w64-mingw32-g++</code> has <code>/usr/bin/x86_64-w64-mingw32-g++-posix</code> as an option.</p>",
        "id": 239926151,
        "sender_full_name": "jam1garner",
        "timestamp": 1621748322
    }
]