[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> What kind of codegen test did you have in mind?</p>",
        "id": 276215517,
        "sender_full_name": "Jubilee",
        "timestamp": 1647966285
    },
    {
        "content": "<p>Ah, hm, I'm not sure if codegen test in particular is a best option, but at the very least a regression test for the issues being fixed would be good.</p>",
        "id": 276215908,
        "sender_full_name": "nagisa",
        "timestamp": 1647966447
    },
    {
        "content": "<p>Ah, to make sure code invoking <code>#[target_feature(enable = \"+neon\")]</code> continues to compile? Yeah I can do that.</p>",
        "id": 276216275,
        "sender_full_name": "Jubilee",
        "timestamp": 1647966571
    },
    {
        "content": "<p>AFAICT there are two things that are going wrong: one is us setting wrong <code>target_feature</code>s and another that we don’t allow code in <a href=\"https://github.com/rust-lang/rust/issues/95002\">https://github.com/rust-lang/rust/issues/95002</a> to build. AFAIU what this PR achieves is ensuring that the superfluous cfgs don't get set and also that the code from <a href=\"https://github.com/rust-lang/rust/issues/95002\">#95002</a> does build.</p>",
        "id": 276216464,
        "sender_full_name": "nagisa",
        "timestamp": 1647966628
    },
    {
        "content": "<p>Correct.</p>",
        "id": 276216700,
        "sender_full_name": "Jubilee",
        "timestamp": 1647966714
    },
    {
        "content": "<p>re:</p>\n<blockquote>\n<p>This change alters the behaviour of the function entirely. Previously it was returning the rust view of the target features (some of which use different names, and some of which have mapping that's not 1:1), and now it'll return a list of the backend feature names.</p>\n</blockquote>\n<p>So on that, my understanding of the bug that crept in is that on the last change, it became the case that the smallvec that was being returned included \"neon\", which always matched.</p>",
        "id": 276217202,
        "sender_full_name": "Jubilee",
        "timestamp": 1647966920
    },
    {
        "content": "<p>And my understanding was that normalizing to the LLVM features that way was acceptable because this is the function used to implement applying the target features during codegen.</p>",
        "id": 276219859,
        "sender_full_name": "Jubilee",
        "timestamp": 1647967959
    },
    {
        "content": "<p><code>target_features</code> is _also_ used to produce the <code>cfg</code> variables (here I think: <a href=\"https://github.com/rust-lang/rust/blob/3ea44938e21f0de8ae7d4f6399a8a30f97867c70/compiler/rustc_interface/src/util.rs#L51\">https://github.com/rust-lang/rust/blob/3ea44938e21f0de8ae7d4f6399a8a30f97867c70/compiler/rustc_interface/src/util.rs#L51</a>). And that one mustn't let backend feature names leak through.</p>",
        "id": 276221469,
        "sender_full_name": "nagisa",
        "timestamp": 1647968574
    },
    {
        "content": "<p>in isolation <code>to_llvm_features</code> is doing the right thing, but returning anything related to the backend feature names from <code>target_features</code> is incorrect.</p>",
        "id": 276221617,
        "sender_full_name": "nagisa",
        "timestamp": 1647968636
    },
    {
        "content": "<p>In short the following test must pass:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// compile-flags: -Ctarget-features=+rdrand --target=x86_64-unknown-linux-gnu</span>\n<span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n<span class=\"c1\">//...</span>\n<span class=\"n\">static_assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"o\">=</span><span class=\"s\">\"rdrand\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">static_assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"o\">=</span><span class=\"s\">\"rdrnd\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And the following must pass as well:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// compile-flags: -Ctarget-features=+sse4.2 --target=x86_64-unknown-linux-gnu</span>\n<span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n<span class=\"c1\">//...</span>\n<span class=\"n\">static_assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"o\">=</span><span class=\"s\">\"sse4.2\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">static_assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"o\">=</span><span class=\"s\">\"crc32\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276222208,
        "sender_full_name": "nagisa",
        "timestamp": 1647968835
    },
    {
        "content": "<p>Hmmmm.</p>",
        "id": 276222769,
        "sender_full_name": "Jubilee",
        "timestamp": 1647969036
    },
    {
        "content": "<p>(these would be good tests to add as well, and since <a href=\"https://github.com/rust-lang/rust/pull/90621\">https://github.com/rust-lang/rust/pull/90621</a> failed to add any for the <code>f32mm</code>, <code>f64mm</code>... codegen tests for these would be great too)</p>",
        "id": 276222835,
        "sender_full_name": "nagisa",
        "timestamp": 1647969063
    },
    {
        "content": "<p>Okay gonna add those regression tests yeah.</p>",
        "id": 276222844,
        "sender_full_name": "Jubilee",
        "timestamp": 1647969068
    },
    {
        "content": "<p>(like, checking that <code>-Ctarget-feature=+f32mm</code> actually enables everything that it should enable on LLVM side of things)</p>",
        "id": 276222923,
        "sender_full_name": "nagisa",
        "timestamp": 1647969100
    },
    {
        "content": "<p>From the fix perspective, IIRC the decision to filter <a href=\"https://github.com/rust-lang/rust/blob/3ea44938e21f0de8ae7d4f6399a8a30f97867c70/compiler/rustc_codegen_llvm/src/llvm_util.rs#L242-L248\">here</a> like “any” would rather than “all” was pretty arbitrary.</p>",
        "id": 276223221,
        "sender_full_name": "nagisa",
        "timestamp": 1647969224
    },
    {
        "content": "<p>so I think just changing the logic here from any to all might work out well. Basically the idea was that with <code>-Ctarget-cpu=native</code> you'd get rust features enabled if some subset of the llvm features were enabled, but that sounds silly now that I've written it out.</p>",
        "id": 276223446,
        "sender_full_name": "nagisa",
        "timestamp": 1647969314
    },
    {
        "content": "<p>thonking</p>",
        "id": 276223471,
        "sender_full_name": "Jubilee",
        "timestamp": 1647969336
    },
    {
        "content": "<p>Alright, I think I got everything working, yeah.</p>",
        "id": 276241124,
        "sender_full_name": "Jubilee",
        "timestamp": 1647976633
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// compile-flags: -Ctarget-feature=+sse4.2,+rdrand --target=x86_64-unknown-linux-gnu</span>\n<span class=\"c1\">// build-pass</span>\n<span class=\"cp\">#![feature(core_intrinsics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(lang_items)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![no_std]</span><span class=\"w\"></span>\n<span class=\"cp\">#![crate_type = </span><span class=\"s\">\"rlib\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[panic_handler]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">panic</span><span class=\"p\">(</span><span class=\"n\">_info</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">core</span>::<span class=\"n\">panic</span>::<span class=\"n\">PanicInfo</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">abort</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"eh_personality\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">eh_personality</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">const_assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSERT</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"n\">ASSERT</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This checks that the rustc feature name is used, not the LLVM feature.</span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(target_feature = </span><span class=\"s\">\"rdrand\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RDRAND</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(not(target_feature = </span><span class=\"s\">\"rdrand\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RDRAND</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(target_feature = </span><span class=\"s\">\"rdrnd\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RDRND</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(not(target_feature = </span><span class=\"s\">\"rdrnd\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">RDRND</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">RDRAND</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">RDRND</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Likewise: We enable LLVM's crc32 feature, but treat it as simply sse4.2</span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(target_feature = </span><span class=\"s\">\"sse4.2\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SSE4_2</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(not(target_feature = </span><span class=\"s\">\"sse4.2\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SSE4_2</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(target_feature = </span><span class=\"s\">\"crc32\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CRC32</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(not(target_feature = </span><span class=\"s\">\"crc32\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CRC32</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">SSE4_2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">CRC32</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This... will be made much prettier with macros.</p>",
        "id": 276241297,
        "sender_full_name": "Jubilee",
        "timestamp": 1647976716
    },
    {
        "content": "<p>Can you use <code>cfg!(target_feature = \"...\")</code> instead of <code>#[cfg]</code>?</p>",
        "id": 276241418,
        "sender_full_name": "bjorn3",
        "timestamp": 1647976791
    },
    {
        "content": "<p>You also need <code>// needs-llvm-component: x86</code> I think. Don't know the exact syntax.</p>",
        "id": 276241523,
        "sender_full_name": "bjorn3",
        "timestamp": 1647976828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Testing.20.2Bneon.20sans.20.2Bfp.20is.20no-change/near/276241418\">said</a>:</p>\n<blockquote>\n<p>Can you use <code>cfg!(target_feature = \"...\")</code> instead of <code>#[cfg]</code>?</p>\n</blockquote>\n<p>Ah, yeah, I can. I tried before and it didn't work, but I think it was something else not working.</p>",
        "id": 276241872,
        "sender_full_name": "Jubilee",
        "timestamp": 1647977007
    },
    {
        "content": "<p>much nicer.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// compile-flags: -Ctarget-feature=+sse4.2,+rdrand --target=x86_64-unknown-linux-gnu</span>\n<span class=\"c1\">// needs-llvm-components: x86</span>\n<span class=\"c1\">// build-pass</span>\n<span class=\"cp\">#![feature(core_intrinsics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(lang_items)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![no_std]</span><span class=\"w\"></span>\n<span class=\"cp\">#![crate_type = </span><span class=\"s\">\"rlib\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">const_assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$x</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSERT</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$x</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"n\">ASSERT</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">check</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This checks that the rustc feature name is used, not the LLVM feature.</span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"rdrand\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"rdrnd\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Likewise: We enable LLVM's crc32 feature, but Rust says it's just no</span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"sse4.2\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">const_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"crc32\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276242087,
        "sender_full_name": "Jubilee",
        "timestamp": 1647977119
    },
    {
        "content": "<p>ugh, how do I specify a test needs to be cross-compiled with core appropriately?</p>",
        "id": 276243442,
        "sender_full_name": "Jubilee",
        "timestamp": 1647977784
    },
    {
        "content": "<p>You have to use <code>#![no_core]</code> for that and provide the respective lang items yourself.</p>",
        "id": 276243621,
        "sender_full_name": "bjorn3",
        "timestamp": 1647977880
    },
    {
        "content": "<p>hmm.</p>",
        "id": 276243716,
        "sender_full_name": "Jubilee",
        "timestamp": 1647977917
    },
    {
        "content": "<p>Or you can use <code>// only-x86-64</code>.</p>",
        "id": 276243717,
        "sender_full_name": "bjorn3",
        "timestamp": 1647977917
    },
    {
        "content": "<p>annoying.</p>",
        "id": 276243731,
        "sender_full_name": "Jubilee",
        "timestamp": 1647977924
    },
    {
        "content": "<p>right, I remember now,<br>\nmy problem was trying to use <code>cfg!</code> in <code>#![no_core]</code> doesn't work. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 276243965,
        "sender_full_name": "Jubilee",
        "timestamp": 1647978025
    },
    {
        "content": "<p><code>#[rustc_builtin_macro = \"cfg\"] macro_rules! cfg {}</code> or something like that.</p>",
        "id": 276244014,
        "sender_full_name": "bjorn3",
        "timestamp": 1647978052
    },
    {
        "content": "<p>ooh thanks.</p>",
        "id": 276244056,
        "sender_full_name": "Jubilee",
        "timestamp": 1647978076
    },
    {
        "content": "<p>oh and now I need to implement subtracting usize</p>",
        "id": 276244458,
        "sender_full_name": "Jubilee",
        "timestamp": 1647978270
    },
    {
        "content": "<p>lol. lmao.</p>",
        "id": 276244470,
        "sender_full_name": "Jubilee",
        "timestamp": 1647978277
    },
    {
        "content": "<p>You can take inspiration from <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/example/mini_core.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/master/example/mini_core.rs</a></p>",
        "id": 276244532,
        "sender_full_name": "bjorn3",
        "timestamp": 1647978319
    },
    {
        "content": "<p>This is what I use to test some cg_clif things without having to recompile the full standard library.</p>",
        "id": 276244571,
        "sender_full_name": "bjorn3",
        "timestamp": 1647978346
    },
    {
        "content": "<p>tests in the test/ui/ suite can't refer to each other via <code>extern</code> or all that, right?</p>",
        "id": 276246960,
        "sender_full_name": "Jubilee",
        "timestamp": 1647979482
    },
    {
        "content": "<p>You can use auxiliary crates. Basically put the crate source in a file inside the <code>auxiliary</code> directory of the directory in which the actual test is and then use <code>// aux-build:crate_source.rs</code> in the actual test.</p>",
        "id": 276247320,
        "sender_full_name": "bjorn3",
        "timestamp": 1647979664
    },
    {
        "content": "<p>ah cool cool.</p>",
        "id": 276247413,
        "sender_full_name": "Jubilee",
        "timestamp": 1647979692
    },
    {
        "content": "<p>I'm not sure if its worth to make the no-core if it takes significant effort to do so.</p>",
        "id": 276247755,
        "sender_full_name": "nagisa",
        "timestamp": 1647979871
    },
    {
        "content": "<p><code>only-x86</code> for complex cases is plenty okay. Sure it won't run if somebody is developing on ARM, but hey, maintaining an implementation of a subset of core for every test is also not a great proposition.</p>",
        "id": 276247879,
        "sender_full_name": "nagisa",
        "timestamp": 1647979923
    },
    {
        "content": "<p>(I could definitely see some sort of common file that you could <code>include!()</code> into tests though)</p>",
        "id": 276247940,
        "sender_full_name": "nagisa",
        "timestamp": 1647979956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> yeah I was going to use aux-build, and actually the case I wanted to handle is that I am on an x86 machine and I want to make sure aarch64 tests pass.</p>",
        "id": 276248163,
        "sender_full_name": "Jubilee",
        "timestamp": 1647980070
    },
    {
        "content": "<p>you could also avoid having to implement subtraction and <code>!</code> with something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"rust-intrinsics\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">abort</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_do_not_const_check]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">assert</span><span class=\"p\">(</span><span class=\"n\">cond</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">abort</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or some such.</p>",
        "id": 276248547,
        "sender_full_name": "nagisa",
        "timestamp": 1647980250
    },
    {
        "content": "<p>lmao</p>",
        "id": 276248576,
        "sender_full_name": "Jubilee",
        "timestamp": 1647980265
    },
    {
        "content": "<p>/me prototypes it in playground.</p>",
        "id": 276248803,
        "sender_full_name": "nagisa",
        "timestamp": 1647980384
    },
    {
        "content": "<p>apparently aux-build doesn't play nice with cross-compiling.</p>",
        "id": 276249030,
        "sender_full_name": "Jubilee",
        "timestamp": 1647980501
    },
    {
        "content": "<p>I did it!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![stable(feature = </span><span class=\"s\">\"test\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_builtin_macro]</span><span class=\"w\"></span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">cfg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$($cfg</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"sized\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"copy\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"rust-intrinsic\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[rustc_const_stable(feature = </span><span class=\"s\">\"test\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">unreachable</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">assert</span><span class=\"p\">(</span><span class=\"n\">cond</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">assert_not</span><span class=\"p\">(</span><span class=\"n\">cond</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">YES</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"sse2\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">NO</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">assert_not</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"sse4.1\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>replace the assert contents with other stuff.</p>",
        "id": 276250547,
        "sender_full_name": "nagisa",
        "timestamp": 1647981321
    },
    {
        "content": "<p>Oh nice.</p>",
        "id": 276250586,
        "sender_full_name": "Jubilee",
        "timestamp": 1647981348
    },
    {
        "content": "<p>I feel like you'll probably want to use revisions for this test to avoid having to replicate the supporting code multiple times between tests.</p>",
        "id": 276250810,
        "sender_full_name": "nagisa",
        "timestamp": 1647981464
    },
    {
        "content": "<p>yeaaaaaah.</p>",
        "id": 276250823,
        "sender_full_name": "Jubilee",
        "timestamp": 1647981473
    },
    {
        "content": "<p>/me wonders if revisions actually add any <code>cfg</code> variables for test to use...</p>",
        "id": 276250892,
        "sender_full_name": "nagisa",
        "timestamp": 1647981489
    },
    {
        "content": "<p>If you specify them, I think?</p>",
        "id": 276250911,
        "sender_full_name": "Jubilee",
        "timestamp": 1647981506
    },
    {
        "content": "<p>we do already by default: <a href=\"https://github.com/rust-lang/rust/blob/64137f0b15b752d0c734661dc713bcd140858320/src/tools/compiletest/src/runtest.rs#L601-L608\">https://github.com/rust-lang/rust/blob/64137f0b15b752d0c734661dc713bcd140858320/src/tools/compiletest/src/runtest.rs#L601-L608</a>!</p>",
        "id": 276251198,
        "sender_full_name": "nagisa",
        "timestamp": 1647981703
    },
    {
        "content": "<p>props to whoever had the foresight to add this specific function</p>",
        "id": 276251216,
        "sender_full_name": "nagisa",
        "timestamp": 1647981717
    },
    {
        "content": "<p>oh nice.</p>",
        "id": 276251507,
        "sender_full_name": "Jubilee",
        "timestamp": 1647981858
    },
    {
        "content": "<p>so that means a revision should be x86-64 or x86_64, I think, and another one should be aarch64...</p>",
        "id": 276251651,
        "sender_full_name": "Jubilee",
        "timestamp": 1647981936
    },
    {
        "content": "<p>yeah, it'd look probably something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// revisions: aarch64 x64</span>\n<span class=\"c1\">// [aarch64] compile-flags: ...</span>\n<span class=\"c1\">// [x64] compile-flags: ...</span>\n\n<span class=\"cm\">/* common supporting code here */</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[cfg(aarch64)]</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"someaarch64feat\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(x64)]</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAR</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"somex86feat\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>etc. You could also <code>cfg</code> based on <code>target_arch</code> and similar cfgs too, I guess.</p>",
        "id": 276251703,
        "sender_full_name": "nagisa",
        "timestamp": 1647981960
    },
    {
        "content": "<p>right.</p>",
        "id": 276251826,
        "sender_full_name": "Jubilee",
        "timestamp": 1647982012
    },
    {
        "content": "<p>nailed it (I think?)</p>",
        "id": 276261534,
        "sender_full_name": "Jubilee",
        "timestamp": 1647986897
    },
    {
        "content": "<p>One more question: isn't neon enabled by default?</p>",
        "id": 276261646,
        "sender_full_name": "nagisa",
        "timestamp": 1647986981
    },
    {
        "content": "<p>I think the test that verifies that <code>+sve2</code> implies <code>+neon</code> isn't really doing that in that case, since both of them are explicitly enabled.</p>",
        "id": 276261732,
        "sender_full_name": "nagisa",
        "timestamp": 1647987023
    },
    {
        "content": "<p>I think you'll want <code>-Ctarget-feature=-neon,+sve2</code> there.</p>",
        "id": 276261843,
        "sender_full_name": "nagisa",
        "timestamp": 1647987116
    },
    {
        "content": "<p>possibly.</p>",
        "id": 276262375,
        "sender_full_name": "Jubilee",
        "timestamp": 1647987519
    },
    {
        "content": "<p>odd. this whiffs?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(aarch64_sve2)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">check_sve2_includes_neon</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This checks that aarch64's sve2 includes neon...</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...and that we've managed to avoid turning neon on by default.</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">not</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"neon\"</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sve2_check</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[target_feature(enable = </span><span class=\"s\">\"sve2\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(aarch64_sve2)]</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sve2_check</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// assert!(cfg!(target_feature = \"neon\"));</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"sve2\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276263068,
        "sender_full_name": "Jubilee",
        "timestamp": 1647987940
    },
    {
        "content": "<p>Well whatever. I will return to that mystery another time. The simpler version works.</p>",
        "id": 276263641,
        "sender_full_name": "Jubilee",
        "timestamp": 1647988321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Testing.20.2Bneon.20sans.20.2Bfp.20is.20no-change/near/276263068\">said</a>:</p>\n<blockquote>\n<p>odd. this whiffs?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(aarch64_sve2)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">check_sve2_includes_neon</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This checks that aarch64's sve2 includes neon...</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...and that we've managed to avoid turning neon on by default.</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">not</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"neon\"</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sve2_check</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[target_feature(enable = </span><span class=\"s\">\"sve2\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg(aarch64_sve2)]</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sve2_check</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// assert!(cfg!(target_feature = \"neon\"));</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"fm\">cfg!</span><span class=\"p\">(</span><span class=\"n\">target_feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"sve2\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ha, this doesn't work, if you uncommend the neon assert in <code>sve2_check</code>, right? I can see why (it probably has everything to do with there being like a dozen different places and implementations all over the place all doing different things…)</p>",
        "id": 276263776,
        "sender_full_name": "nagisa",
        "timestamp": 1647988409
    },
    {
        "content": "<p>This is a genuine bug, but also would definitely be a preexisting one.</p>",
        "id": 276263871,
        "sender_full_name": "nagisa",
        "timestamp": 1647988451
    },
    {
        "content": "<p>Yeaaaah.</p>",
        "id": 276263897,
        "sender_full_name": "Jubilee",
        "timestamp": 1647988471
    }
]