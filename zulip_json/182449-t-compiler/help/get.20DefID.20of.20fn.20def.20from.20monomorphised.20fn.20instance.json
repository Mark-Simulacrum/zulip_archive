[
    {
        "content": "<p>Hi, if I have an <code>Instance</code> of a function which I know has the monomorphised substitutions, is there a way use that to get the <code>DefId</code> of the generic function which it was monomorphised from? Or is this information lost at this stage?</p>",
        "id": 273523186,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646068765
    },
    {
        "content": "<p><code>instance.def_id()</code>?</p>",
        "id": 273527190,
        "sender_full_name": "tm",
        "timestamp": 1646070418
    },
    {
        "content": "<p>But that gets the monomorphised DefId</p>",
        "id": 273527953,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646070728
    },
    {
        "content": "<p>I think I've explained this poorly, sorry. I've basically used <code>Instance::resolve</code> to go from a trait method's<code>def_id</code> to the actual instance. But I want to go back the other way, and get the <code>DefId</code> of the trait method from the <code>Instance</code>.</p>",
        "id": 273528109,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646070791
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 273533366,
        "sender_full_name": "bjorn3",
        "timestamp": 1646073009
    },
    {
        "content": "<p>The def id returned by <code>instance.def_id()</code> is the def id of the method inside the trait implementation.</p>",
        "id": 273533611,
        "sender_full_name": "bjorn3",
        "timestamp": 1646073100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Ok, how do I get from that to the def id of the trait method's definition?</p>",
        "id": 273533752,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646073164
    },
    {
        "content": "<p><code>tcx.trait_of_item(instance.def_id())</code> gives the def id of the trait I think.</p>",
        "id": 273533855,
        "sender_full_name": "bjorn3",
        "timestamp": 1646073223
    },
    {
        "content": "<p>It's returning <code>None</code> unfortunately. Does this only work if the trait def is from the same crate?</p>",
        "id": 273534436,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646073510
    },
    {
        "content": "<p>I don't know. I think I can't help you further.</p>",
        "id": 273535746,
        "sender_full_name": "bjorn3",
        "timestamp": 1646074180
    },
    {
        "content": "<p>No worries. Thanks anyway</p>",
        "id": 273539397,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646075799
    },
    {
        "content": "<p>This should definitely work. Try printing your def id and see what it actually points to</p>",
        "id": 273546502,
        "sender_full_name": "oli",
        "timestamp": 1646078914
    },
    {
        "content": "<p>Hi Oli, it prints <code>filename.rs::{impl#1}::trait_method)</code> so I'm guessing something went wrong because the trait name was replaced by <code>impl#1</code>. Maybe this could be because I'm doing this in the monomorphisation collector and it hasn't pulled in the trait yet?</p>",
        "id": 273547893,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646079625
    },
    {
        "content": "<p>the trait in question is a custom one I added to libcore</p>",
        "id": 273547969,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1646079666
    },
    {
        "content": "<p><code>impl#1</code> is the first implementation block in the module.</p>",
        "id": 273549318,
        "sender_full_name": "bjorn3",
        "timestamp": 1646080377
    },
    {
        "content": "<p>You can use <code>tcx.associated_item(instance.def_id()).trait_item_def_id</code>.</p>",
        "id": 273551229,
        "sender_full_name": "cjgillot",
        "timestamp": 1646081139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"362398\">@Aurel Bílý</span> I think this is the same as what you were asking</p>",
        "id": 275086551,
        "sender_full_name": "oli",
        "timestamp": 1647076093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Thanks! Unfortunately, just figuring out the corresponding <code>DefId</code> of the trait's method is not what I want (I already had that working). I need to go from the substs of a call to an implementation method to the substs of a (hypothetical) call to the trait method. The type substitutions are important, not just the <code>DefId</code>s.</p>",
        "id": 275104124,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1647101070
    }
]