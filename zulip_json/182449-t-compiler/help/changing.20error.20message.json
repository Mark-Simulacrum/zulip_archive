[
    {
        "content": "<p>Hello! one thing i sometimes get when working with parsers is i accidentally do <code>char == \"f\"</code>, it would be nice if rustc could suggest that i use <code>'f'</code> instead. I would like to try my hand at PRing this change, but i am not sure where to start and where to look to change this. Are mismatched type errors handled in a common place?</p>",
        "id": 222196945,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> in general any part of the compiler can emit errors; I would start by grepping for the error code or format string</p>",
        "id": 222197007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610238391
    },
    {
        "content": "<p>Yeah that was what i was going to do but i was just wondering if those errors are handled in a common place instead of anywhere in typeck</p>",
        "id": 222197020,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238435
    },
    {
        "content": "<p>Besides, <code>1,064 code results in rust-lang/rust</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 222197027,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238462
    },
    {
        "content": "<p>Well for one you only want to be searching in <code>compiler/</code>. That gives:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$</span> rg E0308 compiler/\n<span class=\"go\">compiler/rustc_error_codes/src/error_codes.rs</span>\n<span class=\"go\">157:E0308: include_str!(\"./error_codes/E0308.md\"),</span>\n\n<span class=\"go\">compiler/rustc_error_codes/src/error_codes/E0308.md</span>\n<span class=\"go\">5:```compile_fail,E0308</span>\n\n<span class=\"go\">compiler/rustc_typeck/src/check/pat.rs</span>\n<span class=\"go\">56:    /// error[E0308]: mismatched types</span>\n<span class=\"go\">70:    /// error[E0308]: mismatched types</span>\n\n<span class=\"go\">compiler/rustc_infer/src/infer/error_reporting/mod.rs</span>\n<span class=\"go\">1516:                    // error[E0308]: mismatched types</span>\n<span class=\"go\">1894:                struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str)</span>\n\n<span class=\"go\">compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs</span>\n<span class=\"go\">184:    // error[E0308]: implementation of `Foo` does not apply to enough lifetimes</span>\n</code></pre></div>",
        "id": 222197142,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238609
    },
    {
        "content": "<p>haha i was just doing that</p>",
        "id": 222197144,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238620
    },
    {
        "content": "<p>So the error is reported in <code>compiler/rustc_infer/src/infer/error_reporting/mod.rs</code>.</p>",
        "id": 222197145,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238626
    },
    {
        "content": "<p>thank you</p>",
        "id": 222197146,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238632
    },
    {
        "content": "<p>However that brings together tons of different cases.</p>",
        "id": 222197147,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238634
    },
    {
        "content": "<p>So that's not the spot that needs to be changed <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 222197153,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238644
    },
    {
        "content": "<p>you're right, but i don't think that matters as long as i can tell if the type originated from a literal, right? can you even do that? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 222197156,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238661
    },
    {
        "content": "<p>I'm not that knowledgeable about typeck, but I'm guessing there is a (possibly hacky) way.</p>",
        "id": 222197172,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238700
    },
    {
        "content": "<p>Not from the type, but you may be able to get it from the HIR node</p>",
        "id": 222197173,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610238701
    },
    {
        "content": "<p>It depends what the scope of your change is.</p>",
        "id": 222197178,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238706
    },
    {
        "content": "<p>I feel its fine to generalize the change, if someone feeds <code>foo(\"f\")</code> it should be caught too</p>",
        "id": 222197228,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238736
    },
    {
        "content": "<p>Do you want to suggest just for <code>==</code> or for anything where it expected a <code>String</code>/<code>str</code> and found a <code>char</code>? (I'm guessing the latter.)</p>",
        "id": 222197229,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238738
    },
    {
        "content": "<p>yup the latter</p>",
        "id": 222197232,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238745
    },
    {
        "content": "<p>ill take a look at where the stuff is emitted and if i can get a node from that <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 222197246,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238769
    },
    {
        "content": "<p>I'm not sure where in <code>rustc_typeck</code> it should be changed – there's a lot of places that emit \"mismatched types\". I'm guessing <code>rustc_typeck::check</code>, but that doesn't narrow it down much. I would ask in <a class=\"stream\" data-stream-id=\"147480\" href=\"/#narrow/stream/147480-t-compiler.2Fwg-diagnostics\">#t-compiler/wg-diagnostics</a> – they may know.</p>",
        "id": 222197273,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238800
    },
    {
        "content": "<p>alright, thanks! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222197278,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610238814
    },
    {
        "content": "<p>Or someone more knowledgeable might come by here.</p>",
        "id": 222197280,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238816
    },
    {
        "content": "<p>But can't hurt to ask there too :)</p>",
        "id": 222197282,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238823
    },
    {
        "content": "<p>You're welcome :)</p>",
        "id": 222197288,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610238835
    },
    {
        "content": "<p>Ah it seems the place im looking for is <code>rustc_typeck/src/ty/errors.rs</code></p>",
        "id": 222197514,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239167
    },
    {
        "content": "<p>sorry, <code>rustc_middle</code></p>",
        "id": 222197517,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239176
    },
    {
        "content": "<p>You mean <code>/error.rs</code>? (You said <code>errors.rs</code>)</p>",
        "id": 222197522,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239197
    },
    {
        "content": "<p>yeah haha</p>",
        "id": 222197563,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239205
    },
    {
        "content": "<p>although i am not quite sure which variant this is, because typeerror has multiple variants</p>",
        "id": 222197575,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239248
    },
    {
        "content": "<p>I think <code>TypeError::Mismatch</code></p>",
        "id": 222197588,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239270
    },
    {
        "content": "<p><code>ProjectionMismatched</code> is the one with the correct error message im looking for</p>",
        "id": 222197590,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239271
    },
    {
        "content": "<p>mismatched is just <code>write!(f, \"types differ\"),</code></p>",
        "id": 222197591,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239285
    },
    {
        "content": "<p>Ah I didn't see that one.</p>",
        "id": 222197592,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239288
    },
    {
        "content": "<p>So i think thats where i need to do things, just need to find out what some of these things are, RA is showing them as unknown <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 222197639,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239325
    },
    {
        "content": "<p>What things is it showing as unknown?</p>",
        "id": 222197642,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239340
    },
    {
        "content": "<p>values, which seems to be the important bit</p>",
        "id": 222197646,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239350
    },
    {
        "content": "<p>E.g.?</p>",
        "id": 222197647,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239356
    },
    {
        "content": "<p>By the way, the rustc API docs are your friend: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/\">https://doc.rust-lang.org/nightly/nightly-rustc/</a></p>\n<p>I look at them <em>constantly</em></p>",
        "id": 222197654,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239377
    },
    {
        "content": "<p>Oh it seems values is an <code>ExpectedFound&lt;DefId&gt;</code>, which just gives me <code>expected: DefId</code> and <code>found: DefId</code></p>",
        "id": 222197657,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239387
    },
    {
        "content": "<p>is it surprising that the logic isn't in <code>rustc_error{,codes}s</code>?</p>",
        "id": 222197659,
        "sender_full_name": "oliver",
        "timestamp": 1610239407
    },
    {
        "content": "<p>yeah lol</p>",
        "id": 222197660,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239414
    },
    {
        "content": "<p><code>rustc_errors</code> is generic over all kinds of errors.</p>",
        "id": 222197663,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239435
    },
    {
        "content": "<p>It would be weird to have type error logic in it.</p>",
        "id": 222197699,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239445
    },
    {
        "content": "<p>good point</p>",
        "id": 222197701,
        "sender_full_name": "oliver",
        "timestamp": 1610239461
    },
    {
        "content": "<p>But yeah I personally think it would be better if error reporting logic were more separated.</p>",
        "id": 222197703,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610239463
    },
    {
        "content": "<p>ok so i have def ids which represent... something, i can probably get some thing from tcx, but that would be the types, and i wouldnt know the node, right?</p>",
        "id": 222197706,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239484
    },
    {
        "content": "<p>I'm still a little bit confused on what DefIds are since they seem to be used for pretty much everything</p>",
        "id": 222197773,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> <a href=\"https://rustc-dev-guide.rust-lang.org/identifiers.html?highlight=defid#in-the-hir\">https://rustc-dev-guide.rust-lang.org/identifiers.html?highlight=defid#in-the-hir</a></p>",
        "id": 222197895,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610239892
    },
    {
        "content": "<p>Thanks</p>",
        "id": 222197902,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239921
    },
    {
        "content": "<p>Hmm this change doesnt seem simple because TypeError just has the message for the label, not the whole diagnostic, so applying extra info to the diagnostic isnt doable from there</p>",
        "id": 222197956,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1610239978
    },
    {
        "content": "<p>I don't think <code>DefId</code>s are going to help you here – you probably need to use <code>NodeId</code></p>",
        "id": 222198335,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610240661
    },
    {
        "content": "<p>huh, I didn't realize NodeIds were a thing</p>",
        "id": 222198345,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240695
    },
    {
        "content": "<p>anyway, that's not how you look up Nodes, you need a HirId for that</p>",
        "id": 222198349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240706
    },
    {
        "content": "<p>Ah, good point.</p>",
        "id": 222198353,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610240711
    },
    {
        "content": "<p>I think <code>NodeId</code>s are just for the AST.</p>",
        "id": 222198361,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610240722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> The section of the dev guide you sent mentions <code>NodeId</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<blockquote>\n<p>A DefId, as the name suggests, identifies a particular definition, or top-level item, in a given crate. It is composed of two parts: a CrateNum which identifies the crate the definition comes from, and a DefIndex which identifies the definition within the crate. Unlike NodeIds, there isn't a DefId for every expression, which makes them more stable across compilations.</p>\n</blockquote>\n<p>Should it be updated to point to <code>HirId</code>? (I can do the change.)</p>",
        "id": 222198371,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610240759
    },
    {
        "content": "<p>hmm, I think so?</p>",
        "id": 222198415,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240777
    },
    {
        "content": "<p>I'm unclear what NodeIds actually are</p>",
        "id": 222198417,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240783
    },
    {
        "content": "<p>Same here <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I'm guessing they're the equivalent of <code>HirId</code> but for <code>rustc_ast</code>?</p>",
        "id": 222198443,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610240843
    },
    {
        "content": "<p>Maybe we can get <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> to take a look.</p>",
        "id": 222198445,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610240858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> may have more time</p>",
        "id": 222198486,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610240901
    },
    {
        "content": "<p>The dev guide talks about them one section up <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span> </p>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/identifiers.html#in-the-ast\">https://rustc-dev-guide.rust-lang.org/identifiers.html#in-the-ast</a></p>\n<blockquote>\n<p>A NodeId is an identifier number that uniquely identifies an AST node within a crate. Every node in the AST has its own NodeId, including top-level items such as structs, but also individual statements and expressions.</p>\n<p>However, because they are absolute within a crate, adding or removing a single node in the AST causes all the subsequent NodeIds to change. This renders NodeIds pretty much useless for incremental compilation, where you want as few things as possible to change.</p>\n<p>NodeIds are used in all the rustc bits that operate directly on the AST, like macro expansion and name resolution.</p>\n</blockquote>",
        "id": 222198487,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610240903
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rustc-dev-guide/issues/1015\">rustc-dev-guide#1015</a>.</p>",
        "id": 222198569,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241099
    },
    {
        "content": "<p>NodeId essentially exists to bridge between AST-based name resolution and AST-&gt;HIR lowering. Once HIR is constructed (ie as soon as one has access to a TyCtxt), all one needs to care about are HirIds (and DefIds for higher-level stuff).</p>",
        "id": 222198723,
        "sender_full_name": "cjgillot",
        "timestamp": 1610241360
    },
    {
        "content": "<p>By the way, can <code>HirId</code>s refer to definitions?</p>",
        "id": 222198800,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241479
    },
    {
        "content": "<p>(I.e. is <code>HirId</code> a superset of <code>DefId</code>.)</p>",
        "id": 222198840,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241497
    },
    {
        "content": "<p>HirIds can definitely refer to definitions. I'm unclear if there are definitions that can't be referred to by HirIds</p>",
        "id": 222198876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241572
    },
    {
        "content": "<p>HirId are a LocalDefId + an ItemLocalId. The conversion between HirId and DefId is done using two hash maps.</p>",
        "id": 222198944,
        "sender_full_name": "cjgillot",
        "timestamp": 1610241631
    },
    {
        "content": "<p><code>local_def_id_to_hid_id</code> and <code>local_def_id</code>.</p>",
        "id": 222198946,
        "sender_full_name": "cjgillot",
        "timestamp": 1610241649
    },
    {
        "content": "<p>Huh, so theoretically you can create a <code>DefId</code> that is actually an expression?</p>",
        "id": 222198958,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241695
    },
    {
        "content": "<p>I think that will panic</p>",
        "id": 222198974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241721
    },
    {
        "content": "<p>Well maybe it will panic when you use it, but you can construct it.</p>",
        "id": 222199012,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241741
    },
    {
        "content": "<p>no, I think constructing it will panic</p>",
        "id": 222199014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610241749
    },
    {
        "content": "<p>Then how can you use <code>local_def_id</code>?</p>",
        "id": 222199019,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241762
    },
    {
        "content": "<p>All HIR nodes have HirIds. DefIds are sparser: Items, lifetimes, generic parameters, and a few others.</p>",
        "id": 222199021,
        "sender_full_name": "cjgillot",
        "timestamp": 1610241768
    },
    {
        "content": "<p>Oh... you mean that <code>local_def_id</code> will only work if the <code>HirId</code> belongs to a definition?</p>",
        "id": 222199033,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241795
    },
    {
        "content": "<p>Ah, I think you're right <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/definitions/struct.Definitions.html#structfield.hir_id_to_def_id\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/definitions/struct.Definitions.html#structfield.hir_id_to_def_id</a></p>",
        "id": 222199046,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610241832
    },
    {
        "content": "<p>For diagnostic purposes, the framework has been conceived for thin-grained messages. <code>HirId</code> are meant for this.</p>",
        "id": 222199097,
        "sender_full_name": "cjgillot",
        "timestamp": 1610241885
    },
    {
        "content": "<p><code>DefId</code> are the most highest-level stuff, involved in codegen. This is very restrictive, and on purpose.</p>",
        "id": 222199172,
        "sender_full_name": "cjgillot",
        "timestamp": 1610241998
    },
    {
        "content": "<p>For instance, all the lint levels are defined per-HirId.</p>",
        "id": 222199178,
        "sender_full_name": "cjgillot",
        "timestamp": 1610242014
    },
    {
        "content": "<p>Opened a PR to document <code>NodeId</code>: <a href=\"https://github.com/rust-lang/rust/issues/80860\">#80860</a></p>",
        "id": 222199791,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610243122
    },
    {
        "content": "<blockquote>\n<p>HirIds can definitely refer to definitions. I'm unclear if there are definitions that can't be referred to by HirIds</p>\n</blockquote>\n<p>FWIW, non-local definitions don't have <code>HirId</code>s since the HIR is local. But IIRC converting from <code>LocalDefId</code> into<code>HirId</code> is infallible</p>",
        "id": 222214946,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1610272435
    }
]