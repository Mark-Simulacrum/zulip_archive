[
    {
        "content": "<p>I'm starting the work on implementing the new <code>asm!</code> macro, but I'm not too familiar with the compiler internals.</p>",
        "id": 186228822,
        "sender_full_name": "Amanieu",
        "timestamp": 1579641592
    },
    {
        "content": "<p>In particular the new macro needs to do quite a bit of validation of the macro arguments, and I'm not sure where in the pipeline (AST/HIR/MIR) they would fit in.</p>",
        "id": 186228919,
        "sender_full_name": "Amanieu",
        "timestamp": 1579641635
    },
    {
        "content": "<p>Basically I need to:</p>\n<ul>\n<li>Validate register names (\"eax\") and register classes (reg) are valid for the target architecture.</li>\n<li>Check that the argument to a <code>imm</code> is a constant expression. Also it must be either and integer or a float type.</li>\n<li>Check that the argument to a <code>sym</code> is a <code>fn</code> or a <code>static</code>.</li>\n<li>Validate the types of input/output operands against the allowed set for that register class.</li>\n</ul>",
        "id": 186229220,
        "sender_full_name": "Amanieu",
        "timestamp": 1579641750
    },
    {
        "content": "<p>For <code>llvm_asm!</code> it seems that almost all of the (fairly basic) validation is in librustc_builtin_macros, and LLVM catches any remaining errors in the backend.</p>",
        "id": 186230017,
        "sender_full_name": "Amanieu",
        "timestamp": 1579642183
    },
    {
        "content": "<p>But this won't work for my case since I need type information (among other things).</p>",
        "id": 186230093,
        "sender_full_name": "Amanieu",
        "timestamp": 1579642206
    },
    {
        "content": "<p>I think you should be able to do much of the validation in expansion (probably librustc_builtin_macros). The problematic bit will be the last two bullets (type information is not yet available).</p>\n<p>However, I suspect that you can expand the macro to something like the existing InlineAsm thing and then type check in librustc_typeck</p>",
        "id": 186230113,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642221
    },
    {
        "content": "<p>or you can also just stuff everything into a new exprkind and do the entire validation inside typeck, but that is probably worse (you'd want to stuff a lot of spans and so forth into the expr which would be not great)</p>",
        "id": 186230180,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642275
    },
    {
        "content": "<p>My current plan is to rename the existing InlineAsm to LlvmInlineAsm and reimplement InlineAsm from scratch.</p>",
        "id": 186230318,
        "sender_full_name": "Amanieu",
        "timestamp": 1579642369
    },
    {
        "content": "<p>yes, that's what I would do</p>",
        "id": 186230350,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642394
    },
    {
        "content": "<p>for the type checking you can look at how e.g. <code>src/librustc_typeck/check/intrinsic.rs</code> checks intrinsic types</p>",
        "id": 186230384,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642427
    },
    {
        "content": "<p>Where's a good place to stuff the inline asm helper types &amp; functions that are going to be used throughout all passes? libsyntax?</p>",
        "id": 186230485,
        "sender_full_name": "Amanieu",
        "timestamp": 1579642494
    },
    {
        "content": "<p>I would stick it in a separate helper crate</p>",
        "id": 186230507,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642511
    },
    {
        "content": "<p>hm, unless I'm not following</p>",
        "id": 186230531,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642531
    },
    {
        "content": "<p>what do you expect those types to contain?</p>",
        "id": 186230535,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642536
    },
    {
        "content": "<p>Basically lists of every register &amp; register class for every architecture, and a bitflags! for the asm flags.</p>",
        "id": 186230591,
        "sender_full_name": "Amanieu",
        "timestamp": 1579642563
    },
    {
        "content": "<p>ah</p>",
        "id": 186230597,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642567
    },
    {
        "content": "<p>librustc_target, I guess, then</p>",
        "id": 186230599,
        "sender_full_name": "simulacrum",
        "timestamp": 1579642572
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 186230636,
        "sender_full_name": "Amanieu",
        "timestamp": 1579642599
    },
    {
        "content": "<p>I'll get started and pop back if I encounter any issues.</p>",
        "id": 186230663,
        "sender_full_name": "Amanieu",
        "timestamp": 1579642620
    },
    {
        "content": "<p>Constant expression checking is only possible on MIR, you'll want to look at <code>promote_consts</code> and check out the logic for SIMD const args</p>",
        "id": 186240798,
        "sender_full_name": "oli",
        "timestamp": 1579650325
    },
    {
        "content": "<p>hm, my impression was that constant expression meant a literal</p>",
        "id": 186241196,
        "sender_full_name": "simulacrum",
        "timestamp": 1579650685
    },
    {
        "content": "<p>(in which case the macro could directly parse it in)</p>",
        "id": 186241205,
        "sender_full_name": "simulacrum",
        "timestamp": 1579650698
    },
    {
        "content": "<p>but if that's wrong, then yeah</p>",
        "id": 186241210,
        "sender_full_name": "simulacrum",
        "timestamp": 1579650705
    },
    {
        "content": "<blockquote>\n<p>hm, my impression was that constant expression meant a literal</p>\n</blockquote>\n<p><code>foo(42)</code> is also a \"constant expression\" by terminology accepted in rust (as long as <code>foo</code> is <code>const fn</code>)</p>",
        "id": 186247947,
        "sender_full_name": "nagisa",
        "timestamp": 1579657512
    },
    {
        "content": "<p>Anything that can be the initializer for <code>const</code> or <code>static</code> is a const expression.</p>",
        "id": 186247959,
        "sender_full_name": "nagisa",
        "timestamp": 1579657537
    },
    {
        "content": "<p>That being said, restricting accepted tokens in <code>asm!</code> imm would make sense too and be a conservative choice.</p>",
        "id": 186248020,
        "sender_full_name": "nagisa",
        "timestamp": 1579657589
    },
    {
        "content": "<blockquote>\n<p>That being said, restricting accepted tokens in <code>asm!</code> imm would make sense too and be a conservative choice.</p>\n</blockquote>\n<p>related? <a href=\"https://github.com/rust-lang/rust/issues/66556#issuecomment-555723836\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66556#issuecomment-555723836\">https://github.com/rust-lang/rust/issues/66556#issuecomment-555723836</a></p>",
        "id": 186251092,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1579661666
    },
    {
        "content": "<p>Actually the plan is to support full constant expressions. For example I have a case where I want to pass the output of <code>mem::size_of</code> as an immediate operand.</p>",
        "id": 186268599,
        "sender_full_name": "Amanieu",
        "timestamp": 1579685097
    },
    {
        "content": "<p>Is the AST expected to match the source code exactly? If I preprocess the asm format string in librustc_builtin_macros then the AST pretty print will have a different asm string than the original.</p>",
        "id": 186280770,
        "sender_full_name": "Amanieu",
        "timestamp": 1579695356
    },
    {
        "content": "<p>I'm mainly talking about things like argument names:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;mov {a}, {b}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// becomes</span>\n<span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;mov {0}, {1}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 186280870,
        "sender_full_name": "Amanieu",
        "timestamp": 1579695419
    },
    {
        "content": "<p>Also, how can I get the current target arch from librustc_builtin_macros? I need it to parse &amp; validate the asm operands.</p>",
        "id": 186281346,
        "sender_full_name": "Amanieu",
        "timestamp": 1579695855
    },
    {
        "content": "<p>For the AST pretty printing differently, that's probably an artifact of pretty print... I would not rely on pretty print being accurate.</p>",
        "id": 186289981,
        "sender_full_name": "simulacrum",
        "timestamp": 1579702705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I think there's no way to get target information there just now, but you can thread it into ExtCtxt probably</p>",
        "id": 186290679,
        "sender_full_name": "simulacrum",
        "timestamp": 1579703226
    },
    {
        "content": "<p>Alternatively I could also defer validation until target information is available...</p>",
        "id": 186291766,
        "sender_full_name": "Amanieu",
        "timestamp": 1579703902
    },
    {
        "content": "<p>yeah, that might be easier</p>",
        "id": 186291800,
        "sender_full_name": "simulacrum",
        "timestamp": 1579703938
    },
    {
        "content": "<p>not sure</p>",
        "id": 186291802,
        "sender_full_name": "simulacrum",
        "timestamp": 1579703940
    },
    {
        "content": "<p>centralizing all validation until librustc_typeck could work</p>",
        "id": 186291824,
        "sender_full_name": "simulacrum",
        "timestamp": 1579703958
    },
    {
        "content": "<p>I'm looking at typeck and it doesn't feel like the right place for checking the types of asm operands.</p>",
        "id": 186293702,
        "sender_full_name": "Amanieu",
        "timestamp": 1579705182
    },
    {
        "content": "<p>It seems that typeck can only really express \"must be this exact type\" or \"can be any type\". What I need is \"type must be one of [x, y, z...]\".</p>",
        "id": 186293838,
        "sender_full_name": "Amanieu",
        "timestamp": 1579705252
    },
    {
        "content": "<p>I think this is better done in a later pass, while leaving the type inference as \"can be any type\".</p>",
        "id": 186293892,
        "sender_full_name": "Amanieu",
        "timestamp": 1579705281
    },
    {
        "content": "<p>hm, I would expect \"must be one of [x, y, z,...]\" to be a bunch of ors?</p>",
        "id": 186295515,
        "sender_full_name": "simulacrum",
        "timestamp": 1579706202
    },
    {
        "content": "<p>I don't see how that'll be different later on</p>",
        "id": 186295519,
        "sender_full_name": "simulacrum",
        "timestamp": 1579706207
    },
    {
        "content": "<p>I think you might be looking at the inference part of typeck</p>",
        "id": 186295529,
        "sender_full_name": "simulacrum",
        "timestamp": 1579706216
    },
    {
        "content": "<p>but there are non-inference parts too</p>",
        "id": 186295536,
        "sender_full_name": "simulacrum",
        "timestamp": 1579706221
    }
]