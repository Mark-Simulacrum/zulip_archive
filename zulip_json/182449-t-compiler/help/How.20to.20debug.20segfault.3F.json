[
    {
        "content": "<p>I'm working on the PR that allows <code>impl Fn() -&gt; impl Trait</code> as a return type. While adding tests I've found out that this function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>segfaults the compiler with my patch. Is there a way to debug such cases? I have no idea why it segfaults atm...</p>",
        "id": 275897896,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647678550
    },
    {
        "content": "<p>The PR in question: <a href=\"https://github.com/rust-lang/rust/pull/93582\">https://github.com/rust-lang/rust/pull/93582</a></p>",
        "id": 275898072,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647678819
    },
    {
        "content": "<p>I would guess that type check struggles with the <code>for&lt;'a&gt; ... impl Debug + 'a</code>, but I have no idea how to debug this</p>",
        "id": 275898132,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647678915
    },
    {
        "content": "<p>Logs are getting <strong>very</strong> indented which suggests that there is an infinite recursion <a href=\"/user_uploads/4715/qU7GGugZnK66iZ0lWPm-B0et/2022-03-19_12-39.png\">2022-03-19_12-39.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/qU7GGugZnK66iZ0lWPm-B0et/2022-03-19_12-39.png\" title=\"2022-03-19_12-39.png\"><img src=\"/user_uploads/4715/qU7GGugZnK66iZ0lWPm-B0et/2022-03-19_12-39.png\"></a></div>",
        "id": 275898338,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647679190
    },
    {
        "content": "<p>I've found the start of the recursion in logs:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]), opaque_type_key=OpaqueTypeKey { def_id: DefId(0:7 ~ impl_fn_associativity2[4a39]::f::{opaque#0}), substs: [] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#0t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#0t)\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::marker::Sized&gt;, polarity:Positive), [])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]) as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;_ as std::ops::Fn&lt;(&amp;'a u8,)&gt;&gt;, polarity:Positive), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]), (&amp;'a u8,)], item_def_id: DefId(2:3286 ~ core[5484]::ops::function::FnOnce::Output) }, Ty(impl std::fmt::Debug)), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(ProjectionPredicate(ProjectionTy { substs: [impl Fn(&amp;'a u8)-&gt; for&lt;'a&gt; Opaque(DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })]), (&amp;'a u8,)], item_def_id: DefId(2:3286 ~ core[5484]::ops::function::FnOnce::Output) }, Ty(impl std::fmt::Debug)), [Region(BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a))])\n├─┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl std::fmt::Debug, opaque_type_key=OpaqueTypeKey { def_id: DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), substs: [ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n│ ├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#1t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#1t)\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ ├─┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl std::fmt::Debug, opaque_type_key=OpaqueTypeKey { def_id: DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), substs: [ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n│ │ ├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#2t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#2t)\n│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ │ ├─┐rustc_infer::infer::opaque_types::fold_opaque_ty ty=impl std::fmt::Debug, opaque_type_key=OpaqueTypeKey { def_id: DefId(0:9 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::{opaque#0}), substs: [ReLateBound(DebruijnIndex(2), BoundRegion { var: 0, kind: BrNamed(DefId(0:8 ~ impl_fn_associativity2[4a39]::f::{opaque#0}::'a), 'a) })] }, origin=FnReturn(DefId(0:6 ~ impl_fn_associativity2[4a39]::f))\n│ │ │ ├─0ms DEBUG rustc_infer::infer::type_variable new_var(index=_#3t, universe=U0, origin=TypeVariableOrigin { kind: TypeInference, span: src/test/ui/impl-trait/impl_fn_associativity2.rs:10:11: 10:55 (#0) })\n│ │ │ ├─0ms DEBUG rustc_infer::infer::opaque_types generated new type inference var Infer(_#3t)\n│ │ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n│ │ │ ├─0ms DEBUG rustc_infer::infer::opaque_types predicate=Binder(TraitPredicate(&lt;impl std::fmt::Debug as std::marker::Sized&gt;, polarity:Positive), [])\n</code></pre></div>",
        "id": 275898734,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647679708
    },
    {
        "content": "<p>Hm, I guess I should ask about <code>rustc_infer::infer::opaque_types::fold_opaque_ty </code> in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a></p>",
        "id": 275898829,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1647679874
    }
]