[
    {
        "content": "<p>Is there a way to <code>Span::shrink_to_hi</code> and subtract one? <code>Span::shrink_to_hi</code> is returning a span that is one character past where I want it.</p>",
        "id": 219784447,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607897541
    },
    {
        "content": "<p>Should I use <code>with_hi</code> and manipulate the <code>BytePos</code> directly?</p>",
        "id": 219784454,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607897566
    },
    {
        "content": "<p>Can you elaborate on your use case?</p>",
        "id": 219793531,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1607912025
    },
    {
        "content": "<p>Sure!</p>",
        "id": 219793794,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607912465
    },
    {
        "content": "<p>This is the PR: <a href=\"https://github.com/rust-lang/rust/issues/80017\">#80017</a></p>",
        "id": 219793802,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607912488
    },
    {
        "content": "<p>I want to suggest adding <code>, ..</code> for code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But using <code>shrink_to_hi</code> yields this code after applying the suggestion:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So I want <code>shrink_to_hi() - 1</code>.</p>",
        "id": 219793854,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607912567
    },
    {
        "content": "<p>does <code>span.with_lo(span.hi() - 1)</code> and then <code>span.shrink_to_lo()</code> work?</p>",
        "id": 219813378,
        "sender_full_name": "lcnr",
        "timestamp": 1607935818
    },
    {
        "content": "<p>Shouldn’t <code>- 1</code> be <code>- BytePos(1)</code>?</p>",
        "id": 219815157,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607937021
    },
    {
        "content": "<p>I was thinking of <code>span.with_hi(span.hi() - BytePos(1)).shrink_to_hi()</code>, but yeah, probably it will work. I guess I can assume that <code>hi()</code> is greater than zero since it shouldn't be at the beginning of a file.</p>",
        "id": 219894525,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607976059
    },
    {
        "content": "<p>I just wasn't sure if there was a pre-existing method for doing this, so that's why I asked :)</p>",
        "id": 219894554,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607976080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Span.3A.3Ashrink_to_hi.20-.201/near/219894525\">said</a>:</p>\n<blockquote>\n<p>I was thinking of <code>span.with_hi(span.hi() - BytePos(1)).shrink_to_hi()</code>, but yeah, probably it will work. I guess I can assume that <code>hi()</code> is greater than zero since it shouldn't be at the beginning of a file.</p>\n</blockquote>\n<p>hmm, that might not be true for dummy spans</p>",
        "id": 219895159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607976400
    },
    {
        "content": "<p>Ugh</p>",
        "id": 219895371,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607976567
    },
    {
        "content": "<p>So should I check if it's <code>DUMMY_SP</code> and only do the shrinking if it's not?</p>",
        "id": 219895464,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607976606
    },
    {
        "content": "<p>I would expect so</p>",
        "id": 219895504,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607976623
    },
    {
        "content": "<p>haven't tested though</p>",
        "id": 219895508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607976627
    }
]