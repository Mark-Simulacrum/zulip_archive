[
    {
        "content": "<p>Rustdoc wants to parse things like <code>A::&lt;B::Assoc as Trait&gt;&gt;::C</code> and we found it was a little tricky to do by hand. Is there an easy way to use <code>rustc_parse</code> for this?</p>",
        "id": 211076490,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600905875
    },
    {
        "content": "<p>it looks like clippy already does something like this: <a href=\"https://github.com/rust-lang/rust/blob/master/src/tools/clippy/clippy_lints/src/write.rs#L374\">https://github.com/rust-lang/rust/blob/master/src/tools/clippy/clippy_lints/src/write.rs#L374</a></p>",
        "id": 211076625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906042
    },
    {
        "content": "<p>now I just need to get a TokenStream from somewhere <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 211076627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906053
    },
    {
        "content": "<p>ayy here we go <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_parse/fn.parse_stream_from_source_str.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_parse/fn.parse_stream_from_source_str.html</a></p>",
        "id": 211076961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906405
    },
    {
        "content": "<p>how do I get the filename from a <code>Span</code>?</p>",
        "id": 211077269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906683
    },
    {
        "content": "<p>or <code>tcx</code>, that would work too, but I think it's not enough info because there are many files in a crate</p>",
        "id": 211077303,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906707
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/config/enum.Input.html#method.source_name\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_session/config/enum.Input.html#method.source_name</a> looks relevant, but not sure what an Input is</p>",
        "id": 211077339,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906747
    },
    {
        "content": "<p>ahhh</p>",
        "id": 211077428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906813
    },
    {
        "content": "<p>looks like it comes from <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_interface/interface/struct.Compiler.html#method.input\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_interface/interface/struct.Compiler.html#method.input</a></p>",
        "id": 211077484,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906921
    },
    {
        "content": "<p>that looks like it's for the root file still</p>",
        "id": 211077529,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600906933
    },
    {
        "content": "<p>well, or I could just make a name up lol <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/passes/check_code_block_syntax.rs#L39\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/passes/check_code_block_syntax.rs#L39</a></p>",
        "id": 211077750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600907189
    },
    {
        "content": "<p>next question: how do I parse a qpath?</p>",
        "id": 211078190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600907728
    },
    {
        "content": "<p>hmm, maybe I could try <code>parse_expr</code> then <code>parse_ty</code> one after another?</p>",
        "id": 211078315,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600907832
    },
    {
        "content": "<p>ok I think I'm going to give up on this</p>",
        "id": 211078562,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600908122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> before I rewrite qpath parsing from scratch in rustdoc do you have suggestions for how to do this?</p>",
        "id": 211078613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600908144
    },
    {
        "content": "<p>my progress so far: <a href=\"https://github.com/rust-lang/rust/pull/76934#discussion_r493975935\">https://github.com/rust-lang/rust/pull/76934#discussion_r493975935</a></p>",
        "id": 211078885,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600908441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you know who I could ask about this?</p>",
        "id": 211079380,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600908903
    },
    {
        "content": "<p>uh I guess maybe <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> or <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> might know</p>",
        "id": 211079411,
        "sender_full_name": "simulacrum",
        "timestamp": 1600908939
    },
    {
        "content": "<p>Solution: make <code>parse_qpath</code> public? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 211083635,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600914046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> it should be named 'finish_qpath', it assumes you've already seen an angle bracket</p>",
        "id": 211083653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600914095
    },
    {
        "content": "<blockquote>\n<p><code>A::&lt;B::Assoc as Trait&gt;&gt;::C</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> this is not valid syntax tho?</p>\n<p>Did you mean <code>A::&lt;X, Y&gt;::B</code> (path with arguments) or <code>&lt;Type as Trait&gt;::C</code> (fully qualified syntax)?</p>",
        "id": 211102754,
        "sender_full_name": "matklad",
        "timestamp": 1600936574
    },
    {
        "content": "<p>If the former, I think that should match the <code>$path</code> macro fragment specifier, and that is already public</p>",
        "id": 211102790,
        "sender_full_name": "matklad",
        "timestamp": 1600936599
    },
    {
        "content": "<p>If the latter, I would be wary about XY problem -- you probably won't be able to do anything useful with fully qualified path without bringing in the trait machinery as well?</p>",
        "id": 211102849,
        "sender_full_name": "matklad",
        "timestamp": 1600936646
    },
    {
        "content": "<p>I meant both - sorry for the bad syntax.</p>\n<blockquote>\n<p>If the latter, I would be wary about XY problem -- you probably won't be able to do anything useful with fully qualified path without bringing in the trait machinery as well?</p>\n</blockquote>\n<p>Rustdoc already uses the trait machinery: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/passes/collect_intra_doc_links.rs#L598\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/passes/collect_intra_doc_links.rs#L598</a></p>\n<p>For context, there are two things I want to do:</p>\n<ul>\n<li>treat <code>HashMap&lt;Key, Value&gt;::new</code> as <code>HashMap::new</code> (rustdoc doesn't care about generic arguments): <a href=\"https://github.com/rust-lang/rust/issues/62834\">https://github.com/rust-lang/rust/issues/62834</a></li>\n<li>disambiguate <code>&lt;Type as Trait&gt;::C</code> from the inherent impl <code>Type::C</code>: <a href=\"https://github.com/rust-lang/rust/issues/74563\">https://github.com/rust-lang/rust/issues/74563</a></li>\n</ul>",
        "id": 211124384,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600950928
    },
    {
        "content": "<p>a better example would be <code>A::&lt;module::B as module::Trait&gt;::D</code>, 90% sure that's valid syntax</p>",
        "id": 211124481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600950976
    },
    {
        "content": "<p>I think I got a basic parser that can handle these paths working. I'll push it up soon <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span></p>",
        "id": 211165973,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600969516
    },
    {
        "content": "<p>I'm still not super comfortable duplicating the parsing in two places :/</p>",
        "id": 211166084,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600969559
    },
    {
        "content": "<p>I pushed it up! It only needs to understand path separators and angle brackets so it's not too complicated.</p>",
        "id": 211167010,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600969968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Is.20there.20a.20way.20to.20parse.20fully-qualified.20syntax.20from.20a.20tool.3F/near/211124481\">said</a>:</p>\n<blockquote>\n<p>a better example would be <code>A::&lt;module::B as module::Trait&gt;::D</code>, 90% sure that's valid syntax</p>\n</blockquote>\n<p>you can just test it - it's not :P</p>",
        "id": 211925153,
        "sender_full_name": "eddyb",
        "timestamp": 1601565057
    },
    {
        "content": "<p><code>&lt;$ty as $path&gt;::</code> is a valid path <em>prefix</em></p>",
        "id": 211925241,
        "sender_full_name": "eddyb",
        "timestamp": 1601565073
    },
    {
        "content": "<p>IOW, the <code>as Trait</code> can be used if <em>and only if</em> the path starts with <code>&lt;</code></p>",
        "id": 211925557,
        "sender_full_name": "eddyb",
        "timestamp": 1601565131
    },
    {
        "content": "<p>this is why I want use rustc's parsing instead of rewriting it</p>",
        "id": 211925576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601565145
    },
    {
        "content": "<p>Once we support FQS, it might make sense to use rustc's parser, but for now it pretty much ignores everything in angle brackets <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 211955963,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601577974
    }
]