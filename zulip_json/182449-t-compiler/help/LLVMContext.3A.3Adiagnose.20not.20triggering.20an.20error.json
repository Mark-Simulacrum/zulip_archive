[
    {
        "content": "<p>Hello!</p>\n<p>I am adding a LLVM feature in Rust and expecting the following lines to fail, because <code>diagnose</code> is called with a <code>DiagnosticInfoUnsupported</code> object which has a severity of <code>DS_Error</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>DiagnosticInfoUnsupported Diag(...)\nDAG.getContext()-&gt;diagnose(Diag);\n</code></pre></div>\n\n\n<p>However while debugging I can see that the lines above are run but the compilation goes through without any error output.<br>\nWould it be possible that Rust configures LLVM in some way that this diagnostic gets ignored?</p>\n<p>The specific lines referenced are <a href=\"https://github.com/llvm/llvm-project/blob/67aac915ba94a75cbdb3c9c5f6c8e9904829ce37/llvm/lib/Target/ARM/ARMISelLowering.cpp#L4447\">here</a> in LLVM.</p>",
        "id": 211653839,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1601399956
    },
    {
        "content": "<p>Maybe diagnostics need to be explicitly shown by the user of LLVM?</p>",
        "id": 211655030,
        "sender_full_name": "bjorn3",
        "timestamp": 1601400390
    },
    {
        "content": "<p>What do you mean? I though that [<code>diagnose</code>] would make the compiler exit directly at this call. As in <a href=\"https://llvm.org/doxygen/LLVMContext_8cpp_source.html#l00237\">the code</a> is directly calling <code>exit</code>.</p>",
        "id": 211735234,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1601458294
    },
    {
        "content": "<p>Ok I think I found out why. Rust is defining a <a href=\"https://github.com/rust-lang/rust/blob/12f667fac30c5d074a0e5c766222b5a7b6c88246/compiler/rustc_codegen_llvm/src/back/write.rs#L305\"><code>diagnostic_handler</code></a> which is not handling the \"info unsupported\" diagnostic and hence ignoring it.</p>",
        "id": 211742620,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1601463078
    }
]