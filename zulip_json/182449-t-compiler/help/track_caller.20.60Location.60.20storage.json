[
    {
        "content": "<p>When allocating static memory for <code>panic::Location</code> structs, what determines the actual location of the structs in the final object file? I tried to figure this out on my own but there's not much written documentation I could find about the MIR interpreter's memory allocation.</p>\n<p>The reason I ask is because I would like to try to hack the compiler to make all <code>Location</code> structs land in a dedicated section of the binary. If that is already the case, then even better :)</p>",
        "id": 251948997,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630707347
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9556d7a09a7e80e84430071b29d118f39dde8205/compiler/rustc_codegen_ssa/src/mir/block.rs#L1146\">https://github.com/rust-lang/rust/blob/9556d7a09a7e80e84430071b29d118f39dde8205/compiler/rustc_codegen_ssa/src/mir/block.rs#L1146</a></p>",
        "id": 251949478,
        "sender_full_name": "bjorn3",
        "timestamp": 1630707707
    },
    {
        "content": "<p>creation of the llvm static is done around <a href=\"https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler/rustc_codegen_llvm/src/common.rs#L246\">https://github.com/rust-lang/rust/blob/d54fbb98555c107fb62fb5ae1a5b8f4fc6ed3edc/compiler/rustc_codegen_llvm/src/common.rs#L246</a></p>",
        "id": 251949756,
        "sender_full_name": "bjorn3",
        "timestamp": 1630707893
    },
    {
        "content": "<p>this is shared with all static memory, including promoted values.</p>",
        "id": 251949800,
        "sender_full_name": "bjorn3",
        "timestamp": 1630707934
    },
    {
        "content": "<p>Is this the same mechanism that an item tagged with an explicit <code>#[link_section]</code> would go through? That's the same kind of thing I want to achieve.</p>",
        "id": 251953787,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630710898
    },
    {
        "content": "<p>I don't think this is currently possible</p>",
        "id": 251955952,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630712776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/track_caller.20.60Location.60.20storage/near/251955952\">said</a>:</p>\n<blockquote>\n<p>I don't think this is currently possible</p>\n</blockquote>\n<p>Hrm <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> could you provide a brief explanation as to why you think that's the case? And whether you mean \"possible\" as in \"possible without hacking the compiler\" or as in \"possible without drastic changes to the compiler\"?</p>",
        "id": 251956022,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630712880
    },
    {
        "content": "<p>Without major change</p>",
        "id": 251956273,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630713106
    },
    {
        "content": "<p>As bjorn3 said, it's treated similar to all static memory &amp; promotions</p>",
        "id": 251956351,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630713177
    },
    {
        "content": "<p>So this information has to be carried along all the way to codegen</p>",
        "id": 251956367,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630713194
    },
    {
        "content": "<p>I'm not familiar enough with this stuff to understand the difference between what you're referring to as \"static memory\" and what a user would refer to as a static variable with a <code>#[link_section]</code> attribute.</p>",
        "id": 251956396,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1630713240
    },
    {
        "content": "<p>a static variable has a <code>DefId</code> which the backend could go and retrieve its codegen attributes</p>",
        "id": 251956557,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630713384
    },
    {
        "content": "<p>Caller location is however entirely anonymous</p>",
        "id": 251956575,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630713408
    },
    {
        "content": "<p>Basically codegen only sees the layout and its bytes (plus few other things like relocation)</p>",
        "id": 251956619,
        "sender_full_name": "Gary Guo",
        "timestamp": 1630713478
    }
]