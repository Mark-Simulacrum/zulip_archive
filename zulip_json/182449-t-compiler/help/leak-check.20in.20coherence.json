[
    {
        "content": "<p>I'm trying to migrate rust-semverver to newest nightly and since <a href=\"https://github.com/rust-lang/rust/pull/72493\">https://github.com/rust-lang/rust/pull/72493</a> landed, I'm seeing a regression in region-related tests. This test basically changes one signature from <code>fn(_: &amp;str)</code> to <code>fn(_: &amp;'static str)</code> and vice versa: <a href=\"https://github.com/rust-lang/rust-semverver/tree/master/tests/cases/regions\">https://github.com/rust-lang/rust-semverver/tree/master/tests/cases/regions</a></p>\n<p>Disclaimer: Take everything below with a grain of salt, I tried to grok rustc-dev-guide about trait solving and HRTB to some degree, so I may confuse some things.<br>\nPreviously, semverver was trying to see if we can infer that types are equal in here (I assume this is <em>selection</em> part of solving?): <a href=\"https://github.com/rust-lang/rust-semverver/blob/be321bd1b53bacf6d28373a61f6de7877cade8ef/src/typeck.rs#L224-L230\">here</a>. This returned <code>Err(RegionsInsufficientlyPolymorphic(BrAnon(0),ReStatic))</code>, which was what we wanted and could emit a nice error.<br>\nHowever, after the change this just returns <code>Ok(())</code>, which regresses the current functionality.</p>\n<p>Could you help point me in the right direction what I should do to bring back the old behaviour? From what I understand the original change moved leak-checking, which allows us to conclude that <code>fn(&amp;'static str)</code> does not satify `for &lt;'a&gt; fn(&amp;'a str), further down the pipeline and it now needs to be called explicitly in addition to trait selection (?)?</p>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you authored the change, would you have a spare moment to point me in the right direction? Thanks!</p>",
        "id": 217166971,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605719810
    },
    {
        "content": "<p>It seem something like this more or less works (the order is fixed is not correct in the emitted error), not sure if this is the right approach</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/typeck.rs b/src/typeck.rs</span>\n<span class=\"gh\">index 91a16b4..8247bf3 100644</span>\n<span class=\"gd\">--- a/src/typeck.rs</span>\n<span class=\"gi\">+++ b/src/typeck.rs</span>\n<span class=\"gu\">@@ -221,13 +221,17 @@ impl&lt;'a, 'tcx&gt; TypeComparisonContext&lt;'a, 'tcx&gt; {</span>\n         use rustc_infer::infer::{InferOk, RegionckMode};\n         use rustc_middle::ty::Lift;\n\n<span class=\"gd\">-        let error = self</span>\n<span class=\"gd\">-            .infcx</span>\n<span class=\"gd\">-            .at(&amp;ObligationCause::dummy(), target_param_env)</span>\n<span class=\"gd\">-            .eq(orig, target)</span>\n<span class=\"gd\">-            .map(|InferOk { obligations: o, .. }| {</span>\n<span class=\"gd\">-                assert_eq!(o, vec![]);</span>\n<span class=\"gd\">-            });</span>\n<span class=\"gi\">+        let error = self.infcx.commit_if_ok(|snapshot| {</span>\n<span class=\"gi\">+            let select = self</span>\n<span class=\"gi\">+                .infcx</span>\n<span class=\"gi\">+                .at(&amp;ObligationCause::dummy(), target_param_env)</span>\n<span class=\"gi\">+                .eq(orig, target)</span>\n<span class=\"gi\">+                .map(|InferOk { obligations: o, .. }| {</span>\n<span class=\"gi\">+                    assert_eq!(o, vec![]);</span>\n<span class=\"gi\">+                });</span>\n<span class=\"gi\">+            let leak_check = self.infcx.leak_check(true, snapshot);</span>\n<span class=\"gi\">+            select.and(leak_check)</span>\n<span class=\"gi\">+        });</span>\n\n         if let Err(err) = error {\n             let outlives_env = OutlivesEnvironment::new(target_param_env);\n</code></pre></div>",
        "id": 217176889,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605724215
    },
    {
        "content": "<p>uh, <code>overly_polymorphic</code> set to <code>false</code> fixes the issue</p>",
        "id": 217177746,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605724601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> so the <code>fn efg</code> is the one in question?</p>",
        "id": 217201639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605736391
    },
    {
        "content": "<p>adding in calls to <code>leak_check</code> is not the right approach for sure =)</p>",
        "id": 217201758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605736468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>fn efg</code> and <code>fn fgh</code> (one changes from static to late bound lifetime and the other vice versa)</p>",
        "id": 217248811,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605780310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/leak-check.20in.20coherence/near/217201758\">said</a>:</p>\n<blockquote>\n<p>adding in calls to <code>leak_check</code> is not the right approach for sure =)</p>\n</blockquote>\n<p>at least the tests are green <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 217248848,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605780340
    },
    {
        "content": "<p>part of this is that the logic here is changing</p>",
        "id": 217268783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605792726
    },
    {
        "content": "<p>that may indeed, technically, be a breaking change</p>",
        "id": 217268804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605792735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> maybe we can schedule a time later today to sync up on this?</p>",
        "id": 217274247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605795271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure! I’m free for the rest of the day so let me know when you’re available</p>",
        "id": 217277936,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605796893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> is <time datetime=\"2020-11-19T20:30:00Z\">2020-11-19T15:30:00-05:00</time> or so too late for you?</p>",
        "id": 217281566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605798414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that’s fine</p>",
        "id": 217293101,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605802846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> ok ping me .. I'll be around then</p>",
        "id": 217298543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605805025
    },
    {
        "content": "<p>sure</p>",
        "id": 217298559,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605805034
    },
    {
        "content": "<p>thanks for taking your time!</p>",
        "id": 217298736,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605805103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> wave</p>",
        "id": 217326392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605817892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm here</p>",
        "id": 217326830,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818098
    },
    {
        "content": "<p>Here's the patch in question: <a href=\"https://github.com/Xanewok/rust-semverver/commit/735056e898c25afb3778644634cc685c1ade7d5e\">https://github.com/Xanewok/rust-semverver/commit/735056e898c25afb3778644634cc685c1ade7d5e</a></p>",
        "id": 217326899,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818140
    },
    {
        "content": "<p>so I intentionally limited the set of places where we use <code>leak_check</code> dramatically</p>",
        "id": 217327638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818532
    },
    {
        "content": "<p>but I am not entirely sure what this function does</p>",
        "id": 217327660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818544
    },
    {
        "content": "<p>oh, I see, you've not edited <em>rustc</em></p>",
        "id": 217327711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818575
    },
    {
        "content": "<p>but rather the semverver tool</p>",
        "id": 217327718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818579
    },
    {
        "content": "<p>hmm</p>",
        "id": 217327719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818580
    },
    {
        "content": "<p>I'm not sure I understand the code entirely in semverver, I've been hacking there for a couple of days</p>",
        "id": 217327720,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818581
    },
    {
        "content": "<p>right</p>",
        "id": 217327727,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818585
    },
    {
        "content": "<p>so the code in question runs the... trait selection? on a pair of <code>fn(&amp;'static str)</code> and <code>fn(&amp;str)</code></p>",
        "id": 217327838,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818637
    },
    {
        "content": "<p>while version before correctly returned errors such as RegionsInsufficientlyPolymorphic, the version after the patch happily says it's <code>Ok(())</code></p>",
        "id": 217327941,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818674
    },
    {
        "content": "<p>and only after further running <code>leak_check</code> this case is caught</p>",
        "id": 217327973,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818691
    },
    {
        "content": "<p>but that's the first time I'm touching <code>InferCtxt</code> and anything there, so I'm not really sure I'm doing the right thing here</p>",
        "id": 217328014,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818718
    },
    {
        "content": "<p>can you refresh my memory as to the old/new tests?</p>",
        "id": 217328029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818728
    },
    {
        "content": "<p>I can't seem to find the links above</p>",
        "id": 217328038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818733
    },
    {
        "content": "<p>(and/or the original was correct in the first place)</p>",
        "id": 217328040,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818734
    },
    {
        "content": "<p>I mean I'm sure they're there somewhere</p>",
        "id": 217328045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818737
    },
    {
        "content": "<p><a href=\"https://github.com/Xanewok/rust-semverver/tree/735056e898c25afb3778644634cc685c1ade7d5e/tests/cases/regions\">https://github.com/Xanewok/rust-semverver/tree/735056e898c25afb3778644634cc685c1ade7d5e/tests/cases/regions</a></p>",
        "id": 217328062,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818749
    },
    {
        "content": "<p>Old:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">efg</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fgh</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>New:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">efg</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fgh</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217328138,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818776
    },
    {
        "content": "<p>ok so the tests are <code>efg</code> and <code>fgh</code>, right?</p>",
        "id": 217328140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"153740\">Igor Matuszewski</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/leak-check.20in.20coherence/near/217327941\">said</a>:</p>\n<blockquote>\n<p>while version before correctly returned errors such as RegionsInsufficientlyPolymorphic, the version after the patch happily says it's <code>Ok(())</code></p>\n</blockquote>\n<p>yeah so what happens here</p>",
        "id": 217328196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818817
    },
    {
        "content": "<p>is that we wind up generating region constraints that can't be satisfied</p>",
        "id": 217328231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818834
    },
    {
        "content": "<p>the <code>leak_check</code> code <em>will</em> detect them</p>",
        "id": 217328241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818840
    },
    {
        "content": "<p>it's not necessarily wrong for the semverver tool to do that</p>",
        "id": 217328266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818859
    },
    {
        "content": "<p>I have a write-up that explains this stuff in more detail</p>",
        "id": 217328277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818868
    },
    {
        "content": "<p>I should go re-read it</p>",
        "id": 217328280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818871
    },
    {
        "content": "<p><a href=\"https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696\">https://gist.github.com/nikomatsakis/8bfda6c1119727e13ec6e98f33d2b696</a></p>",
        "id": 217328340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818891
    },
    {
        "content": "<p>( this was <a href=\"https://github.com/rust-lang/compiler-team/issues/295\">https://github.com/rust-lang/compiler-team/issues/295</a> )</p>",
        "id": 217328357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605818904
    },
    {
        "content": "<p>I... actually didn't read this write-up <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 217328389,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818933
    },
    {
        "content": "<p>I should've, my bad</p>",
        "id": 217328401,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818942
    },
    {
        "content": "<p>I'l try to skim through it quickly now if that helps</p>",
        "id": 217328462,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605818992
    },
    {
        "content": "<p>well</p>",
        "id": 217328699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819123
    },
    {
        "content": "<p>I think that adding the leak check is not wrong</p>",
        "id": 217328731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819127
    },
    {
        "content": "<p>I was going to suggest maybe you want to run the region checker</p>",
        "id": 217328753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819143
    },
    {
        "content": "<p>but the truth is that we plan to <em>remove</em> the lexical region checker</p>",
        "id": 217328763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819149
    },
    {
        "content": "<p>and I think the leak check will kind of <em>be</em> the \"identify unsolveable constraints\" function that you want</p>",
        "id": 217328788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819164
    },
    {
        "content": "<p>I don't think you necessarily have to read the gist, <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span>, it's fairly detailed</p>",
        "id": 217328816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819182
    },
    {
        "content": "<p>hm interesting</p>",
        "id": 217328835,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819188
    },
    {
        "content": "<p>but it does try to give all the background if you want a \"deeper dive\"</p>",
        "id": 217328842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819193
    },
    {
        "content": "<p>so the main functions really is to compare such that the new type is either same, more relaxed (technically breaking) or incompatible (as I understand it)</p>",
        "id": 217328969,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819265
    },
    {
        "content": "<p>I guess we can treat it as solving the constraints, right?</p>",
        "id": 217329004,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819285
    },
    {
        "content": "<p>via this mechanism used</p>",
        "id": 217329009,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819288
    },
    {
        "content": "<p>if we want to reason about regions</p>",
        "id": 217329030,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819301
    },
    {
        "content": "<p>where is the overall repo?</p>",
        "id": 217329212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819398
    },
    {
        "content": "<p>I'm not sure how to translate it into more rigid model, I would assume we are actually checking if the new type is a subtype (and potentially equal, not sure what this relation's definition is) of the old one, right?</p>",
        "id": 217329213,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819398
    },
    {
        "content": "<p>I'd like to skim the code a bit more</p>",
        "id": 217329221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819401
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-semverver\">https://github.com/rust-lang/rust-semverver</a></p>",
        "id": 217329234,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819408
    },
    {
        "content": "<p>As it is, it supports <code>nightly-2020-06-23</code></p>",
        "id": 217329307,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819464
    },
    {
        "content": "<p>the WIP PR bumping to the newest version is at <a href=\"https://github.com/Xanewok/rust-semverver/tree/rustup-wip\">https://github.com/Xanewok/rust-semverver/tree/rustup-wip</a> but there aren't many significant changes, it seems (maybe except <a href=\"https://github.com/Xanewok/rust-semverver/commit/1f8cb2e4de1df65cedbbf55d1f9f06e2572cccad\">https://github.com/Xanewok/rust-semverver/commit/1f8cb2e4de1df65cedbbf55d1f9f06e2572cccad</a>)</p>",
        "id": 217329410,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819515
    },
    {
        "content": "<p>so one thing I notice is that</p>",
        "id": 217329961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819829
    },
    {
        "content": "<p>the code runs</p>",
        "id": 217329971,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819834
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"p\">.</span><span class=\"n\">resolve_regions_and_report_errors</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">target_def_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"n\">outlives_env</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">RegionckMode</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217329975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819836
    },
    {
        "content": "<p>but <em>only</em> in the case of type error</p>",
        "id": 217329979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819841
    },
    {
        "content": "<p>that seems a bit odd</p>",
        "id": 217329993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819843
    },
    {
        "content": "<p>that code is really meant to be run if the \"subtype\" operations etc complete <em>successfully</em></p>",
        "id": 217330058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819867
    },
    {
        "content": "<p>but anyway I think running leak-check is ok here <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span></p>",
        "id": 217330092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819888
    },
    {
        "content": "<p>I noticed that as well, amusingly tests fail when running the care in regular path but I didn't take a closer look at the regressions</p>",
        "id": 217330096,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819894
    },
    {
        "content": "<p>I would maybe add a comment like \"check for unresolveable lifetime constraints\"</p>",
        "id": 217330114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605819906
    },
    {
        "content": "<p>so if leak-checker behaves sort of like the current region solver, is it necessary to run the lexical region resolve there at all? Even in the error case</p>",
        "id": 217330147,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819930
    },
    {
        "content": "<p>it does so because we need to later call <code>resolve_vars_if_possible</code>?</p>",
        "id": 217330252,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605819981
    },
    {
        "content": "<p>that's probably somewhat off-topic</p>",
        "id": 217330353,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605820056
    },
    {
        "content": "<p>ah no that was <code>lexical_region_resolve</code>, I mixed these</p>",
        "id": 217330494,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605820133
    },
    {
        "content": "<p>as you're seeing I'm still trying to wrap my head around it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 217330516,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605820147
    },
    {
        "content": "<p>Anyways, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> many thanks for taking a look!</p>",
        "id": 217330788,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605820312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"153740\">Igor Matuszewski</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/leak-check.20in.20coherence/near/217330147\">said</a>:</p>\n<blockquote>\n<p>so if leak-checker behaves sort of like the current region solver, is it necessary to run the lexical region resolve there at all? Even in the error case</p>\n</blockquote>\n<p>no, not really</p>",
        "id": 217331205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605820509
    },
    {
        "content": "<p>it may produce better errors though</p>",
        "id": 217331228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605820524
    },
    {
        "content": "<p>but that code will eventually go away I think</p>",
        "id": 217331245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605820531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"153740\">Igor Matuszewski</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/leak-check.20in.20coherence/near/217330252\">said</a>:</p>\n<blockquote>\n<p>it does so because we need to later call <code>resolve_vars_if_possible</code>?</p>\n</blockquote>\n<p>(it may produce better errors because of this, yeah)</p>",
        "id": 217331263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605820540
    },
    {
        "content": "<p>it <em>may</em> be necessary for that fn not to ICE or something, not sure</p>",
        "id": 217331376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605820585
    },
    {
        "content": "<p>There were some noises to upstream some of the comparison logic and maintain it on the compiler side - maybe that would keep the code in more loved and maintainable shape</p>",
        "id": 217331491,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605820654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/leak-check.20in.20coherence/near/217331245\">said</a>:</p>\n<blockquote>\n<p>but that code will eventually go away I think</p>\n</blockquote>\n<p>we'l worry about that if/when semverver breaks because of that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 217331575,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1605820687
    }
]