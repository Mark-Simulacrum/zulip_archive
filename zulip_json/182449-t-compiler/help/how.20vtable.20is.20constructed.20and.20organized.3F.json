[
    {
        "content": "<p>Hi,</p>\n<p>I am recently thinking to look into trait objects and it is unavoidable to consider vtables. how in general a vtable is organized? how a vtable is constructed?</p>",
        "id": 205963403,
        "sender_full_name": "Jason Hu",
        "timestamp": 1596576686
    },
    {
        "content": "<p>Copying an old comment I wrote up:</p>\n<p>The <a href=\"https://github.com/rust-lang/rust/blob/d8cf749570c87a4dcf05071bb5b280febb7f6657/src/librustc_trait_selection/traits/mod.rs#L468\"><code>vtable_methods</code></a> query yields all method entries for a specific vtable (that is, the list of all dyn-compatible methods of all transitive supertraits). On <a href=\"https://github.com/rust-lang/rust/blob/d8cf749570c87a4dcf05071bb5b280febb7f6657/src/librustc_mir/monomorphize/collector.rs#L540-L562\">every unsizing cast</a> to a trait object these methods are enqueued for code generation (and the drop glue is also added).</p>\n<p>Codegen then <a href=\"https://github.com/rust-lang/rust/blob/d8cf749570c87a4dcf05071bb5b280febb7f6657/src/librustc_codegen_ssa/meth.rs#L108-L116\">assembles the vtable</a> from drop glue, size, alignment, and the method pointers. This defines the vtable's layout in memory.</p>",
        "id": 205963736,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596576899
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/meth.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/meth.rs</a></p>\n<p>drop_in_place, size, align, function pointers for all methods (for non object-safe methods a null pointer gets written)</p>",
        "id": 205963765,
        "sender_full_name": "bjorn3",
        "timestamp": 1596576918
    },
    {
        "content": "<p>that is brilliant!  thx for the info.</p>",
        "id": 205964100,
        "sender_full_name": "Jason Hu",
        "timestamp": 1596577078
    }
]