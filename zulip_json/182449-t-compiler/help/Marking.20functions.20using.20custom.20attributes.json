[
    {
        "content": "<p>Hey, I'm working on a cargo tool for taint analysis, and I'm trying to figure out the best way to tag functions with annotations. I've had a look at the tool prelude, but the reference didn't have much to say about it. Is there a way to register an annotation in the tool prelude using compiler callbacks, or maybe some way of identifying all uses of a given attribute?</p>\n<p>For example, I think the ideal would be to use the tool prelude to mark functions as sources and sinks:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[taintrs::source]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">get_user_input</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[taintrs::sink]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">eval_sql</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But would also be happy to use proc macros, as long as I had a way of tracking it either before expansion or in MIR. I've had a look at what MIRI does, which is sort of similar, but I'm not looking to implement a full abstract interpreter.</p>",
        "id": 239945430,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1621770623
    },
    {
        "content": "<p>I've also considered using a proc_macro_attribute to conditionally add an annotation from the tool prelude if the <code>taint</code> config option was set, similarly to how MIRI uses annotations, but I'm not at all sure about how to get started with the prelude, again. Ideally, I would like this to be something I could compile on top of any given Rust compiler, without having to build the entire toolchain from source.</p>",
        "id": 239945471,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1621770717
    },
    {
        "content": "<p>There is the unstable <code>#![register_tool]</code> ). You need to add something like <code>#![register_tool(taintrs)]</code> at the start of the crate root.</p>",
        "id": 239967001,
        "sender_full_name": "bjorn3",
        "timestamp": 1621792111
    },
    {
        "content": "<p>The compiler should probably suggest that for unrecognized tools</p>",
        "id": 239969292,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621794382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  That works, thanks for the tip.</p>\n<p>I'm still unsure about how to extract this information from the crate, e.g. given the code above, how to actually find all items that have been tagged with <code>#[taintrs::source]</code> and <code>#[taintrs::sink]</code> respectively. Whatever I can come up with seems a little hacky, guessing at the Id that the Attribute has been assigned per compilation...</p>",
        "id": 240009291,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1621835686
    },
    {
        "content": "<p>I think creating a hir vistor would work. This vistor can walk all items and check if any have been marked with those attributes.</p>",
        "id": 240015910,
        "sender_full_name": "bjorn3",
        "timestamp": 1621841450
    },
    {
        "content": "<p>Awesome. Thanks. :D</p>",
        "id": 240016027,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1621841552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Would that be the <code>rustc_hir::intravisit::Visitor</code>?</p>",
        "id": 240019923,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1621844301
    },
    {
        "content": "<p>I think ItemLikeVisitor would be enough.</p>",
        "id": 240020035,
        "sender_full_name": "bjorn3",
        "timestamp": 1621844402
    },
    {
        "content": "<p>Getting all items with a specific attribute is listed as one of the use cases in the docs of ItenLikeVisitor.</p>",
        "id": 240020133,
        "sender_full_name": "bjorn3",
        "timestamp": 1621844448
    },
    {
        "content": "<p>Awesome. I was able to get it to work. Thank you a lot <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 240026716,
        "sender_full_name": "Hilmar Gústafsson",
        "timestamp": 1621848442
    }
]