[
    {
        "content": "<p>Context: <a href=\"https://github.com/rust-lang/rust/issues/81991\">#81991</a></p>\n<p>Is there a way to get HirId of a DefId when the DefId is not local? When it's local I can do</p>\n<div class=\"codehilite\"><pre><span></span><code>tcx.hir().local_def_id_to_hir_id(id.as_local())\n</code></pre></div>\n<p>but I can't find anything like this when the id is not local. I'm guessing this is not possible in general, as I may not have HIR accessible for imported crates, but I wonder if it's possible in some cases, maybe with a function that returns <code>Option&lt;HirId&gt;</code>. More specifically I'm interested in types, and I'd expect this to be possible for types as otherwise if I'm checking an expression with an imported opaque expected type, I need to be able to compare that expected type with the type of the expression somehow.</p>",
        "id": 225969496,
        "sender_full_name": "osa1",
        "timestamp": 1613037870
    },
    {
        "content": "<p>the hir only exists for the local crate</p>",
        "id": 225969697,
        "sender_full_name": "lcnr",
        "timestamp": 1613037973
    },
    {
        "content": "<p>so for non local <code>DefId</code>s there never exists a corresponding <code>HirId</code></p>",
        "id": 225969722,
        "sender_full_name": "lcnr",
        "timestamp": 1613037994
    },
    {
        "content": "<p>in your problem, you have a <code>ty::Opaque(extern_def_id, substs)</code> and a local expression?</p>",
        "id": 225969930,
        "sender_full_name": "lcnr",
        "timestamp": 1613038127
    },
    {
        "content": "<p>and you want to know whether the local expression has the same type as the underlying type of the opaque type?</p>",
        "id": 225970073,
        "sender_full_name": "lcnr",
        "timestamp": 1613038212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/HirId.20from.20DefId.20when.20the.20DefId.20is.20not.20local.3F/near/225969930\">said</a>:</p>\n<blockquote>\n<p>in your problem, you have a <code>ty::Opaque(extern_def_id, substs)</code> and a local expression?</p>\n</blockquote>\n<p>I have two <code>Opaque</code> types. Type of the local expression is also <code>Opaque</code>.</p>",
        "id": 225970277,
        "sender_full_name": "osa1",
        "timestamp": 1613038347
    },
    {
        "content": "<blockquote>\n<p>and you want to know whether the local expression has the same type as the underlying type of the opaque type?</p>\n</blockquote>\n<p>Yeah</p>",
        "id": 225970298,
        "sender_full_name": "osa1",
        "timestamp": 1613038362
    },
    {
        "content": "<p>Hmm, I think I can just compare the <code>DefId</code>s, right?</p>",
        "id": 225970506,
        "sender_full_name": "osa1",
        "timestamp": 1613038479
    },
    {
        "content": "<p>that checks that u use the same <code>Opaque</code> type</p>",
        "id": 225970599,
        "sender_full_name": "lcnr",
        "timestamp": 1613038549
    },
    {
        "content": "<p>you can use <code>type_of(extern_def_id)</code> to get the underlying type</p>",
        "id": 225970610,
        "sender_full_name": "lcnr",
        "timestamp": 1613038561
    },
    {
        "content": "<p>and then <code>ty.subst(substs)</code> to get the thing you care about</p>",
        "id": 225970664,
        "sender_full_name": "lcnr",
        "timestamp": 1613038576
    },
    {
        "content": "<p>depending on what you want to do with the opaque types you can also normalize them with <code>Reveal::All</code> which does this for you</p>",
        "id": 225970715,
        "sender_full_name": "lcnr",
        "timestamp": 1613038623
    },
    {
        "content": "<p>Perfect, thanks <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> . I'll try <code>type_of(extern_def_id)</code>.</p>",
        "id": 225971182,
        "sender_full_name": "osa1",
        "timestamp": 1613038930
    }
]