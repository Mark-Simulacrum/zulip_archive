[
    {
        "content": "<p>In the <a href=\"https://gist.github.com/rust-play/a65d00b78bf20e7492a4c3dcda46e1bb\">code snippets</a>, <code>test</code> and <code>test2</code> works fine, but <code>test3</code> cannot get compiled. The error message shows an error of E0277. Why <code>test</code> and <code>test2</code> works fine, but <code>test3</code> failed to compile? It seems that the <code>Option</code> type has an implementation of the <code>From</code> trait, which is implicitly invoked in <code>test</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling playground v0.0.1 (/playground)\nerror[E0277]: `?` couldn&#39;t convert the error to `std::option::NoneError`\n  --&gt; src/main.rs:30:6\n   |\n30 |     r?;\n   |      ^ the trait `std::convert::From&lt;std::io::Error&gt;` is not implemented for `std::option::NoneError`\n   |\n   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n   = note: required by `std::convert::From::from`\nhelp: consider converting the `Result&lt;T, _&gt;` into an `Option&lt;T&gt;` using `Result::ok`\n   |\n30 |     r.ok()?;\n   |      ^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `playground`.\n\nTo learn more, run the command again with --verbose.\n</code></pre></div>",
        "id": 203541463,
        "sender_full_name": "Yan",
        "timestamp": 1594405434
    },
    {
        "content": "<p>It's not clear to me why you think that <code>?</code> should convert a <code>Result</code> to an <code>Option</code>.</p>",
        "id": 203543211,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594406483
    },
    {
        "content": "<p>the compiler said that question mark invoke <code>From</code> trait implicitly, but the behavior is not the same.</p>",
        "id": 203543561,
        "sender_full_name": "Yan",
        "timestamp": 1594406666
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/src/core/option.rs.html#1354\">https://doc.rust-lang.org/src/core/option.rs.html#1354</a></p>",
        "id": 203543662,
        "sender_full_name": "Yan",
        "timestamp": 1594406728
    },
    {
        "content": "<p>I think the magic happens in <code>test</code> is the invocation of <a href=\"https://doc.rust-lang.org/src/core/task/poll.rs.html#112\">From</a> impl of <code>Poll</code>.</p>",
        "id": 203543836,
        "sender_full_name": "Yan",
        "timestamp": 1594406824
    },
    {
        "content": "<p><code>?</code> does invoke <code>From</code>, but what <code>From</code> implementation do you expect to be invoked to turn a <code>Result</code> to <code>Option</code>?</p>",
        "id": 203543893,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594406864
    },
    {
        "content": "<p>I also don't understand what you are attempting to demonstrate between the three functions.</p>",
        "id": 203544066,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594406936
    },
    {
        "content": "<p>in function <code>test</code>, question mark converts Err(...) to <code>Some(Err(...))</code>, but <code>test3</code> failed to compile.</p>",
        "id": 203544144,
        "sender_full_name": "Yan",
        "timestamp": 1594406973
    },
    {
        "content": "<p>See also <a href=\"https://doc.rust-lang.org/std/ops/trait.Try.html#impl-Try-2\">https://doc.rust-lang.org/std/ops/trait.Try.html#impl-Try-2</a> and <a href=\"https://doc.rust-lang.org/std/ops/trait.Try.html#impl-Try-3\">https://doc.rust-lang.org/std/ops/trait.Try.html#impl-Try-3</a></p>",
        "id": 203544447,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594407121
    },
    {
        "content": "<p>This is not the correct doc. I'm still seeking the answer.</p>",
        "id": 203545904,
        "sender_full_name": "Yan",
        "timestamp": 1594407839
    },
    {
        "content": "<p>After some reading, I learned that the <code>Try</code> trait is the place where the magic happened. It's a feature of the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1859-try-trait.md#support-interconversion-but-with-caution\">RFC-1859</a>. Thanks  <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> ;)</p>",
        "id": 203550947,
        "sender_full_name": "Yan",
        "timestamp": 1594410639
    },
    {
        "content": "<p>The only problem left is, <code>Try</code> trait is a nightly feature and why I got effected in stable rust?</p>",
        "id": 203551331,
        "sender_full_name": "Yan",
        "timestamp": 1594410909
    },
    {
        "content": "<p>Implementing Try is unstable, but the standard library is allowed to use stable features.</p>",
        "id": 203552132,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594411333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320287\">@Yan</span> specifically, <code>?</code> invokes <code>From</code> on the error type, i.e. between <code>E1</code> and <code>E2</code> in <code>Result&lt;T, E1&gt;</code> vs <code>Result&lt;T, E1&gt;</code>, not on the whole type</p>",
        "id": 203574581,
        "sender_full_name": "eddyb",
        "timestamp": 1594431816
    },
    {
        "content": "<p>so it's like <code>.map_err(From::from)</code></p>",
        "id": 203574583,
        "sender_full_name": "eddyb",
        "timestamp": 1594431826
    }
]