[
    {
        "content": "<p>Is there a reason that Symbol doesn't implement <code>serde::Serialize</code>? I understand why it doesn't implement <code>Deserialize</code>, but it seems like it should be able to implement <code>Serialize</code>.</p>",
        "id": 264776494,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639432908
    },
    {
        "content": "<p>Rustc doesn't use serde, but the internal rustc_serialize crate (not to be confused with rustc_serialize on <a href=\"http://crates.io\">crates.io</a>)</p>",
        "id": 264777614,
        "sender_full_name": "bjorn3",
        "timestamp": 1639433388
    },
    {
        "content": "<p><code>Symbol</code> implements both <code>Encodable</code> and <code>Decodable</code>.</p>",
        "id": 264777766,
        "sender_full_name": "bjorn3",
        "timestamp": 1639433442
    },
    {
        "content": "<p>The reason I ask is that rustdoc uses serde, and it also uses <code>Symbol</code>s</p>",
        "id": 264786292,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639438403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> why do you want to serialize spans? If it's for scrape-examples it's not possible, see the original PR which discusses that the complication session is missing info</p>",
        "id": 264788780,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639440076
    },
    {
        "content": "<p>It isn't possible to serialize spans usimg serde and by extension symbols. Serde doesn't allow specialization on the serializer to allow access to a context to access the source map or cstore.</p>",
        "id": 264818774,
        "sender_full_name": "bjorn3",
        "timestamp": 1639464720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> started talking about symbols, then the conversation switched to spans?</p>",
        "id": 264824163,
        "sender_full_name": "nnethercote",
        "timestamp": 1639469986
    },
    {
        "content": "<p>Serializing symbols is definitely possible (with a newtype), I'm mucking around with rustdoc and I just wrote this:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct SerSymbol(Symbol);\n\nimpl Serialize for SerSymbol {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n    where\n        S: Serializer,\n    {\n        serializer.serialize_str(&amp;self.0.as_str())\n    }\n}\n</code></pre></div>",
        "id": 264824260,
        "sender_full_name": "nnethercote",
        "timestamp": 1639470030
    },
    {
        "content": "<p>Right, spans are part of <code>Ident</code> and not <code>SymbolStr</code>.</p>",
        "id": 264836904,
        "sender_full_name": "bjorn3",
        "timestamp": 1639477705
    },
    {
        "content": "<p>Oh oops, I was pattern matching too quickly lol</p>",
        "id": 264871424,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639494560
    },
    {
        "content": "<p>Yeah, the reason is that I want to use Symbols in a type that is serialized for tera.</p>",
        "id": 264907477,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639508074
    },
    {
        "content": "<blockquote>\n<p>Serializing symbols is definitely possible (with a newtype), I'm mucking around with rustdoc and I just wrote this:</p>\n</blockquote>\n<p>Would it be reasonable to add a Serialize impl on Symbol directly?</p>",
        "id": 264907539,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639508098
    },
    {
        "content": "<p>That would require making <code>rustc_span</code> depend on <code>serde</code>, which felt wrong. The compiler currently doesn't depend on <code>serde</code> at all, though a bunch of the other tools do (cargo, rustfmt, rustdoc, clippy, rust-analyzer)</p>",
        "id": 264912236,
        "sender_full_name": "nnethercote",
        "timestamp": 1639509768
    },
    {
        "content": "<p>Hmm, I guess we could put the dependency behind a Cargo feature, but I guess Cargo would still always compile it with the flag enabled? And it might add too much complexity.</p>",
        "id": 264912643,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639509970
    },
    {
        "content": "<p>This is one of the annoying things about rustdoc using tera...</p>",
        "id": 264912653,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639509977
    },
    {
        "content": "<p>cargo features don't seem like the right fit, rustc is used as a dynamic library which can only have one combination of feature flags enabled</p>",
        "id": 264914303,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639510785
    },
    {
        "content": "<p>personally I think we should reconsider Tera ... it doesn't seem to be working out very well (in particular it's been hurting performance)</p>",
        "id": 264914399,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639510814
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"315412\">@jsha</span></p>",
        "id": 264914408,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639510816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/impl.20Serialize.20for.20Symbol/near/264914303\">said</a>:</p>\n<blockquote>\n<p>cargo features don't seem like the right fit, rustc is used as a dynamic library which can only have one combination of feature flags enabled</p>\n</blockquote>\n<p>Hmm, why <em>does</em> rustdoc load rustc as a dylib from the sysroot? Wouldn't it be faster if we used static linking?</p>",
        "id": 264915757,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639511560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/impl.20Serialize.20for.20Symbol/near/264914399\">said</a>:</p>\n<blockquote>\n<p>personally I think we should reconsider Tera ... it doesn't seem to be working out very well (in particular it's been hurting performance)</p>\n</blockquote>\n<p>I agree. Let's move this part of the discussion to <a class=\"stream\" data-stream-id=\"266220\" href=\"/#narrow/stream/266220-rustdoc\">#rustdoc</a>.</p>",
        "id": 264915787,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639511571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/impl.20Serialize.20for.20Symbol/near/264915757\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/impl.20Serialize.20for.20Symbol/near/264914303\">said</a>:</p>\n<blockquote>\n<p>cargo features don't seem like the right fit, rustc is used as a dynamic library which can only have one combination of feature flags enabled</p>\n</blockquote>\n<p>Hmm, why <em>does</em> rustdoc load rustc as a dylib from the sysroot? Wouldn't it be faster if we used static linking?</p>\n</blockquote>\n<p>it uses a lot more binary size, and it means that <code>download-rustc</code> stops working</p>",
        "id": 264916084,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639511709
    },
    {
        "content": "<p>also it would make rustdoc inconsistent with external tools</p>",
        "id": 264916114,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639511730
    },
    {
        "content": "<p>Ah, I see. Oh well :)</p>",
        "id": 264916424,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639511875
    },
    {
        "content": "<p>Hmm, actually why would it break download-rustc? Couldn't download-rustc just download an rlib?</p>",
        "id": 264916504,
        "sender_full_name": "Noah Lev",
        "timestamp": 1639511898
    },
    {
        "content": "<p>It will need to download all rustc rlibs then for a total of like 100MB.</p>",
        "id": 264916640,
        "sender_full_name": "bjorn3",
        "timestamp": 1639511960
    }
]