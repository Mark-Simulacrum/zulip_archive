[
    {
        "content": "<p>Hi all - I've got a Rust application (app A) which is split in two sides, the Rust side and the C++ side. The Rust side on app A initializes a Rust library B, which is then used on the C++ side through FFI bindings offered by library B as well.</p>\n<p>This works, but it's currently causing problems since app A ends up with two versions of the same global symbol from library B, and so initialization of library B needs to happen on both C++ and Rust sides of app A.</p>\n<p>I'm wondering, what is usually the approach to deal with these sort of issues?</p>",
        "id": 228757673,
        "sender_full_name": "Lurker",
        "timestamp": 1614858425
    },
    {
        "content": "<p>Or, I guess another way to ask this question is, is there a way to have a Rust library exposing a global lock through Rust's FFIs to C++, and using that to synchronize an application both from a Rust and C++ side?</p>",
        "id": 228930068,
        "sender_full_name": "Lurker",
        "timestamp": 1614939690
    },
    {
        "content": "<p>You could store a <code>pthread_mutex_t</code> in a <code>static</code> and export it to C++.</p>",
        "id": 228931545,
        "sender_full_name": "bjorn3",
        "timestamp": 1614940424
    },
    {
        "content": "<p>Thanks, but not sure I'm following. So using a pthread_mutex_t from both C++ and Rust sides?</p>",
        "id": 228937259,
        "sender_full_name": "Lurker",
        "timestamp": 1614943446
    },
    {
        "content": "<p>Yes</p>",
        "id": 228939097,
        "sender_full_name": "bjorn3",
        "timestamp": 1614944423
    },
    {
        "content": "<p>So, my problem, turns out, stems from linking my executable to two static libraries which define the same global symbol, but different name mangling.</p>",
        "id": 229228766,
        "sender_full_name": "Lurker",
        "timestamp": 1615161613
    },
    {
        "content": "<p>Suppose I have the following:</p>\n<ul>\n<li>Application A written in both Rust and C++, which:<ul>\n<li>links statically with a Rust library B (which contains the global symbol that's being duplicated);</li>\n<li>links statically with a C++ library C, which is a C++ bindings wrapper around Rust libary B;</li>\n<li>The Rust side of the Application A uses library B (the Rust crate), while the C++ side uses library C (the C++ bindings of the same library);</li>\n</ul>\n</li>\n</ul>\n<p>Initially Application A's Cargo.toml was pointing directly to the crate of library B. This was resulting in two definitions of the same global symbol, coming from library B and library C. However, by re-exporting the Rust symbols from library C, and using that crate instead in Application A's toml, this duplication no longer happens.</p>",
        "id": 229228805,
        "sender_full_name": "Lurker",
        "timestamp": 1615161651
    }
]