[
    {
        "content": "<p>Is there a documentation for the panic \"Procedural macro API is used outside of a procedural macro\"?</p>",
        "id": 172106301,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564559744
    },
    {
        "content": "<p>I'm building a procedural macro crate, which links and executes a native library, and the compiler crashes with that error (stacktrace: <a href=\"https://users.rust-lang.org/t/procedural-macro-api-is-used-outside-of-a-procedural-macro/30841\" target=\"_blank\" title=\"https://users.rust-lang.org/t/procedural-macro-api-is-used-outside-of-a-procedural-macro/30841\">https://users.rust-lang.org/t/procedural-macro-api-is-used-outside-of-a-procedural-macro/30841</a>).</p>",
        "id": 172106464,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564559905
    },
    {
        "content": "<p>I don't understand why the panic originates in the library: the library does not use the <code>proc_macro</code> API, but only the <code>proc_macro2</code> crate</p>",
        "id": 172111585,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564564906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116427\">@Federico</span> the proc_macro2 crate internally uses the proc_macro API</p>",
        "id": 172117659,
        "sender_full_name": "simulacrum",
        "timestamp": 1564571345
    },
    {
        "content": "<p>@simulacrum I see, thanks! I expected <code>proc_macro2</code>to be a opaque wrapper around <code>proc_macro</code>, without the limitations of the latter.</p>",
        "id": 172119879,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564573822
    },
    {
        "content": "<p>The limitations are sort of inherent and can't be removed by a library I believe</p>",
        "id": 172120587,
        "sender_full_name": "simulacrum",
        "timestamp": 1564574594
    },
    {
        "content": "<p>(beyond duplicating the entire compiler, but even then you don't get what you want since the result won't work with rustc)</p>",
        "id": 172120607,
        "sender_full_name": "simulacrum",
        "timestamp": 1564574623
    },
    {
        "content": "<p>But what does \"outside of a procedural macro\" exactly mean? Outside the crate that implements a procedural macro?</p>",
        "id": 172124282,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564577837
    },
    {
        "content": "<p>the context is loosely I believe same-thread</p>",
        "id": 172124309,
        "sender_full_name": "simulacrum",
        "timestamp": 1564577874
    },
    {
        "content": "<p>just based on the snippets in that post I would expect it to work but more info might be needed on how exactly PLUGIN is defined/what it does</p>",
        "id": 172124583,
        "sender_full_name": "simulacrum",
        "timestamp": 1564578044
    },
    {
        "content": "<p>Can it be that also calling a native library crosses the boundary? The plugin is a Rust crate, linked as native library in order to allow the procedural macro crate to choose via an environment variable which implementation to use</p>",
        "id": 172124870,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564578218
    },
    {
        "content": "<p>The code is here: <a href=\"https://github.com/viperproject/rust-contracts\" target=\"_blank\" title=\"https://github.com/viperproject/rust-contracts\">https://github.com/viperproject/rust-contracts</a></p>",
        "id": 172124909,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564578238
    },
    {
        "content": "<p>Plausible, yeah, I'm not entirely sure myself when TLS changes</p>",
        "id": 172124967,
        "sender_full_name": "simulacrum",
        "timestamp": 1564578250
    },
    {
        "content": "<p>and/or is no longer accessible</p>",
        "id": 172124974,
        "sender_full_name": "simulacrum",
        "timestamp": 1564578254
    },
    {
        "content": "<p>I would check if you can reproduce when not dynamically loading the library (just regular cargo dep)</p>",
        "id": 172125105,
        "sender_full_name": "simulacrum",
        "timestamp": 1564578316
    },
    {
        "content": "<p>that way you can better isolate the failure</p>",
        "id": 172125110,
        "sender_full_name": "simulacrum",
        "timestamp": 1564578323
    },
    {
        "content": "<p>you could also plausibly test if it's working by declaring via <code>thread_local!</code> a thread local and seeing if you can access the same local from a separate library and/or googling that</p>",
        "id": 172125152,
        "sender_full_name": "simulacrum",
        "timestamp": 1564578352
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/9152fe4ea053a29469691349f4b63aa94c9aac56/src/libproc_macro/bridge/client.rs#L268-L271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9152fe4ea053a29469691349f4b63aa94c9aac56/src/libproc_macro/bridge/client.rs#L268-L271\">https://github.com/rust-lang/rust/blob/9152fe4ea053a29469691349f4b63aa94c9aac56/src/libproc_macro/bridge/client.rs#L268-L271</a> is the relevant local afaik</p>",
        "id": 172125221,
        "sender_full_name": "simulacrum",
        "timestamp": 1564578381
    },
    {
        "content": "<p>Thanks for the info!</p>",
        "id": 172125441,
        "sender_full_name": "Federico Poli",
        "timestamp": 1564578545
    }
]