[
    {
        "content": "<p>I have a type like <a href=\"https://docs.rs/safer-ffi/0.0.5/safer_ffi/vec/struct.Vec_Layout.html#structfield.len\"><code>&lt;usize as Trait&gt;::Layout</code></a>. How can I turn it into the canonical type <code>usize</code>? I found <code>qpath_res</code> but that seems to apply only to <code>QPath</code>, not to <code>ty::Projection</code>.</p>",
        "id": 212118248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601667128
    },
    {
        "content": "<p>if you don't care about regions, you can use <code>tcx.normalize_erasing_regions</code></p>",
        "id": 212118731,
        "sender_full_name": "lcnr",
        "timestamp": 1601667382
    },
    {
        "content": "<p>So in rustdoc you probably don't want to erase regions, let me quickly find the method which is probably correct here</p>",
        "id": 212118865,
        "sender_full_name": "lcnr",
        "timestamp": 1601667442
    },
    {
        "content": "<p>for context, this is the existing code: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/mod.rs#L1514\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/mod.rs#L1514</a></p>",
        "id": 212119092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601667571
    },
    {
        "content": "<p>for rustdoc, probably <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize</a></p>",
        "id": 212119099,
        "sender_full_name": "lcnr",
        "timestamp": 1601667574
    },
    {
        "content": "<p>which does not normalize the type</p>",
        "id": 212119112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601667581
    },
    {
        "content": "<p>where do I get an <code>At</code> from?</p>",
        "id": 212119205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601667613
    },
    {
        "content": "<p>infcx.at(span) i think</p>",
        "id": 212119251,
        "sender_full_name": "lcnr",
        "timestamp": 1601667640
    },
    {
        "content": "<p>which can just be <code>DUMMY_SP</code> here</p>",
        "id": 212119263,
        "sender_full_name": "lcnr",
        "timestamp": 1601667649
    },
    {
        "content": "<p>as you shouldn't need it</p>",
        "id": 212119272,
        "sender_full_name": "lcnr",
        "timestamp": 1601667654
    },
    {
        "content": "<p>I expect the resulting Obligations to all be outlives obligations, which you can probably just discard</p>",
        "id": 212119333,
        "sender_full_name": "lcnr",
        "timestamp": 1601667694
    },
    {
        "content": "<p>and then I have another question that I might need to ask <span class=\"user-mention\" data-user-id=\"210316\">@GuillaumeGomez</span> - what do I do with the <code>Normalized</code> type once I have it? Rustdoc expects a <code>rustdoc::Type::QPath</code></p>",
        "id": 212119537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601667780
    },
    {
        "content": "<p>can you use the <code>Normalized.value.clean()</code> here? apart from that I can't help you there <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212119952,
        "sender_full_name": "lcnr",
        "timestamp": 1601668002
    },
    {
        "content": "<p><code>at</code> does not take a span: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.at\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.at</a></p>",
        "id": 212119966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668009
    },
    {
        "content": "<p>what are those parameters? I don't recognize these types <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212119991,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668028
    },
    {
        "content": "<p><code>ObligationCause</code> can be <code>ObligationCause::dummy()</code></p>",
        "id": 212120012,
        "sender_full_name": "lcnr",
        "timestamp": 1601668044
    },
    {
        "content": "<p>it's mostly used for errors during typeck, so it's not relevant here</p>",
        "id": 212120040,
        "sender_full_name": "lcnr",
        "timestamp": 1601668068
    },
    {
        "content": "<p>so many traits</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">rustc_trait_selection</span>::<span class=\"n\">traits</span>::<span class=\"n\">query</span>::<span class=\"n\">normalize</span>::<span class=\"n\">AtExt</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">rustc_trait_selection</span>::<span class=\"n\">infer</span>::<span class=\"n\">TyCtxtInferExt</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">traits</span>::<span class=\"n\">ObligationCause</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212120175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668156
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the trait bound `rustc_hir::Ty&lt;&#39;_&gt;: rustc_middle::ty::TypeFoldable&lt;&#39;_&gt;` is not satisfied\n</code></pre></div>\n\n\n<p>should I pass the HirId instead?</p>",
        "id": 212120207,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668177
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir_ty_to_ty</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212120236,
        "sender_full_name": "lcnr",
        "timestamp": 1601668196
    },
    {
        "content": "<p>use that ty</p>",
        "id": 212120242,
        "sender_full_name": "lcnr",
        "timestamp": 1601668200
    },
    {
        "content": "<p>yay making progress <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n    --&gt; src/librustdoc/clean/mod.rs:1482:61\n     |\n1482 |           hir::QPath::TypeRelative(ref qself, ref segment) =&gt; {\n     |  _____________________________________________________________^\n1483 | |             use crate::rustc_trait_selection::traits::query::normalize::AtExt;\n1484 | |             use crate::rustc_trait_selection::infer::TyCtxtInferExt;\n1485 | |             use rustc_middle::traits::ObligationCause;\n...    |\n1508 | |             */\n1509 | |         }\n     | |_________^ expected enum `clean::types::Type`, found `()`\n</code></pre></div>",
        "id": 212120332,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668249
    },
    {
        "content": "<p>for <code>param_env</code>, you probably want <code>tcx.param_env(tcx.hir().hir_id_to_local_def_id(self.hir_id))</code></p>",
        "id": 212120475,
        "sender_full_name": "lcnr",
        "timestamp": 1601668336
    },
    {
        "content": "<p>will that work with function return types too?</p>",
        "id": 212120522,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668369
    },
    {
        "content": "<p>I expect it to</p>",
        "id": 212120540,
        "sender_full_name": "lcnr",
        "timestamp": 1601668380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0599]: no method named `hir_id_to_local_def_id` found for struct `rustc_middle::hir::map::Map&lt;&#39;_&gt;` in the current scope\n</code></pre></div>\n\n\n<p>I think this was renamed recently?</p>",
        "id": 212120747,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668491
    },
    {
        "content": "<p><code>local_def_id</code>, that's it</p>",
        "id": 212120792,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668514
    },
    {
        "content": "<p>unfortunately this did not work, it looks the same as before:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/clean/mod.rs b/src/librustdoc/clean/mod.rs</span>\n<span class=\"gh\">index c72fe7b7447..9efe67eb1a9 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/clean/mod.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/clean/mod.rs</span>\n<span class=\"gu\">@@ -1480,18 +1480,25 @@ fn clean_qpath(hir_ty: &amp;hir::Ty&lt;'_&gt;, cx: &amp;DocContext&lt;'_&gt;) -&gt; Type {</span>\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) =&gt; {\n<span class=\"gd\">-            let mut res = Res::Err;</span>\n<span class=\"gd\">-            /*</span>\n<span class=\"gd\">-            let hir_ty = hir::Ty {</span>\n<span class=\"gd\">-                kind: hir::TyKind::Path((*qpath).clone()),</span>\n<span class=\"gd\">-                hir_id,</span>\n<span class=\"gd\">-                span,</span>\n<span class=\"gd\">-            };</span>\n<span class=\"gd\">-            */</span>\n<span class=\"gi\">+            use crate::rustc_trait_selection::traits::query::normalize::AtExt;</span>\n<span class=\"gi\">+            use crate::rustc_trait_selection::infer::TyCtxtInferExt;</span>\n<span class=\"gi\">+            use rustc_middle::traits::ObligationCause;</span>\n<span class=\"gi\">+</span>\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n<span class=\"gd\">-            if let ty::Projection(proj) = ty.kind() {</span>\n<span class=\"gd\">-                res = Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id);</span>\n<span class=\"gd\">-            }</span>\n<span class=\"gi\">+            let param_env = cx.tcx.param_env(cx.tcx.hir().local_def_id(hir_id));</span>\n<span class=\"gi\">+            let normalized = cx.tcx.infer_ctxt().enter(|infcx| {</span>\n<span class=\"gi\">+                infcx.at(&amp;ObligationCause::dummy(), param_env).normalize(&amp;ty)</span>\n<span class=\"gi\">+            });</span>\n<span class=\"gi\">+            match normalized {</span>\n<span class=\"gi\">+                Ok(resolved) =&gt; return resolved.value.clean(cx),</span>\n<span class=\"gi\">+                Err(_) =&gt; {}</span>\n<span class=\"gi\">+            };</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+            let res = if let ty::Projection(proj) = ty.kind() {</span>\n<span class=\"gi\">+                Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id)</span>\n<span class=\"gi\">+            } else {</span>\n<span class=\"gi\">+                Res::Err</span>\n<span class=\"gi\">+            };</span>\n             let trait_path = hir::Path { span, res, segments: &amp;[] };\n             Type::QPath {\n                 name: segment.ident.name.clean(cx),\n</code></pre></div>",
        "id": 212121676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668912
    },
    {
        "content": "<p>let me see if it's actually resolving anything</p>",
        "id": 212121745,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601668931
    },
    {
        "content": "<p>ok yeah it's completely ignoring my changes, presumably because <code>normalize()</code> is returning <code>NoSolution</code></p>",
        "id": 212122260,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669186
    },
    {
        "content": "<p>... <code>&lt;usize as T&gt;::X</code> is a <code>TypeRelative</code> QPath, right?</p>",
        "id": 212122578,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669315
    },
    {
        "content": "<p>ahhh no it's a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.QPath.html#variant.Resolved\"><code>QPath::Resolved</code></a></p>",
        "id": 212122636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669350
    },
    {
        "content": "<p>well no wonder nothing was happening lol</p>",
        "id": 212122652,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669359
    },
    {
        "content": "<p>oh boy</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: /home/joshua/rustc/compiler/rustc_middle/src/hir/map/mod.rs:163:13: local_def_id: no entry for `HirId { owner: DefId(0:7 ~ assoc_item[8787]::f), local_id: 4 }`, which has a map of `Some(Entry { parent: HirId { owner: DefId(0:7 ~ assoc_item[8787]::f), local_id: 0 }, node: Ty(Ty { hir_id: HirId { owner: DefId(0:7 ~ assoc_item[8787]::f), local_id: 4 }, kind: Path(Resolved(Some(Ty { hir_id: HirId { owner: DefId(0:7 ~ assoc_item[8787]::f), local_id: 5 }, kind: Path(Resolved(None, Path { span: assoc_item.rs:9:16: 9:21 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: Some(HirId { owner: DefId(0:7 ~ assoc_item[8787]::f), local_id: 6 }), res: Some(Err), args: None, infer_args: false }] })), span: assoc_item.rs:9:16: 9:21 (#0) }), Path { span: assoc_item.rs:9:15: 9:30 (#0), res: Def(AssocTy, DefId(0:4 ~ assoc_item[8787]::T::X)), segments: [PathSegment { ident: T#0, hir_id: Some(HirId { owner: DefId(0:7 ~ assoc_item[8787]::f), local_id: 7 }), res: Some(Def(Trait, DefId(0:3 ~ assoc_item[8787]::T))), args: None, infer_args: false }, PathSegment { ident: X#0, hir_id: Some(HirId { owner: DefId(0:7 ~ assoc_item[8787]::f), local_id: 8 }), res: Some(Err), args: None, infer_args: false }] })), span: assoc_item.rs:9:15: 9:30 (#0) }) })`\n</code></pre></div>",
        "id": 212122911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669506
    },
    {
        "content": "<p>this is from <code>tcx.hir().local_def_id(hir_id)</code></p>",
        "id": 212123034,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669562
    },
    {
        "content": "<p>maybe I should use <code>opt_def_id</code>? When would something not have a DefId to go with it?</p>",
        "id": 212123086,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669596
    },
    {
        "content": "<p>but it looks like this is local_def_id for a resolved path? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 212123096,
        "sender_full_name": "lcnr",
        "timestamp": 1601669603
    },
    {
        "content": "<p>this worked:</p>\n<div class=\"codehilite\"><pre><span></span><code>    let param_env = if let Some(id) = cx.tcx.hir().opt_local_def_id(hir_id) {\n        cx.tcx.param_env(id)\n    } else {\n        ty::ParamEnv::empty()\n    };\n</code></pre></div>",
        "id": 212123485,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669794
    },
    {
        "content": "<p>wow this was way easier than expected <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> thank you so much for the help! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 212123510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669809
    },
    {
        "content": "<p>uh, that requires review by someone else though, using <code>ParamEnv::empty()</code> causes ICE if the type is generic afaik</p>",
        "id": 212123782,
        "sender_full_name": "lcnr",
        "timestamp": 1601669952
    },
    {
        "content": "<p>indeed it did:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;assertion failed: cx.impl_trait_bounds.borrow().is_empty()&#39;, src/librustdoc/clean/utils.rs:630:5\n</code></pre></div>",
        "id": 212123805,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669965
    },
    {
        "content": "<p>oh wait that comes from rustdoc</p>",
        "id": 212123842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669987
    },
    {
        "content": "<p>what are param envs again?</p>",
        "id": 212123852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601669992
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> on how to normalize a <code>TyKind::Path(QPath::TypeRelative)</code> for rustdoc</p>",
        "id": 212123924,
        "sender_full_name": "lcnr",
        "timestamp": 1601670010
    },
    {
        "content": "<p>param env contain the predicates of the current environment</p>",
        "id": 212123974,
        "sender_full_name": "lcnr",
        "timestamp": 1601670043
    },
    {
        "content": "<p>not typerelative, sorry, I did want it for <code>Resolved</code></p>",
        "id": 212123986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670052
    },
    {
        "content": "<p>I got the names mixed up</p>",
        "id": 212124005,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670060
    },
    {
        "content": "<p>WIP diff: <a href=\"https://github.com/jyn514/rust/commit/91332e59b6705ff6674d20a7e5307baa9b6cedec\">https://github.com/jyn514/rust/commit/91332e59b6705ff6674d20a7e5307baa9b6cedec</a></p>",
        "id": 212124228,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670173
    },
    {
        "content": "<p>i think you should use <code>p.res.def_id()</code> here</p>",
        "id": 212124272,
        "sender_full_name": "lcnr",
        "timestamp": 1601670195
    },
    {
        "content": "<p>for the param_env</p>",
        "id": 212124287,
        "sender_full_name": "lcnr",
        "timestamp": 1601670202
    },
    {
        "content": "<p>what's p, sorry? the path?</p>",
        "id": 212124355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670241
    },
    {
        "content": "<blockquote>\n<p>for context, this is the existing code: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/mod.rs#L1514\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/mod.rs#L1514</a></p>\n</blockquote>\n<p>I thought you were looking at this? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 212124505,
        "sender_full_name": "lcnr",
        "timestamp": 1601670319
    },
    {
        "content": "<p>maybe I only want this for <code>QPath::Resolved(Some(qself), path)</code>, since <code>Clone::clone</code> already looks fine and not ugly</p>",
        "id": 212124518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670324
    },
    {
        "content": "<p>yeah I'm looking there I'm just not familiar with the code - I was looking before the match instead of in the middle</p>",
        "id": 212124551,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670352
    },
    {
        "content": "<p>aghhh I ran <code>cargo fmt</code> isntead of <code>x.py fmt</code> by mistake and it's rebuilding the whole compiler <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 212124747,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670455
    },
    {
        "content": "<p>ok changing this to only run for <code>Resolved</code> with <code>path.res.def_id()</code> is working on my test case :) let me see if any ICEs pop up</p>",
        "id": 212125188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670713
    },
    {
        "content": "<p>nope it all works <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 212125287,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670752
    },
    {
        "content": "<p>thank you so much <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 212125298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670759
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> glad to help, still get someone other than me to review these changes though</p>",
        "id": 212125345,
        "sender_full_name": "lcnr",
        "timestamp": 1601670785
    },
    {
        "content": "<p>who would you recommend? eddyb?</p>",
        "id": 212125400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670814
    },
    {
        "content": "<p>I am not sure if that's the easiest way, or even a good one, to do this</p>",
        "id": 212125407,
        "sender_full_name": "lcnr",
        "timestamp": 1601670817
    },
    {
        "content": "<p>well it's <em>a</em> way which is more than rustdoc had before <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212125431,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601670833
    },
    {
        "content": "<p>yeah, it would probably be good for <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> to look over this</p>",
        "id": 212125532,
        "sender_full_name": "lcnr",
        "timestamp": 1601670870
    },
    {
        "content": "<p>still ping me on the PR though <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 212125634,
        "sender_full_name": "lcnr",
        "timestamp": 1601670930
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77467\">https://github.com/rust-lang/rust/pull/77467</a></p>",
        "id": 212126044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601671134
    },
    {
        "content": "<p>running a build of the compiler docs now</p>",
        "id": 212126659,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601671458
    },
    {
        "content": "<p>looks good to me at least</p>",
        "id": 212126777,
        "sender_full_name": "lcnr",
        "timestamp": 1601671546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/212125298\">said</a>:</p>\n<blockquote>\n<p>thank you so much <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n</blockquote>\n<p>I take it all back, there is no reason to thank me... thank you for fixing the query return types</p>",
        "id": 212128630,
        "sender_full_name": "lcnr",
        "timestamp": 1601672564
    },
    {
        "content": "<p>i am deeply in love</p>",
        "id": 212128646,
        "sender_full_name": "lcnr",
        "timestamp": 1601672571
    },
    {
        "content": "<p>they were bothering me so much lol</p>",
        "id": 212128656,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601672582
    },
    {
        "content": "<p>literally impossible to read</p>",
        "id": 212128668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601672588
    },
    {
        "content": "<p>yes, awesome!! :D</p>",
        "id": 212129049,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601672792
    },
    {
        "content": "<p>That is sooo much better!!! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 212129056,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1601672795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> can you check if <a href=\"https://github.com/rust-lang/rust/issues/14072\">https://github.com/rust-lang/rust/issues/14072</a> is fixed or related? it seems similar at a high level</p>",
        "id": 212131304,
        "sender_full_name": "simulacrum",
        "timestamp": 1601674307
    },
    {
        "content": "<p>wow, that's an <em>old</em> link at the top of that issue</p>",
        "id": 212131416,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674360
    },
    {
        "content": "<p>looks like <a href=\"https://doc.rust-lang.org/std/str/struct.CharIndices.html\">https://doc.rust-lang.org/std/str/struct.CharIndices.html</a> is the modern version</p>",
        "id": 212131430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674373
    },
    {
        "content": "<p>I don't see any examples that are still broken? <a href=\"https://doc.rust-lang.org/nightly/std/str/struct.Lines.html#impl-Iterator\">https://doc.rust-lang.org/nightly/std/str/struct.Lines.html#impl-Iterator</a> shows <code>&amp;'a str</code>, not <code>Self::Item</code></p>",
        "id": 212131573,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674446
    },
    {
        "content": "<p>if you mean <a href=\"https://github.com/rust-lang/rust/issues/15977#issuecomment-71316427\">https://github.com/rust-lang/rust/issues/15977#issuecomment-71316427</a> this won't help at all with that, it's not related to normalization</p>",
        "id": 212131666,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674496
    },
    {
        "content": "<p>yeah none of those are qualified paths, so my fix won't affect them</p>",
        "id": 212131810,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601674578
    },
    {
        "content": "<p>This one shows the <code>&lt;A&gt;</code> that Alex mentioned:<br>\n<a href=\"https://doc.rust-lang.org/0.10/std/str/struct.CharOffsets.html\">https://doc.rust-lang.org/0.10/std/str/struct.CharOffsets.html</a></p>",
        "id": 212132021,
        "sender_full_name": "cuviper",
        "timestamp": 1601674710
    },
    {
        "content": "<p>but it already looks better here: <br>\n<a href=\"https://doc.rust-lang.org/0.11.0/std/str/struct.CharOffsets.html\">https://doc.rust-lang.org/0.11.0/std/str/struct.CharOffsets.html</a></p>",
        "id": 212132040,
        "sender_full_name": "cuviper",
        "timestamp": 1601674735
    },
    {
        "content": "<p>both are back before associated types</p>",
        "id": 212132074,
        "sender_full_name": "cuviper",
        "timestamp": 1601674756
    },
    {
        "content": "<p>fyi if someone else wants to review <a href=\"https://github.com/rust-lang/rust/pull/77467\">https://github.com/rust-lang/rust/pull/77467</a> feel free, I just pinged eddyb since <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> suggested it</p>",
        "id": 212133600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601675842
    },
    {
        "content": "<p>Should I mark it as <code>relnotes</code>? :)</p>",
        "id": 212134183,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601676273
    },
    {
        "content": "<p>yeah, I think this change would make sense as relnotes</p>",
        "id": 212158912,
        "sender_full_name": "lcnr",
        "timestamp": 1601711003
    },
    {
        "content": "<p>done</p>",
        "id": 212158921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601711029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> so, I got stuck trying to make this work across crates</p>",
        "id": 212948687,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602391402
    },
    {
        "content": "<p>I tried implementing it for <code>ty::ProjectionTy</code> and it didn't work at all</p>",
        "id": 212948689,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602391415
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -570,9 +570,34 @@ impl&lt;'tcx&gt; Clean&lt;Type&gt; for ty::ProjectionTy&lt;'tcx&gt; {</span>\n             GenericBound::TraitBound(t, _) =&gt; t.trait_,\n             GenericBound::Outlives(_) =&gt; panic!(\"cleaning a trait got a lifetime\"),\n         };\n<span class=\"gi\">+        use crate::rustc_trait_selection::infer::TyCtxtInferExt;</span>\n<span class=\"gi\">+        use crate::rustc_trait_selection::traits::query::normalize::AtExt;</span>\n<span class=\"gi\">+        use rustc_middle::traits::ObligationCause;</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        // Try to normalize `&lt;X as Y&gt;::T` to a type</span>\n<span class=\"gi\">+        // FIXME: this param_env looks wrong</span>\n<span class=\"gi\">+        //let trait_ref = cx.tcx.associated_item(self.item_def_id).container.id();</span>\n<span class=\"gi\">+        let param_env = cx.tcx.param_env(self.item_def_id);</span>\n<span class=\"gi\">+        let normalized = cx.tcx.infer_ctxt().enter(|infcx| {</span>\n<span class=\"gi\">+            infcx</span>\n<span class=\"gi\">+                .at(&amp;ObligationCause::dummy(), param_env)</span>\n<span class=\"gi\">+                .normalize(&amp;lifted)</span>\n<span class=\"gi\">+                .map(|resolved| infcx.resolve_vars_if_possible(&amp;resolved.value))</span>\n<span class=\"gi\">+        });</span>\n<span class=\"gi\">+        let ty = match &amp;normalized {</span>\n<span class=\"gi\">+            Ok(normalized_value) =&gt; {</span>\n<span class=\"gi\">+                debug!(\"resolved {:?} to {:?}\", self, normalized_value);</span>\n<span class=\"gi\">+                &amp;normalized_value</span>\n<span class=\"gi\">+            }</span>\n<span class=\"gi\">+            Err(err) =&gt; {</span>\n<span class=\"gi\">+                debug!(\"failed to resolve {:?}: {:?}\", self, err);</span>\n<span class=\"gi\">+                self</span>\n<span class=\"gi\">+            }</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+</span>\n         Type::QPath {\n<span class=\"gd\">-            name: cx.tcx.associated_item(self.item_def_id).ident.name.clean(cx),</span>\n<span class=\"gd\">-            self_type: box self.self_ty().clean(cx),</span>\n<span class=\"gi\">+            name: cx.tcx.associated_item(ty.item_def_id).ident.name.clean(cx),</span>\n<span class=\"gi\">+            self_type: box ty.self_ty().clean(cx),</span>\n             trait_: box trait_,\n         }\n     }\n</code></pre></div>\n\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustdoc::clean resolved ProjectionTy { substs: [u32], item_def_id: DefId(18:4 ~ inner[8787]::MyTrait::Y) } to ProjectionTy { substs: [u32], item_def_id: DefId(18:4 ~ inner[8787]::MyTrait::Y) }\n</code></pre></div>\n\n\n<p>which is not at all helpful</p>",
        "id": 212948731,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602391448
    },
    {
        "content": "<p>for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crate1</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// crate2</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">crate1</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212948733,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602391481
    },
    {
        "content": "<p>and using <code>normalize(lifted.self_ty())</code> instead of <code>normalize(lifted)</code> gives back <code>u32</code> which isn't at all helpful</p>",
        "id": 212948739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602391538
    },
    {
        "content": "<p>maybe I need <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.subst_and_normalize_erasing_regions\"><code>subst_and_normalize_erasing_regions</code></a>?</p>",
        "id": 212948783,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602391615
    },
    {
        "content": "<p>will look at this tomorrow, don't have to time rn. Ping me next evening if I don't reply by then</p>",
        "id": 212955171,
        "sender_full_name": "lcnr",
        "timestamp": 1602404549
    },
    {
        "content": "<p>What time is evening? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212963057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602418177
    },
    {
        "content": "<p>26 hours from now <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212963738,
        "sender_full_name": "lcnr",
        "timestamp": 1602419409
    },
    {
        "content": "<p>can you push this to github and link it to me?</p>",
        "id": 213037191,
        "sender_full_name": "lcnr",
        "timestamp": 1602509024
    },
    {
        "content": "<p>yes, one sec</p>",
        "id": 213038269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509521
    },
    {
        "content": "<p>wait, are you normalizing the <code>ProjectionTy</code> instead of the <code>Ty</code> itself?</p>",
        "id": 213038335,
        "sender_full_name": "lcnr",
        "timestamp": 1602509545
    },
    {
        "content": "<p>... yes, is that wrong?</p>",
        "id": 213038371,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509565
    },
    {
        "content": "<p>yeah, normalization uses <code>fold_ty</code> to normalize projections</p>",
        "id": 213038435,
        "sender_full_name": "lcnr",
        "timestamp": 1602509613
    },
    {
        "content": "<p>so you have to fold the whole type for this to work</p>",
        "id": 213038486,
        "sender_full_name": "lcnr",
        "timestamp": 1602509634
    },
    {
        "content": "<p>ok I see, <code>ProjectionTy</code> is always part of a larger <code>Ty</code></p>",
        "id": 213038579,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509665
    },
    {
        "content": "<p>why does it implement <code>TypeFoldable</code>?</p>",
        "id": 213038594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509673
    },
    {
        "content": "<p>because <code>Ty</code> recursively calls <code>ty::Projection(proj) =&gt; proj.fold_with(folder)</code></p>",
        "id": 213038678,
        "sender_full_name": "lcnr",
        "timestamp": 1602509714
    },
    {
        "content": "<p>it might be less hazardous to instead manually call <code>fold_with</code> for all fields in <code>Ty::super_fold_with</code></p>",
        "id": 213038724,
        "sender_full_name": "lcnr",
        "timestamp": 1602509738
    },
    {
        "content": "<p>but tbh, it is quite nice to be able to just derive <code>TypeFoldable</code> for everything and do it like this</p>",
        "id": 213038823,
        "sender_full_name": "lcnr",
        "timestamp": 1602509766
    },
    {
        "content": "<p>I do not see <code>impl Clean&lt;Type&gt; for ty::Ty</code> in rustdoc</p>",
        "id": 213038877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509803
    },
    {
        "content": "<p>Maybe <code>TyS</code></p>",
        "id": 213038930,
        "sender_full_name": "lcnr",
        "timestamp": 1602509833
    },
    {
        "content": "<p>nothing starting with <code>Ty</code> :(</p>",
        "id": 213038944,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509841
    },
    {
        "content": "<p>src/librustdoc/clean/mod.rs:1557</p>",
        "id": 213038987,
        "sender_full_name": "lcnr",
        "timestamp": 1602509869
    },
    {
        "content": "<p>oh wait I found it, it didn't have the <code>ty::</code> prefix</p>",
        "id": 213038990,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509870
    },
    {
        "content": "<p>ok nice,  so I can just normalize it before the giant match?</p>",
        "id": 213039093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602509916
    },
    {
        "content": "<p>probably, I am not sure if you sometimes want to keep things unnormalized</p>",
        "id": 213039142,
        "sender_full_name": "lcnr",
        "timestamp": 1602509944
    },
    {
        "content": "<p>if not you should be able to just normalize once at the start</p>",
        "id": 213039203,
        "sender_full_name": "lcnr",
        "timestamp": 1602509961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/213039142\">said</a>:</p>\n<blockquote>\n<p>probably, I am not sure if you sometimes want to keep things unnormalized</p>\n</blockquote>\n<p>I don't plan to, actually I would like to normalize even <em>more</em> and 'partially' normalize things if possible</p>",
        "id": 213039355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602510023
    },
    {
        "content": "<p>what does 'partially' normalize mean here?</p>",
        "id": 213039401,
        "sender_full_name": "lcnr",
        "timestamp": 1602510053
    },
    {
        "content": "<p>like turning <code>&lt;Vec&lt;T&gt; as IntoIterator&gt;::IntoIter</code> into <code>vec::IntoIter&lt;T&gt;</code></p>",
        "id": 213039422,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602510061
    },
    {
        "content": "<p>where you don't know what <code>T</code> is but the type can still be simplified</p>",
        "id": 213039443,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602510069
    },
    {
        "content": "<p>doesn't this already happen with <code>fn normalize</code>?</p>",
        "id": 213039462,
        "sender_full_name": "lcnr",
        "timestamp": 1602510075
    },
    {
        "content": "<p>let me try that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213039477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602510083
    },
    {
        "content": "<p>maybe it didn't work before because it was on the HIR</p>",
        "id": 213039494,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602510092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> how would I get the <code>param_env</code> for a <code>Ty</code>? I tried <code>tcx.param_env(ty)</code> and it said that doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">TyS</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span>: <span class=\"nc\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">query</span>::<span class=\"n\">sealed</span>::<span class=\"n\">IntoQueryParam</span><span class=\"o\">&lt;</span><span class=\"n\">rustc_span</span>::<span class=\"n\">def_id</span>::<span class=\"n\">DefId</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustdoc</span><span class=\"o\">/</span><span class=\"n\">clean</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1594</span>:<span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1594</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">                                          </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">query</span>::<span class=\"n\">sealed</span>::<span class=\"n\">IntoQueryParam</span><span class=\"o\">&lt;</span><span class=\"n\">rustc_span</span>::<span class=\"n\">def_id</span>::<span class=\"n\">DefId</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">TyS</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213043053,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602511828
    },
    {
        "content": "<p>that's hard</p>",
        "id": 213043138,
        "sender_full_name": "lcnr",
        "timestamp": 1602511871
    },
    {
        "content": "<p>I think you either have to remember the param_env of the current context</p>",
        "id": 213043168,
        "sender_full_name": "lcnr",
        "timestamp": 1602511890
    },
    {
        "content": "<p><em>you can have the same <code>ty::Ty</code> in different <code>param_env</code>s</em></p>",
        "id": 213043195,
        "sender_full_name": "lcnr",
        "timestamp": 1602511918
    },
    {
        "content": "<p>well this is unfortunate</p>",
        "id": 213043257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602511931
    },
    {
        "content": "<p>rustdoc currently doesn't track that at <em>all</em></p>",
        "id": 213043272,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602511940
    },
    {
        "content": "<p>(it would in general be better to do so I think)</p>",
        "id": 213043633,
        "sender_full_name": "lcnr",
        "timestamp": 1602512107
    },
    {
        "content": "<p>let me try and think of a quick hack in until then</p>",
        "id": 213043685,
        "sender_full_name": "lcnr",
        "timestamp": 1602512132
    },
    {
        "content": "<p>I don't mind doing the larger change if you tell me how</p>",
        "id": 213043831,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602512200
    },
    {
        "content": "<p>you could get away with only normalizing concrete types for now which should work with an empty param env until <code>trivial_bounds</code> are stable</p>",
        "id": 213043878,
        "sender_full_name": "lcnr",
        "timestamp": 1602512226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/213043831\">said</a>:</p>\n<blockquote>\n<p>I don't mind doing the larger change if you tell me how</p>\n</blockquote>\n<p>....</p>",
        "id": 213043896,
        "sender_full_name": "lcnr",
        "timestamp": 1602512235
    },
    {
        "content": "<p>let me see</p>",
        "id": 213043903,
        "sender_full_name": "lcnr",
        "timestamp": 1602512239
    },
    {
        "content": "<blockquote>\n<p>only normalizing concrete bounds</p>\n</blockquote>\n<p>I think we found why my IntoIter example didn't work <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 213044049,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602512316
    },
    {
        "content": "<p>what are you citing here?</p>",
        "id": 213044147,
        "sender_full_name": "lcnr",
        "timestamp": 1602512356
    },
    {
        "content": "<p>I guess my idea would be to add a <code>current_context: Cell&lt;Option&lt;DefId&gt;&gt;</code> to <code>DocContext</code> which you always update to be the current context you are in</p>",
        "id": 213044702,
        "sender_full_name": "lcnr",
        "timestamp": 1602512658
    },
    {
        "content": "<p>probably by adding a method like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">DocContext</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">with_context</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">DefId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">DocContext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">old</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213044983,
        "sender_full_name": "lcnr",
        "timestamp": 1602512802
    },
    {
        "content": "<p>though I would want the opinion of someone else here before start implementing this</p>",
        "id": 213045141,
        "sender_full_name": "lcnr",
        "timestamp": 1602512882
    },
    {
        "content": "<p>Instead of having rustdoc (and by extension, every external tool) track this itself, could we have rustc do it? Allow recursively normalizing everything in a module?</p>",
        "id": 213048036,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602514179
    },
    {
        "content": "<p>It seems a shame to duplicate tricky logic like this everywhere</p>",
        "id": 213048299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602514298
    },
    {
        "content": "<p>(tricky -&gt; easy to get wrong, not hard)</p>",
        "id": 213048444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602514367
    },
    {
        "content": "<p>I <em>finally</em> got this working :) <a href=\"https://github.com/rust-lang/rust/pull/77467#issuecomment-731922562\">https://github.com/rust-lang/rust/pull/77467#issuecomment-731922562</a></p>",
        "id": 217589713,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606107721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  thanks so much for all the help :)</p>",
        "id": 217589823,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606107858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> so your idea didn't work unfortunately :( <a href=\"https://github.com/rust-lang/rust/issues/79459#issuecomment-734967453\">https://github.com/rust-lang/rust/issues/79459#issuecomment-734967453</a></p>",
        "id": 218125195,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507257
    },
    {
        "content": "<p>currently I'm trying \"just don't report an error\" but I doubt that will go very well</p>",
        "id": 218125218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507281
    },
    {
        "content": "<p>Hmm</p>",
        "id": 218125223,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606507293
    },
    {
        "content": "<p>I'll have to take a look</p>",
        "id": 218125228,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606507303
    },
    {
        "content": "<p>this does fix the issue FWIW:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_trait_selection/src/traits/fulfill.rs b/compiler/rustc_trait_selection/src/traits/fulfill.rs</span>\n<span class=\"gh\">index a04f816b0f8..8087e9070c4 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_trait_selection/src/traits/fulfill.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_trait_selection/src/traits/fulfill.rs</span>\n<span class=\"gu\">@@ -21,7 +21,7 @@</span>\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n\n<span class=\"gd\">-use crate::traits::error_reporting::InferCtxtExt as _;</span>\n<span class=\"gi\">+//use crate::traits::error_reporting::InferCtxtExt as _;</span>\n use crate::traits::project::PolyProjectionObligation;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n\n<span class=\"gu\">@@ -317,8 +317,8 @@ fn process_backedge&lt;'c, I&gt;(</span>\n         if self.selcx.coinductive_match(cycle.clone().map(|s| s.obligation.predicate)) {\n             debug!(\"process_child_obligations: coinductive match\");\n         } else {\n<span class=\"gd\">-            let cycle: Vec&lt;_&gt; = cycle.map(|c| c.obligation.clone()).collect();</span>\n<span class=\"gd\">-            self.selcx.infcx().report_overflow_error_cycle(&amp;cycle);</span>\n<span class=\"gi\">+            //let cycle: Vec&lt;_&gt; = cycle.map(|c| c.obligation.clone()).collect();</span>\n<span class=\"gi\">+            //self.selcx.infcx().report_overflow_error_cycle(&amp;cycle);</span>\n         }\n     }\n }\n</code></pre></div>",
        "id": 218125286,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507326
    },
    {
        "content": "<p>but doesn't make sense in general</p>",
        "id": 218125291,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507334
    },
    {
        "content": "<p>Can you try running it with <code>RUSTDOCFLAGS=\"-Z treat-err-as-bug=1\"</code>, with that change applied</p>",
        "id": 218125293,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606507340
    },
    {
        "content": "<p>the <code>TraitQueryMode</code> change</p>",
        "id": 218125299,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606507349
    },
    {
        "content": "<p>sure</p>",
        "id": 218125301,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507352
    },
    {
        "content": "<p>and see where the error is getting reported from?</p>",
        "id": 218125306,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606507358
    },
    {
        "content": "<p>this is where it was before, would you expect it to change with the TraitQueryMode change? <a href=\"https://github.com/rust-lang/rust/issues/79459#issuecomment-734863569\">https://github.com/rust-lang/rust/issues/79459#issuecomment-734863569</a></p>",
        "id": 218125317,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507380
    },
    {
        "content": "<p>yeah</p>",
        "id": 218125354,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606507403
    },
    {
        "content": "<p>if it doesn't change, it'll be good to see what the call stack looks like</p>",
        "id": 218125362,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606507415
    },
    {
        "content": "<p><a href=\"https://hastebin.com/momedozire.rust\">https://hastebin.com/momedozire.rust</a></p>",
        "id": 218125523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507559
    },
    {
        "content": "<p>it's exactly the same as the normal backtrace :/</p>",
        "id": 218125727,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507698
    },
    {
        "content": "<blockquote>\n<p>The normalize_projection_ty query calls <code>SelectionContext::new</code></p>\n</blockquote>\n<p>I'm not sure that closure is ever being called - if you look in the backtrace, there's a call to <code>enter_canonical_trait_query</code>, but not to <code>normalize_projection_ty::{{closure}}</code></p>",
        "id": 218125810,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606507784
    },
    {
        "content": "<p>isn't this actually unrelated to projections?</p>",
        "id": 218126209,
        "sender_full_name": "lcnr",
        "timestamp": 1606508119
    },
    {
        "content": "<p>but instead an issue when dealing with type aliases</p>",
        "id": 218126219,
        "sender_full_name": "lcnr",
        "timestamp": 1606508132
    },
    {
        "content": "<p>Oh, it looks like it's actually coming from <code>FulfillemtnContext</code></p>",
        "id": 218126222,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606508136
    },
    {
        "content": "<p>as they aren't well formed</p>",
        "id": 218126228,
        "sender_full_name": "lcnr",
        "timestamp": 1606508140
    },
    {
        "content": "<p>we probably fail here while trying to prove <code>Source: SelectDsl</code></p>",
        "id": 218126248,
        "sender_full_name": "lcnr",
        "timestamp": 1606508157
    },
    {
        "content": "<p>I think the root cause is that we try to normalize a projection that the user didn't ask us to normalize</p>",
        "id": 218126249,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606508158
    },
    {
        "content": "<p>so we don't want to report any errors that occur</p>",
        "id": 218126301,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606508175
    },
    {
        "content": "<p>including overflow errors</p>",
        "id": 218126304,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606508179
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/218126209\">said</a>:</p>\n<blockquote>\n<p>isn't this actually unrelated to projections?</p>\n</blockquote>\n<p>or well, it is related <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but not in the way one might expect</p>",
        "id": 218126336,
        "sender_full_name": "lcnr",
        "timestamp": 1606508211
    },
    {
        "content": "<p>if it helps, removing the <code>SelectDsl</code> bound <code>T::Query</code> has no effect on the error</p>",
        "id": 218126455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508329
    },
    {
        "content": "<p>but removing either blanket impl does fix it</p>",
        "id": 218126496,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508380
    },
    {
        "content": "<p>and <code>no_core</code> has no effect either (not that I expected it to, but it means I can test without having to recompile libstd)</p>",
        "id": 218126533,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508403
    },
    {
        "content": "<p>ok, here's a smaller reproduction:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n<span class=\"cp\">#![feature(no_core)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">AsQuery</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Query</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AsQuery</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Query</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">SelectDsl</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SelectDsl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nc\">AsQuery</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//T::Query: SelectDsl,</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Query</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">SelectDsl</span><span class=\"o\">&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Select</span><span class=\"o\">&lt;</span><span class=\"n\">Source</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Source</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">SelectDsl</span><span class=\"o\">&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218126748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508613
    },
    {
        "content": "<p>in particular, note that <code>&lt;Source as SelectDsl&gt;::Output</code> is itself <code>&lt;Source as SelectDsl&gt;::Output</code>, since <code>Source::Query</code> is itself <code>Source</code></p>",
        "id": 218126811,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508666
    },
    {
        "content": "<p>and if you change the blanket impl to <code>type Query = usize</code>, the error changes:<br>\n<code>error[E0275]: overflow evaluating the requirement `&lt;usize as SelectDsl&gt;::Output == _` </code></p>",
        "id": 218126845,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508725
    },
    {
        "content": "<p>(can we add a flag to <code>TyCtxt</code> on whether it's building rustdoc and use that here)</p>",
        "id": 218126908,
        "sender_full_name": "lcnr",
        "timestamp": 1606508770
    },
    {
        "content": "<p>well, rustdoc doesn't <em>always</em> want it I think</p>",
        "id": 218126918,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508787
    },
    {
        "content": "<p>... actually, are there any other times when it normalizes a type?</p>",
        "id": 218126929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508808
    },
    {
        "content": "<p>maybe we could just slap <code>if !sess.actually_rustdoc</code> on it again <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 218126938,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/218126929\">said</a>:</p>\n<blockquote>\n<p>... actually, are there any other times when it normalizes a type?</p>\n</blockquote>\n<p>auto trait checking</p>",
        "id": 218126948,
        "sender_full_name": "lcnr",
        "timestamp": 1606508838
    },
    {
        "content": "<p>probably</p>",
        "id": 218126949,
        "sender_full_name": "lcnr",
        "timestamp": 1606508841
    },
    {
        "content": "<p>but not dying on overflow errors also seems fine to me here</p>",
        "id": 218126954,
        "sender_full_name": "lcnr",
        "timestamp": 1606508853
    },
    {
        "content": "<p>oh interesting, my smaller reproduction also gives an error with rustc <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7d790865295345b9108dc628a2ad97d9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7d790865295345b9108dc628a2ad97d9</a></p>",
        "id": 218127007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508904
    },
    {
        "content": "<p>the first example has a <code>T: Query</code> bound</p>",
        "id": 218127020,
        "sender_full_name": "lcnr",
        "timestamp": 1606508927
    },
    {
        "content": "<p>but not if I uncomment <code>T::Query: SelectDsl</code></p>",
        "id": 218127022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508930
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7c51af7f2917678afaec20bee3745e21\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7c51af7f2917678afaec20bee3745e21</a></p>",
        "id": 218127046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508956
    },
    {
        "content": "<p>right, yes, I got rid of that locally since it wasn't needed</p>",
        "id": 218127062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606508974
    },
    {
        "content": "<p>why would that be different between rustc and rustdoc?</p>",
        "id": 218127139,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606509029
    },
    {
        "content": "<p>ah ok it shows up in both if you use it in a type: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=94f1c00cfd195ca1addcee2f30ad71ec\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=94f1c00cfd195ca1addcee2f30ad71ec</a></p>",
        "id": 218127186,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606509095
    },
    {
        "content": "<p>(i am kind of surprised that rustc tries to normalize <code>Select</code> at all if it isn't used)</p>",
        "id": 218127273,
        "sender_full_name": "lcnr",
        "timestamp": 1606509161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/218126938\">said</a>:</p>\n<blockquote>\n<p>maybe we could just slap <code>if !sess.actually_rustdoc</code> on it again <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>i would like that</p>",
        "id": 218127324,
        "sender_full_name": "lcnr",
        "timestamp": 1606509209
    },
    {
        "content": "<p>ok, I'll try it <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 218127327,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606509221
    },
    {
        "content": "<p>is there really nothing else in the compiler that tries to normalize things and recover from errors?</p>",
        "id": 218127377,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606509252
    },
    {
        "content": "<p>i think it's fine for rustdoc to incorrectly believe something is implemented</p>",
        "id": 218127379,
        "sender_full_name": "lcnr",
        "timestamp": 1606509264
    },
    {
        "content": "<p>so even if there were some other locations which try to normalize stuff, I think that unlike rustc, which has to be sound, rustdoc is free to allow for \"unsound\" stuff</p>",
        "id": 218127391,
        "sender_full_name": "lcnr",
        "timestamp": 1606509276
    },
    {
        "content": "<p>well typeck</p>",
        "id": 218127400,
        "sender_full_name": "lcnr",
        "timestamp": 1606509285
    },
    {
        "content": "<p>which is disabled for rustdoc</p>",
        "id": 218127408,
        "sender_full_name": "lcnr",
        "timestamp": 1606509295
    },
    {
        "content": "<p>I just think the 'right' way to do this is for rustc to return an error :/</p>",
        "id": 218127455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606509357
    },
    {
        "content": "<p>otherwise any other tool will have to encounter this bug, then find and implement its own hack simply because it's not special cased</p>",
        "id": 218127508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606509379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/218127455\">said</a>:</p>\n<blockquote>\n<p>I just think the 'right' way to do this is for rustc to return an error :/</p>\n</blockquote>\n<p>probably <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218127658,
        "sender_full_name": "lcnr",
        "timestamp": 1606509555
    },
    {
        "content": "<p>maybe one thing we could start with is improving the error message</p>",
        "id": 218128146,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510046
    },
    {
        "content": "<p>it's not clear at all that the overflow is because there's a cycle</p>",
        "id": 218128149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510053
    },
    {
        "content": "<p>this bit in particular: <a href=\"https://github.com/rust-lang/rust/blob/774bce7f5e9d0cc99a30cf37be5d175a3b530beb/compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs#L216\">https://github.com/rust-lang/rust/blob/774bce7f5e9d0cc99a30cf37be5d175a3b530beb/compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs#L216</a></p>",
        "id": 218128237,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510122
    },
    {
        "content": "<p>I'll start with that, it will at least get me a little more familiar with what's going on</p>",
        "id": 218128427,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510342
    },
    {
        "content": "<p>isn't that kind of hard to know?</p>",
        "id": 218128435,
        "sender_full_name": "lcnr",
        "timestamp": 1606510354
    },
    {
        "content": "<p>whether an overflow is a cycle or not</p>",
        "id": 218128437,
        "sender_full_name": "lcnr",
        "timestamp": 1606510361
    },
    {
        "content": "<p>though we could do better for cycles of length 1 <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218128442,
        "sender_full_name": "lcnr",
        "timestamp": 1606510373
    },
    {
        "content": "<p>there's a function just for it, it's the one I linked</p>",
        "id": 218128454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510394
    },
    {
        "content": "<p>it's special cased already not to suggest increasing the type lenght limit</p>",
        "id": 218128461,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510406
    },
    {
        "content": "<p>i should really read stuff a bit more thoroughly before writing stuff <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 218128532,
        "sender_full_name": "lcnr",
        "timestamp": 1606510467
    },
    {
        "content": "<p>hmm, I wonder if I could make <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.report_cycle\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.report_cycle</a> more general</p>",
        "id": 218128570,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510548
    },
    {
        "content": "<p>maybe I'm trying to generalize too soon though, I'll just copy paste for now</p>",
        "id": 218128646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606510641
    },
    {
        "content": "<p>hmm, so a way I can see returning an error is changing this bit in ObligationForest to allow returning something: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_data_structures/src/obligation_forest/mod.rs#L561-L566\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_data_structures/src/obligation_forest/mod.rs#L561-L566</a></p>",
        "id": 218129502,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606511615
    },
    {
        "content": "<p>or maybe just changing some state on <code>processor</code> and aborting later</p>",
        "id": 218129569,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606511667
    },
    {
        "content": "<p>so my first attempt at this didn't really work: apparently there's only one thing in the cycle?</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0391]: cycle detected when evaluating the requirement `&lt;T as Foo&gt;::Item: Sized`\n  --&gt; /home/joshua/rustc/src/test/ui/generic-associated-types/projection-bound-cycle.rs:47:5\n   |\n47 |     type Assoc = OnlySized&lt;&lt;T as Foo&gt;::Item&gt;;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 218130159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512239
    },
    {
        "content": "<p>even though I printed out everything else: <a href=\"https://hastebin.com/aqinefuran.rust\">https://hastebin.com/aqinefuran.rust</a></p>",
        "id": 218130214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512278
    },
    {
        "content": "<p>what even is a PredicateObligation <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 218130344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512431
    },
    {
        "content": "<p><code>Obligation&lt;Predicate&gt;</code></p>",
        "id": 218130456,
        "sender_full_name": "lcnr",
        "timestamp": 1606512523
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218130458,
        "sender_full_name": "lcnr",
        "timestamp": 1606512526
    },
    {
        "content": "<p>obligations are things we have to prove</p>",
        "id": 218130483,
        "sender_full_name": "lcnr",
        "timestamp": 1606512573
    },
    {
        "content": "<p>and predicate obligations mean that we have to prove a predicate</p>",
        "id": 218130490,
        "sender_full_name": "lcnr",
        "timestamp": 1606512584
    },
    {
        "content": "<p>'predicate' is some property of a type?</p>",
        "id": 218130545,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512618
    },
    {
        "content": "<p>with predicate being one of the following <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.PredicateAtom.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.PredicateAtom.html</a></p>",
        "id": 218130549,
        "sender_full_name": "lcnr",
        "timestamp": 1606512623
    },
    {
        "content": "<p>so if we want to use <code>v: Vec&lt;i32&gt;</code>, <code>v.into_iter()</code></p>",
        "id": 218130586,
        "sender_full_name": "lcnr",
        "timestamp": 1606512673
    },
    {
        "content": "<p>we would have to prove <code>Vec&lt;i32&gt;: Iterator</code></p>",
        "id": 218130599,
        "sender_full_name": "lcnr",
        "timestamp": 1606512692
    },
    {
        "content": "<p>a <code>PredicateAtom::Trait</code></p>",
        "id": 218130609,
        "sender_full_name": "lcnr",
        "timestamp": 1606512703
    },
    {
        "content": "<p>makes sense</p>",
        "id": 218130658,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512724
    },
    {
        "content": "<p>how does the compiler know there's been a cycle?</p>",
        "id": 218130665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512732
    },
    {
        "content": "<p>it calls process_backedge; how does it know it needs to?</p>",
        "id": 218130671,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/218130665\">said</a>:</p>\n<blockquote>\n<p>how does the compiler know there's been a cycle?</p>\n</blockquote>\n<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> it's a pessimistic estimate based on idk what</p>",
        "id": 218130775,
        "sender_full_name": "lcnr",
        "timestamp": 1606512850
    },
    {
        "content": "<p>it seems that what <em>should</em> be happening is that something somewhere returns a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/traits/enum.SelectionError.html#variant.Overflow\">SelectionError::Overflow</a></p>",
        "id": 218130794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606512878
    },
    {
        "content": "<p>so I tried doing that, and got these errors:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the size for values of type `str` cannot be known at compilation time\n  --&gt; /home/joshua/rustc/src/test/ui/generic-associated-types/projection-bound-cycle.rs:28:5\n   |\nLL |     type Item where str: Sized = str;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn&#39;t have a size known at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `str`\n\nerror[E0276]: impl has stricter requirements than trait\n  --&gt; /home/joshua/rustc/src/test/ui/generic-associated-types/projection-bound-cycle.rs:28:5\n   |\nLL |     type Item: Sized where &lt;Self as Foo&gt;::Item: Sized;\n   |     -------------------------------------------------- definition of `Item` from trait\n...\nLL |     type Item where str: Sized = str;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `str: Sized`\n</code></pre></div>",
        "id": 218131667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606513926
    },
    {
        "content": "<p>for this diff: <a href=\"https://hastebin.com/rilecipaxe.rust\">https://hastebin.com/rilecipaxe.rust</a></p>",
        "id": 218131681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606513964
    },
    {
        "content": "<p>and I feel like I'm sort of flailing around</p>",
        "id": 218131691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606513973
    },
    {
        "content": "<p>anyway, for now I'll throw in <code>if !actually_rustdoc</code> and shanghai anyone who objects into helping me implement the long-term fix <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218133323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606515768
    },
    {
        "content": "<p>great, apparently that breaks things</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;index out of bounds: the len is 0 but the index is 0&#39;, /home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs:199:10\n</code></pre></div>",
        "id": 218133781,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606516275
    },
    {
        "content": "<p>backtrace: <a href=\"https://hastebin.com/uyehokalun.apache\">https://hastebin.com/uyehokalun.apache</a></p>",
        "id": 218133793,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606516304
    },
    {
        "content": "<p>I've tried nothing and I'm out of ideas</p>",
        "id": 218133802,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606516315
    },
    {
        "content": "<p>another possibility is to make this off-by-default and opt-in with <code>-Z normalize-all</code> or something like that</p>",
        "id": 218176952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606591010
    },
    {
        "content": "<p>then the compiler docs are still readable, without running into all the regressions in the ecosystem</p>",
        "id": 218176958,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606591021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219477\">@Markus Westerlind</span> I saw you had a big PR refactoring obligation forest - do you have ideas for how to refactor it to return an error on overflow instead of aborting immediately?</p>",
        "id": 218177929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606592221
    },
    {
        "content": "<p>context: <a href=\"https://github.com/rust-lang/rust/issues/79459\">https://github.com/rust-lang/rust/issues/79459</a></p>",
        "id": 218177939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606592259
    },
    {
        "content": "<p>another thing I'm not clear about: why does obligation_forest use traits everywhere? AFAIK <code>OutcomeTrait</code> and <code>ObligationProcessor</code> are only implemented once (outside of tests)</p>",
        "id": 218178111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606592564
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/traits/resolution.html\">https://rustc-dev-guide.rust-lang.org/traits/resolution.html</a> seems relevant</p>",
        "id": 218178125,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606592633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> so I found a few things playing around today.</p>\n<ol>\n<li>I think I found a case where switching to Canonical mode would help: <a href=\"https://github.com/rust-lang/rust/issues/79506#issuecomment-735283913\">https://github.com/rust-lang/rust/issues/79506#issuecomment-735283913</a></li>\n<li>Yesterday, I only enabled canonical mode for intra-crate trait lookups; between crates it was still in standard mode: <a href=\"https://github.com/rust-lang/rust/blob/e37f25aa3f356546ab851e394d5598fc575eabda/compiler/rustc_trait_selection/src/traits/select/mod.rs#L232\">https://github.com/rust-lang/rust/blob/e37f25aa3f356546ab851e394d5598fc575eabda/compiler/rustc_trait_selection/src/traits/select/mod.rs#L232</a></li>\n<li>Switching to canonical mode for inter-crate lookups causes an ICE <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> </li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;assertion failed: self.query_mode == TraitQueryMode::Standard&#39;, compiler/rustc_trait_selection/src/traits/select/mod.rs:362:9\n</code></pre></div>\n<p><a href=\"https://github.com/rust-lang/rust/blob/e37f25aa3f356546ab851e394d5598fc575eabda/compiler/rustc_trait_selection/src/traits/select/mod.rs#L364-L366\">https://github.com/rust-lang/rust/blob/e37f25aa3f356546ab851e394d5598fc575eabda/compiler/rustc_trait_selection/src/traits/select/mod.rs#L364-L366</a></p>",
        "id": 218178933,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594001
    },
    {
        "content": "<p>backtrace for that ICE: <a href=\"https://hastebin.com/eloviwosag.rust\">https://hastebin.com/eloviwosag.rust</a></p>\n<div class=\"codehilite\"><pre><span></span><code>query stack during panic:\n#0 [specialization_graph_of] building specialization graph of trait `convert::From`\n#1 [check_mod_impl_wf] checking that impls are well-formed in module `num::error`\nend of query stack\n</code></pre></div>\n<p>note that this is on valid code, while compiling libcore</p>",
        "id": 218178998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594109
    },
    {
        "content": "<p>I don't think having it on unconditionally is correct</p>",
        "id": 218179009,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606594145
    },
    {
        "content": "<p>You would want it just for the rustdoc case</p>",
        "id": 218179018,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606594162
    },
    {
        "content": "<p>what are the conditions for turning it on?</p>",
        "id": 218179021,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594171
    },
    {
        "content": "<p>which could be tricky</p>",
        "id": 218179022,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1606594176
    },
    {
        "content": "<p>just for normalization?</p>",
        "id": 218179025,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594179
    },
    {
        "content": "<p>ah ok</p>",
        "id": 218179027,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594183
    },
    {
        "content": "<p>well, let me try special-casing rustdoc again <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 218179029,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594191
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_trait_selection/src/traits/select/mod.rs b/compiler/rustc_trait_selection/src/traits/select/mod.rs</span>\n<span class=\"gh\">index 74b6652981a..68d1af67dac 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_trait_selection/src/traits/select/mod.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_trait_selection/src/traits/select/mod.rs</span>\n<span class=\"gu\">@@ -218,18 +218,14 @@ pub fn new(infcx: &amp;'cx InferCtxt&lt;'cx, 'tcx&gt;) -&gt; SelectionContext&lt;'cx, 'tcx&gt; {</span>\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n<span class=\"gd\">-            query_mode: TraitQueryMode::Standard,</span>\n<span class=\"gi\">+            query_mode: if infcx.tcx.sess.opts.actually_rustdoc { TraitQueryMode::Canonical } else { TraitQueryMode::Standard },</span>\n         }\n     }\n\n     pub fn intercrate(infcx: &amp;'cx InferCtxt&lt;'cx, 'tcx&gt;) -&gt; SelectionContext&lt;'cx, 'tcx&gt; {\n         SelectionContext {\n<span class=\"gd\">-            infcx,</span>\n<span class=\"gd\">-            freshener: infcx.freshener(),</span>\n             intercrate: true,\n<span class=\"gd\">-            intercrate_ambiguity_causes: None,</span>\n<span class=\"gd\">-            allow_negative_impls: false,</span>\n<span class=\"gd\">-            query_mode: TraitQueryMode::Standard,</span>\n<span class=\"gi\">+            ..SelectionContext::new(infcx)</span>\n         }\n     }\n</code></pre></div>",
        "id": 218179091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594287
    },
    {
        "content": "<p>ok, so that does actually fix the cross-crate scenario <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 218179153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594409
    },
    {
        "content": "<p>so assuming I can figure out a less hacky way to do that, the only thing left is for cycles</p>",
        "id": 218179156,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20I.20normalize.20projection.20types.20to.20a.20single.20type.3F/near/218179156\">said</a>:</p>\n<blockquote>\n<p>so assuming I can figure out a less hacky way to do that</p>\n</blockquote>\n<p>This seems to have worked :)</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_traits/src/normalize_projection_ty.rs b/compiler/rustc_traits/src/normalize_projection_ty.rs</span>\n<span class=\"gh\">index a8e376838e2..0110cf2775a 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_traits/src/normalize_projection_ty.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_traits/src/normalize_projection_ty.rs</span>\n<span class=\"gu\">@@ -24,7 +24,7 @@ fn normalize_projection_ty&lt;'tcx&gt;(</span>\n     tcx.infer_ctxt().enter_canonical_trait_query(\n         &amp;goal,\n         |infcx, fulfill_cx, ParamEnvAnd { param_env, value: goal }| {\n<span class=\"gd\">-            let selcx = &amp;mut SelectionContext::new(infcx);</span>\n<span class=\"gi\">+            let selcx = &amp;mut SelectionContext::with_query_mode(infcx, traits::TraitQueryMode::Canonical);</span>\n             let cause = ObligationCause::dummy();\n             let mut obligations = vec![];\n             let answer = traits::normalize_projection_type(\n</code></pre></div>",
        "id": 218179276,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594669
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79517\">https://github.com/rust-lang/rust/pull/79517</a></p>",
        "id": 218179402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606594867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> let me know if you think of a way to report this for cycles :) I tried to take a crack at it yesterday without much success</p>",
        "id": 218179576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606595203
    },
    {
        "content": "<p>Can you explain again the different between <code>TraitQueryMode::Canonical</code> and a canonical query?</p>",
        "id": 218179654,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606595399
    },
    {
        "content": "<p>one is the query system (<code>rustc_middle::ty::query</code>) and one is for resolving traits (<code>rustc_trait_selection</code>)?</p>",
        "id": 218179697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606595429
    },
    {
        "content": "<p>what is the query system one doing?</p>",
        "id": 218179702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606595437
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html?highlight=canonical#canonical-queries\">https://rustc-dev-guide.rust-lang.org/traits/canonical-queries.html?highlight=canonical#canonical-queries</a> tells me what a canonical query is, but not how it differs from a normal query</p>",
        "id": 218179851,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606595694
    },
    {
        "content": "<p>(I think)</p>",
        "id": 218179852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606595696
    },
    {
        "content": "<p>Went with <a href=\"https://github.com/rust-lang/rust/pull/79525\">https://github.com/rust-lang/rust/pull/79525</a> for now</p>",
        "id": 218211528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606654318
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 218213851,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1606658051
    }
]