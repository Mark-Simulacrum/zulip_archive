[
    {
        "content": "<p>I read that one of the current issues in the rust compiler is that the only time parallelism is used is in codegen.</p>\n<p>I am curious about possibly implementing the lexer to include parallelism, <br>\nbut assume someone else is maybe working on this, or things like this have already been considered.</p>\n<p>Would someone be able to point me in the right direction?</p>",
        "id": 233037466,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1617488643
    },
    {
        "content": "<p>The compiler has some support for parallelism before codegen when compiled in the <code>parallel-compiler</code> configuration. This configuration is not well tested, so it's disable by default. I don't know if the lexer parallelism is implemented yet.</p>",
        "id": 233037872,
        "sender_full_name": "cjgillot",
        "timestamp": 1617489115
    },
    {
        "content": "<p>I think parallelizing lexing is unlikely to have much of an impact because it takes little time compared to the rest of the compiler. Extending the query system to include parts of the compiler frontend and then using the query-level parallelization that's already there seems like a more promising approach.</p>",
        "id": 233039518,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617491014
    },
    {
        "content": "<p>When you say compiler front end, do you mean the lexer? If that's the case I'm assuming that would then mean extending the query system to be used in the lexing/parsing of the source? Just for clarification.</p>",
        "id": 233040067,
        "sender_full_name": "Timothy Maloney",
        "timestamp": 1617491743
    },
    {
        "content": "<p>Yes, and also within name resolution and macro expansion.</p>",
        "id": 233040285,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617492012
    },
    {
        "content": "<p>I don't think lexing should itself be a query, but parsing a file or macro expansion might</p>",
        "id": 233040299,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617492035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Parallelism.20in.20the.20compiler/near/233039518\">said</a>:</p>\n<blockquote>\n<p>I think parallelizing lexing is unlikely to have much of an impact because it takes little time compared to the rest of the compiler. Extending the query system to include parts of the compiler frontend and then using the query-level parallelization that's already there seems like a more promising approach.</p>\n</blockquote>\n<p>some recent discussion of this: <a href=\"#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Design.20of.20HIR\">https://rust-lang.zulipchat.com/#narrow/stream/241847-t-compiler.2Fwg-incr-comp/topic/Design.20of.20HIR</a></p>",
        "id": 233040425,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617492198
    },
    {
        "content": "<p>To clarify, this isn't necessarily a blocker for having parallel queries, it just makes them more effective. If your goal is simply to add more parallelism to rustc, then looking into the existing parallel query engine and improving it (for example, to reduce the overhead compared to a single-threaded compiler) is probably the way to go.</p>",
        "id": 233040531,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617492351
    },
    {
        "content": "<p><code>parallel-compiler = true</code> doesn't help with building the stage1 compiler either since that just uses the beta one, right?</p>",
        "id": 233044985,
        "sender_full_name": "The 8472",
        "timestamp": 1617497732
    },
    {
        "content": "<p>I am not sure what you mean by the stage 1 compiler (the wording is ambiguous: <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap</a>). The bootstrap compiler doesn't have parallel-compiler = true set, no</p>",
        "id": 233045097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617497876
    },
    {
        "content": "<p>e.g. when running <code>./x.py test src/test/ui --stage 1</code>, that builds a rustc (which takes several minutes) and that won't benefit from <code>parallel-compiler = true</code></p>",
        "id": 233045728,
        "sender_full_name": "The 8472",
        "timestamp": 1617498522
    },
    {
        "content": "<p>correct</p>",
        "id": 233045751,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617498580
    },
    {
        "content": "<p>the resulting compiler will though</p>",
        "id": 233046107,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617499027
    },
    {
        "content": "<p>that's not useful for testing because they're already executed in parallel</p>",
        "id": 233046168,
        "sender_full_name": "The 8472",
        "timestamp": 1617499085
    },
    {
        "content": "<p>well, depending what you mean by benefit - I think some UI tests are non-deterministic with multiple threads <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <a href=\"https://github.com/rust-lang/rust/issues/75760\">https://github.com/rust-lang/rust/issues/75760</a></p>",
        "id": 233046188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617499123
    }
]