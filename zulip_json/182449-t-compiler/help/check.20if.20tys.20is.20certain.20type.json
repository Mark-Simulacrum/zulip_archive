[
    {
        "content": "<p>What is the best way to check if the ty of a struct is a specific type in an easy manner? such as if i want to find out if a TyS is <code>somecrate::foo::Bar</code></p>",
        "id": 259193915,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635311349
    },
    {
        "content": "<p>If you're specifically checking the type of a struct, couldn't you compare the <code>DefId</code> of the struct in question against the <code>DefId</code> of <code>somecrate::foo::Bar</code>? Or did I misunderstand your question?</p>",
        "id": 259761570,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635643281
    },
    {
        "content": "<p>I think his question is how to find the DefId of <code>somecrate::foo::Bar</code>. Depending on your restrictions you may be able to use a <code>rustc_diagnostic_item</code></p>",
        "id": 259778420,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635671477
    },
    {
        "content": "<p>I'm not sure how to <em>get</em> the DefId of that struct, i'd need to get rustc to find it somehow</p>",
        "id": 259806793,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635712210
    },
    {
        "content": "<p>Is this a struct known in advance, something like <code>Vec</code>?</p>",
        "id": 259809326,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635715888
    },
    {
        "content": "<p>Yes</p>",
        "id": 259809645,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635716427
    },
    {
        "content": "<p>If this is for diagnostics purposes, use a <a href=\"https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-items.html\">diagnostic item</a>. If it could change program behavior, use a <a href=\"https://rustc-dev-guide.rust-lang.org/lang-items.html\">language item</a>.</p>",
        "id": 259809717,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635716575
    },
    {
        "content": "<p>This is for my custom codegen backend, i want to support the OptiX library (gpu-side), but optix has some very... exotic ways of doing things. For example, only certain programs are allowed to call certain functions, for example, an <code>__anyhit__</code> program (if a ray hits any object) cannot call trace (to trace a new ray), stuff like that. So i was thinking of implementing certain checks as lints, since i can register them because codegens are rustc_private</p>",
        "id": 259809808,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635716730
    },
    {
        "content": "<p>so i need to check that certain structs in a crate called <code>optix_gpu</code> are not being used incorrectly/in an odd way</p>",
        "id": 259809815,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635716756
    },
    {
        "content": "<p>Well, I think the only \"correct\" way to do it would be to add <code>rustc_diagnostic_item</code> to that library, but that's probably impractical. A somewhat hacky way of doing it, which would have to be updated whenever something was moved or renamed in the library, would be to do a string comparison of <code>def_path_str</code> against <code>somecrate::foo::Bar</code>.</p>",
        "id": 259810283,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635717441
    },
    {
        "content": "<p>Hmm i see, i think checking def_path_str should be mostly fine, since the path of those structs should not change</p>",
        "id": 259810318,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635717481
    },
    {
        "content": "<p>although the first would prob work too, since the codegen needs to be build with rustc_private, and on the nvptx targets the crate only builds if its using the custom codegen</p>",
        "id": 259810441,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1635717610
    },
    {
        "content": "<p>Note that <code>rustc_diagnostic_item</code> is an internal-use-only attribute; it's feature-gated behind <code>rustc_attrs</code> (or similar). So adding it to the library is probably still not great.</p>",
        "id": 259810538,
        "sender_full_name": "Noah Lev",
        "timestamp": 1635717685
    },
    {
        "content": "<p>I don't think it matters if the said library can only be used with a custom codegen</p>",
        "id": 259810557,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635717719
    },
    {
        "content": "<p>Codegen backends are more rustc internal than lang items or diagnostic items</p>",
        "id": 259810607,
        "sender_full_name": "Gary Guo",
        "timestamp": 1635717735
    },
    {
        "content": "<p>yea use <code>rustc_diagnostic_item</code> for this. In my verification tool I heavily (ab)use this to allow my verification backend to be aware of certain information.</p>",
        "id": 259813351,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1635721521
    }
]