[
    {
        "content": "<p>Is there a way to have the compiler optimize the size of this enum to be 4 bytes? I'm willing to give up bits of each variant for a tag, but I'd rather not give up an entire <em>byte</em> of each variant. I'm curious to know if that's what it takes though.</p>\n<div class=\"codehilite\"><pre><span></span><code>#[rustc_layout_scalar_valid_range_end(???)]\nstruct A {\n    x: u32\n}\n\n#[rustc_layout_scalar_valid_range_end(???)]\nstruct B {\n    x: u32\n}\n\nenum E {\n    VariantA(A),\n    VariantB(B),\n}\n</code></pre></div>\n<p>I played with various <code>rustc_layout_scalar_valid_range_end</code> attribute values on <code>A</code> and <code>B</code>, thinking that might help, but to no avail. I obviously don't know how that attribute works. :)</p>",
        "id": 217818136,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1606254533
    },
    {
        "content": "<p>No, there's nothing this can do for you, I believe -- we don't support packing into live values</p>",
        "id": 217818302,
        "sender_full_name": "simulacrum",
        "timestamp": 1606254616
    },
    {
        "content": "<p>i.e., both A and B can't hold a discriminant regardless of how many valid bits they have</p>",
        "id": 217818350,
        "sender_full_name": "simulacrum",
        "timestamp": 1606254641
    },
    {
        "content": "<p>(from the POV of the compiler, obviously, in practice they could)</p>",
        "id": 217818400,
        "sender_full_name": "simulacrum",
        "timestamp": 1606254668
    },
    {
        "content": "<p>K, good to know. Thanks!</p>",
        "id": 217818505,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1606254724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306073\">@Tyson Nottingham</span> The core problem here is that you can get a <code>&amp;mut B</code> or a <code>&amp;mut A</code> into that enum, and any write into that will overwrite the full 4 bytes, so there isn't actually anywhere to hide a discriminant.</p>\n<p>Making that work would need a new \"you can't get references to the fields\" feature so that the discriminant could always be masked-away on reads or or'ed-back-in on writes.</p>\n<p>(Strawman <code>enum E { VariantA(move A), VariantB(move V) }</code> or whatever.)</p>",
        "id": 217830269,
        "sender_full_name": "scottmcm",
        "timestamp": 1606262600
    },
    {
        "content": "<p>Gotcha, thanks for the explanation</p>",
        "id": 217831057,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1606263210
    },
    {
        "content": "<p>(I guess it could theoretically work -- dunno if it does today -- if they're distinct value ranges.  But if you want them both to allow <code>0</code>, it can't work so long as references are allowed.)</p>",
        "id": 217835423,
        "sender_full_name": "scottmcm",
        "timestamp": 1606267314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> even just reads are problematic because if you have a &amp;T you don't know if it's part of the enum or not</p>",
        "id": 217836232,
        "sender_full_name": "simulacrum",
        "timestamp": 1606268205
    }
]