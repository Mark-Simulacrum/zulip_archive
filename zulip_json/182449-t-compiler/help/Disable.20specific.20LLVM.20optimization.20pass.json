[
    {
        "content": "<p>Is it possible to instruct rustc to skip running a specific LLVM optimization pass?</p>",
        "id": 258247505,
        "sender_full_name": "Sol Boucher",
        "timestamp": 1634667763
    },
    {
        "content": "<p>I have already used <code>-Cllvm-args=-opt-bisect-limit</code> to confirm that the pass I need to skip is <code>-prune-eh</code> (\"Remove unused exception handling info\"). But it seems that switch can only be used to skip that pass _and all subsequent ones_, not just that pass.</p>",
        "id": 258247883,
        "sender_full_name": "Sol Boucher",
        "timestamp": 1634667913
    },
    {
        "content": "<p>Put another way, is there a way to add the <em>negation</em> of a pass to the list? I want something like <code>-Cpasses=no-prune-eh</code>.</p>",
        "id": 258264118,
        "sender_full_name": "Sol Boucher",
        "timestamp": 1634674386
    },
    {
        "content": "<p>It looks like I can get a list of the arguments to opt by doing <code>rustc -Cllvm-args=-debug-pass=Arguments -Ccodegen-units=1</code>. I would think that I could then iteratively call lib/rustlib/x86_64-unknown-linux-gnu/bin/opt with the provided arguments, omitting the undesirable one. However, the very first invocation fails with the following unrecognized command-line arguments:</p>\n<ul>\n<li><code>-machinemoduleinfo</code></li>\n<li><code>-collector-metadata</code></li>\n<li><code>-gc-lowering</code></li>\n<li><code>-shadow-stack-gc-lowering</code></li>\n<li><code>-finalize-isel</code></li>\n<li><code>-localstackalloc</code></li>\n</ul>\n<p>Is there some shared object I need to <code>-load</code> first?</p>",
        "id": 258273210,
        "sender_full_name": "Sol Boucher",
        "timestamp": 1634678059
    },
    {
        "content": "<p><code>-debug-pass=Arguments</code> prints machine (llc) passes too</p>",
        "id": 258273501,
        "sender_full_name": "nagisa",
        "timestamp": 1634678204
    },
    {
        "content": "<p>Hmm. The first set isn't accepted by llc either, though. All lines begin with the same label, \"Pass arguments:\"<br>\nIs there any way to tell how they're supposed to be used?</p>",
        "id": 258273779,
        "sender_full_name": "Sol Boucher",
        "timestamp": 1634678304
    },
    {
        "content": "<p>I guess I can just skip any sets of arguments that opt doesn't accept wholesale...<br>\nMy idea for getting the original LLVM IR to manually run opt on was to call rustc with <code>-Cno-prepopulate-passes</code>; will that skip non-opt passes, though?</p>",
        "id": 258274731,
        "sender_full_name": "Sol Boucher",
        "timestamp": 1634678610
    },
    {
        "content": "<p>I just copy all of them arguments and them delete the specific ones that opt complains about.</p>",
        "id": 258278997,
        "sender_full_name": "nagisa",
        "timestamp": 1634680568
    },
    {
        "content": "<p>I'm still confused about this first line of <code>-debug-pass=Arguments</code> output. The opt command doesn't accept them all, but I thought rustc would. But when I do <code>rustc --emit llvm-ir -Cno-prepopulate-passes -Cpasses=\"tti targetlibinfo targetpassconfig machinemoduleinfo collector-metadata assumption-cache-tracker profile-summary-info machine-branch-prob pre-isel-intrinsic-lowering atomic-expand lower-amx-type verify gc-lowering shadow-stack-gc-lowering lower-constant-intrinsics unreachableblockelim post-inline-ee-instrument scalarize-masked-mem-intrin expand-reductions indirectbr-expand rewrite-symbols dwarfehprepare safe-stack stack-protector verify finalize-isel localstackalloc x86-slh machinedomtree x86-flags-copy-lowering phi-node-elimination twoaddressinstruction regallocfast edge-bundles x86-codegen fixup-statepoint-caller-saved lazy-machine-block-freq machine-opt-remark-emitter prologepilog postrapseudos x86-pseudo gc-analysis fentry-insert xray-instrumentation patchable-function x86-evex-to-vex-compress funclet-layout stackmap-liveness livedebugvalues x86-seses cfi-instr-inserter x86-lvi-ret lazy-machine-block-freq machine-opt-remark-emitter\" -O minimal.rs</code>, I get this:<br>\n<code>LLVM ERROR: Trying to construct TargetPassConfig without a target machine. Scheduling a CodeGen pass without a target triple set?</code><br>\nAny ideas?</p>",
        "id": 258375103,
        "sender_full_name": "Sol Boucher",
        "timestamp": 1634739177
    }
]