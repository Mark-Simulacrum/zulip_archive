[
    {
        "content": "<p>Hi all! I am a brand new rustc contributor, I hope to to improve the codegen for <code>Option::clone()</code> (current example: <a href=\"https://rust.godbolt.org/z/KTcTEo\">https://rust.godbolt.org/z/KTcTEo</a>). My idea is that <code>Option::&lt;T&gt;.clone()</code> should be a memcpy if T is \"trivial\" and \"small\" in some sense. I would appreciate guidance for how to approach this fix - where it should go, the proper notion of \"trivial\", etc.</p>",
        "id": 204630298,
        "sender_full_name": "ridiculous_fish",
        "timestamp": 1595393624
    },
    {
        "content": "<blockquote>\n<p>trivial and small</p>\n</blockquote>\n<p>That sounds like <code>Copy</code>.</p>",
        "id": 204630876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595394492
    },
    {
        "content": "<p>Not all \"trivial\" and \"small\" types are <code>Copy</code>, for example <code>Range</code> is not</p>",
        "id": 204630956,
        "sender_full_name": "ridiculous_fish",
        "timestamp": 1595394636
    },
    {
        "content": "<p>Actually maybe that's a better starting point? Can I fix the <code>Option&lt;Range&gt;</code> codegen? <a href=\"https://rust.godbolt.org/z/7a5Yqx\">https://rust.godbolt.org/z/7a5Yqx</a></p>",
        "id": 204631042,
        "sender_full_name": "ridiculous_fish",
        "timestamp": 1595394841
    },
    {
        "content": "<p>This happens even for <code>Copy</code> types, <a href=\"https://rust.godbolt.org/z/xWYzTc\">https://rust.godbolt.org/z/xWYzTc</a>. There are multiple avenues that could be attempted – generating <code>Clone</code> impl that does not <code>match</code> is one. The problem is its already something that is supposed to exist! (<a href=\"https://github.com/rust-lang/rust/pull/31414\">https://github.com/rust-lang/rust/pull/31414</a>)</p>",
        "id": 204655531,
        "sender_full_name": "nagisa",
        "timestamp": 1595418787
    },
    {
        "content": "<p><code>impl&lt;T: Clone&gt; Clone for Option&lt;T&gt;</code> is manual in stdlib, rather than a derive, but even making a custom <code>Option</code> doesn’t help: <a href=\"https://rust.godbolt.org/z/GMTPnE\">https://rust.godbolt.org/z/GMTPnE</a></p>",
        "id": 204655571,
        "sender_full_name": "nagisa",
        "timestamp": 1595418826
    },
    {
        "content": "<p>so I would probably start by looking into why the <code>Clone = Copy</code> for <code>T: Copy</code> from <a href=\"https://github.com/rust-lang/rust/issues/31414\">#31414</a> is not kicking in.</p>",
        "id": 204655652,
        "sender_full_name": "nagisa",
        "timestamp": 1595418859
    },
    {
        "content": "<p>Isn't this because range is not <code>Copy</code>?</p>",
        "id": 204655703,
        "sender_full_name": "lcnr",
        "timestamp": 1595418896
    },
    {
        "content": "<p>the examples I’ve linked are Copy, there's even an assert there.</p>",
        "id": 204655834,
        "sender_full_name": "nagisa",
        "timestamp": 1595418979
    },
    {
        "content": "<p>Looking into those first would make sense to me.</p>",
        "id": 204655861,
        "sender_full_name": "nagisa",
        "timestamp": 1595418998
    },
    {
        "content": "<p>Could codegen know that a struct <em>could</em> be Copy (but isn’t for semantic reasons)and leverage that knowledge?</p>",
        "id": 204656014,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595419103
    },
    {
        "content": "<p>Fixing a non-copy version is significantly more difficult, especially because you can’t always be sure that copying the whole thing is going to be cheaper than copying just a branch of it.</p>",
        "id": 204656049,
        "sender_full_name": "nagisa",
        "timestamp": 1595419129
    },
    {
        "content": "<p>think something along the lines of <code>#[derive(Clone)] enum { Cheap, StillCheap(u32), Expensive([u32; 1000]) }</code> // assume huge arrays implement clone, etc.</p>",
        "id": 204656070,
        "sender_full_name": "nagisa",
        "timestamp": 1595419152
    },
    {
        "content": "<p>large arrays are already special-cased as Copy/Clone in the compiler</p>",
        "id": 204658686,
        "sender_full_name": "simulacrum",
        "timestamp": 1595420960
    },
    {
        "content": "<p>(at least according to the docs, <a href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">https://doc.rust-lang.org/nightly/std/primitive.array.html</a>)</p>",
        "id": 204658709,
        "sender_full_name": "simulacrum",
        "timestamp": 1595420971
    },
    {
        "content": "<p>Thank you all for the starting points, I will see what I can do!</p>",
        "id": 204758204,
        "sender_full_name": "ridiculous_fish",
        "timestamp": 1595476414
    }
]