[
    {
        "content": "<p>Ive ran into an issue trying to codegen address spaces in my CUDA codegen. I am a bit confused on exactly how the statics codegen process happens in cg_ssa. This is basically what i need to do:</p>\n<ul>\n<li>CUDA allows you to define what memory space a global is in by using LLVM address spaces.</li>\n<li>Anything not in a specific addrspace is in a generic address space where it is unknown what address space the thing relies in.</li>\n<li>I can't use specific addrspaces everywhere because rustc does not track addrspaces.</li>\n<li>I can declare a global in a specific addrspace but then treat it as generic with a const addrspace cast, then run an InferAddressSpaces pass to make the addrspaces more specific in their use.</li>\n</ul>\n<p>But the issue is, i am not sure what the right place to return a const addrspace cast is. cg_ssa has a super confusing static codegen process im not quite sure about. I thought <code>get_static</code> was the place for \"fetch me the value of this static\", but looking at its uses in cg_ssa, it seems to only be used for thread local refs. I can't do it in <code>predefine_static</code> because <code>codegen_static</code> tries grabbing info about the original static, which obviously fails if done on a const addrspace cast. So im just wondering what the best way of doing this is.</p>",
        "id": 263107379,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1638255315
    },
    {
        "content": "<p>Also, rustc seems to be inlining statics into their value, which is not really \"correct\" with address spaces and certain things in CUDA, is there a way to disable this from user code and/or from the codegen?</p>",
        "id": 263108488,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1638256717
    },
    {
        "content": "<p>I got it to work after a lot of debugging random const bitcast failures, we now have statics being put in const addrspaces by default <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>    // .globl    foo\n.const .align 1 .b8 _ZN7add_gpu3FOO17h7d38b143314c0523E[1] = {25};\n\n.visible .func  (.param .b32 func_retval0) foo()\n{\n    .reg .b32     %r&lt;2&gt;;\n\n\n    ld.const.u8     %r1, [_ZN7add_gpu3FOO17h7d38b143314c0523E];\n    st.param.b32     [func_retval0+0], %r1;\n    ret;\n\n}\n</code></pre></div>",
        "id": 263387113,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1638413257
    },
    {
        "content": "<p>Not for <code>allocXX</code> or <code>privateXX</code> globals though, those are a bit weird</p>",
        "id": 263387130,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1638413281
    }
]