[
    {
        "content": "<p>While working on a new compiler backend, we have stumbled upon a crate that <a href=\"https://github.com/firecracker-microvm/firecracker/blob/main/src/vm-memory/Cargo.toml\">depends on the <code>vm-memory</code> crate</a> and <a href=\"https://github.com/firecracker-microvm/firecracker/blob/main/src/vm-memory/src/mmap.rs#L55\">extends a couple of structs</a> (and their implementations) from that crate. Our backend is having trouble with this feature since it generates code as if there were two crates, resulting in conflicts during the linking stage coming from the redefinition of these structs.</p>\n<p>First, is it common to find this in Rust projects? All I could find regarding dependencies is <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html\">this section of the Cargo book</a>. I would to know more about how this is handled in Rust, so any pointers would be appreciated.</p>",
        "id": 240832211,
        "sender_full_name": "Adrian Palacios",
        "timestamp": 1622466919
    },
    {
        "content": "<p>renaming packages? yeah, that's not too common, but also not super rare</p>",
        "id": 240833170,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622467439
    },
    {
        "content": "<p>but I'm not sure why this would affect a compiler backend? it just affects name resolution to my knowledge</p>",
        "id": 240833267,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622467506
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink  [he/him]</span> </p>\n<p>For example, for the <code>GuestRegionMmap</code> struct being redefined our backend shows this conflict:</p>\n<div class=\"codehilite\"><pre><span></span><code>reason for conflict at #this.ptr.pointer-&gt;data: number of members is different (2/3)\n\nstruct mmap::GuestRegionMmap {\n  struct mmap_unix::MmapRegion mapping;\n  struct guest_memory::GuestAddress guest_base;\n}\nstruct mmap::GuestRegionMmap {\n  struct vm_memory::MmapRegion mapping;\n  struct vm_memory::GuestAddress guest_base;\n  struct std::option::Option&lt;bitmap::Bitmap&gt; dirty_bitmap;\n}\n</code></pre></div>\n<p>Now that you mention it, names are definitely the main problem here:</p>\n<ol>\n<li>Struct names do not include the crate's name so they cannot be distinguished.</li>\n<li>Members <code>mapping</code> and <code>guest_base</code> have type <code>vm_memory::*</code> which does not include renaming (i.e., the actual type should be <code>vm_memory_upstream::*</code> or the underlying type).</li>\n</ol>",
        "id": 240842071,
        "sender_full_name": "Adrian Palacios",
        "timestamp": 1622472526
    },
    {
        "content": "<p>It sounds like you have two versions of <code>vm-memory</code> in the dependency tree, is that correct?</p>",
        "id": 240842312,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622472661
    },
    {
        "content": "<p>If so, usually that is handled by symbol mangling.  Each package will have different symbols for <code>GuestRegionMmap</code> via the <code>-C metadata</code> flags being hashed into the symbol.</p>",
        "id": 240842433,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622472731
    },
    {
        "content": "<p>Yea, looking at <code>firecracker</code>, there are two versions (v0.4.0 and v0.1.0, and 0.1 depends on 0.4).  Both define a <code>GuestRegionMmap</code> struct with different fields.</p>",
        "id": 240843461,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622473320
    }
]