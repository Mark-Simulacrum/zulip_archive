[
    {
        "content": "<p>Hi I'm trying to understand how How empty lang item trait works internally? e.g.<br>\nsrc/libcore/marker.rs<br>\n#[lang = \"copy\"]<br>\npub trait Copy : Clone {<br>\n    // Empty.<br>\n}<br>\nfor my understanding, this will eventually, translate to <br>\nsrc/libcore/intrinsics.rs<br>\n#[inline]<br>\npub unsafe fn copy&lt;T&gt;(src: *const T, dst: *mut T, count: usize) {<br>\n    extern \"rust-intrinsic\" {<br>\n        fn copy&lt;T&gt;(src: *const T, dst: *mut T, count: usize);<br>\n    }</p>\n<div class=\"codehilite\"><pre><span></span>debug_assert!(is_aligned_and_not_null(src), &quot;attempt to copy from unaligned or null pointer&quot;);\ndebug_assert!(is_aligned_and_not_null(dst), &quot;attempt to copy to unaligned or null pointer&quot;);\ncopy(src, dst, count)\n</pre></div>\n\n\n<p>}<br>\nthen to src/librustc_codegen_llvm/intrinsic.rs<br>\nfn copy_intrinsic(<br>\n    bx: &amp;mut Builder&lt;'a, 'll, 'tcx&gt;,<br>\n   ...<br>\n) {<br>\n...<br>\n}<br>\nBut I want know how this happened? is this related to <br>\nsrc/librustc/middle/lang_items.rs<br>\n    CopyTraitLangItem,           \"copy\",               copy_trait,              Target::Trait;<br>\nif my understanding is correct, but I want to know more about this process, where should I get started? can anyone give some clue? thanks a lot.</p>",
        "id": 182591314,
        "sender_full_name": "Derek",
        "timestamp": 1575488445
    },
    {
        "content": "<p>the copy trait does not generate any code. It solely exists for the type system</p>",
        "id": 182591940,
        "sender_full_name": "oli",
        "timestamp": 1575488897
    },
    {
        "content": "<p>the <code>copy</code> intrinsic is unrelated to the copy trait</p>",
        "id": 182591958,
        "sender_full_name": "oli",
        "timestamp": 1575488911
    },
    {
        "content": "<p>they have no connection</p>",
        "id": 182591972,
        "sender_full_name": "oli",
        "timestamp": 1575488919
    },
    {
        "content": "<p>@oli, Thanks a lots,  I really appreciate! Then if I have struct Person {},  then, have Person alice, then, let bob = alice.  this \"=\" here, need generate some code to do  bitwise copy, right? how does that works internally. e.g. after I #[derive(Copy, Clone)] or,  I have impl Copy for Person {}, this is again an empty Copy.</p>",
        "id": 182592490,
        "sender_full_name": "Derek",
        "timestamp": 1575489251
    },
    {
        "content": "<p>it uses llvm assignments, which LLVM may make arbitrary decisions on how to translate</p>",
        "id": 182592553,
        "sender_full_name": "oli",
        "timestamp": 1575489327
    },
    {
        "content": "<p>you can observe and play with this on the playground (<a href=\"https://play.rust-lang.org/\" target=\"_blank\" title=\"https://play.rust-lang.org/\">https://play.rust-lang.org/</a>) by using the <code>LLVM-IR</code> and <code>asm</code> buttons under the <code>...</code> menu in the left top corner</p>",
        "id": 182592645,
        "sender_full_name": "oli",
        "timestamp": 1575489381
    },
    {
        "content": "<p>thanks, let me try,  Then why we need a empty statement here, like  impl Copy for Person {}.  is that just a rule? to let compiler know we allow it to do bitwise copy?  it I want dig into how compiler use this statement,  do you happen to know which crate or source file I should look into.</p>",
        "id": 182592922,
        "sender_full_name": "Derek",
        "timestamp": 1575489598
    },
    {
        "content": "<p>yes, Copy just tells the compiler that the type can be copied implicitly</p>",
        "id": 182597524,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575492543
    },
    {
        "content": "<p>this is to make sure you can do <code>let x = y; let z = y;</code> without erroring that <code>y</code> has been moved. The <code>Copy</code> trait has semantic value, but does not change what happens on the bits on the machine</p>",
        "id": 182598350,
        "sender_full_name": "oli",
        "timestamp": 1575493058
    },
    {
        "content": "<p>Got it. Thanks, @oli, <span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span></p>",
        "id": 182599399,
        "sender_full_name": "Derek",
        "timestamp": 1575493644
    },
    {
        "content": "<p>Is implementation of  the rule related to this piece  of source code? <br>\nsrc/librustc/middle/lang_items.rs<br>\nlanguage_item_table! {<br>\n...<br>\n    CopyTraitLangItem,           \"copy\",               copy_trait,              Target::Trait;<br>\n}</p>",
        "id": 182600727,
        "sender_full_name": "Derek",
        "timestamp": 1575494360
    },
    {
        "content": "<p>That's \"just\" an index of all the lang items. The actual logic can be found by grepping for <code>copy_trait()</code> and <code>CopyTraitLangItem</code></p>",
        "id": 182602863,
        "sender_full_name": "oli",
        "timestamp": 1575495627
    }
]