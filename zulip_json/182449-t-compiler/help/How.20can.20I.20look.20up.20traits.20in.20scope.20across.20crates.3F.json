[
    {
        "content": "<p>From <a href=\"#narrow/stream/131828-t-compiler/topic/New.20query.20for.20traits.20that.20a.20type.20implements/near/205432986\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/New.20query.20for.20traits.20that.20a.20type.20implements/near/205432986</a>:</p>\n<p>I have code that looks like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">as_local_hir_id</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">traits_in_scope</span>: <span class=\"nc\">FxHashSet</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">in_scope_traits</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">candidate</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">candidate</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;in_scope_traits returned None&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It turns out the <code>None</code> case is being hit an awful lot and it's breaking my other changes. Does anyone know <em>why</em> in_scope_traits would return None?</p>",
        "id": 205433230,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596073023
    },
    {
        "content": "<p>for context, this is being called on</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![deny(intra_doc_link_resolution_failure)]</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// [`std::collections::BTreeMap::into_iter`]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>where the <code>module</code> is the module of <code>foo</code>. So it's not as if the module is unknown.</p>",
        "id": 205433304,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596073120
    },
    {
        "content": "<p>I think this is related to <code>BTreeMap</code> being in a separate crate</p>",
        "id": 205745848,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596405596
    },
    {
        "content": "<p>is there a way to get traits in scope <em>across crates</em>? <code>resolve_ast_path</code> already does this so the data is there</p>",
        "id": 205745892,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596405623
    },
    {
        "content": "<p>the reason I don't want to use resolve_ast_path is because it's super inefficient to first look at all traits and only then filter by whether they're in scope, just resolving the name is expensive</p>",
        "id": 205745900,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596405654
    },
    {
        "content": "<p>looks like the map is only populated for some expressions</p>",
        "id": 205745982,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596405839
    },
    {
        "content": "<p>ah, no, it's being rewritten to contain HirOwners as keys</p>",
        "id": 205746031,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596405923
    },
    {
        "content": "<p>ooh is that an in-progress PR? have a link?</p>",
        "id": 205746033,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596405954
    },
    {
        "content": "<p>try passing <code>foo</code>s ID instead of its module</p>",
        "id": 205746034,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596405955
    },
    {
        "content": "<p>no, I mean the code rewrites the map</p>",
        "id": 205746073,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596405969
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src/librustc_middle/ty/context.rs#L1119-L1123\">https://github.com/rust-lang/rust/blob/19cefa68640843956eedd86227ddc1d35dbc6754/src/librustc_middle/ty/context.rs#L1119-L1123</a></p>",
        "id": 205746076,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596405985
    },
    {
        "content": "<p>getting <code>foo</code>s id is going to take me a while</p>",
        "id": 205746193,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596406223
    },
    {
        "content": "<p>rustdoc keeps throwing away info <span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span></p>",
        "id": 205746195,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596406238
    },
    {
        "content": "<p>this will still only work for local items in any case :/</p>",
        "id": 205746249,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596406379
    },
    {
        "content": "<p>because it takes a HirId</p>",
        "id": 205746255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596406385
    },
    {
        "content": "<p>more context in case it helps: <a href=\"https://github.com/rust-lang/rust/pull/74489#discussion_r464125208\">https://github.com/rust-lang/rust/pull/74489#discussion_r464125208</a></p>",
        "id": 205746515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596406910
    },
    {
        "content": "<p>ok it seems that <code>in_scope_traits()</code> as written won't work, but is there an intrinsic reason it only works for the current crate? Could I modify it to store <code>DefId</code>s instead?</p>",
        "id": 205975973,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596586203
    },
    {
        "content": "<p>and somewhat related - is there a way to tell if a given DefId is in scope for any given module?</p>",
        "id": 205975991,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596586235
    },
    {
        "content": "<p>I found <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.Resolver.html#method.resolve_ident_in_module\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.Resolver.html#method.resolve_ident_in_module</a> but it doesn't seem to work cross-crate</p>",
        "id": 205976018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596586285
    },
    {
        "content": "<p>found it! <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.Visibility.html#method.is_accessible_from\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.Visibility.html#method.is_accessible_from</a></p>",
        "id": 205976699,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596586948
    },
    {
        "content": "<p>nope, that just tells me if it <em>could be</em> in scope :(</p>",
        "id": 205976821,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596587087
    },
    {
        "content": "<p>I'm still stuck on this :/ <code>rustc_resolve</code> works cross-crate but it can only look things up by name, not by DefId, and the trait could have been renamed</p>",
        "id": 206210159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596757053
    }
]