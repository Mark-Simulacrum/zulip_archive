[
    {
        "content": "<p>What's the <code>x.py</code> incantation needed to build just the stage1 rustc and stdlib, not rustdoc, and nothing from stage2?</p>",
        "id": 244095176,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624844850
    },
    {
        "content": "<p>I'm pretty sure <code>./x.py build library/std</code> does that (at least, that's what I usually use).</p>",
        "id": 244096594,
        "sender_full_name": "Eric Huss",
        "timestamp": 1624847352
    },
    {
        "content": "<p>You might need --stage 1 depending on the profile you're using</p>",
        "id": 244099628,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624852564
    },
    {
        "content": "<p>Aah, right, thanks!</p>",
        "id": 244117317,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624870422
    },
    {
        "content": "<p>When I try this, I get: <code>thread 'main' panicked at 'Error: no rules matched library/std.', src/bootstrap/builder.rs:232:21</code>.  My rustc stage 0 at this point is that built by mrustc, if that matters.</p>",
        "id": 251712984,
        "sender_full_name": "apteryx",
        "timestamp": 1630588682
    },
    {
        "content": "<p>More context:</p>\n<div class=\"codehilite\"><pre><span></span><code>starting phase `build&#39;\n   Compiling proc-macro2 v0.4.30\n   Compiling unicode-xid v0.1.0\n   Compiling syn v0.15.35\n   Compiling libc v0.2.64\n   Compiling serde v1.0.99\n   Compiling ryu v1.0.0\n   Compiling cfg-if v0.1.8\n   Compiling cc v1.0.37\n   Compiling unicode-width v0.1.6\n   Compiling fixedbitset v0.1.9\n   Compiling itoa v0.4.4\n   Compiling ordermap v0.3.5\n   Compiling build_helper v0.1.0 (/tmp/guix-build-rust-1.40.0.drv-0/rustc-1.40.0-src/src/build_helper)\n   Compiling lazy_static v1.3.0\n   Compiling getopts v0.2.21\n   Compiling petgraph v0.4.13\n   Compiling cmake v0.1.38\n   Compiling quote v0.6.12\n   Compiling num_cpus v1.8.0\n   Compiling time v0.1.40\n   Compiling filetime v0.2.4\n   Compiling serde_derive v1.0.81\n   Compiling toml v0.5.3\n   Compiling serde_json v1.0.40\n   Compiling bootstrap v0.0.0 (/tmp/guix-build-rust-1.40.0.drv-0/rustc-1.40.0-src/src/bootstrap)\n    Finished dev [unoptimized] target(s) in 29.19s\nthread &#39;main&#39; panicked at &#39;Error: no rules matched library/std.&#39;, src/bootstrap/builder.rs:232:21\nfailed to run: /tmp/guix-build-rust-1.40.0.drv-0/rustc-1.40.0-src/build/bootstrap/debug/bootstrap -j24 build library/std\nBuild completed unsuccessfully in 0:00:30\nerror: in phase &#39;build&#39;: uncaught exception:\n%exception #&lt;&amp;invoke-error program: &quot;./x.py&quot; arguments: (&quot;-j24&quot; &quot;build&quot; &quot;library/std&quot;) exit-status: 1 term-signal: #f stop-signal: #f&gt;\nphase `build&#39; failed after 30.4 seconds\ncommand &quot;./x.py&quot; &quot;-j24&quot; &quot;build&quot; &quot;library/std&quot; failed with status 1\n</code></pre></div>",
        "id": 251713169,
        "sender_full_name": "apteryx",
        "timestamp": 1630588761
    },
    {
        "content": "<p>You will need <code>src/libstd</code> instead of <code>library/std</code> for rustc 1.39.</p>",
        "id": 251713243,
        "sender_full_name": "bjorn3",
        "timestamp": 1630588803
    },
    {
        "content": "<p>ah!  At which point did it change?</p>",
        "id": 251713297,
        "sender_full_name": "apteryx",
        "timestamp": 1630588816
    },
    {
        "content": "<p>Not sure. Basically when the directory <code>src/libstd</code> got moved to <code>library/std</code>. You are passing the location of the standard library source. It may be possible that <code>./x.py build std</code> works with 1.39 and up. Aka passing the crate name instead of location.</p>",
        "id": 251713621,
        "sender_full_name": "bjorn3",
        "timestamp": 1630588950
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/9e5f7d5631b8f4009ac1c693e585d4b7108d4275\">https://github.com/rust-lang/rust/commit/9e5f7d5631b8f4009ac1c693e585d4b7108d4275</a></p>\n<p>changed with 1.48.0</p>",
        "id": 251713686,
        "sender_full_name": "bjorn3",
        "timestamp": 1630588978
    },
    {
        "content": "<p>er, that was the compiler, not the standard library.</p>",
        "id": 251713737,
        "sender_full_name": "bjorn3",
        "timestamp": 1630589002
    },
    {
        "content": "<p>standard library moved one version earlier in 1.47.0: <a href=\"https://github.com/rust-lang/rust/commit/2c31b45ae878b821975c4ebd94cc1e49f6073fd0#diff-2e1fbbc12622c46bb4a8e390ce8f68377f90a726844d0b9fab49d3fd1dc7e38c\">https://github.com/rust-lang/rust/commit/2c31b45ae878b821975c4ebd94cc1e49f6073fd0#diff-2e1fbbc12622c46bb4a8e390ce8f68377f90a726844d0b9fab49d3fd1dc7e38c</a></p>",
        "id": 251713800,
        "sender_full_name": "bjorn3",
        "timestamp": 1630589035
    },
    {
        "content": "<p>OK! Thanks a lot for the research!</p>",
        "id": 251714912,
        "sender_full_name": "apteryx",
        "timestamp": 1630589499
    },
    {
        "content": "<p>Is it possible to build, install cargo from stage 1 only also?</p>",
        "id": 251715068,
        "sender_full_name": "apteryx",
        "timestamp": 1630589561
    },
    {
        "content": "<p><code>./x.py build src/tools/cargo</code>?</p>",
        "id": 251715517,
        "sender_full_name": "bjorn3",
        "timestamp": 1630589735
    },
    {
        "content": "<p><code>./x.py build --stage 1 src/tools/cargo</code> or build the whole toolchain and configure the tools in cargo.toml. There also is <code>RUST_CONFIGURE_ARGS</code> but idk where that's documented.</p>",
        "id": 251715859,
        "sender_full_name": "The 8472",
        "timestamp": 1630589852
    },
    {
        "content": "<p>This is what I thought too, but in the output I can see: <code>Building stage2 tool cargo (x86_64-unknown-linux-gnu)</code></p>",
        "id": 251717137,
        "sender_full_name": "apteryx",
        "timestamp": 1630590347
    },
    {
        "content": "<p>oh wait, I didn't specify --stage 1 as that's supposed to be the default for <code>build</code></p>",
        "id": 251717355,
        "sender_full_name": "apteryx",
        "timestamp": 1630590414
    },
    {
        "content": "<p>None of the documentation will be right for a toolchain that old.</p>",
        "id": 251719952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630591372
    },
    {
        "content": "<p>Why are you trying to build 1.39? For a distro?</p>",
        "id": 251719976,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630591384
    },
    {
        "content": "<p>I would guess bootstrapping, since it's the last one supported by mrustc</p>",
        "id": 251720192,
        "sender_full_name": "The 8472",
        "timestamp": 1630591449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437426\">@apteryx</span> I think there's a repo that automates bootstrapping for you so you don't have to figure out the x.py commands</p>",
        "id": 251720370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630591529
    },
    {
        "content": "<p>Somewhere on dtolnay's GitHub IIRC</p>",
        "id": 251720411,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630591546
    },
    {
        "content": "<p>I'm updating the Rust bootstrap for GNU Guix, starting at 1.39 instead of 1.29</p>",
        "id": 251720723,
        "sender_full_name": "apteryx",
        "timestamp": 1630591668
    },
    {
        "content": "<p>I know about the dtolnay repository, I used it originally, but it's still using 1.29.  Anyway, the bootstrap works fine now from 1.39, I'm just polishing it to skip stage 2 :-)</p>",
        "id": 251720857,
        "sender_full_name": "apteryx",
        "timestamp": 1630591702
    },
    {
        "content": "<p>Building cargo at stage 1 only worked when explicitly providing the stage level, e.g. <code>x.py build --stage=1 src/tools/cargo</code>; which is a bit of a surprise (the docs says the default stage level for build is 1)</p>",
        "id": 251721126,
        "sender_full_name": "apteryx",
        "timestamp": 1630591804
    },
    {
        "content": "<p>Yes, like I said, the docs are only for the latest version</p>",
        "id": 251724267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630592945
    },
    {
        "content": "<p>Is it OK to paste log output here? Or should I use a pastebin.</p>",
        "id": 251725071,
        "sender_full_name": "apteryx",
        "timestamp": 1630593229
    },
    {
        "content": "<p>There seem to be duplicate work between the <code>build</code> and <code>install</code> actions</p>",
        "id": 251725186,
        "sender_full_name": "apteryx",
        "timestamp": 1630593261
    },
    {
        "content": "<p>Pasting here is fine</p>",
        "id": 251726324,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630593676
    },
    {
        "content": "<p>I'm not sure what you expect though, old releases are immutable so if there's a bug we can't fix it for 1.39</p>",
        "id": 251726373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630593699
    },
    {
        "content": "<p>I just want to validate that what I see is expected/that I'm not doing something silly; the commands I run in the recipe are akin to (for rust 1.40 say):</p>\n<div class=\"codehilite\"><pre><span></span><code># Build phase\n./x.py -j24 build --stage=1 src/libstd\n./x.py -j24 build --stage=1 src/tools/cargo\n# Install phase\n./x.py -j24 install --stage=1\n./x.py -j24 install --stage=1 cargo\n</code></pre></div>\n<p>And the result looks like this: <a href=\"https://paste.debian.net/1210090/\">https://paste.debian.net/1210090/</a></p>",
        "id": 251726863,
        "sender_full_name": "apteryx",
        "timestamp": 1630593864
    },
    {
        "content": "<p>For example, <code>Compiling rustc_parse v0.0.0 (/tmp/guix-build-rust-1.41.1.drv-0/rustc-1.41.1-src/src/librustc_parse)</code> seems to occur twice; once during the build, and again during the install.</p>",
        "id": 251727687,
        "sender_full_name": "apteryx",
        "timestamp": 1630594175
    },
    {
        "content": "<p>During <code>./x.py build</code> it compiles the compiler to build libstd. During <code>./x.py install</code> it builds the libraries that form the compiler using the newly compiled compiler so that if you want to use the newly compiled compiler to compile a program against the compiler libraries, that is possible. This is the <code>rustc-dev</code> component. I don't know if it is possible to disable it or not.</p>",
        "id": 251728031,
        "sender_full_name": "bjorn3",
        "timestamp": 1630594301
    },
    {
        "content": "<p>OK! Thanks for the explanation!</p>",
        "id": 251728622,
        "sender_full_name": "apteryx",
        "timestamp": 1630594535
    },
    {
        "content": "<p>It may not be possible in 1.39, at least not without specifying every other target explicitly. On master it's off by default and you have to opt-in with <code>build compiler/rustc</code>.</p>",
        "id": 251729259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630594768
    },
    {
        "content": "<p>OK!  Great!</p>",
        "id": 251730163,
        "sender_full_name": "apteryx",
        "timestamp": 1630595088
    },
    {
        "content": "<p>Surprisingly building at stage 1 only doesn't seem much faster at all?</p>",
        "id": 251731107,
        "sender_full_name": "apteryx",
        "timestamp": 1630595420
    },
    {
        "content": "<p>does building rustc at stage 2 provide a more optimized (faster) compiler? that would offset the cost of building it?</p>",
        "id": 251731568,
        "sender_full_name": "apteryx",
        "timestamp": 1630595607
    },
    {
        "content": "<p>About 3m40 were used out of 16m38 t build the stage 2 artifacts of both rustc and cargo</p>",
        "id": 251733974,
        "sender_full_name": "apteryx",
        "timestamp": 1630596596
    },
    {
        "content": "<p>Building stage 2 by default just builds the compiler libraries. Only when you set <code>full-bootstrap</code> does it actually use the compiler again to compile everything I believe.</p>\n<p>Let's say the bootstrap compiler has abi A and the final compiler has abi B. stage 0 rustc (bootstrap) compiles stage 0 libstd and stage 0 compiler libraries both with abi A. the rustc produced together with the stage 0 compiler libraries is stage 1 rustc. stage 1 rustc compiles stage 1 libstd and stage 1 compiler libraries both with abi B. the rustc produced with stage 1 compiler libraries is stage 2 rustc. with <code>full-bootstrap</code> stage 2 rustc compiler compiles stage 2 libstd and stage 2 compiler libraries again with abi B. without <code>full-bootstrap</code> the stage 2 libstd and stage 2 compiler libraries are assumed to be identical to the stage 1 versions, so it just copies them. A stage 1 compiler is not capable of compiling programs that link against itself as it only produces executables with abi B, but is compiled with abi A. For this reason a stage 2 compiler is necessary.</p>",
        "id": 251734614,
        "sender_full_name": "bjorn3",
        "timestamp": 1630596836
    },
    {
        "content": "<p>Thanks for explaining.  The ABI problem doesn't seem problematic when we use a stage 1 compiler to build the next Rust with it (in a bootstrap context 1.39 -&gt; 1.40 -&gt; 1.41 ... -&gt; 1.54)</p>",
        "id": 251736250,
        "sender_full_name": "apteryx",
        "timestamp": 1630597450
    },
    {
        "content": "<p>But it's surprising that skipping stage 2 rustc and cargo results is slower builds</p>",
        "id": 251736309,
        "sender_full_name": "apteryx",
        "timestamp": 1630597477
    },
    {
        "content": "<p>I built 1.41 in just 11 minutes (stage 2) compared to 16 minutes (stage 1)</p>",
        "id": 251736365,
        "sender_full_name": "apteryx",
        "timestamp": 1630597498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"437426\">apteryx</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Compiling.20just.20stage1.20rustc.2Bstd/near/251736365\">said</a>:</p>\n<blockquote>\n<p>I built 1.41 in just 11 minutes (stage 2) compared to 16 minutes (stage 1)</p>\n</blockquote>\n<blockquote>\n<p>Building stage1 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)</p>\n</blockquote>\n<p>^ this is why it's slow, you're not actually saving any work</p>",
        "id": 251741538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630599339
    },
    {
        "content": "<p>it should never be <em>slower</em> than stage 2 though</p>",
        "id": 251741549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630599344
    },
    {
        "content": "<p>are you sure it's not caching bootstrap tools between stage1 and stage2? that could explain the difference</p>",
        "id": 251741674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630599379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Compiling.20just.20stage1.20rustc.2Bstd/near/251741538\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Building stage1 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)</p>\n</blockquote>\n<p>^ this is why it's slow, you're not actually saving any work</p>\n</blockquote>\n<p>Oh! Is there something I can do to change this?</p>\n<p>About caching when building with stage 2,  I'm not doing anything special other than invoking the commands:</p>\n<div class=\"codehilite\"><pre><span></span><code>./x.py -j24 build\n./x.py -j24 build src/tools/cargo\n./x.py install\n./x.py install cargo\n</code></pre></div>",
        "id": 251745079,
        "sender_full_name": "apteryx",
        "timestamp": 1630600734
    },
    {
        "content": "<blockquote>\n<p>Oh! Is there something I can do to change this?</p>\n</blockquote>\n<blockquote>\n<p>It may not be possible in 1.39, at least not without specifying every other target explicitly. On master it's off by default and you have to opt-in with build compiler/rustc.</p>\n</blockquote>\n<p>If you only need enough to bootstrap the next compiler, I think <code>x.py build --stage 1 library/std src/tools/cargo</code> may be enough.</p>",
        "id": 251745320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630600826
    },
    {
        "content": "<p>I'll try, thanks</p>",
        "id": 251745375,
        "sender_full_name": "apteryx",
        "timestamp": 1630600850
    },
    {
        "content": "<p>(I assume you care so much because you have 15 more bootstrap runs to go <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 251745424,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630600875
    },
    {
        "content": "<p>exactly :-D</p>",
        "id": 251745459,
        "sender_full_name": "apteryx",
        "timestamp": 1630600889
    },
    {
        "content": "<p>and this being a functional package management based distro (Guix), every time something changes in the dependency graph of Rust it's going to trigger a rebuild of the full chain.</p>",
        "id": 251745616,
        "sender_full_name": "apteryx",
        "timestamp": 1630600946
    },
    {
        "content": "<p>oh big oof, yeah that's unfortunate</p>",
        "id": 251745745,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601010
    },
    {
        "content": "<p>and you can't really cache it either because the build artifacts for 15 toolchains will be enormous</p>",
        "id": 251745791,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601032
    },
    {
        "content": "<p>I wonder if you could hash the toolchain at least and skip further builds if it's the same output as before</p>",
        "id": 251746060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601134
    },
    {
        "content": "<p>and that way you have to do a minimum of 1 build instead of 15</p>",
        "id": 251746096,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601145
    },
    {
        "content": "<p>I think Nix is doing this these days</p>",
        "id": 251746221,
        "sender_full_name": "apteryx",
        "timestamp": 1630601174
    },
    {
        "content": "<p>To be clear, did you mean I shoudn't invoke the <code>install</code> part?</p>",
        "id": 251746608,
        "sender_full_name": "apteryx",
        "timestamp": 1630601317
    },
    {
        "content": "<p>I think <code>install</code> shouldn't be strictly necessary; I don't know enough about your setup to know if it will make things easier or harder</p>",
        "id": 251746773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601382
    },
    {
        "content": "<p>if you're only using this once then <a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#creating-a-rustup-toolchain\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#creating-a-rustup-toolchain</a> may be easier</p>",
        "id": 251746880,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601409
    },
    {
        "content": "<p>OK, <code>install</code> is useful to copy the built artifacts (rustc and library) to the correct locations; perhaps I can call install without calling build</p>",
        "id": 251746959,
        "sender_full_name": "apteryx",
        "timestamp": 1630601446
    },
    {
        "content": "<p>(I don't know if mrustc supports building rustup but I would expect so, it's not particularly complicated from a compiler POV)</p>",
        "id": 251746967,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601451
    },
    {
        "content": "<p>also <code>install</code> is slow in general IME</p>",
        "id": 251747035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601478
    },
    {
        "content": "<p>yeah install isn't needed if you just pull the things you want out of the build directory</p>",
        "id": 251747393,
        "sender_full_name": "The 8472",
        "timestamp": 1630601632
    },
    {
        "content": "<p>OK! That should hasten the build</p>",
        "id": 251747471,
        "sender_full_name": "apteryx",
        "timestamp": 1630601656
    },
    {
        "content": "<p>is cargo necessary to bootstrap rustc?</p>",
        "id": 251747572,
        "sender_full_name": "apteryx",
        "timestamp": 1630601703
    },
    {
        "content": "<p>yes</p>",
        "id": 251747591,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601710
    },
    {
        "content": "<p>OK</p>",
        "id": 251747607,
        "sender_full_name": "apteryx",
        "timestamp": 1630601715
    },
    {
        "content": "<p>(it shouldn't take long to compile compared to rustc)</p>",
        "id": 251747629,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630601724
    },
    {
        "content": "<p>also, currently bootstrap is unnecessarily sequential at some steps, executing one subgoal at a time. I was working on parallelizing things that don't have a dependency on each other but didn't finish it. not sure how much it would help with a minimal build though. it's more for testing where a bunch of stage 0 test tool stuff could get recompiled in parallel</p>",
        "id": 251747894,
        "sender_full_name": "The 8472",
        "timestamp": 1630601830
    },
    {
        "content": "<p>it mostly shows up on many-core systems where there are bottlenecks in the crate-graph that lead to underutilization</p>",
        "id": 251748095,
        "sender_full_name": "The 8472",
        "timestamp": 1630601902
    },
    {
        "content": "<p>cranking up the codegen units a bit might help, since you're using <code>-j24</code></p>",
        "id": 251748238,
        "sender_full_name": "The 8472",
        "timestamp": 1630601953
    },
    {
        "content": "<p>it results in a less optimal compiler but maybe the savings in build time are worth it, you'll have to measure</p>",
        "id": 251748371,
        "sender_full_name": "The 8472",
        "timestamp": 1630601999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Compiling.20just.20stage1.20rustc.2Bstd/near/251747894\">said</a>:</p>\n<blockquote>\n<p>also, currently bootstrap is unnecessarily sequential at some steps, executing one subgoal at a time. I was working on parallelizing things that don't have a dependency on each other but didn't finish it. not sure how much it would help with a minimal build though. it's more for testing where a bunch of stage 0 test tool stuff could get recompiled in parallel</p>\n</blockquote>\n<p>yeah, I can imagine it speeds up bootstrap tools quite a bit</p>",
        "id": 251749007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630602194
    },
    {
        "content": "<p>and hopefully it shouldn't be too much maintenance since everything is centralized in <code>builder.ensure</code></p>",
        "id": 251749061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630602215
    },
    {
        "content": "<p>How can that be done?</p>",
        "id": 251753159,
        "sender_full_name": "apteryx",
        "timestamp": 1630603746
    },
    {
        "content": "<p>(cranking up the codegen units)</p>",
        "id": 251753173,
        "sender_full_name": "apteryx",
        "timestamp": 1630603751
    },
    {
        "content": "<p>there should be a setting in config.toml somewhere</p>",
        "id": 251753280,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630603793
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/fcce644119cf4e8e36001368e514bb5ed67cb855/config.toml.example#L388\">https://github.com/rust-lang/rust/blob/fcce644119cf4e8e36001368e514bb5ed67cb855/config.toml.example#L388</a></p>",
        "id": 251753389,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630603814
    },
    {
        "content": "<p>OK! I may try it after I sort out the manual install phase</p>",
        "id": 251754566,
        "sender_full_name": "apteryx",
        "timestamp": 1630604245
    },
    {
        "content": "<p>How is the 'x86_64-unknown-linux-gnu' directory name formed?  Does it uses the GNU \"standard\" for a system tuple?  I need to programatically derive it</p>",
        "id": 251754712,
        "sender_full_name": "apteryx",
        "timestamp": 1630604293
    },
    {
        "content": "<p>I'm talking about that <code>build/x86_64-unknown-linux-gnu/</code> build directory</p>",
        "id": 251754772,
        "sender_full_name": "apteryx",
        "timestamp": 1630604318
    },
    {
        "content": "<p>Ah, the answer was in the code I'm looking at.  We already have a <code>nix-system-&gt;gnu-triplet-for-rust</code> procedure.  Nevermind :-).</p>",
        "id": 251754942,
        "sender_full_name": "apteryx",
        "timestamp": 1630604395
    },
    {
        "content": "<blockquote>\n<p>Does it uses the GNU \"standard\" for a system tuple? I need to programatically derive it</p>\n</blockquote>\n<p>in general, no: <a href=\"https://github.com/rust-lang/compiler-team/issues/441\">https://github.com/rust-lang/compiler-team/issues/441</a></p>",
        "id": 251755151,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630604485
    },
    {
        "content": "<p>OK! Good to know that there is some movement toward standardization</p>",
        "id": 251757006,
        "sender_full_name": "apteryx",
        "timestamp": 1630605204
    },
    {
        "content": "<p>Finally succeeded with the manual install phase: <code>real    9m0.112s</code> for 1.40.  That's good!</p>",
        "id": 251762707,
        "sender_full_name": "apteryx",
        "timestamp": 1630607169
    },
    {
        "content": "<p>I tried the <code>codegen-units = 256</code> tip, but that doesn't seem to exist for 1.40: </p>\n<div class=\"codehilite\"><pre><span></span><code>failed to parse TOML configuration &#39;config.toml&#39;: unknown field `codegen-units`, expected one of `build`, `host`, `target`, `cargo`, `rustc`, `docs`, `compiler-docs`, `submodules`, `fast-submodules`, `gdb`, `nodejs`, `python`, `locked-deps`, `vendor`, `full-bootstrap`, `extended`, `tools`, `verbose`, `sanitizers`, `profiler`, `cargo-native-static`, `low-priority`, `configure-args`, `local-rebuild`, `print-step-timings` for key `build` at line 24 column 1\nfailed to run: /tmp/guix-build-rust-1.40.0.drv-0/rustc-1.40.0-src/build/bootstrap/debug/bootstrap -j24 build --stage=1 src/libstd src/tools/cargo\nBuild completed unsuccessfully in 0:00:27\n</code></pre></div>",
        "id": 251765178,
        "sender_full_name": "apteryx",
        "timestamp": 1630608076
    },
    {
        "content": "<p>ah, it's for [rust], not [build]</p>",
        "id": 251765608,
        "sender_full_name": "apteryx",
        "timestamp": 1630608253
    },
    {
        "content": "<p>It seems about 10 minutes per Rust now.  That's going to come out at 100 min for the initial mrustc 1.39 build, then 10 minutes x 15 for the remaining ones, then perhaps 10 minutes extra to build extra tools for 1.54; totalizing ~4h20 on a Ryzen 3900X CPU.  Much better than the slow 16 h + Rust bootstrap that we've had on the Guix master branch!</p>",
        "id": 251770884,
        "sender_full_name": "apteryx",
        "timestamp": 1630610223
    },
    {
        "content": "<p>for the final build you might want to do 1CGU and maybe PGO on top. That's what official builds do. It'll take longer but yield a faster compiler for your users.</p>",
        "id": 251771854,
        "sender_full_name": "The 8472",
        "timestamp": 1630610642
    },
    {
        "content": "<p>What does that involve?  Invoking LLVM commands manually?</p>",
        "id": 251774504,
        "sender_full_name": "apteryx",
        "timestamp": 1630611706
    },
    {
        "content": "<p>see <code>src/ci/pgo.sh</code></p>",
        "id": 251776019,
        "sender_full_name": "The 8472",
        "timestamp": 1630612294
    },
    {
        "content": "<p>the <code>codegen-units</code> doesn't seem to meaningfully change the result.  I returned it to 16 from 256 (the default) and the build time remained at 10 m</p>",
        "id": 251776117,
        "sender_full_name": "apteryx",
        "timestamp": 1630612328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Compiling.20just.20stage1.20rustc.2Bstd/near/251776019\">said</a>:</p>\n<blockquote>\n<p>see <code>src/ci/pgo.sh</code></p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 251776269,
        "sender_full_name": "apteryx",
        "timestamp": 1630612398
    },
    {
        "content": "<p>256 is only the default for incremental builds. for bootstrapping there's no point in doing incremental</p>",
        "id": 251776525,
        "sender_full_name": "The 8472",
        "timestamp": 1630612501
    },
    {
        "content": "<p>We thought that bumping it up from the default 16 might have hastened things on a 24 cores machine.</p>",
        "id": 251776732,
        "sender_full_name": "apteryx",
        "timestamp": 1630612585
    },
    {
        "content": "<p>yeah. ok, too bad it didn't help.</p>",
        "id": 251776914,
        "sender_full_name": "The 8472",
        "timestamp": 1630612672
    },
    {
        "content": "<p>Would you know whether PGO is deterministic? It's important for reproducible builds.</p>",
        "id": 251777011,
        "sender_full_name": "apteryx",
        "timestamp": 1630612705
    },
    {
        "content": "<p>I don't know. The original issue for it raised the same question and assumes that it's the same given the same profile data but whether generating profile data is deterministic isn't answered.</p>",
        "id": 251778089,
        "sender_full_name": "The 8472",
        "timestamp": 1630613109
    },
    {
        "content": "<p>OK!  I'll punt on that for now, but should we ever try it in Guix, we'd be able to tell quickly (<code>guix build rust --rounds=2 --keep-failed</code>)</p>",
        "id": 251779491,
        "sender_full_name": "apteryx",
        "timestamp": 1630613715
    },
    {
        "content": "<p>I don't think it is completely deterministic. I believe we use a PRNG for the names of temp dirs. This happens relatively late during compilation though, so it probably doesn't cascade all the way. It is also possible that it doesn't cause any control dependencies. cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> as you worked on instruction precise reproducability of a rustc invocations a while ago.</p>",
        "id": 251779569,
        "sender_full_name": "bjorn3",
        "timestamp": 1630613753
    }
]