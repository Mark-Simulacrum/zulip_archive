[
    {
        "content": "<p>I'm trying to figure out how this function works, and I'm missing something. If we pass a \"<a href=\"http://lib.rs\" title=\"http://lib.rs\">lib.rs</a>\" of a valid library crate, I'd expect it to contain all the modules. However, running it on a simple project that has <code>crate::submodule::subsubmodule</code> path, it appears that the reflected crate doesn't contain it:</p>\n<div class=\"codehilite\"><pre><span></span><code>crate\n    A\n    submodule\n    tests\n</code></pre></div>\n\n\n<p>I'm printing this with the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">print_module</span><span class=\"p\">(</span><span class=\"n\">indent</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">rustc_ast</span>::<span class=\"n\">ast</span>::<span class=\"n\">Mod</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">indent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">print</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\t</span><span class=\"s\">&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ItemKind</span>::<span class=\"n\">Mod</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">print_module</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">child</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196712429,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588809324
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/oY8vCmYcGXwSExmjnjKtJQzr/Screen-Shot-2020-05-06-at-19.53.12.png\" title=\"Screen-Shot-2020-05-06-at-19.53.12.png\">Screen-Shot-2020-05-06-at-19.53.12.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/oY8vCmYcGXwSExmjnjKtJQzr/Screen-Shot-2020-05-06-at-19.53.12.png\" title=\"Screen-Shot-2020-05-06-at-19.53.12.png\"><img src=\"/user_uploads/4715/oY8vCmYcGXwSExmjnjKtJQzr/Screen-Shot-2020-05-06-at-19.53.12.png\"></a></div>",
        "id": 196712516,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588809369
    },
    {
        "content": "<p>The <code>submodule/mod.rs</code> clearly contains the \"subsubmodule\":</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">subsubmodule</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">A</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">chrono</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Write</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">A</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">OtherA</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">subsubmodule</span>::<span class=\"n\">C</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196712569,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588809419
    },
    {
        "content": "<p>looking further in the <code>submodule</code> it has only items for <code>use</code> statements</p>",
        "id": 196713603,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588810265
    },
    {
        "content": "<p>iirc mod statements are \"inlined\" during expansion</p>",
        "id": 196714712,
        "sender_full_name": "simulacrum",
        "timestamp": 1588811167
    },
    {
        "content": "<p>so you won't actually parse the submodule (or the subsubmodule) until expansion runs</p>",
        "id": 196714728,
        "sender_full_name": "simulacrum",
        "timestamp": 1588811197
    },
    {
        "content": "<p>how do I run the expansion pass?</p>",
        "id": 196716566,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588813076
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/macro-expansion.html\" title=\"https://rustc-dev-guide.rust-lang.org/macro-expansion.html\">https://rustc-dev-guide.rust-lang.org/macro-expansion.html</a> may be helpful but I don't have a quick answer I'm afraid</p>",
        "id": 196719945,
        "sender_full_name": "simulacrum",
        "timestamp": 1588817025
    },
    {
        "content": "<p>Wait, this doesn't yet make sense. So I'm telling <code>rustc_parse</code> to parse some crate. It goes through the tokens, and then it sees \"mod xx\", and then what? Just ignores it? If it's not expected to see nested modules at this stage, why not return an error that there is an unexpected?</p>",
        "id": 196720488,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588817667
    },
    {
        "content": "<p>it's just stored as \"mod xx;\"</p>",
        "id": 196720668,
        "sender_full_name": "simulacrum",
        "timestamp": 1588817890
    },
    {
        "content": "<p>similar to how <code>foo!(bar);</code> would be stored</p>",
        "id": 196720671,
        "sender_full_name": "simulacrum",
        "timestamp": 1588817897
    },
    {
        "content": "<p>Where would it be stored? I'm not seeing anything like that in the item tree returned</p>",
        "id": 196720774,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588818010
    },
    {
        "content": "<p>I think I understand better what's going on here. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> correct me if that's wrong please - the parse functions get a single string or file on the input, and that's the scope of their parsing. So if I have other modules in other files, it simply doesn't care to look at them.<br>\nIn this case, I need some higher level rustc function to load the whole file tree of the crate.</p>",
        "id": 196793004,
        "sender_full_name": "Dzmitry Malyshau",
        "timestamp": 1588867500
    },
    {
        "content": "<p>yeah that's my understanding at least</p>",
        "id": 196795041,
        "sender_full_name": "simulacrum",
        "timestamp": 1588868361
    }
]