[
    {
        "content": "<p>I'm trying to extend the stability checker to consider the stability of const trait impls. I have a struct that implements <code>Visitor</code>, but it doesn't seem to be called consistently and I can't figure out why.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">check_impl_const_trait</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CheckStableImplConstTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">walk_toplevel_module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">visit_all_item_likes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"p\">.</span><span class=\"n\">as_deep_visitor</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This function exists, but <code>&lt;CheckStableImplConstTrait as Visitor&gt;::visit_impl_item</code> isn't called in a UI test that contains</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[stable(feature = </span><span class=\"s\">\"rust1\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[rustc_const_stable(feature = </span><span class=\"s\">\"rust1\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It's not just that the code is wrong â€” it's not being called at all. I verified this by adding in <code>dbg!</code> statements, but it's not output from the UI test. I added the pass into <code>compiler/rustc_interface/src/passes.rs</code> under <code>misc_checking_3</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"s\">\"stable_impl_const_trait_checking\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rustc_passes</span>::<span class=\"n\">stability</span>::<span class=\"n\">check_impl_const_trait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What am I missing? As far as I can tell the visitor should be called, but it's not <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 271239042,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644391187
    },
    {
        "content": "<p>Anyone have any ideas? Happy to provide additional information as necessary, of course.</p>",
        "id": 271374518,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644456392
    },
    {
        "content": "<p>What does your visitor look like? (What methods are overridden? What's the <code>NestedFilter</code> type?) The <code>walk_toplevel_module</code> + <code>visit_all_item_likes</code> seems a bit redundant, what's the rationale? Does <code>dbg!</code> in the compiler work the way you expect it does?</p>\n<p>I tested something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">CheckStableImplConstTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">intravisit</span>::<span class=\"n\">Visitor</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CheckStableImplConstTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">warn</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"visited item {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_trait_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">TraitItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">warn</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"visited trait item {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_impl_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">ImplItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">warn</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"visited impl item {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">check_impl_const_trait</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CheckStableImplConstTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// tcx.hir().walk_toplevel_module(&amp;mut visitor);</span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">visit_all_item_likes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"p\">.</span><span class=\"n\">as_deep_visitor</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// might as-well directly use `ItemLikeVisitor` thoughâ€¦</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and it seems to work fine</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_trait_impl)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Int</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// #[stable(feature = \"rust1\", since = \"1.0.0\")]</span>\n<span class=\"c1\">// #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>WARN rustc_passes::stability visited item #0\nWARN rustc_passes::stability visited item std#1\nWARN rustc_passes::stability visited item Int#0\nWARN rustc_passes::stability visited item #0\nWARN rustc_passes::stability visited impl item Output#0\nWARN rustc_passes::stability visited impl item sub#0\n    Finished dev [unoptimized + debuginfo] target(s) in 0.15s\n</code></pre></div>",
        "id": 271411378,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1644488597
    },
    {
        "content": "<p>The two method calls were me copying stuff nearby in an attempt to make it work, basically. I originally only had <code>visit_all_item_likes</code>, which is what I believe should be necessary.</p>\n<p>This is the full definition of the struct and its visitor (leaving out comments on the approach I intend to take):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Visitor</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CheckStableImplConstTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">NestedFilter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">nested_filter</span>::<span class=\"n\">OnlyBodies</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">nested_visit_map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Map</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_impl_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ii</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">ImplItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">get_parent_item</span><span class=\"p\">(</span><span class=\"n\">ii</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">impl_trait_ref</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">is_const_trait_impl_raw</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_stable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">lookup_const_stability</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">map_or</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">stab</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">stab</span><span class=\"p\">.</span><span class=\"n\">is_const_stable</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">const_stable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">span_err</span><span class=\"p\">(</span><span class=\"n\">ii</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"trait implementations cannot be const stable yet\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">intravisit</span>::<span class=\"n\">walk_impl_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ii</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm <em>just</em> going to bed now (lateâ€¦), but I'll try copying what you have later to see if I can figure something out.</p>",
        "id": 271412517,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644489228
    },
    {
        "content": "<p>100% unrelated but I wish Zulip supported <code>_foo_</code> for italics.</p>",
        "id": 271412591,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644489254
    },
    {
        "content": "<p>Seems to me like instead of finding an <em>impl-item</em> (like e.g. a method implementation) and then jumping to its parent, you should instead find the <em>item</em> that is the trait implementation itself. Also as long as youâ€™re not handling e.g. expressions or other stuff contained in bodies, afaict just using an <code>ItemLikeVisitor</code> is more straightforward / recommended. Compare the documentation on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/itemlikevisit/trait.ItemLikeVisitor.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/itemlikevisit/trait.ItemLikeVisitor.html</a></p>\n<hr>\n<p>I agree on _underscore italics_ being a missing feature</p>",
        "id": 271437275,
        "sender_full_name": "Frank Steffahn",
        "timestamp": 1644502834
    },
    {
        "content": "<p>Heh, this is what happens when you've no idea what to do and aren't familiar with the APIs. Visiting the item itself is obviously better and something I'll try.</p>",
        "id": 271537891,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644562620
    },
    {
        "content": "<p>Alrightâ€¦after some playing around, I've determined that it's the <code>#[rustc_const_stable]</code> attribute that's actually causing things to break.</p>\n<p>With this definition of the struct and impl:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">CheckStableImplConstTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(dead_code)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ItemLikeVisitor</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">CheckStableImplConstTrait</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_item</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">warn</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"visit_item\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_trait_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_trait_item</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">TraitItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_impl_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_impl_item</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">ImplItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_foreign_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_foreign_item</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">ForeignItem</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and this function being  called:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">check_impl_const_trait</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CheckStableImplConstTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">visit_all_item_likes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>the following test <em>succeeds</em> in having four warnings emitted:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// compile-flags: --crate-type=lib</span>\n\n<span class=\"cp\">#![no_implicit_prelude]</span><span class=\"w\"> </span><span class=\"c1\">// minimize noise</span>\n<span class=\"cp\">#![feature(const_trait_impl)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(staged_api)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![stable(feature = </span><span class=\"s\">\"rust1\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[stable(feature = </span><span class=\"s\">\"rust1\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Int</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[stable(feature = </span><span class=\"s\">\"rust1\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.0.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"c1\">// #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]</span>\n<span class=\"cp\">#[rustc_const_unstable(feature = </span><span class=\"s\">\"const_sub\"</span><span class=\"cp\">, issue = </span><span class=\"s\">\"none\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Sub</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><strong>BUT</strong> if you switch the const stability attribute (by changing which one is commented out), then suddenly no warnings are emitted. I have absolutely no idea why this is, but it seems like a bug to my untrained eye.</p>",
        "id": 271545377,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644569018
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> â€” I've no idea if you know anything about the way these attributes work, but it can't hurt to ask</p>",
        "id": 271545585,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644569163
    },
    {
        "content": "<p>Are you sure <code>check_impl_const_trait</code> is invoked if the comments are toggled?</p>",
        "id": 271548149,
        "sender_full_name": "oli",
        "timestamp": 1644570848
    },
    {
        "content": "<p>quick test shows that it is not invoked</p>",
        "id": 271548375,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644570990
    },
    {
        "content": "<p>I added this to the <a href=\"http://passes.rs\">passes.rs</a> file under the \"misc_checking_3\" section</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"s\">\"stable_impl_const_trait_checking\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">rustc_passes</span>::<span class=\"n\">stability</span>::<span class=\"n\">check_impl_const_trait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">},</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271548461,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644571056
    },
    {
        "content": "<p>wait, I just realized it wasn't at the \"top level\" of that bit, but was under <code>tcx.ensure().privacy_access_levels(());</code> in that parallel call. Lemme see if that makes a difference</p>",
        "id": 271548608,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644571132
    },
    {
        "content": "<p>It does not make a difference.</p>",
        "id": 271548735,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644571203
    },
    {
        "content": "<p>Ah, I'm suspecting you've run afoul of the test defaulting to just running in check mode. Try adding <code>// build-pass</code> to it</p>",
        "id": 271551262,
        "sender_full_name": "oli",
        "timestamp": 1644572462
    },
    {
        "content": "<p>Hm. That works. Is it possible to add passes to check-time? The intent is to move the check for stable <code>impl const Trait</code> from a semantic check to a proper stability check (which <em>should</em> happen with <code>cargo check</code>)</p>",
        "id": 271551498,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644572591
    },
    {
        "content": "<p>I think usually they are happening early. Not sure why your comment change changes any of that. I won't be able to dig into that until monday, but I recommend opening a WIP PR so we can talk about the concrete code changes</p>",
        "id": 271551996,
        "sender_full_name": "oli",
        "timestamp": 1644572877
    },
    {
        "content": "<p>Will do later on. It's definitely something that <em>should</em> happen. It's just that I've never touched this kind of code before <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 271552105,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644572922
    },
    {
        "content": "<p>Sorry, didn't mean to say you did anything wrong in your impl. I was referring to the comment changes in the test causing the behaviour</p>",
        "id": 271555985,
        "sender_full_name": "oli",
        "timestamp": 1644574965
    },
    {
        "content": "<p>Oh I understood :) No worries</p>",
        "id": 271556022,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1644574990
    }
]