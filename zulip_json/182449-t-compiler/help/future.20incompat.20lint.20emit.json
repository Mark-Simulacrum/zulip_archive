[
    {
        "content": "<p>How do I emit a future incompatibility lint with only access to the <code>Session</code>?</p>",
        "id": 232415198,
        "sender_full_name": "bjorn3",
        "timestamp": 1617106772
    },
    {
        "content": "<p>I'm confused what Session has to do with it - isn't future compatibility a property of the lint itself? You could look at <a href=\"https://github.com/rust-lang/rust/blob/689e8470ffa7aeca17cfee428704a4d6c4148c11/compiler/rustc_lint_defs/src/builtin.rs#L42\">https://github.com/rust-lang/rust/blob/689e8470ffa7aeca17cfee428704a4d6c4148c11/compiler/rustc_lint_defs/src/builtin.rs#L42</a> for an example</p>",
        "id": 232415552,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617106951
    },
    {
        "content": "<p>I mean I have a future incompat lint defined. Now I want to emit a warning diagnostic for said lint.</p>",
        "id": 232415659,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107035
    },
    {
        "content": "<p>oh, you can emit it like any normal lint</p>",
        "id": 232415716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617107047
    },
    {
        "content": "<p>though it's indeed not as simple as emitting a lint from a LateContext</p>",
        "id": 232415772,
        "sender_full_name": "oli",
        "timestamp": 1617107088
    },
    {
        "content": "<p><code>buffer_lint</code> is not a method on <code>Session</code>. Only on <code>LintBuffer</code> and <code>ParseSess</code>.</p>",
        "id": 232415773,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107089
    },
    {
        "content": "<p>you don't need to buffer</p>",
        "id": 232415781,
        "sender_full_name": "oli",
        "timestamp": 1617107098
    },
    {
        "content": "<p>sec, looking for the correct function</p>",
        "id": 232415797,
        "sender_full_name": "oli",
        "timestamp": 1617107106
    },
    {
        "content": "<p>I just used it two days ago</p>",
        "id": 232415804,
        "sender_full_name": "oli",
        "timestamp": 1617107110
    },
    {
        "content": "<p><code>struct_span_lint_hir</code></p>",
        "id": 232415869,
        "sender_full_name": "oli",
        "timestamp": 1617107141
    },
    {
        "content": "<p>it's on <code>tcx</code> oh</p>",
        "id": 232415957,
        "sender_full_name": "oli",
        "timestamp": 1617107168
    },
    {
        "content": "<p>This is before HIR is available.</p>",
        "id": 232415972,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107174
    },
    {
        "content": "<p>Basically there is a function that runs before the regular parsing and only parses the input source file to get a specific attribute. I want to deprecate this attribute.</p>",
        "id": 232416097,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107239
    },
    {
        "content": "<p>you can get at the <code>ParseSess</code> via a <code>Session</code>, then you can use buffering from there</p>",
        "id": 232416237,
        "sender_full_name": "oli",
        "timestamp": 1617107318
    },
    {
        "content": "<p>Thanks, that worked.</p>",
        "id": 232416429,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107410
    },
    {
        "content": "<p>just out of curiosity, why aren't you using a plain pre-expansion lint or similar?</p>",
        "id": 232416467,
        "sender_full_name": "oli",
        "timestamp": 1617107434
    },
    {
        "content": "<p>I never used pre-expansion lints.</p>",
        "id": 232416723,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107551
    },
    {
        "content": "<p>Where should I place it then?</p>",
        "id": 232416753,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107570
    },
    {
        "content": "<p>like early lints, just before macro expansion. For your case even a regular early lint would work I'd think?</p>",
        "id": 232416768,
        "sender_full_name": "oli",
        "timestamp": 1617107578
    },
    {
        "content": "<p>Yeah, the attributes are inert, so early lints should work.</p>",
        "id": 232416856,
        "sender_full_name": "bjorn3",
        "timestamp": 1617107609
    },
    {
        "content": "<p>there is a <code>register_internals</code> function in <code>rustc_lint</code> where you can add new lints</p>",
        "id": 232416883,
        "sender_full_name": "oli",
        "timestamp": 1617107632
    },
    {
        "content": "<p>thogh... that's the wrong thing. <code>register_builtins</code> is the one you want</p>",
        "id": 232417014,
        "sender_full_name": "oli",
        "timestamp": 1617107679
    },
    {
        "content": "<p>you aren't linting rustc, you are lintijng regular code</p>",
        "id": 232417032,
        "sender_full_name": "oli",
        "timestamp": 1617107692
    }
]