[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>extracting /home/grommish/openwrt/build_dir/target-mips64_octeonplus_64_musl/rust-1.57.0/build/cache/2021-11-30/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\n    Updating crates.io index\n   Compiling proc-macro2 v1.0.30\n   Compiling unicode-xid v0.2.2\n   Compiling syn v1.0.80\n   Compiling autocfg v1.0.0\n   Compiling memchr v2.4.1\n   Compiling version_check v0.9.3\n   Compiling lazy_static v1.4.0\n   Compiling serde_derive v1.0.125\nerror[E0463]: can&#39;t find crate for `std`\n\nerror[E0463]: can&#39;t find crate for `std`\n  --&gt; /home/grommish/openwrt/staging_dir/host/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.30/build.rs:43:5\n   |\n43 | use std::env;\n   |     ^^^ can&#39;t find crate\n</code></pre></div>\n<p>this is an error building host proc-macros for bootstrap itself - is your host toolchain broken or something? I see you have a custom <code>build.rustc := /home/grommish/openwrt/staging_dir/host/bin/ru...</code> set.</p>",
        "id": 266637170,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1641163928
    },
    {
        "content": "<p>setting <code>--build</code> is not really supported</p>",
        "id": 266637176,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1641163952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/266637176\">said</a>:</p>\n<blockquote>\n<p>setting <code>--build</code> is not really supported</p>\n</blockquote>\n<p>Well, that may be the issue then.  The HOST build completes fine </p>\n<div class=\"codehilite\"><pre><span></span><code>grommish@DESKTOP-AW:~/openwrt/staging_dir/host$ ll bin/rustc\n-rwxr-xr-x 1 grommish grommish 17344 Jan  2 03:55 bin/rustc*\ngrommish@DESKTOP-AW:~/openwrt/staging_dir/host$ file bin/rustc\nbin/rustc: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=76008b88647eb342385535fc311bfaf0d769c225, for GNU/Linux 3.2.0, not stripped\ngrommish@DESKTOP-AW:~/openwrt/staging_dir/host$\n</code></pre></div>\n<p>I'm now attempting to build (in this case) Mips64 rustc/cargo for installation onto the device.  I can host build, and I can cross-compile, now to see about on-device support.  That's where I'm hitting the issue.  I build out x86_64-gnu/mips64-musl, but not mips64-musl/mips64-musl, with the configuration you see, is where it's failing.</p>\n<p>I build the Host rustc/cargo, install it to the Fakeroot (~/openwrt/staging_dir/host/) along with everything else that Rust builds..  I even install docs..<br>\nI cross-compile Mips64 native binaries, is that just not possible for rustc/cargo?</p>",
        "id": 266638414,
        "sender_full_name": "Grommish",
        "timestamp": 1641165678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>RUST_LLVM_CXXFLAGS = \\\n  -DCMAKE_CROSSCOMPILING=True \\\n  -DLLVM_TABLEGEN=$(STAGING_DIR_HOST)/bin/llvm-tblgen \\\n  -DCLANG_TABLEGEN=$(STAGING_DIR_HOST)/bin/clang-tblgen \\\n  -DLLVM_DEFAULT_TARGET_TRIPLE=mips64-linux-musl \\\n  -DLLVM_TARGET_ARCH=Mips64 \\\n  -DLLVM_TARGETS_TO_BUILD=Mips64\n\nMUSL_CONFIGURE_ARGS = \\\n  --set=target.$(RUSTC_TARGET_ARCH).linker=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cc=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cxx=$(TARGET_CXX_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).ar=$(TARGET_AR) \\\n  --set=target.$(RUSTC_TARGET_ARCH).ranlib=$(TARGET_RANLIB) \\\n  --set=target.$(RUSTC_TARGET_ARCH).crt-static=false \\\n  --set=target.$(RUSTC_TARGET_ARCH).musl-root=$(TOOLCHAIN_DIR)\n\nHOST_CONFIGURE_VARS += \\\n  CARGO_HOME=$(CARGO_HOME)\n\nCONFIGURE_VARS += \\\n  CARGO_HOME=$(CARGO_HOME)\n\nHOST_CONFIGURE_ARGS = \\\n  --target=$(RUSTC_TARGET_ARCH) \\\n  --build=$(RUSTC_HOST_ARCH) \\\n  --host=$(RUSTC_HOST_ARCH) \\\n  --prefix=$(STAGING_DIR_HOST) \\\n  --bindir=$(STAGING_DIR_HOST)/bin \\\n  --libdir=$(STAGING_DIR_HOST)/lib \\\n  --sysconfdir=$(STAGING_DIR_HOST)/etc \\\n  --datadir=$(STAGING_DIR_HOST)/share \\\n  --mandir=$(STAGING_DIR_HOST)/man \\\n  --release-channel=nightly \\\n  --enable-lld \\\n  --enable-llvm-link-shared \\\n  --enable-full-tools \\\n  --enable-missing-tools \\\n  --dist-compression-formats=xz\n\nCONFIGURE_ARGS = \\\n  --target=$(RUSTC_TARGET_ARCH) \\\n  --build=$(RUSTC_HOST_ARCH) \\\n  --host=$(RUSTC_TARGET_ARCH) \\\n  --prefix=$(CONFIGURE_PREFIX) \\\n  --bindir=$(CONFIGURE_PREFIX)/bin \\\n  --libdir=$(CONFIGURE_PREFIX)/lib \\\n  --sysconfdir=$(CONFIGURE_PREFIX)/etc \\\n  --datadir=$(CONFIGURE_PREFIX)/share \\\n  --mandir=$(CONFIGURE_PREFIX)/man \\\n  --release-channel=nightly \\\n  --enable-lld \\\n  --enable-llvm-link-shared \\\n  --enable-full-tools \\\n  --enable-missing-tools \\\n  --enable-local-rust \\\n  --dist-compression-formats=xz \\\n  --set=llvm.cxxflags=&#39;$(RUST_LLVM_CXXFLAGS)&#39;\n\nifeq ($(CONFIG_USE_MUSL),y)\nHOST_CONFIGURE_ARGS += $(MUSL_CONFIGURE_ARGS)\nCONFIGURE_ARGS += $(MUSL_CONFIGURE_ARGS)\nendif\n</code></pre></div>\n<p>You can see the Host and Target configure calls..  <code>--enable-local-rust</code> found rustc/cargo in the Fakeroot.</p>",
        "id": 266638637,
        "sender_full_name": "Grommish",
        "timestamp": 1641166026
    },
    {
        "content": "<p>Interesting.  I rebuild my HOST rust-lang toolchain (as established).  I build this several times per day, so in an effort to shorten my recompile time, I tried to use <code>--local-rust-root</code> to the existing rustc install in the Fakeroot to build the new version (which should bypass Stage0, if I understand correctly).  I get the same Out of Scope errors as shown above when building what previously didn't have an issue until I add the <code>--local-rust-root</code> pointing to the installation directory (which is found by <code>configure</code> since it lists the full <code>bin/rustc</code> and <code>bin/cargo</code> from the root I provide.  So, the issue I am see seems to be stemming from the _successfully compiled and installed_ rust build.  </p>\n<p>Any  clue as to why this is happening?</p>",
        "id": 266773632,
        "sender_full_name": "Grommish",
        "timestamp": 1641277281
    },
    {
        "content": "<p>Update:  Calling <code>x,py</code> to do a <code>build</code>/<code>install</code> does NOT install all of the files, apparently, leading to the <code>Out of scope</code> errors I am seeing.  Moving to <code>x.py dist</code>, then manually extracting the resulting <code>.xz</code> archives works, however.</p>",
        "id": 267286840,
        "sender_full_name": "Grommish",
        "timestamp": 1641634675
    },
    {
        "content": "<p>Can anyone tell me what specifically is needed to build a cross-compiled enabled toolchain?  <code>library/std cargo</code>, but what else? I'm hoping to trim down this compile time from building everything (including things I know are broken, like <code>rls</code>).  I'm not a dev and I'm unfamiliar with the various <code>rust-lang</code> components, or their purpose.</p>",
        "id": 270329834,
        "sender_full_name": "Grommish",
        "timestamp": 1643773927
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rustup/concepts/profiles.html\">https://rust-lang.github.io/rustup/concepts/profiles.html</a></p>",
        "id": 270430163,
        "sender_full_name": "The 8472",
        "timestamp": 1643824795
    },
    {
        "content": "<p>Beyond the minimal profile I think you need rustdoc to run doctests. And the source bundle to run -Zbuild-std (nightly-only).</p>",
        "id": 270430474,
        "sender_full_name": "The 8472",
        "timestamp": 1643824878
    },
    {
        "content": "<p>Thanks!  I can't use <code>rustup</code> in this situation, but I can specify parts aside from building all the tools when i invoke the build.</p>\n<p>This is what I currently build out:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo-nightly-x86_64-unknown-linux-gnu.tar.xz           rust-docs-nightly-mips64-openwrt-linux-musl.tar.xz\nclippy-nightly-x86_64-unknown-linux-gnu.tar.xz          rust-docs-nightly-x86_64-unknown-linux-gnu.tar.xz\nllvm-tools-nightly-x86_64-unknown-linux-gnu.tar.xz      rust-nightly-x86_64-unknown-linux-gnu.tar.xz\nmiri-nightly-x86_64-unknown-linux-gnu.tar.xz            rust-src-nightly.tar.xz\nrls-nightly-x86_64-unknown-linux-gnu.tar.xz             rust-std-nightly-mips64-openwrt-linux-musl.tar.xz\nrust-analysis-nightly-mips64-openwrt-linux-musl.tar.xz  rust-std-nightly-x86_64-unknown-linux-gnu.tar.xz\nrust-analysis-nightly-x86_64-unknown-linux-gnu.tar.xz   rustc-dev-nightly-x86_64-unknown-linux-gnu.tar.xz\nrust-analyzer-nightly-x86_64-unknown-linux-gnu.tar.xz   rustc-nightly-src.tar.xz\nrust-demangler-nightly-x86_64-unknown-linux-gnu.tar.xz  rustc-nightly-x86_64-unknown-linux-gnu.tar.xz\nrust-dev-nightly-x86_64-unknown-linux-gnu.tar.xz        rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\n</code></pre></div>\n<p>Any of these I can drop would not only save compile time but space..  Suggestions?</p>",
        "id": 270503233,
        "sender_full_name": "Grommish",
        "timestamp": 1643866618
    },
    {
        "content": "<p>you can drop clippy, miri, rls, rust-analyzer, rust-analysis, rust-demangler, rust-dev, rustc-dev, rust-docs and rustfmt while still being able to compile everything. you may also be able to drop llvm-tools.</p>",
        "id": 270505736,
        "sender_full_name": "bjorn3",
        "timestamp": 1643869119
    },
    {
        "content": "<p>so <code>./x.py --config config.toml cargo llvm-tools library/std rust-src</code> would be correct?  I know I need <code>rust-lang</code> to build out <code>llvm</code>, <code>clang</code>, <code>libc</code>, etc</p>",
        "id": 270506630,
        "sender_full_name": "Grommish",
        "timestamp": 1643870033
    },
    {
        "content": "<p>I'm not quite sure how to disable the other things.</p>",
        "id": 270507787,
        "sender_full_name": "bjorn3",
        "timestamp": 1643871328
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> - yet again!</p>",
        "id": 270508014,
        "sender_full_name": "Grommish",
        "timestamp": 1643871600
    },
    {
        "content": "<p>The <code>build.tools</code> key in config.toml</p>",
        "id": 270524498,
        "sender_full_name": "The 8472",
        "timestamp": 1643882606
    },
    {
        "content": "<p>Yes, I have to set everything thru <code>./configure</code> calls.</p>\n<div class=\"codehilite\"><pre><span></span><code>MUSL_CONFIGURE_ARGS = \\\n  --set=target.$(RUSTC_TARGET_ARCH).ar=$(TARGET_AR) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cc=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cxx=$(TARGET_CXX_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).linker=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).musl-root=$(TOOLCHAIN_DIR) \\\n  --set=target.$(RUSTC_TARGET_ARCH).ranlib=$(TARGET_RANLIB)\n\nHOST_CONFIGURE_OPTS += CARGO_HOME=$(CARGO_HOME)\n\nRUST_COMMOM_ARGS := \\\n  --build=$(RUSTC_HOST_ARCH) \\\n  --dist-compression-formats=xz \\\n  --enable-full-tools \\\n  --enable-llvm-link-shared \\\n  --enable-llvm-plugins \\\n  --enable-missing-tools \\\n  --enable-ninja \\\n  --enable-optimize \\\n  --enable-optimize-llvm \\\n  --enable-parallel-compiler \\\n  --enable-sanitizers \\\n  --release-channel=nightly \\\n  ${MUSL_CONFIGURE_ARGS}\n\nHOST_CONFIGURE_ARGS = \\\n  --target=$(RUSTC_TARGET_ARCH) \\\n  --host=$(RUSTC_HOST_ARCH) \\\n  --prefix=$(STAGING_DIR_HOST) \\\n  --bindir=$(STAGING_DIR_HOST)/bin \\\n  --libdir=$(STAGING_DIR_HOST)/lib \\\n  --sysconfdir=$(STAGING_DIR_HOST)/etc \\\n  --datadir=$(STAGING_DIR_HOST)/share \\\n  --mandir=$(STAGING_DIR_HOST)/man \\\n  ${RUST_COMMOM_ARGS}\n</code></pre></div>\n<p><code>--enable-full-tools</code> I will probably need to investigate more, as I don't know off-hand if that is everything including things like LLVM and the sub-modules, and if so, exactly what I need to replace them with on the call (see the above <code>x.py dist</code> call question)</p>",
        "id": 270676599,
        "sender_full_name": "Grommish",
        "timestamp": 1643959874
    },
    {
        "content": "<p>If there already is an llvm version supported by rustc built for the target you can use that instead of building another one. Sometimes there are miscompiles without the custom llvm but they're rare.</p>",
        "id": 270683727,
        "sender_full_name": "The 8472",
        "timestamp": 1643964147
    },
    {
        "content": "<p>Unfortunately, I need rust-lang to build it out for the custom tuple for now.  OpenWrt is MUSL based, so not much in the way of LLVM anymore in-project. Recently, someone looked at including eBPF LLVM support, but since items like <code>libc</code> are altered by the rust package, I'd rather minimize potential issues</p>",
        "id": 270685942,
        "sender_full_name": "Grommish",
        "timestamp": 1643965463
    },
    {
        "content": "<p>From the log it looks like the project depends on the libc crate and it doesn't understand the target. I guess you have a patched libc with support for the openwrt target? Maybe changing the mone's cargo toml to point to the patched version will do the job.</p>",
        "id": 270815582,
        "sender_full_name": "The 8472",
        "timestamp": 1644051746
    },
    {
        "content": "<p>Ok.. thanks! So this is a <code>mone</code> issue with outdated deps for the arch, rather than a rust implementation issue?  I'm looking for code I can make into a Proof of Concept test package, <code>mone</code> was a small network monitor  in rust, so I picked it :D  Not realizing it was just old..</p>\n<p>Any suggestions on something like mone?</p>",
        "id": 270919947,
        "sender_full_name": "Grommish",
        "timestamp": 1644193020
    },
    {
        "content": "<p>Also, is there any indication on how often the <code>libc</code> crate on <code>rust-lang</code> gets a revision release?  I submitted a PR back in December that was merged, but the last release was November.</p>",
        "id": 270924061,
        "sender_full_name": "Grommish",
        "timestamp": 1644198963
    },
    {
        "content": "<p>libc gets released fairly frequently: <a href=\"https://crates.io/crates/libc/versions\">https://crates.io/crates/libc/versions</a><br>\nAnd the one used in nightly std is the 2nd-latest version: <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/Cargo.toml#L18\">https://github.com/rust-lang/rust/blob/master/library/std/Cargo.toml#L18</a></p>",
        "id": 270953233,
        "sender_full_name": "The 8472",
        "timestamp": 1644226920
    },
    {
        "content": "<p>Ah, Ok..  The release artifacts on Github are listed as <br>\n<code>https://github.com/rust-lang/libc/releases/tag/0.2.108</code> being the latest <code>JohnTitor released this Nov 20, 2021</code>,<br>\nwhether or not it gets updated is an issue for me, since by definition, unless the local libc is above the PR's I sub'ed (and will need to do more), the tuple defines won't work.. I'll get Mips64 Arch issues (like ENOTSUP and O_LARGEFILE not being defined for Mips64) unless it's the latest, ora custome local <a href=\"http://crate.io\">crate.io</a>.</p>\n<p>This might be a solution for a single-person, but I need to make this work across an entire build system platform :D</p>",
        "id": 270955742,
        "sender_full_name": "Grommish",
        "timestamp": 1644228302
    },
    {
        "content": "<p>Idk what the policy for github releases is, maybe check their issue tracker. They're still in the git tags: <a href=\"https://github.com/rust-lang/libc/tags\">https://github.com/rust-lang/libc/tags</a></p>",
        "id": 270956193,
        "sender_full_name": "The 8472",
        "timestamp": 1644228569
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> !  I am currently hosting a local libc with the changes and doing an <code>cargo update</code> prior to trying to build, but I don't know how feasible it is for future stuff.  On the testing front, I did find a project to try (<a href=\"https://github.com/ClementTsang/bottom.git\">https://github.com/ClementTsang/bottom.git</a>) and it did build and cross for mips64 (of course, it immediate SIGILL'd on device, but baby steps).  Thanks again for the patience everyone who has taken the time to help has shown!</p>",
        "id": 270957064,
        "sender_full_name": "Grommish",
        "timestamp": 1644229058
    },
    {
        "content": "<p>Am I reading this right in that I'm getting this <code>SIGILL</code> due to a float issue?</p>\n<div class=\"codehilite\"><pre><span></span><code>Reading symbols from build_dir/target-mips64_octeonplus_64_musl/suricata-6.0.4/ipkg-mips64_octeonplus/suricata6/usr/bin/suricata...\n0x000000fff7f54f00 in _dlstart ()\n   from /home/grommish/openwrt/scripts/../staging_dir/target-mips64_octeonplus_64_musl/root-octeon/lib/ld-musl-mips64-sf.so.1\n(gdb) show args\nArgument list to give program being debugged when it is started is &quot;&quot;.\n(gdb) set args -c /etc/suricata/suricata.yaml -i br-lan\n(gdb) run\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/grommish/openwrt/build_dir/target-mips64_octeonplus_64_musl/suricata-6.0.4/ipkg-mips64_octeonplus/suricata6/usr/bin/suricata -c /etc/suricata/suricata.yaml -i br-lan\n\nProgram received signal SIGILL, Illegal instruction.\n0x000000aaab0b7e68 in compiler_builtins::float::mul::__muldf3 ()\n(gdb) bt\n#0  0x000000aaab0b7e68 in compiler_builtins::float::mul::__muldf3 ()\n#1  0x000000aaab044ad4 in __muldf3 ()\n#2  0x000000aaaad7d828 in ParseSizeString (size=&lt;optimized out&gt;, res=res@entry=0xffffffdb88) at util-misc.c:134\n#3  0x000000aaaad7dc3c in ParseSizeStringU32 (size=&lt;optimized out&gt;, res=res@entry=0xaaab212d28 &lt;cfglist+48&gt;)\n    at util-misc.c:190\n#4  0x000000aaaac02bd4 in HTPConfigParseParameters (cfg_prec=cfg_prec@entry=0xaaab212cf8 &lt;cfglist&gt;, s=&lt;optimized out&gt;,\n    tree=0xfff77ccf90) at app-layer-htp.c:2560\n#5  0x000000aaaac07bf4 in HTPConfigure () at app-layer-htp.c:2872\n#6  0x000000aaaac08194 in RegisterHTPParsers () at app-layer-htp.c:3171\n#7  0x000000aaaac0fd7c in AppLayerParserRegisterProtocolParsers () at app-layer-parser.c:1617\n#8  0x000000aaaabdd0a4 in AppLayerSetup () at app-layer.c:849\n#9  0x000000aaaad52a04 in PostConfLoadedSetup (suri=0xaaab228670 &lt;suricata&gt;) at suricata.c:2509\n#10 0x000000aaaad53444 in SuricataMain (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at suricata.c:2794\n#11 0x000000aaaabd81a4 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at main.c:22\n(gdb) x/$pc\n0xaaab0b7e68 &lt;_ZN17compiler_builtins5float3mul8__muldf317h6f7c68358dbd3cbdE&gt;:   1143496704\n(gdb) print $pc\n$1 = (void (*)()) 0xaaab0b7e68 &lt;compiler_builtins::float::mul::__muldf3&gt;\n(gdb)\n</code></pre></div>\n<p>Is the above error due to how I am building <code>rust-lang</code>, is it a <code>suricata6</code> issue, or an OpenWrt issue an the interaction between everything.  I'm juggling so many variable that it's very hard to tie down what is causing an issue.  </p>\n<p>While I can get <code>rust-lang</code> to compile, and can appear to use the full <code>cargo</code> system inside of OpenWrt's build system (I call <code>cargo update</code>, for example, to over-ride that <code>libc</code> as previously suggested).  I can use that toolchain to cross-compile (the above is from a MIPS64 Octeon3 SoC device via <code>remote-gdb</code>), but I've yet to actually get anything to successfully RUN on that device.  Of the three Applications I've tried, all three have compiled and then failed to run due to various issues (<code>tui</code> issues on 2 of them, but I suspect this is an OpenWrt-lacking issue).</p>",
        "id": 271237692,
        "sender_full_name": "Grommish",
        "timestamp": 1644389710
    },
    {
        "content": "<p>what is the disassembly of that function?</p>",
        "id": 271237999,
        "sender_full_name": "bjorn3",
        "timestamp": 1644390037
    },
    {
        "content": "<p>it doesn't look like it should be able tk generate a SIGILL: <a href=\"https://github.com/rust-lang/compiler-builtins/blob/9c4118f197fe8cb2b579555a497f5df6b3b3afc3/src/float/mul.rs#L4\">https://github.com/rust-lang/compiler-builtins/blob/9c4118f197fe8cb2b579555a497f5df6b3b3afc3/src/float/mul.rs#L4</a></p>",
        "id": 271238010,
        "sender_full_name": "bjorn3",
        "timestamp": 1644390056
    },
    {
        "content": "<p>Not a Developer, just persistent.. How can I pull the info you are asking?</p>",
        "id": 271238030,
        "sender_full_name": "Grommish",
        "timestamp": 1644390079
    },
    {
        "content": "<p>Does running <code>disassemble</code> in gdb work?</p>",
        "id": 271238048,
        "sender_full_name": "bjorn3",
        "timestamp": 1644390116
    },
    {
        "content": "<p>I'm actually rebuilding in the background and will be able to do that in about 10 minutes for you</p>",
        "id": 271238086,
        "sender_full_name": "Grommish",
        "timestamp": 1644390124
    },
    {
        "content": "<p>Thanks for all the assistance.. Again, My biggest issue is _who_ to be persistent with.. I found I had forgotten <code>-msoft-float</code> to CFLAGS and LDFLAGS on the rust compile, which I thought was the issue (Octeon3 MIPS64 is soft-float), and it's still around..</p>",
        "id": 271238147,
        "sender_full_name": "Grommish",
        "timestamp": 1644390236
    },
    {
        "content": "<blockquote>\n<p>Thanks for all the assistance.. Again, My biggest issue is _who_ to be persistent with..</p>\n</blockquote>\n<p>No worries. I don't mind trying to help.</p>",
        "id": 271239015,
        "sender_full_name": "bjorn3",
        "timestamp": 1644391151
    },
    {
        "content": "<p>Dump incoming:</p>\n<p><a href=\"/user_uploads/4715/QjWZRl87nEFGiH3JWnm0r0Q2/gdbdump.txt\">gdbdump.txt</a></p>",
        "id": 271239204,
        "sender_full_name": "Grommish",
        "timestamp": 1644391322
    },
    {
        "content": "<p>From the MIPS64 Instruction set:  <code>dmfc1</code> appears to be a valid Instruction<br>\n(<a href=\"https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MIPS_Architecture_MIPS64_InstructionSet_%20AFP_P_MD00087_06.05.pdf\">https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MIPS_Architecture_MIPS64_InstructionSet_%20AFP_P_MD00087_06.05.pdf</a>)</p>\n<p><a href=\"/user_uploads/4715/Gx8Cotx9o39pI6joKudxA_L4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Gx8Cotx9o39pI6joKudxA_L4/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Gx8Cotx9o39pI6joKudxA_L4/image.png\"></a></div>",
        "id": 271239444,
        "sender_full_name": "Grommish",
        "timestamp": 1644391554
    },
    {
        "content": "<p>And from previously version and Victor's input: <a href=\"https://forum.suricata.io/t/suricata-6-0-3-mips64-openwrt-sigill/2013\">https://forum.suricata.io/t/suricata-6-0-3-mips64-openwrt-sigill/2013</a></p>",
        "id": 271239637,
        "sender_full_name": "Grommish",
        "timestamp": 1644391738
    },
    {
        "content": "<p>That is a floating point instruction. You said you compiled with the soft-float abi. Does the cpu itself support floating point instructions? If not you will havr to change the rustc target to enable soft-float too.</p>",
        "id": 271239939,
        "sender_full_name": "bjorn3",
        "timestamp": 1644392051
    },
    {
        "content": "<p>If it does, you may still need to enable soft-float for getting rustc to use the right abi.</p>",
        "id": 271239966,
        "sender_full_name": "bjorn3",
        "timestamp": 1644392087
    },
    {
        "content": "<p>The tuple define: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs</a></p>",
        "id": 271240087,
        "sender_full_name": "Grommish",
        "timestamp": 1644392197
    },
    {
        "content": "<p>I'm wondering if <code>libhtp</code>, which is built with <code>suricata</code> is somehow not being passed <code>-msoft-float</code>, since the error seems to stub from a libhtp call</p>",
        "id": 271240142,
        "sender_full_name": "Grommish",
        "timestamp": 1644392270
    },
    {
        "content": "<p>Try setting <code>+mips64r2,+soft-float</code> at <a href=\"https://github.com/rust-lang/rust/blob/e1f586cfa53e1e8a45919bb411a55158756fc343/compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs#L9\">https://github.com/rust-lang/rust/blob/e1f586cfa53e1e8a45919bb411a55158756fc343/compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs#L9</a> Otherwise soft-float isn't enabled on the rust side I think.</p>",
        "id": 271240348,
        "sender_full_name": "bjorn3",
        "timestamp": 1644392460
    },
    {
        "content": "<p>Ok.. Will do.. This will be several hours since I have to rebuild rust, but I'll let you know!</p>",
        "id": 271240373,
        "sender_full_name": "Grommish",
        "timestamp": 1644392504
    },
    {
        "content": "<blockquote>\n<p>but I've yet to actually get anything to successfully RUN on that device.</p>\n</blockquote>\n<p>Have you tried a hello world?</p>",
        "id": 271263447,
        "sender_full_name": "The 8472",
        "timestamp": 1644406288
    },
    {
        "content": "<p>No, because I'm not a programmer :D  I have used repos that I can call <code>cargo build</code> on rather than trying to do anything with <code>rustc</code> directly.  Because everything goes thru the build-system environment and it's fakeroot, I can't just invoke it directly without wrapping the build system around it.</p>\n<p>Suricata does run enough to <code>SIGILL</code>, and if <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> is correct that <code>rust-lang</code> requires an explicit <code>soft-float</code> regardless of the CFLAG/LDFLAGs piled on the <code>x.py</code> call, then it wouldn't have ever worked with the OpenWrt <code>octeon</code> mips64 target I'm using (which is set for a <code>arch</code> define that requires soft-float).</p>\n<p>I'll find out soon enough though and report back :)</p>",
        "id": 271264204,
        "sender_full_name": "Grommish",
        "timestamp": 1644406772
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/rust-by-example/hello.html\">https://doc.rust-lang.org/rust-by-example/hello.html</a></p>",
        "id": 271264277,
        "sender_full_name": "The 8472",
        "timestamp": 1644406804
    },
    {
        "content": "<p>Would that have caught the <code>fp</code> issue I'm seeing, if that is the fix?</p>",
        "id": 271264375,
        "sender_full_name": "Grommish",
        "timestamp": 1644406898
    },
    {
        "content": "<p>No, that shouldn't involve any fp. I was just suggesting to start smaller.</p>",
        "id": 271264885,
        "sender_full_name": "The 8472",
        "timestamp": 1644407239
    },
    {
        "content": "<p>Where is the fun in that? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>   In all seriousness, I'm only pursuing this because I was to naive to know better and people said it couldn't be done, from OpenWrt (who was actually more \"Why??\") to Suricata, who told me flat out it was impossible.  The issue seems to be that no one wanted to bother. </p>\n<p>I was serious when I said I don't know formal programming.. I can read it, usually, and understand what's trying to be accomplished.  Modification is iffy, and writing from scratch is just beyond me.  I've found I don't really need to know rust to make rust (and the irony of the first OpenWrt tuple into rust-lang was by a non-dev who doesn't know rust hasn't escaped me).  I have been able to learn the Makefile and Kernel Config formats, slowly learning the yaml and toml formats, and mostly how the build system interacts between the build host and the target arch.</p>\n<p>Once I get rust in place, the goal is to expand LLVM's use back into OpenWrt.  Currently, there is a LLVM eBPF toolchain, but nothing else.  Rust builds LLVM for the target arch as part of the process, so....  Dunno..  My whole goal was to get Suricata 6 working, which led to rust.</p>",
        "id": 271265659,
        "sender_full_name": "Grommish",
        "timestamp": 1644407759
    },
    {
        "content": "<p>In fairness to Suricata, they tend to very <code>x86_64</code> centric, so when I showed up asking about putting it on network infrastructure SoC rather than a x86_64 platform, and not supported by rust...  I can understand, but I stand by my assessment no one just wanted to bother :D</p>",
        "id": 271266007,
        "sender_full_name": "Grommish",
        "timestamp": 1644407957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>root@OpenWrt:/# /usr/bin/suricata -vvvvvvvvvvv -c /etc/suricata/suricata.yaml -i\n br-lan\nWarning: Invalid/No global_log_level assigned by user.  Falling back on the default_log_level &quot;Info&quot;\n9/2/2022 -- 16:25:44 - &lt;Notice&gt; - This is Suricata version 6.0.4 RELEASE running in SYSTEM mode\n9/2/2022 -- 16:25:44 - &lt;Info&gt; - CPUs/cores online: 2\n9/2/2022 -- 16:25:44 - &lt;Info&gt; - Found an MTU of 1500 for &#39;br-lan&#39;\n9/2/2022 -- 16:25:44 - &lt;Info&gt; - Found an MTU of 1500 for &#39;br-lan&#39;\nfailed to initialize shared libraries [Dynamic loading not supported]\nAborted\n</code></pre></div>\n<p>At least it's a different error!  I suspect this is going to be on the <code>suricata</code> end though.</p>",
        "id": 271304603,
        "sender_full_name": "Grommish",
        "timestamp": 1644424109
    },
    {
        "content": "<p>Can you get a backtrace?</p>",
        "id": 271317521,
        "sender_full_name": "bjorn3",
        "timestamp": 1644428478
    },
    {
        "content": "<p>Is <code>suricata</code> statically or dynamically linked? You could use <code>ldd /usr/bin/suricata</code> or <code>readelf -e /usr/bin/suricata</code>.</p>",
        "id": 271317992,
        "sender_full_name": "bjorn3",
        "timestamp": 1644428626
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>grommish@DESKTOP-AW:~/openwrt$ ./scripts/remote-gdb 192.168.200.210:9000 build_dir/target-mips64_octeonplus_64_musl/suri\ncata-6.0.4/ipkg-mips64_octeonplus/suricata6/usr/bin/suricata\nUsing target mips64_octeonplus_64 (musl, )\nGNU gdb (GDB) 11.1\nCopyright (C) 2021 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType &quot;show copying&quot; and &quot;show warranty&quot; for details.\nThis GDB was configured as &quot;--host=x86_64-pc-linux-gnu --target=mips64-openwrt-linux-musl&quot;.\nType &quot;show configuration&quot; for configuration details.\nFor bug reporting instructions, please see:\n&lt;https://www.gnu.org/software/gdb/bugs/&gt;.\nFind the GDB manual and other documentation resources online at:\n    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.\n\nFor help, type &quot;help&quot;.\nType &quot;apropos word&quot; to search for commands related to &quot;word&quot;...\nReading symbols from build_dir/target-mips64_octeonplus_64_musl/suricata-6.0.4/ipkg-mips64_octeonplus/suricata6/usr/bin/suricata...\n0x000000fff7f54f00 in _dlstart ()\n   from /home/grommish/openwrt/scripts/../staging_dir/target-mips64_octeonplus_64_musl/root-octeon/lib/ld-musl-mips64-sf.so.1\n(gdb) set args -c /etc/suricata/suricata.yaml -i eth0\n(gdb) run\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: /home/grommish/openwrt/build_dir/target-mips64_octeonplus_64_musl/suricata-6.0.4/ipkg-mips64_octeonplus/suricata6/usr/bin/suricata -c /etc/suricata/suricata.yaml -i eth0\n\nProgram received signal SIGABRT, Aborted.\n__syscall4 (a=3, b=1099511618384, c=0, d=16, n=5014) at ./arch/mips64/syscall_arch.h:85\n85              return r7 &amp;&amp; r2&gt;0 ? -r2 : r2;\n(gdb) bt\n#0  __syscall4 (a=3, b=1099511618384, c=0, d=16, n=5014) at ./arch/mips64/syscall_arch.h:85\n#1  0x000000aaab04cd18 in raise (sig=&lt;optimized out&gt;) at src/signal/raise.c:11\n#2  0x000000aaab03f664 in abort () at src/exit/abort.c:11\nwarning: GDB can&#39;t find the start of the function at 0xfff7a1a6a7.\n\n    GDB is unable to find the start of the function at 0xfff7a1a6a7\nand thus can&#39;t determine the size of that function&#39;s stack frame.\nThis means that GDB may be unable to access that stack frame, or\nthe frames below it.\n    This problem is most likely caused by an invalid program counter or\nstack pointer.\n    However, if you think GDB should simply search farther back\nfrom 0xfff7a1a6a7 for code which looks like the beginning of a\nfunction, you can increase the range of the search using the `set\nheuristic-fence-post&#39; command.\n#3  0x000000fff7a1a6a8 in ?? ()\n(gdb) x/$pc\n0xaaab04cbbc &lt;__syscall4+12&gt;:   65011720\n(gdb)\n</code></pre></div>",
        "id": 271447335,
        "sender_full_name": "Grommish",
        "timestamp": 1644506942
    },
    {
        "content": "<p><code>Suricata</code> defaults to both shared and static libs, but I believe MUSL doesn't support dynamic libs?  Or, is this another setting in the rust-lang compile I missed?</p>\n<p>From one of the Suricata devs</p>\n<p><code>So on x86_64 it doesn't really matter.  I often to --disable-shared as its easier to run gdb in your source tree.  In some cases you might have to disable-shared if dynamic loading isn't supported on your target.</code></p>",
        "id": 271447626,
        "sender_full_name": "Grommish",
        "timestamp": 1644507062
    },
    {
        "content": "<p>and I can set <code>--disable-shared</code> easy enough, the question is: Is there a setting in the toolchain I missed?</p>",
        "id": 271447849,
        "sender_full_name": "Grommish",
        "timestamp": 1644507174
    },
    {
        "content": "<p>I would assume <code>--disable-shared</code> is an option of Suricata.</p>",
        "id": 271449836,
        "sender_full_name": "bjorn3",
        "timestamp": 1644508004
    },
    {
        "content": "<p>Try <code>./configure --disable-shared</code> (add any other options you used previously if any) before you do <code>make</code> to build suricata.</p>",
        "id": 271450155,
        "sender_full_name": "bjorn3",
        "timestamp": 1644508125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span></p>",
        "id": 271450191,
        "sender_full_name": "bjorn3",
        "timestamp": 1644508138
    },
    {
        "content": "<p>Yes, I tried that initially but no joy, which is why I was circling back to a toolchain issue.</p>\n<div class=\"codehilite\"><pre><span></span><code>        --host=$(REAL_GNU_TARGET_NAME) \\\n        --build=$(RUSTC_HOST_ARCH) \\\n        --enable-static \\\n        --disable-shared\n</code></pre></div>\n<p>are what I set on the <code>./configure</code> call for <code>suricata6</code></p>",
        "id": 271451686,
        "sender_full_name": "Grommish",
        "timestamp": 1644508711
    },
    {
        "content": "<p>Just to be clear, I'm just trying to make sure that I didn't miss a config option in rust-lang (similar to the <code>+soft-float</code> you pointed out) that would effect the linking.. For example, I'll have to dig again, but wasn't there a LLVM static/shared setting?  I haven't changed any of them and I may have to.</p>",
        "id": 271468794,
        "sender_full_name": "Grommish",
        "timestamp": 1644515764
    },
    {
        "content": "<p>Musl is dynamically linked as crt_static_default is set to false in the target spec. By the way I though musl supports dlopen when dynamically linking musl itself.</p>",
        "id": 271481108,
        "sender_full_name": "bjorn3",
        "timestamp": 1644520929
    },
    {
        "content": "<p>Yeah, even more odd, it isn't like the build system isn't using <code>.so</code> libs</p>\n<div class=\"codehilite\"><pre><span></span><code>root@OpenWrt:/# ls lib\nconfig                       libpreload-trace.so\nfirmware                     libsetlbf.so\nfunctions                    libubox.so.20211120\nfunctions.sh                 libubus.so.20210809\nld-musl-mips64-sf.so.1       libuci.so\nlibatomic.so.1               libustream-ssl.so\nlibatomic.so.1.2.0           libvalidate.so\nlibblobmsg_json.so.20211120  modules\nlibc.so                      netifd\nlibfstools.so                network\nlibgcc_s.so.1                preinit\nlibjson_script.so.20211120   upgrade\nlibpreload-seccomp.so\n</code></pre></div>\n<p>So, I'm not sure  why it would be saying that in the first place.</p>",
        "id": 271481984,
        "sender_full_name": "Grommish",
        "timestamp": 1644521302
    },
    {
        "content": "<blockquote>\n<p>Is <code>suricata</code> statically or dynamically linked? You could use <code>ldd /usr/bin/suricata</code> or <code>readelf -e /usr/bin/suricata</code>.</p>\n</blockquote>\n<p>Can you check this?</p>",
        "id": 271482305,
        "sender_full_name": "bjorn3",
        "timestamp": 1644521419
    },
    {
        "content": "<p>\"Dynamic loading not supported\" is set as error when musl doesn't support dynamic linking.</p>",
        "id": 271482416,
        "sender_full_name": "bjorn3",
        "timestamp": 1644521475
    },
    {
        "content": "<p><a href=\"https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c#n6\">https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c#n6</a></p>",
        "id": 271482458,
        "sender_full_name": "bjorn3",
        "timestamp": 1644521501
    },
    {
        "content": "<p><a href=\"http://ld.so\">ld.so</a> should overwrite this weak function though.</p>",
        "id": 271482490,
        "sender_full_name": "bjorn3",
        "timestamp": 1644521517
    },
    {
        "content": "<p>I'm going to rebuild rust with <code>--enable-llvm-link-shared</code> to see if it changes anything</p>",
        "id": 271482819,
        "sender_full_name": "Grommish",
        "timestamp": 1644521656
    },
    {
        "content": "<p>That shouldn't change anything for produced executables. It should only make rustc itself be dynamically linked to llvm.</p>",
        "id": 271482886,
        "sender_full_name": "bjorn3",
        "timestamp": 1644521694
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/yuRUjDKaWk2NwLMqjIn8lf1E/new-1.txt\">new-1.txt</a></p>",
        "id": 271483159,
        "sender_full_name": "Grommish",
        "timestamp": 1644521822
    },
    {
        "content": "<p><code>readelf -e suricata</code> output</p>",
        "id": 271483186,
        "sender_full_name": "Grommish",
        "timestamp": 1644521832
    },
    {
        "content": "<p>looks like it is dynamically linked.</p>",
        "id": 271483398,
        "sender_full_name": "bjorn3",
        "timestamp": 1644521931
    },
    {
        "content": "<p>That's what I got from the original error.. it's saying the device doesn't support it, however, as you saw in the <code>/lib</code> directoyr, obviously it's there</p>\n<div class=\"codehilite\"><pre><span></span><code>root@OpenWrt:/usr/lib# ls\ndnsmasq                          libnfnetlink.so.0\nengines-1.1                      libnfnetlink.so.0.2.0\nlibblkid.so.1                    libnftables.so\nlibblkid.so.1.1.0                libnftables.so.1\nlibbz2.so.1.0                    libnftables.so.1.1.0\nlibbz2.so.1.0.8                  libnftnl.so.11\nlibcap-ng.so                     libnftnl.so.11.6.0\nlibcap-ng.so.0                   libnl-tiny.so\nlibcap-ng.so.0.0.0               libnspr4.so\nlibcom_err.so.0                  libnss3.so\nlibcom_err.so.0.0                libnssckbi.so\nlibcrypto.so.1.1                 libnssutil3.so\nlibe2p.so.2                      libpanel.so.6\nlibe2p.so.2.3                    libpanel.so.6.2\nlibext2fs.so.2                   libpanelw.a\nlibext2fs.so.2.4                 libpanelw.so.6\nlibf2fs.so.8                     libpanelw.so.6.2\nlibf2fs.so.8.0.0                 libpcap.so.1\nlibffi.so.8                      libpcap.so.1.10.1\nlibffi.so.8.1.0                  libpcre.so\nlibform.so.6                     libpcre.so.1\nlibform.so.6.2                   libpcre.so.1.2.13\nlibformw.a                       libpcre2-8.so\nlibformw.so.6                    libpcre2-8.so.0\nlibformw.so.6.2                  libpcre2-8.so.0.10.2\nlibfreebl3.so                    libpcre2-posix.so\nlibgdbm.so.6                     libpcre2-posix.so.3\nlibgdbm.so.6.0.0                 libpcre2-posix.so.3.0.0\nlibgdbm_compat.so                libpcreposix.so.0\nlibgdbm_compat.so.4              libpcreposix.so.0.0.7\nlibgdbm_compat.so.4.0.0          libplc4.so\nlibgmp.so.10                     libplds4.so\nlibgmp.so.10.4.1                 libprocps.so\nlibhistory.so.8                  libprocps.so.8\nlibhistory.so.8.1                libprocps.so.8.0.2\nlibhogweed.so.6                  libpython3.10.so\nlibhogweed.so.6.4                libpython3.10.so.1.0\nlibhtp.a                         libreadline.so.8\nlibhtp.la                        libreadline.so.8.1\nlibiwinfo.so.20210430            libsmime3.so\nlibjansson.so                    libsoftokn3.so\nlibjansson.so.4                  libsqlite3.so.0\nlibjansson.so.4.13.0             libsqlite3.so.0.8.6\nlibjson-c.so.5                   libss.so.2\nlibjson-c.so.5.1.0               libss.so.2.0\nliblua.so.5.1.5                  libssl.so.1.1\nliblucihttp.so.0                 libssl3.so\nliblucihttp.so.0.1               libstdc++.so.6\nliblz4.so.1                      libstdc++.so.6.0.29\nliblz4.so.1.9.3                  libstdc++.so.6.0.29-gdb.py\nliblzma.so.5                     libuclient.so\nliblzma.so.5.2.5                 libucode.so.20220120\nlibmagic.so.1                    libuuid.so.1\nlibmagic.so.1.0.0                libuuid.so.1.3.0\nlibmenu.so.6                     libwolfssl.so.4.8.1.31258522\nlibmenu.so.6.2                   libyaml-0.so.2\nlibmenuw.a                       libyaml-0.so.2.0.9\nlibmenuw.so.6                    libyaml.so\nlibmenuw.so.6.2                  libz.so\nlibmnl.so.0                      libz.so.1\nlibmnl.so.0.2.0                  libz.so.1.2.11\nlibncurses.so.6                  libzstd.so\nlibncurses.so.6.2                libzstd.so.1\nlibncursesw.a                    libzstd.so.1.5.0\nlibncursesw.so.6                 lua\nlibncursesw.so.6.2               opkg\nlibnet.so                        os-release\nlibnet.so.9                      pkgconfig\nlibnet.so.9.0.0                  pppd\nlibnetfilter_conntrack.so.3      python3.10\nlibnetfilter_conntrack.so.3.7.0  rpcd\nlibnettle.so.8                   ucode\nlibnettle.so.8.4                 uhttpd_ubus.so\nroot@OpenWrt:/usr/lib#\n</code></pre></div>\n<p>So I have no idea why it would say that :/</p>",
        "id": 271483561,
        "sender_full_name": "Grommish",
        "timestamp": 1644522010
    },
    {
        "content": "<p>Wait..  <code>libhtp</code> is built by Suricata.. and it's a statically linked library..</p>",
        "id": 271483688,
        "sender_full_name": "Grommish",
        "timestamp": 1644522078
    },
    {
        "content": "<p>Would you be able to mix them like that? a static library in the middle of dynamically linked?</p>",
        "id": 271483747,
        "sender_full_name": "Grommish",
        "timestamp": 1644522115
    },
    {
        "content": "<p>Theoretically it should work fine. In practice, not sure.</p>",
        "id": 271483878,
        "sender_full_name": "bjorn3",
        "timestamp": 1644522166
    },
    {
        "content": "<p>By the way could you try <code>nm -D /lib/ld-musl-mips64-sf.so.1 | grep dlopen</code>?</p>",
        "id": 271483921,
        "sender_full_name": "bjorn3",
        "timestamp": 1644522190
    },
    {
        "content": "<p>I'll see if I can force <code>libhtp</code> to come into line with everyone else and see if that corrects the issue</p>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/271483921\">said</a>:</p>\n<blockquote>\n<p>By the way could you try <code>nm -D /lib/ld-musl-mips64-sf.so.1 | grep dlopen</code>?</p>\n</blockquote>\n<p>This is where is gets tricky.  I don't have <code>build-tools</code> or a dev environment on the device itself (having it on a router is.. silly.. usually).. I do my <code>gdb</code> via <code>remote-gdb</code>/<code>gdbserver</code> and my build tree.</p>\n<p>So, In theory I could, but I need to figure out where it is in the build system</p>",
        "id": 271484230,
        "sender_full_name": "Grommish",
        "timestamp": 1644522341
    },
    {
        "content": "<p>I see. I would guess it is wherever the openwrt build system compiled musl.</p>",
        "id": 271484456,
        "sender_full_name": "bjorn3",
        "timestamp": 1644522445
    },
    {
        "content": "<p><code>grommish@DESKTOP-AW:~/openwrt/build_dir$ ~/openwrt/staging_dir/toolchain-mips64_octeonplus_64_gcc-11.2.0_musl/bin/mips64-openwrt-linux-musl-gcc-nm -D ./target-mips64_octeonplus_64_musl/root-octeon/lib/ld-musl-mips64-sf.so.1 | grep dlopen\n0000000000096328 T dlopen</code></p>",
        "id": 271484861,
        "sender_full_name": "Grommish",
        "timestamp": 1644522646
    },
    {
        "content": "<p>I can do some things that people take for granted, but alot of what OpenWrt's build system does in it's cross-compile is maintain the massive loads of C/CXX/LDFLAGS and Environmentals which I can't readily reproduce</p>",
        "id": 271485026,
        "sender_full_name": "Grommish",
        "timestamp": 1644522726
    },
    {
        "content": "<p>I don't have a clue what is to blame for this error.</p>",
        "id": 271485179,
        "sender_full_name": "bjorn3",
        "timestamp": 1644522807
    },
    {
        "content": "<p>But!  I'd love to eventually create native <code>rustc</code> and <code>cargo</code> bins for the devices that want/need/can use it</p>",
        "id": 271485200,
        "sender_full_name": "Grommish",
        "timestamp": 1644522817
    },
    {
        "content": "<p>Well.. <code>libhtp</code> is the odd-ball, so.. that's what I'll hunt.. this is how I usually do things, so it's OK :D</p>",
        "id": 271485294,
        "sender_full_name": "Grommish",
        "timestamp": 1644522844
    },
    {
        "content": "<p>As long as it's not an obvious <code>rust-lang</code> issue, then I can save time and move on from that.. although I'll probably set LLVM for both static and dynamic since <code>x86_64</code> I guess can use them? I dunno.. that whole things confuses me</p>",
        "id": 271485390,
        "sender_full_name": "Grommish",
        "timestamp": 1644522896
    },
    {
        "content": "<p>rustc tends to use a lot of memory for larger projects, so running it on a memory-constrained device is going to be agonizing (with lots of swap) or impossible.</p>",
        "id": 271485466,
        "sender_full_name": "The 8472",
        "timestamp": 1644522941
    },
    {
        "content": "<p>Yes, but Openwrt allows for x86_64 targets and you have MIPS and ARM devices in the enterprise which could use them.. One of the issues Suricata folks had was \"how do you expect to run that on a router\".. My device has 1GB RAM and 4GB Storage in a triple-boot configuration (3 kernels, 3 rootfs partitions) and a SoC with encryption/packet co-processor.  In many ways, it's MUCH better equipped to deal with firewall IDS/IPS/NMD than an Intel 1000 card</p>",
        "id": 271485841,
        "sender_full_name": "Grommish",
        "timestamp": 1644523103
    },
    {
        "content": "<p>And 16GB RAM on a enterprise switch that is a few years old isn't unheard of</p>",
        "id": 271485900,
        "sender_full_name": "Grommish",
        "timestamp": 1644523137
    },
    {
        "content": "<p>But, it's a dream for teh future and would be available for only those who would specifically look for it..  For now, I just gotta get ONE arch to work before I can start the other 6</p>",
        "id": 271485972,
        "sender_full_name": "Grommish",
        "timestamp": 1644523175
    },
    {
        "content": "<p>And, unfortunately,  what I have to work with is Octeon3 MIPS64, which is under-appreciated by almost everyone and not supported by Marvell :D</p>",
        "id": 271486267,
        "sender_full_name": "Grommish",
        "timestamp": 1644523271
    },
    {
        "content": "<p>OH.. By the By.. A HUGE THANK YOU to whoever it was that insisted on <code>rust-lang</code> having an Uninstall script.. Holy @!#!@ that has been SO helpful..</p>",
        "id": 271487032,
        "sender_full_name": "Grommish",
        "timestamp": 1644523607
    },
    {
        "content": "<p>I'm having to compile, install, remove <code>rust-lang</code> 5-7 times a day at times, and it's been a blessing to not have to pull things out manually each time</p>",
        "id": 271487200,
        "sender_full_name": "Grommish",
        "timestamp": 1644523686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>/usr/bin/ld: /home/grommish/openwrt/build_dir/target-mips64_octeonplus_64_musl/suricata-6.0.4/rust/target/mips64-openwrt-linux-musl/release/deps/suricata.suricata.eecaf7f3-cgu.0.rcgu.o: Relocations in generic ELF (EM: 8)\n/usr/bin/ld: /home/grommish/openwrt/build_dir/target-mips64_octeonplus_64_musl/suricata-6.0.4/rust/target/mips64-openwrt-linux-musl/release/deps/suricata.suricata.eecaf7f3-cgu.0.rcgu.o: error adding symbols: file in wrong format\n</code></pre></div>\n<p>I'm now seeing this error.. I'm assuming it's tied to dynamic vs static linking?</p>",
        "id": 271670317,
        "sender_full_name": "Grommish",
        "timestamp": 1644642592
    },
    {
        "content": "<p>EM 8 is EM_MIPS which should be right. Normally you get this kind of error when you are using a linker for the wrong architecture.</p>",
        "id": 271675243,
        "sender_full_name": "bjorn3",
        "timestamp": 1644650722
    },
    {
        "content": "<p>Before I wipe out my rust install, is there a way to see if it's a mips64-openwrt-linux-musl-ld issue?</p>",
        "id": 271717684,
        "sender_full_name": "Grommish",
        "timestamp": 1644711813
    },
    {
        "content": "<p>It seems to use ld, not mips64-openwrt-linux-musl-ld.</p>",
        "id": 271736188,
        "sender_full_name": "bjorn3",
        "timestamp": 1644743031
    },
    {
        "content": "<p>Not only that, but I don't have a <code>/usr/bin/ld</code> in the fakeroot, so it's trying to use the Build machines linker.</p>\n<p>Also, it maybe important to someone down the line:  I have found I have to put <code>--root</code> on every <code>cargo</code> command I issue, or it defaults to <code>~/.cargo</code>.   I installed rust and cargo via the installation script, is there a <code>toml</code> config file that will set the default, or is that <code>CARGO_HOME</code>?  Even with <code>CARGO_HOME</code>, I find I had to set <code>--root</code>.</p>",
        "id": 271763532,
        "sender_full_name": "Grommish",
        "timestamp": 1644783872
    },
    {
        "content": "<p>If you're using rustup you can add your custom-built rust as new toolchain and then choose that as default.</p>",
        "id": 271763841,
        "sender_full_name": "The 8472",
        "timestamp": 1644784280
    },
    {
        "content": "<p>--root should only specify in which directory it places stuff compiled with <code>cargo install</code></p>",
        "id": 271763933,
        "sender_full_name": "The 8472",
        "timestamp": 1644784377
    },
    {
        "content": "<p>Right, which is what I need (in this case, <code>suricata6</code> requires <code>cbindgen</code>).   So while <code>cargo</code> and <code>rustc</code> and everything else is in <code>~/openwrt/staging_dir/host/</code> (<code>bin/</code>, <code>lib/</code>, etc).  I'm still trying to figure out which of the many moving parts is causing the issue :D</p>\n<p>I can't use <code>rustup</code> for any of this, unfortunately.  I'm building from source</p>",
        "id": 271765615,
        "sender_full_name": "Grommish",
        "timestamp": 1644786517
    },
    {
        "content": "<p>In that case you might want the CARGO_INSTALL_ROOT env</p>",
        "id": 271768627,
        "sender_full_name": "The 8472",
        "timestamp": 1644790764
    },
    {
        "content": "<p>Well..  I don't know that <code>CARGO_INSTALL_ROOT</code> did anything for what I need, however setting <code>--root</code> on the <code>cargo</code> command certainly did.</p>\n<p>To that end, I have successfully built/crossed/installed <code>ripgrep</code> from the <code>mips-openwrt-linux-musl</code> toolchain.  I don't know if it has float or not, but it does RUN on the target device.  Until I can get <code>suricata</code> to work, I won't know how to tell a complete success, but I suspect it's a <code>suricata</code> issue when dealing with cross-compile and whatnot.</p>",
        "id": 271921310,
        "sender_full_name": "Grommish",
        "timestamp": 1644894924
    },
    {
        "content": "<p>Is there a way to compile an <code>.rs</code> file into a binary, or is that strictly a script?</p>",
        "id": 271925750,
        "sender_full_name": "Grommish",
        "timestamp": 1644899409
    },
    {
        "content": "<p>I'd like to compile something like <a href=\"https://github.com/sentinel1909/rust_floating_point/blob/master/FloatingPoint.rs\">https://github.com/sentinel1909/rust_floating_point/blob/master/FloatingPoint.rs</a> in order to test FPU instructions, for example</p>",
        "id": 271925780,
        "sender_full_name": "Grommish",
        "timestamp": 1644899463
    },
    {
        "content": "<p>While I'd still be interested in what to do with <code>.rs</code> files, it appears that having a working Proof of Concept package that works on devices other than just mine makes people who know <code>rust</code> and OpenWrt more willing to lend a hand :D</p>\n<p>I'm working on a test-suite package that had fpu tests and other things.  Well, the good news is, if float is fixed on mips64, then I can call it complete and move to the next arch!</p>\n<p>I'd like to continue using this thread for it, as long as you all don't have objections.  It will help me keep everything as together as possible</p>",
        "id": 271930106,
        "sender_full_name": "Grommish",
        "timestamp": 1644904129
    },
    {
        "content": "<p>Question:  CARGO_HOME is set, but it's continuing to put <code>registry</code> in <code>~/.cargo</code>.  Is there another environmental or flag I'm missing?</p>",
        "id": 271930214,
        "sender_full_name": "Grommish",
        "timestamp": 1644904221
    },
    {
        "content": "<p>CARGO_ROOT_DIR I believe.</p>",
        "id": 271935625,
        "sender_full_name": "bjorn3",
        "timestamp": 1644910198
    },
    {
        "content": "<p>For compiling a single rust file you can use <code>rustc filename.rs</code>. You also need to pass <code>--target mips-openwrt-linux-musl</code> in your case.</p>",
        "id": 271935761,
        "sender_full_name": "bjorn3",
        "timestamp": 1644910297
    },
    {
        "content": "<p>Ok, so it's just a simple <code>rustc &lt;file&gt;</code>.. Everything I did on my short Google search was talking about running it as a script. which is not what I needed :)  Thanks again <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> !  I am working on a test suite.. When I get that done, I'll be in a position to submit more Tier 3 targets</p>",
        "id": 271936333,
        "sender_full_name": "Grommish",
        "timestamp": 1644910759
    },
    {
        "content": "<p>Question: If I indicate a feature (like the <code>soft-float</code> I needed in <code>mips64</code>) for things like <code>neon</code> and <code>vfp</code> under the various <code>arm</code> arches.  Does that make it AVAILABLE, or ENABLED in the toolchain?  For example, if I make an <code>arm-openwrt-linux-musl</code> that has <code>vfp</code> or <code>neon</code> in the tuple, is it present/enabled all the time in that toolchain, or only when enabled using <code>RUSTFLAGS</code> (I think they go there anyway)?  The issue I'm going to face is that OpenWrt lumps ALL of the <code>arm</code> targets (arm/armv5/armv6/armv7) all report as <code>arm</code> with the various features like <code>vfp</code> (and various levels of it) or <code>neon</code> ( or <code>vfp-neon</code>) listed elsewhere in the build system.</p>",
        "id": 271977406,
        "sender_full_name": "Grommish",
        "timestamp": 1644933763
    },
    {
        "content": "<p>If you add it to <code>target_features</code> in the target spec, it is enabled by default unless you explicitly disable it using <code>-Ctarget-features</code>, if you don't add it to the target spec it is disabled by default, but can still be enabled using <code>-Ctarget-features</code>. In either case switching requires recompiling the standard library if it changes the abi. Whatever is specified in the target spec is used when compiling the standard library as part of the rust build system. Generally a different target is used for target features changing the abi, but not for those not changing the abi. Enabling/disabling simd doesn't change the rust abi Enabling/disabling floating point registers does.</p>",
        "id": 271980193,
        "sender_full_name": "bjorn3",
        "timestamp": 1644934874
    },
    {
        "content": "<p>Ok.. I think I understand.. So <code>arm</code> targets would have the potential to use <code>-Cvfp-neon</code> or <code>-Cvfp4</code>, etc, at compile time if I do NOT explicitly define it?  And, if I do, that would disable?  I would think calling it to turn it on would be the absolute easiest way to deal with it (and it can't be as easy as I'm thinking it might be!)</p>",
        "id": 271980817,
        "sender_full_name": "Grommish",
        "timestamp": 1644935100
    },
    {
        "content": "<p>I don't think there is a way to disable `-Ctarget-features for some target features. Whatever is passed on the commandline overrides the target spec.</p>",
        "id": 271981405,
        "sender_full_name": "bjorn3",
        "timestamp": 1644935313
    },
    {
        "content": "<p>Ok. I think I'm just not asking a coherent question and I'm sorry for not having the right terms.  </p>\n<p>This is an example of how it is set:</p>\n<div class=\"codehilite\"><pre><span></span><code>armvirt/32/target.mk:CPU_SUBTYPE:=neon-vfpv4\nat91/sama5/target.mk:CPU_SUBTYPE:=vfpv4\nbcm27xx/bcm2708/target.mk:CPU_SUBTYPE:=vfp\nbcm27xx/bcm2709/target.mk:CPU_SUBTYPE:=neon-vfpv4\nimx/cortexa7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nimx/cortexa9/target.mk:CPU_SUBTYPE:=neon\nipq40xx/Makefile:CPU_SUBTYPE:=neon-vfpv4\nipq806x/Makefile:CPU_SUBTYPE:=neon-vfpv4\nlayerscape/armv7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nmediatek/mt7623/target.mk:CPU_SUBTYPE:=neon-vfpv4\nmvebu/cortexa9/target.mk:CPU_SUBTYPE:=vfpv3-d16\nomap/Makefile:CPU_SUBTYPE:=vfpv3\nsunxi/cortexa7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nsunxi/cortexa8/target.mk:CPU_SUBTYPE:=vfpv3\ntegra/Makefile:CPU_SUBTYPE := vfpv3-d16\nzynq/Makefile:CPU_SUBTYPE:=neon\n</code></pre></div>\n<p>But there are other <code>arm</code> targets that don't use those/fpus.  ALL of these report as <code>arm-openwrt-linux</code> (I need to do more testing, but lets assume for the moment its all <code>-musl</code> as well).</p>\n<p>Could I just check the CPU_SUBTYPE (as given) and add those flags (or convert) as a <code>RUSTFLAGS=\"-Cvfpv3\"</code> (as an example)?</p>",
        "id": 271982579,
        "sender_full_name": "Grommish",
        "timestamp": 1644935766
    },
    {
        "content": "<p>If you enable vfpv3-d16 as target feature in the target spec I think you can use <code>RUSTFLAGS</code>. Not using any vfp target feature changes the abi do that won't work. Switching from vfpv3-d16 to vfpv3 would not change the abi I think. vfpv3-d16 is a subset of vfpv3 I think, so using vfpv3-d16 as default would be fine.</p>",
        "id": 271984165,
        "sender_full_name": "bjorn3",
        "timestamp": 1644936436
    },
    {
        "content": "<p>Just to confirm vfpv3 and neon use the same float abi, right?</p>",
        "id": 271984273,
        "sender_full_name": "bjorn3",
        "timestamp": 1644936476
    },
    {
        "content": "<p>I have no idea.. I'd have to check with someone who knows the arch.  I may just do <code>mips</code> next <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 271987389,
        "sender_full_name": "Grommish",
        "timestamp": 1644937714
    },
    {
        "content": "<p>Odd question.  Would tuple define force a <code>-m64</code> tag for <code>rustc</code>?  <code>mips65-openwrt-linux-musl-gcc</code> doesn't recognize <code>-m64</code>.   Suricata doesn't think it's coming from them. and Openwrt doesn't use rust (yet).</p>",
        "id": 272026297,
        "sender_full_name": "Grommish",
        "timestamp": 1644953621
    },
    {
        "content": "<p>I don't think so. If suricata builds a C library as part of compiling the rust code, it may be the cc crate adding it as linker arg. Looks like it should only do so for x86_64 and powerpc64 though. What is the rustc invocation that fails? You may need to pass <code>-v</code> to cargo to see it.</p>",
        "id": 272039930,
        "sender_full_name": "bjorn3",
        "timestamp": 1644960102
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Grommish/3def1fd0a3c54fdce18a527325b6b187\">https://gist.github.com/Grommish/3def1fd0a3c54fdce18a527325b6b187</a></p>\n<p>Here is the log with the invoke.  I can SEE the <code>-m64</code> call in the command-line, but no one wants to fess up to introducing it, and I'm wondering if it isn't pulling my build machine details (which is a <code>x86_64</code> arch)..</p>",
        "id": 272066803,
        "sender_full_name": "Grommish",
        "timestamp": 1644978785
    },
    {
        "content": "<p>That is doing <code>cargo install cbindgen</code> for the host but you are passing it env vars for the mips64-openwrt-linux-musl. You should probably use <code>CARGO_TARGET_MIPS64_OPENWRT_LINUX_MUSL_LINKER</code> to set the linker and similar for the other toplchain tools. This will male cargo only use it fot mips64-openwrt-linux-musl and not when compiling something for the host.</p>",
        "id": 272078373,
        "sender_full_name": "bjorn3",
        "timestamp": 1644993308
    },
    {
        "content": "<p>I'll try that!  Suricata suggested running <code>cargo build --target</code> in their <code>rust</code> directory, but I still get the same EM:8 error.</p>\n<p>It seems to be the only project I've had issues with so far.  I will set that RUSTFLAG and see what happens!</p>",
        "id": 272079940,
        "sender_full_name": "Grommish",
        "timestamp": 1644995103
    },
    {
        "content": "<p>Ok.. Question in theory time:  If I have an existing <code>rustc</code> and <code>cargo</code> installation,  The installation is <code>x86_64-unknown-linux-gnu/mips64-openwrt-linux-musl</code>.</p>\n<p>I also currently generate <code>dist</code> packages, and then bundle those up into HOST and TARGET installation files </p>\n<div class=\"codehilite\"><pre><span></span><code>        cd $(HOST_BUILD_DIR)/build/dist &amp;&amp; \\\n          $(TAR) -cJf $(DL_DIR)/$(RUST_INSTALL_TARGET_FILENAME) \\\n          rust-*-$(RUSTC_TARGET_ARCH).tar.xz\n\n        cd $(HOST_BUILD_DIR)/build/dist &amp;&amp; \\\n          $(TAR) -cJf $(DL_DIR)/$(RUST_INSTALL_HOST_FILENAME) \\\n          --exclude rust-*-$(RUSTC_TARGET_ARCH).tar.xz *.xz\n</code></pre></div>\n<p>to create:</p>\n<div class=\"codehilite\"><pre><span></span><code>-rw-r--r-- 1 grommish grommish  47560108 Feb 15 04:36 dl/rust-1.58.1-mips64-openwrt-linux-musl-install.tar.xz\n-rw-r--r-- 1 grommish grommish  45914584 Feb 16 17:08 dl/rust-1.58.1-mipsel-openwrt-linux-musl-install.tar.xz\n-rw-r--r-- 1 grommish grommish 548306868 Feb 16 17:15 dl/rust-1.58.1-x86_64-unknown-linux-gnu-install.tar.xz\n-rw-r--r-- 1 grommish grommish 115454104 Jan 31 07:51 dl/rust-1.58.1.tar.xz\n</code></pre></div>\n<p>I extract the HOST and TARGET archives into a temp directory, blow them up and call the <code>install.sh</code> for each:</p>\n<div class=\"codehilite\"><pre><span></span><code>        $(TAR) -C $(RUST_TMP_DIR) -xJf $(DL_DIR)/$(RUST_INSTALL_HOST_FILENAME) &amp;&amp; \\\n        $(TAR) -C $(RUST_TMP_DIR) -xJf $(DL_DIR)/$(RUST_INSTALL_TARGET_FILENAME)\n\n        cd $(RUST_TMP_DIR) &amp;&amp; \\\n          find -iname &quot;*.xz&quot; -exec tar -xJf {} &quot;;&quot; &amp;&amp; \\\n          find ./* -type f -name install.sh -execdir sh {} --prefix=$(STAGING_DIR_HOST) --disable-ldconfig \\;\n</code></pre></div>\n<p>So, I now need to create a toolchain for <code>mips-openwrt-linux-musl</code>.   Currently, I build the whole thing from scratch from the git tarball. (Takes about 4 hours)</p>\n<p>Is there a way to shortcut directly to Stage 2 if I already have an existing rustc/cargo installation?  Is there a hazard or danger in doing it?</p>",
        "id": 272205613,
        "sender_full_name": "Grommish",
        "timestamp": 1645063569
    },
    {
        "content": "<p>You could try adding <code>rustc</code> and <code>cargo</code> to <code>config.toml</code>, set <code>local-rebuild = true</code> there and then use <code>--stage 1</code> I think. Make sure that the rustc and cargo are for the exact same version as the source directory.</p>",
        "id": 272225003,
        "sender_full_name": "bjorn3",
        "timestamp": 1645085178
    },
    {
        "content": "<p>Update time!  So, OpenWrt's implementation of the <code>mips64</code> arch requires Kernel-space FPU Emulation, but, it does work.  I've also created a test-suite that generates a <code>rust-lang</code> cross-compile binary that tests operations like <code>float</code>, along with other basically <code>Hello, World</code> and some terminal tests that I can generate for testers to use on device.</p>\n<p>This means I will need to update the <code>mips64-openwrt-linux-musl</code> PR docs <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>, but then I'll be sending in for <code>mips</code> and <code>mipsel</code> openwrt-linux-musl tuples.  Since I've not had any movement on the existing <code>mips64</code> PR, after I change it, would you be willing to Approve it?</p>",
        "id": 272275843,
        "sender_full_name": "Grommish",
        "timestamp": 1645111761
    },
    {
        "content": "<p>I don't feel comfortable with unilaterally approving a change to a target spec given that it could have subtle side-effects.</p>",
        "id": 272298094,
        "sender_full_name": "bjorn3",
        "timestamp": 1645120637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Fair enough, but, it is a Tier 3 that I'm the maintainer for, if that helps.. No one else is going to be using a xxx_openwrt_linux_musl tuple at this point</p>",
        "id": 272300532,
        "sender_full_name": "Grommish",
        "timestamp": 1645121573
    },
    {
        "content": "<p>Approved.</p>",
        "id": 272312949,
        "sender_full_name": "bjorn3",
        "timestamp": 1645127292
    },
    {
        "content": "<p>Thanks!  Ok, one last attempt at understanding this before I move into <code>arm</code> territory.  </p>\n<p>OpenWrt classifies <code>arm</code>, <code>armv5</code>,<code>armv6</code>, and <code>armv7</code> under the catch-all <code>arm</code>.  In our previous conversation, I asked about compile-time toggling of <code>target-features='-C +vfp4'</code> or <code>target-features='-C +vfp3-neon'</code> or whatever (I don't know much about the <code>arm</code> arch at this point.</p>\n<p>Because I will need access to ALL of the <code>target-features</code> at some point, even if not all at once, and you mentioned turning OFF features that are enabled, could you show me an example of that that looks like?  I'm assuming <code>target-features='-C +vfp4'</code> to <strong>enable</strong> the feature at compile time can't be done unless it was created with it to begin with, correct?  These features aren't compile-time plugin micro-code or something, right?</p>\n<p><code>target-features='-C +vfp4'</code> again?  <code>target-features='-C -vfp4'</code>?  Would you have a better suggestion to splitting things out if <em>everything</em> is under the same tuple <code>arm-openwrt-linux-musleabi</code> or potentially <code>arm-openwrt-linux-musleabihf</code>?</p>",
        "id": 272330291,
        "sender_full_name": "Grommish",
        "timestamp": 1645135204
    },
    {
        "content": "<p>I think having a separate musleabi and musleabihf target would be the best.</p>",
        "id": 272332948,
        "sender_full_name": "bjorn3",
        "timestamp": 1645136519
    },
    {
        "content": "<p>Indeed, but I'm not sure yet how OpenWrt splits it out.  I'm trying to get my head around the scope of the issue and then figure out the worst way to fix it, then make it better using he tools I have available, if that makes sense.</p>",
        "id": 272334549,
        "sender_full_name": "Grommish",
        "timestamp": 1645137424
    },
    {
        "content": "<p>It's been a busy week!</p>\n<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Question.. You mentioned enabling/disabling various <code>target-features</code> when compiling a project (AFTER the toolchain is compiled)..</p>\n<p>For ARMv7, Can I set the following:</p>\n<p><code>features: \"+v7,+vfp3,+vfp4,-d16,-d32,+thumb2,-neon\".to_string(),</code><br>\nand then selectively use the various features (disabling the ones I don't want) so that I can use a single \"Hard-float ARMv7\" tuple that covers multiple instruction sets?</p>",
        "id": 272633700,
        "sender_full_name": "Grommish",
        "timestamp": 1645410861
    },
    {
        "content": "<p>and would I need to also include <code>+vfp3-d32,+vfp4-neon,+neon</code> as well?</p>",
        "id": 272633724,
        "sender_full_name": "Grommish",
        "timestamp": 1645410900
    },
    {
        "content": "<p>No, as the standard library would still be compiled with them enabled. You have to use the common subset if you want a single target.</p>",
        "id": 272656657,
        "sender_full_name": "bjorn3",
        "timestamp": 1645432734
    },
    {
        "content": "<p>If you compile code with +neon, it will include Neon instructions, and you will get a SIGILL or whatever when you hit that on a processor without a Neon unit (and possibly not even a way to decode the instruction).</p>",
        "id": 272665273,
        "sender_full_name": "Jubilee",
        "timestamp": 1645437400
    },
    {
        "content": "<p>Flipping all the hardfloat switches to \"on\" doesn't mean that each function will have a version codegenned for each variant, but rather that LLVM will still compile <strong>one</strong> function and then pick a random hardfloat calling convention for it. (well, a deterministically chosen one, but I assure you it will feel random once you start actually hitting that problem)</p>",
        "id": 272665520,
        "sender_full_name": "Jubilee",
        "timestamp": 1645437522
    },
    {
        "content": "<p>Ok.. I'm still not getting it, so I'll try again with a different way.</p>\n<p>These are <code>ARMv7</code> targets that are covered under a single tuple right now (<code>armv7-openwrt-linux-muslgnueabihf</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>armvirt/32/target.mk:CPU_SUBTYPE:=neon-vfpv4\nat91/sama5/target.mk:CPU_SUBTYPE:=vfpv4\nbcm27xx/bcm2708/target.mk:CPU_SUBTYPE:=vfp\nbcm27xx/bcm2709/target.mk:CPU_SUBTYPE:=neon-vfpv4\nimx/cortexa7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nimx/cortexa9/target.mk:CPU_SUBTYPE:=neon\nipq40xx/Makefile:CPU_SUBTYPE:=neon-vfpv4\nipq806x/Makefile:CPU_SUBTYPE:=neon-vfpv4\nlayerscape/armv7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nmediatek/mt7623/target.mk:CPU_SUBTYPE:=neon-vfpv4\nmvebu/cortexa9/target.mk:CPU_SUBTYPE:=vfpv3-d16\nomap/Makefile:CPU_SUBTYPE:=vfpv3\nsunxi/cortexa7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nsunxi/cortexa8/target.mk:CPU_SUBTYPE:=vfpv3\ntegra/Makefile:CPU_SUBTYPE := vfpv3-d16\nzynq/Makefile:CPU_SUBTYPE:=neon\n</code></pre></div>\n<p>Right now, I'm cloning the existing <code>armv7_unknown_linux_musleabihf</code> tuple and setting the target.option as <code>features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),</code></p>\n<p>It seems the <code>vfp4</code> devices will sort of work with <code>vfp3</code>, but I'm not sure what issues might crop up, if any.  And there is a single device with <code>vfp</code> support, which I doubt will work with <code>vfp3</code> instructions.</p>\n<p>So, given that everything on that list will currently get funneled to a single tuple, what would be the best way to handle the situation?</p>\n<p>I am looking at this from a TOOLCHAIN perspective, rather than what the compiler will be used for down the line (Edit: I realize how silly this sounds, but I'm looking at making installation distro SDK for an arch, rather than a specific \"target\" or specific Machine).  I can probably get away with  using <code>--target-cpu=cortex-a9</code>, etc to RUSTFLAGS on a package compile</p>",
        "id": 272670231,
        "sender_full_name": "Grommish",
        "timestamp": 1645439836
    },
    {
        "content": "<p>Also, welcome <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> to this trainwreck of a fun-fest.  It's a long backstory split over a few threads now, but the long and short of it is that I'm not a coder, I don't know rust,  and am trying to integrate rust into an environment that doesn't always work that way I think it should (housing the rust installation inside the Openwrt fakeroot build system to cross-compile to the target device, without being able to touch anything outside that build root like the host tools themselves)</p>\n<p>So far, I've gotten working installations for mips64, mips, mipsel, aarch64 and armv7 is just proving to be an issue.</p>",
        "id": 272672027,
        "sender_full_name": "Grommish",
        "timestamp": 1645440809
    },
    {
        "content": "<p>PowerPC64 has a bug in <code>compiler/rustc_target/src/abi/call/powerpc64.rs</code></p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn compute_abi_info&lt;&#39;a, Ty, C&gt;(cx: &amp;C, fn_abi: &amp;mut FnAbi&lt;&#39;a, Ty&gt;)\nwhere\n    Ty: TyAbiInterface&lt;&#39;a, C&gt; + Copy,\n    C: HasDataLayout + HasTargetSpec,\n{\n    let abi = if cx.target_spec().env == &quot;musl&quot; {\n        ELFv2\n    } else {\n        match cx.data_layout().endian {\n            Endian::Big =&gt; ELFv1,\n            Endian::Little =&gt; ELFv2,\n        }\n    };\n\n    if !fn_abi.ret.is_ignore() {\n        classify_ret(cx, &amp;mut fn_abi.ret, abi);\n    }\n\n    for arg in &amp;mut fn_abi.args {\n        if arg.is_ignore() {\n            continue;\n        }\n        classify_arg(cx, arg, abi);\n    }\n}\n</code></pre></div>\n<p>ELF_V2 doesn't automatically mean little_endian (<a href=\"https://github.com/openssl/openssl/issues/8858\">https://github.com/openssl/openssl/issues/8858</a>)  As a PowerPC64-musl target, this breaks my packages with <code>ABI version 1 is not compatible with ABI version 2 output</code> errors, as the ARCH is BE</p>\n<p>Suggestions on how to fix it?  I'm not competent enough to screw around with that core system, and I can report it, but I'm secretely hoping someone has the knowledge for a more direct fix</p>",
        "id": 272739428,
        "sender_full_name": "Grommish",
        "timestamp": 1645481233
    },
    {
        "content": "<p>Oof.</p>",
        "id": 272739522,
        "sender_full_name": "Jubilee",
        "timestamp": 1645481305
    },
    {
        "content": "<p>I never said I wasn't a fun time :D  On the good side, look at all the really niche edge-cases I get to test :D</p>",
        "id": 272739554,
        "sender_full_name": "Grommish",
        "timestamp": 1645481359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272670231\">said</a>:</p>\n<blockquote>\n<p>Ok.. I'm still not getting it, so I'll try again with a different way.</p>\n<p>These are <code>ARMv7</code> targets that are covered under a single tuple right now (<code>armv7-openwrt-linux-muslgnueabihf</code>)</p>\n<div class=\"codehilite\"><pre><span></span><code>armvirt/32/target.mk:CPU_SUBTYPE:=neon-vfpv4\nat91/sama5/target.mk:CPU_SUBTYPE:=vfpv4\nbcm27xx/bcm2708/target.mk:CPU_SUBTYPE:=vfp\nbcm27xx/bcm2709/target.mk:CPU_SUBTYPE:=neon-vfpv4\nimx/cortexa7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nimx/cortexa9/target.mk:CPU_SUBTYPE:=neon\nipq40xx/Makefile:CPU_SUBTYPE:=neon-vfpv4\nipq806x/Makefile:CPU_SUBTYPE:=neon-vfpv4\nlayerscape/armv7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nmediatek/mt7623/target.mk:CPU_SUBTYPE:=neon-vfpv4\nmvebu/cortexa9/target.mk:CPU_SUBTYPE:=vfpv3-d16\nomap/Makefile:CPU_SUBTYPE:=vfpv3\nsunxi/cortexa7/target.mk:CPU_SUBTYPE:=neon-vfpv4\nsunxi/cortexa8/target.mk:CPU_SUBTYPE:=vfpv3\ntegra/Makefile:CPU_SUBTYPE := vfpv3-d16\nzynq/Makefile:CPU_SUBTYPE:=neon\n</code></pre></div>\n<p>Right now, I'm cloning the existing <code>armv7_unknown_linux_musleabihf</code> tuple and setting the target.option as <code>features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),</code></p>\n<p>It seems the <code>vfp4</code> devices will sort of work with <code>vfp3</code>, but I'm not sure what issues might crop up, if any.  And there is a single device with <code>vfp</code> support, which I doubt will work with <code>vfp3</code> instructions.</p>\n<p>So, given that everything on that list will currently get funneled to a single tuple, what would be the best way to handle the situation?</p>\n<p>I am looking at this from a TOOLCHAIN perspective, rather than what the compiler will be used for down the line (Edit: I realize how silly this sounds, but I'm looking at making installation distro SDK for an arch, rather than a specific \"target\" or specific Machine).  I can probably get away with  using <code>--target-cpu=cortex-a9</code>, etc to RUSTFLAGS on a package compile</p>\n</blockquote>\n<p>Okay, so, currently, we have a few <code>thumbv7neon</code> targets. That's Armv7 + Neon + Thumb instructions on. Anything that has \"Neon\" as part of its FP, and that can run Thumb-2 instructions, which is I think all of those?, can use a target configured like that.</p>",
        "id": 272739755,
        "sender_full_name": "Jubilee",
        "timestamp": 1645481554
    },
    {
        "content": "<p>Anything that <strong>doesn't</strong> have Neon should use a separate target tuple for the VFP3 stuff.</p>",
        "id": 272739921,
        "sender_full_name": "Jubilee",
        "timestamp": 1645481701
    },
    {
        "content": "<p>As you have at least one target that has Neon without VFP and one target that has VFP3 without Neon, I believe you are \"out of luck\", as they say.<br>\n<code>bcm27xx/bcm2708/target.mk:CPU_SUBTYPE:=vfp</code> This uhm...  has massively lower capabilities than the rest! :D<br>\nI think this is actually a deprecated VFP unit, in Arm's eyes.</p>",
        "id": 272740138,
        "sender_full_name": "Jubilee",
        "timestamp": 1645481908
    },
    {
        "content": "<p>Like IIRC all of the VFP units are replaced by Neon going forward but this is older than old. I am not sure I believe that its VFP version is being reported correctly.</p>",
        "id": 272740185,
        "sender_full_name": "Jubilee",
        "timestamp": 1645481977
    },
    {
        "content": "<p>I'm sure it's heavily outdated, however, it's still a supported SOC and device hehe</p>",
        "id": 272740531,
        "sender_full_name": "Grommish",
        "timestamp": 1645482292
    },
    {
        "content": "<p>related: <a href=\"https://github.com/rust-lang/rust/issues/60617\">https://github.com/rust-lang/rust/issues/60617</a></p>",
        "id": 272740545,
        "sender_full_name": "lyinch",
        "timestamp": 1645482310
    },
    {
        "content": "<p><code>bcm27xx</code> is a very very popular router target still..  That's your RaspPi4b SoC</p>",
        "id": 272740562,
        "sender_full_name": "Grommish",
        "timestamp": 1645482344
    },
    {
        "content": "<p>...Oh.</p>",
        "id": 272740618,
        "sender_full_name": "Jubilee",
        "timestamp": 1645482369
    },
    {
        "content": "<p>RaspPi4B can handle aarch64 code.</p>",
        "id": 272740626,
        "sender_full_name": "Jubilee",
        "timestamp": 1645482383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> Well.. That's depressing.</p>",
        "id": 272740629,
        "sender_full_name": "Grommish",
        "timestamp": 1645482387
    },
    {
        "content": "<p>It's Neon enabled.</p>",
        "id": 272740635,
        "sender_full_name": "Jubilee",
        "timestamp": 1645482396
    },
    {
        "content": "<p>That must be why the 2709 is so very different. Yeah.</p>",
        "id": 272740677,
        "sender_full_name": "Jubilee",
        "timestamp": 1645482454
    },
    {
        "content": "<p>looks like it's implemented: <a href=\"https://github.com/rust-lang/rust/pull/86922\">https://github.com/rust-lang/rust/pull/86922</a> so <code>target_abi</code> could be used directly instead of detecting it via endianess</p>",
        "id": 272740792,
        "sender_full_name": "lyinch",
        "timestamp": 1645482566
    },
    {
        "content": "<p>I just received this error on a 1.58.1 build</p>",
        "id": 272740880,
        "sender_full_name": "Grommish",
        "timestamp": 1645482615
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/abi/call/powerpc64.rs#L125\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/abi/call/powerpc64.rs#L125</a></p>",
        "id": 272740891,
        "sender_full_name": "Grommish",
        "timestamp": 1645482630
    },
    {
        "content": "<p>It isn't fixed :D</p>",
        "id": 272740894,
        "sender_full_name": "Grommish",
        "timestamp": 1645482634
    },
    {
        "content": "<p>As fro setting the target-abi, I don't mind doing that but it kinda screws everyone else down the line who isn't making their own tuples anyway</p>",
        "id": 272740928,
        "sender_full_name": "Grommish",
        "timestamp": 1645482674
    },
    {
        "content": "<p>I linked to the PR for the feature <code>target_abi</code> which might be used instead of the current check. But I don't know enough Rust internals for this</p>",
        "id": 272740948,
        "sender_full_name": "lyinch",
        "timestamp": 1645482701
    },
    {
        "content": "<p>The absolute earliest Raspberry Pi SoCs use at least a VFPv2 unit and are Armv6 targets.</p>",
        "id": 272740956,
        "sender_full_name": "Jubilee",
        "timestamp": 1645482709
    },
    {
        "content": "<p>Recent ones are generally AArch64 chips that only run Armv7 code in compatibility mode.</p>",
        "id": 272741027,
        "sender_full_name": "Jubilee",
        "timestamp": 1645482754
    },
    {
        "content": "<p>did you already open an issue about the abi problem?</p>",
        "id": 272741071,
        "sender_full_name": "lyinch",
        "timestamp": 1645482833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    Target {\n        llvm_target: &quot;powerpc64-unknown-linux-musl&quot;.to_string(),\n        pointer_width: 64,\n        data_layout: &quot;E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512&quot;.to_string(),\n        arch: &quot;powerpc64&quot;.to_string(),\n       abi: ???\n        options: TargetOptions { endian: Endian::Big, mcount: &quot;_mcount&quot;.to_string(), ..base },\n    }\n</code></pre></div>\n<p>What would I put in <code>abi</code>?</p>",
        "id": 272741074,
        "sender_full_name": "Grommish",
        "timestamp": 1645482836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Yes, We support the arm11j whatever SoC as well</p>",
        "id": 272741129,
        "sender_full_name": "Grommish",
        "timestamp": 1645482862
    },
    {
        "content": "<p>Yeah, I figured. That has to be a separate tuple from Armv7 tho'.</p>",
        "id": 272741146,
        "sender_full_name": "Jubilee",
        "timestamp": 1645482888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> Not yet, I was waiting to see if <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> had a suggestion around it, since often things that are issues \"for me\" aren't issues for anyone else because of the circumstances I'm under.  I don't mind opening a issue/bug though</p>",
        "id": 272741184,
        "sender_full_name": "Grommish",
        "timestamp": 1645482935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Yes, I plan on just leaving them as <code>arm-openwrt-linux-muslgnueabi</code> since we don't include prior to ARMv5 at this point</p>",
        "id": 272741265,
        "sender_full_name": "Grommish",
        "timestamp": 1645482988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> and since I'm having to create the tuple anyway, I don't know if a rust-lang change is actually appropriate.. I know the <code>linux-musl</code> define is going to change to remove static-linking by default, probably because MUSL is dynamically linked and no one checked it</p>",
        "id": 272741351,
        "sender_full_name": "Grommish",
        "timestamp": 1645483073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> implemented the PR to add target abi support, maybe he has an idea (<a href=\"https://github.com/rust-lang/rust/issues/86922\">#86922</a>)</p>",
        "id": 272741394,
        "sender_full_name": "lyinch",
        "timestamp": 1645483086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272741027\">said</a>:</p>\n<blockquote>\n<p>Recent ones are generally AArch64 chips that only run Armv7 code in compatibility mode.</p>\n</blockquote>\n<p>The RPi 4 in particular needs to be in A64 mode because some of them come with 8GB RAM, and then you run into memory addressing limits unnecessarily. I think all RPis that can even hit 4GB RAM at all are also AArch64 chips.</p>",
        "id": 272741450,
        "sender_full_name": "Jubilee",
        "timestamp": 1645483151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> Well, I can just override the tuple, but I'm not sure what to set in the <code>abi:</code> field</p>",
        "id": 272741528,
        "sender_full_name": "Grommish",
        "timestamp": 1645483203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272741351\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479478\">lyinch</span> and since I'm having to create the tuple anyway, I don't know if a rust-lang change is actually appropriate.. I know the <code>linux-musl</code> define is going to change to remove static-linking by default, probably because MUSL is dynamically linked and no one checked it</p>\n</blockquote>\n<p>Yeah, the initial landing of the musl targets in rust-lang was under the misconception of the \"musl is only about static linking\" meme.</p>",
        "id": 272741581,
        "sender_full_name": "Jubilee",
        "timestamp": 1645483260
    },
    {
        "content": "<p>and while this would effect \"Any PPC64 ELFv2 BigEndian\" target, are there any outside of my Openwrt targets?  I don't know the answers to these, only that it doesn't seem new</p>",
        "id": 272741586,
        "sender_full_name": "Grommish",
        "timestamp": 1645483261
    },
    {
        "content": "<p>as opposed to \"it is <strong>better at</strong> it, but still used dynamically most days.\"</p>",
        "id": 272741618,
        "sender_full_name": "Jubilee",
        "timestamp": 1645483290
    },
    {
        "content": "<p>LLVM issues with supported arches doesn't help</p>",
        "id": 272741636,
        "sender_full_name": "Grommish",
        "timestamp": 1645483320
    },
    {
        "content": "<p>I implemented <code>target_abi</code> support, but I'm definitely not an expert on the ABIs of PPC targets.</p>",
        "id": 272741687,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645483342
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Hi.. This makes bad assumptions. <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/abi/call/powerpc64.rs#L125\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/abi/call/powerpc64.rs#L125</a></p>",
        "id": 272741730,
        "sender_full_name": "Grommish",
        "timestamp": 1645483395
    },
    {
        "content": "<p>MUSL PPC64 is BE and ELF_v2, which causes ABI errors</p>",
        "id": 272741745,
        "sender_full_name": "Grommish",
        "timestamp": 1645483418
    },
    {
        "content": "<p>Oh I know who is actually okay at PPC ABIs. :D Hey <span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span></p>",
        "id": 272741762,
        "sender_full_name": "Jubilee",
        "timestamp": 1645483439
    },
    {
        "content": "<p>My use case is so edge and niche though, I'm not sure if it's a wide-spread issue or a \"my issue that is now an issue\"</p>",
        "id": 272741805,
        "sender_full_name": "Grommish",
        "timestamp": 1645483449
    },
    {
        "content": "<p>If you could tell me what to put fo the <code>abi:</code> I can forget this ever came up :D  I see all the \"You just put <code>target-abi</code> but never say what to actually put for it</p>",
        "id": 272741875,
        "sender_full_name": "Grommish",
        "timestamp": 1645483533
    },
    {
        "content": "<p>BTW, this tuple is going to be <code>powerpc64-openwrt-linux-musl</code>, so this wasn't covered in <a href=\"https://github.com/rust-lang/rust/pull/86922\">https://github.com/rust-lang/rust/pull/86922</a></p>",
        "id": 272741932,
        "sender_full_name": "Grommish",
        "timestamp": 1645483580
    },
    {
        "content": "<p>Also, if it's helpful, all my code is based on the GH Repo from HEAD <code>db9d1b20bba1968c1ec1fc49616d4742c1725b4b</code></p>",
        "id": 272742440,
        "sender_full_name": "Grommish",
        "timestamp": 1645484085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272670231\">said</a>:</p>\n<blockquote>\n<p>Ok.. I'm still not getting it, so I'll try again with a different way.</p>\n<p>These are <code>ARMv7</code> targets that are covered under a single tuple right now (<code>armv7-openwrt-linux-muslgnueabihf</code>)</p>\n<p>&lt;snipped&gt;</p>\n<p>Right now, I'm cloning the existing <code>armv7_unknown_linux_musleabihf</code> tuple and setting the target.option as <code>features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),</code></p>\n<p>It seems the <code>vfp4</code> devices will sort of work with <code>vfp3</code>, but I'm not sure what issues might crop up, if any.  And there is a single device with <code>vfp</code> support, which I doubt will work with <code>vfp3</code> instructions.</p>\n<p>So, given that everything on that list will currently get funneled to a single tuple, what would be the best way to handle the situation?</p>\n</blockquote>\n<p>So yeah, I thiiiink, based on what I am seeing, you would ideally have different libstds built for </p>\n<ul>\n<li>armv6  with VFPv2</li>\n<li>armv7 with VFPv3</li>\n<li>armv7 with Neon (probably <code>thumbv7neon</code>?)</li>\n<li>aarch64</li>\n</ul>\n<p>And you should try to steer the Raspi4 users to the last one.<br>\nHowever, for just building and running the <strong>compiler</strong> itself, one built for the Armv6 + VFP2 target would technically keep running on all the later targets, I think.</p>",
        "id": 272742552,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484173
    },
    {
        "content": "<p>Except that the ones that actually have a 64-bit address space should be allowed to use that fact.</p>",
        "id": 272742615,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484250
    },
    {
        "content": "<p><code>aarch64</code> we split out separately and I've got no issues with it (Thankfully!)..</p>\n<p>If I have a <code>armv6+vfp2</code> it would play to the least-common instruction set, and when talking of these embedded devices, any performance left is physically painful for some folks :D</p>",
        "id": 272742633,
        "sender_full_name": "Grommish",
        "timestamp": 1645484273
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 272742680,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484287
    },
    {
        "content": "<p>the main dealio is that when libstd is built, code inside the resulting artifact (libstd) is included directly-ish into the final binary of executables built with the Rust toolchain.</p>",
        "id": 272742710,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484330
    },
    {
        "content": "<p>So, I need a <code>armv7_sf</code>, <code>armv7+vfp3</code> <code>armv7+vfp4</code>..  The targets that are <code>vfp4-neon</code> for example, how woudl those go?</p>",
        "id": 272742741,
        "sender_full_name": "Grommish",
        "timestamp": 1645484380
    },
    {
        "content": "<p>they should just use Neon.</p>",
        "id": 272742750,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484394
    },
    {
        "content": "<p>for the powerpc64 v2 ABI stuff, ABI can vary independently of LE/BE afaict, what we have is a decent default, but abi should be an independent option in the target specification</p>",
        "id": 272742876,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645484436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> Fair enough, how would I set ELF_v2 for PP64_BE in my .rs tuple define?</p>",
        "id": 272742895,
        "sender_full_name": "Grommish",
        "timestamp": 1645484468
    },
    {
        "content": "<p><code>compiler/rustc_target/src/spec/powerpc64_openwrt_linux_musl.rs</code></p>\n<div class=\"codehilite\"><pre><span></span><code>use crate::abi::Endian;\nuse crate::spec::{LinkerFlavor, Target, TargetOptions};\n\npub fn target() -&gt; Target {\n    let mut base = super::linux_musl_base::opts();\n    base.cpu = &quot;ppc64&quot;.to_string();\n    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(&quot;-m64&quot;.to_string());\n    base.max_atomic_width = Some(64);\n\n    Target {\n        llvm_target: &quot;powerpc64-unknown-linux-musl&quot;.to_string(),\n        pointer_width: 64,\n        data_layout: &quot;E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512&quot;.to_string(),\n        arch: &quot;powerpc64&quot;.to_string(),\n        options: TargetOptions { endian: Endian::Big, mcount: &quot;_mcount&quot;.to_string(), ..base },\n    }\n}\n</code></pre></div>\n<p><code>abi:</code> under <code>Target { }</code>, but what would I put there?</p>",
        "id": 272743005,
        "sender_full_name": "Grommish",
        "timestamp": 1645484579
    },
    {
        "content": "<p>i'd guess you'd need to modify rustc to take the requested abi into account rather than assuming the default is what you always want...i'm not super familiar with that part of rustc's internals, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> might be able to help</p>",
        "id": 272743031,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645484619
    },
    {
        "content": "<p>and according to that list, only</p>\n<blockquote>\n<p><code>at91/sama5/target.mk:CPU_SUBTYPE:=vfpv4</code></p>\n</blockquote>\n<p>has VFPv4 without Neon.</p>",
        "id": 272743036,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> Well, the issue is that rust makes false assumptions in <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/abi/call/powerpc64.rs#L125\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/abi/call/powerpc64.rs#L125</a></p>",
        "id": 272743127,
        "sender_full_name": "Grommish",
        "timestamp": 1645484686
    },
    {
        "content": "<p>Rust assumes ALL ELF_v1 is BE and ELF_v2 is ALWAYS LE</p>",
        "id": 272743153,
        "sender_full_name": "Grommish",
        "timestamp": 1645484708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272743031\">said</a>:</p>\n<blockquote>\n<p>i'd guess you'd need to modify rustc to take the requested abi into account rather than assuming the default is what you always want...i'm not super familiar with that part of rustc's internals, <span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> might be able to help</p>\n</blockquote>\n<p>I'm not either. I do, in general, want to support more parameterization of targets. But again, I'm not familiar with the constraints on PPC targets here.</p>",
        "id": 272743155,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645484717
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 272743160,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484722
    },
    {
        "content": "<p>Which is not correct and apparently hasn't been for a while</p>",
        "id": 272743161,
        "sender_full_name": "Grommish",
        "timestamp": 1645484724
    },
    {
        "content": "<p>MUSL Targedts use ELF_v2, even when BE</p>",
        "id": 272743177,
        "sender_full_name": "Grommish",
        "timestamp": 1645484753
    },
    {
        "content": "<blockquote>\n<p>vfpv3-d16</p>\n</blockquote>\n<p>oh, and this apparently is actually less than VFPv3, lovely, ha.</p>",
        "id": 272743241,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> That does sound like it may be an incorrect assumption. But I'm not sure that needs to be keyed off of target_abi; that may just be a separate piece of information that needs tracking for a target.</p>",
        "id": 272743261,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645484799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Just think, in the future, I fully want to make rustc/cargo natively avail to those targets if possible :D</p>",
        "id": 272743266,
        "sender_full_name": "Grommish",
        "timestamp": 1645484807
    },
    {
        "content": "<p><code>-d16</code> means \"16 registers\"</p>",
        "id": 272743267,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> And, again, I dunno if it's limited to my weird edge-case.</p>",
        "id": 272743280,
        "sender_full_name": "Grommish",
        "timestamp": 1645484834
    },
    {
        "content": "<p>Fortunately for the most part, the Rust toolchain itself doesn't actually use the VFP unit.</p>",
        "id": 272743293,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484848
    },
    {
        "content": "<p>imho it should be good enough to just allow the target spec to set whatever ppc abi it pleases, if the user requests a broken combination, it's on them...we can add checking but idk that we need it</p>",
        "id": 272743302,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645484862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Yeah, but I found out the hard way for my mips64 toolchian, if it was't +soft-float in the toolchain, it didn't know what to do with <code>-msoft-float</code> at compile time.. SIGILL every time</p>",
        "id": 272743359,
        "sender_full_name": "Grommish",
        "timestamp": 1645484888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272743280\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> And, again, I dunno if it's limited to my weird edge-case.</p>\n</blockquote>\n<p>So in general, I <em>think</em> a target needs to always have the same endianness, and if you want a different endianness that needs to be a different target. In general, much broader than just Rust, I don't think toolchains handle targets that can select either endianness.</p>",
        "id": 272743379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645484926
    },
    {
        "content": "<p>You need to disable hard floats when you enable soft floats.</p>",
        "id": 272743384,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Let me mention, I'm not a dev, I'm not a programmer and I don't know rust.  I'm also doing this in a way that rust never intended or supports</p>",
        "id": 272743386,
        "sender_full_name": "Grommish",
        "timestamp": 1645484937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> my mips64 tuples don't have FPU.. Octeon+ arch tree</p>",
        "id": 272743418,
        "sender_full_name": "Grommish",
        "timestamp": 1645484966
    },
    {
        "content": "<p><em>headtilt</em></p>",
        "id": 272743444,
        "sender_full_name": "Jubilee",
        "timestamp": 1645484999
    },
    {
        "content": "<p>And, again, I don't mind setting it in the custom tuple I'm goign to upstreaming, I just am not sure what to put in it..</p>",
        "id": 272743450,
        "sender_full_name": "Grommish",
        "timestamp": 1645485001
    },
    {
        "content": "<p>ok, i can answer questions but don't have time rn to make a pull request...</p>",
        "id": 272743568,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645485045
    },
    {
        "content": "<p>Cavium Octeon+ didn't have a FPU.. Octeon2/3 do, but we Least-common like Rust does for device trees, so they use -msoft-float</p>",
        "id": 272743572,
        "sender_full_name": "Grommish",
        "timestamp": 1645485047
    },
    {
        "content": "<p>(and have to have kernel MIP_FPU emulation enabled or SIGILL)</p>",
        "id": 272743614,
        "sender_full_name": "Grommish",
        "timestamp": 1645485079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229517\">@Jacob Lifshay</span> Deal.. What would I put in the my tuple define to set ELF_v2 for that target</p>",
        "id": 272743648,
        "sender_full_name": "Grommish",
        "timestamp": 1645485109
    },
    {
        "content": "<p>why can't he (she?) set <code>target_abi=ELFvX</code> and then we just match on <code>cx.target_spec().abi</code> if it is not empty, otherwise we fallback to the endianess</p>",
        "id": 272743706,
        "sender_full_name": "lyinch",
        "timestamp": 1645485146
    },
    {
        "content": "<p>Hmm. Unfortunately I don't know that that's possible.</p>",
        "id": 272743709,
        "sender_full_name": "Jubilee",
        "timestamp": 1645485150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> 1) There doesn't currently appear to be a way to do that in a target definition, 2) there seems to already be a special case for musl in the exact code you pointed to?</p>",
        "id": 272743711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> target_abi has multiple purposes, and I'm not sure if \"ELVvX\" is an ABI that users' Rust code needs to key off of, assuming I'm understanding what PPC uses that for correctly.</p>",
        "id": 272743735,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Because changing the /src/abi/call/powerpc64.rs file means changing the rust CORE.rather than just changing my tuple</p>",
        "id": 272743739,
        "sender_full_name": "Grommish",
        "timestamp": 1645485194
    },
    {
        "content": "<p>and, if you thnk you're not qualified for it, I certainly am not</p>",
        "id": 272743754,
        "sender_full_name": "Grommish",
        "timestamp": 1645485221
    },
    {
        "content": "<p>I don't mind screwing with my Tier 3 tuple that no one uses but me right now</p>",
        "id": 272743761,
        "sender_full_name": "Grommish",
        "timestamp": 1645485239
    },
    {
        "content": "<p>\"qualified' isn't a binary here. You clearly know more about PPC than I do. :)</p>",
        "id": 272743778,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485242
    },
    {
        "content": "<p>the elf versions are the versions of the specs that define the ABI, it needs additional info tho, such as BE/LE 32/64-bit</p>",
        "id": 272743811,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1645485267
    },
    {
        "content": "<p>Never used it  :(  But I found similar issues with like openssl and went looking in the source</p>",
        "id": 272743818,
        "sender_full_name": "Grommish",
        "timestamp": 1645485282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> If I understand correctly, you're saying that PowerPC musl targets always use ELFv2, correct?</p>",
        "id": 272743843,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485307
    },
    {
        "content": "<p>Regardless of endianness.</p>",
        "id": 272743867,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://github.com/rust-lang/rust/issues/60617\">https://github.com/rust-lang/rust/issues/60617</a> and <a href=\"https://github.com/openssl/openssl/issues/8858\">https://github.com/openssl/openssl/issues/8858</a></p>",
        "id": 272743895,
        "sender_full_name": "Grommish",
        "timestamp": 1645485357
    },
    {
        "content": "<p>And in my specific case: <code>ABI version 1 is not compatible with ABI version 2 output</code></p>",
        "id": 272743974,
        "sender_full_name": "Grommish",
        "timestamp": 1645485398
    },
    {
        "content": "<p>Is what started this journey</p>",
        "id": 272743984,
        "sender_full_name": "Grommish",
        "timestamp": 1645485409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229517\">Jacob Lifshay</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272743811\">said</a>:</p>\n<blockquote>\n<p>the elf versions are the versions of the specs that define the ABI, it needs additional info tho, such as BE/LE 32/64-bit</p>\n</blockquote>\n<p>what is the correct way to figure out the ELF version besides providing it in the <code>target_abi</code> string?</p>",
        "id": 272743994,
        "sender_full_name": "lyinch",
        "timestamp": 1645485423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> That might work when using rustc/cargo to build a crossed package, but only if rustc/cargo knows about it, afaik.. and in this case, it's set by the backend to always be one way</p>",
        "id": 272744093,
        "sender_full_name": "Grommish",
        "timestamp": 1645485514
    },
    {
        "content": "<p>in this case, I'm building rustc/cargo itself (stage0/1/2) for the host and target</p>",
        "id": 272744113,
        "sender_full_name": "Grommish",
        "timestamp": 1645485547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272743974\">said</a>:</p>\n<blockquote>\n<p>And in my specific case: <code>ABI version 1 is not compatible with ABI version 2 output</code></p>\n</blockquote>\n<p>In your specific case, which thing is using ABI v1 and which is using v2? OpenSSL's asm is using v1, and you want it to be using v2?</p>",
        "id": 272744133,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485583
    },
    {
        "content": "<p>I'm hoping to set <code>--target-cpu='cortext-a9'</code> for example and set it do it's thing</p>",
        "id": 272744136,
        "sender_full_name": "Grommish",
        "timestamp": 1645485595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Correct, I need to be using ELF_v2 as a PowerPC64be MUSL target</p>",
        "id": 272744196,
        "sender_full_name": "Grommish",
        "timestamp": 1645485630
    },
    {
        "content": "<p>AFAICT, OpenSSL now supports that: <a href=\"https://github.com/openssl/openssl/pull/8883\">https://github.com/openssl/openssl/pull/8883</a></p>",
        "id": 272744222,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485688
    },
    {
        "content": "<p>If OpenSSL is still generating and using v1 asm on your target, it may just be that OpenSSL's configure script needs an update, or that you need to pass something specific to it to make it handle this case?</p>",
        "id": 272744293,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485753
    },
    {
        "content": "<p>This isn't OpenSSL</p>",
        "id": 272744302,
        "sender_full_name": "Grommish",
        "timestamp": 1645485761
    },
    {
        "content": "<p>I used OpenSSL as a reason Rust's internal logic seemed to be incorrect</p>",
        "id": 272744316,
        "sender_full_name": "Grommish",
        "timestamp": 1645485781
    },
    {
        "content": "<p>wait, you're saying that you want to compile with target musl but it's using ELFv1 instead of ELFv2?</p>",
        "id": 272744333,
        "sender_full_name": "lyinch",
        "timestamp": 1645485812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> I'm acknowledging that Rust's logic seems to be incorrect. I'm trying to understand what practical issue you're observing. What piece of software are you attempting to compile that's running into an ABI compatibility problem?</p>",
        "id": 272744349,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://github.com/neg2led/float_test\">https://github.com/neg2led/float_test</a> THis is the package</p>",
        "id": 272744388,
        "sender_full_name": "Grommish",
        "timestamp": 1645485846
    },
    {
        "content": "<p>Its my test package I use to generate stand-alone rust binary that tests for float for various targets</p>",
        "id": 272744410,
        "sender_full_name": "Grommish",
        "timestamp": 1645485876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> Nah, other way.. I need it to run ELFv2 and it's forcing ELFv1</p>",
        "id": 272744435,
        "sender_full_name": "Grommish",
        "timestamp": 1645485915
    },
    {
        "content": "<p>What exact target are you using?</p>",
        "id": 272744449,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645485941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272744435\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479478\">lyinch</span> Nah, other way.. I need it to run ELFv2 and it's forcing ELFv1</p>\n</blockquote>\n<p>but with musl? did you set <code>target_env=musl</code> ?</p>",
        "id": 272744461,
        "sender_full_name": "lyinch",
        "timestamp": 1645485960
    },
    {
        "content": "<p><code>powerpc64-openwrt-linux-musl</code></p>\n<div class=\"codehilite\"><pre><span></span><code>use crate::abi::Endian;\nuse crate::spec::{LinkerFlavor, Target, TargetOptions};\n\npub fn target() -&gt; Target {\n    let mut base = super::linux_musl_base::opts();\n    base.cpu = &quot;ppc64&quot;.to_string();\n    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(&quot;-m64&quot;.to_string());\n    base.max_atomic_width = Some(64);\n\n    Target {\n        llvm_target: &quot;powerpc64-unknown-linux-musl&quot;.to_string(),\n        pointer_width: 64,\n        data_layout: &quot;E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512&quot;.to_string(),\n        arch: &quot;powerpc64&quot;.to_string(),\n        options: TargetOptions { endian: Endian::Big, mcount: &quot;_mcount&quot;.to_string(), ..base },\n    }\n}\n</code></pre></div>",
        "id": 272744505,
        "sender_full_name": "Grommish",
        "timestamp": 1645485975
    },
    {
        "content": "<p>Which is a clone right now of the <code>unknown</code> tuple</p>",
        "id": 272744519,
        "sender_full_name": "Grommish",
        "timestamp": 1645485995
    },
    {
        "content": "<p>That target should use ELFv2 by default, because it's a musl target, and the exact code you linked to makes Rust use ELFv2 for musl targets.</p>",
        "id": 272744531,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486012
    },
    {
        "content": "<p>So I don't mind setting an abi for Elfv2 in there, I just don't know how :)</p>",
        "id": 272744533,
        "sender_full_name": "Grommish",
        "timestamp": 1645486012
    },
    {
        "content": "<p>Then it's an issue elsewhere <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Which is less fun because it isn't something I can readily point to</p>",
        "id": 272744604,
        "sender_full_name": "Grommish",
        "timestamp": 1645486082
    },
    {
        "content": "<p>When I make my tuples I just copy the internal one to the new name as a base.. Thus far, I've not changed anything about my powerpc64 tuple</p>",
        "id": 272744646,
        "sender_full_name": "Grommish",
        "timestamp": 1645486111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> The target you just pasted above uses <code>linux_musl_base</code>, which in turn sets env to \"musl\", which will cause Rust to use ELFv2.</p>",
        "id": 272744671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486130
    },
    {
        "content": "<p>And yes, it doesn't  Let me get a build log for you</p>",
        "id": 272744680,
        "sender_full_name": "Grommish",
        "timestamp": 1645486147
    },
    {
        "content": "<p>(I agree that that isn't always the right assumption, but it <em>is</em> correct for your case, so the problem isn't there.)</p>",
        "id": 272744681,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486147
    },
    {
        "content": "<p>just to make sure, can  you add <code>env: \"musl\".to_string()</code> to your <code>TargetOptions</code> ?</p>",
        "id": 272744799,
        "sender_full_name": "lyinch",
        "timestamp": 1645486260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479478\">lyinch</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272744799\">said</a>:</p>\n<blockquote>\n<p>just to make sure, can  you add <code>env: \"musl\".to_string()</code> to your <code>TargetOptions</code> ?</p>\n</blockquote>\n<p>That's already part of <code>linux_musl_base</code>.</p>",
        "id": 272744813,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486274
    },
    {
        "content": "<p><code>    base.env = \"musl\".to_string();</code> Yeah, it's in the <a href=\"http://linux_musl_base.rs\">linux_musl_base.rs</a></p>",
        "id": 272744832,
        "sender_full_name": "Grommish",
        "timestamp": 1645486309
    },
    {
        "content": "<p>this shouldn't take but a minute</p>",
        "id": 272744880,
        "sender_full_name": "Grommish",
        "timestamp": 1645486335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> This isn't a problem with target definitions or target ABI, as far as I can tell. Rust doesn't necessarily need a way to expose <em>to Rust code via <code>cfg</code></em> whether a PowerPC target is using ELFv1 or ELFv2, unless Rust code needs to do something differently in those two cases, and it doesn't <em>sound</em> like that's the case. I'm not the right person to debug the build failure of some other piece of software that's using ELFv1 when you want it to be using ELFv2.</p>",
        "id": 272744888,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486349
    },
    {
        "content": "<p>It <em>might</em> make sense to expose that as <code>target_abi</code>; whether that's the correct thing to do or not would take a detailed conversation with a PowerPC expert. But that wouldn't solve your problem in any case.</p>",
        "id": 272744910,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486387
    },
    {
        "content": "<p>Well, I figured you'd like to see the actual rustc invoke.. but I appreciate your help with this</p>",
        "id": 272744914,
        "sender_full_name": "Grommish",
        "timestamp": 1645486394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> I'd be happy to see the actual build log insofar as I'm curious to confirm where the error is, but it sounds like rust is using v2, something else is using v1, and the error Rust is reporting is that it's expecting the something else to be using v2, which means the problem seems to be in the something else.</p>",
        "id": 272744966,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486448
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/8zMCSvJqi43KVdros0WNWGV9/float_ppc.log\">float_ppc.log</a></p>",
        "id": 272744976,
        "sender_full_name": "Grommish",
        "timestamp": 1645486463
    },
    {
        "content": "<p>This package has successfully compiled and run on mips64, mips, mipsel, aarch64, armv7-sf and armv7-hf, though I know armv7 will continue to cause me headaches</p>",
        "id": 272745165,
        "sender_full_name": "Grommish",
        "timestamp": 1645486678
    },
    {
        "content": "<p>At the moment, my best guess would be some kind of configuration issue with the linker, where the linker doesn't understand the target. I'm <em>guessing</em> that that's the binutils <code>ld</code> being invoked there. You're using a custom target, and I'm wondering if some part of binutils doesn't know that the target should be using ELFv2.</p>",
        "id": 272745205,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486685
    },
    {
        "content": "<p>Any way to check?</p>",
        "id": 272745228,
        "sender_full_name": "Grommish",
        "timestamp": 1645486721
    },
    {
        "content": "<p>Does this build and run as expected if you use <code>powerpc64-unknown-linux-musl</code> rather than the <code>-openwrt-</code> variant?</p>",
        "id": 272745230,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486723
    },
    {
        "content": "<p>Don't know.. let me see if there is an easy way to test it</p>",
        "id": 272745256,
        "sender_full_name": "Grommish",
        "timestamp": 1645486758
    },
    {
        "content": "<p>(If it <em>does</em>, I'm adding that as supporting evidence for my premise that vendor fields in target triples are never a good thing. :) )</p>",
        "id": 272745257,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486762
    },
    {
        "content": "<p>haha Well, let me see if I can do this without a complete toolchain rebuild</p>",
        "id": 272745370,
        "sender_full_name": "Grommish",
        "timestamp": 1645486880
    },
    {
        "content": "<p>maybe you could pass a custom linker flag if you know which one you'd need</p>",
        "id": 272745391,
        "sender_full_name": "lyinch",
        "timestamp": 1645486916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> I already do when I build out the toolchain.. I set everything via <code>./configure</code> in one big call, including a bunch of <code>--set</code> calls</p>",
        "id": 272745447,
        "sender_full_name": "Grommish",
        "timestamp": 1645486955
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>CONFIGURE_VARS += \\\n        CARGO_HOME=&quot;$(CARGO_HOME)&quot; \\\n        ac_cv_path_CARGO=&quot;$(CARGO_HOME)/bin/cargo&quot; \\\n        ac_cv_path_RUSTC=&quot;$(CARGO_HOME)/bin/rustc&quot; \\\n        RUSTFLAGS=&quot;-C linker=$(TARGET_CC_NOCACHE) -C ar=$(TARGET_AR)&quot;\n</code></pre></div>",
        "id": 272745466,
        "sender_full_name": "Grommish",
        "timestamp": 1645486985
    },
    {
        "content": "<p>I set</p>\n<div class=\"codehilite\"><pre><span></span><code># MUSL Target Flags\nMUSL_CONFIGURE_ARGS = \\\n  --set=target.$(RUSTC_TARGET_ARCH).ar=$(TARGET_AR) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cc=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).cxx=$(TARGET_CXX_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).linker=$(TARGET_CC_NOCACHE) \\\n  --set=target.$(RUSTC_TARGET_ARCH).musl-root=$(TOOLCHAIN_DIR) \\\n  --set=target.$(RUSTC_TARGET_ARCH).ranlib=$(TARGET_RANLIB)\n\n# CARGO_HOME is an environmental\nHOST_CONFIGURE_OPTS += CARGO_HOME=&quot;$(CARGO_HOME)&quot;\n\n# The Flags are Common between HOST and TARGET\nRUST_COMMON_ARGS := \\\n  --build=$(RUSTC_HOST_ARCH) \\\n  --dist-compression-formats=xz \\\n  --enable-full-tools \\\n  --enable-llvm-link-shared \\\n  --enable-llvm-plugins \\\n  --enable-missing-tools \\\n  --enable-ninja \\\n  --enable-optimize \\\n  --enable-optimize-llvm \\\n  --enable-parallel-compiler \\\n  --enable-sanitizers \\\n  --release-channel=nightly \\\n  ${MUSL_CONFIGURE_ARGS}\n\nHOST_CONFIGURE_ARGS = \\\n  --target=$(RUSTC_TARGET_ARCH) \\\n  --host=$(RUSTC_HOST_ARCH) \\\n  --prefix=$(CARGO_HOME) \\\n  --bindir=$(CARGO_HOME)/bin \\\n  --libdir=$(CARGO_HOME)/lib \\\n  --sysconfdir=$(CARGO_HOME)/etc \\\n  --datadir=$(CARGO_HOME)/share \\\n  --mandir=$(CARGO_HOME)/man \\\n  ${RUST_COMMON_ARGS}\n</code></pre></div>\n<p>for the toolchain itself on it's compile</p>",
        "id": 272745546,
        "sender_full_name": "Grommish",
        "timestamp": 1645487097
    },
    {
        "content": "<p>Ugh.. </p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: the `powerpc64-unknown-linux-musl` target may not be installed\n  = help: consider downloading the target with `rustup target add powerpc64-unknown-linux-musl`\n  = help: consider building the standard library from source with `cargo build -Zbuild-std`\n</code></pre></div>",
        "id": 272745661,
        "sender_full_name": "Grommish",
        "timestamp": 1645487241
    },
    {
        "content": "<p>Ok.. This will take about 5 hours or so.. I'll be back!</p>",
        "id": 272745718,
        "sender_full_name": "Grommish",
        "timestamp": 1645487288
    },
    {
        "content": "<p>I don't know what these <code>TARGET_X</code> flags are, but it doesn't really make sense to me to set <code>TARGET_CC</code> to the linker. Is there no <code>TARGET_LDFLAGS</code> or <code>TARGET_LINKERFLAGS</code> or similar available?</p>",
        "id": 272745728,
        "sender_full_name": "lyinch",
        "timestamp": 1645487298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479478\">@lyinch</span> If I don't it tries to use the build-host's GCC installation</p>",
        "id": 272745855,
        "sender_full_name": "Grommish",
        "timestamp": 1645487491
    },
    {
        "content": "<p>--host/--build at both <code>x86_64-unknown-linux-gnu</code> and --target is <code>powerpc64-openwrt-linux-musl</code>.  Without explicitly pointing to the build tools within the fakeroot, rust defaults to things like <code>/usr/bin/ld</code> for linking.</p>",
        "id": 272746418,
        "sender_full_name": "Grommish",
        "timestamp": 1645488035
    },
    {
        "content": "<p>Silly question: Since I upstreamed the <code>mips64-openwrt-linux-musl</code> to the repo as a Tier 3 tuple.  Is <code>rustup</code> now aware of it, and how would I make use of it?</p>",
        "id": 272755488,
        "sender_full_name": "Grommish",
        "timestamp": 1645499137
    },
    {
        "content": "<p>Not a silly question, but <code>rustup target list</code> will show you what targets are available via rustup.</p>",
        "id": 272757248,
        "sender_full_name": "Jubilee",
        "timestamp": 1645501542
    },
    {
        "content": "<p>Ok, So I still couldn't use rustup for the Tier 3 tuple since it isn't on the <code>rustup target list</code>.  That is the list of pre-compiled tuples, but is there a way to have rustup create std lib for it?</p>",
        "id": 272757411,
        "sender_full_name": "Grommish",
        "timestamp": 1645501733
    },
    {
        "content": "<p>Even if it's local</p>",
        "id": 272757420,
        "sender_full_name": "Grommish",
        "timestamp": 1645501748
    },
    {
        "content": "<p>You can use something like <code>cargo build -Zbuild-std --target mips64-openwrt-linux-musl</code> to build the standard library and the project in  which you run it.</p>",
        "id": 272778754,
        "sender_full_name": "bjorn3",
        "timestamp": 1645522430
    },
    {
        "content": "<p>Ok, So I'm at the point I am trying to speed up the build process.  When i was working on a single target that I controlled, it was fine it was taking 4-5 hours..  But, with multiples, it's just not something I can do..</p>\n<p>Below is the list it returns from <code>x.py dist -h -v</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code>Available paths:\n    ./x.py dist build-manifest\n    ./x.py dist cargo\n    ./x.py dist clippy\n    ./x.py dist extended\n    ./x.py dist llvm-tools\n    ./x.py dist miri\n    ./x.py dist reproducible-artifacts\n    ./x.py dist rls\n    ./x.py dist rust-analysis\n    ./x.py dist rust-analyzer\n    ./x.py dist rust-demangler\n    ./x.py dist rust-dev\n    ./x.py dist rust-docs\n    ./x.py dist rust-mingw\n    ./x.py dist rust-src\n    ./x.py dist rust-std\n    ./x.py dist rustc\n    ./x.py dist rustc-dev\n    ./x.py dist rustc-docs\n    ./x.py dist rustc-src\n    ./x.py dist rustfmt\n    ./x.py dist src/lldb_batchmode.py\n</code></pre></div>\n<p>I am using: <code>$(PYTHON) x.py --config ./config.toml dist build-manifest cargo llvm-tools rustc rust-std rust-src</code> but when I goto build with the toolchain, it gives me <code>error[E0463]: can't find crate for std</code>.  Can someone tell me which of the above areas I'm missing?  So far, paring back the available tools and sections has taken the compile time from 5 hours down to 2.. If it would actually <em>work</em> it would be a boon :D</p>",
        "id": 272970294,
        "sender_full_name": "Grommish",
        "timestamp": 1645632598
    },
    {
        "content": "<p>What is your <code>config.toml</code>?</p>",
        "id": 272977700,
        "sender_full_name": "bjorn3",
        "timestamp": 1645635665
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/dYxMmIRJ8pfjHxCPoD9A53Fj/config.toml\">config.toml</a> </p>\n<p>Attached..</p>",
        "id": 272978064,
        "sender_full_name": "Grommish",
        "timestamp": 1645635826
    },
    {
        "content": "<p>I originally had <code>--enable-full-tools</code> which, of course, built everything :D But, it's so massive and takes so long, I'd like to shrink it down for things I don't need (like rust-docs, unless someone chooses that option)</p>",
        "id": 272978509,
        "sender_full_name": "Grommish",
        "timestamp": 1645635995
    },
    {
        "content": "<p>You have to add the host triple to target too, so <code>target = ['x86_64-unknown-linux-gnu', 'mips64-openwrt-linux-musl']</code>. Otherwise building build scripts and proc macros won't work as the host libstd is not available.</p>",
        "id": 272978647,
        "sender_full_name": "bjorn3",
        "timestamp": 1645636064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> That's outlined in <code>./configure</code>.. Remember, I use <code>./configure</code> flags to build the <code>config.toml</code></p>\n<p>I set <code>--build</code>, <code>--host</code>, and <code>--target</code> in the ./configure.. Since I cannot edit the <code>config.toml</code> directly, Suggestions?</p>",
        "id": 272978896,
        "sender_full_name": "Grommish",
        "timestamp": 1645636163
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>(cd /home/grommish/openwrt/build_dir/hostpkg/rust-1.58.1/; if [ -x configure ]; then cp -fpR /home/grommish/openwrt/scripts/config.{guess,sub} /home/grommish/openwrt/build_dir/hostpkg/rust-1.58.1// &amp;&amp; CC=&quot;gcc&quot; CFLAGS=&quot;-O2 -I/home/grommish/openwrt/staging_dir/host/include -I/home/grommish/openwrt/staging_dir/hostpkg/include -I/home/grommish/openwrt/staging_dir/target-mips64_octeonplus_64_musl/host/include&quot; CXX=&quot;g++&quot; CPPFLAGS=&quot;-I/home/grommish/openwrt/staging_dir/host/include -I/home/grommish/openwrt/staging_dir/hostpkg/include -I/home/grommish/openwrt/staging_dir/target-mips64_octeonplus_64_musl/host/include&quot; CXXFLAGS=&quot;&quot; LDFLAGS=&quot;-L/home/grommish/openwrt/staging_dir/host/lib -L/home/grommish/openwrt/staging_dir/hostpkg/lib -L/home/grommish/openwrt/staging_dir/target-mips64_octeonplus_64_musl/host/lib&quot; CONFIG_SHELL=&quot;/usr/bin/env bash&quot;  bash ./configure --target=mips64-openwrt-linux-musl --host=x86_64-unknown-linux-gnu --prefix=/home/grommish/openwrt/staging_dir/host --bindir=/home/grommish/openwrt/staging_dir/host/bin --libdir=/home/grommish/openwrt/staging_dir/host/lib --sysconfdir=/home/grommish/openwrt/staging_dir/host/etc --datadir=/home/grommish/openwrt/staging_dir/host/share --mandir=/home/grommish/openwrt/staging_dir/host/man --build=x86_64-unknown-linux-gnu --dist-compression-formats=xz --enable-llvm-link-shared --enable-llvm-plugins --enable-missing-tools --enable-ninja --enable-optimize --enable-optimize-llvm --enable-parallel-compiler --enable-sanitizers --release-channel=nightly --set=target.mips64-openwrt-linux-musl.ar=mips64-openwrt-linux-musl-gcc-ar --set=target.mips64-openwrt-linux-musl.cc=mips64-openwrt-linux-musl-gcc --set=target.mips64-openwrt-linux-musl.cxx=mips64-openwrt-linux-musl-g++ --set=target.mips64-openwrt-linux-musl.linker=mips64-openwrt-linux-musl-gcc --set=target.mips64-openwrt-linux-musl.musl-root=/home/grommish/openwrt/staging_dir/toolchain-mips64_octeonplus_64_gcc-11.2.0_musl --set=target.mips64-openwrt-linux-musl.ranlib=mips64-openwrt-linux-musl-gcc-ranlib ; fi )\nconfigure: processing command line\nconfigure:\nconfigure: build.target         := [&#39;mips64-openwrt-linux-musl&#39;]\nconfigure: build.host           := [&#39;x86_64-unknown-linux-gnu&#39;]\nconfigure: install.prefix       := /home/grommish/openwrt/staging_dir/host\nconfigure: install.bindir       := /home/grommish/openwrt/staging_dir/host/bin\nconfigure: install.libdir       := /home/grommish/openwrt/staging_dir/host/lib\nconfigure: install.sysconfdir   := /home/grommish/openwrt/staging_dir/host/etc\nconfigure: install.datadir      := /home/grommish/openwrt/staging_dir/host/share\nconfigure: install.mandir       := /home/grommish/openwrt/staging_dir/host/man\nconfigure: build.build          := x86_64-unknown-linux-gnu\nconfigure: dist.compression-formats := [&#39;xz&#39;]\nconfigure: llvm.link-shared     := True\nconfigure: llvm.plugins         := True\nconfigure: dist.missing-tools   := True\nconfigure: llvm.ninja           := True\nconfigure: rust.optimize        := True\nconfigure: llvm.optimize        := True\nconfigure: rust.parallel-compiler := True\nconfigure: build.sanitizers     := True\nconfigure: rust.channel         := nightly\nconfigure: target.mips64-openwrt-linux-musl.ar := mips64-openwrt-linux-musl-gcc-a ...\nconfigure: target.mips64-openwrt-linux-musl.cc := mips64-openwrt-linux-musl-gcc\nconfigure: target.mips64-openwrt-linux-musl.cxx := mips64-openwrt-linux-musl-g++\nconfigure: target.mips64-openwrt-linux-musl.linker := mips64-openwrt-linux-musl-g ...\nconfigure: target.mips64-openwrt-linux-musl.musl-root := /home/grommish/openwrt/s ...\nconfigure: target.mips64-openwrt-linux-musl.ranlib := mips64-openwrt-linux-musl-g ...\nconfigure: build.configure-args := [&#39;--target=mips64-openwrt-linux-musl&#39;, &#39;--host ...\nconfigure:\nconfigure: writing `config.toml` in current directory\nconfigure:\nconfigure: run `python /home/grommish/openwrt/build_dir/hostpkg/rust-1.58.1/x.py --help`\nconfigure:\n</code></pre></div>",
        "id": 272979060,
        "sender_full_name": "Grommish",
        "timestamp": 1645636223
    },
    {
        "content": "<p><code>./configure --target x86_64-unknown-linux-gnu,mips64-openwrt-linux-musl</code> should do the trick.</p>",
        "id": 272979079,
        "sender_full_name": "bjorn3",
        "timestamp": 1645636231
    },
    {
        "content": "<p>Ok..  Let's try this!</p>",
        "id": 272979167,
        "sender_full_name": "Grommish",
        "timestamp": 1645636265
    },
    {
        "content": "<p>In order to help anyone who might find this thread in a search for the future:</p>\n<p>I was further looking for reduce time,  I was going to see about not building <code>stage2</code> artifacts, but ran across the following</p>\n<p><code>In theory, the stage1 compiler is functionally identical to the stage2 compiler, but in practice there are subtle differences. In particular, the stage1 compiler itself was built by stage0 and hence not by the source in your working directory. This means that the symbol names used in the compiler source may not match the symbol names that would have been made by the stage1 compiler, which can cause problems for dynamic libraries and tests.</code></p>\n<p>From this, anyone using rust in an embedded environment like I am using will probably be required to build to <code>stage2</code></p>",
        "id": 272987098,
        "sender_full_name": "Grommish",
        "timestamp": 1645639087
    },
    {
        "content": "<p>Are you trying to make release builds to distribute to users or for experimentation? There are a lot of corners you can cut in the latter case.</p>\n<p>For either case, and if you have enough storage, sccache can help with stage1 builds at least.</p>",
        "id": 272993648,
        "sender_full_name": "The 8472",
        "timestamp": 1645641752
    },
    {
        "content": "<p>You're setting <code>parallel-compiler = true</code>. That setting is quite experimental and shouldn't be used for distributables.</p>",
        "id": 272993833,
        "sender_full_name": "The 8472",
        "timestamp": 1645641883
    },
    {
        "content": "<p><code>use-lld = true</code> helps with build times in my experience, but idk if your target platforms are all supported.</p>",
        "id": 272993963,
        "sender_full_name": "The 8472",
        "timestamp": 1645641956
    },
    {
        "content": "<p>same thing for <code>jemalloc = true</code></p>",
        "id": 272994091,
        "sender_full_name": "The 8472",
        "timestamp": 1645642008
    },
    {
        "content": "<p>For now, I need to build out an installable toolchain that can cross-compile on build-bot environments with the option to enable the rest of the stuff for people who might want it down the line.  The minimum viable install that will cross <code>cargo</code> projects and allow <code>rustc</code> direct invoke on the build host would be the ideal.</p>",
        "id": 272994296,
        "sender_full_name": "Grommish",
        "timestamp": 1645642114
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rustup/concepts/profiles.html\">https://rust-lang.github.io/rustup/concepts/profiles.html</a></p>",
        "id": 272994535,
        "sender_full_name": "The 8472",
        "timestamp": 1645642223
    },
    {
        "content": "<p>When I tried just setting <code>rustc</code>, <code>rust-std</code>, and <code>cargo</code>, I had errors on the finished toolchain when trying to actually use it.  Do the <code>rustup</code> profiles mimic the same if building from source?  For example, I received an error that specifically told me to add <code>rust-src</code> if I wanted it to wokr</p>",
        "id": 272994705,
        "sender_full_name": "Grommish",
        "timestamp": 1645642313
    },
    {
        "content": "<p>rustup uses dist artifacts, a profile just selects which set it downloads.</p>",
        "id": 272994861,
        "sender_full_name": "The 8472",
        "timestamp": 1645642376
    },
    {
        "content": "<p>hrm, yeah the src may be needed to cross-compile std.</p>",
        "id": 272994954,
        "sender_full_name": "The 8472",
        "timestamp": 1645642423
    },
    {
        "content": "<p>I've already reduced compile time from 4.5-5 hours down to 2.. So it's a huge gain already and I'm not complaining :)  I will look at <code>use-lld</code> and see if that wouldn't be helpful (aka, what it does) and <code>jemalloc</code> as well.. I have to be careful because the build host can be multiple arch targets, and the target arch certainly will be almost 100% of the time.. Very few people are override <code>musl</code> for<code>glibc</code> for  <code>x86_64</code> and that would be about the only time host/build/target would be the same</p>",
        "id": 272995400,
        "sender_full_name": "Grommish",
        "timestamp": 1645642659
    },
    {
        "content": "<p>someone who optimized bootstrapping for guix used ./x.py build instead of dist and shaved off some time that way. xz compression takes a lot of time. if you can use the resulting binaries and libs directly then you can use something more lightweight at the expense of bandwidth.</p>",
        "id": 272995926,
        "sender_full_name": "The 8472",
        "timestamp": 1645642886
    },
    {
        "content": "<p>I had issues with <code>x.py install</code> not putting things in the right place, even with whatever <code>prefix</code> (I don't remember the call off-hand, it's been a while).. but, I think I'll stick with <code>dist</code> for now in the hopes the OpenWrt build servers will eventually build out the toolchains for download and save the local building.  Alternatively, I want to keep the compiled dist artifacts so I can re-install them after a clean of the build system.  I'll keep it in mind for when I revisit down the line for further optimizations though!</p>",
        "id": 272996395,
        "sender_full_name": "Grommish",
        "timestamp": 1645643065
    },
    {
        "content": "<p>I believe it has to do with all the environmental flags I pass in the build system during the compile phase, rather than issues with <code>x.py</code> itself, but I don't have time to step-by-step it to see where it fails.  I did find that calling the install scripts did correctly install things, so I ran with that..</p>\n<div class=\"codehilite\"><pre><span></span><code>        cd $(RUST_TMP_DIR) &amp;&amp; \\\n          find -iname &quot;*.xz&quot; -exec tar -xJf {} &quot;;&quot; &amp;&amp; \\\n          find ./* -type f -name install.sh -execdir sh {} --prefix=$(CARGO_HOME) --disable-ldconfig \\;\n</code></pre></div>",
        "id": 272996737,
        "sender_full_name": "Grommish",
        "timestamp": 1645643220
    },
    {
        "content": "<p>On the plus side, this way allows me to break a HOST and TARGET toolchains down into modular components and install them as needed.</p>",
        "id": 272996918,
        "sender_full_name": "Grommish",
        "timestamp": 1645643284
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>44M rust-1.58.1-aarch64-openwrt-linux-musl-install.tar.xz\n43M rust-1.58.1-armv7-openwrt-linux-muslgnueabi-install.tar.xz\n43M rust-1.58.1-armv7-openwrt-linux-muslgnueabihf-install.tar.xz\n45M rust-1.58.1-mips-openwrt-linux-musl-install.tar.xz\n23M rust-1.58.1-mips64-openwrt-linux-musl-install.tar.xz\n44M rust-1.58.1-mipsel-openwrt-linux-musl-install.tar.xz\n42M rust-1.58.1-powerpc64-openwrt-linux-musl-install.tar.xz\n84M rust-1.58.1-x86_64-unknown-linux-gnu-install.tar.xz\n</code></pre></div>\n<p>Although the sizes will reduce for TARGET bits as I rebuild them (working in mips64 land for this)</p>",
        "id": 272998229,
        "sender_full_name": "Grommish",
        "timestamp": 1645643945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <br>\n<code>Build completed successfully in 2:55:30</code></p>\n<p>and it successfully cross-compiled my test package..  Now, to test the others, but it's a good 2 hours of savings!</p>",
        "id": 273017923,
        "sender_full_name": "Grommish",
        "timestamp": 1645654051
    },
    {
        "content": "<p>Ok, so now I'm working on <code>x86_64-openwrt-linux-musl</code> and I'm seeing the following error:</p>\n<p><code>can not be used when making a PIE object; recompile with -fPIE</code></p>\n<p>Since I'm calling <code>cargo build</code> on this project, where would I put the <code>-fPIE</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>        cd $(PKG_BUILD_DIR) &amp;&amp; $(CONFIGURE_VARS) cargo update &amp;&amp; \\\n          $(CONFIGURE_VARS) cargo build -v --release --target $(REAL_GNU_TARGET_NAME)\n</code></pre></div>\n<p>After the <code>--target $(REAL_GNU_TARGET_NAME)</code> so it reads?:</p>\n<div class=\"codehilite\"><pre><span></span><code>        cd $(PKG_BUILD_DIR) &amp;&amp; $(CONFIGURE_VARS) cargo update &amp;&amp; \\\n          $(CONFIGURE_VARS) cargo build -v --release --target $(REAL_GNU_TARGET_NAME) -fPIE\n</code></pre></div>\n<p>Or does it have to go in a .toml somewhere?  Or does it have to be built into the toolchain when I compile rust-lang itself?</p>",
        "id": 273917250,
        "sender_full_name": "Grommish",
        "timestamp": 1646278287
    },
    {
        "content": "<p>You can set it in the target spec using <code>.position_independent_executables = true</code> I believe. Not sure if you can set it on the commandline.</p>",
        "id": 273932150,
        "sender_full_name": "bjorn3",
        "timestamp": 1646291677
    },
    {
        "content": "<p>Hmm.. Well..  It's on already..   The <code>x86_64-musl</code> native tuple enables it and I just clone the native one for starters.</p>\n<p><code> base.static_position_independent_executables = true;</code></p>\n<p>Looking at the OpenWrt side of things, <code>-fPIC</code> or <code>-fpic</code> is always on (depending on the ARCH).</p>\n<div class=\"codehilite\"><pre><span></span><code>OPTIMIZE_FOR_CPU=$(subst i386,i486,$(ARCH))\n\nifneq (,$(findstring $(ARCH) , aarch64 aarch64_be powerpc ))\n  FPIC:=-DPIC -fPIC\nelse\n  FPIC:=-DPIC -fpic\nendif\n\nHOST_FPIC:=-DPIC -fPIC\n</code></pre></div>\n<p>Now, you know my non-coder background.  Is there a difference between <code>fPIC</code> and <code>fpic</code>?  As this would return the <code>-DPIC -fPIC</code> for <code>x86_64</code></p>",
        "id": 273987054,
        "sender_full_name": "Grommish",
        "timestamp": 1646320598
    },
    {
        "content": "<p>I believe one is the compiler option while the other is the linker option.</p>",
        "id": 273991936,
        "sender_full_name": "bjorn3",
        "timestamp": 1646322570
    },
    {
        "content": "<p>So one causes the pic relocation model to be used when compiling object files, while the other tells the linker to produce a pic executable or dylib.</p>",
        "id": 273992108,
        "sender_full_name": "bjorn3",
        "timestamp": 1646322620
    },
    {
        "content": "<p>Gotcha.. Makes sense, but I wonder where I'm missing this..  Back to digging since it seems to be on the package end rather than the toolchain.. Thanks <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> !</p>",
        "id": 273997527,
        "sender_full_name": "Grommish",
        "timestamp": 1646324615
    },
    {
        "content": "<p>My understanding is that <code>-fPIC</code> and <code>-fpic</code>may use different relocation models on some targets: <a href=\"https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html\">https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html</a></p>\n<blockquote>\n<p>Use -fPIC or -fpic to generate code. Whether to use -fPIC or -fpic to generate code is target-dependent. The -fPIC choice always works, but may produce larger code than -fpic (mnenomic to remember this is that PIC is in a larger case, so it may produce larger amounts of code). Using -fpic option usually generates smaller and faster code, but will have platform-dependent limitations, such as the number of globally visible symbols or the size of the code. The linker will tell you whether it fits when you create the shared library. When in doubt, I choose -fPIC, because it always works.</p>\n</blockquote>",
        "id": 274464539,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646690476
    },
    {
        "content": "<p>Right, according to gcc's man page -fpic has limitations on the size of the GOT on AArch64, m68k, PowerPC and SPARC, unlike -fPIC.</p>",
        "id": 274465626,
        "sender_full_name": "bjorn3",
        "timestamp": 1646690974
    },
    {
        "content": "<p>I was thinking about -fpie/-fPIE vs -pie I think. The former are for compilation while the latter is for linking.</p>",
        "id": 274465817,
        "sender_full_name": "bjorn3",
        "timestamp": 1646691054
    },
    {
        "content": "<p>I found the OpenWrt build system actually accounts for it, but the way it has to be invoked is very specific since I'm doing everything manually at this point.  I've been back in mips64 land working on Suricata, but I'll work on the other arches now that I've re-arraigned things and will let you know</p>",
        "id": 274917459,
        "sender_full_name": "Grommish",
        "timestamp": 1646959280
    },
    {
        "content": "<p>Ok, so an actual Cargo related question.</p>\n<p><code>cargo build</code> and <code>cargo rustc</code> are the same, except you can pass arguments to <code>rustc</code> with <code>cargo rustc</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>        cd $(PKG_BUILD_DIR) &amp;&amp; CARGO_HOME=$(CARGO_HOME) RUSTFLAGS=$(RUSTFLAGS) cargo update &amp;&amp; \\\n          CARGO_HOME=$(CARGO_HOME) RUSTFLAGS=$(RUSTFLAGS) cargo rustc -v --release --target $(RUSTC_TARGET_ARCH) -- \\\n          $(FPIC)\n</code></pre></div>\n<p>turns into<br>\n<code>cd /home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8 &amp;&amp; CARGO_HOME=/home/grommish/openwrt/staging_dir/host RUSTFLAGS=\"-C linker=/home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-musl-gcc -C ar=/home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-musl-gcc-ar\" cargo update &amp;&amp; CARGO_HOME=/home/grommish/openwrt/staging_dir/host RUSTFLAGS=\"-C linker=/home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-musl-gcc -C ar=/home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-musl-gcc-ar\" cargo rustc -v --release --target x86_64-openwrt-linux-musl -- -DPIC -fpic</code></p>\n<p>resulting in</p>\n<p><code>error: extra arguments to </code>rustc<code> can only be passed to one target, consider filtering the package by passing, e.g., '--lib' or '--bin NAME' to specify a single target</code></p>\n<p>Am I adding the flags incorrectly?  I'm not building this cargo package for multiple targets, so I don't understand the error.  Without the <code>$(FPIC)</code>, I get the previously discussed PIE error.</p>",
        "id": 274929370,
        "sender_full_name": "Grommish",
        "timestamp": 1646971229
    },
    {
        "content": "<p>Can I add a standardized <code>CFLAGS</code> to a <code>cargo build</code> that gets recognized?</p>",
        "id": 274929417,
        "sender_full_name": "Grommish",
        "timestamp": 1646971310
    },
    {
        "content": "<p>Adding <code>-C link-args=-fPIE</code> to the <code>RUSTFLAGS</code> at least adds it to the linker, but I can't find where/how to add flags to the compile-side of things.</p>",
        "id": 274933554,
        "sender_full_name": "Grommish",
        "timestamp": 1646976786
    },
    {
        "content": "<p><code>-Crelocation-model=pie</code> I believe.</p>",
        "id": 274933563,
        "sender_full_name": "bjorn3",
        "timestamp": 1646976818
    },
    {
        "content": "<p>Same error :(</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS = \\\n  &quot;-C linker=$(TOOLCHAIN_DIR)/bin/$(TARGET_CC_NOCACHE) -C ar=$(TOOLCHAIN_DIR)/bin/$(TARGET_AR) \\\n  -C relocation-model=pie -C link-args=-fPIE&quot;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>     Running `rustc --crate-name btm --edition=2018 src/bin/main.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type bin --emit=dep-info,link -C opt-level=3 -C lto -C codegen-units=1 -C debuginfo=0 --cfg &#39;feature=&quot;battery&quot;&#39; --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;fern&quot;&#39; --cfg &#39;feature=&quot;log&quot;&#39; -C metadata=c8531aca3d388fca -C extra-filename=-c8531aca3d388fca --out-dir /home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps --target x86_64-openwrt-linux-musl -L dependency=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps -L dependency=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/release/deps --extern anyhow=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libanyhow-fe2a7187cc413cd5.rlib --extern backtrace=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libbacktrace-6b3a9b08d80f8822.rlib --extern battery=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libbattery-c9c2891afe1e7de5.rlib --extern bottom=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libbottom-2178a4384b566bb7.rlib --extern cfg_if=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libcfg_if-aa5a187c0170a2eb.rlib --extern clap=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libclap-4540a90bfeb8342e.rlib --extern crossterm=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libcrossterm-18e7868565375e9a.rlib --extern ctrlc=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libctrlc-287ad21a86c92694.rlib --extern dirs=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libdirs-d8c6265892bba603.rlib --extern fern=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libfern-b0b0d2d29b799329.rlib --extern futures=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libfutures-3b2468f21aac2b35.rlib --extern futures_timer=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libfutures_timer-8ad9730168206a69.rlib --extern fxhash=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libfxhash-5a466736255ca54d.rlib --extern heim=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libheim-59bc76634faec95c.rlib --extern indexmap=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libindexmap-9d810fc01feacc85.rlib --extern itertools=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libitertools-27138243c3525276.rlib --extern libc=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/liblibc-cd8bdee0b4fcd379.rlib --extern log=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/liblog-bf92bbcdb621b0d5.rlib --extern once_cell=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libonce_cell-bd8b8105922c044f.rlib --extern procfs=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libprocfs-4db0b9ddb3d09107.rlib --extern regex=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libregex-76a0ba3229af64f6.rlib --extern serde=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libserde-995e38a957560c49.rlib --extern smol=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libsmol-86e34684d4997028.rlib --extern sysinfo=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libsysinfo-98a0769ac150f368.rlib --extern thiserror=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libthiserror-2f31b1aeeff8f7b1.rlib --extern time=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libtime-62792f1f4c31fed7.rlib --extern toml=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libtoml-4768b64302169b52.rlib --extern tui=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libtui-04004d448c3beed4.rlib --extern typed_builder=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/release/deps/libtyped_builder-412b97424c05917e.so --extern unicode_segmentation=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libunicode_segmentation-5aeb087439c2d434.rlib --extern unicode_width=/home/grommish/openwrt/build_dir/target-x86_64_musl/bottom-0.6.8/target/x86_64-openwrt-linux-musl/release/deps/libunicode_width-cd23bd3c901af533.rlib -C linker=/home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-musl-gcc -C ar=/home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-musl-gcc-ar -C relocation-model=pie -C link-args=-fPIE`\nerror: linking with `/home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/bin/x86_64-openwrt-linux-musl-gcc` failed: exit status: 1\n  = note: /home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/lib/gcc/x86_64-openwrt-linux-musl/11.2.0/../../../../x86_64-openwrt-linux-musl/bin/ld: /home/grommish/openwrt/tmp/rustcDWk8GD/liblibc-ed7c3f714bad33c4.rlib(sysconf.o): relocation R_X86_64_32S against `.rodata.values.0&#39; can not be used when making a PIE object; recompile with -fPIE\n          /home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/lib/gcc/x86_64-openwrt-linux-musl/11.2.0/../../../../x86_64-openwrt-linux-musl/bin/ld: /home/grommish/openwrt/tmp/rustcDWk8GD/liblibc-ed7c3f714bad33c4.rlib(__libc_start_main.o): relocation R_X86_64_32 against `.rodata.__init_libc.str1.1&#39; can not be used when making a PIE object; recompile with -fPIE\n....\n          /home/grommish/openwrt/staging_dir/toolchain-x86_64_gcc-11.2.0_musl/lib/gcc/x86_64-openwrt-linux-musl/11.2.0/../../../../x86_64-openwrt-linux-musl/bin/ld: /home/grommish/openwrt/tmp/rustcDWk8GD/liblibc-ed7c3f714bad33c4.rlib(lite_malloc.o): warning: relocation in read-only section `.rodata.__bump_lockptr&#39;\n          collect2: error: ld returned 1 exit status\n</code></pre></div>",
        "id": 274936720,
        "sender_full_name": "Grommish",
        "timestamp": 1646980559
    },
    {
        "content": "<p>That looks like musl is not compiled for PIE support.</p>",
        "id": 274937719,
        "sender_full_name": "bjorn3",
        "timestamp": 1646981991
    },
    {
        "content": "<p>That's a thought.  Should be on, but I'll make sure.. The x86_64 targets I never use.</p>",
        "id": 275033508,
        "sender_full_name": "Grommish",
        "timestamp": 1647032644
    },
    {
        "content": "<p>I'm back..  As an update, I've now got everything setup so that it can re-use the compiled distro toolchains that I create, and install them on the fly assuming it's already been compiled..  I'm working on seeing how feasible a <code>-Z build-std</code> call would be.  I also have the OpenWrt build system setup to handle/process standardized <code>cargo build</code> applications. with the ability to inject flags (as needed).</p>\n<p>This, of course, leads to a new round of questions:</p>\n<p>I'm back to looking at <code>armv7-openwrt-linux-musleabi</code>/<code>armv7-openwrt-linux-musleabihf</code>.  OpenWrt classifies all <code>arm</code> targets as just <code>arm</code> for the arch, but I've managed to key and split out at least the armv7 and armv7hf.  </p>\n<p>In my <code>armv7hf</code> tuple, I have the follow:</p>\n<p><code>features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),</code></p>\n<p>Can I overload this <code>features:</code> field with ALL of the <code>vfp</code> options available on the targets (like adding <code>+vfp4</code> to the above string), thus enabling them ALL, and selectively calling them either via <code>--cpu-features</code> when the build system build for that target?  or key it to a specific cpu-type (as referenced <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272742552\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/272742552</a>)</p>\n<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> BTW, <code>aarch64-openwrt-linux-musl</code> works fine and as intended, at least, so far! :)</p>\n<p>I am now very confident in the <code>rust-lang</code> toolchain as integrated into OpenWrt.  Problems that I've seen with my test builds have all been attributed (at this point) to the end applications and the fact they never expected or tested for the use case I'm now exposing them to (which causes all sorts of really interesting bugs and issues!)..I've also been able to better flesh out the <code>rust-lang</code> <code>libc</code> crate for <code>mips64</code> support! <em>yay</em>.</p>",
        "id": 278204095,
        "sender_full_name": "Grommish",
        "timestamp": 1649354815
    },
    {
        "content": "<p>Follow-up:  I ran <code>./rustc --print target-cpus --print target-features --target armv7-openwrt-linux-muslgnueabihf</code> and got the below.</p>\n<p><a href=\"https://gist.github.com/Grommish/8f3ab6a28e0a543f54bdfbb67dd8a6d6\">https://gist.github.com/Grommish/8f3ab6a28e0a543f54bdfbb67dd8a6d6</a></p>\n<p>If I just select a specific CPU, will it know what features to use?  <code>vfp4</code> is listed as available, for example, but does rust know which features are available internally for a given CPU?</p>",
        "id": 278222933,
        "sender_full_name": "Grommish",
        "timestamp": 1649363813
    },
    {
        "content": "<p>Rustc doesn't, but LLVM does. The features listed in the target spec likely override the ones for the chosen target cpu though. (as in features not listed in the target spec get the same state as the target cpu. features that are listed get their state from the target spec) Unless you override it with -Ctarget-feature.</p>",
        "id": 278223352,
        "sender_full_name": "bjorn3",
        "timestamp": 1649364044
    },
    {
        "content": "<p>The idea is to use <code>-C target-cpu</code> and <code>-C target-feature</code> depending on how the target is listed (if possible), so those will override?  Ok.  That gives me a better idea on what to play with, at least!. I'd rather not create a tuple for each variant possible depending on which armv7 target has what features.</p>\n<p>For example:<br>\n<code>mvebu/cortexa9/target.mk:CPU_SUBTYPE:=vfpv3-d16</code><br>\n<code>omap/Makefile:CPU_SUBTYPE:=vfpv3</code><br>\n<code>sunxi/cortexa7/target.mk:CPU_SUBTYPE:=neon-vfpv4</code><br>\netc</p>\n<p>Ideally, they'd all be under the same tuple and I'd be able to select which feature they should use at the compile-time of the rustc/cargo package after the toolchain itself is built (and actually used)</p>",
        "id": 278229712,
        "sender_full_name": "Grommish",
        "timestamp": 1649367389
    },
    {
        "content": "<p>Can I just remove the <code>features</code> line from the tuple and decide when rustc is used as to what to turn on and off via the <code>target-cpu</code>/<code>target-feature</code> or will rust complain about a tuple not having <code>features</code>?</p>",
        "id": 278230557,
        "sender_full_name": "Grommish",
        "timestamp": 1649367939
    },
    {
        "content": "<p>I think removing features would work.</p>",
        "id": 278238653,
        "sender_full_name": "bjorn3",
        "timestamp": 1649373422
    },
    {
        "content": "<p>That worked!  Question, if I'm using <code>-Z build-std</code>, can I use <code>-C llvm_target=</code> to override at build time and will the build-std detect it?</p>\n<p>as in: <code>RUSTFLAGS=\"-C llvm_target=armv7-unknown-linux-gnueabihf -C target-cpi=cortex_a9 -C target-features=neon,vfp4\" cargo build -Z build-std --release --target=arm-openwrt-linux-muslgnueabihf</code>?</p>",
        "id": 278271808,
        "sender_full_name": "Grommish",
        "timestamp": 1649406633
    },
    {
        "content": "<p>No, only the target spec can set it afaik.</p>",
        "id": 278324229,
        "sender_full_name": "bjorn3",
        "timestamp": 1649433359
    },
    {
        "content": "<p>It was worth a shot :D  It would prevent from having to split tuples up if I could just add a v7 to the armv7 targets</p>",
        "id": 278327536,
        "sender_full_name": "Grommish",
        "timestamp": 1649434746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/OpenWrt.20Integration.20-.20Generating.20native.20rustc.2Fcargo.20binar.2E.2E.2E/near/278204095\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> BTW, <code>aarch64-openwrt-linux-musl</code> works fine and as intended, at least, so far! :)</p>\n<p>I am now very confident in the <code>rust-lang</code> toolchain as integrated into OpenWrt.  Problems that I've seen with my test builds have all been attributed (at this point) to the end applications and the fact they never expected or tested for the use case I'm now exposing them to (which causes all sorts of really interesting bugs and issues!)..I've also been able to better flesh out the <code>rust-lang</code> <code>libc</code> crate for <code>mips64</code> support! <em>yay</em>.</p>\n</blockquote>\n<p>nice!</p>",
        "id": 278360699,
        "sender_full_name": "Jubilee",
        "timestamp": 1649451155
    },
    {
        "content": "<p>Ok, so I broke it in a unique and imaginative way.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">grommish</span><span class=\"o\">/</span><span class=\"n\">openwrt</span><span class=\"o\">/</span><span class=\"n\">build_dir</span><span class=\"o\">/</span><span class=\"n\">hostpkg</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"mf\">1.60.0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">python3</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"n\">install</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">manifest</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">sqlite3</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">python</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">skipping</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"n\">lock</span><span class=\"w\"></span>\n<span class=\"n\">please</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">lang</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"w\"></span>\n<span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">problem</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">concurrent</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"n\">invocations</span><span class=\"w\"></span>\n<span class=\"n\">Building</span><span class=\"w\"> </span><span class=\"n\">rustbuild</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">error</span>: <span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">rules</span><span class=\"w\"> </span><span class=\"n\">matched</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">manifest</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bootstrap</span><span class=\"o\">/</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">287</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n<span class=\"n\">Build</span><span class=\"w\"> </span><span class=\"n\">completed</span><span class=\"w\"> </span><span class=\"n\">unsuccessfully</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span>:<span class=\"mi\">00</span>:<span class=\"mi\">00</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when I call <code>./x.py install --config ./config.toml</code> it fails to install <code>cargo</code> and maybe a few other things that I tell it to build via <code>$(PYTHON) x.py --config ./config.toml dist build-manifest cargo llvm-tools  rustc rust-std rust-src</code></p>\n<p><code>$(PYTHON) x.py install --config ./config.toml build-manifest cargo llvm-tools rustc rust-std rust-src</code> is the invocation I'm calling that causes the error</p>\n<p>Any suggestions?</p>",
        "id": 278385473,
        "sender_full_name": "Grommish",
        "timestamp": 1649475823
    },
    {
        "content": "<p>This is something that has cropped up since <code>1.60.0</code></p>",
        "id": 278389181,
        "sender_full_name": "Grommish",
        "timestamp": 1649482048
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span></p>",
        "id": 278391716,
        "sender_full_name": "bjorn3",
        "timestamp": 1649486176
    },
    {
        "content": "<p>I KNOW this is my fault somehow, I just don't know what the error actually is trying to say, since the only thing I can find related is a 2019 issue for <code>rustup</code>, which should't apply.  Or, perhaps I simply been missing it?</p>",
        "id": 278392006,
        "sender_full_name": "Grommish",
        "timestamp": 1649486597
    },
    {
        "content": "<p>Why do you think build-manifest is a valid component? Was it working in the past?</p>",
        "id": 278411734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649512994
    },
    {
        "content": "<p>Yep!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">grommish</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"n\">AW</span>:<span class=\"o\">~/</span><span class=\"n\">openwrt</span><span class=\"o\">/</span><span class=\"n\">build_dir</span><span class=\"o\">/</span><span class=\"n\">hostpkg</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"mf\">1.60.0</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">ls</span><span class=\"w\"></span>\n<span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">manifest</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">xz</span><span class=\"w\">  </span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">src</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">xz</span><span class=\"w\"></span>\n<span class=\"n\">cargo</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">xz</span><span class=\"w\">           </span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">xz</span><span class=\"w\"></span>\n<span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">xz</span><span class=\"w\">      </span><span class=\"n\">rustc</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">xz</span><span class=\"w\"></span>\n<span class=\"n\">grommish</span><span class=\"o\">@</span><span class=\"n\">DESKTOP</span><span class=\"o\">-</span><span class=\"n\">AW</span>:<span class=\"o\">~/</span><span class=\"n\">openwrt</span><span class=\"o\">/</span><span class=\"n\">build_dir</span><span class=\"o\">/</span><span class=\"n\">hostpkg</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"mf\">1.60.0</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"cp\">$</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">tar</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">grommish</span><span class=\"o\">/</span><span class=\"n\">openwrt</span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">xJf</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">grommish</span><span class=\"o\">/</span><span class=\"n\">openwrt</span><span class=\"o\">/</span><span class=\"n\">dl</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"mf\">1.60.0</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">xz</span><span class=\"w\"></span>\n<span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">grommish</span><span class=\"o\">/</span><span class=\"n\">openwrt</span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">install</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">iname</span><span class=\"w\"> </span><span class=\"s\">\"*.xz\"</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">exec</span><span class=\"w\"> </span><span class=\"n\">tar</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">xJf</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"s\">\";\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"cm\">/* -type f -name install.sh -execdir sh {} --prefix=/home/grommish/openwrt/staging_dir/host --disable-ldconfig \\;</span>\n<span class=\"cm\">install: creating uninstall script at /home/grommish/openwrt/staging_dir/host/lib/rustlib/uninstall.sh</span>\n<span class=\"cm\">install: installing component 'build-manifest'</span>\n\n<span class=\"cm\">    build manifest installed.</span>\n\n<span class=\"cm\">install: creating uninstall script at /home/grommish/openwrt/staging_dir/host/lib/rustlib/uninstall.sh</span>\n<span class=\"cm\">install: installing component 'cargo'</span>\n\n<span class=\"cm\">    cargo installed.</span>\n\n<span class=\"cm\">install: creating uninstall script at /home/grommish/openwrt/staging_dir/host/lib/rustlib/uninstall.sh</span>\n<span class=\"cm\">install: installing component 'llvm-tools-preview'</span>\n\n<span class=\"cm\">    llvm tools installed.</span>\n\n<span class=\"cm\">install: creating uninstall script at /home/grommish/openwrt/staging_dir/host/lib/rustlib/uninstall.sh</span>\n<span class=\"cm\">install: installing component 'rust-src'</span>\n\n<span class=\"cm\">    rust src installed.</span>\n\n<span class=\"cm\">install: creating uninstall script at /home/grommish/openwrt/staging_dir/host/lib/rustlib/uninstall.sh</span>\n<span class=\"cm\">install: installing component 'rust-std-x86_64-unknown-linux-gnu'</span>\n\n<span class=\"cm\">    rust std installed.</span>\n\n<span class=\"cm\">install: creating uninstall script at /home/grommish/openwrt/staging_dir/host/lib/rustlib/uninstall.sh</span>\n<span class=\"cm\">install: installing component 'rustc'</span>\n\n<span class=\"cm\">    rustc installed.</span>\n</code></pre></div>\n<p>Calling <code>dist</code> and just installing the resulting <code>.xz</code> files worked.</p>",
        "id": 278423609,
        "sender_full_name": "Grommish",
        "timestamp": 1649528641
    },
    {
        "content": "<p>build-manifest is valid only for <code>dist</code> and not <code>install</code> I think. I may have missed it in <a href=\"https://github.com/rust-lang/rust/pull/90684\">https://github.com/rust-lang/rust/pull/90684</a>.</p>",
        "id": 278424188,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649529441
    },
    {
        "content": "<p>This would also effect <code>build</code>, I'd assume?  I've been using <code>dist</code> to generate everything, and probably will continue to, but with the switch to 1.60.0, I wanted to see about the build/install route. </p>\n<p>This sounds like it's already been addressed and my edge use-case is going to be unique(?) when it comes to issues.  I wouldn't spendiany time on it unless you know it's an issue for the wider audience.   </p>\n<p>I can say that the error codes in <code>rust-lang</code> are usually great, but this one left me with just that \"huh?\" expression.  Even if I were to open an issue as it instructed, it didn't give me an idea of what to report.  If anything, maybe some clarification on that error set might be helpful for the future people who run into it, which admittedly, are probably going to be few and far between given the nearly zero results I got on Google.</p>",
        "id": 278424608,
        "sender_full_name": "Grommish",
        "timestamp": 1649530062
    },
    {
        "content": "<p>Update: Running the <code>dist</code> and then my  self-defined installation stuff works as intended under <code>1.60.1</code></p>",
        "id": 278431686,
        "sender_full_name": "Grommish",
        "timestamp": 1649539462
    },
    {
        "content": "<p>I'm wondering why you need to build <code>build-manifest</code> as a component?</p>",
        "id": 278433730,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1649542398
    },
    {
        "content": "<p>that is an implementation detail of the rust release process, and it's not ever shipped to end users</p>",
        "id": 278433742,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1649542421
    },
    {
        "content": "<p>This is for installation into the OpenWrt build system as an independent toolchain so that the various architectures (mips, mipsel, mips64, arm, armv5, armv7, aarch64, powerpc, ppc64, x86_64, and maybe a few more) can utilize rustc/cargo internal to the system for cross-compiling to the TARGET arch.  </p>\n<p>I know when i attempted to remove <code>build-manifest</code> it did not work.  I initially started by building out <code>--full-tools </code> (I believe it was) and then went looking to reduce the overall compile time (stage0/stage1/stage2 took just over 4 hours).  The above list was what I managed to reduce it to while still having it actually work (~170mins compile time at this point)</p>",
        "id": 278435650,
        "sender_full_name": "Grommish",
        "timestamp": 1649545400
    },
    {
        "content": "<p>I'm now at the point where I can use <code>-Z build-std</code> on the <code>cargo</code> invoke to build out the secondary TARGET std rather than building everything again as a per-target toolchain</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">RustPackage</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"o\">/</span><span class=\"n\">Compile</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">cd</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"n\">PKG_BUILD_DIR</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"cp\">$(</span><span class=\"n\">RUST_BUILD_FLAGS</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"n\">RUSTC_TARGET_ARCH</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">endef</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278435723,
        "sender_full_name": "Grommish",
        "timestamp": 1649545526
    },
    {
        "content": "<p>For context, I cannot use config.toml directly, I need to set flags via  <code>./configure</code> to create it. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\"> </span><span class=\"n\">The</span><span class=\"w\"> </span><span class=\"n\">Flags</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">Common</span><span class=\"w\"> </span><span class=\"n\">between</span><span class=\"w\"> </span><span class=\"n\">HOST</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">TARGET</span><span class=\"w\"></span>\n<span class=\"n\">RUST_COMMON_ARGS</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">build</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">RUSTC_HOST_ARCH</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">compression</span><span class=\"o\">-</span><span class=\"n\">formats</span><span class=\"o\">=</span><span class=\"n\">xz</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">link</span><span class=\"o\">-</span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">plugins</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">missing</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">ninja</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">optimize</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">optimize</span><span class=\"o\">-</span><span class=\"n\">llvm</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">sanitizers</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">release</span><span class=\"o\">-</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"o\">=</span><span class=\"n\">rust</span><span class=\"p\">.</span><span class=\"n\">musl</span><span class=\"o\">-</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">TOOLCHAIN_DIR</span><span class=\"p\">)</span><span class=\"w\"></span>\n##<span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"n\">Because</span><span class=\"w\"> </span><span class=\"n\">OpenWrt</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">configure</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">recognized</span><span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"kr\">override</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">our</span><span class=\"w\"> </span><span class=\"n\">own</span><span class=\"p\">.</span><span class=\"w\"></span>\n#<span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"n\">Rust</span><span class=\"w\"> </span><span class=\"n\">HOST</span><span class=\"w\"> </span><span class=\"n\">Configuration</span><span class=\"w\"> </span><span class=\"n\">Arguments</span><span class=\"w\"></span>\n<span class=\"n\">HOST_CONFIGURE_ARGS</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">RUSTC_HOST_ARCH</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">RUSTC_HOST_ARCH</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">bindir</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">libdir</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">sysconfdir</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">datadir</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">mandir</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">man</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"p\">{</span><span class=\"n\">RUST_COMMON_ARGS</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278435874,
        "sender_full_name": "Grommish",
        "timestamp": 1649545760
    },
    {
        "content": "<p>The effective <code>./configure</code> call:</p>\n<p><code>if [ -x configure ]; then cp -fpR /home/grommish/openwrt/scripts/config.{guess,sub} /home/grommish/openwrt/build_dir/hostpkg/rust-1.60.0// &amp;&amp; CC=\"gcc\" CFLAGS=\"-O2 -I/home/grommish/openwrt/staging_dir/host/include -I/home/grommish/openwrt/staging_dir/hostpkg/include -I/home/grommish/openwrt/staging_dir/target-arm_cortex-a9+vfpv3-d16_musl_eabi/host/include\" CXX=\"g++\" CPPFLAGS=\"-I/home/grommish/openwrt/staging_dir/host/include -I/home/grommish/openwrt/staging_dir/hostpkg/include -I/home/grommish/openwrt/staging_dir/target-arm_cortex-a9+vfpv3-d16_musl_eabi/host/include\" CXXFLAGS=\"\" LDFLAGS=\"-L/home/grommish/openwrt/staging_dir/host/lib -L/home/grommish/openwrt/staging_dir/hostpkg/lib -L/home/grommish/openwrt/staging_dir/target-arm_cortex-a9+vfpv3-d16_musl_eabi/host/lib\" CONFIG_SHELL=\"/usr/bin/env bash\"  bash ./configure --target=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --prefix=/home/grommish/openwrt/staging_dir/host --bindir=/home/grommish/openwrt/staging_dir/host/bin --libdir=/home/grommish/openwrt/staging_dir/host/lib --sysconfdir=/home/grommish/openwrt/staging_dir/host/etc --datadir=/home/grommish/openwrt/staging_dir/host/share --mandir=/home/grommish/openwrt/staging_dir/host/man --build=x86_64-unknown-linux-gnu --dist-compression-formats=xz --enable-llvm-link-shared --enable-llvm-plugins --enable-missing-tools --enable-ninja --enable-optimize --enable-optimize-llvm --enable-parallel-compiler --enable-sanitizers --release-channel=nightly --set=rust.musl-root=/home/grommish/openwrt/staging_dir/toolchain-arm_cortex-a9+vfpv3-d16_gcc-11.2.0_musl_eabi</code></p>\n<p>I'm still testing the <code>rust.musl-root</code> as that changes per target and I suspect will cause an issue that I'll need to deal with down the line</p>",
        "id": 278435966,
        "sender_full_name": "Grommish",
        "timestamp": 1649545921
    },
    {
        "content": "<p>Any suggestions are welcome as while it works, it's janky..  Making it work first, then making it work _correctly_ are two different things for me</p>",
        "id": 278436102,
        "sender_full_name": "Grommish",
        "timestamp": 1649546085
    },
    {
        "content": "<p>Basically, I need to either 1) build out every target toolchain explicitly, every time, or, I need to replicate <code>rustup</code> without actually being able to use <code>rustup</code> (rustup statically links and MUSL is dynamically linked), aside from the issues of having only upstreamed one of the new Tier 3 tuples needed (<code>mips64-openwrt-linux-musl</code>) which wouldn't be available to <code>rustup</code></p>",
        "id": 278436184,
        "sender_full_name": "Grommish",
        "timestamp": 1649546230
    },
    {
        "content": "<p>Is there a <code>RUSTFLAGS</code> for setting the <code>musl-root</code> that will be passed to the compiler?  Something like:</p>\n<p><code>RUSTFLAGS=\"target.mips64-openwrt-linux-musl.musl-root=xxxx\"</code>?</p>",
        "id": 278436529,
        "sender_full_name": "Grommish",
        "timestamp": 1649546832
    },
    {
        "content": "<p>End goal is to have the OpenWrt builtbots create the various supported HOST toolchains and allow the imagebuilder/source-builders to just grab and install the compiled HOST toolchain and use the <code>-Z build-std</code> to locally build for the target arch when <code>cargo build</code> is called to build a cargo end-package</p>",
        "id": 278436913,
        "sender_full_name": "Grommish",
        "timestamp": 1649547425
    },
    {
        "content": "<p>Ok.. Perhaps I'm asking the wrong question or going about this in the wrong way..</p>\n<p>Previously built toolchain for <code>x86_64-unknown-linux-gnu</code> and installed into <code>CARGO_HOME</code>and working, and includes <code>rustc-src</code> installed in<code>CARGO_HOME/lib/rustlib/src/</code></p>\n<p>Targeting a new tuple (<code>mips64-openwrt-linux-musl</code>) that has it's own generated <code>config.toml</code> to include things like <code>musl-root</code> (which will change on a per-target basis) or other <code>musl</code> based settings.  This would NOT be build in the same build directory as the previously build tuple, as it effectively is a fresh expansion of the source tarball (cloned from the git repo) each time.</p>\n<p>Given that,  is there a way to invoke <code>x.py</code> to <code>build</code>/<code>install</code> for building just the <code>--stage2 library/std</code> using the <code>CARGO_HOME/lib/rustlib/src/</code> (<code>--src</code>?)  without rebuilding the <code>stage0/1</code> (<code>-i</code>?)</p>\n<p><code>$(PYTHON) x.py install --config ./config.toml -i --stage2 --src $(CARGO_HOME)/lib/rustlib/src library/std</code>?</p>",
        "id": 278486324,
        "sender_full_name": "Grommish",
        "timestamp": 1649620037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> it sounds like you want to bootstrap using a newly built compiler? You can do that with <code>rustc = ...</code> in config.toml, and then only have a --stage 1 build instead of needing to build stage 2. It's never sound to build stage 2 while skipping stage 1, but if you bootstrap with a compiler built from the same sources you get essentially the same effect.</p>",
        "id": 278488348,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649622909
    },
    {
        "content": "<p>Yes.. I currently build out the HOST rustc/cargo toolchain (<code>x86_64-unknown-linux-gnu</code>) and install it to the host buildroot (CARGO_HOME).  I build out <code>cargo rustc rustc-dev rustc-src rustfmt rust-src rust-std</code> (though that was with <code>dist</code> rather than <code>build</code>.. I'm seeing I need to refactor those for building with <code>build</code>)</p>\n<p>That gives me the HOST rustc/cargo installed and callable.</p>\n<p>At that point, I need to build the various target toolchains (IE <code>mips64-openwrt-linux-musl</code>, <code>armv7-openwrt-linux-muslgnueabihf</code>,  <code>aarch64-openwrt-linux-musl</code>, etc) which are patched into the <code>compiler/rustc_target/src/spec</code> in the HOST and TARGET repos, so they both know about the custom tuple defines.</p>\n<p>I wanted to attempt to use <code>cargo build -Z build-std --target xxxxx</code> with the HOST install, but since I cannot setup <code>musl-root</code> as a runtime option (and each TARGET has its own <code>musl-root</code> toolchain directory, so this has to change per target)</p>\n<p>I was looking at:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"o\">=</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"o\">=</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">rustc</span><span class=\"o\">=</span><span class=\"cp\">$(</span><span class=\"n\">CARGO_HOME</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">set</span><span class=\"o\">=</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">local</span><span class=\"o\">-</span><span class=\"n\">rebuild</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for the target toolchain builds when I make that particular target's <code>config.toml</code></p>",
        "id": 278489989,
        "sender_full_name": "Grommish",
        "timestamp": 1649625016
    },
    {
        "content": "<p>Can I just call <code>x.py install</code> directly rather than calling <code>build</code> first then <code>install</code>?  Sorry! Up until now, it's been all <code>dist</code> compiles</p>",
        "id": 278495360,
        "sender_full_name": "Grommish",
        "timestamp": 1649633299
    },
    {
        "content": "<p>I would expect that to work, yeah</p>",
        "id": 278495646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649633829
    },
    {
        "content": "<p>I will test that <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>, thank you!  I suspect you're still monitoring the PR for <code>rust-lang</code> from time to time, and if so, you can see its getting to the point that it works, just terribly shaky and inefficient - This will hopefully make it more stable and shorter to actually make.</p>",
        "id": 278496977,
        "sender_full_name": "Grommish",
        "timestamp": 1649635809
    },
    {
        "content": "<p>I am not <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278496987,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649635825
    },
    {
        "content": "<p>Fair enough <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 278497257,
        "sender_full_name": "Grommish",
        "timestamp": 1649636216
    },
    {
        "content": "<p>The default <code>.x.py build</code> doesn't build out cargo, or at least isn't installed via a default'd <code>x.py install</code></p>\n<p>Looking at the paths,</p>\n<p><code>$(PYTHON) x.py install --config ./config.toml cargo library/std rustfmt src  src/lib rustc</code> will give me everything that is needed for cargo/rustc?</p>",
        "id": 278497604,
        "sender_full_name": "Grommish",
        "timestamp": 1649636751
    }
]