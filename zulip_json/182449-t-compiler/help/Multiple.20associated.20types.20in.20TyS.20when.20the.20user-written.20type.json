[
    {
        "content": "<p>In this program</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Restriction {\n    type Inner;\n}\n\ntrait Database: Restriction&lt;Inner = u32&gt; {}\n\nstruct Test {}\n\nimpl Database for Test {}\n\nimpl Restriction for Test {\n    type Inner = u32;\n}\n\nfn main() {\n    let t = Test {};\n    let _x: &amp;dyn Database&lt;Inner = _&gt; = &amp;t;\n}\n</code></pre></div>\n<p>If I add some debug prints in mir's type checker I see that the annotated type for <code>_x</code> is <code>&amp;dyn Database&lt;Inner = _, Inner = u32&gt;</code> and normalized type is <code>&amp;dyn Database&lt;Inner = u32, Inner = u32&gt;</code>. I'm confused about why we have two <code>Inner</code>s in these types when the user-written type only has one associated type.</p>\n<p>Is this expected? Could anyone point me to some relevant documentation/code?</p>",
        "id": 224437319,
        "sender_full_name": "osa1",
        "timestamp": 1611904432
    },
    {
        "content": "<p><del>It's a bit unfortunate that <code>Ty</code>'s <code>Debug</code> is actually <code>Display</code> so I can't see how exactly this type is represented (which variant of <code>TyKind</code> etc.)</del> Just realized that I can use Debug of kind for this.</p>",
        "id": 224437761,
        "sender_full_name": "osa1",
        "timestamp": 1611904895
    },
    {
        "content": "<p>Anyone?</p>",
        "id": 224524124,
        "sender_full_name": "osa1",
        "timestamp": 1611949784
    }
]