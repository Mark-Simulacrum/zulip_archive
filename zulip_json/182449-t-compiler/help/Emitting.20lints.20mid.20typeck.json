[
    {
        "content": "<p>I'm trying to add a lint to support migrations for <code>capture_disjoint_fields</code> ( it is a breaking feature). The best time (from a perf perspective)  to emit this information would be while we process closures in typechk.</p>\n<p>I was reading through rustc dev guide and I see either a pre or a post typechk, is there a way to do it somewhere in the middle?</p>",
        "id": 221033568,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609120906
    },
    {
        "content": "<p>Can you use <code>TyCtxt::struct_span_lint_hir</code>?</p>",
        "id": 221033986,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609121584
    },
    {
        "content": "<p>I mean, you can have a lint that has no registered pass</p>",
        "id": 221034150,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609121800
    },
    {
        "content": "<p>So during typeck you can \"manually\" emit the lint, instead of walking the crate afterwards as a separate pass</p>",
        "id": 221034168,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609121863
    },
    {
        "content": "<p>Okay I didn't know that, I'll give it a shot, thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221034209,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609121892
    },
    {
        "content": "<p>I think those are called hardwired lints</p>",
        "id": 221034343,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609122154
    },
    {
        "content": "<p>See <code>rustc_lint_defs::builtin</code></p>",
        "id": 221034352,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609122175
    },
    {
        "content": "<p>Okay I think this will work for the most part. I'm wondering if there is a way to check if the lint is enabled before I perform the analysis, it is fair bit of work. </p>\n<p>One thing I see is to call <code>tcx.lint_level_at_node(lint, hir_id);</code> and see if it's deny/warn before doing the required analysis and calling in <code>struct_span_lint_hir</code>. I'm curious if there is a function that already does it that I'm not aware of</p>",
        "id": 221035360,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609124157
    },
    {
        "content": "<p>I had to do something like this for <code>#![feature(unsafe_block_in_unsafe_fn)]</code></p>",
        "id": 221066103,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609167667
    },
    {
        "content": "<p>For my case I added <a href=\"https://github.com/rust-lang/rust/pull/71862/files#diff-ae2f3c7e2f9744f7ef43e96072b10e98d4e3fe74a3a399a3ad8a810fbe56c520R777-R779\">a little helper function</a></p>",
        "id": 221066303,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1609167839
    }
]