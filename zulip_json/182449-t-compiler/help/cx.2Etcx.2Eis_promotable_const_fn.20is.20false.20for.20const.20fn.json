[
    {
        "content": "<p>For example this snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">skip_const_fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"p\">.</span><span class=\"n\">or</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><code>cx.tcx.is_promotable_const_fn</code> is false for <code>foo</code>.<br>\nThe <a href=\"https://github.com/rust-lang/rust/blob/b85e3fe010413b8c528d4de593d912a5ba024653/src/librustc_middle/query/mod.rs#L331-L338\">documentation</a></p>",
        "id": 199701201,
        "sender_full_name": "lzutao",
        "timestamp": 1591240548
    },
    {
        "content": "<p>Now I am using <code>rustc_mir::const_eval::is_const_fn</code></p>",
        "id": 199702892,
        "sender_full_name": "lzutao",
        "timestamp": 1591243171
    },
    {
        "content": "<p><code>is_promotable_const_fn</code> is an internal hack used for a specific purpose. It's related to the <code>#[rustc_promotable]</code> attribute and both should not be used lightly</p>",
        "id": 199712579,
        "sender_full_name": "oli",
        "timestamp": 1591255252
    }
]