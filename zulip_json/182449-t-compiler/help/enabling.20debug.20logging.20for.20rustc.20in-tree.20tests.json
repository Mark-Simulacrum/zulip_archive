[
    {
        "content": "<p>How do i enable Rust compiler debug assertions (specifically, so I can see <code>debug!</code> log messages in the library APIs I'm testing) when running <code>#[cfg(test)]</code> in-tree unit tests? </p>\n<p>I'm writing some unit tests in <code>rustc_mir</code> for coverage, and <code>debug</code> macros (including logs and debug_asserts) are not executing, even though debug assertions work for the <code>rustc</code> compiler itself. (I also tried setting <code>optimize-tests=false</code> in config.toml, and a clean build, but it made no difference.) </p>\n<p>The command I use to run tests and see the stdout/stderr is: <code>RUSTC_LOG=\"rustc_mir::transform::coverage=debug\" ./x.py test compiler/rustc_mir --rustc-args \"-C debug-assertions=on\" --test-args \"--show-output coverage\"</code></p>\n<p>(It looks like <code>--rustc-args</code> is ignored, even with invalid flags/args.)</p>",
        "id": 216174152,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1604986678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> debug-logging = true</p>",
        "id": 216174820,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604987751
    },
    {
        "content": "<p>Unless you mean the logging for tests is being swallowed by compiletest</p>",
        "id": 216174875,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604987829
    },
    {
        "content": "<p>Then you want -vv</p>",
        "id": 216174877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604987834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Thanks, but unless the comments in config.toml.example are wrong, the configuration should be set. And <code>-vv</code> doesn't show any debug messages either, FYI. I'm not setting <code>debug-logging = true</code> explicitly, but I have <code>debug = true</code>, which supposedly implies <code>debug_assertions</code>, which implies <code>debug_logging</code>. The debug messages do show up when I run <code>rustc</code> directly. But using the same build (with only the test code being recompiled) the debug messages and debug assertions do not show up.</p>",
        "id": 216175454,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1604988607
    },
    {
        "content": "<p>To be more clear hopefully, <code>debug_assert!(false)</code> should panic, but it doesn't. So it's not log messages being swallowed. They aren't being generated.</p>",
        "id": 216178903,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1604993519
    },
    {
        "content": "<p>I tried explicitly setting <code>debug-logging=true</code> but still got no logs (with or without <code>-vv</code>).</p>",
        "id": 216296224,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605056712
    },
    {
        "content": "<p>I think I see that <code>debug_assert!()</code> and <code>debug!()</code> macros are compiled in or out based on different criteria, so <code>-C debug-assertions=on</code> (if I could set it) would enable the former macro, but not the latter (logs).</p>",
        "id": 216296343,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605056824
    },
    {
        "content": "<p>FYI, I was able to enable <code>debug-assertions</code> by changing bootstrap/test.rs. The in-tree tests do ignore the <code>--rustc-args</code> flag. That flag is only passed to <code>compiletest</code>. Unfortunately, a side effect of that change was, every time I ran <code>./x.py test ...</code>, cargo recompiled all of <code>rustc</code>. That's probably why <code>--rustc-args</code> was not applied to in-tree tests in the first place. Sucks to lose that option though.</p>",
        "id": 216296547,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057001
    },
    {
        "content": "<p>But it's really hard to figure out what to set or change to enable the debug logs. A \"profile\" (or \"CARGO_PROFILE_...\" environment variable)? Or a \"max_level_...\" feature for setting the max log level? Something else? I just don't quite follow where the defaults are getting set or where the best place to override them would be.</p>",
        "id": 216296911,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057260
    },
    {
        "content": "<p>(I also realize the topic title was wrong, since I really don't care as much about enabling debug assertions as I do about debug logging. Sorry.)</p>",
        "id": 216296971,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057316
    },
    {
        "content": "<p>I'm still confused why logging + assertions isn't getting enabled by normal <code>debug-assertions = true</code></p>",
        "id": 216296987,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057341
    },
    {
        "content": "<p>what command are you using to test?</p>",
        "id": 216296994,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057345
    },
    {
        "content": "<p>Mentioned in original message: <br>\nThe command I use to run tests and see the stdout/stderr is: RUSTC_LOG=\"rustc_mir::transform::coverage=debug\" ./x.py test compiler/rustc_mir --rustc-args \"-C debug-assertions=on\" --test-args \"--show-output coverage\"</p>",
        "id": 216297054,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057371
    },
    {
        "content": "<p>oh I see you're running unit tests</p>",
        "id": 216297064,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057383
    },
    {
        "content": "<p>yes</p>",
        "id": 216297072,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057390
    },
    {
        "content": "<p>wait, so you mean that logs and asserts <em>in the unit tests</em> aren't running?</p>",
        "id": 216297106,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057428
    },
    {
        "content": "<p>as opposed to asserts in the compiler?</p>",
        "id": 216297110,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057438
    },
    {
        "content": "<p>appears so</p>",
        "id": 216297112,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057441
    },
    {
        "content": "<p>ok, the issue with logging is probably that you haven't registered a logger</p>",
        "id": 216297122,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057463
    },
    {
        "content": "<p>try calling <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/fn.init_rustc_env_logger.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/fn.init_rustc_env_logger.html</a></p>",
        "id": 216297179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057492
    },
    {
        "content": "<p>Is that a normal thing to do when writing unit tests in the compiler?</p>",
        "id": 216297189,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057508
    },
    {
        "content": "<p>well writing unit tests is itself pretty unusual <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216297199,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057522
    },
    {
        "content": "<p>not sure about asserts but that makes more sense why they aren't being enabled, tests are compiled separately from the compiler itself</p>",
        "id": 216297209,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057531
    },
    {
        "content": "<p>are you using <code>assert!</code> or <code>debug_assert!</code>?</p>",
        "id": 216297307,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057620
    },
    {
        "content": "<p>I would make it <code>assert!</code> unconditionally if it's just a test</p>",
        "id": 216297319,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057631
    },
    {
        "content": "<blockquote>\n<p>well writing unit tests is itself pretty unusual<br>\ntrue</p>\n</blockquote>",
        "id": 216297337,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057661
    },
    {
        "content": "<p>sorry, it was misleading to talk about debug_assert!() when trying to explain my symptom. Ignore that.</p>",
        "id": 216297404,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057730
    },
    {
        "content": "<p>rustc_mir Cargo.toml doesn't include rustc_driver, so I'll have to add that I guess</p>",
        "id": 216297418,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057762
    },
    {
        "content": "<p>rustc_ dependencies don't go in cargo.toml</p>",
        "id": 216297427,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057779
    },
    {
        "content": "<p>use <code>extern crate rustc_driver;</code> instead</p>",
        "id": 216297436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057785
    },
    {
        "content": "<p>they're loaded from the sysroot</p>",
        "id": 216297440,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057791
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/lib.rs#L24-L30\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/lib.rs#L24-L30</a></p>",
        "id": 216297456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057827
    },
    {
        "content": "<p>OK cool... but specifically I was looking at compiler/rustc_mir/Cargo.toml</p>",
        "id": 216297460,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057831
    },
    {
        "content": "<p>right, yes, it won't be there</p>",
        "id": 216297469,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057840
    },
    {
        "content": "<p>although hmm you have a dependency issue that rustc_driver itself depends on rustc_mir</p>",
        "id": 216297526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057872
    },
    {
        "content": "<p>so you probably need to copy the implementation of <code>init_env_logger</code></p>",
        "id": 216297538,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057885
    },
    {
        "content": "<p>ok</p>",
        "id": 216297552,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605057900
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> - is there a simple way to get debug logging in unit tests? right now the output is <em>logged</em> but not <em>emitted</em> because the logger is never initialized</p>",
        "id": 216297571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605057941
    },
    {
        "content": "<p>Nope, tests need to init the logger if they want output. It's AFAIK basically an unsolved problem at this point in rust</p>",
        "id": 216297656,
        "sender_full_name": "simulacrum",
        "timestamp": 1605057992
    },
    {
        "content": "<p>got it</p>",
        "id": 216297670,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058011
    },
    {
        "content": "<p>thank you</p>",
        "id": 216297677,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058022
    },
    {
        "content": "<p>(it's possibly one reason unit tests are not super popular in rustc)</p>",
        "id": 216297686,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058038
    },
    {
        "content": "<p>That said, if you have a specific test it should be like one line to add I think</p>",
        "id": 216297695,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> unfortunately not, because <code>init_logger</code> is only in <code>rustc_driver</code></p>",
        "id": 216297702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058070
    },
    {
        "content": "<p><a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/enabling.20debug.20logging.20for.20rustc.20in-tree.20tests/near/216297526\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/enabling.20debug.20logging.20for.20rustc.20in-tree.20tests/near/216297526</a></p>",
        "id": 216297709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058076
    },
    {
        "content": "<p>Sure yeah :/</p>",
        "id": 216297757,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> are these <em>unit unit</em> tests or in, say, rustc_mir/tests/foo.rs?</p>",
        "id": 216297778,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058147
    },
    {
        "content": "<p>for the latter, rustc_driver would likely work today I think (though it's arguably a bug depending on how you look at it)</p>",
        "id": 216297811,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058192
    },
    {
        "content": "<p>I'm trying to address a review feedback requests to add unit tests (not sure if you'd call them <em>unit unit tests</em> ;-) ) to some of the more complex parts of the rust coverage algorithms in <code>rustc_mir/transform/coverage</code>, new submodule <code>tests.rs</code></p>",
        "id": 216297915,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058272
    },
    {
        "content": "<p>where is <code>rustc_mir/tests</code>? Or is that something that, if I added it, you think it would work?</p>",
        "id": 216298044,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058414
    },
    {
        "content": "<p>right, so the rustc_mir/tests directory would basically be the equivalent of a ui-fulldeps test</p>",
        "id": 216298054,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058440
    },
    {
        "content": "<p>in terms of what it can do</p>",
        "id": 216298095,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058447
    },
    {
        "content": "<p>today, anyway, in the long term it'll be more limited</p>",
        "id": 216298105,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058460
    },
    {
        "content": "<p>I think probably I would recommend that you go for the copy/paste of the init_logger function from rustc_driver</p>",
        "id": 216298113,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058478
    },
    {
        "content": "<p>or feel free to move it to like rustc_data_structures, too</p>",
        "id": 216298124,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058491
    },
    {
        "content": "<p>(the more limited is fixing the bug that I mentioned -- currently tests for rustc crates depend on the entire rustc build in rustbuild, AFAIK, which isn't actually necessary)</p>",
        "id": 216298155,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058522
    },
    {
        "content": "<p>right, I'm leaning that way ... Thanks</p>",
        "id": 216298160,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058526
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216298164,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/enabling.20debug.20logging.20for.20rustc.20in-tree.20tests/near/216298155\">said</a>:</p>\n<blockquote>\n<p>(the more limited is fixing the bug that I mentioned -- currently tests for rustc crates depend on the entire rustc build in rustbuild, AFAIK, which isn't actually necessary)</p>\n</blockquote>\n<p>ohhhh, yeah that would be nice to fix</p>",
        "id": 216298183,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058551
    },
    {
        "content": "<p>I think we talked about <code>test library/core</code> not having to build std at some point, too</p>",
        "id": 216298240,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058574
    },
    {
        "content": "<p>err maybe not test but <code>build</code></p>",
        "id": 216298257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058584
    },
    {
        "content": "<p>er, well, perhaps both depending on the way you draw arrows</p>",
        "id": 216298271,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058604
    },
    {
        "content": "<p>build is \"easy\" in some sense, test is more, uh, unclear</p>",
        "id": 216298286,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058618
    },
    {
        "content": "<p>yeah I gave up on getting test to work for <code>clippy</code></p>",
        "id": 216298296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058631
    },
    {
        "content": "<p>I think there's two versions of <code>std</code> or something like that?</p>",
        "id": 216298304,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> - Just so I'm clear, I do need to bring <code>tracing</code> into <code>rustc_mir/Cargo.toml</code> (or <code>rustc_data_structures</code> or wherever), right?</p>",
        "id": 216298444,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058792
    },
    {
        "content": "<p>I would <em>expect</em> you to be able to load it from sysroot</p>",
        "id": 216298492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058808
    },
    {
        "content": "<p>so try that first and if it doesn't work, then try dev-dependencies in cargo.toml</p>",
        "id": 216298507,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058821
    },
    {
        "content": "<p>don't put it in the main dependencies though</p>",
        "id": 216298516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058834
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  --&gt; compiler/rustc_mir/src/transform/coverage/tests.rs:12:1\n   |\n12 | extern crate tracing;\n</code></pre></div>",
        "id": 216298519,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058839
    },
    {
        "content": "<p>error[E0468]: an <code>extern crate</code> loading macros must be at the crate root</p>",
        "id": 216298528,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058850
    },
    {
        "content": "<p>ok, so put <code>extern crate tracing</code> in <code>src/lib.rs</code> with <code>cfg(test)</code></p>",
        "id": 216298548,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058869
    },
    {
        "content": "<p>maybe i don't need #[macro_use]</p>",
        "id": 216298553,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058871
    },
    {
        "content": "<p>or that, yeah</p>",
        "id": 216298561,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058880
    },
    {
        "content": "<p>haha, well, now debug! is not recognized</p>",
        "id": 216298594,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605058916
    },
    {
        "content": "<p><code>use tracing::debug;</code></p>",
        "id": 216298643,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605058932
    },
    {
        "content": "<p>er you should definitely be putting tracing in Cargo.toml for rustc_mir</p>",
        "id": 216298655,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058954
    },
    {
        "content": "<p>indeed, it's already there</p>",
        "id": 216298664,
        "sender_full_name": "simulacrum",
        "timestamp": 1605058966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> - thinking about where to put this eventually, is there any \"test driver\" code in rustc that gets executed before a <code>test_...</code> function starts? (Just, if so, that might be a good place to put this init logging stuff.)</p>",
        "id": 216299404,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605059707
    },
    {
        "content": "<p>no, there isn't</p>",
        "id": 216299427,
        "sender_full_name": "simulacrum",
        "timestamp": 1605059737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> not that I know of - there's no entrypoint, the test function <em>is</em> the entrypoint</p>",
        "id": 216299428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605059739
    },
    {
        "content": "<p>it literally needs to go in each #[test] function</p>",
        "id": 216299432,
        "sender_full_name": "simulacrum",
        "timestamp": 1605059744
    },
    {
        "content": "<p>makes sense, ok</p>",
        "id": 216299435,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605059752
    },
    {
        "content": "<p>it's not the entry point, but the entry point is synthesized by the compiler (basically a big main function calling a bunch of other stuff)</p>",
        "id": 216299480,
        "sender_full_name": "simulacrum",
        "timestamp": 1605059765
    },
    {
        "content": "<p>it's sort of desirable to have \"before each test\" and \"on startup\" functions in unit tests, but custom test frameworks and generally libtest ergonomics have long lacked a driver/interested party</p>",
        "id": 216299504,
        "sender_full_name": "simulacrum",
        "timestamp": 1605059804
    },
    {
        "content": "<p><code>extern crate tracing_subscriber;</code> or <code>use ...</code> for that, doesn't work from the tests, but appears necessary. I <em>think</em> I need to add it to <code>rustc_mir/Cargo.toml</code> (replicating what's in <code>rustc_driver/Config.toml</code>. Yes?</p>",
        "id": 216300050,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605060279
    },
    {
        "content": "<p>yes, the same way tracing is now</p>",
        "id": 216300060,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605060295
    },
    {
        "content": "<p>yep that sounds correct</p>",
        "id": 216300082,
        "sender_full_name": "simulacrum",
        "timestamp": 1605060317
    },
    {
        "content": "<p>you could add it to dev-deps in Cargo.toml though (new section)</p>",
        "id": 216300088,
        "sender_full_name": "simulacrum",
        "timestamp": 1605060326
    },
    {
        "content": "<p>since it's not needed for main build</p>",
        "id": 216300090,
        "sender_full_name": "simulacrum",
        "timestamp": 1605060330
    },
    {
        "content": "<p>indeed, I would say \"should\"</p>",
        "id": 216300094,
        "sender_full_name": "simulacrum",
        "timestamp": 1605060335
    },
    {
        "content": "<p>Hmm... I'm not sure what to do with this logger init...</p>\n<p>Logging works for the first test, but panics for all others.</p>\n<p>I tried initializing at the start of each test, and also tried initializing ONLY once. Different errors in each case, but the same result. Only one test works, and the rest panic.</p>\n<p>If I call it at the start of each test, all but the first test panic with:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;transform::coverage::tests::test_covgraph_switchint_loop_then_inner_loop_else_break&#39; panicked at &#39;no ImplicitCtxt stored in tls&#39;, compiler/rustc_middle/src/ty/context.rs:1747:54\n</code></pre></div>\n<p>If I call it only once, all but the first test panic with:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;transform::coverage::tests::test_covgraph_goto_switchint&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: &quot;PoisonError { inner: .. }&quot;&#39;, /usr/local/google/home/richkadel/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-tree-0.1.6/src/lib.rs:312:42\n</code></pre></div>",
        "id": 216302150,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605062598
    },
    {
        "content": "<p>Wait.. the first error is wrong</p>",
        "id": 216302257,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605062723
    },
    {
        "content": "<p>Copied the wrong one. The logger error I got when initializing for each test was:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;transform::coverage::tests::test_find_loop_backedges_two&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: SetGlobalDefaultError { _no_construct: () }&#39;, compiler/rustc_mir/src/transform/coverage/tests.rs:51:57\n</code></pre></div>",
        "id": 216302280,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605062761
    },
    {
        "content": "<p>That error comes from the only <code>tracing::</code> call in the initializer:</p>\n<div class=\"codehilite\"><pre><span></span><code>   tracing::subscriber::set_global_default(subscriber).unwrap();\n</code></pre></div>",
        "id": 216302371,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605062844
    },
    {
        "content": "<p>So it seems like I can only call <code>set_global_default</code> once, but when I do that, I get the <code>PoisonError</code></p>",
        "id": 216302444,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605062893
    },
    {
        "content": "<p>don't call unwrap</p>",
        "id": 216302481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605062960
    },
    {
        "content": "<p>and then you'll be good :)</p>",
        "id": 216302482,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605062964
    },
    {
        "content": "<p>Well, all that does is ignore the Err that's returned. Since setting the global default fails, it has the same effect as not calling it at all (after the first call), and results in the <code>PoisonError</code> again.</p>",
        "id": 216302662,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063205
    },
    {
        "content": "<p>shouldn't it already be set from the first call?</p>",
        "id": 216302675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605063225
    },
    {
        "content": "<p>I think it is, which is why the others fail.</p>",
        "id": 216302715,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063246
    },
    {
        "content": "<p>so there you go</p>",
        "id": 216302734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605063286
    },
    {
        "content": "<p>you accomplished the goal</p>",
        "id": 216302738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605063294
    },
    {
        "content": "<p>not all errors need to be handled</p>",
        "id": 216302740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605063299
    },
    {
        "content": "<p>?</p>",
        "id": 216302743,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063302
    },
    {
        "content": "<p>It panics calling <code>debug!()</code></p>",
        "id": 216302766,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063320
    },
    {
        "content": "<p>on all but the first test</p>",
        "id": 216302773,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063329
    },
    {
        "content": "<p>oh I see, I was missing that info <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 216302775,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605063330
    },
    {
        "content": "<p>sorry</p>",
        "id": 216302776,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063336
    },
    {
        "content": "<p>More context:</p>",
        "id": 216302935,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063585
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  16:     0x7fb14717c503 - core::result::unwrap_failed::h46151a4246fa4cac\n                               at /usr/local/google/home/richkadel/rust/library/core/src/result.rs:1220:5\n  17:     0x55b6fe8921be - &lt;tracing_tree::HierarchicalLayer&lt;W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_event::h15bbdc22078f1087\n  18:     0x55b6fedcd982 - tracing_core::dispatcher::Dispatch::event::hcf30211326094ac1\n                               at /usr/local/google/home/richkadel/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.17/src/dispatcher.rs:523:9\n  19:     0x55b6fedcd982 - tracing_core::event::Event::dispatch::{{closure}}::hfecfa902ad865e1f\n                               at /usr/local/google/home/richkadel/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.17/src/event.rs:35:13\n  20:     0x55b6fedcd982 - tracing_core::dispatcher::get_default::{{closure}}::he826e8d88610a083\n                               at /usr/local/google/home/richkadel/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.17/src/dispatcher.rs:337:24\n  21:     0x55b6fedcd982 - std::thread::local::LocalKey&lt;T&gt;::try_with::h9dc94c9698529097\n                               at /usr/local/google/home/richkadel/rust/library/std/src/thread/local.rs:272:16\n  22:     0x55b6fedcd982 - tracing_core::dispatcher::get_default::h7368a7ced1dab37b\n                               at /usr/local/google/home/richkadel/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.17/src/dispatcher.rs:334:5\n  23:     0x55b6fedce2b1 - tracing_core::event::Event::dispatch::he7cabf3e4b562110\n                               at /usr/local/google/home/richkadel/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-core-0.1.17/src/event.rs:34:9\n  24:     0x55b6fe87dc13 - rustc_mir::transform::coverage::graph::CoverageGraph::add_basic_coverage_block::hf08e034e1316d5a3\n</code></pre></div>",
        "id": 216302939,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063593
    },
    {
        "content": "<p>I don't think this is something I can help with, I would ask in the tracing repo</p>",
        "id": 216303006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605063612
    },
    {
        "content": "<p><a href=\"https://github.com/tokio-rs/tracing/\">https://github.com/tokio-rs/tracing/</a></p>",
        "id": 216303012,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605063627
    },
    {
        "content": "<p>ok, thanks for getting me this far!</p>",
        "id": 216303016,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605063634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> might be enough to just add a static Once to the init function in driver or wherever we've put it now and bail out</p>",
        "id": 216304215,
        "sender_full_name": "simulacrum",
        "timestamp": 1605065295
    },
    {
        "content": "<p>That should be fine</p>",
        "id": 216304224,
        "sender_full_name": "simulacrum",
        "timestamp": 1605065311
    },
    {
        "content": "<p>Sounds good. </p>\n<p>I think the PoisonError may be my fault, actually. May not be related to the logger init. So I'll clean that up and if I get it working, I'll push a PR for this API.</p>",
        "id": 216304337,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605065444
    },
    {
        "content": "<p>Thanks again for the advice. Unfortunately, I now realize that enabling the debug logs is not going to work for my test cases because some of the debug logs print MIR objects that leverage global context variables that my tests don't attempt to initialize. </p>\n<p>(As Joshua was saying, there may be reasons like this that unit tests are rare in the compiler.)</p>\n<p>It's more trouble than it's worth for me at this point, sadly. But that's OK.</p>",
        "id": 216307695,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1605070349
    }
]