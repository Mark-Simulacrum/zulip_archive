[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"248599\">@llogiq</span> (cc <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>) -- so about the lint</p>",
        "id": 180085458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081312
    },
    {
        "content": "<p>actually i'm not sure if this is the best stream but .. why not</p>",
        "id": 180085482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081324
    },
    {
        "content": "<p>I don't have a ton of time just now but if we create an issue I could also leave notes there, is there one?</p>",
        "id": 180085518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081343
    },
    {
        "content": "<p>Heh; just woke up -- Haven't had a chance to review the developments in the thread</p>",
        "id": 180085527,
        "sender_full_name": "centril",
        "timestamp": 1573081354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I made a tracking issue when changing the PR: <a href=\"https://github.com/rust-lang/rust/issues/65992\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65992\">https://github.com/rust-lang/rust/issues/65992</a></p>",
        "id": 180085541,
        "sender_full_name": "centril",
        "timestamp": 1573081373
    },
    {
        "content": "<p>Ah, great</p>",
        "id": 180085544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081376
    },
    {
        "content": "<p>thanks</p>",
        "id": 180085546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081378
    },
    {
        "content": "<p>(it is also used in the code in the PR to activate the fallback)</p>",
        "id": 180085555,
        "sender_full_name": "centril",
        "timestamp": 1573081390
    },
    {
        "content": "<p>Ok, so I understand you want the lint to reach into inference to see if <code>!</code> gets inferred because of fallback and then see if there would be a different outcome without the fallback.</p>",
        "id": 180085957,
        "sender_full_name": "llogiq",
        "timestamp": 1573081690
    },
    {
        "content": "<p>I created <a href=\"https://github.com/rust-lang/rust/issues/66173\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66173\">https://github.com/rust-lang/rust/issues/66173</a> to track the lint specifically</p>",
        "id": 180086076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081818
    },
    {
        "content": "<blockquote>\n<p>Ok, so I understand you want the lint to reach into inference to see if <code>!</code> gets inferred because of fallback and then see if there would be a different outcome without the fallback.</p>\n</blockquote>\n<p>well</p>",
        "id": 180086186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081929
    },
    {
        "content": "<p>so what I had in mind was</p>",
        "id": 180086189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081932
    },
    {
        "content": "<p>the simplest version would be</p>",
        "id": 180086195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081937
    },
    {
        "content": "<p>at the point where we decide to apply fallback to some type variable <code>?T</code></p>",
        "id": 180086204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081945
    },
    {
        "content": "<p>we can inspect the pending obligations and things to get a list of all the type variables that are related to <code>?T</code></p>",
        "id": 180086216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081965
    },
    {
        "content": "<p>that is effectively the set that are <em>now</em> falling back to <code>()</code> and which <em>will</em> fallback to <code>!</code></p>",
        "id": 180086223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573081981
    },
    {
        "content": "<p>we can then see where those type variables appear -- e.g., do they appear in the types of variables and things?</p>",
        "id": 180086249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082010
    },
    {
        "content": "<p>we could also see if there are pending obligations like <code>?T: Debug</code> or something that are true for <code>()</code> but not for <code>!</code>, or where it might change behavior</p>",
        "id": 180086265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082028
    },
    {
        "content": "<p>I'm not sure exactly when we want to lint, that is an interesting question</p>",
        "id": 180086269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082038
    },
    {
        "content": "<p>but I guess the first step would be to get this \"tainted\" set</p>",
        "id": 180086308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082043
    },
    {
        "content": "<p>honestly I sort of suspect that <em>anytime</em> this fallback affects live code, something...fishy may be going on worth linting about, even if we <em>don't</em> change the fallback...</p>",
        "id": 180086332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082073
    },
    {
        "content": "<p>I wonder how big the fallout would be if we removed the fallback altogether in a crater run</p>",
        "id": 180086454,
        "sender_full_name": "centril",
        "timestamp": 1573082180
    },
    {
        "content": "<p>worth an experiment</p>",
        "id": 180086559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082295
    },
    {
        "content": "<p>except that I feel like I tried it once and it was a problem..?</p>",
        "id": 180086571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082309
    },
    {
        "content": "<p>can't remember</p>",
        "id": 180086572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082313
    },
    {
        "content": "<p>I know we tried removing <code>i32</code> fallback and it was glorious...except for testing code :) we had to put it back eventually</p>",
        "id": 180086582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082329
    },
    {
        "content": "<p>too long ago <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> crater queue is reasonably sized for it to be worth it I recon</p>",
        "id": 180086585,
        "sender_full_name": "centril",
        "timestamp": 1573082336
    },
    {
        "content": "<p>yeah this was all like back in 2012 or something :)</p>",
        "id": 180086601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573082351
    },
    {
        "content": "<p>Ok will be looking into obligations.</p>",
        "id": 180086977,
        "sender_full_name": "llogiq",
        "timestamp": 1573082698
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"248599\">@llogiq</span> -- did you ever get time to investigate? Also, I was curious if you'd want to look into experimenting with a fix for <a href=\"https://github.com/rust-lang/rust/issues/66757\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66757\">https://github.com/rust-lang/rust/issues/66757</a> ?</p>",
        "id": 182387934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575319715
    },
    {
        "content": "<p>As I wrote on github, I was pretty swamped with work. So, can you or <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  help me out a bit so I can hit the ground running?</p>",
        "id": 182801432,
        "sender_full_name": "llogiq",
        "timestamp": 1575664770
    },
    {
        "content": "<p>I'm not familiar enough with inference to provide help</p>",
        "id": 182801523,
        "sender_full_name": "centril",
        "timestamp": 1575664792
    },
    {
        "content": "<p>In that case, I'd be happy if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> could help me find that a type fell back to <code>()</code> and how to get its outstanding trait obligations to check if our bad case applies?</p>",
        "id": 182803137,
        "sender_full_name": "llogiq",
        "timestamp": 1575665409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have a minute to give a broad overview where to find the code to adapt?</p>",
        "id": 183092275,
        "sender_full_name": "llogiq",
        "timestamp": 1576005704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248599\">@llogiq</span> will try to do so soon...</p>",
        "id": 183203890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576099805
    },
    {
        "content": "<p>Happy new year, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>! Can you set aside a few minutes to give me a few code spans to look into for the type fallback and how to check the obligations?</p>",
        "id": 184857953,
        "sender_full_name": "llogiq",
        "timestamp": 1578246801
    },
    {
        "content": "<p>You can probably start by looking at <code>fallback_if_possible</code> (librustc_typeck/check/mod.rs:3305), <code>next_diverging_ty_var</code> (librustc/infer/mod.rs), and the usages of <code>self.diverges</code> and <code>tcx.types.never</code> in <code>librustc_typeck/check/*</code>.</p>",
        "id": 184862489,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578254602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248599\">@llogiq</span> yes! maybe we can schedule a time for this to do a little pair programming and get started?</p>",
        "id": 185156914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1578517684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248599\">@llogiq</span> ok! Here is a <a href=\"https://mozilla.zoom.us/j/3849672730\" target=\"_blank\" title=\"https://mozilla.zoom.us/j/3849672730\">zoom url</a> we can use</p>",
        "id": 185747596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579124611
    },
    {
        "content": "<p>(others are welcome to join if they want...)</p>",
        "id": 185747608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579124626
    },
    {
        "content": "<p>LOL, well, we definitely get warnings...</p>",
        "id": 185753995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579129426
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>psyche. rustc +rust-1-stage2 ~/tmp/issue_66173.rs\nwarning: resulted from diverging fallback: !\n  --&gt; /home/nmatsakis/tmp/issue_66173.rs:15:13\n   |\n15 |       let _ = if true {\n   |  _____________^\n16 | |         unconstrained_return()\n17 | |     } else {\n18 | |         panic!()\n19 | |     };\n   | |_____^\n\nwarning: resulted from diverging fallback: !\n  --&gt; /home/nmatsakis/tmp/issue_66173.rs:15:21\n   |\n15 |       let _ = if true {\n   |  _____________________^\n16 | |         unconstrained_return()\n17 | |     } else {\n   | |_____^\n\nwarning: resulted from diverging fallback: !\n  --&gt; /home/nmatsakis/tmp/issue_66173.rs:16:9\n   |\n16 |         unconstrained_return()\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: resulted from diverging fallback: fn() -&gt; ! {unconstrained_return::&lt;!&gt;}\n  --&gt; /home/nmatsakis/tmp/issue_66173.rs:16:9\n   |\n16 |         unconstrained_return()\n   |         ^^^^^^^^^^^^^^^^^^^^\n... // continues for some time\n</pre></div>",
        "id": 185754007,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1579129435
    }
]