[
    {
        "content": "<p>I don't understand why <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/terminator/enum.TerminatorKind.html\"><code>TerminatorKind::Call.destination</code></a> is an option. I thought that if a function was returning <code>()</code>, then the \"return\" value would just be stored in a local whose type is <code>()</code>. This <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=f83058a78201422f6c7af323d24eb1f2\">little experiment</a> on the playground confirm my hypothesis (I copied the code just below). The <code>baz()</code> function have 3 locals, its own return value, and the return value of <code>foo()</code> and <code>bar()</code>. All three of them have type<code>()</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Can I always unwrap the <code>destination</code>, or is there cases where this will fail (and why?)?</p>",
        "id": 217247253,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605779335
    },
    {
        "content": "<p>It is None for diverging functions</p>",
        "id": 217251542,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605782046
    },
    {
        "content": "<p>ehh! What is a diverging function?</p>",
        "id": 217253401,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605783046
    },
    {
        "content": "<p>a function which doesn't return</p>",
        "id": 217253600,
        "sender_full_name": "lqd",
        "timestamp": 1605783183
    },
    {
        "content": "<p>Ah, a function that \"returns\" <code>!</code>?</p>",
        "id": 217253701,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605783243
    },
    {
        "content": "<p>things that loop forever or return <code>!</code></p>",
        "id": 217253721,
        "sender_full_name": "lqd",
        "timestamp": 1605783246
    },
    {
        "content": "<p>got it, thanks</p>",
        "id": 217253793,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605783313
    },
    {
        "content": "<p>mais de rien <span aria-label=\"baguette\" class=\"emoji emoji-1f956\" role=\"img\" title=\"baguette\">:baguette:</span></p>",
        "id": 217253825,
        "sender_full_name": "lqd",
        "timestamp": 1605783334
    },
    {
        "content": "<p>What, my accent is so strong you can read it?!</p>",
        "id": 217253923,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605783389
    },
    {
        "content": "<p>(nice use of english typography rules rather than french ones though :)</p>",
        "id": 217253981,
        "sender_full_name": "lqd",
        "timestamp": 1605783439
    },
    {
        "content": "<p>I try, I try. Here is an unbreakable space <code> </code> in case you need one for your french typography!</p>",
        "id": 217254091,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605783499
    },
    {
        "content": "<p>(en retour je te prête un point exclarrogatif ‽ :D)</p>",
        "id": 217254203,
        "sender_full_name": "lqd",
        "timestamp": 1605783597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  Thanks (I was looking at the keymap of my bepo keyboard and noticed that I can’t write ‽ because my compose key isn’t mapped, and I’m using the 1.0 version of the keymap. <code>‽</code> was added in the afnor (1.1) version, and after some tests, it seems that my compose file isn't up-to date since the <code>dead_latin_bepo</code> doesn't work if I change my disposition to bepo_afnor. AKA, how to loose 20 minutes at looking at keyboard configuration!!!</p>",
        "id": 217256064,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605784751
    },
    {
        "content": "<p>I have absolutely no idea of what I was doing before!</p>",
        "id": 217256122,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605784795
    }
]