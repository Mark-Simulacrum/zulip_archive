[
    {
        "content": "<p>Hi there -- I'm new to contributing to the compiler but not new to using gdb. I have used <code>./x.py build</code> to build the rust project, and my config.toml contains:</p>\n<div class=\"codehilite\"><pre><span></span><code>profile = &quot;compiler&quot;\nchangelog-seen = 2\n</code></pre></div>\n<p>When I load the stage1 rustdoc binary into gdb, it complains that there are no debug symbols. Running <code>objdump --syms</code> on the binary suggests this is not the case, and I would expect debug symbols to be built by default. Am I missing something? This is making it really difficult for me to figure out the issue I'm working on! Thanks a lot anyone who can help :)</p>\n<p>I'm on Ubuntu 20.04, using gdb 9.1.</p>",
        "id": 216805594,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605463566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364505\">@Hannah McLaughlin</span> you need <code>debuginfo = 2</code></p>",
        "id": 216805607,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605463587
    },
    {
        "content": "<p>but be warned that's like 3 GB of debuginfo, it takes way longer to compile</p>",
        "id": 216805612,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605463599
    },
    {
        "content": "<p>Ah great! Is that in the config.toml? And thanks for the heads up about the compilation time!</p>",
        "id": 216805625,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605463618
    },
    {
        "content": "<p>if you use <code>debug = true</code> instead it will be a lot faster, but you won't have local variables</p>",
        "id": 216805627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605463619
    },
    {
        "content": "<p>yeah, it says in config.toml.example what section it goes in (I don't remember off the top of my head)</p>",
        "id": 216805638,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605463640
    },
    {
        "content": "<p>unfortunately it will also rebuild the compiler</p>",
        "id": 216805642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605463655
    },
    {
        "content": "<p>Cheers!</p>",
        "id": 216805643,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605463655
    },
    {
        "content": "<p>also, I'm curious what issue you're working on, I might be able to point you in the right direction</p>",
        "id": 216805783,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605463897
    },
    {
        "content": "<p>Sure, I think we might have spoken briefly on Github when I took it up :)  <a href=\"https://github.com/rust-lang/rust/issues/78777\">https://github.com/rust-lang/rust/issues/78777</a></p>",
        "id": 216805867,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464027
    },
    {
        "content": "<p>I made the suggested change the other week, but it causes an ICE when running with the example given in the issue -- hence the need for debugging!</p>",
        "id": 216805909,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464051
    },
    {
        "content": "<p>I'll just get a diff and backtrace, if that is helpful</p>",
        "id": 216805911,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464057
    },
    {
        "content": "<p>rustdoc is kind of a mess so I wouldn't be surprised if that broke other things <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216805924,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605464095
    },
    {
        "content": "<p>the other way is to include <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.DefKind.html#variant.ForeignTy\"><code>ForeignTy</code></a> and that sort of thing explicitly, but it's easy to forget a variant (like I did)</p>",
        "id": 216805947,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605464150
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/passes/collect_intra_doc_links.rs b/src/librustdoc/passes/collect_intra_doc_links.rs</span>\n<span class=\"gh\">index 8be9482acff..c4b7086fdb1 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/passes/collect_intra_doc_links.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/passes/collect_intra_doc_links.rs</span>\n<span class=\"gu\">@@ -433,8 +433,9 @@ impl&lt;'a, 'tcx&gt; LinkCollector&lt;'a, 'tcx&gt; {</span>\n             Res::PrimTy(prim) =&gt; Some(\n                 self.resolve_primitive_associated_item(prim, ns, module_id, item_name, item_str),\n             ),\n<span class=\"gd\">-            Res::Def(DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias, did) =&gt; {</span>\n<span class=\"gi\">+            Res::Def(kind, did) if kind.ns() == Some(Namespace::TypeNS) =&gt; {</span>\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);\n<span class=\"gi\">+</span>\n                 // Checks if item_name belongs to `impl SomeItem`\n                 let assoc_item = cx\n                     .tcx\n</code></pre></div>",
        "id": 216805950,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464161
    },
    {
        "content": "<p>Of course my code could be entirely wrong! Backtrace coming now</p>",
        "id": 216805993,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464178
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>build/x86_64-unknown-linux-gnu/stage1/bin/rustdoc test.rs                                   0 &lt; 18:15:25\nthread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:949:43\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.49.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [type_of] computing type of `std::os::unix::process::CommandExt`\nend of query stack\n</code></pre></div>\n<p>where <a href=\"http://test.rs\">test.rs</a> is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(extern_types)]</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// The extern type Foo.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// The struct Bar.</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Does stuff</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">do_it</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// This does stuff too</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">do_it</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// See also [Foo::do_it]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// See also [Bar::do_it]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216806006,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464245
    },
    {
        "content": "<p>d'oh! forgot to actually get backtrace...</p>",
        "id": 216806013,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464263
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>RUST_BACKTRACE=1 build/x86_64-unknown-linux-gnu/stage1/bin/rustdoc test.rs                 fish-0 | 1 &lt; 18:12:37\nthread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:949:43\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::panicking::panic\n   3: rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::get_type\n   4: rustc_metadata::rmeta::decoder::cstore_impl::provide_extern::type_of\n   5: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::type_of&gt;::compute\n   6: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n   7: rustc_data_structures::stack::ensure_sufficient_stack\n   8: rustc_query_system::query::plumbing::get_query_impl\n   9: rustdoc::passes::collect_intra_doc_links::LinkCollector::resolve\n  10: rustdoc::passes::collect_intra_doc_links::LinkCollector::resolve_link\n  11: &lt;rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::fold::DocFolder&gt;::fold_item\n  12: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n  13: rustdoc::fold::DocFolder::fold_crate\n  14: rustdoc::passes::collect_intra_doc_links::collect_intra_doc_links\n  15: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n  16: rustdoc::core::run_global_ctxt\n  17: rustc_interface::passes::QueryContext::enter\n  18: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n  19: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n  20: rustc_span::with_source_map\n  21: rustc_interface::interface::create_compiler_and_run\n  22: rustdoc::core::run_core\n  23: rustdoc::main_options\n  24: scoped_tls::ScopedKey&lt;T&gt;::set\n  25: rustc_span::with_session_globals\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.49.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [type_of] computing type of `std::os::unix::process::CommandExt`\nend of query stack\n</code></pre></div>",
        "id": 216806059,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464305
    },
    {
        "content": "<p>hmm, this looks like <a href=\"https://github.com/rust-lang/rust/issues/78236\">https://github.com/rust-lang/rust/issues/78236</a></p>",
        "id": 216806061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605464310
    },
    {
        "content": "<p>except it's coming from intra-doc links</p>",
        "id": 216806064,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605464323
    },
    {
        "content": "<p>btw, I'm not sure if you've discovered the logging yet - <code>RUSTDOC_LOG=rustdoc::passes::collect_intra=debug</code> is super helpful</p>",
        "id": 216806074,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605464355
    },
    {
        "content": "<p>anyway, this panic is weird, it should be returning <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variant.Error\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variant.Error</a> instead</p>",
        "id": 216806194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605464524
    },
    {
        "content": "<p>just having a wee read</p>",
        "id": 216806213,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605464558
    },
    {
        "content": "<p>Thanks for the logging tip, I'm not sure if this is useful:</p>\n<div class=\"codehilite\"><pre><span></span><code>2:rustcDEBUG rustdoc::passes::collect_intra_doc_links saw kind ForeignTy with disambiguator None\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=See also [Bar::do_it]\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links resolving Bar::do_it as a macro in the module DefId(0:0 ~ test[8787])\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links Bar::do_it resolved to Err(()) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links Bar resolved to Ok((Path { span: test.rs:1:1: 1:1 (#0), segments: [PathSegment { ident: Bar#0, id: NodeId(59), args: None }], tokens: None }, Def(Struct, DefId(0:5 ~ test[8787]::\nBar)))) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links looking for associated item named do_it for item DefId(0:5 ~ test[8787]::Bar)\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links considering traits {}\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links the candidates were []\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links got associated item kind None\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links Bar::do_it resolved to Err(()) in namespace ValueNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links Bar resolved to Ok((Path { span: test.rs:1:1: 1:1 (#0), segments: [PathSegment { ident: Bar#0, id: NodeId(62), args: None }], tokens: None }, Def(Struct, DefId(0:5 ~ test[8787]::\nBar)))) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links looking for associated item named do_it for item DefId(0:5 ~ test[8787]::Bar)\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links intra-doc link to Bar::do_it resolved to Def(Struct, DefId(0:5 ~ test[8787]::Bar))\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links saw kind Struct with disambiguator None\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=The extern type Foo.\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Does stuff\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=This does stuff too\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Searches for [`char`]s that match the given predicate.\n</code></pre></div>\n<p>I guess the <code>rustcDEBUG rustdoc::passes::collect_intra_doc_links Bar::do_it resolved to Err(()) in namespace TypeNS</code> line is probably most relevant though I'm not sure it unveils too many mysteries! I'll try and have a read through the other calls in the backtrace to try and understand why that Err might not be handled correctly/cause the panic on None. I can do it while my debug info builds!</p>\n<p>I think it was actually <code>debuginfo-level = 2</code> for anyone coming to this thread for the gdb issue, rather than <code>debuginfo</code> alone :)</p>",
        "id": 216806919,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605465488
    },
    {
        "content": "<p>oh hmm is that a primitive it crashes on? that's useful info</p>",
        "id": 216806950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605465543
    },
    {
        "content": "<p>try a test with <code>/// link to [char]</code></p>",
        "id": 216806966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605465564
    },
    {
        "content": "<blockquote>\n<p>2:rustcDEBUG rustdoc::passes::collect_intra_doc_links intra-doc link to Bar::do_it resolved to Def(Struct, DefId(0:5 ~ test[8787]::Bar))</p>\n</blockquote>\n<p>this is also relevant, it means once you fix the ICE the original bug will be fixed too :)</p>",
        "id": 216807043,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605465620
    },
    {
        "content": "<p>hooray!</p>",
        "id": 216807050,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605465633
    },
    {
        "content": "<p>I feel foolish but I do not know what \"try a test with <code>/// link to [char]</code>\" means <span aria-label=\"hear no evil\" class=\"emoji emoji-1f649\" role=\"img\" title=\"hear no evil\">:hear_no_evil:</span></p>",
        "id": 216807072,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605465669
    },
    {
        "content": "<p>like in <code>test.rs</code></p>",
        "id": 216807086,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605465687
    },
    {
        "content": "<p>right now it's crashing in the standard library where things are complicated</p>",
        "id": 216807100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605465705
    },
    {
        "content": "<p>if you make it a standalone it might be more clear what's going on</p>",
        "id": 216807107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605465718
    },
    {
        "content": "<p>ah cool</p>",
        "id": 216807110,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605465722
    },
    {
        "content": "<p>So with this <a href=\"http://test.rs\">test.rs</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// links to [char]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get this backtrace:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:949:43\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::panicking::panic\n   3: rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::get_type\n   4: rustc_metadata::rmeta::decoder::cstore_impl::provide_extern::type_of\n   5: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::type_of&gt;::compute\n   6: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n   7: rustc_data_structures::stack::ensure_sufficient_stack\n   8: rustc_query_system::query::plumbing::get_query_impl\n   9: rustdoc::passes::collect_intra_doc_links::LinkCollector::resolve\n  10: rustdoc::passes::collect_intra_doc_links::LinkCollector::resolve_link\n  11: &lt;rustdoc::passes::collect_intra_doc_links::LinkCollector as rustdoc::fold::DocFolder&gt;::fold_item\n  12: &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter\n  13: rustdoc::fold::DocFolder::fold_crate\n  14: rustdoc::passes::collect_intra_doc_links::collect_intra_doc_links\n  15: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n  16: rustdoc::core::run_global_ctxt\n  17: rustc_interface::passes::QueryContext::enter\n  18: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n  19: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n  20: rustc_span::with_source_map\n  21: rustc_interface::interface::create_compiler_and_run\n  22: rustdoc::core::run_core\n  23: rustdoc::main_options\n  24: scoped_tls::ScopedKey&lt;T&gt;::set\n  25: rustc_span::with_session_globals\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>\n<p>and these logs (which I am now reading):</p>\n<div class=\"codehilite\"><pre><span></span><code>2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=links to [char]\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links resolving char as a macro in the module DefId(0:0 ~ test[8787])\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links char resolved to Ok((Path { span: test.rs:1:1: 1:1 (#0), segments: [PathSegment { ident: char#0, id: NodeId(18), args: None }], tokens: None }, PrimTy(Char))) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links got res in TypeNS: (PrimTy(Char), Some(&quot;char&quot;))\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links char resolved to Err(()) in namespace ValueNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links found no `::`, assumming char was correctly not in scope                                                                                                                 [66/1236]\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Searches for [`char`]s that match the given predicate.\n2:rustc\n2:rustc# Examples\n2:rustc\n2:rustc```\n2:rustcassert_eq!(&quot;Hello world&quot;.find(char::is_uppercase), Some(0));\n2:rustcassert_eq!(&quot;Hello world&quot;.find(|c| &quot;aeiou&quot;.contains(c)), Some(1));\n2:rustc```\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links resolving char as a macro in the module DefId(2:8608 ~ core[fe86]::str::pattern)\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links char resolved to Ok((Path { span: test.rs:1:1: 1:1 (#0), segments: [PathSegment { ident: char#0, id: NodeId(21), args: None }], tokens: None }, PrimTy(Char))) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links got res in TypeNS: (PrimTy(Char), Some(&quot;char&quot;))\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links char resolved to Err(()) in namespace ValueNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links found no `::`, assumming char was correctly not in scope\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=**Stability note:** This impl does not yet exist, but we are\n2:rustc&quot;reserving space&quot; to add it in the future. See\n2:rustc[rust-lang/rust#64715][#64715] for details.\n2:rustc\n2:rustc[#64715]: https://github.com/rust-lang/rust/issues/64715\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=# Panics\n2:rustc\n2:rustcIn this implementation, the `to_string` method panics\n2:rustcif the `Display` implementation returns an error.\n2:rustcThis indicates an incorrect `Display` implementation\n2:rustcsince `fmt::Write for String` never returns an error itself.\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Extends a collection with the contents of an iterator.\n2:rustc\n2:rustcAs this is the only required method for this trait, the [trait-level] docs\n2:rustccontain more details.\n2:rustc\n2:rustc[trait-level]: Extend\n2:rustc\n2:rustc# Examples\n2:rustc\n2:rustcBasic usage:\n2:rustc\n2:rustc```\n2:rustc// You can extend a String with some chars:\n2:rustclet mut message = String::from(&quot;abc&quot;);\n2:rustc\n2:rustcmessage.extend([&#39;d&#39;, &#39;e&#39;, &#39;f&#39;].iter());\n2:rustc\n2:rustcassert_eq!(&quot;abcdef&quot;, &amp;message);\n2:rustc```\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links resolving Extend as a macro in the module DefId(2:5205 ~ core[fe86]::iter::traits::collect)\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links Extend resolved to Ok((Path { span: test.rs:1:1: 1:1 (#0), segments: [PathSegment { ident: Extend#0, id: NodeId(24), args: None }], tokens: None }, Def(Trait, DefId(2:5219 ~ core\n[fe86]::iter::traits::collect::Extend)))) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links got res in TypeNS: (Def(Trait, DefId(2:5219 ~ core[fe86]::iter::traits::collect::Extend)), None)\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links Extend resolved to Err(()) in namespace ValueNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links found no `::`, assumming Extend was correctly not in scope\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links intra-doc link to Extend resolved to Def(Trait, DefId(2:5219 ~ core[fe86]::iter::traits::collect::Extend))\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links saw kind Trait with disambiguator None\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Extends a collection with exactly one element.                                                                                                             [14/1236]\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Reserves capacity in a collection for the given number of additional elements.\n2:rustc\n2:rustcThe default implementation does nothing.\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Performs the conversion.\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Sets the child process&#39;s user ID. This translates to a\n2:rustc`setuid` call in the child process. Failure in the `setuid`\n2:rustccall will cause the spawn to fail.\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Similar to `uid`, but sets the group ID of the child process. This has\n2:rustcthe same semantics as the `uid` field.\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Schedules a closure to be run just before the `exec` function is\n2:rustcinvoked.\n2:rustc\n2:rustcThe closure is allowed to return an I/O error whose OS error code will\n2:rustcbe communicated back to the parent and returned as an error from when\n2:rustcthe spawn was requested.\n2:rustc\n2:rustcMultiple closures can be registered and they will be called in order of\n2:rustctheir registration. If a closure returns `Err` then no further closures\n2:rustcwill be called and the spawn operation will immediately return with a\n2:rustcfailure.\n2:rustc\n2:rustc# Notes and Safety\n2:rustc\n2:rustcThis closure will be run in the context of the child process after a\n2:rustc`fork`. This primarily means that any modifications made to memory on\n2:rustcbehalf of this closure will **not** be visible to the parent process.\n2:rustcThis is often a very constrained environment where normal operations\n2:rustclike `malloc` or acquiring a mutex are not guaranteed to work (due to\n2:rustcother threads perhaps still running when the `fork` was run).\n2:rustc\n2:rustcThis also means that all resources such as file descriptors and\n2:rustcmemory-mapped regions got duplicated. It is your responsibility to make\n2:rustcsure that the closure does not violate library invariants by making\n2:rustcinvalid use of these duplicates.\n2:rustc\n2:rustcWhen this closure is run, aspects such as the stdio file descriptors and\n2:rustcworking directory have successfully been changed, so output to these\n2:rustclocations may not appear where intended.\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links combined_docs=Schedules a closure to be run just before the `exec` function is\n2:rustcinvoked.\n2:rustc\n2:rustcThis method is stable and usable, but it should be unsafe. To fix\n2:rustcthat, it got deprecated in favor of the unsafe [`pre_exec`].\n2:rustc\n2:rustc[`pre_exec`]: CommandExt::pre_exec\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links resolving CommandExt::pre_exec as a macro in the module DefId(1:9082 ~ std[7f8a]::sys::unix::ext::process)\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links CommandExt::pre_exec resolved to Err(()) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links CommandExt resolved to Ok((Path { span: test.rs:1:1: 1:1 (#0), segments: [PathSegment { ident: CommandExt#0, id: NodeId(30), args: None }], tokens: None }, Def(Trait, DefId(1:909\n7 ~ std[7f8a]::sys::unix::ext::process::CommandExt)))) in namespace TypeNS\n2:rustcDEBUG rustdoc::passes::collect_intra_doc_links looking for associated item named pre_exec for item DefId(1:9097 ~ std[7f8a]::sys::unix::ext::process::CommandExt)\nthread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:949:43\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 216808101,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605466684
    },
    {
        "content": "<p>oh ok, so not related to primitives</p>",
        "id": 216808120,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466711
    },
    {
        "content": "<p>I think this unwrap is from <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_metadata/src/rmeta/decoder.rs#L950\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_metadata/src/rmeta/decoder.rs#L950</a></p>",
        "id": 216808130,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466763
    },
    {
        "content": "<p>ah hmm so I think my proposed fix was wrong in the first place</p>",
        "id": 216808190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466810
    },
    {
        "content": "<p>traits are not types, this is coming from calling <code>traits_implemented_by</code> on a trait</p>",
        "id": 216808197,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466827
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0/src/librustdoc/passes/collect_intra_doc_links.rs#L729\">https://github.com/rust-lang/rust/blob/603ab5bd6e0ffefafa7411cd8bd23a6ca82bcff0/src/librustdoc/passes/collect_intra_doc_links.rs#L729</a></p>",
        "id": 216808198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466836
    },
    {
        "content": "<p>I would try adding just the variants you need to fix the bug and I can think about how to make this nicer in a follow-up</p>",
        "id": 216808213,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466865
    },
    {
        "content": "<p>in this case I think <code>ForeignTy</code> is the one you want</p>",
        "id": 216808217,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466875
    },
    {
        "content": "<p>Ah I see -- sounds like a good shout!</p>",
        "id": 216808219,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605466884
    },
    {
        "content": "<p>giving that a go now</p>",
        "id": 216808222,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605466889
    },
    {
        "content": "<p>and maybe I'll also change that unwrap(), it's not very helpful</p>",
        "id": 216808228,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605466904
    },
    {
        "content": "<p>Yes good shout</p>",
        "id": 216808245,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605466923
    },
    {
        "content": "<p>It's quite possible I'll need more help, but just giving a pre-emptive thank you for the help so far :)</p>",
        "id": 216808306,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605467013
    },
    {
        "content": "<p>you're very welcome :) it's nice to have people helping out</p>",
        "id": 216808313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605467040
    },
    {
        "content": "<p>The suggested fix with <code>ForeignTy</code> does indeed work <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Does it make sense to include changing the <code>unwrap</code> in the same PR?</p>",
        "id": 216808437,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605467234
    },
    {
        "content": "<p>sure, that works too - this is my fix:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_metadata/src/rmeta/decoder.rs b/compiler/rustc_metadata/src/rmeta/decoder.rs</span>\n<span class=\"gh\">index a1df1a63fc5..f949391752b 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_metadata/src/rmeta/decoder.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_metadata/src/rmeta/decoder.rs</span>\n<span class=\"gu\">@@ -947,7 +947,9 @@ fn get_generics(&amp;self, item_id: DefIndex, sess: &amp;Session) -&gt; ty::Generics {</span>\n     }\n\n     fn get_type(&amp;self, id: DefIndex, tcx: TyCtxt&lt;'tcx&gt;) -&gt; Ty&lt;'tcx&gt; {\n<span class=\"gd\">-        self.root.tables.ty.get(self, id).unwrap().decode((self, tcx))</span>\n<span class=\"gi\">+        self.root.tables.ty.get(self, id)</span>\n<span class=\"gi\">+          .unwrap_or_else(|| panic!(\"not a type: {:?}\", id))</span>\n<span class=\"gi\">+          .decode((self, tcx))</span>\n     }\n\n     fn get_stability(&amp;self, id: DefIndex) -&gt; Option&lt;attr::Stability&gt; {\n</code></pre></div>",
        "id": 216808446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605467270
    },
    {
        "content": "<p>please test out the new error message is helpful though</p>",
        "id": 216808449,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605467279
    },
    {
        "content": "<p>if the debug output for <code>id</code> is unhelpful you can turn it into a DefId with <code>DefId::from_local</code></p>",
        "id": 216808492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605467312
    },
    {
        "content": "<p>(I think)</p>",
        "id": 216808495,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605467322
    },
    {
        "content": "<p>I should have asked earlier, but is there somewhere I should add a test for the fix with <code>ForeignTy</code>?</p>",
        "id": 216813615,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605473413
    },
    {
        "content": "<p>yes, in <code>src/test/rustdoc</code></p>",
        "id": 216814971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605475255
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/rustdoc-internals.html#dotting-is-and-crossing-ts\">https://rustc-dev-guide.rust-lang.org/rustdoc-internals.html#dotting-is-and-crossing-ts</a></p>",
        "id": 216814973,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605475261
    },
    {
        "content": "<p>there are other examples, anything starting with <code>intra-link</code> should be relevant</p>",
        "id": 216814982,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605475273
    },
    {
        "content": "<p>Thanks -- I'll hopefully have the PR ready on Tuesday (I'm busy tomorrow evening) with tests. </p>\n<p>FYI, for the <a href=\"http://decoder.rs\">decoder.rs</a> change, doing <code>DefId::local(id)</code> caused a panic because the index was not valid:<br>\n<code>thread 'rustc' panicked at 'index out of bounds: the len is 5 but the index is 8624', compiler/rustc_hir/src/definitions.rs:47:9</code></p>\n<p>Perhaps this is the best we can do? <code>thread 'rustc' panicked at 'Not a type: DefIndex(8624)', compiler/rustc_metadata/src/rmeta/decoder.rs:951:32</code> let me know if you have any other suggestions :)</p>",
        "id": 216815106,
        "sender_full_name": "Hannah McLaughlin",
        "timestamp": 1605475473
    },
    {
        "content": "<p>hmm, I don't know rustc_metadata well enough to have better suggestions</p>",
        "id": 216815254,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605475755
    },
    {
        "content": "<p>seems fine for now though</p>",
        "id": 216815259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605475760
    }
]