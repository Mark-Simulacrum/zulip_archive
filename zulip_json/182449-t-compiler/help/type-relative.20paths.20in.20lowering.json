[
    {
        "content": "<p>Does anyone familiar with the resolver know why <code>expr_std_path</code> can't resolve type-relative paths? I get an error when trying to use it with <code>std::pin::Pin::new_unchecked</code> (works fine with e.g. <code>std::ops::Try::into_result</code>, but that's an associated method of a trait, not a type)</p>",
        "id": 163770573,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555712642
    },
    {
        "content": "<p>Is this limitation fundamental? My temporary workaround plan is  to introduce an unstable feature-gated fn <code>std::pin::new_unchecked</code> and call that instead, but I'd prefer to avoid introducing hacks if unnecessary.</p>",
        "id": 163770653,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555712738
    },
    {
        "content": "<p>ping-- anyone know about this? maybe <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ?</p>",
        "id": 163942919,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1555970734
    },
    {
        "content": "<p><code>expr_std_path</code> is a module-relative resolution thing.<br>\nIt's too early to resolve type-relative paths at that point.</p>",
        "id": 163945996,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555973728
    },
    {
        "content": "<p>You can actually make a partially resolved path during lowering and put it into HIR.</p>",
        "id": 163946071,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555973778
    },
    {
        "content": "<p>And it will be resolved during type checking.</p>",
        "id": 163946078,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555973788
    },
    {
        "content": "<p><code>std::pin::Pin</code> can be fed to <code>std_path</code>, then the last segment added as <code>hir::QPath::TypeRelative</code></p>",
        "id": 163946173,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555973886
    },
    {
        "content": "<p>Actually, <code>ExprKind::Range</code> desugaring works that way already.</p>",
        "id": 163946209,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555973948
    },
    {
        "content": "<p>(To clarify, <code>std::ops::Try::into_result</code> is module-relative because traits and enums are modules in the eyes of name resolution.)</p>",
        "id": 163946321,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555974005
    }
]