[
    {
        "content": "<p>How do I read the <code>?</code> symbols in this?</p>\n<div class=\"codehilite\"><pre><span></span><code>        debug!(\n            ?predicate, ?obligation.cause.code,\n        );\n</code></pre></div>",
        "id": 261077991,
        "sender_full_name": "nnethercote",
        "timestamp": 1636591554
    },
    {
        "content": "<p>it's the equivalent of <code>debug!(\"{:?} {:?}\", predicate, obligation.cause.code)</code></p>",
        "id": 261078055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636591582
    },
    {
        "content": "<p>see <a href=\"https://docs.rs/tracing/0.1.29/tracing/index.html#recording-fields\">https://docs.rs/tracing/0.1.29/tracing/index.html#recording-fields</a> for details</p>",
        "id": 261078093,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591610
    },
    {
        "content": "<p>I need to change it to this, but it doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code>        debug!(\n            ?predicate, ?obligation.cause.code(),\n        );\n</code></pre></div>",
        "id": 261078245,
        "sender_full_name": "nnethercote",
        "timestamp": 1636591743
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: expected expression, found `?`\n    --&gt; compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:1569:25\n     |\n1569 |             ?predicate, ?obligation.cause.code(),\n     |                         ^ expected expression\n</code></pre></div>",
        "id": 261078272,
        "sender_full_name": "nnethercote",
        "timestamp": 1636591771
    },
    {
        "content": "<p>I can just longform it, like <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>'s example</p>",
        "id": 261078299,
        "sender_full_name": "nnethercote",
        "timestamp": 1636591795
    },
    {
        "content": "<blockquote>\n<p>event!(Level::TRACE, greeting = tracing::field::debug(&amp;my_struct));</p>\n</blockquote>",
        "id": 261078346,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591804
    },
    {
        "content": "<p>I'm not sure if field names can have <code>.</code> in tracing</p>",
        "id": 261078371,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591836
    },
    {
        "content": "<p>seems like probably yes</p>",
        "id": 261078383,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591845
    },
    {
        "content": "<p>so I think the \"better\" expansion is probably <code>obligation.cause.code = tracing::field::debug(&amp;obligation.cause.code()</code></p>",
        "id": 261078412,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591869
    },
    {
        "content": "<p><code>debug!(?predicate, obligation.cause.code = obligation.cause.code())</code>??</p>",
        "id": 261078456,
        "sender_full_name": "nnethercote",
        "timestamp": 1636591913
    },
    {
        "content": "<p>yeah</p>",
        "id": 261078464,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591919
    },
    {
        "content": "<p>well, no</p>",
        "id": 261078480,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591923
    },
    {
        "content": "<p>that will use the Display impl I'd guess?</p>",
        "id": 261078511,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591929
    },
    {
        "content": "<p>so you need the tracing::field::debug to get it to compile (since iirc code isn't Display-able)</p>",
        "id": 261078524,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591947
    },
    {
        "content": "<p>Ok</p>",
        "id": 261078536,
        "sender_full_name": "nnethercote",
        "timestamp": 1636591964
    },
    {
        "content": "<p>but I'm not sure</p>",
        "id": 261078547,
        "sender_full_name": "simulacrum",
        "timestamp": 1636591979
    },
    {
        "content": "<p>This feels like a macro that is great for the simple cases but falls down on anything slightly complex</p>",
        "id": 261078548,
        "sender_full_name": "nnethercote",
        "timestamp": 1636591981
    },
    {
        "content": "<p><code>debug!(?predicate, \"{:?}\", obligation.cause.code())</code> is probably the shortest version</p>",
        "id": 261078550,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636591983
    },
    {
        "content": "<p>But that doesn't pritn \"obligation.cause.code\" in the output, right?</p>",
        "id": 261078571,
        "sender_full_name": "nnethercote",
        "timestamp": 1636592005
    },
    {
        "content": "<p>just the actual value</p>",
        "id": 261078577,
        "sender_full_name": "nnethercote",
        "timestamp": 1636592008
    },
    {
        "content": "<p>This seems to respect the existing form the best, and compiles:</p>\n<div class=\"codehilite\"><pre><span></span><code>        debug!(\n            ?predicate,\n            obligation.cause.code = tracing::field::debug(&amp;obligation.cause.code())\n        );\n</code></pre></div>",
        "id": 261078686,
        "sender_full_name": "nnethercote",
        "timestamp": 1636592103
    },
    {
        "content": "<p>Also feels really weird</p>",
        "id": 261078699,
        "sender_full_name": "nnethercote",
        "timestamp": 1636592110
    },
    {
        "content": "<p>it might be that <code>?(obligation.cause.code())</code> would work? I don't really know what the macro does</p>",
        "id": 261078935,
        "sender_full_name": "simulacrum",
        "timestamp": 1636592285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.60debug!.60.20syntax/near/261078686\">said</a>:</p>\n<blockquote>\n<p>This seems to respect the existing form the best, and compiles:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>        debug!(\n            ?predicate,\n            obligation.cause.code = tracing::field::debug(&amp;obligation.cause.code())\n        );\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I believe that's the correct syntax.</p>",
        "id": 261081528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636594259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> Also, if you'd like the field name to <em>actually</em> be <code>obligation.cause.code()</code>, you can do that with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">?</span><span class=\"n\">predicate</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"obligation.cause.code()\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tracing</span>::<span class=\"n\">field</span>::<span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">cause</span><span class=\"p\">.</span><span class=\"n\">code</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261081583,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1636594315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.60debug!.60.20syntax/near/261078245\">said</a>:</p>\n<blockquote>\n<p>I need to change it to this, but it doesn't work:</p>\n<p><div class=\"codehilite\"><pre><span></span><code>        debug!(\n            ?predicate, ?obligation.cause.code(),\n        );\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've run into this limitation before too. Mostly I just use <code>#{instrument(level = \"debug\")]</code> (can't remember the exact syntax) since it's more automated</p>",
        "id": 261086051,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636598257
    }
]