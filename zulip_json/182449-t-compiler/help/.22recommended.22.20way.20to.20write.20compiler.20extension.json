[
    {
        "content": "<p>Is there a \"recommended\" way to write a compiler extension? Specifically, what I mean is a binary that runs rustc and then (in my case) exposes the data rustc collected to the user (somewhat related to <code>cargo-callgraph</code>).</p>\n<p><a href=\"https://github.com/robinmoussu/cargo-callgraph\"><code>cargo-callgraph</code></a> is a clone of <code>rust-lang/rust</code> with part of rustdoc replaced with custom <code>cargo-callgraph</code> code. On the other hand, <a href=\"https://github.com/bjorn3/rust_read_rlib/\"><code>bjorn3/rust_read_rlib</code></a> seems to be a standalone binary that loads rustc from the sysroot and calls rustc that way.</p>\n<p>I'm leaning towards loading rustc from the sysroot because I don't want to keep my own copy of rustc up to date, but I'm wondering what others think about how to do this sort of thing.</p>",
        "id": 228145074,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614534261
    },
    {
        "content": "<p>I saw <a href=\"https://doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html\"><code>#![feature(plugin)]</code></a>, but <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"https://github.com/rust-lang/rust/issues/29597#issuecomment-405170163\">said</a> the goal is to get rid of the plugin API. Plus, my program would be a binary that doesn't need to change rustc at all, it just needs to call rustc to get data, so it doesn't really fit with the plugin model ASIUI.</p>",
        "id": 228145206,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614534389
    },
    {
        "content": "<p>Do you mean something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(rustc_private)]</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">rustc_driver</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">rustc_driver</span>::<span class=\"n\">main</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228145810,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614535033
    },
    {
        "content": "<p>Which can be built with:</p>\n<div class=\"codehilite\"><pre><span></span><code>rustup component add rustc-dev llvm-tools-preview\ncargo build\n</code></pre></div>\n<p>In a Cargo workspace with a nightly toolchain.</p>",
        "id": 228146003,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614535255
    },
    {
        "content": "<blockquote>\n<p>In a Cargo workspace with a nightly toolchain.</p>\n</blockquote>\n<p>note you have to pin the version of nightly, since the internal APIs change often</p>",
        "id": 228146118,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614535342
    },
    {
        "content": "<p>That seems the \"recommended\" way: <a href=\"https://github.com/rust-lang/rust/pull/64675#issuecomment-533837824\">https://github.com/rust-lang/rust/pull/64675#issuecomment-533837824</a></p>\n<blockquote>\n<p>I believe current consensus is that anyone using plugins today is advised to migrate to a custom rustc build (via a rustc_private dep on rustc_interface) which should be relatively fast, though not particularly stable, of course, but no less stable than plugins were/are.</p>\n</blockquote>",
        "id": 228146255,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614535447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.22recommended.22.20way.20to.20write.20compiler.20extension/near/228145074\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/robinmoussu/cargo-callgraph\"><code>cargo-callgraph</code></a> is a clone of <code>rust-lang/rust</code> with part of rustdoc replaced with custom <code>cargo-callgraph</code> code.</p>\n</blockquote>\n<p>There's only rustdoc in it now: <a href=\"https://github.com/robinmoussu/cargo-callgraph/commit/66c833c24a58f81b914f5735191d5c3871855ad8\">https://github.com/robinmoussu/cargo-callgraph/commit/66c833c24a58f81b914f5735191d5c3871855ad8</a></p>",
        "id": 228146876,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614536148
    },
    {
        "content": "<p>And looks like it loads <code>rustc_*</code> crates from sysroot (after that commit).</p>",
        "id": 228146957,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614536205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.22recommended.22.20way.20to.20write.20compiler.20extension/near/228146957\">said</a>:</p>\n<blockquote>\n<p>And looks like it loads <code>rustc_*</code> crates from sysroot (now).</p>\n</blockquote>\n<p>Ah, so I guess both my examples use the same technique.</p>",
        "id": 228147258,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614536625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.22recommended.22.20way.20to.20write.20compiler.20extension/near/228146118\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>In a Cargo workspace with a nightly toolchain.</p>\n</blockquote>\n<p>note you have to pin the version of nightly, since the internal APIs change often</p>\n</blockquote>\n<p>Yeah, that's fine, I just don't want to have a whole <code>rust-lang/rust</code> clone sitting around that I have to rebase all the time.</p>",
        "id": 228147324,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614536653
    },
    {
        "content": "<p>Also, what do you recommend as a way of collecting the data? Should I run rustc myself or just load metadata?</p>",
        "id": 228147565,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614536918
    },
    {
        "content": "<p>what do you mean by collecting the data?</p>",
        "id": 228147691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537064
    },
    {
        "content": "<p>loading metadata requires going through rustc too</p>",
        "id": 228147706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537070
    },
    {
        "content": "<p>Yes, I mean should I do the equivalent of running <code>rustc</code> on a source file, or should I have the user run <code>rustc</code> and then extract the data from the metadata.</p>",
        "id": 228147824,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537203
    },
    {
        "content": "<p>I'm leaning towards collecting metadata since then I can easily support multi-file crates.</p>",
        "id": 228147836,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537228
    },
    {
        "content": "<p>these are mostly the same from an API perspective though? I don't really understand the question</p>",
        "id": 228147888,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537250
    },
    {
        "content": "<p>the APIs usually return <code>DefId</code>s which don't care if they come from the current crate or not</p>",
        "id": 228147895,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537268
    },
    {
        "content": "<p>Hmm, maybe I'm misunderstanding then.</p>",
        "id": 228147922,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537311
    },
    {
        "content": "<p>I thought that e.g. rustdoc will run the rustc driver to start off the compilation process and then rustdoc queries the TyCtxt etc. for data.</p>",
        "id": 228147938,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537347
    },
    {
        "content": "<p>there's no switch that says \"yes load metadata\", rustc will just load it automatically if it's present</p>",
        "id": 228147944,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537352
    },
    {
        "content": "<p>Is that the query system at work?</p>",
        "id": 228147963,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537363
    },
    {
        "content": "<p>right</p>",
        "id": 228147998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537372
    },
    {
        "content": "<p>The query system is so cool <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 228148006,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537393
    },
    {
        "content": "<p>So all I need to do is look at how rustdoc gets the TyCtxt set up and then I can just query away?</p>",
        "id": 228148027,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537429
    },
    {
        "content": "<p>yup, that should work</p>",
        "id": 228148038,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537441
    },
    {
        "content": "<p>and you'll likely want to call <code>queries.analysis()</code> first, otherwise it's missing a lot of the type checking</p>",
        "id": 228148041,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537457
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_interface/passes/fn.analysis.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_interface/passes/fn.analysis.html</a></p>",
        "id": 228148114,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537516
    },
    {
        "content": "<p>Great! So I don't even need to worry about accidentally triggering codegen.</p>",
        "id": 228148147,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537557
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 228148150,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614537562
    },
    {
        "content": "<p>no problem :)</p>",
        "id": 228148154,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614537579
    },
    {
        "content": "<p>It's partially working, but rustc is unable to find <code>std</code> and <code>core</code>—I'm guessing it doesn't know where the sysroot is.</p>",
        "id": 228159798,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614549493
    },
    {
        "content": "<p>It seems <code>rustdoc</code> passes in a <code>maybe_sysroot</code> option that it gets from its CLI arguments. Does cargo pass that in?</p>",
        "id": 228159806,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614549522
    },
    {
        "content": "<p>Aha! Let me try <code>filesearch::get_or_default_sysroot()</code></p>",
        "id": 228159856,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614549592
    },
    {
        "content": "<p>Nope, still can't find <code>std</code>.</p>",
        "id": 228159977,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614549707
    },
    {
        "content": "<p>oh right this comes up quite a lot, see <a href=\"https://github.com/rust-lang/rust/pull/78926\">https://github.com/rust-lang/rust/pull/78926</a></p>",
        "id": 228160142,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614549796
    },
    {
        "content": "<p>not sure exactly how cargo-callgraph does it now</p>",
        "id": 228160146,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614549808
    },
    {
        "content": "<p>Does rustdoc get passed the sysroot?</p>",
        "id": 228160282,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614549961
    },
    {
        "content": "<p>Looks like cargo-callgraph uses code from Miri: <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/74cc1f36eb6765d34fb19241dc12b6d189b4a81f/src/librustdoc/lib.rs#L110-L113\">https://github.com/robinmoussu/cargo-callgraph/blob/74cc1f36eb6765d34fb19241dc12b6d189b4a81f/src/librustdoc/lib.rs#L110-L113</a></p>",
        "id": 228160337,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614549998
    },
    {
        "content": "<p>It works!</p>",
        "id": 228160901,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614550623
    },
    {
        "content": "<p>That Miri code did the trick.</p>",
        "id": 228160906,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614550627
    },
    {
        "content": "<p>I got it to print out a list of all the local items' names and DefKinds:</p>\n<div class=\"codehilite\"><pre><span></span><code>[\n    (\n        &quot;import&quot;,\n        &quot;{misc#0}&quot;,\n    ),\n    (\n        &quot;extern crate&quot;,\n        &quot;std&quot;,\n    ),\n    (\n        &quot;function&quot;,\n        &quot;main&quot;,\n    ),\n]\n</code></pre></div>",
        "id": 228164291,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614554218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.22recommended.22.20way.20to.20write.20compiler.20extension/near/228160337\">said</a>:</p>\n<blockquote>\n<p>Looks like cargo-callgraph uses code from Miri: <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/74cc1f36eb6765d34fb19241dc12b6d189b4a81f/src/librustdoc/lib.rs#L110-L113\">https://github.com/robinmoussu/cargo-callgraph/blob/74cc1f36eb6765d34fb19241dc12b6d189b4a81f/src/librustdoc/lib.rs#L110-L113</a></p>\n</blockquote>\n<p>Does Miri use compile-time value of <code>RUSTUP_*</code> environment variables to get sysroot? <a href=\"https://github.com/rust-lang/miri/blob/39ebb079a8e1bd9b8838b97bdc1718f4c0be6b48/src/bin/miri.rs#L127-L128\">https://github.com/rust-lang/miri/blob/39ebb079a8e1bd9b8838b97bdc1718f4c0be6b48/src/bin/miri.rs#L127-L128</a></p>\n<p>That seems unpractical since it won't work (for out-of-<code>rust-lang/rust</code> builds) if the executable is moved (to another computer with a different environment).</p>\n<p>It seems that Clippy gets the values (and uses <code>rustc --print sysroot</code> as a fallback) at runtime: <a href=\"https://github.com/rust-lang/rust-clippy/blob/ac2f041b4787a128f4eaf26736c2d2df40e2bee6/src/driver.rs#L192-L195\">https://github.com/rust-lang/rust-clippy/blob/ac2f041b4787a128f4eaf26736c2d2df40e2bee6/src/driver.rs#L192-L195</a></p>",
        "id": 228189216,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614582344
    },
    {
        "content": "<p>(it also uses compile-time values as fallbacks)</p>",
        "id": 228204288,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614592756
    },
    {
        "content": "<p>Hmm, maybe I should switch to using the Clippy code. The Miri code works on my machine at least—I can deal with the sysroot later on I guess.</p>",
        "id": 228345707,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614654260
    },
    {
        "content": "<p>IIRC miri and clippy have the same code and one copied it from the other <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 228345730,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614654301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/.22recommended.22.20way.20to.20write.20compiler.20extension/near/228345730\">said</a>:</p>\n<blockquote>\n<p>IIRC miri and clippy have the same code and one copied it from the other <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>The Miri one is copied from Clippy: <a href=\"https://github.com/rust-lang/miri/blob/39ebb079a8e1bd9b8838b97bdc1718f4c0be6b48/src/bin/miri.rs#L126\">https://github.com/rust-lang/miri/blob/39ebb079a8e1bd9b8838b97bdc1718f4c0be6b48/src/bin/miri.rs#L126</a></p>\n<blockquote>\n<p>Taken from PR &lt;<a href=\"https://github.com/Manishearth/rust-clippy/pull/911\">https://github.com/Manishearth/rust-clippy/pull/911</a>&gt;.</p>\n</blockquote>\n<p>(The link should be <a href=\"https://github.com/rust-lang/rust-clippy/issues/911\">clippy#911</a> now.)<br>\nLooks like the Clippy code has gotten some updates since then.</p>",
        "id": 228377331,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614676677
    }
]