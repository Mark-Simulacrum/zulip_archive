[
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>time: 0.002; rss: 56MB  parse_crate\ntime: 0.000; rss: 56MB  attributes_injection\ntime: 0.000; rss: 56MB  recursion_limit\ntime: 0.000; rss: 56MB  plugin_loading\ntime: 0.000; rss: 56MB  plugin_registration\ntime: 0.000; rss: 56MB  pre_AST_expansion_lint_checks\ntime: 0.000; rss: 56MB  crate_injection\ntime: 0.003; rss: 69MB  expand_crate\ntime: 0.000; rss: 69MB  check_unused_macros\ntime: 0.003; rss: 69MB  macro_expand_crate\ntime: 0.000; rss: 69MB  maybe_building_test_harness\ntime: 0.000; rss: 70MB  AST_validation\ntime: 0.000; rss: 70MB  maybe_create_a_macro_crate\ntime: 0.000; rss: 70MB  complete_gated_feature_checking\ntime: 0.003; rss: 70MB  configure_and_expand\ntime: 0.000; rss: 70MB  prepare_outputs\ntime: 0.000; rss: 72MB  hir_lowering\ntime: 0.000; rss: 72MB  early_lint_checks\ntime: 0.000; rss: 74MB  setup_global_ctxt\ntime: 0.000; rss: 74MB  dep_graph_tcx_init\ntime: 0.000; rss: 74MB  create_global_ctxt\ntime: 0.000; rss: 76MB  looking_for_entry_point\ntime: 0.000; rss: 76MB  looking_for_plugin_registrar\ntime: 0.000; rss: 76MB  looking_for_derive_registrar\ntime: 0.000; rss: 79MB  misc_checking_1\ntime: 0.000; rss: 79MB  type_collecting\ntime: 0.000; rss: 79MB  impl_wf_inference\ntime: 0.000; rss: 79MB  unsafety_checking\ntime: 0.000; rss: 79MB  orphan_checking\ntime: 0.000; rss: 79MB  coherence_checking\ntime: 0.001; rss: 85MB  wf_checking\ntime: 0.000; rss: 85MB  item_types_checking\ntime: 0.004; rss: 89MB  item_bodies_checking\ntime: 0.005; rss: 89MB  type_check_crate\ntime: 0.013; rss: 89MB  match_checking\ntime: 0.000; rss: 89MB  liveness_and_intrinsic_checking\ntime: 0.013; rss: 89MB  misc_checking_2\ntime: 0.007; rss: 98MB  MIR_borrow_checking\ntime: 0.000; rss: 98MB  MIR_effect_checking\ntime: 0.000; rss: 98MB  layout_testing\ntime: 0.000; rss: 99MB  death_checking\ntime: 0.000; rss: 99MB  unused_lib_feature_checking\ntime: 0.000; rss: 99MB  crate_lints\ntime: 0.000; rss: 99MB  module_lints\ntime: 0.000; rss: 99MB  lint_checking\ntime: 0.000; rss: 99MB  privacy_checking_modules\ntime: 0.001; rss: 99MB  misc_checking_3\ntime: 0.000; rss: 99MB  monomorphization_collector_root_collections\ntime: 0.007; rss: 124MB monomorphization_collector_graph_walk\ntime: 0.000; rss: 124MB partition_and_assert_distinct_symbols\ntime: 0.000; rss: 128MB write_allocator_module\ntime: 0.000; rss: 128MB find_cgu_reuse\ntime: 0.000; rss: 129MB LLVM_module_optimize_function_passes(rust_out.7rcbfp3g-cgu.0)\ntime: 0.000; rss: 129MB LLVM_module_optimize_module_passes(rust_out.7rcbfp3g-cgu.0)\ntime: 0.000; rss: 131MB LLVM_module_optimize_function_passes(rust_out.7rcbfp3g-cgu.2)\ntime: 0.000; rss: 131MB LLVM_module_optimize_module_passes(rust_out.7rcbfp3g-cgu.2)\ntime: 0.000; rss: 131MB LLVM_module_optimize_function_passes(rust_out.7rcbfp3g-cgu.1)\ntime: 0.000; rss: 131MB LLVM_module_optimize_module_passes(rust_out.7rcbfp3g-cgu.1)\ntime: 0.000; rss: 133MB LLVM_module_optimize_function_passes(rust_out.7rcbfp3g-cgu.3)\ntime: 0.000; rss: 133MB LLVM_module_optimize_module_passes(rust_out.7rcbfp3g-cgu.3)\ntime: 0.000; rss: 134MB LLVM_module_optimize_function_passes(rust_out.7rcbfp3g-cgu.4)\ntime: 0.000; rss: 134MB LLVM_module_optimize_module_passes(rust_out.7rcbfp3g-cgu.4)\ntime: 0.004; rss: 134MB codegen_to_LLVM_IR\ntime: 0.000; rss: 134MB assert_dep_graph\ntime: 0.000; rss: 134MB serialize_dep_graph\ntime: 0.000; rss: 134MB LLVM_module_optimize_function_passes(rust_out.7rcbfp3g-cgu.5)\ntime: 0.013; rss: 134MB codegen_crate\ntime: 0.000; rss: 136MB LLVM_module_optimize_module_passes(rust_out.7rcbfp3g-cgu.5)\ntime: 0.000; rss: 106MB LLVM_module_optimize_function_passes(rust_out.7rcbfp3g-cgu.6)\ntime: 0.000; rss: 106MB LLVM_module_optimize_module_passes(rust_out.7rcbfp3g-cgu.6)\ntime: 0.001; rss: 106MB free_global_ctxt\ntime: 0.005; rss: 108MB LLVM_passes(crate)\ntime: 0.000; rss: 108MB join_worker_thread\ntime: 0.001; rss: 108MB finish_ongoing_codegen\ntime: 0.000; rss: 108MB serialize_work_products\ntime: 0.000; rss: 108MB link_binary_check_files_are_writeable\ntime: 0.102; rss: 108MB run_linker\ntime: 0.000; rss: 108MB link_binary_remove_temps\ntime: 0.103; rss: 108MB link_binary\ntime: 0.103; rss: 108MB link_crate\ntime: 0.000; rss: 108MB llvm_dump_timing_file\ntime: 0.104; rss: 108MB link\ntime: 0.153; rss: 108MB     total\n</code></pre></div>",
        "id": 209197159,
        "sender_full_name": "Jubilee",
        "timestamp": 1599342128
    },
    {
        "content": "<p>resident set size</p>",
        "id": 209197169,
        "sender_full_name": "lqd",
        "timestamp": 1599342186
    },
    {
        "content": "<p>memory usage</p>",
        "id": 209197170,
        "sender_full_name": "lqd",
        "timestamp": 1599342189
    },
    {
        "content": "<p>Aha, thank you.</p>",
        "id": 209197175,
        "sender_full_name": "Jubilee",
        "timestamp": 1599342210
    },
    {
        "content": "<p>Do you find this result surprising? I did, somewhat.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ <span class=\"k\">for</span> K in <span class=\"o\">{</span><span class=\"m\">8</span>..16<span class=\"o\">}</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n  <span class=\"nv\">N</span><span class=\"o\">=</span><span class=\"k\">$((</span><span class=\"m\">1</span> &lt;&lt; K<span class=\"k\">))</span>\n  <span class=\"nb\">echo</span> -n <span class=\"s2\">&quot;</span><span class=\"k\">$((</span>N<span class=\"k\">))</span><span class=\"s2\">: &quot;</span>\n  python -c <span class=\"s2\">&quot;print(&#39;fn main() { match 0 { %s _ =&gt; {} } }&#39; % &#39;&#39;.join(&#39; %s =&gt; {}&#39; % n for n in xrange(0, </span><span class=\"nv\">$N</span><span class=\"s2\">)))&quot;</span> <span class=\"p\">|</span>\n    rustc - -Z time-passes <span class=\"p\">|</span>\n    rg --color never <span class=\"s1\">&#39;match&#39;</span>\n<span class=\"k\">done</span>\n<span class=\"m\">256</span>: time: <span class=\"m\">0</span>.001<span class=\"p\">;</span> rss: 88MB match_checking\n<span class=\"m\">512</span>: time: <span class=\"m\">0</span>.004<span class=\"p\">;</span> rss: 89MB match_checking\n<span class=\"m\">1024</span>: time: <span class=\"m\">0</span>.013<span class=\"p\">;</span> rss: 89MB    match_checking <span class=\"c1\"># huh, rss is almost constant up to here</span>\n<span class=\"m\">2048</span>: time: <span class=\"m\">0</span>.046<span class=\"p\">;</span> rss: 93MB    match_checking\n<span class=\"m\">4096</span>: time: <span class=\"m\">0</span>.179<span class=\"p\">;</span> rss: 96MB    match_checking\n<span class=\"m\">8192</span>: time: <span class=\"m\">0</span>.715<span class=\"p\">;</span> rss: 103MB   match_checking\n<span class=\"m\">16384</span>: time: <span class=\"m\">3</span>.152<span class=\"p\">;</span> rss: 118MB  match_checking\n<span class=\"m\">32768</span>: time: <span class=\"m\">11</span>.660<span class=\"p\">;</span> rss: 148MB match_checking\n<span class=\"m\">65536</span>: time: <span class=\"m\">55</span>.046<span class=\"p\">;</span> rss: 206MB match_checking\n</code></pre></div>",
        "id": 209197566,
        "sender_full_name": "Jubilee",
        "timestamp": 1599343063
    },
    {
        "content": "<p>the times and iterations increase exponentially though</p>",
        "id": 209197757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599343450
    },
    {
        "content": "<p>Yeah, that doesn't seem surprising given that RSS is rounded to MB.</p>",
        "id": 209198208,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599344448
    },
    {
        "content": "<p>I'd guess if RSS was written out as bytes, you'd see it growing slowly the same way time does.</p>",
        "id": 209198211,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599344461
    },
    {
        "content": "<p>I'm mostly surprised it has the same ~88mb overhead at first at that point in the program.</p>",
        "id": 209199091,
        "sender_full_name": "Jubilee",
        "timestamp": 1599346268
    },
    {
        "content": "<p>That's total memory usage</p>",
        "id": 209199094,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599346312
    }
]