[
    {
        "content": "<p>Is there a reliable way to obtain borrow check errors using the rustc_borrowck public API (i.e while using rustc_borrowck as an external crate)?</p>\n<p>Currently, as I understand it, the only interface to the borrow checker exposed in the public api is <code>get_body_with_borrowck_facts</code></p>\n<div class=\"codehilite\"><pre><span></span><code>rustc_borrowck::consumers::get_body_with_borrowck_facts(tcx, def)\n</code></pre></div>\n<p>As I understand, the returned result should contain input and output facts regarding lifetime information that has been inferred by the borrow checker.</p>\n<p>The input facts field doesn't contain any error information but can map variables to their uses/borrows/drops, although they only seem to be fully populated if you invoke the compiler with <code>-Znll-facts=y</code>.</p>\n<p>However, when running the rustc driver, I've found that the output facts field seems to always be empty, or sometimes has some fields populated (such as <code>move_errors</code>), but this is not consistent.</p>\n<p>Is there a better/recommended way of obtaining the error information?</p>",
        "id": 260809650,
        "sender_full_name": "Kiran Gopinathan",
        "timestamp": 1636470017
    },
    {
        "content": "<p>Could you explain your objective with this information? I might be able to direct you better if I understood what you are seeking to accomplish. In general extracting usable information from the borrow checker is challenging, but maybe there's an alternative for you</p>",
        "id": 260821280,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1636474517
    },
    {
        "content": "<p>I'd like to get granular details on the borrow check errors for feedback during a sort of mechanical transpilation into rust - i.e it seems exactly the kind of information that would be present in the <code>output_facts</code> field of <code>BodyWithBorrowChk</code> if it were populated consistently. I am aware that a possible alternative would be to parse the errors output by the rust compiler (some string surgery is still needed even if I ouptut as json), but I would prefer to access this information through the rustc api.</p>\n<p>I'm fairly certain this isn't a case of an XY problem - I need the rustc borrow check facts in a programmatic way and I don't see a way around that.</p>",
        "id": 260888933,
        "sender_full_name": "Kiran Gopinathan",
        "timestamp": 1636508365
    },
    {
        "content": "<blockquote>\n<p>Is there a better way of acessing these errors than through deserialization of the json error messages + string surgery?</p>\n</blockquote>\n<p>Unfortunately, I don't think so</p>",
        "id": 260984189,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1636548693
    }
]