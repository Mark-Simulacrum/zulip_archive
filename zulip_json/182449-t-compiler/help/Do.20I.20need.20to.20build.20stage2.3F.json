[
    {
        "content": "<p>Hello all, hopefully this is the right stream for this question.</p>\n<p>Essentially, we're building a cross compiler for a new OS (managarm), which involves porting std and libc. Since we don't add any compiler optimisations I figure that we don't <em>really</em> need to build stage2 of the compiler, is this correct? Or will this break things like proc-macros trying to link against rustc?</p>\n<p>The rustc dev guide says some things about ABI differences between the stage1 and stage2 compilers, but we're not sure if this is going to cause a problem for us.</p>",
        "id": 234408314,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1618350869
    },
    {
        "content": "<p>I don't <em>know</em> of anything that would break, but installing a stage1 toolchain instead of just building it is tested less, so you might run into pre-existing bugs</p>",
        "id": 234408716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618351110
    },
    {
        "content": "<p>so I'd say \"try it and see\"</p>",
        "id": 234408746,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618351135
    },
    {
        "content": "<p>Hmm, that makes sense. I think we'll just be prudent and take the 40m compile time hit in that case; would rather not run into strange bugs in future</p>",
        "id": 234409446,
        "sender_full_name": "Matt Taylor",
        "timestamp": 1618351450
    },
    {
        "content": "<p>If you change the contents of the Rust compiler, then yes, you should probably continue to build to stage 2. Rust is an optimizing compiler, so it's possible for it to rearrange the contents of its functions on the final step, as small changes can perturb optimizations it does. If you did the stage 2 process of \"build the optimizing compiler with the optimizing compiler\" multiple times, until e.g. a \"stage 5\", you could hypothetically continue to get different binaries.</p>\n<p>In particular, libstd is the big concern because its code is linked <em>directly</em> into the final binary of Rust programs.</p>",
        "id": 234531388,
        "sender_full_name": "Jubilee",
        "timestamp": 1618417993
    },
    {
        "content": "<p>Historically, the only case in which you <em>had to</em> build stage2 is when using proc macros built by a compiler with a different ABI. But those were changed to be ABI-independent, so even this is no longer necessary today.</p>\n<p>I never build stage2 locally, and so far that hasn't been an issue. I definitely recommend only building stage1, unless you really run into bugs with that configuration, because it just saves so much time.</p>",
        "id": 234532421,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618418363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> that's true, but I don't know how relevant it is? stage1 and stage2 should theoretically <em>generate</em> the same code, the only difference is that you can't <em>link</em> to a stage1 build using rustc_private</p>",
        "id": 234532425,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418365
    },
    {
        "content": "<blockquote>\n<p>If you did the stage 2 process of \"build the optimizing compiler with the optimizing compiler\" multiple times, until e.g. a \"stage 5\", you could hypothetically continue to get different binaries.</p>\n</blockquote>\n<p>this is definitely not true, all versions of a compiler should generate the same code, even if they were built by different toolchains</p>",
        "id": 234532592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418418
    },
    {
        "content": "<p>in fact the only reason to build \"stage3\" is to check that it's exactly the same as stage 2</p>",
        "id": 234532628,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418432
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/75362\">https://github.com/rust-lang/rust/issues/75362</a></p>",
        "id": 234532712,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418461
    },
    {
        "content": "<p>Right, <code>rustc_private</code> is a good point here, those crates will use the ABI of the compiler that built them</p>",
        "id": 234532743,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618418474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"228354\">Matt Taylor</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Do.20I.20need.20to.20build.20stage2.3F/near/234409446\">said</a>:</p>\n<blockquote>\n<p>Hmm, that makes sense. I think we'll just be prudent and take the 40m compile time hit in that case; would rather not run into strange bugs in future</p>\n</blockquote>\n<p>to be clear, when I say \"strange bugs\", I mean bugs in rustbuild itself, not in the compiler</p>",
        "id": 234532930,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418548
    },
    {
        "content": "<p>you will see immediately if something goes wrong because the compiler won't run</p>",
        "id": 234532952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418557
    },
    {
        "content": "<p>I don't think that's necessarily true, or at least, I'm confused by the confidence :)</p>",
        "id": 234532999,
        "sender_full_name": "simulacrum",
        "timestamp": 1618418584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Do.20I.20need.20to.20build.20stage2.3F/near/234532999\">said</a>:</p>\n<blockquote>\n<p>I don't think that's necessarily true, or at least, I'm confused by the confidence :)</p>\n</blockquote>\n<p>I mean, I guess we don't run stage1 tests in CI. But I don't see any reason they'd behave any differently than stage2 (for things other than <code>run-make-fulldeps</code>)</p>",
        "id": 234533083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418625
    },
    {
        "content": "<p>Hmmmmmmmmm maybe I misunderstand something then~<br>\nMy observation was <em>because</em> issues like that are open, i.e. I am assuming that we have not adequately proven that Rust has \"perturbation-free\" builds.</p>",
        "id": 234533234,
        "sender_full_name": "Jubilee",
        "timestamp": 1618418686
    },
    {
        "content": "<p>Yeah, it may just work. Not sure. I think we had ignore-stage1 for some tests though.</p>",
        "id": 234533235,
        "sender_full_name": "simulacrum",
        "timestamp": 1618418686
    },
    {
        "content": "<p>Regardless, building stage 2 is the safe thing to do and seems like good practice.</p>",
        "id": 234533278,
        "sender_full_name": "simulacrum",
        "timestamp": 1618418703
    },
    {
        "content": "<p>We have <code>run-make-fulldeps</code> and <code>ignore-stage1</code> mostly for stuff that links against the compiler crates (codegen backend tests, etc.)</p>",
        "id": 234533379,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618418743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> we aren't <em>testing</em> that we have perturbation free builds, which I think is different. Debian and other distros I think test it on stable releases.</p>",
        "id": 234533391,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418749
    },
    {
        "content": "<p>If stage2 is different than stage3 it's a bug</p>",
        "id": 234533521,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418804
    },
    {
        "content": "<p>I mean, yes, presumably, but it's one we're not detecting and fixing.</p>",
        "id": 234533735,
        "sender_full_name": "Jubilee",
        "timestamp": 1618418876
    },
    {
        "content": "<p>My point though is that even if we do have a reproducibility bug, it's not one that's significant. That's why we stop at stage 2.</p>",
        "id": 234533923,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418927
    },
    {
        "content": "<p>(significant -&gt; would cause tests to fail)</p>",
        "id": 234533999,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418960
    },
    {
        "content": "<p>Ahhhh, I... do not have that confidence! :D</p>",
        "id": 234534008,
        "sender_full_name": "Jubilee",
        "timestamp": 1618418965
    },
    {
        "content": "<p>Well otherwise all the stage1 tests would fail. And people run those locally all the time</p>",
        "id": 234534079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618418995
    },
    {
        "content": "<p>I actually have to always ignore this one run-make-fulldeps test, but this is getting a bit afield.</p>",
        "id": 234534415,
        "sender_full_name": "Jubilee",
        "timestamp": 1618419115
    },
    {
        "content": "<p>Because it's in fulldeps <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> that's my whole point is the abi is the only difference</p>",
        "id": 234534523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618419142
    },
    {
        "content": "<p>The only way for it to have a <em>logical</em> difference is either the nightly or beta toolchain to have unsoundness that affects the compiler itself, at which point we have much bigger problems.</p>",
        "id": 234534828,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618419245
    },
    {
        "content": "<p>\"ABI is the only difference\" can be a big difference. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234534886,
        "sender_full_name": "Jubilee",
        "timestamp": 1618419265
    },
    {
        "content": "<p>Well that's what I mean by \"you'll notice it immediately\"; stage1 doesn't have rustc_private available at all</p>",
        "id": 234535048,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618419326
    },
    {
        "content": "<p>The <em>generated</em> abi is the same, it's only the abi <em>of the compiler itself</em> that's different</p>",
        "id": 234535124,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618419351
    },
    {
        "content": "<p>In theory they should even be able to reuse the same incremental cache</p>",
        "id": 234535432,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618419464
    }
]