[
    {
        "content": "<p>Hi y'all- wondering if anyone familiar with the liveness pass can help out here. I'm looking at <a href=\"https://github.com/rust-lang/rust/issues/77915\">this issue</a> and I'm having a bit of a hard time understanding some of the nuances in liveness analysis. Specifically, I'm not sure I get the difference between a variable being read and a variable being used <a href=\"https://github.com/rust-lang/rust/blob/f42692b1cc1552abf905f9b6650061d246024252/compiler/rustc_passes/src/liveness.rs#L74-L77\">(in the context of the RWU struct)</a>. </p>\n<p>The gist of the bug is that variables used in <code>InOut</code> operands in inline assembly <a href=\"https://doc.rust-lang.org/beta/unstable-book/library-features/asm.html#operand-type\">(that is, they're used as both input and output to some arbitrary assembly instruction)</a> are being marked as read and written to, but are not marked as being used. This can result in such expressions triggering an <code>unused variable</code> lint warning.</p>\n<p>It makes intuitive sense to me that a variable being used both as an input and an output to an arbitrary assembly instruction counts as a use- I feel like it fits the bill of \"some read that is not just used to generate a new value\". Am I on the right track there, or is there more nuance to a variable being marked as used?</p>",
        "id": 213379429,
        "sender_full_name": "oliviacrain",
        "timestamp": 1602736200
    },
    {
        "content": "<p>I don't know anything about this part of the compiler, but I'd guess that \"read\" is what llvm thinks and \"use\" is what rustc thinks</p>",
        "id": 213380102,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602737225
    },
    {
        "content": "<p>Or in other words, there's some rustc pass that's buggy and ignores this intrinsic</p>",
        "id": 213380105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602737241
    },
    {
        "content": "<p>Thanks! Luckily I think it's simpler than that- just a small semantic difference meant to help diagnose finer-grained warnings.</p>",
        "id": 213381414,
        "sender_full_name": "oliviacrain",
        "timestamp": 1602739148
    },
    {
        "content": "<p>The compound assignment is currently the only use-case for having both read &amp; use. For assembly we should conservatively assume that anything that is being read is also used.</p>",
        "id": 213404091,
        "sender_full_name": "tm",
        "timestamp": 1602756892
    },
    {
        "content": "<p>Awesome- glad it's a lot less nuanced than I thought. Thanks!</p>",
        "id": 213424239,
        "sender_full_name": "oliviacrain",
        "timestamp": 1602768285
    }
]