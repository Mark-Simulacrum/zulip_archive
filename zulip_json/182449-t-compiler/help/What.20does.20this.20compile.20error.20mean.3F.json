[
    {
        "content": "<p>So I know this means that things are very broken. Does someone know how to quantify the amount of brokenness?</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_mir/src/monomorphize/collector.rs:826:9: cannot create local mono-item for DefId(2:6820 ~ core[92cf]::fmt::{impl#2}::new_v1)\n</code></pre></div>\n<p>Context: changing bootstrap is always 10x as hard as I expect it to be: <a href=\"https://github.com/rust-lang/rust/pull/80952\">https://github.com/rust-lang/rust/pull/80952</a></p>",
        "id": 222526670,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610506775
    },
    {
        "content": "<p>the query stack is unhelpful:</p>\n<div class=\"codehilite\"><pre><span></span><code>query stack during panic:\n#0 [collect_and_partition_mono_items] collect_and_partition_mono_items\n#1 [exported_symbols] exported_symbols\nend of query stack\n</code></pre></div>",
        "id": 222526757,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610506812
    },
    {
        "content": "<p>the frustrating thing is that <code>cargo check</code> from compiler/rustc works fine, so this has something to do with the invisible environment variables being set</p>",
        "id": 222527046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507061
    },
    {
        "content": "<p>ok I replicated this without env variables</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; &quot;/home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.38/build.rs&quot; &quot;--crate-type&quot; &quot;bin&quot;\nerror: internal compiler error: compiler/rustc_mir/src/monomorphize/collector.rs:826:9: cannot create local mono-item for DefId(2:6820 ~ core[92cf]::fmt::{impl#2}::new_v1)\n</code></pre></div>",
        "id": 222527410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507440
    },
    {
        "content": "<p>my thought is that this is actually something broken with <code>stage1-std</code></p>",
        "id": 222527420,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507460
    },
    {
        "content": "<p><code>rm -r build/$TARGET/stage1-std</code> did not help</p>",
        "id": 222527447,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507488
    },
    {
        "content": "<p>maybe the artifacts are getting put into stage1 instead? that might explain it</p>",
        "id": 222527455,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507500
    },
    {
        "content": "<p>ok so let me think this through. This normally works with stage0, so something is different between stage 0 and stage 1. The big one I can think of is that stage 0 uses <code>stage0-sysroot</code> as the sysroot, not <code>stage0</code>. So maybe using the same sysroot for the compiler and the standard library breaks things somehow?</p>",
        "id": 222527706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507761
    },
    {
        "content": "<p>strangely</p>\n<div class=\"codehilite\"><pre><span></span><code>Checking stage1 std test/bench/example targets (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n</code></pre></div>\n<p>works fine</p>",
        "id": 222527756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507791
    },
    {
        "content": "<p>and this bug happens <code>if !tcx.is_mir_available</code>: <a href=\"https://github.com/rust-lang/rust/blob/058a71016553f267ae80b90276ef79956457d51a/compiler/rustc_mir/src/monomorphize/collector.rs#L825\">https://github.com/rust-lang/rust/blob/058a71016553f267ae80b90276ef79956457d51a/compiler/rustc_mir/src/monomorphize/collector.rs#L825</a></p>",
        "id": 222527800,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507860
    },
    {
        "content": "<p>so maybe <code>x.py check</code> needs to be emitting more artifacts than it does currently?</p>",
        "id": 222527815,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507877
    },
    {
        "content": "<p>I don't know why it would work for stage 0 though</p>",
        "id": 222527860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507892
    },
    {
        "content": "<p>oh interesting, stage0-sysroot has <a href=\"http://libstd.so\">libstd.so</a> but stage1 does not</p>",
        "id": 222527885,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507932
    },
    {
        "content": "<p>actually stage0-sysroot has .rlib files too, stage1 <em>only</em> has .rmeta files</p>",
        "id": 222527902,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610507964
    },
    {
        "content": "<p>oh here's a hint - this is crashing while trying to compile specifically a build script</p>",
        "id": 222528534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610508652
    },
    {
        "content": "<p>maybe the sysroot for the host and target is getting mixed up?</p>",
        "id": 222528539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610508663
    },
    {
        "content": "<p>So you think maybe it's looking at an RLIB that is missing some MIR?</p>",
        "id": 222528784,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610508932
    },
    {
        "content": "<p>no, I think it's compiling build scripts with stage1</p>",
        "id": 222528798,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610508954
    },
    {
        "content": "<p>which doesn't work because it's only generated check metadata for stage1, it needs to use stage0 to have MIR available</p>",
        "id": 222528842,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610508973
    },
    {
        "content": "<p>ok so I think the issue is actually in the rustc shim, not in bootstrap directly</p>",
        "id": 222528877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509033
    },
    {
        "content": "<p>yup that's the issue:</p>\n<div class=\"codehilite\"><pre><span></span><code>using snapshot rustc (/home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage1/bin/rustc)\n</code></pre></div>",
        "id": 222528956,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509096
    },
    {
        "content": "<p>stage1 should <em>never</em> be marked as a snapshot</p>",
        "id": 222528960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509106
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/builder.rs#L1173-L1194\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/builder.rs#L1173-L1194</a></p>",
        "id": 222528999,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509176
    },
    {
        "content": "<p>ayyyy that did it <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 222529090,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509280
    },
    {
        "content": "<p>oh booo, so close</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0514]: found crate `chalk_derive` compiled by an incompatible version of rustc\n  --&gt; /home/joshua/.local/lib/cargo/registry/src/github.com-1ecc6299db9ec823/chalk-ir-0.36.0/src/lib.rs:13:5\n   |\n13 | use chalk_derive::{Fold, HasInterner, SuperVisit, Visit, Zip};\n   |     ^^^^^^^^^^^^\n   |\n   = help: please recompile that crate using this compiler (rustc 1.51.0-dev)\n   = note: the following crate versions were found:\n           crate `chalk_derive` compiled by rustc 1.49.0-beta.1 (21dea46d8 2020-11-18): /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage1-rustc/release/deps/libchalk_derive-843b3d0b9b865ca6.so\n</code></pre></div>",
        "id": 222529165,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509340
    },
    {
        "content": "<p>Do you need to <code>./x.py clean</code> and then it will work, or is the solution untenable?</p>",
        "id": 222529208,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610509386
    },
    {
        "content": "<p>I can try but I doubt it will help, x.py will just regenerate the same artifacts</p>",
        "id": 222529227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509407
    },
    {
        "content": "<p>Well this stuff is over my head <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 222529240,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610509423
    },
    {
        "content": "<p>somehow the beta and stage1 sysroots got mixed up</p>",
        "id": 222529245,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509424
    },
    {
        "content": "<p>oh I found the issue - I'm the one who mixed them up just now.  The build scripts and proc macros are being compiled by beta, so they can't be loaded by stage1.</p>",
        "id": 222529553,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509695
    },
    {
        "content": "<p>I think the fix is to use the stage0 <em>standard library</em>/sysroot, but still use the stage1 compiler</p>",
        "id": 222529565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509709
    },
    {
        "content": "<p>hopefully that doesn't break things</p>",
        "id": 222529572,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509718
    },
    {
        "content": "<p>alternatively I can just unconditionally build the stage1 standard library I guess? I don't know if that's actually helpful since now you need a cross-compiler again</p>",
        "id": 222529599,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610509752
    },
    {
        "content": "<p>amazing</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs</span>\n<span class=\"gh\">index 1aefcad6da0..83ff66d29ca 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/builder.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/builder.rs</span>\n<span class=\"gu\">@@ -998,7 +998,9 @@ pub fn cargo(</span>\n         // the stage0 build means it uses libraries build by the stage0\n         // compiler, but for tools we just use the precompiled libraries that\n         // we've downloaded\n<span class=\"gd\">-        let use_snapshot = mode == Mode::ToolBootstrap;</span>\n<span class=\"gi\">+        //</span>\n<span class=\"gi\">+        // TODO: this is probably wrong</span>\n<span class=\"gi\">+        let use_snapshot = mode == Mode::ToolBootstrap || self.kind == Kind::Check;</span>\n         assert!(!use_snapshot || stage == 0 || self.local_rebuild);\n\n         let maybe_sysroot = self.sysroot(compiler);\n</code></pre></div>",
        "id": 222529837,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510003
    },
    {
        "content": "<p>lol even bootstrap thinks I'm doing this wrong</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;assertion failed: !use_snapshot || stage == 0 || self.local_rebuild&#39;, src/bootstrap/builder.rs:1004:9\n</code></pre></div>",
        "id": 222529860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510025
    },
    {
        "content": "<p>that did not help</p>",
        "id": 222529918,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510057
    },
    {
        "content": "<p>yeah I really don't know why I expected this to work</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0514]: found crate `std` compiled by an incompatible version of rustc\n  |\n  = help: please recompile that crate using this compiler (rustc 1.51.0-dev)\n  = note: the following crate versions were found:\n          crate `std` compiled by rustc 1.49.0-beta.1 (21dea46d8 2020-11-18): /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-432ef729fbfba89e.rlib\n          crate `std` compiled by rustc 1.49.0-beta.1 (21dea46d8 2020-11-18): /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-432ef729fbfba89e.so\n</code></pre></div>",
        "id": 222530111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510253
    },
    {
        "content": "<p>ok, I think I know what's going wrong: I want a fully built standard library for the <em>host</em>, built by stage 1. I don't have that available. I have a standard library for the host built by stage 0, and I have a library for the target built by stage1, but no host. So even if I unconditionally built the standard library, it wouldn't help - it would be for the wrong platform.</p>",
        "id": 222530219,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510380
    },
    {
        "content": "<p>(well, it would happen to work until someone tried to cross-compile)</p>",
        "id": 222530282,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510410
    },
    {
        "content": "<p>the reason this work for stage0 is it happens to have 2 standard libraries available: the version from master, with only metadata available, and the beta version distributed with the beta compiler. So it has it prebuilt and doesn't have to worry about this, that's what 'snapshot' means in this context.</p>",
        "id": 222530334,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510487
    },
    {
        "content": "<p>clearly the solution is to get rid of all proc-macros used by the compiler <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222530357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610510520
    },
    {
        "content": "<p>wow have I really spent an hour on this?</p>",
        "id": 222531712,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610511783
    },
    {
        "content": "<p>ok, the issue after building a host std unconditionally is that there is both check metadata and build metadata (I think? I don't know how crate loading works, seems weird that they conflict if they have the same hash)</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0464]: multiple matching crates for `std`\n  |\n  = note: candidates:\n          crate `std`: /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-57e9e473fc04d4ba.so\n          /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-57e9e473fc04d4ba.rlib\n</code></pre></div>",
        "id": 222531850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610511865
    },
    {
        "content": "<p>the build scripts did compile successfully first, though</p>",
        "id": 222531864,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610511879
    },
    {
        "content": "<p>wrote this up and now I am going to bed <a href=\"https://github.com/rust-lang/rust/pull/80952#issuecomment-759198841\">https://github.com/rust-lang/rust/pull/80952#issuecomment-759198841</a></p>",
        "id": 222532513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610512486
    },
    {
        "content": "<p>fyi <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> I tagged you on the PR but I don't consider this very high priority, I would rather try to figure out <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a> first.</p>",
        "id": 222532609,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610512565
    },
    {
        "content": "<p>From your PR:</p>\n<blockquote>\n<p>It is also very easy to support.</p>\n</blockquote>\n<p>I guess you jinxed yourself? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 222533338,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610513362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/What.20does.20this.20compile.20error.20mean.3F/near/222530357\">said</a>:</p>\n<blockquote>\n<p>clearly the solution is to get rid of all proc-macros used by the compiler <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>this remains the easiest way to fix this <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 222628404,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610564299
    },
    {
        "content": "<p>Removing all build scripts from sysroot builds would also be nice</p>",
        "id": 222634330,
        "sender_full_name": "bjorn3",
        "timestamp": 1610566806
    }
]