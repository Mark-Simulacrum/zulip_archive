[
    {
        "content": "<p>I am trying to build <a href=\"https://github.com/willcrichton/flowistry\">a rustc_private library</a> for multiple platforms. I'm using Github Actions with a matrix of targets: <a href=\"https://github.com/willcrichton/flowistry/blob/master/.github/workflows/release.yml#L24-L60\">https://github.com/willcrichton/flowistry/blob/master/.github/workflows/release.yml#L24-L60</a></p>\n<p>I'm running into an issue where the generated binary for M1 Macs has the wrong dylib path for rustc crates. I believe the issue is that Github Actions is cross-compiling for an ARM target on an x86_64 machine, and rustc doesn't know that so it embeds the x86_64 dylib paths into the ARM binary.</p>\n<p>Has anyone encountered this before? Any way to solve this besides creating my own ARM runner, which Github Actions doesn't support?</p>",
        "id": 273000039,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645644784
    },
    {
        "content": "<p>At <a href=\"https://github.com/willcrichton/flowistry/blob/584dbd8c783e58e7c6aef325e8bff30766f968b7/.github/workflows/release.yml#L54\">https://github.com/willcrichton/flowistry/blob/584dbd8c783e58e7c6aef325e8bff30766f968b7/.github/workflows/release.yml#L54</a> you need to add <code>--target ${{ matrix.target }}</code>. In addition you need to use <code>rustc-dev-${{ matrix.target }}</code> instead of rustc-dev at <a href=\"https://github.com/willcrichton/flowistry/blob/584dbd8c783e58e7c6aef325e8bff30766f968b7/.github/workflows/release.yml#L47\">https://github.com/willcrichton/flowistry/blob/584dbd8c783e58e7c6aef325e8bff30766f968b7/.github/workflows/release.yml#L47</a> I believe.</p>",
        "id": 273000945,
        "sender_full_name": "bjorn3",
        "timestamp": 1645645225
    },
    {
        "content": "<p>When I tried this, the build failed saying the <code>rustc-dev-*</code> component was missing:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: component &#39;rustc-dev-x86_64-unknown-linux-gnu&#39; for target &#39;x86_64-unknown-linux-gnu&#39; is unavailable for download for channel &#39;nightly-2022-02-17&#39;\n</code></pre></div>",
        "id": 273002598,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645646029
    },
    {
        "content": "<p>That might be a manifest bug -- I would expect the file to exist, at least for x86_64-unknown-linux-gnu</p>",
        "id": 273002716,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646080
    },
    {
        "content": "<p>Though I'm seeing rustc-dev-x86_64-unknown-linux-gnu in <code>rustup component list</code>?</p>",
        "id": 273002754,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646101
    },
    {
        "content": "<p>and <code>rustup component add rustc-dev-x86_64-unknown-linux-gnu</code> seems to work for me</p>",
        "id": 273002842,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646141
    },
    {
        "content": "<p>Perhaps it doesn't exist for nightlies? The specific command being run is:</p>\n<div class=\"codehilite\"><pre><span></span><code> rustup toolchain install nightly-2022-02-17 --component rust-src --component rustc-dev-x86_64-unknown-linux-gnu --component llvm-tools-preview\n</code></pre></div>\n<p>And I can reproduce the installation error running on my laptop.</p>",
        "id": 273003007,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645646214
    },
    {
        "content": "<p>hm</p>",
        "id": 273003295,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646338
    },
    {
        "content": "<p>rustup component add rustc-dev-x86_64-unknown-linux-gnu --toolchain nightly works for me</p>",
        "id": 273003307,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646343
    },
    {
        "content": "<p>rustup toolchain install nightly-2022-02-17 --component rust-src --component rustc-dev-x86_64-unknown-linux-gnu --component llvm-tools-preview does fail</p>",
        "id": 273003347,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646358
    },
    {
        "content": "<p>I suspect rustup toolchain install is using different component discovery logic, perhaps?</p>",
        "id": 273003369,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646368
    },
    {
        "content": "<p>You can probably rewrite to manually rustup component install</p>",
        "id": 273003513,
        "sender_full_name": "simulacrum",
        "timestamp": 1645646413
    },
    {
        "content": "<p>Is it important to specify <code>--target ${{ matrix.target }}</code> in the <code>component add</code> command?</p>",
        "id": 273004104,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645646710
    },
    {
        "content": "<p>Also I'm still getting errors if I go through <code>component add</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code>rustup component add rustc-dev-x86_64-apple-darwin --toolchain nightly-2022-02-17\nerror: toolchain &#39;nightly-2022-02-17-x86_64-apple-darwin&#39; does not contain component &#39;rustc-dev-x86_64-apple-darwin&#39; for target &#39;x86_64-apple-darwin&#39;\n</code></pre></div>",
        "id": 273005095,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645647172
    },
    {
        "content": "<p>hm</p>",
        "id": 273005391,
        "sender_full_name": "simulacrum",
        "timestamp": 1645647320
    },
    {
        "content": "<p>it works fine for me with just nightly</p>",
        "id": 273005402,
        "sender_full_name": "simulacrum",
        "timestamp": 1645647325
    },
    {
        "content": "<p>oh, but not for a different target maybe?</p>",
        "id": 273005429,
        "sender_full_name": "simulacrum",
        "timestamp": 1645647342
    },
    {
        "content": "<p>It seems like rustup component add should not error if rustup component list has it in there</p>",
        "id": 273005593,
        "sender_full_name": "simulacrum",
        "timestamp": 1645647407
    },
    {
        "content": "<p>so that sounds like a rustup bug to me.</p>",
        "id": 273005606,
        "sender_full_name": "simulacrum",
        "timestamp": 1645647414
    },
    {
        "content": "<p>so after chatting in wg-rustdoc on the discord, kinnison suggested running</p>\n<div class=\"codehilite\"><pre><span></span><code>rustup component add --toolchain nightly-2022-02-17-x86_64-apple-darwin --target aarch64-apple-darwin rustc-dev\n</code></pre></div>\n<p>I tried this, and now when I try to compile my project, instead of getting \"can't find crate for rustc_borrowck\", i get \"can't find crate for <code>rustc_macros</code> which <code>rustc_borrowck</code> depends on\"</p>",
        "id": 273009736,
        "sender_full_name": "Will Crichton",
        "timestamp": 1645649508
    },
    {
        "content": "<p>Right, proc macros are a hard case. To make rustc-dev work at all when cross-compiling rustc, <code>-Zdual-proc-macros</code> was introduced which basically makes both host and target version of a proc macro accepted by rustc despite having a different crate hash. The host version is likely not shipped with the target rustc-dev component. Maybe the proc macro in the host rustc-dev component is identical? In that case running <code>rustup component add rustc-dev</code> in addition to the one with <code>--target</code> may work. If not, you are probably out of luck. You could try running a rustc version compiled for aarch64 in qemu in the later case. (full system emulation or with some fiddling to make cargo use qemu as wrapper, with user mode emulation)</p>",
        "id": 273011301,
        "sender_full_name": "bjorn3",
        "timestamp": 1645650267
    }
]