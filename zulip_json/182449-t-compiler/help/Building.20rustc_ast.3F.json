[
    {
        "content": "<p>If I install a nightly (I think with the rustc_dev component) I can build crates that use rustc_ast, but I can't build those crates with my stage 1 builds as apparently rustc_ast is either not built or not available for importing. I checked config.toml but couldn't see any relevant fields. How do I build it + make it available for importing?</p>",
        "id": 225825436,
        "sender_full_name": "osa1",
        "timestamp": 1612958261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> so this is weird - you actually need to build the compiler <em>twice</em>: <code>x.py build --stage 1 compiler/rustc</code>. The reason for that is the stage1 compiler was generated by stage0, but programs using rustc_private will be compiled by stage1, which has a different ABI.</p>",
        "id": 225837299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612964792
    },
    {
        "content": "<p>It doesn't come up for distributed artifacts because the stage2 compiler was built from the same source as stage1, so it has the same ABI</p>",
        "id": 225837380,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612964842
    },
    {
        "content": "<p>Hmm so because rustc_private stuff are built with stage 1, which is built using stage 0 and has different ABI, stage 1 can't access rustc_private stuff, I need stage 2 for that? (where both the compiler itself and libraries will be built by the same compiler?)</p>\n<p>Did I get this right?</p>",
        "id": 225837709,
        "sender_full_name": "osa1",
        "timestamp": 1612964994
    },
    {
        "content": "<p>The property you need isn't \"built by the same compiler\", it's \"built with the same ABI\". So using a stage1 toolchain should be ok as long as you compile rustc twice with <code>build compiler/rustc</code>.</p>",
        "id": 225837958,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612965109
    },
    {
        "content": "<p>The difference is that stage1/rustc and stage2/rustc may be different binaries (e.g. optimized differently) but they will still <em>produce</em> (compile) binaries with the same ABI</p>",
        "id": 225838086,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612965163
    },
    {
        "content": "<p>OK, I think I got it. Thanks.</p>",
        "id": 225838195,
        "sender_full_name": "osa1",
        "timestamp": 1612965217
    },
    {
        "content": "<p>Another way to think of it is that rustc_private is sort of the C equivalent of <code>rustc -lrustc</code>: you're linking the program to the same dynamic libraries the compiler uses</p>",
        "id": 225838400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612965335
    }
]