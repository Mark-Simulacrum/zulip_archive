[
    {
        "content": "<p>I've been toying around with getting rustdoc tests to build and run under Bazel so my team can finally start using them but to do so, I need some way of building the tests separately from running them. I've been able to do this with nightly toolchains and <a href=\"https://github.com/rust-lang/rust/issues/56925\">https://github.com/rust-lang/rust/issues/56925</a> but in order to run them, I've written my own less-than-desirable test runner. Is there any way I can have rustdoc re-run with pre-built test binaries?</p>",
        "id": 261374126,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636829096
    },
    {
        "content": "<p>Rustdoc only supports building tests itself afaik. Sometimes this is even the only possible strategy. For example for compile fail tests, where you can't just provide pre-built binaries as compilation needs to fail.</p>",
        "id": 261375407,
        "sender_full_name": "bjorn3",
        "timestamp": 1636830865
    },
    {
        "content": "<p>I mean, <code>rustdoc</code> did build the tests, just in a previous execution, which I suppose makes no difference here? The thing I'm trying to work around is that the tests get built in a sandbox and running rustdoc outside of that sandbox would probably fail or produce different results</p>",
        "id": 261375838,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636831573
    },
    {
        "content": "<p>If a test is a compile fail test, rustdoc will not persist anything about the fact that the test failed to compile, so it would need to try to compile it again even if all already compiled test binaries are reused by rustdoc.</p>",
        "id": 261376088,
        "sender_full_name": "bjorn3",
        "timestamp": 1636832041
    },
    {
        "content": "<p>Why can't you run rustdoc and all tests produced by rustdoc in the same sandbox?</p>",
        "id": 261376233,
        "sender_full_name": "bjorn3",
        "timestamp": 1636832173
    },
    {
        "content": "<p>Generally tests are built and run separately</p>",
        "id": 261376321,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636832314
    },
    {
        "content": "<p>There's a big philosophy about that in Bazel</p>",
        "id": 261376343,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636832334
    },
    {
        "content": "<p>I mean, I have what I want but I'm sacrificing the nice test harness which I'd love to avoid</p>",
        "id": 261376455,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636832473
    },
    {
        "content": "<p>or have to recreate</p>",
        "id": 261376456,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636832477
    },
    {
        "content": "<p>Also, what do you mean by \"compile fail test\"?</p>",
        "id": 261376685,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636832771
    },
    {
        "content": "<p>Just some rustdoc snippet that you expect to fail to compile if the code changes?</p>",
        "id": 261376773,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636832926
    },
    {
        "content": "<p>Yes, something like:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_error_codes/src/error_codes/E0423.md\">https://github.com/rust-lang/rust/blob/673d0db5e393e9c64897005b470bfeb6d5aec61b/compiler/rustc_error_codes/src/error_codes/E0423.md</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// ```compile_fail</span>\n<span class=\"sd\">/// struct Foo { a: bool };</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// let f = Foo();</span>\n<span class=\"sd\">/// // error: expected function, tuple struct or tuple variant, found `Foo`</span>\n<span class=\"sd\">/// // `Foo` is a struct name, but this expression uses it like a function name</span>\n<span class=\"sd\">/// ```</span>\n</code></pre></div>\n<p>They are often used to demonstrate incorrect use of api's.</p>",
        "id": 261377055,
        "sender_full_name": "bjorn3",
        "timestamp": 1636833358
    },
    {
        "content": "<p>Or test that misuse doesn't compile and instead for example gives a borrowck error.</p>",
        "id": 261377104,
        "sender_full_name": "bjorn3",
        "timestamp": 1636833412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"343063\">@UebelAndre</span> on nightly you can use --persist-doctests --no-run I think. Not sure if there's a programmatic way to get the output path.</p>",
        "id": 261384006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636843093
    },
    {
        "content": "<p>Yeah, I can build and find the tests but now I want to run them using the test runner. I can invoke the tests directly but do miss libtest</p>",
        "id": 261384037,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636843184
    },
    {
        "content": "<p>... I don't understand why --persist-doctests would prevent you from using the test runner</p>",
        "id": 261386781,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636847156
    },
    {
        "content": "<p>The issue isn't  in <code>--persist-doctests</code> again, because I was hoping to build and test separately, I wanted to persist tests but also use <code>--no-run</code> so that \"building\" would be separated from \"testing\". This worked and I could produce binaries without actually running them. But then the issue became \"how do I now get rustdoc to run those pre-built binaries\"?</p>",
        "id": 261432429,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636915854
    },
    {
        "content": "<p>While I still think the behavior is desirable, It seems a long way off from being something I can rely on and would need to do some work in <code>rustdoc</code> to make that experience better</p>",
        "id": 261432460,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636915905
    },
    {
        "content": "<p>I did run into an issue though in trying to run <code>rustdoc --test</code></p>\n<div class=\"codehilite\"><pre><span></span><code>==================== Test output for //tools/cargo_bazel:rustdoc_test:\nerror[E0460]: found possibly newer version of crate `ucd_trie` which `tera` depends on\n --&gt; tools/cargo_bazel/src/rendering/template_engine.rs:7:5\n  |\n7 | use tera::{self, Tera};\n  |     ^^^^\n  |\n  = note: perhaps that crate needs to be recompiled?\n  = note: the following crate versions were found:\n          crate `ucd_trie`: /private/var/tmp/_bazel_user/c4900dc498759a5aae30fdfe5c69c114/execroot/cargo_bazel/bazel-out/darwin-opt-exec-2B5CBBC6/bin/external/crate_index__ucd-trie-0.1.3/libucd_trie--891559306.rlib\n          crate `tera`: /private/var/tmp/_bazel_user/c4900dc498759a5aae30fdfe5c69c114/execroot/cargo_bazel/bazel-out/darwin-fastbuild/bin/external/crate_index__tera-1.15.0/libtera--749639002.rlib\n\nerror: aborting due to previous error\n</code></pre></div>\n<p>I've never seen this before and don't think I understand what the error means by <code>found possibly newer version of crate </code>. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  would you be able to explain the error to me a bit more?</p>",
        "id": 261432529,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636915978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343063\">UebelAndre</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Rustdoc.20test.20harness.20with.20persisted.20tests/near/261376343\">said</a>:</p>\n<blockquote>\n<p>There's a big philosophy about that in Bazel</p>\n</blockquote>\n<p>Why not treat rustdoc as an interpreter? No separation of build and execution <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 261436786,
        "sender_full_name": "The 8472",
        "timestamp": 1636921714
    },
    {
        "content": "<p>it's just jitting to disk!</p>",
        "id": 261436796,
        "sender_full_name": "The 8472",
        "timestamp": 1636921746
    },
    {
        "content": "<p>maybe one could even make it use O_TMPFILE for that</p>",
        "id": 261436855,
        "sender_full_name": "The 8472",
        "timestamp": 1636921804
    },
    {
        "content": "<p>I think I've gotten what I want (and i think effectively that) by not trying to separate build and test. Just simply invoking <code>rustdoc --test</code>. For now, I'm stuck on that error....</p>",
        "id": 261437359,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636922536
    },
    {
        "content": "<p>Would definitely appreciate the help since I feel to understand it I need to do a very deep dive into rustc/rustdoc</p>",
        "id": 261437368,
        "sender_full_name": "UebelAndre",
        "timestamp": 1636922574
    },
    {
        "content": "<p>Not sure, sorry. I would try cleaning the build directory maybe</p>",
        "id": 261437456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636922746
    },
    {
        "content": "<p>I think it means the crate expects a dependency to have a particular crate hash but the found crate hash doesn't match. I have seen that happening when building rustc and changing code at the same time.</p>",
        "id": 261442181,
        "sender_full_name": "The 8472",
        "timestamp": 1636929745
    }
]