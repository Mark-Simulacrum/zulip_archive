[
    {
        "content": "<p>I'm trying to add a the ability to add a label to a diagnostic in the <code>proc_macro</code> crate, which appears to be possible using the internal <code>rustc_errors::MultiSpan</code> struct. The diagnostic code currently has the ability to add spans to a <code>MultiSpan</code>, but not labels. I can't figure out where the code that even allows the former comes from — the bridge seems quite opaque. What exactly is the purpose of the various \"bridges\" in the compiler? Perhaps if I understood that, I'd be able to do what I'm trying to do.</p>",
        "id": 231195629,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616305587
    },
    {
        "content": "<p>Alright…I'm pretty sure I figured it out. The compiler led me to the wrong file in the bridge module, so once I found the right one it was straightforward to add the additional method. Still not entirely clear on the purpose of the bridge, but I suppose that's secondary.</p>",
        "id": 231199221,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616311047
    },
    {
        "content": "<p>Admittedly tangential to my original question, but how do I go about using my custom-built <code>proc_macro</code> crate? I'd like to test it before putting a PR up.</p>",
        "id": 231203116,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616316637
    },
    {
        "content": "<p>The bridge is to allow proc-macro compiled from the same source, but by different compilers to be abi compatible. This is necessary for bootstrapping.</p>",
        "id": 231210509,
        "sender_full_name": "bjorn3",
        "timestamp": 1616326153
    },
    {
        "content": "<p>That hurts my brain <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> how is that possible for them to be abi compatible without repr(C)?</p>",
        "id": 231214879,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616331402
    },
    {
        "content": "<p>It actually does use <code>#[repr(C)]</code> and <code>extern \"C\"</code> for all types and functions in the bridge. It serializes many proc macro types into a byte buffer.</p>",
        "id": 231214974,
        "sender_full_name": "bjorn3",
        "timestamp": 1616331598
    },
    {
        "content": "<p>ahhh that makes more sense, thanks!</p>",
        "id": 231215471,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616332111
    },
    {
        "content": "<p>Ah so it's necessary because the libraries are pre-compiled when distributed? That makes sense.</p>\n<p>Question still stands on how to use it instead of the built-in one to test it locally? I'd obviously prefer to make sure things work before submitting a PR.</p>",
        "id": 231234588,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616353367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20.22bridges.22.20work.3F/near/231234588\">said</a>:</p>\n<blockquote>\n<p>Ah so it's necessary because the libraries are pre-compiled when distributed? That makes sense.</p>\n<p>Question still stands on how to use it instead of the built-in one to test it locally? I'd obviously prefer to make sure things work before submitting a PR.</p>\n</blockquote>\n<p>are you asking for <code>x.py check --stage 1 library/std</code> maybe? that builds <code>proc_macro</code> with the newly built compiler</p>",
        "id": 231234872,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616353666
    },
    {
        "content": "<p>I can <code>check</code> the code and know that it will compile. I'm trying to use it with \"normal\" code — so I can see the output of the newly implemented diagnostics.</p>",
        "id": 231234959,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616353726
    },
    {
        "content": "<p>I ran <code>./x.py build library/proc_macro</code> but don't even see where it was output.</p>",
        "id": 231234970,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616353746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20do.20.22bridges.22.20work.3F/near/231234588\">said</a>:</p>\n<blockquote>\n<p>Ah so it's necessary because the libraries are pre-compiled when distributed? That makes sense.</p>\n<p>Question still stands on how to use it instead of the built-in one to test it locally? I'd obviously prefer to make sure things work before submitting a PR.</p>\n</blockquote>\n<p>I don't know how would you test it, but I would write a UI test, <em>maybe</em> in <a href=\"https://github.com/rust-lang/rust/tree/HEAD/src/test/ui/proc-macro\">https://github.com/rust-lang/rust/tree/HEAD/src/test/ui/proc-macro</a> (I'm not sure about the location).</p>",
        "id": 231235074,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616353844
    },
    {
        "content": "<p>ah you want <a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#creating-a-rustup-toolchain\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#creating-a-rustup-toolchain</a> then</p>",
        "id": 231235088,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616353859
    },
    {
        "content": "<p>Looking at the UI test directory, I'm not sure that's what I want. I'll look into making a toolchain — that sounds more like what I want. Looks like I need to bootstrap everything myself? This shall be fun <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 231235303,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616354103
    },
    {
        "content": "<p>You'll probably need to add a UI test anyways if you want to get this merged</p>",
        "id": 231235515,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616354311
    },
    {
        "content": "<p>Of course. But just to make sure it works at all, playing around by hand will be far simpler. And surprisingly there's not UI tests for the existing implementation there</p>",
        "id": 231235544,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1616354344
    },
    {
        "content": "<p>I found this test is related to diagnostics: <a href=\"https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/src/test/ui/proc-macro/multispan.rs\">https://github.com/rust-lang/rust/blob/f82664191d0e8764b7435b9d72eb0e366b8b1464/src/test/ui/proc-macro/multispan.rs</a><br>\nTo be honest, I think writing a new test like that is actually simpler than creating a custom toolchain...</p>",
        "id": 231235780,
        "sender_full_name": "hyd-dev",
        "timestamp": 1616354629
    },
    {
        "content": "<blockquote>\n<p>Ah so it's necessary because the libraries are pre-compiled when distributed? That makes sense.</p>\n</blockquote>\n<p>I think it's so <code>proc_macro</code> can link to <code>rustc_errors</code> even though proc_macro is compiled by stage1 and rustc_errors is compiled by stage0</p>",
        "id": 231250960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616372559
    },
    {
        "content": "<p>otherwise you wouldn't be able to build proc-macros with a stage1 toolchain, only stage2, and the compiler has proc macros as dependencies (notably large parts of <code>rustc_query_impl</code> depend on <code>rustc_macros</code>)</p>",
        "id": 231250979,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616372596
    },
    {
        "content": "<p>Exactly!</p>",
        "id": 231276962,
        "sender_full_name": "bjorn3",
        "timestamp": 1616402282
    }
]