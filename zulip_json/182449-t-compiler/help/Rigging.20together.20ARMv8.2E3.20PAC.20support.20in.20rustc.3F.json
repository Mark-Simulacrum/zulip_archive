[
    {
        "content": "<p>Hello, I'd like to try to rig together pointer authentication support within rustc. I tried this a few months ago, but failed.</p>\n<ul>\n<li>I'm using the apple/llvm-project, as it has full PAC support</li>\n<li>PAC support involves emitting LLVM IR instructions around things like C function pointers, vtables, globals, etc<br>\n<a href=\"https://github.com/apple/llvm-project/blob/apple/main/llvm/docs/PointerAuth.md\">https://github.com/apple/llvm-project/blob/apple/main/llvm/docs/PointerAuth.md</a></li>\n</ul>\n<p>Where would the stuff relevant to this (as in, where the IR for things like that is emitted) in rustc_codegen_llvm be?</p>",
        "id": 222935363,
        "sender_full_name": "aspen",
        "timestamp": 1610749948
    },
    {
        "content": "<p>I'm not sure. The way I normally try to find things in rustc is with ripgrep - if you know what the relevant LLVM functions are called, you could search for those.</p>",
        "id": 222935623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610750134
    },
    {
        "content": "<p>IIRC the main trouble I ran in to was related to constants/global initializers</p>",
        "id": 222935717,
        "sender_full_name": "aspen",
        "timestamp": 1610750183
    },
    {
        "content": "<p>Which are initialized like this with PAC LLVM IR intrinsics </p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"vg\">@fp.ptrauth</span> <span class=\"p\">=</span> <span class=\"k\">constant</span> <span class=\"p\">{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"p\">}</span>\n                       <span class=\"p\">{</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"p\">&lt;</span><span class=\"err\">value</span><span class=\"p\">&gt;,</span>\n                         <span class=\"kt\">i32</span> <span class=\"p\">&lt;</span><span class=\"err\">key</span><span class=\"p\">&gt;,</span>\n                         <span class=\"kt\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">address</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;,</span>\n                         <span class=\"kt\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">integer</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;</span>\n                       <span class=\"p\">},</span> <span class=\"k\">section</span> <span class=\"s\">\"llvm.ptrauth\"</span>\n</code></pre></div>",
        "id": 222935745,
        "sender_full_name": "aspen",
        "timestamp": 1610750203
    },
    {
        "content": "<p>sorry - I don't know what 'constant' means in an LLVM context. Is this like a compile-time constant?</p>",
        "id": 222935904,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610750296
    },
    {
        "content": "<blockquote>\n<p>Authenticated Global Relocation</p>\n<p>Intrinsics can be used to produce signed pointers dynamically, in code, but not for signed pointers referenced by constants, in, e.g., global initializers.</p>\n<p>The latter are represented using a special kind of global describing an authenticated relocation (producing a signed pointer).</p>\n<p>These special global must live in section 'llvm.ptrauth', and have a specific type.</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"vg\">@fp.ptrauth</span> <span class=\"p\">=</span> <span class=\"k\">constant</span> <span class=\"p\">{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"p\">}</span>\n                       <span class=\"p\">{</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"p\">&lt;</span><span class=\"err\">value</span><span class=\"p\">&gt;,</span>\n                         <span class=\"kt\">i32</span> <span class=\"p\">&lt;</span><span class=\"err\">key</span><span class=\"p\">&gt;,</span>\n                         <span class=\"kt\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">address</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;,</span>\n                         <span class=\"kt\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">integer</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;</span>\n                       <span class=\"p\">},</span> <span class=\"k\">section</span> <span class=\"s\">\"llvm.ptrauth\"</span>\n</code></pre></div>\n<p>is equivalent to @fp.ptrauth being initialized with:</p>\n<p><div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code>  <span class=\"nv\">%disc</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"kt\">i64</span> <span class=\"vg\">@llvm.ptrauth.blend.i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">address</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;,</span> <span class=\"kt\">i64</span> <span class=\"p\">&lt;</span><span class=\"err\">integer</span> <span class=\"err\">discriminat</span><span class=\"k\">or</span><span class=\"p\">&gt;)</span>\n  <span class=\"nv\">%signed_fp</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"kt\">i64</span> <span class=\"vg\">@llvm.ptrauth.sign.i64</span><span class=\"p\">(</span><span class=\"kt\">i64</span> <span class=\"k\">bitcast</span> <span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"p\">&lt;</span><span class=\"err\">value</span><span class=\"p\">&gt;</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span><span class=\"p\">),</span> <span class=\"kt\">i32</span> <span class=\"p\">&lt;</span><span class=\"err\">key</span><span class=\"p\">&gt;,</span> <span class=\"kt\">i64</span> <span class=\"nv\">%disc</span><span class=\"p\">)</span>\n  <span class=\"nv\">%fp_p_loc</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"kt\">i32</span><span class=\"p\">,</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"p\">}*</span> <span class=\"vg\">@fp.ptrauth</span> <span class=\"k\">to</span> <span class=\"kt\">i64</span><span class=\"p\">*</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i64</span> <span class=\"nv\">%signed_fp</span><span class=\"p\">,</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%fp_p_loc</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 222936003,
        "sender_full_name": "aspen",
        "timestamp": 1610750383
    },
    {
        "content": "<p>that's what the docs in the LLVM fork say</p>",
        "id": 222936014,
        "sender_full_name": "aspen",
        "timestamp": 1610750395
    },
    {
        "content": "<p>ok I see, the fork added new LLVM functions? and you don't know how to call those functions through <code>rustc_llvm</code>?</p>",
        "id": 222936083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610750435
    },
    {
        "content": "<p>no, I had trouble with <em>where</em> to call these</p>",
        "id": 222936101,
        "sender_full_name": "aspen",
        "timestamp": 1610750455
    },
    {
        "content": "<p>sorry if i'm being vague, i kind of just gave up on this a few months back, and am just now getting back to it</p>",
        "id": 222936132,
        "sender_full_name": "aspen",
        "timestamp": 1610750484
    },
    {
        "content": "<p>nah you're good, I know nothing about codegen and am stumbling along as much as you are <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222936149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610750506
    },
    {
        "content": "<p>probably <a href=\"https://rustc-dev-guide.rust-lang.org/backend/codegen.html\">https://rustc-dev-guide.rust-lang.org/backend/codegen.html</a> will be more helpful than I can be</p>",
        "id": 222936216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610750534
    },
    {
        "content": "<p>that doesn't really describe the innards though, sadly</p>",
        "id": 222938716,
        "sender_full_name": "aspen",
        "timestamp": 1610752010
    },
    {
        "content": "<p>In <code>rustc_codegen_llvm/src/callee.rs</code>, what's <code>llfn</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llfn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">llfn</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">get_declared_value</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">sym</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Create a fn pointer with the new signature.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llptrty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fn_abi</span><span class=\"p\">.</span><span class=\"n\">ptr_to_llvm_type</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>A pointer to a function, right?</p>",
        "id": 222946424,
        "sender_full_name": "aspen",
        "timestamp": 1610758058
    },
    {
        "content": "<p>the function value itself.</p>",
        "id": 222946754,
        "sender_full_name": "nagisa",
        "timestamp": 1610758338
    },
    {
        "content": "<p>hm, it's the pointers that i need to sign.</p>",
        "id": 222946809,
        "sender_full_name": "aspen",
        "timestamp": 1610758409
    },
    {
        "content": "<p>actually i don't even need to bother with \"internal\" functions (stuff that's in the same binary), it's calls to system libraries / dynamic libraries that i need to worry about</p>",
        "id": 222946842,
        "sender_full_name": "aspen",
        "timestamp": 1610758442
    },
    {
        "content": "<p>at least for now</p>",
        "id": 222946886,
        "sender_full_name": "aspen",
        "timestamp": 1610758449
    },
    {
        "content": "<p>I think for your purposes that's either the function value (symbol) itself or maybe it ptrcasted to a plain pointer.</p>",
        "id": 222948918,
        "sender_full_name": "nagisa",
        "timestamp": 1610760221
    }
]