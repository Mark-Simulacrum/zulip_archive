[
    {
        "content": "<p>For <a href=\"https://github.com/rust-lang/rust/pull/77242#issuecomment-699565095\">https://github.com/rust-lang/rust/pull/77242#issuecomment-699565095</a> I want to split out <code>broken_intra_doc_links</code> into multiple lints in the same lint group. But <code>broken_intra_doc_links</code> is already in the <code>rustdoc</code> lint group. Is there a way to nest groups so that <code>rustdoc</code> enables <code>broken_intra_doc_links</code> and <code>broken_intra_doc_links</code> enables several other lints?</p>",
        "id": 211390579,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601168583
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span></p>",
        "id": 211390584,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601168587
    },
    {
        "content": "<p>looks like no, it goes through <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LintGroup.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LintGroup.html</a>, which requires a LintId, which doesn't allow for nesting LintGroups</p>",
        "id": 211391111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601169481
    },
    {
        "content": "<p>hmm, how hard would that be to add?</p>",
        "id": 211391150,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601169488
    },
    {
        "content": "<p>Thanks for considering this. Mostly I'm just excited to turn every <code>Type</code> into an intra-doc link in my <code>rustc</code> code.  Do we warn for intra-doc links between private items? Or just public-to-private? If it's the second maybe I should just be more careful about what's public.</p>\n<p>I have no idea how difficult it would be to have arbitrarily nested lint groups. Perhaps there's some way to abuse lint aliasing to emulate an extra level?</p>",
        "id": 211392074,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601171127
    },
    {
        "content": "<p>just for public-to-private</p>",
        "id": 211392137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171189
    },
    {
        "content": "<blockquote>\n<p>I have no idea how difficult it would be to have arbitrarily nested lint groups. Perhaps there's some way to abuse lint aliasing to emulate an extra level?</p>\n</blockquote>\n<p>I'm not sure that would work but let me try</p>",
        "id": 211392151,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171226
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77249\">https://github.com/rust-lang/rust/pull/77249</a> fyi</p>",
        "id": 211392157,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171247
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>store.register_group_alias(&quot;broken_intra_doc_links&quot;, &quot;rustdoc&quot;);\n</code></pre></div>\n\n\n</blockquote>\n<p>this seems like a bad idea <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 211392286,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171419
    },
    {
        "content": "<p>I'll be honest, I think I'm going to work on <a href=\"https://github.com/rust-lang/rust/issues/77193\">https://github.com/rust-lang/rust/issues/77193</a> instead</p>",
        "id": 211392366,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171547
    },
    {
        "content": "<p>if someone else comes up with bright ideas let me know though</p>",
        "id": 211392370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Nested.20lint.20groups.3F/near/211392137\">said</a>:</p>\n<blockquote>\n<p>just for public-to-private</p>\n</blockquote>\n<p>No worries. I'm actually a bit surprised that it didn't work, since that was a link from a method on a <code>pub</code> trait to a method on another <code>pub</code> trait in the same module.</p>",
        "id": 211392516,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601171776
    },
    {
        "content": "<p>hmm that seems like a rustdoc bug</p>",
        "id": 211392518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171794
    },
    {
        "content": "<p>let me look again at what failed</p>",
        "id": 211392519,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171799
    },
    {
        "content": "<p><code>dataflow</code> has a lot of re-exporting going on, and I don't think the second trait is re-exported even though it appears in the signature of the method of the public trait. Might be that <code>rustdoc</code> has it correct but <code>rustc</code> doesn't.</p>",
        "id": 211392575,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601171884
    },
    {
        "content": "<p>There's some long-standing private-in-public bugs like this IIRC.</p>",
        "id": 211392586,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601171908
    },
    {
        "content": "<p>I'll try to reduce it.</p>",
        "id": 211392589,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601171927
    },
    {
        "content": "<p>this is going through rustc, so I wouldn't expect it to be different:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">privacy_access_levels</span><span class=\"p\">(</span><span class=\"n\">LOCAL_CRATE</span><span class=\"p\">).</span><span class=\"n\">is_exported</span><span class=\"p\">(</span><span class=\"n\">hir_src</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">privacy_access_levels</span><span class=\"p\">(</span><span class=\"n\">LOCAL_CRATE</span><span class=\"p\">).</span><span class=\"n\">is_exported</span><span class=\"p\">(</span><span class=\"n\">hir_dst</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">privacy_error</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">item</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">path_str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dox</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">link_range</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211392600,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601171965
    },
    {
        "content": "<p>record for most hacky code of the night?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// HACK: rustc_resolve thinks that `crate` is the crate currently being documented.</span>\n<span class=\"w\">            </span><span class=\"c1\">// But rustdoc wants it to mean the crate this item was originally present in.</span>\n<span class=\"w\">            </span><span class=\"c1\">// To work around this, remove it and resolve relative to the crate root instead.</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">path_str</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"crate::\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_span</span>::<span class=\"n\">def_id</span>::<span class=\"n\">CRATE_DEF_INDEX</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">path_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">path_str</span><span class=\"p\">[</span><span class=\"s\">\"crate::\"</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"o\">..</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">module_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">krate</span>: <span class=\"nc\">item</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">krate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"nc\">CRATE_DEF_INDEX</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211392749,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601172195
    },
    {
        "content": "<p>of the night, surely</p>",
        "id": 211392847,
        "sender_full_name": "Lokathor",
        "timestamp": 1601172315
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4668a806d06b0d3c4187310c9e7fe0dc\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4668a806d06b0d3c4187310c9e7fe0dc</a></p>\n<p>is the MCVE. <code>rustdoc</code> is correct here. The bug is in <code>rustc</code>. <code>B</code> isn't publicly-visible, but appears in the signature of <code>A::foo</code>.</p>",
        "id": 211392914,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601172384
    },
    {
        "content": "<p>I think usually we warn for cases like this. I'll open an issue.</p>",
        "id": 211392924,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601172417
    },
    {
        "content": "<p>Sorry for the trouble! As long as private-to-private links are supported, I don't know how urgent it is to split the lints.</p>",
        "id": 211392948,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601172482
    },
    {
        "content": "<p>ehh, I think it makes sense to split them anyway</p>",
        "id": 211392999,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601172538
    },
    {
        "content": "<p>things like ambiguity errors should be split too IMO</p>",
        "id": 211393006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601172547
    },
    {
        "content": "<p>then we can upgrade <code>broken_intra_doc_links</code> to deny-by-default and ambiguity would stay a warning</p>",
        "id": 211393014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601172564
    },
    {
        "content": "<p>Sweet! I love this feature by the way. Thanks for pushing it over the finish line.</p>",
        "id": 211393079,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601172666
    },
    {
        "content": "<p>absolutely! I'm so excited it's finally going to be stable :D</p>",
        "id": 211393085,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601172679
    },
    {
        "content": "<p>I've spent like 3 months on it lol</p>",
        "id": 211393089,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601172692
    },
    {
        "content": "<p>oh god it got worse <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">path_str</span><span class=\"p\">.</span><span class=\"n\">starts_with</span><span class=\"p\">(</span><span class=\"s\">\"crate::\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustc_span</span>::<span class=\"n\">def_id</span>::<span class=\"n\">CRATE_DEF_INDEX</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// HACK(jynelson): rustc_resolve thinks that `crate` is the crate currently being documented.</span>\n<span class=\"w\">                </span><span class=\"c1\">// But rustdoc wants it to mean the crate this item was originally present in.</span>\n<span class=\"w\">                </span><span class=\"c1\">// To work around this, remove it and resolve relative to the crate root instead.</span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK(jynelson)(2): If we just strip `crate::` then suddenly primitives become ambiguous</span>\n<span class=\"w\">                </span><span class=\"c1\">// (consider `crate::char`). Instead, change it to `self::`. This works because 'self' is now the crate root.</span>\n<span class=\"w\">                </span><span class=\"n\">resolved_self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"self::{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path_str</span><span class=\"p\">[</span><span class=\"s\">\"crate::\"</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"o\">..</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">path_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">resolved_self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">module_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">krate</span>: <span class=\"nc\">item</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">krate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"nc\">CRATE_DEF_INDEX</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211393289,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601172987
    },
    {
        "content": "<p>Upon further investigation, my code is isomorphic to the following, so I think this is working as intended as far as <code>rustc</code> is concerned.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">private</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sealed</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">private</span>::<span class=\"n\">Sealed</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// [`private::Sealed`]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211393377,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601173194
    },
    {
        "content": "<p>New lint: one <code>HACK</code> per-person, per-line <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211393425,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601173243
    },
    {
        "content": "<p>it's multiple <em>lines</em></p>",
        "id": 211393430,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601173257
    },
    {
        "content": "<p>maybe per scope lmao</p>",
        "id": 211393438,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601173266
    }
]