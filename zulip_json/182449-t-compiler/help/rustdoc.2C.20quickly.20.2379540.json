[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I'm finally taking a look at <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a> and I realize that we didn't really talk about the expected workflow. I think it might be helpful to layout what I'm expecting:</p>\n<ul>\n<li>we add a use-ci-for-bootstrap flag to config.toml to gate these things:</li>\n<li>we replace the stage0 compiler with a downloaded copy, additionally downloading and unpacking the rustc-dev (IIRC) component to give us a complete sysroot, not just std (this is entirely a bootstrap.py change)</li>\n<li>rustbuild switches off the separate stage0-sysroot argument, instead treating stage0 just like all other stages (i.e. that their sysroot is complete). The std and rustc steps are modified to do nothing in stage 0; the sysroot is already complete. The assembly step for the stage 1 sysroot will simply copy stage0 to stage1.</li>\n<li>rustdoc can then be compiled with x.py build --stage 1 src/tools/rustdoc, which should place a freshly compiled rustdoc into stage1/bin/rustdoc (I believe this should not require modifications)</li>\n</ul>\n<p>I think this should be much simpler than the current patch, though I have not looked at it in too much detail.</p>",
        "id": 220815970,
        "sender_full_name": "simulacrum",
        "timestamp": 1608749008
    },
    {
        "content": "<p>stage0-sysroot is normally used so that beta rustc will use master libstd?</p>",
        "id": 220816121,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608749115
    },
    {
        "content": "<blockquote>\n<p>The std and rustc steps are modified to do nothing in stage 0; the sysroot is already complete. The assembly step for the stage 1 sysroot will simply copy stage0 to stage1.</p>\n</blockquote>\n<p>that sounds a <em>lot</em> simpler, yeah. although I was having trouble getting the copying to work correctly - does it need a manifest or should I just <code>cp -r</code>?</p>",
        "id": 220816187,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608749163
    },
    {
        "content": "<p>also, if stage0 is now nightly, does that mean we <em>shouldn't</em> set cfg(bootstrap)?</p>",
        "id": 220816497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608749354
    },
    {
        "content": "<p>oh well I guess it doesn't matter since master libstd is no longer built except with the stage 1 compiler</p>",
        "id": 220816532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608749373
    },
    {
        "content": "<p>manifests are not used at all by rustbuild, so no, you shouldn't need to think about that</p>",
        "id": 220816653,
        "sender_full_name": "simulacrum",
        "timestamp": 1608749424
    },
    {
        "content": "<p>cfg bootstrap is automatically not set, iirc</p>",
        "id": 220816669,
        "sender_full_name": "simulacrum",
        "timestamp": 1608749438
    },
    {
        "content": "<p>we should have a cp_r method somewhere iirc, so you can do something like cp_r(builder.sysroot(builder.compiler(0, <a href=\"http://builder.build.build\">builder.build.build</a>)), builder.sysroot(1, <a href=\"http://builder.build.build\">builder.build.build</a>))</p>",
        "id": 220816782,
        "sender_full_name": "simulacrum",
        "timestamp": 1608749513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/rustdoc.2C.20quickly/near/220816121\">said</a>:</p>\n<blockquote>\n<p>stage0-sysroot is normally used so that beta rustc will use master libstd?</p>\n</blockquote>\n<p>correct - under the new model, there should be no reason for that to exist during build compilation. x.py check probably shouldn't change, though it won't make much difference I think. We'll want to be sure to check that --stage 0 for test and doc continues to work as expected without the use-ci-for-bootstrap option and probably just immediately panic if attempted it with the option set, since I don't know what the right behavior would be</p>",
        "id": 220817707,
        "sender_full_name": "simulacrum",
        "timestamp": 1608750216
    },
    {
        "content": "<blockquote>\n<p>probably just immediately panic if attempted it with the option set, since I don't know what the right behavior would be</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'm imagining this as sort of a dynamic <code>[build] rustc = \"xxx\"</code></p>",
        "id": 220986575,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609030933
    },
    {
        "content": "<p>so in that case the right behavior would be to treat --stage 1 and --stage 0 the same</p>",
        "id": 220986581,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609030949
    },
    {
        "content": "<p>but that's pretty confusing so maybe not a good idea</p>",
        "id": 220986582,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609030956
    },
    {
        "content": "<p>Yeah I would just panic it seems ... not great to try and feed things through or whatever</p>",
        "id": 220986649,
        "sender_full_name": "simulacrum",
        "timestamp": 1609031072
    },
    {
        "content": "<p>I am still a while from having any working code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ git show\ncommit b4a945c2484f6c0ab447983cefea64393033e8a8 (HEAD -&gt; no-xpy)\nAuthor: Joshua Nelson &lt;jyn514@gmail.com&gt;\nDate:   Wed Dec 23 19:00:02 2020 -0500\n\n    ahhhhhh haaaaaaaaaaaaaaaaaaaaands\n</code></pre></div>",
        "id": 220986661,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609031113
    },
    {
        "content": "<p>Plus we have ad-hoc things that are specially different in stage 0 vs 1 (e.g. rustdoc in particular is 0=bootstrap, not 0=compiler stage0 artifacts, which is different from stage 1 behavior)</p>",
        "id": 220986667,
        "sender_full_name": "simulacrum",
        "timestamp": 1609031141
    },
    {
        "content": "<p>ok so I'm not quite sure how to ask this but I'll try. I want to use the same <code>stage0/</code> directory for <code>stage1/</code>, just cp_r like you suggested. I've tried the following things:</p>\n<ol>\n<li>In <code>impl Step for RustcLink</code>, use <code>cp_r(stage_out(), sysroot_libdir())</code>. This breaks because I no longer actually write anything to <code>stage0-rustc</code>, it's only in stage0.</li>\n<li>\n<p>In <code>impl Step for Rustc</code>, use <code>cp_r(\"stage0\", \"stage0-rustc\")</code>. This breaks in <code>RustcLink</code> because there's nothing in <code>/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/</code> (stage0-rustc has the same layout as stage0, which has no x86 directory; I can use <code>lib/rustlib/x86</code> but the directory structure there still doesn't match a cargo layout).</p>\n<ul>\n<li>Even if I did get that working somehow, it would still break because I don't know what to put in the stamp file, and the builder only copies things in the stamp file.</li>\n</ul>\n</li>\n</ol>\n<p>I don't really know where to go from here ... I feel like this doesn't fit very well into the <code>ensure</code> framework :/</p>",
        "id": 220989405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609036090
    },
    {
        "content": "<p>oh wait hold on I think I should be touching Assemble, not RustcLink</p>",
        "id": 220989473,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609036266
    },
    {
        "content": "<p>also I've somehow managed to break the sysroot for bootstrap each time it compiles itself so that's fun</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUST_BACKTRACE=1 xpy build\nUpdating only changed submodules\nSubmodules updated in 0.01 seconds\n   Compiling bootstrap v0.0.0 (/home/joshua/rustc/src/bootstrap)\nerror[E0463]: can&#39;t find crate for `std`\n</code></pre></div>",
        "id": 220989481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609036296
    },
    {
        "content": "<p>yay I got to building stage1 std <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\"><pre><span></span><code>Building stage1 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n   Compiling cc v1.0.60\n   Compiling core v0.0.0 (/home/joshua/rustc/library/core)\n   Compiling libc v0.2.79\n   Compiling std v0.0.0 (/home/joshua/rustc/library/std)\nerror[E0463]: can&#39;t find crate for `std`\n</code></pre></div>",
        "id": 220989697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609036789
    },
    {
        "content": "<p>I think this error is from build scripts?</p>",
        "id": 220989750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609036913
    },
    {
        "content": "<p>oh oops I forgot to install the rustc-dev component</p>",
        "id": 220989945,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609037389
    },
    {
        "content": "<p>hmm actually I think this is the same reason bootstrap keeps breaking itself, <code>stage0/bin/rustc</code> also can't build anything</p>",
        "id": 220990000,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609037500
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>        let _ = fs::remove_dir_all(&amp;sysroot);\n</code></pre></div>\n\n</blockquote>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 220990046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609037602
    },
    {
        "content": "<p>oh hmm commenting that out doesn't fix it</p>",
        "id": 220990158,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609037829
    },
    {
        "content": "<p>it was in <code>builder.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>removing sysroot /home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/lib\n</code></pre></div>\n<p><a href=\"https://github.com/rust-lang/rust/blob/0fbc0ce3ab75237c4f65022bdb1f8673811dc858/src/bootstrap/builder.rs#L633\">https://github.com/rust-lang/rust/blob/0fbc0ce3ab75237c4f65022bdb1f8673811dc858/src/bootstrap/builder.rs#L633</a></p>",
        "id": 220990208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609037936
    },
    {
        "content": "<p>OMG</p>\n<div class=\"codehilite\"><pre><span></span><code>$ xpy test src/test/rustdoc-ui\n   Compiling compiletest v0.0.0 (/home/joshua/rustc/src/tools/compiletest)\n    Finished release [optimized + debuginfo] target(s) in 29.14s\nBuilding rustdoc for stage1 (x86_64-unknown-linux-gnu)\n    Finished release [optimized + debuginfo] target(s) in 0.13s\nCheck compiletest suite=rustdoc-ui mode=ui (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n\nrunning 85 tests\n.....................................................................................\ntest result: ok. 85 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 8.20s\n````\n</code></pre></div>",
        "id": 220990381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609038262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I know it's late tonight, but this is ready to go when you have time :)</p>",
        "id": 220992307,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609042442
    },
    {
        "content": "<p>Set it to waiting on review please, and don't forget to update description of the PR with current state and decisions made in implementation, things to pay close attention to :)</p>",
        "id": 220992370,
        "sender_full_name": "simulacrum",
        "timestamp": 1609042560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/rustdoc.2C.20quickly.20.2379540/near/220992370\">said</a>:</p>\n<blockquote>\n<p>Set it to waiting on review please, and don't forget to update description of the PR with current state and decisions made in implementation, things to pay close attention to :)</p>\n</blockquote>\n<p>done, happy to answer questions if you have them :)</p>",
        "id": 220993784,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609045190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this is working again :) and the diff is much smaller too</p>",
        "id": 223607516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611296380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a> is waiting on review again (sorry to keep bugging you, but it's <em>really</em> close to being done I think)</p>",
        "id": 224904416,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612286355
    },
    {
        "content": "<p>and there are a bunch of improvements I want to make waiting on the MVP</p>",
        "id": 224904664,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612286446
    },
    {
        "content": "<p>It is unfortunately a change to rustbuild of sufficient magnitude that I need a large-ish chunk of time to review it, so it's going to need to wait for me to have that time. Sorry. It's possible e.g. <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> might be able to review too, not sure.</p>",
        "id": 224904781,
        "sender_full_name": "simulacrum",
        "timestamp": 1612286491
    },
    {
        "content": "<p>Ah unfortunately I don't have time right now</p>",
        "id": 224904935,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1612286538
    },
    {
        "content": "<p>ok, I understand</p>",
        "id": 224905075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612286592
    },
    {
        "content": "<p>I started working on \"Download a separate beta compiler for stage0\" (<a href=\"https://github.com/rust-lang/rust/issues/81930\">https://github.com/rust-lang/rust/issues/81930</a>) and found that as usual bootstrap is always more complicated than I expect it to be. Don't have time to write up fully but I left some ramblings on discord (<a href=\"https://discord.com/channels/273534239310479360/273539705595756544/808931797840429057\">https://discord.com/channels/273534239310479360/273539705595756544/808931797840429057</a>) and I have some WIP code that I think handles the python side of things at least (<a href=\"https://github.com/jyn514/rust/tree/separate-stage0-stage1\">https://github.com/jyn514/rust/tree/separate-stage0-stage1</a>).</p>",
        "id": 225796313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612935225
    },
    {
        "content": "<p>Ok, I found the issue. To build rustdoc, libstd and rustc-dev have to be built with the same compiler that's compiling rustdoc. That means that using the downloaded artifacts but compiling rustdoc with beta doesn't work, because the artifacts were compiled by stage1, not by beta.</p>\n<p>As an alternative, I could compile <em>rustdoc</em> with stage1, but compile bootstrap tools with stage0. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> how crazy does that sound?</p>",
        "id": 228700812,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821543
    },
    {
        "content": "<p>why would we not do that? I'm confused</p>",
        "id": 228700894,
        "sender_full_name": "simulacrum",
        "timestamp": 1614821606
    },
    {
        "content": "<p>that seems like.. how everything works?</p>",
        "id": 228700900,
        "sender_full_name": "simulacrum",
        "timestamp": 1614821616
    },
    {
        "content": "<p>rustdoc is compiled with stage0 currently</p>",
        "id": 228700921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821634
    },
    {
        "content": "<p>not... always?</p>",
        "id": 228700953,
        "sender_full_name": "simulacrum",
        "timestamp": 1614821642
    },
    {
        "content": "<p>like we definitely build it with non-beta compilers</p>",
        "id": 228700997,
        "sender_full_name": "simulacrum",
        "timestamp": 1614821651
    },
    {
        "content": "<p>sorry, I mean <code>stage1/rustdoc</code> is built with stage0</p>",
        "id": 228701018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821662
    },
    {
        "content": "<p>I'm not worrying about stage2 for now, it should be easy in comparison</p>",
        "id": 228701031,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821676
    },
    {
        "content": "<p>oh hmm maybe that's a better alternative - <em>only</em> support stage2 rustdoc when download-rustc is set</p>",
        "id": 228701092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821722
    },
    {
        "content": "<p>then I don't have to worry about ABI differences between beta and master</p>",
        "id": 228701108,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821734
    },
    {
        "content": "<p>well more like \"are doing the support thing\", but sure :)</p>",
        "id": 228701213,
        "sender_full_name": "simulacrum",
        "timestamp": 1614821801
    },
    {
        "content": "<p>and the difference between stage1 rustdoc and stage2 isn't particularly meaningful anyway, the only time it matters if you modify the standard library and want to see how it affects rustdoc but not how it affects rustc, which seems weird anyway</p>",
        "id": 228701235,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821826
    },
    {
        "content": "<p>ok nice I'll try that :)</p>",
        "id": 228701276,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614821863
    },
    {
        "content": "<p>haha I didn't actually need any changes, I just needed to pass <code>--stage 2</code> :) worked like a charm <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://github.com/jyn514/rust/tree/force-stage2-download-rustdoc\">https://github.com/jyn514/rust/tree/force-stage2-download-rustdoc</a></p>",
        "id": 228702164,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614822467
    },
    {
        "content": "<p>will clean it up, I should have a PR by the end of the night :)</p>",
        "id": 228702248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614822500
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/82739\">https://github.com/rust-lang/rust/pull/82739</a></p>",
        "id": 228706890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614825807
    }
]