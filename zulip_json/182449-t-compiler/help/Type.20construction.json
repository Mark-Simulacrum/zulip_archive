[
    {
        "content": "<p>I might be asking the wrong question, but I'm trying to understand how auto derives work. In my mind, the derive is applied when a type is constructed. Am I right in thinking that? If that's the case, can someone point me towards the code which does this?</p>",
        "id": 236583938,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619645317
    },
    {
        "content": "<p>derives are a kind of macro, so they are expanded during macro expansion</p>",
        "id": 236584222,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619645426
    },
    {
        "content": "<p>I'm thinking of auto triats like <code>Send</code> and <code>Sync</code>.</p>",
        "id": 236584554,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619645565
    },
    {
        "content": "<p>Sorry should've specified auto traits in my original message, but it slipped my mind.</p>",
        "id": 236584632,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619645593
    },
    {
        "content": "<p>ah, whether a type implements those traits depends on its contents</p>",
        "id": 236584825,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619645661
    },
    {
        "content": "<p>so when the compiler needs to know whether the trait is implemented, it will recurse through the type's contents and check if they implement the trait</p>",
        "id": 236584995,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1619645757
    },
    {
        "content": "<p>To give some more context, I'm working on implementing the <code>#[must_not_suspend]</code> lint and the idea is for the attribute to propagate to any type which contains a type marked with the attribute. I'm adding a <code>TypeFlag</code> to ensure the presence of the attribute. The idea is to query for the presence of the type flag when a compound type is constructed and apply it to the enclosing type as well.</p>",
        "id": 236586151,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619646451
    },
    {
        "content": "<p>Sorry if I'm not explaining things properly, as I suspect, I'm missing some context and not using the right terms.</p>",
        "id": 236586175,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619646480
    },
    {
        "content": "<p>That's a separate mechanism from auto traits (which go through the full trait resoluion system, since there may be user-written impls)</p>",
        "id": 236681556,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1619706339
    },
    {
        "content": "<p>Using <code>TypeFlags</code> sounds like the right idea for an attribute</p>",
        "id": 236681624,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1619706361
    },
    {
        "content": "<p>I was thinking about it, and I think creating a new query for the presence of an attribute, the result of which can be computed from different source (checking for the presence of a flag, or querying the session in the HIR) would be more extensible. I noted that in a comment here: <a href=\"https://github.com/rust-lang/rust/issues/83310#issuecomment-828952064\">https://github.com/rust-lang/rust/issues/83310#issuecomment-828952064</a></p>\n<p>For the <code>#[must_not_suspend]</code> lint specifically, I still need to know where a <code>Ty</code> is constructed for a given type so that the flag can be propagated to that type as well.</p>",
        "id": 236701234,
        "sender_full_name": "Bhargav Voleti",
        "timestamp": 1619712526
    }
]