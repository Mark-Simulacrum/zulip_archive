[
    {
        "content": "<p>How can I perform an operation similar to <code>Span::join</code> in the compiler?</p>",
        "id": 244109067,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624864624
    },
    {
        "content": "<p>Is <code>Span::to</code> what you're looking for?</p>",
        "id": 244109159,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624864703
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_span/struct.Span.html#method.to\">https://doc.rust-lang.org/stable/nightly-rustc/rustc_span/struct.Span.html#method.to</a></p>",
        "id": 244109223,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624864768
    },
    {
        "content": "<p>Not quite. I'd like to avoid everything in between, which is what <code>Span::join</code> does afaik</p>",
        "id": 244109377,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624864881
    },
    {
        "content": "<p>I don't <em>think</em> that's possible  given the way that Span is implemented. It seems to consist of just a start, a length, and a syntax context.</p>",
        "id": 244109685,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624865087
    },
    {
        "content": "<p>How does <code>Span::join</code> work then? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 244109711,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624865109
    },
    {
        "content": "<p>Ideally the API I'm trying to use would take a <code>MultiSpan</code>, but it doesn't.</p>",
        "id": 244109726,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624865120
    },
    {
        "content": "<p>Because <code>proc_macro::Span</code> is implemented differently from <code>rustc_span::Span</code>? There's also a pretty fair chance I'm just wrong. I'm not a super expirienced contributor.</p>",
        "id": 244109882,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624865227
    },
    {
        "content": "<p>Just seems odd that a library can do something the compiler can't. Got me.</p>",
        "id": 244109916,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624865264
    },
    {
        "content": "<p>Yeah, if it does work how I think it does, it's super weird.</p>",
        "id": 244110196,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624865461
    },
    {
        "content": "<p>I will note that I initially thought of using <code>Diagnostic</code> directly, since that <em>does</em> accept a <code>MultiSpan</code>, but that seems a bit hacky.<br>\nFor reference I'm trying to emit a diagnostic that has a single label for some number of (potentially nonconsecutive) spans. I could do this via <code>.span_labels</code>, but that emits the label for each span, which isn't what I want.</p>",
        "id": 244113489,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624867812
    },
    {
        "content": "<p>Could you add an API that takes a <code>MultiSpan</code> where you think there should be one? I always tend to add internal methods when I need them, but I may be too willing to do that.</p>",
        "id": 244113709,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1624867958
    },
    {
        "content": "<p>I certainly could. I'm digging through API docs and I <em>think</em> <code>.multipart_suggestion</code> is similar to what I'm looking for. The actual error message doesn't particularly need to point to every instance of the error, since it's super obvious from the message.</p>",
        "id": 244113800,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624868043
    },
    {
        "content": "<p>Haven't figured out how to test the suggestions but I'm pretty sure it's correct. Would still be nice to actually point to multiple attributes to indicate mass-removal, though.</p>",
        "id": 244115819,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1624869388
    }
]