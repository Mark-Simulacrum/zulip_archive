[
    {
        "content": "<p>I'm looking at arena code, particularly <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_arena/src/lib.rs#L654-L667\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_arena/src/lib.rs#L654-L667</a>.</p>\n<p>I think that means you can arena-allocate any type that impls <code>Copy</code>, and it'll be put into a <code>DroplessArena</code>. Does <code>Copy</code>always imply <code>!std::mem::needs_drop</code>?</p>",
        "id": 261572500,
        "sender_full_name": "nnethercote",
        "timestamp": 1637016909
    },
    {
        "content": "<p>Copy always means !Drop, but not necessarily !std::mem::needs_drop because the latter is allowed to return true when it's not the case.</p>",
        "id": 261572836,
        "sender_full_name": "The 8472",
        "timestamp": 1637016994
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/ops/trait.Drop.html#copy-and-drop-are-exclusive\">https://doc.rust-lang.org/std/ops/trait.Drop.html#copy-and-drop-are-exclusive</a></p>",
        "id": 261572922,
        "sender_full_name": "The 8472",
        "timestamp": 1637017053
    },
    {
        "content": "<p>Makes sense, thanks!</p>",
        "id": 261573448,
        "sender_full_name": "nnethercote",
        "timestamp": 1637017344
    },
    {
        "content": "<p><code>TypedArena</code> allocates the normal way: in chunks, from start to end.</p>",
        "id": 261576862,
        "sender_full_name": "nnethercote",
        "timestamp": 1637019392
    },
    {
        "content": "<p><code>DroplessArena</code> allocates in chunks from the chunk end backwards to the start(!)</p>",
        "id": 261576871,
        "sender_full_name": "nnethercote",
        "timestamp": 1637019404
    },
    {
        "content": "<p>For no obvious reason. I wonder if going backwards could hurt performance... IIRC CPUs tend to be happier with forward access patterns in memory, e.g. prefetching</p>",
        "id": 261576995,
        "sender_full_name": "nnethercote",
        "timestamp": 1637019511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> Current CPU prefetchers can be remarkably good at both, but nonetheless it's worth trying to see if forwards gives any improvement.</p>",
        "id": 261577909,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637020175
    },
    {
        "content": "<p>Thanks for the info. If nothing else, going forward is the obvious thing to do, so should be chosen to minimize surprises unless there's a compelling reason not to <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261577992,
        "sender_full_name": "nnethercote",
        "timestamp": 1637020222
    },
    {
        "content": "<p>it's better from an instructions perspective to go back, IIRC</p>",
        "id": 261578619,
        "sender_full_name": "simulacrum",
        "timestamp": 1637020618
    },
    {
        "content": "<p><a href=\"https://github.com/fitzgen/bumpalo/commit/2f33d058e0d560e105e960d828a03b0cb2c792e9\">https://github.com/fitzgen/bumpalo/commit/2f33d058e0d560e105e960d828a03b0cb2c792e9</a></p>",
        "id": 261578625,
        "sender_full_name": "bjorn3",
        "timestamp": 1637020621
    },
    {
        "content": "<p>this has a pretty good explanation why bumping backwards can be better.</p>",
        "id": 261578650,
        "sender_full_name": "bjorn3",
        "timestamp": 1637020641
    },
    {
        "content": "<p>heh, was looking for <a href=\"https://fitzgeraldnick.com/2019/11/01/always-bump-downwards.html\">https://fitzgeraldnick.com/2019/11/01/always-bump-downwards.html</a> myself :)</p>",
        "id": 261578751,
        "sender_full_name": "simulacrum",
        "timestamp": 1637020683
    },
    {
        "content": "<p>Oh, interesting!</p>",
        "id": 261578856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637020744
    },
    {
        "content": "<p>That sounds like an argument to try going backwards in <code>TypedArena</code> to see if it goes faster.</p>",
        "id": 261578882,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637020762
    },
    {
        "content": "<p>TypedArena only allocates fixed size objects, right? In that case you don't need aligning if you ensure that the allocation size is a multiple of the alignment. (computation of this should const fold away I think)</p>",
        "id": 261579216,
        "sender_full_name": "bjorn3",
        "timestamp": 1637020918
    },
    {
        "content": "<p>Huh, interesting</p>",
        "id": 261580263,
        "sender_full_name": "nnethercote",
        "timestamp": 1637021568
    },
    {
        "content": "<p>I don't think arena allocation is hot enough in the compiler that the handful of instructions saved by bumping downwards would make much difference. But it's enough justification to leave the downward allocation in place... though I'll add a comment <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261580361,
        "sender_full_name": "nnethercote",
        "timestamp": 1637021644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Arenas/near/261572836\">said</a>:</p>\n<blockquote>\n<p>Copy always means !Drop, but not necessarily !std::mem::needs_drop because the latter is allowed to return true when it's not the case.</p>\n</blockquote>\n<p>The <code>Copy</code> should in fact imply <code>!std::mem::needs_drop</code>. It is a documented guarantee. AFAIK, the implementation does in fact guarantee that.</p>",
        "id": 261628734,
        "sender_full_name": "tm",
        "timestamp": 1637062719
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/mem/fn.needs_drop.html\">https://doc.rust-lang.org/std/mem/fn.needs_drop.html</a></p>\n<blockquote>\n<p>This is purely an optimization hint, and may be implemented conservatively: it may return true for types that don’t actually need to be dropped. As such always returning true would be a valid implementation of this function.</p>\n</blockquote>",
        "id": 261628805,
        "sender_full_name": "The 8472",
        "timestamp": 1637062784
    },
    {
        "content": "<p>Ah, sorry I was thinking about the intrinsic:</p>\n<blockquote>\n<p>Returns true if the actual type given as T requires drop glue; returns false if the actual type provided for T implements Copy.</p>\n</blockquote>",
        "id": 261628881,
        "sender_full_name": "tm",
        "timestamp": 1637062832
    },
    {
        "content": "<p>And </p>\n<blockquote>\n<p>The stabilized version of this intrinsic is mem::needs_drop.</p>\n</blockquote>\n<p>Taken together these statements are inconsistent.</p>",
        "id": 261629004,
        "sender_full_name": "The 8472",
        "timestamp": 1637062931
    },
    {
        "content": "<p>The intrinsic is the current implementation of <code>std::mem::needs_drop</code>. The implementation may be changed to <code>true</code> according to the docs on <code>std::mem::needs_drop</code>.</p>",
        "id": 261629213,
        "sender_full_name": "bjorn3",
        "timestamp": 1637063112
    },
    {
        "content": "<p>Wouldn't that break the \"stabilized version\" promise?</p>",
        "id": 261629398,
        "sender_full_name": "The 8472",
        "timestamp": 1637063238
    },
    {
        "content": "<p>It seems meaningless to write that if the function could do something else.</p>",
        "id": 261629438,
        "sender_full_name": "The 8472",
        "timestamp": 1637063279
    },
    {
        "content": "<p>The docs explicitly allow it:</p>\n<blockquote>\n<p>This is purely an optimization hint, and may be implemented conservatively: it may return true for types that don’t actually need to be dropped. As such always returning true would be a valid implementation of this function.</p>\n</blockquote>\n<p>It would be meaningless for rustc, but it could be a shortcut when implementing an alternative rust compiler, albeit a tiny one.</p>",
        "id": 261647541,
        "sender_full_name": "bjorn3",
        "timestamp": 1637072644
    },
    {
        "content": "<p>Is that a non-guarantee that's worth preserving, at the expense of people being able to rely on it more?</p>",
        "id": 261648648,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637073127
    },
    {
        "content": "<p>It might be worth updating the documentation to guarantee that property, and we could do an FCP to confirm that we want to guarantee it.</p>",
        "id": 261648742,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1637073167
    }
]