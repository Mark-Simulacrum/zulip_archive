[
    {
        "content": "<p>Is there a way to dump/pretty-print (showing rustc types/constructors used) parsed AST or HIR passed to the type checker? I'm looking at some front-end issues and it'd be really helpful if I knew how a program is represented in AST or HIR (ideally both). I checked rustc book but couldn't see anything relevant.</p>",
        "id": 181951993,
        "sender_full_name": "osa1",
        "timestamp": 1574794447
    },
    {
        "content": "<p>Anyone?</p>",
        "id": 182026445,
        "sender_full_name": "osa1",
        "timestamp": 1574866677
    },
    {
        "content": "<p>I think we're removing some of that dumping logic</p>",
        "id": 182026994,
        "sender_full_name": "oli",
        "timestamp": 1574866990
    },
    {
        "content": "<p>not sure if the hir dumps ever showed types</p>",
        "id": 182027011,
        "sender_full_name": "oli",
        "timestamp": 1574867008
    },
    {
        "content": "<p>Interesting. Is it not a useful feature for devs? It'd be helpful to me if I could see how my program is represented.</p>",
        "id": 182027028,
        "sender_full_name": "osa1",
        "timestamp": 1574867028
    },
    {
        "content": "<p>You'll want <code>-Zunpretty=hir,typed</code> I think</p>",
        "id": 182027109,
        "sender_full_name": "oli",
        "timestamp": 1574867067
    },
    {
        "content": "<p>That doesn't show the AST, also is there a way to get a similar output but for type checker input?</p>",
        "id": 182027430,
        "sender_full_name": "osa1",
        "timestamp": 1574867296
    },
    {
        "content": "<p>If anyone else needs this, the AST types implement <code>Debug</code> so I was able to do what I need with a small modification in the parser entry point:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/src/librustc_parse/parser/module.rs b/src/librustc_parse/parser/module.rs</span>\n<span class=\"gh\">index 59d7c2b4239..62df04f859a 100644</span>\n<span class=\"gd\">--- a/src/librustc_parse/parser/module.rs</span>\n<span class=\"gi\">+++ b/src/librustc_parse/parser/module.rs</span>\n<span class=\"gu\">@@ -14,6 +14,8 @@ use errors::PResult;</span>\n\n use std::path::{self, Path, PathBuf};\n\n<span class=\"gi\">+use log::debug;</span>\n<span class=\"gi\">+</span>\n /// Information about the path to a module.\n pub(super) struct ModulePath {\n     name: String,\n<span class=\"gu\">@@ -35,6 +37,9 @@ impl&lt;&#39;a&gt; Parser&lt;&#39;a&gt; {</span>\n             module: self.parse_mod_items(&amp;token::Eof, lo)?,\n             span: lo.to(self.token.span),\n         });\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        debug!(&quot;Parsed crate: {:?}&quot;, krate.as_ref().unwrap());</span>\n<span class=\"gi\">+</span>\n         krate\n     }\n</pre></div>\n\n\n<p>I run with <code>RUSTC_LOG=rustc_parse::parser::module rustc --edition 2018 -Zno-codegen foo.rs</code></p>",
        "id": 182114508,
        "sender_full_name": "osa1",
        "timestamp": 1574952794
    },
    {
        "content": "<p>For HIR there's <code>-Zunpretty=hir-tree</code></p>",
        "id": 182133648,
        "sender_full_name": "osa1",
        "timestamp": 1574972088
    }
]