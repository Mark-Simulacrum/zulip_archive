[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Is there a reason why libpanic_abort uses <code>#[rustc_std_internal_symbol]</code> while libpanic_unwind uses <code>#[no_mangle]</code> instead?</p>",
        "id": 184265155,
        "sender_full_name": "Amanieu",
        "timestamp": 1577371261
    },
    {
        "content": "<p>I think it's just a mistake</p>",
        "id": 184265862,
        "sender_full_name": "simulacrum",
        "timestamp": 1577372213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> fwiw, I'm planning on updating my PR shortly which should make our implementation as good as C++ examples I can test</p>",
        "id": 184265876,
        "sender_full_name": "simulacrum",
        "timestamp": 1577372243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Oh dear, I'm almost done with my PR which also does exactly that :D</p>",
        "id": 184265964,
        "sender_full_name": "Amanieu",
        "timestamp": 1577372360
    },
    {
        "content": "<p>well maybe good to compare</p>",
        "id": 184265976,
        "sender_full_name": "simulacrum",
        "timestamp": 1577372372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/compare/master...Amanieu:catch_unwind\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...Amanieu:catch_unwind\">https://github.com/rust-lang/rust/compare/master...Amanieu:catch_unwind</a></p>",
        "id": 184266383,
        "sender_full_name": "Amanieu",
        "timestamp": 1577372953
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/67502\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67502\">https://github.com/rust-lang/rust/pull/67502</a> -- I ended up updating my previous branch</p>",
        "id": 184266394,
        "sender_full_name": "simulacrum",
        "timestamp": 1577372984
    },
    {
        "content": "<p>Looks almost exactly like mine modulo additional fixes to emcc</p>",
        "id": 184266478,
        "sender_full_name": "simulacrum",
        "timestamp": 1577373088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> do you want to make the PR then? I can close mine out</p>",
        "id": 184266555,
        "sender_full_name": "simulacrum",
        "timestamp": 1577373186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> We can use yours as a base. I will add some feedback in a bit (somewhat busy atm).</p>",
        "id": 184266970,
        "sender_full_name": "Amanieu",
        "timestamp": 1577373743
    },
    {
        "content": "<p>Okay, sounds good -- feel free to push to my branch as well (you should have rights I think).</p>",
        "id": 184266984,
        "sender_full_name": "simulacrum",
        "timestamp": 1577373783
    },
    {
        "content": "<p>Cherry picked a few of your commits</p>",
        "id": 184268011,
        "sender_full_name": "simulacrum",
        "timestamp": 1577375261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> back from break now and can follow up! <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is right here in that it's probably just a mistake, the main difference is symbol visibility in final cdylib/dylib artifacts, where we want these internal symbols hidden whereas normal no_mangle symbols are exported</p>",
        "id": 184913605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1578323243
    }
]