[
    {
        "content": "<p>Hi, all, I'm curious how to use labels in inline asm macro to create loops and I didn't found any examples in the unstable book. It's just like add a label in a str literal?</p>",
        "id": 221480044,
        "sender_full_name": "Gray Jack",
        "timestamp": 1609721003
    },
    {
        "content": "<p>It is the same way as for gcc inline asm.</p>",
        "id": 221513504,
        "sender_full_name": "bjorn3",
        "timestamp": 1609759907
    },
    {
        "content": "<p>Never needed gcc inline asm, but I guess it's easier to find information for gcc stuff</p>",
        "id": 221553714,
        "sender_full_name": "Gray Jack",
        "timestamp": 1609781327
    },
    {
        "content": "<p>You can write a label like <code>0:</code> or <code>1:</code>, then refer to it as <code>0b</code> or <code>1b</code>, meaning the first label found with that number going backwards.</p>",
        "id": 221621856,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609834584
    },
    {
        "content": "<p><code>0f</code> works similarly but looks forward instead.</p>",
        "id": 221621875,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609834613
    },
    {
        "content": "<p>You can define a loop by writing a label, then arranging to conditionally jump backwards to that label.</p>",
        "id": 221621901,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609834657
    },
    {
        "content": "<p>That worked on my test on ARM target! But sadly the inline asm didn't work out at all for a toy project I'm playing with, I thought it would work even though it's a custom target (thumbv5te-none-eabi) because it continues to be a ARM processor</p>",
        "id": 221693478,
        "sender_full_name": "Gray Jack",
        "timestamp": 1609876533
    },
    {
        "content": "<p>You may be able to add asm support for that target based on the existing ARM support.</p>",
        "id": 222179764,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610213321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Any thoughts on handling Thumb targets for inline assembly? Any special handling needed there?</p>",
        "id": 222179813,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610213401
    },
    {
        "content": "<p>Thumb restricts what instructions are allowed, but it's otherwise normal assembly as long as you stick to the correct subset.</p>",
        "id": 222179973,
        "sender_full_name": "Lokathor",
        "timestamp": 1610213561
    },
    {
        "content": "<p>nearly all of that would be handled by the assembler. the only part that rust would care about is the altered register availability. r0 to r7 are still general, r8 to 15 are severely limited in usage.</p>",
        "id": 222180004,
        "sender_full_name": "Lokathor",
        "timestamp": 1610213639
    },
    {
        "content": "<p>but even that I'm not sure if rust cares, because the assembler handles that too</p>",
        "id": 222180051,
        "sender_full_name": "Lokathor",
        "timestamp": 1610213664
    },
    {
        "content": "<p>you'll get an error if you use those registers incorrectly I think</p>",
        "id": 222180062,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610213696
    },
    {
        "content": "<p>yeah</p>",
        "id": 222180066,
        "sender_full_name": "Lokathor",
        "timestamp": 1610213704
    },
    {
        "content": "<p>hmm, I don't think <code>#[instruction_set]</code> handles this</p>",
        "id": 222180075,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610213714
    },
    {
        "content": "<p>uh, no, not as far as I'm aware. To an extent the goal was to make inline assembly not needed at all, so we kinda kicked that can down the road.</p>",
        "id": 222180138,
        "sender_full_name": "Lokathor",
        "timestamp": 1610213765
    },
    {
        "content": "<p>oh also: there's also more than one version of thumb the same as there's more than one version of arm, but again that's the assembler's job to handle. for rustc to do the <code>asm!</code> macro I don't think it matters.</p>",
        "id": 222180189,
        "sender_full_name": "Lokathor",
        "timestamp": 1610213851
    },
    {
        "content": "<p>(However I'll also note that I've always used external assembly files for all my assembly doings, even since the macro got the huge update and path to stabilization, since my needs map more to global_asm!, which the update didn't cover.)</p>",
        "id": 222180285,
        "sender_full_name": "Lokathor",
        "timestamp": 1610213973
    },
    {
        "content": "<p><code>#[naked]</code> and <code>asm!</code> can be used to get what's basically global assembly</p>",
        "id": 222180378,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610214058
    },
    {
        "content": "<p>when those are both stable I'll take a second look ;3</p>",
        "id": 222193181,
        "sender_full_name": "Lokathor",
        "timestamp": 1610231834
    }
]