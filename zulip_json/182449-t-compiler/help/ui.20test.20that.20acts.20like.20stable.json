[
    {
        "content": "<p>is it possible to write a ui test that acts as if it's running on stable? so <code>sess.is_nightly_build()</code> would be false</p>\n<p>i couldn't find a compiletest/rustc flag that would let me do that</p>",
        "id": 278574899,
        "sender_full_name": "skippy",
        "timestamp": 1649692379
    },
    {
        "content": "<p>You still need to opt into unstable features via <code>#[feature()]</code>. So if you don't use any of those, in which ways do UI tests differ from stable for your purposes?</p>",
        "id": 278575368,
        "sender_full_name": "The 8472",
        "timestamp": 1649692579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127967\">@skippy</span> not that I know of - if you find one let me know! I usually just test manually by setting <code>channel = stable</code> in config.toml.</p>\n<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span>  One example is for testing \"nightly features are not allowed on stable\" and similar errors.</p>",
        "id": 278575662,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649692716
    },
    {
        "content": "<p>i'm thinking of having <code>#[deprecated_safe]</code> emit a lint for nightly users, even while the the attribute is unstably applied (e.g. <code>since</code> version in the future)</p>",
        "id": 278575789,
        "sender_full_name": "skippy",
        "timestamp": 1649692780
    },
    {
        "content": "<p>(it's not decided yet that we'll actually keep the ability to apply it unstably)</p>",
        "id": 278575880,
        "sender_full_name": "skippy",
        "timestamp": 1649692804
    },
    {
        "content": "<p>so on nightly we could have the deprecation light up immediately as a sort of test run</p>",
        "id": 278576015,
        "sender_full_name": "skippy",
        "timestamp": 1649692842
    },
    {
        "content": "<p>so it's not really a feature you'd opt in to, since the affected users aren't applying the attribute at all</p>",
        "id": 278576064,
        "sender_full_name": "skippy",
        "timestamp": 1649692872
    },
    {
        "content": "<p>FWIW rustdoc does this a lot (show lints only on nightly) and I wish it didn't, it ends up with it sticking around in limbo forever because no one bothers to stabilize it. I'd rather have the lint be allow by default.</p>",
        "id": 278576073,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649692876
    },
    {
        "content": "<p>just hitting somewhere we've applied the attribute unstably</p>",
        "id": 278576080,
        "sender_full_name": "skippy",
        "timestamp": 1649692879
    },
    {
        "content": "<p>once the <code>#[deprecated_safe]</code> becomes stable, it'd be a warn-by-default</p>",
        "id": 278576148,
        "sender_full_name": "skippy",
        "timestamp": 1649692911
    },
    {
        "content": "<p>this is only when it's going to be deprecated \"in the future\" that i'm talking about</p>",
        "id": 278576227,
        "sender_full_name": "skippy",
        "timestamp": 1649692929
    },
    {
        "content": "<p>Right - I'm saying it should be consistent between stable and nightly.</p>",
        "id": 278576318,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649692983
    },
    {
        "content": "<p>One thing I wish we did more is \"brownouts\" where the lint is enabled for one nightly a week or something - that pushes people to fix their code while still making it clear it's an experimental feature and not stable</p>",
        "id": 278576518,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649693065
    },
    {
        "content": "<p>we couldn't show it on stable before the <code>since</code> version kicks in, so to be consistent that'd mean we never show it on nightly before it's stable</p>",
        "id": 278576550,
        "sender_full_name": "skippy",
        "timestamp": 1649693081
    },
    {
        "content": "<p>yeah, that's the sort of need i think i'm driving at</p>",
        "id": 278576613,
        "sender_full_name": "skippy",
        "timestamp": 1649693104
    },
    {
        "content": "<p>some way to do a trial run</p>",
        "id": 278576627,
        "sender_full_name": "skippy",
        "timestamp": 1649693110
    },
    {
        "content": "<p>If your goal is just to see how many people affects, you can make it deny by default and do a crater run</p>",
        "id": 278576723,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649693160
    },
    {
        "content": "<p>in this case i'm worried more about making sure we have the tools in place that people don't just slap <code>#[allow(deprecated_safe)]</code> everywhere because they have no alternative</p>",
        "id": 278576848,
        "sender_full_name": "skippy",
        "timestamp": 1649693206
    },
    {
        "content": "<p>like if we rolled this out today, what would people do with <code>set_var</code> in unit tests? there's no way to make individual tests run single threaded</p>",
        "id": 278576917,
        "sender_full_name": "skippy",
        "timestamp": 1649693235
    },
    {
        "content": "<p>(just as an example)</p>",
        "id": 278576926,
        "sender_full_name": "skippy",
        "timestamp": 1649693239
    },
    {
        "content": "<p>Isn't \"force warn\" a thing now?</p>",
        "id": 278576948,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1649693247
    },
    {
        "content": "<p>so it's feedback like \"we need a way to run unit tests like this\", \" we need a way to count threads\", etc. that i'm thinking about eliciting</p>",
        "id": 278577007,
        "sender_full_name": "skippy",
        "timestamp": 1649693274
    },
    {
        "content": "<p>is force warn a thing that ever gets applied on lints directly? or just used at the command line? i was also wondering about that at one point</p>",
        "id": 278577098,
        "sender_full_name": "skippy",
        "timestamp": 1649693304
    },
    {
        "content": "<p>Not sure. I just recall seeing it not too long ago.</p>",
        "id": 278577161,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1649693337
    },
    {
        "content": "<p>wrt counting threads, that's what I created the <code>num_threads</code> crate for.</p>",
        "id": 278577205,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1649693356
    },
    {
        "content": "<p>yeah, i wonder if seeing that we need that within libstd just to make a unit test sound means we'd want to add something like that to libstd itself</p>",
        "id": 278577577,
        "sender_full_name": "skippy",
        "timestamp": 1649693530
    },
    {
        "content": "<p>another point against my idea, with regards to consistency, you'd almost need two entirely different versions of the docs on stable vs nightly... one for the unsafe version with safety section, etc. and the pre-existing one with the unsound version</p>",
        "id": 278579048,
        "sender_full_name": "skippy",
        "timestamp": 1649694225
    },
    {
        "content": "<p>that seems awkward <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278579067,
        "sender_full_name": "skippy",
        "timestamp": 1649694234
    },
    {
        "content": "<p>i'm trying to get a feel for how the attribute feels in practice <a href=\"https://github.com/rust-lang/rust/pull/95942\">here</a> (i shamelessly stole some of <a href=\"https://github.com/rust-lang/rust/pull/94619\">#94619</a> there, <span class=\"user-mention\" data-user-id=\"245610\">@Jacob Pratt</span> <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span>)</p>",
        "id": 278579375,
        "sender_full_name": "skippy",
        "timestamp": 1649694364
    },
    {
        "content": "<p>No problem! Ultimately it should just be a <code>#[deprecated_safe]</code> on the existing methods, but that PR also includes the necessary <code>unsafe</code> changes to OS-level things iirc</p>",
        "id": 278579530,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1649694440
    },
    {
        "content": "<p>yeah, plus some nice doc changes <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 278579736,
        "sender_full_name": "skippy",
        "timestamp": 1649694519
    },
    {
        "content": "<p>i just realized, even if the attribute is insta-stable we still get the period where that's on nightly only so there's still a chance for feedback there</p>",
        "id": 278581925,
        "sender_full_name": "skippy",
        "timestamp": 1649695408
    },
    {
        "content": "<p>forgive me while i state what i'm sure is obvious to all of you <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 278581953,
        "sender_full_name": "skippy",
        "timestamp": 1649695424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127967\">skippy</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/ui.20test.20that.20acts.20like.20stable/near/278574899\">said</a>:</p>\n<blockquote>\n<p>is it possible to write a ui test that acts as if it's running on stable? so <code>sess.is_nightly_build()</code> would be false</p>\n<p>i couldn't find a compiletest/rustc flag that would let me do that</p>\n</blockquote>\n<p>Generally I'd say that things shouldn't be doing that, and should be checking a feature flag instead.  Then those tests you mention are like those in <a href=\"https://github.com/rust-lang/rust/tree/master/src/test/ui/feature-gates\">https://github.com/rust-lang/rust/tree/master/src/test/ui/feature-gates</a></p>",
        "id": 278634192,
        "sender_full_name": "scottmcm",
        "timestamp": 1649723202
    },
    {
        "content": "<p>this one is weird because the feature gate only controls the attribute  <code>#[deprecated_safe]</code> itself, the feature gate wouldn't have any say in the stability or not of a particular deprecation</p>\n<p>it feels like <code>since</code> based stability of a deprecation is probably more trouble than it's worth though, given all the weirdness</p>",
        "id": 278634604,
        "sender_full_name": "skippy",
        "timestamp": 1649723644
    }
]