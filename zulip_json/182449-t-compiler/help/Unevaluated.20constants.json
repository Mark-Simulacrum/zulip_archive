[
    {
        "content": "<p>At which point <code>Unevaluated</code> constants supposed to get evaluated away? I've added some <code>debug!()</code> calls and it seems the same constant (an array length) is handled in <code>AssociatedTypeNormalizer::fold_const</code>... 13 times. Which leads me to believe that the resulting <code>Evaluated</code> value does not replace the original <code>Unevaluated</code> one :-)</p>",
        "id": 157277142,
        "sender_full_name": "ange",
        "timestamp": 1548946586
    },
    {
        "content": "<p>is the <code>fold_const</code> called on the same constant many times or is the <code>Unevaluated</code> branch in <code>fold_const</code> hit many times?</p>",
        "id": 157279057,
        "sender_full_name": "oli",
        "timestamp": 1548947996
    },
    {
        "content": "<p>@Oli afaict, it's both. I get the debug output from both right inside the <code>if let ty::LazyConst::Unevaluated</code> and a debug!() call that prints out the result of <code>tcx.intern_lazy_const()</code>. I used sort -u to verify that it's always handling the same constant, fwiw</p>",
        "id": 157279751,
        "sender_full_name": "ange",
        "timestamp": 1548948538
    },
    {
        "content": "<p>oh, that is not good, can you open an issue with a repro?</p>",
        "id": 157279781,
        "sender_full_name": "oli",
        "timestamp": 1548948581
    },
    {
        "content": "<p>@Oli an <a href=\"https://github.com/rust-lang/rust/issues/57796\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57796\">issue</a> already exists :-) I'm simply using it as an excuse to dive into rustc, which is why I'm asking for guidance on whether this is supposed to happen or not</p>",
        "id": 157279912,
        "sender_full_name": "ange",
        "timestamp": 1548948698
    },
    {
        "content": "<p>Oh wow. You went from looking at an ICE to finding this issue</p>",
        "id": 157280278,
        "sender_full_name": "oli",
        "timestamp": 1548948997
    },
    {
        "content": "<p>hmm</p>",
        "id": 157280282,
        "sender_full_name": "oli",
        "timestamp": 1548949001
    },
    {
        "content": "<p>well, it I was tracking the constant that ends up being unevaluated during <code>qualify_consts</code></p>",
        "id": 157280397,
        "sender_full_name": "ange",
        "timestamp": 1548949109
    },
    {
        "content": "<p>I'm assuming the constant is part of a <code>TyArray</code>?</p>",
        "id": 157280449,
        "sender_full_name": "oli",
        "timestamp": 1548949161
    },
    {
        "content": "<p>yah</p>",
        "id": 157280571,
        "sender_full_name": "ange",
        "timestamp": 1548949274
    },
    {
        "content": "<p>So we can basically assume that it's the <code>Self</code>'s fault. I'm guessing we have the <code>Self</code> type somewhere, resolve it to <code>[T; Unevaluated]</code> then compute the <code>Unevaluated</code> and kinda throw the resolved type away</p>",
        "id": 157280723,
        "sender_full_name": "oli",
        "timestamp": 1548949434
    },
    {
        "content": "<p>Yah, it does get resolved to [T; Unevaluated], where the Unevaluated value will always be evaluated to the correct result (i.e. bits 30, u8)</p>",
        "id": 157280817,
        "sender_full_name": "ange",
        "timestamp": 1548949502
    },
    {
        "content": "<p>The next step would be to figure out if that is true and whether we can make the type folders produce the resolved types</p>",
        "id": 157280832,
        "sender_full_name": "oli",
        "timestamp": 1548949505
    },
    {
        "content": "<p>do you know where the <code>Self</code> resolving happens?</p>",
        "id": 157280842,
        "sender_full_name": "oli",
        "timestamp": 1548949519
    },
    {
        "content": "<p>nope, searched far and wide for that but eventually timed out and focused on the actual issue</p>",
        "id": 157280868,
        "sender_full_name": "ange",
        "timestamp": 1548949556
    },
    {
        "content": "<p>(I mean, given that apparently it does get resolved properly)</p>",
        "id": 157280923,
        "sender_full_name": "ange",
        "timestamp": 1548949581
    },
    {
        "content": "<p>looking at the set of backtraces to figure out which evaluation is supposed to commit the result, but unlikely that I'll figure this out before I have to start packing for fosdem</p>",
        "id": 157282308,
        "sender_full_name": "ange",
        "timestamp": 1548950857
    },
    {
        "content": "<p>Yea, I am not finding it either</p>",
        "id": 157282538,
        "sender_full_name": "oli",
        "timestamp": 1548951045
    },
    {
        "content": "<p>uh wait. how are you comparing the unevaluated constants?</p>",
        "id": 157282702,
        "sender_full_name": "oli",
        "timestamp": 1548951162
    },
    {
        "content": "<p>maybe they are just equal but not the same</p>",
        "id": 157282717,
        "sender_full_name": "oli",
        "timestamp": 1548951180
    },
    {
        "content": "<p>@Oli, I'm comparing <code>{ def: Item(DefId(0/1:10 ~ iceme[317d]::main[0]::{{constant}}[0])), substs: [] }</code> (i.e. <code>ty::Instance</code> umm, instances)</p>",
        "id": 157283051,
        "sender_full_name": "ange",
        "timestamp": 1548951423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127677\">@ange</span> the thing is, while the constants are the same, they are duplicated in multiple places before we ever try to const eval them. I think you are just seeing this duplication</p>",
        "id": 157283946,
        "sender_full_name": "oli",
        "timestamp": 1548952063
    },
    {
        "content": "<p>Now... array lengths are actually quite trivial right now, so we could just always evaluate them right at the creation time, but I think that would but us in a bind in the future</p>",
        "id": 157284041,
        "sender_full_name": "oli",
        "timestamp": 1548952119
    },
    {
        "content": "<p>@Oli ok great. I'll try to understand this duplication and why it happens then</p>",
        "id": 157284092,
        "sender_full_name": "ange",
        "timestamp": 1548952164
    },
    {
        "content": "<p>yah I guess constant evaluation should be happening at the point where every constant expression that can eventually be evaluated, can be evaluated</p>",
        "id": 157284192,
        "sender_full_name": "ange",
        "timestamp": 1548952223
    },
    {
        "content": "<p>(still not sure what that point is though, per my original question)</p>",
        "id": 157284207,
        "sender_full_name": "ange",
        "timestamp": 1548952242
    },
    {
        "content": "<p>Another unevaluated constants question: I got a <code>ConstKind::Unevaluated</code>, it prints as <code>pointer to alloc3</code>. In the source code it corresponds to <code>A::X</code> for an <code>enum A { X = 5 }</code>. Can I do anything to actually evaluate this to the discriminant of <code>A::X</code>? This is happening <code>after_analysis</code>, so I'm guessing constants <em>should</em> be evaluated/-able?</p>",
        "id": 247338479,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1627395138
    },
    {
        "content": "<p>You can use <code>tcx.const_eval_resolve()</code> to evaluate an unevaluated const.</p>",
        "id": 247340992,
        "sender_full_name": "bjorn3",
        "timestamp": 1627396299
    },
    {
        "content": "<p>Sorry, I should have been clearer. Evaluating the constant using that method gives me a <code>Scalar::Pointer</code>. Is there anything I can do to actually \"read\" data out of this?</p>",
        "id": 247344728,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1627397988
    },
    {
        "content": "<p>Where did you get the unevaluated constant from?</p>",
        "id": 247350231,
        "sender_full_name": "bjorn3",
        "timestamp": 1627400280
    },
    {
        "content": "<p>It comes from an <code>mir::Operand::Constant(Constant { literal: mir::ConstantKind::Ty(..), .. })</code></p>",
        "id": 247351060,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1627400596
    },
    {
        "content": "<p>What is the type of the constant?</p>",
        "id": 247352093,
        "sender_full_name": "bjorn3",
        "timestamp": 1627401036
    },
    {
        "content": "<p><code>Ref(ReErased, A, Not)</code></p>",
        "id": 247352167,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1627401064
    },
    {
        "content": "<p>That means that you are looking at <code>&amp;A::X</code>, not <code>A::X</code>.</p>",
        "id": 247352217,
        "sender_full_name": "bjorn3",
        "timestamp": 1627401083
    },
    {
        "content": "<p>What is the source rust code?</p>",
        "id": 247352229,
        "sender_full_name": "bjorn3",
        "timestamp": 1627401091
    },
    {
        "content": "<p>It comes from the RHS of <code>a != A::X</code>, where <code>a</code> is just a local of type <code>A</code>. <code>A</code> derives <code>PartialEq</code>.</p>",
        "id": 247355245,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1627402407
    }
]