[
    {
        "content": "<p>Hi all, </p>\n<p>I am working under project prusti, which is designed to be a rust compiler plugin. In my feature I will need to access the error recorded in compiler session and map/mutate it to be our own error type instead of calling <code>abort_if_error()</code> API, is there any existing functions I can call to get a mutable reference of error?</p>",
        "id": 248254289,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628012624
    },
    {
        "content": "<p>By the time you would fall <code>abort_if_error()</code>, the errors have already been written to stderr and as such can't be changed or AFAIK read back.</p>",
        "id": 248266541,
        "sender_full_name": "bjorn3",
        "timestamp": 1628018246
    },
    {
        "content": "<p>Then is there a way to catch the error earlier? Before it's written into stderr perhaps?</p>",
        "id": 248268242,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628018967
    },
    {
        "content": "<p>Or is there a way that I can register a callback to handle the error differently somewhere?</p>",
        "id": 248268462,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628019057
    },
    {
        "content": "<p>When using a custom driver, you can set the <code>diagnostic_output</code> field of <code>rustc_interface::interface::Config</code> to an arbitrary <code>dyn Write</code> from the <code>rustc_driver::Callbacks::config</code> implementation or you can pass it to <code>rustc_driver::RunCompiler::set_emitter</code>.</p>",
        "id": 248275196,
        "sender_full_name": "bjorn3",
        "timestamp": 1628022085
    },
    {
        "content": "<p>Would that prevent the compiler from emitting the error if <code>abort_if_error()</code> is called?<br>\nAlso if I do that I suppose all of the errors produced in compilation will be directed to the <code>dyn Write</code> I provide and thus no error will ever be reported through <code>stderr</code>?</p>",
        "id": 248283792,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628026210
    },
    {
        "content": "<blockquote>\n<p>Would that prevent the compiler from emitting the error if abort_if_error() is called?</p>\n</blockquote>\n<p>No, the error is already emitted long before you have the chance to call <code>abort_if_error()</code>.</p>\n<blockquote>\n<p>Also if I do that I suppose all of the errors produced in compilation will be directed to the dyn Write I provide and thus no error will ever be reported through stderr?</p>\n</blockquote>\n<p>Correct</p>",
        "id": 248359078,
        "sender_full_name": "bjorn3",
        "timestamp": 1628087970
    },
    {
        "content": "<p>Thanks for the answer. We can indeed set <code>diagnostic_output</code>, but it seems this is essentially string-based. Is there also a way to provide something like a custom <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/emitter/trait.Emitter.html\"><code>emitter</code></a>?</p>",
        "id": 248374825,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1628095107
    },
    {
        "content": "<p>Doesn't seem so. <code>build_session()</code> which is responsible for creating the <code>Session</code>, doesn't accept one. It calls <code>default_emitter()</code>.</p>",
        "id": 248377416,
        "sender_full_name": "bjorn3",
        "timestamp": 1628096342
    },
    {
        "content": "<p>Would you say that a PR to add a new variant to <code>DiagnosticOutput</code> would work?</p>",
        "id": 248395129,
        "sender_full_name": "Aurel Bílý",
        "timestamp": 1628104568
    },
    {
        "content": "<p>Maybe? You could try if you need to.</p>",
        "id": 248405400,
        "sender_full_name": "bjorn3",
        "timestamp": 1628109336
    },
    {
        "content": "<p>Assume that we provide a custom emitter, is it possible to resolve to the original <code>ast</code> item where the error is generated?</p>",
        "id": 248524347,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628191679
    },
    {
        "content": "<p>No, diagnostics only carry a span, which does not need to have any correspondence with any AST item.</p>",
        "id": 248524818,
        "sender_full_name": "bjorn3",
        "timestamp": 1628191902
    },
    {
        "content": "<p>Yeah but in the emitter, we want to differentiate the error that we produce from the error user caused, so I was wondering if there's a robust way to do that. Our proc-macro expansion will annotate the item with our attribute, so if I can get the ast item then it's easy for me to see what kind of error it is</p>",
        "id": 248525122,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628192056
    },
    {
        "content": "<p>You can check the expansion data of the span. I don't know how much information that has for proc-macros, but you may be able to distinguish your proc-macro from other (proc-)macros.</p>",
        "id": 248526057,
        "sender_full_name": "bjorn3",
        "timestamp": 1628192498
    },
    {
        "content": "<p>Oh another small question, I was trying to provide a custom emitter with the same error output format as the default one, but if I use a <code>EmitterWriter</code>: <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_errors/emitter/struct.EmitterWriter.html\">https://doc.rust-lang.org/beta/nightly-rustc/rustc_errors/emitter/struct.EmitterWriter.html</a>. I lost the snippet. If I use <code>AnnotateSnippetEmitterWriter</code>: <a href=\"https://doc.rust-lang.org/beta/nightly-rustc/rustc_errors/annotate_snippet_emitter_writer/struct.AnnotateSnippetEmitterWriter.html\">https://doc.rust-lang.org/beta/nightly-rustc/rustc_errors/annotate_snippet_emitter_writer/struct.AnnotateSnippetEmitterWriter.html</a>, I can't find anyway to pass color into it. The default one seems to have both color and snippet working, how can I do that?</p>",
        "id": 248564640,
        "sender_full_name": "Jerry Liu",
        "timestamp": 1628219964
    }
]