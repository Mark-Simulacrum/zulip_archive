[
    {
        "content": "<p>I'm adding a new compiler lint, and it happens to trigger a warning for a method in <code>core</code> when building with stage 1. I can't <code>#[allow(my_lint)]</code>, because then I get \"unknown lint\" when compiling stage 0. Is there a way to work around this?</p>",
        "id": 249635485,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629142033
    },
    {
        "content": "<p><code>#[allow(warnings)]</code> works for my testing purposes, but I doubt that's the preferred solution.</p>",
        "id": 249635738,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629142153
    },
    {
        "content": "<p>You can use <code>#[cfg_attr(not(bootstrap), allow(my_lint))]</code>.</p>",
        "id": 249636377,
        "sender_full_name": "bjorn3",
        "timestamp": 1629142459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> In general, I don't think we would want a lint enabled by default if it triggers on code in the standard library. Would it be possible to just fix the standard library first to not trigger the lint?</p>",
        "id": 249682042,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629180600
    },
    {
        "content": "<p>Or alternatively, introduce it as allow-by-default first and then upgrade it to warn or deny later?</p>",
        "id": 249682102,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629180638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Bootstrapping.20with.20new.20lints/near/249682042\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"363998\">Ibraheem Ahmed</span> In general, I don't think we would want a lint enabled by default if it triggers on code in the standard library. Would it be possible to just fix the standard library first to not trigger the lint?</p>\n</blockquote>\n<p>Oh, it's a lint for duplicate bounds, and it triggered on a weird try trait bound that was meant to reduce breakage on nightly.</p>",
        "id": 249734161,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629213608
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">try_find</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">R</span>: <span class=\"nc\">Try</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME: This bound is rather strange, but means minimal breakage on nightly.</span>\n<span class=\"w\">    </span><span class=\"c1\">// See #85115 for the issue tracking a holistic solution for this and try_map.</span>\n<span class=\"w\">    </span><span class=\"n\">R</span>: <span class=\"nc\">crate</span>::<span class=\"n\">ops</span>::<span class=\"n\">TryV2</span><span class=\"o\">&lt;</span><span class=\"n\">Residual</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"k\">crate</span>::<span class=\"n\">convert</span>::<span class=\"n\">Infallible</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249734208,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629213630
    },
    {
        "content": "<p>I'm not sure why it triggered the lint, because the bounds are different.</p>",
        "id": 249736458,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629214589
    },
    {
        "content": "<p>I actually realized that this is a bug in the lint, it compares the resolution of the trait bound's path to check equality.</p>",
        "id": 249736599,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629214662
    },
    {
        "content": "<p>And I think I would have to check the path segments instead?</p>",
        "id": 249736691,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629214689
    },
    {
        "content": "<p>Checking the resolution of the path seems like the right thing to do</p>",
        "id": 249737141,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629214910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> I think that's a legitimate case being caught by our lint - at least under <code>cfg(not(bootstrap))</code>, you should be able to get rid of the <code>TryV2</code> bound</p>",
        "id": 249737381,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629215014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Bootstrapping.20with.20new.20lints/near/249737141\">said</a>:</p>\n<blockquote>\n<p>Checking the resolution of the path seems like the right thing to do</p>\n</blockquote>\n<p>That triggers false positives when different generics are inolved <code>fn foo&lt;T: AsRef&lt;str&gt; + AsRef&lt;OsStr&gt;() {}</code></p>",
        "id": 249737491,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629215048
    },
    {
        "content": "<p>Can you compare the resolved generic parameters as well?</p>",
        "id": 249737567,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629215085
    },
    {
        "content": "<p>That would be <code>Path.segments.args.args</code> right?</p>",
        "id": 249738049,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629215283
    },
    {
        "content": "<p><code>GenericArg</code> doesn't seem to implement <code>Eq</code></p>",
        "id": 249738110,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629215301
    },
    {
        "content": "<p>are you looking at the HIR <code>GenericArg</code>? You'll want the one from <code>rustc_middle</code></p>",
        "id": 249738190,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629215349
    },
    {
        "content": "<p>how are you currently resolving the trait path?</p>",
        "id": 249738236,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629215369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Bootstrapping.20with.20new.20lints/near/249738190\">said</a>:</p>\n<blockquote>\n<p>are you looking at the HIR <code>GenericArg</code>? You'll want the one from <code>rustc_middle</code></p>\n</blockquote>\n<p>Oh, how do I get access to rustc_middle from a <code>LateLintPass</code>?</p>",
        "id": 249738331,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629215404
    },
    {
        "content": "<p>Can you share your current code?</p>",
        "id": 249738360,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629215414
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/88096\">https://github.com/rust-lang/rust/pull/88096</a></p>",
        "id": 249738389,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629215433
    },
    {
        "content": "<p>It's mostly based of the clippy lint.</p>",
        "id": 249738420,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629215445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> any thoughts on how I can get this to work?</p>",
        "id": 250021680,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629395500
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 250021703,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629395512
    }
]