[
    {
        "content": "<p>I'm new to Rust and trying to compile some lecture notes to help some students learn about the subject and I came across this in chapter 16 of the book: <a href=\"https://doc.rust-lang.org/book/ch16-01-threads.html\">https://doc.rust-lang.org/book/ch16-01-threads.html</a> . I'm running the example about spawning a thread with the vector where a closure takes place with a slight modification.</p>\n<p>Here's the code I'm working with:</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(|| {\n        println!(&quot;Here&#39;s a vector: {:?}&quot;, v);\n    });\n\n    handle.join().unwrap();\n    println!(&quot;{:?}&quot;, v);\n}\n</code></pre></div>\n\n\n<p>I've added the last line <code>println!(\"{:?}\", v);</code> to the example. Without it, it is clear that <code>v</code> may not live long enough, because the closure may outlive the current function. However, I expected that by adding a usage of <code>v</code> after the <code>join()</code>, that it would mean the compiler can reason that the vector <code>v</code> must live past the <code>join()</code> and therefore outlive the thread and its closure. Still, the compiler says <code>error[E0373]: closure may outlive the current function, but it borrows </code>v<code>, which is owned by the current function</code></p>\n<p>Maybe that's incorrect, though? I thought about if I should open this as an issue in Github, but seeing that this forum exists I thought maybe I'd ask here first in case I'm overlooking something. </p>\n<p>I'm working with Rust in macOS using 1.39.0 + CLion environment.</p>",
        "id": 210640421,
        "sender_full_name": "Jeff Zarnett",
        "timestamp": 1600558274
    },
    {
        "content": "<p>This stream is for working on the compiler, you may get more answers on <a href=\"http://users.rust-lang.org\">users.rust-lang.org</a> :)</p>",
        "id": 210640597,
        "sender_full_name": "Noah Lev",
        "timestamp": 1600558618
    },
    {
        "content": "<p>Thanks for the pointer! I'll take it over there :)</p>",
        "id": 210640604,
        "sender_full_name": "Jeff Zarnett",
        "timestamp": 1600558657
    },
    {
        "content": "<p>You've basically got uses of v that require it to be moved. One of these is in the spawned thread, and the other is in your original thread.</p>\n<p>There are a couple of ways to solve this, including using an <code>Arc</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>use std::thread;\n    use std::sync::Arc;\n\n    fn main() {\n        let v = Arc::new(vec![1, 2, 3]);\n\n        let v1 = v.clone();\n        let handle = thread::spawn(move || {\n            println!(&quot;Here&#39;s a vector: {:?}&quot;, v1);\n        });\n\n        handle.join().unwrap();\n        println!(&quot;{:?}&quot;, v.clone());\n    }\n</code></pre></div>",
        "id": 210641013,
        "sender_full_name": "Jason Smith",
        "timestamp": 1600559575
    }
]