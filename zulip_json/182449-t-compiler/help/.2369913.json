[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<p>I am currently looking at <a href=\"https://github.com/rust-lang/rust/issues/69913\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69913\">https://github.com/rust-lang/rust/issues/69913</a><br>\nThe actually problem is more general than the issue.</p>\n<p>The compiler currently seems to always panics if a const generic is used in a type and the const generics feature is not enabled.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>etc all panic during const eval.</p>\n<p>More specifically at </p>\n<div class=\"codehilite\"><pre><span></span>  15: &lt;rustc::ty::subst::SubstFolder as rustc::ty::fold::TypeFolder&gt;::fold_const\n  16: rustc::ty::normalize_erasing_regions::&lt;impl rustc::ty::context::TyCtxt&gt;::subst_and_normalize_erasing_regions\n  17: rustc_mir::interpret::operand::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_operand\n  18: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::eval_rvalue_into_place\n  19: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::run\n  20: rustc_mir::const_eval::eval_queries::const_eval_raw_provider\n  21: rustc::ty::query::__query_compute::const_eval_raw\n  22: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_raw&gt;::compute\n  23: rustc::dep_graph::graph::DepGraph::with_task_impl\n  24: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::get_query\n  25: rustc_mir::const_eval::eval_queries::const_eval_validated_provider\n  26: rustc::ty::query::__query_compute::const_eval_validated\n  27: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_validated&gt;::compute\n  28: rustc::dep_graph::graph::DepGraph::with_task_impl\n  29: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::get_query\n  30: rustc_mir::const_eval::eval_queries::const_eval_validated_provider\n  31: rustc::ty::query::__query_compute::const_eval_validated\n  32: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::const_eval_validated&gt;::compute\n  33: rustc::dep_graph::graph::DepGraph::with_task_impl\n  34: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::get_query\n  35: rustc::mir::interpret::queries::&lt;impl rustc::ty::context::TyCtxt&gt;::const_eval_resolve\n  36: rustc::ty::sty::Const::eval::{{closure}}\n  37: rustc::ty::sty::Const::eval\n  38: rustc::ty::structural_impls::&lt;impl rustc::ty::fold::TypeFoldable for &amp;rustc::ty::TyS&gt;::super_fold_with\n  39: &lt;rustc_trait_selection::traits::project::AssocTypeNormalizer as rustc::ty::fold::TypeFolder&gt;::fold_ty\n  40: rustc::ty::structural_impls::fold_list\n  41: &lt;rustc_infer::infer::InferCtxt as rustc_trait_selection::infer::InferCtxtExt&gt;::partially_normalize_associated_types_in\n  42: rustc::ty::context::GlobalCtxt::enter_local\n  43: rustc_typeck::check::wfcheck::check_item_well_formed\n  44: rustc::ty::query::__query_compute::check_item_well_formed\n  45: rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors for rustc::ty::query::queries::check_item_well_formed&gt;::compute\n  46: rustc::dep_graph::graph::DepGraph::with_task_impl\n  47: rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&gt;::get_query\n  48: &lt;rustc_typeck::check::wfcheck::CheckTypeWellFormedVisitor as rustc_hir::itemlikevisit::ParItemLikeVisitor&gt;::visit_item\n</pre></div>\n\n\n<p>Considering that this problem will be removed once const generics are stable and the first error message can be fixed quite easily,<br>\nwould it be acceptable to stop compilation before this(i.e. before generating mir)  in case const generics are used without the feature?</p>",
        "id": 191035179,
        "sender_full_name": "lcnr",
        "timestamp": 1584562114
    },
    {
        "content": "<p>oh dear</p>",
        "id": 191037439,
        "sender_full_name": "eddyb",
        "timestamp": 1584563280
    },
    {
        "content": "<p>this is because I hackily made <code>const_generics</code> also enable the correct behavior for <code>generics_of</code></p>",
        "id": 191037568,
        "sender_full_name": "eddyb",
        "timestamp": 1584563321
    },
    {
        "content": "<p>the behavior we can't do by default before lazy normalization</p>",
        "id": 191037999,
        "sender_full_name": "eddyb",
        "timestamp": 1584563518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> we could stop compilation yeah but I'm not sure what the best way to do it is</p>",
        "id": 191038134,
        "sender_full_name": "eddyb",
        "timestamp": 1584563574
    },
    {
        "content": "<p>abort(1) <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 191038175,
        "sender_full_name": "lcnr",
        "timestamp": 1584563597
    },
    {
        "content": "<p>I mean to detect it</p>",
        "id": 191038203,
        "sender_full_name": "eddyb",
        "timestamp": 1584563605
    },
    {
        "content": "<p>short of making the feature-gating error fatal</p>",
        "id": 191038233,
        "sender_full_name": "eddyb",
        "timestamp": 1584563622
    },
    {
        "content": "<p>We might add a new <code>StashKey</code> and use <code>stash_diagnostic</code>. If you think this is an acceptable way to solve this issue, I would gladly try and implement this.</p>",
        "id": 191039225,
        "sender_full_name": "lcnr",
        "timestamp": 1584564113
    },
    {
        "content": "<blockquote>\n<p>short of making the feature-gating error fatal</p>\n</blockquote>\n<p>maybe this isn't completely unreasonableâ€¦ it's better than an ICE</p>",
        "id": 191043120,
        "sender_full_name": "varkor",
        "timestamp": 1584566092
    },
    {
        "content": "<blockquote>\n<p>the behavior we can't do by default before lazy normalization</p>\n</blockquote>\n<p>soon <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 191043177,
        "sender_full_name": "varkor",
        "timestamp": 1584566128
    },
    {
        "content": "<p>Looking at <code>generics_of</code>, what prevents us from doing the same for <code>AnonConst</code>  when const generics are not enabled?</p>",
        "id": 191090571,
        "sender_full_name": "lcnr",
        "timestamp": 1584611934
    },
    {
        "content": "<p>/what goes wrong if the hack is used without the feature flag</p>",
        "id": 191101877,
        "sender_full_name": "lcnr",
        "timestamp": 1584618727
    },
    {
        "content": "<p>tried it out <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> I see the problem now</p>",
        "id": 191103670,
        "sender_full_name": "lcnr",
        "timestamp": 1584619954
    },
    {
        "content": "<p>yeah cycle errors</p>",
        "id": 191120102,
        "sender_full_name": "eddyb",
        "timestamp": 1584627917
    },
    {
        "content": "<p>lazy normalization fixes the cycle errors</p>",
        "id": 191120118,
        "sender_full_name": "eddyb",
        "timestamp": 1584627925
    },
    {
        "content": "<p>it's like a 3 year old issue at this point</p>",
        "id": 191120159,
        "sender_full_name": "eddyb",
        "timestamp": 1584627944
    },
    {
        "content": "<p>maybe we can just get away with waiting â€”Â lazy normalisation should merge soon (though I'm not sure how long we'll need to wait to stabilise it)</p>",
        "id": 191121834,
        "sender_full_name": "varkor",
        "timestamp": 1584628597
    },
    {
        "content": "<p>Speaking of lazy normalization, currently the oldest open tracking issue is about <strong>inherent associated types</strong>, which is not yet implemented. Is it also blocked on lazy normalization? How much work will it need to get it implemented (on nightly)?</p>",
        "id": 191134672,
        "sender_full_name": "Charles Lew",
        "timestamp": 1584633744
    },
    {
        "content": "<p>(ref: <a href=\"https://github.com/rust-lang/rust/issues/8995\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/8995\">https://github.com/rust-lang/rust/issues/8995</a>)</p>",
        "id": 191134862,
        "sender_full_name": "centril",
        "timestamp": 1584633834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span>: as I understand it, though <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would be the person to ask, there are two aspects of lazy normalisation â€”Â that for consts, and that for traits</p>",
        "id": 191171040,
        "sender_full_name": "varkor",
        "timestamp": 1584649879
    },
    {
        "content": "<p>currently, <span class=\"user-mention\" data-user-id=\"224180\">@Ben Lewis</span> is working on const lazy normalisation, which unblocks quite a lot of the const generics work</p>",
        "id": 191171101,
        "sender_full_name": "varkor",
        "timestamp": 1584649917
    },
    {
        "content": "<p>but this won't unblock the traits features</p>",
        "id": 191171144,
        "sender_full_name": "varkor",
        "timestamp": 1584649924
    },
    {
        "content": "<p>ty!</p>",
        "id": 191199735,
        "sender_full_name": "Charles Lew",
        "timestamp": 1584674358
    }
]