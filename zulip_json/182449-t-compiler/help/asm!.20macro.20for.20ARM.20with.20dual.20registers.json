[
    {
        "content": "<p>Hi everyone!<br>\nI'm currently trying to switch from <code>llvm_asm</code> to <code>asm</code>, but found that for 32-bit ARM, register dual loads/stores are apparently no longer supported. These work on two 32-bit registers at once (e.g., <code>ldrd</code> can load a 64-bit value into r2 and r3). More specifically, with <code>llvm_asm</code> the following code compiles just fine:</p>\n<div class=\"codehilite\"><pre><span></span><code>let res: u64;\nllvm_asm!(\n    &quot;ldrd $0, [$1]&quot;\n    : &quot;=r&quot;(res)\n    : &quot;r&quot;(addr)\n    : : &quot;volatile&quot;\n);\n</code></pre></div>\n<p>But trying the equivalent with <code>asm</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>let res: u64;\nasm!(\n    &quot;ldrd {0}, [{1}]&quot;,\n    out(reg) res,\n    in(reg) addr,\n);\n</code></pre></div>\n<p>fails with:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: type `u64` cannot be used with this register class\n   |\n24 |         out(reg) res,\n   |                  ^^^\n   |\n   = note: register class `reg` supports these types: i8, i16, i32, f32\n</code></pre></div>\n<p>In the <a href=\"https://doc.rust-lang.org/beta/unstable-book/library-features/asm.html\">documentation</a> I cannot find anything about that. Is this indeed no longer supported (why?) or am I missing something?</p>",
        "id": 261111956,
        "sender_full_name": "Nils Asmussen",
        "timestamp": 1636624194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> or <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> might have ideas</p>",
        "id": 261134100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636637654
    },
    {
        "content": "<p>This is not supported in the new <code>asm!</code>.</p>",
        "id": 261135852,
        "sender_full_name": "Amanieu",
        "timestamp": 1636638486
    },
    {
        "content": "<p>In theory this could be added, you'd need to add a <code>reg_pair</code> register class and define <code>r0r1</code>, <code>r2r3</code>, etc \"registers\" in that class.</p>",
        "id": 261136953,
        "sender_full_name": "Amanieu",
        "timestamp": 1636639197
    },
    {
        "content": "<p>Ah ok, thanks for your response!<br>\nAdding that would be great as there does not seem to be a workaround without a performance penalty.</p>",
        "id": 261141082,
        "sender_full_name": "Nils Asmussen",
        "timestamp": 1636641350
    },
    {
        "content": "<p>(I also miss \"m\" class)</p>",
        "id": 261153383,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636647371
    }
]