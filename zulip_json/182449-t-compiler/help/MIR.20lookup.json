[
    {
        "content": "<p>Newbie question here: how do get the MIR for a given DefId? I found mir_build, but it appear to only work for bodies, not arbitrary items.</p>",
        "id": 227187094,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613934188
    },
    {
        "content": "<p>Not all items have MIR. MIR specifically represents instructions you execute, so e.g. structs and enums don't have MIR</p>",
        "id": 227188716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613935908
    },
    {
        "content": "<p>Implementation of <code>instance_mir</code> function might be helpful.</p>",
        "id": 227188850,
        "sender_full_name": "tm",
        "timestamp": 1613936040
    },
    {
        "content": "<p>Aha, this is helpful. Well, maybe I should explain what I'm trying to do: I have a TyS that represents a type with a type parameter. I want to know the value of the type parameter in that instance (not the name of the parameter, but the value that is being substituted for it in this instance).</p>",
        "id": 227189385,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613936601
    },
    {
        "content": "<p>I was thinking if I got the MIR, it would have the substitution already done.</p>",
        "id": 227189398,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613936638
    },
    {
        "content": "<p>I can get the HIR, but that only tells me the name of the parameter. I'm currently looking at \"substs\".</p>",
        "id": 227189462,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613936672
    },
    {
        "content": "<p>Where do you get this type from? The substs are not associated to a type, but to the specific instantiation of the function that contains it.</p>",
        "id": 227189580,
        "sender_full_name": "bjorn3",
        "timestamp": 1613936804
    },
    {
        "content": "<p>Well, concretely, I'm doing codegen, so I have a TyAndLayout.</p>",
        "id": 227190078,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613937347
    },
    {
        "content": "<p>A TyAndLayout should already be monomorphized.</p>",
        "id": 227190150,
        "sender_full_name": "bjorn3",
        "timestamp": 1613937405
    },
    {
        "content": "<p>Ah, so there's no parameter there. I have to look at the monomorphized type and answer my question from that.</p>",
        "id": 227190385,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613937670
    },
    {
        "content": "<p>That's not quite what I'm seeing. When I log the type, I get  TyAndLayout { ty: GcRef&lt;dyn GcTrace&gt; â€¦ } . I'm looking to extract the \"dyn GcTrace\" component from that.</p>",
        "id": 227190643,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613937930
    },
    {
        "content": "<p>And indeed, when I look in the substs, I get what I want.</p>",
        "id": 227190734,
        "sender_full_name": "Michael Coblenz",
        "timestamp": 1613938027
    }
]