[
    {
        "content": "<p>Hello t-compiler</p>\n<p>I'm working with the Rust compiler for my master's thesis. More concretely I am to add one or more MirPass implementations to rustc_mir_transform. My supervisors suggested, that I create my own crate to develop the MirPass implementation in for a faster workflow.</p>\n<p>I have a working proof-of-concept for adding my externally developed MirPass into rustc_mir_transform. I'm using public static state with the SyncLazy from once_cell to do so. Here are the minimal commits of my proof-of-concept:<br>\nRust: <a href=\"https://github.com/janispeyer/rust/commit/5fdeee8d71503ac6b87d292854ff2e2b22a8d590\">https://github.com/janispeyer/rust/commit/5fdeee8d71503ac6b87d292854ff2e2b22a8d590</a><br>\nMy Project: <a href=\"https://github.com/janispeyer/rustc_alias/commit/dc34c1c226555d6d1dd0679bba20ac7580b39dc3\">https://github.com/janispeyer/rustc_alias/commit/dc34c1c226555d6d1dd0679bba20ac7580b39dc3</a></p>\n<p>Note: I don't intend to ever merge these changes to the compiler back into the main repo. For merging I would add the code from my project back into rust and remove the (public static) injection point.</p>\n<p>What I wanted to ask here: is this a good approach for injecting my MirPass? Or is there a better option?<br>\nWe considered adding it over the Config and Session types, but I didn't figure out a good solution that wouldn't require a lot of refactoring.</p>",
        "id": 278032237,
        "sender_full_name": "Janis Peyer [he/him]",
        "timestamp": 1649255583
    },
    {
        "content": "<p>You can override the optimized_mir query using the <code>override_queries</code> field of <code>rustc_interface::interface::Config</code> (you can modify it in the <code>config</code> method of your <code>rustc_driver::Callbacks</code> impl. In the optimized_mir query you can then call the original optimized_mir query and run your own pass.</p>",
        "id": 278056070,
        "sender_full_name": "bjorn3",
        "timestamp": 1649265057
    },
    {
        "content": "<p>By the way I found a typo in the readme of rustc_alias: rustc +<strong>nigthly</strong> instead of rustc +<strong>nightly</strong>.</p>",
        "id": 278056238,
        "sender_full_name": "bjorn3",
        "timestamp": 1649265139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492138\">@Janis Peyer [he/him]</span></p>",
        "id": 278056262,
        "sender_full_name": "bjorn3",
        "timestamp": 1649265158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <br>\nI tried doing something like that. (I've been looking at the following to do so: <a href=\"https://github.com/viperproject/prusti-dev/blob/8678e8faf214768535677c72b4f50b22abc6b83b/analysis/src/bin/analysis-driver.rs\">https://github.com/viperproject/prusti-dev/blob/8678e8faf214768535677c72b4f50b22abc6b83b/analysis/src/bin/analysis-driver.rs</a>)</p>\n<p>The problem I was having with this approach was, that I did not have control over where my pass was added. I could only add it before any of the other optimisation passes or after, but not in between. Do you know how I could do that with the described approach?</p>",
        "id": 278057787,
        "sender_full_name": "Janis Peyer [he/him]",
        "timestamp": 1649265933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20external.20optimisation.20into.20rustc_mir_transform/near/278056238\">said</a>:</p>\n<blockquote>\n<p>By the way I found a typo in the readme of rustc_alias: rustc +<strong>nigthly</strong> instead of rustc +<strong>nightly</strong>.</p>\n</blockquote>\n<p>Thanks, fixed it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 278057810,
        "sender_full_name": "Janis Peyer [he/him]",
        "timestamp": 1649265949
    },
    {
        "content": "<blockquote>\n<p>The problem I was having with this approach was, that I did not have control over where my pass was added.</p>\n</blockquote>\n<p>We don't have any way to control which passes run and in which other except for changing the <code>run_optimization_passes</code> function. I believe there is some work on a mir pass manager, but I'm not sure if adding extra passes is planned.</p>",
        "id": 278059120,
        "sender_full_name": "bjorn3",
        "timestamp": 1649266482
    },
    {
        "content": "<p>If you really want to avoid compiling your own rustc you could copy the entire <code>rustc_mir_transform</code> crate to your project and use it to provide the <code>optimized_mir</code> query after adding your pass. Make sure to update it if you update the rustc nightly though. It is also not the least cumbersome approach.</p>",
        "id": 278059425,
        "sender_full_name": "bjorn3",
        "timestamp": 1649266617
    },
    {
        "content": "<p>I didn't consider this option yet. Do you think copying the whole <code>rustc_mir_transform</code> crate would be preferable to what I'm currently doing with the injection over global static state?</p>",
        "id": 278060355,
        "sender_full_name": "Janis Peyer [he/him]",
        "timestamp": 1649267044
    },
    {
        "content": "<p>A global static is not something upstreamable at least. There can be multiple compilation sessions inside the same process. Global statics would conflict between such compilation sessions.</p>",
        "id": 278060543,
        "sender_full_name": "bjorn3",
        "timestamp": 1649267148
    },
    {
        "content": "<p>It may be possible to have a more local api using eg a custom query.</p>",
        "id": 278060644,
        "sender_full_name": "bjorn3",
        "timestamp": 1649267187
    },
    {
        "content": "<p>Yes, I completely understand, that this is not something that can be merged upstream. The main purpose ist to improve compile time of my additions while I work on them. I tried incrementel compilation (e.g. <code>x test -i &lt;concrete-test&gt; --keep-stage 1</code>) but every test still took minutes to run.</p>",
        "id": 278061525,
        "sender_full_name": "Janis Peyer [he/him]",
        "timestamp": 1649267627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Add.20external.20optimisation.20into.20rustc_mir_transform/near/278060644\">said</a>:</p>\n<blockquote>\n<p>It may be possible to have a more local api using eg a custom query.</p>\n</blockquote>\n<p>I might try to add something like that. I didn't fully understand how querries are added to be honest. I've looked at the macro that generates them, but couldn't yet figure out where the querry definitions reside.</p>",
        "id": 278062100,
        "sender_full_name": "Janis Peyer [he/him]",
        "timestamp": 1649267891
    },
    {
        "content": "<p>Queries are defined in compiler/rustc_middle/src/query/mod.rs</p>",
        "id": 278068993,
        "sender_full_name": "bjorn3",
        "timestamp": 1649270918
    },
    {
        "content": "<p>Thanks. And thanks generally for your help and suggestions :)</p>",
        "id": 278070087,
        "sender_full_name": "Janis Peyer [he/him]",
        "timestamp": 1649271450
    }
]