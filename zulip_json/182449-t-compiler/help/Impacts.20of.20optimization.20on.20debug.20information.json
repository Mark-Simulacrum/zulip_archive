[
    {
        "content": "<p>Hello,</p>\n<p>I am working on improving the debugging experience for Rust programs with variable shadowing in WinDbg. As WinDbg relies on scoping information to return the correct value of a shadowed variable, I need to understand how optimizations performed by rustc may affect debug information regarding relationship between lexical blocks. For instance, with this program:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[inline(always)]\npub fn foo(first_var: u32) -&gt; u32 {\n    let mut res = 0;\n    res += first_var;\n    println!(&quot;{}&quot;, first_var);\n    {\n        let first_var = 1;\n        res += first_var;\n        println!(&quot;{}&quot;, first_var);\n    }\n    res\n}\n\nfn main() {\n    foo(0);\n}\n</code></pre></div>\n<p>I got  this debug information, for all opt-level's:</p>\n<div class=\"codehilite\"><pre><span></span><code>[image.png](/user_uploads/4715/Yj9EuFzTS-iRcW30XjfumSe7/image.png) (0000A0)  S_BLOCK32: [0001:0000009F], Cb: 00000136,\n          Parent: 0000004C, End: 00000194\n\n(0000B8)   S_LOCAL: Local: 00000074, first_var\n(0000CC)   S_DEFRANGE_FRAMEPOINTER_REL: FrameOffset: 005C\n    Range: [0001:0000009F] - [0001:000001D5], 0 Gaps\n\nâ€¦.\n\n(000118)   S_BLOCK32: [0001:0000013B], Cb: 0000009A,\n           Parent: 000000A0, End: 00000190\n\n(000130)    S_LOCAL: Local: 00000074, first_var\n(000144)    S_DEFRANGE_FRAMEPOINTER_REL: FrameOffset: 00AC\n    Range: [0001:0000013B] - [0001:000001D5], 0 Gaps\n\nI wonder if rustc optimizations are always debug-info preserving? Is there any instance where debug information regarding scoping structure is altered by an optimization?\n</code></pre></div>",
        "id": 228301283,
        "sender_full_name": "Nam Nguyen",
        "timestamp": 1614630843
    },
    {
        "content": "<p>No, optimisations don't preserve debug info. One instance where scoping information could be lost is if rustc deleted all the code in the scope if it deemed the scope to be dead code.</p>",
        "id": 228305626,
        "sender_full_name": "nagisa",
        "timestamp": 1614632629
    },
    {
        "content": "<p>That being said, AFAIK at MIR level all optimizations enabled by default preserve the debuginfo, so it should reach the LLVM at least. For example, <code>debug_assert_eq!</code> with debug assertions disabled generates debuginfo for <code>left_val</code> and <code>right_val</code>.</p>",
        "id": 228332624,
        "sender_full_name": "tm",
        "timestamp": 1614644870
    },
    {
        "content": "<p><code>debug_assert_eq!</code> with debug assertions disabled doesn't generate any debuginfo as it expands to nothing.</p>",
        "id": 228365119,
        "sender_full_name": "bjorn3",
        "timestamp": 1614669843
    },
    {
        "content": "<p>That would generate warnings about functions that are only used from debug assertions, etc.</p>",
        "id": 228378210,
        "sender_full_name": "tm",
        "timestamp": 1614677100
    },
    {
        "content": "<p>Instead all code is there, but is preceded by <code>if false { ... }</code>.</p>",
        "id": 228378611,
        "sender_full_name": "tm",
        "timestamp": 1614677279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Impacts.20of.20optimization.20on.20debug.20information/near/228305626\">said</a>:</p>\n<blockquote>\n<p>No, optimisations don't preserve debug info. One instance where scoping information could be lost is if rustc deleted all the code in the scope if it deemed the scope to be dead code.</p>\n</blockquote>\n<p>So I compiled this program with opt-level=3:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub fn foo(first_var: u32) -&gt; u32 {\n    println!(&quot;{}&quot;, first_var);\n    if (false) {\n        let first_var = 5;\n        println!(&quot;{}&quot;, first_var);\n    }\n    res\n}\n\nfn main() {\n    foo(0);\n}\n</code></pre></div>\n<p>And here is the debug info that I got in CodeView format:</p>\n<div class=\"codehilite\"><pre><span></span><code>(0000A0)  S_BLOCK32: [0001:0000009F], Cb: 00000136,\n          Parent: 0000004C, End: 00000194\n\n(0000B8)   S_LOCAL: Local: 00000074, first_var\n(0000CC)   S_DEFRANGE_FRAMEPOINTER_REL: FrameOffset: 005C\n    Range: [0001:0000009F] - [0001:000001D5], 0 Gaps\n\n...\n\n(000118)   S_BLOCK32: [0001:0000013B], Cb: 0000009A,\n           Parent: 000000A0, End: 00000190\n\n(000130)    S_LOCAL: Local: 00000074, first_var\n(000144)    S_DEFRANGE_FRAMEPOINTER_REL: FrameOffset: 00AC\n    Range: [0001:0000013B] - [0001:000001D5], 0 Gaps\n</code></pre></div>\n<p>Shouldn't the scope within the if statement considered dead-code? If so, why the block structure is still preserved?</p>",
        "id": 228823297,
        "sender_full_name": "Nam Nguyen",
        "timestamp": 1614881884
    },
    {
        "content": "<p>I can't read codeview dumps at all, sorry. Are you sure you're looking at the right output? That code does not compile and debug information about the <code>if(false)</code> block is gone at LLVM level.</p>",
        "id": 228824076,
        "sender_full_name": "nagisa",
        "timestamp": 1614882130
    },
    {
        "content": "<p>Hm, I guess the debug info itself is not necessarily gone, but its definitely can't be associated with any machine code, because said machine code simply doesn't exist.</p>",
        "id": 228824455,
        "sender_full_name": "nagisa",
        "timestamp": 1614882261
    },
    {
        "content": "<p>I messed with the example a bit but I don't think it fundamentally changes it. I mostly just wanted to get rid of the junk generated from using <code>println!()</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">print_call</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">first_var</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">print_call</span><span class=\"p\">(</span><span class=\"n\">first_var</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first_var</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">print_call</span><span class=\"p\">(</span><span class=\"n\">first_var</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">first_var</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Compiling with <code>-O -g --emit llvm-ir</code>, it looks like the scoping information is still retained even for the dead code. (<a href=\"https://rust.godbolt.org/z/qWTYse\">godbolt</a>)</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"nv nv-Anonymous\">!6</span> <span class=\"p\">=</span> <span class=\"k\">distinct</span> <span class=\"nv\">!DISubprogram</span><span class=\"p\">(</span><span class=\"nl\">name:</span> <span class=\"s\">\"foo\"</span><span class=\"p\">,</span> <span class=\"nl\">linkageName:</span> <span class=\"s\">\"_ZN7example3foo17h1e2e1503bf917904E\"</span><span class=\"p\">,</span> <span class=\"nl\">scope:</span> <span class=\"nv nv-Anonymous\">!8</span><span class=\"p\">,</span> <span class=\"nl\">file:</span> <span class=\"nv nv-Anonymous\">!7</span><span class=\"p\">,</span> <span class=\"nl\">line:</span> <span class=\"m\">5</span><span class=\"p\">,</span> <span class=\"nl\">type:</span> <span class=\"nv nv-Anonymous\">!9</span><span class=\"p\">,</span> <span class=\"nl\">scopeLine:</span> <span class=\"m\">5</span><span class=\"p\">,</span> <span class=\"nl\">flags:</span> <span class=\"err\">DIFlagPrototyped</span><span class=\"p\">,</span> <span class=\"nl\">spFlags:</span> <span class=\"err\">DISPFlagDefinition</span> <span class=\"err\">|</span> <span class=\"err\">DISPFlagOptimized</span><span class=\"p\">,</span> <span class=\"nl\">unit:</span> <span class=\"nv nv-Anonymous\">!3</span><span class=\"p\">,</span> <span class=\"nl\">templateParams:</span> <span class=\"nv nv-Anonymous\">!5</span><span class=\"p\">,</span> <span class=\"nl\">retainedNodes:</span> <span class=\"nv nv-Anonymous\">!12</span><span class=\"p\">)</span>\n\n<span class=\"nv nv-Anonymous\">!13</span> <span class=\"p\">=</span> <span class=\"nv\">!DILocalVariable</span><span class=\"p\">(</span><span class=\"nl\">name:</span> <span class=\"s\">\"first_var\"</span><span class=\"p\">,</span> <span class=\"nl\">arg:</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nl\">scope:</span> <span class=\"nv nv-Anonymous\">!6</span><span class=\"p\">,</span> <span class=\"nl\">file:</span> <span class=\"nv nv-Anonymous\">!7</span><span class=\"p\">,</span> <span class=\"nl\">line:</span> <span class=\"m\">5</span><span class=\"p\">,</span> <span class=\"nl\">type:</span> <span class=\"nv nv-Anonymous\">!11</span><span class=\"p\">)</span>\n<span class=\"nv nv-Anonymous\">!14</span> <span class=\"p\">=</span> <span class=\"nv\">!DILocalVariable</span><span class=\"p\">(</span><span class=\"nl\">name:</span> <span class=\"s\">\"first_var\"</span><span class=\"p\">,</span> <span class=\"nl\">scope:</span> <span class=\"nv nv-Anonymous\">!15</span><span class=\"p\">,</span> <span class=\"nl\">file:</span> <span class=\"nv nv-Anonymous\">!7</span><span class=\"p\">,</span> <span class=\"nl\">line:</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nl\">type:</span> <span class=\"nv nv-Anonymous\">!11</span><span class=\"p\">,</span> <span class=\"nl\">align:</span> <span class=\"m\">4</span><span class=\"p\">)</span>\n<span class=\"nv nv-Anonymous\">!15</span> <span class=\"p\">=</span> <span class=\"k\">distinct</span> <span class=\"nv\">!DILexicalBlock</span><span class=\"p\">(</span><span class=\"nl\">scope:</span> <span class=\"nv nv-Anonymous\">!6</span><span class=\"p\">,</span> <span class=\"nl\">file:</span> <span class=\"nv nv-Anonymous\">!7</span><span class=\"p\">,</span> <span class=\"nl\">line:</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nl\">column:</span> <span class=\"m\">9</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>But I am not an expert.</p>",
        "id": 228826917,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1614883200
    },
    {
        "content": "<p>Yeah but i wouldn't guarantee that given that the debug info in question Is orphaned effectively.</p>",
        "id": 228840950,
        "sender_full_name": "nagisa",
        "timestamp": 1614888299
    }
]