[
    {
        "content": "<p>so am I correct in thinking that the matcher signature of builtin macros is just completely fake and ignored by the compiler? looking at the <code>asm</code> macro, whose definition looks extremely bogus:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"s\">\"assembly template\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$(</span><span class=\"n\">operands</span><span class=\"p\">,)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$(</span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"cp\">$(</span><span class=\"n\">option</span><span class=\"p\">),</span><span class=\"o\">*</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so is the idea that the definition contained there is only used for generating documentation?</p>",
        "id": 233420239,
        "sender_full_name": "bstrie",
        "timestamp": 1617761777
    },
    {
        "content": "<p>follow-up question: is there any reason why \"builtin macros\" can't be replaced by function-like procedural macros? looking at where builtin macros are defined, it looks like they're already using TokenStream, so can these be migrated away from being bespoke fake-declarative-macro machinery into real procedural macros?</p>",
        "id": 233420305,
        "sender_full_name": "bstrie",
        "timestamp": 1617761846
    },
    {
        "content": "<p>real procedural macros don't have access to type information</p>",
        "id": 233421416,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617762701
    },
    {
        "content": "<p>hm, is that the only difference? looking at the list of builtin macros, it feels like that format_args is the only one that I'd feel like might be making use of that, and even then I don't see why format_args wouldn't just naively expand to something that assumes the format string is correct, and leave the job of typechecking to later in the pipeline</p>",
        "id": 233421870,
        "sender_full_name": "bstrie",
        "timestamp": 1617763037
    },
    {
        "content": "<p>Builtin macros don't have type info either</p>",
        "id": 233422145,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617763254
    },
    {
        "content": "<p>And yeah, these definitions are just for documentation</p>",
        "id": 233422181,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1617763294
    },
    {
        "content": "<p>does the built-in macro machinery work with the <code>macro</code> keyword?</p>",
        "id": 233422290,
        "sender_full_name": "bstrie",
        "timestamp": 1617763372
    },
    {
        "content": "<p>The <code>macro</code> keyword is used by 'macros 2.0', which is still under development</p>",
        "id": 233424013,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617764758
    },
    {
        "content": "<p>It's also used to declare bultin macros, but there's no fundamental reason that those macros are declared with <code>macro</code> instead of <code>macro_rules</code></p>",
        "id": 233424014,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617764758
    },
    {
        "content": "<p>The body of a bultin macro never actually runs - the actual definition is in the compiler code</p>",
        "id": 233424083,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1617764787
    },
    {
        "content": "<p>I ask about <code>macro</code> because I saw that it's being used for the recently-stabilized <code>std::ptr::addr_of</code>, which must indicate some level of maturity of the implementation :)</p>",
        "id": 233424155,
        "sender_full_name": "bstrie",
        "timestamp": 1617764877
    },
    {
        "content": "<p>/me coughs</p>",
        "id": 233424246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617764953
    },
    {
        "content": "<p>most certainly not <a href=\"https://github.com/rust-lang/rust/pull/77862#issuecomment-740744018\">https://github.com/rust-lang/rust/pull/77862#issuecomment-740744018</a></p>",
        "id": 233424270,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617764997
    },
    {
        "content": "<p>there are <em>so</em> many hacks there</p>",
        "id": 233424347,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617765023
    },
    {
        "content": "<p>I wouldn't have approved it if it weren't blocking addr_of</p>",
        "id": 233424378,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617765038
    },
    {
        "content": "<p>honestly I kind of wish they'd just used macro_rules!</p>",
        "id": 233424764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1617765386
    }
]