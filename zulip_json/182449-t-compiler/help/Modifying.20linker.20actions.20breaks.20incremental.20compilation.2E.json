[
    {
        "content": "<p>Hi,</p>\n<p>I'm back with another odd question.</p>\n<p>I need to get the compiler to add an ELF section to the binaries it is spitting out. Unfortunately the section needs to be derived from finalized DWARF data, so I can't simply generate an object file and add it to the linked objects: I need to inspect the \"end binary\" and change it.</p>\n<p>(What on earth am I doing? This is an optimisation for our Rust meta-tracer.  I'm searching the DWARF data for special DILabel debuginfo entries and putting them in a quicker to load (at runtime) format).</p>\n<p>My approach is as follows. Right after the linker has been executed (right at the end of <code>rustc_codegen_ssa::src::back::link::link_natively</code>):</p>\n<ul>\n<li>Walk the dwarf tree and copy the bits I want into a vector.</li>\n<li>Use serde to serialise this vector into a temporary file.</li>\n<li>Use objcopy to make a new binary including the serialised data in a new named section.</li>\n<li>Move the new binary over the old one.</li>\n</ul>\n<p>(I know, I know... hacky)</p>\n<p>To my surprise this mostly works. Why mostly? Well sometimes it breaks incremental compilation like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, compiler/rustc_middle/src/ty/query/mod.rs:244:5\nstack backtrace:\n   0: rust_begin_unwind\n             at /home/vext01/research/yorick/ykrustc/library/std/src/panicking.rs:493:5\n   1: core::panicking::panic_fmt\n             at /home/vext01/research/yorick/ykrustc/library/core/src/panicking.rs:92:14\n   2: core::panicking::panic\n             at /home/vext01/research/yorick/ykrustc/library/core/src/panicking.rs:50:5\n   3: rustc_middle::ty::query::try_load_from_on_disk_cache\n   4: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::exec_cache_promotions\n             at /home/vext01/research/yorick/ykrustc/compiler/rustc_query_system/src/dep_graph/graph.rs:818:21\n...\n  45: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n             at /home/vext01/research/yorick/ykrustc/compiler/rustc_session/src/utils.rs:9:9\n  46: rustc_codegen_ssa::base::finalize_tcx\n             at /home/vext01/research/yorick/ykrustc/compiler/rustc_codegen_ssa/src/base.rs:752:5\n  47: rustc_codegen_ssa::base::codegen_crate\n             at /home/vext01/research/yorick/ykrustc/compiler/rustc_codegen_ssa/src/base.rs:697:5\n...\n</code></pre></div>\n<p>So it's upsetting the dependency caching system somehow. Through print debugging (the backtrace isn't very detailed, presumably due to macro fun), it looks like something in <code>DepNodeParams::recover()</code>.</p>\n<p>But I'm kind of confused as to why this is problematic. Rustc is expecting a file to appear out of the ether when it runs the linker. So why does it matter if the binary has my new section appended or not? Any ideas?</p>",
        "id": 218838995,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1607092180
    },
    {
        "content": "<p>That seems to be <a href=\"https://github.com/rust-lang/rust/issues/79661\">#79661</a>. Could you post your analysis of what happens there?</p>",
        "id": 218848091,
        "sender_full_name": "bjorn3",
        "timestamp": 1607096147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223288\">@Edd Barrett</span> ^</p>",
        "id": 218848110,
        "sender_full_name": "bjorn3",
        "timestamp": 1607096155
    },
    {
        "content": "<p>Oh! So maybe this has nothing to do with my change at all! I'm going to see if I can reproduce it without.</p>",
        "id": 218849207,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1607096585
    },
    {
        "content": "<p>Yep, nothing to do with my change.</p>",
        "id": 218849986,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1607096896
    },
    {
        "content": "<p>Thanks for pointing this out <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 218850011,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1607096909
    }
]