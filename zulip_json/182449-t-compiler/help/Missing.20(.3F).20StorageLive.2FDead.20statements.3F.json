[
    {
        "content": "<p>Hi,</p>\n<p>I'd always assumed that the compiler would insert <code>StorageLive</code>/<code>StorageDead</code> statements into MIR when a variable comes in and out of \"scope\".</p>\n<p>In <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=98271135fe85b9e0e60c5706ddc30818\">this example</a>  however, the result of the calls to <code>CheckedAdd</code> are never marked live or dead.</p>\n<p>I was wondering why that is?</p>\n<p>(Why am I asking? In our Rust JIT, we were hoping to use <code>StorageLive/Dead</code> as hints to the register allocator).</p>\n<p>Thanks!</p>\n<p><a href=\"/user_uploads/4715/6lQw54zVWeaK_iaam0AmXUK0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6lQw54zVWeaK_iaam0AmXUK0/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/6lQw54zVWeaK_iaam0AmXUK0/image.png\"></a></div>",
        "id": 205780594,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1596451490
    },
    {
        "content": "<p>temporaries might not get them</p>",
        "id": 205780723,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596451564
    },
    {
        "content": "<p>Also on the cleanup path no variables get <code>Storage{Live,Dead}</code>.</p>",
        "id": 205781271,
        "sender_full_name": "bjorn3",
        "timestamp": 1596452055
    },
    {
        "content": "<p>we're considering scrapping these annotations entirely and computing them on the fly for each statement</p>",
        "id": 205781351,
        "sender_full_name": "oli",
        "timestamp": 1596452149
    },
    {
        "content": "<p>Thanks for your replies!</p>\n<p>It's looking less likely that we can rely on <code>StorageLive</code>/<code>StorageDead</code> for our (niche) purposes.</p>\n<p>I've just had a prod around in the compiler. It's not clear to me how a temporary is different from short-lived local. Is there a definition somewhere?</p>",
        "id": 205781851,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1596452585
    },
    {
        "content": "<p>you can rely on them, but if they aren't there, you need to assume the thing lives for the entire function</p>",
        "id": 205782794,
        "sender_full_name": "oli",
        "timestamp": 1596453462
    },
    {
        "content": "<p>this is how miri does it</p>",
        "id": 205782812,
        "sender_full_name": "oli",
        "timestamp": 1596453480
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/dbc2ef25fb5e15445de38f19ba75547a6cf35cae/src/librustc_mir/interpret/eval_context.rs#L642\">https://github.com/rust-lang/rust/blob/dbc2ef25fb5e15445de38f19ba75547a6cf35cae/src/librustc_mir/interpret/eval_context.rs#L642</a></p>",
        "id": 205782895,
        "sender_full_name": "oli",
        "timestamp": 1596453542
    },
    {
        "content": "<p>I see. Thanks.</p>\n<p>And when does the compiler use these temporaries?</p>",
        "id": 205782922,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1596453571
    },
    {
        "content": "<p>I don't understand the question. Are you asking when the code being compiled uses these temporaries? That would be \"anywhere within the function, we don't know unless we check the body\"</p>",
        "id": 205803712,
        "sender_full_name": "oli",
        "timestamp": 1596466609
    },
    {
        "content": "<p>In other wording: when does the compiler opt to use a temporary variable instead of a regular local variable? It's not clear to me the difference between a temporary variable and a normal one.</p>\n<p>Thanks!</p>",
        "id": 205805427,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1596467276
    },
    {
        "content": "<p>There is not really a difference on the MIR level. It just uses a \"internal\" variables that aren't present in surface Rust to implement checked arithmetic and drop flags, and those don't get storage statements (maybe there's a few other cases?).</p>",
        "id": 205806236,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596467668
    },
    {
        "content": "<p>bodies of constants and statics also don't use <code>StorageDead</code> and <code>StorageLive</code></p>",
        "id": 205811061,
        "sender_full_name": "oli",
        "timestamp": 1596469872
    },
    {
        "content": "<p>I'm pretty sure they do? I saw a comment in rustc claiming they didn't, but <code>--emit=mir</code> says otherwise.</p>",
        "id": 205811253,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596469966
    },
    {
        "content": "<blockquote>\n<p>variables that aren't present in surface Rust</p>\n</blockquote>\n<p>^ Ah ha! That's the detail I was missing. Thanks!</p>",
        "id": 205811471,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1596470067
    },
    {
        "content": "<p>ah, then it's probably just all the temporary variables that go into the return value of a constant or static that don't have storage statements, but there it makes a lot of sense, because these values are leaked to static memory</p>",
        "id": 205818226,
        "sender_full_name": "oli",
        "timestamp": 1596473492
    }
]