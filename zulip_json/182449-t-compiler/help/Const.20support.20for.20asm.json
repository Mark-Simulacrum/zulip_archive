[
    {
        "content": "<p>I'm having a bit of trouble with const support for <code>asm!</code> (that is, taking integer constants and embedding them directly into the asm string).</p>",
        "id": 197007933,
        "sender_full_name": "Amanieu",
        "timestamp": 1589052240
    },
    {
        "content": "<p>Basically, <code>ConstValue::try_to_bits_for_ty</code> is failing <a href=\"https://github.com/rust-lang/rust/pull/69171/files#diff-a5b7af844d26b58c2c9537372b100c90R948\" title=\"https://github.com/rust-lang/rust/pull/69171/files#diff-a5b7af844d26b58c2c9537372b100c90R948\">here</a> because the <code>ConstValue</code> is not a <code>Scalar</code>.</p>",
        "id": 197008023,
        "sender_full_name": "Amanieu",
        "timestamp": 1589052289
    },
    {
        "content": "<p>This happens because <code>asm!</code> uses constant promotion (following the same logic as <code>#[rustc_args_required_const]</code>), but this always results in a <code>ConstValue::ByRef</code> instead of a <code>ConstValue::Scalar</code> even though I've already checked that the input type is an integer or a float.</p>",
        "id": 197008133,
        "sender_full_name": "Amanieu",
        "timestamp": 1589052370
    },
    {
        "content": "<p>The cause seems to be <a href=\"https://github.com/rust-lang/rust/blob/7c59a81a5fcbaaca311f744cd7c68d99bfbb05d3/src/librustc_mir/const_eval/eval_queries.rs#L201\" title=\"https://github.com/rust-lang/rust/blob/7c59a81a5fcbaaca311f744cd7c68d99bfbb05d3/src/librustc_mir/const_eval/eval_queries.rs#L201\">this code</a> in <code>eval_queries.rs</code> which always uses <code>ByRef</code> for promoted constants.</p>",
        "id": 197008188,
        "sender_full_name": "Amanieu",
        "timestamp": 1589052460
    },
    {
        "content": "<p>Do you have any suggestions on how const operands should be handled?</p>",
        "id": 197008240,
        "sender_full_name": "Amanieu",
        "timestamp": 1589052526
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> since you seem to have written the code that forces <code>ByRef</code> for promoted constants.</p>",
        "id": 197008305,
        "sender_full_name": "Amanieu",
        "timestamp": 1589052587
    },
    {
        "content": "<p>we force <code>ByRef</code>, because promoteds used to be just those that you took references to</p>",
        "id": 197122028,
        "sender_full_name": "oli",
        "timestamp": 1589190530
    },
    {
        "content": "<p>we could have some way to differentiate between value and ref promoteds</p>",
        "id": 197122069,
        "sender_full_name": "oli",
        "timestamp": 1589190556
    },
    {
        "content": "<p>less invasive would be to teach all the <code>to_bits</code> logic to read from a <code>ByRef</code></p>",
        "id": 197122438,
        "sender_full_name": "oli",
        "timestamp": 1589190767
    },
    {
        "content": "<p>but that feels like we're running dangerously close to mixing up const values and static memory locations containing const values</p>",
        "id": 197122498,
        "sender_full_name": "oli",
        "timestamp": 1589190802
    },
    {
        "content": "<p>since you know it's always <code>ByRef</code>, you can just match on that and <code>bug!</code> out in all other cases and use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.Allocation.html#method.read_scalar\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.Allocation.html#method.read_scalar</a> to read a scalar from that allocation</p>",
        "id": 197122648,
        "sender_full_name": "oli",
        "timestamp": 1589190878
    },
    {
        "content": "<p>or, if you feel like this will only ever allow <code>usize</code>, use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.Allocation.html#method.read_ptr_sized\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.Allocation.html#method.read_ptr_sized</a></p>",
        "id": 197122742,
        "sender_full_name": "oli",
        "timestamp": 1589190936
    },
    {
        "content": "<p>@oli Thanks! I got it to work.</p>",
        "id": 197173186,
        "sender_full_name": "Amanieu",
        "timestamp": 1589215548
    }
]