[
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 271218160,
        "sender_full_name": "pierwill",
        "timestamp": 1644369489
    },
    {
        "content": "<p>I would take a look at the logic for <code>ENCODABLE = custom</code></p>",
        "id": 271221104,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644372096
    },
    {
        "content": "<p>but I think that macro is approaching the point where it would be better off as a proc-macro</p>",
        "id": 271221206,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644372176
    },
    {
        "content": "<p>it hurts my head just to look at this code</p>",
        "id": 271222679,
        "sender_full_name": "pierwill",
        "timestamp": 1644373671
    },
    {
        "content": "<p>Also this has always bugged me: <a href=\"https://github.com/rust-lang/rust/issues/93792\">https://github.com/rust-lang/rust/issues/93792</a></p>",
        "id": 271223013,
        "sender_full_name": "pierwill",
        "timestamp": 1644373966
    },
    {
        "content": "<p>In practical terms, I have no idea how to proceed. I'm even considering just pulling <code>Ord</code>,<code>PartialOrd</code> out of the macro and adding them in manually to the 50 or so places it's used :(</p>",
        "id": 271340877,
        "sender_full_name": "pierwill",
        "timestamp": 1644437687
    },
    {
        "content": "<p>I'll take a look at converting that into a proc-macro</p>",
        "id": 271344667,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644439489
    },
    {
        "content": "<p><code>newtype_index!</code> uses <code>#[allow_internal_unstable]</code> which is only available for decl macros.</p>",
        "id": 271365334,
        "sender_full_name": "bjorn3",
        "timestamp": 1644450588
    },
    {
        "content": "<p>could those specific parts be in decl macros that the proc macro can invoke?</p>",
        "id": 271367556,
        "sender_full_name": "cuviper",
        "timestamp": 1644451881
    },
    {
        "content": "<p>Surprisingly, it works for proc macros as well</p>",
        "id": 271378540,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644460018
    },
    {
        "content": "<p>I've got a working proc-macro version locally</p>",
        "id": 271378557,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644460040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Make.20Ord.20opt-out.20in.20.60newtype_index.60.3F/near/271340877\">said</a>:</p>\n<blockquote>\n<p>In practical terms, I have no idea how to proceed. I'm even considering just pulling <code>Ord</code>,<code>PartialOrd</code> out of the macro and adding them in manually to the 50 or so places it's used :(</p>\n</blockquote>\n<p>Hey, so while I'm glad <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> took the reins here, I wanted to just quickly ask: Was the option of making two versions of the original macro ever considered: One that injects the <code>Ord</code>/<code>PartialOrd</code> impls, and a second version that leaves them out? (I guess whether that's a reasonable option depends on how hard it would have been to add the manual impls that <span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> was referencing.)</p>",
        "id": 271380129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644461846
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/93878\">https://github.com/rust-lang/rust/pull/93878</a></p>",
        "id": 271499959,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644529703
    },
    {
        "content": "<p>I saw this merged! Looking now at how to remove Ord and PartialOrd from LocalExpnId...</p>",
        "id": 273359481,
        "sender_full_name": "pierwill",
        "timestamp": 1645905095
    },
    {
        "content": "<p>Any advice <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 273359553,
        "sender_full_name": "pierwill",
        "timestamp": 1645905181
    },
    {
        "content": "<p>Is there a way to override this line? <a href=\"https://github.com/rust-lang/rust/blob/8604ef0878b42c1b89e87d42382319dceef5f01f/compiler/rustc_macros/src/newtype.rs#L155\">https://github.com/rust-lang/rust/blob/8604ef0878b42c1b89e87d42382319dceef5f01f/compiler/rustc_macros/src/newtype.rs#L155</a></p>",
        "id": 273359706,
        "sender_full_name": "pierwill",
        "timestamp": 1645905401
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 273360206,
        "sender_full_name": "cjgillot",
        "timestamp": 1645905863
    },
    {
        "content": "<p>Here's what I'm doing now but this feels wrong: <a href=\"https://github.com/pierwill/rust/commit/91924692169aa265690ba38af904e214e1a73d49\">https://github.com/pierwill/rust/commit/91924692169aa265690ba38af904e214e1a73d49</a></p>",
        "id": 273360322,
        "sender_full_name": "pierwill",
        "timestamp": 1645906032
    },
    {
        "content": "<p>(Removing Ord from the macro and readding it by hand to everything)</p>",
        "id": 273360336,
        "sender_full_name": "pierwill",
        "timestamp": 1645906066
    },
    {
        "content": "<p>Oh wait. Can i just specify certain attributes on LocalExpnId, and the macro will only derive those?</p>",
        "id": 273360404,
        "sender_full_name": "pierwill",
        "timestamp": 1645906122
    },
    {
        "content": "<p>Is that what this line does? <a href=\"https://github.com/rust-lang/rust/blob/8604ef0878b42c1b89e87d42382319dceef5f01f/compiler/rustc_macros/src/newtype.rs#L154\">https://github.com/rust-lang/rust/blob/8604ef0878b42c1b89e87d42382319dceef5f01f/compiler/rustc_macros/src/newtype.rs#L154</a></p>",
        "id": 273360416,
        "sender_full_name": "pierwill",
        "timestamp": 1645906135
    },
    {
        "content": "<p>This diff</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>rustc_index::newtype_index! {<span class=\"w\"></span>\n<span class=\"w\"> </span>    /// A unique ID associated with a macro invocation and expansion.<span class=\"w\"></span>\n<span class=\"gi\">+    #[derive(Clone, Copy, PartialEq, Eq, Hash)]</span><span class=\"w\"></span>\n<span class=\"w\"> </span>    pub struct LocalExpnId {<span class=\"w\"></span>\n<span class=\"w\"> </span>        ENCODABLE = custom<span class=\"w\"></span>\n<span class=\"w\"> </span>        DEBUG_FORMAT = \"expn{}\"<span class=\"w\"></span>\n</code></pre></div>\n<p>gives </p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `std::marker::StructuralEq` for type `hygiene::LocalExpnId`\n   --&gt; compiler/rustc_span/src/hygiene.rs:84:1\n    |\n84  |   rustc_index::newtype_index! {\n    |   -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   |\n    |  _conflicting implementation for `hygiene::LocalExpnId`\n    | |\n85  | |     /// A unique ID associated with a macro invocation and expansion.\n86  | |     #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n    | |                                      -- first implementation here\n87  | |     pub struct LocalExpnId {\n...   |\n90  | |     }\n91  | | }\n    | | -\n    | | |\n    | |_in this macro invocation (#1)\n    |   in this derive macro expansion (#2)\n    |\n   ::: /Users/will/repos/rust/compiler/rustc_macros/src/lib.rs:46:1\n    |\n46  |   pub fn newtype_index(input: TokenStream) -&gt; TokenStream {\n    |   ------------------------------------------------------- in this expansion of `rustc_index::newtype_index!` (#1)\n    |\n   ::: /Users/will/repos/rust/library/core/src/cmp.rs:305:1\n    |\n305 | / pub macro Eq($item:item) {\n306 | |     /* compiler built-in */\n307 | | }\n    | |_- in this expansion of `#[derive(Eq)]` (#2)\n\nerror[E0119]: conflicting implementations of trait `std::cmp::Eq` for type `hygiene::LocalExpnId`\n   --&gt; compiler/rustc_span/src/hygiene.rs:84:1\n    |\n84  |   rustc_index::newtype_index! {\n    |   -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   |\n    |  _conflicting implementation for `hygiene::LocalExpnId`\n    | |\n85  | |     /// A unique ID associated with a macro invocation and expansion.\n86  | |     #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n    | |                                      -- first implementation here\n87  | |     pub struct LocalExpnId {\n...   |\n90  | |     }\n91  | | }\n    | | -\n    | | |\n    | |_in this macro invocation (#1)\n    |   in this derive macro expansion (#2)\n    |\n   ::: /Users/will/repos/rust/compiler/rustc_macros/src/lib.rs:46:1\n    |\n46  |   pub fn newtype_index(input: TokenStream) -&gt; TokenStream {\n    |   ------------------------------------------------------- in this expansion of `rustc_index::newtype_index!` (#1)\n    |\n   ::: /Users/will/repos/rust/library/core/src/cmp.rs:305:1\n    |\n305 | / pub macro Eq($item:item) {\n306 | |     /* compiler built-in */\n307 | | }\n    | |_- in this expansion of `#[derive(Eq)]` (#2)\n\nerror[E0119]: conflicting implementations of trait `std::marker::StructuralPartialEq` for type `hygiene::LocalExpnId`\n   --&gt; compiler/rustc_span/src/hygiene.rs:84:1\n    |\n84  |   rustc_index::newtype_index! {\n    |   -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   |\n    |  _conflicting implementation for `hygiene::LocalExpnId`\n    | |\n85  | |     /// A unique ID associated with a macro invocation and expansion.\n86  | |     #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n    | |                           --------- first implementation here\n87  | |     pub struct LocalExpnId {\n...   |\n90  | |     }\n91  | | }\n    | | -\n    | | |\n    | |_in this macro invocation (#1)\n    |   in this derive macro expansion (#2)\n    |\n   ::: /Users/will/repos/rust/compiler/rustc_macros/src/lib.rs:46:1\n    |\n46  |   pub fn newtype_index(input: TokenStream) -&gt; TokenStream {\n    |   ------------------------------------------------------- in this expansion of `rustc_index::newtype_index!` (#1)\n    |\n   ::: /Users/will/repos/rust/library/core/src/cmp.rs:239:1\n    |\n239 | / pub macro PartialEq($item:item) {\n240 | |     /* compiler built-in */\n241 | | }\n    | |_- in this expansion of `#[derive(PartialEq)]` (#2)\n\nerror[E0119]: conflicting implementations of trait `std::cmp::PartialEq` for type `hygiene::LocalExpnId`\n   --&gt; compiler/rustc_span/src/hygiene.rs:84:1\n    |\n84  |   rustc_index::newtype_index! {\n    |   -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   |\n    |  _conflicting implementation for `hygiene::LocalExpnId`\n    | |\n85  | |     /// A unique ID associated with a macro invocation and expansion.\n86  | |     #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n    | |                           --------- first implementation here\n87  | |     pub struct LocalExpnId {\n...   |\n90  | |     }\n91  | | }\n    | | -\n    | | |\n    | |_in this macro invocation (#1)\n    |   in this derive macro expansion (#2)\n    |\n   ::: /Users/will/repos/rust/compiler/rustc_macros/src/lib.rs:46:1\n    |\n46  |   pub fn newtype_index(input: TokenStream) -&gt; TokenStream {\n    |   ------------------------------------------------------- in this expansion of `rustc_index::newtype_index!` (#1)\n    |\n   ::: /Users/will/repos/rust/library/core/src/cmp.rs:239:1\n    |\n239 | / pub macro PartialEq($item:item) {\n240 | |     /* compiler built-in */\n241 | | }\n    | |_- in this expansion of `#[derive(PartialEq)]` (#2)\n\nerror[E0119]: conflicting implementations of trait `std::clone::Clone` for type `hygiene::LocalExpnId`\n   --&gt; compiler/rustc_span/src/hygiene.rs:84:1\n    |\n84  |   rustc_index::newtype_index! {\n    |   -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   |\n    |  _conflicting implementation for `hygiene::LocalExpnId`\n    | |\n85  | |     /// A unique ID associated with a macro invocation and expansion.\n86  | |     #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n    | |              ----- first implementation here\n87  | |     pub struct LocalExpnId {\n...   |\n90  | |     }\n91  | | }\n    | | -\n    | | |\n    | |_in this macro invocation (#1)\n    |   in this derive macro expansion (#2)\n    |\n   ::: /Users/will/repos/rust/compiler/rustc_macros/src/lib.rs:46:1\n    |\n46  |   pub fn newtype_index(input: TokenStream) -&gt; TokenStream {\n    |   ------------------------------------------------------- in this expansion of `rustc_index::newtype_index!` (#1)\n    |\n   ::: /Users/will/repos/rust/library/core/src/clone.rs:139:1\n    |\n139 | / pub macro Clone($item:item) {\n140 | |     /* compiler built-in */\n141 | | }\n    | |_- in this expansion of `#[derive(Clone)]` (#2)\n\nerror[E0119]: conflicting implementations of trait `std::hash::Hash` for type `hygiene::LocalExpnId`\n   --&gt; compiler/rustc_span/src/hygiene.rs:84:1\n    |\n84  |   rustc_index::newtype_index! {\n    |   -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   |\n    |  _conflicting implementation for `hygiene::LocalExpnId`\n    | |\n85  | |     /// A unique ID associated with a macro invocation and expansion.\n86  | |     #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n    | |                                          ---- first implementation here\n87  | |     pub struct LocalExpnId {\n...   |\n90  | |     }\n91  | | }\n    | | -\n    | | |\n    | |_in this macro invocation (#1)\n    |   in this derive macro expansion (#2)\n    |\n   ::: /Users/will/repos/rust/compiler/rustc_macros/src/lib.rs:46:1\n    |\n46  |   pub fn newtype_index(input: TokenStream) -&gt; TokenStream {\n    |   ------------------------------------------------------- in this expansion of `rustc_index::newtype_index!` (#1)\n    |\n   ::: /Users/will/repos/rust/library/core/src/hash/mod.rs:253:5\n    |\n253 | /     pub macro Hash($item:item) {\n254 | |         /* compiler built-in */\n255 | |     }\n    | |_____- in this expansion of `#[derive(Hash)]` (#2)\n\nerror[E0119]: conflicting implementations of trait `std::marker::Copy` for type `hygiene::LocalExpnId`\n   --&gt; compiler/rustc_span/src/hygiene.rs:84:1\n    |\n84  |   rustc_index::newtype_index! {\n    |   -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |   |\n    |  _conflicting implementation for `hygiene::LocalExpnId`\n    | |\n85  | |     /// A unique ID associated with a macro invocation and expansion.\n86  | |     #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n    | |                     ---- first implementation here\n87  | |     pub struct LocalExpnId {\n...   |\n90  | |     }\n91  | | }\n    | | -\n    | | |\n    | |_in this macro invocation (#1)\n    |   in this derive macro expansion (#2)\n    |\n   ::: /Users/will/repos/rust/compiler/rustc_macros/src/lib.rs:46:1\n    |\n46  |   pub fn newtype_index(input: TokenStream) -&gt; TokenStream {\n    |   ------------------------------------------------------- in this expansion of `rustc_index::newtype_index!` (#1)\n    |\n   ::: /Users/will/repos/rust/library/core/src/marker.rs:391:1\n    |\n391 | / pub macro Copy($item:item) {\n392 | |     /* compiler built-in */\n393 | | }\n    | |_- in this expansion of `#[derive(Copy)]` (#2)\n\nFor more information about this error, try `rustc --explain E0119`.\nerror: could not compile `rustc_span` due to 7 previous errors\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\nBuild completed unsuccessfully in 0:00:01\n</code></pre></div>",
        "id": 273360741,
        "sender_full_name": "pierwill",
        "timestamp": 1645906582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Make.20Ord.20opt-out.20in.20.60newtype_index.60.3F/near/273360416\">said</a>:</p>\n<blockquote>\n<p>Is that what this line does? <a href=\"https://github.com/rust-lang/rust/blob/8604ef0878b42c1b89e87d42382319dceef5f01f/compiler/rustc_macros/src/newtype.rs#L154\">https://github.com/rust-lang/rust/blob/8604ef0878b42c1b89e87d42382319dceef5f01f/compiler/rustc_macros/src/newtype.rs#L154</a></p>\n</blockquote>\n<p>This line reapplies all the attributes that appear before the call to the macro.</p>",
        "id": 273360826,
        "sender_full_name": "cjgillot",
        "timestamp": 1645906722
    },
    {
        "content": "<p>So there is still no way to opt-out of <code>Ord</code>?</p>",
        "id": 273360848,
        "sender_full_name": "pierwill",
        "timestamp": 1645906767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Make.20Ord.20opt-out.20in.20.60newtype_index.60.3F/near/271380129\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Make.20Ord.20opt-out.20in.20.60newtype_index.60.3F/near/271340877\">said</a>:</p>\n<blockquote>\n<p>In practical terms, I have no idea how to proceed. I'm even considering just pulling <code>Ord</code>,<code>PartialOrd</code> out of the macro and adding them in manually to the 50 or so places it's used :(</p>\n</blockquote>\n<p>Hey, so while I'm glad <span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> took the reins here, I wanted to just quickly ask: Was the option of making two versions of the original macro ever considered: One that injects the <code>Ord</code>/<code>PartialOrd</code> impls, and a second version that leaves them out? (I guess whether that's a reasonable option depends on how hard it would have been to add the manual impls that <span class=\"user-mention silent\" data-user-id=\"316352\">pierwill</span> was referencing.)</p>\n</blockquote>\n<p>Maybe this is still the way to go: two versions</p>",
        "id": 273360907,
        "sender_full_name": "pierwill",
        "timestamp": 1645906831
    },
    {
        "content": "<p>You could add an <code>ORD = None</code> statement (like <code>ENCODABLE = CUSTOM</code> statements in the macro).  If this statement does not appear, you put the <code>derive(PartialOrd, Ord)</code> in the macro.</p>",
        "id": 273360930,
        "sender_full_name": "cjgillot",
        "timestamp": 1645906887
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I can give that a try</p>",
        "id": 273360986,
        "sender_full_name": "pierwill",
        "timestamp": 1645906954
    },
    {
        "content": "<p>Any tips on where to start? Macros totally freak me out. I feel hopeless about ever learning them <span aria-label=\"anguish\" class=\"emoji emoji-1f62b\" role=\"img\" title=\"anguish\">:anguish:</span></p>",
        "id": 273361098,
        "sender_full_name": "pierwill",
        "timestamp": 1645907122
    },
    {
        "content": "<p>Although at least now I can read the code lol</p>",
        "id": 273361166,
        "sender_full_name": "pierwill",
        "timestamp": 1645907230
    },
    {
        "content": "<p>Something like <a href=\"https://github.com/pierwill/rust/commit/03ce0f48509d7ee3a13fa46be69638e7fd6f15f4\">https://github.com/pierwill/rust/commit/03ce0f48509d7ee3a13fa46be69638e7fd6f15f4</a> ?</p>",
        "id": 273361497,
        "sender_full_name": "pierwill",
        "timestamp": 1645907588
    },
    {
        "content": "<p>I have no idea really <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 273361509,
        "sender_full_name": "pierwill",
        "timestamp": 1645907634
    },
    {
        "content": "<p>This might be better</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>        let mut max = None;<span class=\"w\"></span>\n<span class=\"w\"> </span>        let mut consts = Vec::new();<span class=\"w\"></span>\n<span class=\"w\"> </span>        let mut encodable = true;<span class=\"w\"></span>\n<span class=\"gi\">+        let mut ord = true;</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span>        // Parse an optional trailing comma<span class=\"w\"></span>\n<span class=\"w\"> </span>        let try_comma = || -&gt; Result&lt;()&gt; {<span class=\"w\"></span>\n<span class=\"gu\">@@ -100,6 +101,15 @@ fn parse(input: ParseStream&lt;'_&gt;) -&gt; Result&lt;Self&gt; {</span><span class=\"w\"></span>\n<span class=\"w\"> </span>                    continue;<span class=\"w\"></span>\n<span class=\"w\"> </span>                }<span class=\"w\"></span>\n\n<span class=\"gi\">+                if body.lookahead1().peek(kw::ORD_IMPL) {</span><span class=\"w\"></span>\n<span class=\"gi\">+                    body.parse::&lt;kw::ORD_IMPL&gt;()?;</span><span class=\"w\"></span>\n<span class=\"gi\">+                    body.parse::&lt;Token![=]&gt;()?;</span><span class=\"w\"></span>\n<span class=\"gi\">+                    body.parse::&lt;kw::custom&gt;()?;</span><span class=\"w\"></span>\n<span class=\"gi\">+                    try_comma()?;</span><span class=\"w\"></span>\n<span class=\"gi\">+                    ord = true;</span><span class=\"w\"></span>\n<span class=\"gi\">+                    continue;</span><span class=\"w\"></span>\n<span class=\"gi\">+                }</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"w\"> </span>                // We've parsed everything that the user provided, so we're done<span class=\"w\"></span>\n<span class=\"w\"> </span>                if body.is_empty() {<span class=\"w\"></span>\n<span class=\"w\"> </span>                    break;<span class=\"w\"></span>\n<span class=\"gu\">@@ -152,7 +162,7 @@ fn fmt(&amp;self, fmt: &amp;mut ::std::fmt::Formatter&lt;'_&gt;) -&gt; ::std::fmt::Result {</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span>        Ok(Self(quote! {<span class=\"w\"></span>\n<span class=\"w\"> </span>            #(#attrs)*<span class=\"w\"></span>\n<span class=\"gd\">-            #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, #(#derive_paths),*)]</span><span class=\"w\"></span>\n<span class=\"gi\">+            #[derive(#(#derive_paths),*)]</span><span class=\"w\"></span>\n<span class=\"w\"> </span>            #[rustc_layout_scalar_valid_range_end(#max)]<span class=\"w\"></span>\n<span class=\"w\"> </span>            #vis struct #name {<span class=\"w\"></span>\n<span class=\"w\"> </span>                private: u32,<span class=\"w\"></span>\n</code></pre></div>",
        "id": 273361727,
        "sender_full_name": "pierwill",
        "timestamp": 1645907903
    },
    {
        "content": "<p>Another attempt: <a href=\"https://github.com/pierwill/rust/commit/c7aac1f74e2c64b32b63460305a60f03de407781\">https://github.com/pierwill/rust/commit/c7aac1f74e2c64b32b63460305a60f03de407781</a></p>",
        "id": 273361967,
        "sender_full_name": "pierwill",
        "timestamp": 1645908277
    }
]