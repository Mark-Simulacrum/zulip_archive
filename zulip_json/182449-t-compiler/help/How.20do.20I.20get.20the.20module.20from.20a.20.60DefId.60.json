[
    {
        "content": "<p>I would like to get the module (probably some kind of id), then being able to generate its string representation.<br>\nI found <code>tcx.def_path(function)</code> which give me  aÂ <code>DefPath</code>, but I'm not sure if it's the right direction.</p>\n<p>For example, if <code>function</code> is a <code>DefId</code>, and <code>tcx.def_path_str(function) == \"m1::m2::foo\"</code>, then I would like to have a function <code>tcx.get_module</code> such as <code>get_module(function)</code> gives me some id (probably a <code>DefID</code>), then <code>tcx.def_path_str(tcx.get_module(function)) == \"m1::m2\"</code>.</p>",
        "id": 216590780,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605261967
    },
    {
        "content": "<p>This kind of work, but 1) this feels very, very hacky and 2) I would like to not have the extra <code>::</code> at the beginning:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// remove the function name for the DefPath</span>\n<span class=\"n\">eprintln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">to_string_no_crate_verbose</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For the function <code>m1::m2::foo</code> I get <code>::m1::m2</code> instead of <code>m1::m2</code>.</p>",
        "id": 216592218,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605263050
    },
    {
        "content": "<p>It's not even right. For things like <code>std::ops::Fn::call</code> I should get <code>std::ops</code>, but my hacky method gives <code>::std::ops::Fn</code> (that Include the name of the trait)</p>",
        "id": 216598281,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605267114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> there's some code for this in collect_intra_doc_links, feel free to turn it into a function on tcx</p>",
        "id": 216609263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605273952
    },
    {
        "content": "<p>Ideally it would be a query</p>",
        "id": 216609283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605273961
    },
    {
        "content": "<p>It's the bit that says \"the parent may not always be a module\"</p>",
        "id": 216609348,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605273981
    },
    {
        "content": "<p>While we are here, what should a use to get the url of the doc of a function? For example, I would like to get <code>target/doc/test1/m2/fn.bar.html</code> from the <code>DefId</code> of  the function <code>m2::bar</code> in the crate <code>test1</code>.</p>",
        "id": 216627492,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605281776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> I answered on discord, but <code>fn href</code></p>",
        "id": 216627597,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605281817
    },
    {
        "content": "<p>it's somewhere in <code>clean</code> I think</p>",
        "id": 216627611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605281823
    },
    {
        "content": "<p>ah, that's where I asked it. I couldn't remember!!!</p>",
        "id": 216642777,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605287847
    },
    {
        "content": "<p>Why is <code>crate::html::format::href(my_function_id)</code> returning <code>None</code>?</p>",
        "id": 216645729,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605289068
    },
    {
        "content": "<p>I tried it with <code>--document-private-items</code>, and some functions are public</p>",
        "id": 216645839,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605289110
    },
    {
        "content": "<p>You need the documentation from other crates to be available</p>",
        "id": 216645909,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289138
    },
    {
        "content": "<p>The easy workaround for now is to use --extern-html-root-url</p>",
        "id": 216645939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289155
    },
    {
        "content": "<p>If you ran this as part of <code>cargo doc</code> it should just work <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 216645992,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289176
    },
    {
        "content": "<p>I am, but it doesn't.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ cargo run -- -Z unstable-options --extern-html-root-url test/test1/src/main.rs\n    Finished dev <span class=\"o\">[</span>unoptimized + debuginfo<span class=\"o\">]</span> target<span class=\"o\">(</span>s<span class=\"o\">)</span> in <span class=\"m\">0</span>.05s\n     Running <span class=\"sb\">`</span>target/debug/cargo-callgraph -Z unstable-options --extern-html-root-url test/test1/src/main.rs<span class=\"sb\">`</span>\nerror: missing file operand\n</code></pre></div>",
        "id": 216646281,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605289319
    },
    {
        "content": "<p><a href=\"https://github.com/Nemo157/dotfiles/blob/master/bin/cargo-doc-like-docs.rs#L72-L73\">https://github.com/Nemo157/dotfiles/blob/master/bin/cargo-doc-like-docs.rs#L72-L73</a></p>",
        "id": 216646360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> that's not part of cargo doc</p>",
        "id": 216646401,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289373
    },
    {
        "content": "<p>I mean if you inserted this as a shim and replaced the rustdoc binary</p>",
        "id": 216646421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289385
    },
    {
        "content": "<p>What I'm doing is that I took the rustdoc source, then modified the content of <code>core.rs</code>, more specifically <code>run_global_ctxt</code>. So I'm expecting that the arguments would be parsed correctly. But maybe I didn't understand what you meant.</p>",
        "id": 216646681,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605289528
    },
    {
        "content": "<p>I don't have time right now, ask in #rustdoc</p>",
        "id": 216646828,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289593
    },
    {
        "content": "<p>you're runing rustdoc standalone instead of it getting called by cargo</p>",
        "id": 216646857,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605289603
    },
    {
        "content": "<p>ok</p>",
        "id": 216646915,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605289635
    }
]