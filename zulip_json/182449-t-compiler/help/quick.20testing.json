[
    {
        "content": "<p>Hi, I've just started working on fixing a rustc bug, but I'm not sure how I will test if my change worked. Do I have to build the entire stage1 compiler or is there a faster way to do it?</p>",
        "id": 199315244,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590948493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> You have some suggested workflows <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html\">in the rustc-dev-guide</a></p>",
        "id": 199315336,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590948695
    },
    {
        "content": "<p>So if you run <code>./x.py build -i --stage 1 src/libstd</code>, it will build the compiler from source once</p>",
        "id": 199315393,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590948775
    },
    {
        "content": "<p>Okay, thanks! By the way, how long does it take the first time? I'm guessing a while</p>",
        "id": 199315405,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590948830
    },
    {
        "content": "<p>Well that depends on your machine I think?</p>",
        "id": 199315443,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590948844
    },
    {
        "content": "<p>First time you'll have to compile LLVM as well</p>",
        "id": 199315447,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590948853
    },
    {
        "content": "<p>Okay, thanks for your help! One more thing: the same page says:</p>\n<blockquote>\n<p>You can also use --keep-stage 1 when running tests. Something like this:</p>\n<ul>\n<li>Initial test run: <code>./x.py test -i --stage 1 src/test/ui</code></li>\n<li>Subsequent test run: <code>./x.py test -i --stage 1 src/test/ui --keep-stage 1</code></li>\n</ul>\n</blockquote>",
        "id": 199315478,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590948941
    },
    {
        "content": "<p>That's for running the test suite for the compiler</p>",
        "id": 199315518,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590948967
    },
    {
        "content": "<p>If I run the test without <code>--keep-stage</code>, does that throw away part of my compiler?</p>",
        "id": 199315519,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590948972
    },
    {
        "content": "<p>I think <code>--keep-stage</code> will keep the stage0 std, which you have to build a first time</p>",
        "id": 199315532,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590949033
    },
    {
        "content": "<p>But I might be very wrong <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 199315534,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590949052
    },
    {
        "content": "<p>I see, so <code>--keep-stage</code> is preventing the test suite from recompiling std?</p>",
        "id": 199315538,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590949073
    },
    {
        "content": "<p>I think so</p>",
        "id": 199315586,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590949156
    },
    {
        "content": "<p>It's going to throw you a warning like \"using a potentially outdated libstd\"</p>",
        "id": 199315593,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590949177
    },
    {
        "content": "<p>But if you're not working on the standard library then it doesn't matter</p>",
        "id": 199315641,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590949208
    },
    {
        "content": "<p>Again, the rustc dev guide has <a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\">some documentation</a> for building the compiler</p>",
        "id": 199315651,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590949247
    },
    {
        "content": "<p>Like for example <em>Creating a rustup toolchain</em> which in my experience was a game changer, being able to invoke my own build of rustc through <code>rustc +stage1</code> is really useful</p>",
        "id": 199315663,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590949304
    },
    {
        "content": "<p>I would advise not to build llvm and instead create a <code>config.toml</code> file and the path to your local llvm-config</p>",
        "id": 199317770,
        "sender_full_name": "marmeladema",
        "timestamp": 1590953052
    },
    {
        "content": "<blockquote>\n<p>Note that you need to have the LLVM <code>FileCheck</code> tool installed, which is used for codegen tests.</p>\n</blockquote>",
        "id": 199318950,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1590955154
    },
    {
        "content": "<blockquote>\n<p>I would advise not to build llvm and instead create a config.toml file and the path to your local llvm-config</p>\n</blockquote>\n<p>I really should have done that earlier <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> Up to now I had 6 identical LLVM builds</p>",
        "id": 199320518,
        "sender_full_name": "lcnr",
        "timestamp": 1590957872
    },
    {
        "content": "<p>Yeah, building llvm wastes like 45m on my laptop. <span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> not sure if you've already built, but it can take a while. I would recommend turning on incremental (in config.toml) and only building stage 1 (unless your change needs stage 2 for some reason, but most people don't need it)</p>",
        "id": 199330917,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590977292
    },
    {
        "content": "<p>Also, if you're just checking if your changes compile you can use <code>./x.py check</code> which takes a couple of minutes is the <code>cargo check</code> of the compiler...</p>",
        "id": 199330922,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590977322
    },
    {
        "content": "<p>I did already build; building LLVM actually didn't seem to take too long, maybe because I'm on a desktop. Does LLVM have to rebuilt often?</p>",
        "id": 199332274,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590979677
    },
    {
        "content": "<p>Thanks for the tip! I'd been running <code>./x.py</code> with <code>-i</code> but I turned on incremental so I don't forget. I'm wondering why it's not on by default?</p>",
        "id": 199332346,
        "sender_full_name": "Noah Lev",
        "timestamp": 1590979791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/quick.20testing/near/199332274\">said</a>:</p>\n<blockquote>\n<p>I did already build; building LLVM actually didn't seem to take too long, maybe because I'm on a desktop. Does LLVM have to rebuilt often?</p>\n</blockquote>\n<p>it happens rarely (i.e. when llvm parts changed)</p>",
        "id": 199333756,
        "sender_full_name": "Tshepang Lekhonkhobe",
        "timestamp": 1590981913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/quick.20testing/near/199332346\">said</a>:</p>\n<blockquote>\n<p>Thanks for the tip! I'd been running <code>./x.py</code> with <code>-i</code> but I turned on incremental so I don't forget. I'm wondering why it's not on by default?</p>\n</blockquote>\n<p>It's a bit buggy to reuse objects when bootstrapping because the ABI may change and there is weirdness with recompiling the std libs, so technically doing so is unsound (I think). But in practice it usually works fine.</p>",
        "id": 199419456,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591043690
    },
    {
        "content": "<p>More generally, <code>./x.py</code> seems to be more optimized for producing distributions than for development, which will hopefully change a bit in the future...</p>",
        "id": 199419530,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591043731
    },
    {
        "content": "<p>Yeah, the commands to run it are pretty long :)</p>",
        "id": 199419571,
        "sender_full_name": "Noah Lev",
        "timestamp": 1591043756
    },
    {
        "content": "<p>I've set up shell aliases for basic commands like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">alias</span> <span class=\"nv\">rb</span><span class=\"o\">=</span><span class=\"s1\">&#39;./x.py build -i --stage 1 src/libstd&#39;</span>\n<span class=\"nb\">alias</span> <span class=\"nv\">rt</span><span class=\"o\">=</span><span class=\"s1\">&#39;./x.py test -i --stage 1&#39;</span>\n</code></pre></div>\n\n\n<p>So that I can invoke them much more quickly. And I also never forget the <code>-i</code> this way :D</p>",
        "id": 199420253,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1591044116
    },
    {
        "content": "<p>Ah, good idea! Although what about <code>--keep-stage 1</code>? That part confuses me: what's the different between between <code>-i</code> and <code>--keep-stage 1</code>?</p>",
        "id": 199421235,
        "sender_full_name": "Noah Lev",
        "timestamp": 1591044624
    },
    {
        "content": "<p>IIRC, <code>-i</code> means \"use incremental compilation\", and <code>--keep-stage</code> means \"don't recompile things and just keep what you can keep of the previous stage's artifacts\"</p>",
        "id": 199421443,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1591044744
    },
    {
        "content": "<p>Is that like what mark-i-m said, where <code>-i</code> is sound, but <code>--keep-stage</code> is technically unsound because of ABI etc.?</p>",
        "id": 199422246,
        "sender_full_name": "Noah Lev",
        "timestamp": 1591045092
    },
    {
        "content": "<p>I just added your aliases, except I added <code>--keep-stage 1</code> so that I don't forget and have to wait forever :)</p>",
        "id": 199422463,
        "sender_full_name": "Noah Lev",
        "timestamp": 1591045195
    },
    {
        "content": "<p>~I might be mistaken, but I believe it is <code>--keep-stage 0</code> (yeah, the numbering is very weird)~ EDIT: I am mistaken, according to <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=keep-stage#incremental-builds-with---keep-stage\">the guide</a>... apparently, I've been doing this wrong for a while :P</p>",
        "id": 199446446,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591067373
    },
    {
        "content": "<p>IIUC, both are unsound but work in practice. <code>-i</code> is the same as setting <code>incremental = true</code> in the <code>config.toml</code></p>",
        "id": 199446485,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591067402
    }
]