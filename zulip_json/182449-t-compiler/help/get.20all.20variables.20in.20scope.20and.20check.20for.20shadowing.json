[
    {
        "content": "<p>Inspired by <a href=\"https://stackoverflow.com/questions/67296177/rust-book-listing-10-15when-i-use-let-largest-item-the-largest-cant-be\">this SO post</a>, I would like to implement the following logic: if a <code>let</code> binding is unused, and another variable with the same name exists, suggest removing the <code>let</code>.</p>\n<p>I've found the relevant code in <code>rustc_passes/src/liveness.rs</code> -&gt; <code>fn report_unused</code>. I can get a hir <code>Node::Local</code> with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ir</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parent</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">get_parent_node</span><span class=\"p\">(</span><span class=\"n\">first_hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, I can't find how to check if this variable shadows some other variable. I tried finding how other code does that, but I only found the maze that is <code>rustc_resolve</code>. I'd appreciate any hints.</p>\n<p>I'd also like to know how to get the span of the <code>let</code>, but that's a secondary concern for now.</p>",
        "id": 236494421,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1619611452
    },
    {
        "content": "<p>This will be tricky because you need access to both control flow and scoping info, and the resolver is consumed when creating the TyCtxt. <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> may have ideas.</p>",
        "id": 236497411,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619612838
    },
    {
        "content": "<p>I've created an issue to track this improvement: <a href=\"https://github.com/rust-lang/rust/issues/84664\">https://github.com/rust-lang/rust/issues/84664</a></p>",
        "id": 236547105,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1619631050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Hi, did you have a chance to look at this? Just making sure Zulip didn't eat the notification or something ;)</p>",
        "id": 236752570,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1619732761
    },
    {
        "content": "<p>It's possible collect some relevant data during name resolution, then pass it through <code>Resolver</code> -&gt; <code>ResolverOutputs</code> -&gt; <code>GlobalCtxt</code> and use it during liveness analysis, but I don't think it's something that's reasonable to do for a niche diagnostic.</p>",
        "id": 236755598,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1619734476
    },
    {
        "content": "<p>This is only a valid suggestion if the initial <code>let</code> is mutable and <em>permits</em> assignment, which none of the examples presented so far actually allow. The compiler is allowed to make questionable suggestions, I would think, but it should not make overtly erroneous ones.</p>",
        "id": 236793021,
        "sender_full_name": "Jubilee",
        "timestamp": 1619765493
    },
    {
        "content": "<p>Ehhh, it's probably still closer than the original code. Suggestions don't need to be 100% valid to be helpful</p>",
        "id": 236793097,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619765538
    },
    {
        "content": "<p>True, I think it can mostly be solved by couching the phrasing differently: instead of outright saying, something like asking \"did you mean to assign instead?\" would minimize coming off like the Rust compiler explicitly said you should assign to an immutable variable.</p>",
        "id": 236793540,
        "sender_full_name": "Jubilee",
        "timestamp": 1619765968
    },
    {
        "content": "<p>we could emit a \"you will need to change this to <code>let mut</code>\" hint if you insist</p>",
        "id": 236798782,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1619769285
    },
    {
        "content": "<p>but even without that it will send you down the right path, as that hint will appear on the next compile</p>",
        "id": 236798810,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1619769304
    }
]