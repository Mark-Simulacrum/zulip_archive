[
    {
        "content": "<p>How do I get the type of an <code>Expr</code> from a <code>TyCtxt</code>? I see that there's a <code>typeOf</code> method, but it takes a <code>DefId</code>, and <code>Expr</code> has a <code>LocalDefId</code> as far as I can see. Is there a way to get a <code>DefId</code> from a <code>LocalDefId</code>?</p>",
        "id": 223610299,
        "sender_full_name": "osa1",
        "timestamp": 1611300179
    },
    {
        "content": "<p>wasn't there a <code>local_def_id.to_def_id()</code> ?</p>",
        "id": 223610914,
        "sender_full_name": "lqd",
        "timestamp": 1611300851
    },
    {
        "content": "<p>That type checks, thanks</p>",
        "id": 223611180,
        "sender_full_name": "osa1",
        "timestamp": 1611301129
    },
    {
        "content": "<p>Hmm, it seems like this line</p>\n<div class=\"codehilite\"><pre><span></span><code>            let ty = cx.tcx.type_of(expr.hir_id.owner.to_def_id());\n</code></pre></div>\n<p>Sometimes fails with</p>\n<div class=\"codehilite\"><pre><span></span><code>compute_type_of_item: unexpected item type: ...\n</code></pre></div>\n<p>It's the <code>rustc_typeck::collect::type_of::type_of</code> function. Is there a version of this that returns an <code>Option</code>, or some predicate for things that can be type checked?</p>",
        "id": 223611425,
        "sender_full_name": "osa1",
        "timestamp": 1611301413
    },
    {
        "content": "<p>Hmm, so <code>hir_id.owner</code> gives me the <code>DefId</code> of the enclosing function, trait etc. it's not what I want. I'm not sure how to get <code>DefId</code> of an expression.</p>",
        "id": 223612205,
        "sender_full_name": "osa1",
        "timestamp": 1611302178
    },
    {
        "content": "<p>Trying this now: <code>cx.tcx.type_of(cx.tcx.hir().local_def_id(expr.hir_id).to_def_id())</code></p>",
        "id": 223612459,
        "sender_full_name": "osa1",
        "timestamp": 1611302412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119169\">@osa1</span> I don't think expressions have a DefId</p>",
        "id": 223646806,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611325278
    },
    {
        "content": "<p>they're not serialized cross-crate</p>",
        "id": 223646811,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611325282
    },
    {
        "content": "<p><code>type_of</code> is only for items</p>",
        "id": 223646925,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611325328
    },
    {
        "content": "<p>The type of expressions is stored in the <code>TypeckResults</code> of the containing item</p>",
        "id": 223647036,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611325400
    }
]