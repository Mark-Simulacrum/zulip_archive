[
    {
        "content": "<p>Can someone help me find the place where rustc lifts closure bodies into top-level functions (i.e. closure conversion)?</p>",
        "id": 267932972,
        "sender_full_name": "eholk",
        "timestamp": 1642109020
    },
    {
        "content": "<p>I was assuming this happens somewhere in the HIR -&gt; MIR step, but maybe it actually happens in the AST -&gt; HIR phase?</p>",
        "id": 267933258,
        "sender_full_name": "eholk",
        "timestamp": 1642109177
    },
    {
        "content": "<p>Basically when you ask for the MIR body of <code>&lt;{closure type} as FnOnce&gt;::fn_once</code> (or one of the other Fn* methods depending on which are implemented) it will produce the MIR body of the closure. There is no explicit conversion to a top level function.</p>",
        "id": 267937510,
        "sender_full_name": "bjorn3",
        "timestamp": 1642111534
    },
    {
        "content": "<p>Yeah, closures are explicitly represented in MIR. E.g., this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>turns into this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// WARNING: This output format is intended for human consumers only</span>\n<span class=\"c1\">// and is subject to change without notice. Knock yourself out.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span>::<span class=\"p\">{</span><span class=\"n\">closure</span>#<span class=\"mi\">0</span><span class=\"p\">}(</span><span class=\"n\">_1</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2</span>:<span class=\"mi\">14</span>: <span class=\"mi\">2</span>:<span class=\"mi\">32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">_2</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">;</span><span class=\"w\">                       </span><span class=\"c1\">// in scope 0 at src/main.rs:2:15: 2:16</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\">                     </span><span class=\"c1\">// return place in scope 0 at src/main.rs:2:23: 2:23</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_3</span>: <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\">                     </span><span class=\"c1\">// in scope 0 at src/main.rs:2:25: 2:26</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_4</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">);</span><span class=\"w\">             </span><span class=\"c1\">// in scope 0 at src/main.rs:2:25: 2:30</span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_2</span><span class=\"p\">;</span><span class=\"w\">                         </span><span class=\"c1\">// scope 0 at src/main.rs:2:25: 2:26</span>\n<span class=\"w\">        </span><span class=\"n\">_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CheckedAdd</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1_</span><span class=\"k\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// scope 0 at src/main.rs:2:25: 2:30</span>\n<span class=\"w\">        </span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_4</span><span class=\"p\">.</span><span class=\"mi\">1</span>: <span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"attempt to compute `{} + {}`, which would overflow\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">_3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1_</span><span class=\"k\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">bb1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// scope 0 at src/main.rs:2:25: 2:30</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb1</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_4</span><span class=\"p\">.</span><span class=\"mi\">0</span>: <span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\">           </span><span class=\"c1\">// scope 0 at src/main.rs:2:25: 2:30</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at src/main.rs:2:32: 2:32</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"p\">();</span><span class=\"w\">                      </span><span class=\"c1\">// return place in scope 0 at src/main.rs:1:11: 1:11</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_1</span>: <span class=\"p\">[</span><span class=\"n\">closure</span><span class=\"o\">@</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2</span>:<span class=\"mi\">14</span>: <span class=\"mi\">2</span>:<span class=\"mi\">32</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// in scope 0 at src/main.rs:2:9: 2:11</span>\n<span class=\"w\">    </span><span class=\"n\">scope</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">;</span><span class=\"w\">                  </span><span class=\"c1\">// in scope 1 at src/main.rs:2:9: 2:11</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">bb0</span>: <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\">                          </span><span class=\"c1\">// scope 0 at src/main.rs:3:2: 3:2</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267939084,
        "sender_full_name": "Noah Lev",
        "timestamp": 1642112209
    }
]