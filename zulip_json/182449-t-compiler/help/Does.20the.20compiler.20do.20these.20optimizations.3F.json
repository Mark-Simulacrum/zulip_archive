[
    {
        "content": "<p>I was wondering about two things regarding the compiler:</p>\n<ol>\n<li>For output to the terminal, does the compiler buffer all the output into a single string and then print it using a single print operation at the end?</li>\n<li>For fast compile times, does the compiler check the file metadata to check stats like the last edit time? Then it doesn't have to recompile that part<br>\nThese are no-brainers but I was curious</li>\n</ol>",
        "id": 221682905,
        "sender_full_name": "ruster",
        "timestamp": 1609871231
    },
    {
        "content": "<ol>\n<li>This is a library thing, not compiler thing. The standard library line buffers stdout. It doesn't buffer stderr.</li>\n<li>For whole crates, cargo checks the mtime of all files used for compiling the crate and avoids recompiling if those and all dependencies of the crate are not modified. In debug mode, cargo enabled the incremental mode of rustc, which causes it to keep a cache containing the result of many so called queries together with dependency information. The query results are reused when possible.</li>\n</ol>",
        "id": 221684714,
        "sender_full_name": "bjorn3",
        "timestamp": 1609872086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"376093\">@ruster</span> ^</p>",
        "id": 221684726,
        "sender_full_name": "bjorn3",
        "timestamp": 1609872092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  1. Thank you. Something just clicked in my head. So that is why nothing is printed with just a <code>print!()</code> until you flush the output. However, for <code>println!()</code> it does immediately print to the terminal, so for that doing the <code>let mut buffer = String::with_capacity();</code> <code>buffer.push_str();</code>-thing should be faster, right? But I suppose the compiler only uses the <code>print!()</code>?</p>\n<ol start=\"2\">\n<li>As expected. Thank you for this interesting information</li>\n</ol>",
        "id": 221685425,
        "sender_full_name": "ruster",
        "timestamp": 1609872445
    },
    {
        "content": "<p><code>println!()</code> prints immediately to the terminal as it ends with a trailing <code>\\n</code>. It is literally implemented as <code>print!()</code> with a <code>\\n</code> appended to the format string. Printing immediately by the way means that it buffers until the end of the line and then uses a single <code>write</code> syscall to write the whole line. If you were to print two lines using <code>println!()</code>, you would get two <code>write</code> syscalls I think.</p>",
        "id": 221685989,
        "sender_full_name": "bjorn3",
        "timestamp": 1609872734
    },
    {
        "content": "<p>Right, that's what I thought too :)</p>",
        "id": 221686399,
        "sender_full_name": "ruster",
        "timestamp": 1609872898
    },
    {
        "content": "<p>However, if I run the following code, the string buffer version is consistently faster...<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=44f620d33e971e576c80ec80f5fad02a\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=44f620d33e971e576c80ec80f5fad02a</a><br>\nCan anyone explain this to me?</p>",
        "id": 221692766,
        "sender_full_name": "ruster",
        "timestamp": 1609876177
    },
    {
        "content": "<p>I suspect a lot of that is locking overhead.</p>",
        "id": 221694688,
        "sender_full_name": "cuviper",
        "timestamp": 1609877079
    },
    {
        "content": "<p>but I wouldn't get too hung up on this from the compiler perspective -- printing to stdout is not where we spend much time</p>",
        "id": 221695014,
        "sender_full_name": "cuviper",
        "timestamp": 1609877273
    }
]