[
    {
        "content": "<p>I have a repro of something I'd expect to link but does not: rust binary using relocation-model=static linking with .a containing -fno-pic code, where the rust code uses serde (proc_macro?). I noticed that relocation-model=dynamic-no-pic does work but it is specifically mentioned in the rustc book not to use this to link against non-pic code. I see this issue on rhel &amp; wsl(ubuntu).<br>\nI was hoping to open an issue and also start digging into the issue a bit more but I don't know where to start - is this a cargo thing, or a rustc thing, or something else? Does anyone have any thoughts on where would be a good place to start digging?</p>\n<p>Small reproducible example: <a href=\"https://github.com/adamncasey/rust-static-link-serde\">https://github.com/adamncasey/rust-static-link-serde</a><br>\nRelevant rustc book docs: <a href=\"https://doc.rust-lang.org/rustc/codegen-options/index.html#special-relocation-models\">https://doc.rust-lang.org/rustc/codegen-options/index.html#special-relocation-models</a></p>",
        "id": 263741118,
        "sender_full_name": "Adam Casey",
        "timestamp": 1638665892
    },
    {
        "content": "<p>You are passing -Crelocation-model to all crates, including the proc macro. The proc macro is a dylib amd thus needs a dynamic relocation model. You can try explicitly specifying a target using --target to avoid rustflags applying to host crates.</p>",
        "id": 263756488,
        "sender_full_name": "bjorn3",
        "timestamp": 1638692257
    },
    {
        "content": "<p>Ah interesting thank you. <code>[build] target = \"x86_64-unknown-linux-gnu\" rustflags = [\"-C\", \"relocation-model=static\"]</code> worked. For my use case it mostly works to pin the target to this platform, but do you think there is/should be a way to specify relocation-model=static just for the bin crate?</p>",
        "id": 263785377,
        "sender_full_name": "Adam Casey",
        "timestamp": 1638733410
    },
    {
        "content": "<p>You can use <code>cargo rustc -- -Crelocation-model=static</code> when compiling. (you may need <code>--bin name_of_binary</code> if there is also a library or multiple binaries in the same package)</p>",
        "id": 263785444,
        "sender_full_name": "bjorn3",
        "timestamp": 1638733501
    },
    {
        "content": "<p>By the way compiling only the binary with <code>-Crelocation-model=static</code> is not very useful as all dependencies would still use the default relocation model.</p>",
        "id": 263785474,
        "sender_full_name": "bjorn3",
        "timestamp": 1638733557
    },
    {
        "content": "<p>Thanks again - I think I'm getting somewhere. Unfortunately the <code>.cargo/config: build.target, build.rustflags</code> method doesn't work since the place I'm hitting this issue is depending on a crate (hyper) which specifies <code>crate-type = [\"lib\", \"staticlib\", \"cdylib\"]</code> - cargo tries to but cannot build the <code>cdylib</code> with relocation-model=static.</p>\n<p><code>cargo rustc -- -Crelocation-model=static</code> is promising and, at least from my perspective, seems more like what I need - I only really care that the final binary is built without PIE since I don't require zero dynamic link dependencies &amp; I'd prefer my build wasn't fragile to an upstream package extending their <code>crate-type</code>. If there was a way I could configure <code>cargo build</code> to pass this to rustc for just my binary I'd be happy :) Thanks again for your help!</p>",
        "id": 263839540,
        "sender_full_name": "Adam Casey",
        "timestamp": 1638791843
    },
    {
        "content": "<p>You can create a <code>.cargo/config</code> alias for this:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># .cargo/config</span>\n<span class=\"k\">[alias]</span>\n<span class=\"n\">build-pie</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"rustc\"</span><span class=\"p\">,</span> <span class=\"s\">\"--\"</span><span class=\"p\">,</span> <span class=\"s\">\"-Crelocation-model=static\"</span><span class=\"p\">]</span> <span class=\"c1\"># Maybe add a `--bin …` target as well</span>\n</code></pre></div>\n<p>so that <code>cargo build-pie</code> works.</p>",
        "id": 264491677,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639162309
    },
    {
        "content": "<p>Another  (untested!) option, maybe, would be to do something along the lines of:</p>\n<ul>\n<li>creating a <code>rustc-static-reloc.sh</code>:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"ch\">#!/bin/sh</span>\n<span class=\"s2\">&quot;</span><span class=\"nv\">$@</span><span class=\"s2\">&quot;</span> -Crelocation-model<span class=\"o\">=</span>static\n</code></pre></div>\n<ul>\n<li>and then doing:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">RUSTC_WORKSPACE_WRAPPER</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/rustc-static-reloc.sh\"</span> cargo build …\n</code></pre></div>",
        "id": 264491679,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639162310
    }
]