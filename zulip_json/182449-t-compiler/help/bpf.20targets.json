[
    {
        "content": "<p>Hey -- <a href=\"https://github.com/rust-lang/rust/pull/79608\">https://github.com/rust-lang/rust/pull/79608</a> is currently assigned to me (by me :). I don't think until we merge <a href=\"https://github.com/rust-lang/rfcs/pull/2803\">RFC 2803</a> we should be accepting new targets into tier 2 status (and even tier 3 is a bit iffy).</p>\n<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> is there a chance you could provide an update on the timeline for that RFC? Do you need some help from others? Are there other blockers I'm not aware of?</p>\n<p>For this particular PR, even demoted to tier 3, I am not familiar enough with BPF to evaluate the target definitions or whether the strategy adopted (asm emission) is the right one. Does anyone have more insight there?</p>",
        "id": 219716327,
        "sender_full_name": "simulacrum",
        "timestamp": 1607791256
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, I'm the author of the PR,  thanks for looking at it! The reason for asm emission is that the BPF target supports a subset of rust, (for example, arguments are only passed in registers, up to a maximum of 5) so it makes sense to push codegen after linking after all dead code has been eliminated</p>",
        "id": 219726103,
        "sender_full_name": "Alessandro Decina",
        "timestamp": 1607804577
    },
    {
        "content": "<p>There's other reasons too, like older kernels don't allow function calls or loops. When targeting those bpf-linker can turn on more aggressive inlining and unrolling. As they keep adding features and relaxing restrictions in the verifier, I imagine that there will always be a set of hacks needed to target older kernels, and i don't think those would belong in rustc</p>",
        "id": 219726582,
        "sender_full_name": "Alessandro Decina",
        "timestamp": 1607805277
    },
    {
        "content": "<p>Yeah, that seems reasonable to me - I just don't have enough knowledge to r+ myself :)</p>",
        "id": 219726603,
        "sender_full_name": "simulacrum",
        "timestamp": 1607805318
    },
    {
        "content": "<p>Hehe sure I still appreciate you looking into it. I'm going to add a bit more context to the PR so maybe others can pitch in</p>",
        "id": 219726914,
        "sender_full_name": "Alessandro Decina",
        "timestamp": 1607805765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Working on the policy now. Managed to get it back to the top of my stack for a bit.</p>",
        "id": 219805454,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607928278
    },
    {
        "content": "<p>Also, I'd <em>love</em> to see Rust support for eBPF.</p>",
        "id": 219812328,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607935124
    },
    {
        "content": "<p>I think that'd also be an excellent use case for <a href=\"https://github.com/rust-lang/rfcs/pull/3028/\">https://github.com/rust-lang/rfcs/pull/3028/</a> .</p>",
        "id": 219812376,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607935162
    },
    {
        "content": "<p>I can easily imagine wanting to build and embed a BPF program in another Rust program.</p>",
        "id": 219812402,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607935185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> indeed, the usual workflow is to embed the BPF program in its user-space loader</p>",
        "id": 219813908,
        "sender_full_name": "Alessandro Decina",
        "timestamp": 1607936183
    },
    {
        "content": "<p>Assuming it doesn't need to be built at runtime, yeah.</p>",
        "id": 219817169,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607938307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rfcs/pull/2803#issuecomment-744312162\">https://github.com/rust-lang/rfcs/pull/2803#issuecomment-744312162</a></p>",
        "id": 219817688,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607938624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Could you please post an update to <a href=\"https://github.com/rust-lang/core-team/issues/5\">https://github.com/rust-lang/core-team/issues/5</a> (and reopen if appropriate)?</p>",
        "id": 219817714,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607938641
    },
    {
        "content": "<p>I will reopen - I want to check in with core on the legal questions asked in the RFC and how we expect teams to resolve those (all conversations with lawyers will almost certainly need to go through core for this purpose, though I'm not clear on whether it'll be necessary in the common case. I found the non-onerous requirements particularly interesting wrt to e.g. apple platforms which are quite expensive to obtain and manage, or other similar platforms where there is basically a requirement to purchase hardware to test for it.</p>",
        "id": 219842272,
        "sender_full_name": "simulacrum",
        "timestamp": 1607953419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-31.20.2354818/near/221296782\">said</a>:</p>\n<blockquote>\n<p>(another observation is that its not clear how much utility a bpf target has when there is ebpf...)</p>\n</blockquote>\n<p>Sorry about the confusion! The targets produce eBPF code. BPF/eBPF in the context of the linux kernel are sadly pretty much used interchangeably. The LLVM target is called BPF but does produce eBPF bytecode, and clang calls it bpf too. That's why I went for bpf-* but happy to rename ebpf-*.</p>",
        "id": 221313896,
        "sender_full_name": "Alessandro Decina",
        "timestamp": 1609446007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-31.20.2354818/near/221296409\">said</a>:</p>\n<blockquote>\n<p>I think another worry of mine is that it sounds like bpf-linker is (maybe) a tool that they wrote themselves? but I didn't investigate in detail<br>\n(nothing against that but seems potentially like something that would vanish)</p>\n</blockquote>\n<p>I did write it myself, and it's a valid concern of course. A similar conversation happened for the NVPTX target, and it was decided to keep the NVPTX linker out of rust-lang/rustup</p>",
        "id": 221314323,
        "sender_full_name": "Alessandro Decina",
        "timestamp": 1609446553
    }
]