[
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/Wxe8qv\">https://rust.godbolt.org/z/Wxe8qv</a></p>\n<p>I want to change <code>format!</code> so it expand like in <code>foo</code> <a href=\"https://github.com/rust-lang/rust/issues/75894\">#75894</a> .<br>\nHowever, <code>bar</code> is not optimized to a <code>ret</code> inst just like <code>foo</code> and <code>baz</code>.<br>\nDoes macros affect how code is optimized?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Arguments</span>::<span class=\"n\">new_v1</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">&quot;asdfasdfasdfasfasfasd&quot;</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">                                                 </span><span class=\"o\">&amp;</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">borrow</span>::<span class=\"nb\">ToOwned</span><span class=\"o\">&gt;</span>::<span class=\"n\">to_owned</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;a long story&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">String</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"s\">&quot;a long story&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207935928,
        "sender_full_name": "lzutao",
        "timestamp": 1598343866
    },
    {
        "content": "<p>Macros are expanded way before any optinization passes.</p>",
        "id": 207936724,
        "sender_full_name": "bjorn3",
        "timestamp": 1598344544
    },
    {
        "content": "<p>It might make sense to look at the pre optimization mir and look for differences</p>",
        "id": 207937004,
        "sender_full_name": "lcnr",
        "timestamp": 1598344768
    },
    {
        "content": "<p>How can I do that ?</p>",
        "id": 207938038,
        "sender_full_name": "lzutao",
        "timestamp": 1598345544
    },
    {
        "content": "<p><a href=\"https://rust.godbolt.org/z/h9j76e\">https://rust.godbolt.org/z/h9j76e</a></p>",
        "id": 207938168,
        "sender_full_name": "lcnr",
        "timestamp": 1598345671
    },
    {
        "content": "<p>you may have to smack a <code>-Zmir-opt-level=0</code> on top for this to be helpful</p>",
        "id": 207938186,
        "sender_full_name": "lcnr",
        "timestamp": 1598345693
    },
    {
        "content": "<p>iirc there is a way to instead just return the mir before the from before the first optimization pass, but I don't remember the name rn</p>",
        "id": 207938230,
        "sender_full_name": "lcnr",
        "timestamp": 1598345735
    },
    {
        "content": "<p>Is stage 1 compiler and stage 2 different in optimization result ?</p>",
        "id": 207940200,
        "sender_full_name": "lzutao",
        "timestamp": 1598347248
    },
    {
        "content": "<p>stage 1 and 2 should result in the same output</p>",
        "id": 207940313,
        "sender_full_name": "lcnr",
        "timestamp": 1598347348
    },
    {
        "content": "<p>they are the same program, \"just\" compiled with a different compiler</p>",
        "id": 207940375,
        "sender_full_name": "lcnr",
        "timestamp": 1598347431
    },
    {
        "content": "<p>turned out that my system llvm (v10.0.1) doesn't optimize the code like the one rustc uses,<br>\ncodegen tests should be passed now.<br>\nThanks for helping me!</p>",
        "id": 207977885,
        "sender_full_name": "lzutao",
        "timestamp": 1598369249
    }
]