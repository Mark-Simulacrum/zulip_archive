[
    {
        "content": "<p>I know tidy enforces our 100 char line length limit, but I have some comments that accidentally went over the 100 limit like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">          </span><span class=\"c1\">// bla bla bla ... (line is 120 chars long)</span>\n</code></pre></div>\n<p>and tidy doesn't seem to care at all? </p>\n<div class=\"codehilite\"><pre><span></span><code>PS D:\\code\\rust&gt; python x.py test tidy\nUpdating only changed submodules\nSubmodules updated in 0.15 seconds\n    Finished dev [unoptimized + debuginfo] target(s) in 2.27s\ntidy check\nChecking which error codes lack tests...\n* 625 error codes\n* highest error code: E0783\nFound 517 error codes\nFound 0 error codes with no tests\nDone!\n* 335 features\nfmt check\nBuild completed successfully in 0:00:44\n</code></pre></div>\n<p>Is that intended?</p>",
        "id": 240354208,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047361
    },
    {
        "content": "<p>a bit strange, I had a tidy failure for the length of a comment yesterday -- it was <a href=\"https://github.com/rust-lang/rust/commit/7d4b5188da752361fecd74508a54eea2577e1eab#diff-8d39858cc56191ec3b6be154cdc2cf7acd5a7a3d28089ceb1620737540c094f5R8\">in this test</a>, caught <a href=\"https://github.com/rust-lang/rust/pull/85633#issuecomment-847108399\">here</a></p>",
        "id": 240354443,
        "sender_full_name": "lqd",
        "timestamp": 1622047468
    },
    {
        "content": "<p>weird...</p>",
        "id": 240354462,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047480
    },
    {
        "content": "<p>There's no comment disabling tidy that I can see in this file</p>",
        "id": 240354522,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047508
    },
    {
        "content": "<p>does tidy only check files tracked by git maybe ?</p>",
        "id": 240354620,
        "sender_full_name": "lqd",
        "timestamp": 1622047546
    },
    {
        "content": "<p>Yes but it's checked into git</p>",
        "id": 240354871,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047660
    },
    {
        "content": "<p>which file is this in?</p>",
        "id": 240354891,
        "sender_full_name": "simulacrum",
        "timestamp": 1622047670
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 240354894,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047671
    },
    {
        "content": "<p><code>compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs</code></p>",
        "id": 240354977,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047692
    },
    {
        "content": "<p>uh, just compiler/, right?</p>",
        "id": 240355001,
        "sender_full_name": "simulacrum",
        "timestamp": 1622047706
    },
    {
        "content": "<p>uh yeah</p>",
        "id": 240355070,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047737
    },
    {
        "content": "<p>srry</p>",
        "id": 240355077,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047739
    },
    {
        "content": "<p>we don't check line length in rustfmt-controlled files</p>",
        "id": 240355220,
        "sender_full_name": "simulacrum",
        "timestamp": 1622047801
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e942a6742ca8f47abfdc48c5e52e520aebd2100a/compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs#L1550\">https://github.com/rust-lang/rust/blob/e942a6742ca8f47abfdc48c5e52e520aebd2100a/compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs#L1550</a></p>",
        "id": 240355224,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047801
    },
    {
        "content": "<p>Oh so I guess rustfmt doesn't care about the line length of comments then?</p>",
        "id": 240355323,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047834
    },
    {
        "content": "<p>(Under the assumption that rustfmt already reflows it)</p>",
        "id": 240355327,
        "sender_full_name": "simulacrum",
        "timestamp": 1622047836
    },
    {
        "content": "<p>but yeah I guess it doesn't touch comments</p>",
        "id": 240355336,
        "sender_full_name": "simulacrum",
        "timestamp": 1622047843
    },
    {
        "content": "<p>so perhaps a bug in that logic :)</p>",
        "id": 240355361,
        "sender_full_name": "simulacrum",
        "timestamp": 1622047853
    },
    {
        "content": "<p>that's 99 chars right ?</p>",
        "id": 240355376,
        "sender_full_name": "lqd",
        "timestamp": 1622047860
    },
    {
        "content": "<p>VSCode says 126 including the whitespace at the beginning</p>",
        "id": 240355423,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047879
    },
    {
        "content": "<p>I can manually reformat but I guess we should log a bug somewhere?</p>",
        "id": 240355619,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047939
    },
    {
        "content": "<p>(assuming we don't want the current behavior)</p>",
        "id": 240355691,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622047966
    },
    {
        "content": "<p>not for me</p>",
        "id": 240355701,
        "sender_full_name": "lqd",
        "timestamp": 1622047969
    },
    {
        "content": "<p>interesting :)</p>",
        "id": 240355748,
        "sender_full_name": "lqd",
        "timestamp": 1622047986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> It's not 126 chars for you?</p>",
        "id": 240355803,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048010
    },
    {
        "content": "<p>Or you don't want the behavior? :)</p>",
        "id": 240355827,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048023
    },
    {
        "content": "<p>this exact line you linked above ?</p>",
        "id": 240355841,
        "sender_full_name": "lqd",
        "timestamp": 1622048030
    },
    {
        "content": "<p>Yeah</p>",
        "id": 240355847,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048033
    },
    {
        "content": "<p>it's 99 chars for me</p>",
        "id": 240355877,
        "sender_full_name": "lqd",
        "timestamp": 1622048043
    },
    {
        "content": "<p>Wait</p>",
        "id": 240355889,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048044
    },
    {
        "content": "<p>Clicked the wrong line</p>",
        "id": 240355947,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048068
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e942a6742ca8f47abfdc48c5e52e520aebd2100a/compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs#L1628\">https://github.com/rust-lang/rust/blob/e942a6742ca8f47abfdc48c5e52e520aebd2100a/compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs#L1628</a></p>",
        "id": 240355949,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048070
    },
    {
        "content": "<p>There's a bunch of lines after this that are all longer than 100 chars but tidy doesn't care</p>",
        "id": 240355986,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048092
    },
    {
        "content": "<p>that's reassuring</p>",
        "id": 240355996,
        "sender_full_name": "lqd",
        "timestamp": 1622048097
    },
    {
        "content": "<p>interesting find :)</p>",
        "id": 240356096,
        "sender_full_name": "lqd",
        "timestamp": 1622048144
    },
    {
        "content": "<p>I'll see if this is a known behavior upstream on rustfmt but I guess I should also log a bug for tidy in case rustfmt wants the current behavior for some reason.</p>",
        "id": 240356289,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048210
    },
    {
        "content": "<p>Hmm looks like rustfmt does not format comments by default and the options to tell it to do so are not stable.</p>",
        "id": 240356915,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048450
    },
    {
        "content": "<p>we're using the unstable version IIRC right ?</p>",
        "id": 240356969,
        "sender_full_name": "lqd",
        "timestamp": 1622048476
    },
    {
        "content": "<p>yes, we can use unstable options</p>",
        "id": 240356990,
        "sender_full_name": "simulacrum",
        "timestamp": 1622048485
    },
    {
        "content": "<p>(one nightly)</p>",
        "id": 240356993,
        "sender_full_name": "lqd",
        "timestamp": 1622048486
    },
    {
        "content": "<p>I will try setting these options in rustfmt.toml and see how terrible the diff is</p>",
        "id": 240357061,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048517
    },
    {
        "content": "<p>the version 2 config we're using is unstable IIRC</p>",
        "id": 240357069,
        "sender_full_name": "lqd",
        "timestamp": 1622048520
    },
    {
        "content": "<p>I think I have the right options picked </p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">comment_line_length</span> <span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"n\">wrap_comments</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</code></pre></div>\n<p>It seems to want to make consecutive comment lines always wrap as close to 100 as possible and a lot of our existing comments don't wrap exactly where they should. </p>\n<div class=\"codehilite\"><pre><span></span><code> 401 files changed, 3020 insertions(+), 3121 deletions(-)\n</code></pre></div>",
        "id": 240357788,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622048844
    },
    {
        "content": "<p>Some of these diffs don't look great</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_ast/src/tokenstream.rs b/compiler/rustc_ast/src/tokenstream.rs</span>\n<span class=\"gh\">index 2d463a4588c..57931ffbb91 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_ast/src/tokenstream.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_ast/src/tokenstream.rs</span>\n<span class=\"gu\">@@ -249,8 +249,9 @@ pub fn to_tokenstream(&amp;self) -&gt; TokenStream {</span>\n                         // Check the last two trees (to account for a trailing semi)\n                         for (tree, _) in target_tokens.iter_mut().rev().take(2) {\n                             if let TokenTree::Delimited(span, delim, delim_tokens) = tree {\n<span class=\"gd\">-                                // Inner attributes are only supported on extern blocks, functions, impls,</span>\n<span class=\"gd\">-                                // and modules. All of these have their inner attributes placed at</span>\n<span class=\"gi\">+                                // Inner attributes are only supported on extern blocks, functions,</span>\n<span class=\"gi\">+                                // impls, and modules. All of these</span>\n<span class=\"gi\">+                                // have their inner attributes placed at</span>\n                                 // the beginning of the rightmost outermost braced group:\n                                 // e.g. fn foo() { #![my_attr} }\n                                 //\n</code></pre></div>",
        "id": 240358549,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622049195
    },
    {
        "content": "<p>not great</p>",
        "id": 240358634,
        "sender_full_name": "lqd",
        "timestamp": 1622049242
    },
    {
        "content": "<p>oof</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -358,24 +357,21 @@ enum ParenthesizedGenericArgs {</span>\n /// one in `&amp;T` or `Ref&lt;T&gt;`, and you have `'_` lifetimes, like `&amp;'_ T`\n /// or `Ref&lt;'_, T&gt;`. These often behave the same, but not always:\n ///\n /// - certain usages of implicit references are deprecated, like\n ///   `Ref&lt;T&gt;`, and we sometimes just give hard errors in those cases\n ///   as well.\n<span class=\"gd\">-/// - for object bounds there is a difference: `Box&lt;dyn Foo&gt;` is not</span>\n<span class=\"gd\">-///   the same as `Box&lt;dyn Foo + '_&gt;`.</span>\n<span class=\"gi\">+/// - for object bounds there is a difference: `Box&lt;dyn Foo&gt;` is not the same as `Box&lt;dyn Foo +</span>\n<span class=\"gi\">+///   '_&gt;`.</span>\n</code></pre></div>",
        "id": 240358740,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622049274
    },
    {
        "content": "<p>I think I'm just going to file a bug on rust-lang/rust and say that comment only lines are no longer being checked for length by tidy.</p>",
        "id": 240358821,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1622049317
    },
    {
        "content": "<p>I hesitate to say it, but \"not a bug\" :)</p>",
        "id": 240358978,
        "sender_full_name": "simulacrum",
        "timestamp": 1622049385
    },
    {
        "content": "<p>we'll probably want to fix those eventually, right ? but not via rustfmt evidently</p>",
        "id": 240359000,
        "sender_full_name": "lqd",
        "timestamp": 1622049398
    },
    {
        "content": "<p>words are always hard to wrap</p>",
        "id": 240359009,
        "sender_full_name": "simulacrum",
        "timestamp": 1622049401
    },
    {
        "content": "<blockquote>\n<p>oof</p>\n</blockquote>\n<p>I wonder if rustfmt should have a rule to not split a code block over multiple lines...</p>",
        "id": 240363061,
        "sender_full_name": "scottmcm",
        "timestamp": 1622051190
    }
]