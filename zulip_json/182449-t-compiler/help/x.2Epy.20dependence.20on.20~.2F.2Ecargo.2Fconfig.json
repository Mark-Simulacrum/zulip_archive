[
    {
        "content": "<p>I have finally gotten back to hacking on some rustdoc stuff, but <code>./x.py test rustdoc</code> is failing to build <code>rustc-main</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling rustc-main v0.0.0 (/home/nemo157/sources/rust/compiler/rustc)\nerror: cannot prefer dynamic linking when performing LTO\nnote: only &#39;staticlib&#39;, &#39;bin&#39;, and &#39;cdylib&#39; outputs are supported with LTO\nerror: aborting due to previous error\nerror: could not compile `rustc-main`\n\ncommand did not execute successfully: &quot;/home/nemo157/sources/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot;\n &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;20&quot; &quot;--release&quot; &quot;--features&quot; &quot; llvm&quot; &quot;--manifest-path&quot; &quot;/home/nemo157/sources/rust/compiler/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;\njson-render-diagnostics&quot;\nexpected success, got: exit code: 101\nfailed to run: /home/nemo157/sources/rust/build/bootstrap/debug/bootstrap test rustdoc\nBuild completed unsuccessfully in 0:05:19\n</code></pre></div>\n<p>I assume this is because I have globally enabled LTO in <code>~/.cargo/config</code>:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[profile.release]</span>\n<span class=\"n\">lto</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</code></pre></div>\n<p>Should the bootstrap be force disabling LTO somehow so that the build is independent of global config? Or do I need to add my own local <code>.cargo/config</code> override for this?</p>",
        "id": 223490312,
        "sender_full_name": "Nemo157",
        "timestamp": 1611224598
    },
    {
        "content": "<p>well, actually looks like the second option doesn't work, I put a local <code>.cargo/config</code> inside my rust checkout disabling LTO again, and <code>./x.py test rustdoc</code> deleted it <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 223490498,
        "sender_full_name": "Nemo157",
        "timestamp": 1611224755
    },
    {
        "content": "<p>Yep, bootstrap doesn't want you configuring cargo &lt;<a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/bootstrap.py#L997\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/bootstrap.py#L997</a>&gt;</p>",
        "id": 223490825,
        "sender_full_name": "Nemo157",
        "timestamp": 1611224986
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>CARGO_PROFILE_RELEASE_LTO=false x.py test rustdoc\n</code></pre></div>\n<p>works, and I could add this to my <code>.envrc</code>, but it'd be nice if x.py took care of it</p>",
        "id": 223491497,
        "sender_full_name": "Nemo157",
        "timestamp": 1611225419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> the problem IMO is you could be setting arbitrary cargo options, which can mess with bootstrapping in arbitrary ways. I don't think a targeted fix at LTO is particularly useful, I'd rather find a way to ignore .cargo/config altogether.</p>",
        "id": 223530589,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611245507
    },
    {
        "content": "<p>Yep, I definitely agree with that; especially if it is user-visible like <code>cargo --no-config</code> because I have to hack around it with things like <code>HOME=$(mktemp -d) cargo</code> already to have config-independent tools</p>",
        "id": 223530936,
        "sender_full_name": "Nemo157",
        "timestamp": 1611245642
    },
    {
        "content": "<p>If it's as easy as passing --no-config to cargo that definitely seems like the right approach</p>",
        "id": 223531287,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611245774
    },
    {
        "content": "<p>You'd add it to <code>fn cargo</code> in <a href=\"http://builder.rs\">builder.rs</a></p>",
        "id": 223531326,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611245791
    },
    {
        "content": "<p>well, it's not right now cause <code>cargo</code> has no flag for that <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 223531782,
        "sender_full_name": "Nemo157",
        "timestamp": 1611245991
    },
    {
        "content": "<p>but maybe this is a good enough usecase to finally add it?</p>",
        "id": 223531855,
        "sender_full_name": "Nemo157",
        "timestamp": 1611246006
    },
    {
        "content": "<p>Hmm, I wonder how much setting CARGO_HOME would mess things up</p>",
        "id": 223532170,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611246130
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223532171,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611246130
    },
    {
        "content": "<p>That would avoid reading ~/.config, right?</p>",
        "id": 223532172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611246130
    },
    {
        "content": "<p>I think it's only <code>HOME</code> that controls it, not <code>CARGO_HOME</code>, and it does work cause that's the sort of hack I do in other tools</p>",
        "id": 223532435,
        "sender_full_name": "Nemo157",
        "timestamp": 1611246193
    },
    {
        "content": "<p>but x.py is _somewhat_ independent of ~/.cargo/config already, it ignores the custom <code>rustflags</code> I have set in there</p>",
        "id": 223532672,
        "sender_full_name": "Nemo157",
        "timestamp": 1611246237
    },
    {
        "content": "<p>maybe that's just a side-effect of other stuff it's doing, not on purpose</p>",
        "id": 223532812,
        "sender_full_name": "Nemo157",
        "timestamp": 1611246256
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/rust-lang/cargo/pull/7894#issuecomment-685077878\">https://github.com/rust-lang/cargo/pull/7894#issuecomment-685077878</a>&gt; is probably the most relevant recent comment around having it supported by <code>cargo</code> properly, asking for an RFC for it</p>",
        "id": 223533703,
        "sender_full_name": "Nemo157",
        "timestamp": 1611246579
    }
]