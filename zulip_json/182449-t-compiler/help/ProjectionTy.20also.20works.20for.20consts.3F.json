[
    {
        "content": "<p>I was looking at <code>ProjectionPredicates</code>, and see that <code>println!(\"{}\", &lt;T as Foo&gt;::N)</code> where N is an associated const works fine but couldn't find a <code>ProjectionConst</code> struct, and was wondering if <code>ProjectionTy</code> is both for consts and types?</p>",
        "id": 247758140,
        "sender_full_name": "jknodt",
        "timestamp": 1627677145
    },
    {
        "content": "<p>I believe <code>ProjectionTy</code> is only used when a projection is used <em>as</em> a type</p>",
        "id": 247759277,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627677735
    },
    {
        "content": "<p>here it's just an expression</p>",
        "id": 247759295,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1627677751
    },
    {
        "content": "<p>hmmmm makes sense, I don't really see anything specific to types in ProjectionTy tho so I'm wondering if I can just repurpose it for consts whenever it uses the DefId stored on it. Or would it be better to make something else for that?</p>",
        "id": 247759496,
        "sender_full_name": "jknodt",
        "timestamp": 1627677862
    },
    {
        "content": "<p>(the end goal is to permit <code>T: Trait&lt;AssocConst = 3&gt;</code>)</p>",
        "id": 247759600,
        "sender_full_name": "jknodt",
        "timestamp": 1627677944
    }
]