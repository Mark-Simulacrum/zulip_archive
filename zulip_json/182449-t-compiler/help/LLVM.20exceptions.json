[
    {
        "content": "<p>Is there any writeup of how we use LLVM's exception system in the implementation of panics?</p>",
        "id": 227996522,
        "sender_full_name": "enterprisey",
        "timestamp": 1614374687
    },
    {
        "content": "<p><em>Do</em> we use LLVM's exception system? IIUC, panics are implemented entirely in <code>std</code> and <code>core</code>.</p>",
        "id": 227998720,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614375614
    },
    {
        "content": "<p>Looking at the LLVM IR, we seem to use <code>resume</code> and personality functions; I'm absolutely no expert on the system, but I assume it's used a little</p>",
        "id": 228002668,
        "sender_full_name": "enterprisey",
        "timestamp": 1614377212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/LLVM.20exceptions/near/227998720\">said</a>:</p>\n<blockquote>\n<p><em>Do</em> we use LLVM's exception system? IIUC, panics are implemented entirely in <code>std</code> and <code>core</code>.</p>\n</blockquote>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/panic-implementation.html#step-2-the-panic-runtime\">https://rustc-dev-guide.rust-lang.org/panic-implementation.html#step-2-the-panic-runtime</a> says we use libunwind, I'd assume that's the same as the landing pads from llvm: <a href=\"https://github.com/rust-lang/rustc-dev-guide/issues/707\">https://github.com/rust-lang/rustc-dev-guide/issues/707</a></p>",
        "id": 228005876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614378692
    },
    {
        "content": "<p>LLVM <code>invoke</code> is important too: <a href=\"https://llvm.org/docs/LangRef.html#invoke-instruction\">https://llvm.org/docs/LangRef.html#invoke-instruction</a></p>",
        "id": 228015290,
        "sender_full_name": "cuviper",
        "timestamp": 1614383971
    },
    {
        "content": "<p>Right, there's a contract between LLVM codegen (invoked via <code>invoke</code> (heh), <code>catchpad</code>, <code>resume</code>, and similar concepts) and the runtime provided by Rust in the form of the personailty function and a way to invoke unwinding</p>",
        "id": 228015444,
        "sender_full_name": "nagisa",
        "timestamp": 1614384059
    },
    {
        "content": "<p>I'm not sure there's a good writeup, but if there's one for e.g. clang/c++ things described there would be mostly portable to Rust.</p>",
        "id": 228015517,
        "sender_full_name": "nagisa",
        "timestamp": 1614384115
    },
    {
        "content": "<p>Worth noting that how unwinding operates is platform specific, implementation is very different on Windows compared to e.g. Linux.</p>",
        "id": 228015606,
        "sender_full_name": "nagisa",
        "timestamp": 1614384164
    }
]