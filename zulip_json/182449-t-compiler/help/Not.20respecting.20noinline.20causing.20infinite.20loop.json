[
    {
        "content": "<p>Kind of a long story, but i recently found an insanely specific bug in CUDA that causes a segfault only with very specific control flow which is created by panic machinery. I thought i could maybe temp-fix this by not respecting <code>InlineAttr::Never</code>, however that seems to cause compilation to just loop forever (or it takes so absurdly long that its funny). Is there a potential reason for this? Does not respecting inline(never) make rustc sad?</p>",
        "id": 272759705,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645504503
    },
    {
        "content": "<p>Oh it finished eventually... in 16 minutes on an i9 10850k, and it made a 56mb ptx file... huh</p>",
        "id": 272761969,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645507723
    },
    {
        "content": "<p>Not respecting inline(never) would posibly inline the entire panic machinery into every panic call site.</p>",
        "id": 272761999,
        "sender_full_name": "bjorn3",
        "timestamp": 1645507796
    },
    {
        "content": "<p>yeah thats what im thinking</p>",
        "id": 272762040,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645507810
    },
    {
        "content": "<p>i think its also runaway inlining</p>",
        "id": 272762045,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645507816
    },
    {
        "content": "<p>im using a very old version of LLVM so that seems likely</p>",
        "id": 272762049,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645507829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Not.20respecting.20noinline.20causing.20infinite.20loop/near/272762049\">said</a>:</p>\n<blockquote>\n<p>im using a very old version of LLVM so that seems likely</p>\n</blockquote>\n<p>how old is very old</p>",
        "id": 272762426,
        "sender_full_name": "Jubilee",
        "timestamp": 1645508402
    },
    {
        "content": "<p>LLVM 7 :pain:</p>",
        "id": 272762437,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645508414
    },
    {
        "content": "<p>...uh.</p>",
        "id": 272762473,
        "sender_full_name": "Jubilee",
        "timestamp": 1645508507
    },
    {
        "content": "<p>...We don't support that one.</p>",
        "id": 272762477,
        "sender_full_name": "Jubilee",
        "timestamp": 1645508516
    },
    {
        "content": "<p>yeahhhhh... blame cuda</p>",
        "id": 272762479,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645508519
    },
    {
        "content": "<p>You are going to have a slight problem if your backend depends on versions of LLVM we don't support.</p>",
        "id": 272762529,
        "sender_full_name": "Jubilee",
        "timestamp": 1645508549
    },
    {
        "content": "<p>It has worked so far<span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 272762533,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645508561
    },
    {
        "content": "<p>i will eventually switch to modern llvm if the LLVM PTX backend works, but its a bit of work</p>",
        "id": 272762548,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645508590
    },
    {
        "content": "<p>speaking of, i should probably see if there is a way to directly hook into rustc's LLVM</p>",
        "id": 272762609,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645508687
    },
    {
        "content": "<p>if not i can probably just <del>steal</del> borrow it from <code>download-ci-llvm</code></p>",
        "id": 272762627,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645508718
    },
    {
        "content": "<p>But then i don't get rustc's LLVM shim which is kind of the point of this</p>",
        "id": 272762724,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1645508860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Not.20respecting.20noinline.20causing.20infinite.20loop/near/272762533\">said</a>:</p>\n<blockquote>\n<p>It has worked so far™</p>\n</blockquote>\n<p>Note that, for example, &lt;<a href=\"https://llvm.org/docs/OpaquePointers.html\">https://llvm.org/docs/OpaquePointers.html</a>&gt; is coming soon™ which will be a major change that will probably pervasively break compat with old LLVM, in a few releases.</p>",
        "id": 272766197,
        "sender_full_name": "scottmcm",
        "timestamp": 1645512825
    }
]