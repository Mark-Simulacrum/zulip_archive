[
    {
        "content": "<p>Is there a way to either:</p>\n<ul>\n<li>See if an <code>Instance</code> contains an attr that has been expanded away because it is a proc macro? if i use <code>tcx.get_attrs(def)</code> the attr isnt there because it was expanded, and i dont think i can go back to the raw ast node.</li>\n<li>Register an internal attribute without forcing the user to use register_attr, because it is a bit clunky and kind of a hack.</li>\n</ul>",
        "id": 252871955,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631323366
    },
    {
        "content": "<ol>\n<li>I don't think expanded attributes persist in any form.</li>\n<li>No, register_attr was introduced specifically for this purpose. It has the advantage over letting custom drivers register attributes in that the custom attributes don't cause an error when you don't run your tool.</li>\n</ol>",
        "id": 252923371,
        "sender_full_name": "bjorn3",
        "timestamp": 1631381000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> im just not sure why register_attr is required to be put in the user's crate even if it is only for internal usage, it just causes unneeded clunkyness IMO.</p>",
        "id": 252924295,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631382026
    },
    {
        "content": "<p>Yeah, it did be nice if it could also be put in a dependent crate, but IMHO in that case it should be namespaced to said crate.</p>",
        "id": 252924414,
        "sender_full_name": "bjorn3",
        "timestamp": 1631382191
    },
    {
        "content": "<p>Yeah, i have a <code>#[kernel]</code> attr that does actual things as a proc macro, but i need to keep an attribute that the codegen can see</p>",
        "id": 252924526,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631382307
    },
    {
        "content": "<p>So for now, users would need to add cfg'd attrs to the top level manually to register an <code>nvvm_internal</code> attr, but i think its very clunky and ugly for something that should be handled by rustc or another crate</p>",
        "id": 252924626,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631382393
    }
]