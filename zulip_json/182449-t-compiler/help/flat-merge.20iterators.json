[
    {
        "content": "<p>Hi,</p>\n<p>How can I do the equivilent of C#, where (in terms of ownership equivivilance) the function consumes the enumerable and returns a new expanded enumerable</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;</span> <span class=\"n\">Merge</span><span class=\"p\">(</span><span class=\"k\">this</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;</span> <span class=\"k\">base</span><span class=\"p\">,</span> <span class=\"n\">Func</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;&gt;</span> <span class=\"n\">expand</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"k\">base</span><span class=\"p\">){</span>\n    <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)){</span>\n       <span class=\"k\">yield</span> <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I just used c# generator syntax b/c it describes the result, but I'm sure that there is a common iterator extension that supports this.</p>",
        "id": 222214481,
        "sender_full_name": "akraines",
        "timestamp": 1610271500
    },
    {
        "content": "<p>are you looking for <code>flat_map</code>?</p>",
        "id": 222214558,
        "sender_full_name": "lcnr",
        "timestamp": 1610271659
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.flat_map\">https://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.flat_map</a></p>",
        "id": 222214560,
        "sender_full_name": "lcnr",
        "timestamp": 1610271663
    },
    {
        "content": "<p>If you're looking for <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.selectmany?view=net-5.0#System_Linq_Enumerable_SelectMany__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___1___\"><code>Enumerable.SelectMany</code></a>, that's <code>Iterator::flat_map</code>.</p>",
        "id": 222214811,
        "sender_full_name": "scottmcm",
        "timestamp": 1610272164
    },
    {
        "content": "<p>Yes, you are right, that is the same as flat_map. However I think the issue I was having was because I wanted to conditionally apply the flatmap.<br>\nMy code was something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">generate_values</span><span class=\"p\">(</span><span class=\"n\">arr1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arr2</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"c1\">//This is a simplified version. I was doing this in a loop, to recursively update values. ie. arr2 was actually a Vec&lt;Vec&lt;_&gt;&gt; and I was applying it for each inner vec in arr2.</span>\n<span class=\"c1\">//But I believe if the simple case works then the recursive case wil work just as well.</span>\n<span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">v</span><span class=\"o\">|</span><span class=\"p\">{</span><span class=\"n\">generate_complex_values</span><span class=\"p\">(</span><span class=\"n\">arr2</span><span class=\"p\">)});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">do_something_with_final_version_of_values</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, it gave me errors about the type of values. (since Map struct != FlatMap struct)</p>",
        "id": 222215659,
        "sender_full_name": "akraines",
        "timestamp": 1610273785
    },
    {
        "content": "<p>yeah, that's difficult cause each use of <code>flat_map</code> creates a new type as you said</p>",
        "id": 222216074,
        "sender_full_name": "lcnr",
        "timestamp": 1610274674
    },
    {
        "content": "<p>you can either use something like <code>Box&lt;dyn Iterator&gt;</code> to get around this</p>",
        "id": 222216085,
        "sender_full_name": "lcnr",
        "timestamp": 1610274713
    },
    {
        "content": "<p>or change it to <code>values = values.flat_map(|v| generate_complex_values(arr2)).collect();</code> and eagerly create a new collection every time</p>",
        "id": 222216141,
        "sender_full_name": "lcnr",
        "timestamp": 1610274759
    },
    {
        "content": "<p>I think a Box&lt;dyn Iterator&gt; would work. I'm just trying to avoid the unnexcessary collect()  in the middle, the extra inderirection is insignificant. <br>\nSo how to I make it into a Box&lt;dyn Iterator&gt;? Just wrap generate_values in a Box?</p>",
        "id": 222217746,
        "sender_full_name": "akraines",
        "timestamp": 1610277468
    },
    {
        "content": "<p><code>Box::new(generate_values)</code> or if it doesn't automatically cast to a trait object <code>Box::new(generate_values) as Box&lt;dyn Iterator&lt;Item = _&gt;&gt;</code>.</p>",
        "id": 222217793,
        "sender_full_name": "bjorn3",
        "timestamp": 1610277530
    },
    {
        "content": "<p>i don't expect the collect in the middle to be that costly tbh</p>",
        "id": 222217983,
        "sender_full_name": "lcnr",
        "timestamp": 1610277865
    },
    {
        "content": "<p>but would have to benchmark to know what's more efficient</p>",
        "id": 222217993,
        "sender_full_name": "lcnr",
        "timestamp": 1610277896
    },
    {
        "content": "<p>You could always write your own Iterator impl, I think that would let you avoid the collect</p>",
        "id": 222219797,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610281153
    },
    {
        "content": "<p>I followed up in the general section <a href=\"#narrow/stream/122651-general/topic/flat-merge.20iterators\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/flat-merge.20iterators</a> since I realised that this is t-compiler.<br>\nThank you very much for your help.</p>",
        "id": 222241520,
        "sender_full_name": "akraines",
        "timestamp": 1610311961
    }
]