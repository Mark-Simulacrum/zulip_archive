[
    {
        "content": "<p>Hi, I would like to achieve the following:<br>\nrust code -&gt; Generating LLVM IR with the emit flag -&gt; Running custom pass with opt -&gt; final executable  <br>\nMay I know how to generate the final executable? Or is it even possible? Or is there any other way to pass in my custom pass to rustc? thanks</p>",
        "id": 255712509,
        "sender_full_name": "Gladys",
        "timestamp": 1633078942
    },
    {
        "content": "<p><code>-Cpasses=...</code> allows specifying passes to run.</p>",
        "id": 255716467,
        "sender_full_name": "nagisa",
        "timestamp": 1633081101
    },
    {
        "content": "<p>The -Cpasses can pass in custom .so? Thanks</p>",
        "id": 255718701,
        "sender_full_name": "Gladys",
        "timestamp": 1633082206
    },
    {
        "content": "<p>Iâ€¦  am not sure about a custom pass .so but people are experimenting with automated differentiation and whatnot, so it must be possible.</p>",
        "id": 255723190,
        "sender_full_name": "nagisa",
        "timestamp": 1633084676
    },
    {
        "content": "<p>I think you need -Zllvm-plugins to load external plugins. Be aware though that the rustc for some targets doesn't link LLVM dynamically as required for external plugins though. We don't offer any guarantees about which targets and which don't dynamically link against LLVM and which LLVM version is used, unless you build rustc against a specific LLVM version yourself.</p>",
        "id": 255725806,
        "sender_full_name": "bjorn3",
        "timestamp": 1633086136
    },
    {
        "content": "<p>Hi guys, I am new to rust, also wanted to pass in a custom llvm pass to rustc. I have tried -Zllvm-plugins to load my .so and also tried -Cpasses to indicate my pass name; which result in unknown pass. </p>\n<p>I have taken a look at the rustc code for the -Zllvm-plugins, but it seems like it just load and do nothing. Please advise if i am wrong or anyone have idea how to pass in the my custom .so and how to indicate the pass name in my custom .so. Thanks in advance.</p>\n<p>compiler/rustc_codegen_llvm/src/llvm_util.rs</p>\n<div class=\"codehilite\"><pre><span></span><code>    for plugin in &amp;sess.opts.debugging_opts.llvm_plugins {\n        let path = Path::new(plugin);\n        let res = DynamicLibrary::open(path);\n        match res {\n            Ok(_) =&gt; debug!(&quot;LLVM plugin loaded succesfully {} ({})&quot;, path.display(), plugin),\n            Err(e) =&gt; bug!(&quot;couldn&#39;t load plugin: {}&quot;, e),\n        }\n        mem::forget(res);\n    }\n</code></pre></div>",
        "id": 258474101,
        "sender_full_name": "okaca",
        "timestamp": 1634780674
    },
    {
        "content": "<p>Did you register the plugin?</p>",
        "id": 258478718,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634784235
    },
    {
        "content": "<p>Loading a library would execute all ctors in init section</p>",
        "id": 258478834,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634784317
    },
    {
        "content": "<p>May  I know how to register the plugin via rustc?</p>",
        "id": 258498509,
        "sender_full_name": "okaca",
        "timestamp": 1634800744
    },
    {
        "content": "<p>opps, i think u referring inside my  custom pass? I am using the llvm pass example from <a href=\"https://llvm.org/docs/WritingAnLLVMPass.html\">https://llvm.org/docs/WritingAnLLVMPass.html</a> which did register the pass</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &quot;llvm/Pass.h&quot;\n#include &quot;llvm/IR/Function.h&quot;\n#include &quot;llvm/Support/raw_ostream.h&quot;\n\n#include &quot;llvm/IR/LegacyPassManager.h&quot;\n#include &quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;\n\nusing namespace llvm;\n\nnamespace {\nstruct Hello : public FunctionPass {\n  static char ID;\n  Hello() : FunctionPass(ID) {}\n\n  bool runOnFunction(Function &amp;F) override {\n    errs() &lt;&lt; &quot;Hello: &quot;;\n    errs().write_escaped(F.getName()) &lt;&lt; &#39;\\n&#39;;\n    return false;\n  }\n}; // end of struct Hello\n}  // end of anonymous namespace\n\nchar Hello::ID = 0;\nstatic RegisterPass&lt;Hello&gt; X(&quot;hello&quot;, &quot;Hello World Pass&quot;,\n                             false /* Only looks at CFG */,\n                             false /* Analysis Pass */);\n\nstatic RegisterStandardPasses Y(\n    PassManagerBuilder::EP_EarlyAsPossible,\n    [](const PassManagerBuilder &amp;Builder,\n       legacy::PassManagerBase &amp;PM) { PM.add(new Hello()); });\n</code></pre></div>",
        "id": 258505073,
        "sender_full_name": "okaca",
        "timestamp": 1634804168
    },
    {
        "content": "<p>I am using the llvm example first as I would like to ensure the example work first before i invest my time to write my custom pass.</p>",
        "id": 258505201,
        "sender_full_name": "okaca",
        "timestamp": 1634804244
    },
    {
        "content": "<p>You are using the legacy pass manager. Rustc very recently switched to the new pass manager.</p>",
        "id": 258512842,
        "sender_full_name": "bjorn3",
        "timestamp": 1634807999
    },
    {
        "content": "<p>hi, do you mean my command is correct but the rustc version is outdated? </p>\n<p>my rustc version is: rustc --version<br>\nrustc 1.56.0-nightly (29ef6cf16 2021-08-31)</p>\n<p>my command is:<br>\nrustc --crate-name test --edition=2018 test/src/bin/test.rs  --crate-type bin -Zllvm-plugins=/pathToMyCustom.so -Cpasses=\"hello\"</p>",
        "id": 258641669,
        "sender_full_name": "okaca",
        "timestamp": 1634864494
    },
    {
        "content": "<p><a href=\"https://llvm.org/docs/NewPassManager.html\">https://llvm.org/docs/NewPassManager.html</a></p>",
        "id": 258642286,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634864920
    },
    {
        "content": "<p>thanks</p>",
        "id": 258643026,
        "sender_full_name": "okaca",
        "timestamp": 1634865436
    }
]