[
    {
        "content": "<p>Hi, </p>\n<p>Anyone knows why the type checker gives a type error for k?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">k</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220010569,
        "sender_full_name": "kev",
        "timestamp": 1608052229
    },
    {
        "content": "<p>What should the type of <code>k</code> be? <code>Vec&lt;i32&gt;</code> or some other type with a <code>push</code> method?</p>",
        "id": 220010874,
        "sender_full_name": "bjorn3",
        "timestamp": 1608052367
    },
    {
        "content": "<p>Actually <code>Vec&lt;&amp;i32&gt;</code> in this case</p>",
        "id": 220010925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608052388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/type.20inference.20algorithm/near/220010874\">said</a>:</p>\n<blockquote>\n<p>What should the type of <code>k</code> be? <code>Vec&lt;i32&gt;</code> or some other type with a <code>push</code> method?</p>\n</blockquote>\n<p>What other type can it be?</p>",
        "id": 220010960,
        "sender_full_name": "kev",
        "timestamp": 1608052408
    },
    {
        "content": "<p>anything implementing <code>FromIterator&lt;Item=&amp;i32&gt;</code></p>",
        "id": 220010985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608052424
    },
    {
        "content": "<p>like a <code>HashSet</code> I guess</p>",
        "id": 220011064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608052444
    },
    {
        "content": "<p>well that doens't have a <code>push</code> method</p>",
        "id": 220011092,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608052459
    },
    {
        "content": "<p><code>BinaryHeap</code> does have a <code>push</code> method.</p>",
        "id": 220011119,
        "sender_full_name": "bjorn3",
        "timestamp": 1608052475
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.push\">https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.push</a></p>",
        "id": 220011149,
        "sender_full_name": "bjorn3",
        "timestamp": 1608052489
    },
    {
        "content": "<p>But this is an intentional limitation – calls to inherent methods stop the type checker in its tracks if the receiver hasn't been inferred yet</p>",
        "id": 220011152,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608052491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/type.20inference.20algorithm/near/220011152\">said</a>:</p>\n<blockquote>\n<p>But this is an intentional limitation – calls to inherent methods stop the type checker in its tracks if the receiver hasn't been inferred yet</p>\n</blockquote>\n<p>So even if there were enough implicit constraints to determine the actual type, ie methods that are only on vec, it would still err? without the explicit type annotation</p>",
        "id": 220011261,
        "sender_full_name": "kev",
        "timestamp": 1608052550
    },
    {
        "content": "<p>Only if there was exactly one applicable <code>FromIterator</code> impl would it be allowed I think.</p>",
        "id": 220011390,
        "sender_full_name": "bjorn3",
        "timestamp": 1608052593
    },
    {
        "content": "<p>Yeah, inherent methods do not drive inference at all, only trait methods</p>",
        "id": 220011472,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608052630
    },
    {
        "content": "<p>Oh got it, thank you</p>",
        "id": 220011684,
        "sender_full_name": "kev",
        "timestamp": 1608052715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I don't think trait methods drive inference that way either? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c7ed95825a7b79af8c2517f8f9556279\">e.g.</a></p>",
        "id": 220012056,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1608052890
    },
    {
        "content": "<p>hmm, yeah</p>",
        "id": 220012696,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608053157
    },
    {
        "content": "<p>The rules here are complicated, it seems. Having only a single impl for a trait <em>can</em> drive inference forwards in some situations.</p>",
        "id": 220012814,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608053185
    },
    {
        "content": "<p>The following also fails (just added a bar function to code posted by Florian):</p>\n<div class=\"codehilite\"><pre><span></span><code>trait Foo {\n    fn foo(&amp;self) {}\n}\n\nstruct S;\nimpl Default for S {\n    fn default() -&gt; Self { S }\n}\n\nimpl Foo for S { }\n\nfn main() {\n    let s = Default::default();\n    s.foo();\n    bar(&amp;s);\n}\n\nfn bar(_s : &amp;S) {}\n</code></pre></div>",
        "id": 220013283,
        "sender_full_name": "kev",
        "timestamp": 1608053395
    },
    {
        "content": "<p>But if bar is placed before s.foo() it passes</p>",
        "id": 220013363,
        "sender_full_name": "kev",
        "timestamp": 1608053411
    },
    {
        "content": "<p>I would have thought that it would have globally inferred the type from it's usage in bar, regardless of the order</p>",
        "id": 220013414,
        "sender_full_name": "kev",
        "timestamp": 1608053443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/type.20inference.20algorithm/near/220011152\">said</a>:</p>\n<blockquote>\n<p>But this is an intentional limitation – calls to inherent methods stop the type checker in its tracks if the receiver hasn't been inferred yet</p>\n</blockquote>\n<p>That's what I was trying to say with this ^</p>",
        "id": 220013644,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608053527
    },
    {
        "content": "<p>Rust type checking is not (fully) constraint-based, so ordering matters</p>",
        "id": 220013688,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608053549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/type.20inference.20algorithm/near/220013644\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/type.20inference.20algorithm/near/220011152\">said</a>:</p>\n<blockquote>\n<p>But this is an intentional limitation – calls to inherent methods stop the type checker in its tracks if the receiver hasn't been inferred yet</p>\n</blockquote>\n<p>That's what I was trying to say with this ^</p>\n</blockquote>\n<p>Is it intentional for readability?</p>",
        "id": 220013763,
        "sender_full_name": "kev",
        "timestamp": 1608053586
    },
    {
        "content": "<p>no</p>",
        "id": 220014401,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608053850
    },
    {
        "content": "<p>Hmm that's the only reason I can think of, so when reading code, the reader can more or less know what the type of <code>s</code> is in s.foo(). Instead of needing to read past the method call</p>",
        "id": 220015172,
        "sender_full_name": "kev",
        "timestamp": 1608054186
    },
    {
        "content": "<p>well inference gets a lot more complicated if you don't do something like this, since you get cycles. Even if it can be done, I think you could make some <em>very</em> surprising non-local behaviors where different types get chosen in one function depending on whether another unrelated and unused function exists or not</p>",
        "id": 220018248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608055506
    },
    {
        "content": "<p>It starts to smell like C++ operator overloading</p>",
        "id": 220018345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608055558
    }
]