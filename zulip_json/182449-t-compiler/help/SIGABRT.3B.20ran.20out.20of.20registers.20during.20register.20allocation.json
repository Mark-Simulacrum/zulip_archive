[
    {
        "content": "<p>Does anyone have hypotheses for what might be going on with the test failure in <a href=\"https://github.com/rust-lang/rust/pull/81825\">https://github.com/rust-lang/rust/pull/81825</a> ?</p>",
        "id": 232114468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616875241
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>---- [ui] ui/abi/stack-probes-lto.rs stdout ----\n\nerror: test compilation failed although it shouldn't!\nstatus: signal: 6 (core dumped)\ncommand: \"/checkout/obj/build/i686-unknown-linux-gnu/stage2/bin/rustc\" \"/checkout/src/test/ui/abi/stack-probes-lto.rs\" \"-Zthreads=1\" \"--target=i686-unknown-linux-gnu\" \"--error-format\" \"json\" \"-Zui-testing\" \"-Zdeduplicate-diagnostics=no\" \"-Zemit-future-incompat-report\" \"-o\" \"/checkout/obj/build/i686-unknown-linux-gnu/test/ui/abi/stack-probes-lto/a\" \"-Crpath\" \"-Cdebuginfo=0\" \"-Zunstable-options\" \"-Lnative=/checkout/obj/build/i686-unknown-linux-gnu/native/rust-test-helpers\" \"-C\" \"lto\" \"-L\" \"/checkout/obj/build/i686-unknown-linux-gnu/test/ui/abi/stack-probes-lto/auxiliary\"\n------------------------------------------\n\n------------------------------------------\nstderr:\nstderr:\n------------------------------------------\nrustc: /checkout/src/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:883: void {anonymous}::RegAllocFast::defineVirtReg(llvm::MachineInstr&amp;, unsigned int, llvm::Register, bool): Assertion `PhysReg != 0 &amp;&amp; \"Register not assigned\"' failed.\nerror: ran out of registers during register allocation\n\n------------------------------------------\n</code></pre></div>",
        "id": 232114501,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616875258
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>---- [ui] ui/panic-runtime/lto-unwind.rs stdout ----\n\nerror: test compilation failed although it shouldn't!\nstatus: signal: 6 (core dumped)\ncommand: \"/checkout/obj/build/i686-unknown-linux-gnu/stage2/bin/rustc\" \"/checkout/src/test/ui/panic-runtime/lto-unwind.rs\" \"-Zthreads=1\" \"--target=i686-unknown-linux-gnu\" \"--error-format\" \"json\" \"-Zui-testing\" \"-Zdeduplicate-diagnostics=no\" \"-Zemit-future-incompat-report\" \"-o\" \"/checkout/obj/build/i686-unknown-linux-gnu/test/ui/panic-runtime/lto-unwind/a\" \"-Crpath\" \"-Cdebuginfo=0\" \"-Zunstable-options\" \"-Lnative=/checkout/obj/build/i686-unknown-linux-gnu/native/rust-test-helpers\" \"-C\" \"lto\" \"-C\" \"panic=unwind\" \"-L\" \"/checkout/obj/build/i686-unknown-linux-gnu/test/ui/panic-runtime/lto-unwind/auxiliary\"\n------------------------------------------\n\n------------------------------------------\nstderr:\nstderr:\n------------------------------------------\nrustc: /checkout/src/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:883: void {anonymous}::RegAllocFast::defineVirtReg(llvm::MachineInstr&amp;, unsigned int, llvm::Register, bool): Assertion `PhysReg != 0 &amp;&amp; \"Register not assigned\"' failed.\n------------------------------------------\n</code></pre></div>",
        "id": 232114525,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616875271
    },
    {
        "content": "<p>I have <em>no</em> idea how that might be related to the PR.</p>",
        "id": 232114603,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616875332
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"302700\">@Dominik Stolz</span></p>",
        "id": 232114613,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616875339
    },
    {
        "content": "<p>seems like an LLVM bug? I would expect it to spill to the stack if it doesn't have enough registers</p>",
        "id": 232115047,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616875744
    },
    {
        "content": "<p>yeah, that PR doesn't touch compiler/ at all so it's either a bug in rustc or llvm</p>",
        "id": 232115065,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616875772
    },
    {
        "content": "<p>not necessarily, you can write a code that is valid but requires more registers than available.</p>",
        "id": 232115147,
        "sender_full_name": "nagisa",
        "timestamp": 1616875835
    },
    {
        "content": "<p>inline assembly allocating too many generic registers being a trivial way to trigger this kind of scenario.</p>",
        "id": 232115162,
        "sender_full_name": "nagisa",
        "timestamp": 1616875856
    },
    {
        "content": "<p>Needs minimization to tell for sure.</p>",
        "id": 232115174,
        "sender_full_name": "nagisa",
        "timestamp": 1616875870
    },
    {
        "content": "<p>If this were a six-argument syscall I'd be worried about that, but this is a two-argument syscall.</p>",
        "id": 232124264,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616885859
    },
    {
        "content": "<p>So yeah, trying to reduce it seems like a good call.</p>",
        "id": 232124268,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616885871
    },
    {
        "content": "<p>The <code>syscall!</code> macro doesn't actually codegen into a function that uses <code>asm!</code> to directly call a syscall. Instead it first tries to call a (weak) function with the same name to allow for <code>LD_PRELOAD</code> interception and if it isn't found it uses the <code>syscall</code> libc function to perform the syscall without wrapper. Because it is part of libc, LLVM never sees any (inline) assembly.</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/fd2df74902fa98bcb71f85fd548c3eb399e6a96a/library/std/src/sys/unix/weak.rs#L121-L143\">https://github.com/rust-lang/rust/blob/fd2df74902fa98bcb71f85fd548c3eb399e6a96a/library/std/src/sys/unix/weak.rs#L121-L143</a></p>",
        "id": 232150008,
        "sender_full_name": "bjorn3",
        "timestamp": 1616917403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Ah, good to know. That makes it even more mystifying that this change could lead to a register allocation failure.</p>",
        "id": 232179993,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1616951857
    }
]