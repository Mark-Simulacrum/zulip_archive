[
    {
        "content": "<p>I'm using -Zself-profile with query keys enabled and it looks like we generate e.g. core::ops::bit::{{impl}}[1000] for defids here.</p>\n<p>I have two questions:</p>\n<ul>\n<li>Is that index stable across compilations? What needs to change inside the crate to alter it, if so? (e.g., does adding any impl change the indexing or just in that module...?)</li>\n<li>Can I get a more helpful output than the index?</li>\n</ul>",
        "id": 254876116,
        "sender_full_name": "simulacrum",
        "timestamp": 1632609502
    },
    {
        "content": "<p>Hm, ok, digging into it it looks like that index comes from <a href=\"https://github.com/rust-lang/rust/blob/9620f3a84b079decfdc2e557be007580b097fe43/compiler/rustc_hir/src/definitions.rs#L166\">https://github.com/rust-lang/rust/blob/9620f3a84b079decfdc2e557be007580b097fe43/compiler/rustc_hir/src/definitions.rs#L166</a></p>",
        "id": 254876265,
        "sender_full_name": "simulacrum",
        "timestamp": 1632609671
    },
    {
        "content": "<p>which is set <a href=\"https://github.com/rust-lang/rust/blob/9620f3a84b079decfdc2e557be007580b097fe43/compiler/rustc_resolve/src/lib.rs#L1213-L1218\">https://github.com/rust-lang/rust/blob/9620f3a84b079decfdc2e557be007580b097fe43/compiler/rustc_resolve/src/lib.rs#L1213-L1218</a></p>",
        "id": 254876374,
        "sender_full_name": "simulacrum",
        "timestamp": 1632609784
    },
    {
        "content": "<p>not sure what that means for stabiliity</p>",
        "id": 254876388,
        "sender_full_name": "simulacrum",
        "timestamp": 1632609797
    },
    {
        "content": "<p>It seems like the parent + defpathdata need to match for the index to incremetn</p>",
        "id": 254876395,
        "sender_full_name": "simulacrum",
        "timestamp": 1632609812
    },
    {
        "content": "<p>The index is not stable across compilations, it is sequentially assigned by traversing the AST, in rustc_resolve::def_collector.</p>",
        "id": 254876587,
        "sender_full_name": "cjgillot",
        "timestamp": 1632609963
    },
    {
        "content": "<p>However, the DefPathHash is stable, and is used to translate indices from one compilation to another.</p>",
        "id": 254876618,
        "sender_full_name": "cjgillot",
        "timestamp": 1632610006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/defpath.20printing/near/254876587\">said</a>:</p>\n<blockquote>\n<p>The index is not stable across compilations, it is sequentially assigned by traversing the AST, in rustc_resolve::def_collector.</p>\n</blockquote>\n<p>Hm, shouldn't this be stable on equivalent input?</p>",
        "id": 254876703,
        "sender_full_name": "simulacrum",
        "timestamp": 1632610098
    },
    {
        "content": "<p>FWIW I'm trying to figure out what's causing the extra specializes queries here - <a href=\"https://perf.rust-lang.org/detailed-query.html?commit=67365d64bcdfeae1334bf2ff49587c27d1c973f0&amp;base_commit=30278d3cf92b581550933546370443a5d5700002&amp;benchmark=ctfe-stress-4-check&amp;run_name=full\">https://perf.rust-lang.org/detailed-query.html?commit=67365d64bcdfeae1334bf2ff49587c27d1c973f0&amp;base_commit=30278d3cf92b581550933546370443a5d5700002&amp;benchmark=ctfe-stress-4-check&amp;run_name=full</a></p>",
        "id": 254876720,
        "sender_full_name": "simulacrum",
        "timestamp": 1632610129
    },
    {
        "content": "<p>The order is deterministic, so it should not change as long as no definition is added anywhere in the crate.</p>",
        "id": 254876723,
        "sender_full_name": "cjgillot",
        "timestamp": 1632610132
    },
    {
        "content": "<p>That includes lifetimes and generic parameters.</p>",
        "id": 254876739,
        "sender_full_name": "cjgillot",
        "timestamp": 1632610146
    },
    {
        "content": "<p>Aha</p>",
        "id": 254876749,
        "sender_full_name": "simulacrum",
        "timestamp": 1632610160
    },
    {
        "content": "<p>so it's crate-dependent?</p>",
        "id": 254876754,
        "sender_full_name": "simulacrum",
        "timestamp": 1632610167
    },
    {
        "content": "<p>then it makes some sense, I suppose, that <a href=\"https://github.com/rust-lang/rust/pull/89139/\">https://github.com/rust-lang/rust/pull/89139/</a> made the core::ops::bit impls differ</p>",
        "id": 254876781,
        "sender_full_name": "simulacrum",
        "timestamp": 1632610198
    },
    {
        "content": "<p>Yes, a DefId is a compound of a CrateNum and a definition index inside that crate.</p>",
        "id": 254876862,
        "sender_full_name": "cjgillot",
        "timestamp": 1632610256
    },
    {
        "content": "<p>I suppose you probably don't have a good sense of why that would cause more specializes queries, though, on unrelated(?) impls</p>",
        "id": 254876934,
        "sender_full_name": "simulacrum",
        "timestamp": 1632610332
    },
    {
        "content": "<p>Sorry, I don't kown anything about specialization</p>",
        "id": 254878235,
        "sender_full_name": "cjgillot",
        "timestamp": 1632611657
    },
    {
        "content": "<p>are these new queries from coherence checking ? if thatâ€™s the case, maybe comparing the specialization graph for libcore before/after the PR could help pinpoint the cause ?</p>",
        "id": 254908189,
        "sender_full_name": "lqd",
        "timestamp": 1632640938
    }
]