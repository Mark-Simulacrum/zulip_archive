[
    {
        "content": "<p>As I understand it rustc ordinarily only codegens an allocator shim for staticlib and cdylib crates. I'd like to add a -Z flag that tells rustc to codegen an allocator shim even for an rlib or dylib crate, but I'm having some trouble getting it working. The reason I want this is basically that something like this will ultimately be part of a solution to <a href=\"https://github.com/rust-lang/rust/issues/73632\">issue #73632</a> - \"Formal support for linking rlibs using a non-Rust linker\".</p>\n<p>My first question is: should I create an RFC or FCP or whatever for this before I get in too deep? The docs I read implied this is small enough to get by with just a review but I don't know if I'm mucking around where I shouldn't be.</p>\n<p>My second question is: I found how to <a href=\"https://github.com/rust-lang/rust/blob/56cd04af5c389b6ab676ba16f59d9f70bc465090/compiler/rustc_session/src/options.rs#L998\">add a new <code>CodegenOptions</code> (<code>-C</code>) flag</a> but not how to add a <code>-Z</code> flag or gate a <code>-C</code> flag on <code>-Z unstable-features</code>. Is there a good example PR where this was done?</p>\n<p>My third question is more in the weeds. I'm checking my config in <a href=\"https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler/rustc_metadata/src/creader.rs#L786-L856\"><code>inject_allocator_crate()</code> from <code>rustc_metadata/src/creader.rs</code></a> and at the end of the function the <code>allocator_kind</code> is set to <code>Default</code> like I want. I added some logs to <a href=\"https://github.com/rust-lang/rust/blob/4e82f35492ea5c78e19609bf4468f0a686d9a756/compiler/rustc_codegen_ssa/src/base.rs#L567-L594\"><code>codegen_crate()</code> in <code>rustc_codegen_ssa/src/base.rs</code></a> and finally <a href=\"https://github.com/rust-lang/rust/blob/56cd04af5c389b6ab676ba16f59d9f70bc465090/compiler/rustc_codegen_ssa/src/back/write.rs#L1862\">where we submit the codegen to LLVM</a> and the logs say the allocator shim is being added with <code>--crate-type rlib</code> just like with <code>--crate-type staticlib</code>. However, according to <code>nm</code> the allocator shim symbols are not present in the rlib. Where could this codegen be getting dropped or stripped?</p>\n<p>Thanks!</p>",
        "id": 273185637,
        "sender_full_name": "Matt H",
        "timestamp": 1645760478
    },
    {
        "content": "<p>With <a href=\"https://github.com/rust-lang/rust/pull/86844\">https://github.com/rust-lang/rust/pull/86844</a> this option wouldn't be necessary if you use <code>#[global_allocator]</code>. Also an allocator shim is generates for dylib crates. Or to be precise the first dylib has one which all others use. If you use <code>-Cprefer-dynamic</code>, most of the time this dylib is <a href=\"http://libstd.so\">libstd.so</a>. If you don't you can only have a single dylib I think which thus has the allocator shim.</p>",
        "id": 273200055,
        "sender_full_name": "bjorn3",
        "timestamp": 1645777472
    },
    {
        "content": "<p>Hm, thanks for linking! If it gets merged I'll use it, but I'd probably want <code>#[global_allocator]</code> to point at the system one which might take some elbow grease to avoid a circular dependency in some cases:</p>\n<blockquote>\n<p>This does require the #[global_allocator] to be either in the executable or a dylib that is loaded before the dylib that has libstd linked into it.</p>\n</blockquote>\n<p>Is there someone with relevant expertise we could ping on here to discuss whether to move forward with your PR or get mine working? Looks like <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> self-assigned the review in October, maybe them?</p>",
        "id": 273264116,
        "sender_full_name": "Matt H",
        "timestamp": 1645812591
    },
    {
        "content": "<p>You can point <code>#[global_allocator]</code> to the system allocator. For example using something like <code>use std::alloc::System; #[global_allocator] static ALLOCATOR: System = System;</code>.</p>",
        "id": 273280200,
        "sender_full_name": "bjorn3",
        "timestamp": 1645820706
    },
    {
        "content": "<p>I'm not sure who to ping.</p>",
        "id": 273280259,
        "sender_full_name": "bjorn3",
        "timestamp": 1645820750
    },
    {
        "content": "<p>found <a href=\"https://github.com/rust-lang/rust/blob/45e2c2881d11324d610815bfff097e25c412199e/compiler/rustc_codegen_ssa/src/back/link.rs#L302-L310\">the missing piece for my thing</a>! so I have a <code>-C force-allocator-shim</code> working locally, albeit maybe not correctly. it's fully backend-agnostic which seems like a plus - would something like this address your needs bjorn3?</p>\n<p>i can tidy up and open a WIP PR which links yours to see if that bumps the conversation</p>",
        "id": 273313854,
        "sender_full_name": "Matt H",
        "timestamp": 1645845634
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/94389\">https://github.com/rust-lang/rust/pull/94389</a> my PR, though I'm happy if either moves forward</p>",
        "id": 273320751,
        "sender_full_name": "Matt H",
        "timestamp": 1645855018
    },
    {
        "content": "<p><code>-Cforce-allocator-shim</code> is not useful for <code>--emit obj</code>, which is what rust-for-linux uses.</p>",
        "id": 273322331,
        "sender_full_name": "bjorn3",
        "timestamp": 1645857158
    },
    {
        "content": "<p>(I left a comment, but in short: I'll prioritize looking at both of the PRs provided here.)</p>",
        "id": 273658910,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646148971
    }
]