[
    {
        "content": "<p>In core's <code>Write</code> trait I tried adding a <code>inline(never)</code> to <code>write_fmt</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait Write {\n    ...\n\n    #[inline(never)]\n    fn write_fmt(mut self: &amp;mut Self, args: Arguments&lt;&#39;_&gt;) -&gt; Result {\n        write(&amp;mut self, args)\n    }\n}\n</code></pre></div>\n<p>My expectation was, every implementation of this trait without a <code>write_fmt</code> would get the default <code>write_fmt</code>, including the <code>inline(never)</code> attribute.</p>\n<p>However in practice that does not happen, the methods are still inlined. If I really want to not inline this I have to override it in implementations and add <code>inline(never)</code> there. For example, in <code>String</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl fmt::Write for String {\n    ...\n\n    #[inline(never)]\n    fn write_fmt(mut self: &amp;mut Self, args: fmt::Arguments&lt;&#39;_&gt;) -&gt; fmt::Result {\n        fmt::write(&amp;mut self, args)\n    }\n}\n</code></pre></div>\n<p>Is this working as expected, or a bug? Is this documented somewhere?</p>",
        "id": 228624484,
        "sender_full_name": "osa1",
        "timestamp": 1614789836
    },
    {
        "content": "<p>I think this is a bug personally</p>",
        "id": 228624588,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614789865
    },
    {
        "content": "<p>OK thanks. I'll submit an issue.</p>",
        "id": 228647196,
        "sender_full_name": "osa1",
        "timestamp": 1614797912
    }
]