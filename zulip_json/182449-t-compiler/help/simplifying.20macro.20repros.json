[
    {
        "content": "<p>I've managed to minimize <a href=\"https://github.com/rust-lang/rust/issues/61693\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61693\">#61693</a> to something pretty small, but depends on <code>syn</code>, <code>quote</code> and <code>proc_macro2</code> and I've not managed to strip those out yet. Does anyone have any experience with crafting compiler test cases from code like this?</p>",
        "id": 171259074,
        "sender_full_name": "davidtwco",
        "timestamp": 1563544532
    },
    {
        "content": "<p>My current progress w/ the repro is linked in <a href=\"https://github.com/rust-lang/rust/issues/61963#issuecomment-513242465\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61963#issuecomment-513242465\">this comment</a>.</p>",
        "id": 171260251,
        "sender_full_name": "davidtwco",
        "timestamp": 1563545364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> haha</p>",
        "id": 171274090,
        "sender_full_name": "lqd",
        "timestamp": 1563555564
    },
    {
        "content": "<p>I tried removing sync/quote etc from the attribute crate</p>",
        "id": 171274104,
        "sender_full_name": "lqd",
        "timestamp": 1563555584
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/1d882a8e8c9d41f3318ad98d60f8a11a\" target=\"_blank\" title=\"https://gist.github.com/lqd/1d882a8e8c9d41f3318ad98d60f8a11a\">this works</a> but note the super important space</p>",
        "id": 171274210,
        "sender_full_name": "lqd",
        "timestamp": 1563555635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// note: qux: Qux&lt;Qux&lt;Baz&gt; &gt;,</span>\n<span class=\"c1\">// the space              ^ here is important</span>\n</pre></div>",
        "id": 171274240,
        "sender_full_name": "lqd",
        "timestamp": 1563555656
    },
    {
        "content": "<p>Oh, wow. I wouldn’t have thought of that.</p>",
        "id": 171274246,
        "sender_full_name": "davidtwco",
        "timestamp": 1563555662
    },
    {
        "content": "<p>without the space it builds, with it there's your <code>^^^^^^^^^^^^^ help: use </code>dyn<code>: </code>dyn #[dom_struct]`</p>",
        "id": 171274312,
        "sender_full_name": "lqd",
        "timestamp": 1563555710
    },
    {
        "content": "<p>That’s mad.</p>",
        "id": 171274367,
        "sender_full_name": "davidtwco",
        "timestamp": 1563555724
    },
    {
        "content": "<p>I haven't looked at the custom derive yet but I assume we can use the same strategy: output a static TokenStream</p>",
        "id": 171274400,
        "sender_full_name": "lqd",
        "timestamp": 1563555759
    },
    {
        "content": "<p>I’ve not looked much into what’s happening in the compiler yet, just focused on getting a test case that works.</p>",
        "id": 171274411,
        "sender_full_name": "davidtwco",
        "timestamp": 1563555769
    },
    {
        "content": "<p>Yeah, that’s probably a good idea. Way easier than what I had been trying.</p>",
        "id": 171274454,
        "sender_full_name": "davidtwco",
        "timestamp": 1563555803
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 171274457,
        "sender_full_name": "davidtwco",
        "timestamp": 1563555807
    },
    {
        "content": "<p>this is what I tried in the first crate but couldn't get it to work, so I built both tokenstreams with proc_macro::quote and syn::quote</p>",
        "id": 171274460,
        "sender_full_name": "lqd",
        "timestamp": 1563555809
    },
    {
        "content": "<p>and asserted they were equal, and they were not</p>",
        "id": 171274473,
        "sender_full_name": "lqd",
        "timestamp": 1563555818
    },
    {
        "content": "<p>so this is where the space comes from</p>",
        "id": 171274493,
        "sender_full_name": "lqd",
        "timestamp": 1563555837
    },
    {
        "content": "<p>Could probably look at <code>-Z unpretty</code> output.</p>",
        "id": 171274524,
        "sender_full_name": "davidtwco",
        "timestamp": 1563555842
    },
    {
        "content": "<p>I tried to get the pretty=expanded but I wasn't to easily get the expanded proc macros token</p>",
        "id": 171274574,
        "sender_full_name": "lqd",
        "timestamp": 1563555876
    },
    {
        "content": "<p>do you know if it works with proc macros or only macros ?</p>",
        "id": 171274604,
        "sender_full_name": "lqd",
        "timestamp": 1563555901
    },
    {
        "content": "<p>I’m not sure. I’ve not got all that much experience with either.</p>",
        "id": 171274643,
        "sender_full_name": "davidtwco",
        "timestamp": 1563555933
    },
    {
        "content": "<p>ah yes it does work</p>",
        "id": 171274785,
        "sender_full_name": "lqd",
        "timestamp": 1563556053
    },
    {
        "content": "<p>to get the errors shown on the attributes etc we might indeed need multiple crates tho</p>",
        "id": 171274852,
        "sender_full_name": "lqd",
        "timestamp": 1563556088
    },
    {
        "content": "<p>That’s fine, can do that in compiletest.</p>",
        "id": 171274871,
        "sender_full_name": "davidtwco",
        "timestamp": 1563556106
    },
    {
        "content": "<p>true (I was mostly responding to the comment about unpretty output)</p>",
        "id": 171274877,
        "sender_full_name": "lqd",
        "timestamp": 1563556112
    },
    {
        "content": "<p>I'll try to simplify the derive if you're not working on it ?</p>",
        "id": 171274890,
        "sender_full_name": "lqd",
        "timestamp": 1563556127
    },
    {
        "content": "<p>I’ve stepped away from the computer for a bit. Feel free to, I’d appreciate it.</p>",
        "id": 171274935,
        "sender_full_name": "davidtwco",
        "timestamp": 1563556156
    },
    {
        "content": "<p>sure</p>",
        "id": 171274947,
        "sender_full_name": "lqd",
        "timestamp": 1563556162
    },
    {
        "content": "<p>it's a bit tougher in the second case, it's related to the spans I think, they look weird with syn/quote</p>",
        "id": 171277024,
        "sender_full_name": "lqd",
        "timestamp": 1563557733
    },
    {
        "content": "<p>That’s unfortunate.</p>",
        "id": 171281213,
        "sender_full_name": "davidtwco",
        "timestamp": 1563560549
    },
    {
        "content": "<p>I was wondering if it was something like that.</p>",
        "id": 171281218,
        "sender_full_name": "davidtwco",
        "timestamp": 1563560558
    },
    {
        "content": "<p>it appears we can't really create/mutate spans</p>",
        "id": 171282509,
        "sender_full_name": "lqd",
        "timestamp": 1563561378
    },
    {
        "content": "<p>here they might be invalid, I'll show you the output I get</p>",
        "id": 171282524,
        "sender_full_name": "lqd",
        "timestamp": 1563561393
    },
    {
        "content": "<p>but I'm not familiar with these so I wouldn't know</p>",
        "id": 171282541,
        "sender_full_name": "lqd",
        "timestamp": 1563561407
    },
    {
        "content": "<p>the <a href=\"https://gist.github.com/lqd/91a22edae631f3e8c7083e4a7614aba9\" target=\"_blank\" title=\"https://gist.github.com/lqd/91a22edae631f3e8c7083e4a7614aba9\">test</a> and the <a href=\"https://gist.github.com/lqd/a021cf9e6e6e528d789e46d3fd441bbb\" target=\"_blank\" title=\"https://gist.github.com/lqd/a021cf9e6e6e528d789e46d3fd441bbb\">output</a></p>",
        "id": 171282663,
        "sender_full_name": "lqd",
        "timestamp": 1563561475
    },
    {
        "content": "<p>I'm not even sure the problem is related to them, but there's some <code>#0 bytes(0..0)</code> spans, which seem like an interesting difference</p>",
        "id": 171282763,
        "sender_full_name": "lqd",
        "timestamp": 1563561535
    },
    {
        "content": "<p>if I modify the way to create the items with syn, juste quote! statically, the error disappears as well</p>",
        "id": 171282901,
        "sender_full_name": "lqd",
        "timestamp": 1563561614
    },
    {
        "content": "<p>so I'm a bit stumped <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 171282921,
        "sender_full_name": "lqd",
        "timestamp": 1563561635
    },
    {
        "content": "<p>Hmm...</p>",
        "id": 171282977,
        "sender_full_name": "davidtwco",
        "timestamp": 1563561696
    },
    {
        "content": "<p>Can you index into the input stream (using <code>.into_iter().nth(..)</code>) and then use that to get the spans?</p>",
        "id": 171283049,
        "sender_full_name": "davidtwco",
        "timestamp": 1563561732
    },
    {
        "content": "<p>Nevermind, I was mixing up which spans were which.</p>",
        "id": 171283067,
        "sender_full_name": "davidtwco",
        "timestamp": 1563561752
    },
    {
        "content": "<p>I'll try to see how the spans look in the quoted static input just in case</p>",
        "id": 171283087,
        "sender_full_name": "lqd",
        "timestamp": 1563561773
    },
    {
        "content": "<p>they are identical to what proc_macro generates then</p>",
        "id": 171283216,
        "sender_full_name": "lqd",
        "timestamp": 1563561846
    },
    {
        "content": "<p>and the error disappears</p>",
        "id": 171283220,
        "sender_full_name": "lqd",
        "timestamp": 1563561850
    },
    {
        "content": "<p>So, we think syn/quote is making spans <code>bytes(0..0)</code> and that's what's causing the issue?</p>",
        "id": 171283301,
        "sender_full_name": "davidtwco",
        "timestamp": 1563561915
    },
    {
        "content": "<p>Since that's the only difference?</p>",
        "id": 171283318,
        "sender_full_name": "davidtwco",
        "timestamp": 1563561923
    },
    {
        "content": "<p>it's a bit hard to tell honestly :)</p>",
        "id": 171283344,
        "sender_full_name": "lqd",
        "timestamp": 1563561947
    },
    {
        "content": "<p>it's the only difference I was able to see in the time I looked at it</p>",
        "id": 171283355,
        "sender_full_name": "lqd",
        "timestamp": 1563561961
    },
    {
        "content": "<p>I'll makesure again the output is identical</p>",
        "id": 171283459,
        "sender_full_name": "lqd",
        "timestamp": 1563562011
    },
    {
        "content": "<p>Thanks for taking a look, I'll see what I can dig up when I get back to a machine.</p>",
        "id": 171283467,
        "sender_full_name": "davidtwco",
        "timestamp": 1563562018
    },
    {
        "content": "<p>the expanded output is indeed identical</p>",
        "id": 171283865,
        "sender_full_name": "lqd",
        "timestamp": 1563562275
    },
    {
        "content": "<p>why isn't the bare trait giving a warning in the other case ......</p>",
        "id": 171283992,
        "sender_full_name": "lqd",
        "timestamp": 1563562359
    },
    {
        "content": "<p>I really gtg though, I'll update the derive test so that you can see what I'm talking about :)</p>",
        "id": 171284153,
        "sender_full_name": "lqd",
        "timestamp": 1563562464
    },
    {
        "content": "<p>Thanks, appreciate the help.</p>",
        "id": 171284176,
        "sender_full_name": "davidtwco",
        "timestamp": 1563562473
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/05d84be2fb83bd69b880999f254a1964\" target=\"_blank\" title=\"https://gist.github.com/lqd/05d84be2fb83bd69b880999f254a1964\">updated here</a></p>",
        "id": 171284197,
        "sender_full_name": "lqd",
        "timestamp": 1563562489
    },
    {
        "content": "<p>no problem :)</p>",
        "id": 171284206,
        "sender_full_name": "lqd",
        "timestamp": 1563562494
    },
    {
        "content": "<p>a weird one for sure</p>",
        "id": 171284228,
        "sender_full_name": "lqd",
        "timestamp": 1563562506
    },
    {
        "content": "<p>and that weird space.... :)</p>",
        "id": 171284282,
        "sender_full_name": "lqd",
        "timestamp": 1563562549
    },
    {
        "content": "<p>I think the bug here is probably that there's a way to get spans that are <code>bytes(0..0)</code> at all - I can't figure out how I'd construct those.</p>",
        "id": 171286901,
        "sender_full_name": "davidtwco",
        "timestamp": 1563564723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I'm not familiar at all with how <code>proc-macro</code> crates are intended to work, it there supposed to be a way to get what are effectively dummy spans in a <code>#[proc_macro_derive]</code>?</p>",
        "id": 171287048,
        "sender_full_name": "davidtwco",
        "timestamp": 1563564871
    },
    {
        "content": "<p>I'm also looking into how the quote crate does it</p>",
        "id": 171287060,
        "sender_full_name": "lqd",
        "timestamp": 1563564884
    },
    {
        "content": "<p>I'm able to reproduce the results you were getting.</p>",
        "id": 171287063,
        "sender_full_name": "davidtwco",
        "timestamp": 1563564892
    },
    {
        "content": "<p>I've been having a look at <code>quote</code> and <code>syn</code> and nothing is jumping out to me from a few GitHub searches.</p>",
        "id": 171287081,
        "sender_full_name": "davidtwco",
        "timestamp": 1563564907
    },
    {
        "content": "<p>it seems like an unlucky collision of a bunch of different factors</p>",
        "id": 171287227,
        "sender_full_name": "lqd",
        "timestamp": 1563565033
    },
    {
        "content": "<p>Probably from a use of <code>Span::def_site()</code> or <code>Span::call_site()</code>?</p>",
        "id": 171287364,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565139
    },
    {
        "content": "<p>yeah I don't see another way to create them :)</p>",
        "id": 171287538,
        "sender_full_name": "lqd",
        "timestamp": 1563565310
    },
    {
        "content": "<p>if that's the case then in this context rustc is giving the weird spans to quote/proc_macro2 ?</p>",
        "id": 171287608,
        "sender_full_name": "lqd",
        "timestamp": 1563565354
    },
    {
        "content": "<p>Maybe? I have no idea how to craft a test for that.</p>",
        "id": 171287646,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565397
    },
    {
        "content": "<p>or if it's even the real root cause of the problem</p>",
        "id": 171287741,
        "sender_full_name": "lqd",
        "timestamp": 1563565488
    },
    {
        "content": "<p>I can get <code>Span</code> to have a <code>#0</code> by calling <code>.parent()</code> twice.</p>",
        "id": 171287921,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565666
    },
    {
        "content": "<p>But it doesn't change the range.</p>",
        "id": 171287965,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565682
    },
    {
        "content": "<p>(that is, the <code>def_span</code> and <code>call_site</code> spans)</p>",
        "id": 171287987,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565698
    },
    {
        "content": "<p><code>Literal::subspan</code> might also be useful if we could get a big enough initial <code>Span</code>.</p>",
        "id": 171288137,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565830
    },
    {
        "content": "<p>maybe there's a way to get the proc_macro bridge server/client to create the weird range span :/</p>",
        "id": 171288152,
        "sender_full_name": "lqd",
        "timestamp": 1563565858
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 171288206,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565916
    },
    {
        "content": "<p>Next thing would be to step through with a debugger everywhere that <code>quote</code> or <code>syn</code> gets a <code>Span</code> and find out where it gets the dummy span?</p>",
        "id": 171288308,
        "sender_full_name": "davidtwco",
        "timestamp": 1563565980
    },
    {
        "content": "<p>yeah interesting thought, we're a bit in the dark still</p>",
        "id": 171288346,
        "sender_full_name": "lqd",
        "timestamp": 1563566025
    },
    {
        "content": "<p>That's assuming that it is some <code>set_span</code> call in those crates that do it and not some other function that manipulates tokens or token streams.</p>",
        "id": 171288353,
        "sender_full_name": "davidtwco",
        "timestamp": 1563566031
    },
    {
        "content": "<p>it might also be Span::call_site/def_site but from inside proc_macro2</p>",
        "id": 171288430,
        "sender_full_name": "lqd",
        "timestamp": 1563566090
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 171288461,
        "sender_full_name": "davidtwco",
        "timestamp": 1563566112
    },
    {
        "content": "<p>the contents sure look like the syntax DUMMY_SP but for proc_macro::Span</p>",
        "id": 171290963,
        "sender_full_name": "lqd",
        "timestamp": 1563568163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libsyntax_ext/proc_macro_server.rs#L454-L465\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libsyntax_ext/proc_macro_server.rs#L454-L465\">https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libsyntax_ext/proc_macro_server.rs#L454-L465</a></p>",
        "id": 171292321,
        "sender_full_name": "lqd",
        "timestamp": 1563569376
    },
    {
        "content": "<p>interesting</p>",
        "id": 171292335,
        "sender_full_name": "lqd",
        "timestamp": 1563569399
    },
    {
        "content": "<p>Yeah, that is interesting.</p>",
        "id": 171292422,
        "sender_full_name": "davidtwco",
        "timestamp": 1563569441
    },
    {
        "content": "<p>Implies that dummy spans can be valid?</p>",
        "id": 171292453,
        "sender_full_name": "davidtwco",
        "timestamp": 1563569479
    },
    {
        "content": "<p>maybe ? at the very least known to happen in some cases let's say</p>",
        "id": 171292530,
        "sender_full_name": "lqd",
        "timestamp": 1563569557
    },
    {
        "content": "<p>Yeah, that’s reasonable.</p>",
        "id": 171292548,
        "sender_full_name": "davidtwco",
        "timestamp": 1563569575
    },
    {
        "content": "<p>how hard it is to actually turn DUMMY_SP into a proc_macro::Span is a testament to rustc's crates privacy design, good job :)</p>",
        "id": 171292891,
        "sender_full_name": "lqd",
        "timestamp": 1563569895
    },
    {
        "content": "<p>I didn't look into the details, but DUMMY_SP in proc macro tokens means that the tokens were obtained through pretty-printing and then re-parsing the input.</p>",
        "id": 171302840,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563581986
    },
    {
        "content": "<p>This happens as a fallback when the original tokens are unavailable or invalidated in any way (<a href=\"https://github.com/rust-lang/rust/issues/43081\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43081\">https://github.com/rust-lang/rust/issues/43081</a>).</p>",
        "id": 171302908,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563582108
    },
    {
        "content": "<p>it took a while but I figured it out <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 171303775,
        "sender_full_name": "lqd",
        "timestamp": 1563583569
    },
    {
        "content": "<p>after trying a lot of things including setting up a rustc driver to force the dummy_sp, I saw the light of day</p>",
        "id": 171303796,
        "sender_full_name": "lqd",
        "timestamp": 1563583626
    },
    {
        "content": "<p>the dummy_sp was in the input along, <a href=\"https://github.com/davidtwco/rust-reproduction-issue-61963/pull/1\" target=\"_blank\" title=\"https://github.com/davidtwco/rust-reproduction-issue-61963/pull/1\">PR here</a></p>",
        "id": 171303844,
        "sender_full_name": "lqd",
        "timestamp": 1563583715
    },
    {
        "content": "<p>depending on how you override the spans the error can be different</p>",
        "id": 171303852,
        "sender_full_name": "lqd",
        "timestamp": 1563583744
    },
    {
        "content": "<p>if you clobber them all it will have an error like </p>\n<div class=\"codehilite\"><pre><span></span>^ help: use `dyn`: `dyn #`\n</pre></div>",
        "id": 171303917,
        "sender_full_name": "lqd",
        "timestamp": 1563583861
    },
    {
        "content": "<p>so I set it up like the original code did with <code>quote</code>and it matches the error you expect</p>\n<div class=\"codehilite\"><pre><span></span>help: use `dyn`: `dyn #[dom_struct]`\n</pre></div>",
        "id": 171303937,
        "sender_full_name": "lqd",
        "timestamp": 1563583918
    },
    {
        "content": "<p>That’s awesome!</p>",
        "id": 171316358,
        "sender_full_name": "davidtwco",
        "timestamp": 1563607917
    },
    {
        "content": "<p>Thanks a bunch.</p>",
        "id": 171316399,
        "sender_full_name": "davidtwco",
        "timestamp": 1563607926
    },
    {
        "content": "<p>Does that still preserve the original warning too on the field?</p>",
        "id": 171316515,
        "sender_full_name": "davidtwco",
        "timestamp": 1563608182
    },
    {
        "content": "<p>(it doesn’t really matter but it’d be interesting)</p>",
        "id": 171316519,
        "sender_full_name": "davidtwco",
        "timestamp": 1563608197
    },
    {
        "content": "<p>I've pushed your changes to the repro repository and modified the attribute crate so that it is also token-for-token identical to what <code>quote</code>/<code>syn</code> was outputting.</p>",
        "id": 171319468,
        "sender_full_name": "davidtwco",
        "timestamp": 1563613894
    },
    {
        "content": "<p>it's probably not the most minimal repro of the spirit of the bug, as we're making sure the tokens match the original but it's likely small enough to be debugged, and have it as a regression test</p>",
        "id": 171320176,
        "sender_full_name": "lqd",
        "timestamp": 1563615241
    },
    {
        "content": "<p>Yeah, I think that's the best that we could hope for.</p>",
        "id": 171320228,
        "sender_full_name": "davidtwco",
        "timestamp": 1563615277
    },
    {
        "content": "<p>alright cheers David, enjoy the weekend :)</p>",
        "id": 171320283,
        "sender_full_name": "lqd",
        "timestamp": 1563615390
    },
    {
        "content": "<p>You too, thanks a ton for the help.</p>",
        "id": 171320285,
        "sender_full_name": "davidtwco",
        "timestamp": 1563615405
    }
]