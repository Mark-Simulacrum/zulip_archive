[
    {
        "content": "<p>I'm trying to figure out whether I should file a bug for the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait SparseColumnGenerator {\n    type MySparseColumn;\n\n    fn generate_column(&amp;self) -&gt; Self::MySparseColumn;\n}\n\nstruct IGenerateSparseColumns&lt;NT&gt; {\n    inner_values: Vec&lt;(usize, NT)&gt;,\n}\nimpl&lt;&#39;a, NT&gt; SparseColumnGenerator for IGenerateSparseColumns&lt;NT&gt; {\n    type MySparseColumn = IAmAColumn&lt;&#39;a, NT, impl Iterator&lt;Item = &amp;&#39;a (usize, NT)&gt;&gt;;\n\n    fn generate_column(&amp;&#39;a self) -&gt; Self::MySparseColumn {\n        Self::MySparseColumn {\n            inner_iter: self.inner_values.iter().filter(|&amp;(i, _)| i % 2 == 0),\n        }\n    }\n}\n\nstruct IAmAColumn&lt;&#39;a, NT, I: Iterator&lt;Item = &amp;&#39;a (usize, NT)&gt;&gt; {\n    inner_iter: I,\n}\n</code></pre></div>\n\n\n<p>gives</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:17:25\n   |\n13 |     type MySparseColumn = IAmAColumn&lt;&#39;a, NT, impl Iterator&lt;Item = &amp;&#39;a (usize, NT)&gt;&gt;;\n   |                                              ------------------------------------- the expected opaque type\n...\n17 |             inner_iter: self.inner_values.iter().filter(|&amp;(i, _)| i % 2 == 0),\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found struct `Filter`\n   |\n   = note: expected opaque type `impl Iterator`\n                   found struct `Filter&lt;std::slice::Iter&lt;&#39;_, (usize, NT)&gt;, [closure@src/lib.rs:17:57: 17:77]&gt;`\n\nerror: could not find defining uses\n  --&gt; src/lib.rs:13:46\n   |\n13 |     type MySparseColumn = IAmAColumn&lt;&#39;a, NT, impl Iterator&lt;Item = &amp;&#39;a (usize, NT)&gt;&gt;;\n   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n</code></pre></div>\n\n\n<p>on nightly. Clearly, <code>Filter</code> implements <code>Iterator</code>. Am I missing something or should I file a bug?</p>",
        "id": 209630826,
        "sender_full_name": "Bram van den Heuvel",
        "timestamp": 1599741043
    },
    {
        "content": "<p>(if this is not the right stream (or even platform) to ask, please let me know)</p>",
        "id": 209630898,
        "sender_full_name": "Bram van den Heuvel",
        "timestamp": 1599741090
    },
    {
        "content": "<blockquote>\n<p><code>error: could not find defining uses</code></p>\n</blockquote>\n<p>I think you must use the <code>impl</code> type directly in the type signature of a function for rustc to recognize that it is a \"defining use\", aka a use of <code>impl Trait</code> that tells rustc what the actual type behind it is.</p>",
        "id": 209631519,
        "sender_full_name": "bjorn3",
        "timestamp": 1599741384
    },
    {
        "content": "<p>hmm... yea this is supposed to work, but I remember we may have split the feature gate into one allowing <code>type Foo = impl Trait</code> and one with the more complex case you're showing here</p>",
        "id": 209633846,
        "sender_full_name": "oli",
        "timestamp": 1599742466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> could you give an example of such a usage? Because</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    let data = IGenerateSparseColumns { inner_values: vec![(3, 0)], };\n    let x = data.generate_column();\n}\n</code></pre></div>\n\n\n<p>doesn't do the trick.</p>",
        "id": 209635800,
        "sender_full_name": "Bram van den Heuvel",
        "timestamp": 1599743286
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=11075ac82e5f453667e8942422fa81b3\">Playground</a></p>",
        "id": 209635845,
        "sender_full_name": "Bram van den Heuvel",
        "timestamp": 1599743309
    },
    {
        "content": "<p>That would be something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">make_a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p><code>make_a</code> here is a defining use for <code>A</code> as it is mentioned as return type.</p>",
        "id": 209635966,
        "sender_full_name": "bjorn3",
        "timestamp": 1599743381
    },
    {
        "content": "<p>@oli are you suggesting I might need to use a second feature? Do you happen to know which one?</p>",
        "id": 209636056,
        "sender_full_name": "Bram van den Heuvel",
        "timestamp": 1599743411
    },
    {
        "content": "<p>I don't even know if we have a feature that allows this</p>",
        "id": 209636078,
        "sender_full_name": "oli",
        "timestamp": 1599743422
    },
    {
        "content": "<p>I just remember that this is a limitation that we've had</p>",
        "id": 209636095,
        "sender_full_name": "oli",
        "timestamp": 1599743432
    },
    {
        "content": "<p>but we want to allow it</p>",
        "id": 209636108,
        "sender_full_name": "oli",
        "timestamp": 1599743438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> doesn't the current example already do that? The error message mentions a specific type and <code>NT</code> is specified to be <code>i32</code> with that <code>main</code> function.</p>",
        "id": 209636132,
        "sender_full_name": "Bram van den Heuvel",
        "timestamp": 1599743452
    },
    {
        "content": "<p>The problem is <code>type A = impl Trait</code> working doesn't mean that <code>type B = (i32, impl Trait);</code> will work out of the box</p>",
        "id": 209636234,
        "sender_full_name": "oli",
        "timestamp": 1599743509
    },
    {
        "content": "<p>the original impl was <code>existential type A: Trait</code>, and all the backend still thinks it works like that even if the syntax changed</p>",
        "id": 209636336,
        "sender_full_name": "oli",
        "timestamp": 1599743551
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; has overflowed its stack\nfatal runtime error: stack overflow\n</code></pre></div>\n\n\n<p>recursive datastructures iksde</p>",
        "id": 209637280,
        "sender_full_name": "lcnr",
        "timestamp": 1599743916
    },
    {
        "content": "<p>meh, I did not want to post this here</p>",
        "id": 209637630,
        "sender_full_name": "lcnr",
        "timestamp": 1599744066
    },
    {
        "content": "<p>sry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 209637668,
        "sender_full_name": "lcnr",
        "timestamp": 1599744083
    }
]