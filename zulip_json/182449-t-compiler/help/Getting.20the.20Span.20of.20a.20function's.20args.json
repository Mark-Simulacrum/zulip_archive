[
    {
        "content": "<p>Okay, so if I have a Span of <code>foo(bar)</code>, what's the best way to get the Span <code>bar</code>? Or, if it's <code>foo()</code>, to get the empty span within the function call</p>",
        "id": 269185638,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643065556
    },
    {
        "content": "<p>Is this at AST, HIR or MIR level?</p>",
        "id": 269185981,
        "sender_full_name": "bjorn3",
        "timestamp": 1643065782
    },
    {
        "content": "<p>uh, during typechecking</p>",
        "id": 269186530,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643066130
    },
    {
        "content": "<p>In general, you should avoid manipulating a Span in-place, except in diagnostic code</p>",
        "id": 269192776,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643070805
    },
    {
        "content": "<p>When we glue together multiple spans (e.g. the span of <code>foo</code> and the span of <code>(bar)</code>), we may frequently lose information, since different parts may come from different files from different macro expansions</p>",
        "id": 269192891,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643070877
    },
    {
        "content": "<p>The best way to get that span would be to go through the HIR</p>",
        "id": 269192901,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643070894
    },
    {
        "content": "<p>You could get the spans of the <code>Expr</code> arguments in <code>hir::ExprKind::MethodCall</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ExprKind.html#variant.MethodCall\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/hir/enum.ExprKind.html#variant.MethodCall</a></p>",
        "id": 269193057,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643070994
    },
    {
        "content": "<p>and join them together</p>",
        "id": 269193063,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643071005
    },
    {
        "content": "<p>So, I most specifically want the Span of the <em>start</em> of the function arguments. So I have a place to suggest for missing arguments.</p>",
        "id": 269193707,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643071589
    },
    {
        "content": "<p>(This is diagnostic code)</p>",
        "id": 269193814,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643071692
    },
    {
        "content": "<p>Do you the method name, or just the opening paren?</p>",
        "id": 269202255,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643078710
    },
    {
        "content": "<p>Well, I <em>wanted</em> the opening paren</p>",
        "id": 269205201,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643081352
    },
    {
        "content": "<p>But I guess <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> pointed out that we can't point at the space between an empty method call, instead it would point to the second paren, which isn't great</p>",
        "id": 269205241,
        "sender_full_name": "Jack Huey",
        "timestamp": 1643081384
    },
    {
        "content": "<p>We can still add a span pointing at it, it will just increase the ast size in mem</p>",
        "id": 269328420,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1643146583
    },
    {
        "content": "<p>But there's précédent for diagnostic only spans</p>",
        "id": 269328445,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1643146598
    }
]