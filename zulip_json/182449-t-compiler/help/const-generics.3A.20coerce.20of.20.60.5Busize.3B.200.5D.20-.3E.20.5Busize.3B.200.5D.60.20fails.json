[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"p\">[</span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">MyConst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Const</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"> </span><span class=\"c1\">// ERROR</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyConst</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"> </span><span class=\"c1\">// ERROR</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>currently fails in <code>try_coerce</code>(<a href=\"https://github.com/rust-lang/rust/blob/dbc3cfdd25ccd56edf3ea364f86ab32967636c26/src/librustc_typeck/check/coercion.rs#L813\" title=\"https://github.com/rust-lang/rust/blob/dbc3cfdd25ccd56edf3ea364f86ab32967636c26/src/librustc_typeck/check/coercion.rs#L813\">https://github.com/rust-lang/rust/blob/dbc3cfdd25ccd56edf3ea364f86ab32967636c26/src/librustc_typeck/check/coercion.rs#L813</a>)<br>\nfor </p>\n<div class=\"codehilite\"><pre><span></span>coercion::try(\n   Expr {\n       hir_id: HirId { owner: DefId(0:8 ~ whooosagoodboi[317d]::main[0]), local_id: 6 },\n       kind: Block(Block { stmts: [],\n       expr: Some(\n            Expr { hir_id: HirId { owner: DefId(0:8 ~ whooosagoodboi[317d]::main[0]), local_id: 4 }, kind: Array([]), attrs: ThinVec(None), span: //home/programming/rust/src/test/ui/__check/whooosagoodboi.rs:9:24: 9:26 }),\n       hir_id: HirId { owner: DefId(0:8 ~ whooosagoodboi[317d]::main[0]), local_id: 5 }, rules: DefaultBlock, span: /home/programming/rust/src/test/ui/__check/whooosagoodboi.rs:9:22: 9:28, targeted_by_break: false }, None ),\n        attrs: ThinVec(None),\n        span: /home/programming/rust/src/test/ui/__check/whooosagoodboi.rs:9:22: 9:28\n    }: [usize; 0] -&gt; [usize; 0]\n)\n</pre></div>\n\n\n<p>It seems to try <code>coerce_unsized</code> which then fails.</p>\n<p>While I am currently looking into this myself, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> do you have some ideas why this might happen?</p>",
        "id": 193602000,
        "sender_full_name": "lcnr",
        "timestamp": 1586543546
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68615\" title=\"https://github.com/rust-lang/rust/issues/68615\">https://github.com/rust-lang/rust/issues/68615</a></p>",
        "id": 193602030,
        "sender_full_name": "lcnr",
        "timestamp": 1586543569
    },
    {
        "content": "<p>nope, other than the types being wrong <em>some time earlier</em></p>",
        "id": 193602119,
        "sender_full_name": "eddyb",
        "timestamp": 1586543623
    },
    {
        "content": "<p>nevermind, it fails one call later when trying to coerce <code>[usize; 0] -&gt; _</code> for whatever reason <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193603427,
        "sender_full_name": "lcnr",
        "timestamp": 1586544356
    },
    {
        "content": "<p>What is the meaning of <code>use_lub</code>? <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/coercion/struct.Coerce.html#structfield.use_lub\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/coercion/struct.Coerce.html#structfield.use_lub\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/coercion/struct.Coerce.html#structfield.use_lub</a></p>",
        "id": 193605716,
        "sender_full_name": "lcnr",
        "timestamp": 1586545563
    },
    {
        "content": "<p><code>Least upper bound</code> i guess <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 193605887,
        "sender_full_name": "lcnr",
        "timestamp": 1586545668
    },
    {
        "content": "<p>coercion has a horrible stack depth <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span> at least when inspecting it for the first time</p>",
        "id": 193606247,
        "sender_full_name": "lcnr",
        "timestamp": 1586545844
    },
    {
        "content": "<p><code>use_lub</code> is for when you have e.g. <code>[x, y]</code> and so <code>x</code> and <code>y</code>'s types have to merge into a common type</p>",
        "id": 193606349,
        "sender_full_name": "eddyb",
        "timestamp": 1586545909
    },
    {
        "content": "<p>and Rust has subtyping</p>",
        "id": 193606362,
        "sender_full_name": "eddyb",
        "timestamp": 1586545915
    },
    {
        "content": "<p>ayy! progress <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/combine/struct.CombineFields.html#method.instantiate\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/combine/struct.CombineFields.html#method.instantiate\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/combine/struct.CombineFields.html#method.instantiate</a> returns <code>ConstMismatch</code> with with expected == found...</p>",
        "id": 193618287,
        "sender_full_name": "lcnr",
        "timestamp": 1586553225
    },
    {
        "content": "<p>fk <a href=\"https://github.com/rust-lang/rust/blob/9682f0e14db95076454559a24c26287bcad57955/src/librustc_middle/ty/relate.rs#L562\" title=\"https://github.com/rust-lang/rust/blob/9682f0e14db95076454559a24c26287bcad57955/src/librustc_middle/ty/relate.rs#L562\">https://github.com/rust-lang/rust/blob/9682f0e14db95076454559a24c26287bcad57955/src/librustc_middle/ty/relate.rs#L562</a><br>\nthe last 5 hours weren't as productive as I have hoped.</p>",
        "id": 193624043,
        "sender_full_name": "lcnr",
        "timestamp": 1586556796
    },
    {
        "content": "<p>lol</p>",
        "id": 193624303,
        "sender_full_name": "eddyb",
        "timestamp": 1586556994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Can we just compare the relevant section of the allocations here?</p>",
        "id": 193624318,
        "sender_full_name": "lcnr",
        "timestamp": 1586557008
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> maybe look at <code>destructure_const</code>?</p>",
        "id": 193624323,
        "sender_full_name": "eddyb",
        "timestamp": 1586557012
    },
    {
        "content": "<p>what are you trying to fix?</p>",
        "id": 193624330,
        "sender_full_name": "eddyb",
        "timestamp": 1586557018
    },
    {
        "content": "<p><code>0</code> can't be <code>ByRef</code></p>",
        "id": 193624338,
        "sender_full_name": "eddyb",
        "timestamp": 1586557027
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/issues/68615\" title=\"https://github.com/rust-lang/rust/issues/68615\">https://github.com/rust-lang/rust/issues/68615</a></p>",
        "id": 193624348,
        "sender_full_name": "lcnr",
        "timestamp": 1586557039
    },
    {
        "content": "<p><code>[DEBUG rustc_middle::ty::relate] super_relate_tys: a=Foo&lt;ByRef { alloc: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: [usize; 0]&gt; b=Foo&lt;ByRef { alloc: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: [usize; 0]&gt;\n</code></p>",
        "id": 193624372,
        "sender_full_name": "lcnr",
        "timestamp": 1586557065
    },
    {
        "content": "<p>aaaaaaaah</p>",
        "id": 193624379,
        "sender_full_name": "eddyb",
        "timestamp": 1586557073
    },
    {
        "content": "<p>named <code>Const</code> to <code>Foo</code> in this log</p>",
        "id": 193624421,
        "sender_full_name": "lcnr",
        "timestamp": 1586557084
    },
    {
        "content": "<p>it's an <code>[]: [usize; 0]</code> value</p>",
        "id": 193624426,
        "sender_full_name": "eddyb",
        "timestamp": 1586557088
    },
    {
        "content": "<p>not a <code>[usize; 0]</code> type</p>",
        "id": 193624430,
        "sender_full_name": "eddyb",
        "timestamp": 1586557094
    },
    {
        "content": "<p>yeah okay <code>ByRef</code></p>",
        "id": 193624442,
        "sender_full_name": "eddyb",
        "timestamp": 1586557104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> check out <code>destructure_const</code> ;;)</p>",
        "id": 193624453,
        "sender_full_name": "eddyb",
        "timestamp": 1586557114
    },
    {
        "content": "<p>I have an unfinished PR to use it to print consts nicely</p>",
        "id": 193624508,
        "sender_full_name": "eddyb",
        "timestamp": 1586557173
    },
    {
        "content": "<p>maybe you want to wait for that? idk</p>",
        "id": 193624516,
        "sender_full_name": "eddyb",
        "timestamp": 1586557180
    },
    {
        "content": "<blockquote>\n<p>maybe you want to wait for that? idk</p>\n</blockquote>\n<p>This should be a fairly straightforward fix now afaict <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nI think I will at least try this without waiting.</p>\n<p>Good night. I am done for today <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 193624856,
        "sender_full_name": "lcnr",
        "timestamp": 1586557426
    }
]