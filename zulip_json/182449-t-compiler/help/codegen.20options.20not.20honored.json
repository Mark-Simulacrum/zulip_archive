[
    {
        "content": "<p>I'm trying to get a single LLVM IR file from compiler-builtins:</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS=&#39;-C codegen-units=1&#39; rustc +local -C codegen-units=1 --crate-name compiler_builtins /Users/shep/.cargo/registry/src/github.com-1ecc6299db9ec823/compiler_builtins-0.1.32/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=llvm-ir -C opt-level=z -Clinker-plugin-lto -C debuginfo=2 --cfg &#39;feature=&quot;compiler-builtins&quot;&#39; --cfg &#39;feature=&quot;core&quot;&#39; --cfg &#39;feature=&quot;default&quot;&#39; --cfg &#39;feature=&quot;rustc-dep-of-std&quot;&#39; -C metadata=b55ef319712ad5b4 -C extra-filename=-b55ef319712ad5b4 --out-dir /Users/shep/Projects/arduino-blink/target/avr-atmega328p-new/release/deps --target /Users/shep/Projects/arduino-blink/avr-atmega328p-new.json -Zforce-unstable-if-unmarked -L dependency=/Users/shep/Projects/arduino-blink/target/avr-atmega328p-new/release/deps -L dependency=/Users/shep/Projects/arduino-blink/target/release/deps --extern core=/Users/shep/Projects/arduino-blink/target/avr-atmega328p-new/release/deps/librustc_std_workspace_core-2751de715382db4b.rmeta --cap-lints allow --cfg &#39;feature=&quot;unstable&quot;&#39; -C codegen-units=1\n</code></pre></div>\n\n\n<p>However, I still have many files:</p>\n<div class=\"codehilite\"><pre><span></span><code>% ls ./target/avr-atmega328p-new/release/deps/compiler_builtins-b55ef319712ad5b4.compiler_builtins.45srv8bc-cgu.*ll | wc\n     116     116   13694\n</code></pre></div>\n\n\n<p>What am I missing?</p>",
        "id": 200782900,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592078081
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rust/pull/73136\">https://github.com/rust-lang/rust/pull/73136</a> as well</p>",
        "id": 200783194,
        "sender_full_name": "simulacrum",
        "timestamp": 1592078635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> am I reading the current code correctly — the compiler hard codes the CGU amount for a crate with the name compiler-builtins?</p>",
        "id": 200789505,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089103
    },
    {
        "content": "<p>you mean before or after that PR?</p>",
        "id": 200789520,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089134
    },
    {
        "content": "<p>The new code would only affect the rustc build process, so I see how that shouldn’t affect me.</p>",
        "id": 200789524,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089150
    },
    {
        "content": "<p>Before (“current” IMO since the pr hasn’t been merged)</p>",
        "id": 200789531,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089189
    },
    {
        "content": "<p>I think no, it uses the <code>#![compiler_builtins]</code> attribute IIRC</p>",
        "id": 200789578,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089220
    },
    {
        "content": "<p>I also have the related question of how would I get the “infinite CGU setting” when I’m compiling compiler built-ins myself for my own third tier target</p>",
        "id": 200789589,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089256
    },
    {
        "content": "<p>on current master? I'm not sure you can without modifying the crate</p>",
        "id": 200789597,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089278
    },
    {
        "content": "<p>and maybe not possible at all</p>",
        "id": 200789599,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089283
    },
    {
        "content": "<p>yeah so is_compiler_builtins returns true if the crate has a crate-level <code>#![compiler_builtins]</code> <a href=\"https://github.com/rust-lang/rust/blob/06e47688bf15d0215edbe05b21603062f6d2eb5d/src/librustc_middle/ty/context.rs#L2719\">https://github.com/rust-lang/rust/blob/06e47688bf15d0215edbe05b21603062f6d2eb5d/src/librustc_middle/ty/context.rs#L2719</a></p>",
        "id": 200789657,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089376
    },
    {
        "content": "<p>Sorry, I’m not being clear. After this PR lands, the rust build system will set a very large CGU setting for that one crate, regardless of the passed-in value, correct?</p>",
        "id": 200789672,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089430
    },
    {
        "content": "<p>passed-in by who?</p>",
        "id": 200789712,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089444
    },
    {
        "content": "<p>Me. <code>-C codegen</code></p>",
        "id": 200789720,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089482
    },
    {
        "content": "<p>sure, yeah</p>",
        "id": 200789731,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089505
    },
    {
        "content": "<p>Now, switch to my embedded use case. I use Cargo to build my crate and libcore and whatever.</p>",
        "id": 200789743,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089551
    },
    {
        "content": "<p>I’m not using the rust build system.</p>",
        "id": 200789781,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089564
    },
    {
        "content": "<p>How do I get “infinite CGU” for that crate when I don’t want it for other crates?</p>",
        "id": 200789788,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089600
    },
    {
        "content": "<p>you basically have to do the same rustc wrapper trick rustbuild does I think</p>",
        "id": 200789793,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089630
    },
    {
        "content": "<p>note though that afaict this may not really be necessary for more esoteric systems where you don't need to worry about symbol conflicts</p>",
        "id": 200789796,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089666
    },
    {
        "content": "<p>(e.g. if you're \"pure rust\" then you almost certainly don't need to care about CGU count AFAICT)</p>",
        "id": 200789836,
        "sender_full_name": "simulacrum",
        "timestamp": 1592089692
    },
    {
        "content": "<p>That was going to be my next question, thank you <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 200789842,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089741
    },
    {
        "content": "<p>So, for today, I can just steal the deletion from that PR and rebuild Rust.</p>",
        "id": 200789853,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089799
    },
    {
        "content": "<p>Then the compiler won’t set CGU behind my back.</p>",
        "id": 200789894,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592089826
    },
    {
        "content": "<p>yes, that's probably the way to go</p>",
        "id": 200790142,
        "sender_full_name": "simulacrum",
        "timestamp": 1592090303
    }
]