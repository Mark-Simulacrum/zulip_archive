[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"492566\">@Vincenzo Palazzo</span> , I think you'll get the best kind of inputs if we take the conversation over to to this zulip stream.</p>",
        "id": 278315991,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649429712
    },
    {
        "content": "<p>I assume you've already started looking at <a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html\">https://rustc-dev-guide.rust-lang.org/getting-started.html</a></p>",
        "id": 278316076,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649429746
    },
    {
        "content": "<p>Have you started going through the steps under the \"Building and debugging rustc\" section? If so, what step are you currently on?</p>",
        "id": 278316183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649429779
    },
    {
        "content": "<p>hey, yes i start to read the book, and prepare my dev env, I also start to look inside the issue, and I atle this one <a href=\"https://github.com/rust-lang/rust/issues/95698\">https://github.com/rust-lang/rust/issues/95698</a></p>",
        "id": 278316278,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649429821
    },
    {
        "content": "<p>great!</p>",
        "id": 278316335,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649429845
    },
    {
        "content": "<p>now I need only to familiarize wiht the expand logic before start to code. I don't want waste dev time into review bad code</p>",
        "id": 278316386,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649429871
    },
    {
        "content": "<p>one zulip hint: We have short-hands for referring to github issues. you can just write <a href=\"https://github.com/rust-lang/rust/issues/95698\">rust#95698</a>, or even <a href=\"https://github.com/rust-lang/rust/issues/95698\">#95698</a></p>",
        "id": 278316456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649429893
    },
    {
        "content": "<p>oh cool this is cool, i just need to remember the number :) thanks</p>",
        "id": 278316581,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649429961
    },
    {
        "content": "<p>hey guys I'm working on this issue <a href=\"https://github.com/rust-lang/rust/issues/95698\">#95698</a> as my first contribution in Rust compiler, and I'm missing somethings in the testing side.</p>\n<p>In particular, to run the version of compiler with my solution or testing solution, I need to install the compiler with <code>x.py install</code> or there is somethings else where I can build the compiler in a sigle binary and test it with <code>./rustc test_file.rs</code>?</p>",
        "id": 278401045,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649498944
    },
    {
        "content": "<p>In addition, there is any docs on how to run the GDB?</p>",
        "id": 278401059,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649498974
    },
    {
        "content": "<p><code>rustup toolchain link</code> is the recommended workflow for using the compiler artifacts, it's much faster than <code>install</code>.<br>\n<a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#creating-a-rustup-toolchain\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#creating-a-rustup-toolchain</a></p>",
        "id": 278404040,
        "sender_full_name": "The 8472",
        "timestamp": 1649502793
    },
    {
        "content": "<p>If you want to attach a debugger then you should build with debuginfo in <code>config.toml</code></p>",
        "id": 278404049,
        "sender_full_name": "The 8472",
        "timestamp": 1649502821
    },
    {
        "content": "<p>Thanks I will check out this!</p>",
        "id": 278408112,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649507784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492566\">Vincenzo Palazzo</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/guidance.20getting.20started/near/278401059\">said</a>:</p>\n<blockquote>\n<p>In addition, there is any docs on how to run the GDB?</p>\n</blockquote>\n<p>Thanks, it works :) sorry but I had missed this inside the book</p>",
        "id": 278408281,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649508038
    },
    {
        "content": "<p>During the debugging of the issue <a href=\"https://github.com/rust-lang/rust/issues/95698\">#95698</a> I make a small reproducible example and I would like to discuss some of my feedback that I get from the compiler behavior</p>\n<p>In particulare, the compiler it is not able to resolve the recursion between the macro when the optional parameter is null, like in this case </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">from_cow_impls</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$from</span>: <span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// recursion call</span>\n<span class=\"w\">        </span><span class=\"n\">from_cow_impls</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$from</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Cow</span>::<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$from</span>: <span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$normalizer</span>: <span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"cp\">$from</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LhsValue</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">val</span>: <span class=\"cp\">$from</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">LhsValue</span>::<span class=\"n\">Bytes</span><span class=\"p\">(</span><span class=\"cp\">$normalizer</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">from_cow_impls</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"cm\">/*callback*/</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cm\">/*callback*/</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278426204,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649532177
    },
    {
        "content": "<p>Now I'm trying to get when the compiler have parsered and after that I will check where place the recursion limit. However, in this case do you think that a recursion limit is the better error to call? there are case where a macros called recursivly is resolved well?</p>",
        "id": 278426306,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649532350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492566\">@Vincenzo Palazzo</span>  You should try moving the first(trailing comma) arm below the main arm like this </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">from_cow_impls</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$from</span>: <span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$normalizer</span>: <span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">....</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$from</span>: <span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278471628,
        "sender_full_name": "Anuvrat",
        "timestamp": 1649601547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466583\">Anuvrat</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/guidance.20getting.20started/near/278471628\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"492566\">Vincenzo Palazzo</span>  You should try moving the first(trailing comma) arm below the main arm like this </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">from_cow_impls</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$from</span>: <span class=\"nc\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$normalizer</span>: <span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">....</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$(</span><span class=\"w\"> </span><span class=\"cp\">$from</span>: <span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"cp\">$(,</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Sorry but I need to do a stupid question, what is the arm?</p>",
        "id": 278477710,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649609211
    },
    {
        "content": "<p>An arm is a <code>pattern =&gt; token tree</code> grammar production.</p>",
        "id": 278478094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649609678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492566\">@Vincenzo Palazzo</span>  Maybe I'm using the wrong vocabulary, but in case of \"match\" each pattern is called an \"arm\", so I'm calling it the same.</p>\n<p><code>($( $from: ty, $normalizer: expr ),+ $(,)? ) =&gt; {....};</code>  so this is an \"arm\", your main logic<br>\n<code>($( $from: ty ),+ $(,)? ) =&gt; {...}</code>  this is the second arm dealing with trailing commas </p>\n<p>I suggested changing the order, as when you deal with trailing commas first it goes into infinite recursion.</p>",
        "id": 278478285,
        "sender_full_name": "Anuvrat",
        "timestamp": 1649609907
    },
    {
        "content": "<p>ah! sorry, I just realized it. I'm new in the source code and also in the docs, and I need to absorb all the new terminology. </p>\n<p>BTW, thanks! I will test this. However yesterday I finish the debuggin of this <a href=\"https://github.com/rust-lang/rust/issues/95698#issuecomment-1094131814\">https://github.com/rust-lang/rust/issues/95698#issuecomment-1094131814</a> and the issue that I'm working on I think is caused from some case where the parser continue to put token inside the queue. However, yesterda I was tired and I need to came on it again</p>\n<p>I will test your suggestion too thanks</p>",
        "id": 278478576,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649610241
    },
    {
        "content": "<p>On compiler calendar I wound that today there is a sync on #wg-async-foundations stream, but I'm not able to find the link, can someone share it?</p>\n<p>Thansk <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 278565777,
        "sender_full_name": "Vincenzo Palazzo",
        "timestamp": 1649688954
    }
]