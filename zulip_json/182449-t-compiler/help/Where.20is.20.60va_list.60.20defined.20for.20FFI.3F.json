[
    {
        "content": "<p>The aarch64-apple-darwin tests have a failure in <code>src/test/ui/abi/variadic-ffi</code>. Brief searching found <a href=\"https://developer.apple.com/documentation/xcode/writing_arm64_code_for_apple_platforms\">this</a>:</p>\n<blockquote>\n<p>Because of these changes, the type <code>va_list</code> is an alias for <code>char*</code>, and not for the struct type in the generic procedure call standard.</p>\n</blockquote>\n<p>I haven't looked yet (popping in and out of computer range today), but figured I'd ask here in case anyone is bored (also because <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> was interested)</p>",
        "id": 213715864,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603041336
    },
    {
        "content": "<p>My guess is either in libc (which probably needs to be updated for this anyway, somehow) or something in the compiler directly, as we have the special handling of <code>...</code></p>",
        "id": 213715920,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603041374
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/library/core/src/ffi.rs\">https://github.com/rust-lang/rust/blob/master/library/core/src/ffi.rs</a><br>\n<a href=\"https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler/rustc_codegen_ssa/src/mir/mod.rs#L391\">https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler/rustc_codegen_ssa/src/mir/mod.rs#L391</a><br>\n<a href=\"https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler/rustc_codegen_ssa/src/mir/block.rs#L235\">https://github.com/rust-lang/rust/blob/a78a62fc996ba16f7a111c99520b23f77029f4eb/compiler/rustc_codegen_ssa/src/mir/block.rs#L235</a></p>",
        "id": 213716016,
        "sender_full_name": "bjorn3",
        "timestamp": 1603041497
    },
    {
        "content": "<p>Oh right, people are working on defining variadic functions in Rust as well.</p>",
        "id": 213717223,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603043320
    },
    {
        "content": "<p>Forgot about that.</p>",
        "id": 213717224,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603043323
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">fn_abi</span><span class=\"p\">.</span><span class=\"n\">c_variadic</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">arg_index</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">fn_abi</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fx</span><span class=\"p\">.</span><span class=\"n\">monomorphize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arg_decl</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">va_list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PlaceRef</span>::<span class=\"n\">alloca</span><span class=\"p\">(</span><span class=\"n\">bx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">layout_of</span><span class=\"p\">(</span><span class=\"n\">arg_ty</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">bx</span><span class=\"p\">.</span><span class=\"n\">va_start</span><span class=\"p\">(</span><span class=\"n\">va_list</span><span class=\"p\">.</span><span class=\"n\">llval</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">LocalRef</span>::<span class=\"n\">Place</span><span class=\"p\">(</span><span class=\"n\">va_list</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I think that I need to dig into <code>let arg_ty = fx.monomorphize(&amp;arg_decl.ty)</code> to figure out what <code>ty</code> is.</p>",
        "id": 213717250,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603043388
    },
    {
        "content": "<p>or just fix the definition of <code>VaListImpl</code>, I suppose.</p>",
        "id": 213717629,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603043989
    },
    {
        "content": "<p>Am I failing at my boolean / demorgan's law?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code> #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n<span class=\"gd\">-    all(target_arch = \"aarch64\", target_os = \"ios\"),</span>\n<span class=\"gi\">+    all(target_arch = \"aarch64\", any(target_os = \"darwin\", target_os = \"ios\")),</span>\n     target_arch = \"wasm32\",\n     target_arch = \"asmjs\",\n     windows\n</code></pre></div>\n\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>     #[cfg(all(\n         any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n<span class=\"gd\">-        any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),</span>\n<span class=\"gi\">+        any(not(target_arch = \"aarch64\"), not(target_os = \"darwin\"), not(target_os = \"ios\")),</span>\n         not(target_arch = \"wasm32\"),\n         not(target_arch = \"asmjs\"),\n         not(windows)\n</code></pre></div>",
        "id": 213719046,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603046165
    },
    {
        "content": "<p>are they supposed to be opposite?</p>",
        "id": 213719078,
        "sender_full_name": "Diggsey",
        "timestamp": 1603046255
    },
    {
        "content": "<p>they aren't opposite</p>",
        "id": 213719125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603046288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yes - there will never be an OS that's both darwin and IOS</p>",
        "id": 213719127,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603046297
    },
    {
        "content": "<p>I think you want <code>all(not(darwin), not(ios))</code>? Not sure what this is doing though</p>",
        "id": 213719140,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603046319
    },
    {
        "content": "<p>(I've never liked <code>cfg</code> syntax for exactly this reason, it's hard to think about)</p>",
        "id": 213719220,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603046405
    },
    {
        "content": "<p>We need a <code>cfg_if_else</code> for this, or at least a convention to put <code>not</code> on the outside so that people don't have to do demorgan in their heads</p>",
        "id": 213719226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603046413
    },
    {
        "content": "<p>it reminds me a bit of <code>enable_if_t</code> for doing static if in C++ template metaprogramming</p>",
        "id": 213719237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603046455
    },
    {
        "content": "<p>if the second is supposed to be opposite the first and you want to push \"not\" in, then it should be <code>any(not(target_arch = \"aarch64\"), all(not(target_os = \"darwin\"), not(target_os = \"ios\")))</code></p>",
        "id": 213719245,
        "sender_full_name": "Diggsey",
        "timestamp": 1603046467
    },
    {
        "content": "<blockquote>\n<p>you want to push \"not\" in</p>\n</blockquote>\n<p><em>I</em> don't want to, but I'm trying to adhere to the surrounding convention :-)</p>",
        "id": 213719523,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603046895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Where.20is.20.60va_list.60.20defined.20for.20FFI.3F/near/213719226\">said</a>:</p>\n<blockquote>\n<p>We need a [...]</p>\n</blockquote>\n<p>... way to create local cfg abstractions (or ideally any kind of annotation abstractions) <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 213719800,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603047264
    },
    {
        "content": "<p><code>#[cfg(va_list_is_opaque_pointer)]</code></p>",
        "id": 213719809,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603047291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Where.20is.20.60va_list.60.20defined.20for.20FFI.3F/near/213719226\">said</a>:</p>\n<blockquote>\n<p>We need a <code>cfg_if_else</code></p>\n</blockquote>\n<p>There is <a href=\"https://crates.io/crates/cfg-if\">https://crates.io/crates/cfg-if</a></p>",
        "id": 213719827,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603047324
    },
    {
        "content": "<p>Sigh. PROTIP: the os is \"macos\", not \"darwin\", even though the target is darwin.</p>",
        "id": 213733536,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603067375
    },
    {
        "content": "<p>Oh, now I get a segfault in rustc</p>",
        "id": 213734495,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069056
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>* thread #2, name = &#39;rustc&#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n  * frame #0: 0x0000000101cfb840 librustc_driver-1fe4ad1832b7fa58.dylib`llvm::PointerType::get(llvm::Type*, unsigned int) + 44\n    frame #1: 0x00000001006e1c4c librustc_driver-1fe4ad1832b7fa58.dylib`llvm::GetElementPtrInst::getGEPReturnType(llvm::Type*, llvm::Value*, llvm::ArrayRef&lt;llvm::Value*&gt;) + 84\n    frame #2: 0x00000001006e1b8c librustc_driver-1fe4ad1832b7fa58.dylib`llvm::GetElementPtrInst::Create(llvm::Type*, llvm::Value*, llvm::ArrayRef&lt;llvm::Value*&gt;, llvm::Twine const&amp;, llvm::Instruction*) + 124\n    frame #3: 0x0000000100743960 librustc_driver-1fe4ad1832b7fa58.dylib`llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(llvm::Type*, llvm::Value*, unsigned int, unsigned int, llvm::Twine const&amp;) + 232\n    frame #4: 0x0000000101c66b28 librustc_driver-1fe4ad1832b7fa58.dylib`LLVMBuildStructGEP + 100\n    frame #5: 0x000000010056fa7c librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_llvm::va_arg::emit_va_arg::hbd12257ead86c097 + 1460\n    frame #6: 0x0000000100551380 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_llvm::intrinsic::_$LT$impl$u20$rustc_codegen_ssa..traits..intrinsic..IntrinsicCallMethods$u20$for$u20$rustc_codegen_llvm..builder..Builder$GT$::codegen_intrinsic_call::h2c93142c8bff4ed8 + 3780\n    frame #7: 0x000000010045e1f0 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_ssa::mir::intrinsic::_$LT$impl$u20$rustc_codegen_ssa..mir..FunctionCx$LT$Bx$GT$$GT$::codegen_intrinsic_call::hf721e1c1185ca1c9 + 8300\n    frame #8: 0x0000000100455260 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_ssa::mir::block::_$LT$impl$u20$rustc_codegen_ssa..mir..FunctionCx$LT$Bx$GT$$GT$::codegen_call_terminator::h64e297c7563c6ca0 + 5556\n    frame #9: 0x00000001004513d0 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_ssa::mir::block::_$LT$impl$u20$rustc_codegen_ssa..mir..FunctionCx$LT$Bx$GT$$GT$::codegen_block::h15827faf80ad9e38 + 3496\n    frame #10: 0x000000010044f914 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_ssa::mir::codegen_mir::h5646b40052194582 + 2880\n    frame #11: 0x000000010050c364 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_ssa::base::codegen_instance::h073fedb73c021f27 + 356\n    frame #12: 0x000000010056de78 librustc_driver-1fe4ad1832b7fa58.dylib`_$LT$rustc_middle..mir..mono..MonoItem$u20$as$u20$rustc_codegen_ssa..mono_item..MonoItemExt$GT$::define::ha14ac71902a89ca8 + 64\n    frame #13: 0x000000010041d2dc librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_llvm::base::compile_codegen_unit::module_codegen::h6a768c7237e0c183 + 424\n    frame #14: 0x000000010049383c librustc_driver-1fe4ad1832b7fa58.dylib`rustc_query_system::dep_graph::graph::DepGraph$LT$K$GT$::with_task::h117a820fa292fd67 + 384\n    frame #15: 0x000000010041cf34 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_llvm::base::compile_codegen_unit::h70551f046a3de22d + 404\n    frame #16: 0x000000010050ab80 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_ssa::base::codegen_crate::h2a4ba4a5983f2453 + 3452\n    frame #17: 0x0000000100541eb4 librustc_driver-1fe4ad1832b7fa58.dylib`_$LT$rustc_codegen_llvm..LlvmCodegenBackend$u20$as$u20$rustc_codegen_ssa..traits..backend..CodegenBackend$GT$::codegen_crate::h8e575abce6547418 + 48\n    frame #18: 0x0000000100395614 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_session::utils::_$LT$impl$u20$rustc_session..session..Session$GT$::time::hc81f120b16dab4d2 + 100\n    frame #19: 0x00000001003d0688 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_interface::queries::Queries::ongoing_codegen::ha0f4d22fc34eab33 + 2020\n    frame #20: 0x000000010023cc54 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_interface::queries::_$LT$impl$u20$rustc_interface..interface..Compiler$GT$::enter::h40337dd059b7203c + 1912\n    frame #21: 0x0000000100228000 librustc_driver-1fe4ad1832b7fa58.dylib`rustc_span::with_source_map::h2d1b097bb6a55888 + 316\n    frame #22: 0x0000000100239078 librustc_driver-1fe4ad1832b7fa58.dylib`scoped_tls::ScopedKey$LT$T$GT$::set::h64663797e93bc5ca + 1248\n    frame #23: 0x000000010023f990 librustc_driver-1fe4ad1832b7fa58.dylib`std::sys_common::backtrace::__rust_begin_short_backtrace::h4a633d3102afe952 + 536\n    frame #24: 0x00000001001eb0f0 librustc_driver-1fe4ad1832b7fa58.dylib`core::ops::function::FnOnce::call_once$u7b$$u7b$vtable.shim$u7d$$u7d$::h7ef58e07b333acf7 + 64\n    frame #25: 0x0000000106c59354 libstd-33ceb3979528e430.dylib`std::sys::unix::thread::Thread::new::thread_start::h53fe16d285797710 + 48\n</code></pre></div>",
        "id": 213734714,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069373
    },
    {
        "content": "<p>Of course there's no debug info. Why would there be.</p>",
        "id": 213734811,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069556
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>frame #5: 0x000000010056fa7c librustc_driver-1fe4ad1832b7fa58.dylib`rustc_codegen_llvm::va_arg::emit_va_arg::hbd12257ead86c097 + 1460\n</code></pre></div>\n\n\n</blockquote>\n<p>this seems vaguely relevant</p>",
        "id": 213734854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603069585
    },
    {
        "content": "<p>Absolutely.</p>",
        "id": 213734940,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069741
    },
    {
        "content": "<p>And it's interesting that it's for an argument.</p>",
        "id": 213734960,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069794
    },
    {
        "content": "<blockquote>\n<p>We currently expose the va_arg intrinsic which should emit the correct LLVM for va_arg for the given architecture and OS. We currently use the LLVM va_arg instruction, but it doesn't emit the correct code for some common OSes and architectures causing us to implement the instruction manually (See [src/librustc_codegen_llvm/va_arg.rs] for details). Since we do not</p>\n</blockquote>",
        "id": 213735011,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069852
    },
    {
        "content": "<p>wild.</p>",
        "id": 213735012,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> maybe you might have some context (or additional troubleshooting guidance)</p>",
        "id": 213735020,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603069879
    },
    {
        "content": "<p>build llvm with assertions enabled</p>",
        "id": 213735387,
        "sender_full_name": "nagisa",
        "timestamp": 1603070551
    },
    {
        "content": "<p>you'll get a sensible error message that you'll be able to search for.</p>",
        "id": 213735396,
        "sender_full_name": "nagisa",
        "timestamp": 1603070568
    },
    {
        "content": "<p>Of course I forgot that when rebuilding with debug info. Thank you. (got to 88% of LLVM too)</p>",
        "id": 213735926,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603071466
    },
    {
        "content": "<p>Yeah, the <code>va_arg</code> LLVM intrinsic will not emit the right code in some situations, so we have custom implementations for <code>i686</code> and Aarch64 I believe</p>",
        "id": 213736470,
        "sender_full_name": "dlrobertson",
        "timestamp": 1603072207
    },
    {
        "content": "<p>I'm away from a computer right now, so I won't be much help, but I can follow up tomorrow</p>",
        "id": 213736486,
        "sender_full_name": "dlrobertson",
        "timestamp": 1603072244
    },
    {
        "content": "<p>And I agree that the <code>cfg</code>s in the <code>VaList</code> implementation are brutal... I would love it if we could find a way to use something like <code>cfg_if</code></p>",
        "id": 213736524,
        "sender_full_name": "dlrobertson",
        "timestamp": 1603072317
    },
    {
        "content": "<p>There is zero rush on any of this. I might poke at it for 15 minutes at a time every few days <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213737838,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603074403
    },
    {
        "content": "<blockquote>\n<p>we have custom implementations for <code>i686</code> and Aarch64 I believe</p>\n</blockquote>\n<p>Any pointers to where that code is? (I haven’t looked at all)</p>",
        "id": 213737868,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603074466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>------------------------------------------\nstderr:\n------------------------------------------\nAssertion failed: (Ty &amp;&amp; &quot;Invalid GetElementPtrInst indices for type!&quot;), function checkGEPType, file /Users/shepmaster/Projects/rust/src/llvm-project/llvm/include/llvm/IR/Instructions.h, line 897.\n</code></pre></div>",
        "id": 213780995,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1603112466
    }
]