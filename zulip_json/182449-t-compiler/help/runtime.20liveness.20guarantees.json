[
    {
        "content": "<p>I'm curious about what (if any) guarantees are given about the liveness of references at runtime. Consider the function below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Lots of other unrelated code goes here...</span>\n\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Assuming that if statically we've determined that the reference to <code>x</code> must live until the end of the call to <code>foo</code>, is the runtime going to ensure it can never die early? If Rust (or LLVM) realises that the reference on the stack (or in a register) can be overwritten early [because it's no longer used] -will it? To put another way: if semantically <code>x</code> lives until the end of <code>foo</code>, can I be sure that for the duration of <code>foo</code>'s stack frame, there will always be a valid reference to <code>x</code> either in a register, or on its frame?</p>",
        "id": 226575693,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1613509246
    },
    {
        "content": "<p>No, the compiler is free to remove the heap allocation and any <code>&amp;self</code> parameter of <code>bar</code> if it doesn't change the observable behavior of the program</p>",
        "id": 226580768,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613511579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223286\">@Jake Hughes</span> See this codegen test for a simple demo: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/codegen/alloc-optimisation.rs\">https://github.com/rust-lang/rust/blob/master/src/test/codegen/alloc-optimisation.rs</a></p>",
        "id": 226581279,
        "sender_full_name": "scottmcm",
        "timestamp": 1613511830
    },
    {
        "content": "<p>I see. And this is also true if the heap allocation wasn't removed though: is the compiler obliged to keep a reference to <code>x</code> around until the end of <code>foo</code> in that case, or can it be removed early if it doesn't change the observable behaviour?</p>",
        "id": 226587198,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1613513774
    },
    {
        "content": "<p>The compiler is allowed to do anything to the program as long as the observable behavior is preserved</p>",
        "id": 226587777,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1613514120
    },
    {
        "content": "<p>(And registers and stack frames and such aren't deemed observable, because that would be a huge restriction on the optimizer.)</p>",
        "id": 226590487,
        "sender_full_name": "scottmcm",
        "timestamp": 1613515761
    },
    {
        "content": "<p>Thank you both, this is really useful.</p>",
        "id": 226591370,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1613516303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/runtime.20liveness.20guarantees/near/226590487\">said</a>:</p>\n<blockquote>\n<p>(And registers and stack frames and such aren't deemed observable, because that would be a huge restriction on the optimizer.)</p>\n</blockquote>\n<p>Barring uses of inline assembly though.</p>",
        "id": 226600636,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613523348
    }
]