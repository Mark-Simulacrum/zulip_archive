[
    {
        "content": "<p>Hello, everyone. I am currently debugging <a href=\"https://github.com/rust-lang/rust/issues/88884\">https://github.com/rust-lang/rust/issues/88884</a> and I made a finding which I do not completely understand. The code I am debugging is here:</p>\n<div class=\"codehilite\"><pre><span></span><code>fn ident&lt;&#39;a&gt;(arg: &amp;&#39;a &amp;&#39;a ()) -&gt; &amp;&#39;a &amp;&#39;a () { arg }\nfn do_nothing&lt;&#39;z&gt;(arg: &amp;&#39;z ()) {\n    (|s: &amp;&#39;z ()| s)(ident(&amp;arg)); //~ ERROR `arg` does not live long enough [E0597]\n}\nfn main() {}\n</code></pre></div>\n<p>I ran this with both <code>do_nothing&lt;'z&gt;</code> (which correctly results in a compiler error) and <code>do_nothing&lt;'z: 'z&gt;</code>(which incorrectly compiles successfully). After a period of debugging, I added the following debug statements to the <code>region_contains</code> method (<a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_borrowck/src/region_infer/mod.rs#L517\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_borrowck/src/region_infer/mod.rs#L517</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code>        debug!(&quot;region_contains: {:?}&quot;, self.universal_regions);\n        debug!(&quot;region_contains: {:?} {:?}&quot;, scc, self.scc_values.locations_outlived_by(scc).collect::&lt;Vec&lt;_&gt;&gt;());\n</code></pre></div>\n<p>and got the following in the first case:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_borrowck::region_infer region_contains: UniversalRegions { indices: UniversalRegionIndices { indices: {ReFree(DefId(0:5 ~ issue_88884_lifetime_does_not_live_long_enough[ed77]::do_nothing), BrNamed(DefId(0:6 ~ issue_88884_lifetime_does_not_live_long_enough[ed77]::do_nothing::&#39;z), &#39;z)): &#39;_#1r, ReStatic: &#39;_#0r} }, fr_static: &#39;_#0r, fr_fn_body: &#39;_#2r, first_extern_index: 1, first_local_index: 1, num_universals: 3, root_empty: &#39;_#3r, defining_ty: FnDef(DefId(0:5 ~ issue_88884_lifetime_does_not_live_long_enough[ed77]::do_nothing), []), unnormalized_output_ty: (), unnormalized_input_tys: [&amp;()], yield_ty: None }\nDEBUG rustc_borrowck::region_infer region_contains: ConstraintSccIndex(18) [bb0[0], bb0[1], bb0[2], bb0[3], bb0[4], bb0[5], bb0[6], bb0[7], bb0[8], bb0[9], bb0[10], bb0[11], bb1[0], bb1[1], bb1[2], bb1[3], bb2[0], bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb2[7], bb3[0]]\n</code></pre></div>\n<p>while in the second case:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_borrowck::region_infer region_contains: UniversalRegions { indices: UniversalRegionIndices { indices: {ReEarlyBound(0, &#39;z): &#39;_#1r, ReStatic: &#39;_#0r} }, fr_static: &#39;_#0r, fr_fn_body: &#39;_#2r, first_extern_index: 1, first_local_index: 2, num_universals: 3, root_empty: &#39;_#3r, defining_ty: FnDef(DefId(0:5 ~ issue_88884_lifetime_does_not_live_long_enough[ed77]::do_nothing), [&#39;_#1r]), unnormalized_output_ty: (), unnormalized_input_tys: [&amp;()], yield_ty: None }\nDEBUG rustc_borrowck::region_infer region_contains: ConstraintSccIndex(28) [bb0[2], bb0[3], bb0[4], bb0[5], bb0[6], bb0[7], bb0[8], bb0[9], bb0[10], bb0[11], bb1[0], bb1[1], bb1[2], bb1[3]]\n</code></pre></div>\n<p>From looking at the MIR body (which I can paste if someone wants to look at it), it seems that in the first case, the borrow <code>&amp;arg</code> lives for the whole <code>do_nothing</code> function (which makes sense, since the borrow needs to live for the whole region <code>'z</code> for the program to typecheck) and in the second case, the borrow <code>&amp;arg</code> only lives for the duration of the closure <code>|s: &amp;'z ()| s</code>. I am not sure why the borrow does not live as long in the second case, but I noticed that the <code>'z</code> region is represented in the <code>UniversalRegionIndices</code> as a <code>ReFree</code> in the first case, while it is represented as <code>ReEarlyBound(0, 'z)</code> in the second case. I tried reading <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.RegionKind.html#bound-regions\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.RegionKind.html#bound-regions</a>, but I did not completely understand the purpose of early-bound regions. Why would adding the bound <code>'z: 'z</code> turn the free region <code>'z</code> into an early-bound region? And where in the borrow checker is this decision between making a lifetime parameter a free region vs an early-bound region made? Thank you for the explanation, I would really appreciate it.</p>",
        "id": 253991024,
        "sender_full_name": "Noble Mushtak (he/him)",
        "timestamp": 1632106191
    },
    {
        "content": "<p>Any bound on 'z will make no longer eligible for late binding, since you can't currently have where clauses on HRTB.</p>",
        "id": 253992578,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632107859
    },
    {
        "content": "<p>It seems that we currently behave as if the lifetime on closure param is not specified? That does seem wrong to me, but the effect of  'z: 'z turning 'z into early-bound is indeed working as intended.</p>",
        "id": 253993176,
        "sender_full_name": "Gary Guo",
        "timestamp": 1632108550
    }
]