[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/721268583759224d0f6476e0b8b196cc8afbdea0/src/librustc_mir/build/scope.rs#L693-L739\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/721268583759224d0f6476e0b8b196cc8afbdea0/src/librustc_mir/build/scope.rs#L693-L739\">https://github.com/rust-lang/rust/blob/721268583759224d0f6476e0b8b196cc8afbdea0/src/librustc_mir/build/scope.rs#L693-L739</a><br>\n^ this call to <code>invalidate_cache</code> causes the unwind cache for every drop in an inner scope to be invalidated. Can someone explain why this is necessary?</p>",
        "id": 166769392,
        "sender_full_name": "tmandry",
        "timestamp": 1559085638
    },
    {
        "content": "<p>i.e. if we added <code>drop(new)</code> to the outer scope, presumably none of the drops that would already added to the inner scope would ever need to go through this new drop</p>",
        "id": 166769533,
        "sender_full_name": "tmandry",
        "timestamp": 1559085767
    },
    {
        "content": "<p>or are there cases where you would need to?</p>",
        "id": 166769561,
        "sender_full_name": "tmandry",
        "timestamp": 1559085788
    },
    {
        "content": "<p>cache here is for entry points, not for drops themselves.</p>",
        "id": 166769823,
        "sender_full_name": "nagisa",
        "timestamp": 1559085998
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 166769923,
        "sender_full_name": "tmandry",
        "timestamp": 1559086083
    },
    {
        "content": "<p>For reference I wrote that comment and the caching code.</p>",
        "id": 166769954,
        "sender_full_name": "nagisa",
        "timestamp": 1559086138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> entry points to what? I'm specifically referring to this line where the drop cache is invalidated: <a href=\"https://github.com/rust-lang/rust/blob/721268583759224d0f6476e0b8b196cc8afbdea0/src/librustc_mir/build/scope.rs#L245\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/721268583759224d0f6476e0b8b196cc8afbdea0/src/librustc_mir/build/scope.rs#L245\">https://github.com/rust-lang/rust/blob/721268583759224d0f6476e0b8b196cc8afbdea0/src/librustc_mir/build/scope.rs#L245</a></p>",
        "id": 166769970,
        "sender_full_name": "tmandry",
        "timestamp": 1559086151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> sorry, I'd already asked eddyb to help and they couldn't find the topic</p>",
        "id": 166769977,
        "sender_full_name": "tmandry",
        "timestamp": 1559086170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> but your help is welcome :)</p>",
        "id": 166769995,
        "sender_full_name": "tmandry",
        "timestamp": 1559086202
    },
    {
        "content": "<p>So if we did not invalidate the cache for \"middle scope\", its branch would still be into the \"old\" <del>inner</del> outer scope which may potentially contain new drops.</p>",
        "id": 166770062,
        "sender_full_name": "nagisa",
        "timestamp": 1559086233
    },
    {
        "content": "<p>it is quite possible that the cache invalidation here is overzealous but it is also necessary at the granularity of invalidation that we currently have.</p>",
        "id": 166770082,
        "sender_full_name": "nagisa",
        "timestamp": 1559086268
    },
    {
        "content": "<p>do you mean the \"old\" outer scope? I don't think the middle scope would branch to the inner scope</p>",
        "id": 166770183,
        "sender_full_name": "tmandry",
        "timestamp": 1559086412
    },
    {
        "content": "<p>To answer the question about entry points: the cache maps <code>scope -&gt; bb</code> if my memory serves me right and it is possible for a scope to gain new drops as the building of MIR goes on. So if a drop gets added into some scope thatâ€™s more inner the whole chain of scopes and their basic blocks must be rebuilt to eventually reference some basic block with the new drop included</p>",
        "id": 166770184,
        "sender_full_name": "nagisa",
        "timestamp": 1559086413
    },
    {
        "content": "<blockquote>\n<p>do you mean the \"old\" outer scope? I don't think the middle scope would branch to the inner scope</p>\n</blockquote>\n<p>Yeah I meant outer scope.</p>",
        "id": 166770381,
        "sender_full_name": "nagisa",
        "timestamp": 1559086603
    },
    {
        "content": "<p>I think part of what's confusing in this conversation is that there are two caches, one on the scope level (<code>cached_exits</code>) and one on the per-drop level for unwinds</p>",
        "id": 166770390,
        "sender_full_name": "tmandry",
        "timestamp": 1559086620
    },
    {
        "content": "<p>I'm specifically asking about the unwind cache</p>",
        "id": 166770400,
        "sender_full_name": "tmandry",
        "timestamp": 1559086629
    },
    {
        "content": "<p>not sure if that was clear</p>",
        "id": 166770536,
        "sender_full_name": "tmandry",
        "timestamp": 1559086753
    },
    {
        "content": "<p>The explanation applies as much there as it does here.</p>",
        "id": 166770547,
        "sender_full_name": "nagisa",
        "timestamp": 1559086771
    },
    {
        "content": "<p>Like I said, it is likely that the invalidation implementation is somewhat overzealous, but it is only because it is not granular enough to know what exactly it needs to invalidate.</p>",
        "id": 166770617,
        "sender_full_name": "nagisa",
        "timestamp": 1559086824
    },
    {
        "content": "<p>Hmm okay, so just to make sure, this is for the situation where we add a new drop to an outer/middle scope, and we need to invalidate the cached unwind blocks of more \"inner\" scopes</p>",
        "id": 166770777,
        "sender_full_name": "tmandry",
        "timestamp": 1559087024
    },
    {
        "content": "<p>Well, entry points at certain scopes, but yeah.</p>",
        "id": 166770853,
        "sender_full_name": "nagisa",
        "timestamp": 1559087095
    },
    {
        "content": "<p>What gets cached is an entry point to a whole chain of drops until the the exit from the function. So everything more-inner than the added drop must be invalidated.</p>",
        "id": 166770952,
        "sender_full_name": "nagisa",
        "timestamp": 1559087166
    },
    {
        "content": "<p>ok I think this is where my understanding of the code was wrong</p>",
        "id": 166770953,
        "sender_full_name": "tmandry",
        "timestamp": 1559087167
    },
    {
        "content": "<p>I was assuming that we would only add the drop to the outer scope at this point, if the drop occurs after the inner scope has already ended</p>",
        "id": 166770958,
        "sender_full_name": "tmandry",
        "timestamp": 1559087180
    },
    {
        "content": "<p>but if the scope had already ended at this point in the MIR, presumably it wouldn't be on our stack of scopes</p>",
        "id": 166770981,
        "sender_full_name": "tmandry",
        "timestamp": 1559087210
    },
    {
        "content": "<p>I'm basically trying to imagine a situation where this actually occurs when building the MIR :)</p>",
        "id": 166771060,
        "sender_full_name": "tmandry",
        "timestamp": 1559087303
    },
    {
        "content": "<p>Inner-most scopes come and go, yes, but they can continue to add drops into scopes that are more outer than the innermost scope. For example <code>let x = { let y = Droppable; Droppable }</code> adds a drop to an inner scope as a part of an assignment to <code>y</code> and another one to a more outer scope as a part of assignment to <code>x</code>.</p>",
        "id": 166771084,
        "sender_full_name": "nagisa",
        "timestamp": 1559087356
    },
    {
        "content": "<p>even though both drops get added when the innermost scope is on the scope stack.</p>",
        "id": 166771116,
        "sender_full_name": "nagisa",
        "timestamp": 1559087399
    },
    {
        "content": "<p>(AFAIR anyway, it has been a long while since I dealt with that code).</p>",
        "id": 166771189,
        "sender_full_name": "nagisa",
        "timestamp": 1559087430
    },
    {
        "content": "<p>There are a number of complications when building match code for example.</p>",
        "id": 166771195,
        "sender_full_name": "nagisa",
        "timestamp": 1559087441
    },
    {
        "content": "<p>We used to have a case where we would build N identical drop chains for each match, which was the motivation for this code.</p>",
        "id": 166771240,
        "sender_full_name": "nagisa",
        "timestamp": 1559087488
    },
    {
        "content": "<p>ahh okay</p>",
        "id": 166771306,
        "sender_full_name": "tmandry",
        "timestamp": 1559087530
    },
    {
        "content": "<p>even though the match was considered all one scope</p>",
        "id": 166771310,
        "sender_full_name": "tmandry",
        "timestamp": 1559087542
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/34307\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/34307\">https://github.com/rust-lang/rust/pull/34307</a> has some pretty images.</p>",
        "id": 166771311,
        "sender_full_name": "nagisa",
        "timestamp": 1559087547
    },
    {
        "content": "<p>(namely <a href=\"https://cloud.githubusercontent.com/assets/679122/16122708/ce0024d8-33f0-11e6-93c2-e1c44b910db2.png\" target=\"_blank\" title=\"https://cloud.githubusercontent.com/assets/679122/16122708/ce0024d8-33f0-11e6-93c2-e1c44b910db2.png\">https://cloud.githubusercontent.com/assets/679122/16122708/ce0024d8-33f0-11e6-93c2-e1c44b910db2.png</a> and <a href=\"https://cloud.githubusercontent.com/assets/679122/16122806/294fb16e-33f1-11e6-95f6-16c5438231af.png\" target=\"_blank\" title=\"https://cloud.githubusercontent.com/assets/679122/16122806/294fb16e-33f1-11e6-95f6-16c5438231af.png\">https://cloud.githubusercontent.com/assets/679122/16122806/294fb16e-33f1-11e6-95f6-16c5438231af.png</a>)</p>\n<div class=\"message_inline_image\"><a href=\"https://cloud.githubusercontent.com/assets/679122/16122708/ce0024d8-33f0-11e6-93c2-e1c44b910db2.png\" target=\"_blank\" title=\"https://cloud.githubusercontent.com/assets/679122/16122708/ce0024d8-33f0-11e6-93c2-e1c44b910db2.png\"><img src=\"https://cloud.githubusercontent.com/assets/679122/16122708/ce0024d8-33f0-11e6-93c2-e1c44b910db2.png\"></a></div><div class=\"message_inline_image\"><a href=\"https://cloud.githubusercontent.com/assets/679122/16122806/294fb16e-33f1-11e6-95f6-16c5438231af.png\" target=\"_blank\" title=\"https://cloud.githubusercontent.com/assets/679122/16122806/294fb16e-33f1-11e6-95f6-16c5438231af.png\"><img src=\"https://cloud.githubusercontent.com/assets/679122/16122806/294fb16e-33f1-11e6-95f6-16c5438231af.png\"></a></div>",
        "id": 166771340,
        "sender_full_name": "nagisa",
        "timestamp": 1559087592
    },
    {
        "content": "<p>that is quite a cleanup :D</p>",
        "id": 166771353,
        "sender_full_name": "tmandry",
        "timestamp": 1559087617
    },
    {
        "content": "<p>(no pun intended)</p>",
        "id": 166771356,
        "sender_full_name": "tmandry",
        "timestamp": 1559087625
    },
    {
        "content": "<p>Okay, I feel like I kind of understand this now. Thanks XD</p>",
        "id": 166771466,
        "sender_full_name": "tmandry",
        "timestamp": 1559087759
    },
    {
        "content": "<p>Youâ€™re welcome.</p>",
        "id": 166771573,
        "sender_full_name": "nagisa",
        "timestamp": 1559087831
    }
]