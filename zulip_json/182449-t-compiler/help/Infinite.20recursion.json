[
    {
        "content": "<p>Recently, I opened a bug (<a href=\"https://github.com/rust-lang/rust/issues/81316\">https://github.com/rust-lang/rust/issues/81316</a>) about infinite recursion causing a stack overflow at runtime, with no compiler warning/error issued. I understand that the related lint is working as intended, but don't understand how the underlying pattern doesn't represent unsoundness in a 100% \"safe\" Rust program.</p>\n<p>Are there situations where this kind of infinite recursion is useful and/or terminates? Are there ways to avoid stack overflows without causing breaking changes in otherwise well-behaving programs?</p>\n<p>Thanks in advance for any feedback.</p>",
        "id": 224210821,
        "sender_full_name": "nyms",
        "timestamp": 1611766378
    },
    {
        "content": "<p>Why is this unsound? The overflow is caught by the runtime</p>",
        "id": 224211127,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611766494
    },
    {
        "content": "<p>so, the sigabrt and core dump doesn't cause any memory corruption? Maybe I am confused, and thought the stack overflow was actually overflowing the stack, and not just detecting that an overflow is occurring...</p>",
        "id": 224211801,
        "sender_full_name": "nyms",
        "timestamp": 1611766776
    },
    {
        "content": "<p>It is impossible to avoid stack overflows without an analysis of the stack usage of every function within a call graph and knowledge about the actual stack size. The actual stack size is only unknown at runtime due to <code>ulimit -s</code> and <code>thread::Builder::stack_size</code>. Analysis of every function would have to omit all possible sources of unbounded recursion, even when in practise the amount of recursion is low enough to not overflow the stack.</p>",
        "id": 224211806,
        "sender_full_name": "bjorn3",
        "timestamp": 1611766780
    },
    {
        "content": "<p>It does overflow the stack but due to the combination of stack probes and a stack guard it will always abort.</p>",
        "id": 224211913,
        "sender_full_name": "bjorn3",
        "timestamp": 1611766813
    },
    {
        "content": "<p>so, is there memory corruption, or no?</p>",
        "id": 224211984,
        "sender_full_name": "nyms",
        "timestamp": 1611766841
    },
    {
        "content": "<p>no</p>",
        "id": 224212089,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611766881
    },
    {
        "content": "<p>The situation is a bit more muddied on embedded environments where there may or may not be memory  protection - there even a deep call tree can corrupt random memory regions, but well, there isn't really anything to do about that, really.</p>",
        "id": 224212122,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611766895
    },
    {
        "content": "<p>there is, you need to link twice <a href=\"https://github.com/knurling-rs/flip-link\">https://github.com/knurling-rs/flip-link</a></p>",
        "id": 224212192,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611766919
    },
    {
        "content": "<p>But on hosted platforms, a guard page is used to detect stack overflows before they can do any damage</p>",
        "id": 224212318,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611766951
    },
    {
        "content": "<p>Oh I forgot about that. My mistake. Remember the time when lld could do that while linking only once? Worked for like 2 weeks <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 224212349,
        "sender_full_name": "Dániel Buga",
        "timestamp": 1611766964
    },
    {
        "content": "<p>You could also do bounds checking in the function prologue, although that's definitely not zero cost</p>",
        "id": 224212523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611767023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Infinite.20recursion/near/224212192\">said</a>:</p>\n<blockquote>\n<p>there is, you need to link twice <a href=\"https://github.com/knurling-rs/flip-link\">https://github.com/knurling-rs/flip-link</a></p>\n</blockquote>\n<p>Is there a generic way to do that across platforms, or do the protections depend too much on memory layout?</p>",
        "id": 224213006,
        "sender_full_name": "nyms",
        "timestamp": 1611767187
    },
    {
        "content": "<p>flip-link only works on embedded platforms with static memory layout</p>",
        "id": 224213609,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611767436
    },
    {
        "content": "<p>but in theory it is (or could easily be) cross-platform</p>",
        "id": 224213664,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611767457
    },
    {
        "content": "<p>it depends on the platform support crate using the \"common\" symbol/section names, I think</p>",
        "id": 224213743,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611767483
    }
]