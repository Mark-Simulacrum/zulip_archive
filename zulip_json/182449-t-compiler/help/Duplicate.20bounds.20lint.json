[
    {
        "content": "<blockquote>\n<p>I'm sufficiently sure that the check should not be HIR-based.<br>\nBefore type checking all bounds are converted to type representation (struct Predicate or something like that).<br>\nIIRC, they are \"normalized\" and interned in process (with aliases removed etc.), making semantic bound comparisons easy.<br>\nThe lint should use that type checker representation and semantic comparisons, IMO.<br>\nThe Trait&lt;A&gt; + Trait&lt;B&gt; false positive in particular is unacceptable.</p>\n</blockquote>",
        "id": 250232168,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629572664
    },
    {
        "content": "<p>Is there an example of a lint that runs at this level for reference?</p>",
        "id": 250232174,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1629572682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"363998\">@Ibraheem Ahmed</span> I think the simplest approach would be to manually emit a lint using <code>tcx.struct_span_lint_hir</code></p>",
        "id": 250232414,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629572957
    },
    {
        "content": "<p>You should be able to modify <code>gather_explicit_predicates_of</code>, which converts user-written HIR predicates to <code>Predicates</code>: <a href=\"https://github.com/rust-lang/rust/blob/99b73e81b351d036449e76ad753160853625c5b6/compiler/rustc_typeck/src/collect.rs#L2308\">https://github.com/rust-lang/rust/blob/99b73e81b351d036449e76ad753160853625c5b6/compiler/rustc_typeck/src/collect.rs#L2308</a></p>",
        "id": 250232503,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1629573064
    }
]