[
    {
        "content": "<p>As was <a href=\"https://github.com/rust-lang/rust/pull/94276#discussion_r817919798\">suggested in a PR comment</a>, I made a change to short-circuit in <code>is_copy_modulo_regions</code> for obvious types.  To my surprise, though, that caused an ICE in a test.</p>\n<p>Even just the following is sufficient to cause it:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\"> </span>    pub fn is_copy_modulo_regions(<span class=\"w\"></span>\n<span class=\"w\"> </span>        self,<span class=\"w\"></span>\n<span class=\"w\"> </span>        tcx_at: TyCtxtAt&lt;'tcx&gt;,<span class=\"w\"></span>\n<span class=\"w\"> </span>        param_env: ty::ParamEnv&lt;'tcx&gt;,<span class=\"w\"></span>\n<span class=\"w\"> </span>    ) -&gt; bool {<span class=\"w\"></span>\n<span class=\"gd\">-        tcx_at.is_copy_raw(param_env.and(self))</span><span class=\"w\"></span>\n<span class=\"gi\">+        if let ty::Uint(ty::UintTy::U32) = self.kind() {</span><span class=\"w\"></span>\n<span class=\"gi\">+            true</span><span class=\"w\"></span>\n<span class=\"gi\">+        } else {</span><span class=\"w\"></span>\n<span class=\"gi\">+            tcx_at.is_copy_raw(param_env.and(self))</span><span class=\"w\"></span>\n<span class=\"gi\">+        }</span><span class=\"w\"></span>\n<span class=\"w\"> </span>    }<span class=\"w\"></span>\n</code></pre></div>\n<p>Which confuses me, as I'm confident that <code>u32</code> is definitely <code>Copy</code>, and I thought that, because it's a query, skipping a call to <code>is_copy_raw</code> should be fine (modulo lints, perhaps).</p>\n<p>Is this actually a problem?  Or am I misunderstanding something?</p>\n<p>I've put the minimal change up at <a href=\"https://github.com/rust-lang/rust/pull/94660\">https://github.com/rust-lang/rust/pull/94660</a> to show the failure:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: broken MIR in DefId(0:3 ~ params_on_registers[6840]::entry_function) (NoSolution): could not prove Binder(TraitPredicate(&lt;u32 as Copy&gt;, polarity:Positive), [])\n   = note: delayed at compiler/rustc_borrowck/src/type_check/canonical.rs:150:13\n</code></pre></div>\n<p>(I'm not blocked by this, just puzzled.)</p>",
        "id": 274284133,
        "sender_full_name": "scottmcm",
        "timestamp": 1646540822
    },
    {
        "content": "<p><code>impl Copy for u32 {}</code> should be part of the core. Failing <code>no_core</code> test doesn't contain the impl.</p>",
        "id": 274285629,
        "sender_full_name": "tm",
        "timestamp": 1646543057
    }
]