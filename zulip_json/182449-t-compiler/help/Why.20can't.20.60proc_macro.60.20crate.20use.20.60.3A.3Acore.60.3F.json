[
    {
        "content": "<p>Per <a href=\"https://github.com/rust-lang/rust/blob/master/library/proc_macro/Cargo.toml\">https://github.com/rust-lang/rust/blob/master/library/proc_macro/Cargo.toml</a>, the <code>proc_macro</code> crate has a manual dependency on <code>std</code>, but otherwise doesn't look \"special\" in any way.</p>\n<p>It's an edition 2018 crate.</p>\n<p>However, trying to use <code>::core::...</code> in it doesn't work., like it would in any normal crate (nor does <code>core::...</code>). <code>::std::...</code> does (I guess because there's an <code>--extern</code> flag for it), but not <code>::core::...</code></p>\n<p>Is there some magic somewhere which means that manually specifying a path to <code>std</code> leads to not getting <code>::core</code>? Or some config somewhere which makes it not available by name?</p>",
        "id": 252150323,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630920731
    },
    {
        "content": "<p>You need to add <code>core = { path = \"../core\" }</code> if you want to use <code>::core</code>.</p>",
        "id": 252150474,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920836
    },
    {
        "content": "<p>proc_macro is compiled part of the standard library and as such is compiled with an empty sysroot. This means you have to explicitly specify the dependencies in <code>Cargo.toml</code> even if they normally come from the sysroot.</p>",
        "id": 252150642,
        "sender_full_name": "bjorn3",
        "timestamp": 1630920927
    },
    {
        "content": "<p>Makes sense :) Thanks! Yeah, that was my workaround, but I didn't have the context for why it was necessary</p>",
        "id": 252150732,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630920973
    }
]