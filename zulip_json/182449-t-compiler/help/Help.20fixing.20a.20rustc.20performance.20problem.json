[
    {
        "content": "<p>Hello everyone! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm looking into fixing a problem that's affecting the compile times of a few projects (influxdata/influxdb_iox, apache/arrow-rs, apache/arrow-datafusion). I've been playing around with a reduction of the problem, trying to reduce it more, but I'm not sure if there are more reduction experiments that it would be useful to try. I also have no idea where to start trying to fix the problem... I'd love any ideas anyone has! Here's the issue and the experiments I did today: <a href=\"https://github.com/rust-lang/rust/issues/87012#issuecomment-995262877\">https://github.com/rust-lang/rust/issues/87012#issuecomment-995262877</a></p>",
        "id": 265085686,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639607545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257516\">@Carol (Nichols || Goulding)</span> I know a crash reduction tool - maybe you could adapt it to work for timeouts too? <a href=\"https://github.com/chengniansun/perses\">https://github.com/chengniansun/perses</a></p>",
        "id": 265085977,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639607706
    },
    {
        "content": "<p>if that doesn't work, <a href=\"http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\">http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/</a> has some tips for doing it manually</p>",
        "id": 265086025,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639607736
    },
    {
        "content": "<blockquote>\n<p>Additionally, looking at the chrome profiles of cases that exhibit the problem, it looks like the issue is both that evaluate_obligation is being called many times and that these calls are expensive. The rectangles next to the one I'm hovering over here are all evaluate_obligation:</p>\n</blockquote>\n<p>Have you tried a recent nightly? A fix or partial fix for some obligation evaluation runtime explosions has landed a few days ago.</p>",
        "id": 265087395,
        "sender_full_name": "The 8472",
        "timestamp": 1639608567
    },
    {
        "content": "<p>Oooohhhh crash reduction looks fun!!</p>",
        "id": 265103577,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639620174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> I was using e2116acae 2021-12-05, I'll try a newer one, thank you!</p>",
        "id": 265103666,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639620283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257516\">@Carol (Nichols || Goulding)</span> you might want to see if <a href=\"https://github.com/rust-lang/rust/pull/89831\">https://github.com/rust-lang/rust/pull/89831</a> fixes/improves the compile times for those projects. We ran into a compile time regression related to <code>evaluate_obligation</code> in 1.56 and I just confirmed that our build times go from 898 seconds to 34 seconds with that PR.</p>",
        "id": 265104158,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639620818
    },
    {
        "content": "<p>so c5ecc1570 2021-12-15 still has the problem. <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I will try out that PR! thank you!!</p>",
        "id": 265104789,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639621444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I'm not 100% sure I've built/configured rustc with that PR correctly, but if I have.... that PR makes my test case worse :( <code>evaluate_obligation</code> takes 172ms/42% rather than 98ms/31% :(</p>",
        "id": 265170213,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639667739
    },
    {
        "content": "<p>best way to check is probably rustup-toolchain-install-master <a href=\"https://github.com/rust-lang/rust/commit/35198c7a6d25cfbcbf61da23f8a6b22db99eacce\">35198c7a6d25cfbcbf61da23f8a6b22db99eacce</a>, if you can test on x86_64-unknown-linux-gnu</p>",
        "id": 265172012,
        "sender_full_name": "simulacrum",
        "timestamp": 1639668461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what's that hash? should i use the hash of the PR i'm trying to test?</p>",
        "id": 265172279,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639668567
    },
    {
        "content": "<p>most recent try build</p>",
        "id": 265172296,
        "sender_full_name": "simulacrum",
        "timestamp": 1639668581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257516\">@Carol (Nichols || Goulding)</span> Sorry, I should have read your linked post more closely. If <code>evalute_obligation</code> is taking 100ms, then it's almost certainly not the same issue as <a href=\"https://github.com/rust-lang/rust/issues/89831\">#89831</a> fixes.</p>",
        "id": 265173317,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1639668993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> Ah, oh well. Thanks!</p>",
        "id": 265173544,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639669071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257516\">@Carol (Nichols || Goulding)</span> I'm happy to point a profiler at it and see if anything leaps out at me. Can you give me a link to the most relevant version to profile? (I'm having trouble keeping up with the different versions flying around.) One with an exaggerated version of the problem would be good, though not so exaggerated that it aborts.</p>",
        "id": 265221789,
        "sender_full_name": "nnethercote",
        "timestamp": 1639690013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> Thank you! If you check out <a href=\"https://github.com/integer32llc/rust_issue_87012/commit/c20999e8a971b71e65d0a26f7f1f0cc09bbb3479\">https://github.com/integer32llc/rust_issue_87012/commit/c20999e8a971b71e65d0a26f7f1f0cc09bbb3479</a> that should complete but it's showing it's spending ~64% of the time in evaluate_obligation</p>",
        "id": 265222515,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639690386
    },
    {
        "content": "<p>Will do, thanks</p>",
        "id": 265223424,
        "sender_full_name": "nnethercote",
        "timestamp": 1639690898
    },
    {
        "content": "<p>Just to double check, I did this:</p>\n<ul>\n<li>git clone <a href=\"https://github.com/integer32llc/rust_issue_87012\">https://github.com/integer32llc/rust_issue_87012</a></li>\n<li>cd rust_issue_87012/</li>\n<li>git co <a href=\"https://github.com/rust-lang/rust/commit/c20999e8a971b71e65d0a26f7f1f0cc09bbb3479\">c20999e8a971b71e65d0a26f7f1f0cc09bbb3479</a></li>\n</ul>",
        "id": 265223728,
        "sender_full_name": "nnethercote",
        "timestamp": 1639691064
    },
    {
        "content": "<p>Is that right?</p>",
        "id": 265223736,
        "sender_full_name": "nnethercote",
        "timestamp": 1639691070
    },
    {
        "content": "<p>Should be! If you run ./test.sh, what do you see?</p>",
        "id": 265223831,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639691138
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   Compiling helper_crate v0.1.0 (/home/njn/dev/rustc-perf/collector/benchmarks/rust_issue_87012/helper_crate)\n   Compiling repro_crate v0.1.0 (/home/njn/dev/rustc-perf/collector/benchmarks/rust_issue_87012/repro_crate)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.88s\nthread &#39;main&#39; panicked at &#39;couldn&#39;t read string_data file: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }&#39;, src/libcore/result.rs:1188:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n</code></pre></div>\n<p>but I might not have summary and crox installed</p>",
        "id": 265224126,
        "sender_full_name": "nnethercote",
        "timestamp": 1639691230
    },
    {
        "content": "<p>ahh.</p>",
        "id": 265224382,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639691359
    },
    {
        "content": "<p>No matter, I was going to use different profilers</p>",
        "id": 265224662,
        "sender_full_name": "nnethercote",
        "timestamp": 1639691473
    },
    {
        "content": "<p>But rustc-perf's harness doesn't like the workspace in the Cargo.toml, hmm</p>",
        "id": 265224689,
        "sender_full_name": "nnethercote",
        "timestamp": 1639691492
    },
    {
        "content": "<p>Can I jam them together into a single crate and still see the perf issue?</p>",
        "id": 265224910,
        "sender_full_name": "nnethercote",
        "timestamp": 1639691613
    },
    {
        "content": "<p>no idea!</p>",
        "id": 265225053,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639691694
    },
    {
        "content": "<p>1 sec and I'll try</p>",
        "id": 265225062,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639691701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> yeah if you copy helper_crate/src/lib.rs into repro_crate/src/main.rs, then remove all the <code>helper_crate::</code> from the calls to <code>entry_point</code>, i can remove helper_crate from repro_crate/Cargo.toml and i still see the issue when doing cargo build -p repro_crate</p>",
        "id": 265225743,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639692029
    },
    {
        "content": "<p>i'll clean this up a bit more and push it to a branch too, that's a good minimizer</p>",
        "id": 265225804,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639692062
    },
    {
        "content": "<p>Thanks, I have it working in the rustc-perf harness</p>",
        "id": 265225887,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692114
    },
    {
        "content": "<p>First impression: it doesn't look that different to other profiles...</p>",
        "id": 265225942,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692125
    },
    {
        "content": "<p>:(</p>",
        "id": 265226048,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639692191
    },
    {
        "content": "<p>other profiles spend that much time in evaluate_obligation?</p>",
        "id": 265226250,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639692300
    },
    {
        "content": "<p>I'm using different profilers</p>",
        "id": 265226328,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692346
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[gulf:~/dev/rustc-perf] cgout-more dec09/cgout-Orig-ripgrep-Check-Full | head -11\n               2,061,681,981 TOTAL\n12.5% 12.5%      257,352,501 ./malloc/malloc.c\n 6.6% 19.1%      135,602,671 /home/njn/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.0/src/raw/mod.rs\n 3.0% 22.1%       61,938,565 /home/njn/dev/rust0/library/core/src/ptr/mod.rs\n 2.5% 24.6%       51,535,285 /home/njn/dev/rust0/library/alloc/src/vec/mod.rs\n 2.3% 26.9%       48,440,844 /home/njn/dev/rust0/library/core/src/slice/iter/macros.rs\n 2.0% 28.9%       41,597,709 /home/njn/dev/rust0/compiler/rustc_middle/src/ty/context.rs\n 2.0% 30.9%       40,295,261 /home/njn/dev/rust0/compiler/rustc_middle/src/ty/sty.rs\n 1.9% 32.8%       39,162,515 /home/njn/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.0/src/raw/bitmask.rs\n 1.7% 34.5%       34,553,069 ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S\n 1.7% 36.1%       34,088,744 /home/njn/dev/rust0/library/core/src/num/uint_macros.rs\nclose failed in file object destructor:\nsys.excepthook is missing\nlost sys.stderr\n[gulf:~/dev/rustc-perf] cgout-more dec17/cgout-Orig-repro_crate-Check-Full | head -11\n               4,471,625,012 TOTAL\n12.7% 12.7%      566,100,729 ./malloc/malloc.c\n 5.6% 18.2%      249,952,809 /home/njn/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.0/src/raw/mod.rs\n 5.6% 23.8%      248,715,788 /home/njn/dev/rust0/compiler/rustc_trait_selection/src/traits/select/mod.rs\n 4.5% 28.3%      202,185,949 /home/njn/dev/rust0/compiler/rustc_middle/src/ty/sty.rs\n 3.9% 32.3%      175,388,010 /home/njn/dev/rust0/compiler/rustc_middle/src/ty/context.rs\n 3.9% 36.2%      174,519,694 /home/njn/dev/rust0/compiler/rustc_infer/src/infer/mod.rs\n 3.7% 39.9%      167,516,895 /home/njn/dev/rust0/compiler/rustc_middle/src/ty/subst.rs\n 3.5% 43.4%      157,993,407 /home/njn/dev/rust0/compiler/rustc_middle/src/ty/fold.rs\n 3.1% 46.5%      138,829,272 /home/njn/dev/rust0/library/core/src/ptr/mod.rs\n 2.3% 48.8%      103,072,906 /home/njn/dev/rust0/library/core/src/option.rs\n</code></pre></div>",
        "id": 265226337,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692351
    },
    {
        "content": "<p>That's comparing a profile compiling <code>ripgrep</code> with your example</p>",
        "id": 265226407,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692367
    },
    {
        "content": "<p>Per-file instruction blame</p>",
        "id": 265226424,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692379
    },
    {
        "content": "<p>Some differences, but nothing leaps out as \"whoa\"</p>",
        "id": 265226434,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692391
    },
    {
        "content": "<p>To be clear: I'm not denying there's a problem <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 265226505,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692433
    },
    {
        "content": "<p>Different profilers show up different aspects of the problem, I thought I'd try some different ones to what everyone's already been looking at</p>",
        "id": 265226626,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692499
    },
    {
        "content": "<p>so <code>/home/njn/dev/rust0/compiler/rustc_trait_selection/src/traits/select/mod.rs</code> shows up in the profile for my example but not ripgrep</p>",
        "id": 265226721,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639692562
    },
    {
        "content": "<p>evaluate_obligation is definitely in rustc_trait_selection</p>",
        "id": 265226759,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639692584
    },
    {
        "content": "<p>Things are fairly spread out across that file</p>",
        "id": 265227331,
        "sender_full_name": "nnethercote",
        "timestamp": 1639692801
    },
    {
        "content": "<p>bleh. well now i'm getting unstable fingerprint errors trying to compile rustc with instrumentation on evaluate_obligation. time to take a break. thank you for your help!!!</p>",
        "id": 265228891,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639693640
    },
    {
        "content": "<p><code>rm -r build/&lt;triple&gt;/&lt;affected stage&gt;</code> should solve it</p>",
        "id": 265229211,
        "sender_full_name": "The 8472",
        "timestamp": 1639693810
    },
    {
        "content": "<p>Looking at this example with DHAT (a heap profiler) and it is quite allocation-heavy, more so than normal.</p>",
        "id": 265230454,
        "sender_full_name": "nnethercote",
        "timestamp": 1639694568
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/select/mod.rs#L2334-L2342\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/select/mod.rs#L2334-L2342</a> accounts for about 20% of the allocations</p>",
        "id": 265230467,
        "sender_full_name": "nnethercote",
        "timestamp": 1639694578
    },
    {
        "content": "<p>That flaper87 comment is 7 years old, lol</p>",
        "id": 265230529,
        "sender_full_name": "nnethercote",
        "timestamp": 1639694624
    },
    {
        "content": "<p>I poked around related code recently in <a href=\"https://github.com/rust-lang/rust/pull/91844/\">https://github.com/rust-lang/rust/pull/91844/</a> (currently in the merge queue), there's still room for improvement</p>",
        "id": 265230796,
        "sender_full_name": "nnethercote",
        "timestamp": 1639694778
    },
    {
        "content": "<p>I can definitely see some opportunities for some constant time improvements around this code. I don't know if there are opportunities for doing better than that, e.g. changing quadratic behaviour to linear</p>",
        "id": 265236488,
        "sender_full_name": "nnethercote",
        "timestamp": 1639698547
    },
    {
        "content": "<p>E.g. I have a change now that avoids allocations when gathering obligations. It avoids 20% of the allocations (a different 20% to those I mentioned above) and runs about 5% faster on my non-jemalloc-enabled build. On a jemalloc-enabled build the win might be slightly smaller, like 3-4%. I see possibilities for a couple of improvements like this. Are they interesting? Or is the original problem more like \"this is 10x slower than it should be\"?</p>",
        "id": 265242668,
        "sender_full_name": "nnethercote",
        "timestamp": 1639703587
    },
    {
        "content": "<p>The original issue didn't say it was a regression, so I think even small improvements would be worthwhile :)</p>",
        "id": 265243601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639704624
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/92017\">https://github.com/rust-lang/rust/pull/92017</a> has the change</p>",
        "id": 265245525,
        "sender_full_name": "nnethercote",
        "timestamp": 1639706675
    },
    {
        "content": "<p><code>ObligationCauseCode</code> also causes a lot of allocations, specifically the <code>ImplDerivedObligation</code> and <code>MatchImpl</code> variants, both of which are recursive</p>",
        "id": 265245629,
        "sender_full_name": "nnethercote",
        "timestamp": 1639706802
    },
    {
        "content": "<p><code>MatchImpl</code> looks like it could be simplified, it doesn't need a full <code>ObligationCause</code> within it</p>",
        "id": 265245833,
        "sender_full_name": "nnethercote",
        "timestamp": 1639707053
    },
    {
        "content": "<p>ImplDerivedObligation has some silly reallocations relating to <code>Lrc</code>, should be fixable once <a href=\"https://github.com/rust-lang/rust/pull/91844/\">https://github.com/rust-lang/rust/pull/91844/</a>  lands</p>",
        "id": 265246513,
        "sender_full_name": "nnethercote",
        "timestamp": 1639707853
    },
    {
        "content": "<p>Yeah, another 12% of the original allocation count can be shaved off with the <code>Lrc</code> fix</p>",
        "id": 265248990,
        "sender_full_name": "nnethercote",
        "timestamp": 1639710578
    },
    {
        "content": "<p>I don't know how fast it \"should\" be, so I'm interested in any improvements!</p>",
        "id": 265295888,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1639748154
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/91844\">#91844</a> will land shortly, I ended up fixing the silly <code>Lrc</code> allocations within it</p>",
        "id": 265502286,
        "sender_full_name": "nnethercote",
        "timestamp": 1639951172
    },
    {
        "content": "<p>Good news!!! <a href=\"https://github.com/rust-lang/rust/pull/92044\">https://github.com/rust-lang/rust/pull/92044</a> seems to fix it!!!!!!!!!!!</p>",
        "id": 265587876,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1640018942
    },
    {
        "content": "<p>Unfortunately, my initial version was unsound, so I've reduced the number of cases where it discards bounds from the <code>ParamEnv</code>. I'm pretty sure that this shouldn't affect your code (or almost any normal code), but you'll want to re-test once the <code>try</code> build completes.</p>",
        "id": 265590852,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1640020417
    },
    {
        "content": "<p>Still works!!</p>",
        "id": 265603644,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1640026888
    }
]