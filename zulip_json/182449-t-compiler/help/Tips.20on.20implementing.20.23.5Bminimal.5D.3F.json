[
    {
        "content": "<p>Hey! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>I'm new to compiler development in general and rustc development in particular. But I want to try implementing analogue to GHCs <code>{-# MINIMAL #-}</code> pragma, ie adding a way to say that some methods of a trait must be implemented even if they have default implementations (this can be useful when a trait has methods with circular defaults).</p>\n<p>For the start, I want to implement an internal attribute, say <code>#[rustc_must_implement_one_of(f, g)]</code>. This way it (hopefully) shouldn't be too hard and we can experiment with using it in <code>std</code> (for example there is a desire to use it in <code>Read</code> for <code>read</code> and <code>read_buf</code>).</p>\n<p>I'd appreciate any tips, like where should I look first to implement this or if there may be some unexpected problems. Thanks in advice &lt;3</p>",
        "id": 265367306,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1639778919
    },
    {
        "content": "<p>I would recommend modifiying <code>check_impl_items_against_trait</code>: <a href=\"https://github.com/rust-lang/rust/blob/7abab1efb21617ba6845fa86328dffa16cfcf1dc/compiler/rustc_typeck/src/check/check.rs#L897\">https://github.com/rust-lang/rust/blob/7abab1efb21617ba6845fa86328dffa16cfcf1dc/compiler/rustc_typeck/src/check/check.rs#L897</a></p>",
        "id": 265368152,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639779296
    },
    {
        "content": "<p>You can get the attributes from the trait method, and keep track of which methods were found in the impl</p>",
        "id": 265368196,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639779319
    },
    {
        "content": "<p>In particular, you could extend the logic that checks for missing non-defaulted methods: <a href=\"https://github.com/rust-lang/rust/blob/7abab1efb21617ba6845fa86328dffa16cfcf1dc/compiler/rustc_typeck/src/check/check.rs#L1021-L1042\">https://github.com/rust-lang/rust/blob/7abab1efb21617ba6845fa86328dffa16cfcf1dc/compiler/rustc_typeck/src/check/check.rs#L1021-L1042</a></p>",
        "id": 265368306,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639779382
    },
    {
        "content": "<p>let me know if you'd like more specific advice</p>",
        "id": 265368328,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1639779396
    },
    {
        "content": "<p>Thanks! I'll look into it tomorrow (or in a couple of days :D)</p>",
        "id": 265368438,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1639779453
    },
    {
        "content": "<p>Feel free to implement an unstable version with a rustc name, and we can always give it a permanent stable name later (e.g. minimal_impl).</p>",
        "id": 265437438,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639855759
    },
    {
        "content": "<p>I'm getting somewhere!</p>\n<p><a href=\"/user_uploads/4715/D6zP5Re-Tb-bxLdEzlLHm_Mq/2021-12-20_00-27.png\">2021-12-20_00-27.png</a> <a href=\"/user_uploads/4715/J1YduPQPokvWKhak9Ok0ZITM/2021-12-20_00-24.png\">2021-12-20_00-24.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/D6zP5Re-Tb-bxLdEzlLHm_Mq/2021-12-20_00-27.png\" title=\"2021-12-20_00-27.png\"><img src=\"/user_uploads/4715/D6zP5Re-Tb-bxLdEzlLHm_Mq/2021-12-20_00-27.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/J1YduPQPokvWKhak9Ok0ZITM/2021-12-20_00-24.png\" title=\"2021-12-20_00-24.png\"><img src=\"/user_uploads/4715/J1YduPQPokvWKhak9Ok0ZITM/2021-12-20_00-24.png\"></a></div>",
        "id": 265501070,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1639949401
    },
    {
        "content": "<p>Hm, I'm now thinking, is it ok to find &amp; re-parse the annotation every time <code>check_impl_items_against_trait</code> is called? Wouldn't it make more sense to parse it the same time as the trait definition and then store it? This way we could also provide an earlier error if the annotation is malformed and won't do the same work for every impl.</p>",
        "id": 265619005,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640036592
    },
    {
        "content": "<p>Yeah, parsing it once would be better than reparsing it.</p>",
        "id": 265623291,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1640039238
    },
    {
        "content": "<p>You might need to put it in metadata anyway to be able to have it work cross-crate, since IIRC you can't get HIR of the upstream crate to look at the attributes directly.</p>",
        "id": 265638025,
        "sender_full_name": "scottmcm",
        "timestamp": 1640051002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span> here's an old PR where I added a flag to trait info, in case it helps: <a href=\"https://github.com/rust-lang/rust/pull/53693/files#diff-8f26efb783c324a11328b1d3843e01e444624bfa835605204dfa608c5889aee2R42\">https://github.com/rust-lang/rust/pull/53693/files#diff-8f26efb783c324a11328b1d3843e01e444624bfa835605204dfa608c5889aee2R42</a></p>",
        "id": 265638188,
        "sender_full_name": "scottmcm",
        "timestamp": 1640051172
    },
    {
        "content": "<p>There is a method to get the attributes for an item in upstream crate. By memory, it's tcx.get_attrs().</p>",
        "id": 265646406,
        "sender_full_name": "cjgillot",
        "timestamp": 1640061245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> thanks! it helps C:</p>",
        "id": 265696004,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640099837
    },
    {
        "content": "<p>Does <code>x fmt</code> work on compiler code? I have some obviously misformatted code, but both <code>x fmt</code> and <code>x test tools/tidy</code> don't change/highlight anything.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">items</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">item</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">ident</span><span class=\"p\">().</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">().</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">span</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">sees</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">.</span><span class=\"n\">struct_span_err</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                </span><span class=\"s\">\"must be an identifier of a method\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                            </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">()).</span><span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265696332,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640099997
    },
    {
        "content": "<p>It does, yes. Are you sure you saved the file?</p>",
        "id": 265697216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640100306
    },
    {
        "content": "<p>If it's in a particularly large macro rustfmt itself might be getting confused</p>",
        "id": 265697268,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640100326
    },
    {
        "content": "<p>I'm sure I saved it, yes (I checked with <code>cat</code>/<code>bat</code>). I also don't see any macros around, it's just in a function...</p>",
        "id": 265697540,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640100453
    },
    {
        "content": "<p>Not sure then, maybe make a simpler wrong change to make sure rustfmt is being run</p>",
        "id": 265697919,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640100641
    },
    {
        "content": "<p>(like add an empty leading newline to the file or something)</p>",
        "id": 265697956,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640100660
    },
    {
        "content": "<p>Leading newlines were removed, but this piece is still not formatted...</p>",
        "id": 265698400,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640100907
    },
    {
        "content": "<p>Should I make a draft PR, so we can figure out if this is something local to me being broken?</p>",
        "id": 265698461,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640100950
    },
    {
        "content": "<p>Ok, this is a rustfmt bug then and you should report it</p>",
        "id": 265698478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640100960
    },
    {
        "content": "<p>Sure, a draft PR is fine - I suspect CI has a similar version of rustfmt with the same bug</p>",
        "id": 265698565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1640100994
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/92164#discussion_r773245118\">https://github.com/rust-lang/rust/pull/92164#discussion_r773245118</a> (opened a PR)</p>",
        "id": 265699995,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640101702
    },
    {
        "content": "<p>Turns out this is a known issue: <a href=\"https://github.com/rust-lang/rustfmt/issues/3863\">https://github.com/rust-lang/rustfmt/issues/3863</a></p>",
        "id": 265713910,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640108590
    },
    {
        "content": "<p>Is there a canonical way to refer to things passed to an attribute?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[attribute(abc, aaaaaa)]</span><span class=\"w\"></span>\n<span class=\"c1\">//          ^^^  ^^^^^^ these things</span>\n</code></pre></div>\n<p>I need to call them something in error messages <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265714342,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1640108851
    },
    {
        "content": "<p>attribute args / parameters? (<em>c.f.</em>, <a href=\"https://docs.rs/syn/1.0.82/syn/type.AttributeArgs.html\">https://docs.rs/syn/1.0.82/syn/type.AttributeArgs.html</a>)</p>",
        "id": 265729797,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640117926
    },
    {
        "content": "<p>Hey! I think the PR is finally ready for review<br>\n<a href=\"https://github.com/rust-lang/rust/pull/92164\">https://github.com/rust-lang/rust/pull/92164</a></p>",
        "id": 266699844,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641224507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span> Would you like it assigned to someone for review?</p>",
        "id": 266719270,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641233938
    },
    {
        "content": "<p>Uhh. Nevermind. You have enough PRs that you probably already know how to r?. Sorry!</p>",
        "id": 266719906,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641234243
    },
    {
        "content": "<p>It might be helpful, GitHub magic suggests three people that could review this: <code>davidtwco</code>, <code>jackh726</code>, and <code>nikomatsakis</code>.</p>\n<p>AFAIK this is only visible to members</p>",
        "id": 266720067,
        "sender_full_name": "fee1-dead",
        "timestamp": 1641234357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417924\">inquisitivecrystal</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Tips.20on.20implementing.20.23.5Bminimal.5D.3F/near/266719270\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"273349\">Waffle Lapkin</span> Would you like it assigned to someone for review?</p>\n</blockquote>\n<p>I would, but I don't know whom to assign it to <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 266721210,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641235022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Tips.20on.20implementing.20.23.5Bminimal.5D.3F/near/266720067\">said</a>:</p>\n<blockquote>\n<p>AFAIK this is only visible to members</p>\n</blockquote>\n<p>Yep, I don't see these suggestions</p>",
        "id": 266721281,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1641235077
    },
    {
        "content": "<p>Maybe Aaron Hill?</p>",
        "id": 266722737,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641235945
    },
    {
        "content": "<p>Since they were familiar enough with the relevant code to tell you what to modify.</p>",
        "id": 266723100,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641236136
    }
]