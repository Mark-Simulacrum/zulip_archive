[
    {
        "content": "<p>I'm reworking the <code>List&lt;T&gt;</code> type and having trouble with implementing <code>Copy</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0204]: the trait `Copy` may not be implemented for this type\n  --&gt; compiler/rustc_middle/src/ty/list.rs:48:15\n   |\n46 | pub struct List&lt;&#39;tcx, T&gt;(Interned&lt;&#39;tcx, ListS&lt;T&gt;&gt;);\n   |                          ------------------------ this field does not implement `Copy`\n47 |\n48 | impl&lt;&#39;tcx, T&gt; Copy for List&lt;&#39;tcx, T&gt; {}\n   |               ^^^^\n</code></pre></div>\n<p>But <code>Interned&lt;'a, T&gt;</code> very much does implement <code>Copy</code>, right <a href=\"https://github.com/rust-lang/rust/blob/03a8cc7df1d65554a4d40825b0490c93ac0f0236/compiler/rustc_data_structures/src/intern.rs#L44\">here</a>.</p>\n<p>What am I missing?</p>",
        "id": 272749160,
        "sender_full_name": "nnethercote",
        "timestamp": 1645491147
    },
    {
        "content": "<p>What's the definition of ListS?</p>",
        "id": 272749842,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645491919
    },
    {
        "content": "<p>actually hm, that shouldn't matter. Interned wraps a reference.</p>",
        "id": 272749902,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645491966
    },
    {
        "content": "<p>There isn't a <code>T: 'tcx</code> or something you need to add, right?</p>",
        "id": 272749918,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645491982
    },
    {
        "content": "<p>If you really want to go overboard, you could try building with <code>RUSTC_LOG=rustc_trait_selection=debug</code> and see why <code>type_is_copy_modulo_regions</code> is failing for <code>Interned</code>.</p>",
        "id": 272750026,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645492102
    },
    {
        "content": "<p>Isn't copy special in that you can't implement it if anything inside doesn't? (Even if it is theoretically Copy)?</p>",
        "id": 272750091,
        "sender_full_name": "simulacrum",
        "timestamp": 1645492207
    },
    {
        "content": "<p>Is the ListS type new?</p>",
        "id": 272750113,
        "sender_full_name": "simulacrum",
        "timestamp": 1645492252
    },
    {
        "content": "<p><code>ListS</code> is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C)]\npub struct ListS&lt;T&gt; {\n    len: usize,\n    data: [T; 0],\n    opaque: OpaqueListContents,\n}\n</code></pre></div>",
        "id": 272753014,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496001
    },
    {
        "content": "<p>OpaqueListContents might not implement Copy?</p>",
        "id": 272753062,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496050
    },
    {
        "content": "<p>I'm surprised because <code>List</code> is similar to <code>Ty</code>, <a href=\"https://github.com/rust-lang/rust/blob/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a/compiler/rustc_middle/src/ty/mod.rs#L437\">here</a></p>",
        "id": 272753064,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496060
    },
    {
        "content": "<p>But <code>Interned</code> implements <code>Copy</code>, I don't understand why <code>ListS</code> needs to. <a href=\"https://github.com/rust-lang/rust/blob/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a/compiler/rustc_middle/src/ty/mod.rs#L394\"><code>TyS</code> doesn't</a></p>",
        "id": 272753071,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496097
    },
    {
        "content": "<p>oh</p>",
        "id": 272753165,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496251
    },
    {
        "content": "<p>yeah, I think <span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> was right, try a <code>impl&lt;'tcx, T: 'tcx&gt; Copy for List&lt;'tcx, T&gt; {}</code></p>",
        "id": 272753186,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496274
    },
    {
        "content": "<p>(note : 'tcx on T)</p>",
        "id": 272753187,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496279
    },
    {
        "content": "<p>since <code>impl&lt;'tcx, T: 'tcx + ?Sized&gt; Copy for Interned&lt;'tcx, T&gt; {}</code></p>",
        "id": 272753231,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496289
    },
    {
        "content": "<p>Doesn't work <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 272753262,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496351
    },
    {
        "content": "<p>same error</p>",
        "id": 272753266,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> if you want some help, feel free to give me a commit hash and I could take a look at the trait selection logs.</p>",
        "id": 272753279,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645496377
    },
    {
        "content": "<p>Deriving <code>Copy</code> gives a similar failure</p>",
        "id": 272753288,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> Here's a branch: <a href=\"https://github.com/nnethercote/rust/tree/Interned-List\">https://github.com/nnethercote/rust/tree/Interned-List</a>  Thank you!</p>",
        "id": 272753374,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496483
    },
    {
        "content": "<p>Aha, it <em>is</em> the <code>OpaqueListContents</code>. I made a <code>ListS2</code> without it and a <code>List2</code> that wraps <code>ListS2</code> and that works ok</p>",
        "id": 272753446,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496586
    },
    {
        "content": "<p>So the error message is very unclear</p>",
        "id": 272753458,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496611
    },
    {
        "content": "<p>And even knowing the problem, I don't know how to fix it <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 272753463,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496625
    },
    {
        "content": "<p>I can't impl <code>Copy</code> on <code>ListS</code> because of the array</p>",
        "id": 272753552,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496721
    },
    {
        "content": "<p>Maybe if you impl Copy for the OpaqueListContents?</p>",
        "id": 272753566,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496748
    },
    {
        "content": "<p>I can't, it's just a <code>type</code></p>",
        "id": 272753572,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496761
    },
    {
        "content": "<p>hm, is it ?Sized or something? It should be fine to impl things for extern <code>type</code>s</p>",
        "id": 272753621,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0206]: the trait `Copy` may not be implemented for this type\n  --&gt; compiler/rustc_middle/src/ty/list.rs:60:15\n   |\n60 | impl Copy for OpaqueListContents {}\n   |               ^^^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n</code></pre></div>",
        "id": 272753632,
        "sender_full_name": "nnethercote",
        "timestamp": 1645496809
    },
    {
        "content": "<p>yeah, extern types are !Sized I think</p>",
        "id": 272753638,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645496815
    },
    {
        "content": "<p>huh</p>",
        "id": 272753708,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496884
    },
    {
        "content": "<p>I mean I guess it makes sense (we can't really copy that type)</p>",
        "id": 272753712,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496895
    },
    {
        "content": "<p>I'm not sure the exact intent of the extern type in List</p>",
        "id": 272753733,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496936
    },
    {
        "content": "<p>ah, unsizing List</p>",
        "id": 272753748,
        "sender_full_name": "simulacrum",
        "timestamp": 1645496955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> do you have <code>?Sized</code> on your <code>T</code> generic parameter in <code>Interned</code>?</p>",
        "id": 272753758,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645496985
    },
    {
        "content": "<p>On all three of the struct, the Copy, and the Clone impl.</p>",
        "id": 272753763,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645496995
    },
    {
        "content": "<p><code>Interned</code> is <a href=\"https://github.com/rust-lang/rust/blob/b8967b0d52a2ba5f0c9da0da03e78ccba5534e4a/compiler/rustc_data_structures/src/intern.rs#L24\">here</a></p>",
        "id": 272753822,
        "sender_full_name": "nnethercote",
        "timestamp": 1645497029
    },
    {
        "content": "<p>Sorry, haven't had time to poke at your branch yet lol</p>",
        "id": 272753824,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497033
    },
    {
        "content": "<p>Yeah, I think you need <code>T: ?Sized</code> everywhere</p>",
        "id": 272753835,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497050
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=fbb3bf547517e6f6bcc1094f3245a7ee\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=fbb3bf547517e6f6bcc1094f3245a7ee</a></p>",
        "id": 272753836,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497052
    },
    {
        "content": "<p>No, no <code>?Sized</code> anywhere</p>",
        "id": 272753837,
        "sender_full_name": "nnethercote",
        "timestamp": 1645497053
    },
    {
        "content": "<p>That playground is a minimization, shows the same error if <code>?Sized</code> is removed.</p>",
        "id": 272753841,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497072
    },
    {
        "content": "<p>So <code>ListS</code> is <code>!Sized</code>, because of that opaque member. Therefore it does not qualify for the <code>Copy</code> implementation since it has an implicit <code>T: Sized</code>.</p>",
        "id": 272753917,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497163
    },
    {
        "content": "<p>That works, thank you!</p>",
        "id": 272753930,
        "sender_full_name": "nnethercote",
        "timestamp": 1645497197
    },
    {
        "content": "<p>Man, that <code>Copy</code> lint could use some work. I will fix it to give a better \"why\", I think.</p>",
        "id": 272753932,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497201
    },
    {
        "content": "<p>There's no reason we can't have it spit out the reasons why copy_modulo_regions is not fulfilled.</p>",
        "id": 272753946,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645497224
    },
    {
        "content": "<p>Yeah, the interesting thing here is that <code>Copy</code> may be one of the few cases where the compiler kind of inserts its own implicit where clause which needs to trivially resolve to <code>true</code>, and by circumventing the typical mechanism of <code>where</code> clauses, the error message does not trigger the \"required by …\" kind of messages.</p>\n<p>In <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span>'s codebase (<em>i.e.</em>, a codebase that would forget the <code>?Sized</code> unbounds when dealing with the more generic <code>Interned</code> type), manually adding the \"recursive requirements\" to the impls for <code>List</code>, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"w\">impl&lt;'tcx, T&gt; Clone for List&lt;'tcx, T&gt;</span>\n<span class=\"w\">where</span>\n<span class=\"gi\">+   Self : Copy, /* from `Copy` derive `Clone` */</span><span class=\"w\"></span>\n<span class=\"w\">{</span>\n<span class=\"w\"> </span>   fn clone(&amp;self) -&gt; Self {<span class=\"w\"></span>\n<span class=\"w\"> </span>       *self<span class=\"w\"></span>\n<span class=\"w\"> </span>   }<span class=\"w\"></span>\n<span class=\"w\">}</span>\n\n<span class=\"w\">impl&lt;'tcx, T&gt; Copy for List&lt;'tcx, T&gt;</span>\n<span class=\"w\">where</span>\n<span class=\"gi\">+   Interned&lt;'tcx, ListS&lt;T&gt;&gt; : Copy, /* can be `Copy` if each field is */</span><span class=\"w\"></span>\n<span class=\"w\">{}</span>\n</code></pre></div>\n<p>does yield the following error message for <code>assert_is_copy</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">error[E0277]: the size for values of type `OpaqueListContents` cannot be known at compilation time</span>\n<span class=\"go\">  --&gt; src/main.rs:45:5</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">45 |     assert_is_copy::&lt;List&lt;'static, ()&gt;&gt;();</span>\n<span class=\"go\">   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">   = help: within `ListS&lt;()&gt;`, the trait `Sized` is not implemented for `OpaqueListContents`</span>\n<span class=\"go\">note: required because it appears within the type `ListS&lt;()&gt;`</span>\n<span class=\"go\">  --&gt; src/main.rs:7:12</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">7  | pub struct ListS&lt;T&gt; {</span>\n<span class=\"go\">   |            ^^^^^</span>\n<span class=\"go\">note: required because of the requirements on the impl of `Copy` for `Interned&lt;'_, ListS&lt;()&gt;&gt;`</span>\n<span class=\"go\">  --&gt; src/main.rs:21:13</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">21 | impl&lt;'a, T&gt; Copy for Interned&lt;'a, T&gt;</span>\n<span class=\"go\">   |             ^^^^     ^^^^^^^^^^^^^^^</span>\n<span class=\"go\">   = note: 1 redundant requirement hidden</span>\n<span class=\"go\">   = note: required because of the requirements on the impl of `Copy` for `List&lt;'static, ()&gt;`</span>\n<span class=\"go\">note: required by a bound in `assert_is_copy`</span>\n<span class=\"go\">  --&gt; src/main.rs:42:22</span>\n<span class=\"go\">   |</span>\n<span class=\"go\">42 | fn assert_is_copy&lt;T: Copy&gt;() {}</span>\n<span class=\"go\">   |                      ^^^^ required by this bound in `assert_is_copy`</span>\n\n<span class=\"go\">For more information about this error, try `rustc --explain E0277`.</span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.integer32.com/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=0c6031dbd9d8520dac9d16e2a6208a5e\">Playground</a></li>\n</ul>\n<p>The error message could still be a bit better even at that point (suggesting that <code>?Sized</code> be added to the root <code>impl Copy</code> like it does for other cases of impl mismatch), but it does mention <code>?Sized</code> as well as <code>OpaqueListContents</code> being part of <code>ListS</code>, and does highlight the</p>\n<ul>\n<li><code>impl&lt;'a, T&gt; Copy for Interned&lt;'a, T&gt;</code></li>\n</ul>\n<p>line. So from that point it's easier to guess what the issue was <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 272798211,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1645534502
    }
]