[
    {
        "content": "<p>I'm exploring how to write a custom compiler plugin, but I can't find how to call rustc with the plugin file like this one: <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint-for-crate.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint-for-crate.rs</a> I have found that building a clippy lint could help, but it would be better to have it as rustc plugin. Could someone help?</p>",
        "id": 249866126,
        "sender_full_name": "zie1ony",
        "timestamp": 1629300233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433805\">@zie1ony</span> The plugin interface is being phased out. It only exists yet because servo uses it. You should prefer using a custom rustc driver instead. This is what for example clippy does.</p>",
        "id": 249875486,
        "sender_full_name": "bjorn3",
        "timestamp": 1629304175
    },
    {
        "content": "<p>If you want a relatively small example of a custom rustc driver, you can look at my codebase: <a href=\"https://github.com/willcrichton/flowistry\">https://github.com/willcrichton/flowistry</a></p>\n<p>In short, the general steps are:</p>\n<ol>\n<li>Define a top-level script that invokes <code>cargo check</code> with <code>RUSTC_WRAPPER</code> set to another script that will run your plugin. See <a href=\"https://github.com/willcrichton/flowistry/blob/a108bf67b01ad527b23d80ce2d9d6071564715af/src/bin/cargo-flowistry.rs\"><code>cargo-flowistry.rs</code></a>.</li>\n<li>Define a second-level script that prepares arguments from <code>cargo check</code> to give to your actual driver. See <a href=\"https://github.com/willcrichton/flowistry/blob/a108bf67b01ad527b23d80ce2d9d6071564715af/src/bin/flowistry-rustc.rs\"><code>flowistry-rustc.rs</code></a>. </li>\n<li>Define a final script that can either (a) act exactly like rustc, or (b) run your plugin. See <a href=\"https://github.com/willcrichton/flowistry/blob/a108bf67b01ad527b23d80ce2d9d6071564715af/src/bin/flowistry-driver.rs\"><code>flowistry-driver.rs</code></a>.</li>\n</ol>\n<p>Then you can run <code>cargo flowistry --whatever --custom --args</code> within a codebase and your plugin will execute.</p>",
        "id": 249876444,
        "sender_full_name": "Will Crichton",
        "timestamp": 1629304613
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 250034306,
        "sender_full_name": "zie1ony",
        "timestamp": 1629400342
    },
    {
        "content": "<p>Has anyone figured out a good technique to figure out if the wrapper is being invoked on a top-level crate vs a dependency?</p>",
        "id": 250812827,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630000345
    },
    {
        "content": "<p>what do you mean by top-level crate? in a workspace there are many crates written by the user</p>",
        "id": 250813156,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630000481
    },
    {
        "content": "<p>if you want \"not dependencies\" you could hack it and check for <code>--cap-lints=allow</code>, since cargo only passes that to dependencies</p>",
        "id": 250813196,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630000502
    },
    {
        "content": "<p>Yea I mean not dependency, a workspace member</p>",
        "id": 250814880,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630001182
    },
    {
        "content": "<p>I only want to present the user with output for the workspace they are working on, not every transitive dependency</p>",
        "id": 250814949,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630001220
    },
    {
        "content": "<p>all of these are cargo concepts, I don't think you can do this without depending on cargo's behavior in some way</p>",
        "id": 250815227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630001337
    },
    {
        "content": "<p>I think you can set  both <code>RUSTC</code> and <code>RUSTC_WORKSPACE_WRAPPER</code> to your wrapper and check if <code>std::env::args_os().nth(1)</code> is the value of <code>std::env::var_os(\"RUSTC\")</code>.</p>",
        "id": 250815669,
        "sender_full_name": "hyd-dev",
        "timestamp": 1630001515
    },
    {
        "content": "<p>Sure; that still assumes you're using cargo</p>",
        "id": 250817621,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630002375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> if you make this a lint cargo will do it automatically, that's what cap-lints is for</p>",
        "id": 250817684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630002409
    },
    {
        "content": "<p>Yea this when I’m using cargo</p>",
        "id": 250818770,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630002885
    },
    {
        "content": "<p>I just want to figure out a way for cargo to signal my wrapper</p>",
        "id": 250818803,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630002900
    },
    {
        "content": "<p>Though perhaps I’ll just see if cargo asks for metadata output from rustc</p>",
        "id": 250818855,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630002927
    },
    {
        "content": "<p>Or if it asks for binary output</p>",
        "id": 250818881,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630002940
    }
]