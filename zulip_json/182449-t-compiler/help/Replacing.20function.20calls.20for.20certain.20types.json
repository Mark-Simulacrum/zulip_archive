[
    {
        "content": "<p>Hey, I'm trying to do some FFI between C++ and Rust. The C++ library is very complicated: it has virtuals etc which no current tool can translate. So my idea was that I could find each method call on the external types and replace it directly with a call to a wrapper:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">CppType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">test</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The rustc driver/something would find the x.test() call, realize x is a CppType, and replace that line with something like <code>autogenerated_12345(&amp;mut x);</code> (where <code>autogenerated_12345</code> would be implemented via C++ code and linked in)</p>\n<p>The <code>test</code> function wouldnt actually exist on <code>CppType</code> since thats the entire point. If I could generate all the function signatures manually or automatically then the problem would be solved. I'm having trouble with how I'd actually do any of this.</p>",
        "id": 235994694,
        "sender_full_name": "firecubez",
        "timestamp": 1619289934
    }
]