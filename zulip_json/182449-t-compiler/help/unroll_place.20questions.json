[
    {
        "content": "<p>I have a couple of questions related to <code>unroll_place</code></p>",
        "id": 159540945,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551292999
    },
    {
        "content": "<p>I was starting to talk with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about this, but I figure that's better for a separate topic</p>",
        "id": 159541032,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293047
    },
    {
        "content": "<p>first, <code>PlaceComponentIter</code> is not really an iterator</p>",
        "id": 159541122,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293122
    },
    {
        "content": "<p>I can live with it</p>",
        "id": 159541132,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293126
    },
    {
        "content": "<p>was just wondering</p>",
        "id": 159541135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293130
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ea43c3c688980edd6f09a4cb632c9eb996c4f2af/src/librustc_mir/borrow_check/places_conflict.rs#L304-L309\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ea43c3c688980edd6f09a4cb632c9eb996c4f2af/src/librustc_mir/borrow_check/places_conflict.rs#L304-L309\">https://github.com/rust-lang/rust/blob/ea43c3c688980edd6f09a4cb632c9eb996c4f2af/src/librustc_mir/borrow_check/places_conflict.rs#L304-L309</a></p>",
        "id": 159541142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293141
    },
    {
        "content": "<p>I wonder, when and why do you want to keep executing when you get <code>None</code>?</p>",
        "id": 159541248,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293202
    },
    {
        "content": "<p>and why you can't do that with an real iterator</p>",
        "id": 159541258,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293217
    },
    {
        "content": "<p>I guess you can but you would allow the usage of <code>for x in iter</code> and that's not what you want given that you want to do something even when the thing returns <code>None</code> and with <code>for</code> syntax you won't be in the loop anymore if it returns <code>None</code>? I guess that's what the text is referring to?</p>",
        "id": 159541389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293310
    },
    {
        "content": "<p>ah</p>",
        "id": 159541392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293313
    },
    {
        "content": "<p>well, you <em>can</em> do that with a real iterator</p>",
        "id": 159541398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293317
    },
    {
        "content": "<p>in <strong>general</strong>, the <code>Iterator</code> trait does not guarantee what happens once <code>None</code> is returned</p>",
        "id": 159541425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293336
    },
    {
        "content": "<p>but for any <strong>given</strong> iterator, you may have guarantees</p>",
        "id": 159541433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293342
    },
    {
        "content": "<p>(and in particular, you can invoke <code>fuse</code> to get an iterator that is guaranteed to be a no-op, if needed -- it wouldn't be here)</p>",
        "id": 159541448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293357
    },
    {
        "content": "<p>but in any case</p>",
        "id": 159541449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293359
    },
    {
        "content": "<blockquote>\n<p>in <strong>general</strong>, the <code>Iterator</code> trait does not guarantee what happens once <code>None</code> is returned</p>\n</blockquote>\n<p>ahh ok, I was assuming that it keeps returning <code>None</code>, could even panic I guess but checking that has perf implications</p>",
        "id": 159541465,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293375
    },
    {
        "content": "<p>I think that <a href=\"https://github.com/rust-lang/rust/blob/ea43c3c688980edd6f09a4cb632c9eb996c4f2af/src/librustc_mir/borrow_check/places_conflict.rs#L244-L247\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ea43c3c688980edd6f09a4cb632c9eb996c4f2af/src/librustc_mir/borrow_check/places_conflict.rs#L244-L247\">this code</a> is the case we want to keep going</p>",
        "id": 159541535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293420
    },
    {
        "content": "<p>i.e., if you borrowed <code>x</code> but accessed <code>*x.y</code></p>",
        "id": 159541562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293448
    },
    {
        "content": "<p>ahh ok</p>",
        "id": 159541609,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293487
    },
    {
        "content": "<p>so unroll is not really a general purpose thing to iterate over <code>Place</code></p>",
        "id": 159541624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293503
    },
    {
        "content": "<p>it's just a convenience for the conflicts thing</p>",
        "id": 159541633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293513
    },
    {
        "content": "<p>then the returns would be something like:</p>\n<ul>\n<li>Round 1:<br>\n    - borrow gives <code>Some(x)</code><br>\n    - access gives <code>Some(x)</code></li>\n<li>Round 2:<br>\n    - borrow gives <code>None</code><br>\n    - access gives <code>Some(.y)</code></li>\n<li>Round 3:<br>\n    - borrow gives <code>None</code><br>\n    - access gives <code>Some(*)</code></li>\n</ul>",
        "id": 159541634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293514
    },
    {
        "content": "<p>anyway I forget exactly but in some cases I guess that may turn out ok, in others not</p>",
        "id": 159541683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293532
    },
    {
        "content": "<blockquote>\n<p>so unroll is not really a general purpose thing to iterate over <code>Place</code></p>\n</blockquote>\n<p>well, yes and no</p>",
        "id": 159541690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293541
    },
    {
        "content": "<p>I mean it was not meant for \"general use\"</p>",
        "id": 159541697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293547
    },
    {
        "content": "<p>but really it <em>does</em> just let you iterate</p>",
        "id": 159541701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293552
    },
    {
        "content": "<p>yep</p>",
        "id": 159541707,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293557
    },
    {
        "content": "<p>so it <em>could</em> be used generally</p>",
        "id": 159541709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293559
    },
    {
        "content": "<p>but I probably prefer something else</p>",
        "id": 159541711,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293563
    },
    {
        "content": "<p>well I guess it depends</p>",
        "id": 159541715,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293567
    },
    {
        "content": "<p>anyway, let me go to the next question :)</p>",
        "id": 159541727,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293573
    },
    {
        "content": "<p>but the conflict checking really <em>does</em> want to ensure that <code>None</code> keeps getting returned</p>",
        "id": 159541728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293574
    },
    {
        "content": "<p>(you can certainly achieve that constraint)</p>",
        "id": 159541736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551293580
    },
    {
        "content": "<p>so, all this is motivated by using <code>unroll</code> as an <code>iterate</code> method for <code>Place</code> and then keep moving to <code>Place 2.0</code></p>",
        "id": 159541876,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293686
    },
    {
        "content": "<p>thing is ... look at how it looks like the code for <code>fn ty</code> using <code>unroll</code></p>",
        "id": 159541916,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"mi\">157</span><span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">D</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">local_decls</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">D</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">PlaceTy</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"mi\">158</span><span class=\"w\">         </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">D</span>: <span class=\"nc\">HasLocalDecls</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"mi\">159</span><span class=\"w\">     </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">160</span><span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">unroll</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">place_components</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">161</span><span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place_components</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"mi\">162</span><span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">place_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">163</span><span class=\"w\">                 </span><span class=\"n\">Place</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"mi\">164</span><span class=\"w\">                     </span><span class=\"n\">PlaceTy</span>::<span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">local_decls</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">()[</span><span class=\"n\">index</span><span class=\"p\">].</span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"mi\">165</span><span class=\"w\">                 </span><span class=\"n\">Place</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Promoted</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PlaceTy</span>::<span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">data</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"mi\">166</span><span class=\"w\">                 </span><span class=\"n\">Place</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">PlaceBase</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"mi\">167</span><span class=\"w\">                     </span><span class=\"n\">PlaceTy</span>::<span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">data</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"mi\">168</span><span class=\"w\">                 </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"mi\">169</span><span class=\"w\">                     </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;This should be a base place&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"mi\">170</span><span class=\"w\">             </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"mi\">171</span><span class=\"w\"></span>\n<span class=\"mi\">172</span><span class=\"w\">             </span><span class=\"c1\">// apply .projection_ty() to all elems but only returns the final one.</span>\n<span class=\"mi\">173</span><span class=\"w\">             </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place_components</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">174</span><span class=\"w\">                 </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">175</span><span class=\"w\">                     </span><span class=\"n\">Place</span>::<span class=\"n\">Base</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"mi\">176</span><span class=\"w\">                         </span><span class=\"n\">bug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;This should be a projection place&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"mi\">177</span><span class=\"w\">                     </span><span class=\"n\">Place</span>::<span class=\"n\">Projection</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">proj</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"mi\">178</span><span class=\"w\">                         </span><span class=\"n\">place_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place_ty</span><span class=\"p\">.</span><span class=\"n\">projection_ty</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">proj</span><span class=\"p\">.</span><span class=\"n\">elem</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"mi\">179</span><span class=\"w\">                 </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"mi\">180</span><span class=\"w\">             </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"mi\">181</span><span class=\"w\"></span>\n<span class=\"mi\">182</span><span class=\"w\">             </span><span class=\"n\">place_ty</span><span class=\"w\"></span>\n<span class=\"mi\">183</span><span class=\"w\">         </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"mi\">184</span><span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159541931,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293729
    },
    {
        "content": "<p>that's why I meant, that I'd prefer having an iterator that returns projections only</p>",
        "id": 159542034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293781
    },
    {
        "content": "<p>so first I ask for base</p>",
        "id": 159542036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293783
    },
    {
        "content": "<p>and then I iterate</p>",
        "id": 159542042,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293787
    },
    {
        "content": "<p>like in</p>",
        "id": 159542043,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293788
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local_decls</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">HasLocalDecls</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;gcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">PlaceTy</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">place_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">PlaceTy</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"n\">local_decls</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// apply .projection_ty() to all elems but only returns the final one.</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">elems</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">place_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">place_ty</span><span class=\"p\">.</span><span class=\"n\">projection_ty</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">place_ty</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159542052,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551293796
    },
    {
        "content": "<p>I can have a base and projection methods, they probably already exist, but still ...</p>",
        "id": 159542397,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551294064
    },
    {
        "content": "<p>I see</p>",
        "id": 159542832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294362
    },
    {
        "content": "<p>It seems fairly straightforward to adapt <code>unroll_place</code> in this way, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span></p>",
        "id": 159542891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294384
    },
    {
        "content": "<p>and of course if you had such an iterator</p>",
        "id": 159542933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294420
    },
    {
        "content": "<p>you could trivially use it to reproduce the existing <code>unroll_place</code> interface</p>",
        "id": 159542952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294434
    },
    {
        "content": "<p>e.g., I believe I saw something about getting a callback like <code>(base, projections_iter)</code></p>",
        "id": 159542961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294446
    },
    {
        "content": "<p>you mean, having unroll_place returning a struct that gives you base and elems in different fields</p>",
        "id": 159542964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551294450
    },
    {
        "content": "<p>something like that</p>",
        "id": 159542979,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551294462
    },
    {
        "content": "<p>it may worth playing with it I guess</p>",
        "id": 159542985,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551294469
    },
    {
        "content": "<p>in which case we could do <code>Some(Place::Base(base)).chain(projections_iter.map(PlaceProjection))</code> or something like that</p>",
        "id": 159543067,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294499
    },
    {
        "content": "<blockquote>\n<p>you mean, having unroll_place returning a struct that gives you base and elems in different fields</p>\n</blockquote>\n<p>the document had an API in which you got a callback with two arguments</p>",
        "id": 159543099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294523
    },
    {
        "content": "<p>in contrast to the <code>unroll_place</code> API, which calls you back with one (unified) iterator</p>",
        "id": 159543119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294539
    },
    {
        "content": "<p>in any case either seems fine</p>",
        "id": 159543137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551294554
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>you mean, having unroll_place returning a struct that gives you base and elems in different fields</p>\n</blockquote>\n<p>the document had an API in which you got a callback with two arguments</p>\n</blockquote>\n<p>btw, which document?</p>",
        "id": 159546985,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551297288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I meant the dropbox paper from the all hands</p>",
        "id": 159551154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551300658
    },
    {
        "content": "<p>ahh the one from the all hands</p>",
        "id": 159551556,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1551301023
    },
    {
        "content": "<p>This is partially why I wanted to have Place be a struct with the base field and a projection-tree field. Many place uses only care about the base, or care about it first and then about the other projections</p>",
        "id": 159586114,
        "sender_full_name": "oli",
        "timestamp": 1551340330
    },
    {
        "content": "<blockquote>\n<p>(and in particular, you can invoke <code>fuse</code> to get an iterator that is guaranteed to be a no-op, if needed -- it wouldn't be here)</p>\n</blockquote>\n<p>FWIW, it's better to always call <code>.fuse()</code> if you need the behavior, and implement <a href=\"https://doc.rust-lang.org/std/iter/trait.FusedIterator.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/iter/trait.FusedIterator.html\"><code>FusedIterator</code></a> for your iterator if it will always return <code>None</code> after the first.</p>",
        "id": 160517169,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552337683
    }
]