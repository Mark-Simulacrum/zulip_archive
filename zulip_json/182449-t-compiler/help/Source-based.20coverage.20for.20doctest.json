[
    {
        "content": "<p>Hi all, I've been playing with the somewhat recently announced source-based code coverage (<a href=\"https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html\">https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html</a>) and I was wondering if it was possible to use it with doc tests. I tried a little hack: first, I export <code>RUSTFLAGS=\"-Zinstrument-coverage\"</code> just like with the regular tests. then, I run <code>cargo test --doc</code> and extract the <code>rustdoc</code> command just to be sure I'm not messing it up. then, I append <code>--persist-doctests target/rustdoc -Z unstable-options</code> to create the binaries for the doctests. I execute each and then add them to the <code>llvm-cov</code> as input, along with the profdata output accumulated from all the binaries. but it doesn't seem to be working. this procedure worked when I accumulated tests and other binaries, like examples, but I'm not sure if <code>rustdoc</code> uses that instrument coverage flag at all. It's possible I made some mistakes but just wanted to see if anyone can confirm whether <code>rustdoc</code> is capable of producing this profdata or not before I spend way too much time on that. Any help would be appreciated!</p>",
        "id": 218937061,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607178060
    },
    {
        "content": "<p>I have not tested it, your guess is as good as mine <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218937456,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607178806
    },
    {
        "content": "<p>My guess is that rustdoc probably isn't passing the flag into rustc somewhere</p>",
        "id": 218937458,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607178826
    },
    {
        "content": "<p>Let me know if you're interested in fixing that, it would be somewhere in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs\"><code>core.rs</code></a></p>",
        "id": 218937503,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607178864
    },
    {
        "content": "<p>Thanks, I'll try to find some time to investigate over the weekend and report back</p>",
        "id": 218939730,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607182409
    },
    {
        "content": "<p>I've built the compiler from <code>master</code>, set it as my local toolchain in the dir of the project I want to test it on, and -- without touching any code yet -- I get quite different coverage on the <code>--lib</code> test alone than on nightly. looking at the stats, it's both which lines are covered and how many lines are even discovered to be covered. it's sometimes higher, sometimes lower, doesn't seem to be a pattern. is it plausible that there's been some change/fix/regression or I most likely just messed something up while setting up my local toolchain?</p>",
        "id": 218951315,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607199173
    },
    {
        "content": "<p>for example, nightly will mark only the function body while local will include the function signature in the coverage</p>",
        "id": 218953846,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607202791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I investigated this a little further, and I need a little help on the next steps. in particular, how to file issues/submit PRs. the issue I set out to investigate is how to include doctests in the code coverage report, but I think of it now as two separate issues. first, when doctests are compiled, the <code>RUSTFLAGS</code> variable is not taken into account, and the arguments there are not populated. I suppose this could be considered a but, right? In any case, the fix appears to be simple, and I can submit a PR but I was wondering if I needed to file a bug report first, it's not clear to me from what I've read in the docs so far. now, this doesn't fix the original issue because even though the flags are populated, the coverage report ends up being incorrect because the code from the tests is considered in the coverage and it maps into the lines of the source file but it does so incorrectly. this  is more complicated and I don't yet fully understand it, so I figured I could create an issue and describe what I have found out and maybe someone can help me out with understanding certain things. is this a bug, though? or a feature? I don't have a good understanding what needs to go through feature request process, etc. I'd appreciate some help with figuring this out.</p>",
        "id": 219082454,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607349587
    },
    {
        "content": "<p>Doctests are compiled by rustdoc, so you need <code>RUSTDOCFLAGS</code>.</p>",
        "id": 219082623,
        "sender_full_name": "bjorn3",
        "timestamp": 1607349665
    },
    {
        "content": "<p>You're right!</p>",
        "id": 219084520,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607350615
    },
    {
        "content": "<p>it still leaves the second problem, e.g., <a href=\"/user_uploads/4715/WvuvyGuUDQmipnPKXu-GyNDl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/WvuvyGuUDQmipnPKXu-GyNDl/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/WvuvyGuUDQmipnPKXu-GyNDl/image.png\"></a></div>",
        "id": 219084591,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607350651
    },
    {
        "content": "<p>seems like the lines are not mapped correctly</p>",
        "id": 219084741,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607350728
    },
    {
        "content": "<p>if I have two doctests, then I get a warning: 1 functions have mismatched data, and the following coverage <a href=\"/user_uploads/4715/OLrlqEV0eyD1_DsFm8QTE4U9/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/OLrlqEV0eyD1_DsFm8QTE4U9/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/OLrlqEV0eyD1_DsFm8QTE4U9/image.png\"></a></div>",
        "id": 219085001,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607350895
    },
    {
        "content": "<p>I'm not sure if that's something easy to fix but it's clearly incorrect</p>",
        "id": 219085105,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607350939
    },
    {
        "content": "<p>it probably has something to do with the fact that the code is taken from the stdin but tbh I don't fully understand what's exactly happening</p>",
        "id": 219085481,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607351133
    },
    {
        "content": "<p>what do you <em>expect</em> this to do?</p>",
        "id": 219086869,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607351754
    },
    {
        "content": "<p>anyway I don't know what's going on here, maybe <span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> has ideas</p>",
        "id": 219086978,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607351799
    },
    {
        "content": "<p>for one, I'd expect <code>sub</code> to be covered. I'm not sure what I expect exactly but one of the following: (1) the code is covered and the comments are not treated as code at all, (2) both code and doctest code are fully covered, as everything should be executed.</p>",
        "id": 219087412,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607352030
    },
    {
        "content": "<p>The code blocks in the doc comments are compiled into actual functions whose spans and thus coverage info should cover exactly those lines that are the code blocks.</p>",
        "id": 219089042,
        "sender_full_name": "bjorn3",
        "timestamp": 1607352797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270883\">Michal Siedlaczek</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/219085001\">said</a>:</p>\n<blockquote>\n<p>if I have two doctests, then I get a warning: 1 functions have mismatched data, and the following coverage <a href=\"/user_uploads/4715/OLrlqEV0eyD1_DsFm8QTE4U9/image.png\">image.png</a></p>\n</blockquote>\n<p>Does it give any more info? \"1 functions have mismatched data\" may be the reason the second function isn't shown as covered at all.</p>",
        "id": 219089168,
        "sender_full_name": "bjorn3",
        "timestamp": 1607352862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/219089168\">said</a>:</p>\n<blockquote>\n<p>Does it give any more info? \"1 functions have mismatched data\" may be the reason the second function isn't shown as covered at all.</p>\n</blockquote>\n<p>No, it didn't give any more information.</p>",
        "id": 219090424,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607353478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/219089042\">said</a>:</p>\n<blockquote>\n<p>The code blocks in the doc comments are compiled into actual functions whose spans and thus coverage info should cover exactly those lines that are the code blocks.</p>\n</blockquote>\n<p>So basically you're saying it should be working as I expect in (1), right? ok, so maybe then I'm doing something wrong there. I'll try to find some time later tonight to investigate further. thanks for your help so far!</p>",
        "id": 219090768,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607353615
    },
    {
        "content": "<blockquote>\n<p>So basically you're saying it should be working as I expect in (1), right?</p>\n</blockquote>\n<p>Almost. I would expect lines 6, 7 and 8 to get covered.</p>",
        "id": 219091288,
        "sender_full_name": "bjorn3",
        "timestamp": 1607353839
    },
    {
        "content": "<p>In the first image?</p>",
        "id": 219092820,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607354517
    },
    {
        "content": "<p>Yes</p>",
        "id": 219092906,
        "sender_full_name": "bjorn3",
        "timestamp": 1607354546
    },
    {
        "content": "<p>right, okay, I'll double-check this, thanks.</p>",
        "id": 219093446,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607354809
    },
    {
        "content": "<p>This is a known issue, <a href=\"https://github.com/rust-lang/rust/issues/79417\">#79417</a>.</p>\n<p>@Swatinem is working on a couple of PRs to fix it though.</p>",
        "id": 219107136,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607360686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330205\">@Arpad Borsos</span> is his correct username in Zulip I think. (Though he did mention he would be off Zulip for a few days.)</p>",
        "id": 219111840,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607362772
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Yes here I am ;-)</p>",
        "id": 219114141,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607363798
    },
    {
        "content": "<p>So yes, basically with persisted doctests, it works just fine to get coverage of <em>the code run by the doctest</em></p>",
        "id": 219114390,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607363901
    },
    {
        "content": "<p>I created a github action that does all this here: <a href=\"https://github.com/Swatinem/fucov\">https://github.com/Swatinem/fucov</a> (its very opinionated so far), but provides good results for the small testcases in the repo itself, as well as in <a href=\"https://github.com/getsentry/sentry-rust/pull/295\">https://github.com/getsentry/sentry-rust/pull/295</a> where I tried things</p>",
        "id": 219114501,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607363954
    },
    {
        "content": "<p>The problem so far is for <em>the code of the doctest itself</em>, which has a couple of issues, I have a list at the bottom of the fucov README tracking my own work</p>",
        "id": 219114563,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607363989
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/commit/8ff53f6424f32a2f5d71c3b668ba30099fe92570\">https://github.com/rust-lang/cargo/commit/8ff53f6424f32a2f5d71c3b668ba30099fe92570</a> this landed just a few minutes ago, and will hopefully give the correct filenames when you are in a workspace</p>",
        "id": 219114756,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607364074
    },
    {
        "content": "<p>then I am about to use the same mechanism that rustdoc itself uses to remap error messages to get the halfway-correct line numbers</p>",
        "id": 219114823,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607364109
    },
    {
        "content": "<p>after that there are a few minor bugs in rustdoc itself when it gets file/line mappings completely wrong, but I will tackle those one after the other</p>",
        "id": 219114899,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607364140
    },
    {
        "content": "<p>That's great, I'll follow the progress to get more familiar with it, and also thanks for sharing the github action, I'll make sure to compare it with what I've been doing, this will be a lot of help!</p>",
        "id": 219119755,
        "sender_full_name": "Michal Siedlaczek",
        "timestamp": 1607366340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> your most recent PR looks very promising, thanks also for adding so many docs! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> with my latest cargo changes in, I do get correct workspace file paths, and the line remapping looks promising. I am still struggling a bit with the run-make tests, probably a windows specific issue. I might as well just try to do all this in WSL2 as the windows experience is horribly slow anyway. also my native linux machine is sadly not strong enough to compile rust in a reasonable time.</p>",
        "id": 219188158,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607420862
    },
    {
        "content": "<p>Sorry, yes some of these processes can be quite slow on Windows.</p>\n<p>I typically use custom scripts when developing, to rebuild only the compiler, compile a single rust test program (with a main()) with coverage and debugging flags, run it (with debug logging environment variables set), and then run the LLVM profdata and cov tools to see the results. My script is pretty hacky and not worth sharing, but you may be able to start with the contents of the <code>run-make-fulldeps/coverage-report</code> Makefile to get an idea how to write your own, if desired.</p>\n<p>Not sure if that's helpful.</p>\n<p>Looking forward to your fixes!</p>",
        "id": 219230290,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607445911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> I had a really hard time to get the run-make tests working, but now I figured out that I had to install msys2 and build llvm with debug assertions. anyway, I got the new testcase running, however, it is only finding one of the doctests in my file for some reason. I have a hunch that maybe its because each of the doctests basically generates the same function name?</p>",
        "id": 219477289,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607609931
    },
    {
        "content": "<p>anyhow, I think I have to further cleanup that makefile, because it adds all the doctest executables to all the other llvm-cov calls thus messing up the counters</p>",
        "id": 219477502,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607610012
    },
    {
        "content": "<p>I think that's not surprising. I'm not sure how rustdoc works exactly, but it compiles each test into its own binary, and then runs it. I assume each test's function name is <code>main()</code>. I think it would be OK if they all had the same function name as long as the line numbers are distinct (which they should be). FYI, I updated the Rust Unstable Book documentation in my last PR, that landed last night. It should be published sometime today, but you can view it here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md\">https://github.com/rust-lang/rust/blob/master/src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md</a></p>",
        "id": 219492004,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607615857
    },
    {
        "content": "<p>It has more examples with doc tests now (and a footnote about the issue you filed).</p>",
        "id": 219492134,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607615910
    },
    {
        "content": "<p>The point is, if each doc test generates a different binary with the same function name but different line numbers, when they are merged with <code>profdata</code>, and then reviewed with <code>cov show</code>, I think it should work.</p>\n<p>The compiler must compile one at a time.</p>",
        "id": 219492264,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607615993
    },
    {
        "content": "<p>Yes, rustdoc runs each in a different binary</p>",
        "id": 219492891,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607616220
    },
    {
        "content": "<p>I think it really is the same function name at the same line, unless there are special directives, etc involved</p>",
        "id": 219513215,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607624672
    },
    {
        "content": "<p>or the doctest has its own <code>main</code>, otherwise I think oneliners all end up with the \"same\" <code>main</code></p>",
        "id": 219513269,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607624696
    },
    {
        "content": "<p>the line remapping so far only works for the error messages, and for the coverage mappings with my change, everything else is relative to the generated file</p>",
        "id": 219513385,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607624746
    },
    {
        "content": "<p>I'm not sure I understand. When you say <code> for the coverage mappings with my change</code> ... does this mean your change will work? Or are you running into a problem you haven't solved yet?</p>",
        "id": 219517714,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607626689
    },
    {
        "content": "<p>I’m running into this problem:<br>\nI do get coverage from all the doctest runs combined, so when I run library code, I do get the correct coverage.<br>\nBUT: for the doctest code itself, I only get coverage from one run. so when I have 4 different doctests, only one of them gets the <em>correctly offset</em> lines covered</p>",
        "id": 219524685,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607629888
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79762/files#diff-dd0a25f2ec31e1128d583fcc31bfc9840243ad7cab7873f7e84eac4bdd15f18fR16-R18\">https://github.com/rust-lang/rust/pull/79762/files#diff-dd0a25f2ec31e1128d583fcc31bfc9840243ad7cab7873f7e84eac4bdd15f18fR16-R18</a> so the highlighted doctest gets coverage, but all the rest does not</p>",
        "id": 219525055,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607630057
    },
    {
        "content": "<p>ok, I posted the PR for review. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I also made some changes to the doctest code generation to create unique function names. This all feels very hacky though :-( But I think its good enough for a first step</p>",
        "id": 219602339,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1607691561
    },
    {
        "content": "<p>I'll take a look today. Thanks!!</p>",
        "id": 219636850,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1607708465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> thanks for the heads up. I will take a look at my changes to the doctest main wrapper again, looks like rustdoc is using the same code for hotlinks to the playground. Seems like I will make that conditional on code coverage</p>",
        "id": 220214275,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1608190727
    },
    {
        "content": "<p>Also, I’m a bit tied up with work right now, so it might take some time. Also, thanks for all the help ;-)</p>",
        "id": 220214285,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1608190747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330205\">@Arpad Borsos</span> why are the line numbers different for coverage and the playground?</p>",
        "id": 220243398,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608212135
    },
    {
        "content": "<p>Thanks Arpad!</p>",
        "id": 220260969,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1608220476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I don’t think they are different. I just didn’t realize that the playground button uses the same code that is actually <em>run</em> by the doctests</p>",
        "id": 220346460,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1608280168
    },
    {
        "content": "<p>sure, but why does that require making your changes conditional on code coverage?</p>",
        "id": 220374893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608300155
    },
    {
        "content": "<p>:-D I rather not put the additional wrapping main (to have unique function names) into the playground snippets</p>",
        "id": 220380101,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1608302957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> hey, I just stumbled upon <a href=\"https://hackmd.io/3eG6OZWHRbSMxoRxzwNhGQ#-Change-the-working-directory-for-doctests\">https://hackmd.io/3eG6OZWHRbSMxoRxzwNhGQ#-Change-the-working-directory-for-doctests</a>, nice to see that is something thats at least considered for 2021, although the title should rather be \"separate runtime from compile time working directory for doctests\".</p>",
        "id": 222190285,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610227036
    },
    {
        "content": "<p>also the point before, compiling doctests into a single executable would be very nice, and maybe something I would want to contribute to ;-)</p>",
        "id": 222190342,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610227086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330205\">@Arpad Borsos</span> feel free to edit it :)</p>",
        "id": 222190351,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610227119
    },
    {
        "content": "<p>speaking of which… I’m kind of hesitant to do the cwd changes, not quite sure whats the approach that would be accepted and where I wouldn’t just be wasting time on a proposal thats not going anywhere</p>",
        "id": 222190370,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610227175
    },
    {
        "content": "<p>also, I recently added a regression test to cargo that makes sure that the <em>runtime cwd</em> is consistent across test types (<a href=\"https://github.com/rust-lang/cargo/pull/9037\">https://github.com/rust-lang/cargo/pull/9037</a>) so thats at least something</p>",
        "id": 222190417,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610227216
    },
    {
        "content": "<p><a href=\"https://hackmd.io/3eG6OZWHRbSMxoRxzwNhGQ?view#-Separate-compile-time-from-run-time-working-directory-for-doctests\">https://hackmd.io/3eG6OZWHRbSMxoRxzwNhGQ?view#-Separate-compile-time-from-run-time-working-directory-for-doctests</a> ah nice, didn’t know I had permission to edit that</p>",
        "id": 222190489,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610227365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330205\">Arpad Borsos</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/222190370\">said</a>:</p>\n<blockquote>\n<p>speaking of which… I’m kind of hesitant to do the cwd changes, not quite sure whats the approach that would be accepted and where I wouldn’t just be wasting time on a proposal thats not going anywhere</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"330205\">@Arpad Borsos</span>  didn't <span class=\"user-mention silent\" data-user-id=\"296355\">Rich Kadel</span> suggest an approach that doesn't need to change the cwd?</p>",
        "id": 222190935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228192
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/8993#issuecomment-753001081\">https://github.com/rust-lang/cargo/issues/8993#issuecomment-753001081</a></p>",
        "id": 222190941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228220
    },
    {
        "content": "<p>but yeah, I would be hesistant about a change to the cwd</p>",
        "id": 222191231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610228759
    },
    {
        "content": "<blockquote>\n<p>prepend the doctest root path with the path from workspace root to doctest root</p>\n</blockquote>\n<p>well, I only see one way to get this, and thats if cargo can explicitly pass that down. IMO its more of a cargo concern</p>",
        "id": 222228233,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610294268
    },
    {
        "content": "<p>sure, that seems reasonable</p>",
        "id": 222228239,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294281
    },
    {
        "content": "<p>and it's not a breaking change which is the most important thing</p>",
        "id": 222228296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294335
    },
    {
        "content": "<p>IMO, the cleanest solution would really be to split the compilation from running the test. I think thats also what the \"compile all doctests into a single executable\" task is about</p>",
        "id": 222228307,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610294360
    },
    {
        "content": "<p>you've made that very clear, yes <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222228313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294387
    },
    {
        "content": "<p>but I still don't see how it can happen without breaking code</p>",
        "id": 222228322,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294398
    },
    {
        "content": "<p>hm, I don’t know how the 2021 proposal to \"compile a single exe\" would work in relation to backwards compat. since 2021 edition is opt-in, that would be a chance to introduce new behavior…</p>",
        "id": 222228425,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610294502
    },
    {
        "content": "<p>well the other thing is that it has to be reasonably easy to upgrade to 2021, since we want everyone to do it eventually</p>",
        "id": 222228482,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294541
    },
    {
        "content": "<p>one sec, let me come up with an example</p>",
        "id": 222228487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294547
    },
    {
        "content": "<p>anyhow, introducing a new flag that cargo passes down:</p>\n<ol>\n<li>should that be an ENV or rather a CLI flag?</li>\n<li>should the flag be for the run-time, or compile-time cwd (the respective other one would come from the cwd of the rustdoc invocation itself)</li>\n</ol>",
        "id": 222228558,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610294643
    },
    {
        "content": "<p>so my work when I'm not doing open source is working on a database, and for tests the crate uses a global database, which means that the tests can see each others state and interfere with one another: <a href=\"https://gitlab.com/YottaDB/Lang/YDBRust/-/issues/13\">https://gitlab.com/YottaDB/Lang/YDBRust/-/issues/13</a>. One of the ideas I thought of to fix it was to have a per-process database, so that the tests wouldn't conflict. If you change doctests to run in a single process, you'll be introducing state conflicts like this that weren't there before, because any test ever can always affect the global state of the process</p>",
        "id": 222228565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330205\">Arpad Borsos</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/222228558\">said</a>:</p>\n<blockquote>\n<p>anyhow, introducing a new flag that cargo passes down:</p>\n<ol>\n<li>should that be an ENV or rather a CLI flag?</li>\n<li>should the flag be for the run-time, or compile-time cwd (the respective other one would come from the cwd of the rustdoc invocation itself)</li>\n</ol>\n</blockquote>\n<ol>\n<li>CLI flag, to be consistent with --crate-version</li>\n<li>I would rather not change either, and only pass <code>--workspace-directory</code> or something. Then rustdoc can choose how to use it (i.e, only pass it to LLVM without changing behavior)</li>\n</ol>",
        "id": 222228582,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294725
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/222228565\">said</a>:</p>\n<blockquote>\n<p>so my work when I'm not doing open source is working on a database, and for tests the crate uses a global database, which means that the tests can see each others state and interfere with one another: <a href=\"https://gitlab.com/YottaDB/Lang/YDBRust/-/issues/13\">https://gitlab.com/YottaDB/Lang/YDBRust/-/issues/13</a>. One of the ideas I thought of to fix it was to have a per-process database, so that the tests wouldn't conflict. If you change doctests to run in a single process, you'll be introducing state conflicts like this that weren't there before, because any test ever can always affect the global state of the process</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/75341#issuecomment-672390765\">https://github.com/rust-lang/rust/issues/75341#issuecomment-672390765</a></p>",
        "id": 222228650,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294815
    },
    {
        "content": "<p>the other reason to change this in rustdoc with a flag is it allows build systems besides cargo to use it</p>",
        "id": 222228729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294925
    },
    {
        "content": "<p>ah true, thats a good reminder</p>",
        "id": 222228817,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1610295084
    },
    {
        "content": "<p>libtest has a mode in which it runs every test in a sub-process. You can activate it by compiling with <code>-Zpanic-abort-tests</code>.</p>",
        "id": 222229983,
        "sender_full_name": "bjorn3",
        "timestamp": 1610296905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> that's the opposite of what we want: right now each rustdoc test is in a separate process, we're trying to figure out how to run them in the same process without breaking the test</p>",
        "id": 222230057,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610297012
    },
    {
        "content": "<p>really what I want is a way to <em>compile</em> them all at once, but <em>run</em> them all in different processes</p>",
        "id": 222230082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610297042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/222230082\">said</a>:</p>\n<blockquote>\n<p>really what I want is a way to <em>compile</em> them all at once, but <em>run</em> them all in different processes</p>\n</blockquote>\n<p>This flag would help with your usecase of the database tests if all rustdoc tests become part of a single process by default.</p>",
        "id": 222230121,
        "sender_full_name": "bjorn3",
        "timestamp": 1610297100
    },
    {
        "content": "<p>ah hmm, interesting</p>",
        "id": 222230137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610297124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <a href=\"https://github.com/rust-lang/rust/pull/81264#discussion_r563098921\">https://github.com/rust-lang/rust/pull/81264#discussion_r563098921</a> thats what I meant by \"compiletest cwd\", did I get this right?</p>",
        "id": 223744031,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611399873
    },
    {
        "content": "<p>Also concerning \"unstable\", I’m a bit surprised I can run this in compiletest without explicitly allowing unstable options. so the plan here would be to have it as unstable, then implement it in cargo to set that flag, but then on the next uplift it needs to be stabilized, right? otherwise when it rides the trains cargo wouldn’t be allowed to set that flag?</p>",
        "id": 223744283,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611400267
    },
    {
        "content": "<p>also regarding the cwd, how about I set an explicit one when compiletest invokes rustdoc? I think with an explicit cwd, there would be no need for the manual stdout normalization?</p>",
        "id": 223744353,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611400346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330205\">Arpad Borsos</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Source-based.20coverage.20for.20doctest/near/223744283\">said</a>:</p>\n<blockquote>\n<p>Also concerning \"unstable\", I’m a bit surprised I can run this in compiletest without explicitly allowing unstable options. so the plan here would be to have it as unstable, then implement it in cargo to set that flag, but then on the next uplift it needs to be stabilized, right? otherwise when it rides the trains cargo wouldn’t be allowed to set that flag?</p>\n</blockquote>\n<p>Unstable options (<code>-Z</code>) only require nightly, not <code>--unstable-options</code>. Yes, the plan is to implement this in rustdoc, pass the flag in cargo on nightly, make sure it actually solves the issue, and then stabilize in both rustdoc and cargo.</p>\n<blockquote>\n<p>I think that was why the first build failed on CI, because CI runs with a completely different cwd than my local x test invocation. Either way, I don’t really know what you mean by \"default directory\".</p>\n</blockquote>\n<p>Hmm, I thought the directory compiletest used was stable, I guess not. Only having two revisions (one with the directory correctly set, one with it incorrectly set) seems fine then.</p>",
        "id": 223757921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611419751
    },
    {
        "content": "<p>alright, I changed the test to be based on test revisions, works nicely for me locally, and changed the option to unstable</p>",
        "id": 223760303,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611422845
    },
    {
        "content": "<p>so I have run my cargo patch with <code>cargo +nightly test</code> again which works apart from some tests that do <code>extern crate rustc_driver</code>, when I do a normal <code>cargo test</code>, it fails because it can’t find the option, so I guess the tests are run with stable rustc? <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> can you guide me how I can get this flag into cargo properly?</p>",
        "id": 224352892,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611851706
    },
    {
        "content": "<p>Sorry I don't understand I think? It's ok if to just run the tests you added for nightly tests though. Extra setup is needed to run the full nightly test suite with Cargo (you can read <code>.github/workflows/main.yml</code> for the setup we do on CI)</p>",
        "id": 224353698,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1611852024
    },
    {
        "content": "<p>oh sorry maybe you were missing the context: <a href=\"https://github.com/rust-lang/cargo/pull/9105#issuecomment-767614139\">https://github.com/rust-lang/cargo/pull/9105#issuecomment-767614139</a> ;-)</p>",
        "id": 224354736,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611852366
    },
    {
        "content": "<p>my question was basically if the new rustdoc flag would have to ride the train before it can be used by cargo? I thought cargo was basically tied to the same version rustc/rustdoc</p>",
        "id": 224355209,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611852421
    },
    {
        "content": "<p>Yes Cargo is tied to the same version but for convenience we test it on stable/beta/nightly</p>",
        "id": 224355661,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1611852458
    },
    {
        "content": "<p>so we can run <code>cargo test</code> locally</p>",
        "id": 224355683,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1611852464
    },
    {
        "content": "<p>if a new flag was just added to rustdoc and you want to add support in Cargo then you'll need to do some degree of feature detection for the <code>rustdoc</code> binary, there's similar stuff for <code>rustc</code> right now I believe</p>",
        "id": 224355778,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1611852491
    },
    {
        "content": "<p>interesting, any suggestions on how to do that? or can you point me in the right direction?</p>",
        "id": 224357154,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1611853029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> so the plan to land these rustdoc changes is here: <a href=\"https://github.com/rust-lang/cargo/pull/9105#discussion_r575817720\">https://github.com/rust-lang/cargo/pull/9105#discussion_r575817720</a> do you agree with these? and can I get a review for the first cargo change? ;-)</p>",
        "id": 227076565,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1613809298
    },
    {
        "content": "<p>Yes that seems like a reasonable plan, and yeah I can review</p>",
        "id": 227282953,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1614007552
    },
    {
        "content": "<p>Thanks for the feedback. Added a new unstable cargo option for this now.</p>",
        "id": 227324505,
        "sender_full_name": "Arpad Borsos",
        "timestamp": 1614022610
    }
]