[
    {
        "content": "<p>I've been trying to solve <a href=\"https://github.com/rust-lang/rust/issues/75577\">https://github.com/rust-lang/rust/issues/75577</a>, which necessitates putting <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/stack/fn.ensure_sufficient_stack.html\"><code>rustc_data_structures::stack::ensure_sufficient_stack()</code></a> calls in several recursive loops. Each <code>ensure_sufficient_stack()</code> call requires a measurement of the remaining stack space, which incurs some overhead. Most of these are some form of visitor pattern, in which there are several patterns of calls looking like <code>A -&gt; B -&gt; C -&gt; A</code>, <code>A -&gt; D -&gt; E -&gt; A</code>, <code>A -&gt; F -&gt; G -&gt; A</code>, etc. In general, where would be the best place to break these up with <code>ensure_sufficient_stack()</code> calls? I see three main options: around the body of <code>A</code>; around each of the calls <code>A -&gt; B</code>, <code>A -&gt; D</code>, and <code>A -&gt; F</code>; or around each of the calls <code>C -&gt; A</code>, <code>E -&gt; A</code>, and <code>G -&gt; A</code>. In order, the options have progressively less overhead (especially when <code>A</code> recurses only rarely) but become more difficult to keep track of.</p>",
        "id": 247756710,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627676326
    },
    {
        "content": "<p>you can't remove the call unless you're sure there is no other recursive path through that node. e.g. if you have a loop A -&gt; B  -&gt; A and C -&gt; B -&gt; C, you can't remove the call in B unless there's a call in both A and C.</p>",
        "id": 247757003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627676512
    },
    {
        "content": "<p>and I would write pretty long comments on why you're sure it's safe to remove</p>",
        "id": 247757083,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627676554
    },
    {
        "content": "<p>I'm not removing any calls here, but adding them where previously there were none.</p>",
        "id": 247757112,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627676575
    },
    {
        "content": "<p>Also, for some reason, some of the loops have a call when first entering them, but none within the loops themselves.</p>",
        "id": 247757221,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627676640
    },
    {
        "content": "<p>ah, ok.</p>\n<p>I'm not sure what you mean by within the loops themselves - because they use recursion, won't putting the call at the start be the same as putting it in the loop?</p>",
        "id": 247757390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627676719
    },
    {
        "content": "<p>how much overhead does it have to call ensure_sufficent_stack? I would expect it to be fairly cheap if you don't need to copy the stack</p>",
        "id": 247757534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627676793
    },
    {
        "content": "<p>What I meant by putting a call when first entering them is a call by a non-recursive function before calling <code>A</code>.</p>",
        "id": 247757637,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627676874
    },
    {
        "content": "<p>The function only adds 1 MB, so it must be called repeatedly to traverse arbitrarily deep structures.</p>",
        "id": 247757727,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627676914
    },
    {
        "content": "<p>right, but why does the placement affect how expensive it is? it doesn't matter if you call <code>ensure()</code> 50 times or twice if it still resizes the stack twice</p>",
        "id": 247757807,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627676985
    },
    {
        "content": "<p>Often, you can have cases where <code>A</code> has 20 possible branches coming out of it, but only 3 or 4 actually have the ability to recurse. In the remaining cases, the check creates an additional measurement and branch as well as 2 stack frames.</p>",
        "id": 247758077,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627677123
    },
    {
        "content": "<p>I've looked into what exactly the function does; in effect, it measures the remaining space on the stack, and if it is less than 100 KiB, it allocates a 1 MiB block on the heap and calls the callback using that as the stack.</p>",
        "id": 247758156,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627677154
    },
    {
        "content": "<p>I might just be overly paranoid about the \"Should not be sprinkled around carelessly, as it causes a little bit of overhead.\" that appears in the docs for the function.</p>",
        "id": 247758231,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627677201
    },
    {
        "content": "<p>well, if you're worried it's quite easy to measure the performance - you can open a PR and run <code>@bors try @rust-timer queue</code></p>",
        "id": 247760593,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627678494
    },
    {
        "content": "<p>(or more accurately, ask someone else to do it, I volunteer :)</p>",
        "id": 247760609,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627678506
    },
    {
        "content": "<p>I suppose I'll look into that once I get my changes PR-ready. In the meantime, one of the recursive loops occurs within LLVM (traversing function metadata nodes), to which <code>ensure_sufficient_stack</code> can't be added for obvious reasons.</p>",
        "id": 247761170,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627678808
    },
    {
        "content": "<p>What I'm trying to figure out is how to traverse the low-level IR before it gets sent to LLVM, so that I can give it the necessary stack space ahead of time.</p>",
        "id": 247761265,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627678858
    },
    {
        "content": "<p>The problem is, the function that actually invokes LLVM (<code>rustc_codegen_llvm::back::write::write_output_file()</code>) only receives an opaque <code>llvm::Module</code>, and I'm not sure where up the stack I can find something traversable.</p>",
        "id": 247761802,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627679133
    },
    {
        "content": "<p>everything should go through <code>monomorphize</code> at one point or another I think, maybe look around there?</p>",
        "id": 247761944,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627679203
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/collector/index.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/collector/index.html</a></p>",
        "id": 247761989,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627679232
    },
    {
        "content": "<p>I wonder if PGO could be used to inject the <code>ensure_sufficient_stack</code> calls just before the \"most optimal\" calls in the recursive loop.  Without PGO, if the loop goes <code>A -&gt; B -&gt; C -&gt; D -&gt; A</code> and <code>C</code> has a non-recursive exit path, then putting the <code>ensure</code> just before <code>C</code> calls <code>D</code> is the \"best\" place to add it (since this maximises the times it's not called), but _with_ PGO you could even work out the \"hottest\" exit paths (say <code>A</code> and <code>B</code> rarely have non-recursive exit paths but they're rarely taken compared to <code>C</code>'s) and place the <code>ensure_sufficient_stack</code> calls after missing the \"hot\" escape routes.</p>",
        "id": 247767018,
        "sender_full_name": "Andy Caldwell",
        "timestamp": 1627682140
    },
    {
        "content": "<p>In general, I've been assuming that <code>A</code> is the function with the largest <code>match</code> expression. The main tradeoff here is between calling <code>ensure_sufficient_stack</code> in a more optimal position and making the recursive loop simpler to modify in the future; right now, I'll probably just put it around <code>A</code> in the absence of actual timing tests, since that is the simplest position to reason about.</p>",
        "id": 247771215,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1627685835
    },
    {
        "content": "<p>Ah, this is manually adding the <code>ensure_sufficient_stack</code> calls, I interpreted this as \"rustc/llvm should add these calls when it detects cycles in generated code\" :D in that case what you propose sounds like an eminently sensible approach!</p>",
        "id": 247771890,
        "sender_full_name": "Andy Caldwell",
        "timestamp": 1627686412
    }
]