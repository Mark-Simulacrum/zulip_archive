[
    {
        "content": "<p>There's some code in the stdlib tests that looks roughly like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(macos, ignore)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(aarch64, ignore)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On aarch64 macos, that expands to two <code>#[ignore]</code> attributes, which then flags the second <code>ignore</code> as unused, which then fails the build. The easy fix is make the second one <code>all(aarch64, not(macos))</code>, but that feels ugly.</p>\n<p>Any preferred approach here?</p>",
        "id": 215968718,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604776065
    },
    {
        "content": "<p>cfg_attr I assume?</p>",
        "id": 215968934,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776384
    },
    {
        "content": "<p>Why do we need two ignores instead of (for example) <code>#[cfg_attr(any(macos, aarch64), ignore)]</code>?</p>",
        "id": 215968945,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/preferred.20way.20to.20handle.20multiple.20ignores/near/215968934\">said</a>:</p>\n<blockquote>\n<p>cfg_attr I assume?</p>\n</blockquote>\n<p>fixed.</p>",
        "id": 215968980,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604776444
    },
    {
        "content": "<p>The <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/process/process_common/tests.rs#L17-L28\">exact spot</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// See #14232 for more information, but it appears that signal delivery to a</span>\n<span class=\"c1\">// newly spawned process may just be raced in the macOS, so to prevent this</span>\n<span class=\"c1\">// test from being flaky we ignore it on macOS.</span>\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(target_os = </span><span class=\"s\">\"macos\"</span><span class=\"cp\">, ignore)]</span><span class=\"w\"></span>\n<span class=\"c1\">// When run under our current QEMU emulation test suite this test fails,</span>\n<span class=\"c1\">// although the reason isn't very clear as to why. For now this test is</span>\n<span class=\"c1\">// ignored there.</span>\n<span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"arm\"</span><span class=\"cp\">, ignore)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"aarch64\"</span><span class=\"cp\">, ignore)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"riscv64\"</span><span class=\"cp\">, ignore)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_process_mask</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I suppose that the comments could be combined into one block or interleaved between commas.</p>",
        "id": 215969020,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604776557
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"cp\">#[cfg_attr(any(</span>\n<span class=\"cp\">    // See #14232 for more information, but it appears that signal delivery to a</span>\n<span class=\"cp\">    // newly spawned process may just be raced in the macOS, so to prevent this</span>\n<span class=\"cp\">    // test from being flaky we ignore it on macOS.</span>\n<span class=\"cp\">    target_os = </span><span class=\"s\">\"macos\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">    // When run under our current QEMU emulation test suite this test fails,</span>\n<span class=\"cp\">    // although the reason isn't very clear as to why. For now this test is</span>\n<span class=\"cp\">    // ignored there.</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"arm\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"aarch64\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">    target_arch = </span><span class=\"s\">\"riscv64\"</span><span class=\"cp\">,</span>\n<span class=\"cp\">), ignore)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_process_mask</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215969087,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604776661
    },
    {
        "content": "<p>Hm</p>",
        "id": 215969134,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776691
    },
    {
        "content": "<p>Does the interleaving of comments and attributes work? if so that seems like the best bet</p>",
        "id": 215969143,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776725
    },
    {
        "content": "<p>It does seem like \"overlapping equivalent attributes because of cfg\" might be something we could not lint on</p>",
        "id": 215969154,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776755
    },
    {
        "content": "<p>but not sure how easy that would be to detect, especially if you wanted to avoid <code>#[cfg_attr(unix, ignore)] #[cfg_attr(unix, ignore)]</code></p>",
        "id": 215969160,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776783
    },
    {
        "content": "<p>That last example i pasted runs in the playground, so it appears syntactically valid</p>",
        "id": 215969208,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604776824
    },
    {
        "content": "<p>I can try it in the real code after this current test run finishes</p>",
        "id": 215969220,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604776873
    },
    {
        "content": "<p>yeah I would expect it to be, just wasn't sure</p>",
        "id": 215969235,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776916
    },
    {
        "content": "<p>probably makes rustfmt give up</p>",
        "id": 215969279,
        "sender_full_name": "simulacrum",
        "timestamp": 1604776929
    },
    {
        "content": "<p>yeah, rustfmt is pretty mum for it; I indented by hand.</p>",
        "id": 215969291,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604776962
    },
    {
        "content": "<p>(incorrectly, it appears)</p>",
        "id": 215969306,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1604777019
    }
]