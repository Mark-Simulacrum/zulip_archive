[
    {
        "content": "<p>Hi.<br>\nAs part of my work on the gcc codegen, I got to the point where I seem to produce invalid <code>.so</code> files for proc-macros as I get the following error when trying to load them:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, compiler/rustc_metadata/src/rmeta/decoder.rs:675:31\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/b41936b92cd8463020207cb2f62a4247942ef2e4/library/std/src/panicking.rs:515:5\n   1: core::panicking::panic_fmt\n             at /rustc/b41936b92cd8463020207cb2f62a4247942ef2e4/library/core/src/panicking.rs:92:14\n   2: core::panicking::panic\n             at /rustc/b41936b92cd8463020207cb2f62a4247942ef2e4/library/core/src/panicking.rs:50:5\n   3: rustc_metadata::rmeta::decoder::&lt;impl rustc_metadata::creader::CrateMetadataRef&gt;::raw_proc_macro\n   4: rustc_metadata::rmeta::decoder::cstore_impl::&lt;impl rustc_metadata::creader::CStore&gt;::item_children_untracked\n   5: rustc_resolve::Resolver::resolutions\n   6: rustc_resolve::imports::&lt;impl rustc_resolve::Resolver&gt;::resolve_ident_in_module_unadjusted_ext\n   7: rustc_resolve::Resolver::resolve_ident_in_module_ext\n   8: rustc_resolve::imports::ImportResolver::resolve_import::{{closure}}\n   9: rustc_resolve::imports::ImportResolver::resolve_imports\n  10: rustc_resolve::macros::&lt;impl rustc_expand::base::ResolverExpand for rustc_resolve::Resolver&gt;::resolve_imports\n  11: rustc_expand::expand::MacroExpander::fully_expand_fragment\n  12: rustc_expand::expand::MacroExpander::expand_crate\n  13: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n  14: rustc_interface::passes::configure_and_expand\n  15: rustc_interface::queries::Queries::expansion\n  16: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n  17: rustc_span::with_source_map\n  18: rustc_interface::interface::create_compiler_and_run\n  19: scoped_tls::ScopedKey&lt;T&gt;::set\n</code></pre></div>\n<p><a href=\"https://github.com/rust-lang/rust/blob/41c1f39fa8317fc16779ceda7536fe93f1c89c34/compiler/rustc_metadata/src/rmeta/decoder.rs#L675\">This is the code where it panics.</a></p>\n<p>I tried loading the <code>.so</code> in the LLVM-based rustc and it cannot load it either. And loading in the gcc-based rustc a <code>.so</code> generated by LLVM works, so I assume my gcc codegen produces wrong <code>.so</code> for proc-macros.</p>\n<p>Maybe the metadata is wrong.</p>\n<p>I'm not sure what's the best way to look at metadata so I used <code>objcopy</code> and here's the result:</p>\n<p>GCC metadata<br>\n<a href=\"/user_uploads/4715/vWjlDNS16zC07l0x3-1BPY3Q/metadata_gcc.png\">metadata_gcc.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vWjlDNS16zC07l0x3-1BPY3Q/metadata_gcc.png\" title=\"metadata_gcc.png\"><img src=\"/user_uploads/4715/vWjlDNS16zC07l0x3-1BPY3Q/metadata_gcc.png\"></a></div><p>LLVM metadata<br>\n<a href=\"/user_uploads/4715/gneyJxfuRftum349CMw3yeVO/metadata_llvm.png\">metadata_llvm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gneyJxfuRftum349CMw3yeVO/metadata_llvm.png\" title=\"metadata_llvm.png\"><img src=\"/user_uploads/4715/gneyJxfuRftum349CMw3yeVO/metadata_llvm.png\"></a></div><p>The results look different because I had to use a different command for LLVM which is why it has some extra stuff at the beginning.</p>\n<p>Any way on what could be the issue or how to debug this?</p>\n<p>Thanks!</p>",
        "id": 248724617,
        "sender_full_name": "antoyo",
        "timestamp": 1628354642
    },
    {
        "content": "<p>What is the code you use to create the metadata object file?</p>",
        "id": 248724809,
        "sender_full_name": "bjorn3",
        "timestamp": 1628354924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"404242\">@antoyo</span></p>",
        "id": 248724901,
        "sender_full_name": "bjorn3",
        "timestamp": 1628355023
    },
    {
        "content": "<p>Is it the code on the master branch?</p>",
        "id": 248724994,
        "sender_full_name": "bjorn3",
        "timestamp": 1628355189
    },
    {
        "content": "<p>Yes, <a href=\"https://github.com/antoyo/rustc_codegen_gcc/blob/master/src/base.rs#L138\">here</a></p>",
        "id": 248725231,
        "sender_full_name": "antoyo",
        "timestamp": 1628355527
    },
    {
        "content": "<p>Could you do <code>readelf --hex-dump .rustc /path/to/proc-macro.so</code> on both proc-macros? What is the result? Are there any differences?</p>",
        "id": 248725306,
        "sender_full_name": "bjorn3",
        "timestamp": 1628355613
    },
    {
        "content": "<p>I'm wondering if the metadata is getting corrupted somehow - it shouldn't be possible to have <code>proc_macro_data</code> be <code>Some</code>, but <code>raw_proc_macros</code> be <code>None</code>: <a href=\"https://github.com/rust-lang/rust/blob/508b328c398b84126011f6fe74d018fe855bc242/compiler/rustc_metadata/src/creader.rs#L418\">https://github.com/rust-lang/rust/blob/508b328c398b84126011f6fe74d018fe855bc242/compiler/rustc_metadata/src/creader.rs#L418</a></p>",
        "id": 248725729,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1628356175
    },
    {
        "content": "<p>Probably. That was why I suggested <code>readelf --hexdump .rustc</code> to see if the metadata is different.</p>",
        "id": 248725777,
        "sender_full_name": "bjorn3",
        "timestamp": 1628356224
    }
]