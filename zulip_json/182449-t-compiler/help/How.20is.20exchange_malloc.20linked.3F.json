[
    {
        "content": "<p>Hi. I'm curious how <code>exchange_malloc</code> is linked under the hood. IIUC the <code>exchange_malloc</code> lang item is annotated on a fn that calls the global allocator, and this lang_item is then referred to in the codegen / monomorphizer / mir etc. However, I notice that if I rename <code>fn exchange_malloc</code> to, for example, <code>fn foo</code> but keep all the lang items the same, ld complains about an <code>undefined reference to foo</code>. So I guess my question is why does this work when the fn and lang_item are both named <code>exchange_malloc</code> but not otherwise? Thanks</p>",
        "id": 222456262,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610468894
    },
    {
        "content": "<p>Ah, could this be to do with bootstrapping perhaps? If I compile stage1 (where <code>exchange_malloc</code> -&gt; <code>foo</code>), then ld won't be able to find <code>foo</code> in stage0's liballoc.</p>",
        "id": 222466774,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610472874
    },
    {
        "content": "<p>Bootstrapping shouldn't matter. Even an older rustc should just use the function name as stated in the libstd source (<code>foo</code>). It shouldn't have anything hard coded about the name. That is the whole purpose of the lang item system.</p>",
        "id": 222467062,
        "sender_full_name": "bjorn3",
        "timestamp": 1610473004
    },
    {
        "content": "<p>I guess what I mean is that when building stage1, the lang_item for <code>exchange_malloc</code> will look for the fn <code>foo</code> in stage0's libstd, but this won't exist because it was built with an old version of rustc (where <code>exchange_malloc</code> was annotated on <code>fn exchange_malloc</code>).</p>",
        "id": 222467563,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610473247
    },
    {
        "content": "<p>As I said, rustc shouldn't care about the name of it when it is compiled itself (<code>exchange_malloc</code>). It should only care about the name as stated in the libstd sources it compiled (<code>foo</code>).</p>",
        "id": 222467745,
        "sender_full_name": "bjorn3",
        "timestamp": 1610473335
    },
    {
        "content": "<p>Hmm, I think I understand. This stuff is a bit confusing though</p>",
        "id": 222467969,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610473444
    },
    {
        "content": "<p>I'm unclear why then that means that <code>./x.py build</code> leads to a linker error <code>undefined symbol to alloc::alloc::foo</code> when renaming the function which is annotated with the <code>exchange_malloc</code> lang_item.</p>",
        "id": 222468273,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1610473577
    }
]