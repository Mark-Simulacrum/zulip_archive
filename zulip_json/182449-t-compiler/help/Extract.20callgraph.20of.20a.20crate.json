[
    {
        "content": "<p>Hello, hello!<br>\nIn order to have a good understanding of an unknown codebase, I would like to be able to interactively visualize the whole call graph. I searched before, and didn't found one. But since I have some free time, I could build it myself! The pipeline is relatively simple:</p>\n<ul>\n<li>extract the fully qualified name of all functions/methods declared in the crate.</li>\n<li>create an hyperlink to the documentation of said function.</li>\n<li>extract from the AST/IR/…? the fully qualified name of all called functions. Ideally also extract all Fn, Trait parameters and other means to inject function dependencies<ul>\n<li>create a graph of dependencies, export it with graphviz</li>\n<li>displays the graph</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> told me that I could write a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/trait.Visitor.html\"><code>Visitor</code></a> that only looks at functions. He also told me that I can take a look at <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_interface/util/struct.ReplaceBodyWithLoop.html\"><code>ReplaceBodyWithLoop</code></a> as an example. More specifically, apparently what I need is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.body_owners\"><code> tcx.hir().krate().body_ids</code></a> to be able to look at each function body one at at time. </p>\n<p>My question is: how do I write my <code>main()</code>? More specifically, how do I build that <code>tcx</code>?</p>\n<p>(note in the meantime I got that answer):<br>\n<span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Extract.20callgraph.20of.20a.20crate/near/216012863\">said</a>:</p>\n<blockquote>\n<p>see <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/src/driver.rs#L418-L422\">https://github.com/rust-lang/rust-clippy/blob/master/src/driver.rs#L418-L422</a> for examples of how to use rustc_driver then</p>\n</blockquote>",
        "id": 216012979,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604851709
    },
    {
        "content": "<p>btw, the way I found that is I know clippy is a reasonably readable codebase, and then I just ran <code>rg interface src/tools/clippy</code></p>",
        "id": 216012998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604851751
    },
    {
        "content": "<p>Thanks</p>",
        "id": 216013076,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604851847
    },
    {
        "content": "<p>So, the link just gave is an excellent example of what my main should should like. What I need to do is to change the last 5 lines. More specifically <code>rustc_driver::RunCompiler::new(&amp;args, callbacks).run()</code> by using my own <code>callbacks</code>. However I don't understand how I should register the code doing <code>self.hir().krate().body_ids.iter()</code>. I think it's in the implementation of the <a href=\"https://github.com/rust-lang/rust-clippy/blob/master/src/driver.rs#L70-L93\"><code>config()</code></a> function but I don't understand how it works.</p>",
        "id": 216013650,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604852719
    },
    {
        "content": "<p>hmm, clippy does this differently from rustdoc - I think because it only has to override <code>register_lints</code> and nothing else?</p>",
        "id": 216013798,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604852889
    },
    {
        "content": "<p>the way rustdoc does this is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L430L432\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L430L432</a>, which has access to a full <code>Compiler</code></p>",
        "id": 216013808,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604852909
    },
    {
        "content": "<p>and then gets a <code>tcx</code> from <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L470\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L470</a></p>",
        "id": 216013814,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604852930
    },
    {
        "content": "<p>so I think the main thing is to set up a  <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_interface/interface/struct.Config.html\"><code>Config</code></a> to pass to <code>create_compiler_and_run</code>.</p>",
        "id": 216013840,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604852975
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216013843,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604852984
    },
    {
        "content": "<p>alternatively I think you could hack it by having <code>register_lints</code> do things other than run lints</p>",
        "id": 216013985,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604853129
    },
    {
        "content": "<p>This looks like an excellent starting point.</p>",
        "id": 216014074,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604853245
    },
    {
        "content": "<p>just ignore the hackery around lints and extern crates <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216014096,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604853290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/122652-new-members/topic/Hi.20from.20Robin/near/216010827\">said</a>:</p>\n<blockquote>\n<p>If you use rustup-toolchain-install-master you don't need to build from source</p>\n</blockquote>\n<p>How do I tell cargo to use the internal of rustc that I installed with <code>rustup-toolchain-install-master</code>? I assume I can't just add stuff in the <code>dependency</code> section of my <code>Cargo.toml</code>.</p>",
        "id": 216014114,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604853333
    },
    {
        "content": "<p>I'd see how clippy does it</p>",
        "id": 216014120,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604853346
    },
    {
        "content": "<p>I think you just need <code>feature(rustc_private)</code> actually?</p>",
        "id": 216014163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604853368
    },
    {
        "content": "<p>or something like that</p>",
        "id": 216014166,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604853374
    },
    {
        "content": "<p>ah! That's simpler than what I thought.</p>",
        "id": 216014174,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604853413
    },
    {
        "content": "<p>Thanks for everything. I will try to test this, but I need to take a break right now!</p>",
        "id": 216014271,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604853567
    },
    {
        "content": "<p>something like <a href=\"https://github.com/japaric/cargo-call-stack\">https://github.com/japaric/cargo-call-stack</a> or like <a href=\"https://github.com/praezi/rust\">https://github.com/praezi/rust</a> ?</p>",
        "id": 216015870,
        "sender_full_name": "lqd",
        "timestamp": 1604855780
    },
    {
        "content": "<p>Yes. Last time I tried the former didn't worked for me, and the later (AFAIK) was conceived for a whole crater run and not just the current crate. I also plan to improve the output (like direct link to the documentation, …). But I will re-take a look at both, thanks for reminding me of their existance.</p>",
        "id": 216022471,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604865347
    },
    {
        "content": "<p>I really have the feeling that I'm totally loosing my time <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> I tried to create a <code>main()</code> for more than two hours still without any success… Given that I think I will need to be able to access the <code>tcx</code>, I thought that the best idea would be to start from <code>rustdoc</code>, and then shave what I don't need. Given that <code>lib.rs</code> in <code>rustdoc</code> has a main, I assume it was going to be a simple change in <code>Cargo.toml</code> (changing it from lib to binary). That's not the case:</p>\n<ul>\n<li>I get way too much clippy warning</li>\n<li>all dependencies (<code>lazy_static</code> and <code>tracing</code>) are not specified in the <code>Cargo.toml</code></li>\n<li>apparently having <code>#[feature(rustc_private)]</code> is not enough, cargo complains that he can't find the extern crate <code>rustc_ast</code></li>\n</ul>\n<p>I don't know how to move forward. I would like to spend time on adding feature, not on the build system. One of the top reason I prefer Rust to C++ <em>is</em> the build system, and frankly, the rust repo is a mess.<br>\n/rant</p>\n<p>But I still want to move forward.</p>",
        "id": 216183753,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604997816
    },
    {
        "content": "<p>To sum-up, how do I create a main, that give me access to <code>tcx</code>.</p>",
        "id": 216184773,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1604998465
    },
    {
        "content": "<p>for a binary, <a href=\"https://github.com/rust-lang/miri/blob/master/src/bin/miri.rs\">miri</a> is another example of an executable giving you access to the tcx</p>",
        "id": 216189787,
        "sender_full_name": "lqd",
        "timestamp": 1605001720
    },
    {
        "content": "<p>Solved:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20create.20an.20executable.20accessing.20.60rustc_private.60.3F/near/216187308\">said</a>:</p>\n<blockquote>\n<p>You need to install both the <code>rustc-dev</code> and <code>llvm-tools-preview</code> rustup components. The former depends on the later, but rustup doesn't have a way to state such dependency.</p>\n</blockquote>",
        "id": 216194937,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605005283
    },
    {
        "content": "<p>Given my difficulties on building the application itself, I tried to see how I should display the callgraph. I want to track both direct function call and indirect ones (through function pointers). So far,here is what I got:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m1</span>::<span class=\"n\">foo1</span><span class=\"p\">(</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m1</span>::<span class=\"n\">foo3</span><span class=\"p\">(</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">m1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo1</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo2</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo2</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fct</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo2</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">m2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">baz</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hello word\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I will try to generate this graph: <em>Note: graphviz syntax doesn't seems to be supported</em></p>\n<div class=\"codehilite\"><pre><span></span><code>strict digraph {\n\n    subgraph cluster0 {\n        label = &lt;&lt;u&gt;test1&lt;/u&gt;&gt;\n        fontcolor = green\n        color=none\n        href=&quot;target/doc/test1/index.html&quot;\n\n        &quot;main&quot; [shape=none; label=&quot;main&quot;; href=&quot;target/doc/test1/index.html&quot;]\n\n        subgraph cluster1·\n        {\n            label = &lt;&lt;u&gt;m1&lt;/u&gt;&gt;\n            fontcolor = green\n            color = green\n            href=&quot;target/doc/test1/m1/index.html&quot;\n\n            &quot;m1::foo1&quot; [shape=none; label=&quot;foo1&quot;; href=&quot;target/doc/test1/m1/fn.foo1.html&quot;]\n            &quot;m1::foo2&quot; [shape=none; label=&quot;foo2&quot;; href=&quot;target/doc/test1/m1/fn.foo2.html&quot;]\n            &quot;m1::foo3&quot; [shape=none; label=&quot;foo3&quot;; href=&quot;target/doc/test1/m1/fn.foo3.html&quot;]\n\n            &quot;m1::foo1(arg)&quot;[label=&quot;&quot;; fixedsize=&quot;false&quot;; width=0; height=0; shape=none]\n            &quot;m1::foo2(arg)&quot;[label=&quot;&quot;; fixedsize=&quot;false&quot;; width=0; height=0; shape=none]\n            &quot;m1::foo3(arg)&quot;[label=&quot;&quot;; fixedsize=&quot;false&quot;; width=0; height=0; shape=none]\n        }\n\n        subgraph cluster2·\n        {\n            label = &lt;&lt;u&gt;m2&lt;/u&gt;&gt;\n            fontcolor = green\n            color = green\n            href=&quot;target/doc/test1/m2/index.html&quot;\n\n            &quot;m2::bar&quot; [shape=none; label=&quot;bar&quot;; href=&quot;target/doc/test1/m2/fn.bar.html&quot;]\n            &quot;m2::baz&quot; [shape=none; label=&quot;baz&quot;; href=&quot;target/doc/test1/m2/fn.baz.html&quot;]\n        }\n    }\n\n\n    &quot;main&quot; -&gt; &quot;m1::foo1(arg)&quot; [arrowhead=None]; &quot;m1::foo1(arg)&quot; -&gt; &quot;m1::foo1&quot;; &quot;m1::foo1(arg)&quot; -&gt; &quot;m2::bar&quot; [style=dotted; constraint=false]\n    &quot;main&quot; -&gt; &quot;m1::foo3(arg)&quot; [arrowhead=None]; &quot;m1::foo3(arg)&quot; -&gt; &quot;m1::foo3&quot;; &quot;m1::foo3(arg)&quot; -&gt; &quot;m2::bar&quot; [style=dotted; constraint=false]\n    &quot;m1::foo1&quot; -&gt; &quot;m1::foo2(arg)&quot; [arrowhead=None]; &quot;m1::foo2(arg)&quot; -&gt; &quot;m1::foo2&quot;; &quot;m1::foo2(arg)&quot; -&gt; &quot;m1::foo1(arg)&quot; [style=dotted; constraint=false]\n    &quot;m1::foo3&quot; -&gt; &quot;m1::foo2(arg)&quot; [arrowhead=None]; &quot;m1::foo2(arg)&quot; -&gt; &quot;m1::foo2&quot;; &quot;m1::foo2(arg)&quot; -&gt; &quot;m1::foo3(arg)&quot; [style=dotted; constraint=false]\n    &quot;m1::foo2&quot; -&gt; &quot;m1::foo2(arg)&quot; [style=dotted; arrowhead=None; constraint=false]\n    &quot;m2::bar&quot; -&gt; &quot;m2::baz&quot;\n\n}\n</code></pre></div>\n<p>Which will produce the following svg:<br>\n<a href=\"/user_uploads/4715/5FX7oIizoEkF_ATEvOKBvRGN/test1.svg\">test1.svg</a></p>",
        "id": 216237442,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605026211
    },
    {
        "content": "<p>The hard lines are direct call, while dotted lines are the function pointers. Modules are in green. All text elements have a direct link to the associated documentation generated by rustdoc (currently hardcoded to the path in my own computer).</p>",
        "id": 216237734,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605026321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">krate</span><span class=\"p\">().</span><span class=\"n\">body_ids</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">owner</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">body_owners</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This code gives me access to respectively the <code>BodyId</code> and the <code>DefId</code> of all the items  of the code I'm analyzing. How do I get the function name, or the node of the called functions? I was expecting to have some kind of function like <code>DefId::name()</code>, or being able to use use id as index of some kind of container, but I can't find how to do it.</p>",
        "id": 216261573,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605036444
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.item_name\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.item_name</a></p>",
        "id": 216261611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605036465
    },
    {
        "content": "<p>almost everything is a method on tcx</p>",
        "id": 216261643,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605036475
    },
    {
        "content": "<p>ok, perfect!</p>",
        "id": 216261710,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605036488
    },
    {
        "content": "<p>And how do I get from the <code>DefId</code> (I assume it's the identifier of the function) to the tree inside? I'm expecting to be able to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">body_owners</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">function_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"n\">owner</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">get_tree_from</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// I can't write this line</span>\n<span class=\"w\">          </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"k\">type</span> <span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">callable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{} is called by {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">function_name</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216266031,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605038535
    },
    {
        "content": "<p>maybe <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.typeck_body\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.typeck_body</a> ?</p>",
        "id": 216266683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605038845
    },
    {
        "content": "<p>btw the way I'm finding these is ctrl+f 'body' <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 216266724,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605038862
    },
    {
        "content": "<p>I did ctrl+f, but I think I didn't realized that <code>typecheck_body</code> was what I wanted. I guess I start to be tired!</p>",
        "id": 216267077,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605039008
    },
    {
        "content": "<p>well, I'm not sure either <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216267179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605039072
    },
    {
        "content": "<p>maybe look how <code>rustc_typeck</code> does this</p>",
        "id": 216267206,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605039088
    },
    {
        "content": "<p>Will do tomorow</p>",
        "id": 216267451,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605039192
    },
    {
        "content": "<p>With this, I'm able to access to all functions, get their names, the module they are in, and their bodies:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">krate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">krate</span><span class=\"p\">.</span><span class=\"n\">body_ids</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">parent_module</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">).</span><span class=\"n\">to_def_id</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_function_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_path_str</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"p\">.</span><span class=\"n\">owner</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">krate</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">body</span><span class=\"p\">).</span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now, I would need to be able to walk on that graph in order to search for all called function. I can totally implement that tree traversal, by inspecting the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/enum.ExprKind.html\">kind</a> recursively, but I was wondering if there was an easier way. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">walk_graph_depth_first</span><span class=\"p\">(</span><span class=\"n\">hir</span>: <span class=\"nc\">Map</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span>: <span class=\"nc\">Body</span><span class=\"o\">&lt;'</span><span class=\"na\">hir</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">HidId</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- I need this function</span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">hir_id</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">walk_graph_depth_first</span><span class=\"p\">(</span><span class=\"n\">hir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">item</span><span class=\"p\">(</span><span class=\"n\">hir_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">generic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// do something with the called function</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216318350,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605083545
    },
    {
        "content": "<p>Would it make sense to operate on MIR instead of HIR? If you use <code>-Zalways-encode-mir</code>, you can access all the MIR of other crates. The MIR also has all overloaded operator calls desugared to regular calls.</p>",
        "id": 216322393,
        "sender_full_name": "bjorn3",
        "timestamp": 1605086388
    },
    {
        "content": "<p>Actually IDK. I would like to be able to get the callgraph of the current crate, but I'm not sure if I need to be able to also get the one of all depending crates. I also would like to be able to track the source of indirect calls, like function pointers. Do you think that MIR is more suited to this analysis?</p>",
        "id": 216326904,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605089391
    },
    {
        "content": "<p>The rustc development guide on <a href=\"https://rustc-dev-guide.rust-lang.org/mir/index.html\">MIR</a> seems to back-up your claim <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (emphasis mine):</p>\n<blockquote>\n<p>If you'd like a very high-level introduction to MIR, as well as some of the compiler concepts that it relies on (such as <strong>control-flow graphs</strong> and desugaring), you may enjoy the rust-lang blog post that introduced MIR.</p>\n</blockquote>",
        "id": 216327189,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605089567
    },
    {
        "content": "<p>(posted my previous message in the wrong topic)</p>",
        "id": 216327251,
        "sender_full_name": "bjorn3",
        "timestamp": 1605089638
    },
    {
        "content": "<p>It's what I thought too ^^</p>",
        "id": 216327304,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605089652
    },
    {
        "content": "<p>You may want to take a look at the mono item collector: <a href=\"https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler/rustc_mir/src/monomorphize/collector.rs\">https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler/rustc_mir/src/monomorphize/collector.rs</a> You will probably want to adapt it to not monomorphize, consider all functions as roots and not filter functions that would be codegened in other crates.</p>",
        "id": 216327517,
        "sender_full_name": "bjorn3",
        "timestamp": 1605089836
    },
    {
        "content": "<p>Let me see</p>",
        "id": 216327605,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605089902
    },
    {
        "content": "<p>Are call to const function still present in MIR? I also don't think that macro are visible anymore. MIR seems effectively way simpler to analyze than HIR, but I have the feeling that too much information have already been lost.</p>",
        "id": 216378119,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605117552
    },
    {
        "content": "<p>IIRC const evaluation is ran on MIR, so MIR has to be generated before const evaluation</p>",
        "id": 216378367,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605117670
    },
    {
        "content": "<p>Ah, that's good to know :)</p>",
        "id": 216378416,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605117694
    },
    {
        "content": "<p>Macros are expanded before though</p>",
        "id": 216378525,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605117742
    },
    {
        "content": "<p>I guess that's ok. I have no idea how I should be displaying them anyway.</p>",
        "id": 216378576,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605117775
    },
    {
        "content": "<p>This is for the callgraph you're working on? I also think it makes more sense to consider the result of macro expansion rather than the macro</p>",
        "id": 216378767,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605117853
    },
    {
        "content": "<p>So, my next question is going to be: how do I construct the MIR? I'm using librustdoc as a base. I was modifying <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/core.rs#L490\">`run_global_ctxt</a> which gave me access to the HIR, but since now I would need to access to MIR, I'm not sure it's the right place anymore.</p>",
        "id": 216378889,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605117935
    },
    {
        "content": "<p>And yes, it's still for the callgraph.</p>",
        "id": 216378907,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605117948
    },
    {
        "content": "<p>MIR is constructed in <code>rustc_mir_build</code>, I guess you might want to check entry points there</p>",
        "id": 216379014,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605117997
    },
    {
        "content": "<p>That's frustrating, I've discovered quite a lot of the inside of rustc (that's really interesting), but at the same time I have still not wrote a single line that will be really useful for that project!</p>",
        "id": 216379097,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605118040
    },
    {
        "content": "<p>I'm also currently trying to understand how MIR is generated for match expressions, and... I now understand why it feels so magical to use <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 216379267,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605118127
    },
    {
        "content": "<p>The covers of compiler theory textbooks have a wizard for a reason <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 216379345,
        "sender_full_name": "vn-ki",
        "timestamp": 1605118183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> Did you read the introduction <a href=\"https://blog.rust-lang.org/2016/04/19/MIR.html\">blog post</a> to MIR? Match lowering is explained in it.</p>",
        "id": 216379455,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605118229
    },
    {
        "content": "<p>Yes, but it's unfortunately just an overview <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 216379494,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605118248
    },
    {
        "content": "<p>ah!</p>",
        "id": 216379515,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605118264
    },
    {
        "content": "<p>is rustdoc building MIR at one point?</p>",
        "id": 216379800,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605118434
    },
    {
        "content": "<p>no, rustdoc specifically avoids building mir</p>",
        "id": 216379861,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605118456
    },
    {
        "content": "<p>ah, so starting from rustdoc isn't a good idea then!</p>",
        "id": 216379887,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605118477
    },
    {
        "content": "<p>I think it's just <code>tcx.analysis()</code> though</p>",
        "id": 216379899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605118487
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73566\">https://github.com/rust-lang/rust/pull/73566</a> has way more info about this than you want</p>",
        "id": 216379932,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605118503
    },
    {
        "content": "<p>specifically the changes to <a href=\"https://github.com/rust-lang/rust/pull/73566/files#diff-2af9d5298f727457226da68b0dc427149fc68b3aa0d0fe64cca15b63c34af997\"><code>librustdoc/core.rs</code></a></p>",
        "id": 216380018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605118558
    },
    {
        "content": "<p>I'm not sure I understand everything. What you said was that rustdoc intentionally avoids buildir MIR, because otherwise part of its analysis is invalidated, and results in ICE. Then you showed me a commit in which there is an implementation of the <code>Visitor</code> trait, which is the way I should walk the graph, if I want to be able to do the analysis on the HIR. Did I get it right?</p>",
        "id": 216383859,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605120563
    },
    {
        "content": "<p>right, yes, the deleted code is what is checking MIR</p>",
        "id": 216383907,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605120594
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.analysis\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.analysis</a></p>",
        "id": 216383963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605120606
    },
    {
        "content": "<p>hmm it doesn't actually give you back anything useful though <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/queries/struct.analysis.html#impl-QueryConfig\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/query/queries/struct.analysis.html#impl-QueryConfig</a></p>",
        "id": 216384018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605120640
    },
    {
        "content": "<p>It's not really obvious that <code>&lt;analysis&lt;'tcx&gt; as QueryConfig&gt;::Stored</code> means <code>MIR</code> <span aria-label=\"face with thermometer\" class=\"emoji emoji-1f912\" role=\"img\" title=\"face with thermometer\">:face_with_thermometer:</span></p>",
        "id": 216384068,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605120662
    },
    {
        "content": "<p>yeah I'm working on that too <a href=\"https://github.com/rust-lang/rust/pull/77467\">https://github.com/rust-lang/rust/pull/77467</a></p>",
        "id": 216384102,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605120679
    },
    {
        "content": "<p>don't get me started</p>",
        "id": 216384117,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605120687
    },
    {
        "content": "<p>Oh, that's good!</p>",
        "id": 216384380,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605120810
    },
    {
        "content": "<p>it's blocked for ages on <a href=\"https://github.com/rust-lang/rust/pull/78082\">https://github.com/rust-lang/rust/pull/78082</a> unfortunately</p>",
        "id": 216384490,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605120867
    },
    {
        "content": "<p>To sum-up. What I need to do to be able to extract the call-graph is:</p>\n<ol>\n<li>get the list of functions with <code>tcx.hir().krate().body_ids.iter()</code> (the name is <code>tcx.def_path_str(body.hir_id.owner.to_def_id())</code></li>\n<li>create a type <code>SearchFunctionCall</code> that impl <code>Visitor&lt;'tcx&gt;</code>, and that export the name of all function call encountered</li>\n<li>call <code>SearchFunctionCall::new().visit_body(body)</code> with <code>body</code> being the object I got in step 1.</li>\n</ol>\n<p>Am I right?</p>",
        "id": 216385355,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605121272
    },
    {
        "content": "<p>that's the way to do it in HIR, I think</p>",
        "id": 216385411,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605121300
    },
    {
        "content": "<p>I'm not sure how <code>SearchFunctionCall</code> would work</p>",
        "id": 216385446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605121319
    },
    {
        "content": "<p>Given what I did with my experiment with graphviz, I need to collect:</p>\n<ul>\n<li>For each module the name of the function declared in them</li>\n<li>For each function the name of the function they are calling</li>\n</ul>\n<p>Both of those step are independent, and can be done in parallel. What I am going to do is to create a list (a <code>Vec</code> to be more precise) of the id of the function that are called. That <code>Vec</code> will be a field of the <code>SearchFunctionCall</code>.</p>",
        "id": 216386278,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605121738
    },
    {
        "content": "<p>By the way, should I create a standalone tool, or something that integrates into rustdoc?</p>",
        "id": 216388626,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605123125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/216379267\">said</a>:</p>\n<blockquote>\n<p>I'm also currently trying to understand how MIR is generated for match expressions, and... I now understand why it feels so magical to use <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>It's somehow both comforting and scary to open that file and see the huge comment with a paper reference at the top explaining how it works <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 216388880,
        "sender_full_name": "scottmcm",
        "timestamp": 1605123253
    },
    {
        "content": "<p>I would say that it's the kind of thing that are not <em>that</em> hard to understand, but extremely hard to explain using only top-to bottom text (ie, no diagram, flow chart, …).</p>",
        "id": 216389118,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605123376
    },
    {
        "content": "<p>I don't like graphs. Since indexes are only checked at runtime, the compiler can't help me. That's a very weird feeling when working in Rust. I feel naked without the compiler!</p>",
        "id": 216389265,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605123477
    },
    {
        "content": "<p>there's a short section in <a href=\"https://rustc-dev-guide.rust-lang.org/pat-exhaustive-checking.html?highlight=match#pattern-and-exhaustiveness-checking\">https://rustc-dev-guide.rust-lang.org/pat-exhaustive-checking.html?highlight=match#pattern-and-exhaustiveness-checking</a></p>",
        "id": 216389357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605123506
    },
    {
        "content": "<p>Why does <code>hir.local_def_id(id);</code> fails?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">robin</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">rustup</span><span class=\"o\">/</span><span class=\"n\">toolchains</span><span class=\"o\">/</span><span class=\"n\">nightly</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">rustlib</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_middle</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">hir</span><span class=\"o\">/</span><span class=\"n\">map</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">163</span>:<span class=\"mi\">13</span>: <span class=\"nc\">local_def_id</span>: <span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">[</span><span class=\"mi\">8787</span><span class=\"p\">]</span>::<span class=\"n\">main</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">parent</span>: <span class=\"nc\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">[</span><span class=\"mi\">8787</span><span class=\"p\">]</span>::<span class=\"n\">main</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">node</span>: <span class=\"nc\">Expr</span><span class=\"p\">(</span><span class=\"n\">Expr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nc\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">[</span><span class=\"mi\">8787</span><span class=\"p\">]</span>::<span class=\"n\">main</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Path</span><span class=\"p\">(</span><span class=\"n\">Resolved</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Path</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">test</span><span class=\"o\">/</span><span class=\"n\">test1</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">35</span>:<span class=\"mi\">5</span>: <span class=\"mi\">35</span>:<span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">Def</span><span class=\"p\">(</span><span class=\"nb\">Fn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">[</span><span class=\"mi\">8787</span><span class=\"p\">]</span>::<span class=\"n\">foo</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">segments</span>: <span class=\"p\">[</span><span class=\"n\">PathSegment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ident</span>: <span class=\"nc\">foo</span><span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hir_id</span>: <span class=\"nc\">Some</span><span class=\"p\">(</span><span class=\"n\">HirId</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">[</span><span class=\"mi\">8787</span><span class=\"p\">]</span>::<span class=\"n\">main</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">local_id</span>: <span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}),</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">Some</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">args</span>: <span class=\"nc\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">infer_args</span>: <span class=\"nc\">true</span><span class=\"w\"> </span><span class=\"p\">}]</span><span class=\"w\"> </span><span class=\"p\">})),</span><span class=\"w\"> </span><span class=\"n\">attrs</span>: <span class=\"nc\">ThinVec</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">span</span>: <span class=\"nc\">test</span><span class=\"o\">/</span><span class=\"n\">test1</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">35</span>:<span class=\"mi\">5</span>: <span class=\"mi\">35</span>:<span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216390056,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605123879
    },
    {
        "content": "<p>expressions don't have a defid</p>",
        "id": 216390237,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605123969
    },
    {
        "content": "<p>they're not serialized cross-crate</p>",
        "id": 216390243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605123975
    },
    {
        "content": "<p>ah</p>",
        "id": 216390546,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605124144
    },
    {
        "content": "<p>Then why <code>pub fn def_kind(&amp;self, local_def_id: LocalDefId) -&gt; DefKind</code> takes a <code>LocalDefId</code></p>",
        "id": 216390598,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605124176
    },
    {
        "content": "<p>anything prefixed with <code>Def</code> is for working with metadata serialized cross crate</p>",
        "id": 216390829,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605124295
    },
    {
        "content": "<p>you probably want <code>tcx.hir().get(hir_id)</code> and then match on the <code>Node</code></p>",
        "id": 216390855,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605124312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/216384102\">said</a>:</p>\n<blockquote>\n<p>yeah I'm working on that too <a href=\"https://github.com/rust-lang/rust/pull/77467\">https://github.com/rust-lang/rust/pull/77467</a></p>\n</blockquote>\n<p>Oh, that's awesome!</p>",
        "id": 216391558,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605124674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> What information are you trying to get, and what do you have at your disposal?</p>",
        "id": 216391648,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605124714
    },
    {
        "content": "<p>I'm trying to get the type of the node that I'm visiting (I'm visiting recursively all nodes inside a function), and I want to find the function call. I have access to the <code>tcx</code> (so the <code>hir</code>), and the <code>HirId</code> + <code>Path</code> of the node I'm visiting</p>",
        "id": 216392127,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605124934
    },
    {
        "content": "<p>I think that <code>tcx.hir().get()</code> is the right track</p>",
        "id": 216392180,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605124963
    },
    {
        "content": "<p>you can probably pretty much look at save analysis here</p>",
        "id": 216392201,
        "sender_full_name": "lcnr",
        "timestamp": 1605124975
    },
    {
        "content": "<p>what is safe analysis?</p>",
        "id": 216392238,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605124992
    },
    {
        "content": "<p>it's used by RLS for type info and stuff</p>",
        "id": 216392302,
        "sender_full_name": "lcnr",
        "timestamp": 1605125024
    },
    {
        "content": "<p>and already implements a way to get the type for a given hir id afaik</p>",
        "id": 216392330,
        "sender_full_name": "lcnr",
        "timestamp": 1605125041
    },
    {
        "content": "<p>it's part of the rust repo</p>",
        "id": 216392380,
        "sender_full_name": "lcnr",
        "timestamp": 1605125050
    },
    {
        "content": "<p>Otherwise I'd have suggested maybe <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/intravisit/index.html\"><code>rustc_hir::intravisit</code></a></p>",
        "id": 216392536,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125124
    },
    {
        "content": "<p>Which I think would allow you to just define a <code>visit_expr</code> hook, where you can check if the expr is a function call</p>",
        "id": 216392740,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125217
    },
    {
        "content": "<p>And the visitor can handle HIR traversal for you</p>",
        "id": 216392762,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125226
    },
    {
        "content": "<p>That's probably better that what I was trying</p>",
        "id": 216392810,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605125252
    },
    {
        "content": "<p>So one issue is that you have to keep the correct typeck_result around if you want to do this on this hir</p>",
        "id": 216392864,
        "sender_full_name": "lcnr",
        "timestamp": 1605125281
    },
    {
        "content": "<p>save_analysis implements this for the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_save_analysis/dump_visitor/struct.DumpVisitor.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_save_analysis/dump_visitor/struct.DumpVisitor.html</a></p>",
        "id": 216392929,
        "sender_full_name": "lcnr",
        "timestamp": 1605125300
    },
    {
        "content": "<p>pretty much look at the places where <code>nest_typeck_results</code> is used, the rest can hopefully be ignored</p>",
        "id": 216393059,
        "sender_full_name": "lcnr",
        "timestamp": 1605125375
    },
    {
        "content": "<p>sry if i missed something, but was there something stopping you from operating on mir?</p>",
        "id": 216393338,
        "sender_full_name": "lcnr",
        "timestamp": 1605125524
    },
    {
        "content": "<p>that would be a lot easier afaik as you already have the correct types everywhere</p>",
        "id": 216393376,
        "sender_full_name": "lcnr",
        "timestamp": 1605125545
    },
    {
        "content": "<p>I think types can be ignored if the only goal is to construct a callgraph? Or am I missing something too?</p>",
        "id": 216393456,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125593
    },
    {
        "content": "<p>well you need the type of the called function</p>",
        "id": 216393567,
        "sender_full_name": "lcnr",
        "timestamp": 1605125644
    },
    {
        "content": "<p>to know which function you are calling</p>",
        "id": 216393596,
        "sender_full_name": "lcnr",
        "timestamp": 1605125650
    },
    {
        "content": "<p>If I want to be able to report the places where things like functions pointers are set, I need to be able to track the type of variables</p>",
        "id": 216393601,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605125653
    },
    {
        "content": "<p>Ah, right, of course <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 216393613,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125664
    },
    {
        "content": "<p>So the reason I was doing the analysis on the HIR was because <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> helped me to get started, by forking <code>rustdoc</code>, and since <code>rustdoc</code> doesn't generates MIR, I was stuck on HIR</p>",
        "id": 216393785,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605125767
    },
    {
        "content": "<p>You could still visit MIR with a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/visit/trait.Visitor.html\"><code>rustc_middle::mir::visit::Visitor</code></a> though</p>",
        "id": 216393800,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125778
    },
    {
        "content": "<p>I'm not against using MIR, I just need a main functions that gives me that MIR <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216393831,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605125806
    },
    {
        "content": "<p>Have you looked at the rustc dev guide, and maybe also the rustc driver?</p>",
        "id": 216393913,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125859
    },
    {
        "content": "<p>(Maybe I shouldn't try to help, I may make things even more confusing)</p>",
        "id": 216393949,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125883
    },
    {
        "content": "<p>In the guide:</p>\n<blockquote>\n<p>The lowering is triggered by calling the <code>mir_built</code> query.</p>\n</blockquote>",
        "id": 216394021,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605125921
    },
    {
        "content": "<p>Yes, no, probably, I don't know!<br>\nMore seriously, I read the part on HIR and MIR from the rustc dev guide, but not the rustc driver</p>",
        "id": 216394085,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605125970
    },
    {
        "content": "<p>If I want to create my analysis, what tool can I fork, and where should I put my code? Writing a <code>main()</code> that compiles code up to mir is not something I am able to write on my own with my current understanding of the rust repository.</p>",
        "id": 216395400,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605126768
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/rustc-driver.html\">This chapter</a> is interesting, though a bit short</p>",
        "id": 216397478,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605127939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/216395400\">said</a>:</p>\n<blockquote>\n<p>If I want to create my analysis, what tool can I fork, and where should I put my code? Writing a <code>main()</code> that compiles code up to mir is not something I am able to write on my own with my current understanding of the rust repository.</p>\n</blockquote>\n<p>Maybe <a href=\"https://github.com/rust-lang/miri\"><code>miri</code></a>?</p>",
        "id": 216398529,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605128510
    },
    {
        "content": "<p>What <code>miri</code> does is that it implements <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/trait.Callbacks.html\"><code>rustc_driver::Callbacks</code></a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">rustc_driver</span>::<span class=\"n\">Callbacks</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MiriCompilerCalls</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">after_analysis</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">compiler</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">rustc_interface</span>::<span class=\"n\">interface</span>::<span class=\"n\">Compiler</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">queries</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">rustc_interface</span>::<span class=\"n\">Queries</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// snip</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And then it just uses</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">run_compiler</span><span class=\"p\">(</span><span class=\"n\">rustc_args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MiriCompilerCalls</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">miri_config</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216399451,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605129090
    },
    {
        "content": "<p>And basically once you have the <code>TyCtxt</code> you can do <em>everything</em></p>",
        "id": 216400718,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605129846
    },
    {
        "content": "<p>You can use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.body_owners\"><code>TyCtxt::body_owners</code></a> to get an iterator of <code>LocalDefId</code> in the crate, from those <code>LocalDefId</code> you can generate MIR with <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.mir_built\"><code>TyCtxt::mir_built</code></a> (or maybe some other <code>mir_something</code> method), to get MIR <code>Body</code>s, and then you can visit those bodies with a MIR <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/visit/trait.Visitor.html\"><code>Visitor</code></a></p>",
        "id": 216401033,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605130068
    },
    {
        "content": "<p>That would be my intuition</p>",
        "id": 216401039,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605130075
    },
    {
        "content": "<p>But perhaps using save analysis is just much better, I don't know what it contains</p>",
        "id": 216401175,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605130170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> is <a href=\"https://docs.rs/rls-data/0.19.0/rls_data/struct.Analysis.html\"><code>rls_data::Analysis</code></a> the result of save analysis?</p>",
        "id": 216401281,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605130217
    },
    {
        "content": "<p>i don't know tbh</p>",
        "id": 216401313,
        "sender_full_name": "lcnr",
        "timestamp": 1605130249
    },
    {
        "content": "<p>save analysis isn't super well maintained from what I've heard</p>",
        "id": 216401358,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605130281
    },
    {
        "content": "<p>i only interacted with the dump_visitor directly while changing some hir owners</p>",
        "id": 216401367,
        "sender_full_name": "lcnr",
        "timestamp": 1605130284
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/topic/Future.20of.20save-analysis\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Future.20of.20save-analysis</a></p>",
        "id": 216401383,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605130295
    },
    {
        "content": "<p>As I understand it I'd find it unlikely that the save analysis contains the bodies of the functions</p>",
        "id": 216402081,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605130738
    },
    {
        "content": "<p>Is there some kind of equivalent doc for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/visit/trait.Visitor.html\"><code>rustc_middle::Visitor</code></a> than for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/itemlikevisit/trait.ItemLikeVisitor.html\"><code>hir::Visitor</code></a>? I don't understand what I need to do to be able to create a visitor on MIR.</p>",
        "id": 216434561,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605165321
    },
    {
        "content": "<p>I think I managed to get something working, yeah!</p>",
        "id": 216437826,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605168544
    },
    {
        "content": "<p>Did you get the visitor working?</p>",
        "id": 216442658,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605171673
    },
    {
        "content": "<p>Yes! I just need to format the output, and I should get my graphviz file!</p>",
        "id": 216442775,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605171750
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/6EZTKQRQN9ioi6fpVo9-8Hxv/example.svg\">example.svg</a>  generated from </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m1</span>::<span class=\"n\">foo1</span><span class=\"p\">(</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m1</span>::<span class=\"n\">foo3</span><span class=\"p\">(</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">m1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo1</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo2</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo2</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fct</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo2</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">m2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">baz</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hello word\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216443328,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605172178
    },
    {
        "content": "<p>It's working perfectly for direct call, the call using function pointers still need some love!</p>",
        "id": 216443483,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605172287
    },
    {
        "content": "<p>btw, do you know how to go from a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/terminator/struct.Terminator.html\"><code>Terminator</code></a> whose kind is <code>Func</code> to the function identifier?</p>",
        "id": 216445225,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605173418
    },
    {
        "content": "<p>Maybe <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Constant.html#method.check_static_ptr\"><code>Constant::check_static_ptr</code></a>?</p>",
        "id": 216505917,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605204591
    },
    {
        "content": "<p>Which you can have via <code>Operand::Constant</code></p>",
        "id": 216506190,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605204721
    },
    {
        "content": "<p>No, the value returned by <code>check_static_ptr</code> is <code>None</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 216507250,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605205187
    },
    {
        "content": "<p>Ideally, I would like to have the same output than what I get with HIR: <code>tcx.def_path_str(my_function.to_def_id())</code>, but I didn't found a way to get a <code>DefID</code> from my <code>Terminator</code> yet.</p>",
        "id": 216507716,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605205384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/216507250\">said</a>:</p>\n<blockquote>\n<p>No, the value returned by <code>check_static_ptr</code> is <code>None</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>In which case?</p>",
        "id": 216507851,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605205444
    },
    {
        "content": "<p>At least the one I want!</p>",
        "id": 216507897,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605205462
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">533</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">subfunction</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m1</span>::<span class=\"n\">foo3</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">534</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">subfunction</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\">     </span><span class=\"n\">m1</span>::<span class=\"n\">foo3</span>::<span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">535</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">subfunction</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">check_static_ptr</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216507960,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605205494
    },
    {
        "content": "<p>Which is the output of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">533</span><span class=\"w\">                 </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subfunction</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"mi\">534</span><span class=\"w\">                 </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">subfunction</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"mi\">535</span><span class=\"w\">                 </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">subfunction</span><span class=\"p\">.</span><span class=\"n\">constant</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">check_static_ptr</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216508027,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605205527
    },
    {
        "content": "<p>This was generated with this expression</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo2</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"o\">&lt;</span><span class=\"n\">Fct</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">Fct</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo3</span><span class=\"p\">(</span><span class=\"n\">foo2</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// this line</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216508426,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605205722
    },
    {
        "content": "<p>This project start to give some results: <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/master/test/test1/current_status.svg\">generated svg</a>, generated when analyzing <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/master/test/test1/src/main.rs\">this source file</a> (and generating <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/master/test/test1/current_status.dot\">this intermediate graphviz file</a>). The link should be stable for some time and will be updated regularly.<br>\nAnd the goal is to get <a href=\"https://github.com/robinmoussu/cargo-callgraph/blob/master/test/test1/test1.svg\">this svg</a>.</p>",
        "id": 216600359,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605268361
    },
    {
        "content": "<p>As you can see in my <a href=\"https://github.com/robinmoussu/cargo-callgraph/issues/1\">todo list</a>, I still need to do a lot of stuff, most notably track the source of indirect call, like function pointer or trait object.</p>",
        "id": 216600558,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605268483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> If it helps, that's the kind of thing that some forms of devirtualization also wants to do: figure out every possible caller and callee through a given function pointer.</p>",
        "id": 216755988,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605396241
    },
    {
        "content": "<p>Effectively. I will keep that in mind, but for the moment I don't think that such precision is needed.</p>\n<p>For example, from this code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">Fct</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">Fct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"o\">&lt;</span><span class=\"n\">Fct</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">Fct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What I plan to report is that</p>\n<ul>\n<li><code>foo</code> doesn't have direct or indirect calee</li>\n<li><code>bar</code> has  an indirect call, through a function pointer set-up in his caller <code>baz</code></li>\n<li><code>baz</code> has a direct call to <code>bar</code>, and got a function pointer from its caller <code>main</code></li>\n<li><code>main</code> has a direct call to <code>baz</code> and give it a function pointer to <code>foo</code></li>\n</ul>\n<p>Starting from <code>bar</code> it is thus still possible to find that there is a call to <code>foo</code> by looking at the source of the function pointer recursively as well as knowing that it was <code>main</code> who set-up that function pointer. But it's true that a devirtualization analysis would directly give the information <code>bar</code> is calling <code>foo</code> through a function pointer. I think that the information “that function pointer was set-up in <code>main</code>” is also useful, and I would need to propagate it with the devirtualization. I definitively keep this in mind if my current (simpler) approach give a result that is too hard to read.</p>",
        "id": 216779842,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605430168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> My naive algorithm was in fact too naive, and I will effectively need to (re)implement de-virtualization. Do you know if rustc already have a de-virtualization pass somewhere? I <code>rg</code>-ed the sources, and found occurrences of the word \"devirtualization\" only in <code>src/llvm-project</code>, so I assume that all de-virtualization is done on the llvm-side.</p>",
        "id": 217015883,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605626281
    },
    {
        "content": "<p>There is no devirtualization done by rustc.</p>",
        "id": 217019281,
        "sender_full_name": "bjorn3",
        "timestamp": 1605627735
    },
    {
        "content": "<p>Do you think it's a bad idea to try to implement it myself (and thus I should look how it's done in C++), or should I try to implement it in Rust?</p>",
        "id": 217019403,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605627788
    },
    {
        "content": "<p>I think that this time I have a better understanding of what I need to do functionally, and it doesn't seems that complicated (once again I can be totally wrong).</p>",
        "id": 217019900,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605627991
    },
    {
        "content": "<p>And while we are at it, do you know how I should write tests for this? Should I just put the code I want to analyze in a string literal, and handle it to my analysis? Or is there a better way?</p>",
        "id": 217020018,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605628048
    },
    {
        "content": "<p>De-virtualization wouldn't help much at all at this stage. Other mir optimizations would need to get better first for there to be any opportunities to de-virtualization at the mir level.</p>",
        "id": 217020484,
        "sender_full_name": "bjorn3",
        "timestamp": 1605628215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/217020018\">said</a>:</p>\n<blockquote>\n<p>And while we are at it, do you know how I should write tests for this? Should I just put the code I want to analyze in a string literal, and handle it to my analysis? Or is there a better way?</p>\n</blockquote>\n<p>Rustc uses end-to-end tests for almost everything. Aka it takes a full rust file that it compiles and possibly runs. There are also several attributes that cause rustc to give error messages containing the results of certain analyses.</p>",
        "id": 217020674,
        "sender_full_name": "bjorn3",
        "timestamp": 1605628300
    },
    {
        "content": "<p>And there are also some run-make tests which run a Makefile.</p>",
        "id": 217020768,
        "sender_full_name": "bjorn3",
        "timestamp": 1605628334
    },
    {
        "content": "<p>Unit tests are basically only used by the standard library.</p>",
        "id": 217020821,
        "sender_full_name": "bjorn3",
        "timestamp": 1605628355
    },
    {
        "content": "<p>I thin that I have already all the information I need in MIR:</p>\n<ul>\n<li>Each function call is either a direct function call, or a call through a trait object (stop me if I'm wrong).</li>\n<li>For each function call, I want to track the sources of each arguments. An argument can have multiple source, for example if it is set if the if or else branch. A source is either (directly or indirectly) a constant, an argument of the function being analyzed, or the return value of another function. I will ignore control flow for this analysis.<br>\nThen I <em>just</em> (<strong><em>just</em></strong>) need to aggregate this information at the whole program level, and display it in a readable manner.</li>\n</ul>",
        "id": 217021864,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605628827
    },
    {
        "content": "<p>If anyone is interested, here is the current status:</p>\n<ul>\n<li>I have a working control-flow un-aware intra function analysis that track the dependencies between all mir variables. This means that for all the arguments of a callee function I can track if the original source of that argument was from a constant, an argument (and which one) of the current function, and/or the return value of another function being called in this very function (of course multiple choice can apply at the same time for example if a value is set from two branches of a condition). This includes function pointer and trait object which is important to create an accurate call-graph.</li>\n<li>I have the type of every MIR variable, especially the arguments and return value of a function.</li>\n<li>I can detect if a call is direct (<code>foo()</code>), or through a trait (<code>&lt;foo as MyTrai()&gt;::my_method()</code>or <code>Fn()::call(fct_ptr)</code>).</li>\n</ul>\n<p>I am currently working on the inter analysis. Creating the call-graph of direct call is extremely easy, but creating the call-graph that include call to method of trait object is much harder. I think I have nearly extracted all the information I need, I just need to connect the dots!</p>\n<p>Whith the information I'm extracting, I should be able to:</p>\n<ul>\n<li>show the call graph, both direct call, and through method of function object</li>\n<li>show how to create a <code>Foo</code> from a <code>Bar</code> even if this means that you need chaining multiple function calls (given that I have the type of all arguments and return value of all function + the call graph)</li>\n<li>show in which caller of the current function a function pointer or trait object have been set (this explains why the function <code>baz(...)</code> is calling <code>MyTrait::my_method(trait_object: SomeConcreteType, …)</code> because <code>trait_object</code> was set in <code>foo()</code>, and <code>foo()</code> calls <code>bar(trait_object)</code> which itself calls <code>baz(trait_object)</code>).</li>\n</ul>",
        "id": 217741022,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606217377
    },
    {
        "content": "<p>I am kinda stuck, I don't know how I should display the information I extracted!</p>\n<p>Let's take this code as an example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">forward_fct</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">get_fct</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">forward_fct</span><span class=\"o\">&lt;</span><span class=\"n\">Fct</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">Fct</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><code>main</code> call directly <code>get_fct</code> and <code>forward_fct</code></li>\n<li>the return value of <code>get_fct</code> is set from the constant <code>foo</code></li>\n<li>the return value of the call to <code>get_fct</code> is assigned to the first argument of <code>forward_fct</code></li>\n<li>the return value of <code>forward_fct</code> is derived from its firm argument</li>\n<li>the function returned by <code>forward_fct</code> is called</li>\n</ul>\n<p>I have access to all the above statements, but I don't know how to draw it (with pen and paper, it's a design issue, not a tooling). <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> maybe you have an idea.</p>",
        "id": 217910210,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606323060
    },
    {
        "content": "<p>How do you draw this without forward_fct and only get_fct?</p>",
        "id": 217911793,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606323684
    },
    {
        "content": "<p>Can talk about this with voice comm? Maybe on discord?</p>",
        "id": 217912071,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606323798
    },
    {
        "content": "<p>I'm not at a computer right now, sorry</p>",
        "id": 217913127,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606324288
    },
    {
        "content": "<p>don't worry ;)</p>",
        "id": 217913154,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606324303
    },
    {
        "content": "<p>I would like to draw 1 \"box\" per function.</p>\n<p>A direct call (like from <code>main</code> to <code>get_fct</code>) is very easy to represent, I just need to add an arrow between the \"box\" of the two functions. </p>\n<p>I don't know how to give a good visualization of how callables (function pointers and trait objects) are send between functions. A callable has 3 possible source: a constant (like in <code>get_fct</code>), the argument of the current function (like in <code>forward_fct</code>) or the return of another called function (like in <code>main</code>). Each callable have 1 or more source (for example if a variable is set in two branches of an if statement). For call through callable, it's a bit hard, but I can cheat by using the fully qualified name (like <code>std::op::Fn::call(fct)</code>). However, I have no idea of how to represent the relation between the arguments / return value of the various functions.</p>",
        "id": 217913763,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606324584
    },
    {
        "content": "<p>I'm quoting \"box\" an \"arrow\", because I'm not sure if it's the best possible shape.</p>\n<p>Ultimately, I'd like to have some kind of \"arrow\" that goes from <code>foo</code> to <code>get_fct</code> to <code>main</code> to <code>forward_fct</code> to <code>main</code> to <code>std::ops::Fn::call</code>.</p>",
        "id": 217914128,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606324793
    },
    {
        "content": "<p>So, the more interesting question to me is actually how to represent queries</p>",
        "id": 217917184,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326206
    },
    {
        "content": "<p>The way queries work is that there's a struct full of function pointers that by default are just unimplemented!</p>",
        "id": 217917217,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326237
    },
    {
        "content": "<p>Then you pass it to <code>fn provide</code> in a bunch of different crates, each of which provides its own function to store in the struct</p>",
        "id": 217917290,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326268
    },
    {
        "content": "<p>And then there's some magic in rustc_middle::ty::query to make it incremental IIRC</p>",
        "id": 217917320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326294
    },
    {
        "content": "<p>It would be really cool to tie the final call to TyCtxt::query to its definition somehow</p>",
        "id": 217917383,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326338
    },
    {
        "content": "<p>Personally I don't think I would need to see all the places it went through along the way as long as I could find the start and end point</p>",
        "id": 217917492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326395
    },
    {
        "content": "<p>As far as I understand, you are describing how the caching works in rustc, isn't it? Or did I just didn't understand what you meant by \"query\"?</p>",
        "id": 217917536,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606326432
    },
    {
        "content": "<p>So maybe that's my suggestion: only show the caller and callee, and don't worry about how to show the function pointers for now</p>",
        "id": 217917537,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326433
    },
    {
        "content": "<p>Yes, I'm talking about how incremental compilation works in rustc</p>",
        "id": 217917568,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326456
    },
    {
        "content": "<p>Which is most of the APIs on TyCtxt, so I use them a lot and it's annoying to find them</p>",
        "id": 217917602,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326479
    },
    {
        "content": "<p>I definitively keep that in mind for later, but I don't need incremental compilation yet (I will add it as soon as I have a v0.1). You answered my question that I didn't asked yet <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 217917762,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606326557
    },
    {
        "content": "<p>I think it's related though: if you can display call graphs for queries you can display them for almost anything, I'd expect</p>",
        "id": 217917927,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326640
    },
    {
        "content": "<blockquote>\n<p>only show the caller and callee, and don't worry about how to show the function pointers for now</p>\n</blockquote>\n<p>That's the really easy part though! The infrastructure I put in place is completely overkill for this! I have the data structure, but I really don't know what to do with it.</p>",
        "id": 217917939,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606326653
    },
    {
        "content": "<p>Well, do the easy part first :P</p>",
        "id": 217917974,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606326669
    },
    {
        "content": "<p>You need about 30 lines to get it!</p>",
        "id": 217918018,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606326701
    },
    {
        "content": "<p>But the call-graph is highly incomplete.</p>",
        "id": 217918102,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606326726
    },
    {
        "content": "<p>Maybe you could use open circles to represent a function pointer, or something like that</p>",
        "id": 217921603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606328695
    },
    {
        "content": "<p>I think I start to get <a href=\"/user_uploads/4715/TjWHaghp-d3jqwmMDvIAwjVL/example.svg\">something nice</a>  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>graphviz code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"dot\"><pre><span></span><code>digraph \"crate-name\" {\n    node [shape=plaintext]\n\n    subgraph cluster_01 {\n        color=none\n\n        main [\n            label=&lt;&lt;font color='red'&gt;main&lt;/font&gt;( _1: &lt;font color='darkgreen'&gt;impl Fn()&lt;/font&gt;, _2: &lt;font color='darkgreen'&gt;usize&lt;/font&gt; )&gt;\n        ];\n\n        get_fct [\n            label=&lt;&lt;font color='red'&gt;get_fct&lt;/font&gt;() -&amp;gt; &lt;font color='darkgreen'&gt;impl Fn()&lt;/font&gt;&gt;\n        ];\n\n        forward_fct [\n            label=&lt;&lt;font color='red'&gt;forward_fct&lt;/font&gt;&amp;lt;&lt;font color='darkgreen'&gt;Fct&lt;/font&gt;: Fn()&amp;gt;( fct: &lt;font color='darkgreen'&gt;Fct&lt;/font&gt;) -&amp;gt; &lt;font color='darkgreen'&gt;Fct&lt;/font&gt;&gt;\n        ];\n\n        foo [\n            label=&lt;&lt;font color='red'&gt;foo&lt;/font&gt;()&gt;\n        ];\n\n        bar [\n            label=&lt;&lt;font color='red'&gt;bar&lt;/font&gt;()&gt;\n        ];\n\n        main_fn [\n            label=&lt;std::ops::Fn&amp;lt;&lt;font color='darkgreen'&gt;Fct&lt;/font&gt;&amp;gt;::&lt;font color='red'&gt;call&lt;/font&gt;( fct: &lt;font color='darkgreen'&gt;Fct&lt;/font&gt;)&gt;\n        ]\n\n        main -&gt; get_fct [ dir=both color=\"black:purple\" arrowtail=empty ]\n        main -&gt; forward_fct [ dir=both color=\"blue:purple\" arrowtail=empty ]\n        get_fct -&gt; foo [ dir=back color=\"grey\" arrowtail=empty ]\n        main -&gt; main_fn [ color=\"blue\" ]\n        foo -&gt; bar\n    }\n\n    subgraph cluster_02 {\n        label = \"Legend\";\n        {\n            rank=same\n            key [label=&lt;&lt;table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"&gt;\n                &lt;tr&gt;&lt;td align=\"right\" port=\"i1\"&gt;direct call&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td align=\"right\" port=\"i2\"&gt;return callable object&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td align=\"right\" port=\"i3\"&gt;send callable object&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td align=\"right\" port=\"i4\"&gt;takes reference&lt;/td&gt;&lt;/tr&gt;\n                &lt;/table&gt;&gt;]\n            key2 [label=&lt;&lt;table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\"&gt;\n                &lt;tr&gt;&lt;td port=\"i1\"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td port=\"i2\"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td port=\"i3\"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td port=\"i4\"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;\n                &lt;/table&gt;&gt;]\n            key:i1:e -&gt; key2:i1:w [ color=black ]\n            key:i2:e -&gt; key2:i2:w [ color=purple direction=back arromtail=empty ]\n            key:i3:e -&gt; key2:i3:w [ color=blue arromtail=empty ]\n            key:i4:e -&gt; key2:i4:w [ color=pink direction=back arromtail=empty ]\n        }\n    }\n}\n</code></pre></div>\n</div></div>\n<p>This is a mock-up of what I want to be able to achieve when analyzing this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">forward_fct</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">get_fct</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">forward_fct</span><span class=\"o\">&lt;</span><span class=\"n\">Fct</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">Fct</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217990691,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606390048
    },
    {
        "content": "<p>I get overlapping text and graphics when creating an svg:<br>\n<a href=\"/user_uploads/4715/kwyA0Ful8fgkyK7rbnVY-33A/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/kwyA0Ful8fgkyK7rbnVY-33A/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/kwyA0Ful8fgkyK7rbnVY-33A/image.png\"></a></div>",
        "id": 217990927,
        "sender_full_name": "bjorn3",
        "timestamp": 1606390229
    },
    {
        "content": "<p>How do you put images inline?</p>",
        "id": 217994764,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606393061
    },
    {
        "content": "<p>For me that's the reverse, I have extra spacing. What command did you use? <code>dot -Tsvg</code>?</p>",
        "id": 217994832,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606393098
    },
    {
        "content": "<p>hmm, the color difference between 'return' and 'send callable object' is not very clear - but maybe there doesn't need to be a difference? I think 'send callable object' would work for both passing and returning it</p>",
        "id": 218004068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606398931
    },
    {
        "content": "<p>also the meaning of the hollow arrows is not clear to me</p>",
        "id": 218004101,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606398946
    },
    {
        "content": "<p>I used <code>dot -Tsvg</code> and opened in firefox.</p>",
        "id": 218004383,
        "sender_full_name": "bjorn3",
        "timestamp": 1606399096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/217994764\">said</a>:</p>\n<blockquote>\n<p>How do you put images inline?</p>\n</blockquote>\n<p>I pasted the image from my clipboard. Websites like zulip and github automatically upload the image and paste a markdown reference to the image.</p>",
        "id": 218004511,
        "sender_full_name": "bjorn3",
        "timestamp": 1606399178
    },
    {
        "content": "<blockquote>\n<p>I pasted the image from my clipboard. Websites like zulip and github automatically upload the image and paste a markdown reference to the image.</p>\n</blockquote>\n<p>I did the same, but since it was a svg, it created a link without preview.</p>\n<p><a href=\"/user_uploads/4715/zUNEE4nC8ccPa0xZRHe7FP8H/image.png\">better render.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/zUNEE4nC8ccPa0xZRHe7FP8H/image.png\" title=\"better render.png\"><img src=\"/user_uploads/4715/zUNEE4nC8ccPa0xZRHe7FP8H/image.png\"></a></div><p>A few remarks:</p>\n<ul>\n<li>the colors are pure placeholders, but I messed-up the legend. Now the \"takes reference\" is pink everywhere</li>\n<li>\n<p>for some reason I can't have the arrow in reverse + hollow in the legend</p>\n</li>\n<li>\n<p>forward/full + black means direct call, no callable object send as argument</p>\n</li>\n<li>forward/full + blue means direct call, where callable object are send as arguments</li>\n<li>backward/hollow + purple means that the return value contains a callable (it's always combined with a forward arrow)</li>\n<li>backward/hollow + ping means that a reference to the function is taken</li>\n</ul>\n<hr>\n<p>That being said, I really think that (unfortunately) I'm hitting the limit of what can be expressed in graphviz, and the inconsistencies (color, spacing, ignored attributes, …) in the rendering engines makes it unusable <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> This means that I will have to build a GUI to be able to properly display the information I'm aggregating. Anyway this will allow for more flexibility, and increase the readability by making it easy to only display a small part of the graph.</p>",
        "id": 218009937,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606402317
    },
    {
        "content": "<p>Something that I didn't managed to express was the link between the return of <code>get_fct</code> and the first argument to <code>forward_fct</code>, as well as between the return of <code>forward_fct</code> and the first argument to <code>std::ops::&lt;Fn&gt;::call()</code>. I would have like to have a \"pipe\" between the functions, and have the values that goes into those pipes. With a custom GUI, I should be able to do it :)</p>",
        "id": 218010425,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606402577
    },
    {
        "content": "<p>Yeah, I made a screenshot. I assumed the problem would be browser specific.</p>",
        "id": 218014763,
        "sender_full_name": "bjorn3",
        "timestamp": 1606404973
    },
    {
        "content": "<p>I was png vs svg. The svg doesn't have preview, while png has.</p>",
        "id": 218035335,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606421631
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/ehG5FmN-af-oG_PGs2Z01__Z/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ehG5FmN-af-oG_PGs2Z01__Z/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ehG5FmN-af-oG_PGs2Z01__Z/image.png\"></a></div><p>I think I managed to get something better. Big black arrow are functions calls. I wanted to represent them as pipe, it's the best I was able to do, still with graphviz. They connect two functions (grey circles are in the caller, and whites in the callee). Thanks to this pipe analogy, I can show the whole dependency between all the variables in the graph. Here, when <code>main()</code> calls <code>get_fct()</code>, the return value of <code>get_fct</code> is <code>foo</code>, and that value is then passed (in <code>main</code>) to the first argument of <code>forward_fct</code></p>",
        "id": 218038034,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606424487
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>graphviz code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>digraph \"crate-name\" {<br>\n    node [shape=none]<br>\n    //compound=true</p>\n<div class=\"codehilite\"><pre><span></span><code>subgraph cluster_02 {\n    color=grey\n    main [label=&lt;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; cellborder=&quot;0&quot;&gt;&lt;tr&gt;\n        &lt;td port=&quot;fct&quot;&gt;&lt;font color=&#39;red&#39;&gt;main&lt;/font&gt;&lt;/td&gt;\n        &lt;td&gt;(&lt;/td&gt;\n        &lt;td&gt;)&lt;/td&gt;\n        &lt;/tr&gt;&lt;/table&gt;&gt;\n    ];\n    {\n        rank=same\n        &quot;main to get_fct&quot; [style=filled label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n        &quot;main to forward_fct&quot; [style=filled label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n        &quot;main to std::ops::Fn&lt;Fct&gt;::call&quot; [style=filled label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n    }\n    &quot;main&quot; -&gt; &quot;main to get_fct&quot; [style=invis ]\n    &quot;main&quot; -&gt; &quot;main to forward_fct&quot; [style=invis ]\n    &quot;main&quot; -&gt; &quot;main to std::ops::Fn&lt;Fct&gt;::call&quot; [style=invis ]\n\n    &quot;main to get_fct&quot; -&gt; &quot;main to forward_fct&quot; [color=blue]\n    &quot;main to forward_fct&quot; -&gt; &quot;main to std::ops::Fn&lt;Fct&gt;::call&quot; [color=blue]\n}\n\nsubgraph cluster_03 {\n    color=grey\n    rank=same\n\n    get_fct [label=&lt;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; cellborder=&quot;0&quot;&gt;&lt;tr&gt;\n        &lt;td port=&quot;fct&quot;&gt;&lt;font color=&#39;red&#39;&gt;get_fct&lt;/font&gt;&lt;/td&gt;\n        &lt;td&gt;(&lt;/td&gt;\n        &lt;td&gt;)&lt;/td&gt;\n        &lt;td&gt;&amp;#8594;&lt;/td&gt;\n        &lt;td port=&quot;0&quot;&gt;&lt;font color=&#39;darkgreen&#39;&gt;Fct&lt;/font&gt;&lt;/td&gt;\n        &lt;/tr&gt;&lt;/table&gt;&gt;\n    ];\n    {\n        rank=same\n        &quot;get_fct from main&quot; [ label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n    }\n    &quot;get_fct&quot; -&gt; &quot;get_fct from main&quot; [style=invis ]\n\n    &quot;get_fct&quot;:0 -&gt; &quot;get_fct from main&quot; [color=blue]\n}\n\nsubgraph cluster_04 {\n    color=grey\n    forward_fct [label=&lt;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; cellborder=&quot;0&quot;&gt;&lt;tr&gt;\n        &lt;td port=&quot;fct&quot;&gt;&lt;font color=&#39;red&#39;&gt;forward_fct&lt;/font&gt;&lt;/td&gt;\n        &lt;td&gt;&amp;lt;&lt;/td&gt;\n        &lt;td&gt;&lt;font color=&#39;darkgreen&#39;&gt;Fct&lt;/font&gt;: Fn()&lt;/td&gt;\n        &lt;td&gt;&amp;gt;&lt;/td&gt;\n        &lt;td&gt;(&lt;/td&gt;\n        &lt;td port=&quot;1&quot;&gt;fct: &lt;font color=&#39;darkgreen&#39;&gt;Fct&lt;/font&gt;&lt;/td&gt;\n        &lt;td&gt;)&lt;/td&gt;\n        &lt;td&gt;&amp;#8594;&lt;/td&gt;\n        &lt;td port=&quot;0&quot;&gt;&lt;font color=&#39;darkgreen&#39;&gt;Fct&lt;/font&gt;&lt;/td&gt;\n        &lt;/tr&gt;&lt;/table&gt;&gt;\n    ];\n    {\n        rank=same\n        &quot;forward_fct from main&quot; [ label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n    }\n    &quot;forward_fct&quot; -&gt; &quot;forward_fct from main&quot; [style=invis ]\n\n    &quot;forward_fct from main&quot; -&gt; forward_fct:1 [color=blue]\n    &quot;forward_fct&quot;:0 -&gt; &quot;forward_fct from main&quot; [color=blue]\n    &quot;forward_fct&quot;:1 -&gt; &quot;forward_fct&quot;:0 [color=blue]\n}\n\nsubgraph cluster_05 {\n    color=grey\n    foo [label=&lt;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; cellborder=&quot;0&quot;&gt;&lt;tr&gt;\n        &lt;td port=&quot;fct&quot;&gt;&lt;font color=&#39;red&#39;&gt;foo&lt;/font&gt;&lt;/td&gt;\n        &lt;td&gt;(&lt;/td&gt;\n        &lt;td&gt;)&lt;/td&gt;\n        &lt;/tr&gt;&lt;/table&gt;&gt;\n    ];\n    {\n        rank=same\n        &quot;foo to bar&quot; [style=filled label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n    }\n    &quot;foo&quot; -&gt; &quot;foo to bar&quot; [style=invis ]\n}\n\nsubgraph cluster_06 {\n    color=grey\n    bar [\n        label=&lt;&lt;font color=&#39;red&#39;&gt;bar&lt;/font&gt;()&gt;\n    ];\n    {\n        rank=same\n        &quot;bar from foo&quot; [ label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n    }\n    &quot;bar&quot; -&gt; &quot;bar from foo&quot; [style=invis ]\n}\n\nsubgraph cluster_07 {\n    color=grey\n    &quot;std::ops::Fn&lt;Fct&gt;::call&quot; [label=&lt;&lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;0&quot; cellborder=&quot;0&quot;&gt;&lt;tr&gt;\n        &lt;td&gt;std&lt;/td&gt;\n        &lt;td&gt;::&lt;/td&gt;\n        &lt;td&gt;ops&lt;/td&gt;\n        &lt;td&gt;::&lt;/td&gt;\n        &lt;td&gt;Fn&amp;lsaquo;&lt;font color=&#39;darkgreen&#39;&gt;Fct&lt;/font&gt;&amp;rsaquo;&lt;/td&gt;\n        &lt;td&gt;::&lt;/td&gt;\n        &lt;td port=&quot;fct&quot;&gt;&lt;font color=&#39;red&#39;&gt;call&lt;/font&gt;&lt;/td&gt;\n        &lt;td&gt;(&lt;/td&gt;\n        &lt;td port=&quot;1&quot;&gt;fct: &lt;font color=&#39;darkgreen&#39;&gt;Fct&lt;/font&gt;&lt;/td&gt;\n        &lt;td&gt;)&lt;/td&gt;\n        &lt;/tr&gt;&lt;/table&gt;&gt;\n    ]\n    {\n        rank=same\n        &quot;std::ops::Fn&lt;Fct&gt;::call from main&quot; [ label=&quot;&quot;; width=0.2; height=0.2; shape=circle ]\n    }\n    &quot;std::ops::Fn&lt;Fct&gt;::call&quot; -&gt; &quot;std::ops::Fn&lt;Fct&gt;::call from main&quot; [style=invis ]\n\n    &quot;std::ops::Fn&lt;Fct&gt;::call from main&quot; -&gt; &quot;std::ops::Fn&lt;Fct&gt;::call&quot;:1 [color=blue]\n}\n\n&quot;main to get_fct&quot; -&gt; &quot;get_fct from main&quot; [ color=&quot;black:invis:black&quot; arrowhead=empty ]\n&quot;main to forward_fct&quot; -&gt; &quot;forward_fct from main&quot; [ color=&quot;black:invis:black&quot; arrowhead=empty ]\n&quot;main to std::ops::Fn&lt;Fct&gt;::call&quot; -&gt; &quot;std::ops::Fn&lt;Fct&gt;::call from main&quot; [ color=&quot;black:invis:black&quot; arrowhead=empty ]\n&quot;foo to bar&quot; -&gt; &quot;bar from foo&quot; [ color=&quot;black:invis:black&quot; arrowhead=empty ]\n&quot;foo&quot;:fct -&gt; &quot;get_fct&quot;:0  [ color=&quot;blue&quot; arrowtail=empty ]\n</code></pre></div>\n\n</div></div>\n<p>As you can see, I can point directly to the function name, all arguments individually as well as the return type.</p>\n<p>I am not yet convinced by the visual of the function call (the circle), but I like to be able to have one place per call.</p>",
        "id": 218038267,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606424699
    },
    {
        "content": "<p>btw, I'm using <code>dot -Txlib</code> to no have spacing issues.</p>",
        "id": 218038351,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606424764
    },
    {
        "content": "<p>For those interested to get a quick status:</p>\n<ul>\n<li>I started a new job this week. I didn't anticipated that I would not have enough energy to write a single line during the weekdays :(</li>\n<li>DONE: extracting all function information (ie, their name, arguments, types of arguments and return type) for the function that exists in the current crate (i.e. <code>std::ops::Fn&lt;Fct&gt;::call</code> is missing)</li>\n<li>DONE: extract all the caller to callee dependencies (i.e. all fat black arrows  + the grey circles + the blue arrows leaving them)</li>\n<li>TODO: the caller from callee information (i.e. the white circle + the blues arrows leaving them)</li>\n<li>TODO: the internals dependencies to the return type is not yet extracted (i.e. the blue arrows that goes from the arguments to the return type)</li>\n<li>DONE: writing the graphviz generator (i.e. converting the internal representation to text) at the exception of coloring the generic types in green in the type of the function itself</li>\n<li>TODO: understand how to call it with cargo (currently it only works with a single file.</li>\n</ul>\n<p>The history is an absolute mess, but you can find the code on my <a href=\"http://robinmoussu/cargo-callgraph.git\">github</a>.</p>\n<p><a href=\"/user_uploads/4715/wla0p_B66QBPLb7jZgMBl9T7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/wla0p_B66QBPLb7jZgMBl9T7/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/wla0p_B66QBPLb7jZgMBl9T7/image.png\"></a></div>",
        "id": 218934975,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607174481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> does that mean you won't be working on the project any more? :(</p>",
        "id": 218936330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607176789
    },
    {
        "content": "<p>Ngl, this would've been a very cool thing to be inside the docs</p>",
        "id": 218936564,
        "sender_full_name": "vn-ki",
        "timestamp": 1607177155
    },
    {
        "content": "<p>also, is this issue up to date? <a href=\"https://github.com/robinmoussu/cargo-callgraph/issues/1\">https://github.com/robinmoussu/cargo-callgraph/issues/1</a></p>",
        "id": 218936674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607177340
    },
    {
        "content": "<p>Don't, worry, I will continue, it's just that I will advance much slower :(</p>",
        "id": 218938521,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607180526
    },
    {
        "content": "<p>I updated the issue with what I posted in this thread this morning</p>",
        "id": 218939157,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607181584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> are you interested in help running on multiple crates?</p>",
        "id": 218940082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607182994
    },
    {
        "content": "<p>not sure how much help I can be with the rest, but that sounds doable</p>",
        "id": 218940084,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183002
    },
    {
        "content": "<p>yes</p>",
        "id": 218940090,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183021
    },
    {
        "content": "<p>AFAIK you kind of touch that issue in what you did this week to have a working rustdoc compiled outside of the tree, isn't it?</p>",
        "id": 218940151,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183091
    },
    {
        "content": "<p>I don't think they're exactly related</p>",
        "id": 218940158,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183118
    },
    {
        "content": "<p>remind me how far you got? You were setting RUSTDOC=cargo-callgraph, right?</p>",
        "id": 218940161,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> what version of nightly are you building with? <code>rustc 1.50.0-nightly (349b3b324 2020-11-29)</code> gives errors about ForeignMod</p>",
        "id": 218940212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183172
    },
    {
        "content": "<p>(this is one of the reasons rustdoc is special and not just a normal crate - it depends on internals)</p>",
        "id": 218940235,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183278
    },
    {
        "content": "<p>I am using rustc 1.50.0-nightly (1c389ffef 2020-11-24) (randomly chosen). Should I update it?</p>",
        "id": 218940297,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183376
    },
    {
        "content": "<p>nah, I'll just make a PR adding rust-toolchain</p>",
        "id": 218940299,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183389
    },
    {
        "content": "<blockquote>\n<p>remind me how far you got? You were setting RUSTDOC=cargo-callgraph, right?</p>\n</blockquote>\n<p>yes</p>",
        "id": 218940338,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/218940299\">said</a>:</p>\n<blockquote>\n<p>nah, I'll just make a PR adding rust-toolchain</p>\n</blockquote>\n<p><a href=\"https://rust-lang.github.io/rustup/overrides.html?highlight=toolchain#the-toolchain-file\">https://rust-lang.github.io/rustup/overrides.html?highlight=toolchain#the-toolchain-file</a></p>",
        "id": 218940353,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183469
    },
    {
        "content": "<p>When you say \"adding a PR\", you mean adding the <code>rust-toolchain</code> file in my repository?</p>",
        "id": 218940447,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183635
    },
    {
        "content": "<p>yeah</p>",
        "id": 218940481,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183642
    },
    {
        "content": "<p>since otherwise it's painful to try and replicate the toolchain to build</p>",
        "id": 218940487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183652
    },
    {
        "content": "<p>got it.</p>",
        "id": 218940492,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183662
    },
    {
        "content": "<p>hmm, now I'm getting <code>error[E0463]: can't find crate for `lazy_static` </code> - are you passing --sysroot or something?</p>",
        "id": 218940503,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183693
    },
    {
        "content": "<p>Which nightly should I use? Today's one?</p>",
        "id": 218940507,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183697
    },
    {
        "content": "<p>with <code>rustc 1.50.0-nightly (1c389ffef 2020-11-24)</code></p>",
        "id": 218940508,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183700
    },
    {
        "content": "<p>well the one it <em>builds</em> with</p>",
        "id": 218940515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183708
    },
    {
        "content": "<p>which appears to be hard to find <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218940520,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183717
    },
    {
        "content": "<p>The only thing I'm doing is literally <code>cargo run</code></p>",
        "id": 218940569,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607183774
    },
    {
        "content": "<p>this is the error on latest nightly:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0532]: expected tuple struct or tuple variant, found struct variant `hir::ItemKind::ForeignMod`\n    --&gt; visit_ast.rs:345:13\n     |\n345  |             hir::ItemKind::ForeignMod(ref fm) =&gt; {\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\nhelp: use struct pattern syntax instead\n     |\n345  |             hir::ItemKind::ForeignMod { /* fields */ } =&gt; {\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider importing one of these items instead\n     |\n4    | use crate::core::resolve::ItemKind::ForeignMod;\n     |\n4    | use rustc_ast::ItemKind::ForeignMod;\n</code></pre></div>",
        "id": 218940573,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183793
    },
    {
        "content": "<p>which is fine, I don't expect it to build on ever y version</p>",
        "id": 218940576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183813
    },
    {
        "content": "<p>but the fact that I can't build with your exact version is concerning</p>",
        "id": 218940577,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183821
    },
    {
        "content": "<p>I'll just add lazy_static as a dependency for now</p>",
        "id": 218940592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607183857
    },
    {
        "content": "<p><code> error[E0463]: can't find crate for `rustc_ast` </code><br>\n<span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> I don't have rustc_dev installed</p>",
        "id": 218940712,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184010
    },
    {
        "content": "<p>that would do it</p>",
        "id": 218940713,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184011
    },
    {
        "content": "<p>btw, it's ultra-dirty, but the output filename is hardcoded  to \"<a href=\"http://example2.dot\">example2.dot</a>\"</p>",
        "id": 218940735,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607184055
    },
    {
        "content": "<p>Then I'm using <code>dot -Txlib example2.dot</code> (assuming you are on Linux, this should work).</p>",
        "id": 218940814,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607184136
    },
    {
        "content": "<p><a href=\"https://github.com/robinmoussu/cargo-callgraph/pull/2\">https://github.com/robinmoussu/cargo-callgraph/pull/2</a></p>",
        "id": 218940841,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184181
    },
    {
        "content": "<p>if you want to use <code>dot -Tsvg</code>, you must use <code>dot -Tsvg:cairo</code> otherwise there are extra white space between the colored items. <code>dot -Tpng</code> works fine.</p>",
        "id": 218940883,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607184222
    },
    {
        "content": "<p><a href=\"https://github.com/robinmoussu/cargo-callgraph/pull/3\">https://github.com/robinmoussu/cargo-callgraph/pull/3</a></p>",
        "id": 218940986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184353
    },
    {
        "content": "<p>wow rustdoc is slow to compile even out of tree</p>",
        "id": 218941056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184421
    },
    {
        "content": "<p>this is painful, maybe I'll work on that this weekend</p>",
        "id": 218941061,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184431
    },
    {
        "content": "<blockquote>\n<p>= note: ld.lld: error: failed to open /home/joshua/.local/lib/cargo/target/debug/deps/cargo_callgraph-a798f4ebbc3fb725: No space left on device</p>\n</blockquote>\n<p><span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span></p>",
        "id": 218941068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184448
    },
    {
        "content": "<blockquote>\n<p>wow rustdoc is slow to compile even out of tree</p>\n</blockquote>\n<p>Yes, even in incremental builds. I assume it's the linking stage.</p>",
        "id": 218941145,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607184555
    },
    {
        "content": "<p>I don't think it is, in-tree the library takes 10x as long to compile as rustdoc-tool</p>",
        "id": 218941150,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184575
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> do you want me to reply to <a href=\"https://github.com/rust-lang/rust/pull/78926#issuecomment-726653035\">https://github.com/rust-lang/rust/pull/78926#issuecomment-726653035</a> or do you want to?</p>",
        "id": 218941383,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184888
    },
    {
        "content": "<p>Go for it. I wanted to contact you about this anyway</p>",
        "id": 218941397,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607184932
    },
    {
        "content": "<p>My PR isn't needed with the work you did, isn't it?</p>",
        "id": 218941400,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607184943
    },
    {
        "content": "<p>well, more like my change is a different approach</p>",
        "id": 218941444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184970
    },
    {
        "content": "<p>yours is building out of tree with <code>rust-toolchain</code> (like cargo-callgraph), mine is building in tree and having x.py sync the versions for you</p>",
        "id": 218941452,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607184991
    },
    {
        "content": "<p>the x.py version is more flexible in-tree but doesn't allow building out of tree</p>",
        "id": 218941457,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185002
    },
    {
        "content": "<p>ah, so both should be merged?</p>",
        "id": 218941469,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185036
    },
    {
        "content": "<p>I'm not sure it makes sense to have both if rustdoc stays in-tree</p>",
        "id": 218941476,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185050
    },
    {
        "content": "<p>What is the advantage of being in-tree versus being a submodule that can compile independently?</p>",
        "id": 218941525,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185099
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>    let filename = &quot;/home/robin/dev/cargo-callgraph/example2.dot&quot;;\n</code></pre></div>\n\n</blockquote>\n<p><span aria-label=\"angry\" class=\"emoji emoji-1f620\" role=\"img\" title=\"angry\">:angry:</span></p>",
        "id": 218941527,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/218941525\">said</a>:</p>\n<blockquote>\n<p>What is the advantage of being in-tree versus being a submodule that can compile independently?</p>\n</blockquote>\n<p>submodules are painful and subtree syncs are only slightly less painful</p>",
        "id": 218941532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185117
    },
    {
        "content": "<p>and being out of tree means you can't modify rustc if you need to</p>",
        "id": 218941536,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185126
    },
    {
        "content": "<p>1) make it work<br>\n2) make it right<br>\n3) make it fast</p>\n<p>I'm on stage 1!</p>",
        "id": 218941539,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185135
    },
    {
        "content": "<p>well right, but it will be a ton of work either way</p>",
        "id": 218941556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185168
    },
    {
        "content": "<p>and I would rather do the 'correct' solution if I'm going to put in the time</p>",
        "id": 218941559,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185177
    },
    {
        "content": "<p>That's why the commits messages are mostly \"wip\". I'm not sure of what the architecture should be, etc…</p>",
        "id": 218941602,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185204
    },
    {
        "content": "<p><a href=\"https://github.com/robinmoussu/cargo-callgraph/pull/4\">https://github.com/robinmoussu/cargo-callgraph/pull/4</a></p>",
        "id": 218941647,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185286
    },
    {
        "content": "<p><a href=\"https://github.com/robinmoussu/cargo-callgraph/issues/5\">https://github.com/robinmoussu/cargo-callgraph/issues/5</a></p>",
        "id": 218941702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185349
    },
    {
        "content": "<p>Lol, I realize that this was the reason it didn't seems to work in my clone in /tmp (PR#4)</p>",
        "id": 218941707,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185362
    },
    {
        "content": "<p>not sure what went wrong for <a href=\"https://github.com/rust-lang/rust/issues/5\">#5</a>, something to do with callsites?</p>",
        "id": 218941713,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185380
    },
    {
        "content": "<p>it seems related to the algorithm, not the build process</p>",
        "id": 218941721,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185388
    },
    {
        "content": "<p>that's the algo. I still have too much assumption.</p>",
        "id": 218941788,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185454
    },
    {
        "content": "<p>anyway I have to go soon, lmk if you figure it out</p>",
        "id": 218941796,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185474
    },
    {
        "content": "<p>try with this input file</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">forward_fct</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">get_fct</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">forward_fct</span><span class=\"o\">&lt;</span><span class=\"n\">Fct</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">Fct</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218941820,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185510
    },
    {
        "content": "<p>are you messing with RUSTFLAGS or something? Every time I <code>cargo run</code> it does a full rebuild</p>",
        "id": 218941877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185572
    },
    {
        "content": "<p>oh maybe it's rust-analyzer</p>",
        "id": 218941895,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185611
    },
    {
        "content": "<p>no, at least not to my knowledge</p>",
        "id": 218941898,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185618
    },
    {
        "content": "<p>I have the nightly installed with rustup, maybe it helps?</p>",
        "id": 218941920,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185656
    },
    {
        "content": "<p>do you get an output?</p>",
        "id": 218941974,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185689
    },
    {
        "content": "<p>I mean an output file since cargo-callgraph doesn't prints anything</p>",
        "id": 218941992,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185729
    },
    {
        "content": "<p>oh I was on the wrong branch lol, rust-toolchain was missing</p>",
        "id": 218942088,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185843
    },
    {
        "content": "<p>one sec</p>",
        "id": 218942089,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185844
    },
    {
        "content": "<p>ah</p>",
        "id": 218942094,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185853
    },
    {
        "content": "<p>yes! It works :D</p>",
        "id": 218942102,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185867
    },
    {
        "content": "<p>good</p>",
        "id": 218942106,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607185880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> <code>RUSTDOC=cargo-callgraph cargo doc</code> panics for me:</p>\n<div class=\"codehilite\"><pre><span></span><code> Documenting unicode-xid v0.2.1\nthread &#39;rustc&#39; panicked at &#39;could not lift for printing&#39;, compiler/rustc_middle/src/ty/print/pretty.rs:1907:1\n</code></pre></div>",
        "id": 218942177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607185939
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> Documenting lazy_static v1.4.0\nthread &#39;rustc&#39; panicked at &#39;could not lift for printing&#39;, compiler/rustc_middle/src/ty/print/pretty.rs:1907:1\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/std/src/panicking.rs:493:5\n   1: core::panicking::panic_fmt\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/core/src/panicking.rs:92:14\n   2: core::option::expect_failed\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/core/src/option.rs:1260:5\n   3: rustc_middle::ty::print::pretty::&lt;impl core::fmt::Display for &amp;rustc_middle::ty::consts::Const&gt;::fmt\n   4: core::fmt::write\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/core/src/fmt/mod.rs:1078:17\n   5: std::io::Write::write_fmt\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/library/std/src/io/mod.rs:1519:15\n   6: cargo_callgraph::extract_dependencies::render_dependencies\n             at /home/joshua/src/rust/cargo-callgraph/extract_dependencies.rs:773:25\n   7: cargo_callgraph::extract_dependencies::extract_and_render_dependencies\n             at /home/joshua/src/rust/cargo-callgraph/extract_dependencies.rs:657:5\n   8: cargo_callgraph::core::run_global_ctxt::{{closure}}\n             at /home/joshua/src/rust/cargo-callgraph/core.rs:539:27\n   9: rustc_data_structures::profiling::VerboseTimingGuard::run\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_data_structures/src/profiling.rs:570:9\n  10: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_session/src/utils.rs:9:9\n  11: cargo_callgraph::core::run_global_ctxt\n             at /home/joshua/src/rust/cargo-callgraph/core.rs:536:5\n  12: cargo_callgraph::core::run_core::{{closure}}::{{closure}}::{{closure}}::{{closure}}\n             at /home/joshua/src/rust/cargo-callgraph/core.rs:474:21\n  13: rustc_interface::passes::QueryContext::enter::{{closure}}\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/passes.rs:725:42\n  14: rustc_middle::ty::context::tls::enter_context::{{closure}}\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_middle/src/ty/context.rs:1739:50\n  15: rustc_middle::ty::context::tls::set_tlv\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_middle/src/ty/context.rs:1723:9\n  16: rustc_middle::ty::context::tls::enter_context\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_middle/src/ty/context.rs:1739:9\n  17: rustc_interface::passes::QueryContext::enter\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/passes.rs:725:9\n  18: cargo_callgraph::core::run_core::{{closure}}::{{closure}}::{{closure}}\n             at /home/joshua/src/rust/cargo-callgraph/core.rs:473:17\n  19: rustc_data_structures::profiling::VerboseTimingGuard::run\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_data_structures/src/profiling.rs:570:9\n  20: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_session/src/utils.rs:9:9\n  21: cargo_callgraph::core::run_core::{{closure}}::{{closure}}\n             at /home/joshua/src/rust/cargo-callgraph/core.rs:472:46\n  22: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/queries.rs:415:19\n  23: cargo_callgraph::core::run_core::{{closure}}\n             at /home/joshua/src/rust/cargo-callgraph/core.rs:431:9\n  24: rustc_interface::interface::create_compiler_and_run::{{closure}}\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/interface.rs:196:13\n  25: rustc_span::with_source_map\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_span/src/lib.rs:764:5\n  26: rustc_interface::interface::create_compiler_and_run\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/interface.rs:190:5\n  27: cargo_callgraph::core::run_core\n             at /home/joshua/src/rust/cargo-callgraph/core.rs:430:5\n  28: cargo_callgraph::main_options\n             at /home/joshua/src/rust/cargo-callgraph/lib.rs:584:53\n  29: cargo_callgraph::main_args::{{closure}}\n             at /home/joshua/src/rust/cargo-callgraph/lib.rs:517:17\n  30: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}::{{closure}}\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/util.rs:152:13\n  31: scoped_tls::ScopedKey&lt;T&gt;::set\n             at /cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs:137:9\n  32: rustc_span::with_session_globals\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_span/src/lib.rs:93:5\n  33: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/util.rs:150:9\n  34: rustc_interface::util::scoped_thread::{{closure}}\n             at /rustc/1c389ffeff814726dec325f0f2b0c99107df2673/compiler/rustc_interface/src/util.rs:125:24\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre></div>",
        "id": 218942220,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186036
    },
    {
        "content": "<p>And now I'm getting</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTDOC=cargo-callgraph cargo doc\ncargo-callgraph: error while loading shared libraries: libtest-5016d499037f0dbe.so: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 218942264,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186080
    },
    {
        "content": "<p>are you sure you're using the same toolchain for both? that's weird</p>",
        "id": 218942283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186106
    },
    {
        "content": "<p>what are you trying to document?</p>",
        "id": 218942285,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186111
    },
    {
        "content": "<p>I'm documenting cargo-callgraph itself</p>",
        "id": 218942287,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186126
    },
    {
        "content": "<p><code>test/test1</code> and cargo callgraph itself</p>",
        "id": 218942293,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186139
    },
    {
        "content": "<p>I don't understand what is your error. It seems that it cannot pretty print something</p>",
        "id": 218942390,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186277
    },
    {
        "content": "<p>are you destroying the tcx before you print things?</p>",
        "id": 218942438,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186314
    },
    {
        "content": "<p>that will break it, Display borrows from tcx in a lot of places</p>",
        "id": 218942443,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186327
    },
    {
        "content": "<p>you are already inside <code>render_dependencies</code>, this means that you already did the extraction, and the only thing done in this function is converting the extracted data into strings and writing them in a file.</p>",
        "id": 218942464,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186361
    },
    {
        "content": "<p>hmm, I see <code>tcx</code> in the arguments so it's still around</p>",
        "id": 218942477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186390
    },
    {
        "content": "<p>weird</p>",
        "id": 218942478,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186392
    },
    {
        "content": "<blockquote>\n<p>are you destroying the tcx before you print things?</p>\n</blockquote>\n<p>Maybe, I'm copying it around, not passing by reference.</p>",
        "id": 218942540,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186436
    },
    {
        "content": "<p>that's fine, TyCtxt is itself a reference</p>",
        "id": 218942555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186477
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/context.rs.html#892-894\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/context.rs.html#892-894</a></p>",
        "id": 218942570,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186519
    },
    {
        "content": "<p>ok, it's what I guessed</p>",
        "id": 218942613,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186535
    },
    {
        "content": "<p>and the whole mir is build and stored (I did not figured out how to copy the relevant part <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> )</p>",
        "id": 218942646,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186621
    },
    {
        "content": "<p>it's only destroyed after the end of <code>render_dependencies()</code></p>",
        "id": 218942689,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186656
    },
    {
        "content": "<p>this would be so much easier if nightly rustc had debug symbols</p>",
        "id": 218942703,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186698
    },
    {
        "content": "<p>The line that fails is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">writeln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"    </span><span class=\"se\">\\\"</span><span class=\"s\">{}</span><span class=\"se\">\\\"</span><span class=\"s\">:function -&gt; </span><span class=\"se\">\\\"</span><span class=\"s\">{} to {}</span><span class=\"se\">\\\"</span><span class=\"s\">  [ color=</span><span class=\"se\">\\\"</span><span class=\"s\">blue</span><span class=\"se\">\\\"</span><span class=\"s\"> arrowtail=empty ]\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">caller_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callee_name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where soruce_name is a ty::Const&lt;'tcx&gt;, caller_name and callee_name the output of <code>tcx.def_path_str()</code>. I really don't understand why the write could fail</p>",
        "id": 218942788,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186830
    },
    {
        "content": "<p>it's this line: <a href=\"https://github.com/rust-lang/rust/blob/1c389ffef/compiler/rustc_middle/src/ty/print/pretty.rs#L1844\">https://github.com/rust-lang/rust/blob/1c389ffef/compiler/rustc_middle/src/ty/print/pretty.rs#L1844</a></p>",
        "id": 218942790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186856
    },
    {
        "content": "<p>I really don't understand what that means (details have been lost in translation!)</p>",
        "id": 218942837,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186892
    },
    {
        "content": "<p>What does \"lift\" means?</p>",
        "id": 218942842,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186906
    },
    {
        "content": "<p>in this context</p>",
        "id": 218942844,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607186911
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/trait.Lift.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/trait.Lift.html</a></p>",
        "id": 218942849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186926
    },
    {
        "content": "<p>not sure why this could fail: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/context.rs.html#1609\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/context.rs.html#1609</a></p>",
        "id": 218942863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186956
    },
    {
        "content": "<p>so it sounds like you're trying to print a Const that hasn't been interned?</p>",
        "id": 218942876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607186999
    },
    {
        "content": "<p>I don't know that that means</p>",
        "id": 218942899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607187003
    },
    {
        "content": "<p>me neither. If you search for <code>intern</code> in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/consts/struct.Const.html\">ty::Const</a>, it seems that we can intern it, whatever that means</p>",
        "id": 218943065,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607187253
    },
    {
        "content": "<p>I think I need to call <code>tcx.mk_const</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.mk_const\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.mk_const</a></p>",
        "id": 218943097,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607187355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Extract.20callgraph.20of.20a.20crate/near/218942264\">said</a>:</p>\n<blockquote>\n<p>And now I'm getting</p>\n<p><div class=\"codehilite\"><pre><span></span><code>RUSTDOC=cargo-callgraph cargo doc\ncargo-callgraph: error while loading shared libraries: libtest-5016d499037f0dbe.so: cannot open shared object file: No such file or directory\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Yes it was the issue, I was not using the right cargo-callgraph</p>",
        "id": 218943301,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607187644
    },
    {
        "content": "<p>I need to go, see you later</p>",
        "id": 218943704,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607188220
    },
    {
        "content": "<p>I'll work on compile times maybe</p>",
        "id": 218943718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607188268
    },
    {
        "content": "<p>oh we never worked out what to do about <a href=\"https://github.com/rust-lang/rust/pull/78926\">https://github.com/rust-lang/rust/pull/78926</a></p>",
        "id": 218943720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607188274
    },
    {
        "content": "<p>I'll write something up, basically \"this would be a good refactor but it will probably not be used by rustdoc\"</p>",
        "id": 218943729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607188299
    },
    {
        "content": "<p>I got quite a lot of progress this weekend <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> Bellow, you can find what is being generated (this is completely automated)</p>\n<p>The example I showed you before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">forward_fct</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">get_fct</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">forward_fct</span><span class=\"o\">&lt;</span><span class=\"n\">Fct</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">Fct</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Fct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fct</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"/user_uploads/4715/4W3xDY94WGf5JsbNxRmkqPRY/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/4W3xDY94WGf5JsbNxRmkqPRY/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/4W3xDY94WGf5JsbNxRmkqPRY/image.png\"></a></div><hr>\n<p>Two implementation of factorial:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">factorial_iter</span><span class=\"p\">(</span><span class=\"n\">target</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">*=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">factorial_recursive</span><span class=\"p\">(</span><span class=\"n\">target</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">factorial_recursive</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"/user_uploads/4715/uZj6l-Z3UsDae0KAsnaKQCQ3/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/uZj6l-Z3UsDae0KAsnaKQCQ3/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/uZj6l-Z3UsDae0KAsnaKQCQ3/image.png\"></a></div><hr>\n<p>Another example with a few function pointers:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m1</span>::<span class=\"n\">foo1</span><span class=\"p\">(</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m1</span>::<span class=\"n\">foo3</span><span class=\"p\">(</span><span class=\"n\">m2</span>::<span class=\"n\">bar</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">m1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo1</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo2</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo2</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fct</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo3</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">fct</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">foo2</span><span class=\"p\">(</span><span class=\"n\">fct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">m2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">baz</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hello word\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"/user_uploads/4715/2FU4SiqD96-wH2Ehz6oqId4A/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/2FU4SiqD96-wH2Ehz6oqId4A/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/2FU4SiqD96-wH2Ehz6oqId4A/image.png\"></a></div><hr>\n<p>I will start to investigate why <code>RUSTDOC=target/debug/cargo-callgraph cargo doc</code> doesn't work.</p>",
        "id": 219027496,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607294341
    },
    {
        "content": "<p>One big advantage of finally being able to use <code>cargo doc</code> is that I can finally test the generation on non hello-word artificial rust code. And.... I need to go back to the drawing board! Tracking the dependencies between arguments and return types, as well as using nice fat arrow is just way to noisy when used with real rust code:</p>\n<p><code>dot -Txlib</code>:<br>\n<a href=\"/user_uploads/4715/dF-D3DojS54bbVb31KBVPGOY/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/dF-D3DojS54bbVb31KBVPGOY/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/dF-D3DojS54bbVb31KBVPGOY/image.png\"></a></div><p><code>fdb -Txlib</code>:<br>\n<a href=\"/user_uploads/4715/zorkJapxEBo3BA-gXGparmTB/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/zorkJapxEBo3BA-gXGparmTB/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/zorkJapxEBo3BA-gXGparmTB/image.png\"></a></div><p>After some manual tweaking (I totally removed the blue arrows, made the black arrow thinner, remove the call-site circle, and use a different coloration for external function), the readability improved a lot:<br>\n<a href=\"/user_uploads/4715/iQ19JdDQEXavXjJMTOg2vWB5/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/iQ19JdDQEXavXjJMTOg2vWB5/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/iQ19JdDQEXavXjJMTOg2vWB5/image.png\"></a></div><p>Conclusion: while tracking all dependencies between variable seems interesting, I’m not sure it’s worth it, given that it’s really hard to display correctly. In any case, I need to simplify the amount of information I want to display, if I want to be able to have something readable at larger scale.</p>",
        "id": 219732701,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607814062
    },
    {
        "content": "<p>ooh I really like that third picture</p>",
        "id": 219732729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607814111
    },
    {
        "content": "<p>I tried to run it on cargo-callgraph itself just for fun (my integration test reports that I'm missing some dependencies). I've run dot with the \"fdp\" driver. The result looks like a simulation of a galaxy!</p>\n<p><a href=\"/user_uploads/4715/jILGGZ3Y8ADFgq4o-LvBceM5/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/4715/e5jIOMILLOJs272l8JYK7C8U/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/4715/RJJ8HCxbW2QsQbZBaHpqth1S/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/4715/6YDFbs_t05mRuyclWxbQJJr1/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/jILGGZ3Y8ADFgq4o-LvBceM5/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/jILGGZ3Y8ADFgq4o-LvBceM5/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/e5jIOMILLOJs272l8JYK7C8U/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/e5jIOMILLOJs272l8JYK7C8U/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/RJJ8HCxbW2QsQbZBaHpqth1S/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/RJJ8HCxbW2QsQbZBaHpqth1S/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/4715/6YDFbs_t05mRuyclWxbQJJr1/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/6YDFbs_t05mRuyclWxbQJJr1/image.png\"></a></div><p><span aria-label=\"star\" class=\"emoji emoji-2b50\" role=\"img\" title=\"star\">:star:</span> <span aria-label=\"telescope\" class=\"emoji emoji-1f52d\" role=\"img\" title=\"telescope\">:telescope:</span> <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 219761186,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607865395
    },
    {
        "content": "<p>Oh my goodness</p>",
        "id": 219762064,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607867035
    },
    {
        "content": "<p>Can you send SVGs of those? If you zoom in are they actually useful?</p>",
        "id": 219762104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607867053
    },
    {
        "content": "<p>I'd love to use this on rustdoc itself at some point and I expect the callgraphs for cargo-callgraph and rustdoc are mostly the same</p>",
        "id": 219762141,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607867158
    },
    {
        "content": "<p>If not for all the lines all over the place, it looks good <span aria-label=\"telescope\" class=\"emoji emoji-1f52d\" role=\"img\" title=\"telescope\">:telescope:</span></p>",
        "id": 219765438,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607872222
    },
    {
        "content": "<p>In fact, I'm starting to think that a static SVG file might not be too helpful when the code is too complex and very interconnected, because I don't know how one could solve the problem with those lines</p>",
        "id": 219765474,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607872312
    },
    {
        "content": "<p>I don't really know enough about SVG, but maybe it's possible to generate an SVG file with graphviz and add a JS layer on top to allow for searching a specific node and visualizing all of its connections?</p>",
        "id": 219765555,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607872426
    },
    {
        "content": "<p>Though IIUC these graphs make it pretty clear what the entry and the leaf functions are</p>",
        "id": 219765618,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607872509
    },
    {
        "content": "<p>I would want this for \"what functions does resolve_str_path_error actually call\"</p>",
        "id": 219765686,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607872589
    },
    {
        "content": "<p>Which is not a question I currently know how to answer without reading the code for a good half hour</p>",
        "id": 219765692,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607872607
    },
    {
        "content": "<p>So I guess that search would be really useful, yeah</p>",
        "id": 219765697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607872619
    },
    {
        "content": "<p>Another thing that would be useful is grouping the functions by module so you can kind of see similar ones together</p>",
        "id": 219765704,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607872642
    },
    {
        "content": "<p>And maybe by crate too</p>",
        "id": 219765707,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607872651
    },
    {
        "content": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model#SVG_interfaces\">https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model#SVG_interfaces</a> :)</p>",
        "id": 219765789,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607872795
    },
    {
        "content": "<p>Zulip has been very mean today. I checked a few times, and so no response, even after refreshing the page… Anyway!</p>",
        "id": 219784441,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607897535
    },
    {
        "content": "<blockquote>\n<p>I'd love to use this on rustdoc itself at some point and I expect the callgraphs for cargo-callgraph and rustdoc are mostly the same</p>\n</blockquote>\n<p>Yes, definitively, I have one extra file, and I modified <code>core.rs</code> and <code>lib.rs</code>, that's all.</p>\n<blockquote>\n<p>Can you send SVGs of those? If you zoom in are they actually useful?</p>\n</blockquote>\n<p>You should be able to re-generates them easily (<a href=\"https://github.com/robinmoussu/cargo-callgraph/\">git</a>). I updated the Readme, it should be easy to do it now. I could paste them, but they are (using <code>dot</code> or <code>fdp</code>) 13 and 9.9MB. And they are as unreadable as seen in the screenshot!</p>\n<blockquote>\n<p>I don't really know enough about SVG, but maybe it's possible to generate an SVG file with graphviz and add a JS layer on top to allow for searching a specific node and visualizing all of its connections?</p>\n</blockquote>\n<p>I'm not even sure that graphviz is the right solution at all. I'm using it for the moment, because it's a very good proxy for a GUI that I didn't have to write. I also think that interactivity is going to be crucial to deliver a good user experience.</p>\n<blockquote>\n<p>Though IIUC these graphs make it pretty clear what the entry and the leaf functions are</p>\n</blockquote>\n<p>Not exactly, some function (like <code>Fn::call</code> or <code>Deref::deref</code>) are absolutely over-represented, and should be hidden.</p>\n<blockquote>\n<p>Which is not a question I currently know how to answer without reading the code for a good half hour</p>\n</blockquote>\n<p>The infrastructure is nearly ready for that! AFAIK, the only dependency information I'm not extracting are global variable (thread local, static, const, …). After that, I just need to be able to propagate the local dependency information between all the functions (because of call through <code>Fn()::call</code> or other traits) that are not visible in the direct call-graph. Note that this dependency propagation could easily include the value of any variable, not only the callgraph.</p>\n<blockquote>\n<p>Another thing that would be useful is grouping the functions by module so you can kind of see similar ones together</p>\n</blockquote>\n<p>I think I will just use a different color for each module in the background of each function <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>And I also nearly have all the information to be able to compute that given a <code>Foo</code> and a <code>Bar</code>, if you add a <code>Baz</code>, you could do <code>f1(Foo, Bar).f2(baz).f3()</code> to create a <code>FooBar</code>.</p>",
        "id": 219785253,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607898644
    },
    {
        "content": "<blockquote>\n<p>And I also nearly have all the information to be able to compute that given a <code>Foo</code> and a <code>Bar</code>, if you add a <code>Baz</code>, you could do <code>f1(Foo, Bar).f2(baz).f3()</code> to create a <code>FooBar</code>.</p>\n</blockquote>\n<p>Hmm, what do you  mean by that?</p>",
        "id": 219793016,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607911071
    },
    {
        "content": "<blockquote>\n<p>I'm not even sure that graphviz is the right solution at all. I'm using it for the moment, because it's a very good proxy for a GUI that I didn't have to write. I also think that interactivity is going to be crucial to deliver a good user experience.</p>\n</blockquote>\n<p>You might want to do something like <a href=\"https://internals.rust-lang.org/t/exploring-crate-graph-build-times-with-cargo-build-ztimings/10975\"><code>-Z timings</code></a>, where you generate a static HTML file that contains the data and JS to make it interactive.</p>",
        "id": 219793124,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607911217
    },
    {
        "content": "<blockquote>\n<p>And I also nearly have all the information to be able to compute that given a Foo and a Bar, if you add a Baz, you could do f1(Foo, Bar).f2(baz).f3() to create a FooBar.</p>\n</blockquote>\n<p>When I want to create a <code>FooBar</code>, currently, the only thing I can do is to use the search function on the rustdoc generated pages for <code>FooBar</code>, and look in the <code>Return types</code> tab. It works well if you are looking for a function that directly generate a <code>FooBar</code>, but it totally fails when you need to chain multiple functions. I would like to have a tool that show me all chains of functions that lead to the creation of <code>FooBar</code>, as well as being able to filter all the input types used in those function chain.</p>",
        "id": 219830602,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607946924
    },
    {
        "content": "<blockquote>\n<p>You might want to do something like -Z timings, where you generate a static HTML file that contains the data and JS to make it interactive.</p>\n</blockquote>\n<p>I will need to do some testing, and I’m not sure it will work. The hard part is the routing (placing the functions on the screen and choosing a somewhat optimal path for the arrows), and I’m not sure that js is fast enough to deliver a good user experience. Generating the <code>dot</code> file takes a few seconds, while generating the <code>.svg</code> with graphviz takes minutes. I don’t expect js to be so much more efficient than graphviz. I will probably have to test webassembly and write something GPU accelerated in Rust!</p>",
        "id": 219830915,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1607947120
    },
    {
        "content": "<blockquote>\n<p>I would like to have a tool that show me all chains of functions that lead to the creation of <code>FooBar</code>, as well as being able to filter all the input types used in those function chain.</p>\n</blockquote>\n<p>That's cool! :)</p>",
        "id": 219895123,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607976370
    },
    {
        "content": "<p>I think the reason GraphViz takes so long is that it's laying out the entire graph. Perhaps with your tool, the JS would only lay out the part of the graph you're looking at (and have everything position relative to that) so that the cost is amortized. And when you first open it up, it will focus on <code>main()</code> for a binary or just ask you what you would like to look at first?</p>",
        "id": 219895355,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607976550
    },
    {
        "content": "<p>I'm really excited to see this tool :)</p>",
        "id": 219895359,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607976554
    }
]