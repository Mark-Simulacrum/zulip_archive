[
    {
        "content": "<p>I have a problem with lifetimes that I'm having a bit of trouble working out. This isn't compiler specific, but I'm working on the compiler, so...</p>\n<p>My code looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hir</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Visitor</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ItemLowerer</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">hir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hir_item</span><span class=\"w\"> </span>: <span class=\"nc\">hir</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">hir</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">lctx</span><span class=\"p\">.</span><span class=\"n\">with_hir_id_owner</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">lctx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">lctx</span><span class=\"p\">.</span><span class=\"n\">without_in_scope_lifetime_defs</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">lctx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">lctx</span><span class=\"p\">.</span><span class=\"n\">lower_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For reference, here are the signatures of the relevant functions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">with_hir_id_owner</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">owner</span>: <span class=\"nc\">NodeId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">without_in_scope_lifetime_defs</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">LoweringContext</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">lower_item</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Item</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">hir</span>::<span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">hir</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The error message looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `&#39;hir` due to conflicting requirements\n  --&gt; compiler/rustc_ast_lowering/src/item.rs:48:22\n   |\n48 |                 lctx.lower_item(item)\n   |                      ^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #3 defined on the body at 47:49...\n  --&gt; compiler/rustc_ast_lowering/src/item.rs:47:49\n   |\n47 |               lctx.without_in_scope_lifetime_defs(|lctx| {\n   |  _________________________________________________^\n48 | |                 lctx.lower_item(item)\n49 | |             })\n   | |_____________^\nnote: ...so that the types are compatible\n  --&gt; compiler/rustc_ast_lowering/src/item.rs:48:22\n   |\n48 |                 lctx.lower_item(item)\n   |                      ^^^^^^^^^^\n   = note: expected `&amp;mut LoweringContext&lt;&#39;_, &#39;_&gt;`\n              found `&amp;mut LoweringContext&lt;&#39;_, &#39;_&gt;`\nnote: but, the lifetime must be valid for the lifetime `&#39;_` as defined on the impl at 44:54...\n  --&gt; compiler/rustc_ast_lowering/src/item.rs:44:54\n   |\n44 | impl&lt;&#39;a, &#39;hir&gt; Visitor&lt;&#39;a&gt; for ItemLowerer&lt;&#39;a, &#39;hir, &#39;_&gt; {\n   |                                                      ^^\nnote: ...so that the types are compatible\n  --&gt; compiler/rustc_ast_lowering/src/item.rs:46:52\n   |\n46 |         let hir_item : hir::Item&lt;&#39;hir&gt; = self.lctx.with_hir_id_owner(item.id, |lctx| {\n   |                                                    ^^^^^^^^^^^^^^^^^\n   = note: expected `&amp;mut LoweringContext&lt;&#39;_, &#39;_&gt;`\n              found `&amp;mut LoweringContext&lt;&#39;hir, &#39;_&gt;`\n\nerror[E0495]: cannot infer an appropriate lifetime for life\n</code></pre></div>\n<p>I'm more than a little lost. Probably something obvious, but I've only worked with lifetimes enough to handle simple situations.</p>",
        "id": 248689526,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1628302343
    },
    {
        "content": "<p>I know that every experienced rust programmer finds joy in helping newcomers understand how lifetimes work. ;)</p>",
        "id": 248689599,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1628302476
    },
    {
        "content": "<p>I'm not sure exactly why, but since the closure in <code>without_in_scope_lifetime_defs</code> has the signature <code>f: impl FnOnce(&amp;mut LoweringContext&lt;'_, '_&gt;) -&gt; T</code> instead of <code>f: impl FnOnce(&amp;mut LoweringContext&lt;'_, 'hir&gt;) -&gt; T</code>, the local second lifetime there (call it <code>'hir2</code>) is shorter than the <code>'hir</code> lifetime, and <code>lctx.lower_item(item)</code> is returning a <code>hir::Item&lt;'hir2&gt;</code> instead of <code>hir::Item&lt;'hir&gt;</code></p>",
        "id": 248691496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628304945
    },
    {
        "content": "<p>AFAICT this is an unnecessary restriction in <code>without_in_scope_lifetime_defs</code> - you should be able to just change the signature and it will still compile. It might be restricted like that for an API reason though</p>",
        "id": 248692103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628305775
    },
    {
        "content": "<p>Thanks! It worked like a charm.</p>",
        "id": 248692948,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1628306963
    },
    {
        "content": "<p>There's unlikely to be an API reason for it. The function is a module private utility function, and there's only one <code>LoweringContext</code> in any case.</p>",
        "id": 248693065,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1628307110
    },
    {
        "content": "<p>Actually, even <code>f: impl FnOnce(&amp;mut Self) -&gt; T</code> seems to work (you couldn't have known that though, I don't think I gave you enough information).</p>",
        "id": 248693309,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1628307441
    },
    {
        "content": "<p>that's probably a better signature anyway</p>",
        "id": 248693641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628307873
    },
    {
        "content": "<p>Yeah! If nothing else, it's much more readable.</p>",
        "id": 248693671,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1628307907
    }
]