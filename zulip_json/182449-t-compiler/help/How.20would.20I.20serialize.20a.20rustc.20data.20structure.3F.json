[
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/rust/issues/65983#issuecomment-638352731\">https://github.com/rust-lang/rust/issues/65983#issuecomment-638352731</a>, <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> mentioned a 'resolver tree' in <code>rustc_resolve</code>. Does anyone know what that is? I see a <code>Resolver</code> that implements <code>DefIdTree</code>, is that it?</p>\n<p>There was also something about 'self-referential arena's which I don't quite understand - is this arenas like the memory allocation strategy? What makes those self-referential?</p>",
        "id": 199944553,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591399466
    },
    {
        "content": "<p>Partially related - how do I serialize a rustc data structure? I assume it's not as simple as <code>derive(rustc_serialize::Serialize)</code>?</p>",
        "id": 199944594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591399535
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.ModuleData.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_resolve/struct.ModuleData.html</a></p>",
        "id": 199944595,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591399541
    },
    {
        "content": "<p>No the whole issue here is that all the resolution information is stored in an arena, it's not something that's easy to serialize. We need to convert it to a datastructure that _is_ easy to serialize and query, one that _just_ has the list of resolutions for a given module defid.</p>",
        "id": 199944679,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591399619
    },
    {
        "content": "<p>Ok, and arenas are self-referential because they use indices instead of the data itself?</p>",
        "id": 199944746,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591399686
    },
    {
        "content": "<p>What's the trait I need to implement?</p>",
        "id": 199945010,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591399981
    },
    {
        "content": "<p>looks like Decodable and Encodable</p>",
        "id": 199945035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591400006
    },
    {
        "content": "<p>I can't even import rustc_serialize :(</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0463]: can&#39;t find crate for `rustc_serialize`\n  --&gt; src/librustc_resolve/lib.rs:56:1\n   |\n56 | extern crate rustc_serialize;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can&#39;t find crate\n</code></pre></div>",
        "id": 199945325,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591400295
    },
    {
        "content": "<p>They use references.</p>\n<p>Traits aren't the important part. The work is in creating a data strcture, we'll figure out how it can go into emtadata later.</p>",
        "id": 199945874,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591400922
    },
    {
        "content": "<p>Do you have some other examples of serializable structures you can point me to?</p>",
        "id": 199946668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591401779
    },
    {
        "content": "<p>My idea for making <code>parent</code> non-referential was to have one structure that stored all modules and store an index into that structure</p>",
        "id": 199947863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591403342
    },
    {
        "content": "<p>something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// A `ModuleData` that is non self-referential</span>\n<span class=\"k\">struct</span> <span class=\"nc\">OwnedModuleData</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">parent</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">ModuleIndex</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// An opaque reference to an `OwnedModuleData`. To be used in conjunction with a `ModuleStore`.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">ModuleIndex</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// A list of all modules needed to serialize a specific module</span>\n<span class=\"k\">struct</span> <span class=\"nc\">ModuleStore</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">OwnedModuleData</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199947882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591403400
    },
    {
        "content": "<p>and all the structs with lifetime parameters aren't a big deal, it's only the references that matter</p>",
        "id": 199947959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591403512
    },
    {
        "content": "<p>so that leaves</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">glob_importers</span>: <span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">globs</span>: <span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Import</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Used to memoize the traits in this module for faster searches through all traits in scope.</span>\n<span class=\"w\">    </span><span class=\"n\">traits</span>: <span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[(</span><span class=\"n\">Ident</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">NameBinding</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">)]</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199948000,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591403535
    },
    {
        "content": "<p>From the comment it seems like <code>traits</code> might not need to be stored? Since it's only a cache and can be recalculated?</p>",
        "id": 199948013,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591403559
    },
    {
        "content": "<p>Do you know why <code>glob_importers</code> and <code>globs</code> are RefCells?</p>",
        "id": 199948030,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591403580
    },
    {
        "content": "<p>update: this is why <code>globs</code> is a RefCell: <a href=\"https://hastebin.com/gorakaqiha.coffeescript\">https://hastebin.com/gorakaqiha.coffeescript</a></p>",
        "id": 199948257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591403947
    },
    {
        "content": "<blockquote>\n<p>and all the structs with lifetime parameters aren't a big deal, it's only the references that matter</p>\n</blockquote>\n<p>This appears to be incorrect, I don't see any easy way to make any of these owned.</p>",
        "id": 199950185,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591407091
    },
    {
        "content": "<p>What if I narrowed the scope and instead only tried to serialize <code>Resolutions</code>? I think that's all rustdoc really needs</p>",
        "id": 199950253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591407172
    },
    {
        "content": "<p>unless i'm misunderstanding glob imports</p>",
        "id": 199950257,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591407179
    },
    {
        "content": "<p>oh well that has a <code>&amp;'a Import&lt;'a&gt;</code> anyway so I'd have to solve this problem sooner or later</p>",
        "id": 199950277,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591407240
    },
    {
        "content": "<p>I'm finding it really hard to understand the lifetimes because of all the <code>RefCell</code></p>",
        "id": 199950469,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591407586
    },
    {
        "content": "<p>The <code>type Module = &amp;ModuleData</code> alias is convenient but means that all the mutability is <em>forced</em> to use refcell</p>",
        "id": 199950514,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591407617
    },
    {
        "content": "<p>I'm seeing something called <code>ResolverOutputs</code> which has no borrows and looks like basically what we'd need, can I reuse that?</p>",
        "id": 199950962,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591408473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Given your comments here and in the github thread I think you're overfocusing on the \"serialize\" part of it. The high level thing is that rustdoc needs to be able to resolve reexport documentation against their original module map, which is not available in cross-crate scenarios. Serializing is necessary to stick it into the rlib so we can get it back. The important thing is getting it in a state where it's fully owned with no self references</p>",
        "id": 200035185,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591553004
    },
    {
        "content": "<p>I don't think we actually should be trying to serialize the _entire_ Resolver. Rather, we should be reading it and producing a new type that _can_ be serialized. The <code>traits</code> field is unnecessary. <code>globs</code> kind of is, sadly.</p>",
        "id": 200035240,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591553057
    },
    {
        "content": "<p>You really need to talk to compiler team members about this, though.</p>",
        "id": 200035512,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591553522
    },
    {
        "content": "<p>I'm really confused how serialization is related at all, to be honest</p>",
        "id": 200039983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591560470
    },
    {
        "content": "<p>The reason I keep focusing on it is I'm trying to find out how it's related</p>",
        "id": 200039986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591560480
    },
    {
        "content": "<p>none of the changes I made in <a href=\"https://github.com/rust-lang/rust/pull/73101/\">https://github.com/rust-lang/rust/pull/73101/</a> were related to serialization</p>",
        "id": 200040026,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591560495
    },
    {
        "content": "<p>also I might be confused - I thought you were a compiler team member? <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span></p>",
        "id": 200040103,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591560619
    },
    {
        "content": "<p>ah ok you're part of the clippy team, that's why I was confused (plus core of course)</p>",
        "id": 200040251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591560873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I mentioned serialization because this is information downstream crates do not have, and the way for them to get it is through metadata, and to put something in metadata we need to be able to serialize it cross crate (so, no self references)</p>",
        "id": 200043055,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591564974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> it's not clear to me how that PR fixes this bug. The test case is:</p>\n<div class=\"codehilite\"><pre><span></span><code>// crate a:\npub struct Foo;\n\n/// Link to [Foo]\npub struct Bar;\n\n// crate b:\npub use a::Bar;\n</code></pre></div>\n\n\n<p>the docs for <code>b::Bar</code> should link correctly to <code>a::Foo</code>.</p>",
        "id": 200043163,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591565087
    },
    {
        "content": "<p>Yeah I've never been compiler team. I'm capable of reviewing for most of the compiler, and I understand the resolver, but not well enough for something like this.</p>",
        "id": 200043195,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591565151
    },
    {
        "content": "<p>this is what my PR outputs for that test case: <a href=\"/user_uploads/4715/D4aqBTulCHlvBGELiSuPXB4R/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/D4aqBTulCHlvBGELiSuPXB4R/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/D4aqBTulCHlvBGELiSuPXB4R/image.png\"></a></div>",
        "id": 200043271,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591565244
    },
    {
        "content": "<p>the link is to <code>/a/struct.Foo.html</code>.</p>",
        "id": 200043284,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591565261
    },
    {
        "content": "<p>I'm not sure how to add test cases with multiple crates, I can look into that</p>",
        "id": 200043313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591565282
    },
    {
        "content": "<p>the reason my PR works is because it resolves types relative to the other crate (<code>a</code>), not to the current crate (<code>b</code>)</p>",
        "id": 200043342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591565328
    },
    {
        "content": "<p>which is correct because the docs were written in <code>a</code>, not in <code>b</code>. So if we try to resolve relative to <code>b</code> none of the same items will be in scope.</p>",
        "id": 200043357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591565363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> huh, that surprises me. Does that even work when A and B are within some deeper modules (all public)?</p>",
        "id": 200054790,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591585633
    },
    {
        "content": "<p>I think I have a guess here as to what's happening: the ExportMap already has what we needed to some extent</p>",
        "id": 200054792,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591585654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> another test case would be to stick Bar in a private module, and re-export it from the top level, and have Foo in a public module with Bar using <code>Foo</code> in docs with a <code>use foomod::Foo</code> in scope.</p>",
        "id": 200054842,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591585734
    },
    {
        "content": "<p>Sounds good, I'll try that tomorrow</p>",
        "id": 200054852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591585791
    },
    {
        "content": "<p>Also <code>--no-deps</code> breaks things for reasons I don't understand</p>",
        "id": 200054970,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591586011
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/73101#issuecomment-640330018\">https://github.com/rust-lang/rust/pull/73101#issuecomment-640330018</a></p>",
        "id": 200054977,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591586040
    },
    {
        "content": "<p>Only if the item wasn't inlined though? That's weird, that means it can be fixed in rustdoc though</p>",
        "id": 200055201,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591586486
    },
    {
        "content": "<p>Only if the item wasn't inlined though? That's weird, that means it can be fixed in rustdoc though</p>",
        "id": 200055203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1591586503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  oh btw i am not watching htis channel, i won't see things you don't ping me on</p>",
        "id": 200123662,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1591634032
    }
]