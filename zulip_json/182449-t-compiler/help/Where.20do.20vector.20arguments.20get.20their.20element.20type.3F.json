[
    {
        "content": "<p>I'm looking at the x86_64 SysV ABI code, and I'm struggling to understand where vector arguments get their element type for their LLVM type. The reg_component function just returns a <code>Reg</code> with a <code>RegKind::Vector</code> and some size. This then gets stuffed into a <code>CastTarget</code> via a <code>Uniform</code>. The <code>llvm_type</code>method of<code>CastTarget</code> calls the <code>llvm_type</code> method on <code>Reg</code> which always creates a vector of <code>i8</code> elements. Yet, the generated IR correctly has types like <code>&lt;4 x float&gt;</code>, where do these come from?</p>",
        "id": 264562719,
        "sender_full_name": "Bj√∂rn Steinbrink",
        "timestamp": 1639229100
    },
    {
        "content": "<p>I am trying to look into this. The following is just a brain dump:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![no_core]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(rustc_attrs, repr_simd, no_core, lang_items)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"sized\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Sized</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">\"copy\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(simd)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">__m128</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// ---- everything above this line is only to avoid a libstd/libcore dependency ----</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">__m128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>results in the following <code>FnAbi</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FnAbi</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">args</span>: <span class=\"p\">[</span><span class=\"n\">ArgAbi</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>: <span class=\"nc\">__m128</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">fields</span>: <span class=\"nc\">Array</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">stride</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">count</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">abi</span>: <span class=\"nc\">Vector</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">element</span>: <span class=\"nc\">Scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">value</span>: <span class=\"nc\">F32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">valid_range</span>: <span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">4294967295</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">count</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pad</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mode</span>: <span class=\"nc\">Direct</span><span class=\"p\">(</span><span class=\"n\">ArgAttributes</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">regular</span>: <span class=\"p\">(</span><span class=\"n\">empty</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">arg_ext</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">pointee_size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">pointee_align</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ret</span>: <span class=\"nc\">ArgAbi</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>: <span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">layout</span>: <span class=\"nc\">Layout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">fields</span>: <span class=\"nc\">Arbitrary</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">offsets</span>: <span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">memory_index</span>: <span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">variants</span>: <span class=\"nc\">Single</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">index</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">abi</span>: <span class=\"nc\">Aggregate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sized</span>: <span class=\"nc\">true</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">largest_niche</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">align</span>: <span class=\"nc\">AbiAndPrefAlign</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">abi</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">pref</span>: <span class=\"nc\">Align</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pow2</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">size</span>: <span class=\"nc\">Size</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">raw</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pad</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mode</span>: <span class=\"nc\">Ignore</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c_variadic</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fixed_count</span>: <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">conv</span>: <span class=\"nc\">C</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">can_unwind</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the following LLVM ir:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN10playground3foo17hbd82c0b73d348603E</span><span class=\"p\">(&lt;</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"kt\">float</span><span class=\"p\">&gt;</span> <span class=\"nv\">%a</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!6</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%a.dbg.spill</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"p\">&lt;</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"kt\">float</span><span class=\"p\">&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">16</span>\n  <span class=\"k\">store</span> <span class=\"p\">&lt;</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"kt\">float</span><span class=\"p\">&gt;</span> <span class=\"nv\">%a</span><span class=\"p\">,</span> <span class=\"p\">&lt;</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"kt\">float</span><span class=\"p\">&gt;*</span> <span class=\"nv\">%a.dbg.spill</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">16</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.dbg.declare</span><span class=\"p\">(</span><span class=\"k\">metadata</span> <span class=\"p\">&lt;</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"kt\">float</span><span class=\"p\">&gt;*</span> <span class=\"nv\">%a.dbg.spill</span><span class=\"p\">,</span> <span class=\"k\">metadata</span> <span class=\"nv nv-Anonymous\">!20</span><span class=\"p\">,</span> <span class=\"k\">metadata</span> <span class=\"nv\">!DIExpression</span><span class=\"p\">()),</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!21</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!22</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 264564869,
        "sender_full_name": "bjorn3",
        "timestamp": 1639232158
    },
    {
        "content": "<p>The pass mode is <code>PassMode::Direct</code> and not <code>PassMode::Cast</code> it seems. This means that at <a href=\"https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_codegen_llvm/src/abi.rs#L379\">https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_codegen_llvm/src/abi.rs#L379</a> <code>immediate_llvm_type</code> is used to get the argument type, which for <code>__m128</code> returns <code>&lt;4 x float&gt;</code> at <a href=\"https://github.com/rust-lang/rust/blob/b27661eb33c74cb514dba059b47d86b6582ac1c2/compiler/rustc_codegen_llvm/src/type_of.rs#L26-L27\">https://github.com/rust-lang/rust/blob/b27661eb33c74cb514dba059b47d86b6582ac1c2/compiler/rustc_codegen_llvm/src/type_of.rs#L26-L27</a></p>",
        "id": 264565048,
        "sender_full_name": "bjorn3",
        "timestamp": 1639232380
    },
    {
        "content": "<p>As for why it is <code>PassMode::Direct</code> instead of <code>PassMode::Cast</code> I think <a href=\"https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_target/src/abi/call/x86_64.rs#L232\">https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_target/src/abi/call/x86_64.rs#L232</a> is hit and not <a href=\"https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_target/src/abi/call/x86_64.rs#L230\">https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_target/src/abi/call/x86_64.rs#L230</a> as <code>layout.is_aggregate()</code> returns false for vector types: <a href=\"https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_target/src/abi/call/mod.rs#L325\">https://github.com/rust-lang/rust/blob/b9a37ad0d995c71518629b032f8e816e1efa8bca/compiler/rustc_target/src/abi/call/mod.rs#L325</a></p>",
        "id": 264565287,
        "sender_full_name": "bjorn3",
        "timestamp": 1639232688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"158223\">@Bj√∂rn Steinbrink</span></p>",
        "id": 264565290,
        "sender_full_name": "bjorn3",
        "timestamp": 1639232701
    },
    {
        "content": "<p>Oh, that makes sense. I was working with aggregates before, and must have missed that part when I switched to vectors. Thanks a lot!</p>",
        "id": 264565615,
        "sender_full_name": "Bj√∂rn Steinbrink",
        "timestamp": 1639233223
    },
    {
        "content": "<p>No problem</p>",
        "id": 264565857,
        "sender_full_name": "bjorn3",
        "timestamp": 1639233587
    }
]