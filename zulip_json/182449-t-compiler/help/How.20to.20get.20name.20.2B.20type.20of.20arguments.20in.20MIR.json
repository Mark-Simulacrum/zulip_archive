[
    {
        "content": "<p>I would like to access to the name and type of every arguments in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html\">MIR</a>.<br>\nAs far as I understand, the return value always has the index <code>0</code>, then the arguments have the index from <code>1</code> to <code>mir.arg_count</code>. I can access to type with <code>mir.local_decls[index].ty</code> with <code>index</code> being either <code>0</code> (the return type or the index of a given argument + 1.<br>\nHowever, I'm not sure how I should access to a user-readable string for the name of each arguments. I'm not sure if it should be a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.Symbol.html\"><code>Symbol</code></a> or a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Constant.html\"><code>Constant</code></a>. And I'm don't understand how I should get it. Note that I'm expecting that this name is optional since the return value isn't named, and for <code>fn foo(_: i32)</code> I don't know if the name of the first argument is <code>_</code> or <code>None</code>.</p>",
        "id": 217164909,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605718963
    },
    {
        "content": "<p>The <code>var_debug_info</code> field contains the information you want. It is an array of <code>VarDebugInfo</code> values. Each defines the name of a variable and the <code>Place</code> it is in. This <code>Place</code> could be a direct local, or a projection of a local. The later case doesn't happen currently I think, but it can happen in the future when an SROA pass is introduced. There are locals without corresponding <code>VarDebugInfo</code>. These are compiler introduced temporaries or <code>_</code>.</p>",
        "id": 217166782,
        "sender_full_name": "bjorn3",
        "timestamp": 1605719740
    },
    {
        "content": "<p>What is a SROA?</p>",
        "id": 217166912,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605719785
    },
    {
        "content": "<p>looks like 'scalar replacement of aggregates' <a href=\"https://blog.regehr.org/archives/1603\">https://blog.regehr.org/archives/1603</a></p>",
        "id": 217167007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605719830
    },
    {
        "content": "<p>I'm guessing something like <a href=\"https://llvm.org/doxygen/classllvm_1_1SROA.html\">https://llvm.org/doxygen/classllvm_1_1SROA.html</a></p>",
        "id": 217167028,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605719839
    },
    {
        "content": "<p>And what is the index to <code>mir.var_debug_info</code>? It doesn't seems to be a <code>Local</code> (so the index of the argument + 1 in the case of the arguments).</p>",
        "id": 217167041,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605719846
    },
    {
        "content": "<p>It's just a list of debuginfo data</p>",
        "id": 217167100,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605719871
    },
    {
        "content": "<p>You need to find the parts you're interested in by looking for places that match the locals you want to know the names of</p>",
        "id": 217167189,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605719900
    },
    {
        "content": "<p>FYI, arguments don't have to be named so you should probably structure your code to handle that. As a contrived example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">x</span><span class=\"p\">((</span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The argument itself isn't named since it's immediately destructured.</p>",
        "id": 217167492,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605720013
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20get.20name.20.2B.20type.20of.20arguments.20in.20MIR/near/217167007\">said</a>:</p>\n<blockquote>\n<p>looks like 'scalar replacement of aggregates' <a href=\"https://blog.regehr.org/archives/1603\">https://blog.regehr.org/archives/1603</a></p>\n</blockquote>\n<p>Confirmed: <a href=\"https://queue.acm.org/detail.cfm?id=3212479\">https://queue.acm.org/detail.cfm?id=3212479</a></p>",
        "id": 217167619,
        "sender_full_name": "oliver",
        "timestamp": 1605720070
    },
    {
        "content": "<p>Then I guess I need to be able to capture <code>\"(z, y)\"</code>, from a <code>Span</code>? (I'm not familiar with <code>Span</code>). This still doesn't explains how I can index <code>mir.var_debug_info</code>. It's a <code>Vec</code> and not a <code>VecIndex&lt;Local, _&gt;</code>, so I don't think I can just use the index of a local to index it.</p>",
        "id": 217168227,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605720340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281841\">@Robin Moussu</span> what are you trying to do?</p>",
        "id": 217168435,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605720416
    },
    {
        "content": "<p>the way rustdoc gets names is here: <a href=\"https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src/librustdoc/html/format.rs#L921\">https://github.com/rust-lang/rust/blob/c9a48d1d73f71fbe5f2ea72485fd2a8a94e65934/src/librustdoc/html/format.rs#L921</a><br>\nI'd have to look deeper in <code>clean</code> to see where in rustc that comes from</p>",
        "id": 217168691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605720514
    },
    {
        "content": "<blockquote>\n<p>This still doesn't explains how I can index mir.var_debug_info. </p>\n</blockquote>\n<p>You can't. You have to iterate over the vec and record whatever data you're interested in along the way.</p>",
        "id": 217168780,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605720574
    },
    {
        "content": "<blockquote>\n<p>what are you trying to do?</p>\n</blockquote>\n<p>Accessing a name that the user can understand. I'm trying to extract the dependency relations between the arguments of a function, the arguments to callee function, the return value of callee function and the return value of the function. Then I need to be able to display this graph of dependency.</p>",
        "id": 217169067,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605720691
    },
    {
        "content": "<p>I'm not sure how <code>Span</code>s are coming into play. <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.VarDebugInfo.html\"><code>VarDebugInfo.name</code></a> is what you're interested in. You just need to find if there is one for the <code>Local</code> you're interested in.</p>",
        "id": 217169247,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605720770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281841\">Robin Moussu</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20get.20name.20.2B.20type.20of.20arguments.20in.20MIR/near/217168227\">said</a>:</p>\n<blockquote>\n<p>Then I guess I need to be able to capture <code>\"(z, y)\"</code>, from a <code>Span</code>? (I'm not familiar with <code>Span</code>).</p>\n</blockquote>\n<p>A <code>Span</code> represents a region of code (in terms of raw byte positions in a source file). I think unless you want to point to point some part of the source code to the user, you don't need <code>Span</code>.</p>",
        "id": 217170069,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605721152
    },
    {
        "content": "<blockquote>\n<p>You have to iterate over the vec and record whatever data you're interested in along the way.</p>\n</blockquote>\n<p>I have the <code>mir::Local</code> of the records I want (it's <code>Local(1)</code> to <code>Local(mir.arg_count + 1)</code>), but I don't understand how to filter <code>var_debug_info</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">debug_info</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">var_debug_info</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">args_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">???</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">printf</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"argument {} is named {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">debug_info</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217170201,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605721206
    },
    {
        "content": "<p>Maybe <code>debug_info.place.local</code>?</p>",
        "id": 217170404,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605721299
    },
    {
        "content": "<p>yes, thanks.</p>",
        "id": 217170424,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605721308
    },
    {
        "content": "<p>I hope ;)</p>",
        "id": 217170505,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605721326
    },
    {
        "content": "<p>Yeah, that's basically it. You can improve that a bit by doing the loop only once with something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">arg_names</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">IndexVec</span>::<span class=\"n\">from_elem_n</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">arg_count</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">debug_info</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">var_debug_info</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"c1\">// only look at top-level bindings which should be the argument names</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">debug_info</span><span class=\"p\">.</span><span class=\"n\">source_info</span><span class=\"p\">.</span><span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">debug_info</span><span class=\"p\">.</span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arg_names</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">local</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">debug_info</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which gives you an <code>IndexVec&lt;Local, Option&lt;&amp;Symbol&gt;&gt;</code> mapping arguments to names if they were found. </p>\n<p>Caveat emptor: I wrote this code in Zulip chat and haven't tested it.</p>",
        "id": 217171878,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1605721902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20get.20name.20.2B.20type.20of.20arguments.20in.20MIR/near/217167007\">said</a>:</p>\n<blockquote>\n<p>looks like 'scalar replacement of aggregates' <a href=\"https://blog.regehr.org/archives/1603\">https://blog.regehr.org/archives/1603</a></p>\n</blockquote>\n<p>Thanks, it was a very interesting read!</p>",
        "id": 217203770,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605737546
    }
]