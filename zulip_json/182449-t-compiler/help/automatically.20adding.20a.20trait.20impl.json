[
    {
        "content": "<p>Currently working on <a href=\"https://github.com/rust-lang/rust/issues/70509\" title=\"https://github.com/rust-lang/rust/issues/70509\">https://github.com/rust-lang/rust/issues/70509</a>.</p>\n<p>I have added a new <code>lang_item</code> and updated <code>libcore</code>. <br>\nI now want to add a correct impl of  <code>DiscriminantKind</code> to every type. I am stuck here. I tried looking how sized bounds are handled which I still don't fully understand.</p>\n<p>What would the best way to automatically add an impl during compilation?</p>",
        "id": 192590318,
        "sender_full_name": "lcnr",
        "timestamp": 1585773802
    },
    {
        "content": "<p>uhhhh</p>",
        "id": 192590589,
        "sender_full_name": "eddyb",
        "timestamp": 1585773936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> look at how <code>fn</code> types implement<code>FnOnce</code> automatically</p>",
        "id": 192590617,
        "sender_full_name": "eddyb",
        "timestamp": 1585773954
    },
    {
        "content": "<p>I <em>believe</em> that's in the compiler</p>",
        "id": 192590634,
        "sender_full_name": "eddyb",
        "timestamp": 1585773961
    },
    {
        "content": "<p><code>ty::FnPtr</code> in <code>select.rs</code> and <code>project.rs</code> I guess</p>",
        "id": 192590694,
        "sender_full_name": "eddyb",
        "timestamp": 1585773976
    },
    {
        "content": "<p>/me will look into it. Thanks</p>",
        "id": 192590714,
        "sender_full_name": "lcnr",
        "timestamp": 1585773991
    },
    {
        "content": "<p><code>project.rs</code> will likely mention a <code>Vtable::</code> variant that <code>select.rs</code> creates, if I had to guess</p>",
        "id": 192590775,
        "sender_full_name": "eddyb",
        "timestamp": 1585774018
    },
    {
        "content": "<p>(<code>Vtable</code> is a really misleading name for  \"user or built-in impl\")</p>",
        "id": 192590798,
        "sender_full_name": "eddyb",
        "timestamp": 1585774029
    },
    {
        "content": "<p>Will be harder as expected as there is no other builtin impl with associated types. Will look into this further tomorrow</p>",
        "id": 192597656,
        "sender_full_name": "lcnr",
        "timestamp": 1585778024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> this would suggest there is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1289-L1293\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1289-L1293\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1289-L1293</a></p>",
        "id": 192597905,
        "sender_full_name": "eddyb",
        "timestamp": 1585778198
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1354-L1358\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1354-L1358\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1354-L1358</a></p>",
        "id": 192597934,
        "sender_full_name": "eddyb",
        "timestamp": 1585778219
    },
    {
        "content": "<p>this is for the associated type <code>\"Output\"</code></p>",
        "id": 192597944,
        "sender_full_name": "eddyb",
        "timestamp": 1585778227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> btw we still have <code>ty::ProjectionTy::from_ref_and_name</code> which finds associated types by name, instead of making them lang items (or just taking the first associated type inside the trait)</p>",
        "id": 192597993,
        "sender_full_name": "eddyb",
        "timestamp": 1585778272
    },
    {
        "content": "<p>Ah yeah. That slipped my mind. I'll open an issue so I don't forget</p>",
        "id": 192605134,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1585783543
    },
    {
        "content": "<p>It finally compiles <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span> fk yes</p>",
        "id": 192721722,
        "sender_full_name": "lcnr",
        "timestamp": 1585859342
    },
    {
        "content": "<p>I am once again stuck. I now correctly generate an impl on the fly in case the type is specific enough.<br>\nMy behavior for unresolved types is still wrong though. When using e.g. <code>&lt;T as DiscriminantKind&gt;::Discriminant</code><br>\nI don't know the type of <code>Discriminant</code> yet.</p>\n<p>I tried 2 approaches: always adding a candidate during selection and returning the projection <code>&lt;T as DiscriminantKind&gt;::Discriminant</code> in <code>project.rs</code> if the assoc type is not yet known. This cases a cycle.</p>\n<p>check during selections if the type can already be known and only add a candidate in this case, this is similar to what is done for <code>Sized</code>.<br>\nWhich cases the error</p>\n<div class=\"codehilite\"><pre><span></span>error[E0277]: the trait bound `T: marker::DiscriminantKind` is not satisfied\n   --&gt; src/libcore/mem/mod.rs:935:28\n    |\n935 | pub struct Discriminant&lt;T&gt;(&lt;T as DiscriminantKind&gt;::Discriminant);\n    |\n</pre></div>\n\n\n<p>How can I express that a trait is implemented for <code>T</code> without actually caring about any specific impl</p>",
        "id": 192783370,
        "sender_full_name": "lcnr",
        "timestamp": 1585909028
    },
    {
        "content": "<p>fascinating conondrum</p>",
        "id": 192783828,
        "sender_full_name": "eddyb",
        "timestamp": 1585909296
    },
    {
        "content": "<p>you might need to rely on specialization</p>",
        "id": 192783845,
        "sender_full_name": "eddyb",
        "timestamp": 1585909309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DiscriminantKind</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Discriminant</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192783914,
        "sender_full_name": "eddyb",
        "timestamp": 1585909335
    },
    {
        "content": "<p>and only use the builtin one for <code>enum</code>s and generators</p>",
        "id": 192784013,
        "sender_full_name": "eddyb",
        "timestamp": 1585909419
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not sure using specialization like this is the best thing to do</p>",
        "id": 192784094,
        "sender_full_name": "eddyb",
        "timestamp": 1585909453
    },
    {
        "content": "<p>Big brain move to both use specialization and still forbid impls of the new lang item. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">DiscriminantKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Discriminant</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DiscriminantKind</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">default</span> <span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Discriminant</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">ActualDiscriminantKind</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">DiscriminantKind</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Discriminant</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">ActualDiscriminant</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[lang = </span><span class=\"s\">&quot;actual_discriminant_kind&quot;</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ActualDiscriminantKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">ActualDiscriminant</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192950920,
        "sender_full_name": "lcnr",
        "timestamp": 1586079724
    },
    {
        "content": "<p>but you don't need to expose the trait at all</p>",
        "id": 192951314,
        "sender_full_name": "eddyb",
        "timestamp": 1586080415
    },
    {
        "content": "<p>it can be both a lang item and fully private</p>",
        "id": 192951318,
        "sender_full_name": "eddyb",
        "timestamp": 1586080425
    },
    {
        "content": "<p>(this is how <code>Freeze</code> works IIRC)</p>",
        "id": 192951319,
        "sender_full_name": "eddyb",
        "timestamp": 1586080432
    },
    {
        "content": "<p>I wonder if using specialization default + builtin implementation will break</p>",
        "id": 192951371,
        "sender_full_name": "eddyb",
        "timestamp": 1586080481
    },
    {
        "content": "<p>because the builtin thing is not in the specialization graph :P</p>",
        "id": 192951374,
        "sender_full_name": "eddyb",
        "timestamp": 1586080493
    },
    {
        "content": "<p>probably not, the compiler will just handle it separately</p>",
        "id": 192951382,
        "sender_full_name": "eddyb",
        "timestamp": 1586080510
    },
    {
        "content": "<blockquote>\n<p>probably not, the compiler will just handle it separately</p>\n</blockquote>\n<p>I hope so <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <br>\nI guess it should work. As this is the same as specializing over <code>Sized</code></p>",
        "id": 192951397,
        "sender_full_name": "lcnr",
        "timestamp": 1586080552
    },
    {
        "content": "<p>the specialization graph is for moving towards the trait (in the \"less specialized\" direction), not the other way around, so I think we're fine</p>",
        "id": 192951398,
        "sender_full_name": "eddyb",
        "timestamp": 1586080552
    },
    {
        "content": "<p>anyway there's a reason I want <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to review your PR :P</p>",
        "id": 192951442,
        "sender_full_name": "eddyb",
        "timestamp": 1586080572
    },
    {
        "content": "<p>Do we have const trait methods on nightly yet?</p>\n<p>I shot myself in the knee by making mem::discriminant unstabily const... Or I just remove the const attribute for now <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 192955377,
        "sender_full_name": "lcnr",
        "timestamp": 1586087091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> why? the intrinsic should still be const</p>",
        "id": 192955465,
        "sender_full_name": "eddyb",
        "timestamp": 1586087196
    },
    {
        "content": "<p>always use the intrinsic, the trait is there just to get the right type for the intrinsic</p>",
        "id": 192955472,
        "sender_full_name": "eddyb",
        "timestamp": 1586087223
    },
    {
        "content": "<p>I use the setup from above.</p>\n<p>While the compiler knows that <code>DiscriminantKind</code> is implemented for all <code>T</code>. It does not know this for <code>ActualDiscriminantType</code>.<br>\nAs I have to check that <code>intrinsics::discriminant_value</code> has the correct signature, the used trait must be a lang item.<br>\nI don't want to add 2 new lang items though. To solve this I restricted the intrinsic to <code>ActualDiscriminantType</code> and added a <code>discriminant_value</code> method to <code>DiscriminantKind</code> which calls <code>intrinsics::discriminant_value</code> in the specialized impl and is irrelevant otherwise.</p>",
        "id": 192955643,
        "sender_full_name": "lcnr",
        "timestamp": 1586087480
    },
    {
        "content": "<p>you should only use one trait</p>",
        "id": 192955652,
        "sender_full_name": "eddyb",
        "timestamp": 1586087507
    },
    {
        "content": "<p>the two-trait system is funny but it should <em>really</em> not be needed</p>",
        "id": 192955710,
        "sender_full_name": "eddyb",
        "timestamp": 1586087537
    },
    {
        "content": "<p>the intrinsic can already handle all the situations anyway</p>",
        "id": 192955715,
        "sender_full_name": "eddyb",
        "timestamp": 1586087544
    },
    {
        "content": "<p>it's just the trait that you need to make work</p>",
        "id": 192955722,
        "sender_full_name": "eddyb",
        "timestamp": 1586087556
    },
    {
        "content": "<p>and like I said, you can have it be a lang item and completely private</p>",
        "id": 192955725,
        "sender_full_name": "eddyb",
        "timestamp": 1586087570
    },
    {
        "content": "<p>you can even import the intrinsic in a module other than <code>core::intrinsics</code></p>",
        "id": 192955735,
        "sender_full_name": "eddyb",
        "timestamp": 1586087589
    },
    {
        "content": "<p>you can even import the intrinsic inside <code>mem::discriminant</code> :P (and this is what some other parts of <code>libcore</code> do)</p>",
        "id": 192955743,
        "sender_full_name": "eddyb",
        "timestamp": 1586087606
    },
    {
        "content": "<blockquote>\n<p>the two-trait system is funny but it should really not be needed</p>\n</blockquote>\n<p>But this is such a ****ing beauty. I will never again have the chance to make a mess like this <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> </p>\n<p>By only having 1 trait I can't check that there aren't any unsound impls. Which is unfortunate, but probably ok as long as <code>DiscriminantKind</code> is private. Will use a one-trait approach for now <span aria-label=\"unicorn\" class=\"emoji emoji-1f984\" role=\"img\" title=\"unicorn\">:unicorn:</span></p>",
        "id": 192955900,
        "sender_full_name": "lcnr",
        "timestamp": 1586087835
    },
    {
        "content": "<p>they don't have to be unsound, just assert in <code>rustc_codegen_llvm</code> or wherever <code>discriminant_value</code> is implemented, that the type matches</p>",
        "id": 192958005,
        "sender_full_name": "eddyb",
        "timestamp": 1586091033
    },
    {
        "content": "<p>then not even libcore could add a bad impl</p>",
        "id": 192958010,
        "sender_full_name": "eddyb",
        "timestamp": 1586091049
    },
    {
        "content": "<p>eyyy, everything but codegen works now afaict <span aria-label=\"muscle\" class=\"emoji emoji-1f4aa\" role=\"img\" title=\"muscle\">:muscle:</span></p>",
        "id": 192964953,
        "sender_full_name": "lcnr",
        "timestamp": 1586101312
    },
    {
        "content": "<p>is there a way to only check stage 2 using stage 1?</p>",
        "id": 192968488,
        "sender_full_name": "lcnr",
        "timestamp": 1586106793
    },
    {
        "content": "<p>you mean <code>./x.py check</code> but using the compiler you built?</p>",
        "id": 192969396,
        "sender_full_name": "eddyb",
        "timestamp": 1586108184
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 192969397,
        "sender_full_name": "eddyb",
        "timestamp": 1586108191
    },
    {
        "content": "<p>Not easily, check is hard coded for stage 0</p>",
        "id": 192969498,
        "sender_full_name": "simulacrum",
        "timestamp": 1586108312
    },
    {
        "content": "<p>seems like I just have to get the change right on the first try then <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 192971946,
        "sender_full_name": "lcnr",
        "timestamp": 1586112001
    },
    {
        "content": "<p>meh</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0599</span><span class=\"p\">]</span>: <span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unwrap</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">convert</span>::<span class=\"n\">TryFrom</span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">codec</span>::<span class=\"n\">EncodableWithShorthand</span><span class=\"o\">&gt;</span>::<span class=\"n\">Variant</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">DiscriminantKind</span><span class=\"o\">&gt;</span>::<span class=\"n\">Discriminant</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc_middle</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">codec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">82</span>:<span class=\"mi\">43</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">82</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kt\">usize</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">discriminant</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">SHORTHAND_OFFSET</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                           </span><span class=\"o\">^^^^^^</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">std</span>::<span class=\"n\">result</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">convert</span>::<span class=\"n\">TryFrom</span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">codec</span>::<span class=\"n\">EncodableWithShorthand</span><span class=\"o\">&gt;</span>::<span class=\"n\">Variant</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">DiscriminantKind</span><span class=\"o\">&gt;</span>::<span class=\"n\">Discriminant</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unwrap</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">exists</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>:\n           <span class=\"err\">`</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">convert</span>::<span class=\"n\">TryFrom</span><span class=\"o\">&lt;&lt;&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">codec</span>::<span class=\"n\">EncodableWithShorthand</span><span class=\"o\">&gt;</span>::<span class=\"n\">Variant</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">DiscriminantKind</span><span class=\"o\">&gt;</span>::<span class=\"n\">Discriminant</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Error</span>: <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Debug</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192972570,
        "sender_full_name": "lcnr",
        "timestamp": 1586112873
    },
    {
        "content": "<p>haha</p>",
        "id": 192974568,
        "sender_full_name": "eddyb",
        "timestamp": 1586115738
    },
    {
        "content": "<p>that method was abusing <code>discriminant_value</code></p>",
        "id": 192974572,
        "sender_full_name": "eddyb",
        "timestamp": 1586115757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> you should add a bound to that function, e.g. <code>T: Discriminant&lt;DiscriminantKind = isize&gt;</code> (if the trait is public), or just define a local copy of the intrinsic that just returns <code>isize</code></p>",
        "id": 192974600,
        "sender_full_name": "eddyb",
        "timestamp": 1586115803
    },
    {
        "content": "<p>(since that's the default discriminant type)</p>",
        "id": 192974609,
        "sender_full_name": "eddyb",
        "timestamp": 1586115812
    },
    {
        "content": "<p>I fixed this without restricting <code>DiscriminantKind</code> for now. <a href=\"https://github.com/rust-lang/rust/pull/70705/files#diff-8fbc542a08b9274446b2fbf02bd610b2R80-R87\" title=\"https://github.com/rust-lang/rust/pull/70705/files#diff-8fbc542a08b9274446b2fbf02bd610b2R80-R87\">https://github.com/rust-lang/rust/pull/70705/files#diff-8fbc542a08b9274446b2fbf02bd610b2R80-R87</a></p>\n<p>I am currently considering if changing the discriminant to <code>i8</code>/<code>u8</code> where possible is worth the effort. Don't know if there is any case were the size of <code>mem::Discriminant</code> actually matters though <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 192974761,
        "sender_full_name": "lcnr",
        "timestamp": 1586116062
    },
    {
        "content": "<p>no, please leave enums unnanotated</p>",
        "id": 192974860,
        "sender_full_name": "eddyb",
        "timestamp": 1586116180
    },
    {
        "content": "<p><code>#[repr(u8)]</code> <em>disables all layout optimizations</em></p>",
        "id": 192974914,
        "sender_full_name": "eddyb",
        "timestamp": 1586116204
    },
    {
        "content": "<p>and the actual tag in memory is byte-sized for most <code>enum</code>s anyway</p>",
        "id": 192974920,
        "sender_full_name": "eddyb",
        "timestamp": 1586116227
    },
    {
        "content": "<blockquote>\n<p>#[repr(u8)] disables all layout optimizations</p>\n</blockquote>\n<p>no no no</p>\n<p>I mean inside of the compiler. I don't want to tag all enums. I want to change <code>DiscriminantKind::Discriminant</code> for <code>enum Meh { A, B }</code> to <code>u8</code> automatically</p>",
        "id": 192974955,
        "sender_full_name": "lcnr",
        "timestamp": 1586116307
    },
    {
        "content": "<p>I left a comment</p>",
        "id": 192974960,
        "sender_full_name": "eddyb",
        "timestamp": 1586116316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> ah that's unworkable</p>",
        "id": 192974998,
        "sender_full_name": "eddyb",
        "timestamp": 1586116324
    },
    {
        "content": "<p>?</p>",
        "id": 192975015,
        "sender_full_name": "lcnr",
        "timestamp": 1586116358
    },
    {
        "content": "<p>the discriminant type <em>needs to be</em> the same as specified on the <code>enum</code> (or the default, <code>isize</code>)</p>",
        "id": 192975022,
        "sender_full_name": "eddyb",
        "timestamp": 1586116368
    },
    {
        "content": "<p>otherwise, some things may stop working as expected</p>",
        "id": 192975026,
        "sender_full_name": "eddyb",
        "timestamp": 1586116379
    },
    {
        "content": "<p>that's the type that explicit discriminant values are type-checked against</p>",
        "id": 192975042,
        "sender_full_name": "eddyb",
        "timestamp": 1586116410
    },
    {
        "content": "<p>it's not the same as the tag the compiler might <em>encode</em> that discriminant as</p>",
        "id": 192975050,
        "sender_full_name": "eddyb",
        "timestamp": 1586116423
    },
    {
        "content": "<p>Still think that we could use some kind of special case for simple cases <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> <br>\nIt probably just isn't worth it</p>",
        "id": 192975385,
        "sender_full_name": "lcnr",
        "timestamp": 1586116837
    },
    {
        "content": "<p>it's better to be consistent IMO</p>",
        "id": 192976866,
        "sender_full_name": "eddyb",
        "timestamp": 1586118913
    },
    {
        "content": "<p>DiscriminantKind should never be used directly though. I am somewhat  in favor of just replacing the current usage in the compiler with a manually implemented function.</p>",
        "id": 192977016,
        "sender_full_name": "lcnr",
        "timestamp": 1586119139
    },
    {
        "content": "<p>An unobservable inconsistency is fairly irrelevant tbh <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 192977055,
        "sender_full_name": "lcnr",
        "timestamp": 1586119191
    },
    {
        "content": "<p>you mean with a separate import of the intrinsic?</p>",
        "id": 192977114,
        "sender_full_name": "eddyb",
        "timestamp": 1586119267
    },
    {
        "content": "<blockquote>\n<p>you mean with a separate import of the intrinsic?</p>\n</blockquote>\n<p>While this might actually work, imo this is even worse.</p>\n<p>My approach would be the following even if it is not 100 % dry.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">variant_id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TyKind</span>::<span class=\"n\">Bool</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">TyKind</span>::<span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"c1\">// ...</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192977283,
        "sender_full_name": "lcnr",
        "timestamp": 1586119518
    },
    {
        "content": "<p>ah no please don't do that</p>",
        "id": 192977289,
        "sender_full_name": "eddyb",
        "timestamp": 1586119534
    },
    {
        "content": "<p>the reason we use <code>discriminant_value</code> is because that's what <code>libserialize</code> encodes (or, well, it's less likely to get out of sync)</p>",
        "id": 192977296,
        "sender_full_name": "eddyb",
        "timestamp": 1586119552
    },
    {
        "content": "<p>I guess we could abuse serialization and get it that way heh</p>",
        "id": 192977340,
        "sender_full_name": "eddyb",
        "timestamp": 1586119570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/automatically.20adding.20a.20trait.20impl/near/192977296\" title=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/automatically.20adding.20a.20trait.20impl/near/192977296\">said</a>:</p>\n<blockquote>\n<p>the reason we use <code>discriminant_value</code> is because that's what <code>libserialize</code> encodes (or, well, it's less likely to get out of sync)</p>\n</blockquote>\n<p>that makes the current state actually worse IMO <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 192977364,
        "sender_full_name": "lcnr",
        "timestamp": 1586119617
    },
    {
        "content": "<p>we're basically checking that we can make up variant indices that <em>would not</em> be valid discriminants of the <code>enum</code></p>",
        "id": 192977375,
        "sender_full_name": "eddyb",
        "timestamp": 1586119633
    },
    {
        "content": "<p>so please try to avoid changing it as much as possible</p>",
        "id": 192977383,
        "sender_full_name": "eddyb",
        "timestamp": 1586119651
    },
    {
        "content": "<p>any change there would require far more intensive perf-testing</p>",
        "id": 192977388,
        "sender_full_name": "eddyb",
        "timestamp": 1586119672
    },
    {
        "content": "<p>and care</p>",
        "id": 192977391,
        "sender_full_name": "eddyb",
        "timestamp": 1586119682
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192978685,
        "sender_full_name": "lcnr",
        "timestamp": 1586121453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  do you have an opinion on <a href=\"https://github.com/rust-lang/rust/pull/70705#discussion_r403752647\" title=\"https://github.com/rust-lang/rust/pull/70705#discussion_r403752647\">https://github.com/rust-lang/rust/pull/70705#discussion_r403752647</a> ?</p>",
        "id": 193722404,
        "sender_full_name": "lcnr",
        "timestamp": 1586713359
    },
    {
        "content": "<p>The PR still slightly improves perf afaict, even while using <code>TryFrom</code> there. (mostly because <code>Eq</code> for enums now uses <code>i32</code>instead of <code>u64</code>)</p>",
        "id": 193722561,
        "sender_full_name": "lcnr",
        "timestamp": 1586713620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> why do you say <code>i32</code>?</p>",
        "id": 193724221,
        "sender_full_name": "eddyb",
        "timestamp": 1586716158
    },
    {
        "content": "<p><code>enum</code> discriminants default to <code>isize</code> by default which is <code>i64</code> on the x64 linux that perf runs on</p>",
        "id": 193724231,
        "sender_full_name": "eddyb",
        "timestamp": 1586716181
    },
    {
        "content": "<p>the only thing that uses <code>i32</code> by default is generators and maybe <code>#[repr(C)]</code> <code>enum</code>s?</p>",
        "id": 193724241,
        "sender_full_name": "eddyb",
        "timestamp": 1586716201
    },
    {
        "content": "<p>jup, was wrong. Then I don't know why there are minimal perf improvements</p>",
        "id": 193724293,
        "sender_full_name": "lcnr",
        "timestamp": 1586716240
    },
    {
        "content": "<p>there aren't :)</p>",
        "id": 193724301,
        "sender_full_name": "eddyb",
        "timestamp": 1586716254
    },
    {
        "content": "<p>that's just noise</p>",
        "id": 193724304,
        "sender_full_name": "eddyb",
        "timestamp": 1586716257
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 193724379,
        "sender_full_name": "lcnr",
        "timestamp": 1586716348
    },
    {
        "content": "<p>I really want us to fix perf to have even less noise</p>",
        "id": 193724571,
        "sender_full_name": "eddyb",
        "timestamp": 1586716672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0277]: `&lt;&lt;&lt;T as ty::codec::EncodableWithShorthand&gt;::Variant as std::marker::DiscriminantKind&gt;::Discriminant as std::convert::TryFrom&lt;usize&gt;&gt;::Error` doesn&#39;t implement `std::fmt::Debug`\n  --&gt; src/librustc_middle/ty/codec.rs:81:56\n   |\n65 |     &lt;T::Variant as DiscriminantKind&gt;::Discriminant: Ord + TryFrom&lt;usize&gt;,\n   |                                                                          - help: consider further restricting the associated type: `, &lt;&lt;&lt;T as ty::codec::EncodableWithShorthand&gt;::Variant as std::marker::DiscriminantKind&gt;::Discriminant as std::convert::TryFrom&lt;usize&gt;&gt;::Error: std::fmt::Debug`\n</pre></div>",
        "id": 193730168,
        "sender_full_name": "lcnr",
        "timestamp": 1586725662
    },
    {
        "content": "<p>lol</p>",
        "id": 193730377,
        "sender_full_name": "eddyb",
        "timestamp": 1586725979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> replace <code>.unwrap()</code> with <code>.ok().unwrap()</code></p>",
        "id": 193730390,
        "sender_full_name": "eddyb",
        "timestamp": 1586726001
    },
    {
        "content": "<p>replaced it with <code>unwrap_or_else(|_| unreachable())</code>. Your version is better though <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 193730399,
        "sender_full_name": "lcnr",
        "timestamp": 1586726037
    },
    {
        "content": "<p>@eddyb <a href=\"https://github.com/rust-lang/rust/pull/70705#issuecomment-612884955\" title=\"https://github.com/rust-lang/rust/pull/70705#issuecomment-612884955\">https://github.com/rust-lang/rust/pull/70705#issuecomment-612884955</a> implemented some of your feedback.</p>",
        "id": 193768723,
        "sender_full_name": "lcnr",
        "timestamp": 1586782335
    },
    {
        "content": "<p>btw it doesn't ping me if you don't press TAB</p>",
        "id": 193772715,
        "sender_full_name": "eddyb",
        "timestamp": 1586785355
    },
    {
        "content": "<p>i.e. it has to look like <code>@**eddyb**</code> before you send it</p>",
        "id": 193772725,
        "sender_full_name": "eddyb",
        "timestamp": 1586785367
    },
    {
        "content": "<p>you're going to read it anyways <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 193783247,
        "sender_full_name": "lcnr",
        "timestamp": 1586791652
    },
    {
        "content": "<p>yeah it's just a difference of timing</p>",
        "id": 193784193,
        "sender_full_name": "eddyb",
        "timestamp": 1586792199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Thank you for <a href=\"https://github.com/rust-lang/rust/pull/70705#discussion_r407504945\" title=\"https://github.com/rust-lang/rust/pull/70705#discussion_r407504945\">https://github.com/rust-lang/rust/pull/70705#discussion_r407504945</a> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 193793959,
        "sender_full_name": "lcnr",
        "timestamp": 1586797514
    },
    {
        "content": "<p>omg did it work :D?</p>",
        "id": 193795337,
        "sender_full_name": "eddyb",
        "timestamp": 1586798240
    },
    {
        "content": "<p>jup</p>",
        "id": 193795577,
        "sender_full_name": "lcnr",
        "timestamp": 1586798348
    },
    {
        "content": "<p>phew, glad to not need specialization</p>",
        "id": 193795694,
        "sender_full_name": "eddyb",
        "timestamp": 1586798402
    },
    {
        "content": "<p>btw you have an accidental submodule addition</p>",
        "id": 193796051,
        "sender_full_name": "eddyb",
        "timestamp": 1586798528
    },
    {
        "content": "<p><span aria-label=\"dolphin\" class=\"emoji emoji-1f42c\" role=\"img\" title=\"dolphin\">:dolphin:</span>  do you know how to cleanly remove this? The last time I tried I just ended up nuking my local rust repo</p>",
        "id": 193796392,
        "sender_full_name": "lcnr",
        "timestamp": 1586798688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> generally I use selective addition, either via <code>git gui</code> or IDE integration (I don't use commands like <code>git add</code>), so I just never add a submodule change to a commit</p>",
        "id": 193796732,
        "sender_full_name": "eddyb",
        "timestamp": 1586798850
    },
    {
        "content": "<p>now, this is readding a whole submodule, not just committing a change to it</p>",
        "id": 193796748,
        "sender_full_name": "eddyb",
        "timestamp": 1586798862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> the first step is to find which commit it's in, and then you can take it out just like any unwanted file change</p>",
        "id": 193796777,
        "sender_full_name": "eddyb",
        "timestamp": 1586798879
    },
    {
        "content": "<p>the important thing is to use <code>git gui</code> to steal it from a commit, that's the only intuitive way I can think of</p>",
        "id": 193796855,
        "sender_full_name": "eddyb",
        "timestamp": 1586798899
    },
    {
        "content": "<p>okay so it's in this commit <a href=\"https://github.com/rust-lang/rust/pull/70705/commits/22de130b956498a9d8dae9e237d812b116044065\" title=\"https://github.com/rust-lang/rust/pull/70705/commits/22de130b956498a9d8dae9e237d812b116044065\">https://github.com/rust-lang/rust/pull/70705/commits/22de130b956498a9d8dae9e237d812b116044065</a></p>",
        "id": 193797029,
        "sender_full_name": "eddyb",
        "timestamp": 1586798999
    },
    {
        "content": "<p>It's fixed <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 193797098,
        "sender_full_name": "lcnr",
        "timestamp": 1586799012
    },
    {
        "content": "<p>did you use a rebase, or something else ?</p>",
        "id": 193797136,
        "sender_full_name": "eddyb",
        "timestamp": 1586799026
    },
    {
        "content": "<p>apparently <code>git rm path/to/file</code> just works</p>",
        "id": 193797174,
        "sender_full_name": "lcnr",
        "timestamp": 1586799043
    },
    {
        "content": "<p>and then an ordinary rebase</p>",
        "id": 193797189,
        "sender_full_name": "lcnr",
        "timestamp": 1586799052
    },
    {
        "content": "<p>well, it's not in the commit which had it, so its' fine now</p>",
        "id": 193797246,
        "sender_full_name": "eddyb",
        "timestamp": 1586799082
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 193797475,
        "sender_full_name": "lcnr",
        "timestamp": 1586799193
    },
    {
        "content": "<p>Thank you for guiding me through all of this!</p>",
        "id": 193797627,
        "sender_full_name": "lcnr",
        "timestamp": 1586799260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> so <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> left a comment, do you want to address it now, or...?</p>",
        "id": 193797818,
        "sender_full_name": "eddyb",
        "timestamp": 1586799377
    },
    {
        "content": "<p>like I want to do a try build but I just saw that comment just show up</p>",
        "id": 193797842,
        "sender_full_name": "eddyb",
        "timestamp": 1586799392
    },
    {
        "content": "<p>idk. I intentionally used <code>mem::discriminant</code> here, as I meant the method, not the type</p>",
        "id": 193797947,
        "sender_full_name": "lcnr",
        "timestamp": 1586799454
    },
    {
        "content": "<p>okay, you can leave a comment about that</p>",
        "id": 193797974,
        "sender_full_name": "eddyb",
        "timestamp": 1586799477
    },
    {
        "content": "<p>Whitespace <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\"><pre><span></span>---- [ui] ui/enum-discriminant/forbidden-discriminant-kind-impl.rs stdout ----\ndiff of stderr:\n\n1   error[E0322]: explicit impls for the `DiscriminantKind` trait are not permitted\n2     --&gt; $DIR/forbidden-discriminant-kind-impl.rs:9:1\n3      |\n-   LL | impl DiscriminantKind for NewType {\n+   LL | impl DiscriminantKind for NewType {\n5      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of &#39;DiscriminantKind&#39; not allowed\n6\n7   error: aborting due to previous error\n</pre></div>\n\n\n<p>Seems like you have to restart bors</p>",
        "id": 193799150,
        "sender_full_name": "lcnr",
        "timestamp": 1586800068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> try builds don't run tests :P</p>",
        "id": 193800246,
        "sender_full_name": "eddyb",
        "timestamp": 1586800634
    },
    {
        "content": "<p>I already rebased, does that stop the build?</p>",
        "id": 193800358,
        "sender_full_name": "lcnr",
        "timestamp": 1586800684
    },
    {
        "content": "<p>nope</p>",
        "id": 193800432,
        "sender_full_name": "eddyb",
        "timestamp": 1586800733
    },
    {
        "content": "<p>great <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 193800458,
        "sender_full_name": "lcnr",
        "timestamp": 1586800743
    },
    {
        "content": "<p>but it's a bad idea because it breaks feedback from the bot once it's done, IIRC :P</p>",
        "id": 193800476,
        "sender_full_name": "eddyb",
        "timestamp": 1586800755
    },
    {
        "content": "<p>perf and crater will still work AFAIK</p>",
        "id": 193800553,
        "sender_full_name": "eddyb",
        "timestamp": 1586800792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> note the yellow circle next to <a href=\"https://github.com/rust-lang/rust/pull/70705#ref-commit-9b5b377\" title=\"https://github.com/rust-lang/rust/pull/70705#ref-commit-9b5b377\">https://github.com/rust-lang/rust/pull/70705#ref-commit-9b5b377</a></p>",
        "id": 193800983,
        "sender_full_name": "eddyb",
        "timestamp": 1586801003
    },
    {
        "content": "<p>so bors is still going</p>",
        "id": 193801006,
        "sender_full_name": "eddyb",
        "timestamp": 1586801025
    }
]