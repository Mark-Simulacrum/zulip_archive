[
    {
        "content": "<p>in my workflow I'm using the <code>llvm-config</code> option to build Rust with a custom LLVM (near trunk): <a href=\"https://github.com/rust-lang/rust/blob/4b043faba34ccc053a4d0110634c323f6c03765e/config.toml.example#L660\">https://github.com/rust-lang/rust/blob/4b043faba34ccc053a4d0110634c323f6c03765e/config.toml.example#L660</a></p>",
        "id": 273146635,
        "sender_full_name": "Collin Baker",
        "timestamp": 1645735090
    },
    {
        "content": "<p>would there be resistance to adding an llvm-config-bootstrap option to mirror RUSTFLAGS_BOOTSTRAP? that is, to use a different build with the stage 0 toolchain than stage 1+</p>",
        "id": 273146714,
        "sender_full_name": "Collin Baker",
        "timestamp": 1645735145
    },
    {
        "content": "<p>my project builds LLVM with LTO enabled, however, since it's a proper bootstrap build, it contains bitcode targeting its own revision</p>",
        "id": 273146778,
        "sender_full_name": "Collin Baker",
        "timestamp": 1645735193
    },
    {
        "content": "<p>our final rustc would likewise be built with LTO, ideally. however, the stage 0 rustc cannot read the newer bitcode</p>",
        "id": 273146907,
        "sender_full_name": "Collin Baker",
        "timestamp": 1645735264
    },
    {
        "content": "<p>linking the stage 1 rustc with our stage 1 (non-LTO) LLVM, then linking stage 2 with the final, LTO LLVM, would be ideal. and the easiest way would be to have an llvm-config-bootstrap option</p>",
        "id": 273146996,
        "sender_full_name": "Collin Baker",
        "timestamp": 1645735317
    }
]