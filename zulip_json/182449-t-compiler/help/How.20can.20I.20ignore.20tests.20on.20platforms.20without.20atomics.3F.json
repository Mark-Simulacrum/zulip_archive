[
    {
        "content": "<p>Normally I could use <code>cfg(target_has_atomic)</code>. But there's no way to use cfg's on test annotations, so compiletest will give an error that the error is missing. Is there a way to ignore the test altogether?</p>",
        "id": 246800076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626916945
    },
    {
        "content": "<p>specifically this is the test I'm trying to fix: <a href=\"https://github.com/rust-lang/rust/pull/84039#issuecomment-884348388\">https://github.com/rust-lang/rust/pull/84039#issuecomment-884348388</a></p>",
        "id": 246800093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626917023
    },
    {
        "content": "<p>looks like it's not supported in <a href=\"https://github.com/rust-lang/rust/blob/master/src/tools/compiletest/src/header.rs\">https://github.com/rust-lang/rust/blob/master/src/tools/compiletest/src/header.rs</a></p>",
        "id": 246800198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626917161
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// only-x86_64</span>\n<span class=\"c1\">// only-aarch64</span>\n</code></pre></div>\n<p>is probably a close enough hack; it should at least test all tier 1 platforms</p>",
        "id": 246800325,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626917394
    },
    {
        "content": "<p>/me wonders how hard it would be to actually apply cfg annotations to tests...</p>",
        "id": 246801449,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626918987
    },
    {
        "content": "<p>pretty hard I think, compiletest would have to either parse rust (ugh) or somehow know what <code>cfg</code> knobs rustc sets</p>",
        "id": 246801465,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626919043
    },
    {
        "content": "<p>I guess it could run <code>rustc --print cfg</code> and expose that in headers somehow</p>",
        "id": 246801469,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626919058
    },
    {
        "content": "<p>We don't have to actually parse Rust. We could pull out all the <code>cfg</code> directives and generate tiny stubs like <code>fn test_1234() { #[cfg(...)] { println!(\"...\"); } }</code> or equivalent, run the resulting program, and use all the tokens in the output to determine if the matching config exprs are true or false.</p>",
        "id": 246801608,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626919207
    },
    {
        "content": "<p>Massive hack, but it should work and not be too slow.</p>",
        "id": 246801615,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626919215
    },
    {
        "content": "<p>that sounds a lot more work than <code>--print cfg</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246801633,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626919224
    },
    {
        "content": "<p>True enough.</p>",
        "id": 246801643,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626919232
    },
    {
        "content": "<p>We could make something work using <code>--print cfg</code>, we'd just lose the ability to do more complex boolean combinations.</p>",
        "id": 246801660,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626919250
    },
    {
        "content": "<p>also that sounds vaguely like <code>configure</code> and I hate configure with a burning passion <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 246801662,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626919254
    },
    {
        "content": "<p>I don't think it's like <code>configure</code>.</p>",
        "id": 246801676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626919271
    },
    {
        "content": "<p>If we see <code>cfg(arbitrary expression here)</code>, we emit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(arbitrary expression here)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"cfg(arbitrary expression here)\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then we parse all the output into a HashSet and match against it, considering anything we see true and anything else as false.</p>",
        "id": 246801756,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626919354
    },
    {
        "content": "<p>/me is not volunteering :P</p>",
        "id": 246801768,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626919365
    },
    {
        "content": "<p>Fair. :)</p>",
        "id": 246801771,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626919369
    },
    {
        "content": "<p>I don't think we actually have a need for complex boolean expressions probably? It seems like we could get away with just rustc --print cfg realistically.</p>",
        "id": 246836693,
        "sender_full_name": "simulacrum",
        "timestamp": 1626954997
    },
    {
        "content": "<p>Idea that gives us full boolean expression support: add a <code>-Z</code> option that makes rustc evaluate an arbitrary config expression and say whether it thinks it's true or false. rustc already knows how to do that, so it's just a matter of exposing the functionality.</p>",
        "id": 246915064,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626994553
    },
    {
        "content": "<p>I imagine it might be useful to someone else too.</p>",
        "id": 246915114,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626994576
    },
    {
        "content": "<p>I have no idea how doable this is though.</p>",
        "id": 246915170,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626994633
    },
    {
        "content": "<p>I don't know how _useful_ it is either</p>",
        "id": 246915244,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626994687
    },
    {
        "content": "<p>when would you need that flexibility?</p>",
        "id": 246915255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626994693
    },
    {
        "content": "<p>I would have been happy with  <code>cfg_has_atomic</code> alone, I don't even need everything from <code>--print cfg</code> let alone arbitrary expressions</p>",
        "id": 246915269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626994715
    },
    {
        "content": "<p>Okay, fair.</p>",
        "id": 246915278,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626994725
    },
    {
        "content": "<p><code>cfg_has_atomic</code> should be pretty doable. If we want to add support for dealing with cfg parameters that depend on command line options other than the target, that gets... interesting.</p>",
        "id": 246915350,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626994799
    },
    {
        "content": "<p>Do you want to be able to check the value of has atomic, or just if it exists?</p>",
        "id": 246915683,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626994963
    },
    {
        "content": "<p>just if it exists</p>",
        "id": 246915708,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626994992
    },
    {
        "content": "<p>ugh I guess there are different has_atomic cfgs and I need to pick one</p>",
        "id": 246915724,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626995010
    },
    {
        "content": "<p>I'll have a go at implement this, though there's at least a 50% chance I'll give up in despair. :)</p>",
        "id": 246916952,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626996088
    },
    {
        "content": "<p>Not the whole rustc thing, just the <code>--print</code> version.</p>",
        "id": 246916964,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1626996108
    },
    {
        "content": "<p>the place to look is <code>src/tools/compiletest/header.rs</code></p>",
        "id": 246916970,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626996122
    },
    {
        "content": "<p>I did it! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 246950455,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627027451
    },
    {
        "content": "<p>It took a bit, but the implementation was simpler than I thought it would be.</p>",
        "id": 246950480,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627027471
    },
    {
        "content": "<p>The  PR is <a href=\"https://github.com/rust-lang/rust/issues/87396\">#87396</a>.</p>",
        "id": 246950516,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627027508
    },
    {
        "content": "<p>Huh.</p>",
        "id": 246951950,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627028636
    },
    {
        "content": "<p>Test failure.</p>",
        "id": 246951960,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627028642
    },
    {
        "content": "<p>Why would that be...?</p>",
        "id": 246952003,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627028650
    },
    {
        "content": "<p>Ahh. Figured it out.</p>",
        "id": 246952376,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1627028929
    }
]