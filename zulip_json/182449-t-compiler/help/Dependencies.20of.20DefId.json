[
    {
        "content": "<p>It's me again :P is there anyway to get the dependencies of a <code>DefId</code> across crates / compilation sessions? By that I mean the set of DefIds mentioned in the body / definition. </p>\n<p>It seems like this could be answered by the <code>DepGraph</code> but I'm not certain...</p>",
        "id": 250940862,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630074999
    },
    {
        "content": "<p>Otherwise I supposed I can store the <code>DefPathHash</code>es of definitions during compilation and use that to look up definitions across session boundaries</p>",
        "id": 250941403,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630075213
    },
    {
        "content": "<p>If this isn't done yet, I think it may be worth doing in some form; I think something like this is likely going to be needed to make the dead code pass per-module rather than per-crate.</p>",
        "id": 250942055,
        "sender_full_name": "Anton Golov [they/them]",
        "timestamp": 1630075498
    },
    {
        "content": "<p>I can't find any easy query to get a reachable set for a DefId, let alone across crates</p>",
        "id": 250942992,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630075833
    },
    {
        "content": "<p>I also can't figure out if external crates keep their dependencies in the current dep graph</p>",
        "id": 250943061,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630075858
    },
    {
        "content": "<p>The dep graph is per compilation session and not created at all when incremental mode is not enabled.</p>",
        "id": 250945066,
        "sender_full_name": "bjorn3",
        "timestamp": 1630076594
    },
    {
        "content": "<p>yeah but doesn't it load the previous session's graph and use stable fingerprints?</p>",
        "id": 250945301,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630076686
    },
    {
        "content": "<p>are queries not cached at all without incremental mode?</p>",
        "id": 250945402,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630076741
    },
    {
        "content": "<p>Queries are not cached only during the current compilation session when incremental mode is disabled.</p>",
        "id": 250950763,
        "sender_full_name": "bjorn3",
        "timestamp": 1630078986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Dependencies.20of.20DefId/near/250940862\">said</a>:</p>\n<blockquote>\n<p>It's me again :P is there anyway to get the dependencies of a <code>DefId</code> across crates / compilation sessions? By that I mean the set of DefIds mentioned in the body / definition. </p>\n</blockquote>\n<p>What do you want to do? What do you mean exactly by \"dependencies\"? Mentions in HIR? MIR calls?</p>",
        "id": 250952839,
        "sender_full_name": "cjgillot",
        "timestamp": 1630079932
    },
    {
        "content": "<p>Either could work for me I believe</p>",
        "id": 250954041,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630080408
    },
    {
        "content": "<p>For MIR calls you could take a look at the collector: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/monomorphize/collector.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/monomorphize/collector.rs</a> Depending on what you need it for you may need to customize the used crate roots and maybe remove the special cases for <code>#[inline]</code>..</p>",
        "id": 250954297,
        "sender_full_name": "bjorn3",
        "timestamp": 1630080519
    },
    {
        "content": "<p>That can go across crates?</p>",
        "id": 250954414,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630080585
    },
    {
        "content": "<p>If you use <code>-Zalways-encode-mir</code> and remove the code that prevents it from going across crates, yes.</p>",
        "id": 250954509,
        "sender_full_name": "bjorn3",
        "timestamp": 1630080615
    },
    {
        "content": "<p>Ah yea, sadly I can’t use always-encode-mir for other reasons</p>",
        "id": 250954555,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630080643
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/4a6547cca6d2b2f465f01331927855734687b527/compiler/rustc_mir/src/monomorphize/collector.rs#L939-L978\">https://github.com/rust-lang/rust/blob/4a6547cca6d2b2f465f01331927855734687b527/compiler/rustc_mir/src/monomorphize/collector.rs#L939-L978</a></p>",
        "id": 250954593,
        "sender_full_name": "bjorn3",
        "timestamp": 1630080663
    },
    {
        "content": "<p>I guess I’ll just go for my approach of storing defpathhash es</p>",
        "id": 250954610,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630080670
    },
    {
        "content": "<p>So as I compile crates I can create a map of dependencies for each DefId</p>",
        "id": 250955080,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630080868
    },
    {
        "content": "<p>Looking at the documentation those should be stable</p>",
        "id": 250955081,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630080868
    },
    {
        "content": "<p>The <code>DefPathHash</code> is stable. The <code>DefId</code> is not.</p>",
        "id": 250955268,
        "sender_full_name": "bjorn3",
        "timestamp": 1630080953
    },
    {
        "content": "<p>A <code>DefId</code> is and id that corresponds to a specific <code>DefPathHash</code> within the current compilation session. The <code>DefId</code> changes between compilation sessions.</p>",
        "id": 250955478,
        "sender_full_name": "bjorn3",
        "timestamp": 1630081024
    },
    {
        "content": "<p>Yea but I can turn a defpathhash into a DefId within a session, right?</p>",
        "id": 250955676,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630081093
    },
    {
        "content": "<p>Through the cratestore interface</p>",
        "id": 250955731,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1630081113
    },
    {
        "content": "<p>Yes, for as long as the <code>DefPathHash</code> actually exists in the current crate or a (direct or indirect) dependency of the current crate.</p>",
        "id": 250956648,
        "sender_full_name": "bjorn3",
        "timestamp": 1630081492
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_metadata/creader/struct.CStore.html#method.def_path_hash_to_def_id\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_metadata/creader/struct.CStore.html#method.def_path_hash_to_def_id</a></p>",
        "id": 250956857,
        "sender_full_name": "bjorn3",
        "timestamp": 1630081579
    }
]