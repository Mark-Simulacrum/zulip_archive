[
    {
        "content": "<p>I'm trying to improve the diagnostic for illformed <code>macro_rules! ident</code>.</p>\n<p>However when using <code>-Ztreat-err-as-bug</code>,  the backtrace seemingly doesnt include the parser code. </p>\n<p><code>RUST_BACKTRACE=1 rustc +stage1 foo.rs -Ztreat-err-as-bug</code></p>\n<div class=\"codehilite\"><pre><span></span><code>error: expected one of `(`, `[`, or `{`, found `!`\n --&gt; foo.rs:1:17\n  |\n1 | macro_rules! foo! {}\n  |                 ^ expected one of `(`, `[`, or `{`\n\nthread &#39;rustc&#39; panicked at &#39;aborting due to `-Z treat-err-as-bug=1`&#39;, compiler/rustc_errors/src/lib.rs:1181:27\nstack backtrace:\n   0: rust_begin_unwind\n             at /home/nixon/upstreams/rust/rust/library/std/src/panicking.rs:517:5\n   1: core::panicking::panic_fmt\n             at /home/nixon/upstreams/rust/rust/library/core/src/panicking.rs:100:14\n   2: rustc_errors::HandlerInner::panic_if_treat_err_as_bug\n   3: rustc_errors::HandlerInner::bump_err_count\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_errors/src/lib.rs:1171:9\n   4: rustc_errors::HandlerInner::emit_diagnostic\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_errors/src/lib.rs:981:13\n   5: rustc_errors::Handler::emit_diagnostic\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_errors/src/lib.rs:894:9\n   6: rustc_errors::diagnostic_builder::DiagnosticBuilder::emit\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_errors/src/diagnostic_builder.rs:103:9\n   7: rustc_interface::queries::Queries::parse::{{closure}}::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/queries.rs:126:17\n   8: core::result::Result&lt;T,E&gt;::map_err\n             at /home/nixon/upstreams/rust/rust/library/core/src/result.rs:853:27\n   9: rustc_interface::queries::Queries::parse::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/queries.rs:125:13\n  10: rustc_interface::queries::Query&lt;T&gt;::compute\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/queries.rs:38:28\n  11: rustc_driver::run_compiler::{{closure}}::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_driver/src/lib.rs:314:13\n  12: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/queries.rs:390:19\n  13: rustc_driver::run_compiler::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_driver/src/lib.rs:312:22\n  14: rustc_interface::interface::create_compiler_and_run::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/interface.rs:209:13\n  15: rustc_span::with_source_map\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_span/src/lib.rs:976:5\n  16: rustc_interface::interface::create_compiler_and_run\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/interface.rs:203:5\n  17: rustc_interface::interface::run_compiler::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/interface.rs:225:12\n  18: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/util.rs:158:13\n  19: scoped_tls::ScopedKey&lt;T&gt;::set\n             at /home/nixon/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs:137:9\n  20: rustc_span::create_session_globals_then\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_span/src/lib.rs:109:5\n  21: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/util.rs:156:9\n  22: rustc_interface::util::scoped_thread::{{closure}}\n             at /home/nixon/upstreams/rust/rust/compiler/rustc_interface/src/util.rs:131:24\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.57.0-dev running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z treat-err-as-bug\n\nquery stack during panic:\nend of query stack\n</code></pre></div>\n<p>Is their a way to figure out where I need to go from this? Or am I missing something?</p>",
        "id": 254562417,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1632413816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268539\">@Nixon Enraght-Moony</span> is the closure in rustc_interface/queries.rs the one you're looking for? This looks like some function is returning a result before the diagnostic is emitted</p>",
        "id": 254571539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632417515
    },
    {
        "content": "<p>(line 126, 7th frame)</p>",
        "id": 254571601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632417544
    },
    {
        "content": "<p>So the backtrace only shows where the error is emited, which is not where the error was constructed in this case, right?</p>",
        "id": 254571891,
        "sender_full_name": "Nixon Enraght-Moony",
        "timestamp": 1632417662
    },
    {
        "content": "<p>Correct, this is a panic backtrace, not an error backtrace</p>",
        "id": 254572317,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1632417825
    },
    {
        "content": "<blockquote>\n<p>I'm trying to improve the diagnostic for illformed macro_rules! ident.</p>\n<p>However when using -Ztreat-err-as-bug, the backtrace seemingly doesnt include the parser code. </p>\n</blockquote>\n<p>I'd recommend just searching for <code>MacroDef</code> in <code>compiler/rustc_parse</code>; that should bring up all the places where <code>macro_rules!</code> items are created, and then you can find where they're parsed.</p>",
        "id": 254574051,
        "sender_full_name": "Noah Lev",
        "timestamp": 1632418557
    }
]