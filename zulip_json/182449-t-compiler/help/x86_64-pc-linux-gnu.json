[
    {
        "content": "<p>Can I somehow build rustc with <code>x86_64-pc-linux-gnu</code> (identical to <code>x86_64-unknown-linux-gnu</code>) as host and default target? And could that break anything? This is Arch Linux's default target (shared by GCC, LLVM and Clang). Right now I have to hack e.g. the Firefox build to use <code>clang++ --target=x86_64-unknown-linux-gnu</code> to avoid some ugly warnings during cross-language LTO.</p>",
        "id": 228279367,
        "sender_full_name": "heftig",
        "timestamp": 1614622477
    },
    {
        "content": "<p>You may have success by using a custom target json maybe? Not really otherwise.</p>",
        "id": 228293656,
        "sender_full_name": "nagisa",
        "timestamp": 1614627790
    },
    {
        "content": "<p>Ultimately all you really need is to have the right target string passed in to LLVM</p>",
        "id": 228293701,
        "sender_full_name": "nagisa",
        "timestamp": 1614627811
    },
    {
        "content": "<p>Sounds like we could potentially add a CLI flag for this to rustc, but then you'd have to hack a build system to pass in <code>-Cllvm-target=</code> or similar to rustc instead.</p>",
        "id": 228294486,
        "sender_full_name": "nagisa",
        "timestamp": 1614628113
    },
    {
        "content": "<p>Alternatively it would probably make most sense for Arch to patch rustc they build to introduce a copy of the <code>x86_64-unknown-linux-gnu</code> target named the way their conventions want it named.</p>",
        "id": 228294625,
        "sender_full_name": "nagisa",
        "timestamp": 1614628171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/x86_64-pc-linux-gnu/near/228294625\">said</a>:</p>\n<blockquote>\n<p>Alternatively it would probably make most sense for Arch to patch rustc they build to introduce a copy of the <code>x86_64-unknown-linux-gnu</code> target named the way their conventions want it named.</p>\n</blockquote>\n<p>This is what I'm considering (I maintain the <code>rust</code> package). Would this be a small patch?</p>",
        "id": 228687027,
        "sender_full_name": "heftig",
        "timestamp": 1614813679
    },
    {
        "content": "<p>Yeah, a copy of <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs</a> (with the relevant adjustments) and a line here: <a href=\"https://github.com/rust-lang/rust/blob/476acbf1e9965b5e95c90f0d7d658709812b7003/compiler/rustc_target/src/spec/mod.rs#L623\">https://github.com/rust-lang/rust/blob/476acbf1e9965b5e95c90f0d7d658709812b7003/compiler/rustc_target/src/spec/mod.rs#L623</a></p>",
        "id": 228690185,
        "sender_full_name": "nagisa",
        "timestamp": 1614815356
    },
    {
        "content": "<p>I'll try that. Thank you!</p>",
        "id": 230055799,
        "sender_full_name": "heftig",
        "timestamp": 1615565509
    },
    {
        "content": "<p>Rather than introducing a copy named that, you might want to consider introducing an alias instead, so that when Rust is asked for <code>x86_64-pc-linux-gnu</code> it translates that to <code>x86_64-unknown-linux-gnu</code>. Some things may break in the ecosystem if you change <code>unknown</code> to <code>pc</code>.</p>",
        "id": 230074270,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615572806
    },
    {
        "content": "<p>You'd also want to make it invoke your LLVM target, but that's something you'll want to do whether someone's using <code>unknown</code> or <code>pc</code>.</p>",
        "id": 230074406,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615572863
    },
    {
        "content": "<p>that won't solve the issue of LTO printing scary messages, because the llvm target we put into bytecode is ultimately defined by the target itself, not its identifier in rustland.</p>",
        "id": 230074513,
        "sender_full_name": "nagisa",
        "timestamp": 1615572923
    },
    {
        "content": "<p>That's what I mean. I'm suggesting that, rather than copying the <code>x86_64-unknown-linux-gnu</code> target to <code>x86_64-pc-linux-gnu</code> and changing the identifier and LLVM target, it'd make sense to patch the <code>x86_64-unknown-linux-gnu</code> target to use <code>x86_64-pc-linux-gnu</code> internally, so that code expecting the former will work on Arch.</p>",
        "id": 230074710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615573009
    },
    {
        "content": "<p>That way, both target names work and mean the same thing, and both work on Arch.</p>",
        "id": 230074786,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615573053
    },
    {
        "content": "<p>Yeah, I saw the alias code and wondered if that wouldn't be a better approach. Thanks!</p>",
        "id": 230094993,
        "sender_full_name": "heftig",
        "timestamp": 1615582016
    },
    {
        "content": "<p>It looks like I need to re-add the <code>TargetTriple::from_alias</code> handling that was removed in 1.52.0.</p>",
        "id": 237713716,
        "sender_full_name": "heftig",
        "timestamp": 1620328471
    }
]