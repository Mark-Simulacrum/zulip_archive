[
    {
        "content": "<p>Hi , I'm trying to codegen an instance of a method which I know is a trait method implemented on an existing trait object. Here's a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Virtual</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Virtual</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"c1\">// I've made this method DefId a lang item, and want to codegen it in an intrinsic</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm trying to codegen calls to this  in the llvm backend as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mono_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">mk_substs</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">iter</span>::<span class=\"n\">once</span>::<span class=\"o\">&lt;</span><span class=\"n\">GenericArg</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">langcall</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LangItem</span>::<span class=\"n\">MyTraitMethod</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">Instance</span>::<span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">ParamEnv</span>::<span class=\"n\">reveal_all</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mono_ty</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">cx</span><span class=\"p\">().</span><span class=\"n\">get_fn_addr</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">type_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">val_ty</span><span class=\"p\">(</span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">llval</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">type_void</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">fn_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">place</span><span class=\"p\">.</span><span class=\"n\">llval</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Unfortunately, when I try and build this, I get an LLVM assertion error that the call has an incorrect number of args. I'm assuming this is to do with the fact that <code>place.llval</code> is a fat pointer because it's a trait object. </p>\n<p>I'm probably making some incorrect assumptions here. Can anyone give me some pointers. How can I pass a fat pointer into the call here  as the <code>&amp;self</code> reference?</p>",
        "id": 276526203,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1648149056
    },
    {
        "content": "<p>You should probably use <code>builder.fn_decl_backend_type(builder.fn_abi_of_instance(inst))</code> to get the function signature.</p>",
        "id": 276526638,
        "sender_full_name": "bjorn3",
        "timestamp": 1648149292
    },
    {
        "content": "<p>In addition you need to pass both <code>place.llval</code> and <code>place.llextra</code> as arguments if you have dereferenced the reference. If not you should probably convert it to an <code>Operand</code> instead I think.</p>",
        "id": 276526881,
        "sender_full_name": "bjorn3",
        "timestamp": 1648149427
    },
    {
        "content": "<p>Thanks bjorn. Also, is <code>Instance::resolve</code> the right method here? I'm under the assumption we're still after a monomorphized instance even though it's implemented on a trait object</p>",
        "id": 276526886,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1648149431
    },
    {
        "content": "<p>I think so. Not sure you need any substitutions though.</p>",
        "id": 276526955,
        "sender_full_name": "bjorn3",
        "timestamp": 1648149481
    },
    {
        "content": "<p>That subst becomes <code>ReErased</code>. I'm not really sure what that means so I left it there in-case.</p>",
        "id": 276527130,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1648149576
    },
    {
        "content": "<p>Right, it should remain. Overlooked the <code>'a</code> in <code>impl&lt;'a&gt;</code>.</p>",
        "id": 276527323,
        "sender_full_name": "bjorn3",
        "timestamp": 1648149672
    },
    {
        "content": "<p>ReErased is an erased lifetime. Codegen completely ignores lifetimes so for better cache reuse they get erased.</p>",
        "id": 276527369,
        "sender_full_name": "bjorn3",
        "timestamp": 1648149710
    },
    {
        "content": "<p>I see. That makes sense.</p>",
        "id": 276527481,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1648149763
    }
]