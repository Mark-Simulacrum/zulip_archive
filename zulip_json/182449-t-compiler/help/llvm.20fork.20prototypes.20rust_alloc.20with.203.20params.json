[
    {
        "content": "<p>I was looking at how Rust's LLVM fork adds optimisation hints for Rust alloc functions and came across this:</p>\n<div class=\"codehilite\"><pre><span></span><code>case LibFunc_rust_alloc:\n    return (NumParams == 3 &amp;&amp; FTy.getReturnType()-&gt;isPointerTy() &amp;&amp;\n            FTy.getParamType(0)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(1)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(2)-&gt;isPointerTy());\n</code></pre></div>\n<p>/llvm/lib/Analysis/TargetLibraryInfo.cpp#L1493 (<a href=\"https://github.com/rust-lang/llvm-project/blob/f9a8d70b6e0365ac2172ca6b7f1de0341297458d/llvm/lib/Analysis/TargetLibraryInfo.cpp#L1493\">https://github.com/rust-lang/llvm-project/blob/f9a8d70b6e0365ac2172ca6b7f1de0341297458d/llvm/lib/Analysis/TargetLibraryInfo.cpp#L1493</a>)</p>\n<p>I don't understand why there are 3 param types in the conditional - doesn't <code>__rust_alloc</code> only take 2?</p>",
        "id": 223948353,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611603293
    },
    {
        "content": "<p>Similarly, <code>rust_realloc</code> has 6 here:</p>\n<div class=\"codehilite\"><pre><span></span><code> case LibFunc_rust_realloc:\n    return (NumParams == 6 &amp;&amp; FTy.getReturnType()-&gt;isPointerTy() &amp;&amp;\n            FTy.getParamType(0)-&gt;isPointerTy() &amp;&amp;\n            FTy.getParamType(1)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(2)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(3)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(4)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(5)-&gt;isPointerTy());\n</code></pre></div>\n<p>But the signature in rust is  <code>fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -&gt; *mut u8;</code></p>\n<p>I'm clearly missing something. Any pointers? :)</p>",
        "id": 223948764,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611603477
    },
    {
        "content": "<p>oh my, it would be embarrassing if these have been so ineffective...</p>",
        "id": 223950141,
        "sender_full_name": "cuviper",
        "timestamp": 1611604157
    },
    {
        "content": "<p>you can see vestiges from the old alloc design here:<br>\n<a href=\"https://github.com/rust-lang/rust/pull/49669/files#diff-0a8db664d0f1760d49f853d56f02d065a599a955cf46a664c9e9684ef1090231\">https://github.com/rust-lang/rust/pull/49669/files#diff-0a8db664d0f1760d49f853d56f02d065a599a955cf46a664c9e9684ef1090231</a></p>",
        "id": 223950295,
        "sender_full_name": "cuviper",
        "timestamp": 1611604216
    },
    {
        "content": "<p><code>cfg(stage0)</code> being the old design for transition, to <code>cfg(not(stage0))</code> matching what we have today</p>",
        "id": 223950403,
        "sender_full_name": "cuviper",
        "timestamp": 1611604272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223286\">@Jake Hughes</span> so yes, it looks like this should have been updated</p>",
        "id": 223950656,
        "sender_full_name": "cuviper",
        "timestamp": 1611604362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223286\">@Jake Hughes</span> would you like to fix this yourself?</p>",
        "id": 223951106,
        "sender_full_name": "cuviper",
        "timestamp": 1611604505
    },
    {
        "content": "<p>Aha. I see!</p>",
        "id": 223951922,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611604808
    },
    {
        "content": "<p>Sure, id be happy to.</p>",
        "id": 223951980,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611604838
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>  quick question: is there a way to trigger an incremental recompilation of in-tree LLVM through the x.py system? Or do I need to cd into the build dir and run make the old fashioned way?</p>",
        "id": 223970161,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611612901
    },
    {
        "content": "<p>if you just remove <code>build/x86_64-unknown-linux-gnu/llvm/llvm-finished-building</code> (or whatever your host target), it should let cmake do an incremental build</p>",
        "id": 223970376,
        "sender_full_name": "cuviper",
        "timestamp": 1611612965
    },
    {
        "content": "<p>which isn't perfect, but usually works well enough for source changes</p>",
        "id": 223970435,
        "sender_full_name": "cuviper",
        "timestamp": 1611612988
    },
    {
        "content": "<p>aha, yep that'll do, thanks :)</p>",
        "id": 223970474,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611613015
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> , I've not forgotten about this, but I'm having a bit of trouble getting what should have been a simple fix to work. Changing <code>__rust_alloc</code>'s MemoryBuiltin in LLVM from:</p>\n<div class=\"codehilite\"><pre><span></span><code>case LibFunc_rust_alloc:\n    return (NumParams == 3 &amp;&amp; FTy.getReturnType()-&gt;isPointerTy() &amp;&amp;\n            FTy.getParamType(0)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(1)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(2)-&gt;isPointerTy());\n</code></pre></div>\n<p>To:</p>\n<div class=\"codehilite\"><pre><span></span><code>case LibFunc_rust_alloc:\n    return (NumParams == 2 &amp;&amp; FTy.getReturnType()-&gt;isPointerTy() &amp;&amp;\n            FTy.getParamType(0)-&gt;isIntegerTy() &amp;&amp;\n            FTy.getParamType(1)-&gt;isIntegerTy());\n</code></pre></div>\n<p>Results in the <code>src/test/codegen/vec-optimizes-away.rs</code> test no longer being able to remove the alloc call and just return a const. I'm scratching my head a bit here because I'm at a loss. Could I be missing something obvious? I'm afraid I'm not that familiar with this part of rustc.</p>",
        "id": 224120379,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611704287
    },
    {
        "content": "<p>is that the only one you changed? they might need to all work in concert</p>",
        "id": 224120504,
        "sender_full_name": "cuviper",
        "timestamp": 1611704396
    },
    {
        "content": "<p>but I'm just guessing</p>",
        "id": 224120505,
        "sender_full_name": "cuviper",
        "timestamp": 1611704399
    },
    {
        "content": "<p>ATM just this one as I've been trying to narrow it down, but I _think_ I had them all changed at one point and still had issues. Out of interest, is there a way to force the re-generation of the <code>.ll</code> input files for the <code>codegen/</code> tests? I've been seeing some funny behaviour with it being cached from stale builds when debugging this so have been recompiling liballoc each time to make sure (but that's slow on my machine!)</p>",
        "id": 224120868,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611704675
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 224121113,
        "sender_full_name": "cuviper",
        "timestamp": 1611704835
    },
    {
        "content": "<p>no worries, i'll have another look and see if i can work out what's going on</p>",
        "id": 224121413,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1611705058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/llvm.20fork.20prototypes.20rust_alloc.20with.203.20params/near/223950141\">said</a>:</p>\n<blockquote>\n<p>oh my, it would be embarrassing if these have been so ineffective...</p>\n</blockquote>\n<p>There's a test for these in rust-lang/rust. I'm not sure how that could've been missed.</p>",
        "id": 224958862,
        "sender_full_name": "nagisa",
        "timestamp": 1612312879
    },
    {
        "content": "<p>Seems like the allocation optimisation still works <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 224959543,
        "sender_full_name": "nagisa",
        "timestamp": 1612313421
    }
]