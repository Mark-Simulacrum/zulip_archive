[
    {
        "content": "<p>I'm hoping that someone can help me decide whether this is worth filing a bug report for.</p>\n<p>I would naively expect <code>for i [0_usize, 1_usize, 2_usize] { do_something_with(x[i]); }</code> to be able to elide the bounds check in <code>x[i]</code> whenever <code>x: [T; 3]</code>. Here the <code>3</code> is just some reasonably small number someone might iterate up to by hand, and the array that <code>i</code> iterates over is obviously known at compile time to only contain values less than <code>3</code>.</p>\n<p>Looking at the generated assembly, however, I don't see this (rustc 1.57 on x86-64). If, however, I change the loop to use a slice iterator instead, i.e. <code>for &amp; i in &amp; [0_usize, 1_usize, 2_usize] { â€¦ }</code>, I do see the expected behavior.</p>\n<p>Is this to be expected, or something I should file a bug report or feature request for?</p>",
        "id": 267736743,
        "sender_full_name": "gspr",
        "timestamp": 1641999977
    },
    {
        "content": "<p>There are many <code>I-slow</code> issues, including some about bounds checks. Maybe check if one matches. But considering that array iterators are newish maybe there isn't one yet. Maybe it's easy to fix, maybe not.</p>",
        "id": 267757716,
        "sender_full_name": "The 8472",
        "timestamp": 1642008452
    },
    {
        "content": "<p>Hmm, this seems relevant, no? <a href=\"https://github.com/rust-lang/rust/issues/63552\">https://github.com/rust-lang/rust/issues/63552</a></p>",
        "id": 267842626,
        "sender_full_name": "gspr",
        "timestamp": 1642065823
    },
    {
        "content": "<p>Yet the discussion seems to indicate that this was fixed in nightly in 2019.</p>",
        "id": 267842661,
        "sender_full_name": "gspr",
        "timestamp": 1642065839
    }
]