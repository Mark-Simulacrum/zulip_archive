[
    {
        "content": "<p>The documentation says that the codegen option <code>link-arg</code> specifies a single arg, yet Iâ€™ve seen many invocations (even some in tree) that look like <code>-C link-arg=one,two</code> and they work fine. Is the documentation just wrong, orâ€¦?</p>",
        "id": 257720324,
        "sender_full_name": "Winter",
        "timestamp": 1634313225
    },
    {
        "content": "<p>It really only allows a single arg: <a href=\"https://github.com/rust-lang/rust/blob/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27/compiler/rustc_session/src/options.rs#L935-L936\">https://github.com/rust-lang/rust/blob/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27/compiler/rustc_session/src/options.rs#L935-L936</a></p>\n<p>For invocations like <code>-Clink-arg=-Wl,-foo,bar</code> it is the linker wrapper (gcc or clang) that splits on the comma before passing the arguments down to the linker like <code>-foo bar</code>.</p>",
        "id": 257723992,
        "sender_full_name": "bjorn3",
        "timestamp": 1634314593
    },
    {
        "content": "<p>Ah, alright. Makes sense, thank you.</p>\n<p>Is the option that rustc uses to pass the linker flags to the wrapper <code>-Wl</code>? Since thatâ€™s the only option that supports comma-separated arguments (at least in clang)</p>",
        "id": 257724933,
        "sender_full_name": "Winter",
        "timestamp": 1634314936
    },
    {
        "content": "<p>I canâ€™t easily tell, I guess itâ€™s something around <a href=\"https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/link.rs#L1759\">https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/link.rs#L1759</a></p>",
        "id": 257725402,
        "sender_full_name": "Winter",
        "timestamp": 1634315131
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/linker.rs#L224\">https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/linker.rs#L224</a></p>\n<p>Is <code>GccLinker</code> also used for clang?</p>",
        "id": 257725584,
        "sender_full_name": "Winter",
        "timestamp": 1634315192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450762\">Winter</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/link-arg.20and.20multiple.20arguments/near/257724933\">said</a>:</p>\n<blockquote>\n<p>Ah, alright. Makes sense, thank you.</p>\n<p>Is the option that rustc uses to pass the linker flags to the wrapper <code>-Wl</code>? Since thatâ€™s the only option that supports comma-separated arguments (at least in clang)</p>\n</blockquote>\n<p>Rustc directly passes the value of <code>-Clink-arg</code> to the linker wrapper. It doesn't prepend <code>-Wl</code>.</p>",
        "id": 257725650,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450762\">Winter</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/link-arg.20and.20multiple.20arguments/near/257725584\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/linker.rs#L224\">https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/linker.rs#L224</a></p>\n<p>Is <code>GccLinker</code> also used for clang?</p>\n</blockquote>\n<p>I believe so. Clang tries to be GCC compatible.</p>",
        "id": 257725727,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315261
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/link.rs#L1204\">https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/link.rs#L1204</a></p>",
        "id": 257725804,
        "sender_full_name": "Winter",
        "timestamp": 1634315285
    },
    {
        "content": "<p>Yeah, looks like it</p>",
        "id": 257725819,
        "sender_full_name": "Winter",
        "timestamp": 1634315291
    },
    {
        "content": "<p>Might be reading it wrong but it seems to imply that it would, although Iâ€™m not sure where the stem would be inserted into the path to the binary</p>",
        "id": 257725882,
        "sender_full_name": "Winter",
        "timestamp": 1634315315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450762\">Winter</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/link-arg.20and.20multiple.20arguments/near/257725584\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/linker.rs#L224\">https://github.com/rust-lang/rust/blob/bb918d0a5bf22211df0423f7474e4e4056978007/compiler/rustc_codegen_ssa/src/back/linker.rs#L224</a></p>\n<p>Is <code>GccLinker</code> also used for clang?</p>\n</blockquote>\n<p>Note that <code>linker_arg</code> isn't used for <code>-Clink-arg</code> though.</p>",
        "id": 257725904,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450762\">Winter</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/link-arg.20and.20multiple.20arguments/near/257725882\">said</a>:</p>\n<blockquote>\n<p>Might be reading it wrong but it seems to imply that it would, although Iâ€™m not sure where the stem would be inserted into the path to the binary</p>\n</blockquote>\n<p><code>linker</code> here is the path to the binary. <code>stem</code> is derived from the path, not the other way around.</p>",
        "id": 257726102,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315409
    },
    {
        "content": "<p>Well what Iâ€™m saying is that Iâ€™m not sure where -clang would be in the file path if it was just /â€¦/ld for example.</p>",
        "id": 257726263,
        "sender_full_name": "Winter",
        "timestamp": 1634315470
    },
    {
        "content": "<p>If the path is to <code>ld</code>, you get <code>LinkerFlavor::Ld</code>, not <code>LinkerFlavor::Gcc</code>.</p>",
        "id": 257726402,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315522
    },
    {
        "content": "<p>Ah so the arguments are just appended</p>",
        "id": 257726533,
        "sender_full_name": "Winter",
        "timestamp": 1634315568
    },
    {
        "content": "<p>Yeah, every <code>-Clink-arg</code> correspond to a single argument.</p>",
        "id": 257726630,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315618
    },
    {
        "content": "<p>So the commas in a single arg are handled by clang, right?</p>",
        "id": 257726738,
        "sender_full_name": "Winter",
        "timestamp": 1634315650
    },
    {
        "content": "<p>Likely, yes.</p>",
        "id": 257726805,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315680
    },
    {
        "content": "<p>I canâ€™t find any documentation of this fact in the manpage for lld, hm.</p>",
        "id": 257726876,
        "sender_full_name": "Winter",
        "timestamp": 1634315709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ man clang\n[...]\n       -Wl,&lt;args&gt;\n              Pass the comma separated arguments in args to the linker.\n[..]\n</code></pre></div>",
        "id": 257726971,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315746
    },
    {
        "content": "<p>yes, but I thought LinkerFlavor would be Ld, thus that argument isnâ€™t used</p>",
        "id": 257727163,
        "sender_full_name": "Winter",
        "timestamp": 1634315822
    },
    {
        "content": "<p>GCC is the default <code>-Clinker</code> on most Unix platforms. This excerpt from the Clang man page applies to GCC too.</p>",
        "id": 257727474,
        "sender_full_name": "bjorn3",
        "timestamp": 1634315955
    },
    {
        "content": "<p>Directly using the linker isn't very easy on most platforms as the linker itself doesn't know what crt object files it needs to add for libc, what the default library path should be and it often doesn't even support C++ global initializers, but requires the collect2 linker wrapper (which gcc and clang invoke) for implementing this.</p>",
        "id": 257727790,
        "sender_full_name": "bjorn3",
        "timestamp": 1634316090
    },
    {
        "content": "<blockquote>\n<p>GCC is the default linkerâ€¦</p>\n</blockquote>\n<p>even on macOS?</p>",
        "id": 257730854,
        "sender_full_name": "Winter",
        "timestamp": 1634317336
    },
    {
        "content": "<p>Thatâ€™s the one exception I can think of</p>",
        "id": 257730912,
        "sender_full_name": "Winter",
        "timestamp": 1634317361
    },
    {
        "content": "<p>(pretend I quoted this)</p>\n<div class=\"codehilite\"><pre><span></span><code>$ man clang\n[...]\n       -Wl,&lt;args&gt;\n              Pass the comma separated arguments in args to the linker.\n[..]\n</code></pre></div>\n<p>But isnâ€™t this not used when LinkerFlavor is Ld? Or would the LinkerFlavor on, say, macOS be Gcc anyways?</p>",
        "id": 257731539,
        "sender_full_name": "Winter",
        "timestamp": 1634317615
    },
    {
        "content": "<p>I think Iâ€™m confused ðŸ˜£</p>",
        "id": 257731647,
        "sender_full_name": "Winter",
        "timestamp": 1634317657
    },
    {
        "content": "<p>On Macos LinkerFlavor is also Gcc and clang is used for linking.</p>",
        "id": 257733208,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1634318285
    },
    {
        "content": "<p>Got it, guess I got confused.</p>",
        "id": 257734551,
        "sender_full_name": "Winter",
        "timestamp": 1634318846
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 257734592,
        "sender_full_name": "Winter",
        "timestamp": 1634318863
    }
]