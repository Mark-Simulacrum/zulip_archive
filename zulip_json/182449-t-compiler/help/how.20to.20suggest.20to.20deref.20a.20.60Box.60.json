[
    {
        "content": "<p>I would like to implement a diagnostic suggestion that would suggest dereferencing a <code>Box&lt;T&gt;</code> when something expects a <code>T</code>. E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// should suggest `foo(*x)`</span>\n</code></pre></div>\n<p>I think I need to add a match arm to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn_ctxt/struct.FnCtxt.html#method.check_ref\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn_ctxt/struct.FnCtxt.html#method.check_ref</a> that matches when</p>\n<ul>\n<li>the actual type is <code>Adt</code> and the DefId is the same as the box lang item, and</li>\n<li><code>self.deref_steps</code> returns <code>Some(x)</code> where <code>x &gt; 0</code>.</li>\n</ul>\n<p>Is that all, or do I need to add logic to the callers of <code>check_ref</code> to make them call it in more cases in addition?</p>",
        "id": 232517926,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617150085
    },
    {
        "content": "<p>Actually for the first step it looks like I can just use <code>AdtDef::is_box()</code></p>",
        "id": 232518574,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617150639
    },
    {
        "content": "<p>Hmm, actually it looks like this suggestion already exists for some cases (such as the example I gave). I'm guessing it's not applied in all the cases it could be.</p>",
        "id": 232521063,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617152684
    },
    {
        "content": "<p>Ah, here we go:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This code suggests:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/lib.rs:9:28\n  |\n9 |         Foo::Bar(y) =&gt; foo(y),\n  |                            ^\n  |                            |\n  |                            expected enum `Foo`, found struct `Box`\n  |                            help: try using a variant of the expected enum: `Foo::Bar(y)`\n  |\n  = note: expected enum `Foo`\n           found struct `Box&lt;u32&gt;`\n</code></pre></div>",
        "id": 232521441,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617153026
    },
    {
        "content": "<p>This type of error comes up a lot in my codebase and it's really annoying because all I need to do is add a deref but it suggests re-wrapping the type.</p>\n<p>So, it looks like the solution is to also suggest the deref in that case.</p>",
        "id": 232521468,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617153039
    },
    {
        "content": "<p>Also, the suggestion is only for Copy types for some reason; I'm guessing that's in case the type is <code>&amp;Box&lt;String&gt;</code> rather than <code>Box&lt;String&gt;</code>, which should work.</p>",
        "id": 232521919,
        "sender_full_name": "Noah Lev",
        "timestamp": 1617153544
    }
]