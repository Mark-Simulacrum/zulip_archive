[
    {
        "content": "<p>Hello everyone. @bytesnake and I are currently working on integrating an llvm incubator project into rustc, which differentiates code in the calculus sense. We have used it successfully as a wrapper around rustc, but that comes with various limitations which we want to solve this way. </p>\n<h3>Requirements</h3>\n<p>We require the complete LLVM-IR, at least the one being used (possibly indirectly) by a function being differentiated. In general, that means that we have to merge all the compilation units and also rely on <code>build-std</code>, which worked pretty fine for us until now. Currently we also require debug-symbols, although we will change that later to rely on compiler internal layout details. For the best results we also require special / repeated optimizations, although these are optional to get started.</p>\n<h3>Implementation</h3>\n<p>We would like to make as little modifications as possible. In the rustc backend we therefore intent to:</p>\n<p>1) Add enzyme as a submodule to the llvm project. <br>\n2) Add enzyme as an llvm subproject to x.py to allow building it, together with rust bindings<br>\n3) Add a trait file to <code>rustc_codegen_ssa/src/traits/autodiff.rs</code><br>\n4) Update ModuleConfig (and equivalents earlier in the build chain) to include a boolean <code>autodiff</code> flag. If set to true we also check for build-std and embed-bitcode usage and panic if it isn't used.<br>\n5) Update <code>rustc_codegen_llvm/src/lib.rs</code> and <code>rustc_codegen_ssa/src/back/write.rs</code> by using <code>cfg!()</code> in order to:</p>\n<div class=\"codehilite\"><pre><span></span><code>  - During normal compilation process:\n       - concatenate all modules (including std ones) using run-link\n       - end with single module, run: optimizations, enzyme, optimizations2. \n       - Continue normal compilation. (Same case as if we compile a trivial crate without dependencies, so the rest of the compilation should work?)\n  - During thin-lto:\n       - complicated, skip for now (multiple modules)\n  - During fat-lto:\n       - We have one compilation artifact anyway, so that should be comparably easy?\n</code></pre></div>\n\n<p>All of the steps above do not affect users, so would probably only require a MCP. However, we do intend to expose this behaviour similar to the inline-asm group, by having a special macro adding a magic node. This way we can assure that autodiff will only be invoked using the specific macro, allowing us to catch invalid input as early as possible. This macro will also generate an <code>unimplemented!()</code> function which will later be filled when running Enzyme. You can see an example of such a macro here: <a href=\"https://github.com/ZuseZ4/autodiff/blob/main/tests/rosenbrock.rs\">https://github.com/ZuseZ4/autodiff/blob/main/tests/rosenbrock.rs</a>. It demonstrates Reverse, Forward, and Forward-Vectorized (8-width) autodiff. We don't see the specific macro design as too relevant for now but would rather ask for some general feedback on our Implementation thoughts. Is there any fundamental flaw or can we just go ahead and come back for an RFC once we have finished moving our logic into rustc?</p>",
        "id": 278723718,
        "sender_full_name": "Manuel Drehwald",
        "timestamp": 1649783854
    }
]