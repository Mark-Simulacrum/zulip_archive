[
    {
        "content": "<p>As it stands, closures are rather special within the rustc api: we can't use methods like <code>fn_sig</code> to get their signatures, instead we have to obtain their <em>substitution</em> (which seems to be unique), convert it into a <code>ClosureSubst</code> and then get a signature, but this is still wrong! If we look at the MIR for a closure body, the signature will be different as it is preceded by an argument of the closure's type. </p>\n<p>So while <code>substs.as_closure().sig()</code> will give us the signature seen from 'outside', is there any way to obtain the signature of the closure's MIR body?</p>",
        "id": 269417392,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643206501
    },
    {
        "content": "<p>As a follow up, it seems like the <code>DefId</code> of a closure is rather special within the compiler, referring to both the <em>body</em> (code) and type (struct), is there any other kind of item which does a similar overloading?</p>",
        "id": 269417659,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1643206592
    },
    {
        "content": "<p>This is what rustc internally uses: <a href=\"https://github.com/rust-lang/rust/blob/788b1fe5b79a8b74215022f9df49b0eae68a50b9/compiler/rustc_middle/src/ty/layout.rs#L2575-L2678\">https://github.com/rust-lang/rust/blob/788b1fe5b79a8b74215022f9df49b0eae68a50b9/compiler/rustc_middle/src/ty/layout.rs#L2575-L2678</a></p>",
        "id": 269418305,
        "sender_full_name": "bjorn3",
        "timestamp": 1643206824
    }
]