[
    {
        "content": "<p>Hello <span aria-label=\"crab\" class=\"emoji emoji-1f980\" role=\"img\" title=\"crab\">:crab:</span>  I'm writing a simple static checker using the Rustc API, and I'd really appreciate advice on how I can fetch the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def_id/struct.DefId.html\"><code>DefID</code></a> of the <code>Send</code> trait!  While it was easy to fetch the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def_id/struct.DefId.html\"><code>DefID</code></a> of the <code>Sync</code> trait by doing <code>tcx.lang_items().sync_trait()</code>, it seems that <code>Send</code> is not included in the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/enum.LangItem.html\"><code>LangItem</code></a> enum and thus  struct<code>LanguageItems</code> doesn't provide an API like <code>send_trait()</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 212716844,
        "sender_full_name": "JOE1994",
        "timestamp": 1602175054
    },
    {
        "content": "<p>not all traits are lang items</p>",
        "id": 212717094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602175174
    },
    {
        "content": "<p>what are you trying to do?</p>",
        "id": 212717100,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602175177
    },
    {
        "content": "<p>I was trying to make my simple checker inspect all implementations of <code>Send</code> and <code>Sync</code> given an input program.<br>\nCurrently it can locate all implementations of the <code>Sync</code> trait, but it currently doesn't know how to catch implementations of the <code>Send</code> trait.</p>",
        "id": 212717452,
        "sender_full_name": "JOE1994",
        "timestamp": 1602175347
    },
    {
        "content": "<p>The description for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/lang_items/index.html\">module <code>rustc_hir::lang_items</code></a> mentions <code>Send</code> trait to be an example of a language item, but yet <code>Send</code> is not included in the <code>LangItem</code> enum.</p>",
        "id": 212717910,
        "sender_full_name": "JOE1994",
        "timestamp": 1602175543
    },
    {
        "content": "<p>it's probably just out of date docs</p>",
        "id": 212718113,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602175629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242132\">JOE1994</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/how.20to.20get.20DefId.20of.20'Send'.20trait/near/212717452\">said</a>:</p>\n<blockquote>\n<p>I was trying to make my simple checker inspect all implementations of <code>Send</code> and <code>Sync</code> given an input program.<br>\nCurrently it can locate all implementations of the <code>Sync</code> trait, but it currently doesn't know how to catch implementations of the <code>Send</code> trait.</p>\n</blockquote>\n<p>you could look for the <code>core::marker::Send</code> defpath maybe</p>",
        "id": 212718160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602175652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> does things like this but I think his approach is usually to make items <code>rustc_diagnostic_items</code> to avoid being confused by imports renaming things</p>",
        "id": 212718213,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602175679
    },
    {
        "content": "<p><code>tcx.diagnostic_items().get(sym::send_trait)</code> would work in this case</p>",
        "id": 212718421,
        "sender_full_name": "davidtwco",
        "timestamp": 1602175770
    },
    {
        "content": "<p><code>lang_items</code> work almost the same way as <code>rustc_diagnostic_item</code> iirc. Send not being included is probably just an oversight</p>",
        "id": 212718436,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1602175776
    },
    {
        "content": "<p>But using that will let you start using it immediately and not have to wait until a new release includes the diagnostic item</p>",
        "id": 212718531,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1602175805
    },
    {
        "content": "<p>*lang item</p>",
        "id": 212718550,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1602175813
    },
    {
        "content": "<p>IMO things shouldn't be lang items unless they need to be</p>",
        "id": 212719696,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602176312
    },
    {
        "content": "<p>It's more work in rustdoc's end trying to keep everything up to date</p>",
        "id": 212719740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602176329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> <br>\nThank you all for your help! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  <code>tcx.diagnostic_items().get(sym::send_trait)</code> worked well for me :)</p>",
        "id": 212722439,
        "sender_full_name": "JOE1994",
        "timestamp": 1602177557
    }
]