[
    {
        "content": "<p>I'm investigating a stack overflow in LLVM that I see on rust-lang/rust master for a specific test when debuginfo is enabled. How can I get LLVM to be rebuilt with x.py?</p>",
        "id": 164489551,
        "sender_full_name": "davidtwco",
        "timestamp": 1556572587
    },
    {
        "content": "<p>I think there's some timestamp/lockfile in <code>build/x86_...../llvm</code> that you can remove</p>",
        "id": 164489843,
        "sender_full_name": "oli",
        "timestamp": 1556572809
    },
    {
        "content": "<p><code>rm build/x86_64-unknown-linux-gnu/llvm/llvm-finished-building</code> did the trick, thanks <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>.</p>",
        "id": 164489886,
        "sender_full_name": "davidtwco",
        "timestamp": 1556572864
    },
    {
        "content": "<p>is there an option to <code>x.py</code> to expose this? We may want to add one. (That or I guess people can be like me and resort to <code>rm -rf</code>'ing <code>build/</code> after tearing their hair out for a while.)</p>",
        "id": 168117902,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502039
    },
    {
        "content": "<blockquote>\n<p>(That or I guess people can be like me and resort to rm -rf'ing build/ after tearing their hair out for a while.)</p>\n</blockquote>\n<p>I do this also and feel very sad about it every time...</p>",
        "id": 168117990,
        "sender_full_name": "centril",
        "timestamp": 1560502098
    },
    {
        "content": "<p>how exposed do you want it? have <code>./x.py clean</code> always clear the <code>llvm-finished-building</code> file, but also have a flag to not do that?</p>",
        "id": 168118093,
        "sender_full_name": "oli",
        "timestamp": 1560502220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <code>./x.py clean --nuclear-option</code></p>",
        "id": 168118103,
        "sender_full_name": "centril",
        "timestamp": 1560502242
    },
    {
        "content": "<p>the nuclear option is to <code>rm build</code></p>",
        "id": 168118113,
        "sender_full_name": "oli",
        "timestamp": 1560502255
    },
    {
        "content": "<p><code>./x.py clean --llvm</code> then</p>",
        "id": 168118146,
        "sender_full_name": "centril",
        "timestamp": 1560502304
    },
    {
        "content": "<p>wait, you're saying <code>x.py clean</code> <em>does</em> clear the <code>llvm-finished-building</code> file?</p>",
        "id": 168118148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502306
    },
    {
        "content": "<p>no</p>",
        "id": 168118149,
        "sender_full_name": "oli",
        "timestamp": 1560502310
    },
    {
        "content": "<p>it could</p>",
        "id": 168118150,
        "sender_full_name": "oli",
        "timestamp": 1560502312
    },
    {
        "content": "<p>ah I see</p>",
        "id": 168118153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502316
    },
    {
        "content": "<p>no I think we want to preserve the current behavior</p>",
        "id": 168118191,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502323
    },
    {
        "content": "<p>like I'm wondering if doing so by default would make more sense</p>",
        "id": 168118198,
        "sender_full_name": "oli",
        "timestamp": 1560502327
    },
    {
        "content": "<p>I think <code>x.py clean --and-clean-llvm</code> would be good</p>",
        "id": 168118208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502344
    },
    {
        "content": "<p>ok, then I'll have <code>./x.py clean</code> also emit a message about llvm not getting cleaned</p>",
        "id": 168118209,
        "sender_full_name": "oli",
        "timestamp": 1560502344
    },
    {
        "content": "<p>together with a suggestion for <code>--and-clean-llvm</code></p>",
        "id": 168118219,
        "sender_full_name": "oli",
        "timestamp": 1560502360
    },
    {
        "content": "<p>(or at least, that would generalize to any other submodules that similarly leave products around post-clean)</p>",
        "id": 168118225,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  <code>clean --and-clean-llvm</code> seems awfully wordy and repetitive</p>",
        "id": 168118249,
        "sender_full_name": "centril",
        "timestamp": 1560502405
    },
    {
        "content": "<p>is that on purpose? :P</p>",
        "id": 168118256,
        "sender_full_name": "centril",
        "timestamp": 1560502418
    },
    {
        "content": "<p>yeah but <code>x.py clean --llvm</code> is ambiguous to me</p>",
        "id": 168118257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502424
    },
    {
        "content": "<p>does that <em>only</em> clean llvm?</p>",
        "id": 168118260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  fair; <code>clean --and-llvm</code> then</p>",
        "id": 168118329,
        "sender_full_name": "centril",
        "timestamp": 1560502453
    },
    {
        "content": "<p>/me also thinks redundancy ain't a bad thing when it comes to a destructive options like cleaning.</p>",
        "id": 168118397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502509
    },
    {
        "content": "<p>like, I have my driver scripts set up to wait for five seconds if I issue the clean command</p>",
        "id": 168118405,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502524
    },
    {
        "content": "<p>o.O</p>",
        "id": 168118407,
        "sender_full_name": "centril",
        "timestamp": 1560502533
    },
    {
        "content": "<p>sure, waiting five seconds is annoying, right?</p>",
        "id": 168118411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502539
    },
    {
        "content": "<p>but you know what's more annoying? accidentally issuing a clean command</p>",
        "id": 168118414,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yeah; I have a more YOLO approach to cleaning</p>",
        "id": 168118415,
        "sender_full_name": "centril",
        "timestamp": 1560502555
    },
    {
        "content": "<p>admittedly part of this workflow stems from my use of Emacs compilation mode, where just hitting <code>g</code> will repeat the last compile-command that was used in the buffer</p>",
        "id": 168118473,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502598
    },
    {
        "content": "<p>so that's a case where I want a reminder \"oh, used a cleaning build the previous time, didn't mean to do that again\"</p>",
        "id": 168118482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  I don't think I've ever done an accidental <code>clean</code> but I do frequently do other silly things like touch a file in the compiler and incremental is a bit daft so it causes a rebuild of the compiler...</p>",
        "id": 168118495,
        "sender_full_name": "centril",
        "timestamp": 1560502634
    },
    {
        "content": "<p>We definitely need to make incremental smarter</p>",
        "id": 168118501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502652
    },
    {
        "content": "<p>and/or make x.py smarter</p>",
        "id": 168118504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502656
    },
    {
        "content": "<p>I think making incremental smarter would help with a lot of existing problems we have</p>",
        "id": 168118570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502694
    },
    {
        "content": "<p>(but we also need to improve the test suite for incremental; do more fuzzing and/or randomized test generation, in tandem with trying to ramp up effort on incremental.)</p>",
        "id": 168118580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> mmh; I've proposed to eddyb that we should add a (morally dubious) logic to incremental whereby we specifically hash post lexing so that whitespace changes, comment changes, and random saves don't cause rebuilds.</p>",
        "id": 168118697,
        "sender_full_name": "centril",
        "timestamp": 1560502816
    },
    {
        "content": "<p>and you just suffer with incorrect spans?</p>",
        "id": 168118724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> kinda <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 168118747,
        "sender_full_name": "centril",
        "timestamp": 1560502889
    },
    {
        "content": "<p>I was thinking more: Do rebuilds (so that span's get updated), but skip stuff like type-checking if the function only had changes of the form you mentioned</p>",
        "id": 168118766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560502907
    },
    {
        "content": "<p>well <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has a principled solution for that I believe</p>",
        "id": 168118826,
        "sender_full_name": "centril",
        "timestamp": 1560502935
    },
    {
        "content": "<p>based on ranges or something</p>",
        "id": 168118842,
        "sender_full_name": "centril",
        "timestamp": 1560502959
    },
    {
        "content": "<p>I've definitely accidentally cleaned</p>",
        "id": 168122461,
        "sender_full_name": "varkor",
        "timestamp": 1560506637
    },
    {
        "content": "<p>maybe adding a confirm y/n option would be helpful</p>",
        "id": 168122512,
        "sender_full_name": "varkor",
        "timestamp": 1560506654
    },
    {
        "content": "<p>it's not used frequently enough that that would be annoying, I think</p>",
        "id": 168122523,
        "sender_full_name": "varkor",
        "timestamp": 1560506671
    },
    {
        "content": "<p><code>x.py clean --and=llvm</code> could be more extensible, though I'm not sure what else we might want to clean</p>",
        "id": 168122901,
        "sender_full_name": "varkor",
        "timestamp": 1560507058
    },
    {
        "content": "<p>hang on</p>",
        "id": 168136449,
        "sender_full_name": "eddyb",
        "timestamp": 1560520269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> just to check, regarding removing the <code>llvm-finished-building</code>, I think it only triggers a rebuild if one is actually needed, and only exists because cmake is slow to do that check. is that so?</p>",
        "id": 168136544,
        "sender_full_name": "eddyb",
        "timestamp": 1560520352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> the principled solution is either/both of 1. relative spans (the AST contains lengths instead of absolute positions) 2. token ranges instead of character ranges</p>",
        "id": 168136611,
        "sender_full_name": "eddyb",
        "timestamp": 1560520422
    },
    {
        "content": "<p>if only I had the time to do all this right away...</p>",
        "id": 168136721,
        "sender_full_name": "eddyb",
        "timestamp": 1560520497
    },
    {
        "content": "<p>considering compile times are something we're trying to improve this year, it seems that it would be a good idea to prioritise things like this</p>",
        "id": 168136877,
        "sender_full_name": "varkor",
        "timestamp": 1560520583
    },
    {
        "content": "<p>(as a team, that is)</p>",
        "id": 168136909,
        "sender_full_name": "varkor",
        "timestamp": 1560520608
    },
    {
        "content": "<p>I guess?</p>",
        "id": 168137170,
        "sender_full_name": "eddyb",
        "timestamp": 1560520823
    },
    {
        "content": "<p>okay well there might be enough sketched out in <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> 's note above that I could write up a few sentences proposal for the next rustc planning meeting</p>",
        "id": 168137701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1560521171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> funny you say that...</p>",
        "id": 168141421,
        "sender_full_name": "eddyb",
        "timestamp": 1560523734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <a href=\"https://hackmd.io/zrZhb94HS6KxW3sguwXNqA#B-Mapping-back-to-originsource-can-be-impreciselossy\" target=\"_blank\" title=\"https://hackmd.io/zrZhb94HS6KxW3sguwXNqA#B-Mapping-back-to-originsource-can-be-impreciselossy\">https://hackmd.io/zrZhb94HS6KxW3sguwXNqA#B-Mapping-back-to-originsource-can-be-impreciselossy</a></p>",
        "id": 168141465,
        "sender_full_name": "eddyb",
        "timestamp": 1560523769
    },
    {
        "content": "<p>Perhaps we could just change the user's code ourselves in some non-trivial way? Then we know it should be rebuilt, and that would simplify incremental tremendously...</p>",
        "id": 168228043,
        "sender_full_name": "mark-i-m",
        "timestamp": 1560643211
    },
    {
        "content": "<p>I want to fix up my build system so I won't need to do <code>x.py clean</code> or accidentally break build cache by switching between <code>x.py build</code> and <code>x.py check</code></p>",
        "id": 168228167,
        "sender_full_name": "Zoxc",
        "timestamp": 1560643521
    }
]