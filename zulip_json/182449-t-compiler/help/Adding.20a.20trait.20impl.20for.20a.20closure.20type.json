[
    {
        "content": "<p>Is there any way to add a <em>synthetic</em> (not in source) trait impl for a closure type through the apis? I can't do it at source level as closures have opaque types, but it would <em>really</em> simplify my life if it were possible to do it through the rustc apis at least</p>",
        "id": 271246437,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644397019
    },
    {
        "content": "<p>I  get the impression its not easily possible as it would require at the very least generating a fresh <code>DefId</code></p>",
        "id": 271246637,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644397159
    },
    {
        "content": "<p>That kind of thing exists for closure <code>Clone</code> and <code>Copy</code>, at least</p>",
        "id": 271323896,
        "sender_full_name": "cuviper",
        "timestamp": 1644430582
    },
    {
        "content": "<p>any \"impl\" that doesn't correspond to a real impl in the source is special-cased in the candidate assembly/confirmation logic in rustc_trait_selection. i don't think there's any way of doing this for non-builtin traits...</p>",
        "id": 271363622,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1644449470
    },
    {
        "content": "<p>what are you trying to do, if you can give an example?</p>",
        "id": 271363674,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1644449498
    },
    {
        "content": "<p>yea, I'm tryign to associate a <code>precondition</code> and <code>postcondition</code> function to every closure</p>",
        "id": 271409523,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644487578
    },
    {
        "content": "<p>through a trait</p>",
        "id": 271409533,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644487582
    },
    {
        "content": "<p>in the 'ideal world' it would look something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>trait FnOnceSpec : FnOnce {\n  fn precondition(self) -&gt; bool;\n  fn postcondition(self) -&gt; bool;\n}\n</code></pre></div>",
        "id": 271409594,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644487616
    },
    {
        "content": "<p>and I can provide an impl for every closure (unique to each closure ofc)</p>",
        "id": 271409684,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644487664
    },
    {
        "content": "<p>I could even write the rust syntax for the impl if we were allowed to refer to closure types</p>",
        "id": 271409767,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1644487694
    }
]