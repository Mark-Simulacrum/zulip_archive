[
    {
        "content": "<p>Hello, I would like to implement <code>Copy</code> for zero-length arrays (Tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/94410\">https://github.com/rust-lang/rust/issues/94410</a>).</p>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/feature-gates.html#adding-a-feature-gate\">Guide to Rustc Development</a> explains how to add a feature gate but does not explain what to do if the designed feature depends on existing feature. In case of <code>Copy</code> trait implementation for zero-length arrays, the feature-dependency is <em>presumably</em> min-specialization.</p>",
        "id": 273376003,
        "sender_full_name": "Dmitrii Demenev",
        "timestamp": 1645927820
    },
    {
        "content": "<p>Trait impls cannot be feature gated meaningfully if they are on a stable type.</p>",
        "id": 273376119,
        "sender_full_name": "Jubilee",
        "timestamp": 1645928063
    },
    {
        "content": "<p>Are we then forever stuck with zero-length arrays being non-<code>Copy</code>?</p>",
        "id": 273376827,
        "sender_full_name": "Dmitrii Demenev",
        "timestamp": 1645929093
    },
    {
        "content": "<p>That impl can't be added today because it would overlap with the existing const generic <code>Copy</code> impl, no?</p>",
        "id": 273376868,
        "sender_full_name": "Jake",
        "timestamp": 1645929148
    },
    {
        "content": "<p>So does it mean that the feature must rely not just on min-specialization but on another kind of specialization? I've not delved into the specialization RFC.</p>",
        "id": 273376949,
        "sender_full_name": "Dmitrii Demenev",
        "timestamp": 1645929315
    },
    {
        "content": "<p>It needs lattice specialization for the <code>Clone</code> part, which doesn't even have an RFC yet afaik</p>",
        "id": 273378182,
        "sender_full_name": "Jake",
        "timestamp": 1645931294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310518\">Jake</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/features.20relying.20on.20other.20features/near/273376868\">said</a>:</p>\n<blockquote>\n<p>That impl can't be added today because it would overlap with the existing const generic <code>Copy</code> impl, no?</p>\n</blockquote>\n<p>I suppose another possible way to get it would be to have <code>Copy</code> be a <code>#[marker]</code> trait.  Then there could be the existing const generic impl as well as an overlapping one for <code>[_; 0]</code>.</p>",
        "id": 273378501,
        "sender_full_name": "scottmcm",
        "timestamp": 1645931798
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/94313#issuecomment-1049988605\">https://github.com/rust-lang/rust/issues/94313#issuecomment-1049988605</a> re: marker traits + copy</p>",
        "id": 273378747,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1645932216
    },
    {
        "content": "<p>Yeah, you essentially picked on an issue that is basically doomed to be there for years.<br>\nProbably even if you start working on it now and put in a lot of work.</p>",
        "id": 273379310,
        "sender_full_name": "Jubilee",
        "timestamp": 1645932910
    },
    {
        "content": "<p>Jup, to work towards this we first need lattice specialization to be stable or at least working well enough for us to be confident that we will stabilize it. You could ask <span class=\"user-group-mention silent\" data-user-group-id=\"692\">WG-traits</span> on whether there is currently anyone working on specialization, but I assume that we will first have to make some design decisions on how to avoid the current unsoundness wrt lifetimes</p>",
        "id": 273455079,
        "sender_full_name": "lcnr",
        "timestamp": 1646034740
    },
    {
        "content": "<p>I don't think anyone is currently working on specialization</p>",
        "id": 273529613,
        "sender_full_name": "Jack Huey",
        "timestamp": 1646071323
    }
]