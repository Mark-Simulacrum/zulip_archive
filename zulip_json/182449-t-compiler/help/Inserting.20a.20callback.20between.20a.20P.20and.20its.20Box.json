[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> You might be able to help me with this, being the author of the <code>unsafe-code-guidelines</code> issue. Can either of my unsafe blocks in this commit cause UB? <a href=\"https://github.com/rust-lang/miri/issues/1508#issuecomment-673088912\">This comment</a> on a related issue suggests that in <code>into_box</code> I might want to first place <code>self</code> in a <code>ManuallyDrop</code>, but is that really necessary? Also, after <code>ManuallyDrop::drop</code>ping <code>self.ptr</code> in my <code>Drop</code> impl, is it safe to assume the remaining drop glue doesn't touch it and cause UB?</p>",
        "id": 271511038,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644536455
    },
    {
        "content": "<p>So that I don't lose it, the alternative version of <code>into_box</code> would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">into_box</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">take</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271512090,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644537216
    },
    {
        "content": "<p>generally you want to avoid to call <code>mem::forget</code> after getting your ptr</p>",
        "id": 271683123,
        "sender_full_name": "RalfJ",
        "timestamp": 1644663497
    },
    {
        "content": "<p><code>mem::forget</code> is just a regular function, so by passing it an argument you are making promises that that argument is suitably valid and unaliased</p>",
        "id": 271683136,
        "sender_full_name": "RalfJ",
        "timestamp": 1644663532
    },
    {
        "content": "<p>in your particular case, the type of <code>P</code> probably means this is not an issue (without having delved into all the details here), but really there is no good reason to use <code>mem::forget</code> here. <code>ManuallyDrop</code> is generally preferred and means we do not even have to ask these questions.</p>",
        "id": 271683156,
        "sender_full_name": "RalfJ",
        "timestamp": 1644663580
    },
    {
        "content": "<p>so, the \"alternative version\" you posted here is the one I would recommend using.</p>",
        "id": 271683161,
        "sender_full_name": "RalfJ",
        "timestamp": 1644663591
    },
    {
        "content": "<p>Okay, that makes sense, I'll use the extra <code>ManuallyDrop</code> for <code>into_box</code>. (The main reason I used it there was to prevent my <code>Drop</code> impl from dropping it again; it isn't a \"real\" <code>ManuallyDrop</code> while it's still in the <code>P</code>.)</p>",
        "id": 271694585,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644680597
    },
    {
        "content": "<p>However, are there any validity issues with the <code>Drop</code> impl? Between the <code>ManuallyDrop::drop</code> call and the <code>P::drop</code> method returning, its <code>&amp;mut self</code> reference contains a possibly-invalid <code>ManuallyDrop&lt;Box&lt;T&gt;&gt;</code>.</p>",
        "id": 271694826,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644680913
    },
    {
        "content": "<p>(After <code>P::drop</code> returns, I suspect the drop glue operates on it by raw pointer, since the stack trace always shows recursive <code>ptr::drop_in_place</code> calls.)</p>",
        "id": 271695016,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644681178
    },
    {
        "content": "<p>If it can be possibly-invalid instead of possibly-unsafe, then you probably want a <code>MaybeUninit&lt;T&gt;</code> instead of a <code>ManuallyDrop&lt;T&gt;</code>.  The latter propagates validity invariants; the former does not.</p>\n<div class=\"codehilite\"><pre><span></span><code>[src/main.rs:6] size_of::&lt;Option&lt;MaybeUninit&lt;Box&lt;i32&gt;&gt;&gt;&gt;() = 16\n[src/main.rs:5] size_of::&lt;Option&lt;ManuallyDrop&lt;Box&lt;i32&gt;&gt;&gt;&gt;() = 8\n</code></pre></div>\n<p>&lt;<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=299ad2f60b103b80447cdabf5375140f\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=299ad2f60b103b80447cdabf5375140f</a>&gt;</p>",
        "id": 271704718,
        "sender_full_name": "scottmcm",
        "timestamp": 1644692930
    },
    {
        "content": "<p>As I mentioned above, I can always just use a bog-standard <code>Option&lt;Box&lt;T&gt;&gt;</code> which I <code>take</code> the value from on destruction, using <code>unwrap_unchecked</code> to access it by reference. But I figured that <code>ManuallyDrop</code> makes the most sense on a semantic level, since <code>self.ptr</code> always holds a valid <code>Box&lt;T&gt;</code> for the lifetime of the <code>P</code>. (Also, it has safe<code>Deref</code> and <code>DerefMut</code> impls, since the value is known to be valid.) Most discussions of explicit <code>Drop</code> impls recommend <code>ManuallyDrop</code> fields for full control, so that was my first choice for dropping the <code>Box&lt;T&gt;</code> within an additional callback.</p>",
        "id": 271707654,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1644696881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"429617\">LegionMammal978</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Inserting.20a.20callback.20between.20a.20P.20and.20its.20Box/near/271694826\">said</a>:</p>\n<blockquote>\n<p>However, are there any validity issues with the <code>Drop</code> impl? Following the <code>ManuallyDrop::drop</code> call, any <code>&amp;mut self</code> reference contains a possibly-invalid <code>ManuallyDrop&lt;Box&lt;T&gt;&gt;</code>. The closure borrows <code>&amp;mut self.ptr</code> until it is dropped, and the <code>&amp;mut self</code> reference lives until <code>P::drop</code> returns, if I am not mistaken.</p>\n</blockquote>\n<p>I am not quite sure I understand the question... are you asking of a <code>ManuallDrop&lt;Box&lt;T&gt;&gt;</code> is allowed to dangle (as long as it is not deref'd)? that is probably something we have to allow, as otherwise that combination of types would be rather useless.</p>",
        "id": 272337660,
        "sender_full_name": "RalfJ",
        "timestamp": 1645139386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Inserting.20a.20callback.20between.20a.20P.20and.20its.20Box/near/272337660\">said</a>:</p>\n<blockquote>\n<p>I am not quite sure I understand the question... are you asking of a <code>ManuallDrop&lt;Box&lt;T&gt;&gt;</code> is allowed to dangle (as long as it is not deref'd)? that is probably something we have to allow, as otherwise that combination of types would be rather useless.</p>\n</blockquote>\n<p>Yeah, that's pretty much what I was asking; can we have a mutable reference in scope to a dangling <code>ManuallyDrop&lt;Box&lt;T&gt;&gt;</code> so long as we never read to or write from it again? If not, it would be worth mentioning it in the docs for <code>ManuallyDrop</code>, since in that case its <code>drop</code> and <code>take</code> functions would be extremely unsafe.</p>",
        "id": 272403252,
        "sender_full_name": "LegionMammal978",
        "timestamp": 1645192071
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/245\">https://github.com/rust-lang/unsafe-code-guidelines/issues/245</a></p>",
        "id": 272602015,
        "sender_full_name": "RalfJ",
        "timestamp": 1645374503
    }
]