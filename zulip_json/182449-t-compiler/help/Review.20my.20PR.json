[
    {
        "content": "<p>Hi, my PR currently waits for review for two weeks now, I would appreciate if someone did it soon <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <br>\n<a href=\"https://github.com/rust-lang/rust/pull/82191\">https://github.com/rust-lang/rust/pull/82191</a></p>",
        "id": 229484468,
        "sender_full_name": "Soveu",
        "timestamp": 1615299901
    },
    {
        "content": "<p>Thank you for contributing! I took a look through the PR and added some comments.</p>",
        "id": 229487827,
        "sender_full_name": "nagisa",
        "timestamp": 1615301195
    },
    {
        "content": "<p>Looks like my comments in code aren't clear enough, should i maybe redo them?</p>",
        "id": 229492794,
        "sender_full_name": "Soveu",
        "timestamp": 1615303078
    },
    {
        "content": "<p>Nah, I think they're fine.</p>",
        "id": 229493685,
        "sender_full_name": "nagisa",
        "timestamp": 1615303430
    },
    {
        "content": "<p>i have a little problem with benchmarks - they are too inconsistent<br>\nsometimes my code is nearly twice as fast, sometimes i lose 50% of performance somewhere<br>\nplus i have other idea for this function, which relies more heavily on memmove, which again makes benchmarking less consistent across AMD and Intel platforms</p>",
        "id": 229733884,
        "sender_full_name": "Soveu",
        "timestamp": 1615406841
    },
    {
        "content": "<p>in my experience that can happen for a couple of reasons, a noisy benchmarking environment &amp; extremely light benchmarked code being two.</p>",
        "id": 229734194,
        "sender_full_name": "nagisa",
        "timestamp": 1615406951
    },
    {
        "content": "<p>so for instance for dedup_by, I would look at running this code on vectors of 10k or 100k elements or similar.</p>",
        "id": 229734230,
        "sender_full_name": "nagisa",
        "timestamp": 1615406980
    },
    {
        "content": "<p>once the benchmarks get into a millisecond-per-iteration range, the noise gets amortized somewhat.</p>",
        "id": 229734453,
        "sender_full_name": "nagisa",
        "timestamp": 1615407036
    },
    {
        "content": "<p>i did like 1000 iterations for 100k elements and had very different results than with 100 iters and 1m elements<br>\nAlso somehow using i16 instead of u16 also was changing the results</p>",
        "id": 229735054,
        "sender_full_name": "Soveu",
        "timestamp": 1615407229
    },
    {
        "content": "<p>For today, I'm kinda tired<br>\nProbably tommorow I'm gonna write a better benchmarker, because now it's singlethreaded and not really optimized</p>",
        "id": 229736181,
        "sender_full_name": "Soveu",
        "timestamp": 1615407594
    },
    {
        "content": "<p>Should just use <code>#[bench]</code> I think. If that doesn't give great resultsâ€¦ then oh well.</p>",
        "id": 229740150,
        "sender_full_name": "nagisa",
        "timestamp": 1615408820
    },
    {
        "content": "<p>You should monitor your CPU frequencies when benchmarking. If they vary a lot then disabling turbo can return more consistent results</p>",
        "id": 229908173,
        "sender_full_name": "The 8472",
        "timestamp": 1615489958
    },
    {
        "content": "<p>Looking at the assembly output of individual benchmarks can help too. E.g. it helps spotting cases where it optimizes away too much and you need to add black_box.</p>",
        "id": 229908782,
        "sender_full_name": "The 8472",
        "timestamp": 1615490197
    },
    {
        "content": "<p>Besides <code>Instant::elapsed</code> i also use rdtsc to measure cpu cycles</p>",
        "id": 229926707,
        "sender_full_name": "Soveu",
        "timestamp": 1615497177
    },
    {
        "content": "<p>for now i need something to make nice graphs :D</p>",
        "id": 229927148,
        "sender_full_name": "Soveu",
        "timestamp": 1615497351
    },
    {
        "content": "<p>Ok, finally I'm done with it</p>",
        "id": 230416903,
        "sender_full_name": "Soveu",
        "timestamp": 1615841774
    },
    {
        "content": "<p>rdtsc counts reference clocks, not instructions. And Instant already boils down to rdtsc (+ some simple arithmetic) on some platforms. If you want to count instructions and you're on linux you can use <code>perf stat</code>.</p>",
        "id": 230424330,
        "sender_full_name": "The 8472",
        "timestamp": 1615845126
    }
]