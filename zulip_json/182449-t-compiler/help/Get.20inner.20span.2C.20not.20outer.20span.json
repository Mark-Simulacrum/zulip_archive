[
    {
        "content": "<p>For <a href=\"https://github.com/rust-lang/rust/pull/80339\">https://github.com/rust-lang/rust/pull/80339</a>, I'm trying to calculate spans on demand instead of special casing them in rustdoc. The current CI failure is</p>\n<div class=\"codehilite\"><pre><span></span><code>std/primitive.slice.html:1416: broken link - src/core/slice/ascii.rs.html\n</code></pre></div>\n<p>which happens because the new spans are outer spans, not inner spans:</p>\n<div class=\"codehilite\"><pre><span></span><code>418452:DEBUG rustdoc::html::sources considering item DefId(0:7186 ~ core[8787]::slice::ascii) with span Span(library/core/src/slice/mod.rs:30:1: 30:11 (#0))\n</code></pre></div>\n<p>Is there a way to tell <code>def_span</code> to give me the inner span instead? Or is that already the default behavior and I'm confusing myself?</p>\n<p>Here's my implementation of <code>span()</code> for <code>clean::Item</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ItemKind</span>::<span class=\"n\">ModuleItem</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">override_span</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">span</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">is_fake</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">Span</span>::<span class=\"n\">dummy</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">span_with_body</span><span class=\"p\">(</span><span class=\"n\">hir</span><span class=\"p\">.</span><span class=\"n\">local_def_id_to_hir_id</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">def_span</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">Span</span>::<span class=\"n\">from_rustc_span</span><span class=\"p\">(</span><span class=\"n\">sp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// this is just calling `source_callsite()`</span>\n</code></pre></div>",
        "id": 222233464,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610302243
    },
    {
        "content": "<p>the really frustrating thing is I haven't been able to reproduce the failures on anything smaller than <code>core</code></p>",
        "id": 222233715,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610302605
    },
    {
        "content": "<p>oh I take it back, I came up with an MCVE:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// lib.rs</span>\n<span class=\"k\">mod</span> <span class=\"nn\">span</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// span.rs</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>that shows <code>[src]</code> for <code>fn f</code> on nightly, and the whole file is missing with my changes</p>",
        "id": 222234022,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610303081
    },
    {
        "content": "<p>I don't understand the issue. Which is the span you want, and which one do you actually get?</p>",
        "id": 222234201,
        "sender_full_name": "cjgillot",
        "timestamp": 1610303325
    },
    {
        "content": "<p>I want a span pointing to <a href=\"https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/library/core/src/slice/ascii.rs#L1\">https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/library/core/src/slice/ascii.rs#L1</a>. Instead I get a span pointing to <a href=\"https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/library/core/src/slice/mod.rs#L30\">https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/library/core/src/slice/mod.rs#L30</a>.</p>",
        "id": 222234421,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610303621
    },
    {
        "content": "<p>In your PR, I don't understand why you need to special-case ModuleItem. The former version did not, dit it?</p>",
        "id": 222235149,
        "sender_full_name": "cjgillot",
        "timestamp": 1610304691
    },
    {
        "content": "<p>The former version special case them: <a href=\"https://github.com/rust-lang/rust/pull/80339/files#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9L249\">https://github.com/rust-lang/rust/pull/80339/files#diff-384affc1b4190940f114f3fcebbf969e7e18657a71ef9001da6b223a036687d9L249</a></p>",
        "id": 222235444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610305170
    },
    {
        "content": "<p>I <em>thought</em> I was preserving the same behavior but apparently not</p>",
        "id": 222235544,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610305291
    }
]