[
    {
        "content": "<p>I'm trying to store a <code>thir::Arena</code> and an allocated <code>&amp;thir::Expr</code> in a struct, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Thir</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">thir</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">thir</span> <span class=\"nc\">Expr</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arena</span>: <span class=\"nc\">Arena</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">build_thir</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">owner_def</span>: <span class=\"nc\">ty</span>::<span class=\"n\">WithOptConstParam</span><span class=\"o\">&lt;</span><span class=\"n\">LocalDefId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">expr</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">Expr</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Thir</span><span class=\"o\">&lt;'</span><span class=\"na\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Arena</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Cx</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">owner_def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">arena</span><span class=\"p\">).</span><span class=\"n\">mirror_expr</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Thir</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">thir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arena</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But the borrow checker apparently complains that <code>arena</code> is borrowed:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>error[E0515]: cannot return value referencing local variable `arena`\n  --&gt; compiler/rustc_mir_build/src/thir/cx/mod.rs:29:5\n   |\n28 |     let thir = Cx::new(tcx, owner_def, &amp;arena).mirror_expr(expr);\n   |                                        ------ `arena` is borrowed here\n29 |     Thir { thir, arena }\n   |     ^^^^^^^^^^^^^^^^^^^^ returns a value referencing data owned by the current function\n\nerror[E0505]: cannot move out of `arena` because it is borrowed\n  --&gt; compiler/rustc_mir_build/src/thir/cx/mod.rs:29:18\n   |\n22 | pub fn build_thir&lt;'thir, 'tcx&gt;(\n   |                   ----- lifetime `'thir` defined here\n...\n28 |     let thir = Cx::new(tcx, owner_def, &amp;arena).mirror_expr(expr);\n   |                                        ------ borrow of `arena` occurs here\n29 |     Thir { thir, arena }\n   |     -------------^^^^^--\n   |     |            |\n   |     |            move out of `arena` occurs here\n   |     returning this value requires that `arena` is borrowed for `'thir`\n</code></pre></div>\n<p>How can I explain to the compiler what I want? Is it possible? How do other parts of the compiler do this? The end goal is to be able to put the generated <code>Thir</code> body in a <code>Steal</code> for a query</p>",
        "id": 232954382,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617398887
    },
    {
        "content": "<p>Other parts of the compiler don't do this :)<br>\n<code>rustc_data_structures::owning_ref</code> may be interesting.</p>",
        "id": 232955839,
        "sender_full_name": "cjgillot",
        "timestamp": 1617399806
    },
    {
        "content": "<p>At least the HIR does not.</p>",
        "id": 232955859,
        "sender_full_name": "cjgillot",
        "timestamp": 1617399820
    },
    {
        "content": "<p>Actually, I am not sure using an arena is the best solution for THIR. Since THIR is typically shallow and with only few types of nodes, I would have recommended the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct Thir&lt;&#39;tcx&gt; {\n  arms: IndexVec&lt;ArmId, Arm&lt;&#39;tcx&gt;&gt;,\n  exprs: IndexVec&lt;ExprId, Expr&lt;&#39;tcx&gt;&gt;,\n  field_exprs: IndexVec&lt;FieldExprId, FieldExpr&lt;&#39;tcx&gt;&gt;,\n  stmts: IndexVec&lt;StmtId, Stmt&lt;&#39;tcx&gt;&gt;,\n}\n</code></pre></div>\n<p>and use <code>ArmId</code>, <code>ExprId</code>... instead of pointers, and <code>Box&lt;InlineAsmOperand&lt;'tcx&gt;&gt;</code> instead of a reference.<br>\nThis should make borrow checking much easier, and consume a bit less memory (replace 64bit pointers by 32bit or 16bit indices).</p>",
        "id": 232958454,
        "sender_full_name": "cjgillot",
        "timestamp": 1617401910
    },
    {
        "content": "<p>So that would be closest to the MIR, correct? I'll go ahead and try to implement this approach, so that we can measure the perf implications of this change</p>",
        "id": 232993764,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617441644
    },
    {
        "content": "<p>Thanks for the help by the way <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 232993801,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1617441677
    }
]