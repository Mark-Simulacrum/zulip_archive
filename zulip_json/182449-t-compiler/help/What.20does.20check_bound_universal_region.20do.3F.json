[
    {
        "content": "<p>Hello, everyone. I am someone who is trying to contribute to Rust and I decided to start seriously looking into an issue today just to get familiar with some of the code. I chose issue 88434 (<a href=\"https://github.com/rust-lang/rust/issues/88434\">https://github.com/rust-lang/rust/issues/88434</a>) and after some debugging, I found the ICE occurs while trying to report some error that happened during region inference. The following came up in the logs:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_mir::borrow_check::region_infer check_universal_region(fr=&#39;_#0r)\nDEBUG rustc_mir::borrow_check::region_infer check_universal_region(fr=&#39;_#1r)\nDEBUG rustc_mir::borrow_check::region_infer check_bound_universal_region(fr=&#39;_#30r, placeholder=Placeholder { universe: U1, name: BrAnon(0) })\nDEBUG rustc_mir::borrow_check::region_infer check_bound_universal_region: longer_fr_scc=ConstraintSccIndex(14)\nDEBUG rustc_mir::borrow_check::region_infer check_bound_universal_region: error_element = Location(bb0[1])\nDEBUG rustc_mir::borrow_check::region_infer check_bound_universal_region(fr=&#39;_#33r, placeholder=Placeholder { universe: U2, name: BrAnon(0) })\nDEBUG rustc_mir::borrow_check::region_infer check_bound_universal_region: longer_fr_scc=ConstraintSccIndex(15)\nDEBUG rustc_mir::borrow_check::region_infer check_bound_universal_region: error_element = Location(bb0[1])\n</code></pre></div>\n<p>Here, check_bound_universal_region generates a BoundUniversalRegionError saying that the region '#_30r does not outlive the error_element=Location(bb0[1]). However, there was also another debug statement below which I think shows that '#_30r is actually live at the location bb0[1]:</p>\n<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_mir::borrow_check::region_infer find_sub_region_live_at: liveness_constraints for &#39;_#30r are &quot;{bb0[1]}&quot;\n</code></pre></div>\n<p>This ultimately leads to the ICE reported in the issue because when report_region_errors tries to report this error, it calls find_outlives_blame_span, which calls best_blame_constraint, which tries to find a path from the region '#_30r to the region live at Location(bb0[1]), which is just '#_30r, which results in an empty path, which means that calling <code>.remove(0)</code> on that path is an out of bounds error.</p>\n<p>I suspect the cause of this issue is that check_bound_universal_region is generating a bad error: It is reporting that '#_30r does not outlive Location(bb0[1]) even though the region is indeed live at that location. However, I am not sure where to go from here because I do not understand how check_bound_universal_region works. Specifically, I don't understand this comment:</p>\n<div class=\"codehilite\"><pre><span></span><code>        // If we have some bound universal region `&#39;a`, then the only\n        // elements it can contain is itself -- we don&#39;t know anything\n        // else about it!\n</code></pre></div>\n<p>Could someone explain what it means for a universal region to be \"bound,\" and why such universal regions can never contain anything other than themselves? Thank you for helping me with solving my first issue!</p>",
        "id": 251153416,
        "sender_full_name": "Noble Mushtak (he/him)",
        "timestamp": 1630266093
    },
    {
        "content": "<p>I'm not very knowledgeable about this code, but these docs may be useful: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/region_infer/struct.RegionInferenceContext.html#method.check_universal_regions\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/borrow_check/region_infer/struct.RegionInferenceContext.html#method.check_universal_regions</a></p>",
        "id": 251160981,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630274513
    },
    {
        "content": "<p>A \"universal region\" is a lifetime parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// 'a is a \"universal region\"</span>\n</code></pre></div>",
        "id": 251161062,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630274551
    },
    {
        "content": "<p>The <code>&lt;'a&gt;</code> is the \"binding site\" of <code>'a</code>.</p>",
        "id": 251161118,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630274572
    },
    {
        "content": "<p>This section of the rustc-dev-guide may be useful: <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference.html\">https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference.html</a></p>",
        "id": 251161248,
        "sender_full_name": "Noah Lev",
        "timestamp": 1630274691
    }
]