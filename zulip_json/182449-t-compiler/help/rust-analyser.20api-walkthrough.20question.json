[
    {
        "content": "<p>Hi, </p>\n<p>I went through the Rust-analyser walkthrough method and println!'d the following variable: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/syntax/src/lib.rs#L391\">https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/syntax/src/lib.rs#L391</a></p>\n<p>On my computer I got the following expressions:</p>\n<div class=\"codehilite\"><pre><span></span><code>exprs_visit = [\n    &quot;{\\n            1 + 1\\n        }&quot;,\n    &quot;1 + 1&quot;,\n    &quot;1&quot;,\n    &quot;1&quot;,\n]\n</code></pre></div>\n<p>for</p>\n<div class=\"codehilite\"><pre><span></span><code>fn foo() {\n1 + 1\n}\n</code></pre></div>\n<p>The first two expressions are essentially  the same, is this expected?</p>",
        "id": 218949598,
        "sender_full_name": "kev",
        "timestamp": 1607196883
    },
    {
        "content": "<p>That's the block expression <code>{ 1 + 1 }</code>, which is different from <code>1  + 1</code> (which is the blocks <em>trailing</em> expression)</p>",
        "id": 218949706,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607197062
    },
    {
        "content": "<p>For the general case, I think it could be expected since you may want to state that a block is an expression?</p>",
        "id": 218949710,
        "sender_full_name": "kev",
        "timestamp": 1607197071
    },
    {
        "content": "<p>Function bodies are represented as block expressions in r-a's syntax tree</p>",
        "id": 218949768,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607197131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/rust-analyser.20api-walkthrough.20question/near/218949768\">said</a>:</p>\n<blockquote>\n<p>Function bodies are represented as block expressions in r-a's syntax tree</p>\n</blockquote>\n<p>Oh that makes sense, thanks for clearing that up. Am I also correct in saying that if I wanted to get the function foo twice, it would require a full traversal of the tree each time?</p>\n<p>ie I cannot directly get foo based on it's name \"foo\" since no map exists?</p>",
        "id": 218949846,
        "sender_full_name": "kev",
        "timestamp": 1607197216
    },
    {
        "content": "<p>I think so? I don't see another way to search the syntax tree otherwise</p>",
        "id": 218949902,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607197321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/rust-analyser.20api-walkthrough.20question/near/218949902\">said</a>:</p>\n<blockquote>\n<p>I think so? I don't see another way to search the syntax tree otherwise</p>\n</blockquote>\n<p>Ahh okay makes sense, thank you</p>",
        "id": 218949966,
        "sender_full_name": "kev",
        "timestamp": 1607197380
    },
    {
        "content": "<p>I mean, you can also just clone the <code>SyntaxNode</code> and reuse it</p>",
        "id": 218950001,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607197441
    },
    {
        "content": "<p>not sure what you're after</p>",
        "id": 218950080,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607197525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/rust-analyser.20api-walkthrough.20question/near/218950080\">said</a>:</p>\n<blockquote>\n<p>not sure what you're after</p>\n</blockquote>\n<p>Oh sorry it was a hypothetical optimisation. In most cases, I would do as you said above and clone the Rc</p>",
        "id": 218950140,
        "sender_full_name": "kev",
        "timestamp": 1607197587
    }
]