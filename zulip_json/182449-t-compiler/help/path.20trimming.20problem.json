[
    {
        "content": "<p>Hi,</p>\n<p>Our rustc fork made use of <code>tcx.def_path_str</code> in the codegen, which now I believe is disallowed.</p>\n<p>What would be the correct way to get the old behaviour in the codegen?</p>\n<p>I've tried using <code>tcx.def_path_debug_str</code> and <code>with_no_trimmed_paths</code> to no avail.</p>\n<p>Thanks</p>",
        "id": 209283105,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1599476564
    },
    {
        "content": "<p>It really sounds like <code>with_no_trimmed_paths</code> is what I need, but alas no:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">-bx.tcx().def_path_str(inst.def_id())</span>\n<span class=\"gi\">+ with_no_trimmed_paths(|| bx.tcx().def_path_debug_str(inst.def_id()))</span>\n</code></pre></div>\n\n\n<p>gives:</p>\n<p><code>no warnings or errors encountered even though delayed_good_path_bugs issued</code></p>",
        "id": 209283621,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1599476958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244331\">@da-x</span> This seems to be caused by your PR <a href=\"https://github.com/rust-lang/rust/issues/73996\">#73996</a>. Maybe you could help with this.</p>",
        "id": 209283744,
        "sender_full_name": "bjorn3",
        "timestamp": 1599477064
    },
    {
        "content": "<p>The panic should also gives a full backtrace of the context triggering it</p>",
        "id": 209284375,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1599477594
    },
    {
        "content": "<p>Note that there may be two backtraces - the first one should be the one leading up to <code>def_path_str</code>, and would tell you where <code>with_no_trimmed_paths</code> is missing, the second one is just the later diagnostics panicking.</p>",
        "id": 209286359,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1599479053
    },
    {
        "content": "<p>Ah, think I got it. It looks like it's caused by debug printing <code>ty.kind</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: delayed at    0: rustc_errors::Handler::delay_good_path_bug\n             1: rustc_middle::ty::print::pretty::trimmed_def_paths\n             2: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::trimmed_def_paths&gt;::compute\n             3: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n             4: rustc_data_structures::stack::ensure_sufficient_stack\n             5: rustc_query_system::query::plumbing::get_query_impl\n             6: &lt;rustc_middle::ty::print::pretty::FmtPrinter&lt;F&gt; as rustc_middle::ty::print::Printer&gt;::print_def_path\n             7: rustc_middle::ty::print::Printer::default_print_def_path\n             8: &lt;rustc_middle::ty::print::pretty::FmtPrinter&lt;F&gt; as rustc_middle::ty::print::Printer&gt;::print_def_path\n             9: &lt;rustc_middle::ty::print::pretty::FmtPrinter&lt;F&gt; as rustc_middle::ty::print::pretty::PrettyPrinter&gt;::generic_delimiters\n            10: rustc_middle::ty::print::Printer::default_print_def_path\n            11: &lt;rustc_middle::ty::print::pretty::FmtPrinter&lt;F&gt; as rustc_middle::ty::print::Printer&gt;::print_def_path\n            12: rustc_middle::ty::print::pretty::PrettyPrinter::pretty_print_const\n            13: rustc_middle::mir::pretty_print_const\n            14: core::fmt::write\n            15: &lt;core::fmt::Formatter as core::fmt::Write&gt;::write_fmt\n            16: &lt;rustc_middle::mir::Constant as core::fmt::Debug&gt;::fmt\n            17: core::fmt::write\n            18: alloc::fmt::format\n            19: rustc_codegen_ssa::sir::SirFuncCx::lower_operand\n            20: rustc_codegen_ssa::sir::SirFuncCx::lower_statement\n            21: rustc_codegen_ssa::mir::codegen_mir\n...\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>385     fn lower_scalar(&amp;self, ty: Ty&lt;&#39;_&gt;, s: mir::interpret::Scalar) -&gt; ykpack::Constant {\n386         match ty.kind {\n387             ty::Uint(uint) =&gt; self\n388                 .lower_uint(uint, s)\n389                 .map(|i| ykpack::Constant::Int(ykpack::ConstantInt::UnsignedInt(i)))\n390                 .unwrap_or_else(|_| {\n391                     ykpack::Constant::Unimplemented(format!(\n392                         &quot;unimplemented uint scalar: {:?}&quot;,\n393                         ty.kind\n394                     ))\n395                 }),\n</code></pre></div>",
        "id": 209289780,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1599481556
    },
    {
        "content": "<p>So assuming that's correct, is there a missing <code>tcx.def_path_debug_str()</code> for constants perhaps?</p>",
        "id": 209289985,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1599481671
    },
    {
        "content": "<p>Or perhaps I'm not supposed to be debug printing that late in the compiler</p>",
        "id": 209290362,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1599481906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223288\">@Edd Barrett</span> I'm curious: rustc fork?</p>",
        "id": 209306730,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599492069
    },
    {
        "content": "<p>I'll respond in PM so as to keep this thread  on-topic</p>",
        "id": 209306782,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1599492112
    },
    {
        "content": "<p>Yes, the problem was that debug impls of some things we were using call <code>def_path_str</code>. Fixed. Thanks!</p>",
        "id": 209310662,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1599495110
    },
    {
        "content": "<p>Maybe it's worth to mention that with the PR merged, there's a difference in how <code>Display</code> and <code>Debug</code> of various rustc types is implemented. Before this, these two used to emit the same string. Now, path trimming is turned off in the <code>Debug</code> impl, and enabled in the <code>Display</code> impl, which is meant for diagnostics. It's now more similar to the intended use of these traits by Rust developers.</p>",
        "id": 209323698,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1599507787
    }
]