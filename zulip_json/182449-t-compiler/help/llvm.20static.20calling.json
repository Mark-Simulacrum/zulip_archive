[
    {
        "content": "<p>If anyone here has thoughts on how to fix the problem described here: <a href=\"https://github.com/rust-lang/rust/pull/67502#issuecomment-580305566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67502#issuecomment-580305566\">https://github.com/rust-lang/rust/pull/67502#issuecomment-580305566</a> I'd love to hear them</p>",
        "id": 186997228,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397941
    },
    {
        "content": "<p>the static is <code>static FOO: unsafe extern \"C\" fn(*mut u8) -&gt; ! = ...</code> fwiw</p>",
        "id": 186997308,
        "sender_full_name": "simulacrum",
        "timestamp": 1580397968
    },
    {
        "content": "<p>Try inserting a load here: <a href=\"https://github.com/Mark-Simulacrum/rust/blob/opt-catch/src/librustc_codegen_ssa/mir/block.rs#L187\" target=\"_blank\" title=\"https://github.com/Mark-Simulacrum/rust/blob/opt-catch/src/librustc_codegen_ssa/mir/block.rs#L187\">https://github.com/Mark-Simulacrum/rust/blob/opt-catch/src/librustc_codegen_ssa/mir/block.rs#L187</a></p>",
        "id": 186997382,
        "sender_full_name": "Amanieu",
        "timestamp": 1580398029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> so <code>bx.load_operand(bx.eh_unwind_resume()).immediate()</code>?</p>",
        "id": 186997558,
        "sender_full_name": "simulacrum",
        "timestamp": 1580398129
    },
    {
        "content": "<p>maybe the problem is really with eh_unwind_resume itself, and the fallback case of the \"declare_fn\" being wrong now (since there's no such fn)</p>",
        "id": 186997619,
        "sender_full_name": "simulacrum",
        "timestamp": 1580398183
    },
    {
        "content": "<p>Well you're definitely missing a load instruction. You can't call a static, you need to get the function pointer out of it first.</p>",
        "id": 186997880,
        "sender_full_name": "Amanieu",
        "timestamp": 1580398366
    },
    {
        "content": "<p>hm, what does get_static do then?</p>",
        "id": 186997929,
        "sender_full_name": "simulacrum",
        "timestamp": 1580398400
    },
    {
        "content": "<p>I'm not too familiar with the codegen API, so I can't really tell you what the correct method to use on <code>bx</code> is.</p>",
        "id": 186997936,
        "sender_full_name": "Amanieu",
        "timestamp": 1580398405
    },
    {
        "content": "<p>i.e. what is it returning?</p>",
        "id": 186997937,
        "sender_full_name": "simulacrum",
        "timestamp": 1580398406
    },
    {
        "content": "<p>A pointer to the static?</p>",
        "id": 186997951,
        "sender_full_name": "Amanieu",
        "timestamp": 1580398412
    },
    {
        "content": "<p>oh, so I thought it was a load</p>",
        "id": 186997962,
        "sender_full_name": "simulacrum",
        "timestamp": 1580398421
    },
    {
        "content": "<p>but I guess a pointer makes more sense</p>",
        "id": 186997968,
        "sender_full_name": "simulacrum",
        "timestamp": 1580398427
    },
    {
        "content": "<p>It still looks wrong. The second half of <code>eh_unwind_resume</code> in <code>context.rs</code> declares <code>rust_eh_unwind_resume</code> as a function pointer if it can't find the lang item (which is the case when compiling libcore). You need to change that half to declare <code>rust_eh_unwind_resume</code> as a static and return a pointer to it.</p>",
        "id": 186999343,
        "sender_full_name": "Amanieu",
        "timestamp": 1580399242
    },
    {
        "content": "<p>That way you can just have an unconditional load in <code>codegen_resume_terminator</code>.</p>",
        "id": 186999474,
        "sender_full_name": "Amanieu",
        "timestamp": 1580399305
    },
    {
        "content": "<p>I think the code right now is correct, just \"wrong\" in the sense that it's not as nice as it could be, right? I'm thinking that unconditionally returning a function pointer from <code>eh_unwind_resume</code> is the right thing to do, and then we don't need a static, right?</p>",
        "id": 187026376,
        "sender_full_name": "simulacrum",
        "timestamp": 1580415474
    },
    {
        "content": "<p>(in the second case)</p>",
        "id": 187026429,
        "sender_full_name": "simulacrum",
        "timestamp": 1580415488
    },
    {
        "content": "<p>That won't work since the value is cached. You need to emit a load instruction at every use point.</p>",
        "id": 187028370,
        "sender_full_name": "Amanieu",
        "timestamp": 1580416908
    },
    {
        "content": "<p>hm, right, that makes sense -- we can't stick a load instruction into nowhere, I guess?</p>",
        "id": 187028464,
        "sender_full_name": "simulacrum",
        "timestamp": 1580416958
    },
    {
        "content": "<p>bit sad to have to load from memory every time, but I guess maybe the optimizer can optimize away the load too</p>",
        "id": 187028484,
        "sender_full_name": "simulacrum",
        "timestamp": 1580416979
    },
    {
        "content": "<p>It should be able to optimize it away with LTO since the static is a constant.</p>",
        "id": 187028520,
        "sender_full_name": "Amanieu",
        "timestamp": 1580417015
    },
    {
        "content": "<p>is this done with weak linkage or something?</p>",
        "id": 191655731,
        "sender_full_name": "eddyb",
        "timestamp": 1585075570
    }
]