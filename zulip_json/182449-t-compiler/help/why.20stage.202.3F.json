[
    {
        "content": "<p>Honest question: why do we have stage 2 of bootstrapping? Why not just build the compiler once with the beta and be done with it?</p>",
        "id": 198962285,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590618906
    },
    {
        "content": "<p>stage two has been useful for me with the polymorphisation work - it acted like a whole other test suite, catching a ton of cases that running every test with stage one didn't. There are probably better reasons than that, but there's one reason.</p>",
        "id": 198997730,
        "sender_full_name": "davidtwco",
        "timestamp": 1590656435
    },
    {
        "content": "<p>Stage 1 also does not use any compiler optimizations added since the last beta, so stage 2 is faster than stage 1 in some cases.</p>",
        "id": 198998771,
        "sender_full_name": "lcnr",
        "timestamp": 1590657162
    },
    {
        "content": "<p>When doing local development, it doesn't matter -- well, beyond what <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> mentions -- but in CI we want to build the compiler twice so that we can ship rustc-dev and let people like clippy or miri developers use a nightly toolchain and link against the compiler libraries</p>",
        "id": 199016053,
        "sender_full_name": "simulacrum",
        "timestamp": 1590669530
    },
    {
        "content": "<p>w/o stage 2 builds if you wanted to link against the compiler you'd have to build it yourself, as the stage 1 compiler is not ABI compatible with libraries it produces, so you can't link against it</p>",
        "id": 199016117,
        "sender_full_name": "simulacrum",
        "timestamp": 1590669575
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 199092106,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590703493
    },
    {
        "content": "<p>I've been thinking about this a bit in the context of simplifying contributor setup costs. With infinite time and energy, it seems like it would be possible to eventually get to a place where a new contributor just does <code>rustup install beta</code> then <code>cargo +beta build</code> to build to build the compiler. Likewise, maybe libstd, clippy, miri could be made to use pre-compiled artifacts so that those contributors don't have to build the compiler at all...</p>",
        "id": 199092414,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590703684
    },
    {
        "content": "<p>Does that seem like a practical future outcome at all? Or are there fundamental blockers to achieving such a thing?</p>",
        "id": 199092461,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590703718
    },
    {
        "content": "<p>the first step to getting that to work is to decouple the compiler from std -- i.e., the compiler stops using std unstable features</p>",
        "id": 199093479,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704508
    },
    {
        "content": "<p>alternatively, you need built-in-to cargo support for building std (e.g. -Zbuild-std)</p>",
        "id": 199093546,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704528
    },
    {
        "content": "<p>hmm... why? doesn't it only mean the compiler has to wait 6 weeks before using unstable features?</p>",
        "id": 199093608,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704585
    },
    {
        "content": "<p>I guess we would just need a notion of \"unstable on beta\"</p>",
        "id": 199093625,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704599
    },
    {
        "content": "<p>or am I missing something?</p>",
        "id": 199093638,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704610
    },
    {
        "content": "<p>yeah, it does</p>",
        "id": 199093737,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704656
    },
    {
        "content": "<p>so today we build std and then link against it when building the compiler</p>",
        "id": 199093760,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704679
    },
    {
        "content": "<p>cargo has no fully 100% working support for doing this though, so we run cargo twice</p>",
        "id": 199093781,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704701
    },
    {
        "content": "<p>I'm hopeful that -Zbuild-std will eventually get to the point that we can use that, though</p>",
        "id": 199093801,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704712
    },
    {
        "content": "<p>I think a far more likely short-term goal is that we can get something like this to work, which would install the master (or most recent bors commit) for you</p>\n<div class=\"codehilite\"><pre><span></span><code>./prepare-toolchain.sh\ncargo +rustc-master build -p rustc\n</code></pre></div>",
        "id": 199093875,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704768
    },
    {
        "content": "<p>that should basically just work today</p>",
        "id": 199093891,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704778
    },
    {
        "content": "<p>Another question: why not just use _yesterday's_ nightly?</p>",
        "id": 199093936,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704806
    },
    {
        "content": "<p>though, I guess people would need to keep updating their nightly...</p>",
        "id": 199093960,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704820
    },
    {
        "content": "<p>or is that what you just suggested?</p>",
        "id": 199094030,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590704879
    },
    {
        "content": "<p>nightly won't necessarily work</p>",
        "id": 199094083,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704886
    },
    {
        "content": "<p>but \"master\" always will</p>",
        "id": 199094091,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704895
    },
    {
        "content": "<p>(note that every day those two diverge until they resync)</p>",
        "id": 199094124,
        "sender_full_name": "simulacrum",
        "timestamp": 1590704918
    },
    {
        "content": "<p>well, it won't always work under the current system, but suppose we said that you need to wait 1 week to use new features on nightly... then we could have a <code>dev</code> channel that you only need to sync every week, and any master commit can be built by that week's <code>dev</code> compiler</p>",
        "id": 199094238,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705010
    },
    {
        "content": "<p>or put more generally:</p>",
        "id": 199094293,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705058
    },
    {
        "content": "<p>note that it's not just about unstable features</p>",
        "id": 199094304,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705067
    },
    {
        "content": "<p>you also have things like lang items</p>",
        "id": 199094311,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705071
    },
    {
        "content": "<p>if you don't guarantee master, you need basically cfg(bootstrap) and cfg(some_recent_nightly)</p>",
        "id": 199094327,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705087
    },
    {
        "content": "<p>which is a bit annoying</p>",
        "id": 199094333,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705095
    },
    {
        "content": "<p>some_recent_nightly, notably, needs to go <em>into the compiler</em> which we've so far avoided for cfg(bootstrap)</p>",
        "id": 199094396,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705124
    },
    {
        "content": "<p>we would make a distribution not ABI compatible with itself</p>",
        "id": 199094411,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705138
    },
    {
        "content": "<p>I don't see how that helps anything</p>",
        "id": 199094441,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705154
    },
    {
        "content": "<p>hmm, i need to chew on that</p>",
        "id": 199094442,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705155
    },
    {
        "content": "<p>to be clear, I think there are ergonomic wins to be had at low cost today</p>",
        "id": 199094455,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705173
    },
    {
        "content": "<p>there's just need for some design bandwidth to eke out the best UI and such for it</p>",
        "id": 199094468,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705185
    },
    {
        "content": "<p>hmm, yeah, I'm conflating stage-2 with the bootstrap compiler</p>",
        "id": 199094480,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705193
    },
    {
        "content": "<p>could you elaborate a bit more regarding lang item? could you give an example?</p>",
        "id": 199094575,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705255
    },
    {
        "content": "<p>so today when you add a lang item to std, the compiler can always assume it exists</p>",
        "id": 199094648,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705319
    },
    {
        "content": "<p>but if you're not building with the std in tree, that's no longer true</p>",
        "id": 199094669,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705334
    },
    {
        "content": "<p>when you say \"the compiler\" do you mean the one we are compiling with or the one we are compiling?</p>",
        "id": 199094775,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705402
    },
    {
        "content": "<p>ah well, okay, so actually I guess you're going to end up building std anyway to use it</p>",
        "id": 199094858,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705471
    },
    {
        "content": "<p>so that's not a concern too much</p>",
        "id": 199094862,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705476
    },
    {
        "content": "<p>(i.e., you'd need to run something like <code>cargo build -p rustc &amp;&amp; cargo +stage1 build -p std</code>)</p>",
        "id": 199094917,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705496
    },
    {
        "content": "<p>ah, i see... that seems unfortunate</p>",
        "id": 199094987,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705577
    },
    {
        "content": "<p>it would be nice to reach an end state where you only need to build what you're working on</p>",
        "id": 199095033,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705603
    },
    {
        "content": "<p>i.e. if you are working on the compiler, you don't need to build std; if you are working on std, you don't need to build the compiler</p>",
        "id": 199095060,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705637
    },
    {
        "content": "<p>well I mean you don't <em>need to</em> build std</p>",
        "id": 199095072,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705653
    },
    {
        "content": "<p>but then you can't compile anything with that compiler</p>",
        "id": 199095079,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705660
    },
    {
        "content": "<p>right</p>",
        "id": 199095090,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705668
    },
    {
        "content": "<p>including running most of the tests</p>",
        "id": 199095097,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705674
    },
    {
        "content": "<p>for the new compiler</p>",
        "id": 199095104,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705680
    },
    {
        "content": "<p>sure, yes, 99.9% of the tests are not no_core</p>",
        "id": 199095110,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705682
    },
    {
        "content": "<p>to bypass this you basically need at least some level of ABI stability</p>",
        "id": 199095131,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705706
    },
    {
        "content": "<p>though, it might not be that bad... build std only takes ~30 seconds on my laptop</p>",
        "id": 199095143,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705713
    },
    {
        "content": "<p>right yes the ergonomic hit is way worse than the actual build time</p>",
        "id": 199095195,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705726
    },
    {
        "content": "<p>I will note though that <em>technically</em> there's nothing stopping us from pseudo-building std for you</p>",
        "id": 199095226,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705748
    },
    {
        "content": "<p>e.g. you run something like <code>cargo run -p rustc-std</code></p>",
        "id": 199095245,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705764
    },
    {
        "content": "<p>and that's the equivalent of <code>x.py build --stage 1 src/libtest</code> today, basically</p>",
        "id": 199095266,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705776
    },
    {
        "content": "<p>obviously it's not as nice because run != build and you need to emulate check and such atop that somehow</p>",
        "id": 199095312,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705809
    },
    {
        "content": "<p>Ideally in the long term, the tests would just list std as a Cargo dep and it would just get built</p>",
        "id": 199095316,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705812
    },
    {
        "content": "<p>Ah... well, maybe</p>",
        "id": 199095330,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705829
    },
    {
        "content": "<p>I mean you could basically do that today</p>",
        "id": 199095337,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705836
    },
    {
        "content": "<p>just add a <a href=\"http://build.rs\">build.rs</a> to compiletest that runs cargo +stage1 build -p std</p>",
        "id": 199095382,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705849
    },
    {
        "content": "<p>(and in theory it could even do rerun-if-changed on all compiler sources and build the compiler first)</p>",
        "id": 199095396,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705877
    },
    {
        "content": "<p>hmm... interesting</p>",
        "id": 199095430,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590705908
    },
    {
        "content": "<p>or, actually, it need not be a <a href=\"http://build.rs\">build.rs</a> I think</p>",
        "id": 199095463,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705931
    },
    {
        "content": "<p>hm now I kinda want to try this out</p>",
        "id": 199095487,
        "sender_full_name": "simulacrum",
        "timestamp": 1590705956
    },
    {
        "content": "<p>so it seems like building the compiler without std is hard, but what about building std with, say, a beta compiler instead? that would just mean std can't use features until they hit beta, right?</p>",
        "id": 199095683,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706121
    },
    {
        "content": "<p>well std today already must support building with beta</p>",
        "id": 199095697,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706133
    },
    {
        "content": "<p>I think the first thing I'd do here is just prototype a no-dep empty crate with <a href=\"http://build.rs\">build.rs</a> that invokes x.py appropriately</p>",
        "id": 199095719,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706157
    },
    {
        "content": "<p>and then the thing to do is <code>cargo build -p that-crate</code></p>",
        "id": 199095728,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706168
    },
    {
        "content": "<p>(and maybe you have, say, 2-3 of these crates for the common build configs)</p>",
        "id": 199095763,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706200
    },
    {
        "content": "<p>do you mean <code>cargo +beta build -p that-crate</code>?</p>",
        "id": 199095812,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706209
    },
    {
        "content": "<p>sure</p>",
        "id": 199095820,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706216
    },
    {
        "content": "<p>(this crate, being stable-compatible and nearly empty, can use any toolchain though)</p>",
        "id": 199095833,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706226
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 199095874,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706262
    },
    {
        "content": "<p>it would to start just run x.py as everyone does today, so it wouldn't get special treatment in terms of downloading compilers and such initially</p>",
        "id": 199095884,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706273
    },
    {
        "content": "<p>but what I really meant is more like <code>./x.py +beta</code>... I think you're getting to what I was asking</p>",
        "id": 199095913,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706301
    },
    {
        "content": "<p>well, yes, the future is that you do cargo +beta build -p that-crate and <em>that</em> compiler is what we use instead of the current approach of downloading one</p>",
        "id": 199095978,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706330
    },
    {
        "content": "<p>right</p>",
        "id": 199096001,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706351
    },
    {
        "content": "<p>but realistically the one-off download is a pretty small hit I think</p>",
        "id": 199096019,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706371
    },
    {
        "content": "<p>at least for me, it's a common annoyance because it takes a long time on my internet</p>",
        "id": 199096045,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706399
    },
    {
        "content": "<p>also, it's weird for newcommers</p>",
        "id": 199096064,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706428
    },
    {
        "content": "<p>oh sure</p>",
        "id": 199096128,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706450
    },
    {
        "content": "<p>it would reduce the perceived complexity a lot (I think) if people could just <code>rustup install beta</code> and start building <code>std</code> without anything else and without building a compiler first</p>",
        "id": 199096152,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706469
    },
    {
        "content": "<p>well, today that's already true?</p>",
        "id": 199096162,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706480
    },
    {
        "content": "<p>well modulo rustup</p>",
        "id": 199096166,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706485
    },
    {
        "content": "<p>like you can totally just <code>x.py build --stage 0 src/libstd</code></p>",
        "id": 199096176,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706494
    },
    {
        "content": "<p>hmm... that's true</p>",
        "id": 199096187,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706504
    },
    {
        "content": "<p>and really even cargo +beta build -p std works IIRC</p>",
        "id": 199096192,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706508
    },
    {
        "content": "<p>the hard bit is that using that std is pretty annoying today, but we could make that better without too much trouble</p>",
        "id": 199096208,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706523
    },
    {
        "content": "<p>that seems like it could be a good step</p>",
        "id": 199096229,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706557
    },
    {
        "content": "<p>also one other thing that occurs to me is that the default flags don't do what most std devs would want (--stage 0)</p>",
        "id": 199096331,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706618
    },
    {
        "content": "<p>but really using cargo would be even better</p>",
        "id": 199096351,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706637
    },
    {
        "content": "<p>yeah I think we could get cargo working</p>",
        "id": 199096376,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706662
    },
    {
        "content": "<p>maybe I can spend some cycles on this soon</p>",
        "id": 199096381,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706668
    },
    {
        "content": "<p>one other thing: you mentioned that moving std out-of-tree would prevent the compiler from using unstable features</p>",
        "id": 199096467,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706712
    },
    {
        "content": "<p>what would be great is if someone typed up a doc basically saying \"here is what I want to do as a std dev\"</p>",
        "id": 199096475,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706722
    },
    {
        "content": "<p>but what if we instead made it a subtree and moved std to its own repo?</p>",
        "id": 199096502,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706744
    },
    {
        "content": "<p>where it's not so much x.py commands as things like \"I want to build std and use it for some crate outside of the compiler tree to test my changes\"</p>",
        "id": 199096507,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/why.20stage.202.3F/near/199096475\">said</a>:</p>\n<blockquote>\n<p>what would be great is if someone typed up a doc basically saying \"here is what I want to do as a std dev\"</p>\n</blockquote>\n<p>that's why we're doing the contributor survey :)</p>",
        "id": 199096525,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706761
    },
    {
        "content": "<p>I mean you <em>could</em> but I don't think that buys you much if you can get std buildable via cargo direct w/o x.py</p>",
        "id": 199096536,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706773
    },
    {
        "content": "<p>I would definitely want more experience with subtrees before doing that</p>",
        "id": 199096629,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706810
    },
    {
        "content": "<blockquote>\n<p>I mean you could but I don't think that buys you much if you can get std buildable via cargo direct w/o x.py</p>\n</blockquote>\n<p>Perhaps not _functionaly_ but it buys a lot of simplicity. That is, a random person could just clone the repo and use cargo like they would for any other crate.</p>",
        "id": 199096684,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706870
    },
    {
        "content": "<p>(well, mostly)</p>",
        "id": 199096715,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706898
    },
    {
        "content": "<p>yes that's somewhat true</p>",
        "id": 199096724,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706908
    },
    {
        "content": "<p>I would want to see how far we can get in the compiler tree with that</p>",
        "id": 199096731,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706918
    },
    {
        "content": "<p>but the point is, it would be a lot less intimidating and would require a somewhat smaller repo clone</p>",
        "id": 199096778,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706930
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/why.20stage.202.3F/near/199096731\">said</a>:</p>\n<blockquote>\n<p>I would want to see how far we can get in the compiler tree with that</p>\n</blockquote>\n<p>with what? subtree?</p>",
        "id": 199096804,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590706958
    },
    {
        "content": "<p>no, with \"just build with cargo\"</p>",
        "id": 199096816,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706966
    },
    {
        "content": "<p>if we don't require submodules etc then I think there's not <em>that</em> much overhead from having the compiler next to you</p>",
        "id": 199096841,
        "sender_full_name": "simulacrum",
        "timestamp": 1590706984
    },
    {
        "content": "<p>sure, the clone is a bit bigger</p>",
        "id": 199096873,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707002
    },
    {
        "content": "<p>but Rust developers need large disks anyway because rustc is disk-hungry :)</p>",
        "id": 199096891,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707023
    },
    {
        "content": "<p>yeah, just that from skimming the survey comments a lot of people seem to feel intimidated by massive monorepo, and there seems to be a lot of interest to contributing to libstd, so making that feel more \"normal\" might be a good direction</p>",
        "id": 199096999,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707096
    },
    {
        "content": "<p>but I get where you're coming from, from a practicality standpoint</p>",
        "id": 199097014,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/why.20stage.202.3F/near/199096891\">said</a>:</p>\n<blockquote>\n<p>but Rust developers need large disks anyway because rustc is disk-hungry :)</p>\n</blockquote>\n<p>lol, this is a bit of an understatement :P<br>\n(also something that comes up a lot in the survey, btw)</p>",
        "id": 199097058,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707147
    },
    {
        "content": "<p>I think people do get intimidated but I don't know how much of that is \"oh no big repo\" rather than our current strategies for building etc</p>",
        "id": 199097060,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707150
    },
    {
        "content": "<p>hmm, I guess that's a fair point</p>",
        "id": 199097116,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707168
    },
    {
        "content": "<p>like, it might even be a big win to move std and its deps into say std/ and have the top-level be std/ compiler/ tools/ or so</p>",
        "id": 199097129,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707184
    },
    {
        "content": "<p>and that while a <em>huge</em> diff</p>",
        "id": 199097136,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707195
    },
    {
        "content": "<p>is trivial</p>",
        "id": 199097139,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707197
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I do like that idea</p>",
        "id": 199097150,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707210
    },
    {
        "content": "<p>(someone proposed this somewhere)</p>",
        "id": 199097157,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707218
    },
    {
        "content": "<p>do you remember what the reaction to it was?</p>",
        "id": 199097173,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707237
    },
    {
        "content": "<p>fizzled out more than anything I think</p>",
        "id": 199097182,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707246
    },
    {
        "content": "<p>I see</p>",
        "id": 199097193,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707256
    },
    {
        "content": "<p>I imagine a MCP or w/e today would go through pretty quick though</p>",
        "id": 199097205,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707266
    },
    {
        "content": "<p>especially if we start by just moving std rather than everything</p>",
        "id": 199097210,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707273
    },
    {
        "content": "<p>e.g. we'd have src/* and std/</p>",
        "id": 199097217,
        "sender_full_name": "simulacrum",
        "timestamp": 1590707280
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I was just going to ask</p>",
        "id": 199097263,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707287
    },
    {
        "content": "<p>perhaps I will open such an MCP a bit later (have to go now)</p>",
        "id": 199097301,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707337
    },
    {
        "content": "<p>thanks for the discussion <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ! This has been very enlightening</p>",
        "id": 199097316,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590707353
    },
    {
        "content": "<p>On a related point - why is stage2 the default? I can see how it would sometimes be useful, but it seems to me that 99% of the time stage1 is what you actually want and you should have to pass <code>--stage 2</code> explicitly if you need it for some reason</p>",
        "id": 199239796,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1590816514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> yeah, I expect that after the contributor survey we might want to re-look at some of the defaults of x.py to make common things a bit more straightforward</p>",
        "id": 199289590,
        "sender_full_name": "mark-i-m",
        "timestamp": 1590899008
    }
]