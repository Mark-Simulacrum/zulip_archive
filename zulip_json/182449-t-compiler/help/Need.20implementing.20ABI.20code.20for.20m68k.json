[
    {
        "content": "<p>Hi!</p>\n<p>I'm working on porting Rust to m68k using a work-in-progress version of LLVM for m68k.</p>\n<p>I have most basic pieces on the Rust side done, but I need help with the ABI code, see: <a href=\"https://github.com/rust-lang/rust/issues/73685\">https://github.com/rust-lang/rust/issues/73685</a></p>\n<p>Would one the compiler experts be willing to help me write the ABI part, i.e. the function \"compute_abi_info\"?</p>\n<p>Thanks!</p>",
        "id": 201951574,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593080058
    },
    {
        "content": "<p>I tried looking at <a href=\"https://github.com/M680x0/M680x0-mono-repo\">https://github.com/M680x0/M680x0-mono-repo</a>, but I can't find the clang equivalent of compute_abi_info for M680x0. I can find it for other target isa's though.</p>",
        "id": 201952156,
        "sender_full_name": "bjorn3",
        "timestamp": 1593080609
    },
    {
        "content": "<p>Right, I guess we're still missing that part. Even though it already compiles usable C code.</p>",
        "id": 201953221,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593081604
    },
    {
        "content": "<p>Do you know where gcc defines it? I could take a look at that version.</p>",
        "id": 201953268,
        "sender_full_name": "bjorn3",
        "timestamp": 1593081676
    },
    {
        "content": "<p>Have you looked at what AVR does? IIRC it also uses some default implementation here</p>",
        "id": 201953275,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593081684
    },
    {
        "content": "<p>I'll ask one of the GCC guys at my company (SUSE). Just a second.</p>",
        "id": 201953307,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593081717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> I think m68k would need special code as it makes a difference between address and data registers.</p>",
        "id": 201953488,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593081855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <a href=\"https://github.com/gcc-mirror/gcc/blob/master/gcc/config/m68k/m68k.c#L1443\">https://github.com/gcc-mirror/gcc/blob/master/gcc/config/m68k/m68k.c#L1443</a></p>",
        "id": 201954469,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593082596
    },
    {
        "content": "<blockquote>\n<p>/* On the m68k all args are always pushed.  */</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"315453\">@John Paul Adrian Glaubitz</span> I am not completely sure but I think all aggregate args should be marked <code>byval</code> using <code>arg.make_indirect_byval()</code> instead of using <code>arg.cast_to(Uniform { ... })</code>.</p>",
        "id": 201955420,
        "sender_full_name": "bjorn3",
        "timestamp": 1593083274
    },
    {
        "content": "<p>ok</p>",
        "id": 201955677,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593083494
    },
    {
        "content": "<p>I do advice you to add some codegen tests to test for compatibility with gcc.</p>",
        "id": 201955741,
        "sender_full_name": "bjorn3",
        "timestamp": 1593083528
    },
    {
        "content": "<p>Will do.</p>",
        "id": 201955788,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593083600
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/tree/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/test/run-make-fulldeps/extern-fn-struct-passing-abi\">https://github.com/rust-lang/rust/tree/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/test/run-make-fulldeps/extern-fn-struct-passing-abi</a> seems to be pretty much the kind of test you need.</p>",
        "id": 201956048,
        "sender_full_name": "bjorn3",
        "timestamp": 1593083802
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 201956196,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593083956
    },
    {
        "content": "<p>Guess we also need to something similar when returning a struct.</p>",
        "id": 201956285,
        "sender_full_name": "John Paul Adrian Glaubitz",
        "timestamp": 1593084026
    }
]