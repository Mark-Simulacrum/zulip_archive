[
    {
        "content": "<p>Hi,</p>\n<p>I was wondering if there is any documentation (besides the code) on how projection chains are resolved in the rust code-gen? Has anyone written a blog post on that perhaps?</p>\n<p>It seems like an involved topic.</p>\n<p>Thanks</p>",
        "id": 212535892,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1602064291
    },
    {
        "content": "<p>Chains of <code>rustc::mir::ProjectionElem</code> or of <code>rustc::ty::Projection</code>? I think that the answer is no for both.</p>",
        "id": 212537084,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1602065056
    },
    {
        "content": "<p>The ones found in <code>Place</code>, so <code>ProjectionElem</code>.</p>",
        "id": 212537607,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1602065382
    },
    {
        "content": "<p>Have you seen <a href=\"#narrow/stream/131828-t-compiler/topic/codegen.20projections/near/210888831\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/codegen.20projections/near/210888831</a>?</p>",
        "id": 212545723,
        "sender_full_name": "bjorn3",
        "timestamp": 1602070933
    },
    {
        "content": "<p>Yeah, that's my colleague asking there :)</p>",
        "id": 212583997,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1602087961
    },
    {
        "content": "<p>I know. I was just curious if you saw it or missed it.</p>",
        "id": 212584349,
        "sender_full_name": "bjorn3",
        "timestamp": 1602088106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223288\">@Edd Barrett</span> In cg_clif a codegened place is represented as:</p>\n<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/cb2dd4b5e05443a950dcd30d54a98c4c1c07a339/src/value_and_place.rs#L296-L309\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/cb2dd4b5e05443a950dcd30d54a98c4c1c07a339/src/value_and_place.rs#L296-L309</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CPlace</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"nc\">CPlaceInner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">layout</span>: <span class=\"nc\">TyAndLayout</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">CPlaceInner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">VarPair</span><span class=\"p\">(</span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">VarLane</span><span class=\"p\">(</span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Addr</span><span class=\"p\">(</span><span class=\"n\">Pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>The <code>Local</code> here is only used for debug printing of the <code>CPlace</code>. The <code>VarLane</code> variant is only used for SIMD vectors. For the <code>Addr</code> variant the <code>Pointer</code> is a combination of either an address or stackslot and a constant offset. This makes codegen a bit more efficient by folding multiple address calculations into one. The <code>Option&lt;Value&gt;</code> represents the metadata of a dereferenced pointer. For example a slice length or vtable pointer. <code>Variable</code> is converted to SSA values on the fly by cranelift-frontend.</p>\n<p>The projection code is at <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/cb2dd4b5e05443a950dcd30d54a98c4c1c07a339/src/base.rs#L895-L965\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/cb2dd4b5e05443a950dcd30d54a98c4c1c07a339/src/base.rs#L895-L965</a>. The called functions are at <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/cb2dd4b5e05443a950dcd30d54a98c4c1c07a339/src/value_and_place.rs#L668-L777\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/cb2dd4b5e05443a950dcd30d54a98c4c1c07a339/src/value_and_place.rs#L668-L777</a>.</p>\n<p>I hope this helps.</p>",
        "id": 212585819,
        "sender_full_name": "bjorn3",
        "timestamp": 1602088816
    },
    {
        "content": "<p>Thanks bjorn. I'll probably sit down and read the cranelift codegen tomorrow and see if we can take inspiration.</p>",
        "id": 212586250,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1602089064
    }
]