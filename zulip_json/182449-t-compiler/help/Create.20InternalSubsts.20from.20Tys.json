[
    {
        "content": "<p>Hi, I'm trying to create a single elem list of <code>InternalSubsts</code> from a single <code>Ty</code> which I know is guaranteed to be monomorphized. Looking at the implementation of <code>InternalSubsts</code> I'm not sure I can see a canonical way of doing this. Could someone point me in the right direction?</p>\n<p>The reason I'm doing this is because I want to call <code>Instance::resolve(...)</code> on a trait def_id but use the <code>Ty</code> I have as the <code>substs</code> arg, because I know its been monomorphised (since I'm in codegen)</p>",
        "id": 273126632,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1645725723
    },
    {
        "content": "<p><code>tcx.mk_substs(std::iter::once(ty))</code> is one way to do it I think</p>",
        "id": 273127573,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645726106
    },
    {
        "content": "<p>er, actually you might need to turn the <code>ty</code> into a <code>GenericArg</code> first with <code>.into</code>, whoops</p>",
        "id": 273127677,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1645726158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426609\">@Michael Goulet (compiler-errors)</span> thanks so much! that did it :)</p>",
        "id": 273131429,
        "sender_full_name": "Jake Hughes",
        "timestamp": 1645727997
    }
]