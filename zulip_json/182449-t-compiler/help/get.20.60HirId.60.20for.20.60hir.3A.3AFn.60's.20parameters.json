[
    {
        "content": "<p>Hi, <br>\nso I'm trying to create an supplemental type system for rust, which requires creating a type context. Part of type checking a function requires filling the type context with the function's parameters. When a <code>Path</code> needs to be typed, I could then find the corresponding entry in the type context by the referenced <code>HirId</code>.<br>\nUnfortunately, I have not found a way to access the definition sites of a functions parameters from its hir item, which makes it hard to fill the type context. </p>\n<p>Tl;dr: <em>Is there a way to get the parameter definition<code>HirId</code>s from an <code>hir::Fn</code> Item?</em></p>",
        "id": 278098554,
        "sender_full_name": "csicar",
        "timestamp": 1649286695
    },
    {
        "content": "<p>So what specifically do you want from the parameter?</p>",
        "id": 278099175,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649287107
    },
    {
        "content": "<p>From a Fn item in hir, you can get the hir::Ty of each of the fn's inputs, which has a HIR id</p>",
        "id": 278099196,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649287125
    },
    {
        "content": "<p>but do you need more information than that?</p>",
        "id": 278099201,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649287130
    },
    {
        "content": "<p>Thank you for the quick response!  The difference is, that I'm not looking for the type (<code>i32</code>), but rather the parameter variable definition (<code>a</code>)</p>\n<p>Here's a short example (reading the comments only makes sense when reading from last to first)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"c1\">//|- ------ how do I get the HirId of `a`?</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"c1\">//       ^^ but the hir::ty `i32` has a different hir_id (e.g. `HirId { owner: DefId(0:7 ~ rust_out[9149]::foo), local_id: 7 `)</span>\n<span class=\"w\">      </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"c1\">//   ^ once `a` is Resolved, its Res will refer to some hir_id (e.g. `HirId { owner: DefId(0:7 ~ rust_out[9149]::foo), local_id: 2 }`)</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278099659,
        "sender_full_name": "csicar",
        "timestamp": 1649287460
    },
    {
        "content": "<p>Ah, you can get the parameter from the body of the fn: <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.body\">https://doc.rust-lang.org/stable/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.body</a></p>",
        "id": 278101861,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649289231
    },
    {
        "content": "<p>You can get the BodyId from the hir::itemKind::Fn</p>",
        "id": 278101928,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1649289264
    },
    {
        "content": "<p>ooooh, well that makes sense. Thank you so much!</p>",
        "id": 278102456,
        "sender_full_name": "csicar",
        "timestamp": 1649289628
    },
    {
        "content": "<p>In case somebody else will need this: To get the <code>a</code> in the example above do this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">hir_item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">hir</span>::<span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">kind</span>: <span class=\"nc\">hir</span>::<span class=\"n\">ItemKind</span>::<span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">FnSig</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">   </span><span class=\"o\">..</span><span class=\"w\">   </span><span class=\"p\">},</span><span class=\"w\">    </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\">   </span><span class=\"n\">body_id</span><span class=\"w\"> </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">..</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">body_id</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">hir_id</span><span class=\"w\"> </span><span class=\"c1\">// == HirId { owner: DefId(0:7 ~ rust_out[9149]::foo), local_id: 1 }</span>\n<span class=\"w\">            </span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">pat</span><span class=\"p\">.</span><span class=\"n\">hir_id</span><span class=\"w\"> </span><span class=\"c1\">// == HirId { owner: DefId(0:7 ~ rust_out[9149]::foo), local_id: 2 }</span>\n<span class=\"w\">       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278103320,
        "sender_full_name": "csicar",
        "timestamp": 1649290427
    }
]