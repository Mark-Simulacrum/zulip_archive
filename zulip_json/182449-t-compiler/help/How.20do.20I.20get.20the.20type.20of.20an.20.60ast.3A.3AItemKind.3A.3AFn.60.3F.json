[
    {
        "content": "<p>Is this happening too early in the process to infer the type or is there a way to get it from <code>tcx</code>?</p>",
        "id": 201454270,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1592614137
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201454298,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1592614182
    },
    {
        "content": "<p>actually I think I see the issue already, I don't have a <code>tcx</code> available :(</p>",
        "id": 201454304,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1592614194
    },
    {
        "content": "<p>for context (hah!) this is in <a href=\"https://github.com/rust-lang/rust/blob/2bfdecad6b1e89c4becfd4c115f643384eb39d6a/src/librustc_interface/util.rs#L594\">https://github.com/rust-lang/rust/blob/2bfdecad6b1e89c4becfd4c115f643384eb39d6a/src/librustc_interface/util.rs#L594</a> which is implementing <code>MutVisitor</code> for the AST</p>",
        "id": 201454360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1592614235
    },
    {
        "content": "<p>Yeah, so the AST happens before any typing has happened</p>",
        "id": 201456301,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592617437
    },
    {
        "content": "<p>However, depending on where in <code>rustc_interface</code> this is, you might be able to get access to a <code>tcx</code> somehow...</p>",
        "id": 201456356,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592617493
    },
    {
        "content": "<p>hmmm... yeah, looking through the code, it looks like this is before the <code>tcx</code> is even constructed</p>",
        "id": 201456449,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592617668
    },
    {
        "content": "<p>(though, I'm not an expert, so I may be wrong)</p>",
        "id": 201456488,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592617693
    },
    {
        "content": "<p>ok, well it's not necessary to fix my bug, it would just be nice (allow replacing bodies of functions returning <code>impl trait</code>). thanks for looking though!</p>",
        "id": 201456763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1592618265
    },
    {
        "content": "<p>I might be misunderstanding, but why not use a proc macro?</p>",
        "id": 201459362,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592623546
    },
    {
        "content": "<p>I'm not sure how proc macros are related. In this context I'm replacing the function body with <code>loop {}</code> so that rustdoc doesn't have to do item-bodies checking, but that breaks type inference if the function returns <code>impl trait</code>.</p>",
        "id": 201459637,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1592624126
    },
    {
        "content": "<p>Ah, I see. Yeah, ignore my suggestion :P</p>",
        "id": 201490525,
        "sender_full_name": "mark-i-m",
        "timestamp": 1592677588
    },
    {
        "content": "<p>In case you're curious, this ended up as <a href=\"https://github.com/rust-lang/rust/pull/73566/\">https://github.com/rust-lang/rust/pull/73566/</a></p>",
        "id": 201504198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1592696185
    }
]