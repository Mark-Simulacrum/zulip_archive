[
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/query.html\">Queries: demand-driven compilation</a> explains \"<em>big chunks of the compiler (for example, generating MIR) work exactly like this</em>\".  But delving into that a bit, <code>BasicBlockData::terminator</code> can obviously include other <code>BasicBlock</code>s (which are just newtyped indexes into the <code>basic_blocks</code> vector)... so how stable is this?  If a subsequent compilation introduces a new block or removes an old one, might this cause significant movement in the <code>basic_blocks</code> vector such that all affected blocks (and any that reference them) are no longer \"green\" queries and have to be regenerated?  Or does the compiler try to preserve a block's index wherever possible?</p>",
        "id": 234737894,
        "sender_full_name": "eggyal",
        "timestamp": 1618514902
    },
    {
        "content": "<p>A MIR basic block is too small a data structure for incremental compilation. When generating MIR, either we load the full former MIR from cache, or we generate all of it.</p>",
        "id": 234738427,
        "sender_full_name": "cjgillot",
        "timestamp": 1618515098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Stability.20of.20BasicBlocks/near/234738427\">said</a>:</p>\n<blockquote>\n<p>A MIR basic block is too small a data structure for incremental compilation. When generating MIR, either we load the full former MIR from cache, or we generate all of it.</p>\n</blockquote>\n<p>\"<em>the full former MIR</em>\" ... of a function?  Or do you mean the whole crate??</p>",
        "id": 234738997,
        "sender_full_name": "eggyal",
        "timestamp": 1618515274
    },
    {
        "content": "<p>I guess it must be the whole crate.</p>",
        "id": 234739163,
        "sender_full_name": "eggyal",
        "timestamp": 1618515335
    },
    {
        "content": "<p>MIR is computed per-item</p>",
        "id": 234739356,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1618515404
    },
    {
        "content": "<p>Sorry, I overlooked that the <code>basic_blocks</code> vector was on <code>Body</code>.  That makes a lot more sense :) Thanks!</p>",
        "id": 234739933,
        "sender_full_name": "eggyal",
        "timestamp": 1618515639
    },
    {
        "content": "<p>Revisiting this having better grokked the dev guide and related docs, I'm a bit surprised to see that <code>BasicBlock</code> implements <code>HashStable</code>, when <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/stable_hasher/trait.HashStable.html\">the documentation</a> quite understandably says:</p>\n<blockquote>\n<p><code>hash_stable()</code> must be independent of the current compilation session. E.g. they must not hash memory addresses or other things that are “randomly” assigned per compilation session.</p>\n</blockquote>\n<p>Surely a <code>BasicBlock</code> (being a mere index into a <code>basic_blocks</code> vector) is dependent on the compilation session?  If it's to implement <code>HashStable</code>, shouldn't something like the block's \"normalized\" path through the CFG be used instead?</p>",
        "id": 235088120,
        "sender_full_name": "eggyal",
        "timestamp": 1618768018
    },
    {
        "content": "<p>MIR building &amp; transformations are deterministic. The BasicBlocks are stable across compilation sessions.</p>",
        "id": 235088587,
        "sender_full_name": "tm",
        "timestamp": 1618768521
    },
    {
        "content": "<p>Ah, I see.  <em>Because</em> the MIR is either entirely loaded from cache or entirely regenerated (as <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> pointed out above), the <code>BasicBlock</code> indexes are \"stable\" in the sense that the <code>basic_blocks</code> vector is either reused or discarded... got it :) thanks</p>",
        "id": 235088963,
        "sender_full_name": "eggyal",
        "timestamp": 1618768861
    }
]