[
    {
        "content": "<p>I'm trying to reference <code>::core::prelude::v1::derive</code> in code generated in <code>miniz_oxide</code> (which is a dep of <code>std</code>) and I'm getting errors when building stage1 std because:</p>\n<blockquote>\n<p>failed to resolve: could not find <code>prelude</code> in <code>core</code></p>\n</blockquote>\n<p>I don't really understand the <code>rustc-std-workspace-core</code> hacks going on... Any idea how I'd resolve this and reference <code>derive</code> in <code>miniz_oxide</code>?</p>",
        "id": 252103025,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630877327
    },
    {
        "content": "<p>If I reference it as <code>derive</code> rather than <code>::core::prelude::v1::derive</code>, it compiles, but <code>libc</code> doesn't - for some reason <code>libc</code> wants the contents of the prelude fully qualified...</p>",
        "id": 252103407,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630877780
    },
    {
        "content": "<p>can you show the exact error you're seeing? I wouldn't expect that error, miniz_oxide uses 2018 edition and it doesn't rename <code>core</code> (which I was worried it might)</p>",
        "id": 252103613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630878016
    },
    {
        "content": "<p>is this in a build script maybe?</p>",
        "id": 252103625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630878038
    },
    {
        "content": "<p>I'm futzing in <code>rustc_parse</code> automatically adding a <code>derive</code> macro to enums for <a href=\"https://github.com/rust-lang/rust/pull/81642\">https://github.com/rust-lang/rust/pull/81642</a> (which is a weird hack for sure)</p>\n<p>My exact error is:</p>\n<div class=\"codehilite\"><pre><span></span><code>{&quot;message&quot;:&quot;failed to resolve: could not find `prelude` in `core`&quot;,&quot;code&quot;:{&quot;code&quot;:&quot;E0433&quot;,&quot;explanation&quot;:&quot;An undeclared crate, module, or type was used.\\n\\nErroneous code example:\\n\\n```compile_fail,E0433\\nlet map = HashMap::new();\\n// error: failed to resolve: use of undeclared type `HashMap`\\n```\\n\\nPlease verify you didn&#39;t misspell the type/module&#39;s name or that you didn&#39;t\\nforget to import it:\\n\\n```\\nuse std::collections::HashMap; // HashMap has been imported.\\nlet map: HashMap&lt;u32, u32&gt; = HashMap::new(); // So it can be used!\\n```\\n\\nIf you&#39;ve expected to use a crate name:\\n\\n```compile_fail\\nuse ferris_wheel::BigO;\\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\\n```\\n\\nMake sure the crate has been added as a dependency in `Cargo.toml`.\\n\\nTo use a module from your current crate, add the `crate::` prefix to the path.\\n&quot;},&quot;level&quot;:&quot;error&quot;,&quot;spans&quot;:[{&quot;file_name&quot;:&quot;/Users/dwh/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.4.0/src/lib.rs&quot;,&quot;byte_start&quot;:0,&quot;byte_end&quot;:0,&quot;line_start&quot;:1,&quot;line_end&quot;:1,&quot;column_start&quot;:1,&quot;column_end&quot;:1,&quot;is_primary&quot;:true,&quot;text&quot;:[],&quot;label&quot;:&quot;could not find `prelude` in `core`&quot;,&quot;suggested_replacement&quot;:null,&quot;suggestion_applicability&quot;:null,&quot;expansion&quot;:null}],&quot;children&quot;:[],&quot;rendered&quot;:&quot;\\u001b[0m\\u001b[1m\\u001b[38;5;9merror[E0433]\\u001b[0m\\u001b[0m\\u001b[1m: failed to resolve: could not find `prelude` in `core`\\u001b[0m\\n\\n&quot;}\n</code></pre></div>",
        "id": 252103832,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630878279
    },
    {
        "content": "<p>libc is a no_core crate</p>",
        "id": 252103869,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630878350
    },
    {
        "content": "<p>Hm, although it is 2015, it does place <code>core</code> in the root (from rustc_std_workspace_core)</p>",
        "id": 252103941,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630878414
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/libc/blob/5fefaf60adedda5eeb9e5896cc43fb02eb96a6c9/src/lib.rs#L26\">https://github.com/rust-lang/libc/blob/5fefaf60adedda5eeb9e5896cc43fb02eb96a6c9/src/lib.rs#L26</a></p>",
        "id": 252103945,
        "sender_full_name": "bjorn3",
        "timestamp": 1630878419
    },
    {
        "content": "<p>(nevermind)</p>",
        "id": 252103946,
        "sender_full_name": "Eric Huss",
        "timestamp": 1630878419
    },
    {
        "content": "<p>Aha! Is there a nice way to detect <code>no_core</code>?</p>",
        "id": 252103966,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1630878457
    },
    {
        "content": "<p>hmm, it's easy to find <code>feature(no_core)</code> but I don't know how to actually tell if it was enabled</p>",
        "id": 252104023,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630878503
    },
    {
        "content": "<p>here we go:</p>\n<blockquote>\n<p>self.sess.contains_name(&amp;krate.attrs, sym::no_core)</p>\n</blockquote>",
        "id": 252104049,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630878546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Bootstrap.3A.20miniz_oxide.20.2B.20core.3A.3Aprelude.3A.3Av1.3A.3Aderive/near/252104049\">said</a>:</p>\n<blockquote>\n<p>here we go:</p>\n<blockquote>\n<p>self.sess.contains_name(&amp;krate.attrs, sym::no_core)</p>\n</blockquote>\n</blockquote>\n<p>I think you could get <code>krate.attrs</code> from <code>tcx.hir().krate()</code></p>",
        "id": 252104131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630878642
    }
]