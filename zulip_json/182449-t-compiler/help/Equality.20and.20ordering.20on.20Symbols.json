[
    {
        "content": "<p>I've got the following struct definition:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct DllImport {\n    pub name: rustc_span::symbol::Symbol,\n    pub ordinal: Option&lt;u16&gt;,\n}\n</code></pre></div>\n<p>and I'm trying to define an implementation of <code>Ord</code> for <code>DllImport</code> that defines an ordering that's deterministic across compilations.  I know that Symbol's native ordering isn't deterministic, and that I have to compare <code>name.as_str()</code> instead; that's straightforward enough.</p>\n<p>To implement<code>Eq</code> for <code>DllImport</code>, though, can I just use <code>Symbol</code>'s native equality, or do I need to compare <code>name.as_str()</code> there as well?  Equivalently: does <code>sym1.as_str() == sym2.as_str()</code> imply <code>sym1 == sym2</code>?  (I'm assuming the inverse is true.)</p>",
        "id": 240092856,
        "sender_full_name": "Richard Cobbe",
        "timestamp": 1621881537
    },
    {
        "content": "<p>yes, that should work</p>",
        "id": 240094168,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621882106
    },
    {
        "content": "<p><code>sym1 == sym2</code> exactly when <code>sym1.as_str() == sym2.as_str()</code> AFAIK</p>",
        "id": 240094202,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621882129
    },
    {
        "content": "<p>Excellent, thanks!</p>",
        "id": 240094536,
        "sender_full_name": "Richard Cobbe",
        "timestamp": 1621882287
    }
]