[
    {
        "content": "<p>There are some instances such as <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/io/mod.rs#L628\">here</a> that are unsafe functions that don't contain any unsafe operations. Can these be left untouched or is some sort of comment/explanation required?<br>\nRemoving the unsafe signature would cause incompatible type issues for files that use these functions.</p>",
        "id": 202852682,
        "sender_full_name": "Ram",
        "timestamp": 1593831051
    },
    {
        "content": "<p>I personally think we don't need an explicit comment here, though it also wouldn't hurt adding<br>\n\"This is safe and does not rely on any invariants given by the user\" as most people are probably still expecting the<br>\ninternals of an unsafe function to be implicitly unsafe, cc <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span></p>",
        "id": 202860770,
        "sender_full_name": "lcnr",
        "timestamp": 1593846280
    },
    {
        "content": "<p>I think that in most of these situations, the caller must provide some guarantees, which aren’t immediately used, but which will be used later. IIRC there are examples of this in <code>Layout::new_unchecked</code> where the function itself doesn’t use the guarantees that the layout is valid, but other pieces of unsafe code rely on them.</p>\n<p>I’m not sure safety comments are useful in this kind of situation, and maybe what we could do is to point to these guarantees in the other contexts where we use them.</p>",
        "id": 202865659,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593855185
    },
    {
        "content": "<p>Keep in mind though that I’m vert far from an expert so my opinion isn’t that important <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span><br>\nIf you want good advice you should ask someone from the unsafe code guidelines WG.</p>",
        "id": 202865720,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593855312
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> , I'll ask that there too.</p>",
        "id": 202867911,
        "sender_full_name": "Ram",
        "timestamp": 1593859316
    },
    {
        "content": "<p>The important bit for such cases is to document what the caller needs to ensure to safely call this function</p>",
        "id": 202908909,
        "sender_full_name": "RalfJ",
        "timestamp": 1593932426
    },
    {
        "content": "<p>in case of <code>initializer</code> there is probably little to do as <code>zeroing</code> is actually a safe choice (but the alternative choice of saying that this supports uninit memory would require unsafe)</p>",
        "id": 202908923,
        "sender_full_name": "RalfJ",
        "timestamp": 1593932470
    },
    {
        "content": "<p>but there are other cases where there actually is something to document even if there is no unsafe op:<br>\n<a href=\"https://www.ralfj.de/blog/2016/01/09/the-scope-of-unsafe.html\">https://www.ralfj.de/blog/2016/01/09/the-scope-of-unsafe.html</a></p>",
        "id": 202908926,
        "sender_full_name": "RalfJ",
        "timestamp": 1593932496
    },
    {
        "content": "<p>there one should document why the data structure invariant of <code>Vec</code> is correctly maintained</p>",
        "id": 202908929,
        "sender_full_name": "RalfJ",
        "timestamp": 1593932517
    }
]