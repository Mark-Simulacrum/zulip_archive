[
    {
        "content": "<p>How do people feel about <code>'_</code> in compiler code for things that are <code>'tcx</code> but don't need it named?</p>\n<p>Vote <span aria-label=\"minus\" class=\"emoji emoji-2796\" role=\"img\" title=\"minus\">:minus:</span> if you like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">visit_lhs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Place</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Vote <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> if you prefer </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">visit_lhs</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Place</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(This is assuming no <code>in_band_lifetimes</code> for the conversation in <a href=\"https://github.com/rust-lang/rust/issues/44524#issuecomment-986396571\">https://github.com/rust-lang/rust/issues/44524#issuecomment-986396571</a>)</p>",
        "id": 263816842,
        "sender_full_name": "scottmcm",
        "timestamp": 1638776830
    },
    {
        "content": "<p>If it doesn't need to be named, then it isn't required to be <code>'tcx</code> specifically too?<br>\n(It just happens to usually be allocated on the <code>'tcx</code> arena or something.)</p>",
        "id": 263817155,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1638777173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I dislike the second one a lot because people tend to get it wrong; they'll write <code>&amp;'tcx Place&lt;'tcx&gt;</code> and then run into borrow errors they don't understand</p>",
        "id": 263855983,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1638800405
    },
    {
        "content": "<p>Note that there are instances (not necessarily in compiler code), where having a nameable lifetime parameter can be useful for the body of the function, especially when writing <code>unsafe</code> code and wanting to type-annotate stuff for extra safety.</p>",
        "id": 264505195,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639168944
    },
    {
        "content": "<p>Seems like that'd be a vote for using <code>'_</code>, as having a nameable lifetime would be less common and if you see it then it's a flag that \"hey something interesting is happening here!\"</p>",
        "id": 264507363,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639170007
    },
    {
        "content": "<p>Sure! But only provided the linter is able to detect all the \"interesting things\" <span aria-label=\"warning\" class=\"emoji emoji-26a0\" role=\"img\" title=\"warning\">:warning:</span> if one has to add an <code>#[allow(…)]</code> just to add an extra compiler check in <code>unsafe</code> code, then chances are it will deter some people from writing that extra type annotation altogether.</p>",
        "id": 264644933,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639345063
    },
    {
        "content": "<p>Is there a lint that warns when <code>'foo</code> could be <code>'_</code>? I wasn't aware of one, but I might try it out myself in some code.</p>",
        "id": 264649132,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639350718
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/44752\">https://github.com/rust-lang/rust/issues/44752</a></p>",
        "id": 264650225,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639352292
    },
    {
        "content": "<p>Doesn't the compiler already do this? I swear it's told me to use <code>'_</code> plenty of times...</p>",
        "id": 264650563,
        "sender_full_name": "nnethercote",
        "timestamp": 1639352766
    },
    {
        "content": "<p>Maybe that's part of clippy?</p>",
        "id": 264650734,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639353047
    },
    {
        "content": "<p>There's a lint for missing lifetimes, I believe</p>",
        "id": 264650801,
        "sender_full_name": "simulacrum",
        "timestamp": 1639353130
    },
    {
        "content": "<p>Just not needlessly named lifetimes</p>",
        "id": 264650811,
        "sender_full_name": "simulacrum",
        "timestamp": 1639353143
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\">https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes</a></p>",
        "id": 264651341,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1639353780
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![deny(rust_2018_idioms)]</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Clippy doesn't complain about this code, so I'd expect using the <code>'a</code> in an unsafe block would be similar. Commenting out the <code>let</code> does give <code>clippy::needless_lifetimes</code>.</p>",
        "id": 264653402,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639356829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Thoughts.20on.20.60'_.60.20in.20the.20compiler.3F/near/264650563\">said</a>:</p>\n<blockquote>\n<p>Doesn't the compiler already do this? I swear it's told me to use <code>'_</code> plenty of times...</p>\n</blockquote>\n<p>I'd guess that's <a href=\"https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#elided-lifetimes-in-paths\"><code>elided_lifetimes_in_path</code></a> (enabled by <code>rust_2018_idioms</code> in my example above)</p>",
        "id": 264653487,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639356944
    },
    {
        "content": "<p><code>elided_lifetimes_in_path</code> is about eliding lifetimes when writing <code>Ref&lt;T&gt;</code> instead of <code>Ref&lt;'_, T&gt;</code>. The compiler also warns against single use lifetimes and suggests using a <code>'_</code> instead.</p>",
        "id": 264671835,
        "sender_full_name": "cjgillot",
        "timestamp": 1639381128
    },
    {
        "content": "<blockquote>\n<p>Clippy doesn't complain about this code,</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> that's awesome news; in that case I see no drawbacks anymore <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 264709570,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639404192
    },
    {
        "content": "<p>Ok, maybe a super tiny nit: if the lifetime is underscore-prefixed, then it can be \"needlessly used\" (or not used at all) without being linted: <code>&lt;'_tcx&gt;</code>. This could be useful for teaching or whatnot, as well as consistent with <code>_…</code> items and bindings (but for macros, for some reason)</p>",
        "id": 264709977,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1639404355
    },
    {
        "content": "<p>There's also <a href=\"https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#single-use-lifetimes\">https://doc.rust-lang.org/rustc/lints/listing/allowed-by-default.html#single-use-lifetimes</a>, but it still has a bunch of bugs (based on when I tried it last week).  For example, it complains about <code>impl Iterator&lt;Item = &amp;'a Foo&gt;</code>, but if you remove that you get an error because <a href=\"https://github.com/rust-lang/rust/issues/45667\">#45667</a> hasn't been done yet.</p>",
        "id": 264754752,
        "sender_full_name": "scottmcm",
        "timestamp": 1639422408
    },
    {
        "content": "<p>Seems weird there's two lints for the same thing - can we uplift the clippy lint and rename it to <code>single_use_lifetimes</code>?</p>",
        "id": 264759708,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639424780
    },
    {
        "content": "<p>They look different to me -- the clippy one is that you don't need <code>fn foo&lt;'a&gt;(x: &amp;'a T) -&gt; &amp;'a T</code> because that's what elision would do, whereas <strong>single</strong> use is about <code>fn foo&lt;'a&gt;(x: &amp;'a T) -&gt; T</code> where the lifetime is used only once can just be <code>'_</code> (and there's no tie-lifetimes-together elision going on there).</p>",
        "id": 264763543,
        "sender_full_name": "scottmcm",
        "timestamp": 1639426463
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 264763608,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639426506
    },
    {
        "content": "<p>do you think there's a scenario where you'd want one lint but not the other?</p>",
        "id": 264763625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639426516
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>warning: explicit lifetimes given in parameter types where they could be elided (or replaced with `&#39;_` if needed by type declaration)\n --&gt; src/lib.rs:2:1\n  |\n2 | fn foo&lt;&#39;a&gt;(x: &amp;&#39;a T) -&gt; T { todo!() }\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(clippy::needless_lifetimes)]` on by default\n</code></pre></div>",
        "id": 264763675,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639426533
    },
    {
        "content": "<p>Thanks, Jake, I was just trying that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 264763725,
        "sender_full_name": "scottmcm",
        "timestamp": 1639426560
    },
    {
        "content": "<p>The description of the lint doesn't mention that case.  (Or maybe it does?  I guess it depends exactly how you define the word \"elision\"...)</p>",
        "id": 264763828,
        "sender_full_name": "scottmcm",
        "timestamp": 1639426601
    },
    {
        "content": "<p>OT: there's a difference between \"elide\" and \"infer\", but man is it hard for me to say the right thing when talking/typing quickly.</p>",
        "id": 264764107,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639426722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Thoughts.20on.20.60'_.60.20in.20the.20compiler.3F/near/264763625\">said</a>:</p>\n<blockquote>\n<p>do you think there's a scenario where you'd want one lint but not the other?</p>\n</blockquote>\n<p>Maybe?  To me the \"single use\" lint is like the \"unused variable\" lint, and thus more obviously \"yes, I want that on\".</p>\n<p>I could imagine deciding that I want to be explicit about my lifetimes around unsafe code if there are a bunch of different parameters, even if elision would work because only one of them has a lifetime.</p>",
        "id": 264764109,
        "sender_full_name": "scottmcm",
        "timestamp": 1639426723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Thoughts.20on.20.60'_.60.20in.20the.20compiler.3F/near/264644933\">said</a>:</p>\n<blockquote>\n<p>Sure! But only provided the linter is able to detect all the \"interesting things\" <span aria-label=\"warning\" class=\"emoji emoji-26a0\" role=\"img\" title=\"warning\">:warning:</span> if one has to add an <code>#[allow(…)]</code> just to add an extra compiler check in <code>unsafe</code> code, then chances are it will deter some people from writing that extra type annotation altogether.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> do you think <code>clippy::needless_lifetimes</code> is smart enough it's worth enabling in the compiler?</p>",
        "id": 264899051,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639504714
    },
    {
        "content": "<p>also, <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> <span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span>  would you mind discussing why you think <code>'_</code> would be worse than using <code>'tcx</code> everywhere?</p>",
        "id": 264899137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639504744
    },
    {
        "content": "<p>/me is considering making an E-easy issue to get new contributors to fix <code>needless_lifetimes</code> warnings in the compiler</p>",
        "id": 264899191,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639504770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Thoughts.20on.20.60'_.60.20in.20the.20compiler.3F/near/264899051\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> do you think <code>clippy::needless_lifetimes</code> is smart enough it's worth enabling in the compiler?</p>\n</blockquote>\n<p>oh oops, I missed earlier that you said it was :)<br>\n<span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Thoughts.20on.20.60'_.60.20in.20the.20compiler.3F/near/264709570\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Clippy doesn't complain about this code,</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> that's awesome news; in that case I see no drawbacks anymore <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>\n</blockquote>",
        "id": 264899554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1639504880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Thoughts.20on.20.60'_.60.20in.20the.20compiler.3F/near/264899137\">said</a>:</p>\n<blockquote>\n<p>also, <span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span>  would you mind discussing why you think <code>'_</code> would be worse than using <code>'tcx</code> everywhere?</p>\n</blockquote>\n<p>I've ran into situations where I have to change <code>'_</code> to <code>'tcx</code> in a few places to get things to borrowck, e.g. when you need to store things into <code>self</code>.</p>",
        "id": 264905159,
        "sender_full_name": "Gary Guo",
        "timestamp": 1639507272
    },
    {
        "content": "<p>Most cases when a struct has a lifetime in rustc, it's interned and has lifetime <code>'tcx</code>. I don't see the issue of being explicit.</p>",
        "id": 264905387,
        "sender_full_name": "Gary Guo",
        "timestamp": 1639507344
    },
    {
        "content": "<p>Of course  <code>&amp;'tcx Place&lt;'tcx&gt;</code> etc is still bad. I am just talking about struct lifetime param.</p>",
        "id": 264905755,
        "sender_full_name": "Gary Guo",
        "timestamp": 1639507482
    },
    {
        "content": "<blockquote>\n<p>where I have to change <code>'_</code> to <code>'tcx</code></p>\n</blockquote>\n<p>Presumably you were also changing the body of the function at the same time?</p>\n<p>Would it be valid to say that <code>'tcx</code> may provide a more strict API than <code>'_</code>?</p>",
        "id": 264906924,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1639507894
    },
    {
        "content": "<p>My preference is weak, feel free to ignore it</p>",
        "id": 264911531,
        "sender_full_name": "nnethercote",
        "timestamp": 1639509458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Thoughts.20on.20.60'_.60.20in.20the.20compiler.3F/near/264906924\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>where I have to change <code>'_</code> to <code>'tcx</code></p>\n</blockquote>\n<p>Presumably you were also changing the body of the function at the same time?</p>\n</blockquote>\n<p>Yes, but I also need to change the caller. (In this case the <code>'tcx</code> is defined on struct rather than on fn)</p>",
        "id": 264913661,
        "sender_full_name": "Gary Guo",
        "timestamp": 1639510449
    },
    {
        "content": "<p>When it's <code>TyCtxt&lt;'tcx&gt;</code> the lifetime is not really additional useful data.<br>\nI found an example in this PR that makes more sense, at least to me, with the lifetime annotation than without, even though it's strictly speaking possible to omit using <code>'_</code> instead: <a href=\"https://github.com/rust-lang/rust/pull/91885\">https://github.com/rust-lang/rust/pull/91885</a></p>",
        "id": 264934278,
        "sender_full_name": "Jubilee",
        "timestamp": 1639519981
    }
]