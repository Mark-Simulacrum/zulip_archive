[
    {
        "content": "<p>I spent embarrassingly <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> long time pursuing to fix issue <a href=\"https://github.com/rust-lang/rust/issues/91633\">#91633</a> after really trying to pin point where does the issue happen I found this:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=aee516f160f8a9e4ac33499cb06b568b\">This</a> code compiles without any problems as it's posted in the issue the <a href=\"https://github.com/rust-lang/rust/issues/91633#issuecomment-988064936\">code</a> that causes ICE, has only small change and that is it's using <code>std::ops::Index</code>.<br>\nBoth of these code enter the function <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/src/rustc_middle/ty/relate.rs.html#365-533\">super_relate_tys</a> however, the one causing ICE crashes when it's parameters are like these: </p>\n<div class=\"codehilite\"><pre><span></span><code>   a -&gt; Projection(\n       ProjectionTy {\n           substs: [\n               [T],\n               usize,\n           ],\n           item_def_id: DefId(2:3334 ~ core[28e4]::ops::index::Index::Output),\n       },\n   ),\nb -&gt; Param(\n     T/#0,\n  )\n</code></pre></div>\n<p>one that compiles successfully has these parameters: </p>\n<div class=\"codehilite\"><pre><span></span><code> a -&gt; Param(\n    T/#0,\n  ), b -&gt; Projection(\n     ProjectionTy {\n          substs: [\n            [T],\n           usize,\n       ],\n        item_def_id: DefId(0:8 ~ error[9921]::Index::Output),  //error is the filename incase you get confused error.rs\n    },\n )\n</code></pre></div>\n<p>Why would compiler get confused when code uses <code>std::ops::Index::Output</code> and throw ICE ?</p>",
        "id": 266107701,
        "sender_full_name": "Oguz",
        "timestamp": 1640521948
    },
    {
        "content": "<p>From the comments:</p>\n<blockquote>\n<p>It'll be <a href=\"https://github.com/rust-lang/rust/issues/65879\">#65879</a>, which changed the coherence rules to allow impl&lt;T&gt; ForeignTrait&lt;LocalType&gt; for ForeignType&lt;T&gt;.</p>\n</blockquote>\n<p>So which crate the trait resides in matters (local vs. other crate), not necessarily that it's in core.<br>\nYou'll have to test that locally with a subcrate, playground can't reproduce that.</p>",
        "id": 266110995,
        "sender_full_name": "The 8472",
        "timestamp": 1640527411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Compiler.20treating.20core.20trait.20differently.20.3F/near/266110995\">said</a>:</p>\n<blockquote>\n<p>From the comments:</p>\n<blockquote>\n<p>It'll be <a href=\"https://github.com/rust-lang/rust/issues/65879\">#65879</a>, which changed the coherence rules to allow impl&lt;T&gt; ForeignTrait&lt;LocalType&gt; for ForeignType&lt;T&gt;.</p>\n</blockquote>\n<p>So which crate the trait resides in matters (local vs. other crate), not necessarily that it's in core.<br>\nYou'll have to test that locally with a subcrate, playground can't reproduce that.</p>\n</blockquote>\n<p>I already did that these results were found locally</p>",
        "id": 266111470,
        "sender_full_name": "Oguz",
        "timestamp": 1640528164
    },
    {
        "content": "<p>Further reduced to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">it</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span>: <span class=\"nc\">std</span>::<span class=\"n\">ops</span>::<span class=\"n\">Index</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 266130408,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640557000
    },
    {
        "content": "<p>Using <code>std::ops::Index&lt;usize, Output = U&gt;</code> yields</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">broken MIR in NodeId(4) (_2 = &amp;(*_1)[_3]): bad assignment (&amp;U = &amp;T): Sorts(ExpectedFound { expected: U, found: T })</span>\n</code></pre></div>",
        "id": 266130479,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640557095
    },
    {
        "content": "<p>There is a conversion from some abstract indexing operation into a call to the \"built-in\" (<code>lang</code>) <code>Index</code> trait here: <a href=\"https://github.com/rust-lang/rust/blob/1418df5888131578eae04b39360f30df4ffe5599/compiler/rustc_typeck/src/check/place_op.rs#L209-L234\">https://github.com/rust-lang/rust/blob/1418df5888131578eae04b39360f30df4ffe5599/compiler/rustc_typeck/src/check/place_op.rs#L209-L234</a></p>",
        "id": 266131780,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1640559183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Compiler.20treating.20core.20trait.20differently.20.3F/near/266131780\">said</a>:</p>\n<blockquote>\n<p>This looks relevant: <a href=\"https://github.com/rust-lang/rust/blob/1418df5888131578eae04b39360f30df4ffe5599/compiler/rustc_mir_build/src/thir/cx/expr.rs#L1025-L1038\">https://github.com/rust-lang/rust/blob/1418df5888131578eae04b39360f30df4ffe5599/compiler/rustc_mir_build/src/thir/cx/expr.rs#L1025-L1038</a></p>\n</blockquote>\n<p>That indeed looks relevant however I am not able to convert our <code>Index</code> operation to <code>overloaded</code> one I need a <code>ty::Ref</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> which doesn't(?) exist in current context</p>",
        "id": 266181251,
        "sender_full_name": "Oguz",
        "timestamp": 1640619596
    }
]