[
    {
        "content": "<p>I'm looking into supporting <code>asm!</code> for rust-gpu, since it seems to be the least sketchy option for some things we're doing. However, it seems to be a futile path: this line fails <a href=\"https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler/rustc_ast_lowering/src/expr.rs#L1095\">https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler/rustc_ast_lowering/src/expr.rs#L1095</a> because this <code>ok()</code> returns None <a href=\"https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler/rustc_session/src/session.rs#L1421\">https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler/rustc_session/src/session.rs#L1421</a> because it looks like there's quite a bit of architecture-specific behavior in the frontend <a href=\"https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler/rustc_target/src/asm/mod.rs#L185\">https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler/rustc_target/src/asm/mod.rs#L185</a></p>\n<p>I'll probably just go with a custom <code>my_asm(\"constant string\")</code> method call, but just wanted to check if there's any way around that first. Just seems a little weird that there's architecture-specific stuff in the frontend, because it seems like the <code>AsmBuilderMethods::codegen_inline_asm</code> method is generic enough to do all the validation itself (it basically just takes a string...)</p>",
        "id": 216357610,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605107436
    },
    {
        "content": "<p><code>codegen_inline_asm</code> only runs when a function is actually codegened. From a user perspective this kind of post-monomorphization errors is bad, as they don't error on <code>cargo check</code> and not when the function just so happens to not be codegened because it is for example marked as <code>#[inline]</code>.</p>",
        "id": 216357924,
        "sender_full_name": "bjorn3",
        "timestamp": 1605107608
    },
    {
        "content": "<p>okay, guess I'll just go the <code>my_asm(\"constant string\")</code> route, thanks!</p>",
        "id": 216358205,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605107738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330900\">@Ashley Hauck</span> <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> may be able to help.</p>",
        "id": 216358334,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605107783
    },
    {
        "content": "<p><code>asm!</code> seems like it <em>should</em> be the right construct. What's the logic you're looking to implement, and is there a reason it can't go in the frontend?</p>",
        "id": 216358500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605107874
    },
    {
        "content": "<p><code>rustc_codegen_spirv</code> is an out of tree codegen backend targeting spirv.</p>",
        "id": 216358626,
        "sender_full_name": "bjorn3",
        "timestamp": 1605107923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I'm aware, but 1) I'm hoping one day it isn't out of tree and 2) we could potentially add at least tier 3 support for the necessary target, and parse the asm bits.</p>",
        "id": 216358928,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605108053
    },
    {
        "content": "<p>Right now, the use cases are for defining complex \"GPU standard library\" functionality (for example, <a href=\"https://github.com/EmbarkStudios/rust-gpu/pull/216\">https://github.com/EmbarkStudios/rust-gpu/pull/216</a>), and there's quite a few exotic spir-v instructions that would be annoying to define intrinsic methods for. For example, <code>OpMemoryBarrier</code> is customzed with two operands in the actual instruction literal, and one of them is flags, so that'd be however many dozens/hundreds of intrinsics for each combination. It'd be nice to be able to just say <code>asm!(\"OpMemoryBarrier Workgroup MakeAvailable Acquire\")</code> or whatever.</p>",
        "id": 216359044,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605108109
    },
    {
        "content": "<p>The actual assembly string doesn't get parsed until you get to the backend, so I think the only logic you'd have to implement in the frontend is the handling of register names.</p>",
        "id": 216359382,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605108276
    },
    {
        "content": "<p>Yeah, the register name bits get passed as semantic holes in the asm string (InlineAsmOperandRef), so there shouldn't even be any register names in the frontend... so I'm not actually really sure what the frontend is even doing, does it need register names for some other reason?</p>",
        "id": 216359635,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605108395
    },
    {
        "content": "<p>Oh, never mind, the actual register names are buried deep in that struct, sorry.</p>",
        "id": 216359847,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605108493
    },
    {
        "content": "<p>that's kind of surprising, considering the exposed syntax doesn't mention register names at all? idk really what I'm doing, though</p>",
        "id": 216360025,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605108581
    },
    {
        "content": "<p>Anyway, would it be reasonable for me to submit a PR supporting SPIR-V asm! for the frontend? it seems... pretty weird... to  merge in specific support for an out-of-tree backend.</p>",
        "id": 216360977,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605108984
    },
    {
        "content": "<p>oh, wow, okay, just checked, <code>llvm_asm!</code> works fine, guess I'll just go that hacky route instead for now I guess :P (\"llvm_asm\" without even going through llvm is kind of amusingly bad)</p>",
        "id": 216362230,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605109568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330900\">@Ashley Hauck</span> There's a PR adding <code>asm!</code> support for WASM, you might want to use that as a reference.</p>",
        "id": 216362361,
        "sender_full_name": "Amanieu",
        "timestamp": 1605109642
    },
    {
        "content": "<p>would it be okay for me to PR that, considering the backend using it doesn't exist in-tree?</p>",
        "id": 216362928,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605109886
    },
    {
        "content": "<p>I think it's probably fine. In any case this code would only be used if <code>target_arch = spirv</code> so it won't affect normal code.</p>",
        "id": 216363747,
        "sender_full_name": "Amanieu",
        "timestamp": 1605110224
    },
    {
        "content": "<p>Submitted <a href=\"https://github.com/rust-lang/rust/pull/78950\">https://github.com/rust-lang/rust/pull/78950</a> doing that frontend change.</p>",
        "id": 216370633,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605113630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330900\">@Ashley Hauck</span> I personally think that in-tree support for out-of-tree code is fine, as long as there's some hope that code may move in-tree one day. :)</p>",
        "id": 216374876,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605115739
    },
    {
        "content": "<p>I hope that happens! :D that'd be so hecking cool</p>",
        "id": 216375116,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605115884
    },
    {
        "content": "<p>We probably need some sensible way of handling architectures with dynamically allocated registers.</p>",
        "id": 216375385,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116017
    },
    {
        "content": "<p>Either that, or perhaps inline assembly for such an architecture should just not have named registers at all. You could pass in values that are in registers, and the backend would substitute in whatever register currently contains the value, and then you would allocate additional registers either by using the SSA instructions within the assembly string or by passing in dummy values in read-write registers.</p>",
        "id": 216375753,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116229
    },
    {
        "content": "<p>Yeah, thinking about it more, that seems like the right approach. So what you submitted in that PR seems like it might be the right long-term solution.</p>",
        "id": 216376161,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116463
    },
    {
        "content": "<p>As far as I can tell, right now <code>out</code> registers are passed in as a <code>PlaceRef</code> in codegen_inline_asm, which I think boils down to a pointer (at least in the spir-v backend), so there could be an automatic store from whatever register was generated to that pointer?</p>",
        "id": 216376182,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605116478
    },
    {
        "content": "<p>Yeah, thinking about it more, that seems like the right approach. So what you submitted in that PR seems like it might be the right long-term solution.</p>",
        "id": 216376219,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330900\">@Ashley Hauck</span> That sounds plausible. But ideally you could reuse the output register as the location to next obtain the value from, to avoid an unnecessary spill.</p>",
        "id": 216376521,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116668
    },
    {
        "content": "<p>(unless \"pointer\" means something different in the spirv backend)</p>",
        "id": 216376550,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116689
    },
    {
        "content": "<p>nah, regular pointer presumably allocated with the equivalent of alloca - would get cleaned up with a mem2reg pass, but yeah, makes sense.</p>",
        "id": 216376631,
        "sender_full_name": "Ashley Hauck",
        "timestamp": 1605116733
    },
    {
        "content": "<p>Should be feasible at least for simple out values.</p>",
        "id": 216376751,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116795
    },
    {
        "content": "<p>Assuming you can give that information to your SSA handling to tell it where the value now is.</p>",
        "id": 216376818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116834
    },
    {
        "content": "<p>rust-gpu is so incredibly cool. :)</p>",
        "id": 216376858,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1605116861
    }
]