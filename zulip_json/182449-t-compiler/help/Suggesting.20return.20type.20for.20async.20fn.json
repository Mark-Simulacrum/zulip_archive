[
    {
        "content": "<p>Hi all, new here, so I'm sorry if my question/understanding below is totally flawed.</p>\n<p>I'm working on <a href=\"https://github.com/rust-lang/rust/issues/90027\">#90027</a> trying to<br>\nmake the suggestion of adding a missing return type to an <code>async</code> function declaration when:</p>\n<ol>\n<li>the function's body block type is not unit (the \"found\" type), but</li>\n<li>the function's declaration is the default return type (unit) and is not <code>main</code> (the \"expected\"<br>\n   type).</li>\n</ol>\n<p>This suggestion is emitted for regular <code>fn</code>s, but is not emitted for <code>async fn</code>s currently. I'm having trouble<br>\ntrying to compute the \"expected\" return type of an <code>async fn</code> that can \"see through\" the desugaring,<br>\nsince I <em>think</em> the logic used to check suggestion applicability for regular <code>fn</code>s do not apply to<br>\n<code>async fn</code> because of the desugaring into a closure that implements some trait which causes the<br>\n\"expected type\" to change from unit (<code>DefaultReturn</code>) to some opaque type? I think that this means that<br>\nan <code>async fn foo()</code> declaration while seemingly is <code>DefaultReturn</code> before desugaring, is no longer so after<br>\ndesugaring.</p>\n<p>In <a href=\"https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs?_pjax=%23js-repo-pjax-container%2C%20div%5Bitemtype%3D%22http%3A%2F%2Fschema.org%2FSoftwareSourceCode%22%5D%20main%2C%20%5Bdata-pjax-container%5D#L502\"><code>rustc_typeck::check::fn_ctxt::suggestions::suggest_missing_return_type</code></a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">fn_decl</span><span class=\"p\">.</span><span class=\"n\">output</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"p\">.</span><span class=\"n\">is_suggestable</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">can_suggest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"p\">.</span><span class=\"n\">is_unit</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hir</span>::<span class=\"n\">FnRetTy</span>::<span class=\"n\">DefaultReturn</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">span_suggestion</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"try adding a return type\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"-&gt; {} \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resolve_vars_with_obligations</span><span class=\"p\">(</span><span class=\"n\">found</span><span class=\"p\">)),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Applicability</span>::<span class=\"n\">MachineApplicable</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think this suggestion to add a <code>-&gt; FoundReturnType</code> suggestion doesn't get triggered for<br>\n<code>async fn</code> because desugaring causes <code>expected.is_unit()</code> to become false?</p>\n<p>I would appreciate any guidance on this matter as to how to proceed. I'm not 100% certain of the<br>\n<code>impl Trait</code> opaque type post-desugaring, if it is some <code>impl Future&lt;Output = ()&gt;</code> expected type<br>\npost-desugaring for the async fn declaration then could we use that to justify the suggestion of<br>\nusing the found type of the closure generated for the pre-desugaring replacement (seems very hacky)?</p>\n<p>If I try to print the pretty HIR dump for a trivial <code>async fn</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">hello</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I get something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">hello</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\"> </span>-&gt;\n     <span class=\"cm\">/*impl Trait*/</span><span class=\"w\"> </span><span class=\"cp\">#[lang = </span><span class=\"s\">\"from_generator\"</span><span class=\"cp\">]</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_task_context</span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                                                   </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                       </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                                           </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                                                               </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                                                           </span><span class=\"n\">_t</span><span class=\"w\"></span>\n<span class=\"w\">                                                       </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                                                   </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258286728,
        "sender_full_name": "Jieyou Xu",
        "timestamp": 1634684718
    }
]