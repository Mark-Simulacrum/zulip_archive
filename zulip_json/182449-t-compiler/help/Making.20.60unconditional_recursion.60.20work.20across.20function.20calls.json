[
    {
        "content": "<p>It's that time of the year again, so I have started to look into <a href=\"https://github.com/rust-lang/rust/issues/57965\">#57965</a> again (seriously this time). I think I have most of the linting logic figured out, but am now hitting issues where it tried to read from stolen MIR.</p>\n<p>I have split up <code>mir_built</code> into two queries to be able to run the lint right after MIR building (just like it is now), but without introducing cycles where the lint requests MIR of a called function, which then runs the lint on that function, which then requests the MIR of the original caller again. I'm not sure if this is the best way to do it, but it should work.</p>\n<p>The problem now is that MIR may be optimized or otherwise analyzed, which steals the MIR from the <code>mir_built</code> query. If some unrelated function is then linted, the unoptimized MIR will be requested, which has been stolen. Any suggestions for getting around this?</p>",
        "id": 205684012,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596292471
    },
    {
        "content": "<p>I guess I can add <code>Steal::is_stolen</code> and fall back to <code>optimized_mir</code>, which should always exist then...</p>",
        "id": 205684840,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596293789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> you're solving the same problem as I'm solving for inlining</p>",
        "id": 205685168,
        "sender_full_name": "oli",
        "timestamp": 1596294286
    },
    {
        "content": "<p>I think so, yes</p>",
        "id": 205685171,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294295
    },
    {
        "content": "<p>There's an impl in <a href=\"https://github.com/rust-lang/rust/pull/68828\">https://github.com/rust-lang/rust/pull/68828</a></p>",
        "id": 205685179,
        "sender_full_name": "oli",
        "timestamp": 1596294314
    },
    {
        "content": "<p>which gives you all the info you are looking for</p>",
        "id": 205685181,
        "sender_full_name": "oli",
        "timestamp": 1596294322
    },
    {
        "content": "<p>then you can \"just not\" request the <code>optimized_mir</code> of a function if you know that's gonna cause a cycle</p>",
        "id": 205685233,
        "sender_full_name": "oli",
        "timestamp": 1596294378
    },
    {
        "content": "<p>and if <code>mir_inliner_cycle</code> returns <code>None</code>, you don't need to do anything anyway</p>",
        "id": 205685235,
        "sender_full_name": "oli",
        "timestamp": 1596294400
    },
    {
        "content": "<p>Ah, so does that just run inlining before any other optimizations?</p>",
        "id": 205685249,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294428
    },
    {
        "content": "<p>nope</p>",
        "id": 205685254,
        "sender_full_name": "oli",
        "timestamp": 1596294438
    },
    {
        "content": "<p>it computes the call graph before any other optimizations</p>",
        "id": 205685256,
        "sender_full_name": "oli",
        "timestamp": 1596294445
    },
    {
        "content": "<p>so as long as const prop or something else doesn't start devirtualizing function calls, we're fine</p>",
        "id": 205685261,
        "sender_full_name": "oli",
        "timestamp": 1596294469
    },
    {
        "content": "<p>and when we start devirtualizing we need some fancy scheming anyway</p>",
        "id": 205685303,
        "sender_full_name": "oli",
        "timestamp": 1596294484
    },
    {
        "content": "<p>oh, okay</p>",
        "id": 205685309,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294507
    },
    {
        "content": "<p>the perf results aren't too bad (up to 4% in some cases), so if we have two good uses cases for it, maybe we can argue for taking the perf hit</p>",
        "id": 205685321,
        "sender_full_name": "oli",
        "timestamp": 1596294547
    },
    {
        "content": "<p>i thought we could just solve inlining cycles by splitting the optimization pipeline into distinct queries</p>",
        "id": 205685322,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294548
    },
    {
        "content": "<p>and then use the early query before and in inlining, and the later query afterwards</p>",
        "id": 205685328,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294577
    },
    {
        "content": "<p>that's not too great, we'll want to run inlining and const prop in a loop until we reach a fixed point I think</p>",
        "id": 205685329,
        "sender_full_name": "oli",
        "timestamp": 1596294581
    },
    {
        "content": "<p>it also has the same problems wrt devirtualization</p>",
        "id": 205685373,
        "sender_full_name": "oli",
        "timestamp": 1596294605
    },
    {
        "content": "<p>and I have no idea on the perf implications</p>",
        "id": 205685375,
        "sender_full_name": "oli",
        "timestamp": 1596294614
    },
    {
        "content": "<p>maybe we should just request a compiler design meeting on this?</p>",
        "id": 205685381,
        "sender_full_name": "oli",
        "timestamp": 1596294632
    },
    {
        "content": "<p>hmm, yeah</p>",
        "id": 205685387,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294649
    },
    {
        "content": "<p>idk, I haven't looked into this much</p>",
        "id": 205685391,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294659
    },
    {
        "content": "<p>oh and I think the problem you're encountering now would still happen in the inlining split case ^^</p>",
        "id": 205685401,
        "sender_full_name": "oli",
        "timestamp": 1596294672
    },
    {
        "content": "<p>fixed-point inlining? that does sound cursed</p>",
        "id": 205685406,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596294684
    },
    {
        "content": "<p>well... if we really want to take away work from llvm, we gotta do something like that</p>",
        "id": 205685451,
        "sender_full_name": "oli",
        "timestamp": 1596294727
    },
    {
        "content": "<p>we'll get a big gain just by normal inlining, but only if that inlining doesn't use the split scheme, otherwise we only ever inline a single level I think</p>",
        "id": 205685468,
        "sender_full_name": "oli",
        "timestamp": 1596294767
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: src/librustc_mir/interpret/eval_context.rs:268:21: expected type differs from actual type.\nexpected: &amp;mut std::string::String\nactual: &amp;std::string::String\n  --&gt; /home/jonas/dev/rust/src/test/ui/span/mut-arg-hint.rs:14:5\n   |\nLL | /     pub fn foo(mut a: &amp;String) {\nLL | |         a.push_str(&quot;foo&quot;); //~ ERROR cannot borrow `*a` as mutable, as it is behind a `&amp;` reference\nLL | |     }\n   | |_____^\n</code></pre></div>\n\n\n<p>no idea how this one's even possible</p>",
        "id": 205693682,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596307958
    },
    {
        "content": "<p>oh, I guess requesting the optimized MIR is not a good idea when there's type errors</p>",
        "id": 205693770,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596308072
    },
    {
        "content": "<p>Is there a way to find out if any <em>fatal</em> errors were reported? <code>Session::has_errors</code> will return true even if it just has errors because of a <code>deny</code>d lint.</p>",
        "id": 205694219,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596308873
    },
    {
        "content": "<p>not sure if <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#structfield.tainted_by_errors\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#structfield.tainted_by_errors</a> suffices for your case</p>",
        "id": 205694411,
        "sender_full_name": "oli",
        "timestamp": 1596309209
    },
    {
        "content": "<p>that helps, yeah :)</p>",
        "id": 205701177,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596321708
    },
    {
        "content": "<p>now the remaining issue to make this useful: <code>Instance::resolve</code> will ICE when it can't fully normalize the result</p>",
        "id": 205701227,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596321787
    },
    {
        "content": "<p>this is a problem because I may pass semi-monomorphized substs to it that allow the <em>instance</em> to be resolved to a concrete function item, but that function might still contain generic types (and thus unnormalizable projections)</p>",
        "id": 205701279,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596321888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Making.20.60unconditional_recursion.60.20work.20across.20function.20calls/near/205694411\">said</a>:</p>\n<blockquote>\n<p>not sure if <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#structfield.tainted_by_errors\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#structfield.tainted_by_errors</a> suffices for your case</p>\n</blockquote>\n<p>actually no, this still seems to give the same error</p>",
        "id": 205703061,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596325463
    },
    {
        "content": "<p>okay so now I have</p>\n<div class=\"codehilite\"><pre><span></span><code>error: function cannot return without recursing\n  --&gt; $DIR/lint-unconditional-recursion.rs:152:1\n   |\nLL | fn cycle1() {\n   | ^^^^^^^^^^^ cannot return without recursing\nLL |     cycle2();\n   |     -------- call into the next function in the cycle\n...\nLL |     cycle1();\n   |     -------- call site completing the cycle\n   |\nnote: next function in the cycle\n  --&gt; $DIR/lint-unconditional-recursion.rs:156:1\n   |\nLL | fn cycle2() {\n   | ^^^^^^^^^^^\n</code></pre></div>\n\n\n<p>which looks odd, since the labels are getting reordered in a way that's hard to read. I'd like to have something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: function cannot return without recursing\n  --&gt; $DIR/lint-unconditional-recursion.rs:152:1\n   |\nLL | fn cycle1() {\n   | ^^^^^^^^^^^ cannot return without recursing\nLL |     cycle2();\n   |     -------- call into the next function in the cycle\n   |\nnote: next function in the cycle\n  --&gt; $DIR/lint-unconditional-recursion.rs:156:1\n   |\nLL | fn cycle2() {\n   | ^^^^^^^^^^^\n...\nLL |     cycle1();\n   |     -------- call site completing the cycle\n</code></pre></div>\n\n\n<p>I can't find a way to access the \"sub\"-diagnostic to attach labels. Is that possible?</p>",
        "id": 205704587,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596328776
    },
    {
        "content": "<p>does <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.Diagnostic.html#method.highlighted_note\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.Diagnostic.html#method.highlighted_note</a> with <code>Style::LabelSecondary</code> do what you want?</p>",
        "id": 205704810,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596329279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> ^</p>",
        "id": 205704852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596329327
    },
    {
        "content": "<p>that seems to be for piecing a message together from parts</p>",
        "id": 205704856,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596329334
    },
    {
        "content": "<p>and doesn't take a span</p>",
        "id": 205704861,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596329357
    },
    {
        "content": "<p>ah hmm good point</p>",
        "id": 205704862,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596329368
    },
    {
        "content": "<p>if you used <code>span_note</code> for 'call site completing the cycle' you could have the ordering be the way you want</p>",
        "id": 205704911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596329437
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: function cannot return without recursing\n  --&gt; $DIR/lint-unconditional-recursion.rs:152:1\n   |\nLL | fn cycle1() {\n   | ^^^^^^^^^^^ cannot return without recursing\nLL |     cycle2();\n   |     -------- call into the next function in the cycle\n   |\nnote: next function in the cycle\n  --&gt; $DIR/lint-unconditional-recursion.rs:156:1\n   |\nLL | fn cycle2() {\n   | ^^^^^^^^^^^\n...\nnote: call site completing the cycle\nLL |     cycle1();\n   |     --------\n</code></pre></div>",
        "id": 205704917,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596329460
    },
    {
        "content": "<p>yeah</p>",
        "id": 205704923,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596329475
    },
    {
        "content": "<p>ah, wait, the span_note can be used with a <code>MultiSpan</code>, which includes labels</p>",
        "id": 205704929,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596329505
    },
    {
        "content": "<p>seems fairly hard to integrate into what I have though</p>",
        "id": 205704987,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596329585
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/75067\">#75067</a> for now, let's see if that even works without being horribly slow</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> in case you're interested in this</p>",
        "id": 205741403,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596397779
    },
    {
        "content": "<p>perfbot doesn't like it. I really think we should find a single scheme for inlining and unconditional_recursion</p>",
        "id": 205763554,
        "sender_full_name": "oli",
        "timestamp": 1596436703
    },
    {
        "content": "<p>While the current state of my PR has a 4% regression, we likely can figure something out to get rid of that, at which point the <code>unconditional_recursion</code> check would just become a single query invocation more expensive.</p>",
        "id": 205763577,
        "sender_full_name": "oli",
        "timestamp": 1596436758
    }
]