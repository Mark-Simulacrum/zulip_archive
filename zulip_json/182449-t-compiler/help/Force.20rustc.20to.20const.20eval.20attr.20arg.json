[
    {
        "content": "<p>I have a custom codegen backend which needs an internal attribute that is registered by the user. I  want to have something like <code>#[foo(bar(5 + 5))]</code>. Is there a way to force rustc to const eval the value inside <code>bar()</code> from the codegen when codegenning functions?</p>\n<p>I know that intrinsic functions that internally force rustc to const eval the arguments exist, but i am not sure thats the best option, and im not sure how to declare one. Help appreciated!</p>",
        "id": 256497998,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633561367
    },
    {
        "content": "<p>And note, i need this to be evaluated as a \"normal\" const expr, as in, all const vars available in scope can be used as normal</p>",
        "id": 256498192,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633561482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> macro expansion happens before constant evaluation, so I doubt this is possible. Rustc doesn't even parse anything inside <code>foo(...)</code>, which is how proc macros can have custom syntax.</p>",
        "id": 256498969,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1633561978
    },
    {
        "content": "<p>Right im thinking that an intrinsic is the only way, but im not sure how to tell rustc to always const eval arguments to a function</p>",
        "id": 256499017,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633562005
    },
    {
        "content": "<p>because rustc does it for SIMD intrinsics</p>",
        "id": 256499030,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633562015
    },
    {
        "content": "<p>I would have to intercept the call to the intrinsic from the codegen during the builder's call method, then convert the <code>&amp;'ll Value</code> into a constant number value, which would work if rustc codegenned the argument to be a const value</p>",
        "id": 256499172,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1633562101
    },
    {
        "content": "<p>Perhaps you can extract <code>5 + 5</code> from the attribute, and put that in a <code>const </code> item.</p>",
        "id": 260679900,
        "sender_full_name": "fee1-dead",
        "timestamp": 1636388267
    }
]