[
    {
        "content": "<p>Hi! I'm getting type errors where I'm trying to get a vector of pointers to realize it's Valid <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> in some code I'm hacking on. I've compared several examples and now I'm at the point where I think it's an issue in the compiler. Specifically, my example is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug,Copy,Clone)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(simd)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">SimdConst</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LANES</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">LANES</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If anyone knows where to start looking to fix this in terms of making this legal in the compiler, I'd love some ideas! I think this happens during SIMD monomorphization but I believe this might be a pre-monomorphization error of some kind of failed typechecking. I filed this as issue <a href=\"https://github.com/rust-lang/rust/issues/85915\">https://github.com/rust-lang/rust/issues/85915</a></p>",
        "id": 241072019,
        "sender_full_name": "Jubilee",
        "timestamp": 1622579891
    },
    {
        "content": "<p>The pointers seems to be simply rejected despite the error message suggesting otherwise: <a href=\"https://github.com/rust-lang/rust/blob/7f9ab0300cd66f6f616e03ea90b2d71af474bf28/compiler/rustc_typeck/src/check/check.rs#L1220\">https://github.com/rust-lang/rust/blob/7f9ab0300cd66f6f616e03ea90b2d71af474bf28/compiler/rustc_typeck/src/check/check.rs#L1220</a> (<code>is_machine</code> does not include pointers).</p>",
        "id": 241075966,
        "sender_full_name": "tm",
        "timestamp": 1622581728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/SIMD.20pointers.20monomorphization.20error.3F/near/241075966\">said</a>:</p>\n<blockquote>\n<p>The pointers seems to be simply rejected despite the error message suggesting otherwise: <a href=\"https://github.com/rust-lang/rust/blob/7f9ab0300cd66f6f616e03ea90b2d71af474bf28/compiler/rustc_typeck/src/check/check.rs#L1220\">https://github.com/rust-lang/rust/blob/7f9ab0300cd66f6f616e03ea90b2d71af474bf28/compiler/rustc_typeck/src/check/check.rs#L1220</a> (<code>is_machine</code> does not include pointers).</p>\n</blockquote>\n<p>Is that so...?</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_machine</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Uint</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>ah, lovely.</p>",
        "id": 241079411,
        "sender_full_name": "Jubilee",
        "timestamp": 1622583528
    },
    {
        "content": "<p>so the full parameters are accepted because they're parameters, and the machine types are accepted because they're explicitly allowed, but a pointer type is not recognized.</p>",
        "id": 241079517,
        "sender_full_name": "Jubilee",
        "timestamp": 1622583604
    },
    {
        "content": "<p>Obviously this has to be fixed, raw pointers should be explicitly allowed, my question now is, I guess, which pointers I want to legalize. Conservatively: raw pointers. Hilariously: any pointer.</p>",
        "id": 241079807,
        "sender_full_name": "Jubilee",
        "timestamp": 1622583831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptrx2</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>...well, that monomorphizes successfully.</p>",
        "id": 241080344,
        "sender_full_name": "Jubilee",
        "timestamp": 1622584211
    },
    {
        "content": "<p>...I have absolutely no idea what I'd do with it, but it does.</p>",
        "id": 241080367,
        "sender_full_name": "Jubilee",
        "timestamp": 1622584234
    },
    {
        "content": "<blockquote>\n<p>error: monomorphising SIMD type <code>ptrx2&lt;fn(i32) -&gt; i32 {incr}&gt;</code> with a non-primitive-scalar (integer/float/pointer) element type <code>fn(i32) -&gt; i32 {incr}</code></p>\n</blockquote>\n<p>Okay, okay, so no function pointers, but refs are fair game I guess.</p>",
        "id": 241082879,
        "sender_full_name": "Jubilee",
        "timestamp": 1622585981
    },
    {
        "content": "<blockquote>\n<p>error: monomorphising SIMD type <code>ptrx2&lt;&amp;[i32]&gt;</code> with a non-primitive-scalar (integer/float/pointer) element type <code>&amp;[i32]</code></p>\n</blockquote>\n<p>Also no slices, cool!</p>",
        "id": 241083024,
        "sender_full_name": "Jubilee",
        "timestamp": 1622586102
    },
    {
        "content": "<p>And now it's a PR! Thank you! <a href=\"https://github.com/rust-lang/rust/pull/85919\">https://github.com/rust-lang/rust/pull/85919</a></p>",
        "id": 241090990,
        "sender_full_name": "Jubilee",
        "timestamp": 1622592286
    },
    {
        "content": "<p>What happens with a <code>*const [i32]</code>?</p>",
        "id": 241296109,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1622657004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"338379\">Giacomo Stevanato</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/SIMD.20pointers.20monomorphization.20error.3F/near/241296109\">said</a>:</p>\n<blockquote>\n<p>What happens with a <code>*const [i32]</code>?</p>\n</blockquote>\n<p>it fails like it should, see <a href=\"https://github.com/workingjubilee/rustc/pull/1/commits/c0ca38288f5d56ffaae1c58f77af5915b8a3133b\">https://github.com/workingjubilee/rustc/pull/1/commits/c0ca38288f5d56ffaae1c58f77af5915b8a3133b</a></p>",
        "id": 241305399,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1622661035
    }
]