[
    {
        "content": "<p>Hi everyone, I'd like to know what mechanism the compiler uses to decide which expressions are valid constants or valid inside a constant function</p>",
        "id": 159538137,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1551291195
    },
    {
        "content": "<p>There's currently two things, <code>librustc_mir/transform/const_qualif.rs</code> for constants and unstable const fn. Then there's <code>librustc_mir/transform/qualif_min_const_fn.rs</code></p>",
        "id": 159586305,
        "sender_full_name": "oli",
        "timestamp": 1551340609
    },
    {
        "content": "<p>The latter is for stable const fn</p>",
        "id": 159586322,
        "sender_full_name": "oli",
        "timestamp": 1551340634
    },
    {
        "content": "<p>thank you, I'm not familiarized with the structures shown in <code>qualify_consts.rs</code>, i can understand parts of it but not the whole picture. I suppose that at the end something qualify as a constant if is a part of a constant, is the result of a <code>const fn</code> or is the result of operating constants  (excluding  raw pointer operations), am I missing something?</p>",
        "id": 159621949,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1551366750
    },
    {
        "content": "<p>Well, there are some details like the differences between statics and constants wrt what is permitted and how promotion has special rules. Also we don't allow <code>box</code> keywords, but yes, most things boil down to safe primitives or const fn calls</p>",
        "id": 159626432,
        "sender_full_name": "oli",
        "timestamp": 1551369558
    },
    {
        "content": "<p>ok then, thank you Oliver!</p>",
        "id": 159627400,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1551370171
    },
    {
        "content": "<p>Well, there are some details like the differences between statics and constants wrt what is permitted and how promotion has special rules. Also we don't allow <code>box</code> keywords, but yes, most things boil down to safe primitives or const fn calls</p>",
        "id": 159629484,
        "sender_full_name": "oli",
        "timestamp": 1551371614
    }
]