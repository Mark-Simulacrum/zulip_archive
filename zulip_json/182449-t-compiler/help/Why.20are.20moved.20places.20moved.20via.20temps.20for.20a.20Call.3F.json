[
    {
        "content": "<p>This is clearly intentional, as <a href=\"https://github.com/rust-lang/rust/blob/efec545293b9263be9edfb283a7aa66350b3acbf/compiler/rustc_mir_build/src/build/expr/as_operand.rs#L83-L86\">it's documented on <code>as_operand</code></a>, but it's unclear to me why it's needed.</p>\n<p>I <a href=\"https://github.com/rust-lang/rust/issues/91521\">stare</a> at the MIR that's generated like</p>\n<div class=\"codehilite\"><pre><span></span><code>    _2 = move _1;\n    _0 = call foo(move _2)\n</code></pre></div>\n<p>and it just doesn't seem like that move-through-a-temporary is useful.</p>\n<p>Is it maybe guarding against ending up with <code>_1 = call foo(move _1)</code>?  Or maybe it's only needed for copy parameters, but wasn't changed after the <code>Operand::{Copy, Move}</code> split in MIR?</p>\n<p>EDIT: Oh, wow, according to blame that comment dates all the way back to <a href=\"https://github.com/rust-lang/rust/issues/27893\">#27893</a> in 2015.</p>",
        "id": 263734598,
        "sender_full_name": "scottmcm",
        "timestamp": 1638655926
    },
    {
        "content": "<p>it treats all kinds of places and rvalues the same, no?</p>",
        "id": 263736353,
        "sender_full_name": "cuviper",
        "timestamp": 1638658490
    },
    {
        "content": "<p>I see nothing about whether the source is already a <code>move</code></p>",
        "id": 263736374,
        "sender_full_name": "cuviper",
        "timestamp": 1638658536
    },
    {
        "content": "<p>Yeah, the question is more \"would it break assumptions elsewhere to use the place directly for call-by-move?\"</p>\n<p>For Copy types it makes sense that the temporary is needed, since things like <code>foo(x, {x *= 2; x})</code> could exist.</p>",
        "id": 263739213,
        "sender_full_name": "scottmcm",
        "timestamp": 1638662584
    }
]