[
    {
        "content": "<p>Hey there! I'm working (at least trying to work on) <a href=\"https://github.com/rust-lang/rust/issues/79458\">#79458</a>. For this, I believe that I need to get a <code>DefId</code> for the <code>impl</code> corresponding to a <code>TraitRef</code>. There's already the <code>TyCtxt</code> <code>impl_trait_ref</code> query for going from a <code>DefId</code> of an <code>impl</code> to a <code>TraitRef</code>, but not the other way around. <code>impl_polarity</code> takes a <code>DefId</code> of an <code>impl</code>, and I'm provided with a <code>TraitRef</code>. Is there a way to do this? (I tried filtering out negative polarity <code>impl</code>s in <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs#L1296-L1318\">this code</a> but it caused a bunch of test failures, which should not have happened).<br>\nP.S. sorry if this is kind of disorganized of a question, I'm new to contributing and really confused why my changes didn't work correctly.</p>",
        "id": 218241788,
        "sender_full_name": "James",
        "timestamp": 1606701328
    },
    {
        "content": "<p>TraitRef has a def_id field, is that what you're looking for? <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TraitRef.html#structfield.def_id\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TraitRef.html#structfield.def_id</a></p>",
        "id": 218241846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606701455
    },
    {
        "content": "<p>the <code>def_id</code> on TraitRef is for the trait (i.e. <code>trait Trait</code>), not the impl (<code>impl Trait for Ty</code>)</p>",
        "id": 218241863,
        "sender_full_name": "James",
        "timestamp": 1606701483
    },
    {
        "content": "<blockquote>\n<p>I tried filtering out negative polarity impls in this code but it caused a bunch of test failures, which should not have happened</p>\n</blockquote>\n<p>FYI, any change in diagnostics at all will cause tests to fail, so it might not have been the wrong change</p>",
        "id": 218241890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606701496
    },
    {
        "content": "<p>It was incorrectly filtering out trait suggestions that should've been there afaik but I'll check again I guess</p>",
        "id": 218241894,
        "sender_full_name": "James",
        "timestamp": 1606701519
    },
    {
        "content": "<p>oh I see - you know there can only be one implementation because of coherence, and you want to find it</p>",
        "id": 218241895,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606701523
    },
    {
        "content": "<p>ah ok, you'll know better than me whether the change was correct :)</p>",
        "id": 218241899,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606701542
    },
    {
        "content": "<p>this looks vaguely related, although you can't filter by the implementing type: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.implementations_of_trait\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.implementations_of_trait</a></p>",
        "id": 218241954,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606701610
    },
    {
        "content": "<p>There's also <code>all_impls</code> (or whatever it's called) which is used in <code>impl_trait_ref</code> but then filtering on that for every suggested implementation would end up being at least O(n^2) so I'd rather not do that.</p>",
        "id": 218242025,
        "sender_full_name": "James",
        "timestamp": 1606701782
    },
    {
        "content": "<p>Turns out some of those test failures actually were correct, so I'm going to re-run tests again with my original changes then see which ones are valid (hopefully, all of them). After that, I'll add a regression test.</p>",
        "id": 218459705,
        "sender_full_name": "James",
        "timestamp": 1606846098
    }
]