[
    {
        "content": "<p>For <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a>, I want to have a version of <code>tracing</code> for rustdoc that's different from the one the compiler uses (so I can disable <code>max_level_info</code>). I tried just adding it to Cargo.toml, which did recompile tracing, but new version still isn't being used:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUSTDOC_LOG=rustdoc rustdoc +stage1 re-export.rs\nwarning: some trace filter directives would enable traces that are disabled statically\n | `rustdoc=trace` would enable the TRACE level for the `rustdoc` target\n = note: the static max level is `info`\n = help: to enable DEBUG logging, remove the `max_level_info` feature\n</code></pre></div>",
        "id": 221078228,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178054
    },
    {
        "content": "<p>does anyone know how I can get the compiler to link the new version of tracing instead of the one from rustc_private?</p>",
        "id": 221078242,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178073
    },
    {
        "content": "<p>debug info from rustc_metadata: <a href=\"https://github.com/rust-lang/rust/pull/79540#issuecomment-751478610\">https://github.com/rust-lang/rust/pull/79540#issuecomment-751478610</a></p>",
        "id": 221078252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178090
    },
    {
        "content": "<p>here's the relevant part of <code>x.py build -vv</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling rustdoc v0.0.0 (/home/joshua/rustc/src/librustdoc)\n     Running `/home/joshua/rustc/build/bootstrap/debug/rustc --crate-name rustdoc --edition=2018 src/librustdoc/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debuginfo=1 -C debug-assertions=on -C overflow-checks=off -C metadata=90881a0b4d43ed90 -C extra-filename=-90881a0b4d43ed90 --out-dir /home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps --target x86_64-unknown-linux-gnu -C incremental=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/incremental -L dependency=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps -L dependency=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/release/deps --extern itertools=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libitertools-83f1673fe142bb82.rmeta --extern minifier=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libminifier-03cda0faecd93e9d.rmeta --extern pulldown_cmark=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libpulldown_cmark-218119c083f96992.rmeta --extern regex=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libregex-cc02f38aaec32263.rmeta --extern rayon=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/librustc_rayon-a64ebd71fcb7fc7c.rmeta --extern serde=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libserde-327b851a94413353.rmeta --extern serde_json=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libserde_json-1e611e520e317e14.rmeta --extern smallvec=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libsmallvec-16ef2c309f063f78.rmeta --extern tempfile=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libtempfile-836a689e4c6e9699.rmeta --extern tracing=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libtracing-92b827284e416e0b.rmeta -Zmacro-backtrace &#39;-Clink-args=-Wl,-rpath,$ORIGIN/../lib&#39; -Ztls-model=initial-exec -Cllvm-args=-import-instr-limit=10 -Z binary-dep-depinfo`\n</code></pre></div>",
        "id": 221078566,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178326
    },
    {
        "content": "<p>which does have <code>--extern tracing=/home/joshua/rustc/build/x86_64-unknown-linux-gnu/stage0-tools/x86_64-unknown-linux-gnu/release/deps/libtracing-92b827284e416e0b.rmeta</code>, so this isn't a cargo bug</p>",
        "id": 221078601,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178359
    },
    {
        "content": "<p><code>rustc_driver</code> is still linked to the <code>tracing</code> found in the sysroot.</p>",
        "id": 221078627,
        "sender_full_name": "bjorn3",
        "timestamp": 1609178386
    },
    {
        "content": "<p>hmm, that makes sense. Could I make that dynamically linked somehow, so I can override it?</p>",
        "id": 221078711,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178423
    },
    {
        "content": "<p>I guess I'd have to add <code>crate-type = \"dylib\"</code> to tracing itself</p>",
        "id": 221078728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178441
    },
    {
        "content": "<p>No, it is not possible to override crates, even when dynamically linked. The SVH must match.</p>",
        "id": 221078750,
        "sender_full_name": "bjorn3",
        "timestamp": 1609178460
    },
    {
        "content": "<p>Also the log macros of <code>tracing</code> expand differently depending on the selected feature flags, so you won't get tracing support for any rustc crate even if you did override it.</p>",
        "id": 221078843,
        "sender_full_name": "bjorn3",
        "timestamp": 1609178530
    },
    {
        "content": "<p>ok, so the issue is that rustdoc calls <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/fn.init_env_logger.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/fn.init_env_logger.html</a> instead of using <code>tracing::subscriber::set_global_default</code></p>",
        "id": 221078853,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Rustc.20loads.20sysroot.20artifacts.20before.20cargo.20ones.3F/near/221078843\">said</a>:</p>\n<blockquote>\n<p>Also the log macros of <code>tracing</code> expand differently depending on the selected feature flags, so you won't get tracing support for any rustc crate even if you did override it.</p>\n</blockquote>\n<p>that's fine, I don't need rustc debug logging, just rustdoc</p>",
        "id": 221078856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Rustc.20loads.20sysroot.20artifacts.20before.20cargo.20ones.3F/near/221078853\">said</a>:</p>\n<blockquote>\n<p>ok, so the issue is that rustdoc calls <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/fn.init_env_logger.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_driver/fn.init_env_logger.html</a> instead of using <code>tracing::subscriber::set_global_default</code></p>\n</blockquote>\n<p>yes</p>",
        "id": 221078869,
        "sender_full_name": "bjorn3",
        "timestamp": 1609178573
    },
    {
        "content": "<p>time to copy paste 30 lines of logging <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 221078921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178620
    },
    {
        "content": "<p>What if you keep the <code>init_env_logger</code> call but add a separate initialize function for the rustdoc copy of tracing with a <code>RUSTDOC_LOG</code> env var?</p>",
        "id": 221079023,
        "sender_full_name": "bjorn3",
        "timestamp": 1609178689
    },
    {
        "content": "<p>you mean like <code>fn init_env_logger(do_init: fn(Subscriber))</code> ?</p>",
        "id": 221079182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178810
    },
    {
        "content": "<p>hmm this would be hard to test, since the whole point of this is not to modify the compiler - it would have to first be merged to master, and only then could I test if it actually worked :/</p>",
        "id": 221079266,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178874
    },
    {
        "content": "<p>since otherwise there's no CI artifacts available</p>",
        "id": 221079278,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178881
    },
    {
        "content": "<p>That won't work as the <code>Subscriber</code> type from rustc's copy of tracing would be dfifferent from rustdoc's copy of tracing.</p>",
        "id": 221079328,
        "sender_full_name": "bjorn3",
        "timestamp": 1609178895
    },
    {
        "content": "<p>right, that makes sense. What do you mean by 'a separate initialize function' then?</p>",
        "id": 221079360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609178928
    },
    {
        "content": "<p>I mean a literal copy into rustdoc with a different env var. Both the original and the copy will then be called by rustdoc, so you can have both rustc and rustdoc log support.</p>",
        "id": 221079396,
        "sender_full_name": "bjorn3",
        "timestamp": 1609178953
    },
    {
        "content": "<p>oh oh I see - I currently have</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/lib.rs b/src/librustdoc/lib.rs</span>\n<span class=\"gh\">index 72f1b817d5d..7f0146f4a62 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/lib.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/lib.rs</span>\n<span class=\"gu\">@@ -94,7 +94,9 @@</span>\n pub fn main() {\n     rustc_driver::set_sigpipe_handler();\n     rustc_driver::install_ice_hook();\n<span class=\"gd\">-    rustc_driver::init_env_logger(\"RUSTDOC_LOG\");</span>\n<span class=\"gi\">+    //rustc_driver::init_env_logger(\"RUSTDOC_LOG\");</span>\n<span class=\"gi\">+    init_logging();</span>\n</code></pre></div>\n<p>and you're suggesting that I just not comment out <code>init_env_logger</code></p>",
        "id": 221079506,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609179006
    },
    {
        "content": "<p>yeah that would work</p>",
        "id": 221079515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609179008
    },
    {
        "content": "<p>You may need a different env var for the rustc_driver::init_env_logger call to avoid the warning.</p>",
        "id": 221079589,
        "sender_full_name": "bjorn3",
        "timestamp": 1609179078
    },
    {
        "content": "<p>well I wonder whether this makes sense to do at all - CI artifacts will never have logging enabled</p>",
        "id": 221079752,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609179184
    },
    {
        "content": "<p>ayyyy copy-pasting <code>init_env_logger</code> worked <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 221079813,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609179223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> thanks for the help!</p>",
        "id": 221079819,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609179230
    },
    {
        "content": "<p>np</p>",
        "id": 221079825,
        "sender_full_name": "bjorn3",
        "timestamp": 1609179234
    }
]