[
    {
        "content": "<p>I'm not exactly sure where to ask about this so please tell me if I need to move it to a more appropriate stream.</p>\n<p>In summary: <code>repr(C)</code> interacts weirdly with code-gen and prevents a <code>const</code> item from being inlined in specific scenarios.</p>\n<p>Which specific scenarios? Well, the simplest conditions I cound find are as follows:</p>\n<ul>\n<li>The struct contained in the <code>const</code> is <code>repr(C)</code> (it doesn't work with <code>repr(transparent)</code> or <code>repr(Rust)</code>)</li>\n<li>The struct contained in the <code>const</code> has a field with a raw pointer obtained from a reference (it doesn't work with a normal reference or a pointer literal)</li>\n<li>This struct contained in the <code>const</code> is wrapped in an enum and then unwrapped before checking against an inlineable literal (I used <code>Option</code> in my MRE but it can be any enum)</li>\n</ul>\n<p>More details and a working example can be found in <a href=\"https://github.com/Radbuglet/bad-code-gen\">Radbuglet/bad-code-gen</a>. <code>lib.rs</code> contains the code I compiled and <code>bad_code_gen.s</code> contains an annotated version of the returned assembly showing how and where the code-gen went wrong.</p>\n<p>I've never really worked with Rust's code-gen (or even the Rust compiler) before so I'm absolutely clueless as to what is causing this. This bug might be caused by MIRI (which recently changed their pointer interning logic) for all I know.</p>\n<p>Any ideas?</p>",
        "id": 246022765,
        "sender_full_name": "Riley D",
        "timestamp": 1626297308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411314\">Riley D</span> has marked this topic as resolved.</p>",
        "id": 246031132,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626302400
    }
]