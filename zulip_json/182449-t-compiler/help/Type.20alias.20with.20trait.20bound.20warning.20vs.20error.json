[
    {
        "content": "<p>In the following example I can't exclude the trait bound on the type alias or it won't compile, but I get a warning if I include it:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct A1 {}\nstruct B1 {}\n\nstruct A2 {}\nstruct B2 {}\n\ntrait CorrespondingB { type B; }\nimpl CorrespondingB for A1 { type B = B1; }\nimpl CorrespondingB for A2 { type B = B2; }\n\n// This gives a warning that the constraint is not enforced in the alias:\ntype MyAlias&lt;X: CorrespondingB&gt; = (X, X::B);\n// This gives an error that the associated type doesn&#39;t exist:\n// type MyAlias&lt;X&gt; = (X, X::B);\n\nfn f&lt;X: CorrespondingB&gt;(pair: MyAlias&lt;X&gt;) -&gt; X { pair.0 }\n\nfn main() {\n    f((A1{}, B1{}));\n}\n</code></pre></div>\n<p>What do I do with this? I expect what I'm doing is weird, but it does smell a little like it would be worth opening an issue...</p>",
        "id": 235515143,
        "sender_full_name": "Paul Weaver",
        "timestamp": 1619013728
    },
    {
        "content": "<p>The detail in the warning message actually contained the solution to making the error go away. The alias should read:</p>\n<div class=\"codehilite\"><pre><span></span><code>type MyAlias&lt;X&gt; = (X, &lt;X as CorrespondingB&gt;::B);\n</code></pre></div>\n<p>Thanks <span aria-label=\"duck\" class=\"emoji emoji-1f986\" role=\"img\" title=\"duck\">:duck:</span></p>",
        "id": 235519726,
        "sender_full_name": "Paul Weaver",
        "timestamp": 1619015403
    }
]