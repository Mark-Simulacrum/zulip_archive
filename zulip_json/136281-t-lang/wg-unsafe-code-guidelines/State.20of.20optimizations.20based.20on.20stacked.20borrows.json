[
    {
        "content": "<p>Hi,<br>\nIn this example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Hi</span><span class=\"p\">([</span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Hi</span><span class=\"p\">([</span><span class=\"mi\">1337</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2048</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1974</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4235432543</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cool</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Accessing anything other than <code>1337</code> is UB according to stacked borrows. <br>\nso why aren't we optimizing the dead stores out? does this requires more MIR level optimizations or more decisions around the semantics and if rust really does adopt Stacked Borrows? </p>\n<p>ASM of this: <a href=\"https://godbolt.org/z/q3Y5T8\">https://godbolt.org/z/q3Y5T8</a></p>",
        "id": 206353696,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1596902933
    },
    {
        "content": "<p>I don't think there are any optimizations based on stacked borrows. It is not even the official memory model.</p>",
        "id": 206357872,
        "sender_full_name": "bjorn3",
        "timestamp": 1596910149
    },
    {
        "content": "<p>well, there's <code>noalias</code> which we emit to LLVM for shared references (without interior mutability)</p>",
        "id": 206389315,
        "sender_full_name": "RalfJ",
        "timestamp": 1596969406
    },
    {
        "content": "<p>that is based on the aliasing model -- though without fixing exactly what the aliasing model is, just putting a constraint on it</p>",
        "id": 206389326,
        "sender_full_name": "RalfJ",
        "timestamp": 1596969434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/State.20of.20optimizations.20based.20on.20stacked.20borrows/near/206357872\">said</a>:</p>\n<blockquote>\n<p>I don't think there are any optimizations based on stacked borrows. It is not even the official memory model.</p>\n</blockquote>\n<p>Well is it the current memory model? (as opposed to being the official stable memory model) because if not then why is miri advertised as a tool to find UB and why is stdlib fixed to not violate stacked borrows?<br>\nif it is the current memory model, then why not use it for optimizations? it seems weird to make something UB without utilizing it being UB.<br>\nI think something like stacked borrows can potentially make rust code faster than C (at the cost of making unsafe rust harder to write correctly)</p>\n<p>EDIT: I'm curious and trying to understand the state of mind, not trying to attack anyone, I think miri is awesome and stacked borrow is very interesting and useful</p>",
        "id": 206389761,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1596970124
    },
    {
        "content": "<blockquote>\n<p>why is stdlib fixed to not violate stacked borrows?</p>\n</blockquote>\n<p>because I submitted PRs and the reviewers were fine with them <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 206390078,
        "sender_full_name": "RalfJ",
        "timestamp": 1596970750
    },
    {
        "content": "<p>Stacked Borrows is an experiment, but it is an experiment supported by the lang team</p>",
        "id": 206390080,
        "sender_full_name": "RalfJ",
        "timestamp": 1596970766
    },
    {
        "content": "<blockquote>\n<p>I think something like stacked borrows can potentially make rust code faster than C (at the cost of making unsafe rust harder to write correctly)</p>\n</blockquote>\n<p>yes that's why we are working on this kind of model :)</p>",
        "id": 206390082,
        "sender_full_name": "RalfJ",
        "timestamp": 1596970792
    },
    {
        "content": "<p>but before we start actually exploiting the model in optimizations, we want to be sure it's a good model -- and there are some open issues, see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aissue+is%3Aopen+label%3AT-stacked-borrows\">https://github.com/rust-lang/unsafe-code-guidelines/issues?q=is%3Aissue+is%3Aopen+label%3AT-stacked-borrows</a></p>",
        "id": 206390126,
        "sender_full_name": "RalfJ",
        "timestamp": 1596970833
    },
    {
        "content": "<p>I used Miri as a testbed for Stacked Borrows because it was perfectly suited to do so, and nobody complained fast enough to stop me putting it upstream :) (well this was done as part of two internships with Mozilla supervised by Aaron and Niko, so it has official blessing)</p>",
        "id": 206390139,
        "sender_full_name": "RalfJ",
        "timestamp": 1596970917
    },
    {
        "content": "<p>the other reason why no optimizations exist is that  have 0 experience in writing optimizations -- so I can't actually implement one for real, I can just analyze if a given optimization is correct. so far nobody stepped up to implementing an aliasing-based optimizations; I think there is plenty of lower-hanging fruit on the MIR optimization front.</p>",
        "id": 206390190,
        "sender_full_name": "RalfJ",
        "timestamp": 1596970986
    },
    {
        "content": "<p>Thank you for the detailed answer :) <br>\nThis is some exciting stuff, and I think I understand that right now this is mostly because almost no one is working on MIR optimizations and llvm doesn't always enable optimizations that rust can offer</p>",
        "id": 206393464,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1596976979
    }
]