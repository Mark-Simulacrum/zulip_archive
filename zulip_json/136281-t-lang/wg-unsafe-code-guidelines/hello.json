[
    {
        "content": "<p>Welcome to <a class=\"stream\" data-stream-id=\"136281\" href=\"/#narrow/stream/136281-wg-unsafe-code-guidelines\">#wg-unsafe-code-guidelines</a>.</p>\n<p><strong>Description</strong>: Discussing about what Unsafe Code means. Or doesn't.</p>",
        "id": 131124266,
        "sender_full_name": "Welcome Bot",
        "timestamp": 1533752051
    },
    {
        "content": "<p>perhaps a question more for libs team. is there an existing guideline for defining certain types of PRs using unsafe that should require a fcp, such as public data structures in std? would it make sense to require group reviews for changes such as <a href=\"https://github.com/rust-lang/rust/issues/52553\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52553\">#52553</a> ? (opened issues that followed: <a href=\"https://github.com/rust-lang/rust/issues/53529\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53529\">#53529</a> <a href=\"https://github.com/rust-lang/rust/issues/53564\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53564\">#53564</a> <a href=\"https://github.com/rust-lang/rust/issues/53566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53566\">#53566</a>)</p>",
        "id": 132537157,
        "sender_full_name": "memoryruins",
        "timestamp": 1534880091
    },
    {
        "content": "<p>seems like a decent idea, but I'm not sure -- would definitely be something to ask the libs team</p>",
        "id": 132540956,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534884411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125246\">@memoryruins</span> we have all the unsafe guidelines we need</p>\n<div class=\"message_inline_image\"><a href=\"https://i.stack.imgur.com/AJNGO.jpg\" target=\"_blank\" title=\"https://i.stack.imgur.com/AJNGO.jpg\"><img src=\"https://i.stack.imgur.com/AJNGO.jpg\"></a></div><div class=\"message_inline_image\"><a href=\"https://i.stack.imgur.com/w9XMh.jpg\" target=\"_blank\" title=\"https://i.stack.imgur.com/w9XMh.jpg\"><img src=\"https://i.stack.imgur.com/w9XMh.jpg\"></a></div>",
        "id": 132543956,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888409
    },
    {
        "content": "<p>Although <em>technically</em>, I reviewed that original PR somewhat, as did Simon. Simon is a smart programmer, I make no claims for myself.</p>",
        "id": 132544007,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888484
    },
    {
        "content": "<p>I'd rather remove humans as much as possible. A combination of Miri + Valgrind + Proptest + Fuzzing would make me feel better.</p>",
        "id": 132544036,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125246\">@memoryruins</span> my personal desire is to have a valgrind plugin that checks for UB; I can't say whether such a plugin would have caught those cases, as I'm not sure of the error... <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is looking into this, however (the plugin, I mean)</p>",
        "id": 132544078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888564
    },
    {
        "content": "<p>I mean, some of the UB was already caught by Miri, just no one had ever run it before</p>",
        "id": 132544089,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what would such a plugin do that Valgrind doesn't already?</p>",
        "id": 132544094,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888610
    },
    {
        "content": "<p>check Rust's aliasing rules</p>",
        "id": 132544096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888620
    },
    {
        "content": "<p>once we have them :)</p>",
        "id": 132544101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888624
    },
    {
        "content": "<p>Someone should start a team to construct those rules...</p>",
        "id": 132544108,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888642
    },
    {
        "content": "<p>e.g., consider the add'l invariants described in <a href=\"https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html\">the stacked borrows blog post</a></p>",
        "id": 132544109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888644
    },
    {
        "content": "<p>Why part of Valgrind instead of Miri? So that it catches codegen issues as well?</p>",
        "id": 132544181,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888709
    },
    {
        "content": "<p>I'm reading blog now in case it's explained there</p>",
        "id": 132544189,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888731
    },
    {
        "content": "<p>yes and so it can e.g. check C code</p>",
        "id": 132544191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888735
    },
    {
        "content": "<p>i.e., you could just run all your tests</p>",
        "id": 132544202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888746
    },
    {
        "content": "<blockquote>\n<p>check C code</p>\n</blockquote>\n<p>huh... does linked C code need to uphold Rust's rules?</p>",
        "id": 132544278,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888834
    },
    {
        "content": "<p>of course</p>",
        "id": 132544280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888848
    },
    {
        "content": "<p>if e.g. it has a ptr from Rust</p>",
        "id": 132544282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888854
    },
    {
        "content": "<p>if there is some memory that C code allocates and uses but never \"escapes\" to Rust</p>",
        "id": 132544293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888872
    },
    {
        "content": "<p>then we don't care</p>",
        "id": 132544295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888874
    },
    {
        "content": "<p>and the rules would not add any add'l constraints on such memory beyond what valgrind already checks</p>",
        "id": 132544298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534888883
    },
    {
        "content": "<p>OK, the amount of interop there makes more sense. I was thinking you were including completely distinct code.</p>",
        "id": 132544351,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534888947
    },
    {
        "content": "<blockquote>\n<p>An address in memory, and a tag used to store the time when the reference was created</p>\n</blockquote>\n<p>Time to get those custom fat pointers working ;-)</p>",
        "id": 132544431,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534889129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> lmao those photos. i agree with your sentiments for combination of checks</p>",
        "id": 132554208,
        "sender_full_name": "memoryruins",
        "timestamp": 1534904735
    },
    {
        "content": "<p>would be more consistent than only a group review</p>",
        "id": 132554413,
        "sender_full_name": "memoryruins",
        "timestamp": 1534905124
    },
    {
        "content": "<p>very keen to what ralf discovers while looking into the plugin</p>",
        "id": 132554417,
        "sender_full_name": "memoryruins",
        "timestamp": 1534905135
    },
    {
        "content": "<p>awesome that miri caught it too</p>",
        "id": 132554419,
        "sender_full_name": "memoryruins",
        "timestamp": 1534905147
    },
    {
        "content": "<p>miri caught sth else though</p>",
        "id": 132577619,
        "sender_full_name": "RalfJ",
        "timestamp": 1534944243
    },
    {
        "content": "<p>uninitialized data used in <code>Debug</code></p>",
        "id": 132577627,
        "sender_full_name": "RalfJ",
        "timestamp": 1534944250
    },
    {
        "content": "<p>looking at <a href=\"https://play.rust-lang.org/?gist=7f32ef3123acb517dcfba377806f391f&amp;version=stable&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=7f32ef3123acb517dcfba377806f391f&amp;version=stable&amp;mode=debug&amp;edition=2015\">https://play.rust-lang.org/?gist=7f32ef3123acb517dcfba377806f391f&amp;version=stable&amp;mode=debug&amp;edition=2015</a>, miri does not see anything... strange. or is that using a libstd without the broken VecDeque?</p>",
        "id": 132577876,
        "sender_full_name": "RalfJ",
        "timestamp": 1534944596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> is there any way for me to see which nightly this miri is using?</p>",
        "id": 132577921,
        "sender_full_name": "RalfJ",
        "timestamp": 1534944609
    },
    {
        "content": "<p>ah yes, locally it finds the problem :D</p>",
        "id": 132577967,
        "sender_full_name": "RalfJ",
        "timestamp": 1534944669
    },
    {
        "content": "<p>Not trivially <a href=\"https://github.com/integer32llc/rust-playground/issues/300\" target=\"_blank\" title=\"https://github.com/integer32llc/rust-playground/issues/300\">https://github.com/integer32llc/rust-playground/issues/300</a></p>",
        "id": 132578270,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945006
    },
    {
        "content": "<p>You can look at <a href=\"https://travis-ci.org/integer32llc/rust-playground\" target=\"_blank\" title=\"https://travis-ci.org/integer32llc/rust-playground\">the build status</a></p>",
        "id": 132578294,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945048
    },
    {
        "content": "<p>Add see that <code>error: `rust-src` component not found. Run `rustup component add rust-src`.</code></p>",
        "id": 132578364,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945112
    },
    {
        "content": "<p>which doesn't make any damn sense</p>",
        "id": 132578369,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945121
    },
    {
        "content": "<p>considering it was installed a few lines earlier</p>",
        "id": 132578376,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945131
    },
    {
        "content": "<p>hm I see. well I noticed that for nightlies it shows the commit, but doesn't show the toolchain name either</p>",
        "id": 132578491,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945234
    },
    {
        "content": "<p>of course, with toolchain name != version shown by <code>rustc --version</code>, this is also not easy</p>",
        "id": 132578499,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> that's a strange error indeed... I'd expect a build failure, but it doesn't even try to build miri?</p>",
        "id": 132578546,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945307
    },
    {
        "content": "<p>oh I think I know what is happening</p>",
        "id": 132578612,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945355
    },
    {
        "content": "<p>this is probably related to <a href=\"https://github.com/solson/miri/blob/master/rust-toolchain\" target=\"_blank\" title=\"https://github.com/solson/miri/blob/master/rust-toolchain\">https://github.com/solson/miri/blob/master/rust-toolchain</a></p>",
        "id": 132578621,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945368
    },
    {
        "content": "<p>I've disabled build failures (there's a <code>|| true</code>) because I don't want a failure in a tool to prevent deploying the UI. I should change it so it shows up as red in travis though</p>",
        "id": 132578622,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945370
    },
    {
        "content": "<p>I am still not sure what the best solution is there</p>",
        "id": 132578638,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945389
    },
    {
        "content": "<p>I'd like someone downloading miri to know a nightly version they can use</p>",
        "id": 132578645,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945399
    },
    {
        "content": "<p>so currently we put that into rust-toolchain, which means that gets used automatically by rustup</p>",
        "id": 132578653,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945412
    },
    {
        "content": "<p>people that absolutely want to use the latest nightly are supposed to do <code>rustup override set nightly</code></p>",
        "id": 132578667,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945441
    },
    {
        "content": "<p>mmm. My build should /probably/ ignore that</p>",
        "id": 132578702,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945443
    },
    {
        "content": "<p>yeah I think it should do that override</p>",
        "id": 132578712,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945456
    },
    {
        "content": "<p>currently it doesnt find rust-src for the nightly-XXXX toolchain, hence the error</p>",
        "id": 132578728,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945484
    },
    {
        "content": "<p>that error would remain even when we get miri green again</p>",
        "id": 132578746,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945506
    },
    {
        "content": "<blockquote>\n<p>should change it so it shows up as red in travis though</p>\n</blockquote>\n<p>I think travis has an option to ignore failing some tasks</p>",
        "id": 132578767,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945559
    },
    {
        "content": "<p>so then you could remove the <code>|| true</code> such that travis knows the actual state, but still keep deploying the rest</p>",
        "id": 132578819,
        "sender_full_name": "RalfJ",
        "timestamp": 1534945573
    },
    {
        "content": "<p>it does; i just never set it up (or it wasn't present when I set it up x years ago)</p>",
        "id": 132578829,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945583
    },
    {
        "content": "<p><a href=\"https://github.com/integer32llc/rust-playground/issues/387\" target=\"_blank\" title=\"https://github.com/integer32llc/rust-playground/issues/387\">https://github.com/integer32llc/rust-playground/issues/387</a></p>",
        "id": 132578841,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945599
    },
    {
        "content": "<p>The trick is that the playground doesn't use a build matrix directly. It uses build stages, which doesn't <em>obviously</em> have a fail is ok config</p>",
        "id": 132579133,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534945945
    },
    {
        "content": "<p>hm yeah</p>",
        "id": 132579191,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946034
    },
    {
        "content": "<p>I tried to match the syntax but that doesn't seem right^^</p>",
        "id": 132579233,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946043
    },
    {
        "content": "<p>of course they dont have a working syntax checker :/</p>",
        "id": 132579241,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946054
    },
    {
        "content": "<p><a href=\"https://github.com/travis-ci/travis-ci/issues/7789\" target=\"_blank\" title=\"https://github.com/travis-ci/travis-ci/issues/7789\">https://github.com/travis-ci/travis-ci/issues/7789</a></p>",
        "id": 132579248,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534946059
    },
    {
        "content": "<p>I'll just remove the 2nd commit</p>",
        "id": 132579249,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946059
    },
    {
        "content": "<p>oh, you cant fix that anyway. PRs don't build containers ;-)</p>",
        "id": 132579277,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534946105
    },
    {
        "content": "<p>dang^^</p>",
        "id": 132579296,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946145
    },
    {
        "content": "<p>wow so I have to <em>repeat</em> the allowed-to-fail config?</p>",
        "id": 132579301,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946158
    },
    {
        "content": "<p>wtf</p>",
        "id": 132579303,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946158
    },
    {
        "content": "<p>So I guess that would be the right syntax?</p>",
        "id": 132579403,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946282
    },
    {
        "content": "<p>When I originally set it up, there definitely wasn't a way to skip build stages, which there is now</p>",
        "id": 132579443,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534946285
    },
    {
        "content": "<p>so that's another thing I wanted to revisit</p>",
        "id": 132579447,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534946296
    },
    {
        "content": "<p><a href=\"https://github.com/integer32llc/rust-playground/pull/388/commits/69347ef8aa022ae377beefe1dd3a79feff512ac3\" target=\"_blank\" title=\"https://github.com/integer32llc/rust-playground/pull/388/commits/69347ef8aa022ae377beefe1dd3a79feff512ac3\">https://github.com/integer32llc/rust-playground/pull/388/commits/69347ef8aa022ae377beefe1dd3a79feff512ac3</a></p>",
        "id": 132579452,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946309
    },
    {
        "content": "<p>hm not sure if I have to repeat the script part</p>",
        "id": 132579558,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946426
    },
    {
        "content": "<p>but how else is it going to match?^^</p>",
        "id": 132579619,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946494
    },
    {
        "content": "<p>why couldnt they just add a \"allow_fail: true\" to the individual job yml?!?</p>",
        "id": 132579638,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946511
    },
    {
        "content": "<p>The travis YML is a prime example of organically grown software with many opposed requirements</p>",
        "id": 132579864,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1534946747
    },
    {
        "content": "<p>and no clear design</p>",
        "id": 132579921,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946781
    },
    {
        "content": "<p>OTOH, at least they have matrices, which I wish gitlab CI had as well...</p>",
        "id": 132579979,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946851
    },
    {
        "content": "<p>oh dang... yaml why are you so annoying</p>",
        "id": 132580077,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946947
    },
    {
        "content": "<p>turns out <code>false</code> is not the program false, but parsed as boolean</p>",
        "id": 132580086,
        "sender_full_name": "RalfJ",
        "timestamp": 1534946955
    },
    {
        "content": "<p>Why Valgrind and not a sanitizer?</p>",
        "id": 132647828,
        "sender_full_name": "alercah",
        "timestamp": 1535042174
    },
    {
        "content": "<p>I don't really draw a strong line between those two, actually. :P But I do want something that can enforce the stacked  borrows rules, which requires some \"shadow memory\" and so forth.</p>",
        "id": 132650443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535045405
    }
]