[
    {
        "content": "<p>Hi, i'm not sure this is the best place to ask, but for FFI does alignment <em>has</em> to match or does it has to be rust_align &gt;= c_align?</p>\n<p>I'm trying to figure out if something like this can be valid: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d8f194cd0627fc5b879580de8afb853b\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d8f194cd0627fc5b879580de8afb853b\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d8f194cd0627fc5b879580de8afb853b</a><br>\nand if it is what if I remove the transmute and make it implicit? (i.e. declaring the c_functions as always accepting <code>C</code> instead of <code>A</code> or <code>B</code>and then not transmuting)</p>",
        "id": 181006824,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574075918
    },
    {
        "content": "<p>transmute ignores alignment and only cares about size. If you remove the transmute, I think it's still fine, at least in that direction. Note that in the other direction (taking a C paramter in a function called from C) you need to make sure that the alignment on the Rust side is &lt;= the alignment on the C side.</p>",
        "id": 181011733,
        "sender_full_name": "Amanieu",
        "timestamp": 1574080673
    },
    {
        "content": "<p>the reason transmute can ignore alignment is that it does a <em>copy</em> of the data</p>",
        "id": 181049070,
        "sender_full_name": "RalfJ",
        "timestamp": 1574106329
    },
    {
        "content": "<p>alignment is relevant when talking about <em>pointers to</em> data, not about things passed by-value</p>",
        "id": 181049084,
        "sender_full_name": "RalfJ",
        "timestamp": 1574106343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> You're right. my mistake this is a better example of what I mean: <a href=\"https://play.rust-lang.org/?gist=f19f7904fae3436a143a7fcaeb755f6a\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=f19f7904fae3436a143a7fcaeb755f6a\">https://play.rust-lang.org/?gist=f19f7904fae3436a143a7fcaeb755f6a</a> (though I'm also interested if transmuting can change the answer here somehow)</p>",
        "id": 181055710,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1574111094
    },
    {
        "content": "<p>generally the alignment requirement is an \"at least requirement\"</p>",
        "id": 181097479,
        "sender_full_name": "RalfJ",
        "timestamp": 1574158458
    },
    {
        "content": "<p>so having a 16-aligned pointer to something 4-aligned is perfectly fine</p>",
        "id": 181097484,
        "sender_full_name": "RalfJ",
        "timestamp": 1574158468
    },
    {
        "content": "<p>however, there is one case where you have to be careful, and that is allocators</p>",
        "id": 181097496,
        "sender_full_name": "RalfJ",
        "timestamp": 1574158485
    },
    {
        "content": "<p>allocating memory in rust demands a certain size and alignment; deallocation needs to happen with <em>the same</em> size and alignment</p>",
        "id": 181097517,
        "sender_full_name": "RalfJ",
        "timestamp": 1574158506
    },
    {
        "content": "<p>that's why you cannot transmute a <code>Vec&lt;u32&gt;</code> into a <code>Vec&lt;u8&gt;</code> (of 4 times the length) -- you can make the size match, but not the alignment</p>",
        "id": 181097535,
        "sender_full_name": "RalfJ",
        "timestamp": 1574158531
    },
    {
        "content": "<blockquote>\n<p>deallocation needs to happen with the same size and alignment</p>\n</blockquote>\n<p>This isn't fully accurate, you can deallocate with a different size, and a different alignment - otherwise the actual allocation size returned by <code>alloc_excess</code> would be useless.</p>",
        "id": 181103822,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574163986
    },
    {
        "content": "<p>The problem with the <code>Vec</code> example, is that the alignment used when deallocating a <code>Vec&lt;u8&gt;</code> is less than the one used by <code>Vec&lt;u32&gt;</code></p>",
        "id": 181103879,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574164067
    },
    {
        "content": "<p>but one can construct a <code>MyVec</code> type for which transmuting <code>MyVec&lt;u32&gt;</code> to <code>MyVec&lt;u8&gt;</code> is fine</p>",
        "id": 181103948,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574164128
    },
    {
        "content": "<p>by computing the alignment passed on the deallocation to the allocator from the pointer, instead of just using <code>mem::align_of::&lt;T&gt;()</code></p>",
        "id": 181104031,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574164214
    },
    {
        "content": "<p>as long as the <code>Layout</code> matches the allocation class used by the allocator, you are fine</p>",
        "id": 181104927,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574165050
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>deallocation needs to happen with the same size and alignment</p>\n</blockquote>\n<p>This isn't fully accurate, you can deallocate with a different size, and a different alignment - otherwise the actual allocation size returned by <code>alloc_excess</code> would be useless.</p>\n</blockquote>\n<p>uh, what? the docs say quite clearly that the size+align must match?</p>",
        "id": 181123777,
        "sender_full_name": "RalfJ",
        "timestamp": 1574178376
    },
    {
        "content": "<blockquote>\n<p>as long as the <code>Layout</code> matches the allocation class used by the allocator, you are fine</p>\n</blockquote>\n<p>that's an allocator-internal thing. for allocator-agnostic code, you have to assume that the allocator has one class per size+alloc combination.</p>",
        "id": 181123824,
        "sender_full_name": "RalfJ",
        "timestamp": 1574178401
    },
    {
        "content": "<blockquote>\n<p>by computing the alignment passed on the deallocation to the allocator from the pointer, instead of just using <code>mem::align_of::&lt;T&gt;()</code></p>\n</blockquote>\n<p>I dont think you can compute the alignment from the pointer, without making assumptions beyond what the allocator API provides?</p>",
        "id": 181123867,
        "sender_full_name": "RalfJ",
        "timestamp": 1574178429
    },
    {
        "content": "<blockquote>\n<p>uh, what? the docs say quite clearly that the size+align must match?</p>\n</blockquote>\n<p>Then the docs are wrong, because you can call <code>Alloc::alloc_excess</code> and use the size returned by it, which is often larger than the size requested, for deallocation.</p>\n<p>If some docs claim that you can only use the size requested, then those docs are wrong. There is at least a range of sizes that you can use, and that range is at least <code>[requested, actual_size)</code>.</p>",
        "id": 181134035,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184216
    },
    {
        "content": "<blockquote>\n<p>I dont think you can compute the alignment from the pointer,</p>\n</blockquote>\n<p>You can find the largest power of two for which addr % pow2 == 0.</p>",
        "id": 181134094,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184242
    },
    {
        "content": "<p>AFAICT the docs do not say that anywhere, e.g., <a href=\"https://doc.rust-lang.org/beta/std/alloc/trait.Alloc.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/beta/std/alloc/trait.Alloc.html\">std::alloc::Alloc</a> docs explicitly say:</p>\n<blockquote>\n<p>if a layout <code>k</code> fits a memory block (denoted by <code>ptr</code>) currently allocated via an allocator <code>a</code>, then it is legal to use that layout to deallocate it, i.e., <code>a.dealloc(ptr, k);</code></p>\n</blockquote>",
        "id": 181134736,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184609
    },
    {
        "content": "<p>The only requirement is that the <code>Layout</code> used for deallocation must fit the actual <code>Layout</code> of the allocation</p>",
        "id": 181134808,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184655
    },
    {
        "content": "<p>The actual <code>Layout</code> of the allocation can be different than the <code>Layout</code> requested, and can also be different than the <code>Layout</code> returned by the <code>Alloc</code> trait methods</p>",
        "id": 181134849,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184687
    },
    {
        "content": "<p>But the <code>Layout</code> requested and the <code>Layout</code>s returned must fit the actual <code>Layout</code>, because you can use either during deallocation.</p>",
        "id": 181134882,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184710
    },
    {
        "content": "<p>Those docs expand on what \"fit\" means.</p>",
        "id": 181135016,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184802
    },
    {
        "content": "<p>And in particular for aligned, it says:</p>\n<blockquote>\n<p>The block's starting address must be aligned to <code>layout.align()</code>.</p>\n</blockquote>",
        "id": 181135034,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184821
    },
    {
        "content": "<p>Ah wait, <a href=\"https://doc.rust-lang.org/beta/std/alloc/trait.Alloc.html#tymethod.dealloc\" target=\"_blank\" title=\"https://doc.rust-lang.org/beta/std/alloc/trait.Alloc.html#tymethod.dealloc\"><code>Alloc::dealloc</code></a> imposes an extra requirement: </p>\n<blockquote>\n<p>In addition to fitting the block of memory layout, the alignment of the layout must match the alignment used to allocate that block of memory.</p>\n</blockquote>",
        "id": 181135312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184978
    },
    {
        "content": "<p>So the size only needs to \"fit\", but the alignment needs to exactly match.</p>",
        "id": 181135330,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574184998
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I dont think you can compute the alignment from the pointer,</p>\n</blockquote>\n<p>You can find the largest power of two for which addr % pow2 == 0.</p>\n</blockquote>\n<p>that has no correlation with the alignment requested though, so it is useless</p>",
        "id": 181140823,
        "sender_full_name": "RalfJ",
        "timestamp": 1574188604
    },
    {
        "content": "<p>Depends on the allocator</p>",
        "id": 181289256,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574329866
    },
    {
        "content": "<p>If your allocator supports deallocating with any alignment that’s satisfied by a pointer, then you can always pass just 1, but the generic API doesn’t require all allocators to support that.</p>",
        "id": 181289366,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574329947
    },
    {
        "content": "<p>A specific impl can support that</p>",
        "id": 181289406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574329987
    },
    {
        "content": "<blockquote>\n<p>Depends on the allocator</p>\n</blockquote>\n<p>all of this discussion has been for \"normal\" Rust code. as in, the only thing you know about the allocator is what the allocator API explicitly says. quite clearly that is the default and anyone asking here \"may I do this\" doesn't mean \"does there exist an allocator for which I may do this\".<br>\nI dont understand why you insist on bringing in guarantees only made by certain allocators when that is irrelevant for the discussion.</p>",
        "id": 181292163,
        "sender_full_name": "RalfJ",
        "timestamp": 1574332327
    },
    {
        "content": "<p>You claimed that the size and alignment must exactly match</p>",
        "id": 181301439,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341031
    },
    {
        "content": "<p>I hope I have convinced you that this claim is wrong</p>",
        "id": 181301448,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341040
    },
    {
        "content": "<p>Only the alignment must match</p>",
        "id": 181301458,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341051
    },
    {
        "content": "<p>The allocator api is derived from real allocators, <del>I don't know any for which the alignment must actually match</del> EDIT: this is the case for jemalloc actually, the alignment must exactly match</p>",
        "id": 181301570,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341129
    },
    {
        "content": "<p>Note that you quoted the unstable Alloc trait, GlobalAlloc::dealloc explicitly says \"<code>layout</code> must be the same layout that was used to allocate that block of memory\"</p>",
        "id": 181301618,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574341169
    },
    {
        "content": "<p>If that's the case, the <code>Alloc</code> trait implementations for <code>GlobalAlloc</code> are unsound</p>",
        "id": 181301748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341232
    },
    {
        "content": "<p>¯\\_(ツ)_/¯</p>",
        "id": 181301820,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574341320
    },
    {
        "content": "<p>and rustc violates that requirement</p>",
        "id": 181301909,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341363
    },
    {
        "content": "<p>The easy fix, naturally, is to drop <code>alloc_excess</code> and change the unstable trait to match the requirements of GlobalAlloc</p>",
        "id": 181301976,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574341433
    },
    {
        "content": "<p>The last allocator-wg proposal drops <code>alloc_excess</code>, but it makes <code>alloc</code> return the excess</p>",
        "id": 181302034,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341460
    },
    {
        "content": "<p>meaning there is no <code>GlobalAlloc</code> compatible way to implement <code>Alloc</code></p>",
        "id": 181302044,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341471
    },
    {
        "content": "<p>Well, have fun sorting that mess out, I'm not gonna touch that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 181302079,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574341505
    },
    {
        "content": "<p>one can probably just require that impls of <code>Alloc</code> that use <code>GlobalAlloc</code> to drop the excess internally, but... i don't think any impl does that</p>",
        "id": 181302128,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341561
    },
    {
        "content": "<p>kind of defeats the point</p>",
        "id": 181302173,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341571
    },
    {
        "content": "<p>there is also a proposal to deprecate <code>GlobalAlloc</code> and replace it with <code>Alloc</code>, which would sort this out as well</p>",
        "id": 181302217,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341618
    },
    {
        "content": "<p>IIUC that would cause the same problem as liberalizing the safety requirement on GlobalAlloc::dealloc, it causes previously valid implementations to become unsound</p>",
        "id": 181302332,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574341696
    },
    {
        "content": "<p>Not really, you can only have one <code>#[global_allocator]</code> in a binary, and it has to implement either <code>Alloc</code> or <code>GlobalAlloc</code>. If it implements <code>GlobalAlloc</code>, and <code>Alloc</code> impl shim gets added</p>",
        "id": 181302422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341790
    },
    {
        "content": "<p>That <code>Alloc</code> shim would need to be generated in such a way that it is sound, but it can just return the requested size as the excess.</p>",
        "id": 181302486,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341825
    },
    {
        "content": "<p>meaning users can only dealloc with the requested size</p>",
        "id": 181302498,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574341840
    },
    {
        "content": "<p>I guess?</p>",
        "id": 181302504,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574341852
    },
    {
        "content": "<p>Anyway I should stick to my word and not get nerdsniped by this</p>",
        "id": 181302515,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1574341868
    },
    {
        "content": "<p>This has a much simpler fix.</p>",
        "id": 181308850,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574346406
    },
    {
        "content": "<p>Currently there are no <code>GlobalAlloc</code> APIs that return the allocation actual size. Those APIs can be added as trait methods with a default implementation, that just returns the requested size. This allows relaxing Layout constraints of  <code>GlobalAlloc::dealloc</code> to match those of the <code>Alloc</code> trait.</p>",
        "id": 181308943,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574346482
    },
    {
        "content": "<p>Current implementations remain sound, because they do not currently provide an implementation of the default trait method.</p>",
        "id": 181308979,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574346503
    },
    {
        "content": "<p>If a current implementation were to be modified to provide an impl of the <code>_excess</code> methods  to return the actual allocation size, then this would require updating <code>GlobalAlloc::dealloc</code> to be able to handle that. But doing this would be entirely opt-in.</p>",
        "id": 181309057,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574346567
    },
    {
        "content": "<blockquote>\n<p>I hope I have convinced you that this claim is wrong</p>\n</blockquote>\n<p>fair. but you also claimed things about alignment that were wrong (at least if they were meant as a response to my question -- and if not one wonders why they were posted in this thread)... no need to continue discussing that but I feet communication was quite suboptimal here.</p>",
        "id": 181651645,
        "sender_full_name": "RalfJ",
        "timestamp": 1574438889
    },
    {
        "content": "<p>if you think the docs of one of the involved traits are wrong, make a PR?</p>",
        "id": 181651708,
        "sender_full_name": "RalfJ",
        "timestamp": 1574438931
    },
    {
        "content": "<p>The docs of both traits look correct to me, the <code>Alloc</code> trait docs support deallocating with different layouts</p>",
        "id": 181817833,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574685356
    },
    {
        "content": "<p>The <code>GlobalAlloc</code> trait does not, but it does not have any APIs for which doing that would make sense</p>",
        "id": 181817898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574685381
    },
    {
        "content": "<p>The current state of affairs just means that you cannot mix-match <code>Alloc</code> and <code>GlobalAlloc</code> calls for the same allocator, e.g., alloc with <code>Alloc::alloc</code> and dealloc wit h<code>GlobalAlloc::dealloc</code>, but that's documented already in the part that talks about \"the pointer returned must have been produced by calling one of the <code>Self</code> methods.</p>",
        "id": 181818094,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574685511
    },
    {
        "content": "<p>The trait implementation of <code>Alloc</code> and <code>GlobalAlloc</code> themselves can rely on extra semantic guarantees, e.g., have <code>Alloc::alloc</code> do something different than <code>GlobalAlloc::alloc</code> but have <code>Alloc::dealloc</code> just call <code>GlobalAlloc::dealloc</code>.</p>",
        "id": 181818333,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574685690
    },
    {
        "content": "<p>I.e. the implementor of the <code>Alloc</code> and <code>GlobalAlloc</code> traits can violate their generic API.</p>",
        "id": 181818480,
        "sender_full_name": "gnzlbg",
        "timestamp": 1574685794
    }
]