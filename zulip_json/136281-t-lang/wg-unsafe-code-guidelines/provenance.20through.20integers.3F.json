[
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/pull/63297#pullrequestreview-271172547\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63297#pullrequestreview-271172547\">https://github.com/rust-lang/rust/pull/63297#pullrequestreview-271172547</a> : I thought there was pretty much consensus that our integers do not have provenance, hence I wrote a note along those lines some time ago and it is in the <code>wrapping_offset</code> docs these days. Was I moving too quick?</p>",
        "id": 172567806,
        "sender_full_name": "RalfJ",
        "timestamp": 1565078436
    },
    {
        "content": "<blockquote>\n<p>Was I moving too quick?</p>\n</blockquote>\n<p>IIUC from the LLVM bug, LLVM does not support this yet, and it still miscompiles programs.</p>",
        "id": 172573071,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565083902
    },
    {
        "content": "<p>Although it appears that the intent is to support this at some point</p>",
        "id": 172573084,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565083922
    },
    {
        "content": "<p>There are some safe Rust programs that get \"miscompiled\" due to this, but I am not sure whether these are miscompilations or not</p>",
        "id": 172573298,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565084096
    },
    {
        "content": "<p>I also don't think anyone wants integers to carry pointer provenance in Rust, but given that there hasn't been a formal decision (e.g., by T-lang) and there are reasonable concerns about whether LLVM supports/will support that, we should probably be conservative in libstd docs, just as we are w.r.t. things like uninitialized integers.</p>",
        "id": 172579417,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565090497
    },
    {
        "content": "<p>but what else would we tell people that ask for cross-object arithmetic? \"not possible\"? I fear if we do that, they'll use <code>wrapping_offset</code> as that's just so much easier to use.</p>",
        "id": 172602023,
        "sender_full_name": "RalfJ",
        "timestamp": 1565107235
    },
    {
        "content": "<blockquote>\n<p>not possible\"?</p>\n</blockquote>\n<p>Due to the current bugs, can we tell them that it is possible?</p>",
        "id": 172637678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565134035
    },
    {
        "content": "<p>I don't want integers to carry provenance, but I don't think there is a reliable way to do this in Rust (or C or C++) today</p>",
        "id": 172637740,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565134097
    },
    {
        "content": "<p>I am not disagreeing. I am just saying I think the alternative is that people will do it anyway, and will notice it seems to work -- and they'll not e as conservative as they should be so even if the LLVM devs fix their stuff one day, this code will still be wrong.</p>",
        "id": 172657897,
        "sender_full_name": "RalfJ",
        "timestamp": 1565165205
    },
    {
        "content": "<p>It's an ungreat situation. Perhaps we can document the ptrtoint way as \"not decided, may still be UB, but if anything will ever work it'll be this\"</p>",
        "id": 172662651,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565169859
    },
    {
        "content": "<p>\"ungreat\", heh ;)</p>",
        "id": 172746712,
        "sender_full_name": "RalfJ",
        "timestamp": 1565251998
    },
    {
        "content": "<p>do you want to give a shot at updating the docs that way?</p>",
        "id": 172746719,
        "sender_full_name": "RalfJ",
        "timestamp": 1565252013
    },
    {
        "content": "<p>I don't think it'll be high priority enough for me to get to it soon-ish</p>",
        "id": 172747111,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565252481
    },
    {
        "content": "<p>fair.</p>",
        "id": 172747171,
        "sender_full_name": "RalfJ",
        "timestamp": 1565252534
    }
]