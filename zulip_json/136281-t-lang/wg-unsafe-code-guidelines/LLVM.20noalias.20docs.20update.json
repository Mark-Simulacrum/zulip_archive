[
    {
        "content": "<p>I just saw this: <a href=\"https://reviews.llvm.org/D74935\" target=\"_blank\" title=\"https://reviews.llvm.org/D74935\">https://reviews.llvm.org/D74935</a><br>\nIf I read it correct this is fine for us (it is, in fact, how we interpreted <code>noalias</code> all along for shared references), but more eyes can't hurt. ;)<br>\nAlso I am surprised they say this matches C; it's news to me that C <code>restrict</code> permits read-read aliasing. I'll have to dig out the relevant part of the standard again.</p>",
        "id": 189131311,
        "sender_full_name": "RalfJ",
        "timestamp": 1582734853
    },
    {
        "content": "<p>I haven't thought as deeply about it but yes, my impression when I read it was also that this change blesses the way we've always used noalias for shared references (absent UnsafeCell)</p>",
        "id": 189135737,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1582737665
    },
    {
        "content": "<p>I think our interpretation was already justified this way:</p>\n<blockquote>\n<p>For further details, please see the discussion of the NoAlias response in alias analysis.</p>\n</blockquote>\n<p>which gives an example:</p>\n<blockquote>\n<p>when the two pointers are only ever used for reading memory.</p>\n</blockquote>",
        "id": 189181005,
        "sender_full_name": "cuviper",
        "timestamp": 1582769372
    },
    {
        "content": "<p>re: C's <code>restrict</code>, indeed <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.7.3.1\" target=\"_blank\" title=\"http://port70.net/~nsz/c/c11/n1570.html#6.7.3.1\">the standard says</a></p>\n<blockquote>\n<p>If L is used to access the value of the object X that it designates, and X is also modified (by any means), then</p>\n</blockquote>\n<p>Good to know, I wasn't aware read-only aliasing was allowed for <code>restrict</code>.</p>",
        "id": 189196390,
        "sender_full_name": "RalfJ",
        "timestamp": 1582793987
    }
]