[
    {
        "content": "<p>I was trying to simplify working with array's that contain MaybeUninit`s, and wrote a simple wrapper.<br>\nHere's the wrapper: <a href=\"https://github.com/DutchGhost/partialarray/blob/master/src/lib.rs\" target=\"_blank\" title=\"https://github.com/DutchGhost/partialarray/blob/master/src/lib.rs\">https://github.com/DutchGhost/partialarray/blob/master/src/lib.rs</a></p>\n<p>The question is about the <code>first_ptr</code> function on <a href=\"https://github.com/DutchGhost/partialarray/blob/master/src/lib.rs#L77\" target=\"_blank\" title=\"https://github.com/DutchGhost/partialarray/blob/master/src/lib.rs#L77\">https://github.com/DutchGhost/partialarray/blob/master/src/lib.rs#L77</a></p>\n<p>However, I wondered; Given <code>N</code> is 0, is the pointer returned from <code>first_ptr</code> and <code>first_ptr_mut</code> valid?<br>\nThose function could look like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">first_ptr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">nth_ptr</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>so that for N being 0, an aligned pointer is returned, which can be used by for example <code>slice::from_raw_parts(ptr, 0)</code></p>",
        "id": 172401422,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564828633
    },
    {
        "content": "<p><code>nth_ptr</code> is unsound, it can be used for OOB arithmetic</p>",
        "id": 172401477,
        "sender_full_name": "RalfJ",
        "timestamp": 1564828755
    },
    {
        "content": "<p>that is UB completely independent of any initialization concerns</p>",
        "id": 172401479,
        "sender_full_name": "RalfJ",
        "timestamp": 1564828767
    },
    {
        "content": "<p>but I dont see any problem with the 0 case, why would there be a problem there?</p>",
        "id": 172401491,
        "sender_full_name": "RalfJ",
        "timestamp": 1564828802
    },
    {
        "content": "<p>It can be used for OOB arithmatic yeah, however in order to use the pointer, <code>unsafe</code> must be written anyway, which is why I didnt mark it <code>unsafe</code>.</p>",
        "id": 172401528,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564828847
    },
    {
        "content": "<p>creating an OOB reference is insta-UB</p>",
        "id": 172401537,
        "sender_full_name": "RalfJ",
        "timestamp": 1564828891
    },
    {
        "content": "<p>and <code>get_unchecked</code> returns a reference</p>",
        "id": 172401540,
        "sender_full_name": "RalfJ",
        "timestamp": 1564828910
    },
    {
        "content": "<p>so it doesnt matter if you dont use the result. OOB with <code>get_unchecked</code> is UB.</p>",
        "id": 172401583,
        "sender_full_name": "RalfJ",
        "timestamp": 1564828947
    },
    {
        "content": "<p>Why it would be a problem? Because Im not sure what it does? [T; 0] doesnt really exist at runtime, so having a ptr to the 0th element...eh? calling <code>array[0]</code> panics for an array of 0 elements</p>",
        "id": 172401585,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564828972
    },
    {
        "content": "<p>Thanks for pointing that out. I guess I have to use <code>let base = &amp;self.array as *const MaybeUninit&lt;T&gt;</code>, and then call <code>.add(index)</code> on that then?</p>",
        "id": 172401631,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564829046
    },
    {
        "content": "<p>Quoting from the <code>add</code> docs: </p>\n<blockquote>\n<p>Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object.</p>\n</blockquote>",
        "id": 172401707,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829230
    },
    {
        "content": "<p>if you really want this to be safe without bounds checking you need to use <code>wrapping_add</code></p>",
        "id": 172401711,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829253
    },
    {
        "content": "<p>like, <code>self.array.as_ptr().wrapping_add(n)</code></p>",
        "id": 172401712,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829266
    },
    {
        "content": "<p>then you also don't need <code>unsafe</code></p>",
        "id": 172401713,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829272
    },
    {
        "content": "<blockquote>\n<p>Because Im not sure what it does?</p>\n</blockquote>\n<p>it adds 0 to a pointer. not sure how that is special in any way here.</p>",
        "id": 172401756,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829300
    },
    {
        "content": "<p>for an array of size 0 <em>every</em> index is OOB</p>",
        "id": 172401758,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829307
    },
    {
        "content": "<p>but you have OOB problems for all sizes and I dont see how 0 would be special</p>",
        "id": 172401759,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829320
    },
    {
        "content": "<p>oh and you cannot use <code>MaybeUninit::as_ptr</code> for OOB indices either as they take a reference</p>",
        "id": 172401774,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829387
    },
    {
        "content": "<p>and references must not dangle</p>",
        "id": 172401775,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829390
    },
    {
        "content": "<p>I dont get why you dont just do a bounds check, TBH^^</p>",
        "id": 172401776,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829397
    },
    {
        "content": "<p>Well the question really is, if I apply the changes that would make <code>nth_ptr</code> safe,<br>\nThen what should <code>first_ptr</code> do for N = 0,<br>\nEither returned an aligned pointer, or a pointer to some non-existing value in the array?</p>",
        "id": 172401832,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564829469
    },
    {
        "content": "<p>Especially with bounds checking, <code>first_ptr</code> would panic for N = 0.<br>\nBut this struct is used in an ArrayVec implementation (not the one from <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>), which uses <code>first_ptr</code> in its implementation for Deref&lt;Target = [T]&gt;, so a panic isnt something I'd like</p>",
        "id": 172401946,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564829662
    },
    {
        "content": "<p><code>first_ptr(0)</code> should return the address that's 0 away from <code>&amp;self</code>, at a different type</p>",
        "id": 172401968,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829732
    },
    {
        "content": "<p>I dont understand why you think there is a problem here</p>",
        "id": 172401972,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829750
    },
    {
        "content": "<p>it's just like <code>first_ptr(5)</code> returning the address <code>5*size_of::&lt;T&gt;()</code> away from the base, except with 5 replaced by 0...</p>",
        "id": 172402013,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829776
    },
    {
        "content": "<p>Okey, thats cool. I will change all my UB'ness...I really should learn how to avoid all that, thanks for pointing them out! :)</p>",
        "id": 172402081,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564829892
    },
    {
        "content": "<p>for <code>N = 0</code>, <code>Self</code> is a ZST. but if you are getting your pr arithmetic right, moving away 5 elements from that pointer, while out-of-bounds, is okay</p>",
        "id": 172402082,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224097\">@DutchGhost</span> as another aid in learning (besides reading the <a href=\"https://doc.rust-lang.org/nightly/nomicon/\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nomicon/\">https://doc.rust-lang.org/nightly/nomicon/</a> ), I can recommend Miri (<a href=\"https://github.com/rust-lang/miri/\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/\">https://github.com/rust-lang/miri/</a>)</p>",
        "id": 172402084,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829923
    },
    {
        "content": "<p>if you run your test suite in it, and if that does an OOB access, it would have caught this</p>",
        "id": 172402093,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829945
    },
    {
        "content": "<blockquote>\n<p>so a panic isnt something I'd like</p>\n</blockquote>\n<p>you <em>are</em> panicking in debug mode though</p>",
        "id": 172402099,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829957
    },
    {
        "content": "<p>so it clearly is incorrect to use that function OOB, and code that does is already broken in debug mode</p>",
        "id": 172402127,
        "sender_full_name": "RalfJ",
        "timestamp": 1564829978
    },
    {
        "content": "<p>either you want OOB accesses, then allow them and document that and be extra-super-careful not to have any (implicit) references anywhere. or you dont want OOB accesses and then I'd recommend checked accesses unless you benchmarked that this is hot code.</p>",
        "id": 172402225,
        "sender_full_name": "RalfJ",
        "timestamp": 1564830027
    },
    {
        "content": "<p>So just to get things straight;<br>\n<code>self.array.as_ptr().wrapping_add(index) as *const T</code> is valid, even if index is OOB, so the responsability of the validness of the returned ptr is up to the caller, and  not me</p>",
        "id": 172402823,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564831294
    },
    {
        "content": "<p>that code does not even need an <code>unsafe</code> block, so yes, there's no UB there. there cannot be.</p>",
        "id": 172403437,
        "sender_full_name": "RalfJ",
        "timestamp": 1564832535
    },
    {
        "content": "<p>ohh you updated the docs for slice's <code>get_unchecked</code> and <code>get_unchecked_mut</code>! hihi, thats great :)</p>",
        "id": 172443478,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564913429
    },
    {
        "content": "<p>well it's not landed yet, but yes :)</p>",
        "id": 172443558,
        "sender_full_name": "RalfJ",
        "timestamp": 1564913624
    },
    {
        "content": "<p>when questions like this come up, usually to answer them I try to quite the docs, but if the \"obvious\" docs dont have the quote I need... I just add it ;)</p>",
        "id": 172443609,
        "sender_full_name": "RalfJ",
        "timestamp": 1564913671
    }
]