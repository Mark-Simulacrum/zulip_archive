[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  Hi, I just miri-checked the <code>elsa</code> crate. It provides <code>FrozenMap</code> and <code>FrozenVec</code> using <code>StableDeref</code>: i.e. these are collections you can push to while holding references to their elements, because they give you references to their dereffed elements: a <code>FrozenMap&lt;String&gt;</code> will give you <code>&amp;str</code> (which will not change on <code>.push()</code>)</p>\n<p>My mutable_arena example fails miri: <a href=\"https://github.com/Manishearth/elsa/blob/master/examples/mutable_arena.rs#L56\" target=\"_blank\" title=\"https://github.com/Manishearth/elsa/blob/master/examples/mutable_arena.rs#L56\">https://github.com/Manishearth/elsa/blob/master/examples/mutable_arena.rs#L56</a> (miri doesn't support examples yet, move it in tree and turn it into a binary)</p>\n<p>I get this error: <a href=\"https://gist.github.com/Manishearth/0b053abd89fa3ad92ad00a8118923491\" target=\"_blank\" title=\"https://gist.github.com/Manishearth/0b053abd89fa3ad92ad00a8118923491\">https://gist.github.com/Manishearth/0b053abd89fa3ad92ad00a8118923491</a></p>\n<p>Talking to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> it seems like the issue is that this creates an <code>&amp;mut Vec&lt;T&gt;</code> from the unsafecell while holding on to <code>&amp;T::Deref</code>s obtained from the vec. This is supposed to be safe here because the <code>T::Deref</code>s are stored behind an allocation, so we're not actually borrowing the vec itself, and <code>Vec::push</code> does not touch these elements.</p>\n<p>Is this the UB here? What's the solution moving forward for stable containers then? They're a pretty crucial thing for caching and stuff, and the alternative is basically to implement bespoke collections each time.</p>",
        "id": 165660126,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557866482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> without having seen the details yet (hopefully I will have some time for that tomorrow), this sounds like a duplicate of <a href=\"https://github.com/SimonSapin/rust-typed-arena/issues/26#issuecomment-484507322\" target=\"_blank\" title=\"https://github.com/SimonSapin/rust-typed-arena/issues/26#issuecomment-484507322\">this problem</a> to me. Basically, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7171fd5a6366645b86772f68b1b05201\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7171fd5a6366645b86772f68b1b05201\">this is currently UB</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// laundering the lifetime -- we take care that `v` does not reallocate, so that&#39;s okay.</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>We should probably have an issue about this.</p>",
        "id": 165661833,
        "sender_full_name": "RalfJ",
        "timestamp": 1557867601
    },
    {
        "content": "<p>even this weaker form is UB, for the same reason:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// laundering the lifetime -- we take care that `v` does not reallocate, so that&#39;s okay.</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>Vec::push</code> currently creates a mutable ref covering all elements, which invalidates all previously created interior pointers.</p>",
        "id": 165662197,
        "sender_full_name": "RalfJ",
        "timestamp": 1557867823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> similar, but not quite</p>",
        "id": 165662363,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557867922
    },
    {
        "content": "<p>What we're doing is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v0</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165662528,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557868039
    },
    {
        "content": "<p>As in, we're relying on the fact that Vec::push does not change anything except for moving the inline values (but not any allocations)</p>",
        "id": 165662609,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557868090
    },
    {
        "content": "<p>But yes from a UB guidelines pov this is probably similar</p>",
        "id": 165662628,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557868116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> does reasoning about the correctness of <code>FrozenVec</code> and friends need reasoning about the <code>StableDeref</code> invariantas?</p>",
        "id": 165662800,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557868240
    },
    {
        "content": "<p>if so, it might be difficult to persuade Miri that <code>FrozenVec</code> is OK :/</p>",
        "id": 165662877,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557868298
    },
    {
        "content": "<blockquote>\n<p>As in, we're relying on the fact that Vec::push does not change anything except for moving the inline values (but not any allocations)</p>\n</blockquote>\n<p>Hm. Your example code is accepted by Miri though, as I would have expected.</p>",
        "id": 165695193,
        "sender_full_name": "RalfJ",
        "timestamp": 1557908267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> why that? Of course Miri cannot show that any possible interaction is okay, but a concrete execution should be UB-free if the abstraction is correct.</p>",
        "id": 165695250,
        "sender_full_name": "RalfJ",
        "timestamp": 1557908308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> FWIW, that data structure reminds me of <a href=\"https://github.com/rust-lang/miri/blob/master/src/mono_hash_map.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/blob/master/src/mono_hash_map.rs\">https://github.com/rust-lang/miri/blob/master/src/mono_hash_map.rs</a> ^^</p>",
        "id": 165695307,
        "sender_full_name": "RalfJ",
        "timestamp": 1557908401
    },
    {
        "content": "<p>self-contained example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f07c6c9021435fc52dd67827635b1370\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f07c6c9021435fc52dd67827635b1370\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f07c6c9021435fc52dd67827635b1370</a><br>\n(not a safe API any more but that shouldnt matter when looking at a concrete execution)</p>",
        "id": 165695682,
        "sender_full_name": "RalfJ",
        "timestamp": 1557908811
    },
    {
        "content": "<p>the reference/pointer in question points to the <code>Vec</code> itself, not its contents or so</p>",
        "id": 165698801,
        "sender_full_name": "RalfJ",
        "timestamp": 1557912043
    },
    {
        "content": "<p>oh... this is interesting. seems to be some bad interaction with what I do for 2-phase borrows.</p>",
        "id": 165699765,
        "sender_full_name": "RalfJ",
        "timestamp": 1557913030
    },
    {
        "content": "<p>I think this is the same issue:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">UnsafeCell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()).</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x2</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()).</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165699887,
        "sender_full_name": "RalfJ",
        "timestamp": 1557913154
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 165700012,
        "sender_full_name": "RalfJ",
        "timestamp": 1557913302
    },
    {
        "content": "<p>specifically, this does a two-phase borrow <em>from a raw pointer</em>, which I did not think was a thing</p>",
        "id": 165700090,
        "sender_full_name": "RalfJ",
        "timestamp": 1557913366
    },
    {
        "content": "<p>and so there are a bunch of <code>SharedReadWrite</code> that can all happily coexist, but the 2phase-borrow now adds a <code>Unique</code> right in the middle of them, which means the ones further up get invalidated once the two-phase borrow gets activated.</p>",
        "id": 165700118,
        "sender_full_name": "RalfJ",
        "timestamp": 1557913409
    },
    {
        "content": "<p>confirmed, removing the thing that supports two-phase borrows with outstanding shared references fixes my self-contained version of the elsa testcase</p>",
        "id": 165700316,
        "sender_full_name": "RalfJ",
        "timestamp": 1557913581
    },
    {
        "content": "<p>lol, I literally had this as a comment in the code:</p>\n<div class=\"codehilite\"><pre><span></span>        // TODO: With `two_phase == true`, this performs a weak reborrow for a `Unique`. That\n        // can lead to some possibly surprising effects, if the parent permission is\n        // `SharedReadWrite` then we now have a `Unique` in the middle of them, which &quot;splits&quot;\n        // them in terms of what remains valid when the `Unique` gets used.  Is that really\n        // what we want?\n</pre></div>\n\n\n<p>Now I know the answer: no, it is not what we want. ;)</p>",
        "id": 165701374,
        "sender_full_name": "RalfJ",
        "timestamp": 1557914676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> true, the <code>StableDeref</code> invariants are only needed for proving that all safe uses of <code>FrozenVec</code> have defined behaviour, not a particular concrete execution.</p>",
        "id": 165717449,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557929347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> yes, but only to the extent that a particular impl of StableDeref should be used in a safe way</p>",
        "id": 165721081,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557932030
    },
    {
        "content": "<p>Like, if StableDeref is a problem so is every other unsafe trait</p>",
        "id": 165721183,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557932086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> sorry, I'm a bit ignorant about the internals of this: does this mean the Elsa test case is fine?</p>",
        "id": 165721907,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557932619
    },
    {
        "content": "<p>And it's Miri that needs patching?</p>",
        "id": 165721928,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557932629
    },
    {
        "content": "<p>And yep! Your self contained test case is exactly what we're doing</p>",
        "id": 165722004,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1557932657
    },
    {
        "content": "<p>it does mean that this particular error is not Elsa's fault but Miri's.</p>",
        "id": 165723197,
        "sender_full_name": "RalfJ",
        "timestamp": 1557933529
    },
    {
        "content": "<p>thanks for posting this! the only way to get decent test coverage here is to crowdsource that stuff, so I am happy to see this work :D</p>",
        "id": 165723236,
        "sender_full_name": "RalfJ",
        "timestamp": 1557933560
    },
    {
        "content": "<p>but also this will keep me and my colleague busy for a bit while we update the implementation, documentation, formalization and proof ;)</p>",
        "id": 165723261,
        "sender_full_name": "RalfJ",
        "timestamp": 1557933585
    },
    {
        "content": "<blockquote>\n<p>specifically, this does a two-phase borrow <em>from a raw pointer</em>, which I did not think was a thing</p>\n</blockquote>\n<p>Well the borrow kind is marked as two-phase, but the borrow checker doesn't track the borrow (i.e. it's treated as just a read/write).</p>",
        "id": 165730675,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1557938513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> the fixed Miri just landed in rustc, so if you could try again with the next nightly (tomorrow), that'd be great.</p>",
        "id": 166020464,
        "sender_full_name": "RalfJ",
        "timestamp": 1558267410
    },
    {
        "content": "<p>Thank you!! Will do.</p>",
        "id": 166030399,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558283756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> </p>\n<blockquote>\n<p>Nightly miri now passes all of the elsa tests except for <a href=\"http://sync.rs\" target=\"_blank\" title=\"http://sync.rs\">sync.rs</a> (which uses threads, which miri doesn't like because of the dynamic loading)</p>\n</blockquote>\n<p>awesome! Notice that threads are also themselves unsupported, the interpreter machine just has no concept of there being more than 1 stack.</p>",
        "id": 166153127,
        "sender_full_name": "RalfJ",
        "timestamp": 1558428023
    },
    {
        "content": "<p>if you want to have Miri as part of your CI, I can help make that happen :)</p>",
        "id": 166153154,
        "sender_full_name": "RalfJ",
        "timestamp": 1558428061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> miri needs an --example argument for that :)</p>",
        "id": 166178157,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558449298
    },
    {
        "content": "<p>oh, these are not testcases?</p>",
        "id": 166178200,
        "sender_full_name": "RalfJ",
        "timestamp": 1558449342
    },
    {
        "content": "<p>hm. our cargo wrapper already is a mess :( we should somehow reuse cargo's way of selecting which binaries to build/run...</p>",
        "id": 166178270,
        "sender_full_name": "RalfJ",
        "timestamp": 1558449371
    },
    {
        "content": "<p>I just opened an issue for this: <a href=\"https://github.com/rust-lang/miri/issues/739\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/739\">https://github.com/rust-lang/miri/issues/739</a></p>",
        "id": 166178437,
        "sender_full_name": "RalfJ",
        "timestamp": 1558449516
    },
    {
        "content": "<p>we could really use some help here :D</p>",
        "id": 166178441,
        "sender_full_name": "RalfJ",
        "timestamp": 1558449520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I wanted to patch that but your arg parsing is kinda a mess lol</p>",
        "id": 166196211,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558461431
    },
    {
        "content": "<p>(not necessarily blaming you, it's fine for the purpose it serves, it's just hard to extend)</p>",
        "id": 166196267,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558461468
    },
    {
        "content": "<p>Might fix it anyway later</p>",
        "id": 166196281,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558461476
    },
    {
        "content": "<blockquote>\n<p>arg parsing is kinda a mess</p>\n</blockquote>\n<p>that's putting it kindly^^</p>",
        "id": 166196376,
        "sender_full_name": "RalfJ",
        "timestamp": 1558461527
    },
    {
        "content": "<p>but it clearly does need a rewrite, not an extension</p>",
        "id": 166196435,
        "sender_full_name": "RalfJ",
        "timestamp": 1558461559
    },
    {
        "content": "<p>and you can blame me, you wouldn't be entirely wrong. ;) I didn't start it, but I went down a route of arg parsing that I knew was wrong. my only excuse is that I care a lot about the semantics Miri implements, and wanted to just get the rest done quickly.</p>",
        "id": 166196597,
        "sender_full_name": "RalfJ",
        "timestamp": 1558461658
    },
    {
        "content": "<p>Maybe I'll just swap in clap</p>",
        "id": 166196830,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558461797
    },
    {
        "content": "<p>That's not easy either, miri also takes in normal rustc args I think</p>",
        "id": 166196867,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558461829
    },
    {
        "content": "<p>yeah... the general form is <code>cargo miri &lt;optional verb&gt; &lt;args for the cargo wrapper&gt; -- &lt;args for the miri driver, which includes rustc args&gt; -- &lt;args for the application being run&gt;</code></p>",
        "id": 166197257,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462029
    },
    {
        "content": "<p>so we'd only want to use clap until the first <code>--</code>, and leave the rest uninterpreted. is that possible?</p>",
        "id": 166197352,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462088
    }
]