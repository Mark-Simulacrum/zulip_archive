[
    {
        "content": "<p>Would it be correct to say that all types with interior mutability could be implemented without using <code>UnsafeCell</code>, but using raw pointers to heap-allocated values? As far as I understand, the <code>noalias</code> and <code>readonly</code> LLVM attributes are not generated for types containing raw pointers.</p>",
        "id": 225809315,
        "sender_full_name": "Federico Poli",
        "timestamp": 1612947894
    },
    {
        "content": "<p>Here is an example of what I mean: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=700cc3914a8ad527d9ee3a769934d5d1\">playground</a>. It's a user-defined type with interior mutability that doesn't (directly) use <code>UnsafeCell</code>.</p>",
        "id": 225967740,
        "sender_full_name": "Federico Poli",
        "timestamp": 1613036792
    },
    {
        "content": "<p>Maybe an UnsafeCell is actually used in the implementation of <code>Box</code> or <code>std::alloc</code>? I'm not sure about that.</p>",
        "id": 225967748,
        "sender_full_name": "Federico Poli",
        "timestamp": 1613036800
    },
    {
        "content": "<p>In particular, the documentation of <code>UnsafeCell</code> says that \"it's the only legal way to obtain aliasable data that is considered mutable\". However, the example that I linked doesn't use an unsafe cell and seems a valid type with interior mutability. Does the example have UB for some reason? If not, the sentence from the documentation would be incorrect.</p>",
        "id": 225968308,
        "sender_full_name": "Federico Poli",
        "timestamp": 1613037210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116427\">@Federico Poli</span> Your example is not interior mutability. The data is stored on the heap and not directly inside the <code>MyUnsafeCell</code>. <code>UnsafeCell</code> stores the data directly inside itself.</p>",
        "id": 225971125,
        "sender_full_name": "bjorn3",
        "timestamp": 1613038907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> thanks, that fully answers my question. I was thinking that interior mutability is a property of the API.</p>",
        "id": 225977866,
        "sender_full_name": "Federico Poli",
        "timestamp": 1613043324
    },
    {
        "content": "<p>Yeah, <code>UnsafeCell</code> exists to counteract / disable the immutability assumption that Rust makes when it sees a shared reference to some type / memory; obviously this assumption cannot go through raw pointers, so indeed with indirection you can make sure you never derive a mutable pointer to a <code>T</code> that derived from a shared reference to it or to a direct container. But without such \"raw indirection\", from a <code>self: &amp;'lt InlineWrapper&lt;T&gt;</code>, Rust will assume that the inner <code>T</code> is also aliased (<code>&amp;'lt T</code>) and that it is thus immutable. At that point any then-derived raw pointers to the <code>T</code> will no longer have the \"capability\" / be allowed to be used to mutate the <code>T</code> (read-only provenance). That's when wrapping the <code>T</code> in an <code>UnsafeCell</code> is necessary.</p>",
        "id": 226126537,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613130308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116427\">@Federico Poli</span> another way to put this is that your code doesn't create \"shared references to mutable data\", and thus it does not need <code>UnsafeCell</code></p>",
        "id": 226242814,
        "sender_full_name": "RalfJ",
        "timestamp": 1613219295
    },
    {
        "content": "<p>however, that wording in the UnsafeCell docs does seem suboptimal to me. I'd have said something more like \"it's the only legal way to obtain shared references to data that might be mutated\", or \"it's the only legal way to mutate data that is also pointed to by shared references\". <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> what do you think?</p>",
        "id": 226242830,
        "sender_full_name": "RalfJ",
        "timestamp": 1613219363
    },
    {
        "content": "<p>Explicitly mentioning shared references makes sense to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> ; in that case I'd favor the former phrasing given that the latter is a bit more ambiguous w.r.t. provenance</p>",
        "id": 226244374,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613221817
    },
    {
        "content": "<p>the thing is that UnsafeCell isnt the thing that lets you obtain the shared ref</p>",
        "id": 226245043,
        "sender_full_name": "RalfJ",
        "timestamp": 1613222963
    },
    {
        "content": "<p>so \"only legal way to obtain\" sounds weird</p>",
        "id": 226245046,
        "sender_full_name": "RalfJ",
        "timestamp": 1613222970
    },
    {
        "content": "<p>UnsafeCell is the thing that lets you mutate</p>",
        "id": 226245049,
        "sender_full_name": "RalfJ",
        "timestamp": 1613222976
    },
    {
        "content": "<p>I see what you mean now <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <em>it's the only legal way to avoid disallowing mutation of data that is pointed to by a shared reference</em> ? The singular of <em>shared reference</em> seems to be important, otherwise people may think of \"mutation through a <code>&amp;</code> is fine provided there is only one\", and the double negative, while complex, is the one that better conveys the right nuance; in case people find it confusing, it also conveys that they need to think about that very nuance (especially with the following paragraphs in the docs detailing this stuff).</p>\n<p>I'd even go as far as adding a footnote on that <em>shared reference</em> to add: <em>(or an active pointer derived from it)</em></p>\n<p>But if all this is too much, then let's go for your second phrasing (but with a singular <em>shared reference</em>).</p>",
        "id": 226276323,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1613261089
    },
    {
        "content": "<p>To me, \"<em>interior</em> mutability\" risks to be confused with \"mutability of the <em>internal state</em>\", which is wrong when you store the state behind raw pointers. It might be worth clarifying this, as I had to read the compiler's source code to get it.</p>",
        "id": 226362318,
        "sender_full_name": "Federico Poli",
        "timestamp": 1613382198
    },
    {
        "content": "<p>What about <em>UnsafeCell is the only Rust type for which it's legal to mutate its content even while the unsafe cell is pointed by a shared reference</em>? I'm still unsatisfied with \"content\" because it's not clear that raw pointers shouldn't be followed.</p>",
        "id": 226362844,
        "sender_full_name": "Federico Poli",
        "timestamp": 1613382526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/UnsafeCells.20as.20raw.20pointers/near/226242814\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116427\">Federico Poli</span> another way to put this is that your code doesn't create \"shared references to mutable data\", and thus it does not need <code>UnsafeCell</code></p>\n</blockquote>\n<p>I see, yes. It creates \"shared references to immutable data that points to mutable data\".</p>",
        "id": 226363829,
        "sender_full_name": "Federico Poli",
        "timestamp": 1613383113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> <span class=\"user-mention\" data-user-id=\"116427\">@Federico Poli</span> I thought about this some more and read the rest of the UnsafeCell docs and made a PR: <a href=\"https://github.com/rust-lang/rust/pull/82372\">https://github.com/rust-lang/rust/pull/82372</a>. Feedback welcome!</p>",
        "id": 227178442,
        "sender_full_name": "RalfJ",
        "timestamp": 1613924909
    }
]