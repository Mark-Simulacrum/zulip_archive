[
    {
        "content": "<p>Does anyone have an easy example of a generator that will trigger Miri due to an improper usage of <code>Pin</code>? </p>\n<p>I think I have some code that I think is using <code>Pin::new_unchecked</code> incorrectly, but Miri reports it as clean. I think that if I can get a generator that definitely uses self-references it will though.</p>",
        "id": 168522451,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560962144
    },
    {
        "content": "<p>Any generator which maintains internal references during execution?</p>",
        "id": 168523326,
        "sender_full_name": "nagisa",
        "timestamp": 1560962834
    },
    {
        "content": "<p>between yield points?</p>",
        "id": 168523329,
        "sender_full_name": "nagisa",
        "timestamp": 1560962838
    },
    {
        "content": "<p>yeah you have to actually get the code to access bad memory in the wrong way</p>",
        "id": 168524632,
        "sender_full_name": "RalfJ",
        "timestamp": 1560963711
    },
    {
        "content": "<p>Trying the simple thing gives a compiler error; do I actually need to use raw pointers?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">num</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">num</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kr\">yield</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">num</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0626]: borrow may still be in use when generator yields\n  --&gt; src/main.rs:11:19\n   |\n11 |         let num = &amp;mut num;\n   |                   ^^^^^^^^\n12 |\n13 |         yield *num;\n   |         ---------- possible yield occurs here\n</pre></div>",
        "id": 168541716,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560975298
    },
    {
        "content": "<p>probably there's some unstable feature flag to enable this?</p>",
        "id": 168544188,
        "sender_full_name": "RalfJ",
        "timestamp": 1560977166
    },
    {
        "content": "<p>That would be cool, but finding a feature flag can be annoying. I like it when the compiler tells me :-)</p>",
        "id": 168562893,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560999517
    },
    {
        "content": "<p>or maybe it only works for futures? that seems weird though.<br>\nCc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 168572619,
        "sender_full_name": "RalfJ",
        "timestamp": 1561015512
    },
    {
        "content": "<p>I think you would need to make an immovable generator (i.e. <code>static move || { ... }</code>), resume it with <code>Pin::new_unchecked</code>, <em>move it</em>, and then resume it again</p>",
        "id": 168650182,
        "sender_full_name": "tmandry",
        "timestamp": 1561083476
    },
    {
        "content": "<p><code>static move ||</code> is the key to make an immovable generator closure?</p>",
        "id": 168660977,
        "sender_full_name": "RalfJ",
        "timestamp": 1561101097
    },
    {
        "content": "<p>is there something similar for top-level functions?</p>",
        "id": 168660983,
        "sender_full_name": "RalfJ",
        "timestamp": 1561101103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> perfect, thank you! <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fab901d66e7fe118a48dfd4e9daa1669\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fab901d66e7fe118a48dfd4e9daa1669\">this now trips up Miri correctly</a></p>",
        "id": 168708362,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561144515
    },
    {
        "content": "<p>TL;DR: I wrote some incorrect unsafe code for generators years ago. I moved it to <code>Pin</code> and that made me realize that it was broken; I just wanted to \"prove\" it via Miri</p>",
        "id": 168708546,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561144629
    },
    {
        "content": "<p>I guess there's not an easy way to adapt a generator to an iterator <em>without</em> something like <code>Box::pin</code> because there's no way to prevent moving the iterator</p>",
        "id": 168708648,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561144686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> thanks for that testcase :D</p>",
        "id": 168708666,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> NP. I'm sure it can be made smaller as I wasn't going for minimal</p>",
        "id": 168708724,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561144756
    },
    {
        "content": "<p><em>shrug</em> fine for me</p>",
        "id": 168708733,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144764
    },
    {
        "content": "<p>hm, unfortunately your generator test errors even if you dont break the pinning^^</p>",
        "id": 168709863,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145599
    },
    {
        "content": "<p>looks like a stacked borrows violation somewhere in the genrator stuff...</p>",
        "id": 168709941,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145644
    },
    {
        "content": "<p>ah I guess it's not too surprising, you are creating a new mutable ref each time</p>",
        "id": 168710019,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> here's a better example: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7c961f8815370ae5aa4d2674d5b99def\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7c961f8815370ae5aa4d2674d5b99def\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7c961f8815370ae5aa4d2674d5b99def</a></p>",
        "id": 168710131,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I’m not following what you mean by “creating a new mutable ref each time”. You mean via <code>let me = unsafe { Pin::new_unchecked(&amp;mut self.0) };</code> ? Other than breaking the guarantee of <code>Pin</code>, how is that bad?</p>",
        "id": 168710906,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561146509
    },
    {
        "content": "<p>it breaks (one version of) the notion that a mutable reference is unique</p>",
        "id": 168711016,
        "sender_full_name": "RalfJ",
        "timestamp": 1561146617
    },
    {
        "content": "<p>so it's basically the same as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mut_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">raw</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// UB! You violated aliasing rules.</span>\n</pre></div>",
        "id": 168711043,
        "sender_full_name": "RalfJ",
        "timestamp": 1561146658
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/148\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/148\">https://github.com/rust-lang/unsafe-code-guidelines/issues/148</a></p>",
        "id": 168711092,
        "sender_full_name": "RalfJ",
        "timestamp": 1561146717
    },
    {
        "content": "<p>I’m gonna think on it a bit, but until I have my “aha!” moment…</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ecc91dd563bf653df42c6a40530d5d69\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ecc91dd563bf653df42c6a40530d5d69\">This is how I would have “fixed” it</a>, but Miri still complains; is this the point you are talking about?</p>",
        "id": 168711426,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561146976
    },
    {
        "content": "<p>yes</p>",
        "id": 168711442,
        "sender_full_name": "RalfJ",
        "timestamp": 1561147005
    },
    {
        "content": "<p>my \"better example\" shows an error that does not come from stacked borrows. dangling pointer is more fundamental and there's nothing to discuss there.</p>",
        "id": 168711462,
        "sender_full_name": "RalfJ",
        "timestamp": 1561147026
    },
    {
        "content": "<p>so that better demonstrates that your original code was wrong</p>",
        "id": 168711476,
        "sender_full_name": "RalfJ",
        "timestamp": 1561147035
    },
    {
        "content": "<p>but even correct self-referential generators currently fail to run in Miri (without <code>-Zmiri-disable-validation</code>), and that's a deep-rooted incompatibility between (the current approach to) self-referential generators and (the current version of) Stacked Borrows</p>",
        "id": 168711580,
        "sender_full_name": "RalfJ",
        "timestamp": 1561147084
    },
    {
        "content": "<p>Oh. Then <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6dd3d73eee7a58e40ebabcb9240e4074\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6dd3d73eee7a58e40ebabcb9240e4074\">this version with no unsafe code</a> that triggers Miri might actually be OK…?</p>",
        "id": 168711747,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561147253
    },
    {
        "content": "<p>it better be, with no unsafe code :P</p>",
        "id": 168713271,
        "sender_full_name": "RalfJ",
        "timestamp": 1561148492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I know I’m not telling you anything new, but false positives for a tool like Miri are really bad for trustworthiness for such a tool.</p>",
        "id": 168713395,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561148581
    },
    {
        "content": "<p>If possible, it’d be wonderful to say “this error may not be valid due to …”</p>",
        "id": 168713419,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561148615
    },
    {
        "content": "<p>well we are in the exploratory phase of both Miri and Stacked Borrows. not sure what to do about that.^^</p>",
        "id": 168713509,
        "sender_full_name": "RalfJ",
        "timestamp": 1561148681
    },
    {
        "content": "<p>but I'll add to the \"redo our error messages\" task that it would be a good idea to distinguish \"certain\" from \"less certain\" UB errors</p>",
        "id": 168713572,
        "sender_full_name": "RalfJ",
        "timestamp": 1561148744
    },
    {
        "content": "<p>that will not be 100% reliable but it might help in situations like this</p>",
        "id": 168713589,
        "sender_full_name": "RalfJ",
        "timestamp": 1561148762
    },
    {
        "content": "<p>My worry is that during that phase, people might try to run Miri, see an error, then be told “oh that’s not a real error”. They internalize that and then in 3 years when we are past that stage they still think “Miri isn’t always right”</p>",
        "id": 168713626,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561148765
    },
    {
        "content": "<p>const generics is a recent example of an “easy” way out of this:</p>\n<blockquote>\n<p>warning: the feature <code>const_generics</code> is incomplete and may cause the compiler to crash</p>\n</blockquote>\n<p>Could Miri say something equivalent?</p>",
        "id": 168713711,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561148844
    },
    {
        "content": "<p>it says that in its README^^</p>",
        "id": 168713742,
        "sender_full_name": "RalfJ",
        "timestamp": 1561148870
    },
    {
        "content": "<p>I know that false positives are a problem. Not long ago you also warned me about false negatives. I'm afraid avoiding both is not going to be possible until we have a precise and complete spec, and part of the job of Miri is to help figuring out that spec. ;)</p>",
        "id": 168713830,
        "sender_full_name": "RalfJ",
        "timestamp": 1561148911
    },
    {
        "content": "<p>I share your worry though</p>",
        "id": 168714084,
        "sender_full_name": "RalfJ",
        "timestamp": 1561149113
    },
    {
        "content": "<p>I planned anyway to print next to the error some text saying whether this is UB or an operation not supported by Miri. So now I think it should say \"definite UB\" or \"might be UB, this is experimental\" or \"unsupported\"</p>",
        "id": 168714212,
        "sender_full_name": "RalfJ",
        "timestamp": 1561149208
    },
    {
        "content": "<p>I mean, the compiler doesn’t always avoid all false {negatives,positives} so you don’t have to be perfect.</p>\n<blockquote>\n<p>README</p>\n</blockquote>\n<p>(a) Who reads that <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>  (b) My main usage of Miri is via the playground’s button (and I just assume that’s true for everyone) so I was thinking in the output would be more obvious</p>\n<blockquote>\n<p>So now I think it should say</p>\n</blockquote>\n<p>That would be wonderful</p>",
        "id": 168714339,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561149324
    },
    {
        "content": "<p>great, now I just need to find that time machine that lets me actually implement this :D</p>",
        "id": 168714477,
        "sender_full_name": "RalfJ",
        "timestamp": 1561149413
    },
    {
        "content": "<p>currently just keeping Miri working (plus reviews etc) sucks up all my Rust time -- but that's also because of an approaching paper deadline</p>",
        "id": 168714508,
        "sender_full_name": "RalfJ",
        "timestamp": 1561149438
    },
    {
        "content": "<p>I think that cloning yourself is probably the more realistic solution :-)</p>",
        "id": 168751177,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1561209839
    }
]