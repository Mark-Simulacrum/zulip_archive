[
    {
        "content": "<p>Given that <code>rental</code> is no longer maintained I tried to make a replacement that is specific to my use case. Is it sound?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>The code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">inner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Dwarf</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mmap</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">memmap</span>::<span class=\"n\">Mmap</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">parsed</span>: <span class=\"nc\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">ParsedDwarf</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Dwarf</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Dwarf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Load ELF/Mach-O object file</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Safety: Not really, this assumes that the backing file will not be truncated or</span>\n<span class=\"w\">            </span><span class=\"c1\">// written to while it is used by us.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mmap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">memmap</span>::<span class=\"n\">Mmap</span>::<span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">}));</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Safety: `mmap` is not deallocated or changed before `parsed` is.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parsed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ParsedDwarf</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;**</span><span class=\"n\">mmap</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Safety: No reference to `parsed` can be obtained without the lifetime being shortened</span>\n<span class=\"w\">            </span><span class=\"c1\">// to be smaller than the `Dwarf` that contains both `parsed` and the `mmap` it borrows</span>\n<span class=\"w\">            </span><span class=\"c1\">// from.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parsed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">ParsedDwarf</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span><span class=\"o\">&lt;</span><span class=\"n\">ParsedDwarf</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Dwarf</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mmap</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parsed</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">rent</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ParsedDwarf</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parsed</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Drop</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Dwarf</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ManuallyDrop</span>::<span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parsed</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mmap</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</div></div>",
        "id": 205054735,
        "sender_full_name": "bjorn3",
        "timestamp": 1595774605
    },
    {
        "content": "<p>If you’re not mutating, I think you don’t even need <code>rent</code>; you should be able to get away with <code>fn parsed&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a ParsedDwarf&lt;'a&gt;</code>…</p>",
        "id": 205056145,
        "sender_full_name": "comex",
        "timestamp": 1595777229
    },
    {
        "content": "<p>I may add internal mutability for caching lazily computed data.</p>",
        "id": 205056238,
        "sender_full_name": "bjorn3",
        "timestamp": 1595777373
    },
    {
        "content": "<p>Also, you probably don’t need to store <code>Mmap</code> behind a pointer, since it’s already a pointer type itself (i.e. the data is stored externally, not within the <code>Mmap</code> object itself)</p>",
        "id": 205056293,
        "sender_full_name": "comex",
        "timestamp": 1595777451
    },
    {
        "content": "<p>I see</p>",
        "id": 205056306,
        "sender_full_name": "comex",
        "timestamp": 1595777474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198590\">comex</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Review.20quick.20rental.20replacement/near/205056293\">said</a>:</p>\n<blockquote>\n<p>Also, you probably don’t need to store <code>Mmap</code> behind a pointer, since it’s already a pointer type itself (i.e. the data is stored externally, not within the <code>Mmap</code> object itself)</p>\n</blockquote>\n<p>indeed, now storing it directly</p>",
        "id": 205056328,
        "sender_full_name": "bjorn3",
        "timestamp": 1595777519
    },
    {
        "content": "<p>Really a shame that <code>rental</code> is no longer maintained.  Maybe I should maintain it.</p>",
        "id": 205056384,
        "sender_full_name": "comex",
        "timestamp": 1595777604
    },
    {
        "content": "<p>I’m not a good maintainer though; I tend to be unreliable</p>",
        "id": 205056390,
        "sender_full_name": "comex",
        "timestamp": 1595777624
    },
    {
        "content": "<p>Yeah, I was surprised that <code>rental</code> is no longer maintained. <span class=\"user-mention silent\" data-user-id=\"210946\">Nikita Baksalyar</span> notified me of it when submitting a PR using it.</p>",
        "id": 205056447,
        "sender_full_name": "bjorn3",
        "timestamp": 1595777707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> If you're more interested in a one-off effort than a long-term maintenance task, I'd love to see an MCP and project group proposal for \"teach the borrow checker how to handle self-borrows\".</p>",
        "id": 205061313,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595786559
    },
    {
        "content": "<p>I'd absolutely love that, but it's also very hard :)</p>",
        "id": 205062538,
        "sender_full_name": "comex",
        "timestamp": 1595788808
    },
    {
        "content": "<p>I could help with specing it out, but I think most of the work is in implementing it.</p>",
        "id": 205062549,
        "sender_full_name": "comex",
        "timestamp": 1595788854
    },
    {
        "content": "<p>Specifying it isn't trivial either.</p>",
        "id": 205062579,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595788902
    },
    {
        "content": "<p>But I was also trying to talk you into helping to implement it, on the theory that that would be much more fun than maintaining <code>rental</code>. ;)</p>",
        "id": 205062626,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595788942
    },
    {
        "content": "<p>Probably!  Don't know if I have enough time to work on a project like that though.</p>",
        "id": 205062629,
        "sender_full_name": "comex",
        "timestamp": 1595788961
    },
    {
        "content": "<p>I get the impression that, once the spec is nailed down, it'll be much easier to implement things like that with <code>chalk</code> in place.</p>",
        "id": 205062636,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595788982
    },
    {
        "content": "<p>Not with polonius?</p>",
        "id": 205062690,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595789046
    },
    {
        "content": "<p>It's interesting because it implies some form of \"path-dependent types\" like Scala has.  Like, if you have <code>array: [StructWithSelfBorrows; 2]</code>, <code>array[0]</code> and <code>array[1]</code> have the same type, but they're not equivalent - you can't necessarily swap a struct field between one and the other (if the field has self-references).</p>",
        "id": 205062721,
        "sender_full_name": "comex",
        "timestamp": 1595789157
    },
    {
        "content": "<p>I should say, if the field has references to other parts of the struct.</p>",
        "id": 205062780,
        "sender_full_name": "comex",
        "timestamp": 1595789262
    },
    {
        "content": "<p>I suppose this could also be a pathway to something nicer than <code>Pin</code>...</p>",
        "id": 205062834,
        "sender_full_name": "comex",
        "timestamp": 1595789385
    },
    {
        "content": "<p>Although that would additionally require a notion of immovability.</p>",
        "id": 205062924,
        "sender_full_name": "comex",
        "timestamp": 1595789439
    },
    {
        "content": "<p>But even for a <code>rental</code> replacement you need either a notion of stable-deref or some interaction with <code>Pin</code>.</p>",
        "id": 205062991,
        "sender_full_name": "comex",
        "timestamp": 1595789633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> chalk+polonius+etc, I think.</p>",
        "id": 205063277,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595790034
    },
    {
        "content": "<p>Niko mentioned self-referential structs as a far-future possibility of Polonius in his Rust Belt Rust talk.</p>",
        "id": 205072842,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595808327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> That's where the idea came from.</p>",
        "id": 205072962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595808556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>  <a href=\"https://www.youtube.com/watch?reload=9&amp;v=_agDeiWek8w\">https://www.youtube.com/watch?reload=9&amp;v=_agDeiWek8w</a> (cameo by yours truly)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"_agDeiWek8w\" href=\"https://www.youtube.com/watch?reload=9&amp;v=_agDeiWek8w\"><img src=\"https://i.ytimg.com/vi/_agDeiWek8w/default.jpg\"></a></div>",
        "id": 205074072,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595810520
    },
    {
        "content": "<p>wrong josh ;)</p>",
        "id": 205074111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595810550
    },
    {
        "content": "<p>but also wow what a great quote for polonius</p>",
        "id": 205074115,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595810569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Review.20quick.20rental.20replacement/near/205074111\">said</a>:</p>\n<blockquote>\n<p>wrong josh ;)</p>\n</blockquote>\n<p><a href=\"/user_uploads/4715/geQH0LvlP2DMEgwa-5rFx0L3/image.png\">image.png</a>  Zulip bug?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/geQH0LvlP2DMEgwa-5rFx0L3/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/geQH0LvlP2DMEgwa-5rFx0L3/image.png\"></a></div>",
        "id": 205074189,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595810719
    },
    {
        "content": "<p>oh I didn't know people actually looked at emojis <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 205074261,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595810848
    },
    {
        "content": "<p>this is cool talk though, thanks!</p>",
        "id": 205074265,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595810857
    }
]