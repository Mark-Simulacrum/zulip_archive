[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span></p>",
        "id": 167988511,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560373834
    },
    {
        "content": "<p>context is allowing something like this optimization: <a href=\"https://github.com/rust-lang/rust/issues/59123#issuecomment-501089032\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59123#issuecomment-501089032\">https://github.com/rust-lang/rust/issues/59123#issuecomment-501089032</a></p>",
        "id": 167988530,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560373852
    },
    {
        "content": "<p>and carving out a rule that could ban <a href=\"https://github.com/rust-lang/rust/issues/59123#issuecomment-501437202\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59123#issuecomment-501437202\">https://github.com/rust-lang/rust/issues/59123#issuecomment-501437202</a></p>",
        "id": 167988553,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560373866
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> is interested in looking at steps in the direction of a memory model that we could take that would allow this without committing to a full model</p>",
        "id": 167988585,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560373904
    },
    {
        "content": "<p>obv. this would have to go through the RFC process and get aired thoroughly in this group</p>",
        "id": 167988598,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560373918
    },
    {
        "content": "<p>but I figured I'd start the topic here for discussion</p>",
        "id": 167988667,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560373940
    },
    {
        "content": "<p>One question on my mind is how/if we could find crates impacted by this</p>",
        "id": 167988994,
        "sender_full_name": "tmandry",
        "timestamp": 1560374192
    },
    {
        "content": "<p>e.g. is there a way to do a crater run with miri validation enabled? Have we ever tried?</p>",
        "id": 167989058,
        "sender_full_name": "tmandry",
        "timestamp": 1560374278
    },
    {
        "content": "<p>not really currently but if it's strongly desired perhaps feasible in about 2-4 weeks (cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span>)</p>",
        "id": 167990913,
        "sender_full_name": "simulacrum",
        "timestamp": 1560375598
    },
    {
        "content": "<p>wasn't miri <em>really</em> slow?</p>",
        "id": 167990994,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1560375645
    },
    {
        "content": "<p>like, a test run now takes 4-5 days, if we run it with miri how long is it going to take :/</p>",
        "id": 167991057,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1560375707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> about 1000 times that maybe <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167995687,
        "sender_full_name": "centril",
        "timestamp": 1560379554
    },
    {
        "content": "<p>eeek <em>no</em></p>",
        "id": 167996264,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1560380032
    },
    {
        "content": "<p>yeah, that's unfortunate. what kind of machine are we running crater on <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span>?</p>",
        "id": 167996584,
        "sender_full_name": "tmandry",
        "timestamp": 1560380318
    },
    {
        "content": "<p>is this doc still accurate? <a href=\"https://github.com/rust-lang-nursery/crater/blob/master/docs/agent-machine-setup.md\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/crater/blob/master/docs/agent-machine-setup.md\">https://github.com/rust-lang-nursery/crater/blob/master/docs/agent-machine-setup.md</a></p>",
        "id": 167996624,
        "sender_full_name": "tmandry",
        "timestamp": 1560380378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> mostly, yes</p>",
        "id": 167996905,
        "sender_full_name": "simulacrum",
        "timestamp": 1560380581
    },
    {
        "content": "<p>machine-spec wise anyway</p>",
        "id": 167996926,
        "sender_full_name": "simulacrum",
        "timestamp": 1560380595
    },
    {
        "content": "<p>although we might've downgraded to 1 terabyte recently not sure</p>",
        "id": 167996942,
        "sender_full_name": "simulacrum",
        "timestamp": 1560380609
    },
    {
        "content": "<p>we dowgraded from 4tb to 2tb, so that page is fully accurate</p>",
        "id": 167997334,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1560380982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> a c5.2xlarge is 8 cores at ~3ghz</p>",
        "id": 167997604,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1560381174
    },
    {
        "content": "<p>well also the vast majority of crates probably wont work in Miri for various reasons</p>",
        "id": 168024415,
        "sender_full_name": "RalfJ",
        "timestamp": 1560414032
    },
    {
        "content": "<p>most of them for trying to communicate with the host system in any way (network, file system, system clock, C FFI, ...)</p>",
        "id": 168024428,
        "sender_full_name": "RalfJ",
        "timestamp": 1560414053
    },
    {
        "content": "<blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"116883\">tmandry</span> is interested in looking at steps in the direction of a memory model that we could take that would allow this without committing to a full model</p>\n</blockquote>\n<p>the good news is that (I think) \"though shall not write through (frozen) shared references\" is pretty much the least controversial part of stacked borrows. every violation of that that we found so far was a blatant typo.</p>\n<p>However, this does interact with <a href=\"https://github.com/rust-lang/rust/issues/56604\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56604\">https://github.com/rust-lang/rust/issues/56604</a>: is it allowed to write through a raw pointer obtained by turning an <code>&amp;mut T</code> into a <code>*const T</code>? Current Miri says no.</p>",
        "id": 168024783,
        "sender_full_name": "RalfJ",
        "timestamp": 1560414402
    },
    {
        "content": "<p>Is there a possibility for a \"fast\" mode with Miri that could tell you if a program run would exceed Miri's abilities? Valgrind has a no-op mode (only 50% the original programs speed!) in a similar vein.</p>\n<p>If so, you could run \"miri check-effectiveness\" on all the crates, establish a blacklist for those which don't pass, and then make a decision on whether to run on the remainder.</p>",
        "id": 168050122,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560436119
    },
    {
        "content": "<p>You could also sample crates to get <em>some</em> amount of testing</p>",
        "id": 168050165,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560436142
    },
    {
        "content": "<p>Miri's \"fast mode\" is <code>-Zmiri-disable-validation</code>. The overhead there is just around 300x-500x, not 1000x...</p>",
        "id": 168051173,
        "sender_full_name": "RalfJ",
        "timestamp": 1560436808
    },
    {
        "content": "<p>there is also probably a lot of optimization potential there. Like, I have not even profiled Miri. I don't have the resources for that so it is not something I focus on.</p>",
        "id": 168051236,
        "sender_full_name": "RalfJ",
        "timestamp": 1560436862
    },
    {
        "content": "<p>so, this needs someone who is willing to dedicate some time to look into how to make Miri faster. Without sacrificing readability or code organization, because correctness is still crucial. But even then, I would not expect it to become more than 10x faster -- so still way too slow. oky, much of crater's time is probably spent building, not running tests, so that one does not multiply.</p>",
        "id": 168051307,
        "sender_full_name": "RalfJ",
        "timestamp": 1560436922
    },
    {
        "content": "<p>more realistically, I actually talked with Julian about having a valgrind module for Stacked Borrows. We think it's possible. But I won't have the time to do it.</p>",
        "id": 168051452,
        "sender_full_name": "RalfJ",
        "timestamp": 1560436993
    },
    {
        "content": "<p>Any particular reason for the valgrind preference over sanitizers? I remember asking this before, but I don't remember the answer</p>",
        "id": 168054790,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560439086
    },
    {
        "content": "<p>If we want to make UB detection only 2x-10x slower, we are probably having to be able to build \"self-instrumented\" binaries directly, e.g., have MIR passes that inserts <code>assert!</code>s for UB violations into the MIR, and then lower the \"self-instrumented\" MIR to LLVM-IR and optimize it properly.</p>\n<p>This could allow people to build \"fortified\" binaries that <code>panic!</code> before invoking undefined behavior with minimal performance impact. I don't think we can make the \"evaluator\" approach that miri uses fast, unless we essentially transform it into a tool that does the above.</p>",
        "id": 168055753,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560439737
    },
    {
        "content": "<blockquote>\n<p>Any particular reason for the valgrind preference over sanitizers? I remember asking this before, but I don't remember the answer</p>\n</blockquote>\n<p>valgrind is something I have used before, sanitizers not. valgrind could also work when linking with unmodified C code.</p>",
        "id": 168056682,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440309
    },
    {
        "content": "<p>and anyway the Rust code would need some instrumentation so its more of a valgrind-sanitizer hybrid</p>",
        "id": 168056714,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440339
    },
    {
        "content": "<blockquote>\n<p>valgrind could also work when linking with unmodified C code.</p>\n</blockquote>\n<p>It would, but you probably don't want to apply Rust validation to it.</p>",
        "id": 168056741,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> aren't you describing a sanitizer?</p>",
        "id": 168056753,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440361
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>valgrind could also work when linking with unmodified C code.</p>\n</blockquote>\n<p>It would, but you probably don't want to apply Rust validation to it.</p>\n</blockquote>\n<p>I think you do! When doing FFI from Rust, memory accesses by C are important to consider for Stacked Borrows.</p>",
        "id": 168056791,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440384
    },
    {
        "content": "<p>they would all be \"raw ptr accesses\", so if the Rust code passes in raw ptrs like it should, the C code would have no restrictions</p>",
        "id": 168056870,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440412
    },
    {
        "content": "<p>I don't know, internally, the C code might do a lot of things that don't satisfy our model, but are ok in C, and that's ok as long as those don't leak to Rust.</p>",
        "id": 168056881,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440425
    },
    {
        "content": "<p>oh sure, the valgrind mode wouldnt do anything for locations not allocated by or passed to Rust</p>",
        "id": 168056910,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440449
    },
    {
        "content": "<p>I think i would prefer an hybrid only instrumenting Rust code, and then using annotations on FFI to express assumptions about what the FFI code does</p>",
        "id": 168056919,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440458
    },
    {
        "content": "<p>but inherently when doing FFI, Rust and C run on the same abstract machine.</p>",
        "id": 168056949,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440478
    },
    {
        "content": "<p>we dont have a spec for that abstract machine and probably never will^^</p>",
        "id": 168056971,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440497
    },
    {
        "content": "<p>MemorySanitizer goes a different way, instrumenting the code you compile, and then letting you use run-time instrumentation on dynamically linked code (e.g. selectively using tools similar to valgrind only for non-instrumented code, and interfacing their results with the instrumented code)</p>",
        "id": 168057052,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440529
    },
    {
        "content": "<p>but I foresee no problems with just doing stacked borrows in C, where everything is a raw ptr, no retagging ever happens -- then (UB-free) C code trivially satisfies Stacked Borrows</p>",
        "id": 168057053,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440530
    },
    {
        "content": "<p>okay I admit I have no idea how sanitizers are implemented^^</p>",
        "id": 168057113,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440578
    },
    {
        "content": "<p>but isnt the idea basically \"compile to a self-checking binary\"? the details of how much there are static assertions vs extra runtime in that binary dont really matter IMO, probably you need a hybrid anyway</p>",
        "id": 168057185,
        "sender_full_name": "RalfJ",
        "timestamp": 1560440615
    },
    {
        "content": "<p><a href=\"http://releases.llvm.org/3.3/tools/clang/docs/MemorySanitizer.html#id7\" target=\"_blank\" title=\"http://releases.llvm.org/3.3/tools/clang/docs/MemorySanitizer.html#id7\">http://releases.llvm.org/3.3/tools/clang/docs/MemorySanitizer.html#id7</a> - DynamoRio is what they use</p>",
        "id": 168057186,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yes the idea of compiling to a self-checked binary is the same</p>",
        "id": 168057331,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440698
    },
    {
        "content": "<p>at some point you need to interface with dynamically linked C libraries, and whether those are instrumented or not, and whether the Rust instrumentation can handle either case, will depend on what we do</p>",
        "id": 168057410,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440752
    },
    {
        "content": "<p>I think that if we can get by without having to instrument external libraries, that would be a big pro</p>",
        "id": 168057554,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440840
    },
    {
        "content": "<p>E.g. annotating FFI functions with their semantics \"somehow\", but I don't know if this can work</p>",
        "id": 168057633,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440883
    },
    {
        "content": "<p>We are going to need such annotations for syscalls anyways (or an alternative approach, like somehow intercepting those)</p>",
        "id": 168057740,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560440978
    }
]