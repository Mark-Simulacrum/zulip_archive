[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I got MIRI's tests running on my branch for this and this case came up:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Stack is frozen</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// A - No longer creates a temporary `&amp;mut i32`</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since the stack is frozen, <code>A</code> doesn't modify the stack, as such the last write isn't valid. Have you considered this already?</p>",
        "id": 160516765,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1552337369
    },
    {
        "content": "<p>reborrows like <code>&amp;mut *x</code> are accesses currently, even without the retagging</p>",
        "id": 160604928,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421021
    },
    {
        "content": "<p>so I guess we want something similar for reborrows-to-raw</p>",
        "id": 160604940,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421034
    },
    {
        "content": "<p>but, hm making them a write access is not nice... the entire point is that they can be dangling after all</p>",
        "id": 160605182,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421188
    },
    {
        "content": "<p>they certainly must unfreeze though, as your example shows</p>",
        "id": 160605198,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421204
    },
    {
        "content": "<p>maybe it should depend on the src ptr? like, when you come from a raw ptr to nothing, but when you come from a <code>Uniq</code> then pretend a write happened?</p>",
        "id": 160605314,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421288
    },
    {
        "content": "<p>so here's something interesting: I always said that <code>*mut</code> and <code>*const</code> are entirely identical. but then creating a <code>*const</code> would also hev to unfreeze. but the following is safe today:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Stack is frozen</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Stack gets unfrozen?</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">shr</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// but then this is UB</span>\n</pre></div>",
        "id": 160605512,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421453
    },
    {
        "content": "<p>so seems loke the two raw ptr types are not identical after all? and creating a <code>*const</code> from an <code>&amp;mut</code> is more like turning it into a shared reference first? but that would make this UB:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Stack is frozen</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Stack remains frozen?</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 160605640,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421558
    },
    {
        "content": "<p>so it would matter if you turn an <code>&amp;mut</code> into a mutable or constant raw ptr</p>",
        "id": 160605775,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421656
    },
    {
        "content": "<p>I mean, it matters for the borrow checker, so maybe this makes sense. but I told people the oppose for so long^^<br>\n<span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> you mentioned mutating through const raw ptrs is common in your codebase, how does that code usually look like?</p>",
        "id": 160605828,
        "sender_full_name": "RalfJ",
        "timestamp": 1552421704
    },
    {
        "content": "<blockquote>\n<p>mutating through const raw ptrs is common in your codebase</p>\n</blockquote>\n<p>sorry, I'm not sure what you're referring to</p>",
        "id": 160608699,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552423489
    },
    {
        "content": "<p>I know there are lots of places that aren't careful about whether or not they use <code>*const</code> or <code>*mut</code></p>",
        "id": 160608840,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552423584
    },
    {
        "content": "<p>but it's basically always in the context of FFI</p>",
        "id": 160608861,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552423597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> are there places where you do <code>x as *const Foo</code> and then later mutate through that pointer? So it's less about the type on the FFI function but about the type at the cast -- but of course if this is a coercion, the cats type is informed by the function type.</p>",
        "id": 160644680,
        "sender_full_name": "RalfJ",
        "timestamp": 1552465814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'd imagine there are, yes</p>",
        "id": 160798008,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552581029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't think it'd be unreasonable to ask for those to be changed, but historically I'd always thought that *const and *mut were \"just a lint\"</p>",
        "id": 160798049,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1552581066
    },
    {
        "content": "<blockquote>\n<p>historically I'd always thought that *const and *mut were \"just a lint\"</p>\n</blockquote>\n<p>same here</p>",
        "id": 160798451,
        "sender_full_name": "RalfJ",
        "timestamp": 1552581369
    },
    {
        "content": "<p>but also I dont see another way to handle <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>'s example</p>",
        "id": 160798458,
        "sender_full_name": "RalfJ",
        "timestamp": 1552581378
    },
    {
        "content": "<p>and also I did not know that the borrow checker treats them differently</p>",
        "id": 160798482,
        "sender_full_name": "RalfJ",
        "timestamp": 1552581400
    },
    {
        "content": "<p><code>x as *const T</code> is borrow-checked like <code>&amp;*x</code> and hence allows outstanding shared loans</p>",
        "id": 160798511,
        "sender_full_name": "RalfJ",
        "timestamp": 1552581425
    },
    {
        "content": "<p>Well, it can be modelled with some of the ideas for 2 phase borrows. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 160799440,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1552582065
    },
    {
        "content": "<p>uh... you want raw borrows to be two-phase?</p>",
        "id": 160799572,
        "sender_full_name": "RalfJ",
        "timestamp": 1552582131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I've tried the new version of stacked borrows on the AddressOf branch and ran into the following issue:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// The branch is still using the adjusted type, rather than syntax, but you get the idea</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The stack after each line is <code>[U]</code>, <code>[U, SRW]</code>, <code>[U, SRO, SRW]</code> -&gt; bug. It's not entirely clear to me what the correct thing to do here is. Currently <code>&amp;x as *const _</code> invalidates the mutable pointer, but that doesn't really seem desirable.</p>",
        "id": 163720576,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555660566
    },
    {
        "content": "<p>I think the fix is to never make <code>SRO</code> borrows \"weak\"</p>",
        "id": 163730192,
        "sender_full_name": "RalfJ",
        "timestamp": 1555674585
    },
    {
        "content": "<p>that just doesn't work very well</p>",
        "id": 163730195,
        "sender_full_name": "RalfJ",
        "timestamp": 1555674588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> <a href=\"https://github.com/rust-lang/miri/pull/718\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/718\">https://github.com/rust-lang/miri/pull/718</a> should help with this.</p>",
        "id": 164560671,
        "sender_full_name": "RalfJ",
        "timestamp": 1556647426
    },
    {
        "content": "<p>Also, the blog post about the new Stacked Borrows is finally done: <a href=\"https://internals.rust-lang.org/t/stacked-borrows-2/9951\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/stacked-borrows-2/9951\">https://internals.rust-lang.org/t/stacked-borrows-2/9951</a></p>",
        "id": 164566991,
        "sender_full_name": "RalfJ",
        "timestamp": 1556651661
    }
]