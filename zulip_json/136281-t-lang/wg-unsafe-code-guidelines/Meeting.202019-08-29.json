[
    {
        "content": "<p>I am not sure how much time I'll have today, so I figured I would start asynchronously... is there much to talk about?<br>\nI propose we merge <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/186\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/186\">https://github.com/rust-lang/unsafe-code-guidelines/pull/186</a> and <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\">https://github.com/rust-lang/unsafe-code-guidelines/pull/161</a> -- both have green light from <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  and me, so if <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> or someone else also r+'s we are good to go.<br>\nI think we should wait with <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/197\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/197\">https://github.com/rust-lang/unsafe-code-guidelines/pull/197</a>, based on the last comment I posted there.</p>",
        "id": 174428336,
        "sender_full_name": "RalfJ",
        "timestamp": 1567061151
    },
    {
        "content": "<p>+1</p>",
        "id": 174430754,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567064274
    },
    {
        "content": "<p>I'll rebase <a href=\"https://github.com/rust-lang/rust/issues/153\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/153\">#153</a> and will start updating things there</p>",
        "id": 174430838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567064349
    },
    {
        "content": "<p>Hey all</p>",
        "id": 174463134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567091616
    },
    {
        "content": "<p>I've seen some mentions from here</p>",
        "id": 174463142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567091623
    },
    {
        "content": "<p>I'm sorry for being so unresponsive</p>",
        "id": 174463156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567091631
    },
    {
        "content": "<p>I've marked this stream as read at some point without really catching up -- was too far behind -- but I'm happy to be repinged on things I'm holding up. I've also been thinking that we're due for another conversation about how to \"integrate\" UCG and T-lang efforts more tightly. This seems obviously quite relevant in the async I/O effort</p>",
        "id": 174463278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1567091696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  check the UCG repository diff if you want to catch up. then you can skip all the long discussions we had and just see the conclusions. ;)</p>",
        "id": 174471634,
        "sender_full_name": "RalfJ",
        "timestamp": 1567097723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> while not much progress has happened for validity, we have made a bit of progress for layout, defining things like padding, added most basic layout guarantees, and identifying work that remains to be done (properly specifying layout for repr(C) unions, and defining layout for uninhabited types).</p>",
        "id": 174477952,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102151
    },
    {
        "content": "<p>the validity of fn ptrs is pretty much there, and I'd guess when can already word validity for product types</p>",
        "id": 174478014,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102192
    },
    {
        "content": "<p>the validity of references seems to have reached a stable point, but <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> might be able to expand on that</p>",
        "id": 174478152,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102237
    },
    {
        "content": "<p>stable maybe, not sure if we're done with all the trade-offs</p>",
        "id": 174478242,
        "sender_full_name": "RalfJ",
        "timestamp": 1567102285
    },
    {
        "content": "<p>I feel validity of ints is more stable. or is there still anyone opposed to allowing uninit ints (and declaring any arithmetical, logical or other operation on them UB)?</p>",
        "id": 174478295,
        "sender_full_name": "RalfJ",
        "timestamp": 1567102312
    },
    {
        "content": "<p>i think i've made my peace with that</p>",
        "id": 174478481,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102439
    },
    {
        "content": "<p>(I think i commented there that a PR for adding the validity of int as uninit is ok would be fine for me?)</p>",
        "id": 174478563,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102481
    },
    {
        "content": "<p>maybe we could at least add a PR with a summary of the rationale ?</p>",
        "id": 174478639,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102542
    },
    {
        "content": "<p>\"writeup-needed\" or so?</p>",
        "id": 174478658,
        "sender_full_name": "RalfJ",
        "timestamp": 1567102561
    },
    {
        "content": "<p>it's a binary option, so either way the rationale needs to contains pros/cons of both, and explain why we pick one</p>",
        "id": 174478678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102564
    },
    {
        "content": "<p>yeah</p>",
        "id": 174478742,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567102600
    },
    {
        "content": "<p>well I'm gone for most of the next 5 weeks, I am not comitting to anything right now I am afraid</p>",
        "id": 174478952,
        "sender_full_name": "RalfJ",
        "timestamp": 1567102738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> i'm going to post that the first step is summarzing the pros / cons - that feels worth doing before actually writing the value representation of these types down.</p>",
        "id": 174479639,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567103214
    },
    {
        "content": "<p>we also need to find some way to future proof for whatever LLVM ends up doing wrt. provenance</p>",
        "id": 174479731,
        "sender_full_name": "RalfJ",
        "timestamp": 1567103283
    },
    {
        "content": "<p>you mean if integers carry pointer provenance ?</p>",
        "id": 174479920,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567103413
    },
    {
        "content": "<p>does that affect the validity of integers themselves ?</p>",
        "id": 174479987,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567103463
    },
    {
        "content": "<p>of course, if the integer is part of a pointer that's part of the integer value</p>",
        "id": 174480023,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567103494
    },
    {
        "content": "<p>I think I'm fine with a summary first, and then writing the value representation of integers without provenance</p>",
        "id": 174480094,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567103528
    },
    {
        "content": "<p>we can always launder these integers in LLVM</p>",
        "id": 174480119,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567103552
    },
    {
        "content": "<p>(by doing something like <code>black_box</code>)</p>",
        "id": 174480126,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567103560
    },
    {
        "content": "<blockquote>\n<p>does that affect the validity of integers themselves ?</p>\n</blockquote>\n<p>see what I wrote in the fn ptr RFC PR</p>",
        "id": 174480324,
        "sender_full_name": "RalfJ",
        "timestamp": 1567103720
    },
    {
        "content": "<p>basically it might end up happening that transmuting a pointer to an int gives poison in LLVM. so we could make that UB or \"uninitialized integer\", but either way it gets reflected in the representation relation.</p>",
        "id": 174480478,
        "sender_full_name": "RalfJ",
        "timestamp": 1567103827
    },
    {
        "content": "<p>hadnt seen that yet</p>",
        "id": 174503272,
        "sender_full_name": "gnzlbg",
        "timestamp": 1567122894
    }
]