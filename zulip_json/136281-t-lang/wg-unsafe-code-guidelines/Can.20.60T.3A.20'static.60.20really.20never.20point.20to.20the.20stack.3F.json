[
    {
        "content": "<p>See <a href=\"https://github.com/japaric/microamp/issues/6\" target=\"_blank\" title=\"https://github.com/japaric/microamp/issues/6\">https://github.com/japaric/microamp/issues/6</a>: we have some unsafe code that relies on <code>T: 'static</code> types never having stack pointers. I think this is far from obvious. Is it something we want to guarantee?</p>",
        "id": 165829309,
        "sender_full_name": "RalfJ",
        "timestamp": 1558027156
    },
    {
        "content": "<p>We have that same problem in CUDA</p>",
        "id": 165830074,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558027716
    },
    {
        "content": "<p>And the safest bet was not to use references</p>",
        "id": 165830104,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558027732
    },
    {
        "content": "<p>Reference implies dereferenceable, but if you can access a static from, e.g., a different core, where addresses map to different memory, that reference is not dereferenceable</p>",
        "id": 165830158,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558027776
    },
    {
        "content": "<p>AFAICT one does not need to access the reference to trigger the UB, the mere possibility of being able to access it is UB</p>",
        "id": 165830310,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558027841
    },
    {
        "content": "<p>in other words, if you have a target that has \"segmented\" memory (e.g.  where some cores can only access some memory), putting addresses to the segment into static references that can be read by code that does not have access to the segment is UB - you have to use raw pointers instead</p>",
        "id": 165830400,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558027898
    },
    {
        "content": "<p>This is like being able to write code like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">GLOBAL</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rust</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// some thread:</span>\n<span class=\"w\">    </span><span class=\"n\">thread_local</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">LOCAL</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">LOCAL</span><span class=\"p\">.</span><span class=\"n\">with</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">GLOBAL</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// some other thread can access GLOBAL</span>\n<span class=\"w\">    </span><span class=\"c1\">// but GLOBAL is not dereferenceable from that thread</span>\n</pre></div>\n\n\n<p>Is this UB, even if no other thread actually access GLOBAL, just from being able to access it?</p>",
        "id": 165831063,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558028316
    },
    {
        "content": "<p>so basically, do we have <code>derefencable</code> on globals? good question. I don't know.</p>",
        "id": 165834800,
        "sender_full_name": "RalfJ",
        "timestamp": 1558030628
    },
    {
        "content": "<p>but the problem here is a different one</p>",
        "id": 165834863,
        "sender_full_name": "RalfJ",
        "timestamp": 1558030678
    },
    {
        "content": "<p>There was also talk in the past about considering the locals of <code>main</code> to be loanable for <code>'static</code> if panics abort (if it unwinds, I'm pretty sure it's unsound, but I forget the actual argument)</p>",
        "id": 165835118,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558030821
    },
    {
        "content": "<p>Ah no, it was functions that loop infinitely, i.e., those that diverge not because of panics but because of control flow. (<a href=\"https://internals.rust-lang.org/t/set-static-lifetime-for-local-variables-of-diverging-functions/9649\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/set-static-lifetime-for-local-variables-of-diverging-functions/9649\">https://internals.rust-lang.org/t/set-static-lifetime-for-local-variables-of-diverging-functions/9649</a>) so basically the example Ralf gave in the issue linked at the start.</p>",
        "id": 165835294,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558030953
    },
    {
        "content": "<p>(and indeed my example as given is unsound with panic=unwind, but that can be fixed by moving the loop to a drop guard)</p>",
        "id": 165835717,
        "sender_full_name": "RalfJ",
        "timestamp": 1558031255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> well here you don't have globals, just whether the assumption that <code>T: 'static</code> implies no references to the stack or nor</p>",
        "id": 165838510,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033033
    },
    {
        "content": "<p>AFAICT it doesn't, but I don't see how that matters, because the case being considered here (segmented memory) is one that we don't support in the \"references\" part of the type system at all AFAICT</p>",
        "id": 165838629,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033098
    },
    {
        "content": "<p>you can create a reference to a thread stack (or its heap), and as long as that reference lives long enough, pass it to another thread</p>",
        "id": 165838769,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033195
    },
    {
        "content": "<p>if that other thread cannot dereference that address because of \"reasons\" (e.g. the address space associated with it is a different one), well, that's UB</p>",
        "id": 165838865,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033223
    },
    {
        "content": "<p>the unsafe code that creates that thread, and allows you to pass it non-dereferenceable references is at fault</p>",
        "id": 165839074,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033338
    },
    {
        "content": "<p>well it doesnt imply no references (because it can be refs to statics). but it might imply no references <em>to the stack</em>.</p>",
        "id": 165839206,
        "sender_full_name": "RalfJ",
        "timestamp": 1558033437
    },
    {
        "content": "<p>Can't you heap allocate something, create a &amp;'static to it, and leak it ? (isn't that safe?)</p>",
        "id": 165839324,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033492
    },
    {
        "content": "<p>and then its heap allocated and not stack allocated...?</p>",
        "id": 165839373,
        "sender_full_name": "RalfJ",
        "timestamp": 1558033515
    },
    {
        "content": "<p>yeah, and then instead of a thread that cannot access some other thread stack because of \"reasons\", you have threads that cannot access some other thread heap because of \"reasons\"</p>",
        "id": 165839414,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033554
    },
    {
        "content": "<p>we could call these thread \"processes\", and that would be alright</p>",
        "id": 165839531,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033631
    },
    {
        "content": "<p>but it could also be the CPU heap, and a thread of execution on the GPU, which can only access the GPUs heap</p>",
        "id": 165839568,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558033662
    },
    {
        "content": "<p>have you read the issue I linked above? this is specifically about the stack.</p>",
        "id": 166163722,
        "sender_full_name": "RalfJ",
        "timestamp": 1558438525
    },
    {
        "content": "<p>the stack of different threads of execution</p>",
        "id": 166277173,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558537873
    },
    {
        "content": "<p>where each thread can only access its own stack</p>",
        "id": 166277406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558538012
    },
    {
        "content": "<p>i don't see how this is any different for an application where each thread has its own thread-local heap, and you can't access anything on that heap from a different thread</p>",
        "id": 166277523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558538074
    },
    {
        "content": "<p>is there anything that makes the stack here special as opposed to a thread-local variable ?</p>",
        "id": 166277807,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558538254
    },
    {
        "content": "<p>yes -- that in safe Rust + libstd it is not possible to get a <code>'static</code> reference to the stack, while <code>Box::leak</code> <em>does</em> provide a safe way to get a <code>'static</code> to the heap</p>",
        "id": 166304299,
        "sender_full_name": "RalfJ",
        "timestamp": 1558555433
    },
    {
        "content": "<p>so for the stack it <em>seems</em> like <code>T: 'static</code> successfully excludes such references</p>",
        "id": 166304362,
        "sender_full_name": "RalfJ",
        "timestamp": 1558555454
    },
    {
        "content": "<p>but I think that is an \"accident\" and we should not endorse such a pattern. at the same time there is clearly a need and I dont know if we have an answer.</p>",
        "id": 166304396,
        "sender_full_name": "RalfJ",
        "timestamp": 1558555479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> FYI by thread-local heap i actually mean literally that. As in, you spawn a couple of threads, and give each a <code>thread_local! { HEAP }</code> (what <code>HEAP</code> actually is does not matter much, it could be just a Box that gets destroyed when the thread joins). The API of thread-local will ensure that you can't let references into your thread-local heap escape.</p>",
        "id": 166373481,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558626531
    },
    {
        "content": "<p>I think there is not much difference between using <code>thread_local!</code> in that way, and what Jorge is doing</p>",
        "id": 166373517,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558626570
    },
    {
        "content": "<p>the issue is that the assumption that <code>T: 'static</code> prevents references to the stack is incorrect.</p>",
        "id": 166373547,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558626597
    },
    {
        "content": "<p>while the API of <code>thread_local!</code> prevents letting references escape using other means</p>",
        "id": 166373660,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558626654
    },
    {
        "content": "<p>ah, <code>T: 'static</code> also \"prevents\" (or rather, does not) references to thread-local data</p>",
        "id": 166374326,
        "sender_full_name": "RalfJ",
        "timestamp": 1558627064
    },
    {
        "content": "<p>I mean, if two threads run on different cores, and they can't dereference pointers to each other stack frames, then their stack frames are essentially \"thread-local\"</p>",
        "id": 166376845,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558628817
    }
]