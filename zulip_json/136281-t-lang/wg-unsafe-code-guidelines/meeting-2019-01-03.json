[
    {
        "content": "<p>Do we plan to meet today, <span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span> ?</p>",
        "id": 154244537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546527980
    },
    {
        "content": "<p>we have a calendar invite :)</p>",
        "id": 154244542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546527988
    },
    {
        "content": "<p>i'll be here</p>",
        "id": 154244578,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546528045
    },
    {
        "content": "<p>I'm around.</p>",
        "id": 154244659,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1546528111
    },
    {
        "content": "<p>me too</p>",
        "id": 154246627,
        "sender_full_name": "RalfJ",
        "timestamp": 1546529986
    },
    {
        "content": "<p>so, what do we have to talk about?</p>",
        "id": 154249311,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532481
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span></p>",
        "id": 154249314,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532484
    },
    {
        "content": "<p>we should merge the enum repr PR, or figure out if anything is blocking the merge</p>",
        "id": 154249382,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532525
    },
    {
        "content": "<p>I guess the PRs are a good place to start, yeah</p>",
        "id": 154249389,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I am confused by what you said in your last comment there, why do you say the enum opt is not guaranteed to happen?</p>",
        "id": 154249404,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532554
    },
    {
        "content": "<p>just because it is not normative?</p>",
        "id": 154249406,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532557
    },
    {
        "content": "<p>the text otherwise seems pretty clear about it happening</p>",
        "id": 154249416,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532572
    },
    {
        "content": "<p>yes, that's pretty much it</p>",
        "id": 154249430,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532589
    },
    {
        "content": "<p>and the \"not normative\" just means \"no RFC has happened yet\", which is true and not something this document can change</p>",
        "id": 154249435,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532596
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span> sorry was late</p>",
        "id": 154249449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532629
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is asking the question I was in the midst of asking :)</p>",
        "id": 154249505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532653
    },
    {
        "content": "<p>we have identified that an RFC in this direction might be useful, we don't have to make that RFC part of the UCG, but it is probably worth it to raise that issue somewhere</p>",
        "id": 154249509,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532658
    },
    {
        "content": "<p>(one related question : should we maybe keep a place to list out things we think ought to be RFC'd?)</p>",
        "id": 154249512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532669
    },
    {
        "content": "<p>my general plan <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> is for these documents to become RFCs once we've gotten enough of a \"coherent whole\"</p>",
        "id": 154249526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532693
    },
    {
        "content": "<p>we could have issues for that, and a tag to collect them? like, one issue per to-be-RFC?</p>",
        "id": 154249530,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532700
    },
    {
        "content": "<p>but maybe it's worth trying to catalog the bits so we can decide how to carve those up</p>",
        "id": 154249534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532701
    },
    {
        "content": "<p>we could use issues</p>",
        "id": 154249540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532705
    },
    {
        "content": "<p>seems like a fine place to start</p>",
        "id": 154249550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532710
    },
    {
        "content": "<p>although I think maybe it belongs rather in the text</p>",
        "id": 154249557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532721
    },
    {
        "content": "<p>i think issues are fine, my point was only that we should write those down somewhere</p>",
        "id": 154249575,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532741
    },
    {
        "content": "<p>(i.e., all the things we plan to \"RFC\" ought to be written in the text in some place in a \"non-normative\" fashion, so maybe we should maintain the list using PRs)</p>",
        "id": 154249581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532744
    },
    {
        "content": "<p>another point is that most of the stuff in \"reference\" needs an RFC</p>",
        "id": 154249590,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532753
    },
    {
        "content": "<p>I mean there's no RFC saying union fields have offset 0</p>",
        "id": 154249596,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532761
    },
    {
        "content": "<p>and while there's no other choice, it might still be worth RFC-ing</p>",
        "id": 154249645,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532772
    },
    {
        "content": "<p>yes, so some part of me feels like we should just do a sweep afterwards</p>",
        "id": 154249646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532773
    },
    {
        "content": "<p>since it's kind of \"everything\"</p>",
        "id": 154249651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532782
    },
    {
        "content": "<p>I think a lot of these issues are going to be part of the first UCG RFC</p>",
        "id": 154249653,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532783
    },
    {
        "content": "<p>so are we going to have an UCG WG RFC PR? need moar acronyms :P</p>",
        "id": 154249668,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532807
    },
    {
        "content": "<p>but maybe it might be worth it to put some of these on independent RFCs, some of which could be happening already (e.g. Option-like layout optimizations)</p>",
        "id": 154249676,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532820
    },
    {
        "content": "<p>IIRC eddyb was interested in guaranteeing some of the enum optimizations that enough code is already relying on</p>",
        "id": 154249699,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532860
    },
    {
        "content": "<p>yeah</p>",
        "id": 154249710,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532876
    },
    {
        "content": "<p>okay so let's merge this one then?</p>",
        "id": 154249758,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532888
    },
    {
        "content": "<p>it seems better to carve out independent questions where we can</p>",
        "id": 154249764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532897
    },
    {
        "content": "<p>and lets open an issue or add a document with a list of things that should be RFC'ed somewhere ?</p>",
        "id": 154249770,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546532916
    },
    {
        "content": "<p>I am <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> on merging for now, and I think we should make a list of potential RFCs -- I am happy to make it an issue for now, I guess, though I think maybe it would be a nice part of the document</p>",
        "id": 154249782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532939
    },
    {
        "content": "<p>anything that gives us a good list that we all can add items to</p>",
        "id": 154249795,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532959
    },
    {
        "content": "<p>I feel like there could be a section basically listing out the justifications for each part</p>",
        "id": 154249796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532961
    },
    {
        "content": "<p>justifications?</p>",
        "id": 154249808,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532980
    },
    {
        "content": "<p>(that is, RFC that justify declaring this to be true)</p>",
        "id": 154249815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532992
    },
    {
        "content": "<p>I'll open issues for now I guess, seems fine</p>",
        "id": 154249819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532997
    },
    {
        "content": "<p>ah, yes</p>",
        "id": 154249862,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533004
    },
    {
        "content": "<p>so other open PRs ready to merge ?</p>",
        "id": 154249896,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533031
    },
    {
        "content": "<p>the function ptr PR is waiting on <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span></p>",
        "id": 154249897,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533033
    },
    {
        "content": "<p>what about <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58</a> ?</p>",
        "id": 154249908,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533052
    },
    {
        "content": "<blockquote>\n<p>the function ptr PR is waiting on <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span></p>\n</blockquote>\n<p>this is <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/45\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/45\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/45</a>, for reference</p>",
        "id": 154249915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533068
    },
    {
        "content": "<p>I think the only thing are a few nits? I can take a stab at making this perhaps</p>",
        "id": 154249917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533079
    },
    {
        "content": "<p>I'd like to move it to fcp</p>",
        "id": 154249924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533088
    },
    {
        "content": "<blockquote>\n<p>what about <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58</a> ?</p>\n</blockquote>\n<p>I think this is good, let's merge</p>",
        "id": 154249960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533123
    },
    {
        "content": "<p>(I feel like we reached agreement on that the last time, right?)</p>",
        "id": 154249979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533134
    },
    {
        "content": "<p>sounds good, <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> wanted to fix the nits, but I'd guess holidays happened</p>",
        "id": 154249981,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533137
    },
    {
        "content": "<p>yeah lol</p>",
        "id": 154249988,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546533154
    },
    {
        "content": "<p>sorry</p>",
        "id": 154249989,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546533157
    },
    {
        "content": "<p>I'm also game to wait :) just want to keep things moving, seems like a rote task.</p>",
        "id": 154250003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533179
    },
    {
        "content": "<p>okay <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> can coordinate about finishing that one :)</p>",
        "id": 154250015,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533190
    },
    {
        "content": "<p>what about <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/59\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/59\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/59</a> ?</p>",
        "id": 154250017,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/58</a> - i wish we would just use layout in the document, but we probably need to use representation at least when explaining what <code>repr</code> stands for</p>",
        "id": 154250023,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> the thing is we use representation everywhere, so I documented the de-facto state</p>",
        "id": 154250087,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533250
    },
    {
        "content": "<p>I am open to just using layout everywhere, but then we'll have to rename some files</p>",
        "id": 154250099,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533261
    },
    {
        "content": "<p>do you want to open an issue?</p>",
        "id": 154250101,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533266
    },
    {
        "content": "<p>I can do that</p>",
        "id": 154250106,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533273
    },
    {
        "content": "<p>About <a href=\"https://github.com/rust-lang/rust/issues/59\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59\">#59</a> i think it might make sense to make those changes together with the StackedBorrow changes, but I haven't read the StackedBorrow PR yet</p>",
        "id": 154250119,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533301
    },
    {
        "content": "<blockquote>\n<p>what about <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/59\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/59\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/59</a> ?</p>\n</blockquote>\n<p>I feel fine with the text, apart from the nit that this all sounds like the definition of \"interior <em>mutation</em>\" to me (versus \"interior <em>mutability</em>\")</p>",
        "id": 154250120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533301
    },
    {
        "content": "<p>to me, interior \"mutability\" is all about <code>UnsafeCell</code> -- that is, the declared <em>potential</em> for such mutation</p>",
        "id": 154250141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533334
    },
    {
        "content": "<p>But <a href=\"https://github.com/rust-lang/rust/issues/59\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59\">#59</a> is how miri already works in nightly, so I'm fine with doing that change now, maybe we can move it to FCP ?</p>",
        "id": 154250150,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533346
    },
    {
        "content": "<p>(but I can leave those comments in the PR)</p>",
        "id": 154250156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533359
    },
    {
        "content": "<p>I somehow have the feeling that the PRs that happened right before christmas haven't received much attention, so I'd prefer to hold down on them a little</p>",
        "id": 154250199,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533375
    },
    {
        "content": "<blockquote>\n<p>to me, interior \"mutability\" is all about <code>UnsafeCell</code> -- that is, the declared <em>potential</em> for such mutation</p>\n</blockquote>\n<p>I can reword things a bit following that</p>",
        "id": 154250201,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533380
    },
    {
        "content": "<p>we can leave it open another week, I don't care <em>shrug</em></p>",
        "id": 154250225,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533426
    },
    {
        "content": "<blockquote>\n<p>I am open to just using layout everywhere, but then we'll have to rename some files</p>\n</blockquote>\n<p>I wonder if we should use <em>representation</em> everywhere instead? Or maybe it's useful to use <em>representation</em> to refer only to the <code>#[repr]</code> attributes themselves (ie., the user specifies the \"representation\" (C, Rust, etc) which then affects the resulting <em>layout</em>)</p>",
        "id": 154250232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533437
    },
    {
        "content": "<p>not sure if I would make too much of that distinction, since the two words seem like synonyms, but it seems like a convention we could try to adhere to</p>",
        "id": 154250258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533475
    },
    {
        "content": "<p>otoh I sort of prefer something like \"<code>#[repr]</code> attribute\", since it is so concrete</p>",
        "id": 154250302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533497
    },
    {
        "content": "<p>so never mind :)</p>",
        "id": 154250307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533507
    },
    {
        "content": "<p>I don't really understand the distinction, given that it seems entirley reasonable to imagine a <code>#[repr(_)]</code> that manually specifies all layout details</p>",
        "id": 154250308,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533509
    },
    {
        "content": "<p>I'm not sure why that would matter. The distinction was basically \"what did the user write\" versus \"what is the effect of that\" -- but I prefer to say <code>#[repr]</code> for the former.</p>",
        "id": 154250347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533559
    },
    {
        "content": "<p>yeah seems wasteful and confusing to have totally different terms for syntax and semantics</p>",
        "id": 154250355,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533581
    },
    {
        "content": "<p>e.g., you could imagine writing</p>\n<blockquote>\n<p>When an enum has C representation...</p>\n</blockquote>\n<p>vs</p>\n<blockquote>\n<p>When an enum is declared <code>#[repr(C)]</code>...</p>\n</blockquote>",
        "id": 154250360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533588
    },
    {
        "content": "<p>though it is somewhat unfortunate that the attribute is not <code>#[layout]</code></p>",
        "id": 154250366,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533594
    },
    {
        "content": "<p>but the latter feels far more clear</p>",
        "id": 154250368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533601
    },
    {
        "content": "<blockquote>\n<p>though it is somewhat unfortunate that the attribute is not <code>#[layout]</code></p>\n</blockquote>\n<p>yes, so, one could imagine centralizing on the <em>representation</em> instead</p>",
        "id": 154250437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533632
    },
    {
        "content": "<p>the compiler's \"layout\" notwithstanding</p>",
        "id": 154250442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533637
    },
    {
        "content": "<p>well then we have a mismatch with the compiler</p>",
        "id": 154250452,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533647
    },
    {
        "content": "<p>the compiler data structures can be renamed</p>",
        "id": 154250455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533656
    },
    {
        "content": "<p>and also what I wrote about \"representation\" in the PR</p>",
        "id": 154250456,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533657
    },
    {
        "content": "<blockquote>\n<p>And @ubsan has some other ideas for what \"representation\" can mean: When relating mathematical values to objects in memory, a \"representation\" defines how mathematical objects map to bitstrings.</p>\n</blockquote>",
        "id": 154250468,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533672
    },
    {
        "content": "<p>(but I'm fine with just saying we use the terms interchangeably as well)</p>",
        "id": 154250470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533673
    },
    {
        "content": "<p>this is a common term when doing reasoning about programs</p>",
        "id": 154250481,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533697
    },
    {
        "content": "<p>ah, yes, I remembered that there was a contested term, but I forgot which it was</p>",
        "id": 154250482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533698
    },
    {
        "content": "<p>yes, true.</p>",
        "id": 154250485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533704
    },
    {
        "content": "<p>if we centralize on _representation_ then we need a different word for relating mathematical objects to bitstrings</p>",
        "id": 154250487,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533708
    },
    {
        "content": "<p>layout seems fine. who cares what the attribute says.</p>",
        "id": 154250489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533710
    },
    {
        "content": "<p>^^</p>",
        "id": 154250495,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533715
    },
    {
        "content": "<p>for my other two PRs (the optimization and Stacked Borrows) I guess the only question at this point is whether this repo is the right place for this text</p>",
        "id": 154250543,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533740
    },
    {
        "content": "<p>but I guess that means that the use of \"representation\" as a synonym is basically \"deprecated\"</p>",
        "id": 154250548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533746
    },
    {
        "content": "<blockquote>\n<p>for my other two PRs (the optimization and Stacked Borrows) I guess the only question at this point is whether this repo is the right place for this text</p>\n</blockquote>\n<p>in the case of stacked borrows, at least, I think it is</p>",
        "id": 154250565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533768
    },
    {
        "content": "<p>suitably caveated</p>",
        "id": 154250569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533772
    },
    {
        "content": "<p>we can just change everything to use layout, except for <code>repr</code>, and maybe some day add <code>layout</code> as a synonym for <code>repr</code> and deprecate <code>repr</code> instead</p>",
        "id": 154250575,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533778
    },
    {
        "content": "<p>it's in a \"wip\" directory currently, because I am not very creative</p>",
        "id": 154250579,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533784
    },
    {
        "content": "<p>although we don't have to do it, we can just say that <code>repr</code> controls layout and that's it</p>",
        "id": 154250584,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546533795
    },
    {
        "content": "<p>re: stacked borrows, I feel like once we finish up with \"validity invariants\", it'll probably be a topic we start to discuss more broadly, hence the reason it belongs</p>",
        "id": 154250653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533867
    },
    {
        "content": "<p>I am fine with wip as a directory name:)</p>",
        "id": 154250657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546533873
    },
    {
        "content": "<p>speaking of which, when can we officially transition to \"validity invariants\"?^^</p>",
        "id": 154250681,
        "sender_full_name": "RalfJ",
        "timestamp": 1546533919
    },
    {
        "content": "<p>I was going to raise that</p>",
        "id": 154250779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534033
    },
    {
        "content": "<p>we should do it I think</p>",
        "id": 154250782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534039
    },
    {
        "content": "<p>hmm, is it reasonable to be able to write:</p>\n<div class=\"codehilite\"><pre><span></span>fn foo(x: fn(), y: DynamicLibrary) { // assume x ∈ y\n  x();\n  drop(y);\n}\n</pre></div>",
        "id": 154250786,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534055
    },
    {
        "content": "<p>strictly speaking, we already merged <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/54\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/54\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/54</a>...</p>",
        "id": 154250794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534075
    },
    {
        "content": "<p>...so what is needed to \"officially transition\"? Shift some labels and make an announcement, I guess?</p>",
        "id": 154250835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534086
    },
    {
        "content": "<p>Open the issues in question?</p>",
        "id": 154250842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534091
    },
    {
        "content": "<blockquote>\n<p>Open the issues in question?</p>\n</blockquote>\n<p>that at least</p>",
        "id": 154250847,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534106
    },
    {
        "content": "<p>otherwise, no idea^^</p>",
        "id": 154250848,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> where <code>drop</code> does <code>unmap</code> or so? ugh...</p>",
        "id": 154250876,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534148
    },
    {
        "content": "<blockquote>\n<p>hmm, is it reasonable to be able to write:</p>\n</blockquote>\n<p>given that <code>fn</code> pointers don't have lifetimes, I think we effectively ruled out the option of using them in this way, at least in safe code.</p>",
        "id": 154250878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534156
    },
    {
        "content": "<p>we did debate about giving them lifetimes to enable that pattern</p>",
        "id": 154250882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not saying it's safe</p>",
        "id": 154250888,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534177
    },
    {
        "content": "<p>but it was late in the 1.0 process and we kind of bailed on it</p>",
        "id": 154250889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534178
    },
    {
        "content": "<p>just valid</p>",
        "id": 154250891,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534181
    },
    {
        "content": "<p>well, then it seems like a stacked borrows question to me :)</p>",
        "id": 154250897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534185
    },
    {
        "content": "<p>well this is not about returning the <code>fn()</code> to outside code... what <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> said</p>",
        "id": 154250898,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534188
    },
    {
        "content": "<p>hm no there's no memory access</p>",
        "id": 154250905,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534195
    },
    {
        "content": "<p>it's a validity invariant question</p>",
        "id": 154250908,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534199
    },
    {
        "content": "<p>you are accessing memory</p>",
        "id": 154250911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534201
    },
    {
        "content": "<p>the PC is changing</p>",
        "id": 154250951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534204
    },
    {
        "content": "<p>and the processor is loading the instruction at that new address</p>",
        "id": 154250959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534210
    },
    {
        "content": "<p>do fn ptrs have to point to dereferencable code memory, or so?</p>",
        "id": 154250967,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534216
    },
    {
        "content": "<p>that is basically the question, right?</p>",
        "id": 154250972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534225
    },
    {
        "content": "<p>but <code>x</code> isn't used again after the <code>drop</code></p>",
        "id": 154250981,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> could you open the issues for the validity discussions and tag them appropriately ?</p>",
        "id": 154250984,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534236
    },
    {
        "content": "<p>like, it seems unreasonable to not allow this, given that I think it basically means hot loading becomes UB</p>",
        "id": 154250985,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> only hot unloading</p>",
        "id": 154250997,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534251
    },
    {
        "content": "<blockquote>\n<p>but <code>x</code> isn't used again after the <code>drop</code></p>\n</blockquote>\n<p>basically I'm saying it comes down to a question of whether there are barriers</p>",
        "id": 154251002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534256
    },
    {
        "content": "<p>for <code>&amp;T</code> we say \"must be derefencable\", do we have something similar for <code>fn()</code>?</p>",
        "id": 154251017,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534268
    },
    {
        "content": "<p>there's no <code>&amp;</code>, no lifetime, and also no size. so no barrier.</p>",
        "id": 154251026,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534283
    },
    {
        "content": "<p>at least I think fn pointers would likely have some similar modeling. I suspect it would we can craft the rules to make it ok or not as we choose.</p>",
        "id": 154251027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> sure</p>",
        "id": 154251031,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534294
    },
    {
        "content": "<p>(I also think it's ok for it to be valid in unsafe code)</p>",
        "id": 154251035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534305
    },
    {
        "content": "<p><code>fn()</code> doesnt point to X bytes of data</p>",
        "id": 154251036,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534308
    },
    {
        "content": "<p>Can the <code>x()</code> be re-ordered after the <code>drop(y)</code> ?</p>",
        "id": 154251041,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534319
    },
    {
        "content": "<p>at least not where X is statically known</p>",
        "id": 154251048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534321
    },
    {
        "content": "<p>also my cat is running around and just jumped over my computer, and locked it</p>",
        "id": 154251083,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534326
    },
    {
        "content": "<p>I just thought that was cute</p>",
        "id": 154251089,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534334
    },
    {
        "content": "<p>X is not dynamically determinable either</p>",
        "id": 154251090,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534338
    },
    {
        "content": "<p>well, the compiler knows</p>",
        "id": 154251103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534358
    },
    {
        "content": "<p>but anyway not imporant</p>",
        "id": 154251108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534363
    },
    {
        "content": "<p>I think we all agree it should be ok, right?</p>",
        "id": 154251112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534370
    },
    {
        "content": "<p>yeah</p>",
        "id": 154251117,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534379
    },
    {
        "content": "<p>I am not sure</p>",
        "id": 154251130,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534395
    },
    {
        "content": "<p>i.e., I think that we'll have to be sure that future models respect it, as <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> noted it seems like it'd be needed in implementing wrappers around dynamic linking</p>",
        "id": 154251132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534398
    },
    {
        "content": "<p>I don't see a reasonable optimization you can do, given that <code>&lt;DynamicLibrary as Drop&gt;::drop</code> is not a pure function</p>",
        "id": 154251134,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534404
    },
    {
        "content": "<p>or at least it'd be good to know if there are LLVM opts or other things that would interfere</p>",
        "id": 154251136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534407
    },
    {
        "content": "<p>I always though fn ptrs must at least point to some allocated memory</p>",
        "id": 154251138,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534409
    },
    {
        "content": "<p>but I also didnt think that would exclude anything reasonable</p>",
        "id": 154251145,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534416
    },
    {
        "content": "<p>seems like a validity invariant question, regardless</p>",
        "id": 154251162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534430
    },
    {
        "content": "<p>and I doubt we'll want to allow the compiler to insert spurious calls to fn ptrs :P</p>",
        "id": 154251163,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534432
    },
    {
        "content": "<p>so, coming back to that topic of when to shift :)</p>",
        "id": 154251171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534437
    },
    {
        "content": "<p>I propose we...just do it</p>",
        "id": 154251208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534445
    },
    {
        "content": "<p>so yeah, this just means that fn ptr validity is even weaker than I thought. it's basically just \"not NULL\". seems fine.</p>",
        "id": 154251214,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534459
    },
    {
        "content": "<p>alright, I'll write it down as a safety invariant but not a validity invariant</p>",
        "id": 154251217,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534463
    },
    {
        "content": "<p>safety invariant is clearly \"can be called safely (meaning without causing UB) with safe arguments and will return safe result\"</p>",
        "id": 154251231,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534486
    },
    {
        "content": "<p>but we wont be able to check that in Miri any time soon :P</p>",
        "id": 154251233,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534496
    },
    {
        "content": "<p>cools</p>",
        "id": 154251262,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534527
    },
    {
        "content": "<p>but we didn't specify any safety invariant anywhere I think? it's also quite hard to do so without a full-fledged program logic...</p>",
        "id": 154251275,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534548
    },
    {
        "content": "<p>I think it's worth stating informally</p>",
        "id": 154251319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534564
    },
    {
        "content": "<p>we should prob go back at some point</p>",
        "id": 154251324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534570
    },
    {
        "content": "<p>but I guess it makes sense to have approximations where we can, yeah</p>",
        "id": 154251326,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534572
    },
    {
        "content": "<p>but it'd be nice to sort of write things like \"if you are returning a value of type T to safe code, here is what you have to ensure\"</p>",
        "id": 154251328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534579
    },
    {
        "content": "<p>...\"and here are some common pitfalls\" :)</p>",
        "id": 154251334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534592
    },
    {
        "content": "<p>\"prove the following thing in Coq\" :P</p>",
        "id": 154251336,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534595
    },
    {
        "content": "<p>lol</p>",
        "id": 154251341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534604
    },
    {
        "content": "<p>anyway I got to go, ttyl!</p>",
        "id": 154251347,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534620
    },
    {
        "content": "<p>so I guess I will .. just switch the active area</p>",
        "id": 154251349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534620
    },
    {
        "content": "<p>I'll figure out what that means but I think it's mostly opening some issues?</p>",
        "id": 154251354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534627
    },
    {
        "content": "<p>yes please :) I can help opening issues over the weekend</p>",
        "id": 154251356,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534635
    },
    {
        "content": "<p>great</p>",
        "id": 154251358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534639
    },
    {
        "content": "<p>and probably tmr though I probabloy shouldnt...^^</p>",
        "id": 154251361,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534643
    },
    {
        "content": "<p>:)</p>",
        "id": 154251363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534647
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44b\" title=\"wave\">:wave:</span> thanks all</p>",
        "id": 154251365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534651
    },
    {
        "content": "<p>I gotta go too</p>",
        "id": 154251367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546534653
    },
    {
        "content": "<p>i won't be here next week</p>",
        "id": 154251379,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534679
    },
    {
        "content": "<p>alright, committed and pushed the changes</p>",
        "id": 154251381,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534679
    },
    {
        "content": "<p>issue about using layout consistently has been opened</p>",
        "id": 154251427,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534694
    },
    {
        "content": "<p>i can a PR to do those changes later</p>",
        "id": 154251434,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534709
    },
    {
        "content": "<p>so why can't function pointer validity require that they point to a valid function ?</p>",
        "id": 154251469,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534771
    },
    {
        "content": "<p>can someone do a TL;DR ?</p>",
        "id": 154251470,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> requiring function pointers to point to a valid function would, imo, break dynamic loading</p>",
        "id": 154251538,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534826
    },
    {
        "content": "<p>(assuming you want to be able to dynamically unload as well)</p>",
        "id": 154251546,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546534842
    },
    {
        "content": "<p>I'd expect <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> 's example to be UB, calling <code>drop</code>to unload functions is fine as long as there are no function pointers referring to those functions</p>",
        "id": 154251555,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534854
    },
    {
        "content": "<p>that's not the case there, so that would be UB</p>",
        "id": 154251567,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534866
    },
    {
        "content": "<p>but if you write a wrapper over a dynamic library, and control all your fn pointers somehow (e.g. reference count them), then it should be fine to drop the library if all pointers are dead</p>",
        "id": 154251590,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546534902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I don't think that's reasonable, tbh</p>",
        "id": 154251880,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546535223
    },
    {
        "content": "<p>for unsafe code in specific</p>",
        "id": 154251887,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546535233
    },
    {
        "content": "<p>and, especially since I can't see a reasonable way to observe this through optimization</p>",
        "id": 154251897,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546535252
    },
    {
        "content": "<p>I mean, if one is doing dynamic hot loading, chances are that one is already using Option&lt;fn()&gt; everywhere for that</p>",
        "id": 154251957,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546535294
    },
    {
        "content": "<p>there are more issues with dynamic unloading anyway</p>",
        "id": 154251980,
        "sender_full_name": "nagisa",
        "timestamp": 1546535341
    },
    {
        "content": "<p>e.g. <code>'static</code> does not work at <em>all</em>...</p>",
        "id": 154251986,
        "sender_full_name": "nagisa",
        "timestamp": 1546535352
    },
    {
        "content": "<p>Got an <code>fn foo() -&gt; &amp;'static str</code>? Well, you’re screwed if that str happens to be in an unloadable module...</p>",
        "id": 154251997,
        "sender_full_name": "nagisa",
        "timestamp": 1546535394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> yes</p>",
        "id": 154252396,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546535830
    },
    {
        "content": "<p>that does not mean dynamic unloading isn't useful</p>",
        "id": 154252401,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546535841
    },
    {
        "content": "<p>oh hello friends--hope you had a happy new year</p>",
        "id": 154252402,
        "sender_full_name": "avadacatavra",
        "timestamp": 1546535842
    },
    {
        "content": "<p>/me just woke up from an unexpected work nap</p>",
        "id": 154252404,
        "sender_full_name": "avadacatavra",
        "timestamp": 1546535851
    },
    {
        "content": "<p>and it does not mean we should disallow it</p>",
        "id": 154252407,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1546535854
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 154252412,
        "sender_full_name": "avadacatavra",
        "timestamp": 1546535862
    },
    {
        "content": "<p>Just back from a last-minute meeting about something else, looks like you survived without me <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 154252857,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1546536418
    },
    {
        "content": "<blockquote>\n<p>/me just woke up from an unexpected work nap</p>\n</blockquote>\n<p>good day =)</p>",
        "id": 154252870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536436
    },
    {
        "content": "<p>and yes, happy new year! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 154252875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536447
    },
    {
        "content": "<p><span class=\"emoji emoji-1f386\" title=\"fireworks\">:fireworks:</span></p>",
        "id": 154252878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546536451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> requiring valid <code>fn()</code>s to be callable doesn't make unloading impossible</p>",
        "id": 154255580,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546539232
    },
    {
        "content": "<p>one just needs to be more careful about how to construct <code>fn</code>s from hot loaded libraries and when those libraries can actually be unloaded, but it appears that one already has to be very careful here any ways</p>",
        "id": 154255795,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546539417
    },
    {
        "content": "<p>what is the gain from this requirement?</p>",
        "id": 154255939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546539550
    },
    {
        "content": "<p>I'd like to hear that question answered</p>",
        "id": 154255943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546539567
    },
    {
        "content": "<p>also, we should probably break this out into a separate topic</p>",
        "id": 154255947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546539573
    }
]