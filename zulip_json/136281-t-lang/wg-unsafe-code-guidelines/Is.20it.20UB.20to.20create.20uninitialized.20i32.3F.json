[
    {
        "content": "<p>Quick question (and apologies if I'm using zullip threads wrong, first time dealing with these).<br>\nReference states (<a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">https://doc.rust-lang.org/reference/behavior-considered-undefined.html</a>): </p>\n<blockquote>\n<p>The following list is just what we know for sure is undefined behavior:<br>\nProducing an invalid value, even in private fields and locals. \"Producing\" a value happens any time a value is assigned to or read from a place, passed to a function/primitive operation or returned from a function/primitive operation. The following values are invalid (at their respective type): <br>\n....<br>\nAn integer (i<em>/u</em>), floating point value (f*), or raw pointer obtained from uninitialized memory, or uninitialized memory in a str.</p>\n</blockquote>\n<p>This implies that the following code is UB (playground: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=31411573fc38214bd2e58b21361646a0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=31411573fc38214bd2e58b21361646a0</a> ):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">(){</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">uninitialized</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>yet miri is happy with it.</p>\n<p>Is it a bug in miri, or in the reference?</p>\n<p>(I understand that using such uninit value pretty much anywhere is UB, I'm asking whether merely \"producing\" (\"assigning to a place\") it is)</p>",
        "id": 206339432,
        "sender_full_name": "moxian",
        "timestamp": 1596877242
    },
    {
        "content": "<p>it is a known limitation in miri</p>",
        "id": 206339669,
        "sender_full_name": "RalfJ",
        "timestamp": 1596877702
    },
    {
        "content": "<p>as the miri README documents, Miri does not catch all UB. sometimes because it is hard, sometimes because I am worried it might flag too many errors.<br>\n<span class=\"user-mention\" data-user-id=\"120828\">@moxian</span>  your code example is indeed UB but at <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71</a> we are discussing whether we should change that (though I am more and more leaning towards no, let's leave it UB)</p>",
        "id": 206339685,
        "sender_full_name": "RalfJ",
        "timestamp": 1596877779
    },
    {
        "content": "<p>I see, thank you!</p>",
        "id": 206339688,
        "sender_full_name": "moxian",
        "timestamp": 1596877800
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/miri/issues/1340\">https://github.com/rust-lang/miri/issues/1340</a>: I plan to add a flag to make miri find this UB</p>",
        "id": 206339727,
        "sender_full_name": "RalfJ",
        "timestamp": 1596877814
    },
    {
        "content": "<p>but haven't gotten around to implementing that yet</p>",
        "id": 206339728,
        "sender_full_name": "RalfJ",
        "timestamp": 1596877824
    },
    {
        "content": "<p>(also it would likely not be available on the playground, unless we can convince <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> to somehow let us pass arbitrary CLI flags there^^)</p>",
        "id": 206339731,
        "sender_full_name": "RalfJ",
        "timestamp": 1596877846
    },
    {
        "content": "<p>Oh, and one more thing. Since <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71</a> is still open, and uninit integers are not \"really\" UB right now, is it slightly incorrect that the reference claims \"The following list is just what we know for sure is undefined behavior\". As in, we do not know for sure that it's UB right now (but reference says that it is, out of abundance of caution, so that people don't rely on it and end in trouble when we decide that it is), right?</p>",
        "id": 206339948,
        "sender_full_name": "moxian",
        "timestamp": 1596878317
    },
    {
        "content": "<p>I'm pretty sure uninit integers are UB right now, but <a href=\"https://github.com/rust-lang/rust/issues/71\">#71</a> propose to change that</p>",
        "id": 206343003,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1596884058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/integer32llc/rust-playground/issues/446\">https://github.com/integer32llc/rust-playground/issues/446</a></p>",
        "id": 206343604,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1596885192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20it.20UB.20to.20create.20uninitialized.20i32.3F/near/206343003\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure uninit integers are UB right now, but <a href=\"https://github.com/rust-lang/rust/issues/71\">#71</a> propose to change that</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120828\">@moxian</span> this^</p>",
        "id": 206343974,
        "sender_full_name": "RalfJ",
        "timestamp": 1596885939
    },
    {
        "content": "<p>Rust evolves, the reference describes the current version</p>",
        "id": 206344015,
        "sender_full_name": "RalfJ",
        "timestamp": 1596885966
    },
    {
        "content": "<p>relaxing UB is forwards-compatible, but making more things UB is not</p>",
        "id": 206344018,
        "sender_full_name": "RalfJ",
        "timestamp": 1596885980
    },
    {
        "content": "<p>so the \"abundance of caution\" is in making sure we are forward-compatible with either choice</p>",
        "id": 206344019,
        "sender_full_name": "RalfJ",
        "timestamp": 1596885995
    }
]