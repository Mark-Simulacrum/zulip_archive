[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and I had a good chat about exhaustiveness checking and uninhabited types and how to think about it today. <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I was wondering, I know you've been going crazy with the blog posts lately, were you planning on trying to write that up?</p>",
        "id": 131124595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533752508
    },
    {
        "content": "<p>Huzzah!  I was sad that RFC got postponed...</p>",
        "id": 131131259,
        "sender_full_name": "scottmcm",
        "timestamp": 1533760479
    },
    {
        "content": "<p>TBH I thought I would end my blog post streak for now and get back to getting some work done ;)</p>",
        "id": 131136999,
        "sender_full_name": "RalfJ",
        "timestamp": 1533768291
    },
    {
        "content": "<p>Also isnt this closer to an RFC already?^^</p>",
        "id": 131137016,
        "sender_full_name": "RalfJ",
        "timestamp": 1533768327
    },
    {
        "content": "<p>heh :) ok -- I might be up to try writing it out</p>",
        "id": 131137894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533769730
    },
    {
        "content": "<p>Thanks! Let me know if I should write some part of that.</p>",
        "id": 131221285,
        "sender_full_name": "RalfJ",
        "timestamp": 1533885565
    },
    {
        "content": "<p>I started a post, here is a draft, but I am not happy with it:</p>\n<p><a href=\"https://gist.github.com/nikomatsakis/b1d007abeb57b8f3eb35cd9b51e98dbc\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/b1d007abeb57b8f3eb35cd9b51e98dbc\">https://gist.github.com/nikomatsakis/b1d007abeb57b8f3eb35cd9b51e98dbc</a></p>",
        "id": 131228352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895307
    },
    {
        "content": "<p>for one thing, I spent most of the time so far introducing the problems etc</p>",
        "id": 131228353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895315
    },
    {
        "content": "<p>I think I might start over and just cut to the chase, then come back and talk a bit about the tensions :)</p>",
        "id": 131228394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895326
    },
    {
        "content": "<p>and I suppose I should think about drafting something for the UCG repo</p>",
        "id": 131228751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533895953
    },
    {
        "content": "<p>Oh wow that's a long post you wrote^^</p>",
        "id": 131956064,
        "sender_full_name": "RalfJ",
        "timestamp": 1533995611
    },
    {
        "content": "<p>TBH I would probably start with the <code>!</code> pattern</p>",
        "id": 131956070,
        "sender_full_name": "RalfJ",
        "timestamp": 1533995631
    },
    {
        "content": "<p>and the fact that it does not require code to follow the pattern, because it is expressing some kind of \"proof\" that this case cannot happen</p>",
        "id": 131956110,
        "sender_full_name": "RalfJ",
        "timestamp": 1533995661
    },
    {
        "content": "<p>which then leads us to auto-generating that pattern -- feasible only because no code must be generated</p>",
        "id": 131956129,
        "sender_full_name": "RalfJ",
        "timestamp": 1533995743
    },
    {
        "content": "<p>and then the problems of doing so when <code>&amp;</code> is involved</p>",
        "id": 131956133,
        "sender_full_name": "RalfJ",
        "timestamp": 1533995754
    },
    {
        "content": "<p>I think by now we have so much code that handles <code>&amp;T</code> where the memory is not fully initialized, we cannot reasonably make that requirement. Someone posted an example where this might be useful in the internals thread for my model, I still need to look at that in more detail.<br>\nBut my gut feeling right now is that having a <code>&amp;!</code> is not insta-UB. that is, however, not in contradiction with auto-never'ing it; that would just give us UB more selectively and for a different reason (namely, the <code>!</code> pattern that the user did not write).</p>",
        "id": 131956246,
        "sender_full_name": "RalfJ",
        "timestamp": 1533995955
    },
    {
        "content": "<p>yeah, I think looking at <a href=\"https://github.com/rust-lang/rfcs/pull/1892#issuecomment-412278317\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/1892#issuecomment-412278317\">https://github.com/rust-lang/rfcs/pull/1892#issuecomment-412278317</a>, it's entirely reasonable that the guarantees of <code>&amp;mut T</code> (and <code>&amp;T</code>), at a compiler level, should be <code>object with read-[write] capabilities of size_of_val(r)</code>. I don't think it's reasonable to change this at this point.</p>",
        "id": 131958457,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533999902
    },
    {
        "content": "<p>I think that requiring <code>&amp;T</code> point to a valid value always also goes against the desire to make a reference aliasing model that allows <code>split_at_mut</code> to work, as well?</p>",
        "id": 132007886,
        "sender_full_name": "alercah",
        "timestamp": 1534101072
    },
    {
        "content": "<p>Since that implies that an invariant that's currently directly on the reference types is instead going to be about accesses and uses.</p>",
        "id": 132007888,
        "sender_full_name": "alercah",
        "timestamp": 1534101119
    },
    {
        "content": "<blockquote>\n<p>and the fact that it does not require code to follow the pattern, because it is expressing some kind of \"proof\" that this case cannot happen</p>\n</blockquote>\n<p>yes, I need to rework it</p>",
        "id": 132059352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534179955
    },
    {
        "content": "<blockquote>\n<p>But my gut feeling right now is that having a <code>&amp;!</code> is not insta-UB. that is, however, not in contradiction with auto-never'ing it; that would just give us UB more selectively and for a different reason (namely, the <code>!</code> pattern that the user did not write).</p>\n</blockquote>\n<p>the key thing for me was that auto-never could treat <code>&amp;!</code> as \"effectively uninhabited\", but that we could lint against this \"in or around\" unsafe code, since we now have a way to explicitly talk about it as well. Not sure if that's a good idea or not, but it's at least a possibility for a \"third way\"</p>",
        "id": 132059493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534180087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> I don't think I fully understand what you're saying</p>",
        "id": 132059497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534180116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ok take a look at this <a href=\"https://gist.github.com/nikomatsakis/b1d007abeb57b8f3eb35cd9b51e98dbc#file-exhaustiveness-take-2-md\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/b1d007abeb57b8f3eb35cd9b51e98dbc#file-exhaustiveness-take-2-md\">new version of the post</a></p>",
        "id": 132063013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534184249
    },
    {
        "content": "<p>(and anyone else)</p>",
        "id": 132063015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534184252
    },
    {
        "content": "<blockquote>\n<p>I think that requiring <code>&amp;T</code> point to a valid value always also goes against the desire to make a reference aliasing model that allows <code>split_at_mut</code> to work, as well?</p>\n</blockquote>\n<p>I do not see the contradiction here. Both the input and the output of <code>split_and_mut</code> always point to properly initialized data.</p>",
        "id": 132063205,
        "sender_full_name": "RalfJ",
        "timestamp": 1534184425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that looks great!</p>",
        "id": 132063584,
        "sender_full_name": "RalfJ",
        "timestamp": 1534184833
    },
    {
        "content": "<p>I like it.</p>",
        "id": 132063586,
        "sender_full_name": "RalfJ",
        "timestamp": 1534184834
    },
    {
        "content": "<p>I think you promised that the unsafe section would come back to why products only auto-never when all fields do, but the unsafe section does not say anything about that</p>",
        "id": 132063807,
        "sender_full_name": "RalfJ",
        "timestamp": 1534185048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> oh, right, I cut that</p>",
        "id": 132064063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185332
    },
    {
        "content": "<p>I can maybe add back a bit</p>",
        "id": 132064066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185338
    },
    {
        "content": "<p>yeah I think that'd be good</p>",
        "id": 132064073,
        "sender_full_name": "RalfJ",
        "timestamp": 1534185351
    },
    {
        "content": "<p>it seems non-obvious</p>",
        "id": 132064076,
        "sender_full_name": "RalfJ",
        "timestamp": 1534185358
    },
    {
        "content": "<p>in fact I am not even very clear why we do it :D</p>",
        "id": 132064117,
        "sender_full_name": "RalfJ",
        "timestamp": 1534185367
    },
    {
        "content": "<p>it has to do with uninitialized data</p>",
        "id": 132064128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185384
    },
    {
        "content": "<p>in particular, otherwise,</p>",
        "id": 132064130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185388
    },
    {
        "content": "<p>there would be valid patterns one could write</p>",
        "id": 132064134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185393
    },
    {
        "content": "<p>e.g., <code>match x.value { (y, _) =&gt; .. }</code> where <code>x: Uninit&lt;(u32,!)&gt;</code></p>",
        "id": 132064145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185407
    },
    {
        "content": "<p>I wanted the invariant that autonever nevers adds a pattern that <em>could have had</em> a body</p>",
        "id": 132064169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185432
    },
    {
        "content": "<p>ah. yes that makes sense.</p>",
        "id": 132064194,
        "sender_full_name": "RalfJ",
        "timestamp": 1534185478
    },
    {
        "content": "<p>reminds me of the failed optimizations to make any struct with an uninhabited field a ZST</p>",
        "id": 132064241,
        "sender_full_name": "RalfJ",
        "timestamp": 1534185490
    },
    {
        "content": "<p>and then someone though of partial initialization :P</p>",
        "id": 132064244,
        "sender_full_name": "RalfJ",
        "timestamp": 1534185500
    },
    {
        "content": "<p>yes I think they are related :)</p>",
        "id": 132064269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185541
    },
    {
        "content": "<p>I thought about citing that in the post but thought it'd be too much</p>",
        "id": 132064277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534185552
    },
    {
        "content": "<p>The <code>split_at_mut</code> thing is about trying to make a version that doesn't require you to destructure and rebuild the slice manually. That requires changing the rules so that multiple <code>&amp;mut</code> can coexist if they aren't used in a conflicting way, at least in some limited scope. This to me feels generally in the direction of making the requirements be about the actual use of a type.</p>",
        "id": 132068862,
        "sender_full_name": "alercah",
        "timestamp": 1534190986
    },
    {
        "content": "<p>So if <code>&amp;!</code> was instantly UB, I feel that would be moving in the opposite direction.</p>",
        "id": 132068915,
        "sender_full_name": "alercah",
        "timestamp": 1534191012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> the multiple <code>&amp;mut</code> never coexist. One stops being used before the other is created.</p>",
        "id": 132071373,
        "sender_full_name": "RalfJ",
        "timestamp": 1534193862
    },
    {
        "content": "<p>That's how my model allows <code>split_at_mut</code></p>",
        "id": 132071378,
        "sender_full_name": "RalfJ",
        "timestamp": 1534193873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I mean inside <code>split_at_mut</code>.</p>",
        "id": 132071746,
        "sender_full_name": "alercah",
        "timestamp": 1534194228
    },
    {
        "content": "<p>Yes, that's what I was talking about.</p>",
        "id": 132072251,
        "sender_full_name": "RalfJ",
        "timestamp": 1534194746
    },
    {
        "content": "<p>How would you write it, then?</p>",
        "id": 132072590,
        "sender_full_name": "alercah",
        "timestamp": 1534195086
    },
    {
        "content": "<p>Just like it already is in libcore right now</p>",
        "id": 132073024,
        "sender_full_name": "RalfJ",
        "timestamp": 1534195670
    },
    {
        "content": "<p>notice that <code>self</code> does not get used again</p>",
        "id": 132073064,
        "sender_full_name": "RalfJ",
        "timestamp": 1534195683
    },
    {
        "content": "<p>but really we should have this discussion in the stacked-borrows topic :D</p>",
        "id": 132073385,
        "sender_full_name": "RalfJ",
        "timestamp": 1534196047
    },
    {
        "content": "<p><a href=\"http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2018/08/13/never-patterns-exhaustive-matching-and-uninhabited-types-oh-my/\">posted on my blog</a></p>",
        "id": 132074263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534197310
    },
    {
        "content": "<p>I should probably open an internals thread</p>",
        "id": 132074265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534197316
    },
    {
        "content": "<p>done: <a href=\"https://internals.rust-lang.org/t/blog-post-never-patterns-exhaustive-matching-and-uninhabited-types/8197\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/blog-post-never-patterns-exhaustive-matching-and-uninhabited-types/8197\">internals thread</a></p>",
        "id": 132074344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534197458
    },
    {
        "content": "<p>I was thinking a hypothetical version that doesn't use <code>from_raw_parts_mut</code>, like Niko talked about in an older blog post.</p>",
        "id": 132076233,
        "sender_full_name": "alercah",
        "timestamp": 1534200189
    }
]