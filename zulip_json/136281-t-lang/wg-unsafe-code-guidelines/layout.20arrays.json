[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the example you posted already works like you expect with stride &gt; size</p>",
        "id": 159141813,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827098
    },
    {
        "content": "<p>I'm still not sure which extension you mean with respect to how arrays already work in Rust</p>",
        "id": 159141839,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827157
    },
    {
        "content": "<p>Like currently stride is always &gt;= size.</p>",
        "id": 159141897,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827207
    },
    {
        "content": "<p>did you check your claim?</p>",
        "id": 159142002,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827371
    },
    {
        "content": "<p>because it doesn't seem correct: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f8263bc23052159dcc30470216064c17\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f8263bc23052159dcc30470216064c17\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f8263bc23052159dcc30470216064c17</a></p>",
        "id": 159142003,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827374
    },
    {
        "content": "<p><code>A</code> currently has size 4</p>",
        "id": 159142013,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827389
    },
    {
        "content": "<p>AFAIK currently we always have <code>stride == size</code>. but maybe with <code>repr(packed)</code> there is a way around that? I'd be curious for an example</p>",
        "id": 159142020,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827425
    },
    {
        "content": "<p>I checked, it does have size 4 indeed</p>",
        "id": 159142021,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827429
    },
    {
        "content": "<p>I specifically asked for <code>stride &gt; size</code></p>",
        "id": 159142069,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827459
    },
    {
        "content": "<p>but what has that to do with arrays? If you want A to have size 3, you have to <code>packed</code> it</p>",
        "id": 159142071,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827465
    },
    {
        "content": "<p>but then it will still have <code>stride == size</code></p>",
        "id": 159142074,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827478
    },
    {
        "content": "<p>as in, then both are 3</p>",
        "id": 159142075,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827483
    },
    {
        "content": "<p>So do you have an example in which stride &gt; size makes sense ?</p>",
        "id": 159142077,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827496
    },
    {
        "content": "<p>yes, the example I gave in the post</p>",
        "id": 159142085,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827504
    },
    {
        "content": "<p>there is no reason that <code>A</code> should have size 4</p>",
        "id": 159142092,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827511
    },
    {
        "content": "<p>In that example A has size 4,</p>",
        "id": 159142097,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827514
    },
    {
        "content": "<p>adding a byte of padding at the <em>end</em>, what good is that supposed to make?</p>",
        "id": 159142102,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827522
    },
    {
        "content": "<p>it'd make much more sense to make <code>A</code> have size 3, such that <code>(A, u8)</code> can have size 4</p>",
        "id": 159142107,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827532
    },
    {
        "content": "<p>the only reason we add padding at the end is to make <code>stride == size</code></p>",
        "id": 159142115,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827558
    },
    {
        "content": "<p>when using arrays you mean ?</p>",
        "id": 159142158,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827569
    },
    {
        "content": "<p>as in, the only reason A has size 4 is because arrays don't support stride &gt; size ?</p>",
        "id": 159142161,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827585
    },
    {
        "content": "<p>well, rustc doesn't. or maybe LLVM, I don't know</p>",
        "id": 159142162,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827601
    },
    {
        "content": "<p>but stride is an array-notion</p>",
        "id": 159142165,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827607
    },
    {
        "content": "<p>so I guess yes?</p>",
        "id": 159142166,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827616
    },
    {
        "content": "<p>I am confused by your question</p>",
        "id": 159142168,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827621
    },
    {
        "content": "<p>sure, but in these examples stride == size because A has size 4</p>",
        "id": 159142172,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827623
    },
    {
        "content": "<p>yes and I am saying that's silly, and we should keep open the option to do better</p>",
        "id": 159142188,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827643
    },
    {
        "content": "<p>so your question is to me that we don't want to force repr(rust) types to be larger than they need to be just because they could be put in arrays and arrays don't support stride &gt; size</p>",
        "id": 159142191,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827656
    },
    {
        "content": "<p>yes</p>",
        "id": 159142203,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827675
    },
    {
        "content": "<p>gotcha, i was confused because i thought that you somehow wanted, for a given size, choose a stride &gt; size</p>",
        "id": 159142251,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827696
    },
    {
        "content": "<p>well I kind of do, but those size-alignment pairs dont exist currently :P</p>",
        "id": 159142265,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827722
    },
    {
        "content": "<p>well that's what you want, i guess i was confused because I assumed that we wanted to keep padding at the end of types for other reasons</p>",
        "id": 159142285,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827733
    },
    {
        "content": "<p>basically, stride is always size rounded up to the next multiple of the alignment</p>",
        "id": 159142287,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827734
    },
    {
        "content": "<p>I am saying we should NOT hard-code that that will always be the same as size</p>",
        "id": 159142306,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827743
    },
    {
        "content": "<p>so... i think the main issue is FFI. we currently allow arrays there, they coerce to raw pointers, and C and C++ arrays don't do that</p>",
        "id": 159142319,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827754
    },
    {
        "content": "<p>I want to <em>remove</em> padding at the end of types</p>",
        "id": 159142325,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827757
    },
    {
        "content": "<p>well this can only happen if you use a repr(Rust) type in FFI</p>",
        "id": 159142338,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827771
    },
    {
        "content": "<p>repr(C) types will always have size be a multiple of the alignment</p>",
        "id": 159142342,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827783
    },
    {
        "content": "<p>I guess we could require arrays used in C FFI to be repr(C)</p>",
        "id": 159142426,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827867
    },
    {
        "content": "<p>but right now, using a non-repr(C) array with a non-repr(C) element type in C FFI does what C does</p>",
        "id": 159142438,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827904
    },
    {
        "content": "<p>uh, we dont give any guarantees when you use non-repr(C) types in FFI, I thought?</p>",
        "id": 159142484,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827928
    },
    {
        "content": "<p>like, to do this you need to have a <code>repr(Rust)</code> struct, and a <em>matching</em> struct in C. which is not possible, already right now.</p>",
        "id": 159142493,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827956
    },
    {
        "content": "<p>no, and we do warn about this</p>",
        "id": 159142506,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827963
    },
    {
        "content": "<p>we reorder fields, and we may change the order between rust releases</p>",
        "id": 159142511,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827981
    },
    {
        "content": "<p>(there is an improper ctypes warning)</p>",
        "id": 159142512,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550827981
    },
    {
        "content": "<p>so, we <em>already</em> break such code</p>",
        "id": 159142518,
        "sender_full_name": "RalfJ",
        "timestamp": 1550827985
    },
    {
        "content": "<p>we can't use <code>#[repr(C)]</code> on arrays yet, but that could be fixed</p>",
        "id": 159142534,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550828017
    },
    {
        "content": "<p>we should definetely document repr(Rust) and repr(C) arrays differently, and leave the door open to doing something better for repr(rust)</p>",
        "id": 159142601,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550828082
    },
    {
        "content": "<p>well, we wouldnt really need that. if the array element type  is <code>repr(C)</code>, the array will be compatible</p>",
        "id": 159142602,
        "sender_full_name": "RalfJ",
        "timestamp": 1550828089
    },
    {
        "content": "<blockquote>\n<p>we should definetely document repr(Rust) and repr(C) arrays differently, and leave the door open to doing something better for repr(rust)</p>\n</blockquote>\n<p>no need</p>",
        "id": 159142609,
        "sender_full_name": "RalfJ",
        "timestamp": 1550828099
    },
    {
        "content": "<p>if we define arrays the way I suggested, they'll do the right thing regardless</p>",
        "id": 159142622,
        "sender_full_name": "RalfJ",
        "timestamp": 1550828111
    },
    {
        "content": "<p>ah because repr(C) types already have padding at the end</p>",
        "id": 159142642,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550828153
    },
    {
        "content": "<p>because in C they have to, because of arrays</p>",
        "id": 159142693,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550828170
    },
    {
        "content": "<p>i think it is still worth calling out that if the element type of the array is repr(C), then stride == size</p>",
        "id": 159142701,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550828201
    },
    {
        "content": "<blockquote>\n<p>i think it is still worth calling out that if the element type of the array is repr(C), then stride == size</p>\n</blockquote>\n<p>fair</p>",
        "id": 159142827,
        "sender_full_name": "RalfJ",
        "timestamp": 1550828360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the definition of stride is in the first sentence</p>",
        "id": 160110289,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551889303
    },
    {
        "content": "<p>yes, I know? me suggesting a structure does not mean that <em>nothing</em> was at the right (in my view) place -- just a lot of it wasn't. The rest of this text is somewhat confusing (didn't get to read the latest version yet, I'll come back to you)</p>",
        "id": 160110979,
        "sender_full_name": "RalfJ",
        "timestamp": 1551889792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> i've reworded it trying to address both yours and <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> 's comment</p>",
        "id": 160112014,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551890559
    },
    {
        "content": "<p>I needed to remove the mention that arrays elements are laid out contiguously in memory<br>\nthat only holds for <code>stride == size</code></p>",
        "id": 160112045,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551890582
    },
    {
        "content": "<p>but i clarified that below</p>",
        "id": 160112064,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551890604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> for me personally the biggest downside of <code>stride &gt; size</code> is that it makes arrays non-contiguous</p>",
        "id": 160117382,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551894346
    },
    {
        "content": "<p>but it is probably better to raise those concerns in the issues discussing such proposals</p>",
        "id": 160117458,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551894369
    },
    {
        "content": "<p>you need an odd definition of \"contiguity\" to make that statement</p>",
        "id": 160117461,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551894376
    },
    {
        "content": "<p>but yeah, UCG is not the place to decide about those proposals</p>",
        "id": 160117472,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551894394
    },
    {
        "content": "<p>For me contiguity is that you can iterate over the array using <code>ptr.add(elem_size)</code>.</p>",
        "id": 160117505,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551894419
    },
    {
        "content": "<p>But I see how <code>ptr.add(arr_stride)</code> is very close.</p>",
        "id": 160117530,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551894441
    },
    {
        "content": "<p>If stride was independent from type size, as it is e.g. in matrix views, clearly it wouldn't be contiguous. But here the array is \"as contiguous as it can be\", and the stride is basically the element size anyway.</p>",
        "id": 160117644,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551894518
    },
    {
        "content": "<p>right, i don;t know how much code changing this assumption would break - anyways have to go bake a cake</p>",
        "id": 160117821,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551894620
    },
    {
        "content": "<p>the point of mentioning strie &gt; size was precisely because UCG is not the place to <em>exclude</em> such proposals</p>",
        "id": 160119025,
        "sender_full_name": "RalfJ",
        "timestamp": 1551895550
    },
    {
        "content": "<p>Sure. I did a poor job at this initially but I hope by now I am clear that I'm not arguing for excluding this possibility now, just against putting it front and center instead of mentioning it at the end as a possibility of resolving the unspecified aspects.</p>",
        "id": 160120148,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551896317
    },
    {
        "content": "<p>fair</p>",
        "id": 160120165,
        "sender_full_name": "RalfJ",
        "timestamp": 1551896331
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> i'll make the SIMD Vector thing clearer, and I'll explain what packed means. </p>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> While Cray vectors are old, they are new again. IIRC actually <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> was working on the LLVM implementation. He had a talk about it last year at EuroLLVM.</p>",
        "id": 160178367,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551947448
    },
    {
        "content": "<p>is there a good document that explains this that you can refer to?</p>",
        "id": 160178391,
        "sender_full_name": "RalfJ",
        "timestamp": 1551947487
    },
    {
        "content": "<p>this repo seems like the wrong place for such an explanation</p>",
        "id": 160178393,
        "sender_full_name": "RalfJ",
        "timestamp": 1551947505
    },
    {
        "content": "<p>i think the portable packed SIMD RFC explained that, let me check</p>",
        "id": 160179047,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551948284
    },
    {
        "content": "<p><a href=\"https://github.com/gnzlbg/rfcs/blob/ppv/text/0000-ppv.md#guide-level-explanation\" target=\"_blank\" title=\"https://github.com/gnzlbg/rfcs/blob/ppv/text/0000-ppv.md#guide-level-explanation\">https://github.com/gnzlbg/rfcs/blob/ppv/text/0000-ppv.md#guide-level-explanation</a><br>\n<a href=\"https://github.com/gnzlbg/rfcs/blob/ppv/text/0000-ppv.md#interaction-with-cray-vectors\" target=\"_blank\" title=\"https://github.com/gnzlbg/rfcs/blob/ppv/text/0000-ppv.md#interaction-with-cray-vectors\">https://github.com/gnzlbg/rfcs/blob/ppv/text/0000-ppv.md#interaction-with-cray-vectors</a></p>",
        "id": 160179085,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551948348
    },
    {
        "content": "<p>I think I can add the definition of the guide level explanation of that RFC to the packed-simd-vector.md document</p>",
        "id": 160179137,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551948373
    },
    {
        "content": "<p>as a note, it is short enough</p>",
        "id": 160179141,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551948382
    },
    {
        "content": "<p>maybe without mentioning cray vectors</p>",
        "id": 160179156,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551948415
    },
    {
        "content": "<p>packed vectors -&gt; arrays, cray vectors -&gt; slices</p>",
        "id": 160179177,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551948448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I've added a footnote to the vector document explaining what packed means, and linking to the RFC</p>",
        "id": 160179715,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551949054
    },
    {
        "content": "<p>To give credit where credit is due, the architecture I work on (RISC-V) is just one of two recent architectures that try to bring this programming model back. Arm beat RISC-V to the punch with SVE, and I'm building on stuff Arm engineers have done previously for SVE.</p>",
        "id": 160185843,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551954792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> that was in the wrong topic^^</p>",
        "id": 160212453,
        "sender_full_name": "RalfJ",
        "timestamp": 1551975631
    }
]