[
    {
        "content": "<p>I think I saw someone once propose to use two statics to mark a region of memory, i.e. the linker would later be instructed to set one static to the beginning and one to the end.<br>\nSeems like this caused miscompilations before: <a href=\"https://stefansf.de/post/pointers-are-more-abstract-than-you-might-expect/\" target=\"_blank\" title=\"https://stefansf.de/post/pointers-are-more-abstract-than-you-might-expect/\">https://stefansf.de/post/pointers-are-more-abstract-than-you-might-expect/</a> (GCC changed behavior in that case but I dont know what LLVM does)</p>",
        "id": 172203802,
        "sender_full_name": "RalfJ",
        "timestamp": 1564650357
    },
    {
        "content": "<p>does anyone remember where that came up? <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ?</p>",
        "id": 172203854,
        "sender_full_name": "RalfJ",
        "timestamp": 1564650369
    },
    {
        "content": "<p>(also WTF, that post was published the <em>exact same day</em> as my own <a href=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\">https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html</a>...)</p>",
        "id": 172204052,
        "sender_full_name": "RalfJ",
        "timestamp": 1564650566
    },
    {
        "content": "<p>I've used <code>asm!</code> to mark regions of code before, and that did not cause micompilations</p>",
        "id": 172204074,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564650587
    },
    {
        "content": "<p>Either way, is that a use case that the language supports?</p>",
        "id": 172204180,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564650651
    },
    {
        "content": "<p>Also, why does the example use two statics, instead of a static array and a size_t in C?</p>",
        "id": 172204230,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564650718
    },
    {
        "content": "<p>That would have avoided the problem</p>",
        "id": 172204273,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564650725
    },
    {
        "content": "<p>(to obtain the end pointer, you need to offset the start pointer with the size_t, and that returns a pointer with the right provenance)</p>",
        "id": 172204284,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564650750
    },
    {
        "content": "<p>no idea why this was done the way it was</p>",
        "id": 172204754,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651204
    },
    {
        "content": "<p>but it's the same thing I saw someone ask/propose for use in Rust</p>",
        "id": 172204770,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651216
    },
    {
        "content": "<p>It seems that it was always done that way in the Linux kernel</p>",
        "id": 172204783,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651226
    },
    {
        "content": "<p>and it was always broken, but people started seeing issues as the GCC version was updated</p>",
        "id": 172204794,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651240
    },
    {
        "content": "<p>they had linker scripts to do that</p>",
        "id": 172204805,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651249
    },
    {
        "content": "<p>the linux kernel mailing list never considered changing the linker scripts, so I don't know whether that would have been possible</p>",
        "id": 172204832,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651289
    },
    {
        "content": "<p>I don't see why it wouldn't</p>",
        "id": 172204836,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651293
    },
    {
        "content": "<p>they ended up using <code>black_box</code> instead to make the arrays opaque to the optimizer</p>",
        "id": 172204921,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651374
    },
    {
        "content": "<p>its duct-tape all the way down</p>",
        "id": 172204933,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651391
    },
    {
        "content": "<blockquote>\n<p>its duct-tape all the way down</p>\n</blockquote>\n<p>indeed :/</p>",
        "id": 172205072,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651530
    },
    {
        "content": "<p>I've needed to mark the end of the statics in my binary before</p>",
        "id": 172732143,
        "sender_full_name": "Lokathor",
        "timestamp": 1565230296
    },
    {
        "content": "<p>well, in my ROM, it was for GBA, so execution and the whole address space are very well defined with no OS meddling in your way</p>",
        "id": 172732204,
        "sender_full_name": "Lokathor",
        "timestamp": 1565230351
    },
    {
        "content": "<p>right but the compiler is still meddling ;)</p>",
        "id": 172746764,
        "sender_full_name": "RalfJ",
        "timestamp": 1565252048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> so why didn't it work to mark begin + length instead?</p>",
        "id": 172746768,
        "sender_full_name": "RalfJ",
        "timestamp": 1565252059
    },
    {
        "content": "<p>So <a href=\"https://github.com/rust-console/gba/blob/master/linker.ld#L22\" target=\"_blank\" title=\"https://github.com/rust-console/gba/blob/master/linker.ld#L22\">the linker</a> does a start and end thing for the <code>.data</code>, and for <code>.bss</code> it just marks the end. Then <a href=\"https://github.com/rust-console/gba/blob/master/crt0.s#L62\" target=\"_blank\" title=\"https://github.com/rust-console/gba/blob/master/crt0.s#L62\">crt0</a> copies necessary data at boot before entering <code>main</code>, and then <a href=\"https://github.com/rust-console/gba/blob/master/src/lib.rs#L48\" target=\"_blank\" title=\"https://github.com/rust-console/gba/blob/master/src/lib.rs#L48\">inside rust</a> we just declare an extern static with the right name and let the linker figure it out.</p>\n<p>And, well, it seems to work out.</p>",
        "id": 172747309,
        "sender_full_name": "Lokathor",
        "timestamp": 1565252689
    },
    {
        "content": "<p>it works out until LLVM sees you are doing cross-object arithmetic...</p>",
        "id": 172747561,
        "sender_full_name": "RalfJ",
        "timestamp": 1565252994
    },
    {
        "content": "<p>LLVM considers each static its own \"allocated object\"</p>",
        "id": 172747587,
        "sender_full_name": "RalfJ",
        "timestamp": 1565253003
    },
    {
        "content": "<p>not sure what the best solution here is. maybe as a start we should have an issue tracking this somewhere.</p>",
        "id": 172747621,
        "sender_full_name": "RalfJ",
        "timestamp": 1565253029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> is there a way for the linker to write the length of the region to a static ?</p>",
        "id": 172749736,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565255304
    },
    {
        "content": "<p>I don't know about the linker used for that target but some linkers definitely support that</p>",
        "id": 172750114,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565255781
    },
    {
        "content": "<p>I did not write that linker script, so i don't know</p>",
        "id": 172750342,
        "sender_full_name": "Lokathor",
        "timestamp": 1565256101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> it's just so that you can know the base address for where your own allocator should start. it's not intended for cross-object pointer jumping or anything like that</p>",
        "id": 172750402,
        "sender_full_name": "Lokathor",
        "timestamp": 1565256162
    },
    {
        "content": "<p>Is this GNU ld? Then see the example for <code>SIZEOF</code> near the end of this page <a href=\"https://sourceware.org/binutils/docs/ld/Builtin-Functions.html#Builtin-Functions\" target=\"_blank\" title=\"https://sourceware.org/binutils/docs/ld/Builtin-Functions.html#Builtin-Functions\">https://sourceware.org/binutils/docs/ld/Builtin-Functions.html#Builtin-Functions</a></p>",
        "id": 172750421,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565256195
    },
    {
        "content": "<p>uhm</p>",
        "id": 172750426,
        "sender_full_name": "Lokathor",
        "timestamp": 1565256208
    },
    {
        "content": "<p>yeah, gnu binutils for arm</p>",
        "id": 172750430,
        "sender_full_name": "Lokathor",
        "timestamp": 1565256218
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> it's just so that you can know the base address for where your own allocator should start. it's not intended for cross-object pointer jumping or anything like that</p>\n</blockquote>\n<p>the thing is, <code>BEGIN</code> and <code>END</code> are different objects for LLVM</p>",
        "id": 172751622,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257687
    },
    {
        "content": "<p>so if you subtract them as pointers (<code>offset_from</code>), you won't get well-defined results</p>",
        "id": 172751631,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257711
    },
    {
        "content": "<p>if you compare <code>BEGIN.add(n)</code> with <code>END</code> as pointers, that can be optimized to <code>false</code> without even looking at <code>n</code></p>",
        "id": 172751635,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257733
    },
    {
        "content": "<p>you can try comparing as integers instead, that <em>should</em> be well-defined but LLVM has bugs</p>",
        "id": 172751646,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257757
    },
    {
        "content": "<p>I think if you use <code>END.wrapping_offset_from(BEGIN)</code>, and then never use <code>END</code> again, that should work</p>",
        "id": 172751707,
        "sender_full_name": "RalfJ",
        "timestamp": 1565257807
    },
    {
        "content": "<p>writing a linker script that does array+size feels simpler than writing one that generates two arrays appropriately</p>",
        "id": 172756742,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565263926
    },
    {
        "content": "<p>doing the simplest thing avoids UB, so why do the complicated thing  that's often UB ?</p>",
        "id": 172756761,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565263968
    },
    {
        "content": "<p>A perfect reason to use 2 symbols to mark beginning and the end is that it saves space.</p>",
        "id": 172792433,
        "sender_full_name": "nagisa",
        "timestamp": 1565289905
    },
    {
        "content": "<p>symbols, being a link-time concept, take 0 bytes in the loaded binary.</p>",
        "id": 172792442,
        "sender_full_name": "nagisa",
        "timestamp": 1565289913
    },
    {
        "content": "<p>(and obviously these symbols should end up in your code as <code>*const u8</code> pointers, not statics of T)</p>",
        "id": 172792703,
        "sender_full_name": "nagisa",
        "timestamp": 1565290083
    },
    {
        "content": "<blockquote>\n<p>(and obviously these symbols should end up in your code as <code>*const u8</code> pointers, not statics of T)</p>\n</blockquote>\n<p>how would one do that? seems like a static is the usual way to get an address from the linker to the program</p>",
        "id": 172831403,
        "sender_full_name": "RalfJ",
        "timestamp": 1565335697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> when one uses two symbols, the linker has to somehow insert two addresses there</p>",
        "id": 172834964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565340433
    },
    {
        "content": "<p>why can't the linker insert the address in one symbol, and (end - begin) in the other ?</p>",
        "id": 172834976,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565340466
    },
    {
        "content": "<p>You don’t need to store the addresses, referring to a symbol will cause linker to replace it with an address of this symbol in-place.</p>",
        "id": 172864915,
        "sender_full_name": "nagisa",
        "timestamp": 1565367656
    },
    {
        "content": "<p>the same way <code>call foo</code> instruction does not store the address of <code>foo</code> \"somewhere\" first, but rather calls the address of foo directly.</p>",
        "id": 172864953,
        "sender_full_name": "nagisa",
        "timestamp": 1565367693
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>(and obviously these symbols should end up in your code as <code>*const u8</code> pointers, not statics of T)</p>\n</blockquote>\n<p>how would one do that? seems like a static is the usual way to get an address from the linker to the program</p>\n</blockquote>\n<p>A good question. <code>&amp;symbol as *const u8</code>?</p>",
        "id": 172865049,
        "sender_full_name": "nagisa",
        "timestamp": 1565367758
    },
    {
        "content": "<p>I guess that’s the thing where it is not clear whether <code>symbol</code> is an object of <code>u8</code> or an object of unknown dimensions.</p>",
        "id": 172865101,
        "sender_full_name": "nagisa",
        "timestamp": 1565367812
    },
    {
        "content": "<p>it better be a ZST if there's not definitely some memory there</p>",
        "id": 172873914,
        "sender_full_name": "RalfJ",
        "timestamp": 1565373641
    },
    {
        "content": "<p>I don't know why it would matter? The best plan either way is to cast the address of the marker to usize and avoid all of LLVM's crazytown by doing all of your address operations on usize values.</p>",
        "id": 172874200,
        "sender_full_name": "Lokathor",
        "timestamp": 1565373858
    },
    {
        "content": "<p><code>static FOO: u8</code> promises the compiler there is a byte of memory there</p>",
        "id": 172874240,
        "sender_full_name": "RalfJ",
        "timestamp": 1565373894
    },
    {
        "content": "<p>oh i see, sorry, i misread. Yes, you also want a valid byte at wherever it gets puts</p>",
        "id": 172874295,
        "sender_full_name": "Lokathor",
        "timestamp": 1565373947
    },
    {
        "content": "<p>Can't one write <code>static FOO: *const u8</code>; ?</p>",
        "id": 172969930,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565531658
    },
    {
        "content": "<p>That still implies the symbol refers to valid memory, only now it has to be pointer sized instead of just one byte</p>",
        "id": 172970196,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565532157
    },
    {
        "content": "<p>Ah, gotcha.  Wouldn't one byte also be sub-optimal?</p>",
        "id": 173015146,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565608777
    },
    {
        "content": "<p>e.g. what we want is <code>static FOO: Zst;</code> and for <code>&amp;Foo</code> to have an address chosen by the linker</p>",
        "id": 173015217,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565608834
    },
    {
        "content": "<p>such that if then the other \"end\" pointer, or the size are zero, no memory needs to be allocated for this</p>",
        "id": 173015229,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565608857
    },
    {
        "content": "<p>otherwise when the size is zero, <code>static FOO: u8;</code> would need to be dereferenceable for one byte, but this wouldn't be the case</p>",
        "id": 173015247,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565608887
    },
    {
        "content": "<p>Yeah, a ZST would fine as Ralf said earlier. Although I'm not so sure we guarantee to actually give you the address of the symbol rather than e.g. <code>align_of::&lt;TheZst&gt;() as *const</code></p>",
        "id": 173015341,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1565609000
    },
    {
        "content": "<p>I recall that the implementation currently does <code>align_of::&lt;Zst&gt;() as *_</code>, but I don't think we guarantee anything beyond \"the address will be suitably aligned\", to avoid UB when creating a reference</p>",
        "id": 173017526,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565611513
    },
    {
        "content": "<p>well, the symbol is placed by the linker script</p>",
        "id": 173058536,
        "sender_full_name": "Lokathor",
        "timestamp": 1565642515
    },
    {
        "content": "<p>in rust you just use an extern</p>",
        "id": 173058586,
        "sender_full_name": "Lokathor",
        "timestamp": 1565642524
    },
    {
        "content": "<p>if i still follow what we're talking about</p>",
        "id": 173058623,
        "sender_full_name": "Lokathor",
        "timestamp": 1565642549
    }
]