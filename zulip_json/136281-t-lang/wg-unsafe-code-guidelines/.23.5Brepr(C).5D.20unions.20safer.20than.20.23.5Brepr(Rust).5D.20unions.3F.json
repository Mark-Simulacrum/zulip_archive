[
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/1.30.0/reference/items/unions.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/1.30.0/reference/items/unions.html\">https://doc.rust-lang.org/1.30.0/reference/items/unions.html</a> says \"Inactive fields can be accessed as well (using the same syntax) if they are sufficiently layout compatible\" but the RFC says that reading a (a part of a) member that wasn't the last one written to is undefined behavior. I had already written code that assumes that the Rust reference is correct. I went back and added <code>#[repr(C)]</code> to my unions to make them safer as there seems to be some dispute about whether <code>#[repr(C)]</code> guarantees more than <code>#[repr(Rust)]</code> here. What's the current status?</p>",
        "id": 151203779,
        "sender_full_name": "briansmith",
        "timestamp": 1544322096
    },
    {
        "content": "<p><code>#[repr(C)]</code> won't guarantee anything more than <code>#[repr(Rust)]</code>. I think that they just defined it in the transition from RFC to language?</p>",
        "id": 151206244,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1544327436
    },
    {
        "content": "<p>basically, C rules, not C++ rules</p>",
        "id": 151206245,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1544327451
    },
    {
        "content": "<p>I think that has to be the case, because it would be <em>very</em> easy to accidentally get undefined behavior by forgetting the <code>#[repr(C)]</code>; I've done it myself already. Plus people don't expect \"C\" to be safer than \"Rust\"; it'd be counter-intuitive.</p>",
        "id": 151210349,
        "sender_full_name": "briansmith",
        "timestamp": 1544337066
    },
    {
        "content": "<blockquote>\n<p>Inactive fields</p>\n</blockquote>\n<p>the plan is for Rust to not have any notion of \"active/inactive union fields\". Instead, every access just interprets the data stored in memory at the type used for the access. basically, unions field access is sugar for transmute, no more.</p>",
        "id": 151215685,
        "sender_full_name": "RalfJ",
        "timestamp": 1544348449
    },
    {
        "content": "<p>(well, my plan anyway, but it seems like most people agree)</p>",
        "id": 151215692,
        "sender_full_name": "RalfJ",
        "timestamp": 1544348486
    },
    {
        "content": "<p>wow there is some strange structure in the reference... there is <code>items/unions</code> and <code>types/union</code>?</p>",
        "id": 151215759,
        "sender_full_name": "RalfJ",
        "timestamp": 1544348608
    },
    {
        "content": "<p>There are types that aren't items and items that aren't types, so there has to be a section for both of them. I think that the plan is to merge the struct, enumeration and union type pages and put most of the information on the item pages.</p>",
        "id": 151217079,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1544351481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> a C++ reference is not a “lawyer object”. Pretty unfortunate that one has to be aware of that when using C++ or reading the standard.</p>",
        "id": 151218452,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544354267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> not sure what this is a reply to?</p>",
        "id": 151221631,
        "sender_full_name": "RalfJ",
        "timestamp": 1544360986
    },
    {
        "content": "<p>I was talking about the Rust reference above</p>",
        "id": 151221632,
        "sender_full_name": "RalfJ",
        "timestamp": 1544360991
    },
    {
        "content": "<p>sent a PR to remove the notion of an \"active field\": <a href=\"https://github.com/rust-lang-nursery/reference/pull/478\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/reference/pull/478\">https://github.com/rust-lang-nursery/reference/pull/478</a></p>",
        "id": 151222343,
        "sender_full_name": "RalfJ",
        "timestamp": 1544362480
    },
    {
        "content": "<p>Oh I meant to reply to the nomenclature (place, ..) topic - guess I need to figure out how the mobile app works.</p>",
        "id": 151222676,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544363269
    },
    {
        "content": "<p>Awesome.</p>",
        "id": 151239721,
        "sender_full_name": "briansmith",
        "timestamp": 1544396015
    },
    {
        "content": "<blockquote>\n<p>people don't expect \"C\" to be safer than \"Rust\"; it'd be counter-intuitive</p>\n</blockquote>\n<p>I disagree; for unsafe code that plays games with struct layout, for example, <code>repr(C)</code> is \"safer\" (and required)</p>",
        "id": 151256593,
        "sender_full_name": "RalfJ",
        "timestamp": 1544428810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I understand that <code>repr(C)</code> actually <em>is</em> safer than <code>repr(Rust)</code>. However, that is almost definitely surprising to people who don't think about these things as much as we do.</p>",
        "id": 151291371,
        "sender_full_name": "briansmith",
        "timestamp": 1544464826
    }
]