[
    {
        "content": "<p>Hi everyone!</p>\n<p>I know that DST layouts is a touchy/subtle topic, in particular if dyn traits are involved (there's a lot of RFCs involved IIRC).<br>\nIt seems that currently the DSTs which have a member which is a slice have the same \"metadata\" as its unsized member... Would it be feasible to also specify that in the UCG, in addition to the bare slice (ptr, elem_count) layout?</p>\n<p>An example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Newtype</span><span class=\"p\">([</span><span class=\"kt\">u8</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyDst</span><span class=\"o\">&lt;</span><span class=\"n\">H</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">header</span>: <span class=\"nc\">H</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">tail</span>: <span class=\"nc\">Newtype</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199867955,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1591359739
    },
    {
        "content": "<p>... which would have the same metadata as <code>struct Another&lt;H&gt; { header: H, tail: [u8] }</code></p>",
        "id": 199868181,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1591359891
    },
    {
        "content": "<blockquote>\n<p>Would it be feasible to also specify that in the UCG, in addition to the bare slice (ptr, elem_count) layout?</p>\n</blockquote>\n<p>note that even bare slice layout is not specified</p>",
        "id": 200515722,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span>  use <code>from_raw_parts</code> and <code>.as_ptr()</code>/<code>.len()</code> do convert between a slice and its pieces</p>",
        "id": 200515753,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863074
    },
    {
        "content": "<p>as for guaranteeing layout when the unsized tail is a slice... it would take someone to push through an RFC. I don't know what the concern are with stabilizing that.</p>",
        "id": 200515791,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Yes, I've been using <code>from_raw_parts</code> but I've been missing the guarantee for slice &lt;-&gt; slice \"object\" conversion, that the slice ptr \"metadata\" is basically the same as the metadata for the slice object pointer</p>",
        "id": 200539248,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1591879838
    },
    {
        "content": "<p>Do you think it'd even make sense to separately define something like a \"slice object\"? I think I've seen this term used once or twice in the codebase when I tried to see how we handle these types of objects, but the reference/docs don't specify them at all and just speaks about either just \"DST\" or \"trait object\"</p>",
        "id": 200539341,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1591879908
    },
    {
        "content": "<p>in particular, I couldn't write generic conversions for <code>?Sized</code> which are \"slice objects\" due to compiler not knowing that <code>slice_ptr as *const Self</code> is actually valid</p>",
        "id": 200539461,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1591879978
    }
]