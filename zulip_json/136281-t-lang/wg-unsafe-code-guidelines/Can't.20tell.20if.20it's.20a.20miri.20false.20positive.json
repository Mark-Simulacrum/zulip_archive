[
    {
        "content": "<p>Hello all, Ralf particularly for this one, I have a crate called bytemuck for casting slices and such. <a href=\"https://github.com/Lokathor/bytemuck\" target=\"_blank\" title=\"https://github.com/Lokathor/bytemuck\">https://github.com/Lokathor/bytemuck</a></p>\n<p>I pulled it out of a large lib a month or so ago and just remembered to move the tests as well this weekend. I figured i'd run it through miri too, but then I got a test failure!</p>\n<div class=\"codehilite\"><pre><span></span>D:\\dev\\bytemuck&gt;cargo miri test\n   Compiling bytemuck v0.1.1-alpha.0 (D:\\dev\\bytemuck)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n    Finished test [unoptimized + debuginfo] target(s) in 0.88s\n   Compiling bytemuck v0.1.1-alpha.0 (D:\\dev\\bytemuck)\n\nrunning 3 tests\ntest test_try_cast_slice ... ok\nerror[E0080]: Miri evaluation error: trying to reborrow for Unique, but parent tag &lt;untagged&gt; does\nnot have an appropriate item in the borrow stack\n    --&gt; C:\\Users\\Daniel\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\src\\libcore\\slice\\mod.rs:5257:5\n     |\n5257 |     &amp;mut *ptr::slice_from_raw_parts_mut(data, len)\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Miri evaluation error: trying to reborrow for Unique, but parent tag &lt;untagged&gt; does not have an appropriate item in the borrow stack\n     |\n     = note: inside call to `std::slice::from_raw_parts_mut::&lt;u8&gt;` at D:\\dev\\bytemuck\\src\\lib.rs:232:17\nnote: inside call to `bytemuck::try_cast_slice_mut::&lt;u32, u8&gt;` at tests\\cast_slice_tests.rs:47:30\n    --&gt; tests\\cast_slice_tests.rs:47:30\n</pre></div>\n\n\n<p>Honestly I can't really tell if this is actually a problem or if miri is being weird or what. I get the same error even when I to use identically sized type (eg: <code>&amp;mut [u32]</code> to <code>&amp;mut [f32]</code>), but I <em>don't</em> get the error with a straight up <code>core::mem::transmute</code>.</p>",
        "id": 179809317,
        "sender_full_name": "Lokathor",
        "timestamp": 1572850485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> a minimal working example in the playground that reproduces the issue would help</p>",
        "id": 179818497,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572860840
    },
    {
        "content": "<p>uh, sure, <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b28a15e3d99616b03caafdd794550946\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b28a15e3d99616b03caafdd794550946\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=b28a15e3d99616b03caafdd794550946</a></p>",
        "id": 179843474,
        "sender_full_name": "Lokathor",
        "timestamp": 1572881657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> the problem is that you are using <code>.as_ptr</code> instead of <code>.as_mut_ptr</code></p>",
        "id": 179873290,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572899581
    },
    {
        "content": "<p>oh my gosh i should have seen that one</p>",
        "id": 179873336,
        "sender_full_name": "Lokathor",
        "timestamp": 1572899614
    },
    {
        "content": "<p>and if I'd used the new <code>cast</code> method i would have had the compiler detect it too</p>",
        "id": 179873429,
        "sender_full_name": "Lokathor",
        "timestamp": 1572899652
    },
    {
        "content": "<p>_I think_ that ends up creating <code>&amp;mut [B]</code> -&gt; <code>&amp;[B]</code> -&gt; <code>*const B</code> -&gt; <code>*mut A</code> -&gt; .. -&gt; <code>&amp;mut [A]</code> chain, which creates a mut reference from a shared one</p>",
        "id": 179873431,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572899654
    },
    {
        "content": "<p>yeah</p>",
        "id": 179873448,
        "sender_full_name": "Lokathor",
        "timestamp": 1572899665
    },
    {
        "content": "<p>I don't know if this is a false positive or not</p>",
        "id": 179873515,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572899706
    },
    {
        "content": "<p>but at least with <code>as_mut_ptr</code> it works<br>\ni've seen quite a lot of code that does this, and that code isn't wrong, in the sense that doing that isn't really \"wrong\" (that shared reference is still unique)</p>",
        "id": 179873630,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572899766
    },
    {
        "content": "<p>but in miri that <code>&amp;self</code> invalidates the Unique in the borrow stack</p>",
        "id": 179873648,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572899787
    },
    {
        "content": "<p>I'll fix it later today and yank the old version, better safe than sorry I suppose</p>",
        "id": 179885593,
        "sender_full_name": "Lokathor",
        "timestamp": 1572907833
    },
    {
        "content": "<p>Fixed and released!</p>",
        "id": 179896198,
        "sender_full_name": "Lokathor",
        "timestamp": 1572920046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> if you dont @mention me I don't get pinged ;)</p>",
        "id": 179914126,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945755
    },
    {
        "content": "<p>oh I figured you just sense the smell of fresh UB every morning</p>",
        "id": 179914198,
        "sender_full_name": "Lokathor",
        "timestamp": 1572945805
    },
    {
        "content": "<blockquote>\n<p>_I think_ that ends up creating <code>&amp;mut [B]</code> -&gt; <code>&amp;[B]</code> -&gt; <code>*const B</code> -&gt; <code>*mut A</code> -&gt; .. -&gt; <code>&amp;mut [A]</code> chain, which creates a mut reference from a shared one</p>\n</blockquote>\n<p>if that is indeed the chain then its definitely a true positive. this is considered mutation of shared data, a big no-go.</p>",
        "id": 179914209,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945814
    },
    {
        "content": "<blockquote>\n<p>oh I figured you just sense the smell of fresh UB every morning</p>\n</blockquote>\n<p>sure, but I don't know where the smell comes from so I don't know where to go to fix it. I got used to ignoring it. ;)</p>",
        "id": 179914252,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945842
    },
    {
        "content": "<p>i switched to 1.38 and the cast method to avoid this possibly in the future</p>",
        "id": 179914290,
        "sender_full_name": "Lokathor",
        "timestamp": 1572945847
    },
    {
        "content": "<p>cast method?</p>",
        "id": 179914298,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945854
    },
    {
        "content": "<p>pointers have a cast method now</p>",
        "id": 179914309,
        "sender_full_name": "Lokathor",
        "timestamp": 1572945869
    },
    {
        "content": "<p>ah, that keeps mutability the same but changes the type?</p>",
        "id": 179914331,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945891
    },
    {
        "content": "<p>yes</p>",
        "id": 179914336,
        "sender_full_name": "Lokathor",
        "timestamp": 1572945898
    },
    {
        "content": "<p>maybe we should have a clippy lint against mutability-changing raw ptr casts... <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> has done a lot of safety clippy work recently I hear, does this seem like an interesting case?</p>",
        "id": 179914397,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945935
    },
    {
        "content": "<p>I have seen at least 2 or 3 cases over the last few weeks for a const-to-mut raw ptr cast being the give-away for mutation of shared data</p>",
        "id": 179914419,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945957
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/issues/4771\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/issues/4771\">https://github.com/rust-lang/rust-clippy/issues/4771</a></p>",
        "id": 179914475,
        "sender_full_name": "Lokathor",
        "timestamp": 1572945982
    },
    {
        "content": "<blockquote>\n<p>this is considered mutation of shared data, a big no-go.</p>\n</blockquote>\n<p>In a <code>&amp;mut T -&gt; &amp;T -&gt; &amp;mut T</code> chain, as long as the <code>&amp;T</code> is not \"duplicated\", it is still unique, but the current model does not account for that.</p>",
        "id": 179916459,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947675
    },
    {
        "content": "<p>(which is a fair thing to do, and that means that this code is wrong according to that model)</p>",
        "id": 179916513,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947760
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>this is considered mutation of shared data, a big no-go.</p>\n</blockquote>\n<p>In a <code>&amp;mut T -&gt; &amp;T -&gt; &amp;mut T</code> chain, as long as the <code>&amp;T</code> is not \"duplicated\", it is still unique, but the current model does not account for that.</p>\n</blockquote>\n<p>it's not the <code>&amp;mut</code> that is causing UB here, it's the <code>&amp;T</code></p>",
        "id": 179916553,
        "sender_full_name": "RalfJ",
        "timestamp": 1572947767
    },
    {
        "content": "<p>and <code>&amp;T</code> comes with a promise of immutability</p>",
        "id": 179916558,
        "sender_full_name": "RalfJ",
        "timestamp": 1572947773
    },
    {
        "content": "<p>so, the program is UB because of a violation of immutability.<br>\nthere is indeed no violation of uniqueness here, but that's besides the point.</p>",
        "id": 179916581,
        "sender_full_name": "RalfJ",
        "timestamp": 1572947795
    },
    {
        "content": "<p>I thought the cause of the UB was the <code>&amp;T -&gt; &amp;mut T</code> \"cast\"</p>",
        "id": 179916616,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572947831
    },
    {
        "content": "<p>it is. creating a mutable ref to some memory is considered mutating said memory. <code>&amp;T</code> and pointers derived from it dont allow mutation.</p>",
        "id": 179918286,
        "sender_full_name": "RalfJ",
        "timestamp": 1572949368
    },
    {
        "content": "<p>(and here someone might actually write to that memory later, so even if creating a mutable ref wouldnt be the issue, doing the write later certainly would)</p>",
        "id": 179918339,
        "sender_full_name": "RalfJ",
        "timestamp": 1572949424
    },
    {
        "content": "<p>to allow this the model would need to allow, e.g., writing through a <code>&amp;mut T</code> derived from a <code>&amp;T</code> as long as it is unique and the memory behind it is writeable</p>",
        "id": 179920487,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572951240
    },
    {
        "content": "<p>uh, no, the model doesnt want to allow this</p>",
        "id": 179928102,
        "sender_full_name": "RalfJ",
        "timestamp": 1572958069
    },
    {
        "content": "<p>allowing this would kill all the useful optimizations we have for <code>&amp;T</code></p>",
        "id": 179928110,
        "sender_full_name": "RalfJ",
        "timestamp": 1572958078
    },
    {
        "content": "<p>you must be able to pass an <code>&amp;T</code> to unknown code and know for sure that it will not be mutated</p>",
        "id": 179928163,
        "sender_full_name": "RalfJ",
        "timestamp": 1572958092
    },
    {
        "content": "<p>this is not a model bug. it is an explicit design goal of the rust memory model to make this code UB. and that has been the case from the start, hence all this talking about shared references being read-only and <code>UnsafeCell</code> to make the exception explicit to the compiler.</p>",
        "id": 179928185,
        "sender_full_name": "RalfJ",
        "timestamp": 1572958131
    },
    {
        "content": "<p>in this case no unknown code is involved though</p>",
        "id": 179942334,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572967601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah, mutability-changing raw ptr casts sound like a thing we'd like to lint against. <br>\nActually, why not have <code>rustc</code> itself lint against that, as well as other obviously gross misuse such as the eternally beautiful <code>MaybeUninit::uninit().assume_init()</code> one-liner?</p>",
        "id": 179967908,
        "sender_full_name": "Shnatsel",
        "timestamp": 1572982291
    },
    {
        "content": "<p>Clippy is great, but kind of optional, and I want some tool to yell at people unconditionally whenever they try anything like that.</p>",
        "id": 179968055,
        "sender_full_name": "Shnatsel",
        "timestamp": 1572982374
    },
    {
        "content": "<blockquote>\n<p>in this case no unknown code is involved though</p>\n</blockquote>\n<p>I dont see what that has to do with anything. the R-AM has no notion of \"unknown code\" that would affect execution behavior.</p>",
        "id": 179969489,
        "sender_full_name": "RalfJ",
        "timestamp": 1572983223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> such lints could still start in clippy and then be moved if they prove useful</p>",
        "id": 179969519,
        "sender_full_name": "RalfJ",
        "timestamp": 1572983248
    },
    {
        "content": "<p>I dont know if we have a strategy for lints aimed at unsafe code in rustc itself, but having a pool of useful ones in clippy would help ;)</p>",
        "id": 179969548,
        "sender_full_name": "RalfJ",
        "timestamp": 1572983279
    },
    {
        "content": "<p>also <code>MaybeUninit::uninit().assume_init()</code> isnt always wrong...</p>",
        "id": 179969598,
        "sender_full_name": "RalfJ",
        "timestamp": 1572983290
    },
    {
        "content": "<p>we do these days lint against it if it is used at a \"bad\" type... well, we will once <a href=\"https://github.com/rust-lang/rust/pull/66044\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66044\">https://github.com/rust-lang/rust/pull/66044</a> lands</p>",
        "id": 179969630,
        "sender_full_name": "RalfJ",
        "timestamp": 1572983313
    },
    {
        "content": "<p>Opened Clippy lint request: <a href=\"https://github.com/rust-lang/rust-clippy/issues/4774\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/issues/4774\">https://github.com/rust-lang/rust-clippy/issues/4774</a><br>\nAnd a compiler warning request: <a href=\"https://github.com/rust-lang/rust/issues/66136\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66136\">https://github.com/rust-lang/rust/issues/66136</a></p>",
        "id": 179972405,
        "sender_full_name": "Shnatsel",
        "timestamp": 1572985054
    },
    {
        "content": "<p>maybe in the future dont open two issues with the same text at the same time though^^</p>",
        "id": 179974861,
        "sender_full_name": "RalfJ",
        "timestamp": 1572986392
    },
    {
        "content": "<p>that leads to lots of duplicate discussion</p>",
        "id": 179974871,
        "sender_full_name": "RalfJ",
        "timestamp": 1572986399
    },
    {
        "content": "<p>Yeah good point. Sorry about that.</p>",
        "id": 179975482,
        "sender_full_name": "Shnatsel",
        "timestamp": 1572986743
    },
    {
        "content": "<blockquote>\n<p>I dont see what that has to do with anything. the R-AM has no notion of \"unknown code\" that would affect execution behavior.</p>\n</blockquote>\n<p>You brought unknown code up:  \"you must be able to pass an &amp;T to unknown code and know for sure that it will not be mutated\" . I don't know what that has to do with anything either, my example has no unknown code:</p>",
        "id": 180028123,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573044498
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span>: <span class=\"kt\">i32</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 180028336,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573044654
    },
    {
        "content": "<p>So I don't know why this example needs to be UB \"because of unknown code\".</p>",
        "id": 180028539,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573044812
    },
    {
        "content": "<p>AFAICT it is not doing anything that cannot be made defined behavior. The only valid argument I see to make this undefined is that it simplifies the design.</p>",
        "id": 180028574,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573044841
    },
    {
        "content": "<p>The rules of the R-AM need to work well for <em>all</em> programs. The rule change you proposed makes them not work well for all programs (greatly diminishes optimization potential when unknown code is involved, which is the norm). In theory you could try to fix this by making a <em>different</em> proposal which somehow makes your specific program not-UB but leaves programs where \"unknown code is involved\" also UB, but that is not what you did so far and there are several reasons to expect such attempts to fail (e.g. as Ralf said, there's no notion of \"unknown code\" in R-AM terms).</p>",
        "id": 180044448,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573054865
    },
    {
        "content": "<p>I'm not proposing any rules. I said that I see _a lot_ of code like the one @lokathor wrote, both in the wild and in the standard library, and that a lot of people expect <code>&amp;mut T as &amp;T as &amp;mut T</code> to be a nop, instead of instant UB. That UB does not buy us anything in such code optimization wise, and at least with the current backends and optimizations, bugs due to it only show up on miri.</p>",
        "id": 180061934,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573064745
    },
    {
        "content": "<p>Its hard to explain to a user that wrote such code why it is UB, what can go wrong, and why they need to fix it, when in these particular situations absolutely nothing can go wrong.</p>",
        "id": 180062524,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573065078
    },
    {
        "content": "<p>I agree that the current rules buy us optimization in some other code, but they do not buy us any optimizations in examples like the above, which apparently are quiet common.</p>",
        "id": 180062766,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573065229
    },
    {
        "content": "<blockquote>\n<p>to allow this the model would need to allow, e.g., writing through a <code>&amp;mut T</code> derived from a <code>&amp;T</code> as long as it is unique and the memory behind it is writeable</p>\n</blockquote>\n<p>this is what I was referring to</p>",
        "id": 180066899,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573067679
    },
    {
        "content": "<p>In any case, the informed opinion that there's most likely no decent (e.g., comprehensible, implementable) rule set that simultaneously (1) does not have the UB you're complaining about in those specific programs, and (2) does not lose optimization power on other programs, stands and will almost certainly continue to stand unless you (or someone else, hypothetically) convincingly challenges it. It's all good and well to point out a downside of the plan of record but you can't expect that downside to be avoided if nobody can offer a better alternative.</p>",
        "id": 180067825,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1573068336
    },
    {
        "content": "<p>I don't have an alternative that satisfies all other constraints</p>",
        "id": 180147323,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573143120
    },
    {
        "content": "<blockquote>\n<p>That UB does not buy us anything in such code optimization wise</p>\n</blockquote>\n<p>you mean UB for that <em>specific</em> snippet of code, right? because what makes this UB is the general rule not to write through shared references and their descendants. and <em>that UB</em> certainly buys us <em>a lot</em> in terms of optimizations.</p>\n<p>this is like pointing at <code>*(0usize as *mut i32) = 0</code> and saying \"well that UB doesn't buy us anything\". that's true in a very literal interpretation of the statement, but that's also failing to take into account why this is UB in the first place.</p>",
        "id": 180905844,
        "sender_full_name": "RalfJ",
        "timestamp": 1573898225
    },
    {
        "content": "<blockquote>\n<p>a lot of people expect &amp;mut T as &amp;T as &amp;mut T to be a nop</p>\n</blockquote>\n<p>a lot of people also expect uninit memory to be \"just some random bytes\", or they expect <code>inttoptr(ptrtoint(ptr))</code> to be a NOP. turns out a lot of people are just wrong about some basic facts of how Rust, and C and C++, work. we should try to educate them as best we can.</p>",
        "id": 180905851,
        "sender_full_name": "RalfJ",
        "timestamp": 1573898280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I am trying to figure out what exactly to lint against in the Clippy issue about <code>_.as_ptr() as *mut _</code> now that a core Clippy contributor is taking up implementation, but I feel I am in over my head. Could you step in and clarify which patterns should be linted against?<br>\n<a href=\"https://github.com/rust-lang/rust-clippy/issues/4774\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/issues/4774\">https://github.com/rust-lang/rust-clippy/issues/4774</a></p>",
        "id": 183378127,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576256188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> there were a lot of responses in that thread, are there still open questions?<br>\n<a href=\"https://github.com/rust-lang/rust-clippy/issues/4774#issuecomment-565651216\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/issues/4774#issuecomment-565651216\">https://github.com/rust-lang/rust-clippy/issues/4774#issuecomment-565651216</a> is accurate.</p>",
        "id": 183447060,
        "sender_full_name": "RalfJ",
        "timestamp": 1576339666
    },
    {
        "content": "<p>If the summary is accurate no further input is needed. Thanks!</p>",
        "id": 183447473,
        "sender_full_name": "Shnatsel",
        "timestamp": 1576340176
    }
]