[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span>  to me the current notation for <code>Slice&lt;T&gt;</code> and the trait objects aren't very human readable</p>",
        "id": 151625178,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544722944
    },
    {
        "content": "<p>When I see <code>Slice&lt;'a, T&gt; { ptr: &amp;'a T, len: usize }</code> I  wonder: \"Does the pointer need to be valid?\", \"Does T matter?\", \"Does <code>'a</code> matter?\", \"Does any of this changes from <code>&amp;[T]</code> to <code>*[T]</code>?\"etc.</p>",
        "id": 151625203,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544722976
    },
    {
        "content": "<p>But none of these questions are relevant for \"representation\".</p>",
        "id": 151625220,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544722997
    },
    {
        "content": "<p>I admit to being distracted by the use of \"safe types\" as well</p>",
        "id": 151625268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723035
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Slice</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">DynObject</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vtable</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>does not raise these questions for me.</p>",
        "id": 151625325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544723060
    },
    {
        "content": "<p>I tried writing it using <code>*T</code>, but I found that difficult to read, due to having to specify <code>*mut</code> or <code>*const</code>.</p>",
        "id": 151625896,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1544723581
    },
    {
        "content": "<p>I ended up using <code>u8</code> rather than <code>()</code> just to avoid ZSTs too.</p>",
        "id": 151625930,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1544723621
    },
    {
        "content": "<p>it seems like a minor point we can revisit -- maybe it's ok just to say \"pair of a pointer and length\", roughly like so</p>",
        "id": 151626076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723750
    },
    {
        "content": "<p>I feel like once we have some idea what the \"invariants\" are we'll be in a better position to revisit this</p>",
        "id": 151626130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544723769
    },
    {
        "content": "<p>I agree with you that the lifetimes are confusing though.</p>",
        "id": 151626131,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1544723770
    },
    {
        "content": "<p>is the alignment of pointers the same as <code>usize</code> ?</p>",
        "id": 151626155,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544723797
    },
    {
        "content": "<p>if so, maybe we can just <code>usize</code> instead of pointers - I agree that the mutability of the pointer is irrelevant too, and that the <code>()</code> ZST type can be confusing as well =/</p>",
        "id": 151626218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544723864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I think it is, but then that's also confusing, as \"morally\" ptr is a pointer, not an integer. Sigh.</p>",
        "id": 151626423,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1544724010
    },
    {
        "content": "<p>How about we use <code>*T</code> and put in some words to the \"terminology\" that we elide <code>mut</code> and <code>const</code> where they don't matter?</p>",
        "id": 151626462,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1544724046
    },
    {
        "content": "<p>I don't really mind strongly enough about this, we can probably amend this later anyways, or when wording the final RFC. Do what you think its best</p>",
        "id": 151626490,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544724087
    },
    {
        "content": "<p>Will do!</p>",
        "id": 151626500,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1544724100
    },
    {
        "content": "<p>Done.</p>",
        "id": 151626807,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1544724344
    }
]