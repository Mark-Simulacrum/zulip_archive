[
    {
        "content": "<p>I'm curious if <a href=\"https://github.com/TimelyDataflow/abomonation\">https://github.com/TimelyDataflow/abomonation</a> will work with strict provenance or requires changes.</p>",
        "id": 276297244,
        "sender_full_name": "bjorn3",
        "timestamp": 1648021399
    },
    {
        "content": "<p>I don't think abomonation was ever considered \"sound\", because AFAICT it already does the no-go \"transmute between pointers and integers\", and whatnot</p>",
        "id": 276313414,
        "sender_full_name": "eddyb",
        "timestamp": 1648031749
    },
    {
        "content": "<p>As far as I understand abomonation is wildly unsound. As in \"none of its tests pass under miri\" unsound.</p>",
        "id": 276315695,
        "sender_full_name": "mejrs",
        "timestamp": 1648032897
    },
    {
        "content": "<p>Abomonation is so wildly unsound that its test suite doesn't even get to the aliasing checking parts of Miri, so I don't think it is worth considering.</p>",
        "id": 276338877,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648044816
    },
    {
        "content": "<p>It fails because of alignment problems, and in any case I wouldn't suggest using abomonation because everywhere I've seen it used also trips over the same alignment problems, and the whole design encourages leaking pointer addresses into serialized data.</p>",
        "id": 276339077,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648044905
    },
    {
        "content": "<blockquote>\n<p>transmute between pointers and integers</p>\n</blockquote>\n<p>I looked at abomonation and it looks like it's actually isn't <em>that</em> bad â€“ looks like all the pointer casts are just between different kinds of pointers. <a href=\"https://github.com/TimelyDataflow/abomonation/pull/43\">With some tweaks</a> I was even able to make tests pass under miri (well, needed to disable alignment checking (and validation, which turns out also checks alignment))</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"n\">MIRIFLAGS</span><span class=\"o\">='-</span><span class=\"n\">Zmiri</span><span class=\"o\">-</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">alignment</span><span class=\"o\">-</span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Zmiri</span><span class=\"o\">-</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">validation</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Zmiri</span><span class=\"o\">-</span><span class=\"n\">tag</span><span class=\"o\">-</span><span class=\"n\">raw</span><span class=\"o\">-</span><span class=\"n\">pointers</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">miri</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So... while abomonation has its sins (mostly reading padding &amp; totally ignoring alignment), I think it's actually well-behaved wrt aliasing &amp; provenance (or at least, there's nothing inherent in its design that would prevent that)</p>",
        "id": 276388028,
        "sender_full_name": "krdln",
        "timestamp": 1648063886
    },
    {
        "content": "<p>hmm if it removes provenance first by replacing pointers in memory with plain integers, maybe it could work, though then it can't use Rust types because it would be creating invalid <code>&amp;T</code>s and whatnot</p>",
        "id": 276390631,
        "sender_full_name": "eddyb",
        "timestamp": 1648065241
    },
    {
        "content": "<p>(I was misremembering its design as \"it serializes the data as-is and then patches it up when loading\", but I guess that's wrong?)</p>",
        "id": 276390681,
        "sender_full_name": "eddyb",
        "timestamp": 1648065249
    },
    {
        "content": "<p>Not sure about abomonation. That design is what blender does though. It even fixes structs when fields are added or removed or when the byte order or pointer sizes change.</p>",
        "id": 276390833,
        "sender_full_name": "bjorn3",
        "timestamp": 1648065306
    },
    {
        "content": "<p>if you limit yourself to well-aligned pointers you can treat the entire chunk of memory as a <code>[MaybeUninit&lt;*mut T&gt;]</code> (and basically replace every pointer with <code>ptr::invalid(p.offset_from(chunk_base))</code>) which simplifies the problem massively</p>",
        "id": 276391080,
        "sender_full_name": "eddyb",
        "timestamp": 1648065434
    },
    {
        "content": "<p>downside is... you have to know where the pointers are - but you should be able to derive that</p>",
        "id": 276391100,
        "sender_full_name": "eddyb",
        "timestamp": 1648065446
    },
    {
        "content": "<p>I sketched something recently that would let you efficiently \"rehydrate\" ridiculous amounts of data generated by a build script, into a <code>static</code>, which did the inverse of that (using <code>union { *T, usize }</code>, which isn't the best option sadly but it works well enough)</p>",
        "id": 276391359,
        "sender_full_name": "eddyb",
        "timestamp": 1648065597
    },
    {
        "content": "<p>(the build script thing is worse because you have a harder time guaranteeing you know where the fields are, and you want to avoid generating ASTs in the first place)</p>",
        "id": 276391565,
        "sender_full_name": "eddyb",
        "timestamp": 1648065656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Abomonation actually doesn't care at all what values of the serialized pointers are (i thought before it needs to know at least offset, but instead, it just relies on ordering), so they could all have the same value, like <code>dangling</code> (true uninit won't fly as it could eg. break tags in options). So, I guess the only problem is \"patching data up when loading\", but when loading, the whole provenance case seems very simple as all pointers are derived from the same allocation.</p>",
        "id": 276395711,
        "sender_full_name": "krdln",
        "timestamp": 1648067465
    },
    {
        "content": "<p>Gah sorry I misread an error at first</p>",
        "id": 276399043,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648068957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125261\">@krdln</span> I'm not sure exactly what you're doing to make the <code>abomonation</code> tests pass. They don't pass due to a provenance problem on this line <a href=\"https://github.com/TimelyDataflow/abomonation/blob/c2b23534549a5aa09a70bb471379bd436a2f27e1/src/lib.rs#L127\">https://github.com/TimelyDataflow/abomonation/blob/c2b23534549a5aa09a70bb471379bd436a2f27e1/src/lib.rs#L127</a></p>\n<p>The problem is that the reference from <code>get_unchecked_mut</code> is a <code>&amp;mut u8</code>, so it can't be reborrowed into a reference where the referent is any larger than 1.</p>",
        "id": 276399220,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648069035
    },
    {
        "content": "<p>This is the error (not sure if this Miri commit is available on nightly Rust yet)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">abomonation</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">127</span>:<span class=\"mi\">30</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">127</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">split1</span><span class=\"p\">.</span><span class=\"n\">get_unchecked_mut</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                              </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                              </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                              </span><span class=\"n\">trying</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">reborrow</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"mi\">1469878</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Unique</span><span class=\"w\"> </span><span class=\"n\">permission</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">alloc310690</span><span class=\"p\">[</span><span class=\"mh\">0x1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">tag</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">exist</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">borrow</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">location</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                              </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">part</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">reborrow</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">alloc310690</span><span class=\"p\">[</span><span class=\"mh\">0x0</span><span class=\"o\">..</span><span class=\"mh\">0x18</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276399425,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648069119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120827\">@Ben Kimock (Saethlin)</span> <a href=\"https://github.com/TimelyDataflow/abomonation/pull/43\">I've linked a PR</a> with the changes I needed to make (which also gets rids of transmutes, but that's kinda orthogonal). So that line in <code>as_ref</code> should simply use <code>as_mut_ref</code> (oh, I see you've edited :)), the other fix was to ditch casting these \"pointers to the first element\" (<code>get_unchecked(0)</code>) and cast a pointer to the whole slice instead. And these two fixes were enough</p>",
        "id": 276400178,
        "sender_full_name": "krdln",
        "timestamp": 1648069415
    },
    {
        "content": "<p>That is very cool! In my experience, there are a lot of provenance issues in libraries that are not fundamental so personally I'm much more worried about teaching the rules and working through the backlog of issues we have.</p>\n<p>I think <code>abomonation</code> needs some breaking changes to be usable, but at least this PR fixes some things.</p>",
        "id": 276401968,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648070292
    },
    {
        "content": "<p>Also if people are interested, I think <code>rkyv</code> is a bit complicated from a provenance perspective. It does a bunch of stuff with relative pointers, and it's unclear to me if there's any way to support those.</p>",
        "id": 276402034,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648070335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120827\">Ben Kimock (Saethlin)</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/abomonation.20and.20strict.20provenance/near/276401968\">said</a>:</p>\n<blockquote>\n<p>I think <code>abomonation</code> needs some breaking changes to be usable, but at least this PR fixes some things.</p>\n</blockquote>\n<p>Given that they haven't released (or even made a commit) in years I'm doubtful they want changes, let alone breaking changes.</p>",
        "id": 276414627,
        "sender_full_name": "mejrs",
        "timestamp": 1648077171
    },
    {
        "content": "<p>Idk how to feel about that.<br>\nTbh I would be equally happy to see the whole thing abandoned as I would be to see it patched. At least it has a RustSec advisory, so people who care can't miss that the implementation has problems.</p>",
        "id": 276415184,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648077572
    },
    {
        "content": "<p>Oh, dtolnay is using it. That's unfortunate.</p>",
        "id": 276415373,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648077690
    },
    {
        "content": "<blockquote>\n<p>ditch casting these \"pointers to the first element\" (get_unchecked(0)) and cast a pointer to the whole slice instead</p>\n</blockquote>\n<p><code>as_ptr</code> is a thing on slices, no need to reach for casts ;)</p>",
        "id": 276732186,
        "sender_full_name": "RalfJ",
        "timestamp": 1648309978
    },
    {
        "content": "<p>Though <code>&lt;&amp;mut [T]&gt;::as_ptr</code> is functionally different from <code>&amp;mut [T] as *const T</code> currently.</p>",
        "id": 276732244,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648310044
    },
    {
        "content": "<p>if you want to mutate, use <code>as_mut_ptr</code></p>",
        "id": 276732303,
        "sender_full_name": "RalfJ",
        "timestamp": 1648310157
    },
    {
        "content": "<p>if you dont mutate they should be equivalent</p>",
        "id": 276732342,
        "sender_full_name": "RalfJ",
        "timestamp": 1648310165
    },
    {
        "content": "<p>if you're using *const T for anything other than Implementing NonNull you're clowning on yourself imo</p>",
        "id": 276732435,
        "sender_full_name": "Gankra",
        "timestamp": 1648310291
    },
    {
        "content": "<p>Isn't NonNull a *mut T internally though?</p>",
        "id": 276732459,
        "sender_full_name": "Lokathor",
        "timestamp": 1648310356
    },
    {
        "content": "<p>Nope, since covariance.</p>",
        "id": 276732467,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648310370
    },
    {
        "content": "<p>it provides a facade of *mut T but contains *const T</p>",
        "id": 276732567,
        "sender_full_name": "Gankra",
        "timestamp": 1648310420
    },
    {
        "content": "<p>because *const T is ~useless but has covariance</p>",
        "id": 276732590,
        "sender_full_name": "Gankra",
        "timestamp": 1648310454
    },
    {
        "content": "<p>I've certainly used *const in foreign function signatures</p>",
        "id": 276732611,
        "sender_full_name": "Lokathor",
        "timestamp": 1648310475
    },
    {
        "content": "<p>yeah that's the other motivation</p>",
        "id": 276732618,
        "sender_full_name": "Gankra",
        "timestamp": 1648310487
    },
    {
        "content": "<p>I've used <code>*const T</code> in PhantomData for variance xlang_abi::traits::DynPtr.</p>",
        "id": 276732624,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648310507
    },
    {
        "content": "<p>basically if I could go back in time I would make rust only have *T but you could add the mut and const in a function signature for reflecting the FFI API</p>",
        "id": 276732628,
        "sender_full_name": "Gankra",
        "timestamp": 1648310518
    },
    {
        "content": "<p>this and other great new features in rust 3.2</p>",
        "id": 276732703,
        "sender_full_name": "Lokathor",
        "timestamp": 1648310615
    },
    {
        "content": "<p>this would of course result in disaster in 10 years when someone insists that it's very important for supporting this bespoke architecture where they use that distinction to have totally different reprs/semantics for rodata and actual data <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 276732765,
        "sender_full_name": "Gankra",
        "timestamp": 1648310652
    },
    {
        "content": "<p>I wonder about ignominie <a href=\"https://github.com/nox/ignominie\">https://github.com/nox/ignominie</a></p>\n<p>Though I wrote it forever ago to scratch an itch, so I would need to revisit it, write tests that run under miri, etc</p>",
        "id": 277302755,
        "sender_full_name": "nox",
        "timestamp": 1648742213
    },
    {
        "content": "<p><a href=\"https://github.com/nox/ignominie/blob/master/src/lib.rs#L114\">https://github.com/nox/ignominie/blob/master/src/lib.rs#L114</a></p>\n<p>So old it even cares about signaling NaNs. Anyway it's like abomonation IIRC but the input blob contains offsets to the start instead of pointers, etc</p>",
        "id": 277302945,
        "sender_full_name": "nox",
        "timestamp": 1648742288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/abomonation.20and.20strict.20provenance/near/276732765\">said</a>:</p>\n<blockquote>\n<p>this would of course result in disaster in 10 years when someone insists that it's very important for supporting this bespoke architecture where they use that distinction to have totally different reprs/semantics for rodata and actual data <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>Arduino (C++) famously has constant address-space problems with beginners using string constants</p>",
        "id": 277321020,
        "sender_full_name": "riking",
        "timestamp": 1648751061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263648\">nox</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/abomonation.20and.20strict.20provenance/near/277302755\">said</a>:</p>\n<blockquote>\n<p>I wonder about ignominie <a href=\"https://github.com/nox/ignominie\">https://github.com/nox/ignominie</a></p>\n<p>Though I wrote it forever ago to scratch an itch, so I would need to revisit it, write tests that run under miri, etc</p>\n</blockquote>\n<p>I'll do the Miri thing if you write tests or just code in general that exercises it</p>",
        "id": 277331880,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648756555
    }
]