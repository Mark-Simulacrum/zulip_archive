[
    {
        "content": "<p>I wrote some slides, all comments welcome</p>",
        "id": 165259663,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557413583
    },
    {
        "content": "<p><a href=\"https://docs.google.com/presentation/d/1m_HxkTXWsUpX0mYGpP07eHRAzbbl-o6WQgUkb7gF-oA\" target=\"_blank\" title=\"https://docs.google.com/presentation/d/1m_HxkTXWsUpX0mYGpP07eHRAzbbl-o6WQgUkb7gF-oA\">https://docs.google.com/presentation/d/1m_HxkTXWsUpX0mYGpP07eHRAzbbl-o6WQgUkb7gF-oA</a></p>",
        "id": 165259690,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557413596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> in particular, is the diagram on slide 13 horribly inaccurate?</p>",
        "id": 165259755,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557413641
    },
    {
        "content": "<p>(I'm trying to summarize stacked borrows in one slide, which is tricky.)</p>",
        "id": 165259866,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557413688
    },
    {
        "content": "<p>Also, are there other topics I should add to the laundry list on slide 15?</p>",
        "id": 165260099,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557413852
    },
    {
        "content": "<p>oh dear, the contextual definition of unsafety^^ fun stuff</p>",
        "id": 165261119,
        "sender_full_name": "RalfJ",
        "timestamp": 1557414429
    },
    {
        "content": "<p>(there might have been other ways to break josephine with an otherwise-safe abstraction pre-1.20, but that doesnt change the point you are making so whatever)</p>",
        "id": 165261206,
        "sender_full_name": "RalfJ",
        "timestamp": 1557414483
    },
    {
        "content": "<p>re: Stacked Borrows, the \"shared\"/\"unique\" labels are not really on the edges from the ptr to the stack... those would be just IDs. the stack then does 2 things, it orders the ID and it says which of them are Unique, SharedReadOnly, SharedReadWrite</p>",
        "id": 165261345,
        "sender_full_name": "RalfJ",
        "timestamp": 1557414576
    },
    {
        "content": "<blockquote>\n<p>Also, are there other topics I should add to the laundry list on slide 15?</p>\n</blockquote>\n<p>not sure how specific you want to get. \"developing a language spec\"? \"figuring out how our semantics relate to LLVM's\"?</p>",
        "id": 165261526,
        "sender_full_name": "RalfJ",
        "timestamp": 1557414681
    },
    {
        "content": "<p>There's an argument that Josephine got broken by <code>may_dangle</code>, but you have to spec-lawyer the <code>may_dangle</code> requirements, but this sort of complicates the presentation, which is making the point \"yes, this can happen in the wild\".</p>",
        "id": 165262110,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415090
    },
    {
        "content": "<p>I was pleasantly surprised to discover that the contextual defn is no longer in the rustonomicon / lang spec, the wording now is vaguer.</p>",
        "id": 165262167,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415133
    },
    {
        "content": "<p>I was thinking of a lib that implements <code>ManuallyDrop</code> by transmuting stuff to byte arrays. IIRC someone pointed to a lib that actually does this for FFI or so...</p>",
        "id": 165262168,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415133
    },
    {
        "content": "<p>True, but that's not in std.</p>",
        "id": 165262199,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415158
    },
    {
        "content": "<p><code>ManuallyDrop</code> is the better-to-understand example anyway</p>",
        "id": 165262211,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415170
    },
    {
        "content": "<p>indeed</p>",
        "id": 165262220,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415176
    },
    {
        "content": "<p>well, having this conflict between 2 user libs makes it even more \"fun\" in some way</p>",
        "id": 165262244,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415191
    },
    {
        "content": "<p>OK, I'm interested in your comment re the diagram trying to explain stacked borrows...</p>",
        "id": 165262313,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415212
    },
    {
        "content": "<p>if the conflict is with libstd, then I guess per default libstd \"wins\" -- at least if the change was vetted by the lang team. but when it's two user libs, uh, we can roll a dice to decide?^^</p>",
        "id": 165262355,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415236
    },
    {
        "content": "<p>I originally had the tags in the pointer nodes rather than on the edges</p>",
        "id": 165262392,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415265
    },
    {
        "content": "<p>which is how it's explained in the blog post,</p>",
        "id": 165262411,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415288
    },
    {
        "content": "<p>but isn't it equivalent to have the tags on the edges?</p>",
        "id": 165262423,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415304
    },
    {
        "content": "<p>which blog post? things changed a bit with <a href=\"https://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html\">https://www.ralfj.de/blog/2019/04/30/stacked-borrows-2.html</a></p>",
        "id": 165262576,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415415
    },
    {
        "content": "<p>I was thinking of stacked-borrows-2.</p>",
        "id": 165262658,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415450
    },
    {
        "content": "<p>the \"tags\" there are just IDs</p>",
        "id": 165262722,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415519
    },
    {
        "content": "<p>no Unique/Shared</p>",
        "id": 165262726,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415522
    },
    {
        "content": "<p>this unique/shared/raw looks a lot like stacked borrows 1</p>",
        "id": 165262846,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415582
    },
    {
        "content": "<p>oh I guess I had v1 and v2 mixed up in my head.</p>",
        "id": 165262852,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415590
    },
    {
        "content": "<p>does miri implement v1 or v2?</p>",
        "id": 165262874,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415611
    },
    {
        "content": "<p>nowadays? v2</p>",
        "id": 165262908,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415634
    },
    {
        "content": "<p>the error msg you copied is from v2</p>",
        "id": 165262914,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415639
    },
    {
        "content": "<p>OK, so I should line up with v2 then.</p>",
        "id": 165262924,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415652
    },
    {
        "content": "<p>In v2 there's no longer metadata in the pointers, just the memory locations, yes?</p>",
        "id": 165263049,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415731
    },
    {
        "content": "<p>well, the metadata is the ID</p>",
        "id": 165263248,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415856
    },
    {
        "content": "<p>so there's still pointer provenance</p>",
        "id": 165263269,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415868
    },
    {
        "content": "<p>but the per-ptr-metadata no longer says \"unique\" or \"shared\" or so. it just says \"18\" or \"25\" or \"&lt;untagged&gt;\".</p>",
        "id": 165263290,
        "sender_full_name": "RalfJ",
        "timestamp": 1557415894
    },
    {
        "content": "<p>Is SharedRW just used for interior mutability?</p>",
        "id": 165263381,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557415945
    },
    {
        "content": "<p>no, also for <code>*mut</code></p>",
        "id": 165263439,
        "sender_full_name": "RalfJ",
        "timestamp": 1557416022
    },
    {
        "content": "<p>*const and *mut are treated differently?</p>",
        "id": 165263529,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557416077
    },
    {
        "content": "<p>yes :/</p>",
        "id": 165263664,
        "sender_full_name": "RalfJ",
        "timestamp": 1557416194
    },
    {
        "content": "<p>they are treated differently by the borrow checker</p>",
        "id": 165263674,
        "sender_full_name": "RalfJ",
        "timestamp": 1557416205
    },
    {
        "content": "<p>so as long as that is the case, I feel it also makes sense for Stacked Borrows, which is like a \"dynamic extension\" of the borrow checker</p>",
        "id": 165263692,
        "sender_full_name": "RalfJ",
        "timestamp": 1557416225
    },
    {
        "content": "<p>TIL</p>",
        "id": 165263706,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557416236
    },
    {
        "content": "<p>/me reads <a href=\"https://github.com/rust-lang/rust/issues/56604#issuecomment-477954315\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56604#issuecomment-477954315\">https://github.com/rust-lang/rust/issues/56604#issuecomment-477954315</a></p>",
        "id": 165263716,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557416242
    },
    {
        "content": "<p>to be clear, the difference is only in what happens when you <em>create</em> the raw ptr (from a ref)</p>",
        "id": 165263718,
        "sender_full_name": "RalfJ",
        "timestamp": 1557416243
    },
    {
        "content": "<p>after that, they behave the same</p>",
        "id": 165263722,
        "sender_full_name": "RalfJ",
        "timestamp": 1557416248
    },
    {
        "content": "<p>lol I can watch you edit :P</p>",
        "id": 165264521,
        "sender_full_name": "RalfJ",
        "timestamp": 1557416823
    },
    {
        "content": "<p>OK, is the current version more in line with stacked borrows v2?</p>",
        "id": 165265873,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557417692
    },
    {
        "content": "<p>the diagram looks great! the comment below is not entirely correct though (\"UB: creating a unique reference to a shared location\")</p>",
        "id": 165266273,
        "sender_full_name": "RalfJ",
        "timestamp": 1557417980
    },
    {
        "content": "<p>if the unique ref was created from x, all would be fine</p>",
        "id": 165266285,
        "sender_full_name": "RalfJ",
        "timestamp": 1557417997
    },
    {
        "content": "<p>the issue is creating a unique ref <em>from an RO pointer</em></p>",
        "id": 165266297,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418012
    },
    {
        "content": "<p>(aka a ptr with an ID that just has RO permission in the stack)</p>",
        "id": 165266303,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> OK, I am now confused...</p>",
        "id": 165266883,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557418451
    },
    {
        "content": "<p>the granting item for creating r is SharedRW isn't it?</p>",
        "id": 165266944,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557418509
    },
    {
        "content": "<p>no. your <code>SharedRW</code> is wrong. (I had missed that.)</p>",
        "id": 165267132,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418650
    },
    {
        "content": "<p>raw-to-raw-casts do nothing</p>",
        "id": 165267135,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418654
    },
    {
        "content": "<p>the interesting action is your <code>&amp;T</code>-to-<code>*const T</code> when <code>q</code> gets created.</p>",
        "id": 165267141,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418665
    },
    {
        "content": "<p>that adds a <code>SharedRO(&lt;untagged&gt;)</code></p>",
        "id": 165267150,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418676
    },
    {
        "content": "<p>Ah, in (p as *const T as *mut T) it's only the SharedRO that gets pushed on the stack, not the sharedRW?</p>",
        "id": 165267385,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557418833
    },
    {
        "content": "<p>Showing the untagged item as just <code>SharedRW</code> is a bit misleading since this tag does not apply to all pointers -- it only applies to untagged ptrs</p>",
        "id": 165267391,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418839
    },
    {
        "content": "<blockquote>\n<p>Ah, in (p as *const T as *mut T) it's only the SharedRO that gets pushed on the stack, not the sharedRW?</p>\n</blockquote>\n<p>correct. no <code>SharedRW</code> ever gets pushed in your example.</p>",
        "id": 165267405,
        "sender_full_name": "RalfJ",
        "timestamp": 1557418856
    },
    {
        "content": "<p>OK, I replaced that by _: SharedRO</p>",
        "id": 165267724,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557419094
    },
    {
        "content": "<p>since the slide no longer has any SharedRW on it, I'm tempted to s/sharedRO/shared/</p>",
        "id": 165267767,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557419131
    },
    {
        "content": "<p>I'd still also fix the sentence at the bottom</p>",
        "id": 165267880,
        "sender_full_name": "RalfJ",
        "timestamp": 1557419200
    },
    {
        "content": "<p>the issue with <code>r</code> is not the location, its the pointer it comes from</p>",
        "id": 165267905,
        "sender_full_name": "RalfJ",
        "timestamp": 1557419222
    },
    {
        "content": "<p>Oh I see, so when doing <code>q.as_mut()</code> we are looking for a granting item with tag <code>_: Unique</code> or <code>_: SharedRW</code> and there is none.</p>",
        "id": 165268267,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557419474
    },
    {
        "content": "<p>yes. (and it's <code>_</code> because that's <code>q</code>'s tag)</p>",
        "id": 165268635,
        "sender_full_name": "RalfJ",
        "timestamp": 1557419782
    },
    {
        "content": "<p>that's not \"requires a  _: unique\" though</p>",
        "id": 165268666,
        "sender_full_name": "RalfJ",
        "timestamp": 1557419822
    },
    {
        "content": "<p>if you dont want to mention <code>SharedRW</code>, maybe state the negative? \"UB: Creating a unique reference from a <code>SharedRO</code>-pointer\"</p>",
        "id": 165268701,
        "sender_full_name": "RalfJ",
        "timestamp": 1557419862
    },
    {
        "content": "<p>hmm, I guess I elided too much by getting rid of sharedRW.</p>",
        "id": 165268785,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557419927
    },
    {
        "content": "<p>BTW, while I was writing the slides, I was wondering if there's a model where we consider pointers to have Drop code that has no effect on the state, but updates the shadow state? Then all the \"removing entries from the stack\" would be done by drop, not by accesses.</p>",
        "id": 165270499,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557421205
    },
    {
        "content": "<p>This model would have more UB, as it would depend on when the compiler inserts drops for pointers, which it can only do using static information .</p>",
        "id": 165270591,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557421290
    },
    {
        "content": "<p>Oops should have tagged <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> re ^</p>",
        "id": 165271697,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557422230
    },
    {
        "content": "<p>The venue for the talk is <a href=\"https://www.meetup.com/Chicago-Rust-Meetup/events/260918979/\" target=\"_blank\" title=\"https://www.meetup.com/Chicago-Rust-Meetup/events/260918979/\">https://www.meetup.com/Chicago-Rust-Meetup/events/260918979/</a></p>",
        "id": 165271713,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557422258
    },
    {
        "content": "<blockquote>\n<p>BTW, while I was writing the slides, I was wondering if there's a model where we consider pointers to have Drop code that has no effect on the state, but updates the shadow state? Then all the \"removing entries from the stack\" would be done by drop, not by accesses.</p>\n</blockquote>\n<p>I haven't thought about this. It wouldn't really be implementable in Miri because there's no actual code saying when that \"virtual drop\" happens. I mean, <code>&amp;T</code> are even <code>Copy</code>, that kind of contradicts the idea of them being <code>Drop</code> as well. And then there is the question of what happens when someone <code>mem::forget</code>'s?</p>",
        "id": 165274093,
        "sender_full_name": "RalfJ",
        "timestamp": 1557424324
    },
    {
        "content": "<p>also with NLL we do have ptrs that get invalidated before they would get dropped. so it dosn't seem to me like it'd be a good fit.</p>",
        "id": 165274121,
        "sender_full_name": "RalfJ",
        "timestamp": 1557424352
    },
    {
        "content": "<blockquote>\n<p>The venue for the talk is <a href=\"https://www.meetup.com/Chicago-Rust-Meetup/events/260918979/\" target=\"_blank\" title=\"https://www.meetup.com/Chicago-Rust-Meetup/events/260918979/\">https://www.meetup.com/Chicago-Rust-Meetup/events/260918979/</a></p>\n</blockquote>\n<p>cool!</p>",
        "id": 165274126,
        "sender_full_name": "RalfJ",
        "timestamp": 1557424358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> ^</p>",
        "id": 165274134,
        "sender_full_name": "RalfJ",
        "timestamp": 1557424373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yes, you'd have to introduce a type <code>&amp;immut T</code> which is like <code>&amp;T</code> but doesn't implement <code>Copy</code>, and have all <code>&amp;mut T</code> to <code>&amp;T</code> coercions go via <code>&amp;immut T</code>.</p>",
        "id": 165275088,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557425099
    },
    {
        "content": "<p>That way <code>&amp;immut T</code> could have drop code.</p>",
        "id": 165275116,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557425119
    },
    {
        "content": "<p>And grr, <code>mem::forget</code>, grr.</p>",
        "id": 165275146,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557425145
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> yes, you'd have to introduce a type <code>&amp;immut T</code> which is like <code>&amp;T</code> but doesn't implement <code>Copy</code>, and have all <code>&amp;mut T</code> to <code>&amp;T</code> coercions go via <code>&amp;immut T</code>.</p>\n</blockquote>\n<p>I dont think that'd be enough; we still also have to do retagging for regulat <code>&amp;T</code> to be sure we really have a pointer with the right permissions</p>",
        "id": 165275348,
        "sender_full_name": "RalfJ",
        "timestamp": 1557425313
    },
    {
        "content": "<p>I wrote a very rough first draft implementation at <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=79c808e6d9d84a4176083b517d1680db\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=79c808e6d9d84a4176083b517d1680db\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=79c808e6d9d84a4176083b517d1680db</a></p>",
        "id": 165282875,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557431025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> no interior mutability, checks for use-after-free etc. But it does have the idea of using drop code to update shadow state on <code>&amp;immut T</code>. The shadow state is very simple, just one bit!</p>",
        "id": 165283075,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557431165
    },
    {
        "content": "<p>My first attempt in 2017, \"Types as Contracts\", relied on <code>EndLifetime</code> -- knowing in the code when a lifetime ended. I kind of abandoned that idea after my experience there.  But this is somehow different, it per-reference, not per-lifetime.</p>",
        "id": 165283157,
        "sender_full_name": "RalfJ",
        "timestamp": 1557431273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yes, this is sort of like using explicit markers for lifetimes, but using them to explicitly freeze / thaw a mutable reference.</p>",
        "id": 165283498,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557431534
    },
    {
        "content": "<p>Of course really you'd want each byte to have its own shadow state, not just each object.</p>",
        "id": 165283582,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557431625
    },
    {
        "content": "<p>still, to support NLL this pretty much requires the borrow checker to mark in the code where lifetimes end. And with pollonius, not even the borrow checker knows.</p>",
        "id": 165314965,
        "sender_full_name": "RalfJ",
        "timestamp": 1557472296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  Since the lifetime ends are just used to update the shadow state, can the spec just give the compiler the freedom to add them wherever it likes? This doesn't help miri though :/</p>",
        "id": 165346354,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557502720
    },
    {
        "content": "<p>that also sounds rather inconvenient when you try to argue that your unsafe code is correct -- which crucially depends on the shadow state</p>",
        "id": 165350787,
        "sender_full_name": "RalfJ",
        "timestamp": 1557506151
    },
    {
        "content": "<p>I dont think the compiler should have the freedom to insert code whereever it likes if that code can cause UB^^</p>",
        "id": 165350848,
        "sender_full_name": "RalfJ",
        "timestamp": 1557506175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> True, but it's the same annoyance as reasoning about any program with drop code.</p>",
        "id": 165487782,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557706170
    },
    {
        "content": "<p>I wrote a cleaner version of this at <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=90773fba2b71073841015190bc8c1fdb\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=90773fba2b71073841015190bc8c1fdb\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=90773fba2b71073841015190bc8c1fdb</a></p>",
        "id": 165487785,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557706199
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> True, but it's the same annoyance as reasoning about any program with drop code.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span>  not really... the other drop code is real, and when we are working on the MIR it is explicit. that is one reason why I like to work on the MIR level.</p>",
        "id": 165517881,
        "sender_full_name": "RalfJ",
        "timestamp": 1557745642
    },
    {
        "content": "<p>Also, I think there is not enough information here to handle interior mutability -- in particular, code like this where <code>&amp;</code> and <code>&amp;mut</code> alias and both can be reborrowed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">aliasing_mut_and_shr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">rc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aliasing</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_escape_to_raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_shr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// also turning this into a frozen ref now must work</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">aliasing</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">aliasing</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_escape_to_raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// this must NOT unfreeze</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_shr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">rc</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// this must NOT unfreeze</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bmut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">bmut</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">bmut</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">rc</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"o\">+</span><span class=\"mi\">12</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 165518007,
        "sender_full_name": "RalfJ",
        "timestamp": 1557745773
    },
    {
        "content": "<p>I think we should move this to a new topic...</p>",
        "id": 165536193,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1557759496
    },
    {
        "content": "<p>I gave the talk, it seemed to go well.</p>",
        "id": 166912080,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559226334
    },
    {
        "content": "<p>awesome :)</p>",
        "id": 166912931,
        "sender_full_name": "RalfJ",
        "timestamp": 1559226948
    },
    {
        "content": "<p>The talk was recorded, though there may have been issues with the audio, so we shall see if its usable. I hope I didn't say anything too controversial!</p>",
        "id": 166913326,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559227180
    },
    {
        "content": "<p>I did get a comment afterwards of \"boy you don't like C APIs\", which is probably true.</p>",
        "id": 166913422,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559227223
    }
]