[
    {
        "content": "<blockquote>\n<p>AtomicCell&lt;T&gt; could use ptr::write_fields to ensure that the padding bytes of the T stored inside it is always zero (or some other value)</p>\n</blockquote>\n<p>I don't see how that would work. After moving the <code>AtomicCell</code>, padding would be bad again.</p>",
        "id": 168423842,
        "sender_full_name": "RalfJ",
        "timestamp": 1560878365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> as mentioned, the <code>AtomicCell</code> does not store a <code>T</code>, it stores a <code>usize</code>, or <code> [u8; 16]</code>. <code>T</code> is only used in the API with its users.</p>",
        "id": 168426762,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> but it's supposed to work for <em>any</em> <code>T</code></p>",
        "id": 168426850,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879116
    },
    {
        "content": "<p>so at the least you'd need enogh const generics to make it <code>[u8; mem::size_of::&lt;T&gt;()]</code></p>",
        "id": 168426904,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879133
    },
    {
        "content": "<p>how can it be atomic for any T ?</p>",
        "id": 168426906,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879134
    },
    {
        "content": "<p>once it becomes too large it switches to seqlocks</p>",
        "id": 168426930,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879147
    },
    {
        "content": "<p>I thought it only works for T that fit in actual hardware atomics and then it switches to locks</p>",
        "id": 168426943,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879156
    },
    {
        "content": "<p>but size of <code>AtomicCell&lt;T&gt;</code> must be the same as <code>T</code>, not wasting anything for small types and scaling to any type</p>",
        "id": 168426963,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879173
    },
    {
        "content": "<p>so if it switches to locks, the <code>compare_and_exchange</code> function does something completely different</p>",
        "id": 168426984,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879185
    },
    {
        "content": "<p>maybe have a look at the code :) <a href=\"https://github.com/crossbeam-rs/crossbeam/blob/master/crossbeam-utils/src/atomic/atomic_cell.rs\" target=\"_blank\" title=\"https://github.com/crossbeam-rs/crossbeam/blob/master/crossbeam-utils/src/atomic/atomic_cell.rs\">https://github.com/crossbeam-rs/crossbeam/blob/master/crossbeam-utils/src/atomic/atomic_cell.rs</a></p>",
        "id": 168427018,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879212
    },
    {
        "content": "<p>yes but it still does something wrong because it compares undef</p>",
        "id": 168427037,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879232
    },
    {
        "content": "<p>Does it do a byte-wise comparison for the case in which T is too large ?</p>",
        "id": 168427117,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879260
    },
    {
        "content": "<p>but yes the underlying <code>compare_exchange</code> is only used for small types</p>",
        "id": 168427123,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879265
    },
    {
        "content": "<p>I thought it would just call PartialEq or whatever there</p>",
        "id": 168427128,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879269
    },
    {
        "content": "<p>it also does the bytewise thing, I forgot why</p>",
        "id": 168427174,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879296
    },
    {
        "content": "<p>no idea why that would be necessary, if you take a lock, you don't need to use a hardware CAS, and that also means you can just call PartialEq within the lock</p>",
        "id": 168427246,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879340
    },
    {
        "content": "<p>might be just an artifact of how they set up their framework</p>",
        "id": 168427285,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879362
    },
    {
        "content": "<p>with hardware CAS (for small types), you don't have a choice, you need to do a byte equality, and also you need to compare packing</p>",
        "id": 168427335,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879371
    },
    {
        "content": "<p>right now, it is impossible to avoid passing undef to the hardware CAS, because you don't have a generic way to \"write\" to the padding bytes of a type</p>",
        "id": 168427363,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879407
    },
    {
        "content": "<p>well a failing <code>compare_exchange</code> should also not do any writes</p>",
        "id": 168427411,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879456
    },
    {
        "content": "<p>if it could, we could just have an \"atomic\" variant of <code>freeze</code> and call it a day</p>",
        "id": 168427427,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879468
    },
    {
        "content": "<p>it wouldn't do any writes</p>",
        "id": 168427440,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879481
    },
    {
        "content": "<p>that's what I said earlier today about data race issues</p>",
        "id": 168427481,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879486
    },
    {
        "content": "<p>ah so you want to use <code>[u8; size_of::&lt;T&gt;()]</code> to protect mvoes of <code>AtomicCell</code> and then make all write methods it offers ensure there is no undef</p>",
        "id": 168437264,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879532
    },
    {
        "content": "<p>When you construct an <code>AtomicCell&lt;T&gt;</code>, by calling <code>AtomicCell::new(T)</code>, if <code>T</code> is small enough, you zero the <code>AtomicCell</code> storage, and only overwrite with the content of the input the bytes that are not packing via a <code>ptr::write_fields</code></p>",
        "id": 168437268,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879535
    },
    {
        "content": "<p>no need for a new operation then though. just use <code>freeze</code> on the value after you turned it into a byte array and before you stored it.</p>",
        "id": 168437280,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879544
    },
    {
        "content": "<p>the problem with freeze, is that you are not guaranteed to get the same indeterminate value every time</p>",
        "id": 168437293,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879562
    },
    {
        "content": "<p>IIUC</p>",
        "id": 168437296,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879568
    },
    {
        "content": "<p>while being able to write <code>0</code> to the padding bytes gives you that</p>",
        "id": 168437302,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879581
    },
    {
        "content": "<p>that should no matter. that's why atomic_exchange runs a loop anways.</p>",
        "id": 168437304,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879582
    },
    {
        "content": "<p>the issue with your proposal is figuring out where the padding bytes are^^ have fun doing that in a <code>union</code>...</p>",
        "id": 168437360,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879604
    },
    {
        "content": "<p>in <code>AtomicCell::compare_exchange(T)</code> you copy the input to the stack, zeroing padding, and then do the hardware CAS, and you are guaranteed that the padding bytes of the input and the value stored in the AtomicCell are the same</p>",
        "id": 168437399,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879645
    },
    {
        "content": "<blockquote>\n<p>the issue with your proposal is figuring out where the padding bytes are^^ have fun doing that in a union</p>\n</blockquote>\n<p>unions have no padding AFAICT</p>",
        "id": 168437425,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879673
    },
    {
        "content": "<p>ah no, you are right, ofc they have</p>",
        "id": 168437497,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879732
    },
    {
        "content": "<p>but from the <code>AtomicCell&lt;Union&gt;</code> POV, you can't know which variant of the union is active, so you have to do a bytewise equality on the whole union</p>",
        "id": 168437525,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879769
    },
    {
        "content": "<p>i don't know how that can ever work properly</p>",
        "id": 168437529,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879778
    },
    {
        "content": "<blockquote>\n<p>in <code>AtomicCell::compare_exchange(T)</code> you copy the input to the stack, zeroing padding, and then do the hardware CAS, and you are guaranteed that the padding bytes of the input and the value stored in the AtomicCell are the same</p>\n</blockquote>\n<p>what the implementation already does is, if the first CAS failed but the <code>eq</code> function said that the value <em>was</em> equal, to now continue with the value that was read the first time</p>",
        "id": 168437530,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879779
    },
    {
        "content": "<p>and we freeze only once in the beginning</p>",
        "id": 168437540,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879789
    },
    {
        "content": "<p>so even with padding, in the 2nd iteration we are definitely looking at the same bits</p>",
        "id": 168437550,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879802
    },
    {
        "content": "<p>it needs that loop anyway to handle the case where things with different bits are <code>eq</code></p>",
        "id": 168437556,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879816
    },
    {
        "content": "<p>so this scheme I am proposing works fine, I think, <em>if</em> we can ensure that the data in memory has no <code>Undef</code>, and assuming a (non-atomic) <code>freeze</code> operation</p>",
        "id": 168437623,
        "sender_full_name": "RalfJ",
        "timestamp": 1560879849
    },
    {
        "content": "<p>IIUC the data in memory can only have <code>Undef</code> at padding bytes</p>",
        "id": 168437664,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560879898
    },
    {
        "content": "<p>yes isn't that what we talked about for quite a while now? /confused</p>",
        "id": 168437827,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880005
    },
    {
        "content": "<p>yes, but I don't know how you can ensure that the date in memory has no undef</p>",
        "id": 168437900,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880065
    },
    {
        "content": "<p>your own scheme relies on that...?</p>",
        "id": 168437921,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880081
    },
    {
        "content": "<p>at least, without either a way to either <code>freeze</code> that data, or write to its padding</p>",
        "id": 168437962,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880083
    },
    {
        "content": "<p>I am so confused now</p>",
        "id": 168437981,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880094
    },
    {
        "content": "<p>ah ok, I thought you were suggesting that there was another way</p>",
        "id": 168437988,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880098
    },
    {
        "content": "<p>we described two schemes, yours requires a non-atomic \"zero-all-padding\" operation and mine does not. both assume <code>freeze</code> and both have to maintain the invariant that the data in memory is not <code>Undef</code></p>",
        "id": 168438032,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880129
    },
    {
        "content": "<p>the reason I am saying this is that this invariant that we both need cannot be upheld if <code>AtomicCell</code> has a <code>get_mut</code> operation</p>",
        "id": 168438067,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880156
    },
    {
        "content": "<p>ah, ok, so you are describing your scheme where you freeze the data before putting it into the AtomicCell</p>",
        "id": 168438074,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880161
    },
    {
        "content": "<blockquote>\n<p>ah, ok, so you are describing your scheme where you freeze the data before putting it into the AtomicCell</p>\n</blockquote>\n<p>I am comparing that to yours, yes. you said there'd be problems because the padding might be different each time you freeze and I explained why that is not a problem. I am not sure if you already accepted that explanation.</p>",
        "id": 168438128,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880199
    },
    {
        "content": "<p>yes, the second iteration of the CAS fixes that, if the CAS is specified to propagate the <del>undef</del> frozen bits properly</p>",
        "id": 168438211,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880243
    },
    {
        "content": "<p>FWIW, that loop that I described already exists, it's at <a href=\"https://github.com/crossbeam-rs/crossbeam/blob/43967df8182e1f1ce7baebda36361c933caba39b/crossbeam-utils/src/atomic/atomic_cell.rs#L925\" target=\"_blank\" title=\"https://github.com/crossbeam-rs/crossbeam/blob/43967df8182e1f1ce7baebda36361c933caba39b/crossbeam-utils/src/atomic/atomic_cell.rs#L925\">https://github.com/crossbeam-rs/crossbeam/blob/43967df8182e1f1ce7baebda36361c933caba39b/crossbeam-utils/src/atomic/atomic_cell.rs#L925</a></p>",
        "id": 168438216,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880248
    },
    {
        "content": "<p><code>CAS</code> would not see any undef... ah yes</p>",
        "id": 168438232,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880264
    },
    {
        "content": "<p>frozen bits are just bits</p>",
        "id": 168438238,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880266
    },
    {
        "content": "<p>but all of this is broken by <code>AtomicCell::get_mut</code> :/</p>",
        "id": 168438264,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880293
    },
    {
        "content": "<p>what's the signature of that ?</p>",
        "id": 168438275,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880303
    },
    {
        "content": "<p><code>&amp;mut AtomicCell&lt;T&gt; -&gt; &amp;mut T</code></p>",
        "id": 168438287,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880316
    },
    {
        "content": "<p>which they had, and then they removed it when I called this out, and then they added it again because the concern is too theoretic</p>",
        "id": 168438363,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880344
    },
    {
        "content": "<p>ah so that allows users to write undef into <code>AtomiCell&lt;T&gt;</code></p>",
        "id": 168438387,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880354
    },
    {
        "content": "<p>(well that's my reading of why they added it again anyway, it was a somewhat heated argument because they claimed it was actually sound... but that's besides the point)</p>",
        "id": 168438414,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880368
    },
    {
        "content": "<p>exactly</p>",
        "id": 168438416,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880369
    },
    {
        "content": "<p>instead of going through the <code>AtomicCell::new(T)</code> constructor, which would <code>freeze</code></p>",
        "id": 168438422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880377
    },
    {
        "content": "<p>by overwriting the content, re-undef-ing the padding</p>",
        "id": 168438424,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880378
    },
    {
        "content": "<p>yeah so that has to go, i don't think that can ever work</p>",
        "id": 168438445,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880396
    },
    {
        "content": "<p>that's the current status yes. except that that seems entirely silly, this <em>should</em> be possible.</p>",
        "id": 168438464,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880417
    },
    {
        "content": "<p>unless they add a trait bound to <code>AtomicCell&lt;T&gt;</code> to prevent types with padding, which would be an even larger breaking change</p>",
        "id": 168438468,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880420
    },
    {
        "content": "<p>oh and C++ thinks it is possible, but that doesn't mean anything of course^^</p>",
        "id": 168438473,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880427
    },
    {
        "content": "<p>i mean, if you have <code>undef</code> in the <code>T</code> in the atomic cell, your <code>usize</code> will have <code>undef</code> bytes</p>",
        "id": 168438542,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880447
    },
    {
        "content": "<p>so the CAS intrinsic needs to work on <code>undef</code> bits</p>",
        "id": 168438559,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880463
    },
    {
        "content": "<p><a href=\"https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange\" target=\"_blank\" title=\"https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange\">https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange</a> is a delightful read (the \"Notes\" section in particular)</p>",
        "id": 168438563,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880464
    },
    {
        "content": "<p>yes. that or we have an atomic variant of <code>freeze</code> that does \"not count as a data race\". whatever the heck that means.</p>",
        "id": 168438606,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880489
    },
    {
        "content": "<p>so i'd prefer to avoid specifying what <code>undef == undef</code> means in the \"compare\" part of CAS</p>",
        "id": 168438653,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880522
    },
    {
        "content": "<p>well it can only be <code>undef</code> because we can't implement anything else^^</p>",
        "id": 168438713,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880543
    },
    {
        "content": "<p>sure, but they are doing bit equality</p>",
        "id": 168438755,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880557
    },
    {
        "content": "<p>(or UB of course)</p>",
        "id": 168438771,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880564
    },
    {
        "content": "<p>so an <code>atomic_freeze_and_cas</code> intrinsic would also work, but..</p>",
        "id": 168438858,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880604
    },
    {
        "content": "<p>so that C++ section is clear</p>",
        "id": 168439024,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880731
    },
    {
        "content": "<p>\"clear?\"^^</p>",
        "id": 168439096,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880795
    },
    {
        "content": "<p>an operational semantics is clear</p>",
        "id": 168439105,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880801
    },
    {
        "content": "<p>that's pretty far from one</p>",
        "id": 168439172,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880807
    },
    {
        "content": "<p>i mean, it says that the moment you have padding bits, things might not work, which is also what <code>memcmp</code> says</p>",
        "id": 168439216,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880827
    },
    {
        "content": "<p>\"might not work\", lol</p>",
        "id": 168439320,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880891
    },
    {
        "content": "<p>AFAIK <code>memcmp</code> is just UB on padding</p>",
        "id": 168439335,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880897
    },
    {
        "content": "<p>i think the same applies to CAS</p>",
        "id": 168439354,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880912
    },
    {
        "content": "<p>well, in my reading of the standard it is (and CERT agrees <a href=\"https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange\" target=\"_blank\" title=\"https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange\">https://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange</a> )</p>",
        "id": 168439432,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880933
    },
    {
        "content": "<p>at least in C++, from reading that, i would need to read the standard to be sure, but I don't think the standard specifies the behavior of equality of padding bytes</p>",
        "id": 168439475,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880952
    },
    {
        "content": "<p>CAS dosn't sound like it'd be UB for all padding bytes, it seems to quitw specifically allow being used on structs with padding</p>",
        "id": 168439479,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880954
    },
    {
        "content": "<p>and for unions it doesnt say UB either, it says the value might not converge</p>",
        "id": 168439503,
        "sender_full_name": "RalfJ",
        "timestamp": 1560880966
    },
    {
        "content": "<p>letss see what the standard say, that tone is too loose to be standardese</p>",
        "id": 168439530,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560880988
    },
    {
        "content": "<p><a href=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-17\" target=\"_blank\" title=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-17\">http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-17</a></p>",
        "id": 168439586,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560881033
    },
    {
        "content": "<p>(magic, I tried to fix the topic)</p>",
        "id": 168439652,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881059
    },
    {
        "content": "<p>that text sounds unimplementable. the value representation does not contain padding, right?</p>",
        "id": 168439723,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881116
    },
    {
        "content": "<p>also <a href=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-20\" target=\"_blank\" title=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-20\">http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-20</a></p>",
        "id": 168439770,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881139
    },
    {
        "content": "<p>and OMG <a href=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-23\" target=\"_blank\" title=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-23\">http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-23</a></p>",
        "id": 168439900,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881226
    },
    {
        "content": "<p><a href=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-23\" target=\"_blank\" title=\"http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-23\">http://eel.is/c++draft/atomics.types.generic#atomics.types.operations-23</a></p>",
        "id": 168439968,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560881272
    },
    {
        "content": "<p>how are compilers supposed to implement this? a version of CAS that ignores padding?</p>",
        "id": 168439978,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881277
    },
    {
        "content": "<p>yeah, i was just going to say that</p>",
        "id": 168439981,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560881280
    },
    {
        "content": "<p>no idea, I'll ask for clarification</p>",
        "id": 168440032,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560881293
    },
    {
        "content": "<p>of course for Rust it'd be even worse due to enums</p>",
        "id": 168440039,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881295
    },
    {
        "content": "<p>that basically says that padding is magically not compared by CAS</p>",
        "id": 168440048,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560881305
    },
    {
        "content": "<p>I agree</p>",
        "id": 168440059,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881314
    },
    {
        "content": "<p>i mean, if you have such a magic CAS, then that's obviously the thing to do, but... we don't have those :D</p>",
        "id": 168440071,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560881325
    },
    {
        "content": "<p>let's go ask Intel for a CAS with a bitmask :P</p>",
        "id": 168440084,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881339
    },
    {
        "content": "<p>well the bitmask would be good enough for C but not Rust (and only because they hand-wave their way around union)</p>",
        "id": 168440105,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> by making it mutex-atomic.</p>",
        "id": 168440213,
        "sender_full_name": "nagisa",
        "timestamp": 1560881411
    },
    {
        "content": "<p>well that would still require a way to compare skipping padding</p>",
        "id": 168440247,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> looks like a hardware CAS to me: <a href=\"https://godbolt.org/z/Zj6-Tb\" target=\"_blank\" title=\"https://godbolt.org/z/Zj6-Tb\">https://godbolt.org/z/Zj6-Tb</a></p>",
        "id": 168440469,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881609
    },
    {
        "content": "<p>but I also cant really read assembly^^</p>",
        "id": 168440486,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881627
    },
    {
        "content": "<p>clang seems to call a <code>__atomic_compare_exchange</code> thing</p>",
        "id": 168440605,
        "sender_full_name": "RalfJ",
        "timestamp": 1560881693
    },
    {
        "content": "<p><a href=\"https://cpp.godbolt.org/z/pJX07d\" target=\"_blank\" title=\"https://cpp.godbolt.org/z/pJX07d\">https://cpp.godbolt.org/z/pJX07d</a></p>",
        "id": 168441247,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560882057
    },
    {
        "content": "<p>so GCC at least just compares padding and calls it a day, but from my understanding of the standard, it is not allowed to do that</p>",
        "id": 168441287,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560882079
    },
    {
        "content": "<p>IIUC, the expectation is that C++'s <code>atomic&lt;T&gt;::compare_exchange(T&amp;, T, ..)</code> makes sure that its <code>T</code> has the padding set to some fixed known value, and then on call, it copies its arguments to the stack, sets their padding to the same value, and then does the CAS</p>",
        "id": 168441980,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560882550
    },
    {
        "content": "<p><code>atomic&lt;T&gt;</code> does not let you take a reference to its internal <code>T</code>, so it doesn't have to worry about users breaking this invariant <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 168442007,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560882583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so that link above is from C++2a - in C++11, the result of <code>compare_exchange</code> is indeterminate if the type has padding bytes, and they essentially use  two iterations like in Rust</p>",
        "id": 168443094,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560883266
    },
    {
        "content": "<p><a href=\"http://eel.is/c++draft/atomics.ref.generic#3\" target=\"_blank\" title=\"http://eel.is/c++draft/atomics.ref.generic#3\">http://eel.is/c++draft/atomics.ref.generic#3</a></p>",
        "id": 168444738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560884283
    },
    {
        "content": "<p><code>std::atomic_ref</code> also works around this, by saying that as long as a <code>atomic_ref</code> to a value is live, you can only access the value through an <code>std::atomic_ref</code>.  This means that the <code>atomic_ref</code> can, on creation, write e.g. <code>0</code> to the padding of the value, and then the <code>compare_exchange</code> assumes that all padding is zero</p>",
        "id": 168444838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1560884367
    },
    {
        "content": "<p><a href=\"https://github.com/crossbeam-rs/crossbeam/pull/372\" target=\"_blank\" title=\"https://github.com/crossbeam-rs/crossbeam/pull/372\">https://github.com/crossbeam-rs/crossbeam/pull/372</a> being accepted feels pretty alarming for such an important crate...</p>",
        "id": 168457457,
        "sender_full_name": "centril",
        "timestamp": 1560893550
    },
    {
        "content": "<blockquote>\n<p>that basically says that padding is magically not compared by CAS</p>\n</blockquote>\n<p>Wait a second, I'm pretty sure I've seen a defect report about that, and it should already be merged into the standard (at least into C++20).</p>",
        "id": 168483776,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560929712
    },
    {
        "content": "<p>Let me check.</p>",
        "id": 168483786,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560929728
    },
    {
        "content": "<p>Ok, apparently the change is there, but it does a different thing than I remembered.</p>",
        "id": 168483982,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560929909
    },
    {
        "content": "<p>The paper - <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r3.html\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r3.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r3.html</a>.<br>\n(Previous revisions contain some more discussion, not just wording.)</p>",
        "id": 168484240,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560930163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> do you have links to those previous revisions?</p>",
        "id": 168493547,
        "sender_full_name": "RalfJ",
        "timestamp": 1560938993
    },
    {
        "content": "<p>but that change sounds like exactly the thing that mandates that padding values be magically ignored</p>",
        "id": 168493646,
        "sender_full_name": "RalfJ",
        "timestamp": 1560939083
    },
    {
        "content": "<p>and I don't see how GCC is doing that</p>",
        "id": 168493647,
        "sender_full_name": "RalfJ",
        "timestamp": 1560939088
    },
    {
        "content": "<p>(and for clang I have no idea what <code>__atomic_compare_exchange</code> does)</p>",
        "id": 168493654,
        "sender_full_name": "RalfJ",
        "timestamp": 1560939100
    },
    {
        "content": "<blockquote>\n<p><code>std::atomic_ref</code> also works around this, by saying that as long as a <code>atomic_ref</code> to a value is live, you can only access the value through an <code>std::atomic_ref</code>.  This means that the <code>atomic_ref</code> can, on creation, write e.g. <code>0</code> to the padding of the value, and then the <code>compare_exchange</code> assumes that all padding is zero</p>\n</blockquote>\n<p>that is interesting. they basically have the \"opposite\" of our model here -- start \"non-atomic\" and get a magic \"atomic ref\" if you also want atomic accesses. in Rust it's the other way around.</p>",
        "id": 168493718,
        "sender_full_name": "RalfJ",
        "timestamp": 1560939169
    },
    {
        "content": "<p>also this excludes things that are otherwise fine in the memory model, such as having a racing atomic and non-atomic access.</p>",
        "id": 168493734,
        "sender_full_name": "RalfJ",
        "timestamp": 1560939190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <br>\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r2.html\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r2.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r2.html</a><br>\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r1.html\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r1.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r1.html</a><br>\n<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0528r0.html\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0528r0.html\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0528r0.html</a></p>",
        "id": 168494148,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1560939681
    },
    {
        "content": "<p>thanks!</p>",
        "id": 168497216,
        "sender_full_name": "RalfJ",
        "timestamp": 1560943206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> </p>\n<blockquote>\n<p>and I don't see how GCC is doing that<br>\n(and for clang I have no idea what __atomic_compare_exchange does)</p>\n</blockquote>\n<p>They don't implement the fixed semantics yet.</p>",
        "id": 168601372,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561041513
    },
    {
        "content": "<p>They can implement them by zeroing padding before doing the CAS.</p>",
        "id": 168601391,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561041526
    },
    {
        "content": "<p>That is, when you do an <code>atomic&lt;T&gt;::compare_exchange</code>, the padding of all objects involved is always zeroed. While the CAS compares the all bits, the comparison for the padding then does not affect the result.</p>",
        "id": 168601463,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561041591
    },
    {
        "content": "<p>This is achieved via the <code>atomic&lt;T&gt;</code> and <code>atomic_ref&lt;T&gt;</code> semantics. </p>\n<p><code>atomic&lt;T&gt;</code> is constructed from a <code>T</code>, and owns it - you can only modify its <code>T</code> via the API, there is no <code>get_mut</code>. That is, on construction, the padding is zeroed. When doing <code>atomic&lt;T&gt;::compare_exchange(T&amp;, T, ..)</code> that function moves everything into its stack, zeros the padding, does the CAS, and then writes through the <code>T&amp;</code> back into the user stack frame. </p>\n<p><code>atomic_ref&lt;T&gt;</code> is a <code>T*</code>, but the moment you construct it, you can only modify the <code>T</code> it points to via <code>atomic_ref&lt;T&gt;</code> objects (not necessarily the one you created, you can create more,). On construction,  <code>atomic_ref&lt;T&gt;</code> does an atomic load of <code>T</code>, checks if the padding is zeroed, and if so, we are done. Otherwise, it needs to zero the padding, and do an atomic CAS loop, until it can zero the padding of the object it refers to. Once you have your <code>atomic_ref&lt;T&gt;</code> constructed, you know that it points to a <code>T</code> whose padding have been zeroed, and that you can only access it via <code>atomic_ref&lt;T&gt;</code> objects until the last one dies. So on all other operations, like for <code>atomic&lt;T&gt;</code>, you assume that the padding has been zeroed.</p>",
        "id": 168602216,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042114
    },
    {
        "content": "<blockquote>\n<p>On construction, atomic_ref&lt;T&gt; does an atomic load of T, checks if the padding is zeroed, and if so, we are done. Otherwise, it needs to zero the padding, and do an atomic CAS loop, until it can zero the padding of the object it refers to.</p>\n</blockquote>\n<p>This means that constructing an <code>atomic_ref</code> in parallel with doing a non-atomic read of the same location is UB?</p>",
        "id": 168602434,
        "sender_full_name": "RalfJ",
        "timestamp": 1561042249
    },
    {
        "content": "<p>that sounds like a data-race, so probably yes</p>",
        "id": 168602496,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042295
    },
    {
        "content": "<p>also, depending on the platform, the constructor does not need a CAS loop, e.g., it can just use atomic writes to each padding byte of the pointee, how those overlap with, e.g., larger atomic loads, is platform-dependent</p>",
        "id": 168605485,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561044239
    }
]