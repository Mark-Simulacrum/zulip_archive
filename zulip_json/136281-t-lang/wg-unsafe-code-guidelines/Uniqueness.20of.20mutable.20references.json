[
    {
        "content": "<p>How do y'all feel about code like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">xraw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// we just read, but this still invalidates x2 and hence xraw</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">xraw</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// UB?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I am contemplating whether this should be UB or not. I feel the model gets much nicer if this is UB: when <code>x2</code> gets invalidated, we should also invalidate what got derived from <code>x2</code>. However, then the following is currently also UB:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">xraw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// implicitly a (&amp;mut *x)</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// we just read, but this still invalidates x2 and hence xraw</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">xraw</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// UB?</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 163542543,
        "sender_full_name": "RalfJ",
        "timestamp": 1555490844
    },
    {
        "content": "<p>I would guess that also in LLVM, when a pointer can no longer be used because its <code>noalias</code> scope has ended, pointers derived from it cannot be used any more either? Cc <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span></p>",
        "id": 163542887,
        "sender_full_name": "RalfJ",
        "timestamp": 1555491170
    },
    {
        "content": "<p>dang, this pattern appears in libstd... not explicitly but through the desugaring of <code>x as *mut _</code> as <code>(&amp;mut *x) as *mut _</code>. so it has to be allowed. :/</p>",
        "id": 163545263,
        "sender_full_name": "RalfJ",
        "timestamp": 1555493521
    },
    {
        "content": "<p>I could try to do some syntactic hacks to make <code>x as *mut _</code> not have retagging from the implicit reborrow, but maybe we dont want to be quite so sensitive to reborrows anyway? No idea what that'll mean for LLVM compatibility though.</p>",
        "id": 163546186,
        "sender_full_name": "RalfJ",
        "timestamp": 1555494426
    },
    {
        "content": "<p>but this does mean that if we actually tracked raw pointer identity like LLVM does, you could not cast the same mutable ref to a raw pointer twice and then use both of them. the implicit reborrow of the second cast would certainly have to kill the preexisting raw ptr, after all we do want to know for sure that our newly created mutable reference is unique -- right? do we?</p>",
        "id": 163547178,
        "sender_full_name": "RalfJ",
        "timestamp": 1555495454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> do you want different semantics between <code>let _val = x.1</code> and <code>x.1 = 4;</code> ?</p>",
        "id": 163547593,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555495909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> yes, that is unavoidable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// can still read y after *reading* x (accepted by borrow checker)</span>\n<span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// but certainly not after *writing* x</span>\n</pre></div>",
        "id": 163547671,
        "sender_full_name": "RalfJ",
        "timestamp": 1555495972
    },
    {
        "content": "<p>does that also apply if I write through the pointer first, and then read through the reference ?</p>",
        "id": 163547706,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496037
    },
    {
        "content": "<p>...?</p>",
        "id": 163547775,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496092
    },
    {
        "content": "<p>please post code, I have no idea what you mean</p>",
        "id": 163547827,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// can still read y after *reading* x (accepted by borrow checker)</span>\n<span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// is this ok?</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// if so, is this ok?</span>\n</pre></div>",
        "id": 163547831,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496155
    },
    {
        "content": "<p>eh, you are asking if you can write to a shared ref? no you cannot^^</p>",
        "id": 163547885,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496182
    },
    {
        "content": "<p>sorry, wrong type of <code>y</code></p>",
        "id": 163547898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496211
    },
    {
        "content": "<p>by symmetry I'd expect that <code>y</code> can be used until <code>x</code> is written through</p>",
        "id": 163547915,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496233
    },
    {
        "content": "<p>so the two loads of <code>x</code> cannot be hoisted, because one can write through y, even though x is <code>noalias</code> ?</p>",
        "id": 163547935,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496263
    },
    {
        "content": "<p>so yes I think your code should be okay. but the question above is about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- mind the extra reborrow</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// kills the reborrow (which is unique) and hence kills y?</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163547996,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496297
    },
    {
        "content": "<p><code>x</code> being noalias means it doesnt alias with stuff that was created earlier. but it can alias with new pointers created from <code>x</code>.</p>",
        "id": 163548020,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496333
    },
    {
        "content": "<p>ah</p>",
        "id": 163548040,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496344
    },
    {
        "content": "<p>so i have no idea if that should be UB</p>",
        "id": 163548198,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496473
    },
    {
        "content": "<p>if you have to pop up the stack to find out if you can dereference <code>x</code>, and then you dereference <code>y</code>, then in the current model it would be UB IIUC because <code>y</code> has been popped from the stack</p>",
        "id": 163548227,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496517
    },
    {
        "content": "<p>but with implicit reborrows this means</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// can we still use y1?</span>\n</pre></div>\n\n\n<p>is an open question... the <code>&amp;mut *x</code> in the <code>let y2</code> line asserts that it is a unique pointer (a fresh noalias pointer), which I guess should mean that y1 is not allowed to be used any more</p>",
        "id": 163548298,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496562
    },
    {
        "content": "<p>if one wanted to not make it UB, one would need to pop stuff from the stack to check for <code>x</code>, but put derived stuff from <code>x</code> on the top of the stack somewhere else (e.g. a second stack), and the algo would be more complicated</p>",
        "id": 163548320,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496594
    },
    {
        "content": "<p>well the current WIP implementation somewhat gives up on the stack thing</p>",
        "id": 163548338,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496619
    },
    {
        "content": "<p>does making it UB enable any optimizations ?</p>",
        "id": 163548385,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496645
    },
    {
        "content": "<p>(I am working on somewhat of a redesign of stacked borrows)</p>",
        "id": 163548391,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496649
    },
    {
        "content": "<p>and basically removes from the stack what is incompatible with the access -- so the implicit reborrow would get removed but the raw ptr created from <em>that</em> would not</p>",
        "id": 163548406,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496687
    },
    {
        "content": "<blockquote>\n<p>does making it UB enable any optimizations ?</p>\n</blockquote>\n<p>no idea^^</p>",
        "id": 163548408,
        "sender_full_name": "RalfJ",
        "timestamp": 1555496696
    },
    {
        "content": "<p>so from a user pov, this appears to be something that I might want to do</p>",
        "id": 163548429,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496713
    },
    {
        "content": "<p>if this is UB, i'd write more complicated code to achieve the same thing to avoid the UB</p>",
        "id": 163548441,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496726
    },
    {
        "content": "<p>it would be nice to know if there are any more advantages than just making stacked borrows simpler</p>",
        "id": 163548447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496749
    },
    {
        "content": "<p>not that a simple stacked borrows model isn't a goal worth pursuing, but that's at tension with requiring users to write more complex code</p>",
        "id": 163548497,
        "sender_full_name": "gnzlbg",
        "timestamp": 1555496778
    },
    {
        "content": "<blockquote>\n<p>it would be nice to know if there are any more advantages than just making stacked borrows simpler</p>\n</blockquote>\n<p>it's not just about simpler. for the case of creating multiple mutable references, I dont see any way to to do that with the current constraints.</p>",
        "id": 163551616,
        "sender_full_name": "RalfJ",
        "timestamp": 1555500187
    },
    {
        "content": "<p>however, what <em>could</em> work is being less aggressive about retagging: maybe a simple assignment-style reborrow (<code>x = &amp;[mut]*y</code>) should really truly be a NOP, even in stacked borrows</p>",
        "id": 163551633,
        "sender_full_name": "RalfJ",
        "timestamp": 1555500221
    },
    {
        "content": "<p>I think that would solve all these problems</p>",
        "id": 163551645,
        "sender_full_name": "RalfJ",
        "timestamp": 1555500239
    },
    {
        "content": "<p>at the cost of making the logic to emit retagging more complicated</p>",
        "id": 163551696,
        "sender_full_name": "RalfJ",
        "timestamp": 1555500262
    },
    {
        "content": "<p>it would be nice though to at least capture the explicit reborrows the user wrote... hm</p>",
        "id": 163552140,
        "sender_full_name": "RalfJ",
        "timestamp": 1555500723
    }
]