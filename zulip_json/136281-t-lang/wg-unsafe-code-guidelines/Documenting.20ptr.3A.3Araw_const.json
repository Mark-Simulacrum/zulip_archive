[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Creating.20a.20safe.20interface.20to.20Thin.20Trait.20Objects/near/220525672\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>What does that mean for code where you go from a pointer to an object to a pointer to one of its fields?</p>\n</blockquote>\n<p>It means you should be using <code>ptr::raw_const!/raw_mut!</code>. Which unfortunately isn't stable yet... <a href=\"https://github.com/rust-lang/rust/issues/73394\">FCP is done</a>, but rustdoc <a href=\"https://github.com/rust-lang/rust/issues/74355\">has a bug</a> that makes it currently infeasible to stabilize the macro... :/<br>\n(Out of all the barriers this macro had to overcome -- it's been a long time in the making -- this is the one that I least expected.^^ And the most frustrating thing is that fixing it is waay outside my area of expertise.)</p>\n</blockquote>\n<p>I'm sure you've tried this already, but in case not - is there a reason it needs to specifically be a declarative macro? I think you can re-export the macro in <code>std::ptr</code>, and then use <code>doc(hidden)</code> on the one in the root if you don't want people using it. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=51eed0e06f153d96136e5dcce6ff95a4\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=51eed0e06f153d96136e5dcce6ff95a4</a></p>",
        "id": 220874335,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608822000
    },
    {
        "content": "<p>hmm let me try that in more detail, one sec</p>",
        "id": 220874771,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608822593
    },
    {
        "content": "<p>ok it does work but not if you add <code>doc(hidden)</code>, I guess that carries over to the re-export</p>",
        "id": 220874953,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608822834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> would you be ok with documenting <code>std::raw_const!</code> in the root? If not I can ask about making doc(hidden) only apply to the original definition, that wouldn't be hard to implement, just a policy decision</p>",
        "id": 220875024,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608822884
    },
    {
        "content": "<p>(specifically removing this line: <a href=\"https://github.com/rust-lang/rust/blob/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/src/librustdoc/clean/mod.rs#L2170\">https://github.com/rust-lang/rust/blob/2acf6ee6d2ab3acf3f4d2117591ac1143c8232fe/src/librustdoc/clean/mod.rs#L2170</a>)</p>",
        "id": 220875052,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608822950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Creating.20a.20safe.20interface.20to.20Thin.20Trait.20Objects/near/220875024\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> would you be ok with documenting <code>std::raw_const!</code> in the root? If not I can ask about making doc(hidden) only apply to the original definition, that wouldn't be hard to implement, just a policy decision</p>\n</blockquote>\n<p>I thought of that a while ago; I think the best solution in that regard would be to add another <code>doc</code> attribute / or a special meaning to <code>#[doc(inline)]</code> so that we can have the capability to \"unhide\" stuff by inlining it: <em>e.g.</em>,<code>#[doc(inline_unhidden)]</code></p>",
        "id": 220877455,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608825883
    },
    {
        "content": "<p>Also, now that it's finally holidays, I have time to catch up with my delayed doc PR and hopefully fix the link bug <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 220877478,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608825918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> I guess my question is when people want doc(hidden) to <em>also</em> apply to the re-export</p>",
        "id": 220879011,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608827551
    },
    {
        "content": "<p>that seems needlessly limiting when you can always add <code>#[doc(hidden)] pub use x::y;</code></p>",
        "id": 220879024,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608827566
    },
    {
        "content": "<p>adding more attributes seems like technical debt</p>",
        "id": 220879037,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608827583
    },
    {
        "content": "<p>I don't care about the default, I just think that <code>#[doc(no_inline)]</code> should not \"unhide it\", and I was just being careful with not breaking some form of \"expected behavior\" of <code>#[doc(hidden)]</code>. I do agree that if the <code>pub use</code> needs to be hidden, it can be so annotated too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220881662,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608830743
    },
    {
        "content": "<p>if the only concern is backwards-compatibility, we could make it opt-in with a feature gate or something</p>",
        "id": 220884717,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608834903
    },
    {
        "content": "<p>(could someone move this to <a class=\"stream\" data-stream-id=\"266220\" href=\"/#narrow/stream/266220-rustdoc\">#rustdoc</a> ?)</p>",
        "id": 220884739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608834952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const/near/220875024\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> would you be ok with documenting <code>std::raw_const!</code> in the root? If not I can ask about making doc(hidden) only apply to the original definition, that wouldn't be hard to implement, just a policy decision</p>\n</blockquote>\n<p>I don't understand the question... are you suggesting we use an old-style macro and provide it at the crate root? I'd be okay with that, not sure what the libs team thinks of this though</p>",
        "id": 220925154,
        "sender_full_name": "RalfJ",
        "timestamp": 1608909465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const/near/220925154\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const/near/220875024\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> would you be ok with documenting <code>std::raw_const!</code> in the root? If not I can ask about making doc(hidden) only apply to the original definition, that wouldn't be hard to implement, just a policy decision</p>\n</blockquote>\n<p>I don't understand the question... are you suggesting we use an old-style macro and provide it at the crate root? I'd be okay with that, not sure what the libs team thinks of this though</p>\n</blockquote>\n<p>yes, that's what I meant</p>",
        "id": 220926622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608912298
    },
    {
        "content": "<p>I don't think the rustdoc bug will be fixed any time soon</p>",
        "id": 220926631,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608912307
    },
    {
        "content": "<p>oh wait hold on no - I meant having it available at <em>both</em> <code>std::raw_const!</code> and <code>std::ptr::raw_const!</code></p>",
        "id": 220926643,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608912334
    },
    {
        "content": "<p>hmm actually if I make the original in a private module I wonder if that will work <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 220926647,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608912352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const/near/220926647\">said</a>:</p>\n<blockquote>\n<p>hmm actually if I make the original in a private module I wonder if that will work <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>it did not :(</p>",
        "id": 220926765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608912559
    },
    {
        "content": "<p><code>#[macro_export]</code> is too <em>stronk</em>. It will even work when used inside an anonymous module such as <code>const _: () = { â€¦ };</code>  <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const/near/220884739\">said</a>:</p>\n<blockquote>\n<p>(could someone move this to <a class=\"stream\" data-stream-id=\"266220\" href=\"/#narrow/stream/266220-rustdoc\">#rustdoc</a> ?)</p>\n</blockquote>\n<p>I opened <a href=\"#narrow/stream/266220-rustdoc/topic/.60.23.5Bdoc(hidden).5D.60.20and.20.60pub.20use.60\">https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/.60.23.5Bdoc(hidden).5D.60.20and.20.60pub.20use.60</a></p>",
        "id": 220958618,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1608978019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const/near/220926643\">said</a>:</p>\n<blockquote>\n<p>oh wait hold on no - I meant having it available at <em>both</em> <code>std::raw_const!</code> and <code>std::ptr::raw_const!</code></p>\n</blockquote>\n<p><code>std::raw_const!</code> doesn't work as a name, there has to be <code>ptr</code> in there <em>somewhere</em>. But also, if we make this an \"old-style macro\", I din't think there is precedent for <em>additionally</em> exporting it inside a module?</p>",
        "id": 220958763,
        "sender_full_name": "RalfJ",
        "timestamp": 1608978377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Documenting.20ptr.3A.3Araw_const/near/220926631\">said</a>:</p>\n<blockquote>\n<p>I don't think the rustdoc bug will be fixed any time soon</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> sounded like their hack could probably be made to work Good Enough (TM) to at least start using macros 2.0 in the stdlib?</p>",
        "id": 220958771,
        "sender_full_name": "RalfJ",
        "timestamp": 1608978431
    }
]