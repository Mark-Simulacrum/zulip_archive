[
    {
        "content": "<p>(roughly a quick parent-traversal loop in one function in typeck)</p>",
        "id": 276113205,
        "sender_full_name": "eddyb",
        "timestamp": 1647896518
    },
    {
        "content": "<p>(the actual mechanism and design here should go in another thread, I was just mentioning it because the portability lint is feeling more in-reach now so things based on it might be feasible)</p>",
        "id": 276113309,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647896551
    },
    {
        "content": "<p>yeah I'm tempted to fork threads already lol</p>",
        "id": 276113330,
        "sender_full_name": "eddyb",
        "timestamp": 1647896566
    },
    {
        "content": "<p>I do think having some way to say, explicitly, \"I do funky things with pointers\" vs \"I want to run on architectures that won't let me do funky things with pointers\" and detect that at compile time would be a feature.</p>",
        "id": 276113366,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647896586
    },
    {
        "content": "<p>(\"scoped assumptions\"/axioms &gt; \"conditional compilation\"/<code>#[cfg]</code>, everywhere the former is feasible, IMO)</p>",
        "id": 276113572,
        "sender_full_name": "eddyb",
        "timestamp": 1647896679
    },
    {
        "content": "<p>Sounds <em>fun</em>, tbh. And by <em>fun</em> I mean, uh...</p>",
        "id": 276113733,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647896764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/portability.20lint.20using.20where.20clauses/near/276113572\">said</a>:</p>\n<blockquote>\n<p>(\"scoped assumptions\"/axioms &gt; \"conditional compilation\"/<code>#[cfg]</code>, everywhere the former is feasible, IMO)</p>\n</blockquote>\n<p>Agreed, that's the primary motivation for using <code>where</code>. Among other things, if done carefully, that means we can actually compile-check code meant for other targets.</p>",
        "id": 276113762,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647896787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> idk where to put this but I was thinking about Cargo features and came up with <code>where crate: HasFeature&lt;\"foo\"&gt;</code></p>",
        "id": 276240330,
        "sender_full_name": "eddyb",
        "timestamp": 1647976239
    },
    {
        "content": "<p>or even <code>where crate: HasConfig&lt;\"feature\", {Some(\"foo\")}&gt;</code> - you can replace a lot of <code>#[cfg]</code> stuff like this heh</p>",
        "id": 276240448,
        "sender_full_name": "eddyb",
        "timestamp": 1647976294
    },
    {
        "content": "<p>(and it also reifies the idea that <code>--cfg</code> is passed to each crate separately)</p>",
        "id": 276240523,
        "sender_full_name": "eddyb",
        "timestamp": 1647976326
    },
    {
        "content": "<p>You mean: <code>crate: HasConfig&lt;\"feature\", Val={Some(\"\")}&gt;</code>with associated constant, because it's a map and not a multiset. I'm glad that idea is finding new traction. Can we get <code>where</code>-clauses on enum-variants, too, to gate some <code>io::ErrorKind</code>'s on system families or to enable representations only when building with allocator, to build <code>OpenFlags</code>.</p>",
        "id": 276243991,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1647978039
    },
    {
        "content": "<p>it's not a map, it's a <code>(K, Option&lt;V&gt;)</code> set. and Cargo features exploit that, which is why I used them as an example, i.e., <code>#[cfg(and(feature = \"foo\", feature = \"bar\"))]</code> is sensible</p>",
        "id": 276313137,
        "sender_full_name": "eddyb",
        "timestamp": 1648031560
    }
]