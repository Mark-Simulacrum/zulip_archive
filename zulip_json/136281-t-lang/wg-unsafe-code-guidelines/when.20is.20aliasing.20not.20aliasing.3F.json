[
    {
        "content": "<p>Per the docs for <code>UnsafeCell</code> (<a href=\"https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#examples\">https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#examples</a>) the following example should be safe:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">p3</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">p5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with the idea being that even though <code>p1</code> and <code>p2</code> immutably reference the <em>container</em>, <code>p3</code> holds the sole reference to the <em>contents</em>, so this is safe. But all these pointers are literally pointing to the same address, which you can confirm by printing <code>{:p}</code>. So is this allowed because <code>p1</code> has a different type than <code>p3</code>? But wouldn't that be TBAA, which Rust doesn't have? And isn't that incompatible with LLVM's noalias, which doesn't understand Rust types?</p>",
        "id": 247490946,
        "sender_full_name": "bstrie",
        "timestamp": 1627493779
    },
    {
        "content": "<blockquote>\n<p>But all these pointers are literally pointing to the same address</p>\n</blockquote>\n<p>They do, however, have different <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#pointer-provenance\">provenance</a></p>",
        "id": 247491556,
        "sender_full_name": "RalfJ",
        "timestamp": 1627494064
    },
    {
        "content": "<p>okay, so that's what I'm missing, I thought provenance only mattered when casting from ints or raw ptrs :P</p>",
        "id": 247492319,
        "sender_full_name": "bstrie",
        "timestamp": 1627494445
    },
    {
        "content": "<p>I think the difference is that <code>p3</code> is a reborrow of <code>p1</code>, so the tags indicate this nesting structure</p>",
        "id": 247492449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627494498
    },
    {
        "content": "<p>no provenance is <em>everywhere</em> in the Rust aliasing story</p>",
        "id": 247492455,
        "sender_full_name": "RalfJ",
        "timestamp": 1627494501
    },
    {
        "content": "<p>not sure if p1 and p2 have different provenance though</p>",
        "id": 247492520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627494536
    },
    {
        "content": "<p>they will, each <code>&amp;</code> generates a fresh provenance</p>",
        "id": 247495317,
        "sender_full_name": "RalfJ",
        "timestamp": 1627495675
    },
    {
        "content": "<p>is that still the case if you have <code>let p1 = &amp;x; let p2 = p1;</code>?</p>",
        "id": 247496754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627496354
    },
    {
        "content": "<p>does it do an implicit reborrow there?</p>",
        "id": 247496768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627496363
    },
    {
        "content": "<p>hm, I dont know MIR generation entirely by heart</p>",
        "id": 247497613,
        "sender_full_name": "RalfJ",
        "timestamp": 1627496724
    },
    {
        "content": "<p>it's possible it just makes a copy</p>",
        "id": 247497619,
        "sender_full_name": "RalfJ",
        "timestamp": 1627496728
    },
    {
        "content": "<p>(but for mutable references it definitely does a reborrow)</p>",
        "id": 247497635,
        "sender_full_name": "RalfJ",
        "timestamp": 1627496740
    },
    {
        "content": "<p>If it makes a copy, then does that imply that there is an observable difference between that version and the original? Since reborrows of a shared reference don't freeze the reference like mutable references do, I'm not sure what the downstream effects are. Or perhaps there are no observable differences, but in that case the second tag in the <code>(&amp;x, &amp;x)</code> case seems unnecessary.</p>",
        "id": 247502703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627498943
    },
    {
        "content": "<p>I dont think there is a difference. the 2nd tag might be unnecessary but it would be significant effort to <em>not</em> give it a 2nd tag, so why bother?^^</p>",
        "id": 247504645,
        "sender_full_name": "RalfJ",
        "timestamp": 1627499853
    }
]