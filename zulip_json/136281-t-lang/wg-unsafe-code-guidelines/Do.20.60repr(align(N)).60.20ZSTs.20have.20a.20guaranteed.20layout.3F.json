[
    {
        "content": "<p>Is something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(align(64))]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Align64</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>guaranteed to be size==0 and align==64? (align &gt;= 64 would be fine for my code as well) I had assumed yes, but was less sure after someone pointed out that it's repr(Rust).</p>",
        "id": 255729825,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1633088386
    },
    {
        "content": "<p>The repr(align(64)) should guarantee align == 64 and should be ill-formed if align&gt;64. As for size, intuitively, it should be size==0, because it's a unit struct.</p>",
        "id": 255733675,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633090458
    },
    {
        "content": "<p>I'm not 100% on either of those, though.</p>",
        "id": 255734319,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633090818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Do.20.60repr.28align.28N.29.29.60.20ZSTs.20have.20a.20guaranteed.20layout.3F/near/255733675\">said</a>:</p>\n<blockquote>\n<p>should be ill-formed if align&gt;64</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 255735068,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1633091206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C,align(128)]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Overaligned</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(align(64)]</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Align64</span><span class=\"p\">(</span><span class=\"n\">Overaligned</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>is ill-formed, <code>repr(align)</code> cannot reduce alignment requirements. I'd expect that generalizes to say that <code>repr(align(N))</code> guarantees a type will have an alignment requirement of <code>N</code>, or the program is ill-formed.</p>",
        "id": 255740349,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633093710
    },
    {
        "content": "<p>that's not now align(N) works in practice.</p>\n<p>it just gives a minimum alignment</p>",
        "id": 255754699,
        "sender_full_name": "Lokathor",
        "timestamp": 1633099221
    },
    {
        "content": "<p>hm, i'm only really concerned about the unit-zst case. also yeah rust already will use align == 128</p>",
        "id": 255754735,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1633099240
    },
    {
        "content": "<p>i also am a little skeeved out by putting repr(C, align(N)), since the layout deffo diverges from what C does</p>",
        "id": 255754834,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1633099282
    },
    {
        "content": "<p>the question is basically: is the randomize layout flag allowed to make <code>#[repr(align(N))] struct AlignedUnit;</code> have a non-zero size</p>",
        "id": 255754962,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1633099331
    },
    {
        "content": "<p>actually i guess in my case i can avoid needing to depend on this. IMO the answer should be \"no, zsts are special\" even though i cant justify it</p>",
        "id": 255755039,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1633099368
    },
    {
        "content": "<p>well 0 is a multiple of align_of::&lt;TheType&gt;() so it should continue to be size 0</p>",
        "id": 255755129,
        "sender_full_name": "Lokathor",
        "timestamp": 1633099410
    },
    {
        "content": "<p>that is, sizeof has to be a multiple of alignof, but 0 is a multiple of all alignof values, so high alignment shouldn't make a ZST into a non-ZST</p>",
        "id": 255755269,
        "sender_full_name": "Lokathor",
        "timestamp": 1633099471
    },
    {
        "content": "<p>right, the question is if this is guaranteed to be a ZST (even though its repr(Rust) which has \"no guarantees\")</p>",
        "id": 255756245,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1633099883
    },
    {
        "content": "<p>I suppose only T-lang knows, if anyone</p>",
        "id": 255769553,
        "sender_full_name": "Lokathor",
        "timestamp": 1633105105
    },
    {
        "content": "<p>Making it a non-ZST would be a breaking change, because this is allowed:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Zst</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Zst</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 255803589,
        "sender_full_name": "Kestrer",
        "timestamp": 1633120368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360486\">Kestrer</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Do.20.60repr.28align.28N.29.29.60.20ZSTs.20have.20a.20guaranteed.20layout.3F/near/255803589\">said</a>:</p>\n<blockquote>\n<p>Making it a non-ZST would be a breaking change, because this is allowed:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Wrapper</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Zst</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Zst</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Not with <code>repr(align)</code></p>",
        "id": 255804111,
        "sender_full_name": "Connor Horman",
        "timestamp": 1633120641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Do.20.60repr.28align.28N.29.29.60.20ZSTs.20have.20a.20guaranteed.20layout.3F/near/255756245\">said</a>:</p>\n<blockquote>\n<p>right, the question is if this is guaranteed to be a ZST (even though its repr(Rust) which has \"no guarantees\")</p>\n</blockquote>\n<p>I dont think we have an RFC for that but it seems really hard to imagine any reason to not make this size 0.^^</p>",
        "id": 256142194,
        "sender_full_name": "RalfJ",
        "timestamp": 1633385832
    },
    {
        "content": "<p><code>struct Zst(());</code> gets into more weird cases (see conversation in <a href=\"https://github.com/rust-lang/rust/issues/78586\">https://github.com/rust-lang/rust/issues/78586</a>), but personally at least I'd <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> an RFC to say that <code>struct Zst;</code> specifically is always a ZST.</p>",
        "id": 258103087,
        "sender_full_name": "scottmcm",
        "timestamp": 1634592347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Do.20.60repr.28align.28N.29.29.60.20ZSTs.20have.20a.20guaranteed.20layout.3F/near/258103087\">said</a>:</p>\n<blockquote>\n<p><code>struct Zst(());</code> gets into more weird cases (see conversation in <a href=\"https://github.com/rust-lang/rust/issues/78586\">https://github.com/rust-lang/rust/issues/78586</a>), but personally at least I'd <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> an RFC to say that <code>struct Zst;</code> specifically is always a ZST.</p>\n</blockquote>\n<p>I wouldnt mix up future-incompat concerns with data layout guarantees. <code>struct Zst(());</code> should make the same guarantee <em>if you know the type has exactly that definition</em>; the fact that if the type is in a different crate, future versions might change the definition -- that should not affect what we guarantee about the layout in case the definition is known.</p>",
        "id": 258407558,
        "sender_full_name": "RalfJ",
        "timestamp": 1634750463
    },
    {
        "content": "<p>Bad example, I guess.  I meant more as a way to make it not \"one-field repr(Rust) is repr(transparent)\" -- if <code>struct Foo(Bar);</code> doesn't guarantee <code>size_of&lt;Foo&gt;() == size_if&lt;Bar&gt;()</code>, then I'd not necessarily guarantee it for ZSTs either.  Whereas <code>struct Quz;</code> is a distinct syntactic form that would be a nice tight guarantee that would meet what I think is the normal desire for it.  (Or we could just say that <em>zero</em> fields is guaranteed zero-size, which has some obvious logic to it.)</p>",
        "id": 258410870,
        "sender_full_name": "scottmcm",
        "timestamp": 1634751536
    },
    {
        "content": "<p>ah I see. well TBH I feel if we go through the effort of writing an RFC to guarantee things, we might as well go for the case of \"at most one field is not a 1-ZST\", i.e., we might as well also cover <code>struct Foo(Bar);</code></p>",
        "id": 258411227,
        "sender_full_name": "RalfJ",
        "timestamp": 1634751668
    }
]