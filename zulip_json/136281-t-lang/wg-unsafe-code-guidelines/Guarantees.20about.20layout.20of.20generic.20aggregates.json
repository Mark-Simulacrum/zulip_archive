[
    {
        "content": "<p>Given:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is <code>for&lt;A, B, C, D&gt; transmute::&lt;&amp;S&lt;A, B, C&gt;, &amp;S&lt;A, B, D&gt;()</code> sound?</p>\n<p>If not, should it be?</p>\n<hr>\n<p>Notice that <code>for&lt;T&gt; PhantomData&lt;T&gt;</code> is a 1-ZST and is therefore ignored for layout purposes, but it does change the actual type.</p>",
        "id": 183847831,
        "sender_full_name": "gnzlbg",
        "timestamp": 1576764541
    },
    {
        "content": "<p>I'm quite sure that transmute doesn't follow from our current guarantees for struct layout. It's not one of the special cases where we say anything other than \"nothing is guaranteed, not even determinism\"</p>",
        "id": 183851261,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576766712
    },
    {
        "content": "<p>But clearly this kind of transmute is extremly useful for some uses of phantom types and requiring repr(C) on those aggregates has big downsides so IMO we eventually need some way to make this work while still getting e.g. automatic struct reordering for reducing padding</p>",
        "id": 183851431,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1576766835
    }
]