[
    {
        "content": "<p>I noticed today that LLVM 10 has <code>freeze</code>: <a href=\"https://releases.llvm.org/10.0.0/docs/LangRef.html#freeze-instruction\">https://releases.llvm.org/10.0.0/docs/LangRef.html#freeze-instruction</a></p>\n<p>Given that rustc is on <a href=\"https://github.com/rust-lang/rust/pull/77063\">11-rc3</a>, would it make sense to start adding a freeze intrinsic to explore?  I was thinking about safe ways to expose \"fast\"-math after &lt;<a href=\"https://users.rust-lang.org/t/why-i-get-nan-values-when-multiply-by-0/49450/19?u=scottmcm\">https://users.rust-lang.org/t/why-i-get-nan-values-when-multiply-by-0/49450/19?u=scottmcm</a>&gt;, in particular.</p>\n<p>Is poison a valid-but-unsafe value for rust types like <code>f32</code>?  Or would this need to work on <code>MaybeUninit&lt;f32&gt;</code> internally?</p>",
        "id": 212525886,
        "sender_full_name": "scottmcm",
        "timestamp": 1602057972
    },
    {
        "content": "<p>wow that's huge. i have to try and think of what all the cases where i wanted this but couldn't have it were... </p>\n<p>hmm... will memory-sanitizer still consider frozen uninit to be a problem? (or at least, if it did is that a bug?)</p>",
        "id": 212670293,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602152401
    },
    {
        "content": "<p>I don't know about msan, but it probably depends where you're using it.  Reading/writing a frozen uninit address is still a problem.</p>\n<p>(I think we still compile with LLVM 8, so we might not be able to require it yet, but experimenting with it should be ok, or using less-optimal versions on older LLVM -- like we could expose types that are normal floats on LLVM &lt;10 but are fast-math+freeze on LLVM &gt;= 10)</p>",
        "id": 212724789,
        "sender_full_name": "scottmcm",
        "timestamp": 1602178712
    },
    {
        "content": "<p>relevant thread:<br>\n<a href=\"https://lists.llvm.org/pipermail/llvm-dev/2020-September/145318.html\">https://lists.llvm.org/pipermail/llvm-dev/2020-September/145318.html</a><br>\n<a href=\"https://lists.llvm.org/pipermail/llvm-dev/2020-September/145331.html\">https://lists.llvm.org/pipermail/llvm-dev/2020-September/145331.html</a></p>",
        "id": 212725954,
        "sender_full_name": "cuviper",
        "timestamp": 1602179301
    },
    {
        "content": "<p>there was also a related round table at the dev-meeting:<br>\n<a href=\"https://lists.llvm.org/pipermail/llvm-dev/2020-October/145612.html\">https://lists.llvm.org/pipermail/llvm-dev/2020-October/145612.html</a><br>\n<a href=\"https://lists.llvm.org/pipermail/llvm-dev/2020-October/145692.html\">https://lists.llvm.org/pipermail/llvm-dev/2020-October/145692.html</a></p>",
        "id": 212726120,
        "sender_full_name": "cuviper",
        "timestamp": 1602179392
    },
    {
        "content": "<p>Ah, interesting:</p>\n<blockquote>\n<p>Reading an indeterminate value from an lvalue that does not have char or std::byte type is UB [1].</p>\n</blockquote>\n<p>which pushes me towards \"<code>fadd_fast</code> should take and return <code>MaybeUninit&lt;fN&gt;</code>\"...</p>",
        "id": 212728570,
        "sender_full_name": "scottmcm",
        "timestamp": 1602180463
    },
    {
        "content": "<p>Curiosity: do LLVM optimizers do a good job of \"moving the freeze later\"?  I'm imaging <code>freeze(fadd_fast( freeze(fadd_fast(a, b)), c))</code> -&gt; freeze(fadd_fast(fadd_fast(a, b), c))`.</p>\n<p>I guess across loops that might be awkward, though, so it'd be better to have the freeze intrinsic separate from the <code>fadd_fast</code> one...</p>",
        "id": 212733801,
        "sender_full_name": "scottmcm",
        "timestamp": 1602183039
    },
    {
        "content": "<p>I recall there being discussion of implementing <code>std::mem::uninitialized()</code> (but not <code>MaybeUninit</code>) using <code>freeze</code></p>",
        "id": 212758391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602197200
    },
    {
        "content": "<p>there are still things i can use it for, but in the past i had hoped it could let me reduce the Pod requirement to a Copy and also let me use wider atomic ops for something like <a href=\"http://shift.click/rust/code/tearcell\">http://shift.click/rust/code/tearcell</a> (which is more useful than i act in that post, although I've been meaning to write a followup explaining when you might want something like that and how you can use it without risking data corruption and such...)</p>\n<p>But I don't think it helps there. If I have an <code>usize</code> that came from a load where some of the bytes were uninit.. the whole <code>usize</code> is <code>uninit</code>, and freeze isn't going to give me what i want (in practice it probably would, but yea)</p>\n<p>Still, <code>freeze</code> seems insanely useful for trying to provide a safe API that works with any kind of uninitialized data, works with dodgy FFI code. Hell, I could imagine <code>freeze</code>ing something I believe to be initialized if the initialization code is at all likely to have bugs. (I'm assuming freeze is free since its a compiler-only concept)</p>\n<p>The other thing that comes to mind is: I wonder if float casting would have been solved differently if this landed earlier... Even if not, could we use it to make <code>{f32,f64}::to_int_unchecked</code> safe? Or even have the checking be configurable globally the way overflow checks are...</p>",
        "id": 212769804,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602207859
    },
    {
        "content": "<blockquote>\n<p>(I'm assuming freeze is free since its a compiler-only concept)</p>\n</blockquote>\n<p>well <em>ackshually</em> <a href=\"https://internals.rust-lang.org/t/what-the-hardware-does-is-not-what-your-program-does-uninitialized-memory/10561/17?u=jyn514\">https://internals.rust-lang.org/t/what-the-hardware-does-is-not-what-your-program-does-uninitialized-memory/10561/17?u=jyn514</a></p>",
        "id": 212770284,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602208461
    },
    {
        "content": "<p>yeah i'm aware of that. does freeze actually handle that? it seems impossible without potentially writing to those pages which would be bad.</p>\n<p>i also had assumed <code>freeze&lt;T&gt;(T) -&gt; T</code> which would avoid that issue, although it does mean it's hard to freeze data on the heap</p>",
        "id": 212770485,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602208741
    },
    {
        "content": "<p><code>freeze</code> is opportunity cost -- from one of the emails linked earlier,</p>\n<blockquote>\n<p>To reduce the cost of fixing miscompilations using freeze instruction, we need to optimize freeze away whenever possible.</p>\n</blockquote>\n<p>Come to think of it, freeze codegen is always monomorphized, so the compiler knows the validity invariants.  I wonder if that means we could even make</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Something</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">freeze</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>That'd mean adding a validity check, but making it safe is interesting.  (In addition to making some other unsafe one that doesn't do that.)</p>",
        "id": 212780828,
        "sender_full_name": "scottmcm",
        "timestamp": 1602215189
    },
    {
        "content": "<p><code>MaybeUninit::&lt;String&gt;::uninit().freeze()</code> wcgw</p>",
        "id": 212831802,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1602253207
    },
    {
        "content": "<p>Good point.  Safe would have to meet safety invariants too, which it can't in general.  I guess there's three possibilities, then:</p>\n<ul>\n<li>A safe one bound on <code>safe_transmute::FromBytes</code> or whatever, for types with no safety nor validity invariants.  (Which is still useful for integers and types with padding and such.)</li>\n<li>An unsafe pure-freeze one that's <code>MaybeUninit&lt;T&gt;</code> -&gt; <code>MaybeUninit&lt;T&gt;</code> because it doesn't enforce validity invariants</li>\n<li>An unsafe one that enforces validity so can give <code>T</code> (if possible -- maybe the rules for reference validity might make this infeasible in practice.  Probably would at least need a \"has no <code>&amp;muts</code> and all <code>&amp;</code>s are to <code>impl Freeze</code>\" trait or something...)</li>\n</ul>",
        "id": 212853375,
        "sender_full_name": "scottmcm",
        "timestamp": 1602264099
    },
    {
        "content": "<p>also note that there are some major concerns for exposing <code>freeze</code> on the Rust level, see for example <a href=\"https://github.com/rust-lang/rfcs/pull/837\">https://github.com/rust-lang/rfcs/pull/837</a></p>",
        "id": 212912977,
        "sender_full_name": "RalfJ",
        "timestamp": 1602331456
    },
    {
        "content": "<p>with <code>MaybeUninit</code> around and a great proposal for handling uninit memory in <code>Read</code> on the table, what is even the remaining usecase for <code>freeze</code> in Rust?</p>",
        "id": 212912990,
        "sender_full_name": "RalfJ",
        "timestamp": 1602331504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> The specific case I was thinking about was removing the <code>poison</code> from fast-math ops so the result of them can be safely converted to <code>f32</code>.</p>",
        "id": 212932371,
        "sender_full_name": "scottmcm",
        "timestamp": 1602360190
    },
    {
        "content": "<p>hm, interesting. wont that defeat many fast-math optimizations though? or did you want to do that only once at the end?</p>",
        "id": 212955788,
        "sender_full_name": "RalfJ",
        "timestamp": 1602405665
    },
    {
        "content": "<p>\"Once at the end\" was my thought, yes.</p>\n<p>Sketch:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">FastF32</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FastF32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">FastF32</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// obviously safe</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">FastF32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">freeze</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// all f32 bit patterns are valid, per `f32::from_bits`, so freezing is sufficient for safety, though the results might be garbage</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FastF32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">FastF32</span><span class=\"p\">(</span><span class=\"n\">new_fadd_fast_intrinsic</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// inputs and outputs might be poison, but those are fine to have in a MaybeUninit</span>\n</code></pre></div>\n\n<p>(Hopefully with a less appealing name than \"fast\" to better convey what it does, though maybe we're stuck with it as a term of art now --backronym it to \"Finite Allowing Sketchy Tranformations\"?)</p>\n<p>Hopefully LLVM would be able to remove \"inner <code>freeze</code>s\" if you have something like <code>freeze( fadd(a, freeze( fadd(b, c) )) )</code>, but probably better to not count on that.</p>",
        "id": 212979135,
        "sender_full_name": "scottmcm",
        "timestamp": 1602446148
    },
    {
        "content": "<p>lol</p>",
        "id": 213050606,
        "sender_full_name": "Jubilee",
        "timestamp": 1602515361
    },
    {
        "content": "<p>For some reason I want to call them flying-point numbers contra floating-point, but this might just be a taste for wuxia speaking. <a href=\"https://www.youtube.com/watch?v=2ObQm0XBmgI\">https://www.youtube.com/watch?v=2ObQm0XBmgI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"2ObQm0XBmgI\" href=\"https://www.youtube.com/watch?v=2ObQm0XBmgI\"><img src=\"https://i.ytimg.com/vi/2ObQm0XBmgI/default.jpg\"></a></div>",
        "id": 213052595,
        "sender_full_name": "Jubilee",
        "timestamp": 1602516348
    }
]