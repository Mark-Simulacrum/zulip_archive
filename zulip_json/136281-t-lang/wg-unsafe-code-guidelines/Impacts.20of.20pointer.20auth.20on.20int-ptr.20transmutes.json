[
    {
        "content": "<p>I was just reading <a href=\"https://github.com/rust-lang/rust/issues/286\">#286</a> talking about the problems with int-ptr transmutes, and the discussion felt a bit unmotivated, too abstract, and I felt like a concrete hardware example would help clarify motivations.<br>\nThe ARM 8.3 architecture added support for pointer signing with the PAC\\* and AUT\\* instructions, and they are nice examples of real-life pointer providence. Why hasn't it been brought up earlier in the discussions?</p>",
        "id": 246782804,
        "sender_full_name": "riking",
        "timestamp": 1626903343
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-860189806\">https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-860189806</a><br>\nLooking at Ralf's example program here.<br>\nA hypothetical compiler could compile this program to PAC protect the stack pointers; let's say that <code>p</code> uses Data-A, <code>q</code> uses Data-B, <code>storage</code> uses Data-A.</p>",
        "id": 246783134,
        "sender_full_name": "riking",
        "timestamp": 1626903552
    },
    {
        "content": "<p>The computation of <code>paddr.wrapping_offset(1)</code> successfully stores <code>DataA(p+1)</code> into <code>storage</code>, which cannot equal <code>DataB(q)</code>, so the if statement doesn't execute. But let's just delete the check, say that the two variables _are_ adjacent in this execution, and the hardware would accept a <code>AUTDA DataA(p+1)</code> and end up writing into <code>q</code>.</p>",
        "id": 246783327,
        "sender_full_name": "riking",
        "timestamp": 1626903673
    },
    {
        "content": "<p>Inside the <code>if</code>, we successfully write <code>DataB(q)</code> into <code>storage</code>. When we try to access <code>*storage_ptr</code>, that succeeds and reads <code>DataB(q)</code> as a <code>*mut i32</code>. But a <code>*mut i32</code> can't be assumed to be a stack allocation, so we don't know what key to use.<br>\nhmm.<br>\nI am now wondering whether such a scheme can be successfully compiled on ARM</p>",
        "id": 246783905,
        "sender_full_name": "riking",
        "timestamp": 1626904013
    },
    {
        "content": "<p>The purpose of pointer provenance is not really to map to some hardware feature, but to restrict what memory can be accessed from a pointer in order to allow optimizations</p>",
        "id": 246786640,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626905483
    },
    {
        "content": "<p>AFAIK pointer auth requires special language support even in C, so it might not be possible to use that from today's Rust</p>",
        "id": 246786734,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626905527
    },
    {
        "content": "<p>Isn't his special language support only required to be used by a programmer in special cases?</p>",
        "id": 246811958,
        "sender_full_name": "bjorn3",
        "timestamp": 1626933750
    },
    {
        "content": "<p>Most code should just work fine without changing anything AFAIK.</p>",
        "id": 246811985,
        "sender_full_name": "bjorn3",
        "timestamp": 1626933821
    },
    {
        "content": "<p>I think only cases like int-ptr transmutes are where you need to change your code.</p>",
        "id": 246812044,
        "sender_full_name": "bjorn3",
        "timestamp": 1626933863
    },
    {
        "content": "<p>Yeah, that's possible, I haven't looked into the extensions in detail</p>",
        "id": 246833563,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626952431
    },
    {
        "content": "<blockquote>\n<p>and I felt like a concrete hardware example would help clarify motivations.</p>\n</blockquote>\n<p>FWIW this issue has nothing at all to do with hardware. The issue is entirely one of compiler optimizations.<br>\nThe entire discussion around provenance is primarily motivated by \"we want to do optimizations that would not be correct in an assembly language\". So you will often not find hardware motivations, because hardware is not what motivates us.<br>\n(But if there are also hardware motivations that would be interesting.)</p>",
        "id": 246952931,
        "sender_full_name": "RalfJ",
        "timestamp": 1627029351
    },
    {
        "content": "<blockquote>\n<p>The ARM 8.3 architecture added support for pointer signing with the PAC\\* and AUT\\* instructions, and they are nice examples of real-life pointer providence. Why hasn't it been brought up earlier in the discussions?</p>\n</blockquote>\n<p>Because I have zero knowledge of those ARM features. ;)</p>",
        "id": 246953004,
        "sender_full_name": "RalfJ",
        "timestamp": 1627029391
    },
    {
        "content": "<p>I'm afraid I can't quite follow your example, since I lack the background in ARM \"pointer authentication\".<br>\nHow should I read <code>DataA(p+1)</code>, what does that mean?</p>",
        "id": 246953289,
        "sender_full_name": "RalfJ",
        "timestamp": 1627029611
    },
    {
        "content": "<p>With pointer authentication there is an instruction that stores an encrypted version of the address in the pointer to make it much harder for an attacker to craft a pointer. This encrypted version is encrypted using a mix of a global random number and a value given to the encryption instruction. The same value has to be used when decypting. The value can be anything, but generally it is different for function pointers, return addresses and heap pointers. When using <code>(uintptr_t)ptr</code> and <code>(void*)num</code> the compiler will automatically insert the right encryption/decryption instruction. When doing an int&lt;-&gt;ptr transmute, the compiler is likely unable to insert this instruction, which means that actually using the pointer will cause a crash due to pointer authentication failure.</p>",
        "id": 246957300,
        "sender_full_name": "bjorn3",
        "timestamp": 1627032696
    },
    {
        "content": "<blockquote>\n<p>The same value has to be used when decypting. </p>\n</blockquote>\n<p>What happens otherwise?<br>\nIf the encrypted pointers have the same size as the original pointers, then every input will lead to some decryption, so there's not really a way to know one used the right key...</p>",
        "id": 246957414,
        "sender_full_name": "RalfJ",
        "timestamp": 1627032802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Impacts.20of.20pointer.20auth.20on.20int-ptr.20transmutes/near/246957414\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The same value has to be used when decypting. </p>\n</blockquote>\n<p>What happens otherwise?<br>\nIf the encrypted pointers have the same size as the original pointers, then every input will lead to some decryption, so there's not really a way to know one used the right key...</p>\n</blockquote>\n<p>Presumably, you get garbage out of the decryption, and, if no other verification takes place, it's probably most likely to land in an unallocated page.</p>",
        "id": 246961142,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627035658
    },
    {
        "content": "<p>that doesn't  sound very authenticated, it still has all the same UB</p>",
        "id": 246962050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627036316
    },
    {
        "content": "<p>The difference is that the output is generally unpredictable, so an attacker cannot reliably control the pointers, unless they can also control this global value. Though this, of course, assumes something else isn't going on to actually perform authentication.</p>",
        "id": 246962468,
        "sender_full_name": "Connor Horman",
        "timestamp": 1627036670
    }
]