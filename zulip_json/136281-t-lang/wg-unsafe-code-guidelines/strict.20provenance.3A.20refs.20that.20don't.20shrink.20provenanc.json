[
    {
        "content": "<p>A coworker pointed out that currently in Firefox's Rust bridging to its C++ COM-based design, they play games like primarily passing around &amp;ZST and downcasting it to concrete classes. This is definitely unsound, but I was wondering if there was an established plan to allow for this kind of \"reference that preserves provenance\". I assume <code>&amp;extern type</code> <em>must</em> have such semantics?</p>",
        "id": 276495266,
        "sender_full_name": "Gankra",
        "timestamp": 1648136855
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/256\">https://github.com/rust-lang/unsafe-code-guidelines/issues/256</a> has a lot of discussion on this topic, if you haven't seen it.</p>",
        "id": 276498204,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648137902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> basically my hope is that Stacked Borrows NG will not shrink provenance to match the type, or at least do it much more controlled than current SB (e.g., only on place projections).</p>",
        "id": 276732686,
        "sender_full_name": "RalfJ",
        "timestamp": 1648310576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is an accidental/implicit reborrow a place-projection or a noop?</p>",
        "id": 276732896,
        "sender_full_name": "Gankra",
        "timestamp": 1648310870
    },
    {
        "content": "<p>I envision it to be neither. it is a fresh provenance but inherits the \"range\" of its parent.</p>",
        "id": 276733327,
        "sender_full_name": "RalfJ",
        "timestamp": 1648311440
    },
    {
        "content": "<p>ok, that's good. then the only remaining thing is if we can be \"nice\" and let <code>struct SubClass { base: BaseClass, .. }</code> be upcast in the natural/safe projection way or have to say \"sorry do the moral equivalent of a transmute so we don't get confused\"</p>",
        "id": 276733409,
        "sender_full_name": "Gankra",
        "timestamp": 1648311559
    },
    {
        "content": "<p>so basically you are saying we shouldnt restrict the range even for projections?</p>",
        "id": 276733497,
        "sender_full_name": "RalfJ",
        "timestamp": 1648311672
    },
    {
        "content": "<p>yeah sounds reasonable</p>",
        "id": 276733502,
        "sender_full_name": "RalfJ",
        "timestamp": 1648311688
    },
    {
        "content": "<p>I still dont know if this model even works though so we'll see :D</p>",
        "id": 276733508,
        "sender_full_name": "RalfJ",
        "timestamp": 1648311697
    },
    {
        "content": "<p>i think it would be fine to restrict the range for projections, I'm just curious if the curve can be bent here</p>",
        "id": 276733597,
        "sender_full_name": "Gankra",
        "timestamp": 1648311802
    },
    {
        "content": "<p>fwiw i was spitballing with nika a model based on some formulation of \"extern types\" where you can say something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[extern]</span><span class=\"w\"></span>\n<span class=\"n\">SubClass</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"cp\">#[extern]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">base</span>: <span class=\"nc\">BaseClass</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And what this is expressing is:</p>\n<ul>\n<li>on a type, *T =&gt; &amp;T does not narrow provenance range</li>\n<li>on a field, a projection from the parent type to that field does not narrow provenance range</li>\n<li>it is a compile error for a #[extern] field to <em>NOT</em> be an #[extern] type</li>\n</ul>",
        "id": 276733738,
        "sender_full_name": "Gankra",
        "timestamp": 1648311965
    },
    {
        "content": "<p>this was on the assumption that a coherent model would need maximally robust information on what you're doing</p>",
        "id": 276733750,
        "sender_full_name": "Gankra",
        "timestamp": 1648311993
    },
    {
        "content": "<p>however i don't think that would actually get you maximally robust information everywhere if you want to be able to talk about polymorphic analysis of generic code</p>",
        "id": 276733784,
        "sender_full_name": "Gankra",
        "timestamp": 1648312070
    },
    {
        "content": "<p>would need to go down a rabbithole of &lt;T: ?Extern&gt; or something</p>",
        "id": 276733828,
        "sender_full_name": "Gankra",
        "timestamp": 1648312086
    },
    {
        "content": "<p>this was all working on the assumption that &amp;T only pointing to T was sacred, which it sounds like it's not now</p>",
        "id": 276733891,
        "sender_full_name": "Gankra",
        "timestamp": 1648312191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.3A.20refs.20that.20don't.20shrink.20provenanc/near/276733891\">said</a>:</p>\n<blockquote>\n<p>this was all working on the assumption that &amp;T only pointing to T was sacred, which it sounds like it's not now</p>\n</blockquote>\n<p>well as I said I cant promise this will work. but I had some vague ideas for how to loosen this restriction and we'll see how that goes.</p>",
        "id": 276734115,
        "sender_full_name": "RalfJ",
        "timestamp": 1648312495
    },
    {
        "content": "<p>ok cool i'll keep working on the assumption of maximally strict stacked borrows and what can work under it</p>",
        "id": 276734208,
        "sender_full_name": "Gankra",
        "timestamp": 1648312611
    }
]