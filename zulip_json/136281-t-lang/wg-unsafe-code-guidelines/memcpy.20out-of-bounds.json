[
    {
        "content": "<p>There was an issue somewhere about potential implementations of <code>memcpy</code> using vector instructions wanting to load memory out of bounds but I cannot find it. <span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span>  ?</p>",
        "id": 148625516,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543309335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  see <a href=\"https://github.com/rust-lang/rust/issues/32976#issuecomment-441979177\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/32976#issuecomment-441979177\">https://github.com/rust-lang/rust/issues/32976#issuecomment-441979177</a></p>",
        "id": 148625750,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543309652
    },
    {
        "content": "<p>That's a second example about wanting to be able to read and modify memory that's out-of-bounds.</p>",
        "id": 148625771,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543309672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> do you mean <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/2\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/2\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/2</a> ?</p>",
        "id": 148629092,
        "sender_full_name": "RalfJ",
        "timestamp": 1543313773
    },
    {
        "content": "<p>yeah</p>",
        "id": 148629105,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543313804
    },
    {
        "content": "<p>yeah all of that is currently UB until someone gets the LLVM devs to allow it, I think</p>",
        "id": 148629106,
        "sender_full_name": "RalfJ",
        "timestamp": 1543313805
    },
    {
        "content": "<p>these inbounds assumptions are used pervasively in alias analysis, I would not want to risk violating them</p>",
        "id": 148629109,
        "sender_full_name": "RalfJ",
        "timestamp": 1543313821
    },
    {
        "content": "<p>Check out the Atomic integer issue.</p>",
        "id": 148629201,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543313953
    },
    {
        "content": "<p>Basically, it is being argued that smaller atomic integer types can be emulated on top of larger ones.</p>",
        "id": 148629208,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543313977
    },
    {
        "content": "<p>But that requires applying atomic memory operations for a larger type, which access memory out-of-bounds.</p>",
        "id": 148629217,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543314001
    },
    {
        "content": "<p>So maybe the answer here is that no, smaller atomic integer types cannot be emulated on top of larger ones.</p>",
        "id": 148629272,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543314030
    },
    {
        "content": "<p>that is, I think, indeed the answer, at least with LLVM as the backend</p>",
        "id": 148629648,
        "sender_full_name": "RalfJ",
        "timestamp": 1543314641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> even with a different backend, to support this we would have to introduce memory operations that can read / write memory out-of-bounds (whether the reads / writes are atomic, volatile, or something else is irrelevant).</p>",
        "id": 148633187,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543319570
    },
    {
        "content": "<p>sure</p>",
        "id": 148633341,
        "sender_full_name": "RalfJ",
        "timestamp": 1543319763
    },
    {
        "content": "<p>While at machine level emulating the atomics via CAS loop on a larger memory region is (just fine)â„¢, it has to be done after LLVM (optimisation pipeline) gets it teeth to the code.</p>",
        "id": 148873153,
        "sender_full_name": "nagisa",
        "timestamp": 1543596366
    },
    {
        "content": "<p>i.e. implementing this in assembly is fine and so is fine to do so in instruction selection legalisation, I think.</p>",
        "id": 148873160,
        "sender_full_name": "nagisa",
        "timestamp": 1543596384
    },
    {
        "content": "<p>yeah, maybe you can even do that in LLVM's later lower-level IRs</p>",
        "id": 148885952,
        "sender_full_name": "RalfJ",
        "timestamp": 1543608839
    }
]