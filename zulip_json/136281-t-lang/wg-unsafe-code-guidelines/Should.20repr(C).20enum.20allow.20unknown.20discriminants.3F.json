[
    {
        "content": "<p>Hi,<br>\nUnlike C/C++ regular enums(not enum classes) in rust enums require an instance of an enum to have a valid discriminant. <br>\nCurrently passing a <code>repr(C) enum</code> from rust to C/C++ should be completely safe.<br>\nBut the reverse might not be, because if the enums get out of sync and you pass a discriminant you haven't updated yet in rust you get UB.<br>\nNot only that but regular enums in C/C++ you can easily write whatever int value you want into an enum instance (<a href=\"https://godbolt.org/z/oeZ2Be\">https://godbolt.org/z/oeZ2Be</a>)<br>\nSo passing a <code>&amp;mut c_enum_instance</code> into a C/C++ function is also very dangerous.<br>\nThis is really footgunny IMHO</p>\n<p>Maybe we should somehow drop this requirement(for repr(c)) / allow some <code>Other</code> variant to be added that captures all the unknown discriminants or something else</p>\n<p>Some existing discussions I've found:<br>\n<a href=\"https://github.com/rust-lang/rust-bindgen/issues/225\">https://github.com/rust-lang/rust-bindgen/issues/225</a><br>\n<a href=\"https://github.com/google/flatbuffers/issues/5467\">https://github.com/google/flatbuffers/issues/5467</a></p>",
        "id": 198043130,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589881797
    },
    {
        "content": "<p>This is why <code>winapi</code> defines enums as mere typedefs to <code>u32</code> and the variants as plain integer constants. That and it helps to save on compile time. Also C has a habit of using enums as bitflags and reimplementing all the operators to allow bitwise operations would also take up valuable compile time.</p>",
        "id": 198046306,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589883975
    },
    {
        "content": "<p>then we'd lose all layout optimizations for these enums though</p>",
        "id": 198249265,
        "sender_full_name": "RalfJ",
        "timestamp": 1590004677
    },
    {
        "content": "<p>and there's probably a good use-case for enums with validity requirements but a guaranteed layout, which is what <code>repr(C)</code> currently does</p>",
        "id": 198249337,
        "sender_full_name": "RalfJ",
        "timestamp": 1590004701
    },
    {
        "content": "<p>I agree the <code>C</code> is a misnomer though...</p>",
        "id": 198249352,
        "sender_full_name": "RalfJ",
        "timestamp": 1590004708
    },
    {
        "content": "<p>I dont think we should \"allow other variants\", at that point it's not an <code>enum</code> in the Rust sense any more but an integer.<br>\nbut I could imagine renaming <code>repr(C)</code> to something else (<code>repr(union_of_structs)</code> anyone?) to avoid the confusion.</p>",
        "id": 198249434,
        "sender_full_name": "RalfJ",
        "timestamp": 1590004769
    },
    {
        "content": "<p>I think it would be better to have a <code>cnum</code> (?) type. Rust <code>enum</code> and C <code>enum</code> have little in common IMHO.</p>",
        "id": 198256232,
        "sender_full_name": "Chris Denton",
        "timestamp": 1590008195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260325\">Chris Denton</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Should.20repr(C).20enum.20allow.20unknown.20discriminants.3F/near/198256232\">said</a>:</p>\n<blockquote>\n<p>I think it would be better to have a <code>cnum</code> (?) type. Rust <code>enum</code> and C <code>enum</code> have little in common IMHO.</p>\n</blockquote>\n<p>Wouldn't a wrapper type with associated constants do the same?</p>",
        "id": 198269605,
        "sender_full_name": "Gary Guo",
        "timestamp": 1590016947
    },
    {
        "content": "<p>Sure! My point was that I don't think there's a need to mess about with <code>repr</code> for this.</p>",
        "id": 198270385,
        "sender_full_name": "Chris Denton",
        "timestamp": 1590017619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260325\">Chris Denton</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Should.20repr(C).20enum.20allow.20unknown.20discriminants.3F/near/198270385\">said</a>:</p>\n<blockquote>\n<p>Sure! My point was that I don't think there's a need to mess about with <code>repr</code> for this.</p>\n</blockquote>\n<p>well, messing around with <code>repr</code> is the only way we can solve the problem that people regularly think that <code>repr(C)</code> enums are similar to <code>C</code> enums. That's not an unreasonable assumption, after all -- but it's just wrong.</p>",
        "id": 198297246,
        "sender_full_name": "RalfJ",
        "timestamp": 1590049600
    }
]