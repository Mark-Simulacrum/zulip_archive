[
    {
        "content": "<p>Well since it seems like we're going to try posting unsafe code here for review, this is a small and simple test case for this process.</p>\n<p>I've got a \"slice cast with possible resizing of the slice\" function. Normal thing you might write. This is motivated by the fact that <code>gfx-hal</code> had a similar function in <code>0.1</code>, and it had lurking UB, and then it was reported (including the fixed code) and they still have the exact same function in <code>0.2</code>. I wanted to make a version of this that's as bulletproof as possible, so here we are.</p>\n<p>You can read the code as a PR <a href=\"https://github.com/Lokathor/lokacore/pull/1\" target=\"_blank\" title=\"https://github.com/Lokathor/lokacore/pull/1\">here</a> or just as a plain file <a href=\"https://github.com/Lokathor/lokacore/blob/cast_slice/src/lib.rs\" target=\"_blank\" title=\"https://github.com/Lokathor/lokacore/blob/cast_slice/src/lib.rs\">here</a>. The function in question is <code>try_cast_slice</code>. There's also <code>try_cast_slice_mut</code> of course.</p>",
        "id": 168719985,
        "sender_full_name": "Lokathor",
        "timestamp": 1561154159
    },
    {
        "content": "<p>So basically this is transmuting around slices of types where the validity invariant allows any (or any initialized, decision still pending) bit pattern. That seems fine for all the integer and floating point types.</p>",
        "id": 168747798,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203042
    },
    {
        "content": "<p>For <code>Option&lt;NonZero*&gt;</code> you are relying on it being safe to transmute that back and forth to the equally-sized integer type, which I am not sure is a guarantee we are making.</p>",
        "id": 168747809,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203071
    },
    {
        "content": "<p>the same goes for the <code>Zeroed</code> part btw</p>",
        "id": 168747851,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203148
    },
    {
        "content": "<p>it sounds like a fairly reasonable guarantee though -- we do IIRC guarantee the similar thing for <code>Option&lt;&amp;T&gt;</code>, so seems reasonable to also guarantee it for <code>Option&lt;NonZero*&gt;</code></p>",
        "id": 168747857,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203181
    },
    {
        "content": "<p>btw, I think you could restrict the ZST restriction a bit</p>",
        "id": 168747868,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203228
    },
    {
        "content": "<p>transmuting an empty slice of any type to a slice of ZST is fine (you can pick any length so, so that might be a bit arbitrary)</p>",
        "id": 168747909,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203249
    },
    {
        "content": "<p>and vice versa you could transmute a slice of ZST to an empty slice of any type</p>",
        "id": 168747916,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203268
    },
    {
        "content": "<p>(both assuming that you checked for alignment first, as you do)</p>",
        "id": 168747920,
        "sender_full_name": "RalfJ",
        "timestamp": 1561203278
    },
    {
        "content": "<p>NonZeroT is guaranteed to have the same representation as T and at least with the current implementatoin Option&lt;NonZeroT&gt; is also guaranteed to have the same representation as NonZeroT.</p>",
        "id": 168748336,
        "sender_full_name": "nagisa",
        "timestamp": 1561204201
    },
    {
        "content": "<p>Documentation at least specifies that <code>size_of::&lt;Option&lt;NonZeroT&gt; &gt; == size_of::&lt;T&gt;</code>.</p>",
        "id": 168748402,
        "sender_full_name": "nagisa",
        "timestamp": 1561204274
    },
    {
        "content": "<p>The semi-formal rules are given in <a href=\"https://github.com/rust-lang/rust/pull/60300\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60300\">https://github.com/rust-lang/rust/pull/60300</a> which defined the behavior.</p>",
        "id": 168748833,
        "sender_full_name": "centril",
        "timestamp": 1561205056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> we could add the <code>NonZero_</code> types to the layout of scalars, and also consider them when defining the validity of scalars</p>",
        "id": 168752247,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561211993
    },
    {
        "content": "<p>same applies to <code>NonNull&lt;T&gt;</code>, we probably want to add it to the layout of pointers and references section</p>",
        "id": 168752294,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561212014
    },
    {
        "content": "<p>the rest is covered in: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/enums.md#discriminant-elision-on-option-like-enums\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/enums.md#discriminant-elision-on-option-like-enums\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/enums.md#discriminant-elision-on-option-like-enums</a></p>",
        "id": 168752356,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561212127
    },
    {
        "content": "<p>we might want to update that section, e.g., to point to the PR that <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> mentioned, since that kind of RFC'ed part of this behavior</p>",
        "id": 168752360,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561212159
    },
    {
        "content": "<p>so I've sent a PR expanding the discriminant-elision optimization with the PR that <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> mentioned: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/149\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/149\">https://github.com/rust-lang/unsafe-code-guidelines/pull/149</a></p>",
        "id": 168753097,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561213675
    },
    {
        "content": "<p>We don't need to say anything about the layout of <code>NonZero_</code> or <code>NonNull</code> in the UCGs, because they are <code>repr(transparent)</code>.</p>",
        "id": 168753139,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561213700
    },
    {
        "content": "<p>Yeah, ZST is kinda weird in this situation. Just deciding that ZST can only cast to other ZST seemed like the simplest answer that wouldn't cause accidental surprise later on.</p>",
        "id": 168783003,
        "sender_full_name": "Lokathor",
        "timestamp": 1561275156
    },
    {
        "content": "<blockquote>\n<p>We don't need to say anything about the layout of <code>NonZero_</code> or <code>NonNull</code> in the UCGs, because they are <code>repr(transparent)</code>.</p>\n</blockquote>\n<p>yeah, it's <code>Option&lt;_&gt;</code> of those that I was worried about</p>",
        "id": 168786233,
        "sender_full_name": "RalfJ",
        "timestamp": 1561281449
    },
    {
        "content": "<blockquote>\n<p>Yeah, ZST is kinda weird in this situation. Just deciding that ZST can only cast to other ZST seemed like the simplest answer that wouldn't cause accidental surprise later on.</p>\n</blockquote>\n<p>that's certainly a safe choice, just wanted to make sure you are aware that you have some more leeway there. also kudos for checking alignment first, many people forget that there can be ZST with non-trivial alignment constraints.</p>",
        "id": 168786279,
        "sender_full_name": "RalfJ",
        "timestamp": 1561281497
    },
    {
        "content": "<p>A lot of this was hammered out with <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> , who suggested for example to split off <code>Zeroable</code> as its own trait which a person might want to utilize separate from <code>Pod</code>.</p>\n<p>I settled on ZST and non-ZST not converting between each other because that way, if you get a slice back, you can always round trip it and get the slice you started with. It's not explicitly spelled out as a guarantee, but it really \"make sense\" as a thing that should generally work. If a ZST is involved then non-ZST -&gt; ZST lets you preserve the length you'd have absolutely no way to know that's actually \"correct\" for the current memory situation, so when you go from ZST -&gt; non-ZST you'd have to just say that the output length is 0 and you've \"lost\" some information.</p>\n<p>It's 7AM here right now, and I'll leave the PR up until some time around 12 hours from now. People can of course leave a comment here or there after the PR is merged as well.</p>\n<p>I think we can call this a moderately successful test run of the unsafe code reviewing. No bugs detected but we spotted at least one place to expand/clarify the guidelines it seems.</p>",
        "id": 168794454,
        "sender_full_name": "Lokathor",
        "timestamp": 1561296870
    }
]