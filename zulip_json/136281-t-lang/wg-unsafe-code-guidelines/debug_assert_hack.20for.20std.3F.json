[
    {
        "content": "<p>I was reminded in <a href=\"https://github.com/rust-lang/rust/issues/77220\">#77220</a> that we still can't run debug-only asserts in std, and had a thought: we do have a mechanism that either panics or succeeds in core based on the user's codegen settings, overflow checking.  So we could hack a \"useful only for UB checks\" assert based on that.</p>\n<p><code>debug_assert_hack!(c)</code> =&gt; <code>Sub::sub(0_u32, if c { 0 } else { 1 })</code>.</p>\n<p>I can't decide whether this is a brilliant or horrible idea...</p>",
        "id": 211860857,
        "sender_full_name": "scottmcm",
        "timestamp": 1601516839
    },
    {
        "content": "<p>we have <code>#[rustc_inherit_overflow_checks]</code> already, which is similar</p>",
        "id": 211861047,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601517056
    },
    {
        "content": "<p>(Yes, that's why I put <code>Sub::sub</code> instead of <code>-</code>, because using the trait method gets that attribute without having to mention it.)</p>",
        "id": 211861127,
        "sender_full_name": "scottmcm",
        "timestamp": 1601517141
    },
    {
        "content": "<p>You have to put <code>#[rustc_inherit_overflow_checks]</code> on <code>set_len</code> too. Also <code>#[rustc_inherit_overflow_checks]</code> is there to make <code>Sub::sub</code> behave the same way as <code>-</code> even when <code>Sub::sub</code> is not in the same crate as it's use.</p>",
        "id": 211879722,
        "sender_full_name": "bjorn3",
        "timestamp": 1601539706
    },
    {
        "content": "<p>3 years ago that wasn't the case, see &lt;<a href=\"https://github.com/rust-lang/rust/pull/45754#issuecomment-341884683\">https://github.com/rust-lang/rust/pull/45754#issuecomment-341884683</a>&gt;.  Of course it may have changed since then.</p>",
        "id": 212008750,
        "sender_full_name": "scottmcm",
        "timestamp": 1601619272
    }
]