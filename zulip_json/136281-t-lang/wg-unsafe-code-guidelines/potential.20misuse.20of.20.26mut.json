[
    {
        "content": "<p>So I'm reviewing a janky-but-optimized replacement for bincode for webrender, and I ran into this interesting case where things blow up: <a href=\"https://github.com/djg/peek-poke/issues/1#issuecomment-496605658\" target=\"_blank\" title=\"https://github.com/djg/peek-poke/issues/1#issuecomment-496605658\">https://github.com/djg/peek-poke/issues/1#issuecomment-496605658</a></p>",
        "id": 166738517,
        "sender_full_name": "Gankra",
        "timestamp": 1559064018
    },
    {
        "content": "<p>specifically even if they properly use MaybeUninit, and properly deny needs_drop types, they still have the problem that they can be doing </p>\n<p>let x =  MaybeUninit::&lt;bool&gt;::uninit(); <br>\nlet ptr = &amp;mut *x.as_mut_ptr(); <br>\n*ptr = true; <br>\nSome(x.assume_init())</p>",
        "id": 166738741,
        "sender_full_name": "Gankra",
        "timestamp": 1559064195
    },
    {
        "content": "<p>and refactoring that to not use references is hard?</p>",
        "id": 166739448,
        "sender_full_name": "RalfJ",
        "timestamp": 1559064647
    },
    {
        "content": "<p>they can avoid the drop issue by using <code>ptr::write</code> even when using references, right?</p>",
        "id": 166739464,
        "sender_full_name": "RalfJ",
        "timestamp": 1559064660
    },
    {
        "content": "<p>No it should be fairly easy to refactor, just annoying</p>",
        "id": 166739529,
        "sender_full_name": "Gankra",
        "timestamp": 1559064714
    },
    {
        "content": "<p>Yes you can ptr::write a reference but you have not made it clear that <code>x: &amp;mut bool = &amp;mut mem::uninitialized()</code> isn't UB</p>",
        "id": 166739632,
        "sender_full_name": "Gankra",
        "timestamp": 1559064767
    },
    {
        "content": "<p>yes that is the other problem</p>",
        "id": 166739709,
        "sender_full_name": "RalfJ",
        "timestamp": 1559064828
    },
    {
        "content": "<p>I was going from \"UB in the implementation\" to \"UB in the spec\" ;)</p>",
        "id": 166739766,
        "sender_full_name": "RalfJ",
        "timestamp": 1559064844
    },
    {
        "content": "<p>depending on how annoying it is to avoid the <code>&amp;mut bool</code> pointing to uninit memory, this might be a data pointer for <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a></p>",
        "id": 166739839,
        "sender_full_name": "RalfJ",
        "timestamp": 1559064902
    },
    {
        "content": "<p>I've given them several alternatives to avoid it. It's more just a \"unsafe programmers sure don't expect it\" sorta thing</p>",
        "id": 166740016,
        "sender_full_name": "Gankra",
        "timestamp": 1559065004
    },
    {
        "content": "<p>Also since I have your attention, it is totally defined to do transmute&lt;&amp;mut u64, &amp;mut [u8; 8]&gt;(val) to deserialize native-endian values, right?</p>",
        "id": 166740204,
        "sender_full_name": "Gankra",
        "timestamp": 1559065108
    },
    {
        "content": "<p>Like there's not a weird rule here that will break?</p>",
        "id": 166740242,
        "sender_full_name": "Gankra",
        "timestamp": 1559065133
    },
    {
        "content": "<p>(the alignment only weakens, and we just pass the reference to a method and forget about it instantly)</p>",
        "id": 166740306,
        "sender_full_name": "Gankra",
        "timestamp": 1559065167
    },
    {
        "content": "<p>yes taht seems toally okay. though transmutes with lifetimes always make me nervous</p>",
        "id": 166740332,
        "sender_full_name": "RalfJ",
        "timestamp": 1559065192
    },
    {
        "content": "<p>but this should even be a safe function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">u64_bytes</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 166740424,
        "sender_full_name": "RalfJ",
        "timestamp": 1559065226
    },
    {
        "content": "<p>and then you can do whatever you want with that function :D</p>",
        "id": 166740436,
        "sender_full_name": "RalfJ",
        "timestamp": 1559065236
    },
    {
        "content": "<p>cool</p>",
        "id": 166740499,
        "sender_full_name": "Gankra",
        "timestamp": 1559065277
    },
    {
        "content": "<p>sometimes I have good news ;)</p>",
        "id": 166740529,
        "sender_full_name": "RalfJ",
        "timestamp": 1559065296
    },
    {
        "content": "<blockquote>\n<p>I've given them several alternatives to avoid it. It's more just a \"unsafe programmers sure don't expect it\" sorta thing</p>\n</blockquote>\n<p>yeah fair. that's one reason why I am arguing for not enforcing validity below references.</p>",
        "id": 166740539,
        "sender_full_name": "RalfJ",
        "timestamp": 1559065298
    },
    {
        "content": "<p>OTOH, optimizing away <code>&amp;self</code> methods implemented for <code>!</code> is nice^^</p>",
        "id": 166740555,
        "sender_full_name": "RalfJ",
        "timestamp": 1559065311
    }
]