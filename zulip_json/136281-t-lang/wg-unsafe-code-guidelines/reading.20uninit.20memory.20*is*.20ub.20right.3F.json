[
    {
        "content": "<p>Reading unitialized memory (as in <code>let x = Vec::with_capacity(128); x.set_len(128); println!(\"{:?}\", x)</code>) <em>is</em> UB, right? I’m not going crazy, <em>right</em>?</p>",
        "id": 162284370,
        "sender_full_name": "nagisa",
        "timestamp": 1554156984
    },
    {
        "content": "<p>/me sanity checks self with miri</p>",
        "id": 162284577,
        "sender_full_name": "nagisa",
        "timestamp": 1554157263
    },
    {
        "content": "<p>sure looks like it</p>",
        "id": 162291137,
        "sender_full_name": "Daniel Carosone",
        "timestamp": 1554163862
    },
    {
        "content": "<p>It would be \"fun\" to see what would bee true in a world where that's somehow not UB.</p>",
        "id": 162296697,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554170765
    },
    {
        "content": "<blockquote>\n<p>Reading unitialized memory (as in <code>let x = Vec::with_capacity(128); x.set_len(128); println!(\"{:?}\", x)</code>) <em>is</em> UB, right? I’m not going crazy, <em>right</em>?</p>\n</blockquote>\n<p>I couldn't even get it to compile without putting <code>x.set_len()</code> inside of an <code>unsafe</code> block,  so this is my version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And even then, the output under either debug or release profiles is always</p>\n<div class=\"codehilite\"><pre><span></span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n</pre></div>\n\n\n<p>So I'd say that it is technically UB, but someone thought to use <code>calloc()</code> or something similar underneath it all (at least on Ubuntu 18.04.2 LTS, rustc 1.33.0 (2aa4c46cf 2019-02-28)) so the behavior is well-defined by accident at least... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 162334920,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554212534
    },
    {
        "content": "<p>I don't think it's using calloc. It just happens to be the first use of this part of memory in that process, and linux zeroes pages before handing them out to processes.</p>",
        "id": 162335725,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554213099
    },
    {
        "content": "<p>You're probably right about that, I haven't dug into the code to check.  That said, the docs <strong>do not</strong> make any promises about initializing memory, so even if it just happens to work out that the memory is always initialized, it is still UB.</p>",
        "id": 162335915,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554213212
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">..).</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 162336202,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554213389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> What's the output of that (too lazy to compile and test at the moment...)</p>",
        "id": 162336261,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554213433
    },
    {
        "content": "<p>You know about the playground, right? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 162336305,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554213456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[0, 1, 2, 3...]\n</pre></div>",
        "id": 162336324,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554213468
    },
    {
        "content": "<p>I did say I was being <strong>lazy</strong>! <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 162336429,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554213514
    },
    {
        "content": "<blockquote>\n<p>the memory is always initialized</p>\n</blockquote>\n<p>Is this accurate terminology? I'd think that the memory isn't initialized at this point; it just happens to have some values in it from the beforetime.</p>",
        "id": 162336532,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554213602
    },
    {
        "content": "<p>Who are quoting?  If I said that, then I was dead wrong...</p>",
        "id": 162336658,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554213672
    },
    {
        "content": "<p>Just to be completely sure that we're all on the same page: that it's UB to read uninitialized memory does not simply mean that you get some unpredictable string of ones and zeros from whatever was last written there. It is capital-U Undefined Behavior which can have arbitrary and arbitrarily bad consequences, such as running <code>rm -rf /</code> or making demons come out of your nose.</p>",
        "id": 162336825,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554213796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> To be that level of UB, you'd have to show that you can trigger something that bad just by reading the memory (no writing).  Can you? I don't know of a method of triggering something like <code>rm -rf</code> solely by reading memory, but I could be wrong.  (Some weird trick involving <code>mmap()</code> or <code>/proc</code>? IDK...)</p>",
        "id": 162337153,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554214063
    },
    {
        "content": "<p>That's not how this works. As you said previously, even if everything appears to work fine in test programs, it's still UB because the docs says so. Because it's declared to be UB by the language, if you write and run a program that does it, Rust implementations are free to do whatever with it, including such bad and apparently contrived things.</p>",
        "id": 162337332,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554214192
    },
    {
        "content": "<p>Good point, you're right.  I was jumping ahead and thinking about practical consequences.</p>",
        "id": 162337440,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554214258
    },
    {
        "content": "<p>(That said I actually do have a program in mind that could plausibly wind up running <code>rm -rf /</code> even though under a naive \"uninitalized memory is just an unpredictable fixed bit string\" it shouldn't)</p>",
        "id": 162337517,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554214301
    },
    {
        "content": "<p>Would that be using safe code only?</p>",
        "id": 162337794,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554214446
    },
    {
        "content": "<p>I mean, that is starting to sound like something the secure code working group would want to look into as well...</p>",
        "id": 162337829,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554214476
    },
    {
        "content": "<p>Safe Rust can't read uninitalized memory because reading uninitialized memory is UB and safe code is designed to not have UB. You need some unsafe to make the uninitalized memory available. (Or you exploit one of the open soundness issues to do it, but that's not really the point of the exercise.)</p>",
        "id": 162338033,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554214575
    },
    {
        "content": "<p>OK, I'm more comfortable with <code>unsafe</code> having this possibility.  Pure safe code should be <em>safe</em> at all times.</p>",
        "id": 162338206,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554214668
    },
    {
        "content": "<p>Huh? If reading uninitialized memory wasn't UB, then safe code would be allowed to do it (directly or indirectly). Because all \"safe\" means is \"no UB\". Safe code isn't (and shouldn't be) a stand-in for some standard of \"security\" or \"defensive coding\" or other meanings of \"safe\".</p>",
        "id": 162338412,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554214791
    },
    {
        "content": "<p>So, are you able to test out your idea and see if this is 'UB' or just 'ub'?</p>",
        "id": 162338413,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554214792
    },
    {
        "content": "<p>I agree, 'safe' does not mean 'secure'.  However, from an ergonomics point of view, it does feel like a nice set of training wheels before you hit the big-boy land of <code>unsafe{}</code></p>",
        "id": 162338582,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554214868
    },
    {
        "content": "<blockquote>\n<p>So, are you able to test out your idea and see if this is 'UB' or just 'ub'?</p>\n</blockquote>\n<p>The couple variants I tried get optimized out before they reach the point in the optimization pipeline where I would have hoped things go really awry. I was shooting for a similar approach to the C or C++ example that made the rounds a while ago where calling a function pointer that could only be null or one specific function (and which in reality would be null) would call that function instead of crashing.</p>",
        "id": 162339316,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554215267
    },
    {
        "content": "<blockquote>\n<p>I agree, 'safe' does not mean 'secure'.  However, from an ergonomics point of view, it does feel like a nice set of training wheels before you hit the big-boy land of <code>unsafe{}</code></p>\n</blockquote>\n<p>That is pretty fundamentally opposed to how safe and <code>unsafe</code> Rust are designed and related. If something can be exposed to safe code without UB (either as primitive or by writing a safe  API that uses <code>unsafe</code> internally) then it <em>should</em> be exposed, to minimize the amount of times people have to use <code>unsafe</code> and open themselves up to even worse than whatever \"dangerous\" thing we're talking about.</p>",
        "id": 162339495,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554215375
    },
    {
        "content": "<blockquote>\n<p>That is pretty fundamentally opposed to how safe and <code>unsafe</code> Rust are designed and related...</p>\n</blockquote>\n<p>I don't think that they are fundamentally opposed.  I agree that 'safe' doesn't mean 'secure', or 'it is impossible to shoot yourself in the foot in safe code'; training wheels don't guarantee that you won't find a way to flip your bike, or prevent getting hit by a truck either.  However, the 'no UB in safe rust' rule <em>is</em> a set of training wheels; the compiler won't let me use uninitialized memory, won't let me overflow buffers, etc.  That makes it easier for new programmers to learn rust; just avoid using <code>unsafe</code> until you have a good idea of what you're doing, and then be really, really careful when using <code>unsafe</code> in your code.</p>",
        "id": 162341045,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554216146
    },
    {
        "content": "<p>I guess I have two issues with this angle. The other one is that it casts safe Rust as a kid's playground and unsafe Rust as the thing for Real Programmers. In reality, everyone should minimize their use of unsafe, and IMHO there is no discernible \"minimum programming skill\" for being allowed to write <code>unsafe</code>, because most conventional measures of programming skill don't correlate well with being able to avoid UB (cf. how highly skilled and experienced C programmers continue to write programs full of UB) and the detailed knowledge being necessary for writing sound <code>unsafe</code> code has practically no overlap with the knowledge necessary to be productive in safe Rust.</p>",
        "id": 162342020,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1554216644
    },
    {
        "content": "<p>I see and agree with your points.  However, for someone that is new to rust, avoiding 'unsafe' is a pretty good first step towards being productive while you're still learning the language.  That's where I'm at right now; I've been programming professionally for about 18 years now, but only just started learning rust this year.  I needed to be productive within 3 <em>days</em> of starting to learn the language; by avoiding <code>unsafe</code> blocks, I got a feel for the borrow checker, and quickly got a better idea of rust's semantics <strong>while still being productive</strong>.  I could have written all of my code inside of <code>unsafe</code> blocks right from the start, but that would have been code that was syntactically rust, but morally equivalent to C code with a lot of void pointers all over the place.  Not a good use of the language.</p>\n<p>IMHO, <code>safe</code> vs. <code>unsafe</code> is actually one of the major selling points of rust; it lets you take risks that you can't  in other languages.</p>",
        "id": 162343089,
        "sender_full_name": "Cem Karan",
        "timestamp": 1554217218
    },
    {
        "content": "<p>See the pictures in <a href=\"https://stackoverflow.com/a/51224196/155423\" target=\"_blank\" title=\"https://stackoverflow.com/a/51224196/155423\">https://stackoverflow.com/a/51224196/155423</a></p>",
        "id": 162353592,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1554224477
    },
    {
        "content": "<p>FWIW it is possible to get uninitialized buffers in \"safe\" code if the unsafe is abstracted away from your code in certain libraries.</p>",
        "id": 162359007,
        "sender_full_name": "nagisa",
        "timestamp": 1554228249
    },
    {
        "content": "<p>/me won’t be pointing fingers</p>",
        "id": 162359012,
        "sender_full_name": "nagisa",
        "timestamp": 1554228255
    },
    {
        "content": "<p>UB is a compiler-writer concept that is intended to circumscribe those aspects of programming where the compiler is not required to uphold the programmer's expressed intentions. In other words, compiler optimizations are permitted – one might almost say encouraged – to screw up all code that contains any amount of UB. rustc attempts to prove to itself that code is not UB, aborting compilation when it fails to complete those proofs. <code>unsafe</code> is simply a compiler keyword via which a programmer tells the compiler that the programmer has taken on a limited part of that proof responsibility.  If the programmer lies, or simply is wrong, and UB is actually present, then any compiler guarantees about realizing the programmer's intent are null and void.</p>",
        "id": 162363950,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1554231537
    }
]