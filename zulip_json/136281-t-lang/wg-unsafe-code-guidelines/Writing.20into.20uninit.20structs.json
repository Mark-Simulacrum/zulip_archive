[
    {
        "content": "<p>Hi, this look like it should be UB but Miri doesn't complain and it seems like <code>Rc</code> is doing similar stuff: <a href=\"https://play.rust-lang.org/?gist=51690e4dd9d723e5b64b6a37280aa5ae\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=51690e4dd9d723e5b64b6a37280aa5ae\">https://play.rust-lang.org/?gist=51690e4dd9d723e5b64b6a37280aa5ae</a><br>\nthoughts? (if this isn't the place for questions like that please tell me :) )</p>",
        "id": 185694840,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579093234
    },
    {
        "content": "<p>Ha! found it! <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a> I remember these things were talked about in the group.<br>\nmost of the talk seem to be on uninhabitable types though</p>",
        "id": 185695684,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579093908
    },
    {
        "content": "<p>yeah Miri doesnt currently check that references point to something valid</p>",
        "id": 185714491,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Is that valid though? Because my example is a simple variation of what happens when You call <code>Rc::new_uninit()</code></p>",
        "id": 185814672,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579181698
    },
    {
        "content": "<p>Well, you've found <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a></p>",
        "id": 185839980,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196730
    },
    {
        "content": "<p>so, as you can see -- the discussion is still open</p>",
        "id": 185839986,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196736
    },
    {
        "content": "<p>for now we should assume it to be not allowed, but also gather good use-cases for allowing references that are aligned and dereferencable but point to invalid data</p>",
        "id": 185840017,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> well in the Rc case we could just replace with alloc_zeroed, right? that way the usize's aren't invalid anymore because 0 is a valid usize and then you the reference points to a zeroed struct full of zero allowed primitives except the last one T which is inside a MaybeUninit so that's fine.</p>",
        "id": 185916587,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579268682
    },
    {
        "content": "<p>well sure, but should it really be necessary to zero-init things?</p>",
        "id": 185945009,
        "sender_full_name": "RalfJ",
        "timestamp": 1579286872
    },
    {
        "content": "<p>sorry I also lost context here, not sure what the question/goal is^^</p>",
        "id": 185945016,
        "sender_full_name": "RalfJ",
        "timestamp": 1579286880
    },
    {
        "content": "<p>Sorry. I'll try to be focused and concise.<br>\nA. Seems like there's no agreement if that's allowed but it might not be.<br>\nB. If it might not be allowed why Rc doesn't just zeroize the memory so it would be valid (or maybe they see no reason to do that until there's a decision on validity?)</p>",
        "id": 185991128,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579346215
    },
    {
        "content": "<p>Zero-init is undesirable because it has performance cost.  If it is decided that whatever Rc is doing is illegal (I haven’t looked), it should be fixed, but in a way that’s zero-overhead, using MaybeUninit or something.  That said, since Rc is in the standard library which is versioned along with the compiler, it’s not super urgent to fix theoretical UB if it’s known that the current compiler doesn’t exploit it.  Which is not to say it’s not important, if only because people will reference the standard library when making their own types.</p>",
        "id": 186034384,
        "sender_full_name": "comex",
        "timestamp": 1579428521
    },
    {
        "content": "<blockquote>\n<p>Zero-init is undesirable because it has performance cost.  If it is decided that whatever Rc is doing is illegal (I haven’t looked), it should be fixed, but in a way that’s zero-overhead, using MaybeUninit or something.  That said, since Rc is in the standard library which is versioned along with the compiler, it’s not super urgent to fix theoretical UB if it’s known that the current compiler doesn’t exploit it.  Which is not to say it’s not important, if only because people will reference the standard library when making their own types.</p>\n</blockquote>\n<p>Well right now rust doesn't let you calculate fields offsets in a \"safe\" way (at least that what the debate is rn)</p>",
        "id": 186036052,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579431895
    },
    {
        "content": "<blockquote>\n<p>if only because people will reference the standard library when making their own types.</p>\n</blockquote>\n<p>I feel we need to raise more awareness that this is a bad idea and double down more on documenting the specialness of assumptions that the standard library makes in <code>// SAFETY</code> comments</p>",
        "id": 186050043,
        "sender_full_name": "centril",
        "timestamp": 1579458298
    }
]