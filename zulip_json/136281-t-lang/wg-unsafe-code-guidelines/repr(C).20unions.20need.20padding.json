[
    {
        "content": "<p>This <code>union</code> needs to have padding:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">union</span> <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">s</span>: <span class=\"nc\">S</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>When doing a roundtrip from Rust-&gt;C-&gt;Rust, the content of the padding won't be preserved.</p>",
        "id": 169330741,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561882920
    },
    {
        "content": "<p>The \"bag of bits\" definition is fine, in that one can read and write all bits of the union. But if the bit is a padding bit, reading it returns <code>undef</code>.</p>",
        "id": 169330791,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561882985
    },
    {
        "content": "<p>so that's a thing in C as well?</p>",
        "id": 169332304,
        "sender_full_name": "RalfJ",
        "timestamp": 1561886278
    },
    {
        "content": "<p>dang :(</p>",
        "id": 169332308,
        "sender_full_name": "RalfJ",
        "timestamp": 1561886282
    },
    {
        "content": "<p>@ralf no, i was wrong</p>",
        "id": 169333180,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561887996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 169333182,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561888006
    },
    {
        "content": "<p>I've posted in the issue</p>",
        "id": 169333186,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561888024
    },
    {
        "content": "<p>our repr(C) union implementation has a bug if it doesn't preserve the contents of field padding</p>",
        "id": 169333195,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561888048
    },
    {
        "content": "<p>aha? so C does preserve it?</p>",
        "id": 169333661,
        "sender_full_name": "RalfJ",
        "timestamp": 1561888936
    },
    {
        "content": "<p>no, C does not preserve it</p>",
        "id": 169333826,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561889304
    },
    {
        "content": "<p>C unions might only have trailing padding, and that trailing padding does not need to be preserved</p>",
        "id": 169333835,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561889327
    },
    {
        "content": "<p>If a union does not have trailing padding, then it has no padding - but union fields can have padding</p>",
        "id": 169333848,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561889383
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 169333850,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561889398
    },
    {
        "content": "<p>but it cant know which field it is, in general? I thought C unions are \"extensible\"</p>",
        "id": 169335074,
        "sender_full_name": "RalfJ",
        "timestamp": 1561891853
    },
    {
        "content": "<p>as in, if one side has fewer fields than the other, data can still be forwarded correctly</p>",
        "id": 169335080,
        "sender_full_name": "RalfJ",
        "timestamp": 1561891866
    },
    {
        "content": "<p>(that's AFAIK something that libraries use to remain forward compatible)</p>",
        "id": 169335081,
        "sender_full_name": "RalfJ",
        "timestamp": 1561891882
    }
]