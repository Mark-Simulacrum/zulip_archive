[
    {
        "content": "<p>This is an example from the pointer documentation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">first_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// It&#39;ll print: &quot;[4, 2, 3]&quot;.</span>\n</code></pre></div>\n\n\n<p>It seems like this should be UB because <code>first_value</code> is a mutable reference that is live at the same time as <code>s</code>. Can't the compiler reason that <code>s</code> is still <code>[1,2,3]</code> because it was still <code>[1,2,3]</code> as of the end of line 2, and no mutable references derived from <code>s</code> were created in the meantime (since the pointer doesn't count).</p>",
        "id": 207492333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597904695
    },
    {
        "content": "<p>I think this example is sound, you can test this using MIRI.</p>\n<p>pointers do count, they \"just\" aren't tracked. So as long as you don't use a reference which was created before the pointer you can use pointers however you want</p>",
        "id": 207492531,
        "sender_full_name": "lcnr",
        "timestamp": 1597904956
    },
    {
        "content": "<p>It would be UB if you mutate <code>s[0]</code> after creating <code>ptr</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">first_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207492639,
        "sender_full_name": "lcnr",
        "timestamp": 1597905071
    },
    {
        "content": "<p>I thought it was illegal to even have two unique pointers to the same allocation, even if you don't use them</p>",
        "id": 207492743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905185
    },
    {
        "content": "<p>you can have infinitely many pointer to the same allocation</p>",
        "id": 207492950,
        "sender_full_name": "lcnr",
        "timestamp": 1597905406
    },
    {
        "content": "<p>sorry, I meant reference not pointer</p>",
        "id": 207492976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905440
    },
    {
        "content": "<p>creating  a new mutable reference makes using a previous mutable reference UB</p>",
        "id": 207492984,
        "sender_full_name": "lcnr",
        "timestamp": 1597905448
    },
    {
        "content": "<p>so this use is okay because it is the same as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">first_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// It&#39;ll print: &quot;[4, 2, 3]&quot;.</span>\n</code></pre></div>",
        "id": 207493056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905499
    },
    {
        "content": "<p>so <code>s</code> is supposed to be considered borrowed while <code>ptr</code> / <code>first_value</code> are active</p>",
        "id": 207493083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905544
    },
    {
        "content": "<p>even if the type system doesn't know</p>",
        "id": 207493093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905553
    },
    {
        "content": "<p>yeah, stacked borrows works outside of the type system</p>",
        "id": 207493101,
        "sender_full_name": "lcnr",
        "timestamp": 1597905569
    },
    {
        "content": "<p>have you read <a href=\"https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html\">https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html</a> ?</p>",
        "id": 207493113,
        "sender_full_name": "lcnr",
        "timestamp": 1597905600
    },
    {
        "content": "<p>I've read the paper too</p>",
        "id": 207493171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905628
    },
    {
        "content": "<p>I get that it's a semantic (\"runtime\") version of the borrow checker</p>",
        "id": 207493187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905652
    },
    {
        "content": "<p>but my recollection was that even creating aliasing <code>&amp;mut</code>'s is UB territory</p>",
        "id": 207493230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905718
    },
    {
        "content": "<p>If you pass <code>s</code> and <code>first_value</code> to a function accepting two <code>&amp;mut</code>'s that would be UB, yes?</p>",
        "id": 207493277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905739
    },
    {
        "content": "<p>even if <code>f</code> doesn't do anything with them</p>",
        "id": 207493283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20this.20example.20safe.3F/near/207493277\">said</a>:</p>\n<blockquote>\n<p>If you pass <code>s</code> and <code>first_value</code> to a function accepting two <code>&amp;mut</code>'s that would be UB, yes?</p>\n</blockquote>\n<p>yeah, mutable references passed to functions are considered used afaik</p>",
        "id": 207493286,
        "sender_full_name": "lcnr",
        "timestamp": 1597905778
    },
    {
        "content": "<p>iirc because we explicitly retag them at the start</p>",
        "id": 207493303,
        "sender_full_name": "lcnr",
        "timestamp": 1597905810
    },
    {
        "content": "<p>aha, yes I see that now in the <code>demo4</code> example of the blog post</p>",
        "id": 207493358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905847
    },
    {
        "content": "<p>what is the currently authoritative version of stacked borrows? Is it the code in miri or the coq formalization?</p>",
        "id": 207493450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597905978
    },
    {
        "content": "<p>tbh I don't even think that there exists one</p>",
        "id": 207493463,
        "sender_full_name": "lcnr",
        "timestamp": 1597906006
    },
    {
        "content": "<p>lol we need a specification for the specification</p>",
        "id": 207493473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597906027
    },
    {
        "content": "<p>considering that we never had an official lang team decision on this (and we probably don't want to for now if we want to ever make this more strict)</p>",
        "id": 207493480,
        "sender_full_name": "lcnr",
        "timestamp": 1597906045
    },
    {
        "content": "<p>so I guess the \"best\" version is the current implementation in miri itself</p>",
        "id": 207493495,
        "sender_full_name": "lcnr",
        "timestamp": 1597906062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20this.20example.20safe.3F/near/207493450\">said</a>:</p>\n<blockquote>\n<p>what is the currently authoritative version of stacked borrows? Is it the code in miri or the coq formalization?</p>\n</blockquote>\n<p>both should actually be in sync currently</p>",
        "id": 207721319,
        "sender_full_name": "RalfJ",
        "timestamp": 1598097752
    },
    {
        "content": "<p>the coq formalization exists at <a href=\"https://gitlab.mpi-sws.org/FP/stacked-borrows/\">https://gitlab.mpi-sws.org/FP/stacked-borrows/</a></p>",
        "id": 207721343,
        "sender_full_name": "RalfJ",
        "timestamp": 1598097791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20this.20example.20safe.3F/near/207493083\">said</a>:</p>\n<blockquote>\n<p>so <code>s</code> is supposed to be considered borrowed while <code>ptr</code> / <code>first_value</code> are active</p>\n</blockquote>\n<p>yes, exactly!</p>",
        "id": 207721346,
        "sender_full_name": "RalfJ",
        "timestamp": 1598097800
    }
]