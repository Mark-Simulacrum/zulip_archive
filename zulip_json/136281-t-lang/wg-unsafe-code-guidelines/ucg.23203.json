[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I was wondering if we need to use the term \"Undefined Behavior\" in the spec at all</p>",
        "id": 176076283,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879094
    },
    {
        "content": "<p>One thing that is becoming clearer to me is that it is a bad name, it means different things to different people, and the name is not really that self-describing. What does undefined mean? Not defined? A lot of things are not defined, out of scope, unspecified, etc.</p>",
        "id": 176076309,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879137
    },
    {
        "content": "<p>One thing I'm tending to wish more and more is that we would, instead, define what \"guaranteed behavior\" is</p>",
        "id": 176076374,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879191
    },
    {
        "content": "<p>Or something like that, that talks about: if you stick to the contract of the rust abstract machine, the compiler / impl guarantees that your program runs on real hardware according to the abstract machine rules.</p>",
        "id": 176076413,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879254
    },
    {
        "content": "<p>And then talking about implementation-defined/unspecified might become: the implementation must guarantee what the behavior is, and for implementation-defined it must say what those guarantees are</p>",
        "id": 176076478,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879326
    },
    {
        "content": "<p>The guarantee then cannot be \"there are no guarantees\", since the abstract machines requires the implementation to have to guarantee some concrete behavior</p>",
        "id": 176076490,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879360
    },
    {
        "content": "<p>After going through all that, then we come to \"behavior for which the abstract machine does not provide any guarantees\"</p>",
        "id": 176076494,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879384
    },
    {
        "content": "<p>The implementation might provide some, the hardware might provide some, but that doesn't matter for the abstract machine - and something like miri can just error</p>",
        "id": 176076562,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879467
    },
    {
        "content": "<p>The abstract machine can do anything, like optimizing away code that reaches there.</p>",
        "id": 176076569,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879488
    },
    {
        "content": "<p>Users cannot do negative reasoning about this type of behavior.</p>",
        "id": 176076573,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879498
    },
    {
        "content": "<p>To allow users to assume that something cannot happen, we would need to provide them with an explicit guarantee that justifies that, e.g., references are guaranteed to never be null</p>",
        "id": 176076632,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879545
    },
    {
        "content": "<p>I think doing it this way might make the document much easier to understand</p>",
        "id": 176076652,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879585
    },
    {
        "content": "<p>instead of writing \"if you do this, the behavior is undefined\", \"exhibits undefined behavior\", \"is undefined behavior\" - we'd just more plainly write \"The abstract machine does not guarantee anything about programs that do X\".</p>",
        "id": 176076720,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879664
    },
    {
        "content": "<p>Or just like you propose, \"Doing X is an error in the abstract machine\"</p>",
        "id": 176076781,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879761
    },
    {
        "content": "<p>That would also link nicely with <code>miri</code>, where the goal is for UB to just be raised as an error.</p>",
        "id": 176076830,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568879781
    },
    {
        "content": "<p>Absolutely, we should focus more on saying what's guaranteed. That's both what people writing unsafe code want to know for sure, and also the kind of thing an eventual spec will have to specify.</p>",
        "id": 176159603,
        "sender_full_name": "Lokathor",
        "timestamp": 1568946327
    },
    {
        "content": "<blockquote>\n<p>Or just like you propose, \"Doing X is an error in the abstract machine\"</p>\n</blockquote>\n<p>agreed, I think positive statements are better. that said, we likely do still need to relate to C-style terminology, just because many people use it and think they know what it means (many of those are wrong, but well).</p>",
        "id": 177710217,
        "sender_full_name": "RalfJ",
        "timestamp": 1570625556
    },
    {
        "content": "<p>but the roead for that could be to explain UB in terms of this: \"UB is an error condition in the abstract machine; the Rust compiler assumes that such errors are never reached by the program it compiles\"</p>",
        "id": 177710272,
        "sender_full_name": "RalfJ",
        "timestamp": 1570625587
    },
    {
        "content": "<p>and this is also in line with me saying \"it is a spec bug to leave out a case\": when the spec does a case distinction, it should explicitly list all cases that are abstract machine errors; there is no \"implicit\" fall-back to that -- there is no \"implicit UB\".</p>",
        "id": 177710362,
        "sender_full_name": "RalfJ",
        "timestamp": 1570625651
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 177780581,
        "sender_full_name": "gnzlbg",
        "timestamp": 1570685333
    }
]