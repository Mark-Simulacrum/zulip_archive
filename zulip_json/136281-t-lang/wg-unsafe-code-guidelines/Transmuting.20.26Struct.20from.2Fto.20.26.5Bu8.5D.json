[
    {
        "content": "<p>Hello. I’m making a library that transmutes (or dereferences pointers after casting) <code>&amp;SomeCustomStruct</code> from or to <code>&amp;[u8]</code>, for reading or writing binary files. I’d like to confirm the invariants that need to be maintained to avoid UB. For \"from bytes\" I have: 1. all bit patterns must be valid for struct fields (so no <code>bool</code>, enum, etc) 2. <code>align_of() == 1</code>. For \"to bytes\": no padding. Does this sound right?</p>",
        "id": 232889769,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617363876
    },
    {
        "content": "<p>You should check out the <code>zerocopy</code> crate, which has traits for this</p>",
        "id": 232890064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617364119
    },
    {
        "content": "<p>Quoting from there:</p>\n<blockquote>\n<p>If a type has the following properties, then it is safe to implement <code>FromBytes</code> for that type:</p>\n<ul>\n<li>If the type is a struct:<ul>\n<li>It must have a defined representation (<code>repr(C)</code>, <code>repr(transparent)</code>, or <code>repr(packed)</code>)</li>\n<li>All of its fields must implement <code>FromBytes</code></li>\n</ul>\n</li>\n<li>If the type is an enum:<ul>\n<li>It must be a C-like enum (meaning that all variants have no fields)</li>\n<li>It must have a defined representation (<code>repr</code>s <code>C</code>, <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>, <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, or <code>isize</code>).</li>\n<li>The maximum number of discriminants must be used (so that every possible bit pattern is a valid one). Be very careful when using the <code>C</code>, <code>usize</code>, or <code>isize</code> representations, as their size is platform-dependent.</li>\n</ul>\n</li>\n</ul>\n<p>If a type has the following properties, then it is safe to implement <code>AsBytes</code> for that type</p>\n<ul>\n<li>If the type is a struct:<ul>\n<li>It must have a defined representation (<code>repr(C)</code>, <code>repr(transparent)</code>, or <code>repr(packed)</code>).</li>\n<li>All of its fields must be <code>AsBytes</code></li>\n<li>Its layout must have no inter-field padding. This is always true for <code>repr(transparent)</code> and <code>repr(packed)</code>. For <code>repr(C)</code>, see the layout algorithm described in the <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">Rust Reference</a>.</li>\n</ul>\n</li>\n<li>If the type is an enum:<ul>\n<li>It must be a C-like enum (meaning that all variants have no fields)</li>\n<li>It must have a defined representation (<code>repr</code>s <code>C</code>, <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>, <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, or <code>isize</code>).</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 232890237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617364283
    },
    {
        "content": "<p>I’ve looked at <code>zerocopy</code> and a few other crates, but I’d like slightly different APIs. (Also,<code>zerocopy</code> does not have a public issue tracker and my email to the author some time ago never got a response)</p>",
        "id": 232890308,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617364333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> What are you quoting from? <a href=\"https://docs.rs/zerocopy/0.4.0/zerocopy/trait.FromBytes.html#safety\">https://docs.rs/zerocopy/0.4.0/zerocopy/trait.FromBytes.html#safety</a> looks like a different version of the same since it doesn’t list <code>repr</code> as arequirement for structs</p>",
        "id": 232890564,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617364555
    },
    {
        "content": "<p>That quote was from the 0.2.1 docs</p>",
        "id": 232890634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617364606
    },
    {
        "content": "<p>I think it is fair to say that repr(Rust) structs are always unsafe to transmute like this until the safe-transmute stuff lands</p>",
        "id": 232890738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617364693
    },
    {
        "content": "<p>Oh, the 0.4.0 documentation has an interesting rationale for why it's okay to view padding bytes using <code>FromBytes</code></p>",
        "id": 232890898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617364817
    },
    {
        "content": "<p>it cites <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/174\">UCG#174</a> to say that padding bytes are safe to observe because they don't have validity constraints, but I would have expected uninitialized padding bytes to present a problem</p>",
        "id": 232891099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617364931
    },
    {
        "content": "<p>I’m ok with limiting to <code>repr(C)</code>, but different versions of <code>zerocopy</code> saying different things is why I’d like confirmation either from authoritative docs (<a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html\">https://doc.rust-lang.org/std/mem/fn.transmute.html</a> doesn’t say much) or at least from this group along the lines \"yes, this subset of transmutes are sound\"</p>",
        "id": 232891570,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617365280
    },
    {
        "content": "<p>Even if it’s a very conservative subset</p>",
        "id": 232891635,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617365307
    },
    {
        "content": "<p>I don't think the zerocopy docs disagree with your characterization. The semantic property required is \"all bit patterns valid and no alignment\" for <code>FromBytes</code> and \"no padding\" for <code>AsBytes</code>; the list of constraints in the zerocopy docs ensure how you can achieve those properties in a struct definition</p>",
        "id": 232893151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617366398
    },
    {
        "content": "<p>There are additional issues around types with lifetimes, which is why the zerocopy docs are conservative and don't permit any kind of pointers</p>",
        "id": 232893446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617366626
    },
    {
        "content": "<p>I <code>repr(C)</code> struct with <code>align_of() == 1</code> can’t have padding, right?</p>",
        "id": 232895856,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617368436
    },
    {
        "content": "<p>Since all fields also have to have <code>align_of() == 1</code></p>",
        "id": 232895879,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617368449
    },
    {
        "content": "<p>(Padding between fields. Within field is checked when looking at that field’s type)</p>",
        "id": 232895969,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617368503
    },
    {
        "content": "<p>Is the<br>\n<a href=\"https://docs.rs/bytemuck/1.5.1/bytemuck/fn.bytes_of.html\">https://docs.rs/bytemuck/1.5.1/bytemuck/fn.bytes_of.html</a> function closer to what you intended?</p>",
        "id": 232896254,
        "sender_full_name": "Lokathor",
        "timestamp": 1617368664
    },
    {
        "content": "<p><a href=\"https://docs.rs/bytemuck/1.5.1/bytemuck/trait.Pod.html#safety\">https://docs.rs/bytemuck/1.5.1/bytemuck/trait.Pod.html#safety</a> would be the relevant part but yes, that too</p>",
        "id": 232896858,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617369063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232890308\">said</a>:</p>\n<blockquote>\n<p>(Also,<code>zerocopy</code> does not have a public issue tracker and my email to the author some time ago never got a response)</p>\n</blockquote>\n<p>cc <span class=\"user-mention\" data-user-id=\"132362\">@Joshua Liebow-Feeser</span></p>",
        "id": 232898119,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1617369905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232895856\">said</a>:</p>\n<blockquote>\n<p>I <code>repr(C)</code> struct with <code>align_of() == 1</code> can’t have padding, right?</p>\n</blockquote>\n<p>It can't have padding, but it can have niches; you should check for the niche attributes or blacklist <code>Box</code>, <code>NonNull</code> etc</p>",
        "id": 232902362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617372330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232890898\">said</a>:</p>\n<blockquote>\n<p>Oh, the 0.4.0 documentation has an interesting rationale for why it's okay to view padding bytes using <code>FromBytes</code></p>\n</blockquote>\n<p>padding is easy in <code>FromBytes</code>, so I am confused what you are concerned about here?</p>",
        "id": 232922649,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382396
    },
    {
        "content": "<p>We might want to have \"guaranteed 0 padding\" some day (<a href=\"https://github.com/rust-lang/rust/issues/70230\">#70230</a>), but that's most likely going to require opt-in to avoid compatibility issues</p>",
        "id": 232922729,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382437
    },
    {
        "content": "<blockquote>\n<p>For \"from bytes\" I have: 1. all bit patterns must be valid for struct fields (so no bool, enum, etc) 2. align_of() == 1. For \"to bytes\": no padding. Does this sound right?</p>\n</blockquote>\n<p>for to_bytes, the precise requirement is \"all bit patterns that are valid for the struct must be fully initialized\". this is using a slightly different notion of \"bit pattern\" than you: a \"bit pattern\" in the Rust Abstract Machine consists of bits that are either 0, 1, or U(ninitialized).<br>\nSo padding in the struct is a problem, but so is <code>MaybeUninit</code>. The conservative version of this would be: no padding, no <code>union</code>.</p>",
        "id": 232922973,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> ^</p>",
        "id": 232922985,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232922649\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232890898\">said</a>:</p>\n<blockquote>\n<p>Oh, the 0.4.0 documentation has an interesting rationale for why it's okay to view padding bytes using <code>FromBytes</code></p>\n</blockquote>\n<p>padding is easy in <code>FromBytes</code>, so I am confused what you are concerned about here?</p>\n</blockquote>\n<p>My mistake, I confused it with <code>AsBytes</code></p>",
        "id": 232923164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617382614
    },
    {
        "content": "<blockquote>\n<p>This is using a slightly different notion of \"bit pattern\" than you: a \"bit pattern\" in the Rust Abstract Machine consists of bits that are either 0, 1, or U(ninitialized).</p>\n</blockquote>\n<p>Maybe we should call that \"trit pattern\"? :D</p>",
        "id": 232923309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617382682
    },
    {
        "content": "<p>Furthermore, there is some <em>really subtle</em> nasty issues around transmuting pointers to integers. On the one hand I know of no way to resolve this other than saying that the transmute is UB. On the other hand that probably breaks <em>so much</em> code. But this might be why some of the existing crates rule out pointers.</p>",
        "id": 232923373,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232923309\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is using a slightly different notion of \"bit pattern\" than you: a \"bit pattern\" in the Rust Abstract Machine consists of bits that are either 0, 1, or U(ninitialized).</p>\n</blockquote>\n<p>Maybe we should call that \"trit pattern\"? :D</p>\n</blockquote>\n<p>:P<br>\nI like to call them \"abstract bits\" or \"abits\" for short.</p>",
        "id": 232923406,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382719
    },
    {
        "content": "<p>The input <code>&amp;[u8]</code> is assumed initialized, yes</p>",
        "id": 232923432,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617382735
    },
    {
        "content": "<p>because when you make it fully precise, there's not three of them, there's infinitely many</p>",
        "id": 232923443,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232923432\">said</a>:</p>\n<blockquote>\n<p>The input <code>&amp;[u8]</code> is assumed initialized, yes</p>\n</blockquote>\n<p>I was talking about the other direction. transmuting <code>&amp;MaybeUninit&lt;u8&gt;</code> to <code>&amp;[u8]</code> is <em>not</em> sound, even though there is no padding.</p>",
        "id": 232923489,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232923373\">said</a>:</p>\n<blockquote>\n<p>Furthermore, there is some <em>really subtle</em> nasty issues around transmuting pointers to integers. On the one hand I know of no way to resolve this other than saying that the transmute is UB. On the other hand that probably breaks <em>so much</em> code. But this might be why some of the existing crates rule out pointers.</p>\n</blockquote>\n<p>see <a href=\"#narrow/stream/216762-project-safe-transmute/topic/Transmuting.20betwen.20references.20.2F.20raw.20pointers.20.2F.20integers\">this discussion</a> for more details</p>",
        "id": 232923690,
        "sender_full_name": "RalfJ",
        "timestamp": 1617382832
    },
    {
        "content": "<p>Does that mean that transmuting to <code>MaybeUninit&lt;[u8]&gt;</code> would be okay in ~all situations?</p>",
        "id": 232923800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617382871
    },
    {
        "content": "<p>Or equivalently: <code>&amp;A -&gt; &amp;MaybeUninit&lt;A&gt;</code> is always safe, <code>&amp;MaybeUninit&lt;A&gt; -&gt; &amp;MaybeUninit&lt;B&gt;</code> is safe if <code>A</code> and <code>B</code> have the same size and alignment</p>",
        "id": 232924244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617383047
    },
    {
        "content": "<p>those almost seem like standard library functions</p>",
        "id": 232924299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617383079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232923800\">said</a>:</p>\n<blockquote>\n<p>Does that mean that transmuting to <code>MaybeUninit&lt;[u8]&gt;</code> would be okay in ~all situations?</p>\n</blockquote>\n<p>yes</p>",
        "id": 232924429,
        "sender_full_name": "RalfJ",
        "timestamp": 1617383137
    },
    {
        "content": "<p>that is the intention of <code>MaybeUninit</code></p>",
        "id": 232924449,
        "sender_full_name": "RalfJ",
        "timestamp": 1617383145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232924244\">said</a>:</p>\n<blockquote>\n<p>Or equivalently: <code>&amp;A -&gt; &amp;MaybeUninit&lt;A&gt;</code> is always safe, <code>&amp;MaybeUninit&lt;A&gt; -&gt; &amp;MaybeUninit&lt;B&gt;</code> is safe if <code>A</code> and <code>B</code> have the same size and alignment</p>\n</blockquote>\n<p>even if <code>B</code>'s alignment is weaker than <code>A</code>'s, this is still okay</p>",
        "id": 232924538,
        "sender_full_name": "RalfJ",
        "timestamp": 1617383174
    },
    {
        "content": "<p>For parsing binary files I think a minimal useful subset is: \"byte-transmutable\" types are <code>u8</code>, arrays of byte-transmutable items, and <code>#[repr(C)]</code> of byte-transmutable fields</p>",
        "id": 232924858,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617383330
    },
    {
        "content": "<p>(then for example <code>u32</code> is handled with a wrapper struct for <code>[u8; 4]</code>)</p>",
        "id": 232924902,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617383356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232924858\">said</a>:</p>\n<blockquote>\n<p>For parsing binary files I think a minimal useful subset is: \"byte-transmutable\" types are <code>u8</code>, arrays of byte-transmutable items, and <code>#[repr(C)]</code> of byte-transmutable fields</p>\n</blockquote>\n<p>that family of types is sound to transmute to and from <code>&amp;[u8]</code>, yes</p>",
        "id": 232925344,
        "sender_full_name": "RalfJ",
        "timestamp": 1617383544
    },
    {
        "content": "<p>That’s the minimal thing, but I’d still like to document accurate invariants for my library’s <code>unsafe trait</code></p>",
        "id": 232926596,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1617384101
    },
    {
        "content": "<p>actually I take that back, it's not in general sound -- it just doesn't cause immediate UB</p>",
        "id": 232927064,
        "sender_full_name": "RalfJ",
        "timestamp": 1617384315
    },
    {
        "content": "<p>but of course there might be safety invariants that are violated</p>",
        "id": 232927089,
        "sender_full_name": "RalfJ",
        "timestamp": 1617384322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232926596\">said</a>:</p>\n<blockquote>\n<p>That’s the minimal thing, but I’d still like to document accurate invariants for my library’s <code>unsafe trait</code></p>\n</blockquote>\n<p>yes, see my comments above for that, in particular <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232922973\">this</a> but also <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Transmuting.20.26Struct.20from.2Fto.20.26.5Bu8.5D/near/232923690\">this caveat</a>.</p>",
        "id": 232927395,
        "sender_full_name": "RalfJ",
        "timestamp": 1617384447
    },
    {
        "content": "<p>oops, bytemuck has pointers listed as pod</p>",
        "id": 232929184,
        "sender_full_name": "Lokathor",
        "timestamp": 1617385227
    },
    {
        "content": "<p>rip</p>",
        "id": 232929193,
        "sender_full_name": "Lokathor",
        "timestamp": 1617385231
    },
    {
        "content": "<p>yeah I really hope we can find a better solution than making ptr-to-int transmute UB^^</p>",
        "id": 232937778,
        "sender_full_name": "RalfJ",
        "timestamp": 1617389690
    }
]