[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> what you are asking for cannot work</p>",
        "id": 180218253,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209282
    },
    {
        "content": "<p>What you are trying to do is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">SharedVec</span><span class=\"p\">(</span><span class=\"n\">UnsafeCell</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SharedVec</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">SHARED</span>: <span class=\"nc\">SharedVec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SharedVec</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 180218262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209292
    },
    {
        "content": "<p>and then have two threads of execution, writing and reading to the vector without any synchronization</p>",
        "id": 180218353,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209369
    },
    {
        "content": "<p>You are using <code>read_volatile</code> and <code>write_volatile</code> for that, and that's UB.</p>",
        "id": 180218361,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209383
    },
    {
        "content": "<p>You are just hoping that the compiler is dumb enough not to properly optimize your programs.</p>",
        "id": 180218367,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209398
    },
    {
        "content": "<p>You'd need something like <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/212\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/212\">ucg#212</a> to avoid that kind of UB by using <code>atomic volatile</code> reads / writes on the memory.</p>",
        "id": 180218391,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209439
    },
    {
        "content": "<p>But that only removes the UB of the data-races to the individual accesses.</p>",
        "id": 180218406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209450
    },
    {
        "content": "<p>If one process calls <code>Vec::resize</code> or <code>Vec::set_len</code>, the <code>(ptr, cap, len)</code> state of the vector will be altered without any synchronization, invalidating the <code>(ptr, cap, len)</code> of the other process.</p>",
        "id": 180218469,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209487
    },
    {
        "content": "<p>That's a data-race, and the only way to avoid it is via synchronization, e.g., by using a \"concurrent vec\" instead, or by putting the <code>Vec</code> behind a mutex or similar</p>",
        "id": 180218491,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209518
    },
    {
        "content": "<p>Different OSes have different primitives for IPC, permissions, etc. - so you could build a safe abstraction by using those (e.g. see what Boost.Interprocess does - its documentation explains this particular case)</p>",
        "id": 180218524,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209573
    },
    {
        "content": "<p>Without synchronization, you are seeing that a process can call <code>Vec::resize</code> to truncate the vector, invalidating the <code>len</code> field that a different process has, and then that process does a use-after-free because of the invalid <code>len</code>, and you get a <code>SIGBUS</code>.</p>",
        "id": 180218598,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209630
    },
    {
        "content": "<p>None of that matters, because the moment the <code>len</code> field was invalidated without synchronization, both processes already have UB, that is, Rust does not provide any guarantees about what any of those processes do, independently of the languages they are written in.</p>",
        "id": 180218631,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209673
    },
    {
        "content": "<p>So you can get a <code>SIGBUS</code>, or the rust process can crash, or format your hard drive, or ... anything is allowed at that point.</p>",
        "id": 180218647,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209708
    },
    {
        "content": "<p>It also doesn't matter whether the two threads of execution are in the same or different processes, if its UB within the same process, _it is UB if you spawn the threads in different processes_, and it doesn't matter if you implement the other thread in a different programming language.</p>",
        "id": 180218707,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209772
    },
    {
        "content": "<p>I also can't think of any language tools that anybody can give you to make these particular data-races not be UB.</p>",
        "id": 180218728,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209820
    },
    {
        "content": "<p>Either never write to the <code>(ptr, len, cap)</code> field, so that all processes just read them, or you need to use synchronization.</p>",
        "id": 180218783,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209856
    },
    {
        "content": "<p>Depending on your OS, there might be ways you can require other adversarial processes to also use those synchronization primitives.</p>",
        "id": 180218805,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209895
    },
    {
        "content": "<p>But if you cannot do that on a particular platform, then you can't really write a safe abstraction around that, because it isn't safe to do so.</p>",
        "id": 180218822,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209915
    },
    {
        "content": "<p>Ask your OS, but from the OS POV, a valid answer might be \"don't share shared memory with processes you don't trust\", which is kind of fair as well. Best case you get an answer like \"when creating the shared memory, pass flag X to forbid truncating it\".</p>",
        "id": 180218834,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573209958
    },
    {
        "content": "<p><a href=\"https://www.boost.org/doc/libs/1_71_0/doc/html/interprocess/synchronization_mechanisms.html\" target=\"_blank\" title=\"https://www.boost.org/doc/libs/1_71_0/doc/html/interprocess/synchronization_mechanisms.html\">https://www.boost.org/doc/libs/1_71_0/doc/html/interprocess/synchronization_mechanisms.html</a></p>",
        "id": 180219012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573210105
    },
    {
        "content": "<p>What you probably want is something like this (IPC mutexes require all processes to \"play nice\"): <a href=\"https://www.boost.org/doc/libs/1_71_0/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock\" target=\"_blank\" title=\"https://www.boost.org/doc/libs/1_71_0/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock\">https://www.boost.org/doc/libs/1_71_0/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock</a></p>",
        "id": 180219129,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573210247
    },
    {
        "content": "<p>and use mandatory locking if you want a safe abstraction.... but mandatory locking is kind of broken on most OSes.</p>",
        "id": 180219153,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573210288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  Yes, you can't just put a <code>Vec</code> in shared memory and hope that it'll be OK,</p>",
        "id": 180272296,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573247378
    },
    {
        "content": "<p>hence <a href=\"https://github.com/asajeffrey/shared-data/blob/master/src/shared_vec.rs\" target=\"_blank\" title=\"https://github.com/asajeffrey/shared-data/blob/master/src/shared_vec.rs\">https://github.com/asajeffrey/shared-data/blob/master/src/shared_vec.rs</a></p>",
        "id": 180272386,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573247411
    },
    {
        "content": "<p>which uses an <code>AtomicUsize</code> for the length.</p>",
        "id": 180272431,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573247439
    },
    {
        "content": "<p>This doesn't quite do everything, since it's using atomic loads and stores rather than atomic volatiles.</p>",
        "id": 180272485,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573247485
    },
    {
        "content": "<p>and it's not supporting growing yet.</p>",
        "id": 180272622,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573247568
    },
    {
        "content": "<p>and truncation of the underlying shared memory file is still an issue, different OSs seem to have different ways round that, sigh.</p>",
        "id": 180272739,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573247656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> I don't understand which problem does that <code>AtomicUsize</code> solve</p>",
        "id": 180365824,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573396843
    },
    {
        "content": "<p>The shared memory that you are using (a file descriptor, with a length and a memory block), has a \"length\" that can be modified concurrently (depending on the OS, and certain options)</p>",
        "id": 180365845,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573396880
    },
    {
        "content": "<p>That's the length that must be synchronized</p>",
        "id": 180365846,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573396888
    },
    {
        "content": "<p>That data-structure is like a vector, but the <code>SharedVec</code> that you are creating there is like a <code>&amp;[T]</code>.</p>",
        "id": 180365904,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573396936
    },
    {
        "content": "<p>Making the length field of a <code>&amp;[T]</code> atomic does not solve the problem of multiple threads of execution modifying the <code>Vec</code> that actually owns that memory</p>",
        "id": 180365916,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573396961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> Assuming no truncation, the length is never set to more than the <code>SharedVec</code> allocation, and the requirement that <code>T</code> implements <code>SharedMemCast</code>/<code>Ref</code> means that every bitstring is a valid inhabitant of <code>T</code>.</p>",
        "id": 180386358,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573429101
    },
    {
        "content": "<p>So since the Len is atomic, there's no data races, and AFAICT there's no other sources of UB.</p>",
        "id": 180386375,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1573429165
    },
    {
        "content": "<p>If the \"assuming no truncation\" assumption is violated, then you have UB. If the file grows enough, such that no consecutive virtual memory pages can be allocated in your process for the file, you might have a problem as well (Does the OS reallocate the virtual memory pages to a new range that fits for you or invalidates the previous range? That would concurrently invalidate the \"ptr\" field).</p>",
        "id": 180600441,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573631657
    },
    {
        "content": "<blockquote>\n<p>So since the Len is atomic, there's no data races,</p>\n</blockquote>\n<p>The len of <code>Vec</code> or <code>&amp;[T]</code> is not atomic, so I don't understand which problem having an atomic length solves for <code>SharedVec</code>.  If you assume that the file will not be resized, its length can just be an <code>usize</code>.</p>",
        "id": 180600470,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573631714
    },
    {
        "content": "<p>The only reason I can think of to make the length of <code>SharedVec</code> atomic would be if you want to allow concurrent modifications of it from a single process, but since <code>SharedVec</code> is like a <code>&amp;[T]</code>, that is like making a <code>&amp;[T]</code> atomic to try to allow modifying it concurrently. Can be done, but isn't necessary, and often it isn't desirable. It's ok for each thread to have a different copy of the <code>&amp;[T]</code>, and it's ok if these have different lengths. You can also create them in one thread and <code>Send</code> them to another thread just fine.</p>",
        "id": 180600614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573631832
    }
]