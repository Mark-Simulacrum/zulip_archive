[
    {
        "content": "<p>Soon coming to a Miri near you: <a href=\"https://github.com/rust-lang/miri/pull/2045\">https://github.com/rust-lang/miri/pull/2045</a></p>",
        "id": 277459594,
        "sender_full_name": "RalfJ",
        "timestamp": 1648837246
    },
    {
        "content": "<p>Threads don't need isolation disabled?</p>",
        "id": 277460554,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648837634
    },
    {
        "content": "<p>not sure how that's related to the PR, but... no they don't</p>",
        "id": 277462096,
        "sender_full_name": "RalfJ",
        "timestamp": 1648838326
    },
    {
        "content": "<p>I was just looking over the PR, and it removes disable-isolation in tests/run-pass/concurrency</p>",
        "id": 277463759,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648839240
    },
    {
        "content": "<p>yeah I realized I had left that flag in there by accident</p>",
        "id": 277486565,
        "sender_full_name": "RalfJ",
        "timestamp": 1648852566
    },
    {
        "content": "<p>all right this is on its way to the next nightly now: <a href=\"https://github.com/rust-lang/rust/pull/95578\">https://github.com/rust-lang/rust/pull/95578</a></p>",
        "id": 277491636,
        "sender_full_name": "RalfJ",
        "timestamp": 1648856966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384014\">@Patrick Walton</span> once this lands, <code>MIRIFLAGS=\"-Zmiri-disable-stacked-borrows -Zmiri-strict-provenance -Zmiri-check-number-validity\"</code> can check code against strict provenance without stacked borrows</p>",
        "id": 277491714,
        "sender_full_name": "RalfJ",
        "timestamp": 1648857048
    },
    {
        "content": "<p>hm, given <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Strict.20provenance/near/277489704\">my summary here</a> maybe <code>-Zstrict-provenance</code> <em>should</em> include <code>-Zmiri-check-number-validity</code>...</p>",
        "id": 277491752,
        "sender_full_name": "RalfJ",
        "timestamp": 1648857085
    },
    {
        "content": "<p>(as in, it should also ensure no ptr2int transmutes happen)</p>",
        "id": 277500612,
        "sender_full_name": "RalfJ",
        "timestamp": 1648866958
    },
    {
        "content": "<p>It’s not clear to me that this is to be disallowed. The strict_provenance set of features explicitly have a conversion from pointer to integer. Maybe miri supports the new function instead.</p>",
        "id": 277500795,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648867154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465167\">@Bram Geron</span> it has a <em>conversion</em> from pointer to integer, but not a <em>transmute</em> from pointer to integer.</p>",
        "id": 277502981,
        "sender_full_name": "scottmcm",
        "timestamp": 1648870049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"465167\">Bram Geron</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Strict.20provenance.20in.20Miri/near/277500795\">said</a>:</p>\n<blockquote>\n<p>It’s not clear to me that this is to be disallowed. The strict_provenance set of features explicitly have a conversion from pointer to integer. Maybe miri supports the new function instead.</p>\n</blockquote>\n<p>the new functions are all just implemented as a library. miri has supported them from the start, just like all codegen backends, without any adjustments.</p>",
        "id": 277503535,
        "sender_full_name": "RalfJ",
        "timestamp": 1648870719
    },
    {
        "content": "<p>strict provenance is mostly about <em>not</em> using certain language features (in particular, not using ptr2int2ptr roundtrips), so it's easy to support ;)</p>",
        "id": 277503573,
        "sender_full_name": "RalfJ",
        "timestamp": 1648870741
    }
]