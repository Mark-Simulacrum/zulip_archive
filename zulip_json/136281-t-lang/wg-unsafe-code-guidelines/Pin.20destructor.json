[
    {
        "content": "<p>Can <code>Pin::drop</code> panic ? and if so, which invariants should that maintain ?</p>",
        "id": 178838160,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571824190
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/pin/#drop-guarantee\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/pin/#drop-guarantee\">https://doc.rust-lang.org/std/pin/#drop-guarantee</a> and the section below only require that memory is not deallocated until drop gets called</p>",
        "id": 178838323,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571824317
    },
    {
        "content": "<p>but if the drop call panics, the memory of the pin will be deallocated, e.g., via unwinding</p>",
        "id": 178838378,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571824334
    },
    {
        "content": "<p>So AFAICT <code>Pin::drop</code> needs to make sure that, in the presence of a <code>panic!</code>, no references to the memory outlive the <code>Pin</code></p>",
        "id": 178838458,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571824410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> good question... <span class=\"user-mention\" data-user-id=\"203289\">@boats</span> any thoughts?</p>",
        "id": 179745250,
        "sender_full_name": "RalfJ",
        "timestamp": 1572783752
    },
    {
        "content": "<p>this seems worth opening an issue about -- not sure on which tracker though. if UCG = R-AM, then this is out of scope as its library UB. So likely the main rust issue tracker?</p>",
        "id": 179745261,
        "sender_full_name": "RalfJ",
        "timestamp": 1572783797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> probably in rust-lang/rust</p>",
        "id": 179818339,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572860706
    },
    {
        "content": "<p>although it's unclear whether the docs of <code>Pin</code> need to mention this</p>",
        "id": 179818370,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572860752
    },
    {
        "content": "<p>I guess the issue is that the destructor might panic <em>before</em> completing whatever fixups are necessary to put the system in a valid state?</p>",
        "id": 179821258,
        "sender_full_name": "boats",
        "timestamp": 1572863297
    },
    {
        "content": "<p>It seems like a code correctness issue in creating intrusive data structures</p>",
        "id": 179821289,
        "sender_full_name": "boats",
        "timestamp": 1572863342
    },
    {
        "content": "<p>We could mention it in the intrusive data structures section if there's a succinct way to explain the pitfall.</p>",
        "id": 179821308,
        "sender_full_name": "boats",
        "timestamp": 1572863364
    },
    {
        "content": "<p>(More abstractly, we've only guaranteed that drop gets <em>called</em>, that commitment has been met even if the drop panics, no? libraries are responsible for translating that guarantee into a safe abstraction for their actual purpose)</p>",
        "id": 179821513,
        "sender_full_name": "boats",
        "timestamp": 1572863534
    },
    {
        "content": "<p>I don't think we guarantee that <code>drop</code> gets called for <code>Pin</code> (we can't really guarantee this)</p>",
        "id": 179822434,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864333
    },
    {
        "content": "<p><code>Pin</code> requires that <code>drop</code> gets called for safety</p>",
        "id": 179822457,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864361
    },
    {
        "content": "<p>I think I actually see the point</p>",
        "id": 179822520,
        "sender_full_name": "boats",
        "timestamp": 1572864380
    },
    {
        "content": "<p>The thing is <code>Pin</code> probably also requires that the <code>drop</code> of the <code>T</code> does not panic</p>",
        "id": 179822532,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864401
    },
    {
        "content": "<p>So we tell users who receive a <code>Pin&lt;P&gt;</code> that the destructor of <code>P::Target</code> will be called before <code>P::Target</code>'s memory becomes invalid</p>",
        "id": 179822551,
        "sender_full_name": "boats",
        "timestamp": 1572864414
    },
    {
        "content": "<p>yes</p>",
        "id": 179822568,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864425
    },
    {
        "content": "<p>However, its possible if <code>P</code>'s drop panics, that the destructor of <code>P::Target</code> won't be called, but the memory is invalid</p>",
        "id": 179822582,
        "sender_full_name": "boats",
        "timestamp": 1572864453
    },
    {
        "content": "<p>is that true / what you're talking about? (hard to reason about the drop glue and panics)</p>",
        "id": 179822592,
        "sender_full_name": "boats",
        "timestamp": 1572864470
    },
    {
        "content": "<p>I don't have a small reproducer of this, but I suspect one can write one</p>",
        "id": 179822644,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864485
    },
    {
        "content": "<p>Yes its true</p>",
        "id": 179822658,
        "sender_full_name": "boats",
        "timestamp": 1572864499
    },
    {
        "content": "<p>Or, let's say its true</p>",
        "id": 179822664,
        "sender_full_name": "boats",
        "timestamp": 1572864505
    },
    {
        "content": "<p>A similar example is if <code>P</code> implements <code>Deref</code> but doesn't actually involve pointer indirection, like <code>ManuallyDrop</code> does</p>",
        "id": 179822674,
        "sender_full_name": "boats",
        "timestamp": 1572864520
    },
    {
        "content": "<p>However, this is also why there's no generic safe constructor for a <code>Pin&lt;P&gt;</code></p>",
        "id": 179822693,
        "sender_full_name": "boats",
        "timestamp": 1572864547
    },
    {
        "content": "<p>There are a few things we can say about this (though they are basically all libs issues, since its about how to correctly use this unsafe std API, and not language semantics)</p>",
        "id": 179822724,
        "sender_full_name": "boats",
        "timestamp": 1572864588
    },
    {
        "content": "<p>Yes, this would be another requirement of <code>Pin</code> for safety</p>",
        "id": 179822787,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864609
    },
    {
        "content": "<p>Well, I think there's one obvious correct one: if you create a safe constructor for <code>Pin&lt;P&gt;</code>, you must ensure that <code>P</code>'s behavior upholds pin's drop guarantees</p>",
        "id": 179822807,
        "sender_full_name": "boats",
        "timestamp": 1572864625
    },
    {
        "content": "<p>so the incorrectness would be in the code that created a <code>Pin&lt;P&gt;</code> where <code>P</code>s destructor panics</p>",
        "id": 179822831,
        "sender_full_name": "boats",
        "timestamp": 1572864653
    },
    {
        "content": "<p>The writer of <code>P</code> needs to make sure that if <code>P::drop</code> panics, deallocating <code>P</code> is safe.</p>",
        "id": 179822844,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864669
    },
    {
        "content": "<p>well, the writer of the code that makes a <code>Pin&lt;P&gt;</code>, <code>P</code> could come from another library that never thought about pinning at all</p>",
        "id": 179822860,
        "sender_full_name": "boats",
        "timestamp": 1572864690
    },
    {
        "content": "<p>I think a new section about defining safe constructors could be useful info, though it reaches the point where maybe some of this should go into the nomicon instead of the main pin docs</p>",
        "id": 179822924,
        "sender_full_name": "boats",
        "timestamp": 1572864729
    },
    {
        "content": "<p>Hm, I thought that the writer of <code>P</code> already needed to consider the possiblity of <code>P</code> being pinned when providing a drop impl for <code>P</code></p>",
        "id": 179822927,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864731
    },
    {
        "content": "<p>Definitely not, because there's no safe way to pin an unknown pointer type</p>",
        "id": 179822938,
        "sender_full_name": "boats",
        "timestamp": 1572864758
    },
    {
        "content": "<p>But, e.g.,<code>Box</code> would need to consider this right ?</p>",
        "id": 179823041,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864855
    },
    {
        "content": "<p>In std, we needed to consider it when we added the <code>Box::pin</code> constructor</p>",
        "id": 179823057,
        "sender_full_name": "boats",
        "timestamp": 1572864877
    },
    {
        "content": "<p>That is, if you want to provide safe pinning for your type, then you need to consider what happens when your type destructor panics, and make sure that everything is still safe.</p>",
        "id": 179823067,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864899
    },
    {
        "content": "<p>Yes its true, I'm just saying that whoever decided to \"provide safe pinning\" is responsible, not whoever wrote the type (if they're separate libraries, they also need to make sure the guarantees they're relying on will be maintained in perpetuity)</p>",
        "id": 179823097,
        "sender_full_name": "boats",
        "timestamp": 1572864941
    },
    {
        "content": "<p>It's a distinction without a difference in practice</p>",
        "id": 179823104,
        "sender_full_name": "boats",
        "timestamp": 1572864947
    },
    {
        "content": "<p>Ah, sure, the distinction makes sense, thanks.</p>",
        "id": 179823114,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864958
    },
    {
        "content": "<p>So that's why I think this and the ManuallyDrop example could go together under a section on defining safe constructors for pinned pointers</p>",
        "id": 179823175,
        "sender_full_name": "boats",
        "timestamp": 1572864988
    },
    {
        "content": "<p>I think it would be better to have a minimum working example showing the problem before trying to come up with some docs for this</p>",
        "id": 179823178,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572864989
    },
    {
        "content": "<p>Yes, that makes sense. With ManuallyDrop one can create this same issue, without having to explain how panicking in destructors works.</p>",
        "id": 179823206,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572865032
    },
    {
        "content": "<p>one thing worth noting also is that <em>because</em> this is a requirement of creating a constructor, generic code like <code>Pin&lt;P&gt; where P::Target = MyType</code> is correct</p>",
        "id": 179823338,
        "sender_full_name": "boats",
        "timestamp": 1572865151
    },
    {
        "content": "<p>you can assume that that type upholds the pinning guarantee, even though the pointer type is abstract</p>",
        "id": 179823352,
        "sender_full_name": "boats",
        "timestamp": 1572865168
    },
    {
        "content": "<p>so I was trying to think of a practical situation where this would be an issue, but panic in destructors is weird</p>",
        "id": 179823522,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572865324
    },
    {
        "content": "<p>it means something failed while dropping a type, so how can you then make sure that your type is ok to deallocate ?</p>",
        "id": 179823529,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572865354
    },
    {
        "content": "<blockquote>\n<p>However, its possible if <code>P</code>'s drop panics, that the destructor of <code>P::Target</code> won't be called, but the memory is invalid</p>\n</blockquote>\n<p>well the question is if this is legal, or if we require callers to not free memory in this case. but the latter seems unrealistic.</p>",
        "id": 179913357,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945136
    },
    {
        "content": "<p>so, basically the safety requirement for <code>drop</code> of something pinned is that once drop returns <em>or</em> unwinds, the backing store must be safe to deallocate</p>",
        "id": 179913379,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945174
    },
    {
        "content": "<p>\"you must call <code>drop</code> before invalidating memory\" is really just a different way of saying that (a) deallocating memory requires full ownership of that memory, and (b) for pinned stuff, you don't have that ownership -- but you can get it by calling <code>drop</code></p>",
        "id": 179913421,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203289\">@boats</span> ^</p>",
        "id": 179913486,
        "sender_full_name": "RalfJ",
        "timestamp": 1572945261
    },
    {
        "content": "<p>That seems like a good way to explain the situation, though I'd always want to be clear that nothing at the language level is happening here.</p>",
        "id": 180060801,
        "sender_full_name": "boats",
        "timestamp": 1573064098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203289\">@boats</span>  nothing at the R-AM level is happening here. if you consider the \"meaning\" of primitive Rust types to be part of the language, then that <em>is</em> involved here. There's a reason that supporting <code>Pin</code> in the RustBelt formalization of the type system is a global change that affects <em>all</em> types.</p>",
        "id": 180905713,
        "sender_full_name": "RalfJ",
        "timestamp": 1573897958
    },
    {
        "content": "<p>as for panics, should we try to somehow put this into the docs? it's a really subtle point but also I don't know where else to put it.</p>",
        "id": 180905720,
        "sender_full_name": "RalfJ",
        "timestamp": 1573897986
    }
]