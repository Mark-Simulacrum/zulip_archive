[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/152\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/152\">https://github.com/rust-lang/unsafe-code-guidelines/issues/152</a> makes me so sad :(</p>",
        "id": 169076077,
        "sender_full_name": "RalfJ",
        "timestamp": 1561580195
    },
    {
        "content": "<p>The OP was all about the interaction with concurrency, and now everyone drowns that in a discussion about volatile load/store tearing that is only relevant for MMIO</p>",
        "id": 169076097,
        "sender_full_name": "RalfJ",
        "timestamp": 1561580220
    },
    {
        "content": "<p>How is tearing only relevant for MMIO ? If you have two threads reading/writing from/to shared memory using volatile, those can tear</p>",
        "id": 169079065,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561582554
    },
    {
        "content": "<p>so tearing quite intrinsic to volatile</p>",
        "id": 169079163,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561582594
    },
    {
        "content": "<p>that thread is about being able to do  reads that returns arbitrary but initialized data in case of a race</p>",
        "id": 169079204,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582624
    },
    {
        "content": "<p>one of the main reasons data-races are UB in C is because of tearing</p>",
        "id": 169079212,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561582628
    },
    {
        "content": "<p>whether tearing happens or not is irrelevant</p>",
        "id": 169079213,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582629
    },
    {
        "content": "<p>no</p>",
        "id": 169079226,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582640
    },
    {
        "content": "<p>the main reason data races are UB in C is because C compilers like to duplicate reads</p>",
        "id": 169079238,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582651
    },
    {
        "content": "<p>which is <em>much worse</em> than tearing</p>",
        "id": 169079250,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582664
    },
    {
        "content": "<p>i wouldn't say they are much worse - they are differently worse</p>",
        "id": 169080430,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561583446
    },
    {
        "content": "<p>no it's strictly worse. every effect you might have with tearing, you also have with duplicate reads, and more.</p>",
        "id": 169080613,
        "sender_full_name": "RalfJ",
        "timestamp": 1561583591
    },
    {
        "content": "<p>and in particular, when the guarantee in case of a data-race is \"give me any data\", then tearing just is not a problem</p>",
        "id": 169081280,
        "sender_full_name": "RalfJ",
        "timestamp": 1561584060
    },
    {
        "content": "<p>even doing byte-wise reads would be fine, as long as every byte is only read once</p>",
        "id": 169081299,
        "sender_full_name": "RalfJ",
        "timestamp": 1561584071
    },
    {
        "content": "<p>this is what makes the entire tearing discussion off-topic for the original question</p>",
        "id": 169081314,
        "sender_full_name": "RalfJ",
        "timestamp": 1561584090
    }
]