[
    {
        "content": "<p>Many linkers have a feature where it generates symbols at the start/end of a section. This means that if you define a bunch of statics to be located in a particular ELF section, you can get an array of all these statics:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">__start_my_list</span>: <span class=\"p\">[</span><span class=\"n\">MyStruct</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">__stop_my_list</span>: <span class=\"p\">[</span><span class=\"n\">MyStruct</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">my_list</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">MyStruct</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__start_my_list</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__stop_my_list</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"p\">.</span><span class=\"n\">offset_from</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">slice</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185736278,
        "sender_full_name": "Amanieu",
        "timestamp": 1579117573
    },
    {
        "content": "<p>Is this allowed by the unsafe code guidelines? If not, could we find a way to allow this?</p>",
        "id": 185736340,
        "sender_full_name": "Amanieu",
        "timestamp": 1579117609
    },
    {
        "content": "<p>I think the main concern is that <code>start.offset(n)</code> looks like it'll be out-of-bounds of that <code>static</code></p>",
        "id": 185737151,
        "sender_full_name": "RalfJ",
        "timestamp": 1579118029
    },
    {
        "content": "<p>so either for <code>extern static</code> we declare that the actual size might be bigger than the type says, or we have an attribute for that</p>",
        "id": 185737260,
        "sender_full_name": "RalfJ",
        "timestamp": 1579118081
    },
    {
        "content": "<p>(also you probably want <code>static mut</code> unless you want the static to be immutable, see the discussion at <a href=\"https://github.com/rust-lang/rust/pull/67630\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67630\">https://github.com/rust-lang/rust/pull/67630</a>)</p>",
        "id": 185737290,
        "sender_full_name": "RalfJ",
        "timestamp": 1579118103
    },
    {
        "content": "<p>It would be a lot easier to, if possible, declare one large array static and then define offset values for reaching into the array.</p>",
        "id": 185789509,
        "sender_full_name": "Lokathor",
        "timestamp": 1579156263
    },
    {
        "content": "<p>This doesn't seem like something we should add special cases for in the language semantics at any rate.</p>",
        "id": 185809017,
        "sender_full_name": "centril",
        "timestamp": 1579176916
    },
    {
        "content": "<p>well, if it's a sufficiently widely used pattern we should try our best to support it <em>somehow</em></p>",
        "id": 185810872,
        "sender_full_name": "RalfJ",
        "timestamp": 1579178539
    },
    {
        "content": "<blockquote>\n<p>well, if it's a sufficiently widely used pattern we should try our best to support it <em>somehow</em></p>\n</blockquote>\n<p>Shouldn't that work if you cast to usize and do arithmetic on that?</p>",
        "id": 185814810,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579181809
    },
    {
        "content": "<p>hm, no</p>",
        "id": 185840051,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196776
    },
    {
        "content": "<p>not if we say that <code>static</code>'s are allocations that the language \"understands\", and whose size is given by the type</p>",
        "id": 185840072,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196795
    },
    {
        "content": "<p>then any attempt to access things outside their bounds is just use of a dangling pointer</p>",
        "id": 185840087,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196816
    },
    {
        "content": "<p>I mean I guess you are proposing to go through a usize to \"conceal\" the provenance, but that's not really a \"solution\" I'd say...</p>",
        "id": 185840122,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196842
    },
    {
        "content": "<p>We do something similar in our unwinding implementation for SEH: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/seh.rs#L67\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/seh.rs#L67\">https://github.com/rust-lang/rust/blob/master/src/libpanic_unwind/seh.rs#L67</a></p>",
        "id": 185844106,
        "sender_full_name": "Amanieu",
        "timestamp": 1579199316
    },
    {
        "content": "<p>Basically some static data used by the unwinder requires statics represented by offsets from the __ImageBase symbol rather than their actual address.</p>",
        "id": 185844180,
        "sender_full_name": "Amanieu",
        "timestamp": 1579199369
    },
    {
        "content": "<p>wow</p>",
        "id": 185853276,
        "sender_full_name": "RalfJ",
        "timestamp": 1579204691
    },
    {
        "content": "<p>I wonder if/how LLVM <del>sanctions</del> permits this</p>",
        "id": 185853333,
        "sender_full_name": "RalfJ",
        "timestamp": 1579204733
    },
    {
        "content": "<p>(wtf... I just realized \"sanction\" has basically its own opposite as meaning. such a useless word... sometimes I really wonder how English can ever work at all^^)</p>",
        "id": 185853410,
        "sender_full_name": "RalfJ",
        "timestamp": 1579204791
    },
    {
        "content": "<p>like, is there some wording in LLVM that says \"statics may be bigger than their type says\", or is that somehow implicitly understood, or what?</p>",
        "id": 185853540,
        "sender_full_name": "RalfJ",
        "timestamp": 1579204848
    },
    {
        "content": "<p>we could probably account for all of that by saying that the size of an <code>extern static</code> is <em>at least</em> what the type says.<br>\nhowever, this still leaves the problem (for the begin-end-style) that taking the difference between two statics is pointer subtraction between pointers from different allocations, which is... a gray area.</p>",
        "id": 185853608,
        "sender_full_name": "RalfJ",
        "timestamp": 1579204900
    },
    {
        "content": "<p>Well, LLVM <em>seems</em> to support it since my code works...</p>",
        "id": 185854069,
        "sender_full_name": "Amanieu",
        "timestamp": 1579205162
    },
    {
        "content": "<p>that's what all the UB users say ;P</p>",
        "id": 185858588,
        "sender_full_name": "Lokathor",
        "timestamp": 1579207927
    },
    {
        "content": "<p>I think we pulled the SEH impl out of clang's standard library</p>",
        "id": 185861188,
        "sender_full_name": "simulacrum",
        "timestamp": 1579209313
    },
    {
        "content": "<p>but I could be wrong</p>",
        "id": 185861195,
        "sender_full_name": "simulacrum",
        "timestamp": 1579209317
    },
    {
        "content": "<p>We pulled the SEH impl out of the LLVM IR that clang generates for a <code>try {} catch {}</code>.</p>",
        "id": 185867986,
        "sender_full_name": "Amanieu",
        "timestamp": 1579213164
    },
    {
        "content": "<p>ah okay</p>",
        "id": 185869418,
        "sender_full_name": "simulacrum",
        "timestamp": 1579214233
    },
    {
        "content": "<blockquote>\n<p>Is this allowed by the unsafe code guidelines? If not, could we find a way to allow this?</p>\n</blockquote>\n<p>Why can't you use two pointers ?</p>",
        "id": 185911853,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579264764
    },
    {
        "content": "<p>e.g. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">BEGIN</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_int</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">END</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_int</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 185911932,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579264814
    },
    {
        "content": "<p>That way you can access the array as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cm\">/*safe*/</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">idx</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">c_int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">END</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">BEGIN</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">BEGIN</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185911993,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579264895
    },
    {
        "content": "<blockquote>\n<p>I think we pulled the SEH impl out of clang's standard library</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>  In C and C++, an array is a pointer, so if a C array was converted to a Rust array, that conversion was incorrect.</p>",
        "id": 185912085,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579264975
    },
    {
        "content": "<p>I.e., the call ABI of <code>extern \"C\" fn foo(x: [c_int; 4])</code> and C's <code>void foo(int c[4]);</code> are not the same</p>",
        "id": 185912134,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265040
    },
    {
        "content": "<p>I think it was correct, and I may have misremembered, not sure.</p>",
        "id": 185912162,
        "sender_full_name": "simulacrum",
        "timestamp": 1579265043
    },
    {
        "content": "<p>I'm not sure how that applies to <code>extern</code> statics</p>",
        "id": 185912236,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> That's not how linker symbols work though. The symbol doesn't point to a pointer to the start/end of the section. The symbol points <em>directly</em> to the start/end of the section.</p>",
        "id": 185912379,
        "sender_full_name": "Amanieu",
        "timestamp": 1579265186
    },
    {
        "content": "<p>That's what I meant with I'm not sure how that applies to a static</p>",
        "id": 185912389,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265207
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span> <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">__EH_FRAME_BEGIN__</span><span class=\"p\">[];</span>\n</pre></div>",
        "id": 185912440,
        "sender_full_name": "Amanieu",
        "timestamp": 1579265274
    },
    {
        "content": "<p>Here's an example in C.</p>",
        "id": 185912495,
        "sender_full_name": "Amanieu",
        "timestamp": 1579265300
    },
    {
        "content": "<p>I expect <code>__EH_FRAME_BEGIN</code> to be the address of where the array is</p>",
        "id": 185912499,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265304
    },
    {
        "content": "<p>so that <code>&amp;__EH_FRAME_BEGIN__[0]</code> desugars to <code>&amp;(*(__EH_RAME_BEGIN + 0))</code> and gives the address of the first element</p>",
        "id": 185912522,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265335
    },
    {
        "content": "<p>(although <code>&amp;array[i]</code> does not literally desugars to that in the C spec)</p>",
        "id": 185912535,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265350
    },
    {
        "content": "<p>In Rust, <code>extern { static __EH_FRAME_BEGIN__[c_uchar; 0]; }</code> <code>&amp;__EH_FRAME_BEGIN__[0]</code> should return the same address, so for a static, that looks fine</p>",
        "id": 185912656,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265457
    },
    {
        "content": "<p>and the only problem you might get is that of pointer arithmetic out of bounds</p>",
        "id": 185912663,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265467
    },
    {
        "content": "<p>(which is avoided by using two raw pointers)</p>",
        "id": 185912667,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265475
    },
    {
        "content": "<p>You can probably fix the Rust code to use <code>&amp;raw</code>, but if it is using <code>&amp;T as *const T</code> to produce the pointers, those pointers have a provenance from the <code>[T; 0]</code> allocation, and doing arithmetic out of bounds looks like UB</p>",
        "id": 185912742,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265558
    },
    {
        "content": "<p>But <code>extern { static __EH_FRAME_BEGIN__: *const c_char; }</code> has an entirely different meaning. It says that there is a pointer in the data section of the executable, which is not true.</p>",
        "id": 185912758,
        "sender_full_name": "Amanieu",
        "timestamp": 1579265579
    },
    {
        "content": "<p>technically, what you want is an opaque extern</p>",
        "id": 185912791,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265605
    },
    {
        "content": "<p>but we don't have those yet I think</p>",
        "id": 185912796,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265612
    },
    {
        "content": "<p>i.e. <code>extern { type __EH_FRAME_BEGIN__; type __EH_FRAME_END__; }</code></p>",
        "id": 185912918,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579265714
    },
    {
        "content": "<blockquote>\n<p>But <code>extern { static __EH_FRAME_BEGIN__: *const c_char; }</code> has an entirely different meaning. It says that there is a pointer in the data section of the executable, which is not true.</p>\n</blockquote>\n<p>for most uses of putting arrays into executable, there <em>is</em> data at that location though</p>",
        "id": 185919777,
        "sender_full_name": "nagisa",
        "timestamp": 1579271122
    },
    {
        "content": "<p>e.g. ARM’s vector table is an array of addresses</p>",
        "id": 185919854,
        "sender_full_name": "nagisa",
        "timestamp": 1579271165
    },
    {
        "content": "<blockquote>\n<p>Well, LLVM <em>seems</em> to support it since my code works...</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I'd really rather have something explicit in the LLVM spec or at least a comment in the code -- as you know and others pointed out, plenty of UB code <em>seems</em> to work^^</p>",
        "id": 185945254,
        "sender_full_name": "RalfJ",
        "timestamp": 1579287060
    }
]