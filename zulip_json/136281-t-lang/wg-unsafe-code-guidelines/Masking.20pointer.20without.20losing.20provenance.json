[
    {
        "content": "<p>What is the most efficient way to mask off the lower bits of a pointer without inhibiting any optimizations now or in the future?</p>",
        "id": 216083638,
        "sender_full_name": "Diggsey",
        "timestamp": 1604928800
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=63d90209f533c2f878c282494226eb70\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=63d90209f533c2f878c282494226eb70</a><br>\nseems to work for me, it shouldn't lose provenance</p>",
        "id": 216101904,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604936745
    },
    {
        "content": "<p>on x86, it optimizes to just an <code>and</code> instruction</p>",
        "id": 216102004,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604936786
    },
    {
        "content": "<p>Interesting - I tried that first on godbolt, and it did not optimize it correctly. After seeing it work on the playground I realised that its because godbolt defaults to an older rust version</p>",
        "id": 216110246,
        "sender_full_name": "Diggsey",
        "timestamp": 1604940005
    },
    {
        "content": "<p>Specifically, in Rust 1.44, this code is not optimized</p>",
        "id": 216110334,
        "sender_full_name": "Diggsey",
        "timestamp": 1604940050
    },
    {
        "content": "<p>Hmm, there's <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset\">https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset</a> for round-up, but I don't know what round-down would be.  Could try using that with some checks and seeing whether it optimizes away...</p>",
        "id": 216130964,
        "sender_full_name": "scottmcm",
        "timestamp": 1604949462
    },
    {
        "content": "<p>Clang just seems to use the C++ equivalent of <code>(ptr as usize &amp; !3usize) as *mut T</code>.</p>\n<p>Random example: <a href=\"https://github.com/llvm/llvm-project/blob/2c2680a470b59df84db16c4cd876efce91d7d4f2/clang/include/clang/Sema/IdentifierResolver.h#L195\">https://github.com/llvm/llvm-project/blob/2c2680a470b59df84db16c4cd876efce91d7d4f2/clang/include/clang/Sema/IdentifierResolver.h#L195</a></p>",
        "id": 216138489,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1604953374
    },
    {
        "content": "<p>to answer to the question that is given in the issue title... there's no good way in Rust (or any other language that I know of)</p>",
        "id": 216729131,
        "sender_full_name": "RalfJ",
        "timestamp": 1605360668
    },
    {
        "content": "<p>but you can do weird things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Return a pointer with the address of `ptr` and the provenance of `prov`.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">copy_provenance</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prov</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">).</span><span class=\"n\">wrapping_sub</span><span class=\"p\">(</span><span class=\"n\">prov</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">prov</span><span class=\"p\">.</span><span class=\"n\">wrapping_offset</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(I hope I got this right^^)</p>",
        "id": 216729155,
        "sender_full_name": "RalfJ",
        "timestamp": 1605360704
    },
    {
        "content": "<p>then you can do your masking, which <em>will</em> lose provenance, and at the end re-add the original provenance</p>",
        "id": 216729390,
        "sender_full_name": "RalfJ",
        "timestamp": 1605360934
    },
    {
        "content": "<p>that said, I do not know of any compiler where this would actually help to get more optimizations^^</p>",
        "id": 216729399,
        "sender_full_name": "RalfJ",
        "timestamp": 1605360949
    },
    {
        "content": "<p>(but it could help to fix soundness issues caused by incorrect provenance)</p>",
        "id": 216729452,
        "sender_full_name": "RalfJ",
        "timestamp": 1605360967
    },
    {
        "content": "<p>I then wonder if a <code>.map_addr()</code> convenient adapter method could help people do <del>the right thing</del> a less bad thing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">map_addr</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">addr</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">MASK</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">map_addr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">prov</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">copy_provenance</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prov</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Or to have a <code>.raw_split(): *T -&gt; (usize, Provenance)</code> method w/ a <code>Provenance::imbue(addr: usize)</code> pointer constructor <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 216731848,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605364257
    },
    {
        "content": "<p>This would solve the \"second issue\" that the slice concatenating methods have. That is, IIUC, the following breaks provenance:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">alloc</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">hd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">split_at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">slice_concat</span><span class=\"p\">(</span><span class=\"n\">hd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tl</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Safety: originate from same alloc</span>\n</code></pre></div>\n<p>does it not?</p>",
        "id": 216732113,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605364560
    },
    {
        "content": "<p>for slice concat, <em>there is no correct provenance</em> as each provenance pins the ptr to a particular allocation</p>",
        "id": 216733696,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366330
    },
    {
        "content": "<p>so I dont think this can help there</p>",
        "id": 216733697,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366334
    },
    {
        "content": "<p>also I am not sure if there is anything \"bad\" about the usual <code>((addr as usize) &amp; mask) as *mut _</code>. it loses provenance, okay... so what? from all I know, this code still <em>has to</em> work. don't get me wrong, if we could make this code illegal that would solve a metric ton of problems, but also I'd be shunned out of the Rust community for breaking everything.^^</p>\n<p>this is exactly what makes int-to-ptr casts so hard, that something needs to happen with provenance. but I doubt just declaring them illegal is a viable option. unfortunately.</p>",
        "id": 216733752,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366427
    }
]