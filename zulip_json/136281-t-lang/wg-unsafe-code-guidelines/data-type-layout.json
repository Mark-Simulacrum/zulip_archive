[
    {
        "content": "<p>Spinning off from <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s comments in data-invariants, I do want to follow-up on <span class=\"user-mention\" data-user-id=\"123893\">@alercah</span>'s question here:</p>\n<blockquote>\n<p>is it okay to store a repr(rust) value on disk and read it back out to memory? do we offer guarantees that this works across identically defined types? across different compiler versions? can the compiler randomly reassign discriminants for enums every time the program runs?</p>\n</blockquote>\n<p>I don't have an answer specifically to it, but I think it would be really great to try and make some progress on trying to document what things user's can rely on when it comes to memory layout. I think a good start would be to try and enumerate the <em>questions</em> even and write them down -- ideally in a commit to <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/\">the rust-lang-rfcs repo</a>. (Maybe along with some notes about the pros/cons) </p>\n<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> are you interested in maybe taking point on that? </p>\n<p>I'd like to organize an initial \"focused meeting\" around this topic but I'm not sure how that should work best. </p>\n<p>(Another related question: \"if two <code>repr(rust)</code> structs have the same fields of the same type, do they have the same layout? <code>repr(C)</code>?\")</p>",
        "id": 131162274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809351
    },
    {
        "content": "<p>I'm not sure I have the ability to make commitments right now, but as long as I'm interested I can keep thinking on this. ;) <code>repr(C)</code> should have an explicitly defined ABI, so that it can be safely used with FFI in both directions. This may in some cases just be a reference to the platform ABI, but we want to ensure that e.g. struct padding is guaranteed to work as expected. It would also make it possible for users to understand when they can safely read bytes into <code>repr(C)</code>, valuable for any binary protocol.</p>",
        "id": 132007991,
        "sender_full_name": "alercah",
        "timestamp": 1534101332
    },
    {
        "content": "<p><code>repr(rust)</code>, on the other hand, I can see reasons to even forbid it on types with the same layout in the same program. Especially for types with private fields, the compiler could conceivably try to optimize the most frequently accessed field into offset 0, and this may vary from type to type.</p>",
        "id": 132008249,
        "sender_full_name": "alercah",
        "timestamp": 1534101832
    },
    {
        "content": "<p>And that means we give the least guarantee for now, so I'm happy to propose this as our guideline for now---if you want reliable layout, you could always use <code>repr(C)</code>. We could also consider adding a <code>repr(stable)</code> which is guaranteed to be the same for identical definitions, even across platforms where the C ABI may vary.</p>",
        "id": 132008398,
        "sender_full_name": "alercah",
        "timestamp": 1534102090
    },
    {
        "content": "<p>(Since <code>repr(C)</code> enum layout is currently fully specified in a way that should be platform-invariant I think, perhaps we should check that it is actually compatible with C ABI enums on all/most platforms and see if it makes sense to retract that guarantee slightly? Unsure here)</p>",
        "id": 132008472,
        "sender_full_name": "alercah",
        "timestamp": 1534102276
    },
    {
        "content": "<p>Fully agreed with all of that, <span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> :D</p>",
        "id": 132597914,
        "sender_full_name": "RalfJ",
        "timestamp": 1534966927
    },
    {
        "content": "<p>So I want to talk about the mechanics of running this conversation. </p>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> had the idea, which I like, of opening up various issues on <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/\">https://github.com/rust-rfcs/unsafe-code-guidelines/</a>, devoted to various type constructors.</p>\n<p>wycats had the idea, which I also like, of writing out a lot of things that we believe to be uniformly agreed upon, and using that to try to find the contours of the rules. e.g., I believe that <code>Option&lt;&amp;T&gt;</code> should be represented always a pointer (thin or fat). The idea here is that there are individual questions which have (maybe?) known answers, but if we go from those to general principles things get murky.</p>\n<p>What both of these say to me is that we basically need some useful \"seeds\" for discussion.</p>\n<p>I think there are a few questions I would like to be able to answer:</p>\n<ul>\n<li>Where applicable, what are the <code>#[repr]</code> options and what can we say with certainty?</li>\n<li>Around enums in particular, what are the rules regarding \"niche optimizations\" and the layout of <code>Option&lt;T&gt;</code>?<ul>\n<li>Does this e.g. apply to other enums (in terms of guarantees)</li>\n</ul>\n</li>\n<li>Safety/Validity invariants -- can we write them out \"semi-formally\" (<span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s blog post has a good start, of course)</li>\n</ul>",
        "id": 132633178,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535025427
    },
    {
        "content": "<p>Related question: Is <code>bool</code> guaranteed to be laid out as bit-patterns 0 and 1 for true and false? Is its size guaranteed?</p>",
        "id": 132647853,
        "sender_full_name": "alercah",
        "timestamp": 1535042225
    },
    {
        "content": "<p>I think my personal inclination is to say that no-<code>repr</code> and <code>repr(Rust)</code> are always equivalent and always unspecified. Any additional guarantees (e.g. <code>Option&lt;&amp;T&gt;</code>) should be promised by adding an attribute which guarantees a specific layout.</p>",
        "id": 132647938,
        "sender_full_name": "alercah",
        "timestamp": 1535042351
    },
    {
        "content": "<p>This means that someone can write an isomorphic enum and opt into the promised layout, but we don't have to make any general promises. This would in turn imply to me that we should probably at least start by minimizing commitment. I think we should promise that 1-element tuples, including newtype structs but not including enum variants, are laid out as the underlying type.</p>",
        "id": 132648113,
        "sender_full_name": "alercah",
        "timestamp": 1535042542
    },
    {
        "content": "<blockquote>\n<p>Is bool guaranteed to be laid out as bit-patterns 0 and 1 for true and false? Is its size guaranteed?</p>\n</blockquote>\n<p>oh no not <a href=\"https://github.com/rust-lang/rust/issues/46156\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46156\">#46156</a> / <a href=\"https://github.com/rust-lang/rust/issues/46176\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46176\">#46176</a> again</p>",
        "id": 132648130,
        "sender_full_name": "kennytm",
        "timestamp": 1535042581
    },
    {
        "content": "<p>Ok, so looks like we do want to promise 0 and 1. :) It seems to me that C allows you to put a 2 into a <code>_Bool</code>, whereas Rust does not?</p>",
        "id": 132648575,
        "sender_full_name": "alercah",
        "timestamp": 1535043117
    },
    {
        "content": "<p>Ahhh. Looks like it's even better. It's unspecified whether or not it's UB.</p>",
        "id": 132648742,
        "sender_full_name": "alercah",
        "timestamp": 1535043293
    },
    {
        "content": "<p>It might not be.</p>",
        "id": 132648752,
        "sender_full_name": "alercah",
        "timestamp": 1535043315
    },
    {
        "content": "<p>But the compiler isn't required to document whether or not it's UB. <span class=\"emoji emoji-1f923\" title=\"rofl\">:rofl:</span></p>",
        "id": 132648769,
        "sender_full_name": "alercah",
        "timestamp": 1535043359
    },
    {
        "content": "<p>That's not how it works, to be clear</p>",
        "id": 132649722,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535044520
    },
    {
        "content": "<p>There are two values of type <code>_Bool</code>; <code>0</code> and <code>1</code>. An object of type <code>_Bool</code> must have one of these values, or else it is UB. It is unspecified what the bit patterns of these values are, however common implementations use <code>0b00000000</code> and <code>0b00000001</code>.</p>",
        "id": 132649789,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535044587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> it is guaranteed that <code>enum { V1(reference), V2 }</code> and <code>enum { V1, V2(reference) }</code> are ABI-compatible with pointers</p>",
        "id": 132649866,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535044714
    },
    {
        "content": "<p>I don't believe it's guaranteed that <code>struct { T }</code> is ABI-compatible with <code>T</code>; that's what <code>#[repr(transparent)]</code> is for</p>",
        "id": 132649890,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535044749
    },
    {
        "content": "<p>The C standard requires that 0 integer values have the all-0s bit pattern. But it says that using an out-of-range integer value is UB only if it's a trap representation, and the existence of trap representations is unspecified.</p>\n<p>And yeah, I forgot about <code>repr(transparent)</code>.</p>",
        "id": 132649911,
        "sender_full_name": "alercah",
        "timestamp": 1535044792
    },
    {
        "content": "<p>So <code>0b00000000</code> is guaranteed to be <code>_False</code>; <code>0b00000001</code> may be a trap, may be <code>_True</code>, or may just cause other unspecified weirdness (e.g. it might be true in conditionals but not behave like <code>_True</code> does in bitwise operations).</p>",
        "id": 132649990,
        "sender_full_name": "alercah",
        "timestamp": 1535044863
    },
    {
        "content": "<p>Oh wait. hm. that's not <em>quite</em> right, now with the new 2s-complement rules.</p>",
        "id": 132650177,
        "sender_full_name": "alercah",
        "timestamp": 1535045099
    },
    {
        "content": "<p>that's not true - by 6.2.6/5, \"Certain object representations need not represent a value of the object type.  If the stored value of an object has such a representation and is read by an lvalue expression that does not  have  character  type,  the  behavior  is  undefined.\"</p>",
        "id": 132650206,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535045149
    },
    {
        "content": "<p>Yes, but that doesn't imply uniqueness of values. In particular, see 6.2.6.2/1 and 6.2.6.2/5.</p>",
        "id": 132650256,
        "sender_full_name": "alercah",
        "timestamp": 1535045181
    },
    {
        "content": "<p>basically, if you store a bitpattern that is not either <code>_Bool(0)</code> or <code>_Bool(1)</code> into memory, and then read it out as a <code>_Bool</code>, you get undefined behavior</p>",
        "id": 132650264,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535045188
    },
    {
        "content": "<p>So <code>_Bool</code> is guarantee to have one bit, somewhere, which determines if it is 0 or 1. It's not guaranteed to be the low bit. It is unspecified whether any combination of the other bits forms a trap representation, but if they do not, only the governing bit matters.</p>",
        "id": 132650301,
        "sender_full_name": "alercah",
        "timestamp": 1535045244
    },
    {
        "content": "<p>Additionally, all-zeroes is guaranteed to be a valid 0 representation. But e.g. the only valid 1 representation might be all-1s.</p>",
        "id": 132650352,
        "sender_full_name": "alercah",
        "timestamp": 1535045286
    },
    {
        "content": "<p>ah, I see what you're saying. Yeah</p>",
        "id": 132650374,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535045338
    },
    {
        "content": "<p>hm the draft I'm looking at predates the 2s complement rule though. Let me see if I can find that one.</p>",
        "id": 132650393,
        "sender_full_name": "alercah",
        "timestamp": 1535045379
    },
    {
        "content": "<p>However, I'd rather have <code>bool</code> be implementation defined, because compat with <code>_Bool</code> is more important, imo, than compat with <code>u8</code></p>",
        "id": 132650394,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535045383
    },
    {
        "content": "<p>and if you assume compat with <code>u8</code>, you should just stick to normal platforms</p>",
        "id": 132650463,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535045420
    },
    {
        "content": "<blockquote>\n<p>I think my personal inclination is to say that no-<code>repr</code> and <code>repr(Rust)</code> are always equivalent and always unspecified. Any additional guarantees (e.g. <code>Option&lt;&amp;T&gt;</code>) should be promised by adding an attribute which guarantees a specific layout.</p>\n</blockquote>\n<p>I feel this is too strong and impractical, but we can have it out \"on the issue tracker\" =) It comes down to similar reasoning from <code>bool</code> land, though.</p>",
        "id": 132650490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535045471
    },
    {
        "content": "<p>What's too strong and impractical about it? I feel like <code>repr(Rust)</code> and no-<code>repr</code> are naturally the same thing, i.e., \"ABI doesn't matter\"</p>",
        "id": 132650557,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535045568
    },
    {
        "content": "<p>we've already promised <code>Option&lt;&amp;T&gt;</code>, tho, so that definitely can't be rolled back (and why would we want to?)</p>",
        "id": 132650579,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535045608
    },
    {
        "content": "<p>I was specifically referring to things lke \"how <code>&amp;T</code> is represented\"</p>",
        "id": 132651499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046578
    },
    {
        "content": "<p>and <code>Option&lt;&amp;T&gt;</code></p>",
        "id": 132651502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046582
    },
    {
        "content": "<p>not the idea of \"say nothing\" and <code>#[repr(rust)]</code> being equivalent, which I totally agree with</p>",
        "id": 132651525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046604
    },
    {
        "content": "<p>but basically I don't think we can say \"<code>#[repr(rust)]</code> means totally impl defined\"</p>",
        "id": 132651573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046625
    },
    {
        "content": "<p>Do we actually guarantee that all isomorphic-to-<code>Option</code> enums are laid out that way? Or is it only <code>Option</code> itself?</p>",
        "id": 132651574,
        "sender_full_name": "alercah",
        "timestamp": 1535046626
    },
    {
        "content": "<p><em>that</em> is an interesting question that I wanted to highlight for later :)</p>",
        "id": 132651588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046642
    },
    {
        "content": "<p>(however, I'd probably be willing to make the \"isomorphic\" guarantee)</p>",
        "id": 132651616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046671
    },
    {
        "content": "<p>(but I think saying <code>Option</code> might <em>suffice</em>)</p>",
        "id": 132651631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046692
    },
    {
        "content": "<p>(at least to start)</p>",
        "id": 132651637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046696
    },
    {
        "content": "<p>I think making some guarantees for primitives is ok, because we don't currently have a mechanism to define \"new\" ones. For user-defined types, including <code>Option</code>, it may make more sense to move the guarantees to <code>repr</code>.</p>",
        "id": 132651639,
        "sender_full_name": "alercah",
        "timestamp": 1535046698
    },
    {
        "content": "<p>yes, I could see that perhaps one declares a specific repr (and option declares that)</p>",
        "id": 132651654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046717
    },
    {
        "content": "<p>I thought <code>#[repr(rust)]</code>doesn't exist.</p>",
        "id": 132651764,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1535046839
    },
    {
        "content": "<p>heh I don't remember but it seems like it would mean whatever \"the default is\" if it did ;)</p>",
        "id": 132651872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535046953
    },
    {
        "content": "<p>\"The repr formerly known as <code>rust</code>\"</p>",
        "id": 132651919,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535046975
    },
    {
        "content": "<p><code>repr(rust)</code> would be useful if we let you tag an entire module/block with <code>repr(C)</code> to use as a default</p>",
        "id": 132651951,
        "sender_full_name": "alercah",
        "timestamp": 1535047013
    },
    {
        "content": "<blockquote>\n<p>(but I think saying <code>Option</code> might <em>suffice</em>)</p>\n</blockquote>\n<p>As a casual observer, I think it's a lot nicer if it is the isomorphic enums. I know nothing of the tradeoffs, so I'm mostly thinking from the teaching side of it.</p>",
        "id": 132651974,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535047056
    },
    {
        "content": "<p>the nomicon definitely specifies \"isomorphic to option\"</p>\n<p>at least, I'm pretty sure it did at one time...</p>",
        "id": 132652181,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535047306
    },
    {
        "content": "<p>ah, here we go:</p>\n<blockquote>\n<p>As a special case, an enum is eligible for the \"nullable pointer optimization\" if it contains exactly two variants, one of which contains no data and the other contains a field of one of the non-nullable types listed above. This means no extra space is required for a discriminant; rather, the empty variant is represented by putting a null value into the non-nullable field. This is called an \"optimization\", but unlike other optimizations it is guaranteed to apply to eligible types.</p>\n</blockquote>",
        "id": 132652359,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535047535
    },
    {
        "content": "<p>FWIW, I think we currently do more than that, but I might be wrong -- e.g. using extra space in <code>bool</code> etc</p>",
        "id": 132652531,
        "sender_full_name": "simulacrum",
        "timestamp": 1535047735
    },
    {
        "content": "<p>yeah, those are optimizations; NPO is a guarantee</p>",
        "id": 132652608,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535047812
    },
    {
        "content": "<p>so basically I think these things can be separated:</p>",
        "id": 132652728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048032
    },
    {
        "content": "<p>there is the concept of a niche, and then there which types \"offer\" those niches</p>",
        "id": 132652734,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048041
    },
    {
        "content": "<p>(I think that's the terminology <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> used)</p>",
        "id": 132652777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048049
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what do you mean?</p>",
        "id": 132652883,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535048170
    },
    {
        "content": "<p>a \"niche\" is a place to \"store\" a 1-bit discriminant; some types have them, some types don't</p>",
        "id": 132653246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048592
    },
    {
        "content": "<p>essentially, it means \"some invalid bit pattern\"</p>",
        "id": 132653255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048600
    },
    {
        "content": "<p>so we might guarantee that <code>&amp;T</code> has a niche, but not say one way or the other about <code>bool</code>, etc</p>",
        "id": 132653263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048613
    },
    {
        "content": "<p>I guess it's no different than what you were saying</p>",
        "id": 132653271,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048629
    },
    {
        "content": "<p>just saying you can kind of break it down into a property of types</p>",
        "id": 132653274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048636
    },
    {
        "content": "<p>(obviously one can also generalize the concept beyond 1 bit; I don't believe rustc does today)</p>",
        "id": 132653328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535048665
    },
    {
        "content": "<p>ah, sure! I'm just speaking from a \"standardization\"/ABI-guarantee standpoint for FFI, basically.</p>",
        "id": 132653334,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535048671
    },
    {
        "content": "<blockquote>\n<p>we've already promised Option&lt;&amp;T&gt;, </p>\n</blockquote>\n<p>we have promised <code>Option</code> but we have not promised the same for when you define your own <code>Option</code></p>",
        "id": 132659678,
        "sender_full_name": "RalfJ",
        "timestamp": 1535057103
    },
    {
        "content": "<p>hm seems the nomicon did <em>oops</em>^^</p>",
        "id": 132659712,
        "sender_full_name": "RalfJ",
        "timestamp": 1535057156
    },
    {
        "content": "<p>people have brought up that different isomorphic structs might get different layout based on PGO</p>",
        "id": 132659765,
        "sender_full_name": "RalfJ",
        "timestamp": 1535057186
    },
    {
        "content": "<p>so we might not want to commit too strongly on that^^</p>",
        "id": 132659775,
        "sender_full_name": "RalfJ",
        "timestamp": 1535057193
    },
    {
        "content": "<p>if we say \"isomorphic to option\", does that include <code>type MyOption&lt;T&gt; = Result&lt;T, ()&gt;</code>?</p>",
        "id": 132659792,
        "sender_full_name": "RalfJ",
        "timestamp": 1535057209
    },
    {
        "content": "<p>Maybe! :P</p>",
        "id": 132661693,
        "sender_full_name": "alercah",
        "timestamp": 1535059562
    },
    {
        "content": "<p>no - it says specifically <code>enum { V1, V2(non-nullable-pointer) }</code> or <code>enum { V1(non-nullable-pointer), V2 }</code></p>",
        "id": 132704470,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535127492
    }
]