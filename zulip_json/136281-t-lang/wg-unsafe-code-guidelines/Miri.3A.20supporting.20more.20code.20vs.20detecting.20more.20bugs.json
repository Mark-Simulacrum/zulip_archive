[
    {
        "content": "<p>We hit a spot in Miri where we have the choice between either supporting more (real) code or finding more (real) bugs. My plan is to offer both modes with a flag, but realistically most people are going to use the default mode, so what should that be?</p>\n<p>The following program is fine:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Make sure we cast an even address to &amp;mut u16</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u16_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">base_addr</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">u16_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>But the following program is UB if you have \"bad luck\" and the alignment is not what you guessed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Just hope that base_addr is even.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u16_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">u16_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The problem is, Miri cannot really know if the user did their job and checked alignment before casting, or if they were just lucky.</p>\n<p>What Miri <em>can</em> do is disallow exploiting \"extra alignment\" that arises just because of where the base addresses have been. This is weird, but the upshot is that Miri can have two modes, where the \"support more code mode\" will always accept the first program and sometimes accept the second program; and the \"find more bugs mode\" will always reject both programs.</p>\n<p>Which mode, do you think, should be the default? Cc <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  and anyone else</p>",
        "id": 169203396,
        "sender_full_name": "RalfJ",
        "timestamp": 1561705842
    },
    {
        "content": "<p>miri is a dynamic checker, and every dynamic checker has this problem</p>",
        "id": 169203533,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706048
    },
    {
        "content": "<p>Sure, but how does that help answer this question?</p>",
        "id": 169203538,
        "sender_full_name": "RalfJ",
        "timestamp": 1561706084
    },
    {
        "content": "<p>All other dynamic checkers accept the code if the access is correct, and reject it if it isn't (e.g. because the alignment doesn't hold)</p>",
        "id": 169203554,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706120
    },
    {
        "content": "<p>running the checker twice, can accept the code the first run, and reject it the second run</p>",
        "id": 169203563,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706141
    },
    {
        "content": "<p>(that can happen under ASan, for example)</p>",
        "id": 169203567,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706156
    },
    {
        "content": "<p>For the defaults, we have to balance having false positives  vs not catching all potential bugs</p>",
        "id": 169203622,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706187
    },
    {
        "content": "<p>or at least not catching them in one single run</p>",
        "id": 169203626,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706200
    },
    {
        "content": "<p>I prefer having zero false positives, so that if miri says you have a bug, then you are always sure you have a bug</p>",
        "id": 169203647,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706242
    },
    {
        "content": "<p>The option with adding a flag that's more \"strict\" but might come with false positives sounds good as an extension</p>",
        "id": 169203704,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706292
    },
    {
        "content": "<p>A different extension would be for miri to randomize address of memory allocations (of both the stack and the heap)</p>",
        "id": 169203716,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706314
    },
    {
        "content": "<p>so that you can \"fuzz\" your program with miri, getting a different memory address each time, hopefully revealing the bug</p>",
        "id": 169203725,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706342
    },
    {
        "content": "<p>e.g. in the heap miri could give you random access, and for the stack, it could insert random padding between allocations</p>",
        "id": 169203802,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561706435
    },
    {
        "content": "<blockquote>\n<p>I prefer having zero false positives, so that if miri says you have a bug, then you are always sure you have a bug</p>\n</blockquote>\n<p>the message would not say \"this is a bug\", it would say \"this operation is not supported in your current config, enable this flag to support it but notice that that might introduce false negatives\"</p>",
        "id": 169205225,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708298
    },
    {
        "content": "<p>If we only had to consider miri being run locally I'd lean fairly strongly towards \"default mode should avoid false negatives\", because we can always tell people to enable more flags to avoid false positives -- but not the other way around</p>",
        "id": 169205285,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708342
    },
    {
        "content": "<p>however, that doesn't work in playground...</p>",
        "id": 169205293,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708348
    },
    {
        "content": "<blockquote>\n<p>A different extension would be for miri to randomize address of memory allocations (of both the stack and the heap)</p>\n</blockquote>\n<p>oh it will totally do that</p>",
        "id": 169205313,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708362
    },
    {
        "content": "<p>also miri doesnt do \"stack\" allocation. all allocations are treated equal.</p>",
        "id": 169205332,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708387
    },
    {
        "content": "<p>I would favor detecting more code with the appropriate message</p>",
        "id": 169237164,
        "sender_full_name": "centril",
        "timestamp": 1561737570
    },
    {
        "content": "<p>or at least emit a warning</p>",
        "id": 169237178,
        "sender_full_name": "centril",
        "timestamp": 1561737578
    },
    {
        "content": "<p>supporting more code with a warning is also a reasonable compromise imo</p>",
        "id": 169237198,
        "sender_full_name": "centril",
        "timestamp": 1561737597
    },
    {
        "content": "<p>the point of miri being not to blindly rubber stamp but to make you think more</p>",
        "id": 169237304,
        "sender_full_name": "centril",
        "timestamp": 1561737641
    },
    {
        "content": "<p>I would go for MIRI never producing false positives. That's what sets ASAN apart from the rest: if it complains, you know for sure you have a problem. Most of its alternatives (Valgrind, DUMA) have false positives and that makes them unusable in projects where your dependencies that are outside your direct control trigger false positives.</p>",
        "id": 169238799,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561738498
    },
    {
        "content": "<p>Treating that as a warning by default sounds like a good idea</p>",
        "id": 169238899,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561738551
    },
    {
        "content": "<blockquote>\n<p>supporting more code with a warning is also a reasonable compromise imo</p>\n</blockquote>\n<p>we don't have a good way to warn during execution. maybe we should, but I am not sure what that would look like.</p>",
        "id": 169240971,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740021
    },
    {
        "content": "<p>maybe we can even re-use the existing linting stuff for that?^^</p>",
        "id": 169240997,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740060
    },
    {
        "content": "<p>in general though, that output gets mixed with the program output, which seems messy</p>",
        "id": 169241016,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740072
    },
    {
        "content": "<p>and the warning would be one that lots of false positives, that's the entire problem</p>",
        "id": 169241042,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740111
    },
    {
        "content": "<p>Just put it on stderr and prefix it with [MIRI] and you're good as far as un-mixing it goes</p>",
        "id": 169241045,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561740113
    },
    {
        "content": "<p>not sure if we can make the rustc diagnostic printing stuff do that</p>",
        "id": 169241097,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740127
    },
    {
        "content": "<p>(which would let us point at spans etc for free)</p>",
        "id": 169241103,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740139
    },
    {
        "content": "<p>In that case print only once that miri has more to say and provide a key to print the entire thing</p>",
        "id": 169241124,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561740168
    },
    {
        "content": "<p>but anyway this is useful feedback, thanks! unfortunately it's also conflicting feedback. ;)</p>",
        "id": 169241147,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740186
    },
    {
        "content": "<p>I think the information about the situation presented to the user can be summarized as \"MIRI has detected behavior that might depend on memory addresses chosen at runtime. You may need to re-run it several times to detect an error.\" which is a single print and should only be done once</p>",
        "id": 169241259,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561740281
    },
    {
        "content": "<p>so you think pointing to a span (where in the code this happened) is not useful?</p>",
        "id": 169241474,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  <code>struct_span_warn</code> instead of <code>struct_span_err</code> basically</p>",
        "id": 169241557,
        "sender_full_name": "centril",
        "timestamp": 1561740513
    },
    {
        "content": "<p>Pointing to a span is useful, definitely.</p>",
        "id": 169241574,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561740528
    },
    {
        "content": "<blockquote>\n<p>I think the information about the situation presented to the user can be summarized as \"MIRI has detected behavior that might depend on memory addresses chosen at runtime. You may need to re-run it several times to detect an error.\" which is a single print and should only be done once</p>\n</blockquote>\n<p>that's a very nice way to frame this. not sure how to apply this to other things one might want to downgrade to a warning though, such as validation failures -- those are definitely UB but downgrading can allow execution to continue</p>",
        "id": 169241602,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740559
    },
    {
        "content": "<p>The rustc diagnostics framework handles errors and warnings very symmetrically</p>",
        "id": 169241603,
        "sender_full_name": "centril",
        "timestamp": 1561740561
    },
    {
        "content": "<p>I guess from everything I know about <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> and <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> I shouldnt be surprised that I got quick, definite and contradicting answers to which mode (fewer false positives or fewer false negatives) should be the default. ;)</p>",
        "id": 169241942,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740819
    },
    {
        "content": "<p>Warnings with weasel words sounds like a way to breach the impasse ^^</p>",
        "id": 169242095,
        "sender_full_name": "centril",
        "timestamp": 1561740957
    },
    {
        "content": "<p>lots of \"possibly\"</p>",
        "id": 169242136,
        "sender_full_name": "centril",
        "timestamp": 1561740965
    },
    {
        "content": "<p>true that</p>",
        "id": 169242147,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740972
    },
    {
        "content": "<p>ASAN aborts as soon as it finds something is definitely wrong. I have only wanted to circumvent that behavior once, and my use case might have been a bit crazy.</p>",
        "id": 169242298,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561741090
    },
    {
        "content": "<p>This makes for a very simple user interface, and chains nicely with other tools.</p>",
        "id": 169242310,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561741114
    },
    {
        "content": "<p>hm. other people did ask for \"suppression\" support in Miri though. but maybe that's a niche use case.</p>",
        "id": 169242726,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741444
    },
    {
        "content": "<p>FWIW asan lets you suppress certain checks, like \"one definition rule violation\" check. That seems to be a C++ only thing, and sometimes complains about Rust code for whatever reason, so I just suppress it.</p>",
        "id": 169242882,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561741547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> you mentioned above \"run miri multiple times\", so you think it is reasonable that this might not be deterministic? we had some discussion about this in <a href=\"https://github.com/rust-lang/miri/issues/785\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/785\">https://github.com/rust-lang/miri/issues/785</a></p>",
        "id": 169243572,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741980
    },
    {
        "content": "<p>my reaction to that was \"maybe we should make <code>cargo miri test</code> without extra flags have a fixed seed\"</p>",
        "id": 169243627,
        "sender_full_name": "RalfJ",
        "timestamp": 1561742013
    },
    {
        "content": "<p>but then the warning above would have to be reworded to \"run Miri multiple times with different seeds\"</p>",
        "id": 169243658,
        "sender_full_name": "RalfJ",
        "timestamp": 1561742032
    },
    {
        "content": "<p>I'd prefer to have it deterministic if possible. Using different seeds sounds like a way better idea.</p>",
        "id": 169243805,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561742108
    },
    {
        "content": "<p>kk</p>",
        "id": 169243958,
        "sender_full_name": "RalfJ",
        "timestamp": 1561742218
    },
    {
        "content": "<p>I'm kind of used to the fact that deterministic execution is not really achievable, but for an interpreter such as MIRI it could actually be possible, and that's great</p>",
        "id": 169243973,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561742227
    },
    {
        "content": "<p>I'd take deterministic execution over non-deterministic any day, all other things being equal</p>",
        "id": 169243999,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561742247
    },
    {
        "content": "<p>currently Miri doesnt support any communication with the outside world so its even fairly easy</p>",
        "id": 169244019,
        "sender_full_name": "RalfJ",
        "timestamp": 1561742263
    },
    {
        "content": "<p>my longer-term plan is that we will eventually allow opening files and such, and then of course its not deterministic any more. then when the program does <code>getrandom</code> we can also use OS randomness. (we'll still use a seed for our own non-determinism though, such as allocations.) but we can have a flag like <code>-Zmiri-isolate</code> that would turn off all of that communication and re-route <code>getrandom</code> to our own pseudo-random RNG.</p>",
        "id": 169244154,
        "sender_full_name": "RalfJ",
        "timestamp": 1561742344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> see <a href=\"https://github.com/rust-lang/rust/issues/62420\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62420\">https://github.com/rust-lang/rust/issues/62420</a> for an issue closely related to this discussion (about being able to reliably detect misaligned pointer accesses)</p>",
        "id": 169729516,
        "sender_full_name": "RalfJ",
        "timestamp": 1562353267
    },
    {
        "content": "<p>We can also take a third option: symbolic execution in MIRI</p>",
        "id": 169731009,
        "sender_full_name": "Shnatsel",
        "timestamp": 1562354964
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171268270,
        "sender_full_name": "Ehsan M. Kermani",
        "timestamp": 1563550943
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171268500,
        "sender_full_name": "Ehsan M. Kermani",
        "timestamp": 1563551159
    }
]