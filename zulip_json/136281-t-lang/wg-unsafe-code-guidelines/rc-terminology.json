[
    {
        "content": "<p>For <code>ptr_eq</code> we could just say: \"Returns true if the two pointers compare equal. \"</p>",
        "id": 175748967,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568554015
    },
    {
        "content": "<p>for, e.g., <code>strong_count()</code>, instead of:</p>",
        "id": 175748979,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568554032
    },
    {
        "content": "<blockquote>\n<p>Gets the number of strong (Rc) pointers to this value.</p>\n</blockquote>\n<p>maybe we can just say</p>\n<blockquote>\n<p>Gets the number of strong (Rc) pointers to this place.</p>\n</blockquote>",
        "id": 175748987,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568554062
    },
    {
        "content": "<p>We don't have a definition of object anywhere, so using \"reference-counted object\" without such a definition feels weird</p>",
        "id": 175749054,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568554147
    },
    {
        "content": "<p>Also, is the Rc even required to point to a valid <code>T</code> ? (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1df78c20870b2791ecb7fd5bd7840d6d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1df78c20870b2791ecb7fd5bd7840d6d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1df78c20870b2791ecb7fd5bd7840d6d</a>) ?</p>",
        "id": 175749295,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568554505
    },
    {
        "content": "<blockquote>\n<p>We don't have a definition of object anywhere, so using \"reference-counted object\" without such a definition feels weird</p>\n</blockquote>\n<p>we could expand the <code>Rc</code> docs to explain this. we currently have</p>\n<blockquote>\n<p>The type Rc&lt;T&gt; provides shared ownership of a value of type T, allocated in the heap.</p>\n</blockquote>\n<p>so we could expand that and introduce any terminology we need.</p>",
        "id": 175799272,
        "sender_full_name": "RalfJ",
        "timestamp": 1568628648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> one thing that confuses me is that \"place\" is currently defined as a \"pointer\"</p>",
        "id": 175801108,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568630830
    },
    {
        "content": "<p>I think that the word we are looking for here is \"allocation\"</p>",
        "id": 175801118,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568630843
    },
    {
        "content": "<p>A \"place\" is a pointer to a typed allocation, where the Rc stores the T is an \"allocation\", and what <code>ptr_eq</code> does is compare the addresses of the two allocations</p>",
        "id": 175801132,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568630871
    },
    {
        "content": "<p>Do we have a definition of allocation in the ucg reference ? maybe we could add one and relate them to place in the glossary</p>",
        "id": 175801219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568630959
    },
    {
        "content": "<p>When people use object in the C++ object they mean a Rust value put in an allocation that's behind a place (giving the content of the allocation a type)</p>",
        "id": 175801235,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568630988
    },
    {
        "content": "<p>the allocation itself is untyped</p>",
        "id": 175801239,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568630994
    },
    {
        "content": "<blockquote>\n<p>A \"place\" is a pointer to a typed allocation, where the Rc stores the T is an \"allocation\", and what <code>ptr_eq</code> does is compare the addresses of the two allocations</p>\n</blockquote>\n<p>a place can also point inside an allocation, i.e., only reference parts of it</p>",
        "id": 175801569,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631308
    },
    {
        "content": "<p>also allocations are not typed in Rust. memory in general isn't. only values (and places) are.</p>",
        "id": 175801590,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631336
    },
    {
        "content": "<p>Yes, which is why an Rc is similar to a Place, but it does not point to a place (it points to somewhere inside an allocation, it actually points to some offset after the start of an allocation, the ref count is stored before that offset in the same allocation)</p>",
        "id": 175801780,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568631505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so we might want to be more clear about what \"points to an allocation\" means</p>",
        "id": 175801874,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568631599
    },
    {
        "content": "<p>does it mean \"points to the beginning of an allocation\"?</p>",
        "id": 175801925,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568631610
    },
    {
        "content": "<p>\"points to somewhere inside it\" ?</p>",
        "id": 175801944,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568631633
    },
    {
        "content": "<p>I think that unless it is clarified, it can mean any of those, and therefore saying that the Rc points to an allocation containing a <code>T</code> is ok.</p>",
        "id": 175801971,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568631672
    },
    {
        "content": "<p>It does not point to the beginning of such an allocation, but it does point to the beginning of a T within it</p>",
        "id": 175801983,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568631694
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> so we might want to be more clear about what \"points to an allocation\" means</p>\n</blockquote>\n<p>I'd just not talk about \"pointing to an allocation\" in <code>Rc</code> docs</p>",
        "id": 175802451,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632160
    },
    {
        "content": "<p>What would you say?</p>",
        "id": 175808424,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568638204
    },
    {
        "content": "<p>not sure, but not that^^</p>",
        "id": 175809280,
        "sender_full_name": "RalfJ",
        "timestamp": 1568638885
    },
    {
        "content": "<p>or something where both interpretations are basically correct</p>",
        "id": 175809338,
        "sender_full_name": "RalfJ",
        "timestamp": 1568638923
    },
    {
        "content": "<p>e.g. <code>ptr_eq</code> testing if both <code>Rc</code> \"point to the same allocation\" or so</p>",
        "id": 175809475,
        "sender_full_name": "RalfJ",
        "timestamp": 1568639007
    },
    {
        "content": "<blockquote>\n<p>I'd just not talk about \"pointing to an allocation\" in Rc docs<br>\ne.g. ptr_eq testing if both Rc \"point to the same allocation\" or so</p>\n</blockquote>\n<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 175823568,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568648067
    },
    {
        "content": "<p>I'd be fine with that.</p>",
        "id": 175823589,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568648094
    },
    {
        "content": "<p>\"points to the same allocation\" seems good, can't go wrong, I think</p>",
        "id": 175849684,
        "sender_full_name": "centril",
        "timestamp": 1568665902
    }
]