[
    {
        "content": "<p>Suppose I have a struct defined like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">length</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I now allocate some memory and pass it to a function which fills it in or maybe it allocates some memory for me and returns a raw pointer that I return to another function later to free.<br>\nEither way I now have a <code>foo: *mut Foo</code> where the length of <code>foo.data</code> is determined by <code>foo.length</code>. However I feel like doing <code>slice::from_raw_parts(foo.data.as_ptr(), foo.length as usize)</code> is not sound as I'm using a pointer to a smaller data to access a larger chunk of data. Is this sound, and if not what is the correct way to get a slice to the full data?</p>",
        "id": 197185629,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589221721
    },
    {
        "content": "<p>Yep doing that is probably unsound.<br>\nWhy not do this:?</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C)] struct Foo {\n    length: u32,\n    data: *const u8,\n}\n</code></pre></div>",
        "id": 197190955,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589224358
    },
    {
        "content": "<p>FWIW bindgen generates the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C)]\npub struct __IncompleteArrayField&lt;T&gt;(PhantomData&lt;T&gt;, [T; 0]);\n#[repr(C)]\npub struct my_struct {\n    pub size: size_t,\n    pub data: __IncompleteArrayField&lt;u8&gt;,\n}\n\nwith this impl:\nimpl&lt;T&gt; __IncompleteArrayField&lt;T&gt; {\n    #[inline]\n    pub const fn new() -&gt; Self {\n        __IncompleteArrayField(PhantomData, [])\n    }\n    #[inline]\n    pub fn as_ptr(&amp;self) -&gt; *const T {\n        self as *const _ as *const T\n    }\n    #[inline]\n    pub fn as_mut_ptr(&amp;mut self) -&gt; *mut T {\n        self as *mut _ as *mut T\n    }\n    #[inline]\n    pub unsafe fn as_slice(&amp;self, len: usize) -&gt; &amp;[T] {\n        slice::from_raw_parts(self.as_ptr(), len)\n    }\n    #[inline]\n    pub unsafe fn as_mut_slice(&amp;mut self, len: usize) -&gt; &amp;mut [T] {\n        slice::from_raw_parts_mut(self.as_mut_ptr(), len)\n    }\n}\n</code></pre></div>\n\n\n<p>Which I'm also not sure is actually sound</p>\n<p>EDIT: Miri seems to <em>not</em> be fine with this <a href=\"https://play.rust-lang.org/?edition=2018&amp;gist=b420b8310c3b108d8e6c1ecd64930fdd\">https://play.rust-lang.org/?edition=2018&amp;gist=b420b8310c3b108d8e6c1ecd64930fdd</a></p>",
        "id": 197191414,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589224607
    },
    {
        "content": "<p>Afaik it is fine to access the complete allocation of a pointer even if it is outside of <code>ptr..(ptr + size_of)</code>. Aliasing rules still apply though</p>",
        "id": 197193705,
        "sender_full_name": "lcnr",
        "timestamp": 1589225661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197193705\">said</a>:</p>\n<blockquote>\n<p>Afaik it is fine to access the complete allocation of a pointer even if it is outside of <code>ptr..(ptr + size_of)</code>. Aliasing rules still apply though</p>\n</blockquote>\n<p>I really remember a rule saying that <code>(&amp;arr[0] as *const _) != (&amp;arr as * const _)</code><br>\nSee miri output here: <a href=\"https://play.rust-lang.org/?edition=2018&amp;gist=8e76b0abf50dcb6aeca5a662fa310d4c\">https://play.rust-lang.org/?edition=2018&amp;gist=8e76b0abf50dcb6aeca5a662fa310d4c</a></p>",
        "id": 197194297,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589225977
    },
    {
        "content": "<p>Miri is also not fine with the first example:<br>\n<a href=\"https://play.rust-lang.org/?gist=fc85ea4dc06a472c1ba8092c0765dcdf\">https://play.rust-lang.org/?gist=fc85ea4dc06a472c1ba8092c0765dcdf</a></p>",
        "id": 197195175,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589226364
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, who knows more about this stuff.</p>",
        "id": 197195472,
        "sender_full_name": "lcnr",
        "timestamp": 1589226491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197190955\">said</a>:</p>\n<blockquote>\n<p>Yep doing that is probably unsound.<br>\nWhy not do this:?</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C)] struct Foo {\n    length: u32,\n    data: *const u8,\n}\n</code></pre></div>\n\n\n</blockquote>\n<p>I cannot change the layout of <code>Foo</code> as I am working with system APIs.</p>",
        "id": 197202424,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589229929
    },
    {
        "content": "<p>Could you point at the exact API? I assumed it's a C API of the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct my_struct {\n   unsigned long size;\n   unsigned char data[];\n};\n</code></pre></div>",
        "id": 197203306,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589230402
    },
    {
        "content": "<p>There's a bajillion structs in winapi that end in variable sized arrays like for example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">STRUCT</span><span class=\"o\">!</span><span class=\"p\">{</span><span class=\"k\">struct</span> <span class=\"nc\">USB_NODE_CONNECTION_DRIVERKEY_NAME</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ConnectionIndex</span>: <span class=\"nc\">ULONG</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ActualLength</span>: <span class=\"nc\">ULONG</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DriverKeyName</span>: <span class=\"p\">[</span><span class=\"n\">WCHAR</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 197203472,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589230481
    },
    {
        "content": "<p>I just need some sort of reasonably ergonomic solution that can get an official stamp of approval.</p>",
        "id": 197203937,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589230724
    },
    {
        "content": "<p>Let's wait for <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> he'll have the best answers :)</p>",
        "id": 197204052,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589230791
    },
    {
        "content": "<p>FWIW, I've heard this called \"flexible array member\", not \"variable sized array\"</p>",
        "id": 197204472,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589231019
    },
    {
        "content": "<p>See also <a href=\"https://doc.rust-lang.org/nightly/unstable-book/language-features/unsized-locals.html?highlight=unsized#variable-length-arrays\">https://doc.rust-lang.org/nightly/unstable-book/language-features/unsized-locals.html?highlight=unsized#variable-length-arrays</a></p>",
        "id": 197204633,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589231088
    },
    {
        "content": "<p>I'm finding it a little hard to believe that you couldn't have a struct like this and then go from <code>&amp;T</code> to <code>&amp;T_slice_data</code> just because the slice data isn't all \"in\" the memory span of the T. After all, the data of a Vec's slice isn't \"in\" the memory span of the Vec itself.</p>",
        "id": 197204886,
        "sender_full_name": "Lokathor",
        "timestamp": 1589231242
    },
    {
        "content": "<p>I created this alternative which seems to pass miri. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=34c4e0107736b167d99bee081e468682\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=34c4e0107736b167d99bee081e468682</a></p>",
        "id": 197210753,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589234860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197204886\">said</a>:</p>\n<blockquote>\n<p>I'm finding it a little hard to believe that you couldn't have a struct like this and then go from <code>&amp;T</code> to <code>&amp;T_slice_data</code> just because the slice data isn't all \"in\" the memory span of the T. After all, the data of a Vec's slice isn't \"in\" the memory span of the Vec itself.</p>\n</blockquote>\n<p>The problem is taking a reference to an array, the moment you do that that reference is only valid for that array, and not for out of bounds, this is generalized also for single elements in the arrays.<br>\nin Vec we never use a array/slice to generate pointers, we keep a raw pointer from the allocator that is valid for the whole allocation.</p>",
        "id": 197242003,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589269360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125267\">Peter Rabbit</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197210753\">said</a>:</p>\n<blockquote>\n<p>I created this alternative which seems to pass miri. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=34c4e0107736b167d99bee081e468682\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=34c4e0107736b167d99bee081e468682</a></p>\n</blockquote>\n<p>That's because you actually created a <code>base_ptr</code> that points to the full array</p>",
        "id": 197242290,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589269573
    },
    {
        "content": "<p>Ah, yeah, i should have posted a follow up to that. Yandros explained in Discord that references are to blame. If you were to do this purely with pointers it would work fine.</p>",
        "id": 197242863,
        "sender_full_name": "Lokathor",
        "timestamp": 1589270023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197242863\">said</a>:</p>\n<blockquote>\n<p>Ah, yeah, i should have posted a follow up to that. Yandros explained in Discord that references are to blame. If you were to do this purely with pointers it would work fine.</p>\n</blockquote>\n<p>Yep, that's why I suggested to replace <code>data: [u8; 1]</code> with <code>data: *const u8</code></p>",
        "id": 197243013,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1589270120
    },
    {
        "content": "<p>Wouldn't that require a C level api change as well?</p>",
        "id": 197311874,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589305378
    },
    {
        "content": "<p>So I modified my example that passes miri so that it does the original naive from_raw_parts directly with the array pointer and none of the offset manipulation, and it still passes miri?!</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4524cb616cf9c4d57689693e372b256e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4524cb616cf9c4d57689693e372b256e</a></p>",
        "id": 197314843,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589306603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> yes, and in this case that's not an allowed solution because the struct is defined in the windows SDK. All we get to do is decide how best to interact with it on the rust side.</p>",
        "id": 197324200,
        "sender_full_name": "Lokathor",
        "timestamp": 1589310809
    },
    {
        "content": "<p>Indeed when you have a <em>reference</em> it and all its \"descendants\" may only be used to access <code>size_of_val(r)</code> many bytes (Cc <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a>)</p>",
        "id": 197329136,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313098
    },
    {
        "content": "<p>so for the original question <span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> , you'd want to go from a <code>*mut Foo</code> to a <code>*mut u8</code> (to the <code>data</code> field) without intermediate references. the best but unstable way to do that is <code>&amp;raw</code>; the only table way I think is manual offset computations.</p>",
        "id": 197329293,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313165
    },
    {
        "content": "<p>your other variant is probably passing in Miri because Miri is currently not trying to tell multiple raw ptrs to the same data apart -- but that is a Miri deficiency, we'll likely have to \"close that hole\" if we want to actually match what LLVM does</p>",
        "id": 197329372,
        "sender_full_name": "RalfJ",
        "timestamp": 1589313222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> So just to clarify and be absolutely certain...</p>\n<p>This is sound? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a0faca71829d3af39da4910ac9a11e30\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a0faca71829d3af39da4910ac9a11e30</a></p>\n<p>And this is unsound? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4524cb616cf9c4d57689693e372b256e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4524cb616cf9c4d57689693e372b256e</a></p>",
        "id": 197337696,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589316763
    },
    {
        "content": "<p>ahahahaha, this even gets hit in the backtrace crate!<br>\n<a href=\"https://github.com/rust-lang/backtrace-rs/blob/16682c76eb25df517e2cc220e56baf4f8a616f72/src/symbolize/dbghelp.rs#L165\">https://github.com/rust-lang/backtrace-rs/blob/16682c76eb25df517e2cc220e56baf4f8a616f72/src/symbolize/dbghelp.rs#L165</a></p>",
        "id": 197340269,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589318029
    },
    {
        "content": "<blockquote>\n<p>This is sound? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a0faca71829d3af39da4910ac9a11e30\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a0faca71829d3af39da4910ac9a11e30</a></p>\n</blockquote>\n<p>the shared reference version looks good but the mutable reference version is suspicious... I am actually surprised Miri doesn't complain there. You are creating an <code>&amp;mut [T]</code> return value which overlaps with the <code>&amp;mut self</code>... oh, <code>Self</code> is a ZST, hence no overlap! Okay this is subtle.<br>\nSo yes this seems right but please add a comment saying it relies on <code>FlexibleArray</code> being a ZST.</p>",
        "id": 197382721,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359228
    },
    {
        "content": "<blockquote>\n<p>And this is unsound? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4524cb616cf9c4d57689693e372b256e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4524cb616cf9c4d57689693e372b256e</a></p>\n</blockquote>\n<p>Yes, for <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">this reason</a>.</p>",
        "id": 197382756,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> I should add the usual disclaimer that Stacked Borrows is an experiment and not RFC'd in any way.</p>",
        "id": 197382773,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125267\">Peter Rabbit</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197340269\">said</a>:</p>\n<blockquote>\n<p>ahahahaha, this even gets hit in the backtrace crate!<br>\n<a href=\"https://github.com/rust-lang/backtrace-rs/blob/16682c76eb25df517e2cc220e56baf4f8a616f72/src/symbolize/dbghelp.rs#L165\">https://github.com/rust-lang/backtrace-rs/blob/16682c76eb25df517e2cc220e56baf4f8a616f72/src/symbolize/dbghelp.rs#L165</a></p>\n</blockquote>\n<p>nice catch!</p>",
        "id": 197382796,
        "sender_full_name": "RalfJ",
        "timestamp": 1589359305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197204472\">said</a>:</p>\n<blockquote>\n<p>FWIW, I've heard this called \"flexible array member\", not \"variable sized array\"</p>\n</blockquote>\n<p>Windows calls them variable sized arrays. To quote an official header.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// For variable size fields we use byte array, defined with zero length in structure template. Length of the field is stored as a separate field.</span>\n<span class=\"c1\">// No more than one variable size field is allowed in one structure and it is always placed last.</span>\n</code></pre></div>",
        "id": 197508407,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1589435689
    },
    {
        "content": "<p>That comment says \"variable size field,\" though I think what jake was getting at is that the C standard has something entirely unrelated called \"variable length arrays\" that people like to avoid confusion with, by using the C standard term \"flexible array members\"</p>\n<p>(flexible array member is different from what the windows headers are doing, though, so even that is not 100% accurate)</p>",
        "id": 197590677,
        "sender_full_name": "rpjohnst",
        "timestamp": 1589477692
    },
    {
        "content": "<p>Yeah, the Windows API predates FAMs, which are expressed as <code>[]</code> instead of Windows' <code>[1]</code>. From my understanding they are the same though.</p>",
        "id": 197600320,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1589481918
    },
    {
        "content": "<p>So if Windows uses <code>[1]</code> then  the <code>&amp;mut</code> version of what <span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> posted above likely doesn't work -- that example code used <code>[0]</code> though</p>",
        "id": 197785158,
        "sender_full_name": "RalfJ",
        "timestamp": 1589619216
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197785158\">said</a>:</p>\n<blockquote>\n<p>So if Windows uses <code>[1]</code> then  the <code>&amp;mut</code> version of what <span class=\"user-mention silent\" data-user-id=\"125267\">Peter Rabbit</span> posted above likely doesn't work -- that example code used <code>[0]</code> though</p>\n</blockquote>\n<p>Uhhhh, according to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdigetdeviceinterfacedetailw\">one MSDN article</a></p>\n<blockquote>\n<p>If this parameter is specified, the caller must set DeviceInterfaceDetailData.cbSize to sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA) before calling this function. The cbSize member always contains the size of the fixed part of the data structure, not a size reflecting the variable-length string at the end.</p>\n</blockquote>\n<p>So this means that if the array uses <code>[T; 0]</code> instead of <code>[T; 1]</code>, it changes the result of <code>size_of()</code> which in turn breaks usage of Windows API functions that require setting the <code>cbSize</code> member in this manner. What is your recommendation?</p>",
        "id": 199543594,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1591127350
    },
    {
        "content": "<p>For what it's worth, I've been using a new type struct that wraps a <code>*mut u8</code>. I use the \"real\" Win32 struct only to calculate the right offsets. The Win32 struct <a href=\"https://gist.github.com/ChrisDenton/b7105ce946fe4388298cd144b4d06d00\">looks something like this</a>. I cleaned up the types a bit so as not to scare off non-Windows users.</p>",
        "id": 199550445,
        "sender_full_name": "Chris Denton",
        "timestamp": 1591130486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260325\">Chris Denton</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/199550445\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, I've been using a new type struct that wraps a <code>*mut u8</code>. I use the \"real\" Win32 struct only to calculate the right offsets. The Win32 struct <a href=\"https://gist.github.com/ChrisDenton/b7105ce946fe4388298cd144b4d06d00\">looks something like this</a>. I cleaned up the types a bit so as not to scare off non-Windows users.</p>\n</blockquote>\n<p>That is horrifying and also impractical on a large scale.</p>",
        "id": 199560045,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1591135660
    },
    {
        "content": "<p>Tell me about it! I could use the Win32 struct for the other fields but, as far as I understand, the last one has to come from an actual pointer and that pointer can't come via a slice at any point. I mean, unless I only wanted one character...</p>",
        "id": 199560804,
        "sender_full_name": "Chris Denton",
        "timestamp": 1591136301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125267\">@Peter Rabbit</span> I don't know about how <code>size_of</code> is relevant here. My recommendation is to not create mutable references unless you actually want to express uniqueness.</p>",
        "id": 200514991,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/200514991\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125267\">Peter Rabbit</span> I don't know about how <code>size_of</code> is relevant here. My recommendation is to not create mutable references unless you actually want to express uniqueness.</p>\n</blockquote>\n<p>I need the variable sized array to have a size of 1 so that doing <code>size_of</code> on the struct gives the size that Windows expects. This makes my previous <code>FlexibleArray</code> solution not work in the mutable case, because you said it was only not UB because it was a ZST and didn't overlap with the mutable slice it returned.</p>",
        "id": 200515289,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1591862728
    },
    {
        "content": "<p>for ZST you convinced me the code is right, for non-ZST I am not sure. Miri doesn't complain but... I really need to implement the more careful tracking of raw ptrs at some point.</p>",
        "id": 200515391,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862786
    },
    {
        "content": "<p>So what should definitely work is to avoid the <code>&amp;mut self</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_slice_mut</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">foo_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base_ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">array_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">).</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">slice</span>::<span class=\"n\">from_raw_parts_mut</span><span class=\"p\">(</span><span class=\"n\">array_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200515449,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862836
    },
    {
        "content": "<p>now, if we had <code>raw_ref</code>, you could get that <code>foo_ptr</code> without creating an intermediate mutable reference and all would be good, but that's still unstable unfortunately... however, since <code>foo_ptr</code> is not used after <code>slice::from_raw_parts_mut</code>, I think calling this like this is actually okay:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">raw_memory</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">raw_memory</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice_mut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">as_slice_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">).</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">).</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">slice_mut</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">200</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">).</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">).</span><span class=\"n\">length</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200515557,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862918
    },
    {
        "content": "<p>but the order of operations is crucial here</p>",
        "id": 200515586,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862941
    },
    {
        "content": "<p>the moment you use <code>foo</code> aka <code>base_ptr</code> again, which is an ancestor of <code>foo_ptr</code> with an intermediate mutable reference, you should stop using <code>foo_ptr</code></p>",
        "id": 200515612,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862970
    },
    {
        "content": "<p>\"use\" here fortunately does not include address arithmetic though :) but it does include deref <code>*</code> (including <code>&amp;*x</code>)</p>",
        "id": 200515683,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/FFI.20structs.20ending.20in.20variable.20sized.20arrays.2E/near/197190955\">said</a>:</p>\n<blockquote>\n<p>Yep doing that is probably unsound.<br>\nWhy not do this:?</p>\n<p><div class=\"codehilite\"><pre><span></span><code>#[repr(C)] struct Foo {\n    length: u32,\n    data: *const u8,\n}\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's definitely a wrong Rust representation of the type, the C type is affirmatively unsized and does <em>not</em> contain a pointer in that position. You need something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(C)] struct Foo {\n  length: u32,\n  data: [u8]\n}\n</code></pre></div>",
        "id": 239813269,
        "sender_full_name": "riking",
        "timestamp": 1621631361
    },
    {
        "content": "<p>yah this is basically exactly what i was talking about with <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/256\">https://github.com/rust-lang/unsafe-code-guidelines/issues/256</a></p>",
        "id": 239825430,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621639608
    },
    {
        "content": "<p>and \"single DST at the end\" seems like it's enough for _most_ of what C programmers are used to, the exception being allocator headers</p>",
        "id": 239833220,
        "sender_full_name": "riking",
        "timestamp": 1621646944
    },
    {
        "content": "<p>though (1) i hope we all know by now that allocator headers are a disaster for any attempt at post-compromise memory <del>safety</del> mitigations and (2) a Rust allocator, which always gets sized frees, could use a suffix data structure</p>",
        "id": 239833388,
        "sender_full_name": "riking",
        "timestamp": 1621647080
    },
    {
        "content": "<p>FWIW, I wrote a a while ago a detailed post about the different approaches to tackle this pattern (based on whether one wants inline/stack allocations or a heap allocation): <a href=\"https://users.rust-lang.org/t/rust-wrapper-around-c-flexible-array/52605/2?u=yandros\">https://users.rust-lang.org/t/rust-wrapper-around-c-flexible-array/52605/2?u=yandros</a></p>",
        "id": 239870756,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1621687679
    }
]