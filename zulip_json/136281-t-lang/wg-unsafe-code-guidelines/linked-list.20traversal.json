[
    {
        "content": "<p>If I have a linked list, is it safe to have mutable references to two distinct nodes at the same time? That is, could I have</p>\n<div class=\"codehilite\"><pre><span></span>A -&gt; B -&gt; C -&gt; D\n</pre></div>\n\n\n<p>Keeping mutable references to [<code>A</code>, <code>C</code>], then increment to have [<code>A</code>, <code>D</code>] then [<code>B</code>, <code>D</code>]?</p>",
        "id": 147639813,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542160370
    },
    {
        "content": "<p>Or is the fact that <code>C</code> is reachable from <code>A</code> enough to declare this UB? If that's the case, do I just need to to keep both as raw pointers and only dereference for exceedingly short spans of time?</p>",
        "id": 147639878,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542160470
    },
    {
        "content": "<p>the current guidelines are that reachability isn’t transitive through references, but also your links are raw pointers so it’s super fine</p>",
        "id": 147640142,
        "sender_full_name": "Gankra",
        "timestamp": 1542160893
    },
    {
        "content": "<blockquote>\n<p>but also your links are raw pointers</p>\n</blockquote>\n<p>Why do you say that? Assuming it's some form of <code>Box</code> which thus has a raw pointer somewhere in it?</p>",
        "id": 147640983,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542162235
    },
    {
        "content": "<p>The current guidelines don't say much.^^ But, <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> could you just write some little testcase doing it and send me the code? (The miri on playground unfortunately doesn't implement the latest version of Stacked Borrows, still waiting for a rustc PR to land.)</p>",
        "id": 147655425,
        "sender_full_name": "RalfJ",
        "timestamp": 1542186262
    },
    {
        "content": "<p>Stacked Borrows says: The important part is that <code>&amp;mut</code> is unique, i.e. between two uses (where use is defined very liberally, and includes assignment -- i.e. , in <code>let x = y</code>, <code>y</code> gets \"used\"), there must not have been any access to the memory this reference points to, except through \"derived\" references -- i.e., references created from the reference in question with reborrowing.</p>",
        "id": 147655500,
        "sender_full_name": "RalfJ",
        "timestamp": 1542186372
    },
    {
        "content": "<p>I'd be happy to write a testcase, as soon as I wrangle NLL into submission...</p>",
        "id": 147676010,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542208698
    }
]