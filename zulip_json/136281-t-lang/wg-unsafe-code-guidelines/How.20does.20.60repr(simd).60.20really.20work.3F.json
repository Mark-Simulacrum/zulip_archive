[
    {
        "content": "<ul>\n<li>Is there a guarantee on exactly how <code>repr(simd)</code> interacts with things like transmutes and such?</li>\n<li>Is it \"opaque\" like <code>repr(rust)</code> or \"just bits arranged a particular way\" like <code>repr(C)</code>?</li>\n<li>Is a <code>__m128</code> expected to be transmute-compatible with <code>u128</code> and <code>[f32;4]</code> and so on?</li>\n<li>Are we assured by anything that the ordering of the lanes has a particular ordering compared to the indexes when it's transmuted into an array?</li>\n</ul>",
        "id": 170773764,
        "sender_full_name": "Lokathor",
        "timestamp": 1562993158
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span></p>",
        "id": 170779675,
        "sender_full_name": "RalfJ",
        "timestamp": 1563003968
    },
    {
        "content": "<p>but also <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> have you read <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/packed-simd-vectors.md\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/packed-simd-vectors.md\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/packed-simd-vectors.md</a> ?</p>",
        "id": 170779678,
        "sender_full_name": "RalfJ",
        "timestamp": 1563004006
    },
    {
        "content": "<p>or I guess <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/packed-simd-vectors.html\" target=\"_blank\" title=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/packed-simd-vectors.html\">https://rust-lang.github.io/unsafe-code-guidelines/layout/packed-simd-vectors.html</a> is a better location</p>",
        "id": 170779681,
        "sender_full_name": "RalfJ",
        "timestamp": 1563004024
    },
    {
        "content": "<p>some of these questions seem like they would be answered there</p>",
        "id": 170779684,
        "sender_full_name": "RalfJ",
        "timestamp": 1563004034
    },
    {
        "content": "<p>I think all questions are answered there</p>",
        "id": 170780085,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563004858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> if you have further questions or something is not answered there feel free to ping me or open an issue</p>",
        "id": 170781515,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563007548
    },
    {
        "content": "<p>Oh, right, of course. I somehow temporarily forgot that the book already has some content in it.</p>\n<p>Okay, having read that and also having played around with it a bit in the playground, I'm going to conclude that we're in a good place for now, and then I'll add sanity tests to my crate to make sure that things stay good, and also subscribe to issue <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/36\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/36\">https://github.com/rust-lang/unsafe-code-guidelines/issues/36</a> in case of updates.</p>",
        "id": 170806576,
        "sender_full_name": "Lokathor",
        "timestamp": 1563054711
    },
    {
        "content": "<p>It appears that <code>miri</code> falls down when I try to run my basic sanity tests through it, <a href=\"https://pastebin.com/mjiVZuRp\" target=\"_blank\" title=\"https://pastebin.com/mjiVZuRp\">https://pastebin.com/mjiVZuRp</a> (test code was <a href=\"https://gist.github.com/rust-play/c97f79a6c5ee81b82d044349cd267acb\" target=\"_blank\" title=\"https://gist.github.com/rust-play/c97f79a6c5ee81b82d044349cd267acb\">https://gist.github.com/rust-play/c97f79a6c5ee81b82d044349cd267acb</a>)</p>\n<p>I don't know if this is <code>miri</code> just not knowing what to do or what, but it's pointing the finger at stdimd, which I trust to have gotten the <code>x86_64</code> stuff correct.</p>",
        "id": 170807954,
        "sender_full_name": "Lokathor",
        "timestamp": 1563057453
    },
    {
        "content": "<p>Ah, yeah, <code>miri</code> just isn't smart enough to handle this yet I guess. From the README</p>\n<blockquote>\n<p>Miri runs the program as a platform-independent interpreter, so the program has no access to any platform-specific APIs or FFI. A few APIs have been implemented (such as printing to stdout) but most have not: for example, Miri currently does not support concurrency, or networking, or file system access, or gathering entropy from the system.</p>\n</blockquote>",
        "id": 170808679,
        "sender_full_name": "Lokathor",
        "timestamp": 1563059091
    },
    {
        "content": "<p>Yeah I should add SIMD to that list</p>",
        "id": 170823350,
        "sender_full_name": "RalfJ",
        "timestamp": 1563089433
    },
    {
        "content": "<p>the problem with SIMD is that it consists of hundreds of intrinsics (thousands really but I guess not all of them are important)</p>",
        "id": 170823353,
        "sender_full_name": "RalfJ",
        "timestamp": 1563089450
    },
    {
        "content": "<p>and they would have have to be implemented manually in Miri...</p>",
        "id": 170823354,
        "sender_full_name": "RalfJ",
        "timestamp": 1563089458
    },
    {
        "content": "<p>maybe there's a way to be smarter about them, by \"parsing\" the name of the intrinsic or so</p>",
        "id": 170823361,
        "sender_full_name": "RalfJ",
        "timestamp": 1563089480
    },
    {
        "content": "<p>but generally it's a lot of work and nobody has taken that on yet</p>",
        "id": 170823362,
        "sender_full_name": "RalfJ",
        "timestamp": 1563089490
    },
    {
        "content": "<p>However, the error is curious:</p>\n<div class=\"codehilite\"><pre><span></span>Miri evaluation error: tried to call a function with ABI RustIntrinsic using caller ABI PlatformIntrinsic\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> is an ABI mismatch like that expected for SIMD?</p>",
        "id": 170823403,
        "sender_full_name": "RalfJ",
        "timestamp": 1563089524
    },
    {
        "content": "<p>well, kind of</p>",
        "id": 170823566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563089981
    },
    {
        "content": "<p>many SIMD intrinsics end up calling a platform intrinsic</p>",
        "id": 170823571,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563089998
    },
    {
        "content": "<p>let me get you what's probably the offending code</p>",
        "id": 170823612,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563090029
    },
    {
        "content": "<p>miri would need to at least support all of these: <a href=\"https://github.com/rust-lang/stdarch/blob/master/crates/core_arch/src/simd_llvm.rs#L5\" target=\"_blank\" title=\"https://github.com/rust-lang/stdarch/blob/master/crates/core_arch/src/simd_llvm.rs#L5\">https://github.com/rust-lang/stdarch/blob/master/crates/core_arch/src/simd_llvm.rs#L5</a></p>",
        "id": 170823617,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563090053
    },
    {
        "content": "<p>note that the ABI of these is PlatformIntrinsic</p>",
        "id": 170823623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563090074
    },
    {
        "content": "<p>I don't think that miri should support more than these, at least not initially</p>",
        "id": 170823624,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563090088
    },
    {
        "content": "<p>Im not even talking about implementing the intrinsic</p>",
        "id": 170824031,
        "sender_full_name": "RalfJ",
        "timestamp": 1563090885
    },
    {
        "content": "<p>usually its an error if the ABI that the caller and callee used are not the same</p>",
        "id": 170824032,
        "sender_full_name": "RalfJ",
        "timestamp": 1563090897
    },
    {
        "content": "<p>this is the insta-UB kind of error</p>",
        "id": 170824042,
        "sender_full_name": "RalfJ",
        "timestamp": 1563090919
    },
    {
        "content": "<p>but here it seems okay? what is the difference between the RustIntrinsic and PlatformIntrinsic call ABIs?</p>",
        "id": 170824049,
        "sender_full_name": "RalfJ",
        "timestamp": 1563090940
    },
    {
        "content": "<p>(if e.g. one ABI was <code>C</code> and the other <code>Rust</code>, that would definitely be UB)</p>",
        "id": 170824092,
        "sender_full_name": "RalfJ",
        "timestamp": 1563090981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> where is the ABI difference? - the intrinsics are PlatformIntrinsic</p>",
        "id": 170825523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563093673
    },
    {
        "content": "<p>If you declare the intrinsics as <code>extern \"C\"</code> and call them, that is UB - you need to declare them as \"platform-intrinsic\"</p>",
        "id": 170825530,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563093721
    },
    {
        "content": "<p>AFAICT, they are declared as \"platform-intrinsic\" everywhere in all Rust code</p>",
        "id": 170825576,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563093740
    },
    {
        "content": "<blockquote>\n<p>usually its an error if the ABI that the caller and callee used are not the same</p>\n</blockquote>\n<p>I suppose that by this you mean that the ABI of a declaration must match the ABI of the definition</p>",
        "id": 170825595,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563093816
    },
    {
        "content": "<p>It is possible to call an <code>extern \"C\"</code> function from an <code>extern \"Rust\"</code> function</p>",
        "id": 170825599,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563093833
    },
    {
        "content": "<p>what cannot be done is call an <code>extern \"Rust\"</code> function via a declaration that says this function is <code>extern \"C\"</code></p>",
        "id": 170825640,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563093857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> these ABIs are just a hack, RustCall and RustIntrinsic and PlatformIntrinsic are all Rust</p>",
        "id": 170826318,
        "sender_full_name": "eddyb",
        "timestamp": 1563095251
    },
    {
        "content": "<p>someone needs to go and clean that mess up and it's not high priority enough to actually happen :(</p>",
        "id": 170826365,
        "sender_full_name": "eddyb",
        "timestamp": 1563095301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I see, so there's no \"good\" reason for these to be separate ABIs?</p>",
        "id": 170827629,
        "sender_full_name": "RalfJ",
        "timestamp": 1563098053
    },
    {
        "content": "<p>yeah it's just used to signal that something is an intrinsic</p>",
        "id": 170827634,
        "sender_full_name": "eddyb",
        "timestamp": 1563098084
    },
    {
        "content": "<blockquote>\n<p>what cannot be done is call an <code>extern \"Rust\"</code> function via a declaration that says this function is <code>extern \"C\"</code></p>\n</blockquote>\n<p>yes. every fn call has two ABIs: the ABI the caller assumes this fn has, and the ABI the fn really has. the error says that they are not the same.</p>",
        "id": 170827635,
        "sender_full_name": "RalfJ",
        "timestamp": 1563098085
    },
    {
        "content": "<p>this is an error similar in kind to \"you called a 5-param function with 3 params\"</p>",
        "id": 170827641,
        "sender_full_name": "RalfJ",
        "timestamp": 1563098110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/pull/62674\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62674\">https://github.com/rust-lang/rust/pull/62674</a></p>",
        "id": 170827743,
        "sender_full_name": "RalfJ",
        "timestamp": 1563098362
    },
    {
        "content": "<p>once that lands., the error message should be better for when a SIMD intrinsic is used</p>",
        "id": 170827869,
        "sender_full_name": "RalfJ",
        "timestamp": 1563098586
    },
    {
        "content": "<p>should be something like \"intrinsic not implemented: simd_add\"</p>",
        "id": 170827874,
        "sender_full_name": "RalfJ",
        "timestamp": 1563098627
    },
    {
        "content": "<p>and then someone can go in and implement all of them :P</p>",
        "id": 170827915,
        "sender_full_name": "eddyb",
        "timestamp": 1563098646
    },
    {
        "content": "<p>you can get the vector shape from <code>layout.abi</code> being <code>Abi::Vector</code> and then compute element offsets like an array</p>",
        "id": 170827922,
        "sender_full_name": "eddyb",
        "timestamp": 1563098697
    },
    {
        "content": "<p>like, this would be a fun project IMO, at least for the platform-independent ones (like <code>simd_add</code>)</p>",
        "id": 170827932,
        "sender_full_name": "eddyb",
        "timestamp": 1563098727
    },
    {
        "content": "<p>FWIW I'm actually working on making <code>repr(simd)</code> types support an array right now</p>",
        "id": 170828152,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563099156
    },
    {
        "content": "<p>I just discovered that we also support, e.g., <code>#[repr(simd)] struct Rgba { r: f32, g: f32, b: f32, a: f32 }</code>, as well as <code>#[repr(simd)]</code> types of non-power-of-two sizes</p>",
        "id": 170828162,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563099204
    },
    {
        "content": "<p>Now that you mention it, the \"Layout of packed SIMD vectors\" page in the UCG says that the Packed SIMD types <em>are</em> <code>#[repr(simd)]</code>with an example definition and says that they always have a power of two number of lanes, <em>but it doesn't say that you can't apply <code>repr(simd)</code> to other things</em>.</p>",
        "id": 170913346,
        "sender_full_name": "Lokathor",
        "timestamp": 1563211491
    },
    {
        "content": "<p>You can't apply <code>repr(simd)</code> to anything, only the compiler can do that, so the point is a bit moot :P</p>",
        "id": 170913478,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563211555
    },
    {
        "content": "<p>you just said you put it on a RGBA struct :P</p>",
        "id": 170913540,
        "sender_full_name": "Lokathor",
        "timestamp": 1563211582
    },
    {
        "content": "<p>in the compiler :P</p>",
        "id": 170974795,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563274995
    }
]