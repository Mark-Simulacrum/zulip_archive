[
    {
        "content": "<p>Suppose we have an unsafe marker trait for type with no padding bytes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">NoPaddingBytes</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And then we implement it on some of our favorite types. Particularly, say  <code>(u8,u8)</code></p>\n<p>Is it safe/sound to then have a function to convert a reference to a NoPaddingBytes value into a properly sized byte slice.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bytes_of</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">NoPaddingBytes</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">slice</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>EDIT: I'm _thinking_ that the answer is \"You can't do that\", and scottmcm also figured as much on Discord a little after I posted this, but I thought it was worth asking and we can leave it up for discussion.</p>",
        "id": 176159517,
        "sender_full_name": "Lokathor",
        "timestamp": 1568946190
    },
    {
        "content": "<p>I don't see any immediate problem if (can you add scottmcm's rationale here?) <em>if</em> the <code>NoPaddingBytes</code> impl is justified. But for virtually all repr(rust) types, layout is sufficently unspecified that claiming it has no padding bytes wouldn't be justified.</p>",
        "id": 176168501,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568961082
    },
    {
        "content": "<p>and <code>(u8, u8)</code> is <code>repr(rust)</code></p>",
        "id": 176178276,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568972251
    },
    {
        "content": "<p><code>(u8,u8)</code> will never have padding bytes, yet it is <code>repr(rust)</code> and inspecting the individual bytes is undefined. Or at least, uh, I think \"under defined\" is the term that's been used a bit lately, perhaps that. <code>(u8,u8)</code> is always 2 bytes big and neither of the bytes is a padding byte, but you still can't turn <code>&amp;(u8,u8)</code> into <code>&amp;[u8]</code> and look around inside because it's undefined if <code>tuple.0</code> is the same as <code>punned_slice[0]</code>.</p>",
        "id": 176197096,
        "sender_full_name": "Lokathor",
        "timestamp": 1568989455
    },
    {
        "content": "<p>I don't believe it is actually defined that <code>(u8, u8)</code> has no padding. Not even in the UCG which is all provisional and contains errors as well as proposals not yet blessed by the lang team.</p>",
        "id": 176212596,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568999996
    },
    {
        "content": "<p>if there's ever a secret padding byte somehow I think you'll get torches and pitchforks</p>",
        "id": 176229607,
        "sender_full_name": "Lokathor",
        "timestamp": 1569012869
    },
    {
        "content": "<p>but sure, perhaps it isn't really defined</p>",
        "id": 176229637,
        "sender_full_name": "Lokathor",
        "timestamp": 1569012894
    },
    {
        "content": "<p>if you don't want padding, make it <code>#[repr(C)]</code></p>",
        "id": 176253972,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569051749
    },
    {
        "content": "<p>_I think_ there is an issue open for homogeneous aggregates</p>",
        "id": 176253979,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569051783
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/36\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/36\">ucg#36</a></p>",
        "id": 176254049,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569051938
    },
    {
        "content": "<p><code>(u8, u8, u8, u8)</code> has size 4 but alignment 1</p>",
        "id": 176254164,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569052091
    },
    {
        "content": "<p>and right now repr(Rust) could change that to size 4 alignment 4</p>",
        "id": 176254191,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569052120
    },
    {
        "content": "<p>it also could change that to size 8 alignment 8 AFAICT</p>",
        "id": 176254206,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569052147
    },
    {
        "content": "<p>which gives you 4 bytes of trailing padding</p>",
        "id": 176254209,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569052156
    },
    {
        "content": "<p>I can't make a tuple be repr(C) XD</p>",
        "id": 176255159,
        "sender_full_name": "Lokathor",
        "timestamp": 1569053756
    },
    {
        "content": "<p><code>#[repr(C)] pub Foo(u8, u8, u8, u8);</code></p>",
        "id": 176258218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569059545
    },
    {
        "content": "<p>That solves... nothing. It gives no interop with tuple-based APIs, it is a different type (different kind even, so no a priori reason to expect them to have similar rules), and it loses all the convenience that motivate having tuples as built-ins in the first place.</p>",
        "id": 176258655,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569060397
    },
    {
        "content": "<p>Well of course you can't interface with tuple based APIs with it</p>",
        "id": 176260204,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569063685
    },
    {
        "content": "<p>A tuple-based API expects a <code>repr(Rust)</code> tuple, which might have padding anywhere</p>",
        "id": 176260210,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569063716
    },
    {
        "content": "<p>They want a different type with a different layout that has no padding</p>",
        "id": 176260329,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569063910
    },
    {
        "content": "<p>That's incompatible with <code>repr(Rust)</code></p>",
        "id": 176260331,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569063918
    },
    {
        "content": "<p>Even if we were to support the syntax <code>#[repr(C)] (u8, u8)</code> that would be a different type than <code>(u8, u8)</code></p>",
        "id": 176260375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569063979
    },
    {
        "content": "<p>so doing that fixes nothing</p>",
        "id": 176260376,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569063983
    },
    {
        "content": "<p>A tuple-struct solves the same problem in the same way but already works on stable Rust</p>",
        "id": 176260382,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569064007
    },
    {
        "content": "<blockquote>\n<p>Even if we were to support the syntax #[repr(C)] (u8, u8) that would be a different type than (u8, u8)</p>\n</blockquote>\n<p>Would be open to <code>#[repr(C) (T, U, ...)</code> if there's desire for that</p>",
        "id": 176266483,
        "sender_full_name": "centril",
        "timestamp": 1569075197
    },
    {
        "content": "<p>If we're talking about working on stable Rust, tuple struct don't have any more layout guarantees than tuples atm (none de jure, very little in UCG other than the special cases for zero and one fields)</p>",
        "id": 176266615,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569075402
    },
    {
        "content": "<p>And <code>#[repr(C)] (T, U, ...)</code> is more confusing than helpful. More distinctions in the type system generally hurt interop, and perpetuating the idea <code>repr</code>-ness is a property of every type rather than something that means specific things for specific user-defined types. Either we provide deterministic, predictable layout of tuples or we don't.</p>",
        "id": 176266679,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569075533
    },
    {
        "content": "<p>In this case, the creation of any new types is not desired.</p>\n<p>I want to have a function like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">bytes_of</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>:<span class=\"nc\">SomeBound</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and then implement SomeBound on all appropriate core/alloc/std types. Currently the bound is <code>Pod</code> since most other casting functions just use <code>Pod</code>.</p>\n<p>For the casting case of <code>&amp;T -&gt; &amp;[u8]</code> specifically I wanted to investigate if some sort of lesser bound would usefully be able to add a lot of types that are readable as just bytes but aren't <code>Pod</code> (such as NonNull, NomZeroUsize, etc).</p>",
        "id": 176270745,
        "sender_full_name": "Lokathor",
        "timestamp": 1569082377
    },
    {
        "content": "<p>Isn't that just <code>zerocopy::AsBytes</code>?</p>",
        "id": 176271028,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1569082825
    },
    {
        "content": "<p>I'm unconvinced about guaranteeing something for tuples only</p>",
        "id": 176271115,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083040
    },
    {
        "content": "<p>this is essentially the discussion about homogeneous agregates</p>",
        "id": 176271157,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083081
    },
    {
        "content": "<p>and all of it applies to homogeneous structs, tuple structs, tuples, and arrays</p>",
        "id": 176271167,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083105
    },
    {
        "content": "<blockquote>\n<p>rkruppe 4:16 PM   <br>\nIf we're talking about working on stable Rust, tuple struct don't have any more layout guarantees than tuples atm</p>\n</blockquote>\n<p><code>#[repr(C)]</code> tuple structs do</p>",
        "id": 176271229,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083197
    },
    {
        "content": "<p>guaranteeing field order would already be enough for union type punning and transmute (if the transmute succeeds)</p>",
        "id": 176271294,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083315
    },
    {
        "content": "<p>so if and only if the transmute form <code>(T, T)</code> to <code>[T; N]</code> succeeds, then <code>(T, T).i</code> can be accessed via <code>[T; N][i]</code></p>",
        "id": 176271316,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083397
    },
    {
        "content": "<p>we could make that transmute always succeed by guaranteeing that their sizes match, but the size of arrays is constrained by what C specifies</p>",
        "id": 176271372,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083457
    },
    {
        "content": "<p>that would still allow us raising the alignment of aggregates up to the aggregate size if we wanted, but we can't raise it further than that</p>",
        "id": 176271384,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083481
    },
    {
        "content": "<p>so we could raise the alignment of <code>(u8, u8)</code> to <code>2</code></p>",
        "id": 176271395,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083518
    },
    {
        "content": "<p>if we don't want to limit that, we could maybe guarantee that the first field is at offset 0</p>",
        "id": 176271452,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083599
    },
    {
        "content": "<p>that would allow raising the alignment of <code>(u8, u8)</code> to <code>4</code>, which gives it size <code>4</code> , and still allow going from a tuple to an array by using an <code>#[repr(C)] union U { t: (u8, u8), a: [u8; 2] }</code></p>",
        "id": 176271501,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083653
    },
    {
        "content": "<p>So for getting that <code>union</code> to work for type-punning, we just need:</p>\n<ul>\n<li>The <code>i</code>-th field of homogeneous aggregates with default layout is located at offset <code>i * size_of::&lt;FieldTy&gt;()</code>.</li>\n</ul>\n<p>This prevents field-reordering optimizations, e.g., from PGO, e.g., if it would make sense to put the i-th field at the front because its hot, this guarantee would prevent that.</p>\n<p>This allows raising their alignment arbitrarily high, which would produce trailing padding, so <code>transmute</code> might fail if the size of the aggregates differs. So we can still do optimizations like raising the alignment of <code>(u8, u8, u8, u8)</code> to <code>4</code>. </p>\n<p>If we wanted to guarantee that <code>transmute</code> works, we could extend those guarantees with:</p>\n<ul>\n<li>The size of homogeneous aggregates with default layout is <code>size_of::&lt;FieldTy&gt;() * N</code></li>\n</ul>",
        "id": 176271590,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569083844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> yes, it's one of the things zerocopy does</p>",
        "id": 176272564,
        "sender_full_name": "Lokathor",
        "timestamp": 1569085468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I'm fairly sure there's an established crate with that exact SomeBound and associated functions you'd expect.</p>",
        "id": 176322322,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1569178940
    },
    {
        "content": "<p>Oh, sure, and I own one of the best ones in the field, which I recently extracted into its own crate at the request of a user (announcing: bytemuck-0.1 is now on <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a>)</p>\n<p>The question isn't if we can do it at all, the question is how much we can loosen that bound while remaining sound.</p>",
        "id": 176322573,
        "sender_full_name": "Lokathor",
        "timestamp": 1569179401
    },
    {
        "content": "<p>Depends on how much you want to rely on the rust compiler not having serious performance regressions.</p>",
        "id": 176323125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569180385
    },
    {
        "content": "<p>There are arguments for changing the layout of <code>(u8, u8)</code> slightly, e.g., increase its alignment.</p>",
        "id": 176323129,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569180413
    },
    {
        "content": "<p>But that's not free, since it might end up raising the size of some other types</p>",
        "id": 176323135,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569180426
    },
    {
        "content": "<p>Just because the language does not guarantee something, does not mean that the behavior will change. It might or might not change. If you need to make an assumption to get something done, and you are aware of the issues and risks, you often can write code that tests your assumptions, so that if they were to change, you'd get notified.</p>",
        "id": 176323204,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569180599
    },
    {
        "content": "<p>however, when people use a crate as a dependency the crate's tests aren't run on their machine before you're allowed to build the crate</p>",
        "id": 176324275,
        "sender_full_name": "Lokathor",
        "timestamp": 1569182700
    },
    {
        "content": "<p>so while i might accept such a risk for myself, it would clearly be irresponsible to ship that as a lib</p>",
        "id": 176324326,
        "sender_full_name": "Lokathor",
        "timestamp": 1569182764
    },
    {
        "content": "<p>What about a compile-time assert of some kind?</p>",
        "id": 176327500,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1569189055
    },
    {
        "content": "<p>If there isn't a good mechanism for that, I'd support adding one.</p>",
        "id": 176327506,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1569189074
    },
    {
        "content": "<p>There are compile time asserts</p>\n<p>in this case,</p>\n<ul>\n<li>you could assert the size of the tuple type</li>\n<li>you could assert the align of the tuple type</li>\n</ul>\n<p>However, asserting the linearity of the tuple type would be less of a sure thing. Assuming that all <code>(u8,u8)</code> have the same layout then you could do it by making some demo values and asserting that the fields land in the right spots in memory. However, you cannot currently const transmute</p>",
        "id": 176329777,
        "sender_full_name": "Lokathor",
        "timestamp": 1569193458
    },
    {
        "content": "<blockquote>\n<p>however, when people use a crate as a dependency the crate's tests aren't run on their machine before you're allowed to build the crate</p>\n</blockquote>\n<p>That's what <code>assert!</code> is for</p>",
        "id": 176342629,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218795
    },
    {
        "content": "<p><code>assert!(size_of::&lt;(u8,u8)&gt;() == 2);</code></p>",
        "id": 176342648,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218830
    },
    {
        "content": "<p>With optimizations on, the compiler should be able to remove the assert</p>",
        "id": 176342654,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218854
    },
    {
        "content": "<blockquote>\n<p>However, you cannot currently const transmute</p>\n</blockquote>\n<p>Of course you can</p>",
        "id": 176342703,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569218914
    },
    {
        "content": "<p>stable? or just with some feature?</p>",
        "id": 176529947,
        "sender_full_name": "Lokathor",
        "timestamp": 1569381301
    },
    {
        "content": "<p>you can use unions in const fns</p>",
        "id": 176537401,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569393169
    },
    {
        "content": "<p>That only works with specific types, as I recall, you can't do it generically.</p>",
        "id": 176584459,
        "sender_full_name": "Lokathor",
        "timestamp": 1569430599
    },
    {
        "content": "<p>You sorta can const transmute by using a union in a macro</p>",
        "id": 176585706,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1569431407
    },
    {
        "content": "<p>Example: <a href=\"https://github.com/thomcc/bad3d/blob/master/t3m/src/macros.rs#L141-L159\" target=\"_blank\" title=\"https://github.com/thomcc/bad3d/blob/master/t3m/src/macros.rs#L141-L159\">https://github.com/thomcc/bad3d/blob/master/t3m/src/macros.rs#L141-L159</a> (it's gross, admittedly)</p>",
        "id": 176585795,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1569431499
    },
    {
        "content": "<p>FWIW you don't need the <code>ARR</code> const there</p>",
        "id": 176589384,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569433807
    },
    {
        "content": "<p>ah, or are you using it for type checking ?</p>",
        "id": 176589487,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569433898
    },
    {
        "content": "<p>it might give better errors than omitting it</p>",
        "id": 176589509,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569433909
    },
    {
        "content": "<p>Yeah, it's for type checking and so that i don't run code passed into the macro inside an unsafe block</p>",
        "id": 176592192,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1569435588
    },
    {
        "content": "<p>admittedly it is a const unsafe block so it probably doesn't really matter... well, maybe. but better safe than sorry</p>",
        "id": 176600607,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1569441795
    }
]