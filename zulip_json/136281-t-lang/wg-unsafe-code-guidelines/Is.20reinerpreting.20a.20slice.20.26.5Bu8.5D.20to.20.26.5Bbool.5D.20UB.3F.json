[
    {
        "content": "<p>Consider <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9ccefa49b69b22fb0103e15f9f251470\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9ccefa49b69b22fb0103e15f9f251470\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9ccefa49b69b22fb0103e15f9f251470</a></p>",
        "id": 171758108,
        "sender_full_name": "Maik Klein",
        "timestamp": 1564131258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228832\">@Maik Klein</span> it is UB <em>unless</em> you know for sure that every element in the slice is either 0 or 1</p>",
        "id": 171761093,
        "sender_full_name": "RalfJ",
        "timestamp": 1564134530
    },
    {
        "content": "<p>IOW, the slice has to contain bytes that are \"valid\" for <code>bool</code></p>",
        "id": 171761104,
        "sender_full_name": "RalfJ",
        "timestamp": 1564134543
    },
    {
        "content": "<p>However, this is based on the strictest possible resolution for <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a>. We might end up being more relaxed and decide that data behind references does not have to be valid until the reference is actually used (for some notion of \"use\"). But, until the lang team decided that this is <em>not</em> UB, it is UB (to remain forward compatible).</p>",
        "id": 171761177,
        "sender_full_name": "RalfJ",
        "timestamp": 1564134624
    },
    {
        "content": "<p>Thanks for the reply, just to be sure this would only apply to references and not pointers? So I could have worked around it by creating my own slice type?</p>\n<div class=\"codehilite\"><pre><span></span>pub struct SliceMut&lt;&#39;a, T&gt; {\n    start: *mut T,\n    len: usize,\n    _marker: PhantomData&lt;&amp;&#39;a ()&gt;,\n}\n</pre></div>",
        "id": 171789894,
        "sender_full_name": "Maik Klein",
        "timestamp": 1564160417
    },
    {
        "content": "<p>by pointers you mean raw pointers?</p>",
        "id": 171790105,
        "sender_full_name": "RalfJ",
        "timestamp": 1564160563
    },
    {
        "content": "<p>yeah</p>",
        "id": 171790112,
        "sender_full_name": "Maik Klein",
        "timestamp": 1564160571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228832\">@Maik Klein</span> you might be interested in <a href=\"https://github.com/rust-lang/rust/pull/60667\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60667\">https://github.com/rust-lang/rust/pull/60667</a> :)</p>",
        "id": 171790115,
        "sender_full_name": "RalfJ",
        "timestamp": 1564160574
    },
    {
        "content": "<p>Yeah that is essentially what I want thanks. Also much nice than my impl, I'll just steal it.</p>",
        "id": 171839105,
        "sender_full_name": "Maik Klein",
        "timestamp": 1564222452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228832\">@Maik Klein</span> notice that this is the kind of code that is correct in libstd but not correct outside</p>",
        "id": 171839427,
        "sender_full_name": "RalfJ",
        "timestamp": 1564223077
    },
    {
        "content": "<p>rustc reserves to change the way slices are represented etc, and libstd will be updated</p>",
        "id": 171839430,
        "sender_full_name": "RalfJ",
        "timestamp": 1564223091
    },
    {
        "content": "<p>but code outside libstd cannot make assumptions about rustc implementation details the same way libstd does</p>",
        "id": 171839440,
        "sender_full_name": "RalfJ",
        "timestamp": 1564223107
    },
    {
        "content": "<p>Yeah I'd be fine to sync it manually until it would be on stable, but I just realized that unions with non copy fields are unstable as well</p>",
        "id": 171840790,
        "sender_full_name": "Maik Klein",
        "timestamp": 1564225560
    },
    {
        "content": "<p>So I just go with my own slice impl until this is on stable</p>",
        "id": 171841446,
        "sender_full_name": "Maik Klein",
        "timestamp": 1564226602
    }
]