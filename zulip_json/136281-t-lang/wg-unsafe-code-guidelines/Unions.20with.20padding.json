[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> why are you so concerned about giving <code>#[repr(transparent)]</code> unions padding?</p>",
        "id": 169418603,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005243
    },
    {
        "content": "<p>AFAICT, writing and reading to the padding would be ok - the expectation that the padding does not to change on, e.g., move/copy/etc. would be incorrect under that model, but I don't follow why that is a big deal</p>",
        "id": 169418666,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005300
    },
    {
        "content": "<p>I was just saying that in case it turns out that we have vectors with padding at the end one day or so</p>",
        "id": 169418717,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005323
    },
    {
        "content": "<p>we could still have both a \"bags of bits\" semantics <em>and</em> a vector ABI for unions, as long as the bag of bits is just the part \"covered\" by any union fields</p>",
        "id": 169418742,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005362
    },
    {
        "content": "<p>Yeah, that's also a case, but I meant also in the middle, e.g., <code>#[repr(transparent)] union U { x: (u8, u32) }</code>having 3 padding bytes between the u8 and the u32 that are not preserved on move / copy / etc.</p>",
        "id": 169418761,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005379
    },
    {
        "content": "<p>or maybe we just allow uninitalized integers, and then there's no need to use <code>MaybeUninit</code> for vector types :P</p>",
        "id": 169418765,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005382
    },
    {
        "content": "<blockquote>\n<p>Yeah, that's also a case, but I meant also in the middle, e.g., <code>#[repr(transparent)] union U { x: (u8, u32) }</code>having 3 padding bytes between the u8 and the u32 that are not preserved on move / copy / etc.</p>\n</blockquote>\n<p>that's just so much harder to specify, now you have a \"bag with gaps\"</p>",
        "id": 169418786,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005414
    },
    {
        "content": "<p>how much harder?</p>",
        "id": 169418807,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005441
    },
    {
        "content": "<p>I dont know any unit I could use to quantify this :P</p>",
        "id": 169418908,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005486
    },
    {
        "content": "<p>the proposed way of computing the padding is straight forward</p>",
        "id": 169418919,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005491
    },
    {
        "content": "<p>and there is also the cost this has, as we have seen with your ctest problem</p>",
        "id": 169419078,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005581
    },
    {
        "content": "<p>or would fixing this by not making the union \"transparent\" not help?</p>",
        "id": 169419091,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005593
    },
    {
        "content": "<p>I mean, my ctest problem was me assuming that repr(transparent) unions wouldn't have any padding</p>",
        "id": 169419171,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005656
    },
    {
        "content": "<p>I thought that is how repr(Rust) and repr(transparent) unions were implemented, but it turns out this was not the case</p>",
        "id": 169419254,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005695
    },
    {
        "content": "<p>so using <code>repr(C)</code> to kill the padding would help? or not?</p>",
        "id": 169419275,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005714
    },
    {
        "content": "<p><code>repr(C)</code> has padding</p>",
        "id": 169419365,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005798
    },
    {
        "content": "<p>as in, trailing padding, for example</p>",
        "id": 169419474,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005857
    },
    {
        "content": "<p>C does not require copies to preserve the padding bytes, C++ does (EDIT: for unions)</p>",
        "id": 169419517,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005880
    },
    {
        "content": "<p><a href=\"http://port70.net/~nsz/c/c11/n1570.html#note51\" target=\"_blank\" title=\"http://port70.net/~nsz/c/c11/n1570.html#note51\">http://port70.net/~nsz/c/c11/n1570.html#note51</a></p>",
        "id": 169419640,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562005942
    },
    {
        "content": "<p>If we also require copying all union bytes, then we can do a roundtrip with C++ - with C we can't do it anyways.</p>",
        "id": 169419810,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562006068
    },
    {
        "content": "<p>oh so trailing padding is already a problem for you</p>",
        "id": 169420008,
        "sender_full_name": "RalfJ",
        "timestamp": 1562006259
    },
    {
        "content": "<p>well yes the entire point of this discussion was to require copying all unions bytes right? or as many as possible anyway^^</p>",
        "id": 169420032,
        "sender_full_name": "RalfJ",
        "timestamp": 1562006275
    },
    {
        "content": "<p>like, say, max-size-of-a-field many bytes</p>",
        "id": 169420078,
        "sender_full_name": "RalfJ",
        "timestamp": 1562006284
    },
    {
        "content": "<p>the question is, if all fields of the union have a whole in the same bit offset, why copy that on copy ? That hole is not observable through any field access.</p>",
        "id": 169425258,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562010414
    },
    {
        "content": "<p>this assumes the union is complete</p>",
        "id": 169426273,
        "sender_full_name": "RalfJ",
        "timestamp": 1562011222
    },
    {
        "content": "<p>at least in C land, it is not uncommon to consider adding a new variant to a union a backwards compatible change</p>",
        "id": 169426297,
        "sender_full_name": "RalfJ",
        "timestamp": 1562011241
    },
    {
        "content": "<p>keeps the library extensible with new options that old clients can just forward, or if they have to handle them error because the tag they see is unknown</p>",
        "id": 169426328,
        "sender_full_name": "RalfJ",
        "timestamp": 1562011266
    },
    {
        "content": "<p>good point</p>",
        "id": 169429867,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562014007
    }
]