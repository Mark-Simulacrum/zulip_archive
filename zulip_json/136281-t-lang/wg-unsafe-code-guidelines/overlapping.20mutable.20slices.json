[
    {
        "content": "<p>I know that two mutable references to the same value are insta-UB, but do overlapping references have the same behavior?</p>\n<div class=\"codehilite\"><pre><span></span>[1, 2, 3]\n ^^^^----- slice_0\n    ^^^^-- slice_1\n</pre></div>",
        "id": 158041777,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549901381
    },
    {
        "content": "<p>yes</p>",
        "id": 158042793,
        "sender_full_name": "RalfJ",
        "timestamp": 1549902147
    },
    {
        "content": "<p>\"aliasing\" is not \"equal pointers\", it is \"overlapping ranges\"</p>",
        "id": 158042804,
        "sender_full_name": "RalfJ",
        "timestamp": 1549902156
    },
    {
        "content": "<p>so actually two <code>&amp;mut ()</code> to the same value are fine</p>",
        "id": 158042809,
        "sender_full_name": "RalfJ",
        "timestamp": 1549902168
    },
    {
        "content": "<blockquote>\n<p>two <code>&amp;mut ()</code> to the same value</p>\n</blockquote>\n<p>I'm not following. How do you have two <code>&amp;mut ()</code> to a value unless the value is itself or contains a <code>()</code>?</p>",
        "id": 158042943,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549902255
    },
    {
        "content": "<p>I think what <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is saying is that aliasing only occurs when the thing being referenced is a non-empty set.  Since <code>()</code> is always empty, aliasing cannot occur.  If this is so, does this mean that references to <code>PhantomData</code> instances are also OK?  What about anything else that is empty?</p>",
        "id": 158045184,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549903841
    },
    {
        "content": "<p><code>[T; 0]</code> comes to mind.</p>",
        "id": 158045679,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549904238
    },
    {
        "content": "<p>I suppose that the statement \"you cannot alias something that takes zero size\" seems pretty reasonable</p>",
        "id": 158045711,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1549904279
    },
    {
        "content": "<p>What about ownership?  AFAIK, you can't read/write a zero-sized type (someone check me on this, I could be wrong), but the objects are still referenced, so, will there be lifetime problems?</p>",
        "id": 158053919,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549911123
    },
    {
        "content": "<p>I don't follow. \"lifetime problem\"? sounds like you are talking about references, but you started out with \"ownership\"?</p>",
        "id": 158063174,
        "sender_full_name": "RalfJ",
        "timestamp": 1549917569
    },
    {
        "content": "<p>we are specifically talking about references here, and since aliasing is defined as pointing to overlapping ranges, references to ZST cannot really alias</p>",
        "id": 158063258,
        "sender_full_name": "RalfJ",
        "timestamp": 1549917603
    },
    {
        "content": "<p>I'm sorry, I was being really, really unclear about this.   Consider the following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">d</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">..</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;d = {:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Today, this code will not compile because <code>a</code> doesn't live long enough for <code>d</code>.  But <code>d</code> is empty; why <strong>can't</strong> this code compile?  After all, if we can't read or write to this, then does it really matter?  If it's like the mathematical concept of the empty set, then we can treat all empty references as if they are the same object (IIRC, there is one empty set in the universe; all empty sets alias to it).  If it <strong>isn't</strong> like the mathematical concept of the empty set, then there is additional information there, and the scoping rules are correct.  My comment about the 'lifetime problem' included this problem.</p>",
        "id": 158064625,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549918603
    },
    {
        "content": "<p>One thing to keep in mind is that the rules the compiler enforces for safe Rust are only a conservative approximation of the rules governing UB -- safe programs must be UB-free, but not every UB-free program can be written entirely in safe Rust</p>",
        "id": 158065430,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1549919192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202560\">@Cem Karan</span> I see. I am not sure I have a good answer for your particular example, but notice that I spoke only about <em>aliasing</em> in particular.</p>",
        "id": 158065631,
        "sender_full_name": "RalfJ",
        "timestamp": 1549919363
    },
    {
        "content": "<p>to have an <code>&amp;mut T</code>, you must not just make sure that there is no aliasing reference, you must also make sure that it points to a <code>T</code></p>",
        "id": 158065653,
        "sender_full_name": "RalfJ",
        "timestamp": 1549919394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> You're right, unfortunately for me, my brain tends to skip around a lot, which is how this came to mind.</p>",
        "id": 158065721,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549919431
    },
    {
        "content": "<p>a library can use a zero-sized type as a kind of \"token\" that indicates a permission or some such thing, and creating such references \"out of thin air\" would certainly not be allowed</p>",
        "id": 158065722,
        "sender_full_name": "RalfJ",
        "timestamp": 1549919432
    },
    {
        "content": "<p>but for your example, I agree with <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span>  -- it's the compiler being conservative, mostly. (and also because maintaining pointer equality is nice.) the compiler does not reason about array indices.</p>",
        "id": 158065771,
        "sender_full_name": "RalfJ",
        "timestamp": 1549919469
    },
    {
        "content": "<p>e.g., you cannot do <code>let x = &amp;mut a[1]; let y = &amp;mut a[2]; *x = 5;</code> even though x and y definitely do <em>not</em> alias</p>",
        "id": 158065793,
        "sender_full_name": "RalfJ",
        "timestamp": 1549919495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I'm glad that the rules are a conservative approximation.  I was thinking about other, weirder cases on the way to work yesterday, and I'm not sure how they can be handled, or if they are forever going to be UB.</p>",
        "id": 158065859,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549919526
    },
    {
        "content": "<p>re: the empty set, a reference to a ZST certainly has <em>some</em> information -- namely, it points to a particular address in memory. while it does not alias with anything, that address is still observable and can be significant. we actually fixed iterators over slices of ZSTs to make sure they use a consistent address.</p>",
        "id": 158065929,
        "sender_full_name": "RalfJ",
        "timestamp": 1549919634
    },
    {
        "content": "<p>the one thing that is empty here is the <em>set of addresses \"covered\" by the reference</em>. but for that, the fact that all empty sets are equal bears no significance.</p>",
        "id": 158065988,
        "sender_full_name": "RalfJ",
        "timestamp": 1549919664
    },
    {
        "content": "<p>Once again, I was being unclear.  You're right that the set of addresses covered by the reference is empty, but what I failed to talk more about was exactly what you pointed out; that the existence of the reference could be important.  In which case the 'set of interesting stuff' is not empty, even on such a reference.  If it were empty, then it could be disposed of.</p>",
        "id": 158066340,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549920001
    },
    {
        "content": "<p>more importantly, it could be created arbitrarily</p>",
        "id": 158066554,
        "sender_full_name": "RalfJ",
        "timestamp": 1549920129
    },
    {
        "content": "<p>(everything in Rust can be disposed of, see <code>mem::forget</code>)</p>",
        "id": 158066559,
        "sender_full_name": "RalfJ",
        "timestamp": 1549920139
    },
    {
        "content": "<p>Not the kind of 'disposed of' I was thinking about; I meant that the compiler could optimize it away.</p>",
        "id": 158066588,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549920181
    },
    {
        "content": "<p>ah, yes</p>",
        "id": 158066611,
        "sender_full_name": "RalfJ",
        "timestamp": 1549920212
    },
    {
        "content": "<p>though the compiler can and will optimize many interesting things away :)</p>",
        "id": 158066616,
        "sender_full_name": "RalfJ",
        "timestamp": 1549920226
    },
    {
        "content": "<p>True, that! :)</p>",
        "id": 158066678,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549920249
    },
    {
        "content": "<p>all this ownership discipline and lifetimes is entirely a compile-time fiction, after all. it is very interesting, and yet entirely \"disposed of\". ;)</p>",
        "id": 158066684,
        "sender_full_name": "RalfJ",
        "timestamp": 1549920254
    },
    {
        "content": "<p>That is true.</p>",
        "id": 158066711,
        "sender_full_name": "Cem Karan",
        "timestamp": 1549920294
    }
]