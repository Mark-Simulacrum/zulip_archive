[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what are unused time stamps for? When one pushes something off the stack, then that time-stamp becomes \"unused\" I guess</p>",
        "id": 159063174,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550752021
    },
    {
        "content": "<p>but why does <code>Tracking</code> need to keep track of the next unused one ?</p>",
        "id": 159063187,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550752045
    },
    {
        "content": "<p>it's just a monotonically increasing counter</p>",
        "id": 159069452,
        "sender_full_name": "RalfJ",
        "timestamp": 1550757742
    },
    {
        "content": "<p>and the next not-yet-used (as in handed out) timestamp must be stored somewhere</p>",
        "id": 159069458,
        "sender_full_name": "RalfJ",
        "timestamp": 1550757755
    },
    {
        "content": "<p>nothing complicated^^</p>",
        "id": 159069459,
        "sender_full_name": "RalfJ",
        "timestamp": 1550757758
    },
    {
        "content": "<p>I must be doing something wrong if I invoke complicated thoughts involving garbage collection of timestamps, but I have no idea what it is I am doing wrong...</p>",
        "id": 159069502,
        "sender_full_name": "RalfJ",
        "timestamp": 1550757812
    },
    {
        "content": "<blockquote>\n<p>and the next not-yet-used (as in handed out) timestamp must be stored somewhere</p>\n</blockquote>\n<p>Ah, so this is stored there after it is handed out and before it is used? I guess what I'm missing is, why not just create a new time stamp when you need it, as in, why does it need to create it before, and store it there, and then fetch it from there?</p>",
        "id": 159069939,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550758163
    },
    {
        "content": "<p>it needs to know which IDs are already used and which aren't?</p>",
        "id": 159069955,
        "sender_full_name": "RalfJ",
        "timestamp": 1550758190
    },
    {
        "content": "<p>and it should not have to scan <em>all memory</em> for that</p>",
        "id": 159069962,
        "sender_full_name": "RalfJ",
        "timestamp": 1550758200
    },
    {
        "content": "<p>this is a standard data structure: a thing that, every time you ask it, gives you a new never-before-seen ID</p>",
        "id": 159070022,
        "sender_full_name": "RalfJ",
        "timestamp": 1550758215
    },
    {
        "content": "<p>I even have the code for that in <a href=\"https://github.com/RalfJung/unsafe-code-guidelines/blob/stacked-borrows/wip/stacked-borrows.md#generating-timestampts\" target=\"_blank\" title=\"https://github.com/RalfJung/unsafe-code-guidelines/blob/stacked-borrows/wip/stacked-borrows.md#generating-timestampts\">https://github.com/RalfJung/unsafe-code-guidelines/blob/stacked-borrows/wip/stacked-borrows.md#generating-timestampts</a></p>",
        "id": 159070040,
        "sender_full_name": "RalfJ",
        "timestamp": 1550758240
    },
    {
        "content": "<p>ah duh, the clock is the timestamp counter</p>",
        "id": 159070206,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550758388
    },
    {
        "content": "<p>nvm, I don't know why unused confused me, I probably wasn't seen that part below in the diff</p>",
        "id": 159070322,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550758481
    }
]