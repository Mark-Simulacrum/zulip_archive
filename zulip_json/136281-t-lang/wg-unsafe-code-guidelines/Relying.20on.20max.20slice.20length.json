[
    {
        "content": "<p>Is the max u8 slice/array length of <code>isize::MAX</code> part of the specification of the language (though I know a spec doesn't really exist), or is it just an implementation detail?</p>\n<p>Asking because have a PR in which I sum the lengths of two slices, and there was a concern about overflow. I'm wondering if I can definitively say that overflow won't happen.</p>",
        "id": 220034883,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1608062941
    },
    {
        "content": "<p>well even without spec support, there is an architectural limit, at least on 64 bit architectures</p>",
        "id": 220035730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608063331
    },
    {
        "content": "<p>The <code>isize::MAX</code> bound is mentioned in the rust reference <a href=\"https://doc.rust-lang.org/reference/types/numeric.html\">here</a>, which is the closest thing we currently have to a spec</p>",
        "id": 220036570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608063680
    },
    {
        "content": "<p>AFAIU array indexing is compiled to get-pointer-inbounds on LLVM, and this uses signed indexes and is UB on overflow, so it's not possible to compile larger indexing operations</p>",
        "id": 220036791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608063773
    },
    {
        "content": "<p><code>This ensures that isize ... can address every byte within an object along with one byte past the end.</code></p>\n<p>Yeah, I think that's probably definitive enough. Thanks <span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span></p>",
        "id": 220036845,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1608063810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306073\">Tyson Nottingham</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Relying.20on.20max.20slice.20length/near/220034883\">said</a>:</p>\n<blockquote>\n<p>Is the max u8 slice/array length of <code>isize::MAX</code> part of the specification of the language (though I know a spec doesn't really exist), or is it just an implementation detail?</p>\n<p>Asking because have a PR in which I sum the lengths of two slices, and there was a concern about overflow. I'm wondering if I can definitively say that overflow won't happen.</p>\n</blockquote>\n<p>It's in the safety section for <code>from_raw_parts</code>, so...<br>\n<a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html#safety\">https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html#safety</a></p>",
        "id": 220037420,
        "sender_full_name": "scottmcm",
        "timestamp": 1608064062
    },
    {
        "content": "<p>(I wish we had a type for it, like we do with NonNull, though)</p>",
        "id": 220044361,
        "sender_full_name": "scottmcm",
        "timestamp": 1608067384
    },
    {
        "content": "<p>You mean like <code>u63</code>?</p>",
        "id": 220051356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608070867
    },
    {
        "content": "<p>glibc also refuses to allocate more than <code>PTRDIFF_MAX</code>, since 2.30</p>",
        "id": 220052034,
        "sender_full_name": "cuviper",
        "timestamp": 1608071248
    },
    {
        "content": "<p>maybe you could still <code>mmap</code> a huge size</p>",
        "id": 220052060,
        "sender_full_name": "cuviper",
        "timestamp": 1608071268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306073\">@Tyson Nottingham</span> I am inclined to answer \"no\" until the lang-team explicitly FCP's this.</p>",
        "id": 220092250,
        "sender_full_name": "RalfJ",
        "timestamp": 1608110085
    },
    {
        "content": "<p>All <em>currently existing</em> u8 slices (<code>&amp;[u8]</code>, not <code>*const [u8]</code>) will have a max length of <code>isize::MAX</code>. But there is no promise being made that this will remain true in the future.</p>",
        "id": 220092296,
        "sender_full_name": "RalfJ",
        "timestamp": 1608110121
    },
    {
        "content": "<p>The docs just say that <code>isize::MAX</code> slices can be created (that falls out of backwards compatibility), but that's not an \"if-and-only-if\" statement.</p>",
        "id": 220092386,
        "sender_full_name": "RalfJ",
        "timestamp": 1608110166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , thanks. It's easy enough to avoid the overflow in my case, though there's a slight effect on perf.</p>\n<p>It may be worth auditing the std lib if a decision is made to make the maximum larger than <code>isize::MAX</code>. The overflow case I was referring to above is actually a pre-existing issue in <code>BufWriter</code>. It might be that other code is relying on the current slice maximums (and probably some that isn't paying attention to overflow at all).</p>",
        "id": 220171107,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1608151830
    }
]