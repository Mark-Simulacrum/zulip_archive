[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Field.20access.20wrap.20around.20possible.3F.20(offset_from.20safety.20reqs)/near/228736203\">said</a>:</p>\n<blockquote>\n<p>also, I dont know what you mean by \"safe macro\", there is no such thing as \"(un)safe macros\"</p>\n</blockquote>\n<p>I thought some more about that -- there's indeed no \"safe\" or \"unsafe\" macros, unlike \"safe\" or \"unsafe\" <code>fn</code>, but I'm stuck in two questions:</p>\n<ul>\n<li>Is it right that macros can't be \"safe\" or \"unsafe\", so it also can't be \"sound\" or \"unsound\"? Also, the Unsafe Code Guidelines Glossary <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library\">says</a> \"soundness\" is a type system concept, but I think macros in Rust aren't part of the type system, therefore calling a macro \"sound\" or \"unsound\" makes no sense?</li>\n<li>OTOH, \"unsound\" in Rust means the ability to cause UB without (other) unsafe code, but is <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=69b3863fd3f61338eca35367133ab313\">code that invokes a macro that expands to unsafe code</a> considered \"safe\"? (It <em>looks</em> safe, though.)</li>\n</ul>\n<p>That said, even macros can't be \"unsafe\", I'd still like to classify macros as \"safe\" or \"unsafe\", based on whether they can be invoked in a safe context or not, and I prefer not to make \"safe\" macros in both public and private API be able to cause UB without other unsafe code (but indeed this is not always possible, especially for macros that expand to items).</p>",
        "id": 228823417,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614881925
    },
    {
        "content": "<p>a macro is effectively unsafe if it expands to something that requires an unsafe block.</p>",
        "id": 228825718,
        "sender_full_name": "Lokathor",
        "timestamp": 1614882711
    },
    {
        "content": "<p>you don't need to tag it as such in the declaration, the person will get an appropriate error at the usage site anyway</p>",
        "id": 228825876,
        "sender_full_name": "Lokathor",
        "timestamp": 1614882768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/.22Safety.22.20of.20macros/near/228825718\">said</a>:</p>\n<blockquote>\n<p>a macro is effectively unsafe if it expands to something that requires an unsafe block.</p>\n</blockquote>\n<p>I'd call that \"emulating unsafe\", but yes, it's \"effectively unsafe\" (and I sometimes call it \"unsafe\" directly...).</p>",
        "id": 228826502,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614883016
    },
    {
        "content": "<p>Also that is inconsistent with \"<a href=\"https://github.com/rust-lang/rust/issues/71668\">unsafe blocks in unsafe fn</a>\" (edit: which <span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> probably dislikes, according to the GitHub conversations of the RFC PR -- sorry!), but there's no <em>tagged</em> unsafe macros, so I don't know how to do that better.</p>",
        "id": 228826788,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614883143
    },
    {
        "content": "<p>And to be honest I don't like this \"emulating unsafe\" solution very much, but there's no better solution.</p>",
        "id": 228831722,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614884923
    },
    {
        "content": "<p>Hmm, one could make an \"unsafe macro\" at least for expressions by having the first thing it does be to call <code>unsafe fn you_must_be_in_an_unsafe_block_to_call_this_macro() {}</code>...</p>",
        "id": 228832019,
        "sender_full_name": "scottmcm",
        "timestamp": 1614885024
    },
    {
        "content": "<p>I'm not sure what's \"emulating\" about it. Could you say more there? you really need a real unsafe block around it, which seems sufficiently real to me.</p>",
        "id": 228847276,
        "sender_full_name": "Lokathor",
        "timestamp": 1614890715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/.22Safety.22.20of.20macros/near/228847276\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what's \"emulating\" about it. Could you say more there? you really need a real unsafe block around it, which seems sufficiently real to me.</p>\n</blockquote>\n<p>I'm just getting the feeling that the macro just expands to a set of tokens, that when used in expression positions in safe contexts, would trigger the \"unsafe block required\" error.<br>\nAlso, when reading or writing the macro, I can only tell whether the macro is \"unsafe\" or not by imagining how it expands.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/.22Safety.22.20of.20macros/near/228823417\">said</a>:</p>\n<blockquote>\n<p>is <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=69b3863fd3f61338eca35367133ab313\">code that invokes a macro that expands to unsafe code</a> considered \"safe\"?</p>\n</blockquote>\n<p>Just as a note, although that's a playground link, the macro doesn't expand to unsafe code in the playground, probably because the playground does not enable the <code>unstable_const</code> crate feature of <code>memoffset</code>. However, I can confirm that the same code compiles without warning with the feature turned on, and the macro expands an <code>unsafe {}</code>.</p>",
        "id": 228904750,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614926162
    },
    {
        "content": "<p>You are correct that the macro just expands from some AST input to some other AST output. So, depending on the input, the output might or might not be unsafe (if you, for example, pass in the name of a function to call as part of the output, if you name an unsafe function the output becomes unsafe suddenly).</p>\n<p>I'm not sure I'd put up memoffset as being the best example of anything in particular, considering <a href=\"https://github.com/Gilnaa/memoffset/issues/24\">this open issue from 2019</a> about how the crate is unsound.</p>\n<p>Though note that any other crate on the playground which depends on <code>memoffset</code> could be enabling the <code>unstable_const</code> feature somewhere.</p>",
        "id": 228905231,
        "sender_full_name": "Lokathor",
        "timestamp": 1614926623
    },
    {
        "content": "<p>I'd say that any macro which contains an <code>unsafe { }</code> block around some expression or block is morally the same as a function that internally uses unsafe. If the macro is using unsafe correctly for all possible inputs then it's sound, otherwise it's unsound.</p>",
        "id": 228905336,
        "sender_full_name": "Lokathor",
        "timestamp": 1614926706
    },
    {
        "content": "<blockquote>\n<p>I'm not sure I'd put up memoffset as being the best example of anything in particular,</p>\n</blockquote>\n<p>That example comes from the previous <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Field.20access.20wrap.20around.20possible.3F.20%28offset_from.20safety.20reqs%29/near/228735710\">discussion</a>, I just didn't want to write a new one. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<blockquote>\n<p>considering <a href=\"https://github.com/Gilnaa/memoffset/issues/24\">this open issue from 2019</a> about how the crate is unsound.</p>\n</blockquote>\n<p>IIUC fortunately that's going to be fixed --  <code>raw_ref_macros</code> <a href=\"https://github.com/rust-lang/rust/pull/80886\">has been stabilized</a>.</p>",
        "id": 228905896,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614927130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/.22Safety.22.20of.20macros/near/228905336\">said</a>:</p>\n<blockquote>\n<p>I'd say that any macro which contains an <code>unsafe { }</code> block around some expression or block is morally the same as a function that internally uses unsafe. If the macro is using unsafe correctly for all possible inputs then it's sound, otherwise it's unsound.</p>\n</blockquote>\n<p>Thanks for your reply! I also would like to consider it \"morally\", but I still want to know how it's considered \"precisely\", and whether other people consider it \"morally\" or not.</p>",
        "id": 228907085,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614928171
    },
    {
        "content": "<p>precisely there is no definition</p>",
        "id": 228907297,
        "sender_full_name": "Lokathor",
        "timestamp": 1614928313
    },
    {
        "content": "<p>I think this is a good question, but also an open one: when is a macro safe and/or sound? It has come up in several discussions before:<br>\n<a href=\"https://internals.rust-lang.org/t/hidden-unsafe-due-to-unintentionally-abusable-macros-and-include/14107\">https://internals.rust-lang.org/t/hidden-unsafe-due-to-unintentionally-abusable-macros-and-include/14107</a><br>\nand a somewhat heated discussion at <a href=\"https://github.com/RustSec/advisory-db/issues/275\">https://github.com/RustSec/advisory-db/issues/275</a></p>",
        "id": 228916307,
        "sender_full_name": "RalfJ",
        "timestamp": 1614934165
    },
    {
        "content": "<p>I created an issue for this: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/278\">https://github.com/rust-lang/unsafe-code-guidelines/issues/278</a></p>",
        "id": 228917210,
        "sender_full_name": "RalfJ",
        "timestamp": 1614934308
    }
]