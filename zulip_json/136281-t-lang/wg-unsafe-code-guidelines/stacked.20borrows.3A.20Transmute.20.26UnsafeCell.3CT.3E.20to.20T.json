[
    {
        "content": "<p>Stacked Borrows currently declares a transmute from <code>&amp;UnsafeCell&lt;T&gt;</code> to <code>&amp;T</code> illegal. You have to transmute to a raw pointer, and then <code>&amp;*</code> that. The reason is that an <code>&amp;T</code> expects the location to be frozen <em>since it was created</em>, and since you transmuted it's still the same pointer, so the time of creation is when you created that <code>&amp;UnsafeCell&lt;T&gt;</code> -- but at that point, the location was not frozen. If, instead, you go through a raw pointer (<code>&amp;*(UnsafeCell&lt;T&gt; as *const UnsafeCell&lt;T&gt; as *const T)</code>), you create a <em>new</em> shared reference and hence the model only expects things to be frozen since then, which they are.<br>\nThis was actually violated in <code>UnsafeCell::get</code>, but only because <code>&amp;x.field as *const _</code>, where <code>x: &amp;UnsafeCell&lt;T&gt;</code>, creates an intermdiate <code>&amp;T</code> (which it will no more with <a href=\"https://github.com/rust-lang/rfcs/pull/2582\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2582\">https://github.com/rust-lang/rfcs/pull/2582</a>). However, it is also violated <a href=\"https://github.com/carllerche/bytes/blob/456221d16521cf54cea0e6569669e47120a1b738/src/bytes.rs#L2441\" target=\"_blank\" title=\"https://github.com/carllerche/bytes/blob/456221d16521cf54cea0e6569669e47120a1b738/src/bytes.rs#L2441\">in the bytes crate</a>, which just blatantly transmutes an <code>&amp;AtomicPtr</code> to an <code>&amp;u8</code>.</p>",
        "id": 147873498,
        "sender_full_name": "RalfJ",
        "timestamp": 1542452038
    },
    {
        "content": "<p>Also see <a href=\"https://github.com/carllerche/bytes/pull/233\" target=\"_blank\" title=\"https://github.com/carllerche/bytes/pull/233\">https://github.com/carllerche/bytes/pull/233</a></p>",
        "id": 147875054,
        "sender_full_name": "RalfJ",
        "timestamp": 1542455218
    }
]