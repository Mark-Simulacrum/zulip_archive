[
    {
        "content": "<p>Here is a fun case study:<a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.make_ascii_uppercase\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/primitive.str.html#method.make_ascii_uppercase\">https://doc.rust-lang.org/std/primitive.str.html#method.make_ascii_uppercase</a></p>",
        "id": 147640893,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162048
    },
    {
        "content": "<p>clicking <code>[src]</code> reveals:</p>",
        "id": 147640902,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162068
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    pub fn make_ascii_uppercase(&amp;mut self) {\n        let me = unsafe { self.as_bytes_mut() };\n        me.make_ascii_uppercase()\n    }\n</pre></div>",
        "id": 147640905,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162082
    },
    {
        "content": "<p>challenge: provide an safe API that accomplishes the <code>unsafe { self.as_bytes_mut() };</code> here, but requires no other changes!</p>",
        "id": 147640961,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162142
    },
    {
        "content": "<p>potential inspiration: <a href=\"https://www.reddit.com/r/rust/comments/9wcujb/mutguard_run_code_every_time_data_is_mutably/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/9wcujb/mutguard_run_code_every_time_data_is_mutably/\">https://www.reddit.com/r/rust/comments/9wcujb/mutguard_run_code_every_time_data_is_mutably/</a></p>",
        "id": 147640973,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162189
    },
    {
        "content": "<p>I am wondering about abstractions that temporarily allow data to enter an unsafe state (the <code>String</code> UTF-8 invariant seems like something of an unusual case for <code>unsafe</code>)</p>",
        "id": 147641049,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162321
    },
    {
        "content": "<p>not sure that's actually a good idea</p>",
        "id": 147641057,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162344
    },
    {
        "content": "<p>it would require an unwind safe invariant check and cleanup strategy that's guaranteed to run 100% of the time barring other unsafe interactions, I think</p>",
        "id": 147641116,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162383
    },
    {
        "content": "<p>you could imagine a \"safe\" <code>MutGuard</code> permitting <code>as_bytes_mut</code>-style access to the interior of a string that, upon detecting the mutated contents of a string are not valid UTF-8, would e.g. clear the string or otherwise return it to a valid UTF-8 state, and then panic</p>",
        "id": 147641158,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162468
    },
    {
        "content": "<p>the risk to me is that <code>String</code> crossing something like an unwind boundary, getting mutated, and somehow the <code>MutGuard</code> doesn't run and its contents are now no longer valid UTF-8</p>",
        "id": 147641232,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162567
    },
    {
        "content": "<p>at the very least the <code>MutGuard</code> needs to <code>catch_unwind</code> when exposing the mutable byte slice interior</p>",
        "id": 147641286,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162607
    },
    {
        "content": "<p>I'll say right away a leaky \"safe\" abstraction is probably worse than just using <code>unsafe</code></p>",
        "id": 147641312,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162683
    },
    {
        "content": "<p>so the question is can there be a non-leaky <code>MutGuard</code> for enforcing something like the UTF-8 invariant on <code>String</code> interiors</p>",
        "id": 147641321,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542162716
    },
    {
        "content": "<p>Yeah this is just the thread-scoped problem. Make the user execute inside a closure so you can construct MutGuard without ever giving it to the user, so you can be sure it doesn't get leaked.</p>",
        "id": 147643112,
        "sender_full_name": "Gankra",
        "timestamp": 1542165586
    },
    {
        "content": "<p>I describe the exact problem here: <a href=\"https://doc.rust-lang.org/nightly/nomicon/leaking.html#threadscopedjoinguard\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nomicon/leaking.html#threadscopedjoinguard\">https://doc.rust-lang.org/nightly/nomicon/leaking.html#threadscopedjoinguard</a></p>",
        "id": 147643569,
        "sender_full_name": "Gankra",
        "timestamp": 1542166437
    },
    {
        "content": "<p>and you can see the fix here: <a href=\"https://docs.rs/crossbeam/0.3.0/crossbeam/struct.Scope.html#examples\" target=\"_blank\" title=\"https://docs.rs/crossbeam/0.3.0/crossbeam/struct.Scope.html#examples\">https://docs.rs/crossbeam/0.3.0/crossbeam/struct.Scope.html#examples</a></p>",
        "id": 147643613,
        "sender_full_name": "Gankra",
        "timestamp": 1542166470
    },
    {
        "content": "<p>remark that crossbeam::scope requires you to run inside a closure. this is because it basically creates a Vec&lt;JoinGuard&gt; that you can't touch. the <code>scope</code> argument your closure gets is basically <code>&amp;mut Vec&lt;JoinGuard&gt;</code> wrapped up so you can only push</p>",
        "id": 147643668,
        "sender_full_name": "Gankra",
        "timestamp": 1542166596
    },
    {
        "content": "<p>fun reading there <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span></p>",
        "id": 147645756,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542170265
    },
    {
        "content": "<p>I've lately been thinking about this problem</p>",
        "id": 147699573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542229850
    },
    {
        "content": "<p>e.g., there is an unsafe composition danger even in the closure solution</p>",
        "id": 147699581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542229855
    },
    {
        "content": "<p>described in <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/10/02/observational-equivalence-and-unsafe-code/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2016/10/02/observational-equivalence-and-unsafe-code/\">this blog post of mine on Observational Equivalence</a></p>",
        "id": 147699605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542229886
    },
    {
        "content": "<p>the tl;dr is that a coroutine library could 'leak' your stack frames</p>",
        "id": 147699614,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542229895
    },
    {
        "content": "<p>so basically rayon + crossbeam are relying on stack frames being destructed</p>",
        "id": 147699627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542229912
    },
    {
        "content": "<p>this is kind of the same problem as the <code>&amp;mut</code> borrow problem that I talk about in <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/11/10/after-nll-moving-from-borrowed-data-and-the-sentinel-pattern/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2018/11/10/after-nll-moving-from-borrowed-data-and-the-sentinel-pattern/\">my most recent blog post on the sentinel pattern</a></p>",
        "id": 147699692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542229946
    },
    {
        "content": "<p>in particular, if you were to allow a move out from an <code>&amp;mut</code>,</p>",
        "id": 147699699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542229956
    },
    {
        "content": "<p>the danger is that -- in the event of panic -- that <code>&amp;mut</code> may be referencing some value V where the owner will either:</p>\n<ul>\n<li>observe it during unwinding (via a <code>Drop</code> impl)</li>\n<li>outlive the unwind (because of <code>catch_panic</code>, a mutex, etc)</li>\n</ul>",
        "id": 147699740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542230008
    },
    {
        "content": "<p>the goal with the <code>take_mut</code> crate is to make those things impossible</p>",
        "id": 147699749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542230018
    },
    {
        "content": "<p>but it's again assuming some kind of \"absolute owner\" -- the process</p>",
        "id": 147699756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542230024
    },
    {
        "content": "<p>I think the debate about whether one could reasonably have an <code>&amp;mut</code> that references things outside the process basically comes down to the same question in a way: how \"high up\" in the ownership hierarchy can we reasonable assert control from inside our rust program?</p>",
        "id": 147699838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542230071
    },
    {
        "content": "<p>in short, if you want to ensure that some event X occurs, you need to have some kind of \"ownership\" over the \"lifecycle\" of all the things that lead up to X</p>",
        "id": 147699869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542230119
    },
    {
        "content": "<p>anyway, I'm not 100% sure where these thoughts are going, but there is something tantalizing there</p>",
        "id": 147699883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542230145
    },
    {
        "content": "<p>yeah, wasn't actually recommending the closure solution, just wondering if it could be done in a non-leaky way. and it sounds like that isn't the case</p>",
        "id": 147707505,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1542237889
    },
    {
        "content": "<blockquote>\n<p>but it's again assuming some kind of \"absolute owner\" -- the process</p>\n</blockquote>\n<p>Very losely related: We currently actually have a safe function (on unix) that makes it pretty much impossible to use even ownership (not to speak of borrows) for things outside the current process: Thanks to <code>before_exec</code>, we have <code>fork</code> in safe code. See <a href=\"https://github.com/rust-lang/rust/issues/39575\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/39575\">#39575</a>.</p>",
        "id": 147726224,
        "sender_full_name": "RalfJ",
        "timestamp": 1542267638
    },
    {
        "content": "<p>I am trying to convince alex to make it <code>unsafe</code>, so far unsuccessfully^^</p>",
        "id": 147726239,
        "sender_full_name": "RalfJ",
        "timestamp": 1542267692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> interesting. Ugh.</p>",
        "id": 147757574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542302275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> seems like we should open some kind of issue about this in the UCG repository — I feel like this topic of \"cross-process ownership and references\" is worth talking out</p>",
        "id": 147757938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542302587
    },
    {
        "content": "<p>thoughts?</p>",
        "id": 147757942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542302595
    },
    {
        "content": "<p>Sure. I explained my position in that issue already (maybe a bit too vehemently^^)</p>",
        "id": 147758296,
        "sender_full_name": "RalfJ",
        "timestamp": 1542302912
    },
    {
        "content": "<blockquote>\n<p>cross-process ownership and references</p>\n</blockquote>\n<p>Sounds relevant to the <code>mmap</code> family of things, as well.</p>",
        "id": 147791800,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542337345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> mmap very bluntly says \"this is unsafe, it can't be made safe\" and leaves it at that</p>",
        "id": 147816191,
        "sender_full_name": "Gankra",
        "timestamp": 1542374583
    },
    {
        "content": "<p>because anyone can truncate the file being pointed into, and there's literally no non-racey way to detect it</p>",
        "id": 147816222,
        "sender_full_name": "Gankra",
        "timestamp": 1542374627
    },
    {
        "content": "<p>right, which is why \"cross-process ownership\" seemed relevant, but perhaps it's still too broad</p>",
        "id": 147819847,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542378526
    }
]