[
    {
        "content": "<p>The bitvec crate does some weird things so that the BitSlice type can work. Specifically, <code>&amp;BitSlice&lt;...&gt;</code> ends up being (transparent wrapper around a) <code>&amp;[()]</code>, except both the length and pointer parts store specially encoded values (See BitPtr in <a href=\"https://github.com/myrrlyn/bitvec/blob/master/src/pointer.rs\" target=\"_blank\" title=\"https://github.com/myrrlyn/bitvec/blob/master/src/pointer.rs\">https://github.com/myrrlyn/bitvec/blob/master/src/pointer.rs</a> for how it's encoded, but the type in question is BitSlice in <a href=\"https://github.com/myrrlyn/bitvec/blob/master/src/slice.rs\" target=\"_blank\" title=\"https://github.com/myrrlyn/bitvec/blob/master/src/slice.rs\">https://github.com/myrrlyn/bitvec/blob/master/src/slice.rs</a>).</p>\n<p>I would have thought this was unsound, but I can't actually think of a reason why. It's still nonnull, it respects alignment requirements (since <code>()</code> is 1-byte aligned), and since it's a ZST, the reference wouldn't be dereferencable to LLVM (and IDK if that attribute even gets applied to slice pointers).</p>\n<p>So... I <em>think</em> this boils down to: \"does &amp;[()] have validity requirements beyond 'the pointer part can't be null'?\".</p>",
        "id": 185228222,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1578587065
    },
    {
        "content": "<p>Currently <code>std::mem::size_of::&lt;&amp;[()]&gt;()</code> returns 16 on x86_64</p>",
        "id": 185232262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589235
    },
    {
        "content": "<p>AFAICT we can optimize that to <code>8</code></p>",
        "id": 185232291,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589252
    },
    {
        "content": "<p>(e.g. make <code>&amp;[ZST]</code> store a <code>usize</code> only)</p>",
        "id": 185232320,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589269
    },
    {
        "content": "<p>Right now  the proposed layout for fat pointers in the UCGs does not allow that</p>",
        "id": 185232496,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589354
    },
    {
        "content": "<p>But right now the layout of <code>&amp;T</code> is unspecified, so we could still change that</p>",
        "id": 185232534,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589375
    },
    {
        "content": "<p>The validity of <code>&amp;[T]</code> is also not written down anywhere yet</p>",
        "id": 185232564,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589392
    },
    {
        "content": "<p>The pointer needs to be nonnull, aligned, and dereferenceable</p>",
        "id": 185232598,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589410
    },
    {
        "content": "<p>but for <code>&amp;[()]</code> all pointers except for <code>ptr::null()</code> satisfy that</p>",
        "id": 185232626,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589427
    },
    {
        "content": "<p>since the alignment of <code>()</code> is <code>1</code>, and the slice occupies 0 bytes independently of its size, so the requirement is essentially <code>dereferenceable(0)</code>, which as long as the pointer is not null, is a condition that's satisfied</p>",
        "id": 185232762,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589470
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/224\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/224\">ucg#224</a> to track the optimization</p>",
        "id": 185233091,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578589673
    },
    {
        "content": "<blockquote>\n<p>but for <code>&amp;[()]</code> all pointers except for <code>ptr::null()</code> satisfy that</p>\n</blockquote>\n<p>I almost agree... one class of pointers that might not satisfy this is \"dangling pointers LLVM knows\" -- as in, dangling pointers into or derived from LLVM-controlled allocations. LLVM's spec is not clear enough to tell whether that is legal or not, and my attempt at asking them didnt work out (I think they failed to entirely understand where I was coming from -- it's a subtle question, and I have a hard time phrasing it well)</p>",
        "id": 185691250,
        "sender_full_name": "RalfJ",
        "timestamp": 1579089992
    },
    {
        "content": "<p>so, I wouldnt subscribe to the following code being allowed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">zst_slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[()]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185691284,
        "sender_full_name": "RalfJ",
        "timestamp": 1579090047
    },
    {
        "content": "<p>LLVM might be or become \"smart enough\" to deduce that this pointer cannot possibly be dereferencable</p>",
        "id": 185691344,
        "sender_full_name": "RalfJ",
        "timestamp": 1579090084
    },
    {
        "content": "<p>hmm</p>",
        "id": 185696389,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094486
    },
    {
        "content": "<p>isn't this already the case ?</p>",
        "id": 185696398,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094495
    },
    {
        "content": "<p>That last pointer is \"dereferenceable for 0 bytes\"</p>",
        "id": 185696411,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094509
    },
    {
        "content": "<p>The trouble is that the lifetime of the allocation the pointer was derived from has ended</p>",
        "id": 185696484,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094564
    },
    {
        "content": "<p>Do we generate ptr reads/writes of zero-size in LLVM-Ir for pointers to ZSTs ?</p>",
        "id": 185696516,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094608
    },
    {
        "content": "<p>(no we don't)</p>",
        "id": 185696733,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094765
    },
    {
        "content": "<blockquote>\n<p>That last pointer is \"dereferenceable for 0 bytes\"</p>\n</blockquote>\n<p>you mean <code>zst_slice</code> in my example? I'd say it is <em>not</em> dereferencable for 0 bytes. At least not until we get explicit confirmation from LLVM that it is.</p>",
        "id": 185714073,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105313
    },
    {
        "content": "<p>I would not be surprised at all if some LLVM dev went \"after <code>free</code>ing an allocation, no ptr derived from that allocation can be dereferencable, and hence I can do X\"</p>",
        "id": 185714194,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105367
    }
]