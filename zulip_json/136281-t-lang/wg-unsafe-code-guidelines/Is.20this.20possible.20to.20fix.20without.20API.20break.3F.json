[
    {
        "content": "<p>This code is unsound: <a href=\"https://github.com/sile/libflate/blob/cbf1289f967c8fdff3b8ff3e06256ff7b62cc914/src/gzip.rs#L1122\" target=\"_blank\" title=\"https://github.com/sile/libflate/blob/cbf1289f967c8fdff3b8ff3e06256ff7b62cc914/src/gzip.rs#L1122\">https://github.com/sile/libflate/blob/cbf1289f967c8fdff3b8ff3e06256ff7b62cc914/src/gzip.rs#L1122</a><br>\nIf a panic occurs before <code>mem::forget()</code> is reached, <code>drop()</code>is called on uninitialized data of arbitrary type. I've been trying to come up with a way to fix this, but to no avail. Is this fixable without breaking the API? And how does one rewrite something like that in safe Rust?</p>",
        "id": 169239411,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561738852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> from a superficial glance, looks like a case for this crate? <a href=\"https://crates.io/crates/take_mut\" target=\"_blank\" title=\"https://crates.io/crates/take_mut\">https://crates.io/crates/take_mut</a></p>",
        "id": 169240616,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739749
    },
    {
        "content": "<p>I've also seen proposals to add such functionality to libstd</p>",
        "id": 169240669,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739764
    },
    {
        "content": "<p>Take <code>&amp;mut</code>? Is that even legal?</p>",
        "id": 169240680,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561739784
    },
    {
        "content": "<p>replacing with <code>mem::uninitialized</code>.... <em>shivers</em></p>",
        "id": 169240683,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739789
    },
    {
        "content": "<blockquote>\n<p>Take <code>&amp;mut</code>? Is that even legal?</p>\n</blockquote>\n<p>what that crate does is considered to be legal, AFAIK. I have even proven it correct, but in a simplified model of Rust that does not have panics, so that proof only tells half the story.</p>",
        "id": 169240710,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739820
    },
    {
        "content": "<p>Good enough for me. Thanks a lot!</p>",
        "id": 169240742,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561739859
    },
    {
        "content": "<p>notice that this turns panics into aborts</p>",
        "id": 169240865,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739927
    },
    {
        "content": "<p><a href=\"https://docs.rs/take_mut/0.2.2/take_mut/fn.take.html\" target=\"_blank\" title=\"https://docs.rs/take_mut/0.2.2/take_mut/fn.take.html\">https://docs.rs/take_mut/0.2.2/take_mut/fn.take.html</a></p>",
        "id": 169240883,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739943
    },
    {
        "content": "<p>Oh, so the proof under a model without panics actually applies for the most part. Neat!</p>",
        "id": 169240999,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561740061
    },
    {
        "content": "<p>This is one of the cases I'd like to have an effect/restriction system for \"provably cannot panic\"</p>",
        "id": 169241731,
        "sender_full_name": "centril",
        "timestamp": 1561740650
    },
    {
        "content": "<p>yeah that would be useful here. still seems too niche though to warrant the global cost of such an effect system.</p>",
        "id": 169242034,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740883
    },
    {
        "content": "<p><a href=\"https://github.com/viperproject/prusti-dev\" target=\"_blank\" title=\"https://github.com/viperproject/prusti-dev\">https://github.com/viperproject/prusti-dev</a> can prove it for you</p>",
        "id": 169242063,
        "sender_full_name": "Shnatsel",
        "timestamp": 1561740911
    },
    {
        "content": "<p>that's safe-code-only though</p>",
        "id": 169242074,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740924
    },
    {
        "content": "<p>and a very limited but growing subset. but one day hopefully it can :)</p>",
        "id": 169242083,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740935
    },
    {
        "content": "<p>I think the global cost of an effect system gets amortized by the number of effects/restrictions (const, panic, async, ...)</p>",
        "id": 169242327,
        "sender_full_name": "centril",
        "timestamp": 1561741136
    },
    {
        "content": "<p>but... it's nice to know that something cannot panic purely as a sanity check rather than for soundness purposes</p>",
        "id": 169242349,
        "sender_full_name": "centril",
        "timestamp": 1561741160
    },
    {
        "content": "<p>There are so many weird effects, that I'm not sure we will ever get an effect system</p>",
        "id": 169245504,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561743250
    },
    {
        "content": "<p>also the current situation where some effects are on by default while some are off is weird to handle generically</p>",
        "id": 169245614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561743360
    },
    {
        "content": "<p>and we have compiler flags that turn effects on/off globally</p>",
        "id": 169245669,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561743384
    }
]