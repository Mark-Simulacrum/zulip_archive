[
    {
        "content": "<p>I came across this code in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"k\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>According to the issue, that code has UB due to \"surrounding\" element access.<br>\nAs the <code>pointer::add</code> documentation states \"consider using <code>wrapping_add</code> instead if these constraints are difficult to satisfy\", and the <code>wrapping_add</code> documentation says \"if you need to cross object boundaries, cast the pointer to an integer and do the arithmetic there\", I tried if doing some pointer-integer casts helps:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"k\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Unfortunately Miri still didn't like that:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: Undefined Behavior: no item granting read access to tag &lt;untagged&gt; at alloc1386+0x1 found in borrow stack.\n --&gt; src/main.rs:4:25\n  |\n4 |     let _val = unsafe { *((ptr as usize + 1) as *const u8) };\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item granting read access to tag &lt;untagged&gt; at alloc1386+0x1 found in borrow stack.\n  |\n  = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n  = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n</code></pre></div>\n<p>Therefore I must either misunderstood what \"crossing object boundaries\" is or some of the Stacked Borrows rule can't be \"relaxed\" by \"casting the pointer to an integer and do the arithmetic there\" (or I \"casted the pointer to an integer\" wrongly, if I have some silly mistakes in the code).</p>\n<p>Could someone explain what I am missing? Any help would be appreciate!</p>",
        "id": 229108933,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615046925
    },
    {
        "content": "<p>i think this is one of those things where it's illegal under stacked borrows but still works in practice under llvm.</p>\n<p>what should work for both is <code>val.as_ptr().add(1)</code></p>",
        "id": 229109093,
        "sender_full_name": "Lokathor",
        "timestamp": 1615047035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> how about the whole thing with integers with provenance ?</p>",
        "id": 229109242,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615047146
    },
    {
        "content": "<p>unfortunately I'm on phone and don't recall all the different ways things can go wrong and why... but i do remember that using as_ptr is the fix.</p>\n<p>the reason is that as_ptr does the conversion in this specific order:<br>\n&amp;[T] // provenance to the whole span<br>\n*const [T] // still the whole span<br>\n*const T // head of the span</p>",
        "id": 229109397,
        "sender_full_name": "Lokathor",
        "timestamp": 1615047298
    },
    {
        "content": "<p>Yeah, as_ptr should be okay, I was talking about the ptr to integer to pointer thingy</p>",
        "id": 229109533,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615047411
    },
    {
        "content": "<p>Yes. What confused me here is casting the pointer to integer doesn't seem to \"lose\" the provenance.</p>",
        "id": 229109616,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615047486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229109616\">said</a>:</p>\n<blockquote>\n<p>Yes. What confused me here is casting the pointer to integer doesn't seem to \"lose\" the provenance.</p>\n</blockquote>\n<p>why should it, though? that is not the intention of ptr-int-casts</p>",
        "id": 229110000,
        "sender_full_name": "RalfJ",
        "timestamp": 1615047843
    },
    {
        "content": "<p>ideally, if you cast a ptr to an int and back, you'll get the same provenance as what you started with. we cannot always do that since ints cannot carry provenance, but we can at least ensure that you cannot use this to access bytes <em>that never had a pointer to them cast to an int</em>.<br>\nIf you could do that, we'd throw all these nice aliasing-based optimizations out the window.</p>",
        "id": 229110043,
        "sender_full_name": "RalfJ",
        "timestamp": 1615047902
    },
    {
        "content": "<p>Weird that the docs suggest that</p>",
        "id": 229110068,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615047927
    },
    {
        "content": "<p>yeah the docs shouldn't suggest something that nearly-never works (in the \"no, that's UB\" sense)</p>",
        "id": 229110791,
        "sender_full_name": "Lokathor",
        "timestamp": 1615048578
    },
    {
        "content": "<p>Oh that's what you mean... hm</p>",
        "id": 229111083,
        "sender_full_name": "RalfJ",
        "timestamp": 1615048829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229110000\">said</a>:</p>\n<blockquote>\n<p>why should it, though? that is not the intention of ptr-int-casts</p>\n</blockquote>\n<p>As what <span class=\"user-mention silent\" data-user-id=\"267734\">Thales Fragoso</span> and <span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span>  said, at least the documentation suggest me to do that... and the discussion in <a href=\"https://github.com/rust-lang/rust/issues/56698\">#56698</a> seems saying that casting the pointer to integer can \"lose\" the provenance, too... unless some words are overloaded and I didn't get them right. (Clarification appreciate!)</p>",
        "id": 229111108,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615048858
    },
    {
        "content": "<p>part of the problem is that \"is the arithmetic allowed\" and \"is using the resulting pointer allowed\" are two very different questions (but most people don't know that)</p>",
        "id": 229111132,
        "sender_full_name": "RalfJ",
        "timestamp": 1615048869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229111108\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229110000\">said</a>:</p>\n<blockquote>\n<p>why should it, though? that is not the intention of ptr-int-casts</p>\n</blockquote>\n<p>As what <span class=\"user-mention silent\" data-user-id=\"267734\">Thales Fragoso</span> and <span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span>  said, at least the documentation suggest me to do that... and the discussion in <a href=\"https://github.com/rust-lang/rust/issues/56698\">#56698</a> seems saying that casting the pointer to integer can \"lose\" the provenance, too... unless some words are overloaded and I didn't get them right. (Clarification appreciate!)</p>\n</blockquote>\n<p>it <em>can</em> lose provenance, but that doesnt mean that it always will</p>",
        "id": 229111151,
        "sender_full_name": "RalfJ",
        "timestamp": 1615048892
    },
    {
        "content": "<p>it will only lose provenance when that's unavoidable, but generally everything attempts as much as it can to preserve provenance</p>",
        "id": 229111223,
        "sender_full_name": "RalfJ",
        "timestamp": 1615048930
    },
    {
        "content": "<p>But doesn't wrapping_add always allow arithmetic ? Why would it mention integer conversion ?</p>",
        "id": 229111242,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615048942
    },
    {
        "content": "<p>in cases where the other object you are moving to has had ptrs cast to integers, you can do cross-obj arithmetic via integers but not via <code>wrapping_add</code>.</p>",
        "id": 229111316,
        "sender_full_name": "RalfJ",
        "timestamp": 1615049023
    },
    {
        "content": "<p>wrapping_add just places an <em>additional</em> constraint that you must stay within the same object, and that constraint can be avoided by using integers</p>",
        "id": 229111375,
        "sender_full_name": "RalfJ",
        "timestamp": 1615049050
    },
    {
        "content": "<p>however, to actually be able to access something, there are more things you need to consider (and wrapping_offset seems like the wrong place to discuss them)</p>",
        "id": 229111397,
        "sender_full_name": "RalfJ",
        "timestamp": 1615049078
    },
    {
        "content": "<p>in particular, to access something with a ptr cast from an int, that something must have previously had a ptr cast <em>to</em> an int and that ptr must still have the permission to access this data</p>",
        "id": 229111429,
        "sender_full_name": "RalfJ",
        "timestamp": 1615049109
    },
    {
        "content": "<p>The suggestion still seems a bit off putting</p>",
        "id": 229111441,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615049118
    },
    {
        "content": "<p>It doesn't really specify the cases</p>",
        "id": 229111456,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615049139
    },
    {
        "content": "<p>fair. but entirely removing it also doesn't seem right (see the comments in <a href=\"https://github.com/rust-lang/rust/issues/56698\">#56698</a>)</p>",
        "id": 229111460,
        "sender_full_name": "RalfJ",
        "timestamp": 1615049144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229111429\">said</a>:</p>\n<blockquote>\n<p>in particular, to access something with a ptr cast from an int, that something must have previously had a ptr cast <em>to</em> an int and that ptr must still have the permission to access this data</p>\n</blockquote>\n<p>That seems as unfortunate as removing that suggestion. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 229111822,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615049442
    },
    {
        "content": "<p>you mean you'd prefer the semantics to work differently? again, then we'd be throwing basically all of alias analysis out of the window</p>",
        "id": 229111856,
        "sender_full_name": "RalfJ",
        "timestamp": 1615049492
    },
    {
        "content": "<p>this is the price we have to pay if we dont want to fall waaay behind safe languages (without notable unsafe fragments) in terms of optimizations</p>",
        "id": 229111864,
        "sender_full_name": "RalfJ",
        "timestamp": 1615049516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229111856\">said</a>:</p>\n<blockquote>\n<p>you mean you'd prefer the semantics to work differently? again, then we'd be throwing basically all of alias analysis out of the window</p>\n</blockquote>\n<p>Not really... I think I need to consider carefully to decide how \"unfortunate\" it is. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 229112216,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615049831
    },
    {
        "content": "<p>Meanwhile, it's certainly welcome suggestions for how to improve the docs :)</p>",
        "id": 229113121,
        "sender_full_name": "RalfJ",
        "timestamp": 1615050597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229113121\">said</a>:</p>\n<blockquote>\n<p>Meanwhile, it's certainly welcome suggestions for how to improve the docs :)</p>\n</blockquote>\n<p>I think it should at least explain \"to access something with a ptr cast from an int, that something must have previously had a ptr cast to an int and that ptr must still have the permission to access this data\".</p>",
        "id": 229113228,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615050673
    },
    {
        "content": "<p>but why would wrapping_offset be the place to explain that? that's now int-ptr-casts work in general, independent of any arithmetic</p>",
        "id": 229113265,
        "sender_full_name": "RalfJ",
        "timestamp": 1615050710
    },
    {
        "content": "<p>(this is also true in C/C++ btw, though the standard is not precise enough to say what the granularity is -- at least some ptr into an allocation must have been cast to an int to allow accessing any part of the allocation with a ptr cast from an int; depending on how precisely you read the object model, there might be further restrictions)</p>",
        "id": 229113340,
        "sender_full_name": "RalfJ",
        "timestamp": 1615050739
    },
    {
        "content": "<p>If it's no place to explain ptr to int casts, why suggest it without further info in the first case ?</p>",
        "id": 229113602,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615050979
    },
    {
        "content": "<p>either wrapping_offset should say the extra rule about ptr/int mechanics OR it shouldn't suggest trying to bypass limits using int math, but saying \"use int math\" and then not adding \"also if you do remember this rule\" is just very bad.</p>",
        "id": 229114130,
        "sender_full_name": "Lokathor",
        "timestamp": 1615051480
    },
    {
        "content": "<p>you can't assume people read every bit of documentation everywhere, <em>most</em> rules should appear in more than one place.</p>",
        "id": 229114177,
        "sender_full_name": "Lokathor",
        "timestamp": 1615051556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229113265\">said</a>:</p>\n<blockquote>\n<p>but why would wrapping_offset be the place to explain that? that's now int-ptr-casts work in general, independent of any arithmetic</p>\n</blockquote>\n<p>Because the <code>wrapping_(add|sub|offset)</code> documentation suggests to do such casts.</p>\n<p>With regard to the C/C++ part, as Rust is more relaxed / very different in some places for optimizations comparing to C/C++, someone (like me) could (foolishly <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span>) assume that if the documentation does not say so, such requirement does not apply to Rust.</p>",
        "id": 229114217,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615051565
    },
    {
        "content": "<p>But I think if such rules are explained elsewhere, and if there's a <em>link</em> to them in the documentation of <code>wrapping_(add|sub|offset)</code>, it's also acceptable.</p>",
        "id": 229115413,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615052713
    },
    {
        "content": "<p>Unfortunately, the exact rules for int-ptr-casts are not even know.n :/  Precisely specifying a memory model such as Rusts is really tricky, and so far no proposal exists that fits all the constraints wrt. what code people want to write and what optimizations compilers want to do.<br>\n(That is also true for C/C++ but their specs fail to acknowledge these gaps.)</p>",
        "id": 229119453,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056240
    },
    {
        "content": "<p>So, we're basically building on quicksand and making things up as we go.^^ Ideally we'd simply forbid int-ptr-casts until they were actually understood, but, well, I doubt I would get very far with that proposal. ;)</p>",
        "id": 229119516,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056270
    },
    {
        "content": "<p>Yeah, you still need MMIO</p>",
        "id": 229119634,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1615056376
    },
    {
        "content": "<p>So, meanwhile, I have no idea what the best course is in terms of documentation. I want to avoid making promises that cannot be held once we actually figure out a proper spec.</p>",
        "id": 229119638,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056377
    },
    {
        "content": "<p>if everyone agrees that that sentence is better removed from the docs, then I wont block that.</p>",
        "id": 229119714,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056453
    },
    {
        "content": "<p>However, while I agree with many of the points that were raised here, I really dont understand how one could imagine that this sentence applies to your example, <span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span>. You dont even have multiple allocations (\"allocated objects\") there, you are doing arithmetic within one allocation.</p>",
        "id": 229119793,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056511
    },
    {
        "content": "<p>So there is some other misunderstanding here about what an \"allocated object\" is. The docs say</p>\n<blockquote>\n<p>Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</p>\n</blockquote>",
        "id": 229119859,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056582
    },
    {
        "content": "<p>I originally wanted this to just say \"allocation\" but some people didnt like this term because they thought it would mean <em>heap</em> allocation</p>",
        "id": 229119878,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056602
    },
    {
        "content": "<p>I think one thing we need here is a place to define terms such as \"allocated object\", that we can link to here. The UCG has a glossary but thats much less official. libstd doesnt have a glossary.</p>",
        "id": 229119960,
        "sender_full_name": "RalfJ",
        "timestamp": 1615056649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229119793\">said</a>:</p>\n<blockquote>\n<p>However, while I agree with many of the points that were raised here, I really dont understand how one could imagine that this sentence applies to your example, <span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span>. You dont even have multiple allocations (\"allocated objects\") there, you are doing arithmetic within one allocation.</p>\n</blockquote>\n<p>Oh... However, that means the documentation is more misleading/incomplete, it makes me feel even <code>add</code> or <code>wrapping_add</code> is sufficient. The <code># Safety</code> section does not mention the restriction <em>at all</em>.</p>\n<p>Now I understand why you feel explaining the restriction in the documentation of <code>wrapping_*</code> is not suitable.</p>",
        "id": 229120604,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615057267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229108933\">said</a>:</p>\n<blockquote>\n<p>Therefore I must either misunderstood what \"crossing object boundaries\" is or some of the Stacked Borrows rule can't be \"relaxed\" by \"casting the pointer to an integer and do the arithmetic there\"</p>\n</blockquote>\n<p>Sounds like I misunderstood <em>both</em>... thanks for explanation!</p>",
        "id": 229121085,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615057715
    },
    {
        "content": "<p>yeah... provenance is a restriction that applies to <em>all</em> pointer operations, both the explicit ones (<code>wrapping_add</code> etc) and the implicit ones (<code>&amp;(*x).field</code> etc). also, it is indeed basically undocumented, since Rust has not yet committed to a memory model.</p>",
        "id": 229121167,
        "sender_full_name": "RalfJ",
        "timestamp": 1615057784
    },
    {
        "content": "<p>ideally <code>wrapping_add</code> could simply say that the resulting ptr has the same provenance as the input, and that would be sufficient ;) (this is indeed fully defining its semantics)</p>",
        "id": 229121257,
        "sender_full_name": "RalfJ",
        "timestamp": 1615057844
    },
    {
        "content": "<p>but so far we avoided talking about provenance in any concrete terms. I am not sure we even have lang-team consensus that provenance the way I imagine it is a thing (I know some lang-team members question the necessity).</p>",
        "id": 229121311,
        "sender_full_name": "RalfJ",
        "timestamp": 1615057913
    },
    {
        "content": "<p>I guess there are some things we can say for sure even if we dont know the final model yet, but it'd be a lot of work to get these vetted by the lang team one by one and there'd be very justified concerns about where this is all going and whether we might be drawing ourselves into the wrong corner</p>",
        "id": 229121433,
        "sender_full_name": "RalfJ",
        "timestamp": 1615058005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229119859\">said</a>:</p>\n<blockquote>\n<p>So there is some other misunderstanding here about what an \"allocated object\" is. The docs say</p>\n<blockquote>\n<p>Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</p>\n</blockquote>\n</blockquote>\n<p>I guess some examples in the documentation could be helpful. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 229122408,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615058909
    },
    {
        "content": "<p>I'll make a note to add a definition of \"allocated object\" somewhere and link to it from these offsetting operations.</p>",
        "id": 229130379,
        "sender_full_name": "RalfJ",
        "timestamp": 1615065899
    },
    {
        "content": "<p>But that won't help for the other sentence, the once that recommends using int arithmetic. As that old PR shows, you are not the first to be tripped by it.</p>",
        "id": 229130417,
        "sender_full_name": "RalfJ",
        "timestamp": 1615065934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Casting.20pointer.20to.20integer.20still.20triggers.20UB/near/229130379\">said</a>:</p>\n<blockquote>\n<p>I'll make a note to add a definition of \"allocated object\" somewhere and link to it from these offsetting operations.</p>\n</blockquote>\n<p>I finally got around to doing this: <a href=\"https://github.com/rust-lang/rust/pull/83579\">https://github.com/rust-lang/rust/pull/83579</a></p>",
        "id": 232108878,
        "sender_full_name": "RalfJ",
        "timestamp": 1616870020
    }
]