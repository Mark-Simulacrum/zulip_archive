[
    {
        "content": "<p>Hello, while doing some API to access a DMA peripheral, I noticed a theoretical problem that could be caused by constant propagation, in my case it's solved by a pointer escape, but that doesn't seem to be a guarantee that the language gives.</p>\n<p>See some code examples here:<br>\n<a href=\"https://godbolt.org/z/7Y96Ks\">https://godbolt.org/z/7Y96Ks</a></p>\n<p>If I can't rely on that, how can we rely on FFI to work ? That seems to be the same thing that would avoid constant propagation through FFI boundaries.</p>",
        "id": 203771634,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594674529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267734\">@Thales Fragoso</span> could you explain what happens there to someone who cannot read assembly?</p>",
        "id": 203805290,
        "sender_full_name": "RalfJ",
        "timestamp": 1594711315
    },
    {
        "content": "<p>I see that uncommenting the <code>write_volatile</code> line changes stuff on the right but I cannot really tell what that means</p>",
        "id": 203805349,
        "sender_full_name": "RalfJ",
        "timestamp": 1594711360
    },
    {
        "content": "<p>looks like the <code>write_volatile</code> is being reordered before <code>Descriptor</code> is stored to the stack</p>",
        "id": 203806491,
        "sender_full_name": "comex",
        "timestamp": 1594712612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267734\">@Thales Fragoso</span> this is the same in C: see <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Volatiles.html\">https://gcc.gnu.org/onlinedocs/gcc/Volatiles.html</a> \"Accesses to non-volatile objects are not ordered with respect to volatile accesses. \"</p>",
        "id": 203806514,
        "sender_full_name": "comex",
        "timestamp": 1594712641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267734\">@Thales Fragoso</span> you probably want a <code>compiler_fence</code>: <a href=\"https://doc.rust-lang.org/nightly/std/sync/atomic/fn.compiler_fence.html\">https://doc.rust-lang.org/nightly/std/sync/atomic/fn.compiler_fence.html</a></p>",
        "id": 203806603,
        "sender_full_name": "comex",
        "timestamp": 1594712718
    },
    {
        "content": "<p>at least, that will prevent the optimization in question.  however, depending on your target device, you may actually need a hardware memory barrier instruction (<code>dmb</code>) ...</p>",
        "id": 203806791,
        "sender_full_name": "comex",
        "timestamp": 1594712959
    },
    {
        "content": "<p>in that case, you can use this: <a href=\"https://doc.rust-lang.org/nightly/core/arch/arm/fn.__dmb.html\">https://doc.rust-lang.org/nightly/core/arch/arm/fn.__dmb.html</a></p>",
        "id": 203807048,
        "sender_full_name": "comex",
        "timestamp": 1594713206
    },
    {
        "content": "<p>actually, on some devices you may even need to flush the cache; it depends</p>",
        "id": 203807202,
        "sender_full_name": "comex",
        "timestamp": 1594713355
    },
    {
        "content": "<p>yeah when doing emssage-passing between different threads / devices, I'd always expect the need for some kind of fence</p>",
        "id": 203807300,
        "sender_full_name": "RalfJ",
        "timestamp": 1594713434
    },
    {
        "content": "<p>there should probably be a warning about this in the documentation for <code>write_volatile</code></p>",
        "id": 203807380,
        "sender_full_name": "comex",
        "timestamp": 1594713484
    },
    {
        "content": "<p>that warning should probably be written by someone who knows volatile stuff better than I do :)</p>",
        "id": 203807409,
        "sender_full_name": "RalfJ",
        "timestamp": 1594713531
    },
    {
        "content": "<p>do you want to prepare a PR? I can help reviewing</p>",
        "id": 203807436,
        "sender_full_name": "RalfJ",
        "timestamp": 1594713559
    },
    {
        "content": "<p>sure, why not</p>",
        "id": 203807566,
        "sender_full_name": "comex",
        "timestamp": 1594713614
    },
    {
        "content": "<p>I'll do it tomorrow</p>",
        "id": 203807609,
        "sender_full_name": "comex",
        "timestamp": 1594713636
    },
    {
        "content": "<p>thanks :)</p>",
        "id": 203807680,
        "sender_full_name": "RalfJ",
        "timestamp": 1594713695
    },
    {
        "content": "<p>(I still think the documentation shouldn't claim that data races with volatile accesses are undefined behavior, but IIRC that discussion ended with some vague plan to replace volatile with architecture-specific intrinsics, which never happened…)</p>",
        "id": 203808004,
        "sender_full_name": "comex",
        "timestamp": 1594713947
    },
    {
        "content": "<p>well, it should still happen, if only as a way to deprecate volatile accesses of struct types, which are totally unspecified and useless</p>",
        "id": 203808167,
        "sender_full_name": "comex",
        "timestamp": 1594714066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198590\">comex</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Can.20I.20rely.20on.20pointer.20escape.2Fcapture.20.3F/near/203808004\">said</a>:</p>\n<blockquote>\n<p>(I still think the documentation shouldn't claim that data races with volatile accesses are undefined behavior, but IIRC that discussion ended with some vague plan to replace volatile with architecture-specific intrinsics, which never happened…)</p>\n</blockquote>\n<p>In C/C++ they are UB, and we haven't been able to convince the LLVM devs to document anything stronger. So I think our hands are tied here.</p>",
        "id": 203816031,
        "sender_full_name": "RalfJ",
        "timestamp": 1594720729
    },
    {
        "content": "<p>We specifically asked them if they could commit to a volatile load not ever returning <code>undef</code> (a sensible guarantee IMO and also taking care of read-write races the LLVM way), and they said no.</p>",
        "id": 203816083,
        "sender_full_name": "RalfJ",
        "timestamp": 1594720793
    },
    {
        "content": "<p>(see <a href=\"https://bugs.llvm.org/show_bug.cgi?id=42435\">https://bugs.llvm.org/show_bug.cgi?id=42435</a>)</p>",
        "id": 203816205,
        "sender_full_name": "RalfJ",
        "timestamp": 1594720888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what I'm trying to do is prevent the compiler compiler from eliding the load in the <code>let b =</code></p>",
        "id": 203819817,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594724049
    },
    {
        "content": "<p>Because the DMA changed the buffer but the compiler doesn't know, but when a pointer to that buffer escapes (plus fence) then it won't elide the <code>ldr</code></p>",
        "id": 203819974,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594724168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> I don't need that particular <code>write_volatile</code> to be before pushing the values of the descriptor onto the stack, I just needed it to be in place just before enabling the DMA, see the fences in <code>start_and_wait_dma</code></p>",
        "id": 203820138,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594724319
    },
    {
        "content": "<p>I'm aware of reordering non volatile operations w.r.t volatiles and in this particular case I don't need a dmb, because cortex-m3</p>",
        "id": 203820191,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594724385
    },
    {
        "content": "<p>Also, <code>atomic::fence</code> (not compiler_fence) does generate a <code>dmb</code> so there is no need to use the intrinsics  directly</p>",
        "id": 203820328,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594724491
    },
    {
        "content": "<p>And I also agree that data races (even with volatiles) are UB</p>",
        "id": 203820567,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594724686
    },
    {
        "content": "<p>I dont know much about volatile, but with atomics you definitely have to put the fence between the non-atomic write and the release write</p>",
        "id": 203820868,
        "sender_full_name": "RalfJ",
        "timestamp": 1594724956
    },
    {
        "content": "<p>so here that would be before the <code>write_volatile</code></p>",
        "id": 203820887,
        "sender_full_name": "RalfJ",
        "timestamp": 1594724966
    },
    {
        "content": "<p>otherwise whoever reads from that <code>write_volatile</code> is not guaranteed to actually see your data writes</p>",
        "id": 203820911,
        "sender_full_name": "RalfJ",
        "timestamp": 1594724991
    },
    {
        "content": "<p>IOW, the other side <em>could</em> do the read between the <code>write_volatile</code> and the fence</p>",
        "id": 203820987,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725023
    },
    {
        "content": "<p>It won't read before I enable it in dma_start, which has a fence before enabling</p>",
        "id": 203820988,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725023
    },
    {
        "content": "<p>there's nothing happening in <code>dma_start_and_wait</code> other than fences?</p>",
        "id": 203821018,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725047
    },
    {
        "content": "<p>so there's no way for the compiler to know that there is any communication there</p>",
        "id": 203821030,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725066
    },
    {
        "content": "<p>Heh, the comments should be changed to the correct registers accesses</p>",
        "id": 203821037,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725077
    },
    {
        "content": "<p>It's just an example</p>",
        "id": 203821044,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725084
    },
    {
        "content": "<p>a fence on its own doesnt sync, only fences appropriately \"paired with\" accesses do</p>",
        "id": 203821054,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725093
    },
    {
        "content": "<p>I know, there will be an access there, but in this case it isn't the thing I'm focussing</p>",
        "id": 203821129,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725127
    },
    {
        "content": "<p>not sure if that makes a difference, but the code you posted there is just UB if <code>dma_buffer</code> is mutated</p>",
        "id": 203821140,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725143
    },
    {
        "content": "<p>Hmm, it's mutated by the DMA, why the UB ?</p>",
        "id": 203821167,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725175
    },
    {
        "content": "<p>well again I can only speak for release/acquire concurrency, which I actually understand, unlike volatile semantics</p>",
        "id": 203821189,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725206
    },
    {
        "content": "<p>a release fence doesnt do anything, a release fence followed by a relaxed write does. there is no atomic access after the release fence so the fence is a NOP.</p>",
        "id": 203821220,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725239
    },
    {
        "content": "<p>All the mutation will happen in that start_and_wait</p>",
        "id": 203821221,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725241
    },
    {
        "content": "<p>but it doesnt, and the compiler is allowed to inline that function and see that it just has 2 fences</p>",
        "id": 203821268,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725258
    },
    {
        "content": "<p>fences that have no chance of \"pairing up\" with anything</p>",
        "id": 203821284,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725280
    },
    {
        "content": "<p>and thus are inconsequential</p>",
        "id": 203821289,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725283
    },
    {
        "content": "<p>Sorry, I should have put the write (volatile) to the dma enabling register there</p>",
        "id": 203821306,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725302
    },
    {
        "content": "<p>But it this case it doesn't make a difference because why I trying to exemplify is the eliding or not eliding of the ldr in <code>let b =</code></p>",
        "id": 203821391,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725364
    },
    {
        "content": "<p>sure but the code between the \"release write\" and the <code>let</code> matters for that</p>",
        "id": 203821403,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725384
    },
    {
        "content": "<p>every bit of code there can make a huge difference</p>",
        "id": 203821412,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725397
    },
    {
        "content": "<p>not sure why you say it wouldnt^^ maybe the compiler isnt smart enough, but that's all</p>",
        "id": 203821432,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725424
    },
    {
        "content": "<p>it is suspicious though that the double-indirection makes a difference, this makes it smell like an LLVM bug to me. but again volatile semantics are tricky... this would be easier for me to analyze if we replaced them by atomics.</p>",
        "id": 203821479,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725475
    },
    {
        "content": "<p>Hmm, I on the phone now and godbolt doesn't play along with it, but you can change those two comments in dma_start_wait to</p>\n<div class=\"codehilite\"><pre><span></span><code>write_volatile(0x40000004, 1);\nwhile read_volatile(0x40000008) == 1 {}\n</code></pre></div>",
        "id": 203821542,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725507
    },
    {
        "content": "<p>I don't think the dissasemble will change because of that, I mean, it will do the write and read, but the ldr thing will remain the same</p>",
        "id": 203821573,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725547
    },
    {
        "content": "<p>I assume these are <code>u32</code> pointers?</p>",
        "id": 203821586,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725570
    },
    {
        "content": "<p>so much code, no idea what to look for^^ <a href=\"https://godbolt.org/z/rP1KeK\">https://godbolt.org/z/rP1KeK</a></p>",
        "id": 203821654,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725616
    },
    {
        "content": "<p>Oh yeah, sorry, forgot the as *mut u32</p>",
        "id": 203821678,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725639
    },
    {
        "content": "<p>and I mean, <code>dma_with_descriptors</code> does have an <code>ldr</code> in your original code (after adding the volatile write), so I am not sure I even understand the problem</p>",
        "id": 203821687,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725650
    },
    {
        "content": "<p>You mean uncommenting the volatile write ?</p>",
        "id": 203821711,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725680
    },
    {
        "content": "<p>yeah</p>",
        "id": 203821719,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725688
    },
    {
        "content": "<p>that's your actual code, right? not sure why it is commented in your snippet</p>",
        "id": 203821733,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725700
    },
    {
        "content": "<p>when it is commented of course the compiler optimizes the heck out of this^^</p>",
        "id": 203821749,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725714
    },
    {
        "content": "<p>This is what I'm saying, what happens in that volatile write is that the pointer escapes</p>",
        "id": 203821752,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725719
    },
    {
        "content": "<p>What I want to know is if rust considers this a thing</p>",
        "id": 203821798,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725741
    },
    {
        "content": "<p>no it doesn't</p>",
        "id": 203821809,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725752
    },
    {
        "content": "<p>but writing a pointer to memory is a legal way to communicate that memory to another thread (when synchrinization is done properly)</p>",
        "id": 203821841,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725790
    },
    {
        "content": "<p><a href=\"https://jonasdevlieghere.com/escape-analysis-capture-tracking-in-llvm/\">https://jonasdevlieghere.com/escape-analysis-capture-tracking-in-llvm/</a></p>",
        "id": 203821857,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725805
    },
    {
        "content": "<p>the \"pointer escaping\" thing is just a consequence of the spec, not a part of the spec</p>",
        "id": 203821860,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725809
    },
    {
        "content": "<p>I thought you said that in <code>dma_with_descriptors</code> it didnt work properly, incorrectly eliding the load, because the ptr was not escaped? did I misunderstand?</p>",
        "id": 203821935,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725844
    },
    {
        "content": "<p>keep in mind that I cannot read assembly, so as such your problem statement is still not clear to me^^</p>",
        "id": 203821960,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725867
    },
    {
        "content": "<p>just that it is about eliding the load under some circumstances, not sure which</p>",
        "id": 203821983,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725889
    },
    {
        "content": "<p>It does escape if you uncomment the write_volatile, I just left it commented so people could see the escape in action on the assembly heh</p>",
        "id": 203822003,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725907
    },
    {
        "content": "<p>but then what is the bug? is there no bug? I am confused^^</p>",
        "id": 203822027,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725930
    },
    {
        "content": "<p>I thought the compiler didnt do what you wanted it to do unless you explicitly escaped the pointer, or so</p>",
        "id": 203822049,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725956
    },
    {
        "content": "<p>There is no bug, hah, I wanted to know (vide the name of the topic) if I can rely on that</p>",
        "id": 203822095,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594725974
    },
    {
        "content": "<p>but it looks like the compiler actually does what you want it do do, you just want to know why?</p>",
        "id": 203822104,
        "sender_full_name": "RalfJ",
        "timestamp": 1594725981
    },
    {
        "content": "<p>I wanted to know this</p>\n<blockquote>\n<p>but writing a pointer to memory is a legal way to communicate that memory to another thread (when synchrinization is done properly)</p>\n</blockquote>",
        "id": 203822132,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726010
    },
    {
        "content": "<p>well so \"pointer escape\" is not part of the spec so not <em>directly</em> something you can rely on</p>",
        "id": 203822140,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726018
    },
    {
        "content": "<p>That what you wrote is my understanding of pointer escape</p>",
        "id": 203822161,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726036
    },
    {
        "content": "<p>I.e. some other thread might have it</p>",
        "id": 203822174,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726050
    },
    {
        "content": "<p>but the compiler may only perform transformations that <em>do not change program behavior</em>, and crucially (since we are only seeing part of the program), behavior must not change <em>with any possible \"context\"</em>, where \"context\" means \"the rest of the program/system\", i.e. all the other code this interacts with</p>",
        "id": 203822197,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726080
    },
    {
        "content": "<p>so if there is another thread that you can run in parallel to this one, and if that thread could in a UB-free way obtain the <code>dma_buffer</code> address and change its contents before it gets read again by the main thread, then the possibility of that thread existing is something the compiler has to take into account</p>",
        "id": 203822270,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726129
    },
    {
        "content": "<p>and from that one can then derive a notion of \"escaped pointer\"</p>",
        "id": 203822279,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726142
    },
    {
        "content": "<p>So the language/compiler has the notion of an escaped pointer, right ?</p>",
        "id": 203822394,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726210
    },
    {
        "content": "<p>I think your original code actually didnt make this possible in a ub-free way; the compiler considered the ptr \"escaped\" but that was a conservative analysis and a smarter compiler could have elided the load</p>",
        "id": 203822405,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726222
    },
    {
        "content": "<p>without the loop waiting for \"DMA completed\", if the other thread did a write, there would be a data race when you read <code>dma_buffer</code></p>",
        "id": 203822421,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726243
    },
    {
        "content": "<p>so in that sense \"the ptr escaped\" is not all you need to consider here</p>",
        "id": 203822454,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726284
    },
    {
        "content": "<p>even if the ptr escaped, UB-free mutation could be impossible</p>",
        "id": 203822459,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726292
    },
    {
        "content": "<p>Yeah, I should have put the code in the dma function, I just didn't because it didnt make a difference w.r.t. code generation of what I was focussing</p>",
        "id": 203822526,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267734\">Thales Fragoso</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Can.20I.20rely.20on.20pointer.20escape.2Fcapture.20.3F/near/203822394\">said</a>:</p>\n<blockquote>\n<p>So the language/compiler has the notion of an escaped pointer, right ?</p>\n</blockquote>\n<p>I think it is possible to define such a notion, but I am not familiar with how. more interesting though is the question of what the notion is useful for.</p>",
        "id": 203822559,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726360
    },
    {
        "content": "<p>\"the ptr did not escape\" is a useful notion as it certainly makes ub-free communication impossible</p>",
        "id": 203822576,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726377
    },
    {
        "content": "<p>but \"the ptr escaped\" doesnt imply anything useful, as far as I can tell</p>",
        "id": 203822586,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726386
    },
    {
        "content": "<p>and your original code IMO is an example for that -- the ptr did escape but the load could still have been elided as there was no synchronization for communicating the mutation back to your code</p>",
        "id": 203822677,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726447
    },
    {
        "content": "<p>ultimately the only thing you can rely on is that the compiler will not change program behavior when your program is run together with any possible context <em>in a ub-free way</em></p>",
        "id": 203822722,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726499
    },
    {
        "content": "<p>Well, the acquire should do the synchronization</p>",
        "id": 203822739,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726511
    },
    {
        "content": "<p>no an acquire fence alone doesnt do anything</p>",
        "id": 203822748,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726522
    },
    {
        "content": "<p>only a relaxed (or stronger) load followed by an acquire fence does anything</p>",
        "id": 203822757,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726532
    },
    {
        "content": "<p>Well, there is a load before the fence, but It should be in the function, I know</p>",
        "id": 203822823,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726574
    },
    {
        "content": "<p>I know it is very common to think of fences as \"blocking reordering\", but that is not their specification</p>",
        "id": 203822824,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267734\">Thales Fragoso</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Can.20I.20rely.20on.20pointer.20escape.2Fcapture.20.3F/near/203822823\">said</a>:</p>\n<blockquote>\n<p>Well, there is a load before the fence, but I should be in the function, I know</p>\n</blockquote>\n<p>oh you mean with the <code>read_volatile</code> loop? then yes</p>",
        "id": 203822858,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726611
    },
    {
        "content": "<p>I was referring to your original code without that loop</p>",
        "id": 203822860,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726620
    },
    {
        "content": "<p>For now on, could you consider that the code I pasted up there is in the godbolt code ?</p>",
        "id": 203822861,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726621
    },
    {
        "content": "<p>Do you still see an UB with that ?</p>",
        "id": 203822875,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726641
    },
    {
        "content": "<p>yes the final code with the <code>0x40000004</code>/<code>0x40000008</code> accesses is fine</p>",
        "id": 203822882,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726651
    },
    {
        "content": "<p>as that enables ub-free communication both ways</p>",
        "id": 203822887,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726659
    },
    {
        "content": "<p>(it is fine for atomics; volatile is weird but hopefully works similarly enough^^)</p>",
        "id": 203822953,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726708
    },
    {
        "content": "<p>And I can rely that the compiler won't optimize the <code>ldr</code> because I wrote the  pointer to a place in memory that other thread might have access to (escaped ptr), right ?</p>",
        "id": 203822980,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726743
    },
    {
        "content": "<p>(Together with the synchronization to enable UB-free concurrency)</p>",
        "id": 203823079,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267734\">Thales Fragoso</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Can.20I.20rely.20on.20pointer.20escape.2Fcapture.20.3F/near/203822980\">said</a>:</p>\n<blockquote>\n<p>And I can rely that the compiler won't optimize the <code>ldr</code> because I wrote the  pointer to a place in memory that other thread might have access to (escaped ptr), right ?</p>\n</blockquote>\n<p>might have access to <em>and might legally mutate</em> (this is where the <code>while volatile_read</code> becomes crucial)</p>",
        "id": 203823223,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726931
    },
    {
        "content": "<p>yes</p>",
        "id": 203823230,
        "sender_full_name": "RalfJ",
        "timestamp": 1594726936
    },
    {
        "content": "<p>Great, thanks Ralf</p>",
        "id": 203823265,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594726965
    },
    {
        "content": "<p>At some point i might also have to step through the construction of my own DMA routine XD</p>",
        "id": 203844331,
        "sender_full_name": "Lokathor",
        "timestamp": 1594739108
    },
    {
        "content": "<p>this long thread makes me nervous about it for sure</p>",
        "id": 203844384,
        "sender_full_name": "Lokathor",
        "timestamp": 1594739139
    },
    {
        "content": "<p>There are some good points about it on the embedonomicon, although there is a part that is wrong</p>",
        "id": 203844556,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594739211
    },
    {
        "content": "<p>When it talks about Pin</p>",
        "id": 203844579,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594739224
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-embedded/embedonomicon/issues/64\">https://github.com/rust-embedded/embedonomicon/issues/64</a></p>",
        "id": 203844666,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594739277
    },
    {
        "content": "<p>in my case the DMA generally overrides the CPU, not runs alongside it, so it becomes much less complicated</p>",
        "id": 203846573,
        "sender_full_name": "Lokathor",
        "timestamp": 1594740118
    },
    {
        "content": "<p>You need to think of the DMA engine as a separate thread. The pointer is not escaping, instead you are sending the pointer to the DMA engine thread. This means that you need a release fence between filling your buffer and sending a pointer to it to the DMA engine. Similarly you need an acquire fence after receiving a completion from the DMA engine before you can reuse the buffer or read back data from the buffer.</p>",
        "id": 203865971,
        "sender_full_name": "Amanieu",
        "timestamp": 1594749596
    },
    {
        "content": "<p>what if the system doesn't have atomic operations</p>",
        "id": 203866624,
        "sender_full_name": "Lokathor",
        "timestamp": 1594749922
    },
    {
        "content": "<p>further, what if the CPU is halted while the DMA runs (which i know is uncommon,  but that is how it works in my case)</p>",
        "id": 203866963,
        "sender_full_name": "Lokathor",
        "timestamp": 1594750114
    },
    {
        "content": "<p>You still need a compiler fence at the very least.</p>",
        "id": 203867049,
        "sender_full_name": "Amanieu",
        "timestamp": 1594750175
    },
    {
        "content": "<p>fair</p>",
        "id": 203867078,
        "sender_full_name": "Lokathor",
        "timestamp": 1594750193
    },
    {
        "content": "<p>Whether an actual fence instruction is needed is hardware dependent.</p>",
        "id": 203867148,
        "sender_full_name": "Amanieu",
        "timestamp": 1594750203
    },
    {
        "content": "<p>I do not believe that ARMv4T has fencing instructions when there is no co-processor</p>",
        "id": 203867280,
        "sender_full_name": "Lokathor",
        "timestamp": 1594750288
    },
    {
        "content": "<p>It doesn't. Native fence instructions were introduced in ARMv6, before that they were available through CP15.</p>",
        "id": 203867561,
        "sender_full_name": "Amanieu",
        "timestamp": 1594750427
    },
    {
        "content": "<blockquote>\n<p>This means that you need a release fence between filling your buffer and sending a pointer to it to the DMA engine.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <br>\nCan the release fence be before starting the DMA engine but after sending the address ?</p>",
        "id": 203870862,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594752027
    },
    {
        "content": "<p>Because we already need a fence there</p>",
        "id": 203870911,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594752057
    },
    {
        "content": "<blockquote>\n<p>You need to think of the DMA engine as a separate thread. The pointer is not escaping, instead you are sending the pointer to the DMA engine thread.</p>\n</blockquote>\n<p>Also, what is the difference between pointer escape and sending it to an (unknown) thread ?</p>",
        "id": 203871075,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594752137
    },
    {
        "content": "<p>I'd have to check your exact code to be sure.</p>",
        "id": 203872649,
        "sender_full_name": "Amanieu",
        "timestamp": 1594753033
    },
    {
        "content": "<p>I suggest reading this article which explains acquire and release fences.</p>",
        "id": 203872765,
        "sender_full_name": "Amanieu",
        "timestamp": 1594753087
    },
    {
        "content": "<p><a href=\"https://preshing.com/20130922/acquire-and-release-fences/\">https://preshing.com/20130922/acquire-and-release-fences/</a></p>",
        "id": 203872775,
        "sender_full_name": "Amanieu",
        "timestamp": 1594753091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <br>\n<a href=\"https://github.com/thalesfragoso/stm32-eth/blob/fences/src/tx.rs#L187-L215\">https://github.com/thalesfragoso/stm32-eth/blob/fences/src/tx.rs#L187-L215</a></p>",
        "id": 203873132,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594753294
    },
    {
        "content": "<p>One example, the idea is that the writes just need to be done right before enabling the DMA</p>",
        "id": 203873232,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594753336
    },
    {
        "content": "<p>But I'm asking that now because of what you wrote up there about sending the address to the other thread, I guess you said we need a release before sending the address because our read/writes to the buffer could be reordered to after sending the address and that way we would race if the thread is active</p>",
        "id": 203873468,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594753464
    },
    {
        "content": "<p>But in our case the thread is inactive when we send the address, and we have a release fence before activating it</p>",
        "id": 203873528,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594753489
    },
    {
        "content": "<p>That's fine then.</p>",
        "id": 203873946,
        "sender_full_name": "Amanieu",
        "timestamp": 1594753696
    },
    {
        "content": "<p>Great, thanks</p>",
        "id": 203874245,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594753843
    },
    {
        "content": "<p>yeah, I was actually wondering if your dma descrpitor write really needs to be <code>volatile</code>... in atomic terms, it would no have to be atomic. the only the write to <code>0x40000004</code> would have to be, as that is when things are actually \"sent\"</p>",
        "id": 203922569,
        "sender_full_name": "RalfJ",
        "timestamp": 1594797195
    },
    {
        "content": "<p>(the earlier write likely still needs to be volatile for reasons entirely unrelated to synchronization; that's volatile-specific which I am less familiar with)</p>",
        "id": 203922594,
        "sender_full_name": "RalfJ",
        "timestamp": 1594797240
    },
    {
        "content": "<p>Yes, those are all MMIO accesses, which you usually want to make volatile</p>",
        "id": 203922831,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1594797440
    },
    {
        "content": "<blockquote>\n<p>Also, what is the difference between pointer escape and sending it to an (unknown) thread ?</p>\n</blockquote>\n<p>For the record, LLVM uses \"escape\" to mean slightly different things in different optimizations, so there's no precise definition.</p>",
        "id": 203925873,
        "sender_full_name": "comex",
        "timestamp": 1594799948
    }
]