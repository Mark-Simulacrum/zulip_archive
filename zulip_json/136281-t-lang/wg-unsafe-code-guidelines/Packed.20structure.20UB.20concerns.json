[
    {
        "content": "<p>I'm wondering about the UB concerns around using packed structures. Should I expect the <code>unaligned_references</code> and <code>safe_packed_borrows</code> lints to cover everything here? Are there other UB issues with respect to packed structures that the compiler won't detect?</p>\n<p>For context: <a href=\"https://github.com/rust-lang/rust/pull/78646\">https://github.com/rust-lang/rust/pull/78646</a></p>",
        "id": 217100044,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1605680269
    },
    {
        "content": "<p>Is there anything you are suspicious of in particular?</p>",
        "id": 217136482,
        "sender_full_name": "oliver",
        "timestamp": 1605707529
    },
    {
        "content": "<p>afiak the main effect of <code>repr(packed)</code> is preventing padding of bytes in structs</p>",
        "id": 217136671,
        "sender_full_name": "oliver",
        "timestamp": 1605707632
    },
    {
        "content": "<p>afaik the only thing you need to worry about is references to unaligned fields (I think a reference to the packed struct should be fine, like ralf said here <a href=\"#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211515950\">https://rust-lang.zulipchat.com/#narrow/stream/146229-wg-secure-code/topic/How.20do.20programmers.20use.20unsafe.20Rust.3F/near/211515950</a> , but a reference to a field is where you can go wrong)<br>\nI don't know if the clippy lints are perfect</p>",
        "id": 217146674,
        "sender_full_name": "Nick12",
        "timestamp": 1605712161
    },
    {
        "content": "<p>is that architecture dependent?</p>",
        "id": 217160951,
        "sender_full_name": "oliver",
        "timestamp": 1605717455
    },
    {
        "content": "<p>These are rustc lints, FWIW, so I'm hoping that means they're more likely to be complete.</p>",
        "id": 217188593,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1605729560
    },
    {
        "content": "<p>They might be less effective than you're hoping since there wasn't a great workaround until relatively recently (<code>ptr::raw_const!</code> and friends).</p>\n<p>Hopefully in a future edition we'll be able to upgrade some of this to hard errors...</p>",
        "id": 217189661,
        "sender_full_name": "scottmcm",
        "timestamp": 1605730045
    },
    {
        "content": "<p>I see, thank you.</p>",
        "id": 217191171,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1605730788
    },
    {
        "content": "<p>Do we expect that the standard <code>#[derive]</code> implementations (<code>PartialOrd</code>, <code>Hash</code>,  <code>Debug</code>, etc.) correctly handle packed structs? Whether applied to packed struct or a struct containing one?</p>",
        "id": 217191234,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1605730808
    },
    {
        "content": "<p>A struct _containing_ a packed struct wouldn't be a problem, because the derives call the implementation on the field, not the subfields, and there's no safety concerns with references to the packed struct as a whole -- it's just a Size-N Align-1 type.</p>",
        "id": 217194083,
        "sender_full_name": "scottmcm",
        "timestamp": 1605732258
    },
    {
        "content": "<p>The obvious way of implementing the derives would fail on a packed struct, though.</p>",
        "id": 217194121,
        "sender_full_name": "scottmcm",
        "timestamp": 1605732282
    },
    {
        "content": "<p>Ah, yup:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">warning</span>: <span class=\"err\">`</span><span class=\"cp\">#[derive]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"cp\">#[repr(packed)]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">that</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">derive</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">E0133</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">#[derive(Hash)]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">          </span><span class=\"o\">^^^^</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"cp\">#[warn(safe_packed_borrows)]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">warning</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">previously</span><span class=\"w\"> </span><span class=\"n\">accepted</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">being</span><span class=\"w\"> </span><span class=\"n\">phased</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"kr\">become</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">hard</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"n\">release</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">46043</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/rust-lang/rust/issues/46043&gt;</span>\n</code></pre></div>",
        "id": 217194182,
        "sender_full_name": "scottmcm",
        "timestamp": 1605732336
    },
    {
        "content": "<p>In this case the packed struct is <code>Copy</code>.</p>",
        "id": 217194352,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1605732417
    },
    {
        "content": "<p>That error suggests that possibly they're doing something smart for Copy+packed.</p>\n<p>It would be awesome if you were to check that they're doing the right thing, and make a PR to mention that in their docs (such as <a href=\"https://doc.rust-lang.org/nightly/std/fmt/macro.Debug.html\">https://doc.rust-lang.org/nightly/std/fmt/macro.Debug.html</a> )</p>",
        "id": 217194654,
        "sender_full_name": "scottmcm",
        "timestamp": 1605732591
    },
    {
        "content": "<p>Thanks for the info everyone. I feel reasonably confident that <a href=\"https://github.com/rust-lang/rust/pull/78646\">https://github.com/rust-lang/rust/pull/78646</a> is safe. Any comments on to confirm or deny would be appreciated. :)</p>",
        "id": 217207523,
        "sender_full_name": "Tyson Nottingham",
        "timestamp": 1605739687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Packed.20structure.20UB.20concerns/near/217194654\">said</a>:</p>\n<blockquote>\n<p>That error suggests that possibly they're doing something smart for Copy+packed.</p>\n<p>It would be awesome if you were to check that they're doing the right thing, and make a PR to mention that in their docs (such as <a href=\"https://doc.rust-lang.org/nightly/std/fmt/macro.Debug.html\">https://doc.rust-lang.org/nightly/std/fmt/macro.Debug.html</a> )</p>\n</blockquote>\n<p>I haven't checked, but it is my understanding that (a) they are doing the right thing, (b) there'd be compiler errors if they did not (with these lints enabled) because the output of derive macros <em>is</em> at least unsafety-checked. (not sure if the <code>unaligned_references</code> lint checks them though.)</p>",
        "id": 217503117,
        "sender_full_name": "RalfJ",
        "timestamp": 1605967468
    }
]