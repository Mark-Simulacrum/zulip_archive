[
    {
        "content": "<p>I stumbled across the following crate: <a href=\"https://crates.io/crates/ref-cast\">https://crates.io/crates/ref-cast</a> by <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> .<br>\nand it made me think, strictly memory wise, sure the pointers are equivalent. but is it actually safe?</p>\n<p>Consider the discussions here: <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Constructing.20ZSTs\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Constructing.20ZSTs</a> there are a lot of examples of type that require the constructor being called for them to be safe to use, either because of Drop impl(which isn't a problem for ref-cast because of a reference) or functions on that type.</p>\n<p>I can definitely imagine types that their constructor have side effects(asm/C calls / writing to statics) that without makes any functions on the type be UB.<br>\nSomething like: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3a55c119fb12370e30f95645edd23464\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=3a55c119fb12370e30f95645edd23464</a></p>",
        "id": 199092973,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1590704143
    },
    {
        "content": "<p>I did not consider the fact that it only gives a derive macro, meaning that the implementer of the struct provides this and no one else.</p>\n<p>So if he derives it he needs to make sure all the invariants still hold.</p>",
        "id": 199093265,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1590704361
    },
    {
        "content": "<blockquote>\n<p>So if he derives it he needs to make sure all the invariants still hold.</p>\n</blockquote>\n<p>basically this</p>",
        "id": 199094283,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590705047
    },
    {
        "content": "<p>casting an arbitrary reference to an arbitrary other reference whose type has the same layout wouldn't be fine</p>",
        "id": 199094308,
        "sender_full_name": "David Tolnay",
        "timestamp": 1590705069
    },
    {
        "content": "<p>Always amazes me how I understand things 2-5 minutes after I post a question <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♂️</p>",
        "id": 199094620,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1590705300
    },
    {
        "content": "<p>It's one of the classic Rust blunders, right up there with \"never get involved with a land war in Asia\".</p>",
        "id": 199095613,
        "sender_full_name": "Lokathor",
        "timestamp": 1590706072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20ref-cast.20actually.20safe.3F/near/199094620\">said</a>:</p>\n<blockquote>\n<p>Always amazes me how I understand things 2-5 minutes after I post a question <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>‍♂️</p>\n</blockquote>\n<p>Happens to me all the time :)</p>",
        "id": 199246940,
        "sender_full_name": "RalfJ",
        "timestamp": 1590829692
    },
    {
        "content": "<p>that's why asking the question to a rubber duck actually works^^</p>",
        "id": 199246953,
        "sender_full_name": "RalfJ",
        "timestamp": 1590829726
    }
]