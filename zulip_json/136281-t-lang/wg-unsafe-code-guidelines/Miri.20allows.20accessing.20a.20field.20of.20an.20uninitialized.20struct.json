[
    {
        "content": "<p>This code doesn't report Miri warnings, but I thought it would because we are dereferencing a field of an uninitialized struct:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Test</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">alloc</span>::<span class=\"p\">{</span><span class=\"n\">alloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dealloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Layout</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Layout</span>::<span class=\"n\">new</span>::<span class=\"o\">&lt;</span><span class=\"n\">Test</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Test</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;testing&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I thought this was one of the reasons that raw references needed to be added; what piece am I missing?</p>",
        "id": 204431084,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595256352
    },
    {
        "content": "<p>You are initializing the data though?</p>",
        "id": 204431469,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595256502
    },
    {
        "content": "<p>If you remove one of the assignments it complains</p>",
        "id": 204431507,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1595256514
    },
    {
        "content": "<p>I think this is fine because both <code>a</code> and <code>b</code> don't implement drop</p>",
        "id": 204431537,
        "sender_full_name": "lcnr",
        "timestamp": 1595256531
    },
    {
        "content": "<p>so doing the same with <code>b: String</code> is definitely unsound</p>",
        "id": 204431596,
        "sender_full_name": "lcnr",
        "timestamp": 1595256559
    },
    {
        "content": "<p>hm I would've personally expected an error on the <code>(*ptr).a</code> as I would expect that to create a <code>&amp;mut Test</code> before going to the field. Maybe we special case something there though?</p>",
        "id": 204431654,
        "sender_full_name": "simulacrum",
        "timestamp": 1595256588
    },
    {
        "content": "<p>miri doesn't look into references rn afaik</p>",
        "id": 204431726,
        "sender_full_name": "lcnr",
        "timestamp": 1595256606
    },
    {
        "content": "<p>this is currently also \"allowed\" by miri:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204432042,
        "sender_full_name": "lcnr",
        "timestamp": 1595256739
    },
    {
        "content": "<p>there is an open discussion about this in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a></p>",
        "id": 204432430,
        "sender_full_name": "lcnr",
        "timestamp": 1595256904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Miri.20allows.20accessing.20a.20field.20of.20an.20uninitialized.20struct/near/204431654\">said</a>:</p>\n<blockquote>\n<p>hm I would've personally expected an error on the <code>(*ptr).a</code> as I would expect that to create a <code>&amp;mut Test</code> before going to the field. Maybe we special case something there though?</p>\n</blockquote>\n<p>Yes, this was my main point â€” and why I brought up raw references.</p>",
        "id": 204435591,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595258371
    },
    {
        "content": "<p>Pivoting a bit, <strong>is</strong> it well-defined to access the field of an undefined struct without using raw references?</p>",
        "id": 204437687,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595259288
    },
    {
        "content": "<p>I think overwriting undefined values of types not implementing drop will have to remain ub free, considering how frequently it is used in the wild</p>",
        "id": 204437945,
        "sender_full_name": "lcnr",
        "timestamp": 1595259406
    },
    {
        "content": "<p>instead of the more correct <code>ptr::write</code></p>",
        "id": 204437991,
        "sender_full_name": "lcnr",
        "timestamp": 1595259432
    },
    {
        "content": "<p>related: <a href=\"https://without.boats/blog/two-memory-bugs-from-ringbahn/\">https://without.boats/blog/two-memory-bugs-from-ringbahn/</a></p>",
        "id": 204438020,
        "sender_full_name": "lcnr",
        "timestamp": 1595259451
    },
    {
        "content": "<p>not that I am too knowledgeable about this btw <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 204438239,
        "sender_full_name": "lcnr",
        "timestamp": 1595259549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> then I don't understand the motivation for <a href=\"https://rust-lang.github.io/rfcs/2582-raw-reference-mir-operator.html\">the raw reference operator</a>.</p>",
        "id": 204438644,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595259711
    },
    {
        "content": "<p>iirc the problem was <code>#[repr(packed)]</code> which would mean that references to struct fields are unaligned, which is ub</p>",
        "id": 204438777,
        "sender_full_name": "lcnr",
        "timestamp": 1595259763
    },
    {
        "content": "<p>so referencing a field, even using <code>&amp;mut packed.field as *mut _</code> would temporarily have an unaligned reference, which is UB</p>",
        "id": 204438850,
        "sender_full_name": "lcnr",
        "timestamp": 1595259799
    },
    {
        "content": "<p>like, I'm mostly asking about </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">//  ^^^^^^^^ ^^^^</span>\n<span class=\"c1\">//  |           |</span>\n<span class=\"c1\">//  + This part |</span>\n<span class=\"c1\">//              + Not this part</span>\n</code></pre></div>",
        "id": 204438902,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595259827
    },
    {
        "content": "<p>ok, so now I am mostly making things up, but I think that <code>(*ptr).a</code> is only a <em>place</em>, not a <em>value</em>, so as long as <code>ptr</code> points to an existing address this should be fine</p>",
        "id": 204439122,
        "sender_full_name": "lcnr",
        "timestamp": 1595259914
    },
    {
        "content": "<p>please wait for someone else to approve this though, I am not sure about that</p>",
        "id": 204439194,
        "sender_full_name": "lcnr",
        "timestamp": 1595259949
    },
    {
        "content": "<p>My UB guru is off on a week-long vacation.</p>",
        "id": 204439865,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595260260
    },
    {
        "content": "<p>Another reason for raw references is if you want to write field by field, you can't do that right now without UB (creating a reference to uninit data)</p>",
        "id": 204458742,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1595270145
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Miri.20allows.20accessing.20a.20field.20of.20an.20uninitialized.20struct/near/204458742\">said</a>:</p>\n<blockquote>\n<p>Another reason for raw references is if you want to write field by field, you can't do that right now without UB (creating a reference to uninit data)</p>\n</blockquote>\n<p>now I'm more confused. Isn't that <em>literally</em> what this code is doing?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;testing&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204460667,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595271155
    },
    {
        "content": "<p>well I think the point is that we'll have magical syntax for \"field level access\" without ever creating a reference</p>",
        "id": 204461525,
        "sender_full_name": "simulacrum",
        "timestamp": 1595271526
    },
    {
        "content": "<p>I don't know how to exactly express it though</p>",
        "id": 204461576,
        "sender_full_name": "simulacrum",
        "timestamp": 1595271554
    },
    {
        "content": "<p>That feels like it's in agreement with what I'm trying to say. If this code used raw references, I'd expect that it wouldn't be UB (at least for these two lines). Since it doesn't use raw references, I feel like it <strong>is</strong> UB.</p>",
        "id": 204462282,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595271870
    },
    {
        "content": "<p>Agreed, yeah -- I think miri just isn't catching this for whatever reason</p>",
        "id": 204462349,
        "sender_full_name": "simulacrum",
        "timestamp": 1595271896
    },
    {
        "content": "<p>Sure, and that may be the Miri limitation linked above.</p>",
        "id": 204462526,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595271949
    },
    {
        "content": "<p>What I mean is that even though it's under debate and currently not checked by miri, your ( <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>) code does exhibit UB</p>",
        "id": 204464657,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1595273015
    },
    {
        "content": "<p>Only now got your response, weird.<br>\nBut yeah it's a miri limitation AFAIK</p>",
        "id": 204464757,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1595273046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Miri.20allows.20accessing.20a.20field.20of.20an.20uninitialized.20struct/near/204460667\">said</a>:</p>\n<blockquote>\n<p>now I'm more confused. Isn't that <em>literally</em> what this code is doing?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;testing&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It's not. Here's a concrete example: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b84a0bbefb1e2a47087f6b30e85efa67\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b84a0bbefb1e2a47087f6b30e85efa67</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">value</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;test&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">o</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>If you look at MIR note that there isn't even a read of <code>_1</code>, the argument. I'm not completely sure if that is indeed a stable detail of the semantics of assignment of non-<code>Drop</code> values but it is the effective current semantics which are defined through MIR. If you change the type behind the pointer to <code>String</code> yourself you will also see that <code>_1</code> is dropped in-place before being overwritten, not swapped and then dropped. That is sound since panics in Drop will abort and so either the assignment is reached or we abort. For no-<code>Drop</code>, no reference is created for the assignment target.</p>",
        "id": 204510930,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595304640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span> your new example does not access a field of an uninitialized value, so Iâ€™m not following how it relates to my question</p>",
        "id": 204533581,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595328681
    },
    {
        "content": "<p><code>s</code> might as well be pointing to uninitialized memory. It's the same if the pointee is directly uninitialized or if its a field of a larger uninitialized struct.</p>",
        "id": 204533689,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595328775
    },
    {
        "content": "<p>The place expressions <code>(*ptr).a</code> has the exact same requirements as if you had a pointer to <code>a</code> directly and dereferenced that.</p>",
        "id": 204533733,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595328825
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dd74fb4ea4a4b4e6981b1293b6d9d3f7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dd74fb4ea4a4b4e6981b1293b6d9d3f7</a><br>\nHere, with a struct and field. Same thing</p>",
        "id": 204533859,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595328887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Miri.20allows.20accessing.20a.20field.20of.20an.20uninitialized.20struct/near/204458742\">said</a>:</p>\n<blockquote>\n<p>Another reason for raw references is if you want to write field by field, you can't do that right now without UB (creating a reference to uninit data)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"229913\">@HeroicKatora</span>  does that mean you disagree with this statement <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> ?</p>\n<p>I do think we are getting into the terminology here though. You said</p>\n<p><span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Miri.20allows.20accessing.20a.20field.20of.20an.20uninitialized.20struct/near/204510930\">said</a>:</p>\n<blockquote>\n<p>I'm not completely sure if that is indeed a stable detail of the semantics of assignment of non-<code>Drop</code> values</p>\n</blockquote>\n<p>Because it's not a \"stable detail\", by <em>definition</em> it must be undefined behavior, right? It just so happens that <strong>in this case at this point in time</strong> it doesn't cause a problem.</p>",
        "id": 204535931,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595330656
    },
    {
        "content": "<p>Yes, I do disagree with that statement.<br>\nThis is actually kind of important: If no auto-deref is involved, <code>(*ptr).a</code> is not really concerned with the whole place <code>*ptr</code>, it constructs neither a reference to it, nor requires it to be valid, its sole use is in finding the proper memory address of the complete referred place with size of field <code>a</code>. Otherwise <code>struct.field</code>, which is implicitly <code>(*struct).field</code>, would always borrow the whole struct but it obviously does not. (edit: deleted some stacked borrows stuff that I don't know for sure).<br>\nThe raw pointer syntax is for getting a pointer to <code>(*ptr).a</code> that can be stored somewhere. This is currently not possible since for that you must convert the place expression to a value which you can only do by using it in a reference expression <code>&amp;(*ptr).a</code> and coercing that reference.</p>",
        "id": 204536092,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595330807
    },
    {
        "content": "<p>The thing where I'm not sure (I didn't say it's not stable, just that I'm not sure) is if the value you overwrite with assigning to the place must be valid, even if it doesn't have a Drop impl.</p>",
        "id": 204536199,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595330893
    },
    {
        "content": "<p>It must be an aligned write though. This ties in with the impossibility of creating a raw pointer. You can only do unaligned writes by the method in <code>ptr</code> which requires you to first construct the raw pointer, not only a place expression .</p>",
        "id": 204536290,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1595330993
    },
    {
        "content": "<p>Indeed Miri does not currently check that references point to \"valid data\" when being created -- that would be prohibitively expensive (this is one reason why I am arguing for making that not UB any more in the UCG thread linked above). It also currently allows uninitialized integers but I plan to change that (at least with a flag).</p>",
        "id": 204893021,
        "sender_full_name": "RalfJ",
        "timestamp": 1595581012
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> your original code does not create a reference, from what I can see? As other said, <code>(*ptr).a</code> as a <em>place</em> is fine when <code>ptr</code> is raw, aligned and non-dangling (but what it points to does not matter); turning it into a <em>reference</em> e.g. via <code>ptr::write(&amp;mut (*ptr).a, ...)</code> is where things go wrong because you are creating a reference to an invalid value.</p>",
        "id": 204893192,
        "sender_full_name": "RalfJ",
        "timestamp": 1595581154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Miri.20allows.20accessing.20a.20field.20of.20an.20uninitialized.20struct/near/204536199\">said</a>:</p>\n<blockquote>\n<p>The thing where I'm not sure (I didn't say it's not stable, just that I'm not sure) is if the value you overwrite with assigning to the place must be valid, even if it doesn't have a Drop impl.</p>\n</blockquote>\n<p>yeah I don't think this question is settled. On the MIR level I'd say the old value does not matter at all -- drops are explicit there and when no drop happens, there's nothing even considering the old value.</p>",
        "id": 204893269,
        "sender_full_name": "RalfJ",
        "timestamp": 1595581217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Miri.20allows.20accessing.20a.20field.20of.20an.20uninitialized.20struct/near/204893192\">said</a>:</p>\n<blockquote>\n<p>your original code does not create a reference, from what I can see? As other said, <code>(*ptr).a</code> as a <em>place</em> is fine when <code>ptr</code> is raw, aligned and non-dangling (but what it points to does not matter); turning it into a <em>reference</em> e.g. via <code>ptr::write(&amp;mut (*ptr).a, ...)</code></p>\n</blockquote>\n<p>This is my main point of confusion then. I've always heard it as the blanket statement \"accessing a field of a struct implicitly creates a reference\" and \"it's impossible to correctly piece-wise initialize a struct in Rust\".</p>\n<p>From that, I've extrapolated that <code>uninitialized_struct_pointer.field</code> is summarily wrong in every case.</p>\n<p>Instead, it sounds like you <em>can</em> piece-wise initialize a struct, so long as none of the fields implement <code>Drop</code>, which is what allows you to avoid using <code>ptr::write</code> or friends. Is that a better interpretation?</p>",
        "id": 204911173,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595595235
    },
    {
        "content": "<blockquote>\n<p>Instead, it sounds like you can piece-wise initialize a struct, so long as none of the fields implement Drop, which is what allows you to avoid using ptr::write or friends. Is that a better interpretation?</p>\n</blockquote>\n<p>When discussing MIR semantics, then yes -- this is the more precise / refined version of the blanket statement you mentioned.</p>",
        "id": 205110923,
        "sender_full_name": "RalfJ",
        "timestamp": 1595853298
    },
    {
        "content": "<p>(there is another exception btw: if the struct is <code>repr(C)</code> you can compute a raw ptr to the right field \"manually\" by giving the right offset.)</p>",
        "id": 205110959,
        "sender_full_name": "RalfJ",
        "timestamp": 1595853325
    },
    {
        "content": "<p>nothing has been ratified so far about how much we guarantee on the surface level -- IMO we should anyway effectively define our semantics through MIR (or something MIR-like), but even if not it seems reasonable to not attach a validity invariant with place creation, and instead just do that when a reference is being created.</p>",
        "id": 205111163,
        "sender_full_name": "RalfJ",
        "timestamp": 1595853441
    }
]