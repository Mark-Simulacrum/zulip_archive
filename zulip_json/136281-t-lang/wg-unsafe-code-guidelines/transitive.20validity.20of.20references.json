[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> in the lang meeting there were some questions about checking the validity of references transitively, and arguments about whether they should be shallow or deep. I don't understand how we could check the validity of references if their validity would depend on the validity of the pointee, e.g., <code>&amp;[T]</code> would need us to check that all <code>T</code>s in the slice are valid for <code>&amp;[T]</code> to be valid</p>",
        "id": 160871149,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654212
    },
    {
        "content": "<p>e.g. <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> argued that the deepness that we check is at most N (e.g. 5)</p>",
        "id": 160871193,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654275
    },
    {
        "content": "<p>I suppose this did not mean that we would only check the first N elements of <code>&amp;[T]</code>, but that we could check at most <code>&amp;[&amp;[&amp;[&amp;[&amp;[T]]]]]</code></p>",
        "id": 160871364,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654379
    },
    {
        "content": "<p>so if each slice has M elements, we'd need to check M^N values for slices</p>",
        "id": 160871411,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654430
    },
    {
        "content": "<p>even with N=1 this sounds unrealistic to me</p>",
        "id": 160871464,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654449
    },
    {
        "content": "<p>the only realistic option is N=0 which means reference validity is shallow checked, e.g., they are properly aligned, non-zero, but not that their pointee must be valid</p>",
        "id": 160871500,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654502
    },
    {
        "content": "<p>maybe we could check that the pointee has the appropriate layout - e.g. that the memory bounds of the pointee are ok, but that's it.</p>",
        "id": 160871521,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654529
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 160871617,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654626
    },
    {
        "content": "<p>so when casting <code>&amp;[u8] as &amp;[bool]</code>miri wouldn't check if the bools are invalid, it would only check it when the bools are actually accessed</p>",
        "id": 160871710,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552654696
    },
    {
        "content": "<p>Maybe for code that uses no slices we can check more, but a lot of code uses Vec or String which get coerced to slices often.</p>",
        "id": 160872147,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552655037
    },
    {
        "content": "<p>so I don't know, if we require validity of references to be transitive, but we can't check it in practice, i wonder if it wouldn't be better to adjust the validity rules of references to not require transitivity</p>",
        "id": 160872287,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552655126
    },
    {
        "content": "<p>yes I think we meant \"5 levels of references\"</p>",
        "id": 160885350,
        "sender_full_name": "RalfJ",
        "timestamp": 1552663905
    },
    {
        "content": "<p>and yes that could still be expensive</p>",
        "id": 160885354,
        "sender_full_name": "RalfJ",
        "timestamp": 1552663909
    },
    {
        "content": "<p>do we gain any optimization power from requiring the pointee of a valid reference to be valid ?</p>",
        "id": 160886003,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664329
    },
    {
        "content": "<p>yes. we can optimize away a function taking <code>&amp;!</code> as input (this was requested by <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> )</p>",
        "id": 160886070,
        "sender_full_name": "RalfJ",
        "timestamp": 1552664386
    },
    {
        "content": "<p>I have some thoughts for other ways to achieve this, but they are a bit hacky.</p>",
        "id": 160886080,
        "sender_full_name": "RalfJ",
        "timestamp": 1552664399
    },
    {
        "content": "<p>I think this also helps reasoning about unsafe code (e.g. if you see a reference you know that the pointee is valid), otherwise use pointers.</p>",
        "id": 160886241,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664512
    },
    {
        "content": "<p>this means that you can always dereference a reference in unsafe code</p>",
        "id": 160886340,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664557
    },
    {
        "content": "<p>otherwise, you can only dereference one if the pointee is valid, which might not be easy or cheap to check</p>",
        "id": 160886373,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what thoughts?</p>",
        "id": 160886408,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664618
    },
    {
        "content": "<p>we could try to cache these checks</p>",
        "id": 160886429,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664632
    },
    {
        "content": "<p>but beyond that..</p>",
        "id": 160886448,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664640
    },
    {
        "content": "<p>making caching efficient would probably involve a lot of work</p>",
        "id": 160886591,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552664741
    },
    {
        "content": "<blockquote>\n<p>otherwise, you can only dereference one if the pointee is valid, which might not be easy or cheap to check</p>\n</blockquote>\n<p>true. OTOH, it's not like the stronger validity makes this any easier. it just moves the same work to the point when you create a reference: when turning a raw ptr to a ref, you now must know the pointee is valid, which might not be easy or cheap to check</p>",
        "id": 160886700,
        "sender_full_name": "RalfJ",
        "timestamp": 1552664807
    },
    {
        "content": "<blockquote>\n<p>we could try to cache these checks</p>\n</blockquote>\n<p>that's actually made <em>much harder</em> by recursive validity, because now changing something in memory could make any random reference invalid if you can reach that memory from it</p>",
        "id": 160886808,
        "sender_full_name": "RalfJ",
        "timestamp": 1552664880
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> what thoughts?</p>\n</blockquote>\n<p>basically: (1) validity is \"pure\", does not depend on memory at all; references are valid if they are non-null and aligned; (2) any further property is enforced by Stacked Borrows, which (as part of reborrowing) already \"dereferences\" references (to update the tags of the memory they point to). Stacked Borrows depends on the <em>layout</em> of the pointee -- it has to, to determine the size. we could add a simple but hacky extra condition saying that moreove, if that layout is of Abi type \"uninhabited\", then we have UB. that'd get us <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>'s optimization.</p>",
        "id": 160887174,
        "sender_full_name": "RalfJ",
        "timestamp": 1552665157
    },
    {
        "content": "<p>I see. So in a nutshell validity does not guarantee that we can do <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> optimization, stacked borrows does.</p>",
        "id": 160888447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552666015
    },
    {
        "content": "<p>and not just the <code>&amp;!</code> thing, even the <code>dereferencable</code> attribute would source from Stacked Borrows, as opposed to validity.</p>",
        "id": 160888837,
        "sender_full_name": "RalfJ",
        "timestamp": 1552666269
    },
    {
        "content": "<p>this would mean validity does not depend on memory and can be fully cached -- validity and \"bitlist validity\" coincide</p>",
        "id": 160888868,
        "sender_full_name": "RalfJ",
        "timestamp": 1552666309
    },
    {
        "content": "<p>however it also makes me wonder if the distinction between validity and Stacked Borrows is even meaningful^^</p>",
        "id": 160888937,
        "sender_full_name": "RalfJ",
        "timestamp": 1552666333
    },
    {
        "content": "<p>would stacked borrows require that references are always dereferenceable ? </p>\n<p>E.g. would <code>let unused: &amp;[bool] = transmute(&amp;[3_u8, 4, 5]);</code> \"check\" under stacked borrows if <code>unused</code> is never used ?</p>",
        "id": 160892038,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552668550
    },
    {
        "content": "<p>Would re-borrrowing there dereference <code>unused</code> ?</p>",
        "id": 160892178,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552668633
    },
    {
        "content": "<blockquote>\n<p>would let unused: &amp;[bool] = transmute(&amp;[3_u8, 4, 5]); \"check\" under stacked borrows if unused is never used ?</p>\n</blockquote>\n<p>yes. after every assignment of reference types (and currently more, but I am thinking maybe that was overeager?), we do retagging. retagging asserts that the reference is dereferencable.</p>",
        "id": 160944041,
        "sender_full_name": "RalfJ",
        "timestamp": 1552728787
    },
    {
        "content": "<p>oh wait.</p>",
        "id": 160944042,
        "sender_full_name": "RalfJ",
        "timestamp": 1552728805
    },
    {
        "content": "<p>so, it'd check that the reference is derefencable (though I'd prefer ifw e could get unsized types out of the equation here, they might change things)</p>",
        "id": 160944047,
        "sender_full_name": "RalfJ",
        "timestamp": 1552728824
    },
    {
        "content": "<p>but it'll <em>not</em> check whether these are valid <code>bool</code> because it doesnt check that the pointee is valid. it just checks that the pointee is allocated.</p>",
        "id": 160944087,
        "sender_full_name": "RalfJ",
        "timestamp": 1552728843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so by dereferenceable we just check that the allocation satisfies the layout (e.g. that it is large enough to be dereferenced), but not that the memory is valid, right?</p>",
        "id": 160945413,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731288
    },
    {
        "content": "<p>correct</p>",
        "id": 160945430,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731313
    },
    {
        "content": "<p><code>dereferncable</code> as LLVM attribute means that there's memory there that can be read from (without incurring data races or so)</p>",
        "id": 160945435,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731328
    },
    {
        "content": "<p>at least that's my interpretation -- based on what it is used for: inserting spurious loads</p>",
        "id": 160945439,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731343
    },
    {
        "content": "<p>so I don't think there are any issues with making this part of validity</p>",
        "id": 160945443,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731355
    },
    {
        "content": "<p>egh, sorry. LLVM doesnt consider read-write races UB. so I guess the racy part doesnt matter.</p>",
        "id": 160945444,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731358
    },
    {
        "content": "<p>as in, for a reference to be valid it must point to an allocation that's sufficiently large to fit the layout</p>",
        "id": 160945489,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731384
    },
    {
        "content": "<p>well, it's somewhat a matter of redundancy -- if stacked borrows checks this anyway (as a side-effect), then why <em>also</em> check it in validity?</p>",
        "id": 160945491,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731403
    },
    {
        "content": "<p>in particular when there are benefits from making validity a property that looks at the value only, not at the rest of memory</p>",
        "id": 160945493,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731419
    },
    {
        "content": "<p>in the implementation it wouldn't be checked twice, but conceptually, it might be worth to teach this as part of validity</p>",
        "id": 160945503,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731440
    },
    {
        "content": "<p>we should layer what kind of unsafe code people can write with different amounts of knowledge</p>",
        "id": 160945509,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731471
    },
    {
        "content": "<p>well I was also speaking conceptually</p>",
        "id": 160945510,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731475
    },
    {
        "content": "<p>for the spec</p>",
        "id": 160945545,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731483
    },
    {
        "content": "<p>teaching can diverge from the spec though</p>",
        "id": 160945553,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731488
    },
    {
        "content": "<p>validity is something that pretty much everybody using zeroed / uninitialized / maybeuninit will need to know, but stacked borrows would be a level higher</p>",
        "id": 160945556,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731501
    },
    {
        "content": "<p>right but that's not an argument to <em>specify</em> things this way</p>",
        "id": 160945559,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731520
    },
    {
        "content": "<p>only to <em>teach</em> them this way</p>",
        "id": 160945561,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731524
    },
    {
        "content": "<p>right</p>",
        "id": 160945563,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731529
    },
    {
        "content": "<p>and we're talking about the spec here, I think. that was my assumption anyway.</p>",
        "id": 160945564,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731537
    },
    {
        "content": "<p>let's defer the teaching part until we have a spec^^</p>",
        "id": 160945567,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731542
    },
    {
        "content": "<p>thinking about this, while teaching, we don't have to use the word validity</p>",
        "id": 160945574,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731547
    },
    {
        "content": "<p>well people want us to change that word anyway</p>",
        "id": 160945577,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731562
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> issue isn't necessary to rename validity in the spec</p>",
        "id": 160945579,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731565
    },
    {
        "content": "<p>\"initialization invariant\" (or \"initialziedness\" or something like that... is there a less awkward equivalent?) is my current favourite</p>",
        "id": 160945580,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731583
    },
    {
        "content": "<p>they want a different name that they can use informally, while programming or teaching, but the spec doesn't need to match that necessarily</p>",
        "id": 160945582,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731587
    },
    {
        "content": "<p>it's nice if the names match, but it isn't a must, e.g., C programmers don't say x has a trap representation / indeterminate value, they just say x contains garbage or \"is not initialized\"</p>",
        "id": 160945638,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731628
    },
    {
        "content": "<p>Using one term with users and another one in the spec will confuse everyone who goes from being taught about this to reading the spec themselves, which should hopefully be many people</p>",
        "id": 160945640,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1552731633
    },
    {
        "content": "<p>The C standard's level of difficulty is not a good bar to aspire to imo :)</p>",
        "id": 160945647,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1552731651
    },
    {
        "content": "<blockquote>\n<p>it's nice if the names match, but it isn't a must, e.g., C programmers don't say x has a trap representation / indeterminate value, they just say x contains garbage or \"is not initialized\"</p>\n</blockquote>\n<p>well also in C nobody knows how these terms <em>really</em> relate</p>",
        "id": 160945649,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> initialization invariant sounds good to me</p>",
        "id": 160945651,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731659
    },
    {
        "content": "<p>so maybe let's not use C as the example for this...</p>",
        "id": 160945656,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731663
    },
    {
        "content": "<p>i was just arguing that the terms are not required to match</p>",
        "id": 160945660,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731694
    },
    {
        "content": "<p>well you gave an example for a case where they dont match and things are rather messy</p>",
        "id": 160945663,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731714
    },
    {
        "content": "<p>seems like an argument to make them match :P</p>",
        "id": 160945664,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731719
    },
    {
        "content": "<p><code>MaybeDoesNotSatisfyTheInitializationInvariant&lt;T&gt;</code> :D</p>",
        "id": 160945713,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731758
    },
    {
        "content": "<p>we're not talking about type names again are we?^^</p>",
        "id": 160945716,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731770
    },
    {
        "content": "<p>which reminds me I should push stabilizing that thing...</p>",
        "id": 160945718,
        "sender_full_name": "RalfJ",
        "timestamp": 1552731782
    },
    {
        "content": "<p>and push the place value etc. PR!</p>",
        "id": 160945773,
        "sender_full_name": "gnzlbg",
        "timestamp": 1552731857
    }
]