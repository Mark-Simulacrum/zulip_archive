[
    {
        "content": "<p>In intent and in current practice, is it valid to compare pointers to potentially-unrelated objects using <code>&lt;</code> and <code>&lt;=</code>. In particular, is this valid?: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bdc00ec41449ab4eb285f96cc0ba3e39\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bdc00ec41449ab4eb285f96cc0ba3e39\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bdc00ec41449ab4eb285f96cc0ba3e39</a></p>",
        "id": 161312058,
        "sender_full_name": "briansmith",
        "timestamp": 1553137440
    },
    {
        "content": "<p>Also, where are such things (to be) documented?</p>",
        "id": 161312124,
        "sender_full_name": "briansmith",
        "timestamp": 1553137496
    },
    {
        "content": "<p>You can run code under miri in the playground to check what's currently supported.</p>",
        "id": 161345588,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553175637
    },
    {
        "content": "<p>Once layout and validity are rfc'ed we'll probably start with a model for MIR and move towards stacked borrows afterwards. We'll have to deal with pointer comparisons and provenance along the way.</p>",
        "id": 161345757,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553175746
    },
    {
        "content": "<p>Interesting. I'll try it (though t's not clear to me that MIRI's interpretation is equivalent to what LLVM would generate. In fact I think it's unlikely they're equivalent).</p>",
        "id": 161347189,
        "sender_full_name": "briansmith",
        "timestamp": 1553176742
    },
    {
        "content": "<p>So, is it the case that right now that code is literally undefined behavior because nobody has even tried to define it?</p>",
        "id": 161347225,
        "sender_full_name": "briansmith",
        "timestamp": 1553176769
    },
    {
        "content": "<p>comparison of pointers is one of those things where Miri is very limited in its support currently</p>",
        "id": 161358312,
        "sender_full_name": "RalfJ",
        "timestamp": 1553183333
    },
    {
        "content": "<p>and also, it is an open question in every formal model that I know of</p>",
        "id": 161358335,
        "sender_full_name": "RalfJ",
        "timestamp": 1553183343
    },
    {
        "content": "<p>the intent is clearly that it is defined (as in, not UB), because it is allowed in safe code</p>",
        "id": 161358356,
        "sender_full_name": "RalfJ",
        "timestamp": 1553183359
    },
    {
        "content": "<p>and in the most elaborate model, it is indeed not UB -- however, under some circumstances pointer comparison (not just <code>&lt;</code> but also <code>==</code>) is nondeterministic, meaning comparing the same two pointers multiple times can yield a different result</p>",
        "id": 161358462,
        "sender_full_name": "RalfJ",
        "timestamp": 1553183412
    },
    {
        "content": "<p>the intent in LLVM is for it to be deterministic, but so far nobody has demonstrated a way to actually model that (and maintain the desired optimizations)</p>",
        "id": 161358499,
        "sender_full_name": "RalfJ",
        "timestamp": 1553183435
    },
    {
        "content": "<p>if you want to be on the safe side model-wise, cast the pointers to <code>usize</code> and compare those. then everyone agrees that behavior is defined and deterministic.</p>",
        "id": 161358685,
        "sender_full_name": "RalfJ",
        "timestamp": 1553183552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> In an ABI where the upper bits of pointers are used to store authentication information, <code>a &lt; b</code> doesn't imply that <code>(a as usize) &lt; (b as usize)</code> unless the <code>as usize</code> conversion masks those bits in the same way that a <code>a &lt; b</code> pointer comparison would; but if that kind of masking were to be done then <code>p as usize</code> wouldn't be equivalent to <code>(uintptr_t)p</code> in C (IIUC). That's why I'm trying to avoid converting to <code>usize</code>.</p>",
        "id": 161378802,
        "sender_full_name": "briansmith",
        "timestamp": 1553196614
    },
    {
        "content": "<p>Based on the current discussion, for the use case that motivated me to start this thread, I'm going to switch away from the scheme that I was planning to use that required pointer ordering comparisons in factor of explicitly tagging which buffers are overlapping. Thanks for the responses!</p>",
        "id": 161378824,
        "sender_full_name": "briansmith",
        "timestamp": 1553196632
    },
    {
        "content": "<p>I have to admit I gave no thought to ABIs that encode things in the upper bits of pointers. There are already enough open questions without such extra constraints.^^</p>",
        "id": 161391614,
        "sender_full_name": "RalfJ",
        "timestamp": 1553199113
    },
    {
        "content": "<p>Here is a summary of one such platform (ARMv8.3): <a href=\"https://lwn.net/Articles/718888/\" target=\"_blank\" title=\"https://lwn.net/Articles/718888/\">https://lwn.net/Articles/718888/</a></p>",
        "id": 161396334,
        "sender_full_name": "briansmith",
        "timestamp": 1553202945
    },
    {
        "content": "<p>thanks for the pointer!</p>",
        "id": 161743901,
        "sender_full_name": "RalfJ",
        "timestamp": 1553592063
    }
]