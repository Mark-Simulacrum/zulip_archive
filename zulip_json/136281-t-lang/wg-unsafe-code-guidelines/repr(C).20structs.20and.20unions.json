[
    {
        "content": "<p>I would like to know and specify that the repr(C) layout rules apply, even if we use non-C compatible types in the struct or union fields.</p>\n<p>Given <code>#[repr(C)] union Foo&lt;T&gt; { empty: (), value: ManuallyDrop&lt;T&gt; }</code> one can say that the types <code>Foo&lt;String&gt;</code> or <code>Foo&lt;Rc&lt;dyn std::fmt::Display&gt;&gt;</code> are not meaningfully C compatible, yet it would be important to know that representation rules for offset from the start of the type and field order still apply. I assume they do, but I think it has not been clear what \"C-compatible\" means when faced with blatant c-incompatibility.</p>\n<p>Same question with <code>#[repr(C)] struct Bar&lt;T: ?Sized&gt; { value: T }</code> and the type <code>Bar&lt;str&gt;</code>.</p>\n<p>Edit: Even type <code>()</code> in itself is also incompatible, strictly speaking.</p>",
        "id": 152389146,
        "sender_full_name": "bluss",
        "timestamp": 1545484979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139363\">@bluss</span>  <code>repr(C)</code> does not apply recursively / transitively to the types of the struct / union fields</p>",
        "id": 152389967,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545486488
    },
    {
        "content": "<p>it only applies to the layout of the struct that's actually repr(C), the layout of the fields is irrelevant</p>",
        "id": 152389994,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545486591
    },
    {
        "content": "<p>e.g. given <code>struct Foo;</code> and <code>#[repr(C)] struct Bar(Foo);</code> we have to be able to write to both <code>Bar</code>'s field 0 and <code>Foo</code>s via a <code>&amp;mut Foo</code> without knowing where the <code>&amp;mut Foo</code> actually points to (a single <code>Foo</code>, or a <code>Foo</code> inside a <code>Bar</code>).</p>",
        "id": 152390045,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545486659
    },
    {
        "content": "<p>Sure, there is no question about being recursive. Existing recommendations seem to be written in terms of guaranteeing compatibility with an equivalent struct in C. My question is, can we also use the guarantees of repr(C) layout even when there can be no equivalent C struct.</p>",
        "id": 152390340,
        "sender_full_name": "bluss",
        "timestamp": 1545487233
    },
    {
        "content": "<p>per <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/blob/master/reference/src/representation/unions.md\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/blob/master/reference/src/representation/unions.md\">https://github.com/rust-rfcs/unsafe-code-guidelines/blob/master/reference/src/representation/unions.md</a>, the offset of all fields in a <code>repr(C)</code> union is 0</p>",
        "id": 152392246,
        "sender_full_name": "RalfJ",
        "timestamp": 1545491127
    },
    {
        "content": "<p>that's independent from whatever we'll end up doing with ZSTs in <code>repr(C)</code> types</p>",
        "id": 152396429,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545499337
    },
    {
        "content": "<p>Great, so there is no implied restriction to certain C-compatible types and we apply the layout rule to all unions/structs.</p>",
        "id": 152398779,
        "sender_full_name": "bluss",
        "timestamp": 1545504472
    },
    {
        "content": "<p>Exactly, in particular, <code>repr(C)</code> is orthogonal to whether a type is \"C FFI safe\"/\"proper ctype\" etc.</p>",
        "id": 152404185,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545516221
    }
]