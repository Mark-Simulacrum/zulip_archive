[
    {
        "content": "<p>I've read the nomicon, the transmute docs, and anything else I could google... I have no idea why this miscompiles:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x3477a798_</span><span class=\"k\">usize</span><span class=\"p\">;</span><span class=\"w\">                </span><span class=\"c1\">// address I want to call</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">PARAM1</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x3cf53690_</span><span class=\"k\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">PARAM1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The fn call compiles as a call to <em>an address off by one</em>:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">mov</span><span class=\"w\">    </span><span class=\"no\">DWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">esp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mi\">0x3cf53690</span><span class=\"w\"></span>\n<span class=\"nf\">call</span><span class=\"w\">   </span><span class=\"mi\">0x3477a797</span><span class=\"w\">                     </span><span class=\"c1\">; &lt;------------ huh?</span>\n</code></pre></div>\n<p>Where have I messed up? How do I (without UB) convince the compiler that there really is a function (during runtime) at 0x3477a798 with calling convention <code>unsafe extern \"C\" fn(*mut u32)</code>?</p>",
        "id": 271893595,
        "sender_full_name": "Evan Richter",
        "timestamp": 1644875040
    },
    {
        "content": "<p>You can transmute pointer to function pointers (on POSIX platforms).</p>",
        "id": 271894597,
        "sender_full_name": "Gary Guo",
        "timestamp": 1644875562
    },
    {
        "content": "<p>I'm using the i686-linux-unknown-musl target</p>",
        "id": 271898089,
        "sender_full_name": "Evan Richter",
        "timestamp": 1644877310
    },
    {
        "content": "<p>and oddly enough, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x3477a798</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">read_volatile</span><span class=\"p\">();</span><span class=\"w\">       </span><span class=\"c1\">// z is unused!</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                                                       </span><span class=\"c1\">//   ^^^ NOTE: I transmute x here, _not_ z!</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">PARAM1</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x3cf53690_</span><span class=\"k\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">PARAM1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which compiles in a less optimized but correct way:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nf\">mov</span><span class=\"w\">    </span><span class=\"no\">DWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">ebp-0x8</span><span class=\"p\">],</span><span class=\"mi\">0x3477a798</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\">    </span><span class=\"no\">eax</span><span class=\"p\">,</span><span class=\"no\">DWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">ebp-0x8</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"nf\">mov</span><span class=\"w\">    </span><span class=\"no\">DWORD</span><span class=\"w\"> </span><span class=\"no\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"no\">esp</span><span class=\"p\">],</span><span class=\"mi\">0x3cf53690</span><span class=\"w\"></span>\n<span class=\"nf\">call</span><span class=\"w\">   </span><span class=\"no\">eax</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This makes me think I am causing UB somehow, even though the transmute docs say that usize -&gt; fn ptr is one of the best use cases for transmute.</p>",
        "id": 271900844,
        "sender_full_name": "Evan Richter",
        "timestamp": 1644878906
    },
    {
        "content": "<p>It is weird; there is either some alignement of fn pointer assumption being made somewhere, or some genuine compilation bug. The former seems more plausible</p>",
        "id": 271905658,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1644882073
    },
    {
        "content": "<p>I can't replicate: is there something about your setup that differs from <a href=\"https://www.godbolt.org/z/oozW3Pe1r\">https://www.godbolt.org/z/oozW3Pe1r</a> ? (This one isn't optimized but adding <code>-C opt-level=3</code> does not introduce the off by one error)</p>",
        "id": 271910755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644885550
    },
    {
        "content": "<p>This seems like a compilation bug to me. There is nothing in the (proto-) rust spec that would license this</p>",
        "id": 271911180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644885909
    },
    {
        "content": "<p>It is vaguely reminiscent of ARM thumb function calls, but this isn't an ARM</p>",
        "id": 271911224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644885957
    },
    {
        "content": "<p>Ok I tracked it down... it's a bug in mold I think <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> </p>\n<p><a href=\"/user_uploads/4715/Sv7M3NkLJVX2-b33NZxbCm0v/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Sv7M3NkLJVX2-b33NZxbCm0v/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Sv7M3NkLJVX2-b33NZxbCm0v/image.png\"></a></div>",
        "id": 271913499,
        "sender_full_name": "Evan Richter",
        "timestamp": 1644887597
    },
    {
        "content": "<p>and of course the difference is still there when forced to be at the same base address:</p>\n<p><a href=\"/user_uploads/4715/D7Oy6DCw5ulxsmkExkmh-zFg/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/D7Oy6DCw5ulxsmkExkmh-zFg/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/D7Oy6DCw5ulxsmkExkmh-zFg/image.png\"></a></div>",
        "id": 271913792,
        "sender_full_name": "Evan Richter",
        "timestamp": 1644887814
    }
]