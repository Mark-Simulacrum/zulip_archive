[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> do you have any examples in mind ?</p>",
        "id": 185237448,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578592430
    },
    {
        "content": "<p>what?</p>",
        "id": 185237508,
        "sender_full_name": "Lokathor",
        "timestamp": 1578592449
    },
    {
        "content": "<blockquote>\n<p>I am very against this because it would greatly complicate the unsafe code writing experience for users of the language.</p>\n</blockquote>",
        "id": 185237523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578592460
    },
    {
        "content": "<p>What gets complicated by the proposal in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/224\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/224\">ucg#224</a> ?</p>",
        "id": 185237540,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578592475
    },
    {
        "content": "<p>For slice references, we only support <code>[T]::into_raw()</code> and <code>[T]::from_raw_parts</code>, and currently do not support neither type punning through unions, nor the usage of <code>transmute</code>.</p>",
        "id": 185237603,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578592532
    },
    {
        "content": "<p>The only complication I can think of is that <code>(ptr, len) != [T]::from_raw(ptr, len).into_raw()</code></p>",
        "id": 185237748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578592624
    },
    {
        "content": "<p>but I don't really know how it can show up, since if you have a ZST, all pointers to it will be <code>align_of::&lt;ZST&gt;()</code> already, and all pointer arithmetic on those does nothing (e.g. <code>zst_ptr.add(N) == zst_ptr</code>)</p>",
        "id": 185237825,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578592682
    },
    {
        "content": "<p>I'm not sure if it is even possible to allocate a ZST in Rust at a different address, e.g., <code>Box&lt;ZST&gt;::new()</code> will return <code>align_of</code>, and <code>GlobalAlloc</code> cannot be used to allocate ZSTs.</p>",
        "id": 185238409,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578593001
    },
    {
        "content": "<p>One can definitely call a C function that returns a pointer to a ZST at a different address, or materialize one such pointer from an usize (e.g. <code>42_usize as *const ZST</code>).</p>",
        "id": 185238513,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578593048
    },
    {
        "content": "<p>You can use <code>&amp;Box::new((42u8, ()).1</code> to get a different address, but I don't believe there is a guarantee for this.</p>",
        "id": 185238679,
        "sender_full_name": "bjorn3",
        "timestamp": 1578593160
    },
    {
        "content": "<p>not for that type, but for something like <code>#[repr(C)) struct S(u8, ())</code> we have such a guarantee I think</p>",
        "id": 185238915,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578593287
    },
    {
        "content": "<p>since we do specify how the offsets are computed</p>",
        "id": 185238930,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578593299
    },
    {
        "content": "<p>i replied on the github issue, i didn't want to split the discussion into two places</p>",
        "id": 185239568,
        "sender_full_name": "Lokathor",
        "timestamp": 1578593738
    }
]