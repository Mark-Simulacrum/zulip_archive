[
    {
        "content": "<p>I'm working on implementing C variadics in Rust (RFC 2137) which are SUPER unsafe (CWE-134 and CWE-234). Is there anything I should do related to this WG?  Are C variadics and VaList worth a active discussion topic?</p>",
        "id": 156612996,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548170795
    },
    {
        "content": "<p>I kind of get the feeling that <code>va_list</code> in Rust will kind of be a niche thing, so I'm a little uncertain that it is worth the energy</p>",
        "id": 156613061,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548170871
    },
    {
        "content": "<p>But I'd also really hate for the unsafety of it to go undocumented</p>",
        "id": 156613167,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548170948
    },
    {
        "content": "<p>If it is something worth discussing, just ping me. I'd be happy to dump my current research/thoughts in an issue/PR</p>",
        "id": 156613410,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548171156
    },
    {
        "content": "<p>the goal of UCG is not to document all unsafety, libraries can and will continue to add their own</p>",
        "id": 156613422,
        "sender_full_name": "RalfJ",
        "timestamp": 1548171166
    },
    {
        "content": "<p>but in general interaction with platform-specific \"stuff\" is in scope here</p>",
        "id": 156613468,
        "sender_full_name": "RalfJ",
        "timestamp": 1548171213
    },
    {
        "content": "<p>for VaList I guess the main question is whether there are far-reaching consequences or whether it's \"just\" a lot of local complexity when actually writing a vaarg fn</p>",
        "id": 156613535,
        "sender_full_name": "RalfJ",
        "timestamp": 1548171252
    },
    {
        "content": "<p>feel free to open an issue at <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues</a> -- this does sound like something that people will be asking about eventually^^</p>",
        "id": 156613762,
        "sender_full_name": "RalfJ",
        "timestamp": 1548171406
    },
    {
        "content": "<p>The gist of the unsafty is that there is no guarantee that the caller has input the same type or number of args as the callee expects, so depending on how it is used there can be far reaching consequences a la string formatter vulns</p>",
        "id": 156613904,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548171517
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span> I'll try to collect some stuff and post it. If after reading it, it seems to be outside fo the scope of this WG feel free to close it</p>",
        "id": 156614136,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548171672
    },
    {
        "content": "<p>IMO there are probably more important areas to focus on first e.g. unions</p>",
        "id": 156614188,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548171722
    },
    {
        "content": "<blockquote>\n<p>The gist of the unsafty is that there is no guarantee that the caller has input the same type or number of args as the callee expects, so depending on how it is used there can be far reaching consequences a la string formatter vulns</p>\n</blockquote>\n<p>that's not what I meant by far-reaching. I meant things like memory-mapped I/O, which might have consequences in general discussions about references -- things with a \"global effect\". of course any local unsafety can \"become\" global if something goes wrong when forwarding the safety obligations.</p>",
        "id": 156614891,
        "sender_full_name": "RalfJ",
        "timestamp": 1548172225
    },
    {
        "content": "<p>string format vulns arise because <code>printf</code> is NOT a safe API, it would be an unsafe function in Rust with some obligations for the callers. that's still \"local\" in the sense that only the two sides of this unsafe contract have to care -- if one of them screws up, all is lost, but that's a separate issue (and trued pretty much all the time)</p>",
        "id": 156614966,
        "sender_full_name": "RalfJ",
        "timestamp": 1548172301
    },
    {
        "content": "<blockquote>\n<p>that's not what I meant by far-reaching</p>\n</blockquote>\n<p>Ah, sorry about that</p>",
        "id": 156615127,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548172427
    },
    {
        "content": "<p>no need to be sorry, I am probably making up my own vocabulary here ;)</p>",
        "id": 156615215,
        "sender_full_name": "RalfJ",
        "timestamp": 1548172489
    },
    {
        "content": "<p>I think I see what you're getting at</p>",
        "id": 156615235,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548172506
    },
    {
        "content": "<p><code>setjmp</code>/<code>longjmp</code> is also awfully far-reaching, to give another example</p>",
        "id": 156615359,
        "sender_full_name": "RalfJ",
        "timestamp": 1548172622
    },
    {
        "content": "<p>Under that definition of local I don't see global consequences... AFAIK most the <code>va_list</code> vulns arise out of one side not adhering to the contract</p>",
        "id": 156615528,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548172766
    },
    {
        "content": "<p>So the guidelines for <code>va_list</code> may be just \"set clear rules and adhere to them\"</p>",
        "id": 156615692,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548172873
    },
    {
        "content": "<p>yes</p>",
        "id": 156616322,
        "sender_full_name": "RalfJ",
        "timestamp": 1548173312
    },
    {
        "content": "<p>except \"just\" might be a misnomer here ;)</p>",
        "id": 156616332,
        "sender_full_name": "RalfJ",
        "timestamp": 1548173320
    },
    {
        "content": "<p>Ha! true</p>",
        "id": 156616862,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548173742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> feel free to open an issue but: </p>\n<blockquote>\n<p>The gist of the unsafty is that there is no guarantee that the caller has input the same type or number of args as the callee expects</p>\n</blockquote>\n<p>I don't see much difference between this, and writing an <code>extern { }</code> function that has a different signature from the C code (e.g. C expects a pointer and the Rust signature has a e.g. <code>f32</code> ).</p>",
        "id": 156674484,
        "sender_full_name": "gnzlbg",
        "timestamp": 1548235007
    },
    {
        "content": "<p>Basically code that writes <code>unsafe { extern_fn(....) }</code> is claiming that the <code>extern_fn</code> signature is ok. When it comes to <code>va_args</code> it would just claim that the number and types of the arguments passed is also ok. If it isn't, then that code is at fault. </p>\n<p>We have a lot of tools for verifying that claim.</p>",
        "id": 156674580,
        "sender_full_name": "gnzlbg",
        "timestamp": 1548235130
    }
]