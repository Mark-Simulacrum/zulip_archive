[
    {
        "content": "<p>I've encountered something with some <code>unsafe</code> SIMD code which either feels like I'm doing something profoundly and subtly wrong, or it's a compiler bug and I'm not sure which.</p>\n<p>The usage is what feels like some pretty straightforward usage of <code>target_feature(enable = \"avx2\"</code>, works locally, but with this change alone goes from all tests passing to miscomputing a result, 100% reproducibly in CI (GitHub Actions):</p>\n<p><a href=\"https://github.com/RustCrypto/universal-hashes/commit/62efb8e751d5105845a0e2e6481a2c7fb64e1ab5\">https://github.com/RustCrypto/universal-hashes/commit/62efb8e751d5105845a0e2e6481a2c7fb64e1ab5</a></p>",
        "id": 219343084,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607524277
    },
    {
        "content": "<p>as it's a cryptography application, miscomputing results is mildly terrifying</p>",
        "id": 219343126,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607524294
    },
    {
        "content": "<p>It may very well be that avx2 is not supported by the processors used for Github Actions. You should always guard a call to a <code>#[target_feature(enable = \"...\")]</code> function with a <code>is_x86_feature_detected!</code> check.</p>",
        "id": 219354715,
        "sender_full_name": "bjorn3",
        "timestamp": 1607528970
    },
    {
        "content": "<p>I was once bitten by something similar: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1448\">bytecodealliance/wasmtime#1448</a> Here the the <code>clz</code> instruction compiles to <code>bsr</code> + some extra instructions when <code>lzcnt</code> is unavailable, but to <code>lzcnt</code> when it is available. As it so happens, <code>lzcnt</code> is encoded as <code>bsr</code> with a prefix that is normally ignored. Because the macOS builders don't support <code>lzcnt</code>, I suddenly got incorrect results when enabling <code>lzcnt</code> through the <code>haswell</code> preset.</p>",
        "id": 219355427,
        "sender_full_name": "bjorn3",
        "timestamp": 1607529270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> we're using something similar to <code>is_x86_feature_detected!</code>: <a href=\"https://docs.rs/cpuid-bool/\">https://docs.rs/cpuid-bool/</a></p>",
        "id": 219357666,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607530101
    },
    {
        "content": "<p>I don't see it used in the test.</p>",
        "id": 219357767,
        "sender_full_name": "bjorn3",
        "timestamp": 1607530146
    },
    {
        "content": "<p>aha!</p>",
        "id": 219358012,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607530235
    },
    {
        "content": "<p>gooooood catch, heh</p>",
        "id": 219358043,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607530248
    },
    {
        "content": "<p>hrmm, still getting test failures <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> and these should be going via the autodetection path</p>",
        "id": 219361241,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607531439
    },
    {
        "content": "<p>alright, just reproduced a minimal change that breaks the normal tests (which should always take the autodetection path in theory)</p>",
        "id": 219371378,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607535825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> really weird, right? and unfortunately not reproducible at all locally</p>",
        "id": 219372745,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607536480
    },
    {
        "content": "<p>locally everything looks great and I'm getting only slightly slower performance with CPUID detection as I am by passing <code>RUSTFLAGS</code></p>",
        "id": 219372812,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607536516
    },
    {
        "content": "<p>Yeah, very weird. Could you print the internal state at each operation and compare CI with your local results? Maybe that will help pinpoint the location of the bug.</p>",
        "id": 219373132,
        "sender_full_name": "bjorn3",
        "timestamp": 1607536656
    },
    {
        "content": "<p>sure, sounds good</p>",
        "id": 219373240,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607536687
    },
    {
        "content": "<p>uhhhh wow</p>",
        "id": 219376660,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607538116
    },
    {
        "content": "<p>I need to double check exactly what I changed that did it, but I tried to scope the tests down and now they pass</p>",
        "id": 219376779,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607538158
    },
    {
        "content": "<p>yeah this is <em>really</em> starting to feel like a compiler bug</p>",
        "id": 219377941,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607538665
    },
    {
        "content": "<p>Fails: no RUSTFLAGS, <code>--release</code></p>",
        "id": 219377995,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607538692
    },
    {
        "content": "<p>Succeeds: no <code>--release</code> or <code>RUSTFLAGS=\"-Ctarget-cpu=haswell\" cargo test ... --release</code></p>",
        "id": 219378019,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607538706
    },
    {
        "content": "<p>the internal state is the same. it's failing while computing the output from the internal state</p>",
        "id": 219379000,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607539138
    },
    {
        "content": "<p>narrowed it down to one of the reduction functions...</p>",
        "id": 219380238,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607539729
    },
    {
        "content": "<p>so as far as I can tell a value being returned from a lambda is being corrupted</p>",
        "id": 219382656,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607540748
    },
    {
        "content": "<p>oh wait, maybe not...</p>",
        "id": 219383170,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607540974
    },
    {
        "content": "<p>I have officially entered the heisenbug stage</p>",
        "id": 219383964,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607541342
    },
    {
        "content": "<p>I managed to place a <code>dbg!</code> statement close enough to the problem that it made the tests pass</p>",
        "id": 219384070,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607541379
    },
    {
        "content": "<p>so yeah, I feel I'm pretty close to the problem here... what's the best way to report this?</p>",
        "id": 219384315,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607541487
    },
    {
        "content": "<p>I have a <code>dbg!</code> that diverges as close as I can get it, and if I place another <code>dbg!</code> above the codeblock in question it passes</p>",
        "id": 219384467,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607541566
    },
    {
        "content": "<p>opened a bug report <a href=\"https://github.com/rust-lang/rust/issues/79865\">https://github.com/rust-lang/rust/issues/79865</a></p>",
        "id": 219390736,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607544457
    },
    {
        "content": "<p>If you inhibit inlining, does the problem go away?</p>",
        "id": 219391444,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1607544873
    },
    {
        "content": "<p>let me check</p>",
        "id": 219391458,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607544883
    },
    {
        "content": "<p>well, so I checked something which is probably different from what you mean</p>",
        "id": 219391635,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607544972
    },
    {
        "content": "<p>how do I disable inlining? I tried commenting out the attribute on the function</p>",
        "id": 219391668,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1607544986
    },
    {
        "content": "<p><code>#[inline(never)]</code></p>",
        "id": 219391725,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1607545030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132721\">Tony Arcieri</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/An.20unsafe.20mystery.20with.20SIMD/near/219384070\">said</a>:</p>\n<blockquote>\n<p>I managed to place a <code>dbg!</code> statement close enough to the problem that it made the tests pass</p>\n</blockquote>\n<p>I'll take \"things a compiler author doesn't want to here for 500\", Alex</p>",
        "id": 219393729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607546022
    },
    {
        "content": "<p>...horrifying.</p>",
        "id": 240110487,
        "sender_full_name": "Jubilee",
        "timestamp": 1621889657
    }
]