[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/73\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/73\">https://github.com/rust-lang/unsafe-code-guidelines/issues/73</a></p>\n<p>Could we allow <code>Option&lt;MaybeUninit&lt;T&gt;&gt;</code> to have the same size as <code>MaybeUninit&lt;T&gt;</code> ?</p>\n<p>This case appears to me to be much simpler than layout optimizations for unions in general, yet I am not sure how we could ever allow that.</p>",
        "id": 168600031,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561040586
    },
    {
        "content": "<p>Consider unions that could be <code>repr(transparent)</code> (but don't necessarily need to be), that is, unions with a single non-zero-sized field. These unions do always have valid fields because, independently of the bytes of the union, all zero-sized fields are always valid. </p>\n<p>The non-zero-sized field is, however, not always valid, and we want to support that to support partial initialization.</p>",
        "id": 168600050,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561040612
    },
    {
        "content": "<p>For example,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">union</span> <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// U::b == undef</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ??</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opt</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// ??</span>\n</pre></div>",
        "id": 168600304,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561040790
    },
    {
        "content": "<p>So even though <code>NonNull&lt;T&gt;</code> has a niche, when constructing an <code>Option&lt;U&gt;</code>, we would need extra requirements about the contents of the niche, even though the union has a valid field (<code>U::a</code>).</p>",
        "id": 168600441,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561040888
    },
    {
        "content": "<p>We would at least have to require that the niche is always \"valid\" (whatever that might mean).</p>",
        "id": 168600484,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561040935
    },
    {
        "content": "<p>That means that this would be ok:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"o\">&lt;</span><span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">zeroed</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// niche is &quot;valid&quot;</span>\n</pre></div>\n\n\n<p>but this wouldn't:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"o\">&lt;</span><span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">uninitialized</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span><span class=\"w\">  </span><span class=\"c1\">// niche is &quot;invalid&quot;</span>\n</pre></div>",
        "id": 168600657,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561041027
    },
    {
        "content": "<p>AFAICT this means that we wouldn't only have to require that the union has at least one valid field to perform niche optimizations, but also that all fields \"share\" at least one niche. E.g., if we had:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">union</span> <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>then I think we could make <code>Option&lt;U&gt;</code> and <code>U</code> have the same size.</p>",
        "id": 168601191,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561041386
    },
    {
        "content": "<blockquote>\n<p>Could we allow Option&lt;MaybeUninit&lt;T&gt;&gt; to have the same size as MaybeUninit&lt;T&gt; ?</p>\n</blockquote>\n<p>given the goals of <code>MaybeUninit</code> I think that is impossible</p>",
        "id": 168601853,
        "sender_full_name": "RalfJ",
        "timestamp": 1561041848
    },
    {
        "content": "<blockquote>\n<p>we wouldn't only have to require that the union has at least one valid field to perform niche optimizations, but also that all fields \"share\" at least one niche</p>\n</blockquote>\n<p>yes</p>",
        "id": 168601881,
        "sender_full_name": "RalfJ",
        "timestamp": 1561041877
    },
    {
        "content": "<p>but I still think we shouldn't</p>",
        "id": 168601891,
        "sender_full_name": "RalfJ",
        "timestamp": 1561041885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> adding a ZST field to an union would have big consequences from a point-of-view of layout optimizations</p>",
        "id": 168602298,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042182
    },
    {
        "content": "<p>that feels brittle</p>",
        "id": 168602315,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042190
    },
    {
        "content": "<p>anyways, your <code>Mix</code> example here: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/73#issuecomment-460572178\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/73#issuecomment-460572178\">https://github.com/rust-lang/unsafe-code-guidelines/issues/73#issuecomment-460572178</a> is not optimizable AFAICT</p>",
        "id": 168602405,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042232
    },
    {
        "content": "<p>the fields there do not share a niche</p>",
        "id": 168602427,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042246
    },
    {
        "content": "<p>absolutely, that's why I brought it up</p>",
        "id": 168602490,
        "sender_full_name": "RalfJ",
        "timestamp": 1561042293
    },
    {
        "content": "<p>I have spelled out the ivnariant that we might use somewhere, and it's basically what you are suggesting here</p>",
        "id": 168602602,
        "sender_full_name": "RalfJ",
        "timestamp": 1561042346
    },
    {
        "content": "<p>is that summarized somewhere ?</p>",
        "id": 168602637,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042375
    },
    {
        "content": "<p>\"for bit/byte at position i of the union, that bit/byte is allowed to have value v if any variant of the union allows the bit/byte at index i to have value v\"</p>",
        "id": 168602641,
        "sender_full_name": "RalfJ",
        "timestamp": 1561042377
    },
    {
        "content": "<p>but I think this is an awful invariant. it is too complicated, it is crazy to check for at run-time, the benefit is too minimal IMO</p>",
        "id": 168602675,
        "sender_full_name": "RalfJ",
        "timestamp": 1561042412
    },
    {
        "content": "<p>i think we can at least write down the validity invariant for unions that do not share a niche</p>",
        "id": 168602683,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042416
    },
    {
        "content": "<p>well I think we all agree that if there is a field <code>()</code>, then the union may contain any data</p>",
        "id": 168602759,
        "sender_full_name": "RalfJ",
        "timestamp": 1561042449
    },
    {
        "content": "<p>yes</p>",
        "id": 168602779,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042462
    },
    {
        "content": "<p>niche as a notion is <em>derived from</em> validity invariant, so defining validity in terms of niche is a bit cyclic ;)</p>",
        "id": 168602796,
        "sender_full_name": "RalfJ",
        "timestamp": 1561042477
    },
    {
        "content": "<p>I thought niche was being moved to layout, maybe ?</p>",
        "id": 168603291,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042809
    },
    {
        "content": "<p>I can't remember, there was an issue about that somewhere</p>",
        "id": 168603325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1561042827
    }
]