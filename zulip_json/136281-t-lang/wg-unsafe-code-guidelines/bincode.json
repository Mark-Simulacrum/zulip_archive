[
    {
        "content": "<p>is this safe? <a href=\"https://github.com/TyOverby/bincode/blob/72bb6ef050f065161d476ce2ee0231140eb08d2a/src/de/read.rs#L144-L149\" target=\"_blank\" title=\"https://github.com/TyOverby/bincode/blob/72bb6ef050f065161d476ce2ee0231140eb08d2a/src/de/read.rs#L144-L149\">https://github.com/TyOverby/bincode/blob/72bb6ef050f065161d476ce2ee0231140eb08d2a/src/de/read.rs#L144-L149</a></p>",
        "id": 156962636,
        "sender_full_name": "Jethro",
        "timestamp": 1548576449
    },
    {
        "content": "<p>I don't think it is. If <code>self.reader.read_exact</code> doesn't fill the buffer (e.g. there is an I/O error while reading, or it's implemented incorrectly, or it panics for some reason) then this code exposes uninitialized bytes to the world. And while it's still up for debate whether there are <em>some</em> things that can be done in careful unsafe code with uninitialized bytes, it's certain that uninitialized memory can lead to UB when used in unsuspecting safe code.</p>",
        "id": 156968345,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548588124
    },
    {
        "content": "<p>It also exposes uninitialized memory to the implementation of <code>read_exact</code> so if that reads from the buffer (which it \"shouldn't\" but safe code can do it) it'll get uninitialized bytes too, with the same consequences.</p>",
        "id": 156968362,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548588226
    },
    {
        "content": "<p>yeah I was thinking the same</p>",
        "id": 156969304,
        "sender_full_name": "Jethro",
        "timestamp": 1548589846
    },
    {
        "content": "<p>I would <em>like</em> it to be the case that passing a slice of uninitialized memory to read, read_exact, etc. is not UB</p>",
        "id": 156969468,
        "sender_full_name": "Jethro",
        "timestamp": 1548590175
    },
    {
        "content": "<p>for this to work with <em>unknown</em> implementations of <code>Read</code>, we'd have to make these functions unsafe</p>",
        "id": 156973110,
        "sender_full_name": "RalfJ",
        "timestamp": 1548597248
    },
    {
        "content": "<p>Oh yeah I guess you're right. This seems to be a compelling argument for &amp;uninit</p>",
        "id": 156975886,
        "sender_full_name": "Jethro",
        "timestamp": 1548602866
    },
    {
        "content": "<p>What is usually done is <code>set_len</code> <em>after</em> you know the length.</p>",
        "id": 156975995,
        "sender_full_name": "nagisa",
        "timestamp": 1548603012
    },
    {
        "content": "<p>but then you need to figure out how to get yourself the buffer before set_len is made <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 156976000,
        "sender_full_name": "nagisa",
        "timestamp": 1548603061
    },
    {
        "content": "<blockquote>\n<p>Oh yeah I guess you're right. This seems to be a compelling argument for &amp;uninit</p>\n</blockquote>\n<p>an alternative might be to use <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code></p>",
        "id": 156981245,
        "sender_full_name": "RalfJ",
        "timestamp": 1548612187
    },
    {
        "content": "<p>that doesn't encode that the data will be initialized, but it also doesn't require an all-new reference type</p>",
        "id": 156981254,
        "sender_full_name": "RalfJ",
        "timestamp": 1548612218
    }
]