[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ehmm I actually argued that we should remain compatible with C ? I opened that issue because of due process, because most of you actually agreed that supporting platforms that are \"weird\" was not worth doing</p>",
        "id": 151115441,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544193295
    },
    {
        "content": "<p>saying <code>bool == _Bool</code> is incompatible with <code>CHAR_BITS == 8</code> and pretty much anything else with respect to C FFI AFAICT</p>",
        "id": 151115470,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544193336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I don't care the slightest what we say about the size of <code>bool</code></p>",
        "id": 151115850,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193657
    },
    {
        "content": "<blockquote>\n<p>saying <code>bool == _Bool</code> is incompatible with <code>CHAR_BITS == 8</code> and pretty much anything else with respect to C FFI AFAICT</p>\n</blockquote>\n<p>no it isn't?</p>",
        "id": 151115864,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193665
    },
    {
        "content": "<p><code>CHAR_BITS == 8</code> just means \"we dont care about platforms where that condition does not hold\"</p>",
        "id": 151115882,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193685
    },
    {
        "content": "<p>If <code>CHAR_BITS != 8</code>, then <code>bool != _Bool</code></p>",
        "id": 151115884,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544193686
    },
    {
        "content": "<p>no</p>",
        "id": 151115891,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193692
    },
    {
        "content": "<p>it just makes such platforms out-of-scope</p>",
        "id": 151115897,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193698
    },
    {
        "content": "<p><code>bool == _Bool</code> means \"on all platforms we support, this holds\"</p>",
        "id": 151115908,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193708
    },
    {
        "content": "<p>or, put differently: <code>CHAR_BITS == 8</code> means that we pretend that platforms where <code>CHAR_BITS != 8</code> do not exist. If they happen to exist (and I know they do but that's not the point), we just do not care about them, do not want to support them.</p>",
        "id": 151116040,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193819
    },
    {
        "content": "<p>I do not see how that in any way implies anything about <code>bool</code></p>",
        "id": 151116047,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193830
    },
    {
        "content": "<p><code>bool == _Bool</code> means on all platform we will ever support, this must hold, not just \"hold on C FFI\"</p>",
        "id": 151116194,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544193958
    },
    {
        "content": "<p>yes?</p>",
        "id": 151116247,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193975
    },
    {
        "content": "<p>this means that if the requirement <code>bool == _Bool</code> cannot be satisfied, then that platform cannot be targetted at all AFAICT</p>",
        "id": 151116256,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544193985
    },
    {
        "content": "<p>and all platforms we ever support will have <code>CHAR_BITS == 8</code></p>",
        "id": 151116260,
        "sender_full_name": "RalfJ",
        "timestamp": 1544193987
    },
    {
        "content": "<p>that's what \"assuming <code>CHAR_BITS == 8</code>\" means</p>",
        "id": 151116274,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194007
    },
    {
        "content": "<p>not really</p>",
        "id": 151116297,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194027
    },
    {
        "content": "<p>I dont know what you mean by \"hold on C FFI\".</p>",
        "id": 151116316,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194040
    },
    {
        "content": "<blockquote>\n<p>not really</p>\n</blockquote>\n<p>what else could it mean? we make an assumption, so platforms that dont satisfy that assumption are not supported.</p>",
        "id": 151116347,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194073
    },
    {
        "content": "<p>the difference is that <code>CHAR_BITS == 8</code>is required to, e.g., use a bool properly in C FFI, if C has a <code>CHAR_BITS == 16</code>, then you could pass an <code>u16</code> to communicate a \"bool\" with C</p>",
        "id": 151116353,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194076
    },
    {
        "content": "<p>if C has <code>CHAR_BITS == 16</code> Rust does not run on that platform.</p>",
        "id": 151116463,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194136
    },
    {
        "content": "<p>why not ?</p>",
        "id": 151116487,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194152
    },
    {
        "content": "<p>you said yourself we assume <code>CHAR_BITS == 8</code></p>",
        "id": 151116500,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194163
    },
    {
        "content": "<p>of course it does, as long as you don't use C FFI, it doesn't really matter</p>",
        "id": 151116504,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194167
    },
    {
        "content": "<p>you are really confusing me^^</p>",
        "id": 151116506,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194168
    },
    {
        "content": "<p>we expect <code>CHAR_BITS == 8</code> to be able to do C FFI with some Rust types with a C ABI</p>",
        "id": 151116527,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194186
    },
    {
        "content": "<p>oh, you are saying <code>CHAR_BITS == 8</code> is just a requirement to do C FFI? not a requirement to run at all on that platform?</p>",
        "id": 151116549,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194199
    },
    {
        "content": "<p>that's not at all how I read these things</p>",
        "id": 151116597,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194208
    },
    {
        "content": "<p>iff <code>CHAR_BITS != 8</code>, then we can't maybe use <code>bool</code> on C FFI, but we could use something else</p>",
        "id": 151116616,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194219
    },
    {
        "content": "<p>even assuming that is the intended interpretation (not sure if it is, doesnt sound unreasonable): this still means that if <code>CHAR_BITS != 8</code>, you cannot do FFI, so <code>_Bool</code> literally doesnt matter</p>",
        "id": 151116634,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194255
    },
    {
        "content": "<p>you can do FFI, but not necessarily with the same types that you use in a platform where <code>CHAR_BITS == 8</code>.</p>",
        "id": 151116669,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194297
    },
    {
        "content": "<p>talking about C types like <code>_Bool</code> only makes sense in the context of FFI</p>",
        "id": 151116670,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194298
    },
    {
        "content": "<blockquote>\n<p>you can do FFI, but not necessarily with the same types that you use in a platform where <code>CHAR_BITS == 8</code>.</p>\n</blockquote>\n<p>now you are <em>really</em> stretching the assumption here. I think that is an unreasonable interpretation.</p>",
        "id": 151116745,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194327
    },
    {
        "content": "<p>the difference is that <code>bool == _Bool</code> impacts all Rust code using <code>bool</code>, not just the tiny portion of code trying to communicate with C's <code>_Bool</code> via C FFI</p>",
        "id": 151116755,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194334
    },
    {
        "content": "<p>we said <code>CHAR_BITS == 8</code> because other platforms are so niche we dont care about them</p>",
        "id": 151116768,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194346
    },
    {
        "content": "<p>because we <em>dont want to have these silly discussions</em></p>",
        "id": 151116786,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194359
    },
    {
        "content": "<p>now you are reinterpreting that statement in a way such that suddenly platforms violating our assumtpions can matter again. that's not what these assumptions are for.</p>",
        "id": 151116816,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> mentioned that they rely on doing C FFI with those platforms</p>",
        "id": 151116840,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194411
    },
    {
        "content": "<p>well, they should talk with <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> then who declared such platforms out-of-scope</p>",
        "id": 151116857,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> also declared platforms with <code>bool == _Bool</code> out of scope</p>",
        "id": 151116911,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194449
    },
    {
        "content": "<p>you mean <code>!=</code>?</p>",
        "id": 151116932,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194465
    },
    {
        "content": "<p>when they stated that we don't care about bool with size != 1</p>",
        "id": 151116942,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194475
    },
    {
        "content": "<p>well that statement is tautological</p>",
        "id": 151116945,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194476
    },
    {
        "content": "<p>we defined <code>bool == _Bool</code> so it holds for all supported platforms^^</p>",
        "id": 151116955,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194486
    },
    {
        "content": "<p>what platforms is brian doing this on?</p>",
        "id": 151116989,
        "sender_full_name": "Gankra",
        "timestamp": 1544194523
    },
    {
        "content": "<p>so this is really a discussion about some people anyway wanting to support such obscure platforms. okay. but then let's frame it as such, not pretend that this is about <code>bool</code> which it isn't.</p>",
        "id": 151116993,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194528
    },
    {
        "content": "<p>? <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I argued that <code>bool</code> with size == 1 is the only thing worth supporting in Rust</p>",
        "id": 151117061,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194574
    },
    {
        "content": "<p>that does not imply that doing C FFI with platforms where the machine code on the other side expects something different has to be impossible</p>",
        "id": 151117100,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> you argued that <code>bool == _Bool</code> is somehow incompatible with <code>CHAR_SIZE == 8</code>. I think that's logically wrong. that's why I commented.</p>",
        "id": 151117108,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194613
    },
    {
        "content": "<p>it is, because <code>_Bool</code> is defined for all <code>CHAR_SIZE</code>s</p>",
        "id": 151117128,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194634
    },
    {
        "content": "<p>it is not, because we cant do no FFI on platforms on which we dont support FFI, and hence <code>_Bool</code> just doesnt matter there. if your goal is to add <code>sizeof(_Bool) == 1</code> to our platforms requirements, that's cool, but please say so :)</p>",
        "id": 151117235,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194685
    },
    {
        "content": "<p>no, i am not proposing that, i proposed that <code>bool</code> has size of 1, <code>_Bool</code> can have whatever size it wants, doesn't really matter</p>",
        "id": 151117278,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194735
    },
    {
        "content": "<p>if <code>_Bool</code> has size 2, and our <code>bool</code> has size 1, then if you only write Rust code, or C code, and they don't interact, then both programs are correct and work and are portable</p>",
        "id": 151117317,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194787
    },
    {
        "content": "<p>the problem is if you try to use <code>bool</code> in C FFI, and the other side (C, assembly, or some other code) expects a type with size 2, and you provide a type with size 1</p>",
        "id": 151117397,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194815
    },
    {
        "content": "<p>then that's a problem, but if on the Rust side you pass an <code>u16</code>, and then cast it to a <code>bool</code>, then that's ok</p>",
        "id": 151117412,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194834
    },
    {
        "content": "<p>I am not willing to follow your strange interpretation of \"no FFI support for <code>CHAR_SIZE != 8</code>\" meaning \"you can still do FFI but have to be a bit more careful around integer types\". I think \"no FFI support for <code>CHAR_SIZE != 8</code>\" means \"<strong>no FFI support</strong> for <code>CHAR_SIZE != 8</code>\" and if you insist on doing FFI anyway, literally anything might happen and your use case is just too niche for us to even consider it in these discussions.</p>",
        "id": 151117422,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194848
    },
    {
        "content": "<p>so for you, if C breaks any of Rust requirements, no C FFI is possible at all</p>",
        "id": 151117477,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194908
    },
    {
        "content": "<p>yes</p>",
        "id": 151117484,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194919
    },
    {
        "content": "<p>that's the point of making such assumptions</p>",
        "id": 151117527,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194930
    },
    {
        "content": "<p>so that we dont have to spend our afternoons discussing arcane platforms^^</p>",
        "id": 151117540,
        "sender_full_name": "RalfJ",
        "timestamp": 1544194940
    },
    {
        "content": "<p>so I am 100% against that</p>",
        "id": 151117551,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194956
    },
    {
        "content": "<p>the assumptions aren't a zero sum game</p>",
        "id": 151117577,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544194978
    },
    {
        "content": "<p>so you want some kind of \"degraded FFI\" to still be possible for platforms violating platform assumptions?</p>",
        "id": 151117611,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195017
    },
    {
        "content": "<p>the thing is, we use C FFI for interacting with everything that is not rust</p>",
        "id": 151117623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195038
    },
    {
        "content": "<p>if I have a 99.999999% Rust program, and need to link an assembly blob and call it via C FFI, i am in control of everything, and don't really care what the size of <code>_Bool</code> in the platform is, only what Rust actually expects</p>",
        "id": 151117700,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195089
    },
    {
        "content": "<p>I can see why you would want that, but I don't think that \"we only support C with <code>CHAR_SIZE == 8</code>\" leaves room for that interpretaion. so I think what you are proposing is to go back even further and say that we do want to support some things on <code>CHAR_SIZE != 8</code>. you have to take it up with <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> from there, I don't really have a stanza here ;)</p>",
        "id": 151117709,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195097
    },
    {
        "content": "<p>so forbidding all C FFI is just too much</p>",
        "id": 151117722,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195105
    },
    {
        "content": "<p>i can live with it, but I just want some concrete platforms we care about enabling with this</p>",
        "id": 151117764,
        "sender_full_name": "Gankra",
        "timestamp": 1544195152
    },
    {
        "content": "<p>I think that if <code>bool != _Bool</code> then using <code>bool</code> on C FFI should just warn that <code>bool</code> is an improper C type</p>",
        "id": 151117769,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195156
    },
    {
        "content": "<p>we can then specify <code>bool</code> as it makes sense for Rust, and it just so happens that it makes sense for all C platforms that we support today (and who knows, maybe ever)</p>",
        "id": 151117855,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195219
    },
    {
        "content": "<p>if a C platform does not support it how we need it, then people will need to figure out how to interface with that platform via C FFI, but that should not require making <code>bool</code>s weird for all Rust code</p>",
        "id": 151117886,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195267
    },
    {
        "content": "<p>it should not make interfacing with the platform impossible either</p>",
        "id": 151117954,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195303
    },
    {
        "content": "<p>the goal of that decision (<code>bool</code> == <code>_Bool</code>) was to avoid people using a <code>c_bool</code> type for FFI. your proposal is in direct contradiction to that.</p>",
        "id": 151118236,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195581
    },
    {
        "content": "<p>And the rationale of the decision stated that another goal was for people to use <code>bool</code> in Rust instead of <code>u8</code> to get a \"1 byte wide\" bool, but that goal was not met with the decision</p>",
        "id": 151118287,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195628
    },
    {
        "content": "<p>I think it is fairly clear from the text that the teams were aware that this could mean that bool has size != 1 on some platforms</p>",
        "id": 151118378,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195697
    },
    {
        "content": "<p>boats explicitly wrote</p>\n<blockquote>\n<p>We document this, and also document that on every platform we currently support, this means that the size of bool is 1.</p>\n</blockquote>",
        "id": 151118425,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195751
    },
    {
        "content": "<p>so I dont know why you claim they wanted <code>bool</code> to have size 1 on all platforms</p>",
        "id": 151118426,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195751
    },
    {
        "content": "<p>Yet <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> and others have argued since that guaranteeing that bool has a size of 1 is worth it because supporting those platforms isn't worth it</p>",
        "id": 151118434,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195758
    },
    {
        "content": "<p>you seem to be arguing that supporting those platforms isn't worth it yourself</p>",
        "id": 151118487,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195775
    },
    {
        "content": "<p>nono dont shift arguments</p>",
        "id": 151118499,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195789
    },
    {
        "content": "<p>first, the team decision</p>",
        "id": 151118508,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195795
    },
    {
        "content": "<p>as i mentioned, is unclear, the PR that implemented the decision just specified that <code>bool</code> has size of <code>1</code>, but I suppose that's what they meant with only documenting it for the platforms that we support now</p>",
        "id": 151118543,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> 's Layout and ABI post sets it as size of 1, not as <code>_Bool</code></p>",
        "id": 151118625,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195889
    },
    {
        "content": "<p>do you argee that they were aware that this could mean bool has size != 1 on some platforms?</p>",
        "id": 151118646,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195907
    },
    {
        "content": "<p>they were aware, and they were aware that that could be a problem</p>",
        "id": 151118683,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195952
    },
    {
        "content": "<p>but all options have problems</p>",
        "id": 151118692,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544195964
    },
    {
        "content": "<p>and they decided anyway. so let's document that.</p>",
        "id": 151118697,
        "sender_full_name": "RalfJ",
        "timestamp": 1544195967
    },
    {
        "content": "<p>i was tasked in the last meeting to open an issue an involve those from those dicussions to 1) clarify more precisely what they meant, and 2) discuss new information</p>",
        "id": 151118775,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196011
    },
    {
        "content": "<p>and then you and <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> and <span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> can discuss which assumptions we make about C platforms, and which consequences that has, and maybe you want to write an RFC to change the <code>bool</code> decision. but <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span>'s proposed requirements are not in contradiction with the team decision, nor is any subset of them. you just dont like the consequences of that decision combined with some undecided assumptions.</p>",
        "id": 151118803,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196039
    },
    {
        "content": "<p>that <span class=\"user-mention\" data-user-id=\"126854\">@avadacatavra</span> post should document <code>bool == _Bool</code> for the time being until that was resolved was also decided in the last meeting</p>",
        "id": 151118808,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196045
    },
    {
        "content": "<p>i don't recall saying anything about an RFC, somebody argued that when that decision was made not all options might have been considered</p>",
        "id": 151118869,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196102
    },
    {
        "content": "<p>e.g. the possibility of diagnosing improper usage of <code>bool</code> on C FFI on the platforms in which its usage is not proper</p>",
        "id": 151118951,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196156
    },
    {
        "content": "<p>I think you need an RFC to change that decision</p>",
        "id": 151118952,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196157
    },
    {
        "content": "<p>maybe? its unclear whether its even worth changing, which is why the issue was opened</p>",
        "id": 151118990,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196203
    },
    {
        "content": "<p>even if it would be worth changing, none of those decision went through the RFC process, so a mini-FCP might be enough</p>",
        "id": 151119093,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196324
    },
    {
        "content": "<p>but anyway, I am going to do something else now because I learned what I wanted to learn from this discussion^^ I hope maybe I was able to at least convey why the way you are framing things is terribly confusing.</p>\n<p>If I could make a suggestion: start by writing down the high-level problem statement (\"which kind of platforms do we want to support FFI on, and what consequences does it have on the rest of the language if we support certain arcane things, and how badly do things degrade on non-supported platforms\"). There's an entire matrix of possible decisions and consequences here and only in a few cells of this matrix does the <code>bool == _Bool</code> decision become a problem. Starting with some nitty-gritty detail that is a consequence of several not-yet-made-decisions is really hard to follow.</p>",
        "id": 151119103,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196338
    },
    {
        "content": "<p>That's what the first post of the issue attempted to do</p>",
        "id": 151119212,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196448
    },
    {
        "content": "<p>the title says it's all about bool, but I think if I understood one thing here then its that that's not the case</p>",
        "id": 151119312,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196570
    },
    {
        "content": "<p>If we just say <code>bool == _Bool</code> then unsafe code cannot rely on the size of <code>bool</code>, the bit patterns of true and false, etc.</p>",
        "id": 151119366,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196604
    },
    {
        "content": "<p>transmute might comply loudly about this, but type punning through an union won't</p>",
        "id": 151119380,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196624
    },
    {
        "content": "<p>guaranteeing anything more at all about <code>bool</code> is incompatible with the T-lang and T-compiler decision that <code>bool == _Bool</code></p>",
        "id": 151119434,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196680
    },
    {
        "content": "<p>I agree with that observation</p>",
        "id": 151119462,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196705
    },
    {
        "content": "<p>but that is a discussion that's mostly independent of C platform requirements and FFI</p>",
        "id": 151119528,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196744
    },
    {
        "content": "<p>there is an intersection at \"we could just require the C platform to be like most of them are\"</p>",
        "id": 151119555,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196780
    },
    {
        "content": "<p>if C20 and C++20 goes as expected, then the bit patterns of bool become fixed, as long as we require C20 compatibility, which the T-compiler and T-lang did not do, otherwise they still are unspecified</p>",
        "id": 151119563,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196789
    },
    {
        "content": "<p>the size of <code>bool</code> would still remain unspecified</p>",
        "id": 151119583,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544196814
    },
    {
        "content": "<p>but both discussions (the bool discussion and the C platform requirements discussion) go way beyond that, and your issue is mixing all of these three things up in a messy way I'm afraid</p>",
        "id": 151119593,
        "sender_full_name": "RalfJ",
        "timestamp": 1544196826
    },
    {
        "content": "<p>I mean the issue has two questions at the end that would be nice to resolve: what C standard does <code>_Bool</code> need to abide, if any ? (If we don't specify any, unsafe Rust can at most assume C99) If we specify one, then that fixes some things that unsafe Rust is allowed to assume about bool</p>",
        "id": 151119847,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544197073
    },
    {
        "content": "<p>And the second question is: do we want / is it worth it to require <code>bool</code> to have a size and alignment of 1. That would be something that unsafe Rust would be able to assume that it cannot assume right now.</p>",
        "id": 151119927,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544197122
    },
    {
        "content": "<p>Even if UCG just says \"<code>bool == _Bool</code>\" it would be nicer if it could say <code>_Bool</code> according to which C standard.</p>",
        "id": 151119974,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544197169
    },
    {
        "content": "<p>I don't have the time to be dragged deep into this discussion but I want to point out that besides \"C platforms with weird bools\" being mostly or entirely hypothetical, code (including unsafe code) <em>can</em> assume things that are not technically true about every platform Rust might ever target (such as maybe bool being a byte), if it only works on platforms where that is true. Bools are not the first and by far not the most realistic example where one might want to do that. \"Complete portability\" including to such weirdo platforms is neither achievable nor desirable for 99.99% of software anyway, <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/9#issuecomment-419892030\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/9#issuecomment-419892030\">as I have argued previously</a>.</p>",
        "id": 151120338,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544197469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> the question is whether we should guarantee that so that most people don't have to assume this \"at their own risk\"</p>",
        "id": 151123218,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544199974
    },
    {
        "content": "<p>people targetting platforms with weird <code>bool</code>s are going to have bigger problems than \"I can't use <code>bool</code> on C FFI and <code>c_bool</code> is not a thing\".</p>",
        "id": 151123255,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200009
    },
    {
        "content": "<p>The ship for such a simple question has sailed. Now it's knee deep in \"wtf even is C in practice\" and other annoying enigmas.</p>",
        "id": 151123289,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200043
    },
    {
        "content": "<p>we should not make targetting those platforms \"impossible\", but I don't think it is worth it to leave all properties of <code>bool</code> unspecified just to make something hard only slightly less hard</p>",
        "id": 151123311,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> what do you mean with \"has sailed\" ?</p>",
        "id": 151123373,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200102
    },
    {
        "content": "<p>We're now in the situation that we have a settled policy/framing that covers all the remotely normal platforms. Even raising the possibility of re-litigating bool layout necessarily gets deep into hypothetical or long-dead platforms and the extremely hard and annoying topic of \"platforms with no/outdated/non-conforming C platforms\".</p>",
        "id": 151123436,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200200
    },
    {
        "content": "<p>Which is also why this is such an intensely frustrating discussion.</p>",
        "id": 151123494,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200211
    },
    {
        "content": "<p>it's not \"at their own risk\". it's unsafe code being less portable than general Rust code. That's okay, they should just document that (and ideally make sure that their code fails to compile on unsupported platforms)</p>",
        "id": 151123593,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200298
    },
    {
        "content": "<p>they might need to test for bitpatterns of true and false and many other annoying things</p>",
        "id": 151123663,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200326
    },
    {
        "content": "<p>updating our notion of <code>_Bool</code> together with C/C++ seems perfectly reasonable, I dont think anyone would disagree with that</p>",
        "id": 151123675,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200340
    },
    {
        "content": "<p>so the only remaining question is the size</p>",
        "id": 151123680,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200347
    },
    {
        "content": "<p>all it takes is for someone to write a crate that performs bool &lt;-&gt; u8 conversion (checked and unchecked) and makes sure it fails to compile if the types dont match. then tell everyone else to use that crate <em>if</em> they really need to inspect bool bit-wise. no magic needed.</p>",
        "id": 151123761,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200423
    },
    {
        "content": "<p>What value does leaving the size unspecified add ?</p>",
        "id": 151123773,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200436
    },
    {
        "content": "<p>supporting FFI on platforms where the size is different</p>",
        "id": 151123824,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200452
    },
    {
        "content": "<p>I dont know if we should care</p>",
        "id": 151123826,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200456
    },
    {
        "content": "<p>just saying both options are reasonable</p>",
        "id": 151123842,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200466
    },
    {
        "content": "<p>also, technical conformance with C/C++, which eliminates one reason why people might think they need a c_bool</p>",
        "id": 151123851,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200474
    },
    {
        "content": "<p>(at least \"more\" conformance, depending on the version of C and C++ in question)</p>",
        "id": 151123895,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200516
    },
    {
        "content": "<p>I don't know what real value that adds. Chances are, lot of Rust code won't be usable on those platforms either =/</p>",
        "id": 151123904,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200526
    },
    {
        "content": "<p>Would definitely be one thing less to deal with when porting existing code to those platforms</p>",
        "id": 151123923,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200555
    },
    {
        "content": "<p>I think the concern boats cited -- people worrying about FFI mismatches and defining/seeking a c_bool type -- is a real danger even if, as is currently the case, _Bool is a byte on every platform Rust is ever ported to</p>",
        "id": 151123976,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200579
    },
    {
        "content": "<p>it's not a <em>portability</em> danger, but a danger to code quality and people's time</p>",
        "id": 151123994,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200601
    },
    {
        "content": "<p>i think so too</p>",
        "id": 151124003,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200615
    },
    {
        "content": "<p>though clearly the decision made by the teams then is also a danger of people's time because it seems we are going to have this discussion every 2 years or so^^</p>",
        "id": 151124016,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200636
    },
    {
        "content": "<p>but it's the time of the sort of nerd who willingly gets into this sort of debate, not the time of normal rust users</p>",
        "id": 151124046,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200669
    },
    {
        "content": "<p>I got nerdsniped. I dont even care about portability. :P</p>",
        "id": 151124100,
        "sender_full_name": "RalfJ",
        "timestamp": 1544200686
    },
    {
        "content": "<p>boats also mentioned the opposite concern, that people would use <code>struct Bool(u8)</code> in Rust to make sure that in such platforms some <code>bool</code>s are indeed 1 byte wide</p>",
        "id": 151124113,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200698
    },
    {
        "content": "<p>i got nerdsniped too</p>",
        "id": 151124120,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200708
    },
    {
        "content": "<p>honestly I wish we would just have gone the <code>c_bool</code> way</p>",
        "id": 151124264,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200856
    },
    {
        "content": "<p>I wish C wasn't such a vague standard</p>",
        "id": 151124304,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200896
    },
    {
        "content": "<p>those are type aliases, not new types, so you can pass <code>bool</code> to it and call it a day</p>",
        "id": 151124306,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200896
    },
    {
        "content": "<p>I <em>know</em> if it's a type alias some people are going to treat them as separate types anyway and develop a phobia to just using <code>bool</code> in FFI-adjacent Rust code</p>",
        "id": 151124403,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544200938
    },
    {
        "content": "<p>I just don't write FFI-adjacent code that often</p>",
        "id": 151124436,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544200969
    },
    {
        "content": "<p>I find the trade off of sane reliable bools everywhere with a bit of \"unfounded\" paranoia in C FFI code acceptable</p>",
        "id": 151124505,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544201031
    },
    {
        "content": "<p>I really don't care strongly enough about hypothetical weirdo platforms which effectively puts me in the camp of the status quo (which is bool == _Bool)</p>",
        "id": 151124603,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544201088
    },
    {
        "content": "<p>users doing C FFI have to know better anyways</p>",
        "id": 151124606,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544201089
    },
    {
        "content": "<p>I'll leave it at that</p>",
        "id": 151124612,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544201094
    },
    {
        "content": "<blockquote>\n<p>I really don't care strongly enough about hypothetical weirdo platforms which effectively puts me in the camp of the status quo (which is bool == _Bool)</p>\n</blockquote>\n<p>I think you are in camp \"require sizeof(_Bool) == 1 for FFI\", which is different (it is stronger)</p>",
        "id": 151124652,
        "sender_full_name": "RalfJ",
        "timestamp": 1544201125
    },
    {
        "content": "<p>bool == _Bool is explicitly the standing team decision, I don't care enough about the subject to tease out corollaries from it (if this even is one)</p>",
        "id": 151124728,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1544201175
    },
    {
        "content": "<p>if one never targets a platform where <code>sizeof(_Bool) != 1</code> then it doesn't really matter whether that is required or not, you can just assume it</p>",
        "id": 151124809,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544201240
    },
    {
        "content": "<p>and write code accordingly</p>",
        "id": 151124827,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544201257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> it's not a corollary. I just interpreted your \"dont care about weirdo platforms\".</p>",
        "id": 151125086,
        "sender_full_name": "RalfJ",
        "timestamp": 1544201447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I haven't followed the whole discussion but I didn't say that I need to support any platform with CHAR_BITS != 8 nor _Bool not being equivalent to Rust's bool.</p>",
        "id": 151125852,
        "sender_full_name": "briansmith",
        "timestamp": 1544202065
    },
    {
        "content": "<p>IIRC, I did say that it seems possible to support platforms that have a different representation of <code>_Bool</code> by just not allowing <code>bool</code> in <code>#[repr(C)]</code> types and not allowing <code>bool</code> in <code>extern \"C\"</code> declarations when targetting those platforms.</p>",
        "id": 151125939,
        "sender_full_name": "briansmith",
        "timestamp": 1544202140
    },
    {
        "content": "<p>Whether that's a good idea or not, I don't know and I don't particularly care.</p>",
        "id": 151125964,
        "sender_full_name": "briansmith",
        "timestamp": 1544202164
    },
    {
        "content": "<p>Last year there was some effort to define a mechanism to say that certain platforms don't support certain things. For example, it is very useful to allow <code>impl From&lt;u32&gt; for usize</code> and <code>impl From&lt;usize&gt; for u64</code> and it would work fine 99% of the time, but if you want to support 16-bit platforms then you can't have <code>impl From&lt;u32&gt; for usize</code> on that platform.</p>",
        "id": 151126095,
        "sender_full_name": "briansmith",
        "timestamp": 1544202270
    },
    {
        "content": "<p>It seems like a more general problem and if there were a more general solution to this kind of subsetting then I think it would also solve disputes like this. But a more general subsetting mechanism seems to have made no progress.</p>",
        "id": 151126197,
        "sender_full_name": "briansmith",
        "timestamp": 1544202365
    }
]