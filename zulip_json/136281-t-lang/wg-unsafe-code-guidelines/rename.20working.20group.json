[
    {
        "content": "<p>We've talked about this before, but what's the purpose of the working group and how does the name reflect that ?</p>\n<p>\"Unsafe code guidelines\" reads as if the goal and purpose of the working group was to write down some guidelines for unsafe code, yet I don't think we have written a single guideline anywhere yet. Looking at the documents, we have defined the layout of Rust types, and provided layout guarantees, and in the issues, PRs and WIP documents, we are now dealing with what is the value representation of Rust types, which value representations are allowed, and which optimizations are guaranteed to happen for invalid value representations. There are also documents about an aliasing model, a memory model, and some do mention operational semantics, etc.</p>\n<p>None of these look like \"guidelines\" at all, at least, not in the sense of, for example, the \"API guidelines\", which users are safe to just ignore. From the POV of releasing a first RFC at some point, \"UCG RFC\" would be a weird title if the document does not contain any guidelines at all. </p>\n<p>I don't really know how we could give any guidelines to unsafe code, without a formal spec backing those up, but everything that has happened here does look like the first little steps towards a formal spec for Rust.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 172054842,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564505364
    },
    {
        "content": "<p>maybe UCG is for \"Unsafe Code Group\"? ;)</p>",
        "id": 172063325,
        "sender_full_name": "RalfJ",
        "timestamp": 1564511195
    },
    {
        "content": "<blockquote>\n<p>PR WIP API POV RFC UCG RFC</p>\n</blockquote>",
        "id": 172067218,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564513806
    },
    {
        "content": "<p>I feel like working groups should have an end goal and be disbanded when the goal is achieved. With that view, the guidelines would answer the question \"how can I write safe <code>unsafe</code> Rust?\".</p>\n<p>There's indeed a lot of steps from A to B.</p>",
        "id": 172067413,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564513952
    },
    {
        "content": "<p>But having a specific goal can allow you to evaluate if a given point falls within the purview of the working group</p>",
        "id": 172067700,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564514175
    },
    {
        "content": "<p>I'd rename the WG to \"The machinists\" ;)</p>",
        "id": 172077711,
        "sender_full_name": "centril",
        "timestamp": 1564521817
    },
    {
        "content": "<p>the specific goal could be a spec for unsafe code. \"UCS WG\"?</p>",
        "id": 172078692,
        "sender_full_name": "RalfJ",
        "timestamp": 1564522679
    },
    {
        "content": "<p>I don't know how you write your unsafe code, but simply specifying all you can is very literally the only thing that all the unsafe coders I know need</p>",
        "id": 172094741,
        "sender_full_name": "Lokathor",
        "timestamp": 1564541082
    },
    {
        "content": "<p>People interested in unsafe code just need a clear set of \"physics\" for what goes on in rust when you step behind the curtain, and they'll do all the rest on their own quite well</p>",
        "id": 172094765,
        "sender_full_name": "Lokathor",
        "timestamp": 1564541144
    },
    {
        "content": "<p>^^ If that's the case, then perhaps we should rename it \"The Avoiding-UB Working Group\" because that's the primary \"physics\" that they need to deal with when they \"step behind the curtain\".</p>",
        "id": 172100612,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564551278
    },
    {
        "content": "<p>or maybe just the \"UB working group\" and then people just have to avoid us :P</p>",
        "id": 172103842,
        "sender_full_name": "RalfJ",
        "timestamp": 1564556563
    },
    {
        "content": "<p>however I think the WG is actually broader than that (though my own focus is almost entirely on UB); specifying what we guarantee about data type layout is not directly about specifying UB.</p>",
        "id": 172103961,
        "sender_full_name": "RalfJ",
        "timestamp": 1564556708
    },
    {
        "content": "<p>Yeah I think that all the layout work is an important first step but there's definitely later steps as well.</p>",
        "id": 172105888,
        "sender_full_name": "Lokathor",
        "timestamp": 1564559194
    },
    {
        "content": "<blockquote>\n<p>the specific goal could be a spec for unsafe code.</p>\n</blockquote>\n<p>I don't know how to write a spec for unsafe Rust that does not also produce a spec for safe Rust, and hence, Rust itself</p>",
        "id": 172105926,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564559261
    },
    {
        "content": "<blockquote>\n<p>Tom Phinney 7:34 AM   <br>\n^^ If that's the case, then perhaps we should rename it \"The Avoiding-UB Working Group\" because that's the primary \"physics\" that they need to deal with when they \"step behind the curtain\".</p>\n</blockquote>\n<p>Once you add multiple-threads, then you need a memory model to avoid UB around atomics, etc... The \"repo\" was actually called \"memory-model\" before</p>",
        "id": 172106027,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564559365
    },
    {
        "content": "<p>FWIW I think that what we need is a language spec for Rust, for where \"what is unsafe code allowed to do\" can be derived</p>",
        "id": 172106093,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564559410
    },
    {
        "content": "<p>Coming up with a language spec is an incremental and iterative process, and we are kind of focusing as \"what guarantees can we provide to unsafe code so that it can answer some question about whether the code is correct\"</p>",
        "id": 172106126,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564559495
    },
    {
        "content": "<p>right now we don't even say whether creating an uninitialized 'u8' is ok, and some people want guarantees about multi-threaded code, signal handlers, data-races, aliasing, ....<br>\nby the time we are able to provide most of those guarantees, a formal spec will have to exist in some form</p>",
        "id": 172106213,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564559637
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>the specific goal could be a spec for unsafe code.</p>\n</blockquote>\n<p>I don't know how to write a spec for unsafe Rust that does not also produce a spec for safe Rust, and hence, Rust itself</p>\n</blockquote>\n<p>agreed. it's just that most of the spec for safe Rust is \"rather obvious\". hence I think it is useful to emphasize the \"unsafe\" or \"UB\" aspect of our work.</p>",
        "id": 172106784,
        "sender_full_name": "RalfJ",
        "timestamp": 1564560191
    },
    {
        "content": "<p>The ISO C++ committe has a study group (SG12) called the Undefined Behavior Study Group (SG12) whose goal is to remove undefined / unspecified behavior from the spec. So maybe we are something like that, in which we try to remove unspecified and undefined behavior from the reference.</p>",
        "id": 172109491,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562973
    },
    {
        "content": "<p>I see our job more as <em>defining</em> what exactly is UB and what is not</p>",
        "id": 172109842,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563246
    },
    {
        "content": "<p>cutting down the amount of UB would be a second step, after we know better which UB we got</p>",
        "id": 172109852,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563261
    },
    {
        "content": "<p>i see going from unspecified to explicitly UB an improvement</p>",
        "id": 172110014,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563404
    },
    {
        "content": "<p>so I suppose we agree</p>",
        "id": 172110027,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563410
    },
    {
        "content": "<blockquote>\n<p>however I think the WG is actually broader than that (though my own focus is almost entirely on UB); specifying what we guarantee about data type layout is not directly about specifying UB.</p>\n</blockquote>\n<p>This is why I somewhat jokingly suggested \"The machinists\" because this WG is mostly about advising the language team on the spec of the abstract machine.</p>",
        "id": 172146081,
        "sender_full_name": "centril",
        "timestamp": 1564593650
    },
    {
        "content": "<p>and guidelines re. unsafe fall out from that</p>",
        "id": 172146114,
        "sender_full_name": "centril",
        "timestamp": 1564593678
    },
    {
        "content": "<blockquote>\n<p>This is why I somewhat jokingly suggested \"The machinists\" because this WG is mostly about advising the language team on the spec of the abstract machine.</p>\n</blockquote>\n<p><code>t-lang/wg-abstract-machine</code> would span all the edge cases (UB, layout, multi-thread) that we're discussing here, and undoubtedly others that we haven't yet considered. It also would mandate that some attention be given to documenting the more-obvious parts of the Rust abstract machine, but 1) that's an eventual requirement for a complete specification of Rust, and 2) much of that can probably be lifted from similar efforts for other languages.</p>",
        "id": 172147939,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564594960
    },
    {
        "content": "<p>Considering how much trouble we've had getting write-ups done so far, I am somewhat skeptical of taking on more \"busy work\" like bikeshedding the best way to write up operational semantics that say eg <code>1 + 1</code> does what one expects</p>",
        "id": 172148449,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564595193
    },
    {
        "content": "<p>agreed <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span>, but I still like \"Rust Abstract Machine WG\", as long as we make sure people still ping us when UB questions come up.</p>",
        "id": 172150065,
        "sender_full_name": "RalfJ",
        "timestamp": 1564596180
    },
    {
        "content": "<p>of course, the main reason I like it is that it entrnches my agenda of putting the abstract machine first, not the set of optimizations that can be performed. ;)</p>",
        "id": 172150150,
        "sender_full_name": "RalfJ",
        "timestamp": 1564596229
    },
    {
        "content": "<blockquote>\n<p>I am somewhat skeptical of taking on more \"busy work\" like bikeshedding the best way to write up operational semantics that say eg 1 + 1 does what one expects</p>\n</blockquote>",
        "id": 172150722,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564596518
    },
    {
        "content": "<p>we wouldn't take that work yet, we would punt it to some time point in the future, in the same way we avoided validity while discussing layout</p>",
        "id": 172150781,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564596549
    },
    {
        "content": "<p>\"The RAM WG\", perfect</p>",
        "id": 172188146,
        "sender_full_name": "Lokathor",
        "timestamp": 1564631012
    },
    {
        "content": "<blockquote>\n<p>\"Rust Abstract Machine WG\"</p>\n</blockquote>\n<p>That sounds good to me.</p>",
        "id": 172306934,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564751495
    },
    {
        "content": "<p>wg-abstract-machine or similar as short</p>",
        "id": 172306959,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564751516
    }
]