[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so the problem is that <code>MaybeUninit&lt;T&gt;</code> does not have the same <code>repr</code> as <code>T</code>, which has performance implications (e.g. if <code>T</code> is <code>repr(simd)</code>) and also means that one cannot use <code>MaybeUninit&lt;T&gt;</code> in C FFI where a <code>T</code> is expected.</p>",
        "id": 148069649,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542749361
    },
    {
        "content": "<p>Given that <code>MaybeUninit&lt;T&gt;</code> is an union with two variants with potentially two different <code>repr</code>s, I don't think that  <code>repr(transparent)</code> makes sense here :/</p>",
        "id": 148069723,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542749434
    },
    {
        "content": "<p>Maybe a way to select from which variant the union gets its <code>repr</code> ?</p>",
        "id": 148069749,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542749481
    },
    {
        "content": "<p>What's been done in <a href=\"https://github.com/rust-lang/rust/issues/55834\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55834\">#55834</a> is to restrict any ABI fiddling to unions with only one non-(size=0, align=1) field, analogously to how transparent structs can have only one such field</p>",
        "id": 148069861,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542749610
    },
    {
        "content": "<p>But I am puzzled by the mention of FFI. Passing or receiving uninitalized data is UB in C, isn't it?</p>",
        "id": 148069870,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542749637
    },
    {
        "content": "<p>oh no i misrepresented <a href=\"https://github.com/rust-lang/rust/issues/55834\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55834\">#55834</a> but anyway it doesn't try to handle arbitrary unions with arbitrary fields and that's the key</p>",
        "id": 148069947,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542749692
    },
    {
        "content": "<p>right but its the same restrictions as for repr(transparent) structs as you said</p>",
        "id": 148070436,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750181
    },
    {
        "content": "<p>so it seems the same attribute would make a lot of sense for unions as well</p>",
        "id": 148070446,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750191
    },
    {
        "content": "<p>also this is just about deciding which ABI to use to pass these guys around; which further restrictions there are in terms of the values you have in there depends on the language on the other side of the FFI interface</p>",
        "id": 148070509,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750244
    },
    {
        "content": "<p>and uninitialized data in C is a complicated topic...</p>",
        "id": 148070520,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750263
    },
    {
        "content": "<p>It's quite complex, yes, but at the end what matters to me is: are there any reasonable Rust programs that benefit from passing MaybeUninit by value across the FFI boundary? Because that is <em>all</em> repr(transparent) is about, you can get any memory layout compatibility you want with repr(C) or (preferably) by Rust deciding to not try to be too clever by half  about union memory layout</p>",
        "id": 148070575,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542750357
    },
    {
        "content": "<p>ack</p>",
        "id": 148070718,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750494
    },
    {
        "content": "<p>for structs, newtypes are a pretty good argument. but \"new-unions\" would be a new pattern to me and I dont think I'd like it^^</p>",
        "id": 148070737,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I guess the slightly higher-level question is whether there is a good reason for passing what is known to be uninitialized data <em>by value</em> across an FFI boundary. With very few (if any) exceptions, uninitialized data should be inside a <code>MaybeUninit</code></p>",
        "id": 148071147,
        "sender_full_name": "RalfJ",
        "timestamp": 1542750909
    },
    {
        "content": "<p>well let's hear it from <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> since they brough up ffi</p>",
        "id": 148071235,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542750984
    },
    {
        "content": "<p>so in stdsimd we use C FFI to call LLVM intrinsics directly...</p>",
        "id": 148071313,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542751079
    },
    {
        "content": "<p>I don't remember if there was a way to obtain <code>undef</code> by doing so, but that's what I had in mind</p>",
        "id": 148071367,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542751103
    },
    {
        "content": "<p>or in other words, just because it is called C FFI does not mean that we are actually doing FFI with C, but for something that exposes the C ABI</p>",
        "id": 148071390,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542751141
    },
    {
        "content": "<p>i don't know what the different C ABIs say about uninitialized memory, but probably they just say nothing</p>",
        "id": 148071413,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542751163
    },
    {
        "content": "<p>it seems reasonable to expect these ABIs to require behaving as if the code being called was C, which would mean that callers can assume that the values being passed cannot be uninitialized, don't know</p>",
        "id": 148071516,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542751251
    },
    {
        "content": "<p>so for stdsimd we don't really need any feature, it can just rely on rustc codegen details (as it already does, heavily, in many other places)</p>",
        "id": 148071804,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542751524
    },
    {
        "content": "<p>non-C code using \"the C ABI\" is interesting, for example one could imagine a Rust library exposing a C ABI, but OTOH I still struggle to imagine needing to pass uninitialized data in those cases</p>",
        "id": 148071894,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542751604
    },
    {
        "content": "<p>yeah, me too, i only had in mind using this when interfacing with LLVM</p>",
        "id": 148078131,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542758592
    },
    {
        "content": "<p>where'd you need it when interfacing with LLVM?</p>",
        "id": 148095835,
        "sender_full_name": "RalfJ",
        "timestamp": 1542789276
    },
    {
        "content": "<p>See: <a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_undefined&amp;expand=5955\" target=\"_blank\" title=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_undefined&amp;expand=5955\">https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_undefined&amp;expand=5955</a></p>\n<p>All these intrinsics return vectors with \"undefined\" elements.</p>",
        "id": 148108513,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805682
    },
    {
        "content": "<p>Some of these intrinsics are already in stable, and they should be returning <code>MaybeUninit&lt;__m128&gt;</code> instead of just <code>__m128</code>.</p>",
        "id": 148108574,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805735
    },
    {
        "content": "<p>Once we can use <code>MaybeUninit</code> in stable APIs, we should try to fix those in a backwards incompatible way (doing a crater run, etc.)</p>",
        "id": 148108595,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> but to construct an <code>MaybeUninit&lt;__m128&gt;</code> you don't need an intrinsic</p>",
        "id": 148108613,
        "sender_full_name": "RalfJ",
        "timestamp": 1542805784
    },
    {
        "content": "<p>just use <code>MaybeUninit::uninitialized()</code></p>",
        "id": 148108617,
        "sender_full_name": "RalfJ",
        "timestamp": 1542805790
    },
    {
        "content": "<p>indeed, I don't know why I have in mind that we were calling into LLVM intrinsics for any of those</p>",
        "id": 148108670,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> can we use <code>MaybeUninit</code> in stable APIs already ?</p>",
        "id": 148108695,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805877
    },
    {
        "content": "<p>that is, is <code>MaybeUninit</code> already stable ?</p>",
        "id": 148108764,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805935
    },
    {
        "content": "<p>Also, the intrinsics \"construct a vector with uninitialized elements\".</p>",
        "id": 148108787,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805974
    },
    {
        "content": "<p>Checking the source code for some, they are built by using <code>__m128(uninitialized(), uninitialized(), ...)</code></p>",
        "id": 148108796,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542805998
    },
    {
        "content": "<p>and not just <code>uninitialized::&lt;__m128&gt;()</code> for some reason</p>",
        "id": 148108807,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542806020
    },
    {
        "content": "<blockquote>\n<p>that is, is <code>MaybeUninit</code> already stable ?</p>\n</blockquote>\n<p>no</p>",
        "id": 148108877,
        "sender_full_name": "RalfJ",
        "timestamp": 1542806104
    },
    {
        "content": "<p>we should first get <a href=\"https://github.com/rust-lang/rust/pull/54668\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54668\">https://github.com/rust-lang/rust/pull/54668</a> landed</p>",
        "id": 148108885,
        "sender_full_name": "RalfJ",
        "timestamp": 1542806123
    },
    {
        "content": "<p>and there are some API discussions in the tracking issue</p>",
        "id": 148108892,
        "sender_full_name": "RalfJ",
        "timestamp": 1542806136
    }
]