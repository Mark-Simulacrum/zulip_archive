[
    {
        "content": "<p>I'm still reading and absorbing information about all of these shenanigans, but how would transferring ownership across FFI look in this brave new world? Something I might write today:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ffi</span>::<span class=\"n\">c_void</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">CallBack</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">user</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">do_it_later</span><span class=\"p\">(</span><span class=\"n\">cb</span>: <span class=\"nc\">CallBack</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">user</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Double</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">shim</span><span class=\"p\">(</span><span class=\"n\">user</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">closure</span>: <span class=\"nc\">Double</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">closure</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f2</span>: <span class=\"nc\">Double</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">do_it_later</span><span class=\"p\">(</span><span class=\"n\">shim</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277406111,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648814529
    },
    {
        "content": "<p>your example contains two different <code>f</code>s <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 277407753,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648815439
    },
    {
        "content": "<p>Name shadowing &gt;&gt;</p>",
        "id": 277408301,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648815693
    },
    {
        "content": "<p>Can you rename it <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> ?</p>",
        "id": 277408360,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648815717
    },
    {
        "content": "<p>I wouldn’t usually</p>",
        "id": 277409008,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648815998
    },
    {
        "content": "<p>Especially considering that the original <code>f</code> is unusable as it’s been moved into the box.</p>",
        "id": 277409119,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648816057
    },
    {
        "content": "<p>I mean to facilitate discussion</p>",
        "id": 277409318,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648816151
    },
    {
        "content": "<p>So we can talk about both unambiguously</p>",
        "id": 277409331,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648816165
    },
    {
        "content": "<p>And read the code more easily</p>",
        "id": 277409346,
        "sender_full_name": "Bram Geron",
        "timestamp": 1648816171
    },
    {
        "content": "<p>I’m interested to see how the non-pointer <code>f</code> ties into provenance.</p>",
        "id": 277409656,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1648816309
    },
    {
        "content": "<p>As far as I know, there is nothing in here that violates strict-provenance, because you aren't doing any ptr&lt;-&gt;int casts. The story on exactly how FFI works seems underdeveloped at best, but I believe you can reasonably assume that the pointer that comes back in the callback has the same provenance it had when you passed it out, so the <code>from_raw</code> works correctly</p>",
        "id": 277420926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648821102
    }
]