[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't think a &amp;str to a non-UTF8 is undefined behavior - why would you say that ?</p>",
        "id": 148326520,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543168235
    },
    {
        "content": "<p>some operations on &amp;str might be undefined behavior if it does not point to an UTF8 string, but others are definitely not (e.g. <code>str.len()</code> )</p>",
        "id": 148326582,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543168399
    },
    {
        "content": "<p>i see <code>str</code> as just another custom DSTs that we have, and as a custom DST it can impose arbitrary preconditions on how it is supposed to be constructed, its methods, etc.</p>",
        "id": 148326631,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543168497
    },
    {
        "content": "<p>the only way in which I think that constructing a <code>&amp;str</code> that points to an UTF8 string could be undefined behavior is if you want to have a model in which, if you have an object of a type T, then all its safe methods _must_ be safe to call, therefore, T must be valid</p>",
        "id": 148326682,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543168597
    },
    {
        "content": "<p>under that model, creating a string to point to a non-UTF8 string would be undefined behavior, but I wonder, how could we catch that in miri?</p>",
        "id": 148326686,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543168623
    },
    {
        "content": "<p>we could hardcode how to catch that for <code>&amp;str</code>, but thinking of <code>&amp;my_custom_dst</code> with arbitrary validity invariants...</p>",
        "id": 148326729,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543168689
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't think a &amp;str to a non-UTF8 is undefined behavior - why would you say that ?</p>\n</blockquote>\n<p>that was just me interpreting what I heard people say</p>",
        "id": 148326955,
        "sender_full_name": "RalfJ",
        "timestamp": 1543169228
    },
    {
        "content": "<p>I am perfectly fine with it not being UB :D miri encodes it as UB currently, but since there is no validation behind references, that doesn't mean much</p>",
        "id": 148326959,
        "sender_full_name": "RalfJ",
        "timestamp": 1543169250
    },
    {
        "content": "<blockquote>\n<p>i see <code>str</code> as just another custom DSTs that we have, and as a custom DST it can impose arbitrary preconditions on how it is supposed to be constructed, its methods, etc.</p>\n</blockquote>\n<p>ack. that works fine as long as rustc does not exploit this during compilation -- which it could, because <code>ty::Str</code> is a thing it can recognize.</p>",
        "id": 148327006,
        "sender_full_name": "RalfJ",
        "timestamp": 1543169285
    },
    {
        "content": "<p>we could do &amp;str-specific optimizations, but if we aren't doing them right now I'd rather try to keep all DSTs as simple as possible</p>",
        "id": 148329362,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543174060
    },
    {
        "content": "<p>ideally <code>&amp;str</code> would just be something defined in the core library once we have custom DSTs as a thin wrapper over <code>[u8]</code></p>",
        "id": 148329536,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543174358
    },
    {
        "content": "<p>It's a language type due to literals, not lack of dst support.</p>",
        "id": 148329648,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1543174568
    },
    {
        "content": "<p>some archeology: <a href=\"https://github.com/rust-lang/rust/pull/19612\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/19612\">https://github.com/rust-lang/rust/pull/19612</a></p>",
        "id": 148331293,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543177550
    },
    {
        "content": "<p>It might be possible to not make it a language type while still keeping literal support for it (not necessarily via user-defined literals, but some rustc hook for that)</p>",
        "id": 148355898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543224051
    },
    {
        "content": "<p>the key thing here is that there are safe methods on <code>&amp;str</code> that require utf-8 representation (or have been in the past). So while it would at minimum be part of the \"safety invariant\" for <code>str</code>, I think?</p>",
        "id": 148798179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508683
    },
    {
        "content": "<p>yes, that would be party of safety</p>",
        "id": 148798212,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508711
    },
    {
        "content": "<p>but that's something that the API of <code>&amp;str</code> can specify however it wants</p>",
        "id": 148798232,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508739
    },
    {
        "content": "<p>it wouldn't really need to be spelled out in the UCG</p>",
        "id": 148798243,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508753
    },
    {
        "content": "<p>yes, it's certainly part of safety</p>",
        "id": 148798244,
        "sender_full_name": "RalfJ",
        "timestamp": 1543508758
    },
    {
        "content": "<p>but if the compiler wants to exploit it in any way for optimizations or layout, it must be more than that</p>",
        "id": 148798293,
        "sender_full_name": "RalfJ",
        "timestamp": 1543508778
    },
    {
        "content": "<blockquote>\n<p>it wouldn't really need to be spelled out in the UCG</p>\n</blockquote>\n<p>this is not clear to me, but it's more a question of \"scope\" of UCG I guess. I think that fundamental types like str (which is a lang item, even) seems to be worth documenting outside of rustdoc, but it's a long term thing.</p>",
        "id": 148798347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508851
    },
    {
        "content": "<p>Ah yes, I didn't mean to suggest that the API of <code>&amp;str</code> shouldn't be safe, but rather that this work would be similar to making sure that <code>Vec</code> is safe. We could tackle these types here, but probably at this point it might be better to specify things such that the safety of these types, which is already documented, doesn't break.</p>",
        "id": 148798460,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508975
    },
    {
        "content": "<p>yep</p>",
        "id": 148798543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509009
    }
]