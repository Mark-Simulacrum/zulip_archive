[
    {
        "content": "<p>I just noticed that <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html#notes\">https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html#notes</a> guarantees a particular layout for side pointers (<code>dyn Trait</code> and <code>[T]</code>). Is that accurate? Seems to me like a note saying that this is not RFC'd and thus not a stable guarantee is missing?</p>",
        "id": 209174910,
        "sender_full_name": "RalfJ",
        "timestamp": 1599307440
    },
    {
        "content": "<p>we have a catch-all clause at the root saying that this is not normative, but we do repeat this elsewhere and should likely do the same here</p>",
        "id": 209174960,
        "sender_full_name": "RalfJ",
        "timestamp": 1599307483
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/249\">https://github.com/rust-lang/unsafe-code-guidelines/pull/249</a></p>",
        "id": 209175237,
        "sender_full_name": "RalfJ",
        "timestamp": 1599308011
    },
    {
        "content": "<p>not sure how much people already rely on the claim</p>",
        "id": 209176315,
        "sender_full_name": "lzutao",
        "timestamp": 1599309888
    },
    {
        "content": "<p>they might, nothing we can do about that</p>",
        "id": 209178857,
        "sender_full_name": "RalfJ",
        "timestamp": 1599313604
    },
    {
        "content": "<p>there are also people relying <code>repr(Rust)</code>. but so far the compiler and lang team consider this language misuse and not a supported usecase.</p>",
        "id": 209178878,
        "sender_full_name": "RalfJ",
        "timestamp": 1599313646
    },
    {
        "content": "<p>people rely on the layout of slices less because there's standard methods to assemble and disassemble them</p>",
        "id": 209181879,
        "sender_full_name": "Lokathor",
        "timestamp": 1599317965
    },
    {
        "content": "<p>not to sat it doesn't happen, but it's rare and usually a beginner's mistake sort of thing</p>",
        "id": 209181895,
        "sender_full_name": "Lokathor",
        "timestamp": 1599317994
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/stable/std/raw/struct.TraitObject.html\">https://doc.rust-lang.org/stable/std/raw/struct.TraitObject.html</a> is unstable so I suspect that it should not be guaranteed in other kinds of documentation either.</p>",
        "id": 209191909,
        "sender_full_name": "nagisa",
        "timestamp": 1599333542
    },
    {
        "content": "<p>In fact consider just referencing this type in the documentation instead of writing down a new definition?</p>",
        "id": 209191999,
        "sender_full_name": "nagisa",
        "timestamp": 1599333612
    },
    {
        "content": "<p>There are good reasons to change the layout of <code>TraitObject</code> in the future, so it should definitely not have its current layout forever memorialized.</p>",
        "id": 209260829,
        "sender_full_name": "isHavvy",
        "timestamp": 1599459648
    },
    {
        "content": "<p>There's still the plan of supporting <code>dyn Trait1+Trait2</code> some day, and layout might have to change for that</p>",
        "id": 209262851,
        "sender_full_name": "RalfJ",
        "timestamp": 1599461740
    },
    {
        "content": "<p>and also do support coercions to supertraits</p>",
        "id": 209262863,
        "sender_full_name": "RalfJ",
        "timestamp": 1599461754
    }
]