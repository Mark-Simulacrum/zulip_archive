[
    {
        "content": "<p>So, we should have a meeting now, right?</p>",
        "id": 159080908,
        "sender_full_name": "RalfJ",
        "timestamp": 1550765831
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 159080924,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1550765847
    },
    {
        "content": "<p>i think so</p>",
        "id": 159080957,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550765877
    },
    {
        "content": "<p>so, do we have an agenda? /me looks at PRs</p>",
        "id": 159081092,
        "sender_full_name": "RalfJ",
        "timestamp": 1550765972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think we still don't have an mdBook deployed, do we?</p>",
        "id": 159081106,
        "sender_full_name": "RalfJ",
        "timestamp": 1550765983
    },
    {
        "content": "<p>other than that, we have <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/83\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/83\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/83</a></p>",
        "id": 159081131,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766001
    },
    {
        "content": "<p>I think I resolved all of <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> 's comments</p>",
        "id": 159081194,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766007
    },
    {
        "content": "<p>i think so too, looks good to merge</p>",
        "id": 159081221,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766025
    },
    {
        "content": "<p>argh, y'all, sorry, I am trying to jump on a time-sensitive bug</p>",
        "id": 159081227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550766027
    },
    {
        "content": "<p>so I can't really follow meeting just now</p>",
        "id": 159081236,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550766038
    },
    {
        "content": "<blockquote>\n<p>i think so too, looks good to merge</p>\n</blockquote>\n<p>all right, merging then</p>",
        "id": 159081241,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766041
    },
    {
        "content": "<p>but I think I creatd a GH_TOKEN</p>",
        "id": 159081245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550766044
    },
    {
        "content": "<p>in the travis setup</p>",
        "id": 159081249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550766047
    },
    {
        "content": "<p>so maybe in theory things will work</p>",
        "id": 159081254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550766050
    },
    {
        "content": "<p>if not, I can try to debug that later</p>",
        "id": 159081258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550766054
    },
    {
        "content": "<p>or give one of you admin access and you can do it :)</p>",
        "id": 159081275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1550766066
    },
    {
        "content": "<p>I nominate <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> :P</p>",
        "id": 159081283,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766077
    },
    {
        "content": "<p>/me has never done any of this before</p>",
        "id": 159081318,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766099
    },
    {
        "content": "<p>ah, I had to update the book PR, damn</p>",
        "id": 159081383,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766126
    },
    {
        "content": "<p>completely forgot about that</p>",
        "id": 159081398,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766137
    },
    {
        "content": "<p>in terms of discussions, no that much seems to happen any more</p>",
        "id": 159081447,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766171
    },
    {
        "content": "<p>we hit some hard questions in some cases, and it seems we mostly have consensus for the rest?</p>",
        "id": 159081464,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766184
    },
    {
        "content": "<p>we haven't talked at all about references to unsized types, but maybe just nobody wants to touch that^^</p>",
        "id": 159081518,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766220
    },
    {
        "content": "<p>I wonder if it is worth starting to write up some of the simple, uncontroversial cases (I am thinking structs, enums and the like)</p>",
        "id": 159081671,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766298
    },
    {
        "content": "<p>sounds good to me<br>\nI also think that it might be worth writing down the cases in which representation and validity are \"entangled\" (where we need to fix both at the same time and can't fully split the discussion)</p>",
        "id": 159081769,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766362
    },
    {
        "content": "<p>which cases are you thinking of?</p>",
        "id": 159081833,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766383
    },
    {
        "content": "<p>i think one case was unions, whether the fields should be at offset 0 or not, depended somehow on validity</p>",
        "id": 159081890,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766418
    },
    {
        "content": "<p>also, is anyone volunteering for the writeup? I will likely end up doing many of the hard cases, so maybe someone else could do the easy ones?^^</p>",
        "id": 159081910,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766426
    },
    {
        "content": "<p>which ones do you have in mind?</p>",
        "id": 159081949,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766451
    },
    {
        "content": "<p>structs, arrays, ... (you know, all the types laid out side-by-side), and enums</p>",
        "id": 159082036,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766493
    },
    {
        "content": "<p>the ones where validity depends on the validity of fields ?</p>",
        "id": 159082043,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766498
    },
    {
        "content": "<blockquote>\n<p>i think one case was unions, whether the fields should be at offset 0 or not, depended somehow on validity</p>\n</blockquote>\n<p>hm, I see. In my head we first define validity and then the rest follows, but of course defining a stricter validity is motivated by doing layout optimizations.</p>",
        "id": 159082047,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766501
    },
    {
        "content": "<p>so for structs, enums, arrays, tuples, vectors, (am I missing any?), I can just write a small document stating that</p>",
        "id": 159082139,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766582
    },
    {
        "content": "<p>for unions in particular, from all I can tell there's a fairly binary choice we can make here, with different trade-offs, and it might be worth just \"documenting the controversy\". I dont see data helping here.</p>",
        "id": 159082148,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766589
    },
    {
        "content": "<p>the issue lists structs, tuples, arrays, slices, closures, generators, SIMD vectors</p>",
        "id": 159082230,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766616
    },
    {
        "content": "<p>but generators are special</p>",
        "id": 159082233,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766620
    },
    {
        "content": "<p>I can add the part about generators to your document, if you dont feel confident explaining that</p>",
        "id": 159082281,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766653
    },
    {
        "content": "<p>(and we might give out an advisory to change them so they are no longer special)</p>",
        "id": 159082284,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766655
    },
    {
        "content": "<p>i don't feel very comfortable doing closure and generators and not doing function types there.</p>",
        "id": 159082375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766713
    },
    {
        "content": "<p>but for the rest, i can word it up, and ping <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> on it</p>",
        "id": 159082438,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766728
    },
    {
        "content": "<p>we don't have to do all of that in the same PR</p>",
        "id": 159082465,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766749
    },
    {
        "content": "<p>closures are just a struct and have nothing to do with function types</p>",
        "id": 159082652,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766874
    },
    {
        "content": "<p>and there is nothing weird about them, unlike generators</p>",
        "id": 159082663,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766883
    },
    {
        "content": "<p>by closure type above I mean <code>ty::Closure</code>, which is the type of <em>the environment</em> of a closure</p>",
        "id": 159082692,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766911
    },
    {
        "content": "<p>I thought an empty closure coerces into a function type, so that there might be some relationship, but if we can just treat them as just structs</p>",
        "id": 159082697,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766919
    },
    {
        "content": "<p>the type that the <code>Fn</code> traits are implemented for</p>",
        "id": 159082698,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766922
    },
    {
        "content": "<p>yes it does, but empty closures are a ZST, their <code>ty::Closure</code> is like a struct with no field. validity is boring for these.</p>",
        "id": 159082726,
        "sender_full_name": "RalfJ",
        "timestamp": 1550766954
    },
    {
        "content": "<p>ah, I thought the closure would be both the environment and the <code>fn</code> type, if its just the environment, then that's the same as for structs</p>",
        "id": 159082787,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766983
    },
    {
        "content": "<p>(as in, the environment, and the function that's called with that environment)</p>",
        "id": 159082798,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550766998
    },
    {
        "content": "<p>the function that's called with that environment is in the vtable</p>",
        "id": 159082812,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767018
    },
    {
        "content": "<p>as part of the fat pointer (when using <code>dyn Fn</code>)</p>",
        "id": 159082837,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767032
    },
    {
        "content": "<p>or for <code>fn foo(x: impl Fn)</code>, it is handled completely statically</p>",
        "id": 159082858,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767046
    },
    {
        "content": "<p>can one manually modify that ?<br>\nthat is, create a closure, and then write a different function there ?</p>",
        "id": 159082898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767075
    },
    {
        "content": "<p>no it's all generated</p>",
        "id": 159082951,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767086
    },
    {
        "content": "<p>with enough unstable features you can <code>impl Fn</code> for your own type though :P</p>",
        "id": 159082970,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767098
    },
    {
        "content": "<p>and then you \"modify\" that function pointer -- it'll point to the function you write as part of that <code>impl</code></p>",
        "id": 159083009,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767127
    },
    {
        "content": "<p>i mean, if its in the trait object vtable, then whether the closure is valid would depend on whether the vtable would be valid</p>",
        "id": 159083014,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767131
    },
    {
        "content": "<p>that's part of the validity of the <code>&amp;dyn Fn</code> reference</p>",
        "id": 159083043,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767146
    },
    {
        "content": "<p>but the environment (the <code>ty::Closure</code>) doesn't care</p>",
        "id": 159083064,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767159
    },
    {
        "content": "<p>i did not meant to suggest that the function is modified statically, but like, at run-time:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">_env</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">__fn_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">d</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159083220,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767250
    },
    {
        "content": "<p>That's what I had in mind when I thought that the validity of a closure might depend not only on the environment being valid, but also on the function that it invokes being valid - supposing that this all could be modified at run-time.</p>",
        "id": 159083299,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767320
    },
    {
        "content": "<p>well first of all, not all these mismatches must be detected by the validity invariant</p>",
        "id": 159083465,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767408
    },
    {
        "content": "<p><code>d.__fn_ptr</code> makes no sense</p>",
        "id": 159083489,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767425
    },
    {
        "content": "<p>there is no function pointer there</p>",
        "id": 159083501,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767429
    },
    {
        "content": "<p><code>d</code> has type <code>ty::Closure[something]</code>, which is basically <code>(i32,)</code></p>",
        "id": 159083567,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767448
    },
    {
        "content": "<p>and the function is just a method on the closure ?</p>",
        "id": 159083596,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767474
    },
    {
        "content": "<p>and then there is a <code>impl Fn for [d's type] { fn __call(self, x, y) { x + y + self.0 } }</code></p>",
        "id": 159083605,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767481
    },
    {
        "content": "<p>but just like <code>Vec</code>'s dont contain a function pointer for the <code>impl Debug for Vec</code>, <code>d</code> will not contain a fn ptr for this <code>impl Fn</code></p>",
        "id": 159083653,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767508
    },
    {
        "content": "<p>when you do <code>let d: &amp;dyn Fn = &amp;d</code>, then the same thing happens as when you do <code>let v: &amp;dyn Debug = vec![0]</code></p>",
        "id": 159083761,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767571
    },
    {
        "content": "<p>that makes sense, i though this was implemented differently:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">__closure_fn</span><span class=\"p\">(...)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Closure</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(...)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">...)</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Closure</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__closure_fn</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159083785,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767589
    },
    {
        "content": "<p>a vtable gets created, with fn ptr to the functions implementing that trait for the given type, and the vtable ptr gets paired up with the ptr to the element of the type implementing the trait</p>",
        "id": 159083800,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767605
    },
    {
        "content": "<p>well that fhn ptr would be useless if we end up using static dispatch</p>",
        "id": 159083836,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767628
    },
    {
        "content": "<p>gotcha, i was confused</p>",
        "id": 159083838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767633
    },
    {
        "content": "<p>also this is much nicer becuase there dynamically dispatched closures basically are just an instance of the general <code>dyn Trait</code> mechanism :D</p>",
        "id": 159083849,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767645
    },
    {
        "content": "<p>(I love this)</p>",
        "id": 159083851,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767648
    },
    {
        "content": "<p>yes, i though that it wouldn't matter much because llvm could eliminate it, but that is more elegant</p>",
        "id": 159083866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767658
    },
    {
        "content": "<p>we dont rely on LLVM if we can help it :D</p>",
        "id": 159083888,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767679
    },
    {
        "content": "<p>well that simplifies validity of closures, its just the same as for structs</p>",
        "id": 159083933,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767690
    },
    {
        "content": "<p>exactly</p>",
        "id": 159083946,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767703
    },
    {
        "content": "<p>so I can draft that</p>",
        "id": 159083949,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550767704
    },
    {
        "content": "<p>awesome :)</p>",
        "id": 159083956,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767710
    },
    {
        "content": "<p>and with that, I have to leave... thanks all!</p>",
        "id": 159083976,
        "sender_full_name": "RalfJ",
        "timestamp": 1550767731
    }
]