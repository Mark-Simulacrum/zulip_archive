[
    {
        "content": "<p>LazyZulip request:</p>\n<p>Is there a tracking issue for doing a safe conversion (e.g. cast) from a reference of the inner type a <code>#[repr(transparent)]</code> contains to a reference to the outer type?</p>",
        "id": 222944357,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1610756296
    },
    {
        "content": "<p>That is probably just the safe trasnmute working group.</p>",
        "id": 222945098,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1610756946
    },
    {
        "content": "<p>oh right, and now I remember going down this path before</p>",
        "id": 222946109,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1610757806
    },
    {
        "content": "<p>that doesn't sound safe in all cases, well, it is not unsound from the language level perspective, but it could be library-level unsafe.</p>",
        "id": 222946212,
        "sender_full_name": "nagisa",
        "timestamp": 1610757868
    },
    {
        "content": "<p>yeah, types will have to opt into safe transmutation</p>",
        "id": 222946252,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610757907
    },
    {
        "content": "<p>as in, if <code>Foo</code> ensures invariants in its <code>new(i: Inner)</code> method and then uses unsafe in its other methods relying on said invariants, then the...</p>",
        "id": 222946260,
        "sender_full_name": "nagisa",
        "timestamp": 1610757911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/safe.20reference.20conversion.20to.20.60repr(transparent).60.20newtype.3F/near/222946212\">said</a>:</p>\n<blockquote>\n<p>that doesn't sound safe in all cases, well, it is not unsound from the language level perspective, but it could be library-level unsafe.</p>\n</blockquote>\n<p>Depends on what <code>repr(transparent)</code> newtype you are talking about.  <code>&amp;mut T</code>=&gt;<code>&amp;mut MaybeUninit&lt;T&gt;</code> is unsound, as is <code>&amp;mut NonZeroU8</code>=&gt;<code>&amp;mut u8</code>, at the language level (IE. can result in lang-level UB in the absense of any other unsafe code (including within other libraries)).</p>",
        "id": 222947201,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610758773
    },
    {
        "content": "<p>niches are a problem too, like <code>NonZeroU32</code> is a transparent wrapper of <code>u32</code></p>",
        "id": 222952342,
        "sender_full_name": "cuviper",
        "timestamp": 1610763541
    },
    {
        "content": "<p>e.g. <code>&amp;0u32</code> into <code>&amp;NonZeroU32</code>, then deref copy, would give you a zero <code>NonZero32</code></p>",
        "id": 222952405,
        "sender_full_name": "cuviper",
        "timestamp": 1610763610
    },
    {
        "content": "<p>that's kind of what <span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> was saying, but mutability is not the only issue</p>",
        "id": 222952427,
        "sender_full_name": "cuviper",
        "timestamp": 1610763686
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 222952500,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610763772
    },
    {
        "content": "<p>(Though mutability makes both directions unsound)</p>",
        "id": 222952516,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610763798
    },
    {
        "content": "<p>Because you can soundly go <code>&amp;NonZeroU32</code>=&gt;<code>&amp;u32</code>.</p>",
        "id": 222952531,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610763834
    },
    {
        "content": "<p>only in the absence of <code>UnsafeCell</code>?</p>",
        "id": 222952586,
        "sender_full_name": "cuviper",
        "timestamp": 1610763878
    },
    {
        "content": "<p>Well, That's why I mentioned those types explicitly.</p>",
        "id": 222952601,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610763933
    },
    {
        "content": "<p>yeah, ok</p>",
        "id": 222952610,
        "sender_full_name": "cuviper",
        "timestamp": 1610763951
    },
    {
        "content": "<p>interior mutability is still mutability</p>",
        "id": 222952627,
        "sender_full_name": "cuviper",
        "timestamp": 1610763963
    },
    {
        "content": "<p>Also, UnsafeCell is a good point. It is never sound go from &amp;T to &amp;Cell&lt;T&gt;, which is transparent of UnsafeCell&lt;T&gt; and thus T.</p>",
        "id": 222952673,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610763999
    },
    {
        "content": "<p>(It isn't inherently unsound I don't believe to go from &amp;T to &amp;UnsafeCell&lt;T&gt;, though it could be immediate UB from the SharedReadOnly=&gt;SharedReadWrite)</p>",
        "id": 222952709,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610764055
    },
    {
        "content": "<p>the <code>bytemuck</code> crate has a trait for this sort of thing</p>",
        "id": 222962231,
        "sender_full_name": "Lokathor",
        "timestamp": 1610775803
    },
    {
        "content": "<p>There is also <a href=\"https://docs.rs/ref-cast\">https://docs.rs/ref-cast</a></p>",
        "id": 222974752,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1610794420
    },
    {
        "content": "<p>So for the cases I was thinking of, this could be a casting operation the <code>impl NewType</code> does to itself, but not otherwise available elsewhere</p>",
        "id": 223072407,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1610931032
    },
    {
        "content": "<p>that'd respect any invariants of the newtype, although not necessarily things like <code>UnsafeCell</code></p>",
        "id": 223072413,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1610931047
    },
    {
        "content": "<p>but uhh, a particular use case would be <code>impl Index&lt;...&gt; for NewType</code></p>",
        "id": 223072420,
        "sender_full_name": "Tony Arcieri",
        "timestamp": 1610931071
    },
    {
        "content": "<p>If the invariants of both are satisified, it is sound to transmute from a reference to <code>T</code> to the same kind of reference to a repr(transparent) wrapper arround <code>T</code>.</p>",
        "id": 223133962,
        "sender_full_name": "Connor Horman",
        "timestamp": 1610983775
    }
]