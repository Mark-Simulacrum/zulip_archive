[
    {
        "content": "<p>I have a struct doing type erasure, where I store <code>Rc&lt;()&gt;</code> for type erasure purposes. I know the validity of references is under debate, but given that <code>Rc</code> stores a pointer, so long as I patch up the type before I do any accesses, I should be good right?</p>",
        "id": 220979275,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609017038
    },
    {
        "content": "<p>Uh... so certainly this will go wrong if you drop that <code>Rc</code>^^</p>",
        "id": 220979289,
        "sender_full_name": "RalfJ",
        "timestamp": 1609017121
    },
    {
        "content": "<p>beyond that, this might work, but seems like violating the <code>Rc</code> abstraction... as in, since <code>Rc</code> doesn't document such a guarantee, it might change in the future in ways that fundamentally break this assumption</p>",
        "id": 220979329,
        "sender_full_name": "RalfJ",
        "timestamp": 1609017158
    },
    {
        "content": "<p>It's <code>ManuallyDrop</code> (I'm only looking at this because Miri caught that exact bug :P)</p>",
        "id": 220979333,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609017184
    },
    {
        "content": "<p>:D</p>",
        "id": 220979342,
        "sender_full_name": "RalfJ",
        "timestamp": 1609017223
    },
    {
        "content": "<p>so, <code>ManuallyDrop&lt;Rc&lt;()&gt;&gt;</code> or what do you mean?</p>",
        "id": 220979349,
        "sender_full_name": "RalfJ",
        "timestamp": 1609017233
    },
    {
        "content": "<p>Yes, <code>ManuallyDrop&lt;Rc&lt;()&gt;&gt;</code>.</p>",
        "id": 220979388,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609017260
    },
    {
        "content": "<p>Is there a reason to store that over just *const () or so? And then implementing Clone / Drop appropriately to manage the reference count?</p>",
        "id": 220979851,
        "sender_full_name": "simulacrum",
        "timestamp": 1609018157
    },
    {
        "content": "<p>you'll want to opt-out of send/sync etc anyway</p>",
        "id": 220979857,
        "sender_full_name": "simulacrum",
        "timestamp": 1609018179
    },
    {
        "content": "<p>I need to support the <code>Rc</code> methods like <code>strong_count</code>, and it just seems more error prone to convert the pointer back and make sure I didn't make any mistakes.</p>",
        "id": 220979923,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609018303
    },
    {
        "content": "<p>I would be very concerned with an accidental clone() call or something that leads to UB, but not exactly sure what you're doing</p>",
        "id": 220979965,
        "sender_full_name": "simulacrum",
        "timestamp": 1609018354
    },
    {
        "content": "<p>and any new functions added on Rc will need to be vetted anyway to make sure they're safe to call..</p>",
        "id": 220979995,
        "sender_full_name": "simulacrum",
        "timestamp": 1609018416
    },
    {
        "content": "<p>Hmm fair. It's basically a custom type-erased DST (nudge nudge), but I guess raw pointers might be a better fit here (are you suggesting <code>*mut Rc&lt;()&gt;</code> or <code>*mut ()</code>)?</p>",
        "id": 220980063,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609018516
    },
    {
        "content": "<p>*const () would be reasonable, I guess. It's definitely <em>not</em> a raw pointer to an Rc so the first seems quite misleading</p>",
        "id": 220980116,
        "sender_full_name": "simulacrum",
        "timestamp": 1609018567
    },
    {
        "content": "<p>alternatively you could add a newtype around <code>ManuallyDrop&lt;Rc&lt;()&gt;&gt;</code> that doesnt implement <code>Deref</code>; then you can also avoid accidental interactions</p>",
        "id": 220980506,
        "sender_full_name": "RalfJ",
        "timestamp": 1609019339
    },
    {
        "content": "<p>True - not sure how much benefit that gives you, though.</p>",
        "id": 220981082,
        "sender_full_name": "simulacrum",
        "timestamp": 1609020348
    },
    {
        "content": "<p>Another random question, you said somewhere that (on mobile and lost the tab),</p>\n<div class=\"codehilite\"><pre><span></span><code>Notice that Rc::into_raw returns a ptr with &quot;shared ref&quot; provenance. So actually writing to that pointer is UB. (In fact, this likely makes Rc::from_raw(Rc::into_raw(rc)).get_mut() unsound .)\n</code></pre></div>\n<p>But I swear I've casted the result of <code>into_raw</code> to a mutable pointer and wirtten to it without miri complaining. Is this still the case?</p>",
        "id": 220993841,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609045260
    },
    {
        "content": "<p>Nevermind, seems like a relic of an API bug. Cyclic refernces are quite difficult.</p>",
        "id": 220994179,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609045878
    },
    {
        "content": "<p>uh, I lost context here^^ not sure when/where I said that</p>",
        "id": 221007569,
        "sender_full_name": "RalfJ",
        "timestamp": 1609073277
    },
    {
        "content": "<p>but yeah that sounds like a bugs that has been fixed</p>",
        "id": 221007607,
        "sender_full_name": "RalfJ",
        "timestamp": 1609073295
    },
    {
        "content": "<blockquote>\n<p>But I swear I've casted the result of into_raw to a mutable pointer and wirtten to it without miri complaining. Is this still the case?</p>\n</blockquote>\n<p>FWIW, in such cases it could also be a good idea to try running Miri with <code>-Zmiri-track-raw-pointers</code>. This enables a more strict mode that doesnt support int-to-ptr casts, but can find more cases of problematic code.</p>",
        "id": 221007617,
        "sender_full_name": "RalfJ",
        "timestamp": 1609073341
    }
]