[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> one can communicate with C without specifying the representation of slices and trait objects.</p>",
        "id": 147760319,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542304835
    },
    {
        "content": "<p>I can query the slice pointer and length and pass those to C directly, or put them in a repr(C) struct.</p>",
        "id": 147760334,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542304860
    },
    {
        "content": "<p>that's of no help of a &amp;[T] is embedded in a larger data structure you'd otherwise want to share with C</p>",
        "id": 147760361,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542304883
    },
    {
        "content": "<p>you'd have to create a struct on the C side of things anyways, given that C does not have slices or trait objects :/</p>",
        "id": 147760422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542304925
    },
    {
        "content": "<p>ah, no, i see what you mean</p>",
        "id": 147760467,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542304986
    },
    {
        "content": "<p>still, you could memcpy it into a struct that's repr(C), except for the &amp;[T] pieces, which you translate to pointer+length</p>",
        "id": 147760517,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542305042
    },
    {
        "content": "<p>i mean, you would only be able to use &amp;[T]  in C FFI as long as the C code defines it in the exact same way than we do</p>",
        "id": 147760626,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542305155
    },
    {
        "content": "<p>this is correct</p>",
        "id": 147760886,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542305388
    },
    {
        "content": "<p>but I'd also argue it's useful to have the repr(C) guarantee for ease of FFI</p>",
        "id": 147760899,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542305402
    },
    {
        "content": "<p>not necessary, but helpful</p>",
        "id": 147760955,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542305415
    },
    {
        "content": "<p>(as opposed to saying that the first word is the pointer, which isn't)</p>",
        "id": 147760974,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542305446
    },
    {
        "content": "<p>You should always be using cbindgen/rust-bindgen for ffi so keeping the repr right shouldnâ€™t be a burden</p>",
        "id": 147766226,
        "sender_full_name": "Gankra",
        "timestamp": 1542309799
    },
    {
        "content": "<p>?</p>",
        "id": 147768899,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542311858
    },
    {
        "content": "<p>I mean for C APIs written in Rust.</p>",
        "id": 147768905,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542311870
    },
    {
        "content": "<p>I want to be able to declare</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">slice</span> <span class=\"p\">{</span>\n  <span class=\"n\">T</span><span class=\"o\">*</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n  <span class=\"kt\">size_t</span> <span class=\"n\">length</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"p\">{</span>\n  <span class=\"kt\">void</span> <span class=\"n\">print_int_slice</span><span class=\"p\">(</span><span class=\"n\">slice</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span> <span class=\"k\">const</span><span class=\"o\">&gt;</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and then in rust</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">print_int_slice</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or w/e</p>",
        "id": 147769048,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542311975
    },
    {
        "content": "<p>I think for slices and trait objects we could commit to something. (Though we shouldnt fix vtable layout.) The original statement was about fat pointers in general, there we should be careful.</p>",
        "id": 147769306,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312168
    },
    {
        "content": "<p>I don't know why I'd want to be careful here.</p>",
        "id": 147769329,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312189
    },
    {
        "content": "<p>didn't you propose custom DST? then we could have fat ptrs with nobody-knows-what as metadata</p>",
        "id": 147769359,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312241
    },
    {
        "content": "<p>sure</p>",
        "id": 147769420,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312270
    },
    {
        "content": "<p>why's that make a difference?</p>",
        "id": 147769427,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312280
    },
    {
        "content": "<p>uh, if we say all fat ptrs are two pointer sizes large, then that restricts your custom DST proposal to ptr-sized metadata?</p>",
        "id": 147769441,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312304
    },
    {
        "content": "<p>I didn't say that?</p>",
        "id": 147769451,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312312
    },
    {
        "content": "<p>I didnt say <em>you</em> did</p>",
        "id": 147769462,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312330
    },
    {
        "content": "<p>right, but why should we be careful about committing to the thing I said</p>",
        "id": 147769481,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312353
    },
    {
        "content": "<p>obviously we can't commit to two pointers, that's a non-starter</p>",
        "id": 147769524,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312365
    },
    {
        "content": "<p>okay I guess I have some context here that I thought we share but don't... one sec</p>",
        "id": 147769538,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312382
    },
    {
        "content": "<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/16#issuecomment-439106988\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/16#issuecomment-439106988\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/16#issuecomment-439106988</a></p>",
        "id": 147769571,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312416
    },
    {
        "content": "<p>What you proposed sounds absolutely reasonable, that's why I said that for slices (and trait objects) we can commit to something</p>",
        "id": 147769589,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312441
    },
    {
        "content": "<p>at least for layout. I will leave ABI questions to the experts.^^</p>",
        "id": 147769603,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312462
    },
    {
        "content": "<p>right, but we don't need to worry about \"just for slices and trait objects\"</p>",
        "id": 147769613,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312475
    },
    {
        "content": "<p>I would argue we should define it forall Metadata</p>",
        "id": 147769650,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312484
    },
    {
        "content": "<p>I'd rather not define anything for custom DST</p>",
        "id": 147769666,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312497
    },
    {
        "content": "<p>just to keep all options open</p>",
        "id": 147769669,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312503
    },
    {
        "content": "<p>hmm</p>",
        "id": 147769686,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312525
    },
    {
        "content": "<p>I personally disagree, but not super strongly</p>",
        "id": 147769693,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312534
    },
    {
        "content": "<p>I dont care strongly either^^</p>",
        "id": 147769708,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312549
    },
    {
        "content": "<p>As I already wrote on the issue I think we <em>can't</em> define layout in terms DynamicallySized because it <em>doesn't even exist yet</em></p>",
        "id": 147769718,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542312570
    },
    {
        "content": "<p>(I dont care strongly about basically any layout stuff, except where it interacts with validity invariants^^)</p>",
        "id": 147769730,
        "sender_full_name": "RalfJ",
        "timestamp": 1542312587
    },
    {
        "content": "<p>Unless of course you propose waiting to define anything until we have it</p>",
        "id": 147769732,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542312589
    },
    {
        "content": "<p>oh, if you want to say that, sure</p>",
        "id": 147769754,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312602
    },
    {
        "content": "<p>I mean right when custom DSTs are implemented, this should be defined.</p>",
        "id": 147769802,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312624
    },
    {
        "content": "<p>I want to be able to use custom DSTs in C APIs</p>",
        "id": 147769815,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542312640
    },
    {
        "content": "<p>yeah i agree</p>",
        "id": 147769816,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542312648
    },
    {
        "content": "<p>eddyb is reluctant to define {ptr, len} because we actually always pass it as two values in the rust abi, even on x86 which passes structs on the stack</p>",
        "id": 147814293,
        "sender_full_name": "Gankra",
        "timestamp": 1542371945
    },
    {
        "content": "<p>we could just... not do that... in the C calling convention</p>",
        "id": 147814353,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542372023
    },
    {
        "content": "<p>alternatively we could \"just\" teach cbindgen that <code>extern fn hello(data: &amp;[T])</code> is <code>void hello(T* data_ptr, size_t data_len);</code></p>",
        "id": 147814544,
        "sender_full_name": "Gankra",
        "timestamp": 1542372353
    },
    {
        "content": "<p>Which honestly seems like more idiomatic C code</p>",
        "id": 147814588,
        "sender_full_name": "Gankra",
        "timestamp": 1542372372
    },
    {
        "content": "<p>but is also easier to mess up your usage of</p>",
        "id": 147814593,
        "sender_full_name": "Gankra",
        "timestamp": 1542372384
    },
    {
        "content": "<p>There is also the matter of to what extent we are guaranteeing, accidentally or not, whether {*T, usize} is type-punnable with &amp;[T]</p>",
        "id": 147814660,
        "sender_full_name": "Gankra",
        "timestamp": 1542372493
    },
    {
        "content": "<p>I don't think it's a  <em>huge</em> concern?</p>",
        "id": 147814666,
        "sender_full_name": "Gankra",
        "timestamp": 1542372521
    },
    {
        "content": "<p>Basically I think this is the first time we're saying \"hey these are the same everywhere\" instead of \"hey this is specifically the valid FFI bridging, but in actual Rust code don't rely on this\"</p>",
        "id": 147814753,
        "sender_full_name": "Gankra",
        "timestamp": 1542372631
    },
    {
        "content": "<p>i think that type-punability is something we should be intentionally guaranteeing, as it's more useful than just passing immediate slices across the FFI boundary -- you can already do that today with a small wrapper that disassembles the slice, but today you can't share a big repr(C) data structure with C if it contains slice pointers</p>",
        "id": 147814770,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542372669
    },
    {
        "content": "<p>to be clear this is not really about type punning within Rust, but that type punning becomes legal as a side effect of allowing C to manipulate slice pointers natively</p>",
        "id": 147814832,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542372736
    },
    {
        "content": "<p>Correct me if I'm wrong but we try to keep the Rust ABI close to the C one so native tooling will be happier, right?</p>",
        "id": 147814833,
        "sender_full_name": "Gankra",
        "timestamp": 1542372736
    },
    {
        "content": "<p>Uh</p>",
        "id": 147814849,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542372752
    },
    {
        "content": "<p>I at least haven't ever heard that articulated as a goal</p>",
        "id": 147814853,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542372762
    },
    {
        "content": "<p>I might have hallucinated it, I'll check on #compiler discord</p>",
        "id": 147814867,
        "sender_full_name": "Gankra",
        "timestamp": 1542372797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> do you think DSTs that do not contain a pointer are useful ?</p>",
        "id": 147815172,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373281
    },
    {
        "content": "<p>I don't understand why so many people want to specify a layout for custom DSTs right now, when nobody has agreed yet on what custom DSTs actually are</p>",
        "id": 147815242,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373339
    },
    {
        "content": "<p>say I have a global array, and write a custom DST that has a pointer to this array as an associated const, and only stores a <code>u8</code> index to index into it</p>",
        "id": 147815258,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373378
    },
    {
        "content": "<p>that would be a <code>&amp;T</code> that has the same size as an <code>u8</code> - if we specify that <code>&amp;T</code> is at least pointer sized, and that for custom DSTs that they are all <code>(ptr, Metadata)</code>, then these types cannot be written.</p>",
        "id": 147815341,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373457
    },
    {
        "content": "<p>if there's no data pointer component, why do you want to bludgeon it into the shame of a reference to an dynamically sized value? in your example, why not just have a newtype around an u8?</p>",
        "id": 147815347,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542373465
    },
    {
        "content": "<p>there is a data pointer component, it is just not stored in the DST</p>",
        "id": 147815397,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373538
    },
    {
        "content": "<p>out of all the features of pointers, pretty much only the ability to return such a thing from Index::index (and variants) seems relevant, everything else (e.g. different kinds of pointers like raw vs reference vs Rc vs ..., the lifetime parameter some of these have, etc.) seems irrelevant</p>",
        "id": 147815448,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542373569
    },
    {
        "content": "<p>i don't really know if supporting this use case is worth it, or even useful, hence why I asked</p>",
        "id": 147815464,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373618
    },
    {
        "content": "<p>and even the Index::index thing seems dubious because you'd artificially constrain yourself to returning &amp;'a YourCustomThingy, when you could return &amp;'static YourCustomThingy</p>",
        "id": 147815465,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542373619
    },
    {
        "content": "<p>It really sounds like you want a custom <em>pointer type</em>, not a custom <em>DST</em></p>",
        "id": 147815474,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542373635
    },
    {
        "content": "<p>You could write a custom pointer type than then has size == 1, but if you then <code>&amp;*</code> you would get a pointer-sized reference</p>",
        "id": 147815539,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373710
    },
    {
        "content": "<p>why is that a problem?</p>",
        "id": 147815566,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542373764
    },
    {
        "content": "<p>you want to store it somewhere, and would prefer to store a reference type with size == 1.</p>",
        "id": 147815620,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373808
    },
    {
        "content": "<p>if that place where you store it is under your control, there are ways to be reasonably generic over different pointer types (e.g. for starters P: Copy+Deref). if that place is not under your control and e.g. hardcodes <code>&amp;T</code>, it could already be doing a ton of things to this pointer that cannot be generalized to things which claim to be pointers but aren't actually an address</p>",
        "id": 147815714,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542373932
    },
    {
        "content": "<p>report back from discord: I had misunderstood the ABI concerns. eddyb's concerns seem to all revolve around wanting to better understand the custom DST plan to avoid any special-casing of the implementation</p>",
        "id": 147815715,
        "sender_full_name": "Gankra",
        "timestamp": 1542373933
    },
    {
        "content": "<p>I really don't understand why custom DSTs have to be constrained to have a pointer and meta-data members internally, in any particular order</p>",
        "id": 147815726,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373961
    },
    {
        "content": "<p>why do they even need a metadata: () member at all, if its just (), can't it be omitted in the type ?</p>",
        "id": 147815742,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542373993
    },
    {
        "content": "<p>and same for the pointer, given that we don't even have a merged RFC for custom DSTs, why do we have to specify right now that custom DSTs need to always have a pointer, and that it has to be the first member</p>",
        "id": 147815809,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374072
    },
    {
        "content": "<p>even if we were to never support DSTs without a memory address, why a pointer and not an <code>usize</code></p>",
        "id": 147815829,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374108
    },
    {
        "content": "<p>or a <code>NonNull&lt;*()&gt;</code></p>",
        "id": 147815840,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374130
    },
    {
        "content": "<p>ok some terminology for starters: if it doesn't have a thin data pointer component and some other components that help interpret that data pointer, it's not a generalization of the concept of DSTs, it's a generalization of the concept of pointers period</p>",
        "id": 147815894,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374167
    },
    {
        "content": "<p>now your question might be, why generalize DSTs specifically and not pointers in general</p>",
        "id": 147815900,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374185
    },
    {
        "content": "<p>and one reason is, there's a ton of things that can be done generically over all DSTs but not necessarily over arbitrary things that are in some shape or form \"like pointers\". for example, <code>ThinBox&lt;T: ?Sized&gt;</code></p>",
        "id": 147815910,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374220
    },
    {
        "content": "<blockquote>\n<p>why do they even need a metadata: () member at all, if its just (), can't it be omitted in the type ?</p>\n</blockquote>\n<p>this is just so we can talk about <em>all</em> pointers without special casing for pointers to sized types</p>",
        "id": 147815931,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374266
    },
    {
        "content": "<blockquote>\n<p>even if we were to never support DSTs without a memory address, why a pointer and not an <code>usize</code></p>\n</blockquote>\n<p>irrelevant but a raw pointer is slightly more natural since most of the things you'd do with it are pointer things not address things</p>",
        "id": 147815985,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374301
    },
    {
        "content": "<p>(\"irrelevant\" because raw pointers and usizes are equivalent for layout and ABI so it's just a matter of where you cast, if at all)</p>",
        "id": 147816073,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374412
    },
    {
        "content": "<p>if I can write my own DSTs, I can provide APIs that expose them and completely hide where they come from</p>",
        "id": 147816082,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374444
    },
    {
        "content": "<p>what wouuld <code>ThinBox&lt;YourU8IndexIntoGlobalArray&gt;</code> or <code>Rc&lt;YourU8IndexIntoGlobalArray&gt;</code> even mean?</p>",
        "id": 147816111,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374491
    },
    {
        "content": "<p>that's the question</p>",
        "id": 147816187,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374577
    },
    {
        "content": "<p>for custom DSTs as defined in the various DSTs it's completely clear what Rc, ThinBox, etc. mean. for your example i don't even think it can be made to make sense</p>",
        "id": 147816217,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> those imply some sort of ownership, but I don't have to expose a way to create T, just expose &amp;T</p>",
        "id": 147816229,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374630
    },
    {
        "content": "<p>that's why I say you want a new kind of pointer, instead of a new kind of type that can be referenced by any pointer</p>",
        "id": 147816279,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374659
    },
    {
        "content": "<p>ah I see</p>",
        "id": 147816288,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374695
    },
    {
        "content": "<p>I thought custom DSTs would also allow implementing <code>&amp;T</code></p>",
        "id": 147816303,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374717
    },
    {
        "content": "<p>or that it would be an aim of that at some point</p>",
        "id": 147816316,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374730
    },
    {
        "content": "<p>first I heard of that</p>",
        "id": 147816325,
        "sender_full_name": "Gankra",
        "timestamp": 1542374756
    },
    {
        "content": "<p>no, just as the existing DSTs are str and [T] and <code>dyn Bounds</code> and so on, not &amp;str, &amp;[T], <code>&amp;dyn Bounds</code></p>",
        "id": 147816326,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542374758
    },
    {
        "content": "<p>so yeah, i'd like a way to create custom pointers then</p>",
        "id": 147816431,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374871
    },
    {
        "content": "<p>thinking about DSTs, I guess it also wouldn't be possible to have DSTs where the meta-data is encoded in the pointer then ?</p>",
        "id": 147816536,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542374973
    },
    {
        "content": "<p>as in, the metadata has to be a distinct field of the DST</p>",
        "id": 147816605,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542375007
    },
    {
        "content": "<p>this seems very off-topic</p>",
        "id": 147816650,
        "sender_full_name": "Gankra",
        "timestamp": 1542375069
    },
    {
        "content": "<p>yeah best take this question to a specific proposal about custom DSTs</p>",
        "id": 147816666,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542375087
    },
    {
        "content": "<p>so specifying custom DSTs as (*T, Metadata) does not prevent this?</p>",
        "id": 147816678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542375118
    }
]