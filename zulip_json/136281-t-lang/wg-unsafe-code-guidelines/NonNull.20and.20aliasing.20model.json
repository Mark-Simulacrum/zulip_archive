[
    {
        "content": "<p>Hi,<br>\nI'm reading <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/194\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/194\">https://github.com/rust-lang/unsafe-code-guidelines/issues/194</a>, and I have a question, in that thread people keep talking about <code>NonNull</code> allowing aliasing.<br>\ne.g:</p>\n<blockquote>\n<p>We replace the Vec with a deconstructed vector; it's equivalent but uses NonNull for its pointer, so it's an aliasable owner.</p>\n</blockquote>\n<p>and:</p>\n<blockquote>\n<p>the NonNull to opt out of uniqueness;</p>\n</blockquote>\n<p>Is there something special about NonNull that allows aliasing where \"regular\" raw pointers don't? or am I misunderstanding this?</p>\n<p>Thanks!</p>",
        "id": 194542739,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1587213897
    },
    {
        "content": "<p>AFAIK <code>NonNull</code> has the same semantics as a raw pointer.</p>",
        "id": 194547756,
        "sender_full_name": "Amanieu",
        "timestamp": 1587220728
    },
    {
        "content": "<p>The unstable <code>Unique&lt;T&gt;</code> pointer type may have additional aliasing constraints, but it's not very clear to me. And apparently <code>Box&lt;T&gt;</code> has the same restrictions since it contains a <code>Unique&lt;T&gt;</code>.</p>",
        "id": 194548013,
        "sender_full_name": "Amanieu",
        "timestamp": 1587221070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/NonNull.20and.20aliasing.20model/near/194547756\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/NonNull.20and.20aliasing.20model/near/194547756\">said</a>:</p>\n<blockquote>\n<p>AFAIK <code>NonNull</code> has the same semantics as a raw pointer.</p>\n</blockquote>\n<p>agreed</p>",
        "id": 194584468,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/NonNull.20and.20aliasing.20model/near/194548013\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/NonNull.20and.20aliasing.20model/near/194548013\">said</a>:</p>\n<blockquote>\n<p>The unstable <code>Unique&lt;T&gt;</code> pointer type may have additional aliasing constraints, but it's not very clear to me. And apparently <code>Box&lt;T&gt;</code> has the same restrictions since it contains a <code>Unique&lt;T&gt;</code>.</p>\n</blockquote>\n<p>Technically right now as implemented in Miri, <code>Box</code> has special constraints, but <code>Unique</code> does not. However this is something we certainly want to explore in the future. I'd very much like to find a way to make <code>Unique</code> special, and get corresponding optimizations for <code>Vec</code>.<br>\nConceptually, indeed <code>Unique</code> is special and hence deconstructing a <code>Vec</code> into a <code>NonNull</code> <em>does</em> make a difference.</p>",
        "id": 194584514,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282255
    }
]