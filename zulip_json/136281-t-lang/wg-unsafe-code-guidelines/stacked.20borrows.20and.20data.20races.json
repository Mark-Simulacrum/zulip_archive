[
    {
        "content": "<p>Copying the discussion at <a href=\"https://github.com/rust-lang/rust/issues/70598\" title=\"https://github.com/rust-lang/rust/issues/70598\">#70598</a> here to discuss further:</p>\n<p><a href=\"https://github.com/vakeras\" title=\"https://github.com/vakeras\"><code>@vakeras</code></a> <a href=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606681190\" title=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606681190\">asked</a> on github:</p>\n<blockquote>\n<p>By the way, do stacked borrows rule out data-races except on UnsafeCell?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <a href=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606685238\" title=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606685238\">responded</a>:</p>\n<blockquote>\n<p>With raw pointers it is possible to create data-races even with stacked borrows.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606685692\" title=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606685692\">responded</a>:</p>\n<blockquote>\n<p>If you also exclude raw pointers (as pointed out by @bjorn3), I think so, but have not formally proven it.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <a href=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606731103\" title=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606731103\">responded</a>:</p>\n<blockquote>\n<p>@RalfJung I may be wrong with my understanding of stacked borrows, but I don't think stacked borrows rules out data races:</p>\n<p>```rust<br>\nfn main() {<br>\n    // First create a mutable reference to some memory.<br>\n    let ref1: &amp;'static /<em>0</em>/ mut u8 = Box::leak(Box::new(42u8));<br>\n    // alloc0: Unique(0)</p>\n<div class=\"codehilite\"><pre><span></span>// Then derive a new mutable reference from the previous reference without borrowck knowing about it.\n// alloc0: Unique(0)\nlet ref2: &amp;&#39;static /*1*/ mut u8 = unsafe { std::mem::transmute::&lt;&amp;&#39;_ mut u8, &amp;&#39;static mut u8&gt;(&amp;mut *ref1) };\n// alloc0: Unique(0) Unique(1)\n\n// Next write using one of the references from a new thread.\nstd::thread::spawn(move || {\n    // alloc0: Unique(0) Unique(1)\n    *ref2 = 0;\n    // alloc0: Unique(0) Unique(1)\n});\n\n// Ensure the new thread runs first, so `Unique(1)` doesn&#39;t get popped before the new thread runs.\nstd::thread::sleep_ms(10);\n\n// Finally write using the other reference in the current thread.\n// Both writes happened without synchronization, so this is a data race.\n// alloc0: Unique(0) Unique(1)\n*ref1 = 1;\n// alloc0: Unique(0)\nprintln!(&quot;{}&quot;, ref1);\n</pre></div>\n\n\n<p>}<br>\n```</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Finally <a href=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606733368\" title=\"https://github.com/rust-lang/rust/pull/70598#issuecomment-606733368\">responded</a>:</p>\n<blockquote>\n<p>@bjorn3 this is getting off-topic, but this is still UB as the first thread might take longer than 10ms to spawn. So the execution where *ref1 = 1 happens first is still possible, and then *ref2 = 0 fails because the item is not on the stack any more.</p>\n<p>Let's continue this elsewhere though.</p>\n</blockquote>",
        "id": 192415176,
        "sender_full_name": "bjorn3",
        "timestamp": 1585672499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I guess you are right. I can't think of a way to never pop the item before it is used in the other thread without synchronization.</p>",
        "id": 192415938,
        "sender_full_name": "bjorn3",
        "timestamp": 1585672867
    },
    {
        "content": "<p>You can do it using a relaxed atomic, which communicates information from one thread to another without fully synchronizing them.</p>",
        "id": 192464598,
        "sender_full_name": "comex",
        "timestamp": 1585695972
    },
    {
        "content": "<p>I am not sure if being able to communicate information is sufficient for the race, though</p>",
        "id": 192490944,
        "sender_full_name": "RalfJ",
        "timestamp": 1585725640
    }
]