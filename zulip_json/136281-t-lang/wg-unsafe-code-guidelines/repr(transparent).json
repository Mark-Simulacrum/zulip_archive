[
    {
        "content": "<p>Hi, I was sure that <code>repr(transparent)</code> allowed <code>transmute&lt;&amp;Wrapper, &amp;Inner&gt;(...)</code> or <code>*const Wrapper as *Const Inner</code>.</p>\n<p>But going over <code>UnsafeCell</code> impl I've found this: <a href=\"https://doc.rust-lang.org/src/core/cell.rs.html#1543\" title=\"https://doc.rust-lang.org/src/core/cell.rs.html#1543\">https://doc.rust-lang.org/src/core/cell.rs.html#1543</a></p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>    // We can just cast the pointer from `UnsafeCell&lt;T&gt;` to `T` because of\n    // #[repr(transparent)]. This exploits libstd&#39;s special status, there is\n    // no guarantee for user code that this will work in future versions of the compiler!\n</pre></div>\n\n\n</blockquote>\n<p>Does this mean that repr(transparent) doesn't work that way for everyone?</p>",
        "id": 194020565,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1586953233
    },
    {
        "content": "<p>I <em>think</em> that might be because repr(transparent) on UnsafeCell isn't stabilized for end-users, or at least I see no mention in the docs</p>",
        "id": 194021445,
        "sender_full_name": "simulacrum",
        "timestamp": 1586953652
    },
    {
        "content": "<p>This part of the comment was added in <a href=\"https://github.com/rust-lang/rust/pull/66248\" title=\"https://github.com/rust-lang/rust/pull/66248\">https://github.com/rust-lang/rust/pull/66248</a> for reasons discussed there, seems more related to what we document about <code>UnsafeCell</code> (treat <code>get</code> as being special) than repr(transparent) in particular.</p>",
        "id": 194037594,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1586960430
    },
    {
        "content": "<p>However, there <em>are</em> significant caveats to \"repr(transparent) allows type punning via pointer casts\" -- e.g. transparent wrappers do not necessarily have the same safety and validity invariants as the type they wrap. Such issues can be ruled out if you control both types or the types provide sufficient documented guarantees, but libstd types don't usually give that many guarantees.</p>",
        "id": 194038358,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1586960742
    },
    {
        "content": "<p>Indeed the main reason for that comment is the special status of <code>UnsafeCell::get</code>. That is the only way to get an interior mutable pointer. This trumps <code>repr(transparent)</code>.</p>",
        "id": 194368152,
        "sender_full_name": "RalfJ",
        "timestamp": 1587071531
    },
    {
        "content": "<p>ah, so transmuting <code>&amp;mut UnsafeCell&lt;T&gt;</code> to <code>*mut T</code> wouldn't also do it? Interesting. If so, is that written down somewhere?</p>",
        "id": 194368850,
        "sender_full_name": "Lokathor",
        "timestamp": 1587071997
    },
    {
        "content": "<p>(i mean somewhere outside of that one code comment on the unsafecell impl)</p>",
        "id": 194368929,
        "sender_full_name": "Lokathor",
        "timestamp": 1587072024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/repr(transparent)/near/194368850\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/repr(transparent)/near/194368850\">said</a>:</p>\n<blockquote>\n<p>ah, so transmuting <code>&amp;mut UnsafeCell&lt;T&gt;</code> to <code>*mut T</code> wouldn't also do it? Interesting. If so, is that written down somewhere?</p>\n</blockquote>\n<p>wait no that is no problem</p>",
        "id": 194369510,
        "sender_full_name": "RalfJ",
        "timestamp": 1587072338
    },
    {
        "content": "<p>the issue is about interior mutability</p>",
        "id": 194369522,
        "sender_full_name": "RalfJ",
        "timestamp": 1587072346
    },
    {
        "content": "<p>so, you cannot transmute <code>&amp;UnsafeCell&lt;T&gt;</code> to <code>*mut T</code> <em>and write to it</em></p>",
        "id": 194369536,
        "sender_full_name": "RalfJ",
        "timestamp": 1587072357
    },
    {
        "content": "<p>oh, right right, <code>&amp;UnsafeCell&lt;T&gt;</code></p>\n<p>Okay but is that noted anywhere outside of the docs of libcore? Perhaps we should write it down somewhere.</p>",
        "id": 194370833,
        "sender_full_name": "Lokathor",
        "timestamp": 1587073169
    },
    {
        "content": "<p>well it's noted in <code>UnsafeCell</code> docs</p>",
        "id": 194463642,
        "sender_full_name": "RalfJ",
        "timestamp": 1587139683
    },
    {
        "content": "<p>not sure which other place would fit?</p>",
        "id": 194463666,
        "sender_full_name": "RalfJ",
        "timestamp": 1587139687
    },
    {
        "content": "<p>FWIW I'd rather just get rid of this rule altogether. I'm pretty sure there's no good reason for it nowadays.</p>",
        "id": 194465597,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587140687
    },
    {
        "content": "<p>well, Stacked Borrows doesn't need it</p>",
        "id": 194466306,
        "sender_full_name": "RalfJ",
        "timestamp": 1587141010
    },
    {
        "content": "<p>but I am not sure if we are willing to commit to \"whatever Stacked Borrows does\" for interior mutability</p>",
        "id": 194466340,
        "sender_full_name": "RalfJ",
        "timestamp": 1587141027
    },
    {
        "content": "<p><code>get()</code> isn't special to the compiler either, and I can't see why we'd ever want to change that. The special casing for <code>UnsafeCell</code> that we have (e.g., whether statics are read-only memory, or whether aliasing attributes are added to LLVM IR) is all just based on \"does this type contain an <code>UnsafeCell</code>\".</p>",
        "id": 194467729,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587141714
    },
    {
        "content": "<p>earlier versions of stacked borrows relied on some really weird sequence of casts in <code>get</code> to make things work</p>",
        "id": 194467847,
        "sender_full_name": "RalfJ",
        "timestamp": 1587141757
    },
    {
        "content": "<p>so just a normal transmute from <code>&amp;UnsafeCell&lt;T&gt;</code> to <code>*mut T</code> would not have worked</p>",
        "id": 194467875,
        "sender_full_name": "RalfJ",
        "timestamp": 1587141771
    },
    {
        "content": "<p>current Stacked Borrows handles this better and the transmute would be fine, but who knows what final model we end up with</p>",
        "id": 194467909,
        "sender_full_name": "RalfJ",
        "timestamp": 1587141789
    },
    {
        "content": "<p>(the transmute is still somewhat odd as the pointer remains \"tagged\", so if you ever lose provenance -- such as through an integer roundtrip -- you get UB.)</p>",
        "id": 194467997,
        "sender_full_name": "RalfJ",
        "timestamp": 1587141841
    },
    {
        "content": "<p>so maybe <code>&amp;UnsafeCell&lt;T&gt; as *const _ as *mut T</code> is the better \"non-<code>get</code>\" alternative. and that is entirely equivalent to <code>get</code>  as far as latest Stacked Borrows is concerned.</p>",
        "id": 194468111,
        "sender_full_name": "RalfJ",
        "timestamp": 1587141885
    },
    {
        "content": "<p>Hm, I see. Then I won't push further for this change right now. But still, <code>get</code> should definitely not be magic : <code>transmute</code> may be weird around pointer provenance in general, but the obvious <code>as</code> cast really ought to work and IMO a formal model that can't make them work probably won't be satisfactory.</p>",
        "id": 194468649,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587142159
    },
    {
        "content": "<p>I agree</p>",
        "id": 194469374,
        "sender_full_name": "RalfJ",
        "timestamp": 1587142474
    }
]