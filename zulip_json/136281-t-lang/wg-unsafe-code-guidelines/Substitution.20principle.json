[
    {
        "content": "<p>Did we ever document the following substitution principle for layouts as part of our layout/repr discussion? Or did we uncover some points that would contradict this principle?</p>\n<blockquote>\n<p>Once size and alignment <em>and niche</em> of twp types are the same, you can assume that size and alignment and niche are the same when these two types are wrapped in arbitrary type constructors (excluding associated types).</p>\n</blockquote>\n<p>It seems self-evident to me but what do I know.^^ Either way, this seems worth documenting?</p>",
        "id": 166201262,
        "sender_full_name": "RalfJ",
        "timestamp": 1558464655
    },
    {
        "content": "<p>i assume there is also a caveat of \"excluding potential extensions to specialization\"</p>",
        "id": 166201611,
        "sender_full_name": "Gankra",
        "timestamp": 1558464901
    },
    {
        "content": "<p>Need to exclude associated <em>constants</em>, too. Most kinds of parametricity-breaking constant expressions or type-level constructs (e.g. via specialization but there might be others, e.g. if <code>TypeId::of</code> was a <code>const fn</code>) can also violate this principle. And in a plausible future, there might also be associated <code>const fn</code>s that allow newtypes to differ from their contents for layout purposes.</p>\n<p>And then there's the broader problem that we haven't even formally committed to <em>any</em> kind of determinism in layout computation. Even <code>struct A(i32); struct B(i32);</code> can have different layouts as far as the current state of UCG is concerned.</p>",
        "id": 166201733,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558464977
    },
    {
        "content": "<p>More specifically even if you guarantee size and align, field randomization may lead to a different niche position for MyGenericType&lt;T&gt;(T, u32), if the compiler chooses to randomize the order of .0 and .1 for, e.g., MyGenericType&lt;&amp;A&gt; and MyGenericType&lt;Box&lt;A&gt;&gt;</p>",
        "id": 166201911,
        "sender_full_name": "Gankra",
        "timestamp": 1558465123
    },
    {
        "content": "<p>\"excluding associated anything\" is really what I meant ;)</p>",
        "id": 166201954,
        "sender_full_name": "RalfJ",
        "timestamp": 1558465159
    },
    {
        "content": "<p>(lost track if you have abandonned field randomization as a feature)</p>",
        "id": 166201960,
        "sender_full_name": "Gankra",
        "timestamp": 1558465166
    },
    {
        "content": "<blockquote>\n<p>Even struct A(i32); struct B(i32); can have different layouts as far as the current state of UCG is concerned.</p>\n</blockquote>\n<p>that is not in contradiction to my statement. \"type constructors\" are nominal, so A and B are different type constructors here.</p>",
        "id": 166201983,
        "sender_full_name": "RalfJ",
        "timestamp": 1558465195
    },
    {
        "content": "<p>Yes, but <code>i32</code> and <code>NonZeroI32</code> are nominally different types, hence...</p>",
        "id": 166202090,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558465237
    },
    {
        "content": "<p>...?</p>",
        "id": 166202141,
        "sender_full_name": "RalfJ",
        "timestamp": 1558465250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> </p>\n<blockquote>\n<p>More specifically even if you guarantee size and align, field randomization may lead to a different niche position for MyGenericType&lt;T&gt;(T, u32), if the compiler chooses to randomize the order of .0 and .1 for, e.g., MyGenericType&lt;&amp;A&gt; and MyGenericType&lt;Box&lt;A&gt;&gt;</p>\n</blockquote>\n<p>that would indeed be a contradiction to my statement.</p>",
        "id": 166202144,
        "sender_full_name": "RalfJ",
        "timestamp": 1558465251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I dont know where you are going or what you are replying to.</p>",
        "id": 166202192,
        "sender_full_name": "RalfJ",
        "timestamp": 1558465287
    },
    {
        "content": "<p>I'm trying to say that we currently don't say layout computation of structs (enums too, unions? not sure) is deterministic, <em>in particular</em> it can depend on nominal types, treating two field types with same sizes, alignments, niches, etc. differently. So a better example than my previous one would be: given <code>struct A&lt;T&gt;(T);</code> we don't guarantee that <code>A&lt;i32&gt;</code> and <code>A&lt;u32&gt;</code> are laid out the same, even though we do guarantee that <code>i32</code> and <code>u32</code> have the same size, align, and niche.</p>",
        "id": 166202627,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558465588
    },
    {
        "content": "<p>Nominal types don't just matter \"at the top level\", so to speak</p>",
        "id": 166202689,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558465642
    },
    {
        "content": "<p>Current wording for reference: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md#default-layout-repr-rust\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md#default-layout-repr-rust\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md#default-layout-repr-rust</a></p>",
        "id": 166202839,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558465764
    },
    {
        "content": "<p>Maybe I'm misunderstanding what's meant by niche here, but the whole point of <code>NonZeroI32</code> is that it has a different niche to <code>i32</code>.</p>",
        "id": 166202922,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1558465813
    },
    {
        "content": "<p>Ah, oops, you're right</p>",
        "id": 166202929,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558465826
    },
    {
        "content": "<p>Pretend I used <code>#[repr(transparent)] struct WrapI32(i32);</code> for the whole time</p>",
        "id": 166202962,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558465859
    },
    {
        "content": "<p>I would think you could just use i32 and u32 :)</p>",
        "id": 166203632,
        "sender_full_name": "Gankra",
        "timestamp": 1558466345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I see. then it becomes the same point as <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span>'s. I agree.</p>",
        "id": 166203769,
        "sender_full_name": "RalfJ",
        "timestamp": 1558466442
    }
]