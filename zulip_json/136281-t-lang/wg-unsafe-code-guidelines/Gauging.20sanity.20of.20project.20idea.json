[
    {
        "content": "<p>Project idea: given a piece of unsafe code, make a list of all the invariants you need to uphold, so you can be sure you don't forget to check an invariant you need to uphold when looking at unsafe code. Inspired by The Checklist Manifesto.<br>\ne.g. if there is a raw pointer dereference =&gt; non-null, alignment, aliasing, provenance, in bounds, target is initialized (and I'm probably forgetting something)<br>\nAny thoughts on whether this is feasible or practical?</p>",
        "id": 187780612,
        "sender_full_name": "Shnatsel",
        "timestamp": 1581294054
    },
    {
        "content": "<p>hm... sounds like an interesting experiment. we have some long-term plans to do that in a formal way (so, it would list all the coq proof obligations you have to show), but doing something that normal people can read would probably be more widely applicable :D</p>",
        "id": 187839864,
        "sender_full_name": "RalfJ",
        "timestamp": 1581357426
    },
    {
        "content": "<p>Related to something I've always wanted:</p>\n<p>I've wanted wanted to be able to informally write the \"things one must prove\" in the form of prolog-like predicates. e.g., <code>NotNull(x)</code>, where <code>x</code> is the name of a parameter or something, and then have a tool that lints that -- on the relevant unsafe block around a call <code>foo(y)</code> -- I have written something like <code>// assert NotNull(y)</code>. </p>\n<p>The idea here is:</p>\n<ul>\n<li>I am saying I thought about this condition and believe it holds</li>\n<li>If I add a new condition to <code>foo</code>, like <code>Aligned(x)</code>, then I'll start to get lint errors at every call site until I added <code>// assert Aligned(y)</code> to state that I believe it holds.</li>\n</ul>\n<p>The whole idea is just to track \"what are the things I think I thought about\".</p>",
        "id": 188223215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581698619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> This sounds pretty cool, because for me the hardest part is revisiting some unsafe code and modifying it but forgetting some weird invariant I added a while ago</p>",
        "id": 188319262,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1581844948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah that sounds like an awesome tool indeed :D</p>",
        "id": 188332186,
        "sender_full_name": "RalfJ",
        "timestamp": 1581873570
    },
    {
        "content": "<p>maybe some of these use-cases could be modeled with <code>mirai</code> since it seems to handle <em>some</em> form of pre/post conditions/invariants contracts</p>",
        "id": 188407598,
        "sender_full_name": "lqd",
        "timestamp": 1581974721
    }
]