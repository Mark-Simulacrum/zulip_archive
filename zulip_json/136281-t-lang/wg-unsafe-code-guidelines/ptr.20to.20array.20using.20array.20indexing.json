[
    {
        "content": "<p>As far as I know the following snippet is unsound because <code>y</code> must only be used to access <code>x[0]</code>, not the whole array.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is my knowledge correct here and where can I read more about this?</p>",
        "id": 220928518,
        "sender_full_name": "lcnr",
        "timestamp": 1608915764
    },
    {
        "content": "<p>There was a thread about this but I can't find it.</p>",
        "id": 220928725,
        "sender_full_name": "comex",
        "timestamp": 1608916182
    },
    {
        "content": "<p>Under the stacked borrows memory model this is indeed UB. (not unsound. that is when you can misuse an api to cause UB without using unsafe code for the api calls)</p>",
        "id": 220928778,
        "sender_full_name": "bjorn3",
        "timestamp": 1608916221
    },
    {
        "content": "<blockquote>\n<p>not unsound. that is when you can misuse an api to cause UB without using unsafe code for the api calls</p>\n</blockquote>\n<p>the existence of that method is unsound, isn't it? It's only when calling it when it ends up being ub afaik</p>",
        "id": 220928839,
        "sender_full_name": "lcnr",
        "timestamp": 1608916328
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a> &lt;- here it is</p>",
        "id": 220928841,
        "sender_full_name": "comex",
        "timestamp": 1608916329
    },
    {
        "content": "<p>soundness is a property of a safe API surface, so probably not the right question here</p>",
        "id": 220958774,
        "sender_full_name": "RalfJ",
        "timestamp": 1608978476
    },
    {
        "content": "<p>but if you consider this a weird module that just exposes <code>pub fn test()</code>, it is an unsound module</p>",
        "id": 220958815,
        "sender_full_name": "RalfJ",
        "timestamp": 1608978493
    },
    {
        "content": "<p>but given that this is an argumentless function, it's IMO easier to just consider it a program and ask if that program has UB</p>",
        "id": 220958821,
        "sender_full_name": "RalfJ",
        "timestamp": 1608978530
    },
    {
        "content": "<p>This seems like a syntax ambiguity of the type that raw references might help to address. In the absence of raw references, do we have any syntax to create a pointer to a specific element of a slice without restricting the pointer to operate within just that element?</p>",
        "id": 221158695,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609269067
    },
    {
        "content": "<p>I suppose you could create a pointer to the slice, and then offset with manual indexing.</p>",
        "id": 221158838,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609269165
    },
    {
        "content": "<p>But at least in C, it's conventional to write <code>&amp;arr[i]</code> and let the compiler do the indexing for you.</p>",
        "id": 221158885,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609269207
    },
    {
        "content": "<p>It seems unfortunate if following the same pattern would produce UB.</p>",
        "id": 221158974,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609269272
    },
    {
        "content": "<p>yeah, i've found that unfortunate too. some of the discussions towards the end of <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/256\">https://github.com/rust-lang/unsafe-code-guidelines/issues/256</a> <em>might</em> indicate a path forward there, but it's not 100% clear if that's actually true or just wishful thinking.</p>\n<p>that said, thankfully this isn't that hard of a rule to work around in practice.</p>",
        "id": 221160736,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1609270790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/ptr.20to.20array.20using.20array.20indexing/near/221158838\">said</a>:</p>\n<blockquote>\n<p>I suppose you could create a pointer to the slice, and then offset with manual indexing.</p>\n</blockquote>\n<p>yeah, <code>slice.as_ptr().add(idx)</code> is what I currently recommend</p>",
        "id": 221167318,
        "sender_full_name": "RalfJ",
        "timestamp": 1609276226
    },
    {
        "content": "<p>but of course nobody does that since it's way longer</p>",
        "id": 221167333,
        "sender_full_name": "RalfJ",
        "timestamp": 1609276240
    },
    {
        "content": "<p>How many optimizations would we lose making the raw indexing be sugar for that? Or is it a consistency thing with <code>Index(Mut)</code>?</p>",
        "id": 221167690,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609276532
    },
    {
        "content": "<p>there's no such thing as \"raw indexing\"?</p>",
        "id": 221167824,
        "sender_full_name": "RalfJ",
        "timestamp": 1609276633
    },
    {
        "content": "<p>You could also do <code>slice[idx..].as_ptr()</code> if you just want access to the latter half of the list</p>",
        "id": 221169005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609277413
    },
    {
        "content": "<p>Is <code>&amp;a[b]</code> on slices not a primitive operation?</p>",
        "id": 221176143,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1609284113
    },
    {
        "content": "<p><code>slice[idx..].as_ptr()</code> desugars to <code>slice.index(idx..).as_ptr()</code>, where the <code>index</code> call is not special but produces a subslice, and <code>as_ptr()</code> produces a pointer which is permitted to access everything in that subslice</p>",
        "id": 221190772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609305116
    },
    {
        "content": "<p>Sounds like we might need some special syntax for &amp;raw arr[i] when we go to add syntax for &amp;raw.</p>",
        "id": 221194621,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609311858
    },
    {
        "content": "<p>It's reasonable to tell people they have to use &amp;raw instead of &amp; for something like this.</p>",
        "id": 221194635,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609311891
    },
    {
        "content": "<p>Here's a starter macro to let you test if you super care about being able to make pointer indexing look like normal indexing.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Performs \"pointer indexing\" via the `add` method</span>\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">pi</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$array</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"cp\">$index</span>:<span class=\"nc\">expr</span><span class=\"w\"> </span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"cp\">$array</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"cp\">$index</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">pi</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">data_ptr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pi</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">data_ptr</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221195143,
        "sender_full_name": "Lokathor",
        "timestamp": 1609312695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/ptr.20to.20array.20using.20array.20indexing/near/221194621\">said</a>:</p>\n<blockquote>\n<p>Sounds like we might need some special syntax for &amp;raw arr[i] when we go to add syntax for &amp;raw.</p>\n</blockquote>\n<p>ah that's what you mean... well I think that should actually already work? Did someone test using <code>ptr::raw_const!(arr[i])</code> in Miri?</p>",
        "id": 221209543,
        "sender_full_name": "RalfJ",
        "timestamp": 1609331864
    },
    {
        "content": "<p>(btw, any suggestions for better names for <code>ptr::raw_const!</code>? See <a href=\"https://github.com/rust-lang/rust/issues/73394#issuecomment-751342185\">https://github.com/rust-lang/rust/issues/73394#issuecomment-751342185</a> )</p>",
        "id": 221209588,
        "sender_full_name": "RalfJ",
        "timestamp": 1609331900
    },
    {
        "content": "<p>this also fails in Miri:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(raw_ref_macros)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">raw_const</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think that's because the ref-to-raw conversion happens after the indexing.</p>",
        "id": 221209678,
        "sender_full_name": "RalfJ",
        "timestamp": 1609332033
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(raw_ref_macros)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">raw_const</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221211784,
        "sender_full_name": "RalfJ",
        "timestamp": 1609334431
    },
    {
        "content": "<p>bummer, it certainly would be nice if the first of those worked.</p>",
        "id": 221212153,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1609334818
    },
    {
        "content": "<p>yeah, but that'll require the things discussed in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/256\">https://github.com/rust-lang/unsafe-code-guidelines/issues/256</a></p>",
        "id": 221212273,
        "sender_full_name": "RalfJ",
        "timestamp": 1609334945
    },
    {
        "content": "<p>ah, yeah, fair enough</p>",
        "id": 221213119,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1609335755
    },
    {
        "content": "<p>I think that indexing is one of those things, like addition, that only sometimes goes through the trait.  Which makes this potentially a bit more awkward, as things that work on slices might not work on vectors.</p>",
        "id": 221252425,
        "sender_full_name": "scottmcm",
        "timestamp": 1609367728
    }
]