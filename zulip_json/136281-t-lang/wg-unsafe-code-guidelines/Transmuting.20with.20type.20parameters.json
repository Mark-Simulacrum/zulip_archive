[
    {
        "content": "<p>Howdy! I put together <a href=\"https://github.com/rust-lang/rust/pull/86281\">https://github.com/rust-lang/rust/pull/86281</a> to allow limited transmuting between types which are otherwise reasonable to transmute except they happen to reference type parameters (which haven't yet been resolved because we're pre-monomorphisation).</p>\n<p>I'm not super confident with transmute-safety in general, so I'd love to borrow anyone more knowledgable's eyes to make sure it's not opening up horrible mistakes!</p>",
        "id": 242929374,
        "sender_full_name": "Daniel Wagner-Hall",
        "timestamp": 1623871274
    },
    {
        "content": "<p>Given that this is an extension to <code>transmute</code>, which is already unsafe, I don't think there is much to worry about other than the possibility of post-monomorphization errors if this is not done correctly. As far as I know, the two properties listed (a <code>repr(transparent)</code> type has the same size as its non-ZST member, and <code>[T; N]</code> and <code>[U; N]</code> have the same size if <code>T</code> and <code>U</code> do) hold unconditionally, and these are documented in the UCG document, except that <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/arrays-and-slices.html#special-case-stride--size\"><code>size == stride</code></a> is still open. With these two clauses alone, though, this is not a problem, because <code>repr(transparent)</code> yields a type with the same size and stride, and same-length arrays of types with the same size and stride also have the same size and stride.</p>",
        "id": 242967743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623899044
    }
]