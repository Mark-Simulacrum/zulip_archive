[
    {
        "content": "<p>Am I correct in understanding that the reason that we cannot have piecewise initialization is that getting access to a field requires creating a reference to the field, but we can't uphold the requirements of references because the referred-to value is invalid for the type?</p>\n<p>And is it correct that this is one of the motivations behind the <code>&amp;raw</code> syntax?</p>\n<p>/cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 166019842,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558266342
    },
    {
        "content": "<p>Yes. More precisely \"getting access to a field\" in the sense of creating a raw pointer to it. Directly writing through a raw pointer field projection like <code>(*p).field = value;</code> should be OK AFAIK (though this has not been discussed as extensively).</p>",
        "id": 166020158,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558266866
    },
    {
        "content": "<p>but there's no way to safely get a raw pointer to the field, if I wanted  to pass it to a C function, right?</p>",
        "id": 166020604,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558267614
    },
    {
        "content": "<p>(this is generally in the context of <a href=\"https://github.com/rust-lang/rust/issues/53491#issuecomment-493657638\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53491#issuecomment-493657638\">this comment</a>)</p>",
        "id": 166020622,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558267666
    },
    {
        "content": "<p>It's a common Windows API technique to have an uninitialized struct where you've set a length or version field before passing it to a function. If it's OK to use a field projection, then that should be fine.</p>",
        "id": 166020680,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558267742
    },
    {
        "content": "<blockquote>\n<p>Yes. More precisely \"getting access to a field\" in the sense of creating a raw pointer to it. Directly writing through a raw pointer field projection like <code>(*p).field = value;</code> should be OK AFAIK (though this has not been discussed as extensively).</p>\n</blockquote>\n<p>the problem with this is that it drops the old value in the field</p>",
        "id": 166021186,
        "sender_full_name": "RalfJ",
        "timestamp": 1558268557
    },
    {
        "content": "<p>so if the type has drop but the field was uninitialized... we got UB, and (unlike the more theoretical issue around creating references to uninitialized fields) this will likely lead to real crashes</p>",
        "id": 166021207,
        "sender_full_name": "RalfJ",
        "timestamp": 1558268595
    },
    {
        "content": "<blockquote>\n<p>It's a common Windows API technique to have an uninitialized struct where you've set a length or version field before passing it to a function. If it's OK to use a field projection, then that should be fine.</p>\n</blockquote>\n<p>given that these are likely fields of dropless type, writing to a field projection should work</p>",
        "id": 166021214,
        "sender_full_name": "RalfJ",
        "timestamp": 1558268633
    },
    {
        "content": "<p>but it is a dangerous pattern to use, in case someone reads it and then uses it for their type-with-drop...</p>",
        "id": 166021279,
        "sender_full_name": "RalfJ",
        "timestamp": 1558268721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> ^</p>",
        "id": 166021330,
        "sender_full_name": "RalfJ",
        "timestamp": 1558268800
    },
    {
        "content": "<p>yup, makes sense, thanks!</p>",
        "id": 166021477,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558269024
    },
    {
        "content": "<p>Mostly collecting knowledge to see if I need to go back and update SO answers</p>",
        "id": 166021482,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558269044
    },
    {
        "content": "<p>thanks for that :)</p>",
        "id": 166022093,
        "sender_full_name": "RalfJ",
        "timestamp": 1558269998
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_lib_func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">some_lib_struct_t</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">some_lib_struct_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">uninitialized</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">some_lib_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>So, this is UB, right? Since we create a <code>&amp;mut T</code> before making it a <code>*mut T</code>?</p>",
        "id": 166027888,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558279792
    },
    {
        "content": "<p>Yeah but that's not \"piecewise\", for this the accepted-for-stabilization subset of the MaybeUninit API (soon to be stable in a nightly near you) is sufficient</p>",
        "id": 166031503,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558285607
    },
    {
        "content": "<p>ah, good point.</p>",
        "id": 166038713,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1558297603
    }
]