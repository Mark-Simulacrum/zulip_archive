[
    {
        "content": "<p>The one remaining stacked borrows violation in the test suite is rather interesting. It appears when using <code>VecDeque::drain</code>, but the actual problem is <code>NonNull::from(&amp;mut T)</code>. That looks as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">NonNull</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">reference</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">NonNull</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">pointer</span>: <span class=\"nc\">NonZero</span><span class=\"p\">(</span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Looks innocent, doesn't it? What actually happens in MIR, however, is...</p>\n<div class=\"codehilite\"><pre><span></span>_6 = &amp;(*_1)\n_5 = move _6 as *const T (Misc)\n...\n</pre></div>\n\n\n<p>IOW, we turn the mutable ref into a shared one, and then turn that into a raw (const) ptr and go from there. WAY later, we end up writing through this reference, and my model says \"nope, you cannot write through this because you got it from a shared ref\".</p>",
        "id": 136784480,
        "sender_full_name": "RalfJ",
        "timestamp": 1540913749
    },
    {
        "content": "<p>Funny enough, the distinction between <code>*mut</code> and <code>*const</code> -- which was meant to help -- actually turns out to be harmful here.</p>",
        "id": 136784553,
        "sender_full_name": "RalfJ",
        "timestamp": 1540913796
    },
    {
        "content": "<p>:)</p>",
        "id": 136791654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919864
    },
    {
        "content": "<p>I suppose there is no <em>particular</em> reason for the cast to work that way</p>",
        "id": 136791664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919880
    },
    {
        "content": "<p>true</p>",
        "id": 136791934,
        "sender_full_name": "RalfJ",
        "timestamp": 1540920082
    },
    {
        "content": "<p>but it also shows the dangers of making implicit operations like coercions carry semantic meaning</p>",
        "id": 136791946,
        "sender_full_name": "RalfJ",
        "timestamp": 1540920095
    },
    {
        "content": "<p>yet, I am fairly sure we want the mut-to-shared-ref cast to have semantic meaning</p>",
        "id": 136791952,
        "sender_full_name": "RalfJ",
        "timestamp": 1540920113
    },
    {
        "content": "<p>we should probably \"just\" change inference to avoid introducing such casts unless it absolutely has to...</p>",
        "id": 136792003,
        "sender_full_name": "RalfJ",
        "timestamp": 1540920137
    },
    {
        "content": "<p>hm, changing just that cast is not enough to make the test pass... seems like I will have to investigate some more</p>",
        "id": 136792412,
        "sender_full_name": "RalfJ",
        "timestamp": 1540920523
    },
    {
        "content": "<blockquote>\n<p>but it also shows the dangers of making implicit operations like coercions carry semantic meaning</p>\n</blockquote>\n<p>confirm</p>",
        "id": 136792851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540920883
    },
    {
        "content": "<p>uh yeah I see what is going on... after creating the raw ptr, we call <code>self.buffer_as_mut_slice()</code></p>",
        "id": 136794002,
        "sender_full_name": "RalfJ",
        "timestamp": 1540921880
    },
    {
        "content": "<p>so we use <code>self</code> again</p>",
        "id": 136794008,
        "sender_full_name": "RalfJ",
        "timestamp": 1540921888
    },
    {
        "content": "<p>which kills the reborrows, including the raw one</p>",
        "id": 136794020,
        "sender_full_name": "RalfJ",
        "timestamp": 1540921907
    },
    {
        "content": "<p>and this is not easy to fix, either... <code>buffer_as_mut_slice</code> returns a reference so we cannot create the <code>NonNull</code> <em>after</em> creating the slice, either. hm.</p>",
        "id": 136796912,
        "sender_full_name": "RalfJ",
        "timestamp": 1540924428
    },
    {
        "content": "<p>I re-did a large chunk of the model, though the core stayed the same, fixing \"partially interior mutable data\" at <a href=\"https://github.com/RalfJung/miri/tree/new-interior-mut\" target=\"_blank\" title=\"https://github.com/RalfJung/miri/tree/new-interior-mut\">https://github.com/RalfJung/miri/tree/new-interior-mut</a>. Interestingly that also fixed <code>VecDeque</code>. I still have to understand how and why.</p>",
        "id": 146801303,
        "sender_full_name": "RalfJ",
        "timestamp": 1541430396
    },
    {
        "content": "<p>This now gets allowed because when we turn <code>&amp;mut</code> to <code>&amp;</code>, we first push a <code>Shr</code> (\"shared\" -&gt; accessible by raw ptrs) and then freeze</p>",
        "id": 147245856,
        "sender_full_name": "RalfJ",
        "timestamp": 1541616294
    },
    {
        "content": "<p>then <code>NonNull::from</code> creates a raw ptr, and when we use that the freezing is dropped but the raw ptr remains usable</p>",
        "id": 147245880,
        "sender_full_name": "RalfJ",
        "timestamp": 1541616318
    },
    {
        "content": "<p>I didn't <em>intend</em> to it this way but I have tos ay this seems to work quite well so I am inclined to leave it this way :D</p>",
        "id": 147245901,
        "sender_full_name": "RalfJ",
        "timestamp": 1541616337
    },
    {
        "content": "<p>huh, cool</p>",
        "id": 147247461,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541617647
    }
]