[
    {
        "content": "<p>also good. I think at very least this is a good way to mark an address as \"this is what i'm doing\" during this experimental phase</p>",
        "id": 276120846,
        "sender_full_name": "Gankra",
        "timestamp": 1647900782
    },
    {
        "content": "<p>True! And probably covering only MMIO needs is a bit too narrow.<br>\nBut yeah it was discussed a little in <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/.22creative.22.20Rust.20in.20embedded\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/.22creative.22.20Rust.20in.20embedded</a></p>",
        "id": 276120968,
        "sender_full_name": "Jubilee",
        "timestamp": 1647900866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Forging.20.60*mut.20T.60.20w.2Fo.20.60usize.20as.20*mut.20T.60/near/276115309\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> I think that's exactly the right approach for synthesizing a pointer out of nothing. That's not quite the use case I was asking about, but I'm hugely in favor of that as an API for things like \"make up an MMIO pointer\" or \"access a fixed-offset hardware table\".</p>\n</blockquote>\n<p>ftr at least for MMIO it would be good to look at how you'd do it on CHERI because, well, it's portable: there's a custody chain from hardware-&gt;firmware-&gt;bootloader-&gt;kernel of \"full address space capability\" (or maybe most of it - presumably firmware could be cheeky and reserve some for itself)</p>\n<p>so you can imagine this as \"your kernel entry-point gets something you can further fragment into MMIO regions\"</p>\n<p>you can then emulate this by using inline <code>asm!</code> to produce a <code>*mut T</code> (the value doesn't really matter outside of CHERI) that you call <code>.with_addr</code> on</p>",
        "id": 276123367,
        "sender_full_name": "eddyb",
        "timestamp": 1647902754
    },
    {
        "content": "<p>the main thing is I am not sure how much microcontroller stuff tries to excessively const-prop fixed hardware addresses</p>",
        "id": 276123445,
        "sender_full_name": "eddyb",
        "timestamp": 1647902790
    },
    {
        "content": "<p>anything parsing a DTB, enumerating PCI config space, etc. can already do all of this quite nicely</p>",
        "id": 276123470,
        "sender_full_name": "eddyb",
        "timestamp": 1647902815
    },
    {
        "content": "<p>I honestly imagine very little.</p>",
        "id": 276123474,
        "sender_full_name": "Jubilee",
        "timestamp": 1647902821
    },
    {
        "content": "<p>I mean, in C it's really easy to do so by default, because the default is often <code>#define</code></p>",
        "id": 276123481,
        "sender_full_name": "Talchas",
        "timestamp": 1647902828
    },
    {
        "content": "<p>right, I'm much more worried about the embedded Rust ecosystem</p>",
        "id": 276123497,
        "sender_full_name": "eddyb",
        "timestamp": 1647902844
    },
    {
        "content": "<p>For MMIO purposes, the assertion that no one else claims that same memory is far too strong. Particularly, any code should, at any time, be able to simply know the address of some particular MMIO thing (as a constant or whatever) and then use it without regard to who else might also use that same MMIO location before or after.</p>",
        "id": 276124266,
        "sender_full_name": "Lokathor",
        "timestamp": 1647903438
    },
    {
        "content": "<p>Yeah, I suspected something like that might be the problem, which is why I approached the MMIO thing from the idea of a \"well-known address\" concept.</p>",
        "id": 276124388,
        "sender_full_name": "Jubilee",
        "timestamp": 1647903518
    },
    {
        "content": "<p>The MMIO that I generally see has all addresses known at compile time, but it's not unthinkable that MMIO might take place using addresses that are dynamically assigned.</p>",
        "id": 276124533,
        "sender_full_name": "Lokathor",
        "timestamp": 1647903613
    }
]