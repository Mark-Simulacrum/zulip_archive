[
    {
        "content": "<p>Im unsure what the difference between a <code>MaybeUninit&lt;[T; N]&gt;</code> and a <code>[MaybeUninit&lt;T&gt;; N]</code> is.<br>\nWhat I understand is that the latter is preferred when dealing with partial arrays, however the ArrayVec crate uses the former, but also deals with partial arrays. (<a href=\"https://github.com/bluss/arrayvec/blob/master/src/lib.rs#L95\" target=\"_blank\" title=\"https://github.com/bluss/arrayvec/blob/master/src/lib.rs#L95\">https://github.com/bluss/arrayvec/blob/master/src/lib.rs#L95</a>)</p>\n<p>And, is this okey to do?:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">array</span>: <span class=\"nc\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"c1\">// &lt;--- cast to *mut T, since the ptr() method gives *mut [T; 10]</span>\n<span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">some_value</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Notice the array within the MaybeUninit is never really initialized, but is still written to.</p>",
        "id": 171288038,
        "sender_full_name": "DutchGhost",
        "timestamp": 1563565754
    },
    {
        "content": "<blockquote>\n<p>Im unsure what the difference between a MaybeUninit&lt;[T; N]&gt; and a [MaybeUninit&lt;T&gt;; N] is.</p>\n</blockquote>\n<p>Good question! There isn't really any.</p>",
        "id": 171323071,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620711
    },
    {
        "content": "<p>If we had const generics, we might want to add methods to freely convert between the two.</p>",
        "id": 171323073,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620724
    },
    {
        "content": "<p>transmuting between the two is okay for any <code>T</code> and <code>N</code></p>",
        "id": 171323077,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620740
    },
    {
        "content": "<blockquote>\n<p>And, is this okey to do?</p>\n</blockquote>\n<p>yes. <code>ptr.write</code> on uninitialized memory is okay. having to do a raw ptr cast is not nice (IMO those should be frowned upon as much as <code>transmute</code>), but cannot always be avoided with our current APIs.</p>",
        "id": 171323120,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620801
    }
]