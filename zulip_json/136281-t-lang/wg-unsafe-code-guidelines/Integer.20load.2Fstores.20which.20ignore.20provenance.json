[
    {
        "content": "<p>Relating to <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/286\">https://github.com/rust-lang/unsafe-code-guidelines/issues/286</a>, what happens if we let integer loads strip provenance and integer stores leave provenance untouched. That lets us remove a dummy integer load followed by a store.</p>",
        "id": 278492713,
        "sender_full_name": "Zoxc",
        "timestamp": 1649629076
    },
    {
        "content": "<p>If type punning between pointers with provenance and integers are done, you could be left with stale provenances in memory, which is a bit odd. I can't tell if there's an issue with that.</p>",
        "id": 278492896,
        "sender_full_name": "Zoxc",
        "timestamp": 1649629360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116466\">Zoxc</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Integer.20load.2Fstores.20which.20ignore.20provenance/near/278492713\">said</a>:</p>\n<blockquote>\n<p>Relating to <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/286\">https://github.com/rust-lang/unsafe-code-guidelines/issues/286</a>, what happens if we let integer loads strip provenance and integer stores leave provenance untouched. That lets us remove a dummy integer load followed by a store.</p>\n</blockquote>\n<p>Integer stores can't really leave provenance untouched - integers values don't ever have provenance</p>",
        "id": 278493468,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649630309
    },
    {
        "content": "<p>As in they don't change the provenance already stored in memory. So they don't clear it.</p>",
        "id": 278493480,
        "sender_full_name": "Zoxc",
        "timestamp": 1649630363
    },
    {
        "content": "<p>That would be <em>disastrously</em> bad I think. This means that before <code>x = 5;</code>, <code>x</code> is not dead</p>",
        "id": 278493533,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649630426
    },
    {
        "content": "<p>Its integer value would be dead, which may be what matters if <code>x</code> is an integer. It's does seem a bit wacky though, and <code>memcpy</code> would clear provenance in cases where stores wouldn't.</p>",
        "id": 278493687,
        "sender_full_name": "Zoxc",
        "timestamp": 1649630655
    },
    {
        "content": "<p>What I mean is that the values in the memory backing <code>x</code> are not dead, which is the actual property we need to eliminate dead stores</p>",
        "id": 278493768,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649630773
    },
    {
        "content": "<p>Say you have <code>x = 4; x = 5;</code>, you could still remove <code>x = 4;</code> since the integer value is dead. You'd need to mix in types with provenance to cause issues.</p>",
        "id": 278494149,
        "sender_full_name": "Zoxc",
        "timestamp": 1649631415
    },
    {
        "content": "<p>why would you ever want that behavior...??</p>",
        "id": 278495995,
        "sender_full_name": "RalfJ",
        "timestamp": 1649634399
    },
    {
        "content": "<p>if loads strip provenance (without exposing it!), we can optimize them and remove dead loads just like now</p>",
        "id": 278496002,
        "sender_full_name": "RalfJ",
        "timestamp": 1649634425
    },
    {
        "content": "<p>You'd be left with say a <code>erase_provinence</code> instruction though right? I was just curious to see if that could be avoided.</p>",
        "id": 278496425,
        "sender_full_name": "Zoxc",
        "timestamp": 1649635106
    },
    {
        "content": "<p>no, if there's no expose you are not left with anything</p>",
        "id": 278497250,
        "sender_full_name": "RalfJ",
        "timestamp": 1649636199
    },
    {
        "content": "<p>you do have to be careful when removing a \"store of the value that was just loaded\", but doing that means <em>more</em> provenance is preserved which <em>usually</em> should only mean less UB, not more</p>",
        "id": 278497277,
        "sender_full_name": "RalfJ",
        "timestamp": 1649636275
    },
    {
        "content": "<p>Ah right. I guess this model not useful then.</p>",
        "id": 278497964,
        "sender_full_name": "Zoxc",
        "timestamp": 1649637169
    }
]