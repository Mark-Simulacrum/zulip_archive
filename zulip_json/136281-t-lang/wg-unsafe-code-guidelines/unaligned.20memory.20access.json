[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> memory accesses happen on a place, and a place consists of a pointer, a size, and an alignment. when you use a pointer to access memory, a (pointer)-value-to-place conversion occurs. at that point, the size and alignment of the place are determined with size_of_val and align_of_val. when the access later happens, and the pointer does not actually match the alignment given in the place, Miri detects UB.</p>",
        "id": 159062060,
        "sender_full_name": "RalfJ",
        "timestamp": 1550750705
    },
    {
        "content": "<p>So when one creates a reference from a pointer, we just check the reference validity, and that checks that the place it points to has the right alignment?</p>",
        "id": 159062165,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550750871
    },
    {
        "content": "<blockquote>\n<p>when one creates a reference from a pointer, we just check the reference validity</p>\n</blockquote>\n<p>yes</p>\n<blockquote>\n<p>that checks that the place it points to has the right alignment?</p>\n</blockquote>\n<p>no, no place is involved there. we can just compare the pointer value with <code>align_of_val</code>.</p>",
        "id": 159062236,
        "sender_full_name": "RalfJ",
        "timestamp": 1550750964
    },
    {
        "content": "<p>I think I found a feature request for miri here. When dereferencing an unaligned pointer the error tells me the actual alignment of the place, and the value expected: \"tried to access memory with alignment 8, but alignment 16 is required\" but when I create an invalid reference it \"just\" tells me \"type validation failed: encountered unaligned reference\"</p>",
        "id": 159062284,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751004
    },
    {
        "content": "<p>would be cool if that could also tell me the alignment required, and the alignment \"provided\"</p>",
        "id": 159062297,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751031
    },
    {
        "content": "<p>re: what I originally said, actually currently we don't use <code>align_of_val</code> for ref-to-place conversions, we use the static alignment reflected in the type</p>",
        "id": 159062306,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751054
    },
    {
        "content": "<blockquote>\n<p>we can just compare the pointer value with align_of_val.</p>\n</blockquote>\n<p>Ah duh, yes, that makes sense.</p>",
        "id": 159062310,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751055
    },
    {
        "content": "<p>I recall hearing about some system (maybe Java) that stashed flags in the low-order bits of &gt;byte-aligned pointers.</p>",
        "id": 159062355,
        "sender_full_name": "Daniel Carosone",
        "timestamp": 1550751095
    },
    {
        "content": "<p>which is probably more reasonable because we can determine it statically. ultimately the expected alignment of a load must be known sttaically, after all.</p>",
        "id": 159062356,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751096
    },
    {
        "content": "<blockquote>\n<p>would be cool if that could also tell me the alignment required, and the alignment \"provided\"</p>\n</blockquote>\n<p>sure, make a bug report (this would be against rustc, that's part of the validation code that CTFE also uses)</p>",
        "id": 159062416,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751131
    },
    {
        "content": "<p>Yes, but when allocating memory, some of the methods pass an alignment manually. E.g. when allocating a <code>[u8]</code>, I can choose the alignment</p>",
        "id": 159062425,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751148
    },
    {
        "content": "<p>yes? what does that have to do with our discussion?</p>",
        "id": 159062436,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751170
    },
    {
        "content": "<p>when you allocate a <code>[u16]</code> and you use alignment 1, you have UB by the rules I stated above</p>",
        "id": 159062450,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751188
    },
    {
        "content": "<p><code>align_of_val</code> wouldnt know how you allocated that value anyway</p>",
        "id": 159062454,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751196
    },
    {
        "content": "<p>All of this is obvious if one knows that miri has a linear memory region, and when one allocates with some alignment, then one gets a pointer whose address is aligned properly. I haven't thought about how that would be implemented till now, but it probably does not make sense to implement that in any other way.</p>",
        "id": 159062516,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751262
    },
    {
        "content": "<p>I just thought that maybe, miri allocations where \"disjoint\" memory regions</p>",
        "id": 159062522,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751279
    },
    {
        "content": "<p>so that if I allocate twice a [u8; 16], that I can't use a pointer to the first one to access the second region or something</p>",
        "id": 159062541,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751311
    },
    {
        "content": "<p>but it suffice to remember which allocation each pointer was crated from, and then check on dereference that it points to somewhere inside that allocation</p>",
        "id": 159062690,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751523
    },
    {
        "content": "<blockquote>\n<p>miri has a linear memory region</p>\n</blockquote>\n<p>what do you mean by this?</p>",
        "id": 159062841,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751693
    },
    {
        "content": "<blockquote>\n<p>miri allocations where \"disjoint\" memory regions</p>\n</blockquote>\n<p>they are</p>",
        "id": 159062845,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> this information, which allocation is associated to which pointer / reference, is not part of Stacked Borrows, right ?</p>",
        "id": 159062848,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751703
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">@RalfJ</span> this information, which allocation is associated to which pointer / reference, is not part of Stacked Borrows, right ?</p>\n</blockquote>\n<p>correct, that's just miri's basic memory model</p>",
        "id": 159062855,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751720
    },
    {
        "content": "<p>which is not necessarily the same as Rust's</p>",
        "id": 159062903,
        "sender_full_name": "RalfJ",
        "timestamp": 1550751732
    },
    {
        "content": "<p>so how is that checked ?</p>",
        "id": 159062910,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751749
    },
    {
        "content": "<p>does every pointer get an associated allocation, and that's propagated to all derived pointers /references ?</p>",
        "id": 159062918,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751774
    },
    {
        "content": "<p>maybe not even an allocation, maybe just some \"bounds\", e.g., pointer value + range of values that it can take, which is why the error happens when the pointer is offsetted, and not on dereference</p>",
        "id": 159063017,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550751858
    },
    {
        "content": "<blockquote>\n<p>so how is that checked ?</p>\n</blockquote>\n<p>it's less checked and  more by construction. sorry I dont have the time to explain the memory model right now.</p>",
        "id": 159069367,
        "sender_full_name": "RalfJ",
        "timestamp": 1550757685
    },
    {
        "content": "<p>ideally I should explain it into a <code>.md</code> file anyway and put that somewhere. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what would be a good place for a document explaining miri's memory model? the rustc guide? it is also used by CTFE, after all.</p>",
        "id": 159069391,
        "sender_full_name": "RalfJ",
        "timestamp": 1550757717
    },
    {
        "content": "<p>yes, the guide is the idea place for this</p>",
        "id": 159072583,
        "sender_full_name": "oli",
        "timestamp": 1550760242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> maybe pointing to the exact page from the miri front page might be helpful for interested parties, too</p>",
        "id": 159072647,
        "sender_full_name": "oli",
        "timestamp": 1550760268
    },
    {
        "content": "<p>In which aspect is this memory model relevant for Rust programmers ?</p>",
        "id": 159072951,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760523
    },
    {
        "content": "<p>to learn about memory models? :D and to understand how CTFE works</p>",
        "id": 159072973,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760548
    },
    {
        "content": "<p>As in, it might be better to document it in the miri repo, and link it / include it, in the rustc-guide and other document</p>",
        "id": 159072978,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> if my code is correct according to miri's memory model, is it also correct in x86 ?</p>",
        "id": 159072999,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760579
    },
    {
        "content": "<p>or in other words, is the intent to make miri's memory model the memory model that all rust programs should adhere to ?</p>",
        "id": 159073081,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760606
    },
    {
        "content": "<p>note that Rust's memory model is even further from x86 than from Miri's</p>",
        "id": 159073179,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760712
    },
    {
        "content": "<p>but the intent is for Miri's model to be a sound approximation of Rust's model, yes</p>",
        "id": 159073235,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760730
    },
    {
        "content": "<p>as in, every program defined in Miri's model should be defined in Rust's model</p>",
        "id": 159073266,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760745
    },
    {
        "content": "<p>So I think that should be its own document, with the intent that it will be RFC'ed at some point</p>",
        "id": 159073281,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760755
    },
    {
        "content": "<p>there are some hard questions there about transmuting pointers to integers, but let's ignore those</p>",
        "id": 159073300,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760768
    },
    {
        "content": "<p>I dont think it needs RFC'ing, it's a compiler implementation detail</p>",
        "id": 159073317,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760784
    },
    {
        "content": "<p>maybe even in the UCG repo, just like stacked borrows, as documentation for now of what miri does</p>",
        "id": 159073322,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760786
    },
    {
        "content": "<p>the Rust memory model needs RFC'ing</p>",
        "id": 159073328,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760789
    },
    {
        "content": "<p>but it first needs a paper, because it's that far out there^^</p>",
        "id": 159073333,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760800
    },
    {
        "content": "<p>so the programs that miri's model will accept is a subset of the one that rust memory model accepts ?</p>",
        "id": 159073421,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760851
    },
    {
        "content": "<p>hopefully</p>",
        "id": 159073435,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760868
    },
    {
        "content": "<p>and moreover, if a program gets accepted by both it has the same behavior (that might seem obvious but it isnt^^)</p>",
        "id": 159073476,
        "sender_full_name": "RalfJ",
        "timestamp": 1550760904
    },
    {
        "content": "<p>so I think that would be a language feature worth guaranteeing, but anyways, I'm digressing, any place is fine for me as long as it gets written down somewhere at some point.</p>",
        "id": 159073510,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550760930
    },
    {
        "content": "<p>it is certainly worth guaranteeing, but it may be really, really hard</p>",
        "id": 159073999,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761214
    },
    {
        "content": "<p>and the Miri model should also be relatively simple</p>",
        "id": 159074011,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761229
    },
    {
        "content": "<p>like, one example of a case where we currently don't achieve this is that when you compare two pointers into different objects, they will never be equal. but in reality, if two objects are allocated right next to each other, a pointer to the end of one object might compare equal to a pointer to the beginning of another.</p>",
        "id": 159074064,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761272
    },
    {
        "content": "<p>we could restrict the comparisons we allow in Miri's model, but that means programs will stop working that really should work</p>",
        "id": 159074088,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761296
    },
    {
        "content": "<blockquote>\n<p>like, one example of a case where we currently don't achieve this is that when you compare two pointers into different objects, they will never be equal. but in reality, if two objects are allocated right next to each other, a pointer to the end of one object might compare equal to a pointer to the beginning of another.</p>\n</blockquote>\n<p>I thought that this was undefined behavior.</p>",
        "id": 159074223,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550761369
    },
    {
        "content": "<p>no, both C and C++ allow this (but C++ is vague about what the result is)</p>",
        "id": 159074303,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761426
    },
    {
        "content": "<p>this is related to the special exception for the pointer \"right at the end\" (often called one-past-the-end) of an allocation</p>",
        "id": 159074336,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761441
    },
    {
        "content": "<p>i don't recall it that way, i recall that the behavior of comparing pointers originating from different allocations is undefined</p>",
        "id": 159074414,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550761487
    },
    {
        "content": "<p>nope, you are mistaken</p>",
        "id": 159074554,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761567
    },
    {
        "content": "<p>(I am talking about <code>==</code> and <code>!=</code> comparison)</p>",
        "id": 159074563,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761577
    },
    {
        "content": "<p>that is, if you have a pointer to an [u8; N] array, you can use that pointer, and pointers derived from it, to refer to elements in the array, and one past the end, but if you allocate two [u8; N] arrays, you can't use a pointer to an element of the first array to access an element of the second. If the \"one-past-the-end\" pointer of the first array, happens to have the same address as the first element of the second array, those two pointers are allowed to compare differently, even though they have the same address</p>",
        "id": 159074566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550761581
    },
    {
        "content": "<p>you can't use the pointer to <em>access</em> the other side</p>",
        "id": 159074584,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761602
    },
    {
        "content": "<p>but we talked about <em>comparing pointers</em></p>",
        "id": 159074596,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761608
    },
    {
        "content": "<p>different thing</p>",
        "id": 159074599,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761609
    },
    {
        "content": "<p>the access is UB, the comparison is not</p>",
        "id": 159074623,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761637
    },
    {
        "content": "<p>i thought the comparison was also UB</p>",
        "id": 159074640,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550761662
    },
    {
        "content": "<p>in C, the comparison must \"compare the physical representations of the pointer\" (but really compilers ignore that), in C++ they say something about the result being unspecified or so</p>",
        "id": 159074642,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761663
    },
    {
        "content": "<p>hmm</p>",
        "id": 159074670,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550761682
    },
    {
        "content": "<p>so the comparison is defined behavior but they may either compare equal or not</p>",
        "id": 159074713,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761695
    },
    {
        "content": "<p>whether comparing them multiple times must yield consistent result is unknown (as usual in C/C++...)</p>",
        "id": 159074739,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761719
    },
    {
        "content": "<p>well actually in C it must yield consistent results, the standard permits no non-determinism</p>",
        "id": 159074765,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761747
    },
    {
        "content": "<p>in C++ it's unclear</p>",
        "id": 159074767,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761749
    },
    {
        "content": "<p>and anyway LLVM implements the C++ version even for C</p>",
        "id": 159074782,
        "sender_full_name": "RalfJ",
        "timestamp": 1550761766
    },
    {
        "content": "<p><a href=\"http://eel.is/c++draft/expr.eq#3.1\" target=\"_blank\" title=\"http://eel.is/c++draft/expr.eq#3.1\">http://eel.is/c++draft/expr.eq#3.1</a></p>",
        "id": 159075001,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550761937
    },
    {
        "content": "<p>So the result is unspecified.</p>",
        "id": 159075019,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550761958
    },
    {
        "content": "<p>That is, the comparison is allowed to happen, but the result can be anything.</p>",
        "id": 159075160,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762079
    },
    {
        "content": "<p>well, it can be true or false</p>",
        "id": 159075327,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762178
    },
    {
        "content": "<p>but I read this as requiring a valid boolean, i.e., using this is a conditional <em>is</em> allowed</p>",
        "id": 159075349,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762202
    },
    {
        "content": "<p>yes, but what miri does (returning always false) is ok according to this</p>",
        "id": 159075388,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762237
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">@RalfJ</span> maybe pointing to the exact page from the miri front page might be helpful for interested parties, too</p>\n</blockquote>\n<p>for now I opened an issue: <a href=\"https://github.com/rust-lang/rust/issues/58618\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58618\">https://github.com/rust-lang/rust/issues/58618</a></p>",
        "id": 159075408,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762251
    },
    {
        "content": "<p>I have this on my list, but it's quite far down (I think a basic spec of MIR <em>without</em> the memory model is more important), so that shouldnt block anyone else from giving it a shot</p>",
        "id": 159075470,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762283
    },
    {
        "content": "<p>true, but I deliberately said the behavior is the <em>same</em> in both models</p>",
        "id": 159075497,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762303
    },
    {
        "content": "<p>reading this part of the C++ standard, i cannot but think that none of this makes much sense as is if you have ZSTs in the language (which C and C++ don't have), then you have many objects at the same address</p>",
        "id": 159075504,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762309
    },
    {
        "content": "<p>and if one model allows true/false, and the other always makes it true, that's not the same behavior</p>",
        "id": 159075510,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762315
    },
    {
        "content": "<p>well, with ZSTs the pointer is always one-past-the-end</p>",
        "id": 159075550,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> to make the behavior the same in both models, we can just make it undefined</p>",
        "id": 159075554,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762351
    },
    {
        "content": "<p>so they all may compare arbitarily</p>",
        "id": 159075556,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762352
    },
    {
        "content": "<p>so the comparison itself wouldn't return false on miri, but be an error, and when targetting something else, anything can happen</p>",
        "id": 159075643,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762405
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">@RalfJ</span> to make the behavior the same in both models, we can just make it undefined</p>\n</blockquote>\n<p>so you want to make <code>ptr::eq</code> on ZSTs UB? I dont think that'll make people happy^^</p>",
        "id": 159075651,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762408
    },
    {
        "content": "<p>oh you mean undefined in Miri only</p>",
        "id": 159075663,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762424
    },
    {
        "content": "<p>yes we could. but Miri is also supposed to be <em>useful</em>...</p>",
        "id": 159075673,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762434
    },
    {
        "content": "<p>i think that if we are going to adopt similar semantics to C++, we need to handle ZSTs differently anyways</p>",
        "id": 159075678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762441
    },
    {
        "content": "<p>ptr comparison has nothing to do with types, but I assume you mean zero-sized allocations</p>",
        "id": 159075726,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762472
    },
    {
        "content": "<p>(which we do have, e.g. from ZST statics)</p>",
        "id": 159075733,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762479
    },
    {
        "content": "<p>like two pointers with the same address to ZSTs, are they pointing their objects? their objects _and_ one past the end? their object and all other objects in that address? etc.</p>",
        "id": 159075744,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762487
    },
    {
        "content": "<p>there's no object^^</p>",
        "id": 159075761,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762498
    },
    {
        "content": "<p><code>4</code> is a valid pointer to a <code>[u32; 0]</code></p>",
        "id": 159075768,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762507
    },
    {
        "content": "<p>there is a value</p>",
        "id": 159075838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762532
    },
    {
        "content": "<p>there's a pointer value</p>",
        "id": 159075849,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762544
    },
    {
        "content": "<p>but no pointed-to value</p>",
        "id": 159075854,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762548
    },
    {
        "content": "<p>in the language/machine</p>",
        "id": 159075859,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762552
    },
    {
        "content": "<p>ZSTs are a fiction</p>",
        "id": 159075882,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762569
    },
    {
        "content": "<p>I think trying to make them actually exist in the memory model will make that model a lot more complicated, for no gain at all</p>",
        "id": 159075923,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762610
    },
    {
        "content": "<p>i'm not suggesting that, just saying that the memory model will need to explain what happens with zero-sized allocations, ZST values, etc. somewhere</p>",
        "id": 159076025,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762672
    },
    {
        "content": "<p>even if that is, a ZST value can have any address, addresses to ZST values of the same type always compare equally / different / are not comparable at all, etc.</p>",
        "id": 159076092,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762721
    },
    {
        "content": "<p>zero-sized allocations, yes. they are just allocations with size 0 though and should not get any special treatment.<br>\nZST, no. they just dont show up any more. the memory model doesnt care about types.</p>",
        "id": 159076095,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762723
    },
    {
        "content": "<p>there's no such thing as a ZST value, at the language semantics level</p>",
        "id": 159076120,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762747
    },
    {
        "content": "<p>i thought that <code>Box&lt;ZST&gt;</code> performed a zero-sized allocation, returning a pointer, and that pointer was the address of the value of that type</p>",
        "id": 159076207,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762777
    },
    {
        "content": "<p><code>Box&lt;ZST&gt;</code> returns <code>align_of::&lt;ZST&gt;</code></p>",
        "id": 159076233,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762796
    },
    {
        "content": "<p>no allocation happens</p>",
        "id": 159076238,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762798
    },
    {
        "content": "<p>that's how it is implemented, is that the operational semantics for allocating a ZST ?</p>",
        "id": 159076262,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762815
    },
    {
        "content": "<p>but there are ways to get an actual zero-sized allocation, such as <code>static FOO: ZST</code></p>",
        "id": 159076263,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762815
    },
    {
        "content": "<p>from the memory model perspective you dont allocate a type but a size/alignment. and sure, the size can be 0. so what?</p>",
        "id": 159076291,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762844
    },
    {
        "content": "<p>If I do GlobalAlloc::alloc(Layout&lt;ZST&gt;) -&gt; *mut u8, can I do *ptr = ZST() ?</p>",
        "id": 159076296,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550762848
    },
    {
        "content": "<p>the GlobalAlloc contract says you are not allowed to use it with size 0</p>",
        "id": 159076318,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762876
    },
    {
        "content": "<p>but you are also jumping around between lots of different topics here^^</p>",
        "id": 159076373,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762894
    },
    {
        "content": "<p><code>*ptr = ZST</code> is a zero-sized memory access, which does not actually do anything in memory (but it should check alignment, which Miri currently does not implement correctly)</p>",
        "id": 159076431,
        "sender_full_name": "RalfJ",
        "timestamp": 1550762947
    },
    {
        "content": "<p>I would prefer a programming language in which ZST don't need to be handled exceptionally</p>",
        "id": 159076518,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763003
    },
    {
        "content": "<p>I know this is how things are currently implemented, but I always assumed that these were implementation details.</p>",
        "id": 159076577,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763036
    },
    {
        "content": "<p>well, just go look at the slice iterator or <code>Box</code> source code. in Rust, they do need special treatment.</p>",
        "id": 159076594,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763050
    },
    {
        "content": "<p>and in the model, zero-sized <em>accesses</em> (the types dont matter) <em>are</em> special in the sense that they dont actually require there to be a valid allocation anywhere</p>",
        "id": 159076661,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763098
    },
    {
        "content": "<p>In this particular implementation of the standard library they need special treatment, but whether it is necessary to leak that special treatment to users is a different issue</p>",
        "id": 159076682,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763119
    },
    {
        "content": "<p>we could say that they do, but then a whole lot of existing code has UB</p>",
        "id": 159076727,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763125
    },
    {
        "content": "<p>so we likely don't want that</p>",
        "id": 159076731,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763129
    },
    {
        "content": "<p>well, we can either have a special clause for empty accesses, or make a lot of existing code (in libstd and most likely elsewhere) UB.</p>",
        "id": 159076766,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763166
    },
    {
        "content": "<p>I dont see a third way.</p>",
        "id": 159076782,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763175
    },
    {
        "content": "<p>also note that the special case is rather tiny, it's one early return in the code for reads and writes</p>",
        "id": 159076804,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763186
    },
    {
        "content": "<p>The third way would be ZSTs are not special, and code that users can write today that's guaranteed to work still does not have UB</p>",
        "id": 159076877,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763234
    },
    {
        "content": "<p>you cant just axiomatize that, you have to make it happen in the model</p>",
        "id": 159076947,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763256
    },
    {
        "content": "<p>I don't think that's possible</p>",
        "id": 159076956,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763263
    },
    {
        "content": "<p>if a user is avoiding Box&lt;ZST&gt; and is just using *mut ptr = align_of&lt;ZST&gt;(), and relying that the addresses match, then that code might have UB, but that's not something that we are guaranteeing</p>",
        "id": 159076972,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763275
    },
    {
        "content": "<p>and again, it's not the zero-sized <em>types</em> that are special, it's the <em>accesses</em></p>",
        "id": 159076988,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763287
    },
    {
        "content": "<blockquote>\n<p>if a user is avoiding Box&lt;ZST&gt; and is just using *mut ptr = align_of&lt;ZST&gt;(), and relying that the addresses match, then that code might have UB, but that's not something that we are guaranteeing</p>\n</blockquote>\n<p>addresses match? we are talking about accesses, not ptr comparison!</p>",
        "id": 159077064,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763336
    },
    {
        "content": "<p>I thought that we were also talking about pointers to ZSTs and whether comparing the pointers is allowed or not</p>",
        "id": 159077084,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763350
    },
    {
        "content": "<p><code>let x = *Box::new(ZST)</code> is UB without that special clause</p>",
        "id": 159077091,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763359
    },
    {
        "content": "<p>because you are doing a memory access to address <code>1</code></p>",
        "id": 159077148,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763380
    },
    {
        "content": "<p>and why would there be an allocation there</p>",
        "id": 159077152,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763383
    },
    {
        "content": "<p><em>comparing pointers does not care about the type</em> (I said that above, hence the emphasis...)</p>",
        "id": 159077183,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763411
    },
    {
        "content": "<p>that is not doing a memory access at address 1, that's reading 0 memory from address 1, which is a <code>nop</code></p>",
        "id": 159077229,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763442
    },
    {
        "content": "<p>you just dclared zero-siozed accesses a special case</p>",
        "id": 159077259,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763460
    },
    {
        "content": "<p>by making them a NOP</p>",
        "id": 159077262,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763463
    },
    {
        "content": "<p>you said above you didnt want that</p>",
        "id": 159077279,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763471
    },
    {
        "content": "<p>please make up your mind</p>",
        "id": 159077283,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763473
    },
    {
        "content": "<p>i don't know why this is turning violent, but this is not what I said</p>",
        "id": 159077340,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763490
    },
    {
        "content": "<p>I am just getting frustrated because I feel like you keep ignoring what I am saying.</p>",
        "id": 159077370,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763509
    },
    {
        "content": "<p>so lets fall back</p>",
        "id": 159077396,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763528
    },
    {
        "content": "<p>also I should get some work done today, and this already took too much time -- sorry</p>",
        "id": 159077401,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763532
    },
    {
        "content": "<p>ok, better to do this some other time</p>",
        "id": 159077436,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763549
    },
    {
        "content": "<p>once we have some actual models written down, I can point at the special casing in accesses and the absence of special casing in ptr comparison</p>",
        "id": 159077460,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763571
    },
    {
        "content": "<p>and then we have a concrete ground for this discussion</p>",
        "id": 159077468,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763577
    },
    {
        "content": "<p>currently we likely are working under very different assumptions, hence the furstration</p>",
        "id": 159077480,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763587
    },
    {
        "content": "<p>i feel that when you talk about access and i talk about access we are referring to different things</p>",
        "id": 159077544,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763607
    },
    {
        "content": "<p>so that sounds like a good idea</p>",
        "id": 159077549,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763613
    },
    {
        "content": "<p>gosh I wish I could just have a pipe from my brain to a markdown file to be able to communicate the framework I am working in here^^</p>",
        "id": 159077637,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763698
    },
    {
        "content": "<p>typing all of that up is <em>so slow</em></p>",
        "id": 159077645,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763709
    },
    {
        "content": "<p>or just do a brain transfer to you :P</p>",
        "id": 159077719,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763739
    },
    {
        "content": "<p>if that happens some day, it will be powered by Rust</p>",
        "id": 159077726,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763745
    },
    {
        "content": "<p>:D</p>",
        "id": 159077731,
        "sender_full_name": "RalfJ",
        "timestamp": 1550763751
    },
    {
        "content": "<p>and all this things will make sure that you don't pipe the wrong things out of your brain :P</p>",
        "id": 159077752,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550763766
    }
]