[
    {
        "content": "<p>For a WIP blog post, I came up with this example to show that uninitialized memory is weird: <a href=\"https://godbolt.org/z/JX4B4N\" target=\"_blank\" title=\"https://godbolt.org/z/JX4B4N\">https://godbolt.org/z/JX4B4N</a></p>",
        "id": 170833221,
        "sender_full_name": "RalfJ",
        "timestamp": 1563109159
    },
    {
        "content": "<p><code>make_true</code> returns false, which should be \"impossible\" no matter which bit pattern <code>x</code> has</p>",
        "id": 170833224,
        "sender_full_name": "RalfJ",
        "timestamp": 1563109172
    },
    {
        "content": "<p>I'd like to also have a C or C++ version of this, but the \"obvious\" translation does not get optimized to return 0. Does someone know a way to trigger that?</p>",
        "id": 170833227,
        "sender_full_name": "RalfJ",
        "timestamp": 1563109198
    },
    {
        "content": "<p>the best I could come up with so far is <a href=\"https://godbolt.org/z/PvZGQB\" target=\"_blank\" title=\"https://godbolt.org/z/PvZGQB\">https://godbolt.org/z/PvZGQB</a></p>",
        "id": 170834310,
        "sender_full_name": "RalfJ",
        "timestamp": 1563111289
    },
    {
        "content": "<p>but having to work with an unknown parameter is annoying</p>",
        "id": 170834313,
        "sender_full_name": "RalfJ",
        "timestamp": 1563111299
    },
    {
        "content": "<p><code>new unsigned char</code> will initialize to 0</p>",
        "id": 170836229,
        "sender_full_name": "nagisa",
        "timestamp": 1563114746
    },
    {
        "content": "<p><code>new</code> calls the default constructor.</p>",
        "id": 170836235,
        "sender_full_name": "nagisa",
        "timestamp": 1563114779
    },
    {
        "content": "<p>Wait, it doesn’t…?</p>",
        "id": 170836287,
        "sender_full_name": "nagisa",
        "timestamp": 1563114843
    },
    {
        "content": "<p>In that case </p>\n<div class=\"codehilite\"><pre><span></span>static bool always_return_true(unsigned char *x) {\n    return (*x &gt; 120) || (*x &lt; 120);\n}\n\nbool make_true(bool test) {\n    unsigned char x;\n    return always_return_true(&amp;x);\n}\n</pre></div>\n\n\n<p>works for both C++ and C.</p>",
        "id": 170836431,
        "sender_full_name": "nagisa",
        "timestamp": 1563115094
    },
    {
        "content": "<p>My bad, <code>x &gt; 120 || x &lt; 120</code> is not the full range.</p>",
        "id": 170836618,
        "sender_full_name": "nagisa",
        "timestamp": 1563115479
    },
    {
        "content": "<p>If you are curious, here's that blog post: <a href=\"https://www.ralfj.de/blog/2019/07/14/uninit.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2019/07/14/uninit.html\">https://www.ralfj.de/blog/2019/07/14/uninit.html</a></p>",
        "id": 170839976,
        "sender_full_name": "RalfJ",
        "timestamp": 1563122197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> you dont think you could add a link to that one from your uninit post? :D</p>",
        "id": 170839978,
        "sender_full_name": "RalfJ",
        "timestamp": 1563122210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <code>new unsigned char ()</code> or <code>new unsigned char {}</code> should value-initialize the memory, without the <code>()</code> and the <code>{}</code> the memory is default-initialized which for <code>unsigned char</code> is uninitialized IIRC (I often mix <code>value-initialized</code> with <code>default-initialized</code> so maybe the names are the other way around)</p>",
        "id": 170877463,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563183361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> my favourite snippet is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">unsigned</span><span class=\"w\"> </span><span class=\"n\">char</span><span class=\"w\"> </span><span class=\"n\">uninit</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The memory allocated by malloc is uninitialized in the C abstract machine. So any C / C++ compiler worth its salt will avoid allocating any memory, and obviously, trying to read it. Since the result will always be uninitialized, there doesn't need to be any of that.</p>",
        "id": 170877581,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563183477
    },
    {
        "content": "<p>People saying \"what the hardware does\", or in this case, \"what the memory allocator does\", are missing the point, because it doesn't matter whether the memory allocator returns zeroed memory, or some junk from a previous allocation, or only allocates when the memory is actually touched, e.g., by a read, since in the C abstract machine, none of that needs to happen here.</p>",
        "id": 170877678,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563183559
    },
    {
        "content": "<p>GCC vs Clang: <a href=\"https://gcc.godbolt.org/z/cqV8Ve\" target=\"_blank\" title=\"https://gcc.godbolt.org/z/cqV8Ve\">https://gcc.godbolt.org/z/cqV8Ve</a></p>",
        "id": 170878388,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563184293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> yeah, I was pretty confident that <code>new T</code> calls the default constructor and you seem to confirm it. I just wasn’t aware that the \"default constructor\" for \"unsigned char\" leaves data uninitialized :D</p>",
        "id": 170881909,
        "sender_full_name": "nagisa",
        "timestamp": 1563187747
    },
    {
        "content": "<p><code>unsigned char</code> doesn't have a default constructor per se IIRC</p>",
        "id": 170881921,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187775
    },
    {
        "content": "<p>Hence quoted.</p>",
        "id": 170881928,
        "sender_full_name": "nagisa",
        "timestamp": 1563187787
    },
    {
        "content": "<p>there are two things, default initialization, and value initialization</p>",
        "id": 170881930,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187790
    },
    {
        "content": "<p>I always confuse which one is which</p>",
        "id": 170881934,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187798
    },
    {
        "content": "<p>but for primitive types one is equivalent to <code>int x;</code> and means that <code>x</code> is indeterminate</p>",
        "id": 170881994,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187823
    },
    {
        "content": "<p>and that extends to aggregates, e.g. <code>struct S { int x; int y }; S s;</code> where <code>s</code> is also indeterminate.</p>",
        "id": 170882013,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187850
    },
    {
        "content": "<p>Well, <code>T x</code> also default-initlializes in C++</p>",
        "id": 170882016,
        "sender_full_name": "nagisa",
        "timestamp": 1563187854
    },
    {
        "content": "<p>but then some aggregates in some situations are \"special\" and get a default constructor that might do something else</p>",
        "id": 170882042,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187878
    },
    {
        "content": "<p>(e.g. if one of the fields has a constructor)</p>",
        "id": 170882049,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187888
    },
    {
        "content": "<p>The catch to be aware of is that \"default-initialiser/constructor/whatever-you-call-it\" for certain types is undef.</p>",
        "id": 170882052,
        "sender_full_name": "nagisa",
        "timestamp": 1563187892
    },
    {
        "content": "<p>yep, there is a special way to \"value-initialize\", and that is to use <code>()</code> or <code>{}</code> to call the constructor directly.</p>",
        "id": 170882065,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187918
    },
    {
        "content": "<p>so to put it better, the constructor always initializes, but <code>T t;</code> doesn't always call the constructor</p>",
        "id": 170882119,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187941
    },
    {
        "content": "<p>Which I’m surprised about. <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that’s a nice thing to jot down onto your C++ impossible to use right list :D</p>",
        "id": 170882122,
        "sender_full_name": "nagisa",
        "timestamp": 1563187949
    },
    {
        "content": "<p>it gets worse</p>",
        "id": 170882130,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187967
    },
    {
        "content": "<p><code>T t();</code> is a function declaration</p>",
        "id": 170882133,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187975
    },
    {
        "content": "<p>so you end up needing to write crazy syntax to actually avoid the ambiguity, and properly initialize a variable</p>",
        "id": 170882150,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563187997
    },
    {
        "content": "<p>or with C++11, you can just use <code>T t{};</code> which also initializes</p>",
        "id": 170882162,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563188013
    },
    {
        "content": "<p>yes. I remember that one. There’s also <code>banana &amp; peach == 0</code> inheritance from C. I used C++ professionally for a few years. I hate it.</p>",
        "id": 170882166,
        "sender_full_name": "nagisa",
        "timestamp": 1563188022
    },
    {
        "content": "<p>but then..... <code>T t{}</code> doesn't always do the same thing either</p>",
        "id": 170882175,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563188037
    },
    {
        "content": "<p>e.g. if <code>T</code> is an initializer list</p>",
        "id": 170882219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563188049
    },
    {
        "content": "<p>so now you can always use <code>T t{}</code> except... in some corner cases</p>",
        "id": 170882233,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563188084
    },
    {
        "content": "<p>There's also the reverse, calling the destructor the end the lifetime of an object. <code>~int(ptr)</code>and <code>ptr-&gt;~int()</code> do not work but if a template parameter <code>T</code> works out to incidentally be an <code>int</code> it is allowed as <code>ptr-&gt;~T()</code> which they call the pseduo-destructor. At this point I'm fairly certain the syntax of C++ is a game of trivia against the compiler.</p>",
        "id": 170882697,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563188601
    },
    {
        "content": "<p>it's probably the hardest game of trivia ever, although some of the Rust games of trivia that are online are quiet tricky as well</p>",
        "id": 170882894,
        "sender_full_name": "gnzlbg",
        "timestamp": 1563188832
    },
    {
        "content": "<blockquote>\n<p>Which I’m surprised about. <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> that’s a nice thing to jot down onto your C++ impossible to use right list :D</p>\n</blockquote>\n<p>that list has long overflown, I only collect blog posts about it now^^</p>",
        "id": 170882973,
        "sender_full_name": "RalfJ",
        "timestamp": 1563188887
    },
    {
        "content": "<p>Actually I have encountered some \"C++ is impossible to use correctly\" skeptics that claim otherwise and as a consequence do not see the point of Rust. If such a list was written down it would help in that conversation a great deal.</p>",
        "id": 171287648,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563565403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> I usually point to <a href=\"https://robert.ocallahan.org/2017/07/confession-of-cc-programmer.html\" target=\"_blank\" title=\"https://robert.ocallahan.org/2017/07/confession-of-cc-programmer.html\">https://robert.ocallahan.org/2017/07/confession-of-cc-programmer.html</a> and <a href=\"https://www.vice.com/en_us/article/a3mgxb/the-internet-has-a-huge-cc-problem-and-developers-dont-want-to-deal-with-it\" target=\"_blank\" title=\"https://www.vice.com/en_us/article/a3mgxb/the-internet-has-a-huge-cc-problem-and-developers-dont-want-to-deal-with-it\">https://www.vice.com/en_us/article/a3mgxb/the-internet-has-a-huge-cc-problem-and-developers-dont-want-to-deal-with-it</a></p>",
        "id": 171323047,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620673
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/rust/comments/cb49lb/coworker_rust_doesnt_offer_anything_c_doesnt/\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/cb49lb/coworker_rust_doesnt_offer_anything_c_doesnt/\">https://www.reddit.com/r/rust/comments/cb49lb/coworker_rust_doesnt_offer_anything_c_doesnt/</a> also has some good arguments</p>",
        "id": 171323056,
        "sender_full_name": "RalfJ",
        "timestamp": 1563620685
    },
    {
        "content": "<p>These are very basic and broad, and do not really back up their claims, so they're not very useful for a discussion in a technical setting.</p>",
        "id": 171323633,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563621750
    },
    {
        "content": "<p>The Chucklefish whitepaper also falls in the same bucket</p>",
        "id": 171323808,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563622115
    },
    {
        "content": "<p>Reddit discussion is more in-depth and makes some good points, but it's not really structured. I wonder if there is a summary \"Rust vs modern C++\" article somewhere.</p>",
        "id": 171323821,
        "sender_full_name": "Shnatsel",
        "timestamp": 1563622164
    },
    {
        "content": "<p>I am not aware of one. There is always <a href=\"https://blog.regehr.org/archives/1520\" target=\"_blank\" title=\"https://blog.regehr.org/archives/1520\">https://blog.regehr.org/archives/1520</a> for demonstrating the sheer size of the UB problem.</p>",
        "id": 171325245,
        "sender_full_name": "RalfJ",
        "timestamp": 1563625028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> but here's another one for the list: <a href=\"https://twitter.com/erdgeist/status/1151555830623408131\" target=\"_blank\" title=\"https://twitter.com/erdgeist/status/1151555830623408131\">https://twitter.com/erdgeist/status/1151555830623408131</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/erdgeist/status/1151555830623408131\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/61748149/ta_normal.jpg\"></a><p>Sometimes c++ is strange. Just fell for\n\n{\n  Pinger ping;\n  PingController pc(Pinger);\n}\n\nwondering why pc's constructor never was called.\n\nTurns out, compilers aggressively interpret everything smelling like a function definition – in this case pc – as one, without warning.</p><span>- Gerd Eist (@erdgeist)</span></div></div>",
        "id": 171338663,
        "sender_full_name": "RalfJ",
        "timestamp": 1563649368
    },
    {
        "content": "<p>The most vexing parse can make the development experience unpleasant sometimes, but it's not in any way related to UB or safety. It just causes very puzzling compiler errors (unless it's an RAII guard that is never referenced again, I guess?).</p>",
        "id": 171339236,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1563650444
    },
    {
        "content": "<p>here someone was thinking they had initialized a variable when they had not</p>",
        "id": 171339446,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650851
    },
    {
        "content": "<p>that can cause UB</p>",
        "id": 171339447,
        "sender_full_name": "RalfJ",
        "timestamp": 1563650853
    },
    {
        "content": "<p><code>pc</code> is not variable and especially not an uninitialized one, it's a declaration of an external function. Using it will likely complain about type mismatches (or else likely fail during linking because no such function exists), not read uninitialized memory.</p>",
        "id": 171339519,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1563651000
    },
    {
        "content": "<p>The most plausible way this causes UB is if something relies on a side effect of the intended constructor call but I see no indication of that in this case and in fact I've never seen that happen (while I have seen dozens of mysterious compiler errors).</p>",
        "id": 171339579,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1563651085
    },
    {
        "content": "<p>IIRC this can lead to you think you have a guard that does some stuff on \"drop\" but it won't? but maybe I just interpreted it all wrong.</p>",
        "id": 171339643,
        "sender_full_name": "RalfJ",
        "timestamp": 1563651196
    },
    {
        "content": "<p>Uh yeah, s/constructor/constructor or destructor/g</p>",
        "id": 171339693,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1563651253
    },
    {
        "content": "<p>I hit this once as well. Since then I only ever use <code>{}</code> to initialize. As in <code>PingController pc { ping }</code>.</p>",
        "id": 171342521,
        "sender_full_name": "nagisa",
        "timestamp": 1563656602
    },
    {
        "content": "<p>The only case where this really does go unnoticed, if you’re using this as a guard, as commented above.</p>",
        "id": 171342572,
        "sender_full_name": "nagisa",
        "timestamp": 1563656654
    },
    {
        "content": "<blockquote>\n<p>Uh yeah, s/constructor/constructor or destructor/g</p>\n</blockquote>\n<p>for completeness' sake, here's how this going wrong looks like in practice:<br>\n<a href=\"https://www.reddit.com/r/programminghorror/comments/3qm1zp/c_i_spend_much_time_to_find_the_mistake/\" target=\"_blank\" title=\"https://www.reddit.com/r/programminghorror/comments/3qm1zp/c_i_spend_much_time_to_find_the_mistake/\">https://www.reddit.com/r/programminghorror/comments/3qm1zp/c_i_spend_much_time_to_find_the_mistake/</a></p>",
        "id": 173491904,
        "sender_full_name": "RalfJ",
        "timestamp": 1566143619
    },
    {
        "content": "<p>Evil. Yet another reason why \"the mutex owns the data being protected\" is the far superior design :)</p>",
        "id": 173492813,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1566145228
    },
    {
        "content": "<p>Nice find.</p>\n<p>@rkruppe: </p>\n<blockquote>\n<p>The most vexing parse can make the development experience unpleasant sometimes, but it's not in any way related to UB or safety. It just causes very puzzling compiler errors (unless it's an RAII guard that is never referenced again, I guess?).</p>\n</blockquote>\n<p>Last famous words  <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span> TBH I thought that too</p>",
        "id": 173640438,
        "sender_full_name": "gnzlbg",
        "timestamp": 1566291975
    }
]