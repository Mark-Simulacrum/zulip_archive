[
    {
        "content": "<p>I noticed that <a href=\"https://doc.rust-lang.org/nightly/std/ptr/fn.write_bytes.html\"><code>ptr::write_bytes</code></a> currently says that the \"Additionally, the caller must ensure that writing count * size_of::&lt;T&gt;() bytes to the given region of memory results in a valid value of T. Using a region of memory typed as a T that contains an invalid value of T is undefined behavior.\"</p>\n<p>But we have <a href=\"https://doc.rust-lang.org/nightly/std/alloc/trait.GlobalAlloc.html#method.alloc_zeroed\"><code>alloc_zeroed</code></a> on <code>GlobalAlloc</code> which is implicitly provided to callers, and does not include such a clause in its documentation.</p>\n<p>One of these is wrong. I suspect we don't actually need to assert that 0s are a valid bit-pattern in write_bytes, though, as there's no typed access happening there AFAICT.</p>",
        "id": 208386196,
        "sender_full_name": "simulacrum",
        "timestamp": 1598643265
    },
    {
        "content": "<p>oh, I guess the default impl calls it with <code>*mut u8</code> and then it's fine</p>",
        "id": 208386317,
        "sender_full_name": "simulacrum",
        "timestamp": 1598643360
    },
    {
        "content": "<p>but I am interested in seeing if we can relax the constraint anyway, it doesn't seem like it should be necessary</p>",
        "id": 208386390,
        "sender_full_name": "simulacrum",
        "timestamp": 1598643392
    },
    {
        "content": "<p>Not only that it is *mut u8.<br>\nIt is a raw pointer.<br>\nEven if it was *mut T its fine as long as you don't dereference that as T</p>",
        "id": 208386436,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1598643419
    },
    {
        "content": "<p>The documentation implies otherwise, though, which is my point.</p>",
        "id": 208386522,
        "sender_full_name": "simulacrum",
        "timestamp": 1598643471
    },
    {
        "content": "<p>(For write_bytes)</p>",
        "id": 208386584,
        "sender_full_name": "simulacrum",
        "timestamp": 1598643491
    },
    {
        "content": "<p>Oh I forgot that <code>write_bytes</code> is also on a raw pointer.<br>\nthen you're right, I don't think this constraint is necessary</p>",
        "id": 208386620,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1598643530
    },
    {
        "content": "<p>I think the comment is meant to refer to what happens later when the data is read again... like, if you use this to overwrite a reference with zeros, it's UB the next time the reference is treated as such</p>",
        "id": 208425871,
        "sender_full_name": "RalfJ",
        "timestamp": 1598693932
    },
    {
        "content": "<p>the write itself is not UB though, it's the later read/copy/... that is UB.</p>",
        "id": 208425877,
        "sender_full_name": "RalfJ",
        "timestamp": 1598693954
    }
]