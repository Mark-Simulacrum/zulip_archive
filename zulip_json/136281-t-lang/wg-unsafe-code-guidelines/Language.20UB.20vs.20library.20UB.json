[
    {
        "content": "<p>The <a href=\"https://internals.rust-lang.org/t/why-even-unused-data-needs-to-be-valid/12734\">discussion following my recent blog post</a> is mostly about people being very confused about the distinction between validity invariant (\"language invariant\") and safety invariant (\"library invariant\"), and between language UB and library UB. We really need better terminology, so that we can start fixing all the docs to use that terminology consistently.</p>",
        "id": 204077920,
        "sender_full_name": "RalfJ",
        "timestamp": 1594903789
    },
    {
        "content": "<p>I also recall <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> suggesting we should avoid \"UB\" entirely as it is a burnt term at least for some people with a C/C++ background. On the other hand, it does have the right meaning. On yet another hand it would be nice to have a positive term for \"program whose behavior complies with compiler expectations\", and maybe \"program that satisfies library contract\", instead of a negative one (like \"UB-free\")</p>",
        "id": 204078327,
        "sender_full_name": "RalfJ",
        "timestamp": 1594904006
    },
    {
        "content": "<p>It maybe a \"burnt\" term but at least it is wide-spread and concise.</p>",
        "id": 204079240,
        "sender_full_name": "lzutao",
        "timestamp": 1594904473
    },
    {
        "content": "<p>I am also unsure if we want the terms for \"language UB\" and \"library UB\" to be similar (to demonstrate the parallels) or as different as possible (to avoid confusion between these two concepts).</p>",
        "id": 204079895,
        "sender_full_name": "RalfJ",
        "timestamp": 1594904797
    },
    {
        "content": "<p>I mentioned it on that post, but the general term of Undefined Behaviour is just that. It's not a term which rust should reserve for itself. Language UB (or likewise Language Level UB, or Core Language UB) certainly could (there is precedent to do so).<br>\nAbandoning the term is honestly not a good idea in my opinion. It has connotations which no other term really possesses (anyone heard of Nasal Demons).</p>",
        "id": 204097069,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594912231
    },
    {
        "content": "<p>For a positive term, the term \"Correct\" is one I frequently associate with not having any compile-time errors (IE. well-formed or not ill-formed), and that doesn't evaluate a construct which has undefined behaviour. That could be adopted.</p>",
        "id": 204097877,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594912576
    },
    {
        "content": "<p>I think that \"language invariant\" and \"library invariant\" remain a very poor pairing of terms exactly because they have the same initials.</p>",
        "id": 204098851,
        "sender_full_name": "Lokathor",
        "timestamp": 1594912984
    },
    {
        "content": "<p>it works if abbreviated as LangI and LibI</p>",
        "id": 204111030,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1594918246
    },
    {
        "content": "<p>Still too close. There's a lot of English words, we can pick ones that aren't so close together</p>",
        "id": 204118812,
        "sender_full_name": "Lokathor",
        "timestamp": 1594922013
    },
    {
        "content": "<p>compiler-UB and library-UB?</p>",
        "id": 204119462,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1594922287
    },
    {
        "content": "<p>that's fine</p>",
        "id": 204120163,
        "sender_full_name": "Lokathor",
        "timestamp": 1594922622
    },
    {
        "content": "<p>I'm a big fan of validity invariant and safety invariant, no reason to not use those</p>",
        "id": 204120270,
        "sender_full_name": "Lokathor",
        "timestamp": 1594922656
    },
    {
        "content": "<p>should definitely try to make them be LUB and GLB just to really make compiler work confusing</p>",
        "id": 204154852,
        "sender_full_name": "Gankra",
        "timestamp": 1594941522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/204097069\">said</a>:</p>\n<blockquote>\n<p>I mentioned it on that post, but the general term of Undefined Behaviour is just that. It's not a term which rust should reserve for itself. Language UB (or likewise Language Level UB, or Core Language UB) certainly could (there is precedent to do so).<br>\nAbandoning the term is honestly not a good idea in my opinion. It has connotations which no other term really possesses (anyone heard of Nasal Demons).</p>\n</blockquote>\n<p>nobody ever claimed Rust reserves the term for itself. to my knowledge, what we do is entirely consistent with what C/C++ do, including the language UB / library UB distinction. we are just more clear about it.</p>",
        "id": 204196690,
        "sender_full_name": "RalfJ",
        "timestamp": 1594986638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/204098851\">said</a>:</p>\n<blockquote>\n<p>I think that \"language invariant\" and \"library invariant\" remain a very poor pairing of terms exactly because they have the same initials.</p>\n</blockquote>\n<p>fair. I am not a fan of \"compiler invariant\" though because the compiler is just an implementation of the language spec. miri is another one. this invariant is understood (in different ways) by both.</p>",
        "id": 204196754,
        "sender_full_name": "RalfJ",
        "timestamp": 1594986688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/204120270\">said</a>:</p>\n<blockquote>\n<p>I'm a big fan of validity invariant and safety invariant, no reason to not use those</p>\n</blockquote>\n<p>not to rehash the same old argument again, but the issue with those is that \"validity\" is way too ambiguous. data violating the asafety invariant is also \"invalid\" in some sense.</p>",
        "id": 204196838,
        "sender_full_name": "RalfJ",
        "timestamp": 1594986754
    },
    {
        "content": "<p>I'd honestly argue that keeping a distinction, except in technical documents (such as the reference, and any future language specification), isn't a good idea. It's a great way to get people to justify UB:</p>\n<blockquote>\n<p>Well it's a safety invariant, so its fine as long as I'm careful</p>\n</blockquote>\n<p>In my opinion as an api developer, its still UB to violate a safety invariant, the effects are what are deferred. A safety invariant being broken shouldn't magically allow unsoundness, it should be the UB of breaking it in the first place. What happens if a future version implements an optimization, and the safety invariant gets upgrade to a validity invariant. While it is true that knowing the internals of a library makes it less erroneous (I've caused library-level UB in one of my libraries, but I know its fine because I won't break the libraries internal code), its still UB and should be treated as such.</p>",
        "id": 204200432,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594989465
    },
    {
        "content": "<p>what you said IMO is a great argument for clearly communicating the distinction</p>",
        "id": 204200874,
        "sender_full_name": "RalfJ",
        "timestamp": 1594989729
    },
    {
        "content": "<p>because it's just not true that the world will end when you create a non-UTF-8 string. but it <em>is</em> true that the world will end when you transmute 3 to a <code>bool</code>.</p>",
        "id": 204200908,
        "sender_full_name": "RalfJ",
        "timestamp": 1594989752
    },
    {
        "content": "<p>never did I suggest that we want to use this to allow unsoundness or anything like that</p>",
        "id": 204200960,
        "sender_full_name": "RalfJ",
        "timestamp": 1594989789
    },
    {
        "content": "<p>but we should truthfully communicate what is actually happening, and not paper over the fundamental difference between language UB and library UB</p>",
        "id": 204200996,
        "sender_full_name": "RalfJ",
        "timestamp": 1594989821
    },
    {
        "content": "<blockquote>\n<p>What happens if a future version implements an optimization, and the safety invariant gets upgrade to a validity invariant.</p>\n</blockquote>\n<p>that would be Rust 2.0 territory</p>",
        "id": 204201034,
        "sender_full_name": "RalfJ",
        "timestamp": 1594989842
    },
    {
        "content": "<p>once we have a proper langauge spec, we can never strengthen the validity invariant. that's the point. the validity invariant / language UB is the bedrock that everything rests on.</p>",
        "id": 204201095,
        "sender_full_name": "RalfJ",
        "timestamp": 1594989863
    },
    {
        "content": "<p>thus we need to be as precise as we can, without scaring away people by using mathematical notation.</p>",
        "id": 204201113,
        "sender_full_name": "RalfJ",
        "timestamp": 1594989878
    },
    {
        "content": "<p>strengthening the validity invariant of Rust would be like strengthening the (clearly documented) safety invariant of a library -- it's a breaking change.</p>",
        "id": 204201296,
        "sender_full_name": "RalfJ",
        "timestamp": 1594990014
    },
    {
        "content": "<blockquote>\n<p>, its still UB and should be treated as such.</p>\n</blockquote>\n<p>you keep saying that. I never said anything else -- it's still <em>library UB</em> and should be treated as such. it's a critical soundness bug, like language UB. but I think for a proper understanding of UB it is important that one is able to appreciate the difference between language UB and library UB.</p>",
        "id": 204201374,
        "sender_full_name": "RalfJ",
        "timestamp": 1594990082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Where do you see things like <code>String::from_utf8_checked</code> fitting in that? (To be clear; I agree with your distinction)</p>",
        "id": 204202685,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1594990900
    },
    {
        "content": "<p>that function let's you bypass a check that can prevent library UB. If you call it with <code>&amp;[0xFF]</code> you'll certainly open yourself up to library UB, which is why it's unsafe.</p>",
        "id": 204204241,
        "sender_full_name": "Lokathor",
        "timestamp": 1594991829
    },
    {
        "content": "<blockquote>\n<p>not to rehash the same old argument again, but the issue with those is that \"validity\" is way too ambiguous. data violating the safety invariant is also \"invalid\" in some sense.</p>\n</blockquote>\n<p>Several people seem to have a not-fully-accurate view of exactly how the term UB applies as well :3 I think that \"we would have to explain our terms\" isn't convincing because even as you've been saying lib UB and lang UB this entire time you <em>still</em> are having to explain yourself. I think this has a lot to do with the C/C++ folks not having a clear separation here, but ultimately the reason is unimportant. The <strong>effect</strong> is that we have to explain our terms no matter what terms we pick.</p>\n<p>But I spend nearly every day in the Community Discord helping to educate people about unsafe code, and generally a programmer just needs it explained once to understand the validity/safety distinction. After that they may have a question about if a particular bit of UB is from validity invariants or safety invariants, but they never seem to confuse the terms themselves.</p>",
        "id": 204205469,
        "sender_full_name": "Lokathor",
        "timestamp": 1594992521
    },
    {
        "content": "<blockquote>\n<p>that is Rust 2.0 territory</p>\n</blockquote>\n<p>What I meant was a future version of a 3rd party library that documents an invariant, but its not backed by a language-level invariant. By not distinguishing between them, I can in the future upgrade to a language-level invariant so that rust can optimize my code better. Strictly speaking, with a documented distinction, that would be a breaking change (you can produce a value with a broken safety invariant, but you can't use it, as you have mentioned)</p>\n<blockquote>\n<p>It's still <em>library UB</em> and should be treated as such</p>\n</blockquote>\n<p>Indeed, and the library reserves the right to do whatever it wants if you violate it, even if it doesn't explicitly cause anything rust itself considers undefined. I can still format your hard drive, print hello world, summon nasal demons or blow up the moon just as much as rust can.   The point is, UB is UB, no matter what level it happens at. In all cases, if you know the implementation won't explode, you can use it just fine, but you have to be a position to forever know that (documented extension, or you writing are the implementation). Beyond that, once you start justifying any UB, you might as well grab a footgun. In my libraries, if I document an invariant, precondition, or other requirement it is immediately undefined behaviour to violate it. </p>\n<p>This is why I don't like a distinction. Its undefined behaviour. Full stop.</p>",
        "id": 204208914,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594994386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/204202685\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> Where do you see things like <code>String::from_utf8_checked</code> fitting in that? (To be clear; I agree with your distinction)</p>\n</blockquote>\n<p>you mean \"unchecked\" I assume? violating the precondition is library UB, but on its own there is no lang UB.</p>",
        "id": 204211280,
        "sender_full_name": "RalfJ",
        "timestamp": 1594995649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> well, \"valid\" is a general term, that's the confusion. It's \"not jargon enough\".^^</p>",
        "id": 204211339,
        "sender_full_name": "RalfJ",
        "timestamp": 1594995666
    },
    {
        "content": "<blockquote>\n<p>What I meant was a future version of a 3rd party library that documents an invariant, but its not backed by a language-level invariant. By not distinguishing between them, I can in the future upgrade to a language-level invariant so that rust can optimize my code better. Strictly speaking, with a documented distinction, that would be a breaking change (you can produce a value with a broken safety invariant, but you can't use it, as you have mentioned)</p>\n</blockquote>\n<p>library authors may assume their clients do not cause library UB, for the purpose of semver. I see no problem here.</p>",
        "id": 204211414,
        "sender_full_name": "RalfJ",
        "timestamp": 1594995701
    },
    {
        "content": "<p>The main problem is the way its worded in documentation, its valid to violate a safety invariant, it just may lead to undefined behaviour using it.</p>",
        "id": 204211519,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594995758
    },
    {
        "content": "<blockquote>\n<p>This is why I don't like a distinction. Its undefined behaviour. Full stop.</p>\n</blockquote>\n<p><em>shrug</em> there's not much I can do when you just repeat your same statement in response to each of my arguments.<br>\nI wish you good luck explaining to your users why violating the assumptions of your library does not cause an error in <a href=\"https://github.com/rust-lang/miri/\">Miri</a> even when/if Miri reliably detects all UB -- by which of course I mean all language UB, because that is the only UB that exists in the Rust spec. this is one case where the distinction is blatantly obvious. trying to hide it will only cause confusion.</p>\n<p>making this distinction might make some folks uncomfortable that are too wed to the fuzzy treatment of UB in C/C++, but I think I can live with that.</p>",
        "id": 204211714,
        "sender_full_name": "RalfJ",
        "timestamp": 1594995848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/204211519\">said</a>:</p>\n<blockquote>\n<p>The main problem is the way its worded in documentation, its valid to violate a safety invariant, it just may lead to undefined behaviour using it.</p>\n</blockquote>\n<p>not sure where you quoted that from, but yes this is correct. if your users violate a safety invariant and then <em>never pass that data to your library again</em>, they may rely on nothing going wrong.</p>",
        "id": 204211812,
        "sender_full_name": "RalfJ",
        "timestamp": 1594995896
    },
    {
        "content": "<p>there was an example of that in the thread (temporarily violating the <code>str</code> safety invariant of UTF-8). no possible update of <code>str</code> can make that code UB.</p>",
        "id": 204211889,
        "sender_full_name": "RalfJ",
        "timestamp": 1594995934
    },
    {
        "content": "<p>so this is yet another argument for making and communicating that distinction.</p>",
        "id": 204211910,
        "sender_full_name": "RalfJ",
        "timestamp": 1594995945
    },
    {
        "content": "<blockquote>\n<p>once you start justifying any UB, you might as well grab a footgun</p>\n</blockquote>\n<p>indeed there is no justifying of UB. I am sorry if anything I say came across as such.</p>",
        "id": 204212138,
        "sender_full_name": "RalfJ",
        "timestamp": 1594996052
    },
    {
        "content": "<p><code>unsafe</code> Rust is all about flirting with UB but never giving in. that's why it is so important to know exactly where the line goes -- or the lines, as it were.</p>",
        "id": 204212193,
        "sender_full_name": "RalfJ",
        "timestamp": 1594996082
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/why-even-unused-data-needs-to-be-valid/12734/9?u=ralfjung\">this example</a> is <em>not</em> library UB, I hope we agree on that? it is certainly not lang UB. but to even explain what happens we need both safety invariant and validity invariant.</p>",
        "id": 204212390,
        "sender_full_name": "RalfJ",
        "timestamp": 1594996167
    },
    {
        "content": "<p>What if I had a type that contains a raw pointer, but it has invariants that it must be valid to dereference, unique, and well-aligned, but I may need to internally break those invariants, so it stays as either a raw pointer or NonNull. Then a future version, I get rid of that. Would it be valid to change it to a reference? Under the rules I've seen its a safety invariant, so changing it to a reference causes undefined behaviour in code that creates the type and does nothing with it. Or would it be a prerequisite to document that something is a Safety Invariant?</p>",
        "id": 204212789,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594996336
    },
    {
        "content": "<p>I dont follow the example. </p>\n<blockquote>\n<p>but I may need to internally break those invariants</p>\n</blockquote>\n<p>if you donst distinguish library UB and language UB, this is UB! because UB is UB as you said. so you better dont do this.</p>",
        "id": 204213318,
        "sender_full_name": "RalfJ",
        "timestamp": 1594996580
    },
    {
        "content": "<p>oh no zulip swallowed half my post... at least...</p>",
        "id": 204213399,
        "sender_full_name": "RalfJ",
        "timestamp": 1594996627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257758\">@Connor Horman</span> If you need to upgrade the restrictions on a function or type from being a safety invariant to a validity invariant, that is a breaking change in your semver. You're free to do it, but of course you should clearly explain to the users what's going on and what's different from before.</p>",
        "id": 204214032,
        "sender_full_name": "Lokathor",
        "timestamp": 1594996954
    },
    {
        "content": "<p>(too many tunnels on this train track...)</p>",
        "id": 204214085,
        "sender_full_name": "RalfJ",
        "timestamp": 1594996977
    },
    {
        "content": "<p>I'm allowed to break my libraries internal invariants because I know how to step arround it. Its fragile, but its an implementation detail and I control the invariants. </p>\n<blockquote>\n<p>If you [are forever in a position] to know the implementation won't explode [its valid] (documented extension <strong>or</strong> you are writing the implementation)</p>\n</blockquote>\n<p>That rests as the only exception I make to my \"don't justify UB rule\". Certain types of libraries (in particular, standard libraries) are impossible without causing undefined behaviour. However, in that privileged position, you know how the implementation will respond to the UB, so its valid as long as you are careful. But that <em>only</em> applies to documented extensions or when you are the implementor and can ensure that your internal stuff does not break, but still externally call it UB.</p>",
        "id": 204214165,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594997018
    },
    {
        "content": "<p>okay so regarding the example -- what is the \"that\" you get rid of? also, if you didnt document a safety invariant in the first place, I dont understand what you are worried about. people cant just make up a safety invariant and transmute your type around based on that...</p>",
        "id": 204214169,
        "sender_full_name": "RalfJ",
        "timestamp": 1594997019
    },
    {
        "content": "<blockquote>\n<p>I'm allowed to break my libraries internal invariants because I know how to step arround it. Its fragile, but its an implementation detail and I control the invariants. </p>\n</blockquote>\n<p>you may not do the same with language UB though. so here we have another good reason to distinguish the two.</p>",
        "id": 204214264,
        "sender_full_name": "RalfJ",
        "timestamp": 1594997050
    },
    {
        "content": "<p>at this point I dont even know what we are disucssing any more, TBH. it seems to have to do with semver (as you keep bringing up situations where you <em>change</em> an existing library), which is rather off-topic.</p>",
        "id": 204214333,
        "sender_full_name": "RalfJ",
        "timestamp": 1594997084
    },
    {
        "content": "<p>That is certainly fair, within libraries themselves they can't internally violate any language invariants, but they also can't internally violate any invariants of dependencies.</p>",
        "id": 204214566,
        "sender_full_name": "Connor Horman",
        "timestamp": 1594997201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> So how does the <code>unsafe fn</code> come in with <code>String::from_utf8_unchecked</code>? As in I’ve often heard that <code>unsafe</code> is for language UB and you should not use it for library behaviour.</p>",
        "id": 204215559,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1594997711
    },
    {
        "content": "<p>Or is it language UB because of <code>str</code>?</p>",
        "id": 204215854,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1594997841
    },
    {
        "content": "<p>It is <code>unsafe</code>, as violating the contract can cause language UB later on when calling safe methods on the <code>String</code>/<code>&amp;str</code>.</p>",
        "id": 204218480,
        "sender_full_name": "bjorn3",
        "timestamp": 1594999027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/204215559\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> So how does the <code>unsafe fn</code> come in with <code>String::from_utf8_unchecked</code>? As in I’ve often heard that <code>unsafe</code> is for language UB and you should not use it for library behaviour.</p>\n</blockquote>\n<p>yeah fair. as <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> said -- if you made it safe, then there would be language UB in safe code by combining from_utf8_unchecked with some other operations.</p>",
        "id": 204221264,
        "sender_full_name": "RalfJ",
        "timestamp": 1595000358
    },
    {
        "content": "<p>so a more precise way to put it would be to say that <code>unsafe</code> is for <em>soundness</em> and not things like memory leaks that are unrrelated to soundness</p>",
        "id": 204221325,
        "sender_full_name": "RalfJ",
        "timestamp": 1595000395
    },
    {
        "content": "<p>but it is the nature of library UB that usually, it exists to avoid underlying language UB. that is the connection here.</p>",
        "id": 204221439,
        "sender_full_name": "RalfJ",
        "timestamp": 1595000435
    },
    {
        "content": "<p>soundness is defined as \"cannot cause language UB from safe code\"</p>",
        "id": 204221440,
        "sender_full_name": "RalfJ",
        "timestamp": 1595000435
    },
    {
        "content": "<p>Some more thinking about this made me realize one thing: the concerns around \"library-level UB\" are actually very very similar to the concerns around, e.g., relying on unspecified data layout. The current consensus for terminology there (I think) is that exploiting data layout is not on its own UB (if the assumed data layout matches reality), but it could cause UB whenever data layout changes (as e.g. <code>repr(Rust)</code> layout has very few stable guarantees). This is <em>unspecified behavior</em>.<br>\nThis is a lot like library-level UB, where a large part of the concern is being able to change implementation details of the library without breaking clients. So in that sense it would make more sense to say that violating library contracts leads to <em>unspecified behavior</em>.</p>\n<p>Using \"Unspecified behavior\" in a spec only makes sense when also describing the set of options that the spec may choose from -- e.g., data layout is unspecified, and the set of options is that rustc could pick any possible order, padding and offsets for the fields of a struct. For a library, typically the set of options when the client wanders into the unspecified parts of the API includes language-level UB. For a client of the library, whether an operation is \"definitely causing language-level UB\" or \"unspecified and one of the options is language-level UB\" is equivalent, but when one digs a bit deeper into things like we did here, there is a huge difference. I wonder if that is the source of some of the disagreement here about whether or not and if yes how language-UB and \"library-UB\" should be distinguished.</p>\n<p>I also wonder how all of this can help us to find some proper terminology that we can then start applying everywhere...</p>",
        "id": 208194606,
        "sender_full_name": "RalfJ",
        "timestamp": 1598520446
    },
    {
        "content": "<p>It almost seems like the best option is to rename Unspec. Behavior to \"Undefined Behavior\" (and indeed this is rather close to how UB was used in C originally) and find a different term for \"programs that violate fundamental compiler/language expectations\", but that would certainly confuse <em>everyone</em> so it's a complete no-go.^^</p>",
        "id": 208194885,
        "sender_full_name": "RalfJ",
        "timestamp": 1598520710
    },
    {
        "content": "<p>Terminology is a minefield. I agree that \"undefined behaviour\" is fixed in people's mind. I recently differentiated the two concepts as \"undefined behaviour is guaranteed to never be defined\" vs. \"behaviour that is currently not defined or which might change\". not perfect definitions, and not exactly snappy, but i agree that there is something very important here which can usefully be teased out</p>",
        "id": 208207064,
        "sender_full_name": "Laurence Tratt",
        "timestamp": 1598529796
    },
    {
        "content": "<p>That's not the best definition because everything is UB until it's defined. So if something is UB that's not any assurance that it will always be UB.</p>",
        "id": 208214942,
        "sender_full_name": "Lokathor",
        "timestamp": 1598534299
    },
    {
        "content": "<p>some things are (more-or-less) guaranteed to be UB forever; some, as you say, are just UB for now. it can be helpful to know which is which. at the moment we lack the terminology to easily differentiate them</p>",
        "id": 208215615,
        "sender_full_name": "Laurence Tratt",
        "timestamp": 1598534644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/208214942\">said</a>:</p>\n<blockquote>\n<p>That's not the best definition because everything is UB until it's defined. So if something is UB that's not any assurance that it will always be UB.</p>\n</blockquote>\n<p>No, things are only UB when the spec explicitly says they are.</p>",
        "id": 208364362,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631761
    },
    {
        "content": "<p>confusingly, \"undefined\" != \"not defined\"</p>",
        "id": 208364372,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631768
    },
    {
        "content": "<p>if the spec doesnt talk about a case, that's a bug in the spec. the spec is incomplete.</p>",
        "id": 208364389,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631780
    },
    {
        "content": "<p>AFAIK the C spec explicitly says something like \"if this spec doesnt cover some case, that case is UB\". (so what you say is right for C.) I feel very strongly that Rust should not do this.</p>",
        "id": 208364465,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631834
    },
    {
        "content": "<p>it's like exhaustiveness checking for <code>match</code> -- when we dont cover a case, that's a bug. we shouldn't have an implicit \"UB\" fallback.</p>",
        "id": 208364524,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631851
    },
    {
        "content": "<p>I was just about to say something about this being different in C haha</p>",
        "id": 208364528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598631853
    },
    {
        "content": "<p>however, \"undefined behaviour is guaranteed to never be defined\" is not true either <span class=\"user-mention\" data-user-id=\"252006\">@Laurence Tratt</span>  -- future versions of Rust can turn UB into defined behavior.</p>",
        "id": 208364588,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631894
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252006\">Laurence Tratt</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/208215615\">said</a>:</p>\n<blockquote>\n<p>some things are (more-or-less) guaranteed to be UB forever; some, as you say, are just UB for now. it can be helpful to know which is which. at the moment we lack the terminology to easily differentiate them</p>\n</blockquote>\n<p>I don't disagree, but this is not the distinction we are talking about here. so I'd prefer if we would ignore this extra distinction for now to not make things even harder than they already are.^^</p>",
        "id": 208364664,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631944
    },
    {
        "content": "<p>to be clear, the distinction we are talking about here is between what I think is currently usually called language-level UB, language-level <em>unspecified</em> behavior, and library-level UB.</p>",
        "id": 208364754,
        "sender_full_name": "RalfJ",
        "timestamp": 1598631978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/208364588\">said</a>:</p>\n<blockquote>\n<p>however, \"undefined behaviour is guaranteed to never be defined\" is not true either <span class=\"user-mention silent\" data-user-id=\"252006\">Laurence Tratt</span>  -- future versions of Rust can turn UB into defined behavior.</p>\n</blockquote>\n<p>i agree :) i didn't mean that's what the terms should mean; rather that i needed to differentiate between those two concepts, and lacking any terminology had to resort to <em>something</em>. i'm in agreement with your general plan to tease apart decent meanings</p>",
        "id": 208366043,
        "sender_full_name": "Laurence Tratt",
        "timestamp": 1598632646
    },
    {
        "content": "<blockquote>\n<p>confusingly, \"undefined\" != \"not defined\"</p>\n</blockquote>\n<p>Ralf sometimes you make me very, very sad</p>",
        "id": 208408305,
        "sender_full_name": "Lokathor",
        "timestamp": 1598661587
    },
    {
        "content": "<p>Honestly while it might be frustrating from a linguistic point of view, it's an extremely relieving policy to hear, as someone who writes a decent amount of unsafe code</p>",
        "id": 208412026,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1598667429
    },
    {
        "content": "<p>as someone who also writes quite a bit of unsafe code, i think it provides an additional complexity</p>",
        "id": 208412228,
        "sender_full_name": "Lokathor",
        "timestamp": 1598667732
    },
    {
        "content": "<p>instead of defined/not-defined (which is effectively a bool), we get defined/not-defined/spec-missing (which is an Option&lt;bool&gt;)</p>",
        "id": 208412248,
        "sender_full_name": "Lokathor",
        "timestamp": 1598667789
    },
    {
        "content": "<p>Well you can <code>unwrap_or_default()</code> or file a bug. Probably both.</p>",
        "id": 208414538,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1598671508
    },
    {
        "content": "<p>anyway part of my enthusiasm here comes from years of frustration with the c++ standard's stance around UB, which is as you state: anything not explicitly defined is UB. in practice this leads to spec bugs being insta-UB, cemented wording choices, and a ton of other really hard to reason about dodginess.</p>\n<p>you also end up doing a lot of guessing about what the spec is really saying in some of the particularly dense parts, and trying to figure out \"is the reason they said it in this manner intended to explicitly leave something undefined?\" in any case where the wording is just a bit weird.</p>",
        "id": 208417192,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1598676404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/208408305\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>confusingly, \"undefined\" != \"not defined\"</p>\n</blockquote>\n<p>Ralf sometimes you make me very, very sad</p>\n</blockquote>\n<p>I didn't make up that terminology I am afraid.^^</p>",
        "id": 208425925,
        "sender_full_name": "RalfJ",
        "timestamp": 1598694009
    },
    {
        "content": "<p>I would also think that this helps unsafe code authors, as they no longer have to infer things from <em>absence</em> of inforamtion</p>",
        "id": 208425937,
        "sender_full_name": "RalfJ",
        "timestamp": 1598694073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Language.20UB.20vs.20library.20UB/near/208412248\">said</a>:</p>\n<blockquote>\n<p>instead of defined/not-defined (which is effectively a bool), we get defined/not-defined/spec-missing (which is an Option&lt;bool&gt;)</p>\n</blockquote>\n<p>really you should never run into spec-missing. once we have a spec, that is.^^</p>\n<p>this is just like rustc -- you would think you have compiles/compile-error. but no, really you have compiles/compile-error/ICE. the latter is a compiler bug.</p>",
        "id": 208425986,
        "sender_full_name": "RalfJ",
        "timestamp": 1598694154
    }
]